/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.krawler.spring.accounting.reports;

import com.krawler.accounting.integration.common.IntegrationCommonService;
import com.krawler.accounting.integration.common.IntegrationConstants;
import com.krawler.common.admin.*;
import com.krawler.common.dao.BaseDAO;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.*;
import com.krawler.common.util.FieldConstants;
import com.krawler.common.util.StringUtil;
import com.krawler.common.util.ValuationMethod;
import com.krawler.hql.accounting.*;
import com.krawler.hql.accounting.companypreferenceservice.CompanyReportConfigurationService;
import com.krawler.inventory.model.stock.StockService;
import com.krawler.inventory.model.stockout.StockAdjustment;
import com.krawler.inventory.model.stockout.StockAdjustmentDAO;
import com.krawler.inventory.model.store.Store;
import com.krawler.spring.accounting.account.accAccountDAO;
import com.krawler.spring.accounting.account.accAccountHandler;
import com.krawler.spring.accounting.companypreferances.accCompanyPreferencesDAO;
import com.krawler.spring.accounting.creditnote.accCreditNoteDAO;
import com.krawler.spring.accounting.currency.accCurrencyDAO;
import com.krawler.spring.accounting.debitnote.accDebitNoteDAO;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptDAO;
import com.krawler.spring.accounting.handler.AccountingHandlerDAO;
import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.spring.accounting.invoice.*;
import com.krawler.spring.accounting.jasperreports.BankBook;
import com.krawler.spring.accounting.journalentry.accJournalEntryDAO;
import com.krawler.spring.accounting.loan.accLoanDAO;
import com.krawler.spring.accounting.product.PriceValuationStack;
import com.krawler.spring.accounting.masteritems.accMasterItemsDAO;
import com.krawler.spring.accounting.product.accProductDAO;
import com.krawler.spring.accounting.product.service.AccProductService;
import com.krawler.spring.accounting.receipt.AccReceiptServiceDAO;
import com.krawler.spring.accounting.receipt.AccReceiptServiceImpl;
import com.krawler.spring.accounting.receipt.accReceiptDAO;
import com.krawler.spring.accounting.tax.accTaxDAO;
import com.krawler.spring.accounting.vendorpayment.AccVendorPaymentServiceDAO;
import com.krawler.spring.accounting.vendorpayment.accVendorPaymentDAO;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.common.fieldDataManager;
import com.krawler.spring.accounting.bankreconciliation.accBankReconciliationDAO;
import com.krawler.spring.exportFuctionality.AccExportReportsServiceImpl;
import com.krawler.spring.sessionHandler.sessionHandlerImpl;
import com.krawler.spring.writeOffInvoice.accWriteOffServiceDao;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import java.io.*;
import java.lang.reflect.Method;
import java.net.URLDecoder;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.*;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.JRPdfExporterParameter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import org.joda.time.Period;
import org.springframework.context.MessageSource;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.springframework.web.servlet.support.RequestContextUtils;
import com.krawler.inventory.model.store.StoreService;
import com.krawler.companypref.util.CompanyReportConfigConstants;
import com.krawler.esp.handlers.APICallHandlerService;
import com.krawler.inventory.model.stockout.StockAdjustmentCustomData;
import com.krawler.spring.accounting.customDesign.CustomDesignHandler;
import com.krawler.spring.accounting.vendor.accVendorDAO;
import com.krawler.spring.auditTrailModule.auditTrailDAO;
import com.krawler.spring.common.AccCommonTablesDAO;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import javax.security.auth.login.AccountException;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateUtils;
import com.krawler.spring.accounting.goodsreceipt.AccGoodsReceiptServiceHandler;
import com.krawler.spring.accounting.payment.accPaymentDAO;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptCMN;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptControllerCMN;
import com.krawler.spring.accounting.jasperreports.FinanceDetails;
import com.krawler.spring.accounting.jasperreports.GeneralLedger;
import com.krawler.spring.accounting.jasperreports.OnlyDatePojo;
import com.krawler.spring.accounting.journalentry.accJournalEntryImpl;
import com.krawler.spring.common.fieldManagerDAO;
import com.krawler.spring.common.kwlCommonTablesDAO;
import com.krawler.spring.exportFunctionality.exportMPXDAOImpl;
import com.krawler.spring.mrp.WorkOrder.WorkOrder;
import net.sf.jasperreports.engine.JRExporterParameter;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.mutable.MutableDouble;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;


/**
 *
 * @author krawler
 */
public class AccReportsServiceImpl extends BaseDAO implements AccReportsService{
     private MessageSource messageSource;
     private AccountingHandlerDAO accountingHandlerDAOobj;
     private accCompanyPreferencesDAO accCompanyPreferencesObj;
     private accProductDAO accProductObj;
     private accCurrencyDAO accCurrencyDAOobj;
     private accGoodsReceiptDAO accGoodsReceiptDAOObj;
     private accDebitNoteDAO accDebitNoteobj;
     private accAccountDAO accAccountDAOobj;
     private accInvoiceCMN accInvoiceCommon;
     private accJournalEntryDAO accJournalEntryobj;
     private accVendorPaymentDAO accVendorPaymentobj;
     private HibernateTransactionManager txnManager;
     private accInvoiceDAO accInvoiceDAOobj;
     private accLoanDAO accLoanDAOobj;
     private accBankReconciliationDAO accBankReconciliationObj;
     private accCreditNoteDAO accCreditNoteobj;
     private accReceiptDAO accReceiptDao;   
     private AccVendorPaymentServiceDAO accVendorPaymentServiceDAOobj;
     private AccReceiptServiceDAO accReceiptServiceDAOobj;
     private accWriteOffServiceDao accWriteOffServiceDao;
     private StockAdjustmentDAO stockAdjustmentDAO;
     private accMasterItemsDAO accMasterItemsDAOobj;
     private StockService stockService;
     private accTaxDAO accTaxObj;
     private fieldDataManager fieldDataManagercntrl;
     private AccTemplateReportService accTemplateReportService;
    private AccProductService AccProductService;
    private StoreService storeService;
    private static final DateFormat yyyyMMdd_HIPHON = new SimpleDateFormat("yyyy-MM-dd");
    private AccCommonTablesDAO accCommonTablesDAO;
    private auditTrailDAO auditTrailObj;
    private accVendorDAO accVendorDAOobj;
    private accGoodsReceiptCMN accGoodsReceiptCommon;
    private accPaymentDAO accPaymentDAOobj;
    private CompanyReportConfigurationService companyReportConfigurationServiceObj;
    private fieldManagerDAO fieldManagerDAOobj;
    private exportMPXDAOImpl exportDaoObj;
    private IntegrationCommonService integrationCommonService;
    private kwlCommonTablesDAO kwlCommonTablesDAOObj;
    private APICallHandlerService apiCallHandlerService; 

    public void setIntegrationCommonService(IntegrationCommonService integrationCommonService) {
        this.integrationCommonService = integrationCommonService;
    }
    
    public void setApiCallHandlerService(APICallHandlerService apiCallHandlerService) {     
        this.apiCallHandlerService = apiCallHandlerService;
    }
    public void setaccPaymentDAO(accPaymentDAO accPaymentDAOobj) {
        this.accPaymentDAOobj = accPaymentDAOobj;
    }
    
    public void setexportMPXDAOImpl(exportMPXDAOImpl exportDaoObj) {
        this.exportDaoObj = exportDaoObj;
    }

    public void setaccGoodsReceiptCMN(accGoodsReceiptCMN accGoodsReceiptCommon) {
        this.accGoodsReceiptCommon = accGoodsReceiptCommon;
    }
    
    public void setaccTemplateReportService(AccTemplateReportService accTemplateReportService) {
        this.accTemplateReportService = accTemplateReportService;
    }
    
    public void setaccCommonTablesDAO(AccCommonTablesDAO accCommonTablesDAO) {
        this.accCommonTablesDAO = accCommonTablesDAO;
    }
    public void setAccProductService(AccProductService AccProductService) {
        this.AccProductService = AccProductService;
    }
    public void setaccVendorPaymentServiceDAO(AccVendorPaymentServiceDAO accVendorPaymentServiceDAOobj) {
        this.accVendorPaymentServiceDAOobj = accVendorPaymentServiceDAOobj;
    }
    public void setAccReceiptServiceDAO(AccReceiptServiceDAO accReceiptServiceDAOobj) {
        this.accReceiptServiceDAOobj = accReceiptServiceDAOobj;
    }
    public void setMessageSource(MessageSource msg) {
		this.messageSource = msg;
    }
    public void setaccountingHandlerDAO(AccountingHandlerDAO AccountingHandlerDAOobj) {
        this.accountingHandlerDAOobj = AccountingHandlerDAOobj;
    }
    public void setaccBankReconciliationDAO(accBankReconciliationDAO accBankReconciliationObj) {
        this.accBankReconciliationObj = accBankReconciliationObj;
    }
    public void setaccCompanyPreferencesDAO(accCompanyPreferencesDAO accCompanyPreferencesObj) {
        this.accCompanyPreferencesObj = accCompanyPreferencesObj;
    }
    public void setaccProductDAO(accProductDAO accProductObj) {
        this.accProductObj = accProductObj;
    }
    public void setaccCurrencyDAO(accCurrencyDAO accCurrencyDAOobj) {
        this.accCurrencyDAOobj = accCurrencyDAOobj;
    }
    public void setAccGoodsReceiptDAO(accGoodsReceiptDAO accGoodsReceiptDAOObj){
        this.accGoodsReceiptDAOObj = accGoodsReceiptDAOObj;
    }
    public void setaccDebitNoteDAO(accDebitNoteDAO accDebitNoteobj) {
        this.accDebitNoteobj = accDebitNoteobj;
    }
    public void setaccAccountDAO(accAccountDAO accAccountDAOobj) {
        this.accAccountDAOobj = accAccountDAOobj;
    }
    public void setAccInvoiceCommon(accInvoiceCMN accInvoiceCommon) {
        this.accInvoiceCommon = accInvoiceCommon;
    }
    public void setaccJournalEntryDAO(accJournalEntryDAO accJournalEntryobj) {
        this.accJournalEntryobj = accJournalEntryobj;
    }
    public void setaccVendorPaymentDAO(accVendorPaymentDAO accVendorPaymentobj) {
        this.accVendorPaymentobj = accVendorPaymentobj;
    }
    public void setTxnManager(HibernateTransactionManager txManager) {
        this.txnManager = txManager;
    }
    public void setaccInvoiceDAO(accInvoiceDAO accInvoiceDAOobj) {
        this.accInvoiceDAOobj = accInvoiceDAOobj;
    }

    public void setaccLoanDAO(accLoanDAO accLoanDAOobj) {
        this.accLoanDAOobj = accLoanDAOobj;
    }
    
    public void setaccCreditNoteDAO(accCreditNoteDAO accCreditNoteobj) {
        this.accCreditNoteobj = accCreditNoteobj;
    }

    public void setaccReceiptDAO(accReceiptDAO accReceiptDao) {
        this.accReceiptDao = accReceiptDao;
    }
    
    public void setAccWriteOffServiceDao(accWriteOffServiceDao accWriteOffServiceDao) {
        this.accWriteOffServiceDao = accWriteOffServiceDao;
    }
    
    public void setStockAdjustmentDAO(StockAdjustmentDAO stockAdjustmentDAO) {
        this.stockAdjustmentDAO = stockAdjustmentDAO;
    }

    public void setaccMasterItemsDAO(accMasterItemsDAO accMasterItemsDAOobj) {
        this.accMasterItemsDAOobj = accMasterItemsDAOobj;
    }
    public void setaccTaxDAO(accTaxDAO accTaxObj) {
        this.accTaxObj = accTaxObj;
    }
    public void setFieldDataManager(fieldDataManager fieldDataManagercntrl) {
        this.fieldDataManagercntrl = fieldDataManagercntrl;
    }
     
    public void setStockService(StockService stockService) {
        this.stockService = stockService;
    }
    public void setStoreService(StoreService storeService) {
        this.storeService = storeService;
    }

    public void setauditTrailObj(auditTrailDAO auditTrailObj) {
        this.auditTrailObj = auditTrailObj;
    }

    public void setaccVendorDAOobj(accVendorDAO accVendorDAOobj) {
        this.accVendorDAOobj = accVendorDAOobj;
    }
    
    public void setcompanyReportConfigurationServiceObj(CompanyReportConfigurationService companyReportConfigurationServiceObj) {
        this.companyReportConfigurationServiceObj = companyReportConfigurationServiceObj;
    }
    public void setFieldManagerDAO(fieldManagerDAO fieldManagerDAOobj) {
        this.fieldManagerDAOobj = fieldManagerDAOobj;
    }

    public void setkwlCommonTablesDAO(kwlCommonTablesDAO kwlCommonTablesDAOObj) {
        this.kwlCommonTablesDAOObj = kwlCommonTablesDAOObj;
    }
    
    @Override
    @Deprecated
    public JSONObject getBalanceSheet(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        com.krawler.utils.json.base.JSONObject jobj = new com.krawler.utils.json.base.JSONObject();
        try {
            boolean isConsolidationBS = request.getAttribute("consolidationBS")!=null?Boolean.FALSE.parseBoolean(request.getAttribute("consolidationBS").toString()):false;
            boolean dimensionBasedMonthlyBS = StringUtil.isNullOrEmpty(request.getParameter("dimensionBasedMonthlyBS")) ? false : Boolean.parseBoolean(request.getParameter("dimensionBasedMonthlyBS"));
            CompanyAccountPreferences pref = null;
            String companyid = "";
            if(isConsolidationBS && request.getAttribute("consolidationCompanyID") != null){
                companyid = request.getAttribute("consolidationCompanyID").toString();
            } else{
                companyid = sessionHandlerImpl.getCompanyid(request);
            }
            
            KwlReturnObject prefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);            
            if(!pref.isShowchild()) {// Anup Check to hide child customer / vendors from balance sheet
                request.setAttribute("hidechildCV", true);
            }
            boolean isForTradingAndProfitLoss = false;
            if ((request.getAttribute("isForTradingAndProfitLoss") != null)) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(request.getAttribute("isForTradingAndProfitLoss").toString());
            }
            boolean isMonthlyBalanceSheet = false; // monthly balance sheet
            if ((request.getAttribute("NewBalanceSheetCall") != null)) {
                isMonthlyBalanceSheet = Boolean.parseBoolean(request.getAttribute("NewBalanceSheetCall").toString());
            }
            boolean stockValuationFlag = true;
 
            ExtraCompanyPreferences extrapref = null;                        
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if(extraprefresult!=null&&!extraprefresult.getEntityList().isEmpty()&&extraprefresult.getEntityList().get(0)!=null){
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
                stockValuationFlag = extrapref.isStockValuationFlag();
            }

            if(extrapref != null && extrapref.isShowallaccountsinbs()) {//Check to show all accounts.
                request.setAttribute("monthlyreport", "MonthlyReport");
            }

//            Date inventoryOpeningBalanceDate = null;
//            KwlReturnObject rtObj = accProductObj.getInventoryOpeningBalanceDate(companyid);
//            List<Date> lst = rtObj.getEntityList();
//            for (Date dateObj : lst) {
//                inventoryOpeningBalanceDate = dateObj;
//            }
            double dtotal = 0, ctotal = 0, dopentotal = 0, dendtotal = 0, dperiodtotal = 0, copentotal = 0, cendtotal = 0, cperiodtotal = 0, invCloseBal = 0,invCloseBalForPandLCal = 0, invOpeBal = 0,invOpeBalForPandLCal = 0, openInvOpeBal = 0, endInvOpeBal = 0, openCloseBal = 0, endCloseBal = 0;
            double predtotal = 0, prectotal = 0, preinvCloseBal = 0, preinvOpeBal = 0;
            boolean periodView = Boolean.parseBoolean(request.getParameter("periodView"));
            Date startDate = null;
            Date endDate = null;
            if (request.getAttribute("netProfitClosesFlag") != null && (Boolean) request.getAttribute("netProfitClosesFlag")) {
                startDate = authHandler.getDateOnlyFormat().parse(request.getAttribute("stdate").toString());
                endDate = authHandler.getDateOnlyFormat().parse(request.getAttribute("enddate").toString());
            } else if (request.getAttribute("jasperreport") != null && request.getAttribute("jasperreport").equals("JasperReport")) {
                startDate = authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format((Date) request.getAttribute("jaspersdate")));
                endDate = authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format((Date) request.getAttribute("jasperenddate")));
            } else {
                startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
                endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            }
            Date startPreDate = null;
            Date endPreDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stpredate")) && !StringUtil.isNullOrEmpty(request.getParameter("endpredate"))) {
                startPreDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stpredate"));
                endPreDate = authHandler.getDateOnlyFormat().parse(request.getParameter("endpredate"));
            }
         
            Calendar calendar = Calendar.getInstance();
            if (startDate != null) {
                calendar.setTime(startDate);
            } else {
                calendar.setTime(endDate);
            }
            
            String Searchjson = request.getParameter("searchJson") != null ? request.getParameter("searchJson") : "";
            if(dimensionBasedMonthlyBS){
                Searchjson = request.getAttribute(Constants.Acc_Search_Json)!=null?request.getAttribute(Constants.Acc_Search_Json).toString():"";
            }
            if (request.getAttribute("DimensionBasedComparisionReport") != null && request.getAttribute("DimensionBasedComparisionReport").equals("DimensionBasedComparisionReport")) {
                Searchjson = request.getAttribute("DimensionBasedSearchJson").toString();
            }
            
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            if(isConsolidationBS){ //In consolidation balance sheet need data of other companies too hence passing companyid instead of getting it from session
                paramJobj.put(Constants.companyKey, companyid);
            }
            Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();

                       
            
            Map<String, Object> advSearchAttributes = null;
            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                CompanyAccountPreferences preferences = null;
                String filterConjuctionCriteria = paramJobj.optString(InvoiceConstants.Filter_Criteria, com.krawler.common.util.Constants.and);
                if (!StringUtil.isNullOrEmpty(companyid)) {
                    KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                    preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
                }
                advSearchAttributes = accJournalEntryobj.getAdvanceSearchAttributes(Searchjson, preferences, companyid, null, filterConjuctionCriteria);
            }
            
            
            /*Do not show the opening/closing stock if Perpetual Inventory Valuation is activated.*/
            
           MutableDouble[] valuationObj = new MutableDouble[9];
            if (stockValuationFlag && extrapref != null && !(extrapref.isActivateMRPModule() || pref.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                if (periodView) {//This  If part code called from Default Balance Sheet 
//                    double stock[] = calculateOpeningAndClosingStock(request, pref, extrapref, inventoryOpeningBalanceDate, companyid, startDate, endDate);
                    double[] stock= calculateOpeningAndClosingStock(paramJobj, pref, extrapref, companyid, startDate, endDate, valuationObj, advSearchAttributes, null);
                    openInvOpeBal = stock[0];
                    invOpeBal = stock[1];
                    endInvOpeBal = stock[2];
                    openCloseBal = stock[3];
                    invCloseBal = stock[4];
                    endCloseBal = stock[5];
                } else {//Below Else part code called from Period view balance Sheet 
                    HashMap<String, Object> requestParam = new HashMap<String, Object>();
                    requestParam.put("searchJson", Searchjson);
                    requestParam.put(Constants.REQ_startdate, authHandler.getDateOnlyFormat().format(startDate));
                    requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(endDate));
                    requestParam.put(Constants.companyKey, companyid);
                    requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                    requestParam.put(Constants.Filter_Criteria, paramJobj.optString(Constants.Filter_Criteria));
                    double[] valuation = AccProductService.getInventoryValuationDataForFinancialReports(new HashMap<String, Object>(requestParam));
                    if (isForTradingAndProfitLoss) {
                        request.setAttribute("isForOpeningTransactions", true);
                        paramJobj.put("isForOpeningTransactions", true);
                        invOpeBal = valuation[1];
                        invOpeBalForPandLCal = valuation[2];
                    }
                    String name = extrapref.getOpeningStockAccountId();//Only Profit and Loss Account
                    Account openingStock = null;
                    double openingstockaccountbal = 0;
                    if (!StringUtil.isNullOrEmpty(name)) {
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                        if (!StringUtil.isNullOrEmpty(extrapref.getProfitLossAccountId())) {
                            filter_names.add("ID");
                            filter_params.add(name);
                        }
                        requestParams.put("filter_names", filter_names);
                        requestParams.put("filter_params", filter_params);
                        KwlReturnObject venresult = accAccountDAOobj.getAccount(requestParams);
                        if (!venresult.getEntityList().isEmpty()) {
                            openingStock = (Account) venresult.getEntityList().get(0);
                            KwlReturnObject closingAccountBalanceResult = accJournalEntryobj.getClosingAccountBalance(openingStock.getID(), companyid, (calendar.get(Calendar.YEAR) - 1));
                            List closingAccountBalanceList = closingAccountBalanceResult.getEntityList();
                            if (!closingAccountBalanceList.isEmpty()) {
                                ClosingAccountBalance closingAccountBalance = (ClosingAccountBalance) closingAccountBalanceList.get(0);
                                openingstockaccountbal += closingAccountBalance.getAmount();
                            }
                            openingstockaccountbal += getAccountBalanceWithOutClosing(paramJobj, openingStock.getID(), startDate, endDate, advSearchAttributes);
                            invOpeBal = invOpeBal + openingstockaccountbal;
                        }
                    }
                    
                    invOpeBal = authHandler.round(invOpeBal, companyid);
                    invCloseBal = valuation[4];
                    invCloseBalForPandLCal = valuation[5];
                    String stockInHandname = extrapref.getClosingStockAccountId();//Only Profit and Loss Account
                    Account stockInHand = null;
                    double closingstockaccountbal = 0;
                    if (!StringUtil.isNullOrEmpty(stockInHandname)) {
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                        if (!StringUtil.isNullOrEmpty(extrapref.getProfitLossAccountId())) {
                            filter_names.add("ID");
                            filter_params.add(stockInHandname);
                        }
                        requestParams.put("filter_names", filter_names);
                        requestParams.put("filter_params", filter_params);
                        KwlReturnObject venresult = accAccountDAOobj.getAccount(requestParams);
                        if (!venresult.getEntityList().isEmpty()) {
                            stockInHand = (Account) venresult.getEntityList().get(0);
                            KwlReturnObject closingAccountBalanceResult = accJournalEntryobj.getClosingAccountBalance(stockInHand.getID(), companyid, (calendar.get(Calendar.YEAR) - 1));
                            List closingAccountBalanceList = closingAccountBalanceResult.getEntityList();
                            if (!closingAccountBalanceList.isEmpty()) {
                                ClosingAccountBalance closingAccountBalance = (ClosingAccountBalance) closingAccountBalanceList.get(0);
                                closingstockaccountbal += closingAccountBalance.getAmount();
                            }
                            closingstockaccountbal += getAccountBalanceWithOutClosing(paramJobj, stockInHand.getID(), startDate, endDate, advSearchAttributes);
                            invCloseBal = invCloseBal + closingstockaccountbal;
                        }
                    }
                    invCloseBal = authHandler.round(invCloseBal, companyid);
                    
                    if (startPreDate != null && endPreDate != null) {
                        requestParam.put(Constants.REQ_startdate, request.getParameter("stpredate"));
                        requestParam.put(Constants.REQ_enddate, request.getParameter("endpredate").toString());
                        valuation = AccProductService.getInventoryValuationDataForFinancialReports(new HashMap<String, Object>(requestParam));
                        preinvCloseBal = valuation[4];
                        preinvCloseBal = authHandler.round(preinvCloseBal, companyid);
                    }
                }
            } 
            double costofgoodsSoldTotal = 0,periodCostOfGoodsSold = 0,preCostOfGoodsSold =0; 
            HashMap<String, List<Account>> accountGroupMap = new HashMap<String, List<Account>>();
            HashMap<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put(Constants.companyKey, companyid);
            filterParams.put("parent", null);
            filterParams.put("order_by", "acc.acccode");
            KwlReturnObject accgroupresult =  accAccountDAOobj.getAccountGroupInfo(filterParams);
            List<Object[]> list = accgroupresult.getEntityList();
            for (Object[] row : list) {
                String grID = row[1].toString();
                List<Account> tempList = new ArrayList();
                if(accountGroupMap.containsKey(grID)) {
                    tempList = accountGroupMap.get(grID);
                }
                tempList.add((Account)row[0]);
                accountGroupMap.put(grID, tempList);
            }
            double tradingAmount1[]= {0,0,0,0,0,0};
            double tradingAmount2[] = {0,0,0,0,0,0};
            double profitLossAmount1[] = {0,0,0,0,0,0};
            double profitLossAmount2[] = {0,0,0,0,0,0};
            double grossprofit = 0,pregrossprofit = 0;
            double balance = 0,cincometotal=0,dexpensetotal=0,cincomeprectotal = 0,predexpensetotal = 0;
            double preBalance = 0;
                
            if(!periodView){ // In period view we have wriiten separate function to calculate Profit/Loss no need to give call this code
                tradingAmount1 = getTrading(request, Group.NATURE_EXPENSES, new JSONArray(), accountGroupMap, false, advSearchAttributes);
                dexpensetotal = tradingAmount1[0];
                predexpensetotal = tradingAmount1[1]; 
                tradingAmount2 = getTrading(request, Group.NATURE_INCOME, new JSONArray(), accountGroupMap, false, advSearchAttributes);
                cincometotal = tradingAmount2[0];
                cincomeprectotal = tradingAmount2[1];
                profitLossAmount1 = getProfitLoss(request, Group.NATURE_EXPENSES, new JSONArray(), accountGroupMap, false, advSearchAttributes);
                dexpensetotal += profitLossAmount1[0];
                predexpensetotal += profitLossAmount1[1];
                profitLossAmount2 = getProfitLoss(request, Group.NATURE_INCOME, new JSONArray(), accountGroupMap, false, advSearchAttributes);
                cincometotal += profitLossAmount2[0];
                cincomeprectotal += profitLossAmount2[1];
                double invPeriodBal = invOpeBalForPandLCal - invCloseBalForPandLCal;
                balance = tradingAmount1[0] + tradingAmount2[0] + profitLossAmount1[0] + profitLossAmount2[0] + invPeriodBal;//0
                preBalance = tradingAmount1[1] - preinvCloseBal + tradingAmount2[1] + profitLossAmount1[1] + profitLossAmount2[1] + preinvOpeBal;//0
                if (isForTradingAndProfitLoss) { // If "Profit And Loss Report" then calculate the total amount for CoGS account group seperately
                    request.setAttribute("isCostOfGoodsSold", true);
                    double goodsSoldAmount[] = getTrading(request, Group.NATURE_EXPENSES, new JSONArray(),accountGroupMap, false, advSearchAttributes);
                    costofgoodsSoldTotal = goodsSoldAmount[0];
                    preCostOfGoodsSold = goodsSoldAmount[1];
                    periodCostOfGoodsSold = goodsSoldAmount[3];
                    double profitLossAmountCoGS[] = getProfitLoss(request, Group.NATURE_EXPENSES, new JSONArray(), accountGroupMap, false, advSearchAttributes);
                    costofgoodsSoldTotal += profitLossAmountCoGS[0];
                    preCostOfGoodsSold += profitLossAmountCoGS[1];
                    periodCostOfGoodsSold += profitLossAmountCoGS[3];
                    request.removeAttribute("isCostOfGoodsSold");
                    /* Not included opening stock while calculating "difference in opening balance" SDP-2742 */
                    costofgoodsSoldTotal = authHandler.round((costofgoodsSoldTotal + invPeriodBal), companyid);
                    preCostOfGoodsSold = authHandler.round((preCostOfGoodsSold + preinvOpeBal - preinvCloseBal), companyid);
                    periodCostOfGoodsSold = authHandler.round((periodCostOfGoodsSold + invPeriodBal), companyid);
                    grossprofit = ((-1 * cincometotal) - costofgoodsSoldTotal) * (-1);
                    pregrossprofit = ((-1 * cincomeprectotal) - preCostOfGoodsSold) * (-1);
                    balance = ((grossprofit * (-1)) - dexpensetotal) * (-1);
                    preBalance = ((pregrossprofit * (-1)) - predexpensetotal) * (-1);
                }
            }
            double netProfitAndLossAmount=0.0;
            double openingprofitloss=0;
            double closedYrProfitAndLoss = 0;
            double endingPnl = 0;
            if (request.getAttribute("netProfitClosesFlag") == null)//normal balance sheet report call
            {
                KwlReturnObject closingAccountBalanceResultList = accCompanyPreferencesObj.getClosingBalanceList(null, (calendar.get(Calendar.YEAR) - 1), companyid);
                List<ClosingAccountBalance> closingAccountBalancesList = closingAccountBalanceResultList.getEntityList();
                HashMap<String, Date> startEndDateHashMap = getStartAndEndFinancialDate(pref, calendar.get(Calendar.YEAR) - 1);
                Date closingStartDate = startEndDateHashMap.get("startDate");
                Date closingEndDate = startEndDateHashMap.get("endDate");
                if (closingAccountBalancesList.size() > 0 && startDate.after(closingEndDate) && !isMonthlyBalanceSheet) {
                    request.setAttribute("closingFilterFlag", true);
                    request.setAttribute("closingStartDate", closingEndDate);
                    request.setAttribute("closingEndDate", openBalEndDate);
                    
                    paramJobj.put("closingFilterFlag", true);
                    paramJobj.put("closingStartDate", closingEndDate);
                    paramJobj.put("closingEndDate", openBalEndDate);
                    
                    double tradingAmount3[] = getTrading(request, Group.NATURE_EXPENSES, new JSONArray(), accountGroupMap, false, advSearchAttributes);
                    double tradingAmount4[] = getTrading(request, Group.NATURE_INCOME, new JSONArray(), accountGroupMap, false, advSearchAttributes);
                    double profitLossAmount3[] = getProfitLoss(request, Group.NATURE_EXPENSES, new JSONArray(), accountGroupMap, false, advSearchAttributes);
                    double profitLossAmount4[] = getProfitLoss(request, Group.NATURE_INCOME, new JSONArray(), accountGroupMap, false, advSearchAttributes);
                    balance += tradingAmount3[0] + tradingAmount4[0] + profitLossAmount3[0] + profitLossAmount4[0];
                    paramJobj.put("closingFilterFlag", false);
                    request.setAttribute("closingFilterFlag", false);

                }
                String name = extrapref.getProfitLossAccountId();//Only Profit and Loss Account
                if (isForTradingAndProfitLoss) {
                    JSONObject requestJSON = StringUtil.convertRequestToJsonObject(request);
                    if (isConsolidationBS) { //In consolidation balance sheet need data of other companies too hence passing companyid instead of getting it from session
                        requestJSON.put(Constants.companyKey, companyid);
                    }
                    
                    
                    double[] netprofitandloss = calculateProfitLossForTrialBalance(requestJSON, startDate, endDate, openBalEndDate, true, periodView, false, stockValuationFlag, valuationObj, advSearchAttributes);
                    openingprofitloss = netprofitandloss[1];
                    closedYrProfitAndLoss = netprofitandloss[0];
                    if (periodView) {
                        netprofitandloss = calculateProfitLossForTrialBalance(requestJSON, startDate, endDate, startDate, false, periodView, true, stockValuationFlag, valuationObj, advSearchAttributes);
                        balance = endingPnl = netprofitandloss[1];
                    } else {
                        balance = endingPnl = balance;
                    }
                } else {
                    openingprofitloss = calculateProfitAndLoss(paramJobj, new Date(1970), openBalEndDate, startPreDate, endPreDate, name, false, true,  companyid, advSearchAttributes);
                    balance = periodView ? calculateProfitAndLoss(paramJobj, startDate, endDate, startPreDate, endPreDate, name, true, false, companyid, advSearchAttributes) : balance;
                    openingprofitloss = openingprofitloss - openCloseBal;
                    balance = periodView ? (balance - invCloseBal) : balance;
                }
            } else {
                String name = extrapref.getProfitLossAccountId();//Only Profit and Loss Account
                openingprofitloss = calculateProfitAndLoss(paramJobj, new Date(1970), openBalEndDate, startPreDate, endPreDate, name, false, true,  companyid, advSearchAttributes);
                balance = periodView ? calculateProfitAndLoss(paramJobj, startDate, endDate, startPreDate, endPreDate, name, true, false, companyid, advSearchAttributes) : balance;
                
                openingprofitloss = openingprofitloss - openCloseBal;
                balance = periodView ? (balance - invCloseBal) : balance;
            }
            balance=authHandler.round(balance, companyid);
            preBalance=authHandler.round(preBalance, companyid);
            
            /*
             * Creating net profit loss object(netProfitLossObj) and adding in
             * request. So while calculating balance for balance sheet we will
             * put this object under Equity group.
             */
            boolean profitflag = false;
            boolean isNetDebit = false;
            JSONObject netProfitLossObj = null;
            if ((balance != 0 || (openingprofitloss != 0 && balance ==0)) || isMonthlyBalanceSheet) {
                if(balance < 0 || (openingprofitloss < 0 && balance ==0)){
                    isNetDebit = true;
                }
                netProfitLossObj = new JSONObject();
                netProfitLossObj.put("accountname", messageSource.getMessage("acc.report.32", null, RequestContextUtils.getLocale(request))); //Changing label from Net profit/loss to Current year earnings
                netProfitLossObj.put("accountid", "Net Profit");
                netProfitLossObj.put("level", 0);
                netProfitLossObj.put("leaf", true);
                netProfitLossObj.put("openingamount", openingprofitloss != 0 ? -openingprofitloss : openingprofitloss);
                netProfitLossObj.put("periodamount", balance != 0 ? -balance : balance);
                netProfitLossObj.put("endingamount", -(openingprofitloss + balance));
                netProfitLossObj.put("amount", balance != 0 ? -balance : balance);
                netProfitLossObj.put("preamount", 0);
                netProfitLossObj.put("isdebit", isNetDebit);
                netProfitLossObj.put("fmt", "B"); // removing formatting for Current year earnings.
                //calculation will be done according to position of net profit loss
//                dtotal -= authHandler.round(balance, companyid);   
//                dperiodtotal -= authHandler.round(balance, companyid);
//                dopentotal -= authHandler.round(openingprofitloss, companyid);
//                dendtotal -= authHandler.round((openingprofitloss+balance), companyid);
                profitflag = true;
            }
            if(preBalance != 0) {
                if(!profitflag) {
                    netProfitLossObj = new com.krawler.utils.json.base.JSONObject();
                    netProfitLossObj.put("accountname", messageSource.getMessage("acc.report.32", null, RequestContextUtils.getLocale(request)));  //"Net Profit");
                    netProfitLossObj.put("accountid", "Net Profit");
                    netProfitLossObj.put("level", 0);
                    netProfitLossObj.put("leaf", true);
                    netProfitLossObj.put("openingamount", 0);
                    netProfitLossObj.put("periodamount", 0);
                    netProfitLossObj.put("endingamount",0);
                    netProfitLossObj.put("amount", 0);
                    netProfitLossObj.put("isdebit", preBalance < 0);
                    netProfitLossObj.put("fmt", "B");                    
                }
                netProfitLossObj.put("preamount", preBalance != 0 ? -preBalance : preBalance);
//                predtotal -= preBalance;
                //adding netProfitLossObj in request.
                request.setAttribute("netProfitLossObj", netProfitLossObj);
//                jArrL.put(objlast);
            } else if((balance != 0 || (openingprofitloss != 0 && balance ==0)) || isMonthlyBalanceSheet) {
                request.setAttribute("netProfitLossObj", netProfitLossObj);
//                jArrL.put(objlast);
            }
            
            JSONArray jArrL = new JSONArray();
            JSONArray jArrR = new JSONArray();
            com.krawler.utils.json.base.JSONObject objlast = new com.krawler.utils.json.base.JSONObject();

            double tempdTotal[] = getBalanceSheet(request, Group.NATURE_LIABILITY, jArrL, accountGroupMap, advSearchAttributes);
            double tempcTotal[] = getBalanceSheet(request, Group.NATURE_ASSET, jArrR, accountGroupMap, advSearchAttributes);
            if (startPreDate != null && endPreDate != null) { // if we want previous year data 
                predtotal = (tempdTotal[1] == 0.0) ? tempdTotal[1] : -tempdTotal[1];
                prectotal = (tempcTotal[1] == 0.0) ? tempcTotal[1] : -tempcTotal[1];
            }

            if (periodView) {
                dopentotal = authHandler.round((tempdTotal[2] == 0.0) ? tempdTotal[2] : -tempdTotal[2], companyid);
                dperiodtotal = authHandler.round((tempdTotal[3] == 0.0) ? tempdTotal[3] : -tempdTotal[3], companyid);
                dendtotal = authHandler.round((tempdTotal[4] == 0.0) ? tempdTotal[4] : -tempdTotal[4], companyid);
                copentotal = authHandler.round((tempcTotal[2] == 0.0) ? tempcTotal[2] : -tempcTotal[2], companyid);
                cperiodtotal = authHandler.round((tempcTotal[3] == 0.0) ? tempcTotal[3] : -tempcTotal[3], companyid);
                cendtotal = authHandler.round((tempcTotal[4] == 0.0) ? tempcTotal[4] : -tempcTotal[4], companyid);
            } else {
                dtotal = authHandler.round((tempdTotal[0] == 0.0) ? tempdTotal[0] : -tempdTotal[0], companyid);
                ctotal = authHandler.round((tempcTotal[0] == 0.0) ? tempcTotal[0] : -tempcTotal[0], companyid);
            }            
            
            if(stockValuationFlag && extrapref != null && !(extrapref.isActivateMRPModule() || pref.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                objlast = new com.krawler.utils.json.base.JSONObject(); // renamed "Closing Stock" as "Stock in Hand"
                objlast.put("accountname", messageSource.getMessage("acc.field.StockinHand", null, RequestContextUtils.getLocale(request)));  //"Closing Stock");
                objlast.put("accountid", messageSource.getMessage("acc.field.StockinHand", null, RequestContextUtils.getLocale(request)));
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("amount", invCloseBal);
                objlast.put("preamount", preinvCloseBal);
                objlast.put("fmt", "H");
                objlast.put("openingamount", openCloseBal);
                objlast.put("periodamount", invCloseBal);
                objlast.put("endingamount", endCloseBal);
                jArrR.put(objlast);
            }
//            boolean lossflag = false;
//            if (balance > 0 || (openingprofitloss>0 && balance==0)) {
//                objlast = new com.krawler.utils.json.base.JSONObject();
//                objlast.put("accountname", "Net Loss");  //"Net Loss");
//                objlast.put("accountid", "Net Loss");
//                objlast.put("level", 0);
//                objlast.put("leaf", true);
//                objlast.put("openingamount",-openingprofitloss); //Showing Net Loss on Liability side. Please refer ERM-725
//                objlast.put("periodamount",-balance);//Showing Net Loss on Liability side. Please refer ERM-725
//                objlast.put("endingamount", -(openingprofitloss + balance));//Showing Net Loss on Liability side. Please refer ERM-725
//                objlast.put("amount", -balance);                
//                objlast.put("preamount", 0);                
//                objlast.put("isdebit", false);
//                objlast.put("fmt", "B");
//                dtotal -= authHandler.round(balance, companyid);  
//                dperiodtotal -= authHandler.round(balance, companyid);
//                dopentotal -= authHandler.round(openingprofitloss, companyid);
//                dendtotal -= authHandler.round((openingprofitloss+balance), companyid);
//                lossflag = true;
//            } 
//            if (preBalance > 0) {
//                if (!lossflag) {
//                    objlast = new com.krawler.utils.json.base.JSONObject();
//                    objlast.put("accountname", "Net Loss");  //"Net Loss");
//                    objlast.put("accountid", "Net Loss");
//                    objlast.put("level", 0);
//                    objlast.put("leaf", true);
//                    objlast.put("openingamount", 0);
//                    objlast.put("periodamount", 0);
//                    objlast.put("amount", 0);
//                    objlast.put("endingamount",0);
//                    objlast.put("isdebit", false);
//                    objlast.put("fmt", "B");
//                }
//                objlast.put("preamount", -preBalance);
//                predtotal -= preBalance;
//                jArrL.put(objlast);
//            } else if (balance > 0 || (openingprofitloss>0 && balance==0)) {
//                jArrL.put(objlast);
//            }
            /*Showing Net profit and loss on liability side in Balance Sheet
             *For more detail please refer ERM-725 
             */
//            boolean profitflag = false;
//            boolean isNetDebit = false;
//            if (balance != 0 || (openingprofitloss != 0 && balance ==0)) {
//                if(balance < 0 || (openingprofitloss < 0 && balance ==0)){
//                    isNetDebit = true;
//                }
//                objlast = new com.krawler.utils.json.base.JSONObject();
//                objlast.put("accountname", messageSource.getMessage("acc.report.32", null, RequestContextUtils.getLocale(request)));  //"Net Profit");
//                objlast.put("accountid", "Net Profit");
//                objlast.put("level", 0);
//                objlast.put("leaf", true);
//                objlast.put("openingamount", openingprofitloss != 0 ? -openingprofitloss : openingprofitloss);
//                objlast.put("periodamount", balance != 0 ? -balance : balance);
//                objlast.put("endingamount", -(openingprofitloss + balance));
//                objlast.put("amount", -balance);
//                objlast.put("preamount", 0);
//                objlast.put("isdebit", isNetDebit);
//                objlast.put("fmt", "B");
//                dtotal -= authHandler.round(balance, companyid);   
//                dperiodtotal -= authHandler.round(balance, companyid);
//                dopentotal -= authHandler.round(openingprofitloss, companyid);
//                dendtotal -= authHandler.round((openingprofitloss+balance), companyid);
//                profitflag = true;
//            }
//            if(preBalance != 0) {
//                if(!profitflag) {
//                    objlast = new com.krawler.utils.json.base.JSONObject();
//                    objlast.put("accountname", messageSource.getMessage("acc.report.32", null, RequestContextUtils.getLocale(request)));  //"Net Profit");
//                    objlast.put("accountid", "Net Profit");
//                    objlast.put("level", 0);
//                    objlast.put("leaf", true);
//                    objlast.put("openingamount", 0);
//                    objlast.put("periodamount", 0);
//                    objlast.put("endingamount",0);
//                    objlast.put("amount", 0);
//                    objlast.put("isdebit", preBalance < 0);
//                    objlast.put("fmt", "B");                    
//                }
//                objlast.put("preamount", -preBalance);
//                predtotal -= preBalance;
//                jArrL.put(objlast);
//            } else if(balance != 0 || (openingprofitloss != 0 && balance ==0)) {
//                jArrL.put(objlast);
//            }

            /*
             * If Equity group is not found for current company then net
             * ProfitLoss will appear as separate lable (i.e not under any group). So calculating total amounts accordingly.
             */
            if (request.getAttribute("netProfitLossObj") != null && request.getAttribute("netProfitLossObj") instanceof JSONObject) {
                dtotal -= authHandler.round(balance, companyid);   
                dperiodtotal -= authHandler.round(balance, companyid);
                dopentotal -= authHandler.round(openingprofitloss, companyid);
                dendtotal -= authHandler.round((openingprofitloss+balance), companyid);
                if (preBalance != 0) {
                    predtotal -= preBalance;
                }
                jArrL.put((JSONObject) request.getAttribute("netProfitLossObj"));
                request.removeAttribute("netProfitLossObj"); //removing from request.
            }
//            double bals[]=getOpeningBalances(session, request, AuthHandler.getCompanyid(request));
            double bals[] = {0, 0}; /* Difference In Opening Balance should not be shown for balance sheet(period view)*/
            if (periodView) {
                bals = getOpeningBalancesWithDate(paramJobj, companyid, periodView ? new Date(1970) : startDate, endDate);
            }
            preBalance = 0;
            if (startPreDate != null && endPreDate != null) {
//                double prebalances[] = getOpeningBalancesWithDate(request, sessionHandlerImpl.getCompanyid(request), startPreDate, endPreDate);
                double prebalances[] = {0, 0};
                if (periodView) {
                    prebalances = getOpeningBalancesWithDate(paramJobj, paramJobj.getString(Constants.companyKey), startPreDate, endPreDate);
                }
                preBalance = prebalances[0] + prebalances[1];////+preinvCloseBal;
            }

            balance = bals[0] + bals[1];////+invCloseBal;
            balance = authHandler.round(balance, companyid);
            double openbalance = balance;
            preBalance = authHandler.round(preBalance, companyid);
            ctotal -= authHandler.round(invCloseBal, companyid);
            //adding stock in hand in pre total.
            prectotal -= authHandler.round(preinvCloseBal, companyid);
            cperiodtotal -= authHandler.round(invCloseBal, companyid);
            copentotal -= authHandler.round(openCloseBal, companyid);
            cendtotal -= authHandler.round(endCloseBal, companyid);
            boolean isSamejson = false;
            if ((balance > 0 && preBalance > 0) || (balance < 0 && preBalance < 0)) {
                isSamejson = true;
            }
            double endingbalance = openbalance;
            /* Not included opening stock while calculating "difference in opening balance" SDP-2742 */
//            if (isForTradingAndProfitLoss) {
//                balance += invOpeBal;
//                openbalance += openInvOpeBal;
//                preBalance += preinvOpeBal;
//                endingbalance += endInvOpeBal;
//            }
          if (balance != 0 || preBalance !=0 ||openbalance!=0) {
                objlast = new com.krawler.utils.json.base.JSONObject();
                objlast.put("accountname", "Difference in Opening balances");  //"Difference in Opening balances");
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("fmt", "A");
                objlast.put("accountflag", true);
                objlast.put("amount", Math.abs(balance));
                objlast.put("openingamount",isForTradingAndProfitLoss ? openbalance : Math.abs(openbalance));
                objlast.put("periodamount", "");
                objlast.put("endingamount", isForTradingAndProfitLoss ? endingbalance : Math.abs(endingbalance));
                if (isSamejson) {
                    objlast.put("preamount", isForTradingAndProfitLoss ? preBalance : Math.abs(preBalance));
                } else {
                    objlast.put("preamount", "");
                }
                objlast.put("leaf", true);
                objlast.put("isdebit", balance > 0);
                // balance+=invCloseBal;
              if (balance > 0 || openbalance > 0) {
                  dtotal += authHandler.round(balance, companyid);
                  dopentotal += authHandler.round(openbalance, companyid);
                  dendtotal += authHandler.round(openbalance, companyid);
                  jArrL.put(objlast);
              } else {
                  ctotal += authHandler.round(balance, companyid);
                  copentotal += authHandler.round(openbalance, companyid);
                  cendtotal += authHandler.round(openbalance, companyid);
                  jArrR.put(objlast);
              }
                
                if (isSamejson) {
                    if (preBalance > 0) {
                        predtotal += preBalance;
                    } else {
                        prectotal += preBalance;
                    }   
                }
            }
            if (!isSamejson) {
                if (preBalance != 0) {
                    objlast = new com.krawler.utils.json.base.JSONObject();
                    objlast.put("accountname", Constants.Difference_in_Opening_balances);  //"Difference in Opening balances");
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("fmt", "A");
                    objlast.put("amount", "-");
                    objlast.put("preamount", Math.abs(preBalance));
                    objlast.put("leaf", true);
                    objlast.put("isdebit", balance > 0);
                    if (preBalance > 0) {
                        predtotal += preBalance;
                        jArrL.put(objlast);
                    } else {
                        prectotal += preBalance;
                        jArrR.put(objlast);
                    }
                }
            }
            objlast = new com.krawler.utils.json.base.JSONObject();
            objlast.put("accountname", "Total Assets");  //"Total Assets");
            objlast.put("accountid", "Total Assets");
            objlast.put("level", 0);
            objlast.put("isdebit", false);
            objlast.put("leaf", true);
            objlast.put("amount",authHandler.round(dtotal, companyid));
            objlast.put("preamount",authHandler.round(predtotal, companyid));
            objlast.put("fmt", "T");
            objlast = new com.krawler.utils.json.base.JSONObject();
            objlast.put("accountname","Total Liabilities");  //"Total Liabilities");
            objlast.put("accountid", "Total Liabilities");
            objlast.put("level", 0);
            objlast.put("isdebit", true);
            objlast.put("leaf", true);
            objlast.put("amount",authHandler.round(-ctotal, companyid));
            objlast.put("preamount",authHandler.round(-prectotal, companyid));
            objlast.put("fmt", "T");
            com.krawler.utils.json.base.JSONObject fobj = new com.krawler.utils.json.base.JSONObject();
            fobj.put("left", jArrL);
            fobj.put("right", jArrR);
            fobj.put("total", new JSONArray("[" + dtotal + "," + ((ctotal==0.0)?ctotal:-ctotal) + "]"));
            fobj.put("periodtotal", new JSONArray("[" + ((dperiodtotal==-0.0)?Math.abs(dperiodtotal):dperiodtotal) + "," + ((-cperiodtotal==-0.0)?Math.abs(-cperiodtotal):-cperiodtotal) + "]"));
            fobj.put("opentotal",new JSONArray("["+((dopentotal==-0.0)?Math.abs(dopentotal):dopentotal)+","+ ((-copentotal==-0.0)?Math.abs(-copentotal):-copentotal) +"]"));
            fobj.put("endtotal",new JSONArray("["+dendtotal+","+ ((cendtotal==0.0)?cendtotal:-cendtotal) +"]"));
            fobj.put("pretotal", new JSONArray("[" + ((predtotal==-0.0)?Math.abs(predtotal):predtotal) + "," + ((-prectotal==-0.0)?Math.abs(-prectotal):-prectotal) + "]"));
            jobj.put(Constants.RES_data, fobj);
        } catch (ParseException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getBalanceSheet : " + ex.getMessage(), ex);
        }
        return jobj;
    }
    
    @Override
    public JSONObject getBalanceSheetAllAccounts(JSONObject paramJobj, Map<String, Double> accAmtMap) throws JSONException, ServiceException, SessionExpiredException{
        com.krawler.utils.json.base.JSONObject jobj = new com.krawler.utils.json.base.JSONObject();
        try {
            Locale locale = Locale.forLanguageTag(paramJobj.getString(Constants.language));
            String companyid = paramJobj.getString(Constants.companyKey);
            boolean isFromBalanceSheet = false;
            if (paramJobj.has("isFromBalanceSheet") && paramJobj.get("isFromBalanceSheet")!=null) { //SDP-13756
                isFromBalanceSheet = paramJobj.optBoolean("isFromBalanceSheet", false);
            }
            Date startDate = null;
            Date endDate = null;
            if (paramJobj.optString("jasperreport", null) != null && paramJobj.optString("jasperreport").equals("JasperReport")) {
                startDate = (Date) paramJobj.get("jaspersdate");
                endDate = (Date) paramJobj.get("jasperenddate");
            } else {
                startDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString("stdate"));
                endDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString("enddate"));
            }
            Calendar calendar = Calendar.getInstance();
            if (startDate != null) {
                calendar.setTime(startDate);
            } else {
                calendar.setTime(endDate);
            }
            Date startPreDate = null;
            Date endPreDate = null;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("stpredate",null)) && !StringUtil.isNullOrEmpty(paramJobj.optString("endpredate",null))) {
                startPreDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString("stpredate"));
                endPreDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString("endpredate"));
            }
            boolean isConsolidationBS = paramJobj.has("consolidationBS")?Boolean.FALSE.parseBoolean(paramJobj.get("consolidationBS").toString()):false;
            boolean dimensionBasedMonthlyBS = (!paramJobj.has("dimensionBasedMonthlyBS") || paramJobj.isNull("dimensionBasedMonthlyBS") || paramJobj.get("dimensionBasedMonthlyBS").toString().isEmpty()) ? false : Boolean.parseBoolean(paramJobj.getString("dimensionBasedMonthlyBS"));
            CompanyAccountPreferences pref = null;
            if(isConsolidationBS && paramJobj.has("consolidationCompanyID") && !paramJobj.isNull("consolidationCompanyID")){
                companyid = paramJobj.getString("consolidationCompanyID");
            } 
            
            //flag for monthly balance sheet
            boolean isNewBalanceSheetCall = paramJobj.optBoolean("NewBalanceSheetCall", false); // flag from monthly balance sheet
            KwlReturnObject prefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);            
            if(!pref.isShowchild()) {// Anup Check to hide child customer / vendors from balance sheet
                paramJobj.put("hidechildCV", true);
            }
            boolean isForTradingAndProfitLoss = false;
            if (paramJobj.has("isForTradingAndProfitLoss") && !paramJobj.isNull("isForTradingAndProfitLoss")) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(paramJobj.get("isForTradingAndProfitLoss").toString());
            }
            
            boolean stockValuationFlag = true;
 
            ExtraCompanyPreferences extrapref = null;                        
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if(extraprefresult!=null&&!extraprefresult.getEntityList().isEmpty()&&extraprefresult.getEntityList().get(0)!=null){
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
                stockValuationFlag = extrapref.isStockValuationFlag();
            }
            boolean isShowZeroAmountAsBlank = extrapref.isShowZeroAmountAsBlank();
            paramJobj.put("isShowZeroAmountAsBlank", isShowZeroAmountAsBlank);
                if(extrapref != null && extrapref.isShowallaccountsinbs()) {//Check to show all accounts.
                    paramJobj.put("monthlyreport", "MonthlyReport");
                }
                
            Map<String, Object> extraObjects = new HashMap<String, Object>();
            extraObjects.put("extraCompanyPreferences", extrapref);
            
            
//            Date inventoryOpeningBalanceDate = null;
//            KwlReturnObject rtObj = accProductObj.getInventoryOpeningBalanceDate(companyid);
//            List<Date> lst = rtObj.getEntityList();
//            for (Date dateObj : lst) {
//                inventoryOpeningBalanceDate = dateObj;
//            }
            double dtotal = 0, ctotal = 0, dopentotal = 0, dendtotal = 0, dperiodtotal = 0, copentotal = 0, cendtotal = 0, cperiodtotal = 0, invCloseBal = 0, invOpeBal = 0, openInvOpeBal = 0, endInvOpeBal = 0, openCloseBal = 0, endCloseBal = 0;
            double predtotal = 0, prectotal = 0, preinvCloseBal = 0, preinvOpeBal = 0;
            boolean periodView = paramJobj.has("periodView") ? Boolean.parseBoolean(paramJobj.getString("periodView")) : false;
            
            
            String Searchjson = paramJobj.optString("searchJson","");
            if(dimensionBasedMonthlyBS){
                Searchjson = paramJobj.optString(Constants.Acc_Search_Json,"");
            }
            if (paramJobj.optString("DimensionBasedComparisionReport","").equals("DimensionBasedComparisionReport")) {
                Searchjson = paramJobj.get("DimensionBasedSearchJson").toString();
            }
            
            if(isConsolidationBS){ //In consolidation balance sheet need data of other companies too hence passing companyid instead of getting it from session
                paramJobj.put(Constants.companyKey, companyid);
            }
            
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;                
            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                if (paramJobj.has("filterConjuctionCriteria") && !StringUtil.isNullOrEmpty(paramJobj.getString("filterConjuctionCriteria"))) {
                    if (paramJobj.getString("filterConjuctionCriteria").equalsIgnoreCase("OR")) {
                        filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                    }
                }
            }
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            }
            if (isForTradingAndProfitLoss && extrapref != null) {
                boolean hidechildCV = !extrapref.isShowChildAccountsInPnl();
                paramJobj.put("hidechildCV", hidechildCV);
            }
            
            Map<String, Object> requestParamsAccount = null;
            Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();
            if (accAmtMap == null) {
                requestParamsAccount = new HashMap<String, Object>();
                requestParamsAccount.put("isMonthly", paramJobj.has("isMonthly") ? paramJobj.getBoolean("isMonthly") : false);
                requestParamsAccount.put("startdate", startDate);
                requestParamsAccount.put("enddate", endDate);
                requestParamsAccount.put("startpredate", startPreDate);
                requestParamsAccount.put("endpredate", endPreDate);
                requestParamsAccount.put("companyid", companyid);
                requestParamsAccount.put("fieldtype", null);
                requestParamsAccount.put("customdatavalues", null);
                requestParamsAccount.put("columns", null);
                requestParamsAccount.put("iscustomcolumndata", 0);
                requestParamsAccount.put("columnheader", null);
                requestParamsAccount.put("isProductCustomData", false);
                requestParamsAccount.put("isForKnockOff", false);
                requestParamsAccount.put("Searchjson", Searchjson);
                requestParamsAccount.put("filterConjuctionCriteria", filterConjuctionCriteria);
                if (paramJobj.has("costcenter") && !StringUtil.isNullOrEmpty(paramJobj.getString("costcenter"))) {
                    requestParamsAccount.put("costcenter", paramJobj.getString("costcenter"));
                }
                accAmtMap = getPeriodAccountAmountMap(requestParamsAccount);
                accAmtMap.putAll(getOpeningAccountAmountMap(requestParamsAccount));
                
            }
            
            extraObjects.put("startdate", startDate);
            extraObjects.put("enddate", endDate);
            extraObjects.put("startpredate", startPreDate);
            extraObjects.put("endpredate", endPreDate);
            DateFormat sqlDF = new SimpleDateFormat("yyyy-MM-dd");
            HashMap<String, Object> requestParam1 = new HashMap<String, Object>();
            requestParam1.put("searchJson", Searchjson);
            requestParam1.put(Constants.companyKey, companyid);
            requestParam1.put(Constants.df, authHandler.getDateOnlyFormat());
            requestParam1.put("gcurrencyid", paramJobj.getString("gcurrencyid"));
            Map<String, Map> stockDateMap = null;
            if(stockValuationFlag && extrapref != null && !(extrapref.isActivateMRPModule() || pref.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)){
                stockDateMap = new HashMap<String, Map>();
                Map temp = new HashMap();
                temp.put("startdate", startDate);
                temp.put("enddate", endDate);
                stockDateMap.put(sqlDF.format(startDate) + "-" + sqlDF.format(endDate), temp);

                temp = new HashMap();
                Date t = new Date(1970);
                temp.put("startdate", t);
                temp.put("enddate", endDate);
                temp.put("isDifferenceInOpeningBalanceFlag", true);
                stockDateMap.put(sqlDF.format(t) + "-" + sqlDF.format(endDate) + "-T", temp);

                temp = new HashMap();
                Date bookDate = calculateStartDateIfBookClosed(startDate, stockValuationFlag, companyid);
                temp.put("startdate", bookDate);
                temp.put("enddate", openBalEndDate);
                stockDateMap.put(sqlDF.format(bookDate) + "-" + sqlDF.format(openBalEndDate), temp);

                stockDateMap = AccProductService.getInventoryValuationDataForFinancialReports(requestParam1, stockDateMap);
            }
//            stockDateMap = null;
            
            /*Do not show the opening/closing stock if Perpetual Inventory Valuation is activated.*/            
            if (stockValuationFlag && extrapref != null && !(extrapref.isActivateMRPModule() || pref.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                if (periodView) {
//                    double stock[] = calculateOpeningAndClosingStock(request, pref, extrapref, inventoryOpeningBalanceDate, companyid, startDate, endDate);
                    double stock[] = calculateOpeningAndClosingStock(paramJobj, pref, extrapref, companyid, startDate, endDate,null,null,stockDateMap);
                    openInvOpeBal = stock[0];
                    invOpeBal = stock[1];
                    endInvOpeBal = stock[2];
                    openCloseBal = stock[3];
                    invCloseBal = stock[4];
                    endCloseBal = stock[5];
                } else {
                    HashMap<String, Object> requestParam = new HashMap<String, Object>();
                    requestParam.put("searchJson", Searchjson);
                    requestParam.put(Constants.REQ_startdate, authHandler.getDateOnlyFormat().format(startDate));
                    requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(endDate));
                    requestParam.put(Constants.companyKey, companyid);
                    requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                    double[] valuation = AccProductService.getInventoryValuationDataForFinancialReports(new HashMap<String, Object>(requestParam));
                    if (isForTradingAndProfitLoss) {
                        paramJobj.put("isForOpeningTransactions", true);
                        invOpeBal = valuation[1];
                    }
                    String name = extrapref.getOpeningStockAccountId();//Only Profit and Loss Account
                    Account openingStock = null;
                    double openingstockaccountbal = 0;
                    if (!StringUtil.isNullOrEmpty(name)) {
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                        if (!StringUtil.isNullOrEmpty(extrapref.getProfitLossAccountId())) {
                            filter_names.add("ID");
                            filter_params.add(name);
                        }
                        requestParams.put("filter_names", filter_names);
                        requestParams.put("filter_params", filter_params);
                        KwlReturnObject venresult = accAccountDAOobj.getAccount(requestParams);
                        if (!venresult.getEntityList().isEmpty()) {
                            openingStock = (Account) venresult.getEntityList().get(0);
                            KwlReturnObject closingAccountBalanceResult = accJournalEntryobj.getClosingAccountBalance(openingStock.getID(), companyid, (calendar.get(Calendar.YEAR) - 1));
                            List closingAccountBalanceList = closingAccountBalanceResult.getEntityList();
                            if (!closingAccountBalanceList.isEmpty()) {
                                ClosingAccountBalance closingAccountBalance = (ClosingAccountBalance) closingAccountBalanceList.get(0);
                                openingstockaccountbal += closingAccountBalance.getAmount();
                            }
                            openingstockaccountbal += getAccountBalanceWithOutClosing(paramJobj, openingStock.getID(), startDate, endDate,null);
                            invOpeBal = invOpeBal + openingstockaccountbal;
                        }
                    }
                    
                    invOpeBal = authHandler.round(invOpeBal, companyid);
                    invCloseBal = valuation[4];
     
                    invCloseBal = authHandler.round(invCloseBal, companyid);
                    if (startPreDate != null && endPreDate != null) {
                        requestParam.put(Constants.REQ_startdate, paramJobj.getString("stpredate"));
                        requestParam.put(Constants.REQ_enddate, paramJobj.getString("endpredate"));
                        double[] tempValuation = AccProductService.getInventoryValuationDataForFinancialReports(new HashMap<String, Object>(requestParam));
                        preinvCloseBal = tempValuation[4];
                        preinvCloseBal = authHandler.round(preinvCloseBal, companyid);
                    }
                    
                }
            }
//double balance = 0;
            double tradingAmount1[]= {0,0,0,0,0,0};
            double tradingAmount2[] = {0,0,0,0,0,0};
            double profitLossAmount1[] = {0,0,0,0,0,0};
            double profitLossAmount2[] = {0,0,0,0,0,0};
            double grossprofit = 0,pregrossprofit = 0;
            double balance = 0,cincometotal=0,dexpensetotal=0,cincomeprectotal = 0,predexpensetotal = 0;
            double preBalance = 0;
            double costofgoodsSoldTotal = 0,periodCostOfGoodsSold = 0,preCostOfGoodsSold = 0; 
            if(!periodView){ // In period view we have wriiten separate function to calculate Profit/Loss no need to give call this code
                tradingAmount1 = getTradingAllAccount(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), accAmtMap, extraObjects);
                dexpensetotal = tradingAmount1[0];                
                predexpensetotal = tradingAmount1[1];                
                tradingAmount2 = getTradingAllAccount(paramJobj, Group.NATURE_INCOME, new JSONArray(), accAmtMap, extraObjects);
                cincometotal = tradingAmount2[0];
                cincomeprectotal = tradingAmount2[1];
                profitLossAmount1 = getProfitLossAllAccounts(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), false, accAmtMap, extraObjects);
                dexpensetotal += profitLossAmount1[0];
                predexpensetotal += profitLossAmount1[1];
                profitLossAmount2 = getProfitLossAllAccounts(paramJobj, Group.NATURE_INCOME, new JSONArray(),  false, accAmtMap, extraObjects);
                cincometotal += profitLossAmount2[0];
                cincomeprectotal += profitLossAmount2[1];
                balance = dexpensetotal - invCloseBal + cincometotal + invOpeBal;//0
                preBalance = tradingAmount1[1] - preinvCloseBal + tradingAmount2[1] + profitLossAmount1[1] + profitLossAmount2[1] + preinvOpeBal;//0
                if (isForTradingAndProfitLoss) { // If "Profit And Loss Report" then calculate the total amount for CoGS account group seperately
                    paramJobj.put("isCostOfGoodsSold", true);
                    double goodsSoldAmount[] = getTradingAllAccount(paramJobj, Group.NATURE_EXPENSES, new JSONArray(),accAmtMap, extraObjects);
                    costofgoodsSoldTotal = goodsSoldAmount[0];
                    preCostOfGoodsSold = goodsSoldAmount[1];
                    periodCostOfGoodsSold = goodsSoldAmount[3];
                    double profitLossAmountCoGS[] = getProfitLossAllAccounts(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), false, accAmtMap, extraObjects);
                    costofgoodsSoldTotal += profitLossAmountCoGS[0];
                    preCostOfGoodsSold += profitLossAmountCoGS[1];
                    periodCostOfGoodsSold += profitLossAmountCoGS[3];
                    paramJobj.remove("isCostOfGoodsSold");
                    /* Not included opening stock while calculating "difference in opening balance" SDP-2742 */
                    costofgoodsSoldTotal = authHandler.round((costofgoodsSoldTotal + invOpeBal - invCloseBal), companyid);
                    preCostOfGoodsSold = authHandler.round((preCostOfGoodsSold + preinvOpeBal - preinvCloseBal), companyid);
                    grossprofit = ((-1 * cincometotal) - costofgoodsSoldTotal) * (-1);
                    pregrossprofit = ((-1 * cincomeprectotal) - preCostOfGoodsSold) * (-1);
                    balance = ((grossprofit * (-1)) - dexpensetotal) * (-1);
                    preBalance = ((pregrossprofit * (-1)) - predexpensetotal) * (-1);
                }
            }
            double openingprofitloss=0;

//            double tempdTotal[] = getBalanceSheet(request, Group.NATURE_LIABILITY, jArrL, accountGroupMap);
//            double tempcTotal[] = getBalanceSheet(request, Group.NATURE_ASSET, jArrR, accountGroupMap);
            
            /*
             * Calculating Net profit loss before getting account json array fro
             * balance sheet.
             */
            if (paramJobj.opt("netProfitClosesFlag") == null)//normal balance sheet report call
            {
                KwlReturnObject closingAccountBalanceResultList = accCompanyPreferencesObj.getClosingBalanceList(null, (calendar.get(Calendar.YEAR) - 1), companyid);
                List<ClosingAccountBalance> closingAccountBalancesList = closingAccountBalanceResultList.getEntityList();
                HashMap<String, Date> startEndDateHashMap = getStartAndEndFinancialDate(pref, calendar.get(Calendar.YEAR) - 1);
                Date closingEndDate = startEndDateHashMap.get("endDate");
                if (closingAccountBalancesList.size() > 0 && startDate.after(closingEndDate) && !isNewBalanceSheetCall) {
                    paramJobj.put("closingFilterFlag", true);
                    paramJobj.put("closingStartDate", closingEndDate);
                    paramJobj.put("closingEndDate", startDate);
                    
                    double tradingAmount3[] = getTrading(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), false, null);
                    double tradingAmount4[] = getTrading(paramJobj, Group.NATURE_INCOME, new JSONArray(), false, null);
                    double profitLossAmount3[] = getProfitLoss(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), false, null);
                    double profitLossAmount4[] = getProfitLoss(paramJobj,Group.NATURE_INCOME, new JSONArray(), false, null);
                    balance += tradingAmount3[0] + tradingAmount4[0] + profitLossAmount3[0] + profitLossAmount4[0];
                    

                }
                String name = extrapref.getProfitLossAccountId();//Only Profit and Loss Account
                if (isForTradingAndProfitLoss) {                    
                    extraObjects.put("requestParamsAccount", requestParamsAccount);
                    extraObjects.put("stockDateMap", stockDateMap);
                   double[] netprofitandloss = calculateProfitLossForTrialBalanceAllAccounts(paramJobj, startDate, endDate, openBalEndDate, true, periodView, false, stockValuationFlag,null, extraObjects);
                    openingprofitloss = netprofitandloss[1];
                    if (periodView) {
                        
                        netprofitandloss = calculateProfitLossForTrialBalanceAllAccounts(paramJobj, startDate, endDate, startDate, false, periodView, true, stockValuationFlag,accAmtMap, extraObjects);
                        balance = netprofitandloss[1];
                    } 
                    paramJobj.remove("isPeriod");
//                } else {
//                    openingprofitloss = calculateProfitAndLoss(paramJobj, new Date(1970), openBalEndDate, startPreDate, endPreDate, name, false, true,  companyid);
//                    balance = periodView ? calculateProfitAndLoss(paramJobj, startDate, endDate, startPreDate, endPreDate, name, true, false, companyid) : balance;
//                    openingprofitloss = openingprofitloss - openCloseBal;
//                    balance = periodView ? (balance - invCloseBal) : balance;
                }
            }
            balance=authHandler.round(balance, companyid);
            preBalance=authHandler.round(preBalance, companyid);
            
            /*
             * Creating net profit loss object(netProfitLossObj) and adding in
             * extraObjects. So while calculating balance for balance sheet we will
             * put this object under Equity group.
             */
            boolean profitflag = false;
            boolean isNetDebit = false;
            JSONObject netProfitLossObj = null;
            if ((balance != 0 || (openingprofitloss != 0 && balance == 0)) || dimensionBasedMonthlyBS) {          //Dimension monthly based balancesheet
                if (balance < 0 || (openingprofitloss < 0 && balance == 0)) {
                    isNetDebit = true;
                }
                netProfitLossObj = new com.krawler.utils.json.base.JSONObject();
                if(isFromBalanceSheet){  //SDP-13756
                    netProfitLossObj.put("accountname", messageSource.getMessage("acc.report.netprofit.netloss.currentyrearnings", null, locale));  //"Current Year Earnings";                    
                } else {
                    netProfitLossObj.put("accountname", messageSource.getMessage("acc.report.32", null, locale));  //"Net Profit");
                }
                netProfitLossObj.put("accountid", "Net Profit");
                netProfitLossObj.put("level", 0);
                netProfitLossObj.put("leaf", true);
                netProfitLossObj.put("openingamount", openingprofitloss != 0 ? -openingprofitloss : openingprofitloss);
                netProfitLossObj.put("periodamount", balance != 0 ? -balance : balance);
                netProfitLossObj.put("endingamount", -(openingprofitloss + balance));
                netProfitLossObj.put("amount", -balance);
                netProfitLossObj.put("preamount", 0);
                netProfitLossObj.put("isdebit", isNetDebit);
                netProfitLossObj.put("fmt", isFromBalanceSheet ? "Y":"B");
//                dtotal -= authHandler.round(balance, companyid);
//                dperiodtotal -= authHandler.round(balance, companyid);
//                dopentotal -= authHandler.round(openingprofitloss, companyid);
//                dendtotal -= authHandler.round((openingprofitloss + balance), companyid);
                if (isConsolidationBS) {
                    netProfitLossObj.put("accountflag", true);
                } 
                profitflag = true;
            }
            if (preBalance != 0) {
                if (!profitflag) {
                    netProfitLossObj = new com.krawler.utils.json.base.JSONObject();
                    if (isFromBalanceSheet ) {  //SDP-13756
                        netProfitLossObj.put("accountname", messageSource.getMessage("acc.report.netprofit.netloss.currentyrearnings", null, locale));  //"Current Year Earnings";                    
                    } else {
                        netProfitLossObj.put("accountname", messageSource.getMessage("acc.report.32", null, locale));  //"Net Profit");
                    }
                    netProfitLossObj.put("accountid", "Net Profit");
                    netProfitLossObj.put("level", 0);
                    netProfitLossObj.put("leaf", true);
                    netProfitLossObj.put("openingamount", 0);
                    netProfitLossObj.put("periodamount", 0);
                    netProfitLossObj.put("endingamount", 0);
                    netProfitLossObj.put("amount", 0);
                    netProfitLossObj.put("isdebit", preBalance < 0);
                    netProfitLossObj.put("fmt", isFromBalanceSheet ? "Y":"B");
                }
                netProfitLossObj.put("preamount", -preBalance);
//                predtotal -= preBalance;
                extraObjects.put("netProfitLossObj",netProfitLossObj);
//                jArrL.put(objlast);
            } else if ((balance != 0 || (openingprofitloss != 0 && balance == 0)) ||(dimensionBasedMonthlyBS)) {    //Dimension monthly based balancesheet                     // Dimesion based monthly balancesheet
                extraObjects.put("netProfitLossObj",netProfitLossObj);
//                jArrL.put(objlast);
            }
            
            JSONArray jArrL = new JSONArray();
            JSONArray jArrR = new JSONArray();
            com.krawler.utils.json.base.JSONObject objlast = new com.krawler.utils.json.base.JSONObject();
            
            paramJobj.put("excludeP_LFilters", true);
            double tempdTotal[] = getTradingAllAccount(paramJobj, Group.NATURE_LIABILITY, jArrL, accAmtMap, extraObjects);
            double tempcTotal[] = getTradingAllAccount(paramJobj, Group.NATURE_ASSET, jArrR, accAmtMap, extraObjects);
            paramJobj.remove("excludeP_LFilters");
            
            if (startPreDate != null && endPreDate != null) { // if we want previous year data 
                predtotal = (tempdTotal[1] == 0.0) ? tempdTotal[1] : -tempdTotal[1];
                prectotal = (tempcTotal[1] == 0.0) ? tempcTotal[1] : -tempcTotal[1];
            }
            if (periodView) {
                dopentotal = authHandler.round((tempdTotal[2] == 0.0) ? tempdTotal[2] : -tempdTotal[2], companyid);
                dperiodtotal = authHandler.round((tempdTotal[3] == 0.0) ? tempdTotal[3] : -tempdTotal[3], companyid);
                dendtotal = authHandler.round((tempdTotal[4] == 0.0) ? tempdTotal[4] : -tempdTotal[4], companyid);
                copentotal = authHandler.round((tempcTotal[2] == 0.0) ? tempcTotal[2] : -tempcTotal[2], companyid);
                cperiodtotal = authHandler.round((tempcTotal[3] == 0.0) ? tempcTotal[3] : -tempcTotal[3], companyid);
                cendtotal = authHandler.round((tempcTotal[4] == 0.0) ? tempcTotal[4] : -tempcTotal[4], companyid);
            } else {
                dtotal = authHandler.round((tempdTotal[0] == 0.0) ? tempdTotal[0] : -tempdTotal[0], companyid);
                ctotal = authHandler.round((tempcTotal[0] == 0.0) ? tempcTotal[0] : -tempcTotal[0], companyid);
            }
            
            if(stockValuationFlag && extrapref != null && !(extrapref.isActivateMRPModule() || pref.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                objlast = new com.krawler.utils.json.base.JSONObject(); // renamed "Closing Stock" as "Stock in Hand"
                objlast.put("accountname", "Stock in Hand");  //"Closing Stock");
                objlast.put("accountid", "Stock in Hand");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("amount", invCloseBal);
                objlast.put("preamount", preinvCloseBal);
                objlast.put("fmt", "H");
                objlast.put("openingamount", openCloseBal);
                objlast.put("periodamount", invCloseBal);
                objlast.put("endingamount", endCloseBal);
                jArrR.put(objlast);
            }
//            boolean lossflag = false;
//            if (balance > 0 || (openingprofitloss>0 && balance==0)) {
//                objlast = new com.krawler.utils.json.base.JSONObject();
//                objlast.put("accountname", "Net Loss");  //"Net Loss");
//                objlast.put("accountid", "Net Loss");
//                objlast.put("level", 0);
//                objlast.put("leaf", true);
//                objlast.put("openingamount",-openingprofitloss); //Showing Net Loss on Liability side. Please refer ERM-725
//                objlast.put("periodamount",-balance);
//                objlast.put("endingamount", -(openingprofitloss + balance));
//                objlast.put("amount", -balance);                
//                objlast.put("preamount", 0);                
//                objlast.put("isdebit", false);
//                objlast.put("fmt", "B");
//                dtotal -= authHandler.round(balance, companyid);  
//                dperiodtotal -= authHandler.round(balance, companyid);
//                dopentotal -= authHandler.round(openingprofitloss, companyid);
//                dendtotal -= authHandler.round((openingprofitloss+balance), companyid);
//                lossflag = true;
//            } 
//            if (preBalance > 0) {
//                if (!lossflag) {
//                    objlast = new com.krawler.utils.json.base.JSONObject();
//                    objlast.put("accountname", "Net Loss");  //"Net Loss");
//                    objlast.put("accountid", "Net Loss");
//                    objlast.put("level", 0);
//                    objlast.put("leaf", true);
//                    objlast.put("openingamount", 0);
//                    objlast.put("periodamount", 0);
//                    objlast.put("amount", 0);
//                    objlast.put("endingamount",0);
//                    objlast.put("isdebit", false);
//                    objlast.put("fmt", "B");
//                }
//                objlast.put("preamount", -preBalance);
//                predtotal -= preBalance;
//                jArrL.put(objlast);
//            } else if (balance > 0 || (openingprofitloss>0 && balance==0)) {
//                jArrL.put(objlast);
//            }
            /*Showing Net profit and loss on liability side in Balance Sheet
             *For more detail please refer ERM-725 
             */
            /*
             * If Equity group is not found for current company then net
             * ProfitLoss will appear as separate lable (i.e not under any group). So calculating total amounts accordingly.
             */
            if (extraObjects.containsKey("netProfitLossObj") && extraObjects.get("netProfitLossObj") instanceof JSONObject) {
                dtotal -= authHandler.round(balance, companyid);
                dperiodtotal -= authHandler.round(balance, companyid);
                dopentotal -= authHandler.round(openingprofitloss, companyid);
                dendtotal -= authHandler.round((openingprofitloss + balance), companyid);
                if (preBalance != 0) {
                    predtotal -= preBalance;
                }
                jArrL.put((JSONObject) extraObjects.get("netProfitLossObj"));
                extraObjects.remove("netProfitLossObj"); // Removing netProfitLossObj to avoid duplication.
            }
            
//            double bals[]=getOpeningBalances(session, request, AuthHandler.getCompanyid(request));
            double bals[] = {0, 0}; /* Difference In Opening Balance should not be shown for balance sheet(period view)*/
            if (periodView) {
                
                requestParamsAccount.put("startdate", new Date(1970));
                requestParamsAccount.put("enddate", endDate);
                requestParamsAccount.put("openingdifferencecalculation", true);
                Map<String, Double> diffOpeningAmtMap = getOpeningAccountAmountMap(requestParamsAccount);
                
                for (String key : diffOpeningAmtMap.keySet()) {
                    if (key.contains("opening--")) {
                        double bal = diffOpeningAmtMap.get(key);
                        bal=authHandler.round(bal, companyid);
                        if (bal > 0) {
                            bals[0] += bal;
                        } else if (bal < 0) {
                            bals[1] += bal;
                        }
                    }
                }

                bals = getOpeningBalanceMRPActivated(paramJobj, companyid, new Date(1970), endDate, filterConjuctionCriteria, Searchjson, bals, stockDateMap);
            }
            preBalance = 0;
            if (periodView && startPreDate != null && endPreDate != null) {
                double prebalances[] = {0, 0};
                requestParamsAccount.put("startdate", startPreDate);
                requestParamsAccount.put("enddate", endPreDate);
                requestParamsAccount.put("openingdifferencecalculation", true);
                Map<String, Double> diffOpeningAmtMap = getOpeningAccountAmountMap(requestParamsAccount);
                
                for (String key : diffOpeningAmtMap.keySet()) {
                    if (key.contains("opening--")) {
                        double bal = diffOpeningAmtMap.get(key);
                        if (bal > 0) {
                            prebalances[0] += bal;
                        } else if (bal < 0) {
                            prebalances[1] += bal;
                        }
                    }
                }

                prebalances = getOpeningBalanceMRPActivated(paramJobj, companyid, startPreDate, endPreDate, filterConjuctionCriteria, Searchjson, prebalances, stockDateMap);
                
                preBalance = prebalances[0] + prebalances[1];////+preinvCloseBal;
            }
            balance = bals[0] + bals[1];////+invCloseBal;
            balance = authHandler.round(balance, companyid);
            double openbalance = balance;
            preBalance = authHandler.round(preBalance, companyid);
            //adding stock in hand in pre total.
            prectotal -= authHandler.round(preinvCloseBal, companyid);
            ctotal -= authHandler.round(invCloseBal, companyid);
            cperiodtotal -= authHandler.round(invCloseBal, companyid);
            copentotal -= authHandler.round(openCloseBal, companyid);
            cendtotal -= authHandler.round(endCloseBal, companyid);
            boolean isSamejson = false;
            if ((balance > 0 && preBalance > 0) || (balance < 0 && preBalance < 0)) {
                isSamejson = true;
            }
            double endingbalance = openbalance;
            /* Not included opening stock while calculating "difference in opening balance" SDP-2742 */
//            if (isForTradingAndProfitLoss) {
//                balance += invOpeBal;
//                openbalance += openInvOpeBal;
//                preBalance += preinvOpeBal;
//                endingbalance += endInvOpeBal;
//            }
          if (balance != 0 || preBalance !=0 ||openbalance!=0) {
                objlast = new com.krawler.utils.json.base.JSONObject();
                objlast.put("accountname", "Difference in Opening balances");  //"Difference in Opening balances");
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("fmt", "A");
                objlast.put("accountflag", true);
                objlast.put("amount", Math.abs(balance));
                objlast.put("openingamount",isForTradingAndProfitLoss ? openbalance : Math.abs(openbalance));
                objlast.put("periodamount", "");
                objlast.put("endingamount", isForTradingAndProfitLoss ? endingbalance : Math.abs(endingbalance));
                if (isSamejson) {
                    objlast.put("preamount", isForTradingAndProfitLoss ? preBalance : Math.abs(preBalance));
                } else {
                    objlast.put("preamount", "");
                }
                objlast.put("leaf", true);
                objlast.put("isdebit", balance > 0);
                // balance+=invCloseBal;
              if (balance > 0 || openbalance > 0) {
                  dtotal += authHandler.round(balance, companyid);
                  dopentotal += authHandler.round(openbalance, companyid);
                  dendtotal += authHandler.round(openbalance, companyid);
                  jArrL.put(objlast);
              } else {
                  ctotal += authHandler.round(balance, companyid);
                  copentotal += authHandler.round(openbalance, companyid);
                  cendtotal += authHandler.round(openbalance, companyid);
                  jArrR.put(objlast);
              }
                
                if (isSamejson) {
                    if (preBalance > 0) {
                        predtotal += preBalance;
                    } else {
                        prectotal += preBalance;
                    }   
                }
            }
            if (!isSamejson) {
                if (preBalance != 0) {
                    objlast = new com.krawler.utils.json.base.JSONObject();
                    objlast.put("accountname", Constants.Difference_in_Opening_balances);  //"Difference in Opening balances");
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("fmt", "A");
                    objlast.put("amount", "-");
                    objlast.put("preamount", Math.abs(preBalance));
                    objlast.put("leaf", true);
                    objlast.put("isdebit", balance > 0);
                    if (preBalance > 0) {
                        predtotal += preBalance;
                        jArrL.put(objlast);
                    } else {
                        prectotal += preBalance;
                        jArrR.put(objlast);
                    }
                }
            }
            objlast = new com.krawler.utils.json.base.JSONObject();
            objlast.put("accountname", "Total Assets");  //"Total Assets");
            objlast.put("accountid", "Total Assets");
            objlast.put("level", 0);
            objlast.put("isdebit", false);
            objlast.put("leaf", true);
            objlast.put("amount",authHandler.round(dtotal, companyid));
            objlast.put("preamount",authHandler.round(predtotal, companyid));
            objlast.put("fmt", "T");
            objlast = new com.krawler.utils.json.base.JSONObject();
            objlast.put("accountname","Total Liabilities");  //"Total Liabilities");
            objlast.put("accountid", "Total Liabilities");
            objlast.put("level", 0);
            objlast.put("isdebit", true);
            objlast.put("leaf", true);
            objlast.put("amount",authHandler.round(-ctotal, companyid));
            objlast.put("preamount",authHandler.round(-prectotal, companyid));
            objlast.put("fmt", "T");
            com.krawler.utils.json.base.JSONObject fobj = new com.krawler.utils.json.base.JSONObject();
            fobj.put("left", jArrL);
            fobj.put("right", jArrR);
            fobj.put("total", new JSONArray("[" + dtotal + "," + ((ctotal==0.0)?ctotal:-ctotal) + "]"));
            fobj.put("periodtotal", new JSONArray("[" + ((dperiodtotal==-0.0)?Math.abs(dperiodtotal):dperiodtotal) + "," + ((-cperiodtotal==-0.0)?Math.abs(-cperiodtotal):-cperiodtotal) + "]"));
            fobj.put("opentotal",new JSONArray("["+((dopentotal==-0.0)?Math.abs(dopentotal):dopentotal)+","+ ((-copentotal==-0.0)?Math.abs(-copentotal):-copentotal) +"]"));
            fobj.put("endtotal",new JSONArray("["+dendtotal+","+ ((cendtotal==0.0)?cendtotal:-cendtotal) +"]"));
            fobj.put("pretotal", new JSONArray("[" + ((predtotal==-0.0)?Math.abs(predtotal):predtotal) + "," + ((-prectotal==-0.0)?Math.abs(-prectotal):-prectotal) + "]"));
            jobj.put(Constants.RES_data, fobj);
        } catch (ParseException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getBalanceSheet : " + ex.getMessage(), ex);
        }
        return jobj;
    }
  
 @Override   
    public double[] calculateOpenigAndClosingStock(HttpServletRequest request, CompanyAccountPreferences pref, ExtraCompanyPreferences extrapref, 
             Map<String, Object[]> companyMaxDateProductPriceList, Date inventoryOpeningBalanceDate, String companyid, Date startDate, Date endDate, Map<String, Object> advSearchAttributes) {
        double[] stock = {0, 0, 0,0,0,0,0,0};
        double invOpeBal = 0, openInvOpeBal = 0, endInvOpeBal = 0, invCloseBal = 0, assemblyValuation = 0, openInvCloseBal = 0, openassemblyValuation=0, endInvCloseBal = 0;
        Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();    //Vivek P.
        try {
            if(extrapref == null) {
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            if(extraprefresult!=null&&!extraprefresult.getEntityList().isEmpty()&&extraprefresult.getEntityList().get(0)!=null){
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            }            
            }
            String Searchjson = request.getParameter("searchJson") != null ? request.getParameter("searchJson") : "";
            if (request.getAttribute("DimensionBasedComparisionReport") != null && request.getAttribute("DimensionBasedComparisionReport").equals("DimensionBasedComparisionReport")) {
                Searchjson = request.getAttribute("DimensionBasedSearchJson").toString();
            }
            
            boolean excludePreviousYear = false;
            boolean isForTradingAndProfitLoss = false;
             if ((request.getAttribute("isForTradingAndProfitLoss") != null)) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(request.getAttribute("isForTradingAndProfitLoss").toString());
            }
            Date start = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("excludePreviousYear"))) {
                excludePreviousYear = Boolean.parseBoolean(request.getParameter("excludePreviousYear").toString());
            }
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            if (excludePreviousYear) {
//                start = getDateForExcludePreviousYearBalanceFilter(request, startDate);
                start = getDateForExcludePreviousYearBalanceFilter(paramJobj, startDate);
            }
            
            Calendar calendar = Calendar.getInstance();
            if (startDate != null) {
                calendar.setTime(startDate);
            } else {
                calendar.setTime(endDate);
            }
            JSONObject jObjX = new JSONObject();
            JSONArray jarr = new JSONArray();
            KwlReturnObject stockResult =null;
            HashMap<String, Object> requestParam = new HashMap<String, Object>();
            HashMap<String, Object> jsonRequestParam = new HashMap<String, Object>();
            if (isForTradingAndProfitLoss) {
                request.setAttribute("startdate", excludePreviousYear ? start : new Date(1970));
                paramJobj.put("startdate", excludePreviousYear ? start : new Date(1970));
                
                jObjX = getInventoryOpeningBalance(request, companyid, startDate, companyMaxDateProductPriceList, inventoryOpeningBalanceDate);
                jarr = jObjX.getJSONArray(Constants.RES_data);
                if (jarr.length() > 0) {
                    JSONObject jobj1 = jarr.getJSONObject(0);
                    openInvOpeBal = jobj1.has("valuation") ? jobj1.getDouble("valuation") : 0;
                }
                request.removeAttribute("startdate");
                paramJobj.remove("startdate");
            }
            String name = extrapref.getOpeningStockAccountId();//Only Profit and Loss Account
            Account openingStock = null;
            double openingstockaccountbal = 0;
            if (!StringUtil.isNullOrEmpty(name)) {
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                if (!StringUtil.isNullOrEmpty(name)) {
                    filter_names.add("ID");
                    filter_params.add(name);
                }
                requestParams.put("filter_names", filter_names);
                requestParams.put("filter_params", filter_params);
                KwlReturnObject venresult = accAccountDAOobj.getAccount(requestParams);
                if (!venresult.getEntityList().isEmpty()) {
                    openingStock = (Account) venresult.getEntityList().get(0);
                    KwlReturnObject closingAccountBalanceResult = accJournalEntryobj.getClosingAccountBalance(openingStock.getID(), companyid, (calendar.get(Calendar.YEAR) - 1));
                    List closingAccountBalanceList = closingAccountBalanceResult.getEntityList();
                    if (!closingAccountBalanceList.isEmpty()) {
                        ClosingAccountBalance closingAccountBalance = (ClosingAccountBalance) closingAccountBalanceList.get(0);
//                                    openingstockaccountbal += closingAccountBalance.getAmount();
                        openInvOpeBal += closingAccountBalance.getAmount();
                    }
                    request.setAttribute("isPeriod", true);
                    paramJobj.put("isPeriod", true);
//                    openingstockaccountbal += getAccountBalanceWithOutClosing(request, openingStock.getID(), startDate, endDate);
                    openingstockaccountbal += getAccountBalanceWithOutClosing(paramJobj, openingStock.getID(), startDate, endDate,advSearchAttributes);
                    invOpeBal = invOpeBal + openingstockaccountbal;
                    request.setAttribute("isPeriod", false);
                    paramJobj.put("isPeriod", false);
//                    openInvOpeBal = openInvOpeBal + (getAccountBalanceWithOutClosing(request, openingStock.getID(), new Date(1970), openBalEndDate));
                    openInvOpeBal = openInvOpeBal + (getAccountBalanceWithOutClosing(paramJobj, openingStock.getID(), new Date(1970), openBalEndDate, advSearchAttributes));
                }
            }
            endInvOpeBal = openInvOpeBal + invOpeBal;
            
            stock[0] = openInvOpeBal;
            stock[1] = invOpeBal;
            stock[2] = endInvOpeBal;
            
            jObjX = new JSONObject();
            request.setAttribute("startdate", startDate);
            request.setAttribute("assemblyValuation", true);
            request.setAttribute("isForPeriodTransactions", true);
            
            paramJobj.put("startdate", startDate);
            paramJobj.put("assemblyValuation", true);
            paramJobj.put("isForPeriodTransactions", true);
            
            requestParam.put("searchJson", Searchjson);
            requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
            boolean periodView = request.getParameter("periodView") != null ? Boolean.parseBoolean(request.getParameter("periodView")) : false;
            Date date=null;
            if (periodView) {
                date = inventoryOpeningBalanceDate;
                if (request.getAttribute("startdate") != null) {
                    date = (Date) request.getAttribute("startdate");
                }
                requestParam.put(Constants.REQ_startdate, request.getParameter("stdate").toString());
                requestParam.put(Constants.REQ_enddate, request.getParameter("enddate").toString());
                requestParam.put(Constants.companyKey, companyid);
                requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                stockResult = accProductObj.getStockLedger(requestParam);
            } else {
                date = inventoryOpeningBalanceDate;
                requestParam.put(Constants.REQ_startdate, request.getParameter("stdate").toString());
                requestParam.put(Constants.REQ_enddate, request.getParameter("enddate").toString());
                requestParam.put(Constants.companyKey, companyid);
                requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                stockResult = accProductObj.getStockLedger(requestParam);
            }
            jarr = new JSONArray();
            List list = stockResult.getEntityList();
            Map<String, Object> reqMap = request.getParameterMap();
            Set set = reqMap.entrySet();
            for (Object obj : set) {
                Map.Entry<String, Object> entry = (Map.Entry<String, Object>) obj;
                String[] value = (String[]) entry.getValue();
                jsonRequestParam.put(entry.getKey(), value[0]);
            }
            jsonRequestParam.put(Constants.df, authHandler.getDateOnlyFormat());
            jsonRequestParam.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            jsonRequestParam.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            stockService.getNewStockLedgerJson(jsonRequestParam, list, companyMaxDateProductPriceList,jarr);
            if (jarr.length() > 0) {
                JSONObject jobj1 = jarr.getJSONObject(0);
                invCloseBal = jobj1.has("periodValution") ? jobj1.getDouble("periodValution") : 0;
                assemblyValuation = jobj1.has("periodAssemblyValuation") ? jobj1.getDouble("periodAssemblyValuation") : 0;
            }

            jObjX = new JSONObject();
            request.setAttribute("startdate", excludePreviousYear? start : new Date(1970));
            request.setAttribute("assemblyValuation", true);
            request.setAttribute("isForOpeningTransactions", true);
            
            paramJobj.put("startdate", excludePreviousYear? start : new Date(1970));
            paramJobj.put("assemblyValuation", true);
            paramJobj.put("isForOpeningTransactions", true);
            
            jObjX = getInventoryOpeningBalance(request, companyid, startDate);
            //            jarr = jObjX.getJSONArray(Constants.RES_data);
            if (periodView) {
                date = inventoryOpeningBalanceDate;
                if (request.getAttribute("startdate") != null) {
                    date = (Date) request.getAttribute("startdate");
                }
                requestParam.put(Constants.REQ_startdate, request.getAttribute("startdate").toString());
                requestParam.put(Constants.REQ_enddate, request.getParameter("stdate").toString());
                requestParam.put(Constants.companyKey, companyid);
                requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                stockResult = accProductObj.getStockLedger(requestParam);
            } else {
                date = inventoryOpeningBalanceDate;
                requestParam.put(Constants.REQ_startdate, date.toString());
                requestParam.put(Constants.REQ_enddate, request.getParameter("stdate"));
                requestParam.put(Constants.companyKey, companyid);
                requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                stockResult = accProductObj.getStockLedger(requestParam);
            }
            list = stockResult.getEntityList();
            jsonRequestParam.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            jsonRequestParam.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            stockService.getNewStockLedgerJson(jsonRequestParam, list, companyMaxDateProductPriceList, jarr);
            if (jarr.length() > 0) {
                JSONObject jobj1 = jarr.getJSONObject(0);
                openInvCloseBal = jobj1.has("openingValuation") ? jobj1.getDouble("openingValuation") : 0;
                openassemblyValuation = jobj1.has("OpeningAssemblyValuation") ? jobj1.getDouble("OpeningAssemblyValuation") : 0;
            }
            request.removeAttribute("startdate");
            request.removeAttribute("isForOpeningTransactions");
            
            paramJobj.remove("startdate");
            paramJobj.remove("isForOpeningTransactions");

            String ClosingStock = extrapref.getClosingStockAccountId();//Closing Stock Account
            Account stockInHand = null;
            double closingstockaccountbal = 0;
            if (!StringUtil.isNullOrEmpty(ClosingStock)) {
//                KwlReturnObject venresult = accCompanyPreferencesObj.getAccountObjectById(ClosingStock, companyid);
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                if (!StringUtil.isNullOrEmpty(ClosingStock)) {
                    filter_names.add("ID");
                    filter_params.add(ClosingStock);
                }
                requestParams.put("filter_names", filter_names);
                requestParams.put("filter_params", filter_params);
                KwlReturnObject venresult = accAccountDAOobj.getAccount(requestParams);
                if (!venresult.getEntityList().isEmpty()) {
                    stockInHand = (Account) venresult.getEntityList().get(0);
                    KwlReturnObject closingAccountBalanceResult = accJournalEntryobj.getClosingAccountBalance(stockInHand.getID(), companyid, (calendar.get(Calendar.YEAR) - 1));
                    List closingAccountBalanceList = closingAccountBalanceResult.getEntityList();
                    if (!closingAccountBalanceList.isEmpty()) {
                        ClosingAccountBalance closingAccountBalance = (ClosingAccountBalance) closingAccountBalanceList.get(0);
//                                    closingstockaccountbal += closingAccountBalance.getAmount();
                        openInvCloseBal += closingAccountBalance.getAmount();
                    }
                    request.setAttribute("isPeriod", true);
                    paramJobj.put("isPeriod", true);
//                    closingstockaccountbal += getAccountBalanceWithOutClosing(request, stockInHand.getID(), startDate, endDate);
                    closingstockaccountbal += getAccountBalanceWithOutClosing(paramJobj, stockInHand.getID(), startDate, endDate, advSearchAttributes);
                    invCloseBal = invCloseBal + closingstockaccountbal;
//                    request.setAttribute("isPeriod", false);
                    paramJobj.put("isPeriod", false);
//                    openInvCloseBal = openInvCloseBal + (getAccountBalanceWithOutClosing(request, stockInHand.getID(), (excludePreviousYear ? start : new Date(1970)), openBalEndDate));
                    openInvCloseBal = openInvCloseBal + (getAccountBalanceWithOutClosing(paramJobj, stockInHand.getID(), (excludePreviousYear ? start : new Date(1970)), openBalEndDate, advSearchAttributes));
                }
            }
//            endInvCloseBal = authHandler.round(openInvCloseBal, companyid) + authHandler.round(invCloseBal, companyid); //ERP-20519- one cent difference for closing stock
            endInvCloseBal = authHandler.round(openInvCloseBal+invCloseBal,companyid); //ERP-20519- one cent difference for closing stock
           
            stock[3] = openInvCloseBal;
            stock[4] = invCloseBal;
            stock[5] = endInvCloseBal;            
            stock[6] = openassemblyValuation;
            stock[7] = assemblyValuation;
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return stock;
    }
    
    @Override
    public double[] getOpeningBalancesWithDate(JSONObject paramJObj, String companyid, Date startDate, Date endDate) throws ServiceException, SessionExpiredException,JSONException {
        double[] balances = {0, 0};

        String filterConjuctionCriteria = paramJObj.optString("filterConjuctionCriteria",null) != null ? paramJObj.optString("filterConjuctionCriteria") : "";
        String Searchjson = paramJObj.optString("searchJson",null) != null ? paramJObj.optString("searchJson") : "";
        if (paramJObj.optString("DimensionBasedComparisionReport",null) != null && paramJObj.optString("DimensionBasedComparisionReport").equals("DimensionBasedComparisionReport")) {
            Searchjson = paramJObj.optString("DimensionBasedSearchJson");
        }
        paramJObj.put("filterConjuctionCriteria", filterConjuctionCriteria);
        paramJObj.put("Searchjson", Searchjson);

        KwlReturnObject accresult = accAccountDAOobj.getAccountDatewise(companyid, startDate, endDate, false); // "false" as onlyPnLAccounts -> Get All Accounts
        List<Account> list = accresult.getEntityList();
        int templatecode = (StringUtil.isNullOrEmpty(paramJObj.optString("templatecode",null))) ? -1 : Integer.parseInt(paramJObj.getString("templatecode"));
        for (Account account : list) {
            if ((templatecode == -1) || (account.getTemplatepermcode() != null && account.getTemplatepermcode() != 0 && ((templatecode & account.getTemplatepermcode()) == templatecode))) {
//                double accountOpeningBalance = accInvoiceCommon.getOpeningBalanceOfAccount(request, account, false, null);
                double accountOpeningBalance = accInvoiceCommon.getOpeningBalanceOfAccountJson(paramJObj, account, false, null);
                double bal = accountOpeningBalance;
                if (bal > 0) {
                    balances[0] += bal;
                } else if (bal < 0) {
                    balances[1] += bal;
                }
            }
        }
        paramJObj.remove("filterConjuctionCriteria");
        paramJObj.remove("Searchjson");
        balances=getOpeningBalanceMRPActivated(paramJObj, companyid, startDate, endDate, filterConjuctionCriteria, Searchjson, balances, null);
        return balances;
    }

    
    private double[] getOpeningBalanceMRPActivated(JSONObject paramJObj, String companyid, Date startDate, Date endDate, String filterConjuctionCriteria, String Searchjson, double[] balances,Map<String, Map> stockDateMap){
        try {
            boolean isMRPActivated = accCompanyPreferencesObj.isMRPModuleActivated(companyid);
            if (filterConjuctionCriteria.equalsIgnoreCase(Constants.or)) {
                filterConjuctionCriteria = "OR";
            } else if (filterConjuctionCriteria.equalsIgnoreCase(Constants.and)) {
                filterConjuctionCriteria = "AND";
            }
            KwlReturnObject prefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(),paramJObj.getString(Constants.companyKey));
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            if (extraPreferences.isStockValuationFlag() && !(isMRPActivated || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {  // Do not calculate opening stock if MRP module is activated
                HashMap<String, Object> requestParam = new HashMap<String, Object>();
                requestParam.put(Constants.REQ_startdate, authHandler.getDateOnlyFormat().format(startDate));
                requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(endDate));
                requestParam.put(Constants.companyKey, paramJObj.getString(Constants.companyKey));
                requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                requestParam.put("isDifferenceInOpeningBalanceFlag", true);
                requestParam.put(Constants.Acc_Search_Json, Searchjson);
                requestParam.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                double[] valuation = {0, 0, 0, 0, 0, 0};
                
                DateFormat sqlDF = new SimpleDateFormat("yyyy-MM-dd");
                String startTemp = sqlDF.format(startDate);
                String endTemp = sqlDF.format(endDate);
                if(stockDateMap!= null && stockDateMap.containsKey(startTemp+"-"+endTemp+"-T")){
                    valuation = (double[]) stockDateMap.get(startTemp+"-"+endTemp+"-T").get("valuation");
                }else{
                    requestParam.put("gcurrencyid", paramJObj.getString("gcurrencyid"));
                    valuation = AccProductService.getInventoryValuationDataForFinancialReports(requestParam);
                }
                double invOpeBal = valuation[2];
                if (invOpeBal > 0) {
                    balances[0] += invOpeBal;
                } else {
                    balances[1] += invOpeBal;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.INFO, ex.getMessage());
        }
        return balances;
    }
    
    @Override
    // Function to get data for showing break douwn of Difference in Opening Balances
    public JSONObject getOpeningBalancesWithDateLedger(HttpServletRequest request, String companyid, Date startDate, Date endDate) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        double[] balances = {0, 0};
        String entryChar = "c", emptyChar = "d";
        try {
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String filterConjuctionCriteria = request.getParameter("filterConjuctionCriteria") != null ? request.getParameter("filterConjuctionCriteria") : "";
            String Searchjson = request.getParameter("searchJson") != null ? request.getParameter("searchJson") : "";
            if (request.getAttribute("DimensionBasedComparisionReport") != null && request.getAttribute("DimensionBasedComparisionReport").equals("DimensionBasedComparisionReport")) {
                Searchjson = request.getAttribute("DimensionBasedSearchJson").toString();
            }
            boolean isOpeningBalanceFlag = false;
            if (request.getAttribute("isOpeningBalanceFlag") != null) {
                isOpeningBalanceFlag = Boolean.parseBoolean(request.getAttribute("isOpeningBalanceFlag").toString());
            }
            request.setAttribute("filterConjuctionCriteria", filterConjuctionCriteria);
            request.setAttribute("Searchjson", Searchjson);
            KwlReturnObject accresult = accAccountDAOobj.getAccountDatewise(companyid, startDate, endDate, false);// "false" as onlyPnLAccounts -> Get All Accounts
            List<Account> list = accresult.getEntityList();
            int templatecode = (StringUtil.isNullOrEmpty(request.getParameter("templatecode"))) ? -1 : Integer.parseInt(request.getParameter("templatecode"));
            for (Account account : list) {
                if ((templatecode == -1) || (account.getTemplatepermcode() != null && account.getTemplatepermcode() != 0 && ((templatecode & account.getTemplatepermcode()) == templatecode))) {
                    double accountOpeningBalance = accInvoiceCommon.getOpeningBalanceOfAccount(request, account, false, null);
                    double bal = accountOpeningBalance;
                    if(bal == 0){
                        continue;
                    } else if (bal > 0) {
                        entryChar = "d";
                        emptyChar = "c";
                        balances[0] += bal;
                    } else {
                        entryChar = "c";
                        emptyChar = "d";
                        balances[1] += bal;
                    }
                    JSONObject objlast = new JSONObject();
                    objlast.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(account.getCreationDate()));  
                    objlast.put(entryChar + "_accountname", account.getName());
                    objlast.put(entryChar + "_acccode", account.getAccountCode());
                    objlast.put(entryChar + "_amount", (Double) Math.abs(bal));
                    objlast.put(entryChar + "_checkno", "");
                    objlast.put(entryChar + "_description", "");
                    objlast.put(emptyChar + "_date", "");
                    objlast.put(emptyChar + "_accountname", "");
                    objlast.put(emptyChar + "_amount", "");
                    objlast.put(emptyChar + "_description", "");
//                    objlast.put("accountid", account.getID());
                    String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                    objlast.put("accountname", accountname);
                    objlast.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
                    objlast.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                    String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                    objlast.put("accCode", acccode);
                    objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());
                    objlast.put("accCodeName", Constants.Difference_in_Opening_balances);    
                    jArr.put(objlast);
                }
            }
            if (isOpeningBalanceFlag) {
                double invOpeBal = 0;
                boolean isMRPActivated = accCompanyPreferencesObj.isMRPModuleActivated(companyid);
                KwlReturnObject prefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                CompanyAccountPreferences preferences = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
                KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
                if (extraPreferences.isStockValuationFlag() && !(isMRPActivated || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {  // Do not calculate opening stock if MRP module is activated
                    HashMap<String, Object> requestParam = new HashMap<String, Object>();
                    requestParam.put(Constants.REQ_startdate, authHandler.getDateOnlyFormat().format(startDate));
                    requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(endDate));
                    requestParam.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                    requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                    requestParam.put("isDifferenceInOpeningBalanceFlag", true);
                    double[] valuation = AccProductService.getInventoryValuationDataForFinancialReports(requestParam);
                    invOpeBal = valuation[2];
                }
                if (invOpeBal != 0) {
                    if (invOpeBal > 0) {
                        entryChar = "d";
                        emptyChar = "c";
                        balances[0] += invOpeBal;
                    } else {
                        entryChar = "c";
                        emptyChar = "d";
                        balances[1] += invOpeBal;
                    }
                    JSONObject objlast = new JSONObject();
                    objlast.put(entryChar + "_date", "");
                    objlast.put(entryChar + "_accountname", "Opening Stock");
                    objlast.put(entryChar + "_acccode", "Opening Stock");
                    objlast.put(entryChar + "_amount", (Double) Math.abs(invOpeBal));
                    objlast.put(entryChar + "_checkno", "");
                    objlast.put(entryChar + "_description", "");
                    objlast.put(emptyChar + "_date", "");
                    objlast.put(emptyChar + "_accountname", "");
                    objlast.put(emptyChar + "_amount", "");
                    objlast.put(emptyChar + "_description", "");
                    objlast.put("accountname", "Opening Stock");
                    objlast.put("currencysymbol", currency.getSymbol());
                    objlast.put("currencycode", currency.getCurrencyCode());
                    objlast.put("accCode", "");
                    objlast.put(Constants.currencyKey, currency.getCurrencyID());
                    objlast.put("accCodeName", Constants.Difference_in_Opening_balances);
                    jArr.put(objlast);
                }
            }
            double balance = -(balances[1] + balances[0]);
            JSONObject netbBalanceObj = new JSONObject();
            if (balance > 0) {
                entryChar = "d";
                emptyChar = "c";
            } else {
                entryChar = "c";
                emptyChar = "d";
            }
            netbBalanceObj.put("isnetbalance", true);
            netbBalanceObj.put("netbalance", balance);
            netbBalanceObj.put(entryChar + "_accountname", Constants.Difference_in_Opening_balances);
            netbBalanceObj.put(entryChar + "_amount", "");
            netbBalanceObj.put(entryChar + "_checkno", "");
            netbBalanceObj.put(entryChar + "_description", "");
            netbBalanceObj.put(entryChar + "_amountAccountCurrency", "");
            netbBalanceObj.put(emptyChar + "_amountAccountCurrency", "");
            netbBalanceObj.put(emptyChar + "_date", "");
            netbBalanceObj.put(emptyChar + "_isnetbalance", "");
            netbBalanceObj.put(emptyChar + "_netbalance", "");
            netbBalanceObj.put(emptyChar + "_accountname", Constants.Difference_in_Opening_balances);
            netbBalanceObj.put(emptyChar + "_amount", "");
            netbBalanceObj.put(emptyChar + "_description", "");
            netbBalanceObj.put("accountid", Constants.Difference_in_Opening_balances);
            netbBalanceObj.put("accountname", Constants.Difference_in_Opening_balances);
            netbBalanceObj.put("currencysymbol", currency.getSymbol());
            netbBalanceObj.put(Constants.currencyKey, currency.getCurrencyID());
            netbBalanceObj.put("accCodeName", Constants.Difference_in_Opening_balances);    
            jArr.put(netbBalanceObj);
            jobj.put(Constants.RES_data, jArr);
            
            request.removeAttribute("filterConjuctionCriteria");
            request.removeAttribute("Searchjson");
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
    
    @Override
    public JSONObject getInventoryOpeningBalance(HttpServletRequest request, String companyid, Date stDate, Map<String, Object[]> companyMaxDateProductPriceList, Date inventoryOpeningBalanceDate) {
        JSONObject jobj = new JSONObject();
        try {
            boolean periodView = request.getParameter("periodView") != null ? Boolean.parseBoolean(request.getParameter("periodView")) : false;
            Date date = inventoryOpeningBalanceDate;
            if (periodView) {
                if (request.getAttribute("startdate") != null) {
                    date = (Date) request.getAttribute("startdate");
                }
            }
            jobj = getProValuation(request, date, stDate, companyMaxDateProductPriceList);
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
    
     @Override
   public JSONObject getInventoryOpeningBalance(HttpServletRequest request, String companyid, Date stDate){
        JSONObject jobj=new JSONObject();
        try {
            boolean periodView = request.getParameter("periodView") != null ? Boolean.parseBoolean(request.getParameter("periodView")) : false;
            if (periodView) {
                Date date = null;
                if (request.getAttribute("startdate") != null) {
                    date = (Date) request.getAttribute("startdate");
                }
                else {
                    KwlReturnObject rtObj = accProductObj.getInventoryOpeningBalanceDate(companyid);
                    List lst = rtObj.getEntityList();
                    Iterator ite = lst.iterator();
                    if (ite.hasNext()) {
                        date = (Date) ite.next();
                    }
                }
                jobj = getProValuation(request, date, stDate);
            } else {
                Date date = null;
                KwlReturnObject rtObj = accProductObj.getInventoryOpeningBalanceDate(companyid);
                List lst = rtObj.getEntityList();
                Iterator ite = lst.iterator();
                if (ite.hasNext()) {
                    date = (Date) ite.next();
            }
                jobj = getProValuation(request, date, stDate);
            }
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
     
   public JSONObject getProValuation(HttpServletRequest request, Date stDate, Date endDate,Map<String, Object[]> companyMaxDateProductPriceList) throws ServiceException {
        JSONObject jobj=new JSONObject();
        try {
            JSONArray DataJArr = new JSONArray();
            DataJArr =getProValuationArray(request, stDate, endDate, companyMaxDateProductPriceList);
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter("limit");
            JSONArray jArr1 = new JSONArray();
            String exportInventoryValuation = request.getParameter("exportInventoryValuation");
            
            boolean isExportInventoryValuation = !StringUtil.isNullOrEmpty(exportInventoryValuation) ? Boolean.parseBoolean(exportInventoryValuation) : false;
            if ((!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) && (!isExportInventoryValuation)) {
                int st = Integer.parseInt(start);
                int ed = Math.min(DataJArr.length(), st + Integer.parseInt(limit));
                for (int i = st; i < ed; i++) {
                    jArr1.put(DataJArr.getJSONObject(i));
                }
            }else{
                jArr1=DataJArr;
            }
            jobj.put(Constants.RES_data, jArr1);
            jobj.put("count", DataJArr.length());
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return jobj;
    }
   
   //    @Override
   public JSONObject getProValuation(HttpServletRequest request, Date stDate, Date endDate) throws ServiceException {
        JSONObject jobj=new JSONObject();
        try {
            JSONArray DataJArr = new JSONArray();
            DataJArr =getProValuationArray(request, stDate, endDate);
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter("limit");
            JSONArray jArr1 = new JSONArray();
            String exportInventoryValuation = request.getParameter("exportInventoryValuation");
            
            boolean isExportInventoryValuation = !StringUtil.isNullOrEmpty(exportInventoryValuation) ? Boolean.parseBoolean(exportInventoryValuation) : false;
            if ((!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) && (!isExportInventoryValuation)) {
                int st = Integer.parseInt(start);
                int ed = Math.min(DataJArr.length(), st + Integer.parseInt(limit));
                for (int i = st; i < ed; i++) {
                    jArr1.put(DataJArr.getJSONObject(i));
                }
            }
            else{
                jArr1=DataJArr;
            }
            jobj.put(Constants.RES_data, jArr1);
            jobj.put("count", DataJArr.length());
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return jobj;
    }

   //    @Override
    public JSONArray getProValuationArray(HttpServletRequest request, Date stDate, Date endDate) throws ServiceException {
        double valuation = 0, totalAssemblyValuation = 0, totalValuation = 0;
       JSONArray jArr=new JSONArray();
        try {
            Calendar startcal= Calendar.getInstance();
            Calendar endcal= Calendar.getInstance();
            if (stDate != null) {
                startcal.setTime(stDate);
            }
            if (endDate != null) {
                endcal.setTime(endDate);
            }
            boolean isprovalReport=false;
            if(request.getParameter("isprovalreport")!=null)
            {
                isprovalReport= Boolean.parseBoolean(request.getParameter("isprovalreport"));
            }
            boolean assemblyValuation=false;
            if(request.getAttribute("assemblyValuation")!=null){
                assemblyValuation=(Boolean)request.getAttribute("assemblyValuation");
            }
            String productCategoryid = "";
            if (request.getParameter(Constants.productCategoryid) != null) {
                productCategoryid = (String) request.getParameter(Constants.productCategoryid);
            }
            
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("stDate", stDate);
            requestParam.put("endDate", endDate);
            requestParam.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            requestParam.put("isprovalReport", isprovalReport);
            requestParam.put("productCategoryid", productCategoryid);
            KwlReturnObject rtObject = accProductObj.getProValuation(requestParam);
            List list = rtObject.getEntityList();
            Iterator itr = list.iterator();
            while(itr.hasNext()) {
                Object[] row = (Object[]) itr.next();
                Product product = (Product) row[0];
                double avgcost = 0;// Double.parseDouble(row[1]==null?"0":row[1].toString());
                double onhand = Double.parseDouble(row[2] == null ? "0" : row[2].toString());
                String productTypeID = product.getProducttype().getID();
                ValuationMethod productValuationMethod = product.getValuationMethod();
                if (product.isIsSerialForProduct()) {
                    valuation = getSerialNoValuation(request, onhand, productTypeID, avgcost, product, startcal, endcal);
                    valuation+=getSerialNoInventoryValuation(request, onhand, productTypeID, avgcost, product, startcal, endcal);
                } else {
                    if (onhand != 0 && !isprovalReport) {
                        if (productValuationMethod != null) {
                            if (productValuationMethod == ValuationMethod.AVERAGE) {
                                avgcost = getAvarageValuation(request, onhand, productTypeID, avgcost, product, startcal, endcal);
                                valuation = avgcost * onhand;
                                if (isprovalReport && valuation == 0) {
                                    continue;
                                }
                            } else if (productValuationMethod == ValuationMethod.FIFO) {
                                valuation = getFIFO(request, product.getID(), endDate, onhand, false, productTypeID);
                            } else {
                                valuation = getFIFO(request, product.getID(), endDate, onhand, true, productTypeID);
                            }
                        }
                    } else {
                        valuation = 0;
                    }
                }

                if (assemblyValuation && productTypeID.equals(Producttype.ASSEMBLY)) {
                    totalAssemblyValuation += valuation;
                }
                totalValuation += valuation;

                if (isprovalReport) {
                    double purchasecost = Double.parseDouble(row[1] == null ? "0" : row[1].toString());//Need to fetch only for Pro valuation report
                    double lifo = 0, fifo = 0;
                    if (isprovalReport && !product.isIsSerialForProduct()) {//Need to calculate only in case of provaluation report
                        if (productValuationMethod == ValuationMethod.STANDARD) {
                            lifo = getFIFO(request, product.getID(), endDate, onhand, true, productTypeID);
                        }
                        if (productValuationMethod == ValuationMethod.FIFO) {
                            fifo = getFIFO(request, product.getID(), endDate, onhand, false, productTypeID);
                        }
                    } else {
                        if (productValuationMethod == ValuationMethod.STANDARD) {
                            lifo = totalValuation;
                        }
                        if (productValuationMethod == ValuationMethod.FIFO) {
                            fifo = totalValuation;
                        }
                    }
                    //                }
                    JSONObject obj = new JSONObject();
                    obj.put("productid", product.getID());
                    obj.put("productname", product.getName());
                    obj.put("productdesc", product.getDescription());
                    obj.put("productType", product.getProducttype().getName());
                    obj.put("productTypeID", product.getProducttype().getID());
                    if (productValuationMethod == ValuationMethod.FIFO) {
                        obj.put("fifo", fifo);
                    } else {
                        obj.put("fifo", "NA");
                    }
                    if (productValuationMethod == ValuationMethod.STANDARD) {
                        obj.put("lifo", lifo);
                    } else {
                        obj.put("lifo", "NA");
                    }
                    obj.put("avgcost", (avgcost != 0 && onhand != 0) ? avgcost : "N.A");
                    obj.put("purchasecost", purchasecost);
                    obj.put("quantity", onhand);
                    //By Dipak P.
                    if (productValuationMethod == ValuationMethod.AVERAGE && !product.isIsSerialForProduct()) {
                        avgcost = getAvarageValuation(request, onhand, productTypeID, avgcost, product, startcal, endcal);
                        valuation = avgcost * onhand;
//                        if (valuation == 0) {
//                            continue;
//                        }
                        obj.put("valuation", valuation);
                    } else if(productValuationMethod == ValuationMethod.AVERAGE && product.isIsSerialForProduct()) {//By Dipak P.
                        obj.put("valuation", valuation);
                    }else{
                        obj.put("valuation", "NA");
                    }
                    
                    jArr.put(obj);
                }
            }
            if(!isprovalReport) {
                JSONObject obj = new JSONObject();
                obj.put("valuation", totalValuation);
                obj.put("assemblyValuation", totalAssemblyValuation);
                jArr.put(obj);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return jArr;
    }
   
    public JSONArray getProValuationArray(HttpServletRequest request, Date stDate, Date endDate, Map<String, Object[]> companyMaxDateProductPriceList) throws ServiceException {
        double valuation = 0, totalAssemblyValuation = 0, totalValuation = 0, totalEvaluationCost = 0, totalOnhandQty = 0,totalStockInQty = 0, totalStockOutQty = 0, totalOpeningstockQty = 0;
       JSONArray jArr=new JSONArray();
        try {
            String stdate = request.getParameter("stdate");
            boolean isFromStockReport = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isFromStockReport"))) {
                isFromStockReport = Boolean.parseBoolean(request.getParameter("isFromStockReport"));
            }
            boolean exportInventoryValuation = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("exportInventoryValuation"))) {
                exportInventoryValuation = Boolean.parseBoolean(request.getParameter("exportInventoryValuation"));
            }
            if (!StringUtil.isNullOrEmpty(stdate) && isFromStockReport) {
                stDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            }
            Calendar startcal= Calendar.getInstance();
            Calendar endcal= Calendar.getInstance();
            if (stDate != null) {
                startcal.setTime(stDate);
            }
            if (endDate != null) {
                endcal.setTime(endDate);
            }
            boolean isprovalReport=false;
            if(request.getParameter("isprovalreport")!=null)
            {
                isprovalReport= Boolean.parseBoolean(request.getParameter("isprovalreport"));
            }
            boolean assemblyValuation=false;
            if(request.getAttribute("assemblyValuation")!=null){
                assemblyValuation=(Boolean)request.getAttribute("assemblyValuation");
            }
            String productCategoryid = "";
            if (request.getParameter(Constants.productCategoryid) != null) {
                productCategoryid = (String) request.getParameter(Constants.productCategoryid);
            }
            
            HashMap<String, Object> requestSerialParam = new HashMap();
            requestSerialParam.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            String start = authHandler.getDateOnlyFormat().format(startcal.getTime());
            String end = authHandler.getDateOnlyFormat().format(endcal.getTime());
            requestSerialParam.put("startcal", authHandler.getDateOnlyFormat().parse(start));
            requestSerialParam.put("endcal", authHandler.getDateOnlyFormat().parse(end));
            requestSerialParam.put("excluseDateFilters",StringUtil.isNullOrEmpty(request.getParameter("excluseDateFilters"))?false:Boolean.parseBoolean(request.getParameter("excluseDateFilters"))); // Product Creation Form
            KwlReturnObject serialQtyObject = accProductObj.getAvailableQuantityForSerial(requestSerialParam);
            Map<String, List<Object[]>> serialQtyProductMap = getAvailableProductQuantityForSerialMap(serialQtyObject.getEntityList());

            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("stDate", stDate);
            requestParam.put("endDate", endDate);
            requestParam.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            requestParam.put("isprovalReport", isprovalReport);
            requestParam.put("productCategoryid", productCategoryid);
            requestParam.put("isFromStockReport", isFromStockReport);
            requestParam.put("ss", request.getParameter("ss"));
            KwlReturnObject rtObject = accProductObj.getProValuation(requestParam);
            List<Object[]> list = rtObject.getEntityList();
            for (Object[] row : list) {
                Product product = (Product) row[0];
                double avgcost = 0;// Double.parseDouble(row[1]==null?"0":row[1].toString());
                double onhand = Double.parseDouble(row[2] == null ? "0" : row[2].toString());
                String productTypeID = product.getProducttype().getID();
                ValuationMethod productValuationMethod = product.getValuationMethod();
                if (product.isIsSerialForProduct()) {
                    valuation = 0;
                    if(serialQtyProductMap.containsKey(product.getID())) {
                         valuation = getSerialNoValuation(request, onhand, productTypeID, avgcost, product, startcal, endcal, companyMaxDateProductPriceList, serialQtyProductMap);
                    }
                    valuation+=getSerialNoInventoryValuation(request, onhand, productTypeID, avgcost, product, startcal, endcal);
                } else {
                    if (onhand != 0 && !isprovalReport) {
                        if (productValuationMethod != null) {
                            if (productValuationMethod == ValuationMethod.AVERAGE) {
                                avgcost = getAvarageValuation(request, onhand, productTypeID, avgcost, product, startcal, endcal);
                                valuation = avgcost * onhand;
                                if (isprovalReport && valuation == 0) {
                                    continue;
                                }
                            } else if (productValuationMethod == ValuationMethod.FIFO) {
                                valuation = getFIFO(request, product.getID(), endDate, onhand, false, productTypeID,companyMaxDateProductPriceList);
                            } else {
                                valuation = getFIFO(request, product.getID(), endDate, onhand, true, productTypeID,companyMaxDateProductPriceList);
                                }
                            }
                    } else {
                        valuation = 0;
                    }
                }

                if (assemblyValuation && productTypeID.equals(Producttype.ASSEMBLY)) {
                    totalAssemblyValuation += valuation;
                }
                totalValuation += valuation;

                if (isprovalReport) {
                    double purchasecost = Double.parseDouble(row[1] == null ? "0" : row[1].toString());//Need to fetch only for Pro valuation report
                    double lifo = 0, fifo = 0, evaluationCost = 0, stockInQty = 0, stockOutQty = 0, openingstockQty = 0;
                    if (isprovalReport && !product.isIsSerialForProduct()) {//Need to calculate only in case of provaluation report
                        if (productValuationMethod == ValuationMethod.STANDARD) {
                            lifo = getFIFO(request, product.getID(), endDate, onhand, true, productTypeID,companyMaxDateProductPriceList);
                        }
                        if (productValuationMethod == ValuationMethod.FIFO) {
                            fifo = getFIFO(request, product.getID(), endDate, onhand, false, productTypeID,companyMaxDateProductPriceList);
                        }
                    } else {
                        if (productValuationMethod == ValuationMethod.STANDARD) {
                            lifo = totalValuation;
                        }
                        if (productValuationMethod == ValuationMethod.FIFO) {
                            fifo = totalValuation;
                        }
                    }
                    JSONObject obj = new JSONObject();
                    if(isFromStockReport){
                        HashMap<String, Object> stockParam = new HashMap();
                        stockParam.put("stDate", stDate);
                        stockParam.put("endDate", endDate);
                        stockParam.put("isFromStockReport", isFromStockReport);
                        stockParam.put("productid", product.getID());
                        stockParam.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                        stockParam.put("isprovalReport", isprovalReport);
                        KwlReturnObject rObject = accProductObj.getStockInOutOpeningCalculation(stockParam);
                        List<Object[]> stocklist = rObject.getEntityList();
                        for(Object[] stockrow : stocklist) {
                            stockInQty = Double.parseDouble(stockrow[0] == null ? "0" : stockrow[0].toString());
                            stockOutQty = Double.parseDouble(stockrow[1] == null ? "0" : stockrow[1].toString());
                            openingstockQty = Double.parseDouble(stockrow[2] == null ? "0" : stockrow[2].toString());
                            obj.put("stockInQty", stockInQty);
                            obj.put("stockOutQty", stockOutQty);
                            obj.put("openingstockQty", openingstockQty);
                        }
                        totalStockInQty += stockInQty;
                        totalStockOutQty += stockOutQty;
                        totalOpeningstockQty += openingstockQty;
                    }
                    obj.put("pid", product.getProductid());
                    obj.put("productid", product.getID());
                    obj.put("productname", product.getName());
                    obj.put("productdesc", product.getDescription());
                    obj.put("productType", product.getProducttype().getName());
                    obj.put("productTypeID", product.getProducttype().getID());
                    if (productValuationMethod == ValuationMethod.FIFO) {
                        obj.put("fifo", fifo);
                    } else {
                        obj.put("fifo", "NA");
                    }
                    if (productValuationMethod == ValuationMethod.STANDARD) {
                        obj.put("lifo", lifo);
                    } else {
                        obj.put("lifo", "NA");
                    }
                    obj.put("purchasecost", purchasecost);
                    totalOnhandQty += onhand; 
                    obj.put("quantity", onhand);
                    //By Dipak P.
                    if (productValuationMethod == ValuationMethod.AVERAGE && !product.isIsSerialForProduct()) {
                        avgcost = getAvarageValuation(request, onhand, productTypeID, avgcost, product, startcal, endcal);
                        valuation = avgcost * onhand;
                        obj.put("valuation", valuation);
                    } else if(productValuationMethod == ValuationMethod.AVERAGE && product.isIsSerialForProduct()) {//By Dipak P.
                        obj.put("valuation", valuation);
                    }else{
                        obj.put("valuation", "NA");
                    }
                    obj.put("avgcost", (avgcost != 0 && onhand != 0) ? avgcost : "N.A");
                    evaluationCost = fifo+lifo+valuation;
                    obj.put("evaluationcost", evaluationCost);
                    totalEvaluationCost += evaluationCost;
                    jArr.put(obj);
                }
            }
            if(!isprovalReport) {
                JSONObject obj = new JSONObject();
                obj.put("valuation", totalValuation);
                obj.put("assemblyValuation", totalAssemblyValuation);
                jArr.put(obj);
            } 
            if (exportInventoryValuation) {
                JSONObject obj = new JSONObject();
                obj.put("productdesc", "Total");
                obj.put("stockInQty", totalStockInQty);
                obj.put("stockOutQty", totalStockOutQty);
                obj.put("openingstockQty", totalOpeningstockQty);
                obj.put("quantity", totalOnhandQty);
                obj.put("evaluationcost", totalEvaluationCost);
                jArr.put(obj);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return jArr;
    }
//    
    public static Map<String, List<Object[]>> getAvailableProductQuantityForSerialMap(List<Object[]> availableProductQuantityForSerialList) {
        Map<String, List<Object[]>> map = new HashMap<String, List<Object[]>>();
        try {
            for(Object [] obj : availableProductQuantityForSerialList) {
                List tempList = new ArrayList();
                String productId = obj[4].toString();
                if(map.containsKey(productId)) {
                    tempList = map.get(productId);
                } 
                tempList.add(obj);
                map.put(productId, tempList);
            }
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            return map;
        }
        
    }
   
 @Override   
    public double getAvarageValuation(HttpServletRequest request, double onhand, String productTypeID, double avgcost, Product product, Calendar startcal, Calendar endcal) throws ServiceException, SessionExpiredException, ParseException {
        HashMap<String, Object> requestParams1 = AccountingManager.getGlobalParams(request);
       
        Date startcalDate = null;
        Date endcalDate = null;
        if (startcal != null) {
            String startcalString = authHandler.getDateOnlyFormat().format(startcal.getTime());
            startcalDate = authHandler.getDateOnlyFormat().parse(startcalString);
        }
        
        if (endcal != null) {
            String endcalString = authHandler.getDateOnlyFormat().format(endcal.getTime());
            endcalDate = authHandler.getDateOnlyFormat().parse(endcalString);
        }
        
        if (!productTypeID.equalsIgnoreCase(Producttype.ASSEMBLY)) {
            double totalProPurchase = 0;
            double totalQuantityIn = 0;
            requestParams1.put("isAssemblySubProduct", !StringUtil.isNullOrEmpty(request.getParameter("isAssemblySubProduct"))?request.getParameter("isAssemblySubProduct"):false);
            List ll = getClosingStockVal(product.getID(), requestParams1,startcalDate, endcalDate);

            totalProPurchase = (Double) ll.get(0);
            totalQuantityIn = (Double) ll.get(1);
            if (totalQuantityIn != 0.0) {
                avgcost = (totalProPurchase / totalQuantityIn);
            }
        } else {
            KwlReturnObject avgcostLi = accProductObj.getAvgcostAssemblyProduct(product.getID(), startcalDate, endcalDate);
            avgcost = (Double) avgcostLi.getEntityList().get(0);
        }
        return avgcost;


    }
     
    public double getSerialNoValuation(HttpServletRequest request, double onhand, String productTypeID, double avgcost, Product product, Calendar startcal, Calendar endcal) throws ServiceException {
        double valuation = 0;
        try {
            Date startcalDate = null;
            Date endcalDate = null;
            String startcalString = authHandler.getDateOnlyFormat().format(startcal.getTime());
            try {
                startcalDate = authHandler.getDateOnlyFormat().parse(startcalString);
            } catch (ParseException ex) {
                startcalDate = startcal.getTime();
                Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            String endcalString = authHandler.getDateOnlyFormat().format(endcal.getTime());
            try {
                endcalDate = authHandler.getDateOnlyFormat().parse(endcalString);
            } catch (ParseException ex) {
                endcalDate = startcal.getTime();
                Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            HashMap<String, Object> currencyParams = AccountingManager.getGlobalParams(request);
            requestParams.put("productid", product.getID());
            requestParams.put("startcal", startcalDate);
            boolean isOpening = false;
            boolean isStockLedgerReport = false;
            if (request.getAttribute("isOpening") != null) {
                isOpening = Boolean.parseBoolean(request.getAttribute("isOpening").toString());
                requestParams.put("isOpening", isOpening);
            }
            if (request.getAttribute("isStockLedgerReport") != null) {
                isStockLedgerReport = Boolean.parseBoolean(request.getAttribute("isStockLedgerReport").toString());
                requestParams.put("isStockLedgerReport", isStockLedgerReport);
            }
            requestParams.put("endcal", endcalDate);
            boolean isAssemblySubProduct = !StringUtil.isNullOrEmpty(request.getParameter("isAssemblySubProduct"))?Boolean.parseBoolean(request.getParameter("isAssemblySubProduct")):false;
            requestParams.put("excluseDateFilters",StringUtil.isNullOrEmpty(request.getParameter("excluseDateFilters"))?false:Boolean.parseBoolean(request.getParameter("excluseDateFilters"))); // Product Creation Form
            requestParams.put("isAssemblySubProduct", isAssemblySubProduct);
            KwlReturnObject rateandQtyResult = accProductObj.getAvailableQuantityForSerial(requestParams);
            List rateandQtyList = rateandQtyResult.getEntityList();
            int noOfAvailQty = rateandQtyList.size();
            Iterator it = rateandQtyList.iterator();
            while (it.hasNext()) {
                Object[] Objrow = (Object[]) it.next();
                String serialId = (String) Objrow[0];
                String documentId = (String) Objrow[3];

                KwlReturnObject accresultSerial = accountingHandlerDAOobj.getObject(NewBatchSerial.class.getName(), serialId);
                NewBatchSerial newBatchSerial = (NewBatchSerial) accresultSerial.getEntityList().get(0);
                if (!newBatchSerial.isIsopening()) {
                    KwlReturnObject accresultMap = accountingHandlerDAOobj.getObject(SerialDocumentMapping.class.getName(), documentId);
                    SerialDocumentMapping documentMapping = (SerialDocumentMapping) accresultMap.getEntityList().get(0);
                    KwlReturnObject accresultGRDetails = accountingHandlerDAOobj.getObject(GoodsReceiptOrderDetails.class.getName(), documentMapping.getDocumentid());
                    GoodsReceiptOrderDetails orderDetails = (GoodsReceiptOrderDetails) accresultGRDetails.getEntityList().get(0);

                    if (orderDetails != null) {
                        KwlReturnObject accresultGRDetail = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), orderDetails.getGrOrder().getID());
                        GoodsReceiptOrder gr = (GoodsReceiptOrder) accresultGRDetail.getEntityList().get(0);
                        if (gr.getExternalCurrencyRate() != 0) {
                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, orderDetails.getRate(), gr.getCurrency().getCurrencyID(), gr.getOrderDate(), gr.getExternalCurrencyRate());
                            valuation += (Double) crresult.getEntityList().get(0);
                        } else {
                            valuation += orderDetails.getRate();
                        }
                    }
                } else {
                    KwlReturnObject priceResult = accProductObj.getProductPrice(product.getID(), true, null, "", "");
                    List<Object> priceList = priceResult.getEntityList();
                    double proPrice = 0;
                    if (priceList != null) {
                        for (Object cogsval : priceList) {
                            proPrice = (cogsval == null ? 0.0 : (Double) cogsval);
                    }
                }
                    valuation += proPrice;
            }
                
            }
            if(isAssemblySubProduct){
                if (valuation == 0 || noOfAvailQty == 0) {
                    valuation = 0;    
                } else {
                    valuation = valuation/noOfAvailQty;
                }
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return valuation;
    }
    
    public double getSerialNoValuation(HttpServletRequest request, double onhand, String productTypeID, 
            double avgcost, Product product, Calendar startcal, Calendar endcal, Map<String, Object[]> companyMaxDateProductPriceList, Map<String, List<Object[]>> serialQtyProductMap) throws ServiceException {
        double valuation = 0;
        try {
            boolean isAssemblySubProduct = !StringUtil.isNullOrEmpty(request.getParameter("isAssemblySubProduct"))?Boolean.parseBoolean(request.getParameter("isAssemblySubProduct")):false;
            HashMap<String, Object> currencyParams = AccountingManager.getGlobalParams(request);
            Date startcalDate = null;
            Date endcalDate = null;
            String startcalString = authHandler.getDateOnlyFormat().format(startcal.getTime());
            try {
                startcalDate = authHandler.getDateOnlyFormat().parse(startcalString);
            } catch (ParseException ex) {
                startcalDate = startcal.getTime();
                Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            String endcalString = authHandler.getDateOnlyFormat().format(endcal.getTime());
            try {
                endcalDate = authHandler.getDateOnlyFormat().parse(endcalString);
            } catch (ParseException ex) {
                endcalDate = startcal.getTime();
                Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(serialQtyProductMap.containsKey(product.getID())) {
                List<Object[]> ObjrowList = serialQtyProductMap.get(product.getID());
                for(Object[] Objrow : ObjrowList) {
                    String isNewBatchSerialOpening = "";
                    if(!StringUtil.isNullOrEmpty(Objrow[1].toString())) {
                        isNewBatchSerialOpening = Objrow[1].toString();
                    }
                    if (!StringUtil.isNullOrEmpty(isNewBatchSerialOpening) && isNewBatchSerialOpening.equals(Constants.SQL_FALSE)) {
                        Double orderRate = Double.parseDouble(Objrow[6].toString());
                        KwlReturnObject accresultGRDetail = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), Objrow[7].toString());
                        GoodsReceiptOrder gr = (GoodsReceiptOrder) accresultGRDetail.getEntityList().get(0);
                        if (gr.getExternalCurrencyRate() != 0) {
                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, orderRate, gr.getCurrency().getCurrencyID(), gr.getOrderDate(), gr.getExternalCurrencyRate());
                            valuation += (Double) crresult.getEntityList().get(0);
                        } else {
                            valuation += orderRate;
                        }
                    } else {
                        if(companyMaxDateProductPriceList.containsKey(product.getID())) {
                            Object[] priceObj = companyMaxDateProductPriceList.get(product.getID());
                            double proPrice = (Double) priceObj[1];
    //                        KwlReturnObject priceResult = accProductObj.getProductPrice(product.getID(), true, null, "", "");
    //                        List<Object> priceList = priceResult.getEntityList();
    //                        double proPrice = 0;
    //                        if (priceList != null) {
    //                            for (Object cogsval : priceList) {
    //                                proPrice = (cogsval == null ? 0.0 : (Double) cogsval);
    //                            }
    //                        }
                            valuation += proPrice;
                        }
                    }
                }
            }
            if(isAssemblySubProduct){
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("productid", product.getID());
                requestParams.put("startcal", startcalDate);
                requestParams.put("endcal", endcalDate);
                requestParams.put("excluseDateFilters",StringUtil.isNullOrEmpty(request.getParameter("excluseDateFilters"))?false:Boolean.parseBoolean(request.getParameter("excluseDateFilters"))); // Product Creation Form
                KwlReturnObject rateandQtyResult = accProductObj.getAvailableQuantityForSerial(requestParams);
                List rateandQtyList = rateandQtyResult.getEntityList();
                int noOfAvailQty = rateandQtyList.size();
                valuation = valuation/noOfAvailQty;
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(product.getID() + ","+valuation);
        return valuation;
    }
    
    public double getSerialNoInventoryValuation(HttpServletRequest request, double onhand, String productTypeID, double avgcost, Product product, Calendar startcal, Calendar endcal) throws ServiceException {
        double valuation = 0;
        try {
            Date startcalDate = null;
            Date endcalDate = null;
            String startcalString = authHandler.getDateOnlyFormat().format(startcal.getTime());
            try {
                startcalDate = authHandler.getDateOnlyFormat().parse(startcalString);
            } catch (ParseException ex) {
                startcalDate = startcal.getTime();
                Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            String endcalString = authHandler.getDateOnlyFormat().format(endcal.getTime());
            try {
                endcalDate = authHandler.getDateOnlyFormat().parse(endcalString);
            } catch (ParseException ex) {
                endcalDate = startcal.getTime();
                Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("productid", product.getID());
            requestParams.put("startcal", startcalDate);
            requestParams.put("endcal", endcalDate);
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            KwlReturnObject rateandQtyResult = accProductObj.getAvailableStockForSerial(requestParams);
            List rateandQtyList = rateandQtyResult.getEntityList();
            Iterator it = rateandQtyList.iterator();
            while (it.hasNext()) {
                Object[] Objrow = (Object[]) it.next();
                String serialnames = (String) Objrow[1];
                String batchnames = (String) Objrow[2];
                String store = (String) Objrow[3];
                valuation += accProductObj.getSerialNoStockValuation(product.getID(), sessionHandlerImpl.getCompanyid(request), serialnames,batchnames,store);
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return valuation;
    }
    
    public double getSerialNoInventoryValuation(HttpServletRequest request, double onhand, String productTypeID, double avgcost, Product product, 
            Calendar startcal, Calendar endcal, Map<String, List<Object[]>> serialNoInventoryValMap) throws ServiceException {
        double valuation = 0;
        try {
            
            if(serialNoInventoryValMap.containsKey(product.getID())) {
                List<Object[]> ObjrowList = serialNoInventoryValMap.get(product.getID());
                for(Object[] Objrow : ObjrowList) {
                    String serialnames = (String) Objrow[1];
                    String batchnames = (String) Objrow[2];
                    String store = (String) Objrow[3];
                    valuation += accProductObj.getSerialNoStockValuation(product.getID(), sessionHandlerImpl.getCompanyid(request), serialnames,batchnames,store);
                }
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return valuation;
    }
    
    public double getFIFO(HttpServletRequest request, String productid, Date endDate, double onhand, boolean isLifo,String productTypeID) throws ServiceException {
        try {
            double lifo = 0;
            if(onhand >0){
            double GRrate = 0, purchaseQty = 0;
            int rateCount = 0, soldQty = 0, totalPurchaseQty = 0;
            List<Date> date = new ArrayList();
            List<Double> qty = new ArrayList();
            List<Double> baseuomrate = new ArrayList(); // Conversion Factor
            List<Double> rate = new ArrayList();
            List<String> currency = new ArrayList();
            List<Double> extCurrencyrate = new ArrayList();

            String companyid = sessionHandlerImpl.getCompanyid(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            HashMap<String, Object> currencyParams = AccountingManager.getGlobalParams(request);

            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put("productid", productid);
            requestParams.put("producttypeid", productTypeID);
            if(endDate!=null)
            requestParams.put("enddate", endDate);

            KwlReturnObject rateandQtyResult = accProductObj.getRateandQtyOfOpeningGRSR(requestParams); // getting transaction information of product opening, GR and SR
            List rateandQtyList = rateandQtyResult.getEntityList();
            Iterator it = rateandQtyList.iterator();
            while (it.hasNext()) {
                 Object[] Objrow = (Object[]) it.next();
                if (Objrow[3] != null) {
                    date.add((Date) Objrow[0]);
                    if(Objrow[2]==null)
                        continue;
                    double purchaseReturnQty = 0;
                    if (!StringUtil.isNullOrEmpty((String) Objrow[9])) {
//                        KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Inventory.class.getName(), (String) Objrow[9]);
//                        Inventory inventory = (Inventory) accresult.getEntityList().get(0);
//                        purchaseReturnQty = inventory.getQuantity();
                         if(!StringUtil.isNullOrEmpty(Objrow[12].toString())){
                            purchaseReturnQty = Double.parseDouble(Objrow[12].toString());
                         }
                    }
                    if (purchaseReturnQty == 0) {
                        qty.add((Objrow[2] == null) ? 0 : (Double) Objrow[2]);
                    } else {
                        double actQty = (Double) Objrow[2];
                        actQty = actQty - purchaseReturnQty;
                        if (actQty > 0) {
                            qty.add(actQty);

                        } else {
                            continue;
                        }
                    }
                    baseuomrate.add((Objrow[3]==null)?0:(Double)Objrow[3]);
                    rate.add((Objrow[4]==null)?0:(Double)Objrow[4]);
                    if (StringUtil.isNullOrEmpty(Objrow[5].toString())) {
                        currency.add(currencyid);
                    } else {
                        currency.add((String) Objrow[5]);
                    }
                    if (Objrow[10] != null && Objrow[10] != "") {
//                        KwlReturnObject res = accountingHandlerDAOobj.getObject(GoodsReceiptOrderDetails.class.getName(), Objrow[10].toString());
//                        GoodsReceiptOrderDetails grd = (GoodsReceiptOrderDetails) res.getEntityList().get(0);
//                        if (grd!=null ) {
                        if (!StringUtil.isNullOrEmpty( Objrow[11].toString()) ) {
                            extCurrencyrate.add(Double.parseDouble(Objrow[11].toString()));
//                            extCurrencyrate.add(grd.getGrOrder().getExternalCurrencyRate());
                        } else {
                            extCurrencyrate.add(0.0);
                        }
                    } else {
                        extCurrencyrate.add(0.0);
                    }

                }
            }
//                        KwlReturnObject initialQty, initialPurchasePrice, qtyfrominv,qtyRatefromInv;
//			initialQty = accProductObj.getInitialQuantity(productid);
//			if(initialQty.getEntityList().get(0) != null){
//				initialPurchasePrice = accProductObj.getInitialCost(productid);
//				if(initialPurchasePrice.getEntityList().get(0) != null){
//					qty.add(Double.parseDouble(initialQty.getEntityList().get(0).toString()));
//					rate.add(Double.parseDouble(initialPurchasePrice.getEntityList().get(0).toString()));
//				}
//			}
//                        //To do - need to modify for multiple UOM.
//			qtyRatefromInv = accProductObj.getRateandQtyfromInvoice(productid);
//			Iterator<List> iteratorInv = qtyRatefromInv.getEntityList().iterator();
//			while(iteratorInv.hasNext()){
//				GoodsReceiptDetail goodsReceiptDetail = (GoodsReceiptDetail)iteratorInv.next();
//				purchaseQty = goodsReceiptDetail.getInventory().getQuantity();
//				GRrate = goodsReceiptDetail.getRate();
//				qty.add(purchaseQty);
//				rate.add(GRrate);
//			}

            double totalQty = onhand;
            if (isLifo) {
                for (int i = 0; i < qty.size(); i++) {
                    if (totalQty >= qty.get(i) * baseuomrate.get(i) && totalQty != 0) {
                        double tempRate = rate.get(i);
                        Date transactionDate = date.get(i);
                        double baseuomQty = qty.get(i) * baseuomrate.get(i);

                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i), transactionDate, extCurrencyrate.get(i));
                        tempRate = (Double) crresult.getEntityList().get(0);

                        lifo = lifo + (baseuomQty * (tempRate/baseuomrate.get(i)));
                        totalQty = totalQty - baseuomQty;
                    } else if (totalQty < qty.get(i) * baseuomrate.get(i) && totalQty != 0) {
                        double tempRate = rate.get(i);
                        Date transactionDate = date.get(i);

                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i), transactionDate, extCurrencyrate.get(i));
                        tempRate = (Double) crresult.getEntityList().get(0);

                        lifo = lifo + (totalQty * (tempRate/baseuomrate.get(i)));
                        totalQty = 0;
                    }
                }
            }

            if (!isLifo) {
                for (int i = qty.size(); i > 0; i--) {
                    if (totalQty >= qty.get(i - 1) * baseuomrate.get(i - 1) && totalQty != 0) {
                        double tempRate = rate.get(i - 1);
                        Date transactionDate = date.get(i - 1);
                        double baseuomQty = qty.get(i - 1) * baseuomrate.get(i - 1);

                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i - 1), transactionDate, extCurrencyrate.get(i-1));
                        tempRate = (Double) crresult.getEntityList().get(0);

                        lifo = lifo + (baseuomQty * (tempRate/baseuomrate.get(i-1)));
                        totalQty = totalQty - baseuomQty;
                    } else if (totalQty < qty.get(i - 1)* baseuomrate.get(i - 1) && totalQty != 0) {
                        double tempRate = rate.get(i - 1);
                        Date transactionDate = date.get(i - 1);
                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i - 1), transactionDate, extCurrencyrate.get(i-1));
                        tempRate = (Double) crresult.getEntityList().get(0);

                        lifo = lifo + (totalQty * (tempRate/baseuomrate.get(i-1)));
                        totalQty = 0;
                    }
                }
            }
            }
            if (onhand < 0) {
                KwlReturnObject priceResult = accProductObj.getProductPrice(productid, true, null, "", "");
                List<Object> priceList = priceResult.getEntityList();
                double proPrice = 0;
                if (priceList != null) {
                    for (Object cogsval : priceList) {
                        proPrice = (cogsval == null ? 0.0 : (Double) cogsval);
                    }
                } 
                lifo = onhand * proPrice;
            }
        
            return lifo;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }
    
    public double getFIFO(HttpServletRequest request, String productid, Date endDate, double onhand, boolean isLifo,String productTypeID, Map<String, Object[]> companyMaxDateProductPriceList) throws ServiceException {
        try {
            double lifo = 0;
            if(onhand >0){
//            double GRrate = 0, purchaseQty = 0;
//            int rateCount = 0, soldQty = 0, totalPurchaseQty = 0;
            List<Date> date = new ArrayList();
            List<Double> qty = new ArrayList();
            List<Double> baseuomrate = new ArrayList(); // Conversion Factor
            List<Double> rate = new ArrayList();
            List<String> currency = new ArrayList();
            List<Double> extCurrencyrate = new ArrayList();

            String companyid = sessionHandlerImpl.getCompanyid(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            HashMap<String, Object> currencyParams = AccountingManager.getGlobalParams(request);

            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put("productid", productid);
            requestParams.put("producttypeid", productTypeID);
            requestParams.put("enddate", endDate);

            KwlReturnObject rateandQtyResult = accProductObj.getRateandQtyOfOpeningGRSR(requestParams); // getting transaction information of product opening, GR and SR
            List rateandQtyList = rateandQtyResult.getEntityList();
            Iterator it = rateandQtyList.iterator();
            while (it.hasNext()) {
                 Object[] Objrow = (Object[]) it.next();
                if (Objrow[3] != null) {
                    date.add((Date) Objrow[0]);
                    if(Objrow[2]==null)
                        continue;
                    double purchaseReturnQty = 0;
                    if (!StringUtil.isNullOrEmpty((String) Objrow[9])) {
//                        KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Inventory.class.getName(), (String) Objrow[9]);
//                        Inventory inventory = (Inventory) accresult.getEntityList().get(0);
//                        purchaseReturnQty = inventory.getQuantity();
                         if(!StringUtil.isNullOrEmpty(Objrow[2].toString())){
                            purchaseReturnQty = Double.parseDouble(Objrow[2].toString());
                         }
                    }
                    if (purchaseReturnQty == 0) {
                        qty.add((Objrow[2] == null) ? 0 : (Double) Objrow[2]);
                    } else {
                        double actQty = (Double) Objrow[2];
                        actQty = actQty - purchaseReturnQty;
                        if (actQty > 0) {
                            qty.add(actQty);
                        } else {
                            continue;
                        }
                    }
                    baseuomrate.add((Objrow[3]==null)?0:(Double)Objrow[3]);
                    rate.add((Objrow[4]==null)?0:(Double)Objrow[4]);
                    if (StringUtil.isNullOrEmpty(Objrow[5].toString())) {
                        currency.add(currencyid);
                    } else {
                        currency.add((String) Objrow[5]);
                    }
                    if (Objrow[10] != null && Objrow[10] != "") {
//                        KwlReturnObject res = accountingHandlerDAOobj.getObject(GoodsReceiptOrderDetails.class.getName(), Objrow[10].toString());
//                        GoodsReceiptOrderDetails grd = (GoodsReceiptOrderDetails) res.getEntityList().get(0);
//                        if (grd!=null ) {
                        if (!StringUtil.isNullOrEmpty( Objrow[11].toString()) ) {
                            extCurrencyrate.add(Double.parseDouble(Objrow[11].toString()));
//                            extCurrencyrate.add(grd.getGrOrder().getExternalCurrencyRate());
                        } else {
                            extCurrencyrate.add(0.0);
                        }
                    } else {
                        extCurrencyrate.add(0.0);
                    }

                }
            }
//                        KwlReturnObject initialQty, initialPurchasePrice, qtyfrominv,qtyRatefromInv;
//			initialQty = accProductObj.getInitialQuantity(productid);
//			if(initialQty.getEntityList().get(0) != null){
//				initialPurchasePrice = accProductObj.getInitialCost(productid);
//				if(initialPurchasePrice.getEntityList().get(0) != null){
//					qty.add(Double.parseDouble(initialQty.getEntityList().get(0).toString()));
//					rate.add(Double.parseDouble(initialPurchasePrice.getEntityList().get(0).toString()));
//				}
//			}
//                        //To do - need to modify for multiple UOM.
//			qtyRatefromInv = accProductObj.getRateandQtyfromInvoice(productid);
//			Iterator<List> iteratorInv = qtyRatefromInv.getEntityList().iterator();
//			while(iteratorInv.hasNext()){
//				GoodsReceiptDetail goodsReceiptDetail = (GoodsReceiptDetail)iteratorInv.next();
//				purchaseQty = goodsReceiptDetail.getInventory().getQuantity();
//				GRrate = goodsReceiptDetail.getRate();
//				qty.add(purchaseQty);
//				rate.add(GRrate);
//			}

           double totalQty = onhand;
            if (isLifo) {
                for (int i = 0; i < qty.size(); i++) {
                    if (totalQty >= qty.get(i) * baseuomrate.get(i) && totalQty != 0) {
                        double tempRate = rate.get(i);
                        Date transactionDate = date.get(i);
                        double baseuomQty = qty.get(i) * baseuomrate.get(i);
                       
                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i), transactionDate, extCurrencyrate.get(i));
                        tempRate = (Double) crresult.getEntityList().get(0);

                        lifo = lifo + (baseuomQty * (tempRate/baseuomrate.get(i)));
                        totalQty = totalQty - baseuomQty;
                    } else if (totalQty < qty.get(i) * baseuomrate.get(i) && totalQty != 0) {
                        double tempRate = rate.get(i);
                        Date transactionDate = date.get(i);

                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i), transactionDate, extCurrencyrate.get(i));
                        tempRate = (Double) crresult.getEntityList().get(0);

                        lifo = lifo + (totalQty * (tempRate/baseuomrate.get(i)));
                            totalQty = 0;
                        }
                    }
                }

            if (!isLifo) {
                for (int i = qty.size(); i > 0; i--) {
                    if (totalQty >= qty.get(i - 1) * baseuomrate.get(i - 1) && totalQty != 0) {
                        double tempRate = rate.get(i - 1);
                        Date transactionDate = date.get(i - 1);
                        double baseuomQty = qty.get(i - 1) * baseuomrate.get(i - 1);

                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i - 1), transactionDate, extCurrencyrate.get(i-1));
                        tempRate = (Double) crresult.getEntityList().get(0);

                        lifo = lifo + (baseuomQty * (tempRate/baseuomrate.get(i-1)));
                        totalQty = totalQty - baseuomQty;
                    } else if (totalQty < qty.get(i - 1)* baseuomrate.get(i - 1) && totalQty != 0) {
                        double tempRate = rate.get(i - 1);
                        Date transactionDate = date.get(i - 1);
                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i - 1), transactionDate, extCurrencyrate.get(i-1));
                        tempRate = (Double) crresult.getEntityList().get(0);

                        lifo = lifo + (totalQty * (tempRate/baseuomrate.get(i-1)));
                        totalQty = 0;
                        }
                    } 
                }
            }
            if (onhand < 0) {
                lifo = 0;
                if(companyMaxDateProductPriceList.containsKey(productid)) {
                    Object[] priceObj = companyMaxDateProductPriceList.get(productid);
                    double proPrice = (Double) priceObj[1];
                    lifo = onhand * proPrice;
                }
//                KwlReturnObject priceResult = accProductObj.getProductPrice(productid, true, null, "", "");
//                List<Object> priceList = priceResult.getEntityList();
//                double proPrice = 0;
//                if (priceList != null) {
//                    for (Object cogsval : priceList) {
//                        proPrice = (cogsval == null ? 0.0 : (Double) cogsval);
//                    }
//                } 
                
            }
        
            return lifo;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }
    
    @Override
    public List getClosingStockVal(String productid, HashMap<String, Object> requestParams, Date stDate, Date endDate) throws ServiceException, ParseException {
        List ll = new ArrayList();
        try {
            double totalProPurchase = 0;
            double totalQuantityIn = 0;
            boolean isAssemblySubProduct = false;
            String companyid = "";
            if (requestParams.containsKey(Constants.companyKey)) {
                companyid = (String) requestParams.get("companyid");
            }
            Company company = null;
            if (requestParams.containsKey("isAssemblySubProduct"))
            {
                isAssemblySubProduct = Boolean.parseBoolean(requestParams.get("isAssemblySubProduct").toString());
            }
            
            KwlReturnObject quantityResult, priceResult = null, prResult, amtResult, tax, grCurrency, priceInHomeCurrency, openingPriceInBase;
            boolean tradingflag = false;
            if (requestParams.containsKey(Constants.companyKey)) {
                KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), requestParams.get(Constants.companyKey).toString());
                CompanyAccountPreferences pref = (CompanyAccountPreferences) cpresult.getEntityList().get(0);
                tradingflag = pref.isWithInvUpdate();
                KwlReturnObject companyresult = accountingHandlerDAOobj.getObject(Company.class.getName(), requestParams.get(Constants.companyKey).toString());
                company = (Company) companyresult.getEntityList().get(0);
            }
            
            priceResult = accProductObj.getProductPrice(productid, true, null, "", "");
            List<Object> priceList = priceResult.getEntityList();
            double proPrice = 0;
            double tempProPrice = 0;
            if (priceList != null) {
                for (Object cogsval : priceList) {
                    tempProPrice = (cogsval == null ? 0.0 : (Double) cogsval);
                }
                quantityResult = accProductObj.getQuantityPurchaseDetails(productid, true, stDate, endDate, isAssemblySubProduct);
                List<Inventory> quantityList = quantityResult.getEntityList();
                if (quantityList != null) {
                    for (Inventory inv : quantityList) {
                        proPrice = tempProPrice;
                        if (!inv.isDefective()) {
                            double quantityIn = 0;
                            double prQuantity = 0;
                            double baseuomrate = 1;
                            double ProPurchase = 0, taxPercent = 0, discountPercent = 0, rate = 0;

                            quantityIn = inv.getQuantity();
                            baseuomrate = inv.getBaseuomrate();
                            KwlReturnObject compresult = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
                            Product productObj = (Product) compresult.getEntityList().get(0);
                            Date transactionDate = inv.getUpdateDate();
                            priceResult = accProductObj.getProductPrice(productid, true, transactionDate, "", productObj.getCurrency().getCurrencyID());
                            priceList = priceResult.getEntityList();
                            if (priceList != null) {
                                for (Object cogsval : priceList) {
                                    tempProPrice = (cogsval == null ? 0.0 : (Double) cogsval);
                                    proPrice = tempProPrice;
                                    if (!company.getCurrency().getCurrencyID().equals(productObj.getCurrency().getCurrencyID())) {
                                        openingPriceInBase = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, proPrice, productObj.getCurrency().getCurrencyID(), transactionDate, 0);
                                        proPrice = (Double) openingPriceInBase.getEntityList().get(0);
                                    } else {
                                        proPrice = tempProPrice;
                                    }
                                }
                            }
                            priceResult = accGoodsReceiptDAOObj.getGoodsReceiptOrderFormInventory(inv.getID());
                            List<GoodsReceiptOrderDetails> grODetail = priceResult.getEntityList();
                            GoodsReceiptOrderDetails grd = null;
                            priceResult = accGoodsReceiptDAOObj.getStockAdjustmentFormInventory(inv.getID());
                            List<StockAdjustment> saAdj = priceResult.getEntityList();
                            try {
                                boolean viflag = false;
                                if (grODetail != null && grODetail.size() > 0) {
                                    for (GoodsReceiptOrderDetails grd1 : grODetail) {
                                        prResult = accGoodsReceiptDAOObj.getPurchaseReturnFormGoodsReceipt(grd1.getID());// This is logic for reduce the quantity if Purchase Return made using link Goods Receipt.
                                        List<PurchaseReturnDetail> prdeDetails = prResult.getEntityList();
                                        if (prdeDetails != null) {
                                            for (PurchaseReturnDetail prd : prdeDetails) {
                                                prQuantity = prd.getInventory().getQuantity();
                                            }
                                        }
                                        quantityIn = quantityIn - prQuantity;
                                        viflag = true;
                                        grd = grd1;
                                        proPrice = grd.getRate();
                                        proPrice = proPrice / baseuomrate;
                                        discountPercent = grd.getDiscount();
                                    }
                                } else if (saAdj != null) {
                                    for (StockAdjustment sad : saAdj) {
                                        proPrice = sad.getPricePerUnit();
                                        proPrice = proPrice / baseuomrate;
                                    }
                                }
                                if (quantityIn <= 0) {
                                    continue;
                                }
                                if (viflag) {
                                    ProPurchase += authHandler.round(quantityIn * baseuomrate * proPrice, companyid);
                                } else {
                                    ProPurchase += authHandler.round(quantityIn * baseuomrate * proPrice, companyid);
                                }


                                if (grd != null) {
                                    GoodsReceiptOrder gr = grd.getGrOrder();
                                    rate = grd.getGrOrder().getExternalCurrencyRate();
                                    priceInHomeCurrency = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ProPurchase, gr.getCurrency().getCurrencyID(), gr.getOrderDate(), rate);
                                    ProPurchase = (Double) priceInHomeCurrency.getEntityList().get(0);
                                }
                            } catch (Exception ex) {
                                ex.printStackTrace();
                                throw ServiceException.FAILURE("getClosingStockVal : " + ex.getMessage(), ex);
                            }
                            totalQuantityIn += (quantityIn * baseuomrate);
                            totalProPurchase += ProPurchase;
                        }
                    }
                }

                if (totalQuantityIn == 0 && totalProPurchase == 0 && proPrice > 0) {
                    totalQuantityIn = 1;
                    totalProPurchase = proPrice;
                }
                ll.add(0, totalProPurchase);
                ll.add(1, totalQuantityIn);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            throw ServiceException.FAILURE("getClosingStockVal : " + ex.getMessage(), ex);
        }
        return ll;
    }
    @Override
    public double[] getBalanceSheet(HttpServletRequest request, int nature, JSONArray jArr, Map<String, Object> advSearchAttributes) throws ServiceException, SessionExpiredException,JSONException {
        double total[]={0,0,0,0,0};
		try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
//            String query="from Group where parent is null and nature in ("+nature+") and affectGrossProfit=false and (company is null or company.companyID=?) order by nature desc, displayOrder";
//            List list = executeQuery(session, query,AuthHandler.getCompanyid(request));
            KwlReturnObject plresult = accAccountDAOobj.getGroupForProfitNloss(companyid, nature, false,false,false);
            List list = plresult.getEntityList();
            Iterator itr = list.iterator();

            Date startDate=null;
            Date endDate=null;
            if(request.getAttribute("netProfitClosesFlag")!=null&&(Boolean)request.getAttribute("netProfitClosesFlag"))
            {
                startDate=authHandler.getDateOnlyFormat().parse(request.getAttribute("stdate").toString());
                endDate=authHandler.getDateOnlyFormat().parse(request.getAttribute("enddate").toString());
             }else if(request.getAttribute("jasperreport")!=null && request.getAttribute("jasperreport").equals("JasperReport")) {                                 
                startDate=(Date)request.getAttribute("jaspersdate");
                endDate=(Date)request.getAttribute("jasperenddate");
            }else{
                startDate=authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
                endDate=authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            }
            Date startPreDate = null;
            Date endPreDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stpredate")) && !StringUtil.isNullOrEmpty(request.getParameter("endpredate"))) {
                startPreDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stpredate"));
                endPreDate = authHandler.getDateOnlyFormat().parse(request.getParameter("endpredate"));
            }
            while(itr.hasNext()) {
                Group group=(Group)itr.next();
                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
//                double tempFormatGrp[]=formatGroupDetails(request, companyid, group, startDate, endDate, 0, true, jArr,startPreDate,endPreDate);
                double tempFormatGrp[]=formatGroupDetails(paramJobj, companyid, group, startDate, endDate, 0, true, jArr,startPreDate,endPreDate,advSearchAttributes);
                total[0]+=tempFormatGrp[0];
                total[1]+=tempFormatGrp[1];
                total[2]+=tempFormatGrp[2];
                total[3]+=tempFormatGrp[3];
                total[4]+=tempFormatGrp[4];
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getBalanceSheet : "+ex.getMessage(), ex);
        }
        return total;
    }
    
    public double[] getBalanceSheet(HttpServletRequest request, int nature, JSONArray jArr, HashMap<String, List<Account>> accountGroupMap, Map<String, Object> advSearchAttributes) throws ServiceException, SessionExpiredException {
        double total[]={0,0,0,0,0};
          try {
            String companyid = "";
            boolean isConsolidationBS = request.getAttribute("consolidationBS") != null ? Boolean.FALSE.parseBoolean(request.getAttribute("consolidationBS").toString()) : false;
            if (isConsolidationBS && request.getAttribute("consolidationCompanyID") != null) {
                companyid = request.getAttribute("consolidationCompanyID").toString();
            } else {
                companyid = sessionHandlerImpl.getCompanyid(request);
            }
//            String query="from Group where parent is null and nature in ("+nature+") and affectGrossProfit=false and (company is null or company.companyID=?) order by nature desc, displayOrder";
//            List list = executeQuery(session, query,AuthHandler.getCompanyid(request));
            KwlReturnObject plresult = accAccountDAOobj.getGroupForProfitNloss(companyid, nature, false,false,false);
            List<Group> list = plresult.getEntityList();
            Date startDate=null;
            Date endDate=null;
            if(request.getAttribute("netProfitClosesFlag")!=null&&(Boolean)request.getAttribute("netProfitClosesFlag"))
            {
                startDate=authHandler.getDateOnlyFormat().parse(request.getAttribute("stdate").toString());
                endDate=authHandler.getDateOnlyFormat().parse(request.getAttribute("enddate").toString());
             }else if(request.getAttribute("jasperreport")!=null && request.getAttribute("jasperreport").equals("JasperReport")) {                                 
                startDate=(Date)request.getAttribute("jaspersdate");
                endDate=(Date)request.getAttribute("jasperenddate");
            }else{
                startDate=authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
                endDate=authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            }
            Date startPreDate = null;
            Date endPreDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stpredate")) && !StringUtil.isNullOrEmpty(request.getParameter("endpredate"))) {
                startPreDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stpredate"));
                endPreDate = authHandler.getDateOnlyFormat().parse(request.getParameter("endpredate"));
            }
            for(Group group:list) {
//                total+=formatGroupDetails(session,request, AuthHandler.getCompanyid(request), group, null, endDate, 0, true, jArr);
                double tempFormatGrp[]=formatGroupDetails(request, companyid, group, startDate, endDate, 0, true, jArr,startPreDate,endPreDate, accountGroupMap, advSearchAttributes);
                total[0]+=tempFormatGrp[0];
                total[1]+=tempFormatGrp[1];
                total[2]+=tempFormatGrp[2];
                total[3]+=tempFormatGrp[3];
                total[4]+=tempFormatGrp[4];
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getBalanceSheet : "+ex.getMessage(), ex);
        }
        return total;
    }
    
    public Map<String, Double> getPeriodAccountAmountMap(Map<String,Object> requestParams) throws ServiceException{
        boolean isMonthly = requestParams.containsKey("isMonthly") ? (Boolean) requestParams.get("isMonthly") : false;
        List accList = accJournalEntryobj.getSumAmountForAccount(requestParams);
        boolean groupByDebit = requestParams.containsKey("groupByDebit") ? (Boolean) requestParams.get("groupByDebit") : false;
        Map<String, Double> accAmountMap = new HashMap<String, Double>();
        if (accList != null && !accList.isEmpty()) {
            for (int i = 0; i < accList.size(); i++) {
                Object[] details = (Object[]) accList.get(i);
                if (details.length > 3) {
                    // details[0] - amount, details[1] - accountid, details[2] - dimension/custom field value, detauls [3] - year, details[4] - month    
                    // When monthly report is run, then it fetches year and month in select column
                    if (isMonthly) {
                        accAmountMap.put(details[2] + "--" + details[4] + "--" + details[5] + "--" + details[3], (Double) details[1]);
                    } else {
                        accAmountMap.put(details[2] + "--" + details[3], (Double) details[1]);
                    }
                } else {
                    if(groupByDebit){
                        if(details[0].toString().equals("T")){
                            accAmountMap.put("d_-"+details[2].toString(), (Double) details[1]);
                        }
                        else{
                            accAmountMap.put("c_-"+details[2].toString(), (Double) details[1]);
                        }
                    }
                    else{
                        accAmountMap.put(details[2].toString(), (Double) details[1]);
                    }
                }
            }
        }
        if(requestParams.containsKey("startpredate") && requestParams.containsKey("endpredate") && requestParams.get("startpredate")!=null && requestParams.get("endpredate")!=null ){
            Date startDate = (Date)requestParams.get("startdate");
            Date endDate = (Date)requestParams.get("enddate");
            requestParams.put("startdate", requestParams.get("startpredate"));
            requestParams.put("enddate", requestParams.get("endpredate"));
            accList = accJournalEntryobj.getSumAmountForAccount(requestParams);
            if (accList != null && !accList.isEmpty()) {
                for (int i = 0; i < accList.size(); i++) {
                    Object[] details = (Object[]) accList.get(i);
                    accAmountMap.put("previous--" + details[2].toString(), (Double) details[1]);
                }
            }   
            requestParams.put("startdate", startDate);
            requestParams.put("enddate", endDate);
        }
        return accAmountMap;
    }

    
    
    public Map<String, Double> getOpeningAccountAmountMap(Map<String,Object> requestParams) throws ServiceException, JSONException, SessionExpiredException {
        requestParams.put("isOpening", true);
        Map<String, Double> accAmountMap = new HashMap<String, Double>();
        boolean isBookClosed = requestParams.containsKey("isBookClosed") ? (Boolean)requestParams.get("isBookClosed") : false; 
        boolean groupByDebit = requestParams.containsKey("groupByDebit") ? (Boolean) requestParams.get("groupByDebit") : false;
        requestParams.remove("groupByDebit");
        String companyid = (String) requestParams.get("companyid");
        List accList = null;
        if(!isBookClosed){
            accList = accAccountDAOobj.getTransactionBasedOpeningBalance(requestParams);
        if (accList != null && !accList.isEmpty()) {
            for (int i = 0; i < accList.size(); i++) {
                Object[] details = (Object[]) accList.get(i);
                if (details[2] != null && details[2].toString().equals("T")) {
                    accAmountMap.put("opening--" + details[1].toString(), (Double) details[0]);
                }
            }
        }
        accList = accAccountDAOobj.getDefaultAccountOpeningBalance(requestParams);
        if (accList != null && !accList.isEmpty()) {
            for (int i = 0; i < accList.size(); i++) {
                Object[] details = (Object[]) accList.get(i);
                if (!accAmountMap.containsKey("opening--" + details[1].toString())) {
                    accAmountMap.put("opening--" + details[1].toString(), (Double) details[0]);
                }
            }
        }
        }
        accList = accJournalEntryobj.getSumAmountForAccount(requestParams);
        if (accList != null && !accList.isEmpty()) {
            for (int i = 0; i < accList.size(); i++) {
                Object[] details = (Object[]) accList.get(i);
                String accountid = details[2].toString();

                if (accAmountMap.containsKey("opening--" + accountid)) {
                    accAmountMap.put("opening--" + accountid, accAmountMap.get("opening--" + accountid) + (Double) details[1]);
                } else {
                    accAmountMap.put("opening--" + accountid, (Double) details[1]);
                }
            }
        }

        if (requestParams.containsKey("startpredate") && requestParams.containsKey("endpredate") && requestParams.get("startpredate") != null && requestParams.get("endpredate") != null) {
            Date startDate = (Date) requestParams.get("startdate");
            Date endDate = (Date) requestParams.get("enddate");
            requestParams.put("startdate", requestParams.get("startpredate"));
            requestParams.put("enddate", requestParams.get("endpredate"));
            if(!isBookClosed){
            accList = accAccountDAOobj.getTransactionBasedOpeningBalance(requestParams);
            if (accList != null && !accList.isEmpty()) {
                for (int i = 0; i < accList.size(); i++) {
                    Object[] details = (Object[]) accList.get(i);
                    if (details[2] != null && details[2].toString().equals("T")) {
                        accAmountMap.put("previous-opening--" + details[1].toString(), (Double) details[0]);
                    }
                }
            }

            accList = accAccountDAOobj.getDefaultAccountOpeningBalance(requestParams);
            if (accList != null && !accList.isEmpty()) {
                for (int i = 0; i < accList.size(); i++) {
                    Object[] details = (Object[]) accList.get(i);
                    if (!accAmountMap.containsKey("previous-opening--" + details[1].toString())) {
                        accAmountMap.put("previous-opening--" + details[1].toString(), (Double) details[0]);
                    }
                }
            }
            }
            accList = accJournalEntryobj.getSumAmountForAccount(requestParams);
            if (accList != null && !accList.isEmpty()) {
                for (int i = 0; i < accList.size(); i++) {
                    Object[] details = (Object[]) accList.get(i);
                    String accountid = details[2].toString();

                    if (accAmountMap.containsKey("previous-opening--" + accountid)) {
                        accAmountMap.put("previous-opening--" + accountid, accAmountMap.get("previous-opening--" + accountid) + (Double) details[1]);
                    } else {
                        accAmountMap.put("previous-opening--" + accountid, (Double) details[1]);
                    }
                }
            }
            requestParams.put("startdate", startDate);
            requestParams.put("enddate", endDate);
        }
        //Calculation of year closing balance
        KwlReturnObject prefresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
        KwlReturnObject extraprefresult = accountingHandlerDAOobj.loadObject(ExtraCompanyPreferences.class.getName(), companyid);
        ExtraCompanyPreferences extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
        if (!StringUtil.isNullOrEmpty(extrapref.getProfitLossAccountId())) {
            /**
             * Date excludedPreviousYearDate =
             * getDateForExcludePreviousYearBalanceFilter(paramJObj.optString(Constants.companyKey),
             * endDate); Date previousFYEndDate = new
             * DateTime(excludedPreviousYearDate).minusDays(1).toDate(); double
             * closedYrNetProfitAndLoss =
             * getClosedYearNetProfitAndLoss(previousFYEndDate, pref, extrapref,
             * paramJObj.optString(Constants.companyKey)); amount +=
             * closedYrNetProfitAndLoss;
             */

            Calendar cal = Calendar.getInstance();
            cal.setTime((Date)requestParams.get("startdate"));
            cal.add(Calendar.DATE, -1);
            double closedYrNetProfitAndLoss = getClosedYearNetProfitAndLoss(cal.getTime(), pref, extrapref, companyid);
            accAmountMap.put("opening-yearend--" + extrapref.getProfitLossAccountId(), closedYrNetProfitAndLoss);
        }
        requestParams.remove("isOpening");
        requestParams.put("groupByDebit", groupByDebit);
        return accAmountMap;
    }
    
    public Map<String, List<Account>> getGroupAccountMap(JSONObject paramJObj) throws JSONException, ServiceException {
        HashMap<String, Object> filterParams = new HashMap<String, Object>();
        String companyid = paramJObj.getString(Constants.companyKey);
        filterParams.put(Constants.companyKey, companyid);
        filterParams.put("parent", null);
        filterParams.put("order_by", " acccode, name asc");
        KwlReturnObject accresult = accAccountDAOobj.getAccountEntry(filterParams);
        List<Account> allAccList = accresult.getEntityList();
        Map<String, List<Account>> accGroupMap= new HashMap<String, List<Account>>();
        List accList = null;
        
        for (Account account:allAccList) {            
            String groupId = account.getGroup().getID();            
            if(accGroupMap.containsKey(groupId)){
                accList= accGroupMap.get(groupId);                
            }else{
                accList=new ArrayList<Account>();
            }
            accList.add(account);            
            accGroupMap.put(groupId,accList);
        }
        return accGroupMap;
    }
    
    
    public double[] getTradingAllAccount(JSONObject paramJObj, int nature, JSONArray jArr,Map<String, Double> accAmtMap, Map<String, Object> extraObjects) throws ServiceException, SessionExpiredException, JSONException {
        double[] total = {0, 0, 0, 0, 0, 0};

        try {
            String companyid = paramJObj.getString(Constants.companyKey);
            boolean isCostOfGoodsSold = false;
            if (paramJObj.optString("isCostOfGoodsSold", null) != null) {
                isCostOfGoodsSold = Boolean.parseBoolean(paramJObj.optString("isCostOfGoodsSold"));
            }
            boolean isForTradingAndProfitLoss = false;
            if ((paramJObj.optString("isForTradingAndProfitLoss", null) != null)) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(paramJObj.optString("isForTradingAndProfitLoss"));
            }
            
            KwlReturnObject plresult = null;
            boolean isBalanceSheet = false;
            boolean excludeP_LFilters = paramJObj.optBoolean("excludeP_LFilters",false);
            if(excludeP_LFilters){
                plresult =  accAccountDAOobj.getGroupForProfitNloss(companyid, nature, false,false,false);
                isBalanceSheet=true;
            }
            else {
                plresult= accAccountDAOobj.getGroupForProfitNloss(companyid, nature, true, isForTradingAndProfitLoss, isCostOfGoodsSold);
            }

            List<Group> list = plresult.getEntityList();
            for (Group group : list) {
                double[] tempTotal =  populateGroupDetailsAllAccount(paramJObj, group, 0, isBalanceSheet, jArr, accAmtMap, extraObjects);
                total[0] += tempTotal[0];
                total[1] += tempTotal[1];
                total[2] += tempTotal[2];
                total[3] += tempTotal[3];
                total[4] += tempTotal[4];
                total[5] += tempTotal[5];
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getTradingAllAccount : " + ex.getMessage(), ex);
        }
        return total;
    }
    
    private double[] populateGroupDetailsAllAccount(JSONObject paramJObj, Group group, int level, boolean isBalanceSheet, JSONArray jArr,Map<String, Double> accAmtMap, Map<String, Object> extraObjects) throws ServiceException, SessionExpiredException, ParseException,JSONException {
        double totalAmount[] = {0,0,0,0,0,0};
        boolean isDebit = false;
        double externalCurrencyRate = paramJObj.optString("externalCurrencyRate",null) != null ? (Double) paramJObj.get("externalCurrencyRate") : 1.0;
        String companyid = paramJObj.optString(Constants.companyKey,"");
        try {
            
            boolean isForTradingAndProfitLoss = false;
            if ((paramJObj.optString("isForTradingAndProfitLoss",null) != null)) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(paramJObj.optString("isForTradingAndProfitLoss"));
            }
            boolean isCostOfGoodsSold = false;
            if ((paramJObj.optString("isCostOfGoodsSold",null) != null)) {
                isCostOfGoodsSold = Boolean.parseBoolean(paramJObj.optString("isCostOfGoodsSold"));
            }
            
            if (isBalanceSheet) {
                if (group.getNature() == Group.NATURE_LIABILITY) {
                    isDebit = true;
                }
            } else if (group.getNature() == Group.NATURE_EXPENSES) {
                isDebit = true;
            }
            boolean directionDesc = false;
            GroupComp groupComp = new GroupComp(directionDesc);
            List<Group> children = new ArrayList(group.getChildren());//Added code for sorting on child groups on group name
            Collections.sort(children, groupComp);
            
            JSONArray chArr = new JSONArray();
            ExtraCompanyPreferences extrapref = null;
            if(extraObjects != null && extraObjects.containsKey("extraCompanyPreferences")){
                extrapref = (ExtraCompanyPreferences)extraObjects.get("extraCompanyPreferences");
            }
            else{
                KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), paramJObj.getString(Constants.companyKey));
                if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                    extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
                }
            }
            HashMap<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put(Constants.companyKey, paramJObj.getString(Constants.companyKey));
            filterParams.put("groupid", group.getID());
            if (isForTradingAndProfitLoss) {
                filterParams.put("costOfGoodsSoldGroup", isCostOfGoodsSold);
            }
            filterParams.put("parent", null);
            filterParams.put("order_by", " acccode, name asc"); 
            KwlReturnObject accresult = accAccountDAOobj.getAccountEntry(filterParams);
            List<Account> list = accresult.getEntityList();
            if(list!=null &&!list.isEmpty()){
            for (Account account : list) {
                if(!(account.getID().equals(extrapref.getOpeningStockAccountId()) ||account.getID().equals(extrapref.getClosingStockAccountId()) ||account.getID().equals(extrapref.getStockInHandAccountId()))){
                    double tempTotalAmount[] = populateAccountDetailsAllAccounts(paramJObj, account, level+1, isDebit, isBalanceSheet, chArr, accAmtMap, extraObjects);
                    totalAmount[0] += tempTotalAmount[0];
                    totalAmount[1] += tempTotalAmount[1];
                    totalAmount[2] += tempTotalAmount[2];
                    totalAmount[3] += tempTotalAmount[3];
                    totalAmount[4] += tempTotalAmount[4];
                    totalAmount[5] += tempTotalAmount[5];
            }
            }
            }
            if (children != null && !children.isEmpty()) {
                for (Group child : children) {
                    double tempTotalAmount[] = populateGroupDetailsAllAccount(paramJObj, child, level+1, isBalanceSheet, chArr, accAmtMap, extraObjects);
                    totalAmount[0] += tempTotalAmount[0];
                    totalAmount[1] += tempTotalAmount[1];
                    totalAmount[2] += tempTotalAmount[2];
                    totalAmount[3] += tempTotalAmount[3];
                    totalAmount[4] += tempTotalAmount[4];
                    totalAmount[5] += tempTotalAmount[5];
                }
            }
            
            /*
             * If Equity group is present for current company then show net
             * profit loss under this group. Calculate total amount
             * accordingly.Remove netProfitLossObj from extraObjects to
             * avoid duplication.
             */
            if (isBalanceSheet && group.getName().equalsIgnoreCase(Constants.ACC_EQUITY_GROUPNAME) && group.getNature() == Group.NATURE_LIABILITY && group.getCompany()!=null && group.getCompany().getCompanyID().equals(companyid) ) {
                if (extraObjects.containsKey("netProfitLossObj") && extraObjects.get("netProfitLossObj") instanceof JSONObject) {
                    JSONObject netProfitLossObj = (JSONObject) extraObjects.get("netProfitLossObj");
                    netProfitLossObj.put("level", level+1);
                    
                    chArr.put(netProfitLossObj);
                    
                    totalAmount[0] -= (netProfitLossObj.optDouble("amount",0));
                    totalAmount[1] -= (netProfitLossObj.optDouble("preamount",0));
                    totalAmount[2] -= (netProfitLossObj.optDouble("openingamount",0));
                    totalAmount[3] -= (netProfitLossObj.optDouble("periodamount",0));
                    totalAmount[4] -= (netProfitLossObj.optDouble("endingamount",0));
//                    totalAmount[5] += tempTotalAmount[5];
                    
                    extraObjects.remove("netProfitLossObj");
                }
            }

            if (chArr.length() > 0) {
                JSONObject obj = new JSONObject();
                obj.put("accountname", group.getName());
                obj.put("accountid", group.getID());
                obj.put("level", level);
                obj.put("leaf", false);
                obj.put("isparent", true);
                obj.put("amount", "");
                obj.put("budget","");
                obj.put("openingamount","");
                obj.put("perioamount","");
                obj.put("endingamount","");
                obj.put("amountInSelectedCurrency", "");
                obj.put("preamount", "");
                obj.put("isdebit", isDebit);
                obj.put("isgroupflag", true);// It is used in Consolidation BS for identifying that it is a group entry
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && group != null&& group.isCostOfGoodsSoldGroup()) {
                    obj.put("acctype", "costofgoodssold");
                } else {
                    obj.put("acctype", (group.getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                }
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && group != null && group.isCostOfGoodsSoldGroup()) {
                    obj.put("group", "costofgoodssold");
                } else if (group.getParent() != null) {
                    obj.put("group", (group.getParent().getID().toString().equals("15")) ? "income" : ((group.getParent().getID().toString().equals("8")) ? "expense" : ""));
                } else {
                    obj.put("group", (group.getID().toString().equals("15")) ? "income" : ((group.getID().toString().equals("8")) ? "expense" : ""));
                }
                jArr.put(obj);
                for (int i = 0; i < chArr.length(); i++) {
                    chArr.getJSONObject(i).put("parentid", obj.getString("accountid"));
                    chArr.getJSONObject(i).put("nameofaccountgroup", group.getName());// It is used in Consolidation BS for finding name of account group
                    jArr.put(chArr.getJSONObject(i));
                }

                obj = new JSONObject();
                obj.put("accountname", "Total for " + group.getName());
                obj.put("accountid", "Total for " +group.getID());
                obj.put("level", level);
                obj.put("leaf", true);
                obj.put("show", true);
                obj.put("GroupTotal", true);// It is used in Consolidation BS for identifyng of account group
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && group != null && group.isCostOfGoodsSoldGroup()) {
                    obj.put("acctype", "costofgoodssold");
                } else {
                    obj.put("acctype", (group.getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                }
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && group != null && group.isCostOfGoodsSoldGroup()) {
                    obj.put("group", "costofgoodssold");
                } else if (group.getParent() != null) {
                    obj.put("group", (group.getParent().getID().toString().equals("15")) ? "income" : ((group.getParent().getID().toString().equals("8")) ? "expense" : ""));
                } else {
                    obj.put("group", (group.getID().toString().equals("15")) ? "income" : ((group.getID().toString().equals("8")) ? "expense" : ""));
                }
                double ta = totalAmount[0];
                double tempta = totalAmount[1];
                double topen = totalAmount[2];
                double tperiod = totalAmount[3];
                double tend = totalAmount[4];
                double tbudget = totalAmount[5];
                if (!isDebit ) {
                    if (ta != 0) {
                        ta = -ta;
                    } else {
                        ta = ta;
                    }
                    if (tempta != 0) {
                        tempta = -tempta;
                    } else {
                        tempta = -tempta;
                    }
                    if(topen!=0){
                        topen=-topen;
                    }else{
                        topen=topen;
                    }
                    if(tperiod!=0){
                        tperiod=-tperiod;
                    }else{
                        tperiod=tperiod;
                    }
                    if (tend != 0) {
                        tend = -tend;
                    } else {
                        tend = tend;
                    }
                }
                if (isBalanceSheet) {
                    if (ta != 0) {
                        ta = -ta;
                    } else {
                        ta = ta;
                    }
                    if (tempta != 0) {
                        tempta = -tempta;
                    } else {
                        tempta = -tempta;
                    }
                    if(topen!=0){
                        topen=-topen;
                    }else{
                        topen=topen;
                    }
                    if(tperiod!=0){
                        tperiod=-tperiod;
                    }else{
                        tperiod=tperiod;
                    }
                    if(tend!=0){
                        tend=-tend;
                    }else{
                        tend=tend;
                    }
                }
                obj.put("amount", ta);
                obj.put("openingamount",topen);
                obj.put("periodamount",tperiod);
                obj.put("endingamount",tend);
                obj.put("budget",tbudget);
                obj.put("amountInSelectedCurrency", ta*externalCurrencyRate);
                obj.put("preamount", tempta);
                obj.put("isdebit", isDebit);
                jArr.put(obj);
            }
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("populateGroupDetailsAllAccount : " + ex.getMessage(), ex);
        }
        return totalAmount;
    }
    
    private double[] populateAccountDetailsAllAccounts(JSONObject paramJobj, Account account, int level, boolean isDebit, boolean isBalanceSheet, JSONArray jArr, Map<String, Double> accAmtmap, Map<String, Object> extraObjects) throws ServiceException, SessionExpiredException, ParseException,JSONException {

        boolean isForTradingAndProfitLoss = paramJobj.optBoolean("isForTradingAndProfitLoss",false);
        boolean isMonthlyReport=(paramJobj.optString("monthlyreport",null)!=null && paramJobj.optString("monthlyreport",null).equals("MonthlyReport")); 
        boolean isCostOfGoodsSold = paramJobj.optBoolean("isCostOfGoodsSold",false);
        boolean isShowZeroAmountAsBlank = paramJobj.optBoolean("isShowZeroAmountAsBlank",false);
        boolean hidechildCV = paramJobj.optBoolean("hidechildCV",false);
        String companyid = paramJobj.getString("companyid");
        Boolean showAccountsInGroup = paramJobj.optBoolean("showAccountsInGroup",true);
        double arrayAmount[] ={0,0,0,0,0,0};
        double periodamount = 0;
        double previousopeningamount=0;
        double openingamount=0;
        double endingamount=0;
        double previousAmount = 0;
        double budget=0;
        boolean isMonthly = paramJobj.has("isMonthly") ? paramJobj.getBoolean("isMonthly") : false;
        String customvalue = paramJobj.optString("customvaluepassed",null);
        if(!StringUtil.isNullOrEmpty(customvalue)){
            if(isMonthly){
                String year = paramJobj.getString("yearpassed");
                String month = paramJobj.getString("monthpassed");
                periodamount = accAmtmap == null ? 0 : (accAmtmap.containsKey(account.getID()+"--"+year+"--"+month+"--"+customvalue) ? accAmtmap.get(account.getID()+"--"+year+"--"+month+"--"+customvalue) : 0);
            }else{
                periodamount = accAmtmap == null ? 0 : (accAmtmap.containsKey(account.getID()+"--"+customvalue) ? accAmtmap.get(account.getID()+"--"+customvalue) : 0);
                }
        }
        else{
            periodamount = accAmtmap == null ? 0 : (accAmtmap.containsKey(account.getID()) ? accAmtmap.get(account.getID()) : 0);
        }        
        periodamount = authHandler.round(periodamount, companyid);
        double amount = periodamount;
        
        openingamount = accAmtmap == null ? 0 : (accAmtmap.containsKey("opening--" + account.getID()) ? accAmtmap.get("opening--" + account.getID()) : 0);
        boolean isPeriod = paramJobj.optString("isPeriod", null) != null ? Boolean.parseBoolean(paramJobj.optString("isPeriod")) : false;
        if(!isPeriod && paramJobj.optBoolean("periodView", false) && accAmtmap.containsKey("opening-yearend--"+account.getID())){
            openingamount +=accAmtmap.get("opening-yearend--"+account.getID());
        }
        openingamount = authHandler.round(openingamount, companyid);
        
        previousAmount = accAmtmap == null ? 0 : (accAmtmap.containsKey("previous--" + account.getID()) ? accAmtmap.get("previous--" + account.getID()) : 0);
        previousAmount = authHandler.round(previousAmount, companyid);
        previousopeningamount = accAmtmap == null ? 0 : (accAmtmap.containsKey("previous-opening--" + account.getID()) ? accAmtmap.get("previous-opening--" + account.getID()) : 0);
        previousopeningamount = authHandler.round(previousopeningamount, companyid);
        
        endingamount = authHandler.round(openingamount + periodamount, companyid);
        
        if(paramJobj.has("periodView") && !paramJobj.getBoolean("periodView")) {
            if (extraObjects.containsKey("startdate") && extraObjects.get("startdate") != null) {
                Date startDate = (Date) extraObjects.get("startdate");
                if (startDate.before(account.getCreationDate()) || startDate.equals(account.getCreationDate())) {
                    amount = authHandler.round(openingamount + periodamount, companyid);
                }
            }
            if (extraObjects.containsKey("startpredate") && extraObjects.get("startpredate") != null) {
                Date startPreDate = (Date) extraObjects.get("startpredate");
                if (startPreDate.before(account.getCreationDate()) || startPreDate.equals(account.getCreationDate())) {
                    previousAmount = authHandler.round(previousopeningamount + previousAmount, companyid);
                }
            }
        }
        arrayAmount[0]=amount;
        arrayAmount[1]=previousAmount;
        arrayAmount[2]=openingamount;
        arrayAmount[3]=amount;
        arrayAmount[4]=endingamount;
        arrayAmount[5]=budget;
        
        
//        double tempTotalAmount=0;
        boolean directionDesc = false;
        boolean sortOnType = false; 
        accountComp accComp = new accountComp(sortOnType, directionDesc);    
        List list = new ArrayList(account.getChildren());//Added code for sorting on account code, account name
        Collections.sort(list, accComp);
        Iterator<Account> itr = list.iterator();
        JSONArray chArr = new JSONArray();
        double externalCurrencyRate=paramJobj.optString("externalCurrencyRate",null)!=null?(Double)paramJobj.get("externalCurrencyRate"):1.0;
        while (itr.hasNext()) {
            Account child = itr.next();
            double tempTotalAmount[]=populateAccountDetailsAllAccounts(paramJobj, child, level + 1, isDebit, isBalanceSheet, chArr, accAmtmap, extraObjects);
            arrayAmount[0]+=tempTotalAmount[0];
            arrayAmount[1]+=tempTotalAmount[1];
            arrayAmount[2]+=tempTotalAmount[2];
            arrayAmount[3]+=tempTotalAmount[3];
            arrayAmount[4]+=tempTotalAmount[4];
            arrayAmount[5]+=tempTotalAmount[5];            
        }

        amount=arrayAmount[0];
        String accname = account.getName();
        
        try { 
            if (chArr.length() > 0) {
                JSONObject obj = null;
                boolean haschild = !hidechildCV;
                if (showAccountsInGroup) {
                    obj = new JSONObject();
                    obj.put("accountname", accname);
                    obj.put("accountcode", StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode());
                    obj.put("accountid", account.getID());
                    obj.put("haschild", haschild);
                    obj.put("level", level);
                    obj.put("leaf", false);
                    obj.put("amount","");
                    obj.put("budget", "");
                    obj.put("openingamount","");
                    obj.put("periodamount","");
                    obj.put("endingamount","");
                    obj.put("amountInSelectedCurrency","");
                    obj.put("preamount", "");
                    obj.put("isdebit", isDebit);
                    obj.put("accountflag", true);
                    if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                        obj.put("acctype", "costofgoodssold");
                    } else {
                        obj.put("acctype", (account.getGroup().getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                    }
                    if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                        obj.put("group", "costofgoodssold");
                    } else if (account.getGroup().getParent() != null) {
                        obj.put("group", (account.getGroup().getParent().getID().toString().equals("15")) ? "income" : ((account.getGroup().getParent().getID().toString().equals("8")) ? "expense" : ""));
                    } else {
                        obj.put("group", (account.getGroup().getID().toString().equals("15")) ? "income" : ((account.getGroup().getID().toString().equals("8")) ? "expense" : ""));
                    }
                    
                    if (!hidechildCV) {
                        jArr.put(obj);
                    }
                    for (int i = 0; i < chArr.length(); i++) {
                        if (hidechildCV) {
                            if (chArr.getJSONObject(i).has("amount1") && StringUtil.isNullOrEmpty(chArr.getJSONObject(i).getString("amount1"))) {
                                amount += chArr.getJSONObject(i).getDouble("amount1");
                            }
                            if (chArr.getJSONObject(i).has("preamount1") && StringUtil.isNullOrEmpty(chArr.getJSONObject(i).getString("preamount1"))) {
                                previousAmount += chArr.getJSONObject(i).getDouble("preamount1");
                            }
                        } else {
                            chArr.getJSONObject(i).put("haschild",haschild);
                            jArr.put(chArr.getJSONObject(i));
                        }
                    }
                }

                if ((amount != 0 || previousAmount != 0 || openingamount != 0 || periodamount != 0 || endingamount != 0 || budget != 0) || isMonthlyReport) {
                    obj = new JSONObject();
                    obj.put("accountname", showAccountsInGroup ? "Other " + accname : accname);
                    obj.put("accountid", showAccountsInGroup ? "Other " + account.getID() :account.getID());
                    obj.put("accountcode", StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode());
                    obj.put("level", showAccountsInGroup ? level + 1 : level);
                    obj.put("leaf", true);
                    obj.put("haschild", haschild);
                    obj.put("amount1", amount);
                    obj.put("preamount1", previousAmount);
                    if (!isDebit) {
                        if (amount != 0) {
                            amount = -amount;
                        } else {
                            amount = amount;
                        }
                        if (previousAmount != 0) {
                            previousAmount = -previousAmount;
                        } else {
                            previousAmount = previousAmount;
                        }
                        if(openingamount!=0){
                            openingamount=-openingamount;
                        }else{
                            openingamount=openingamount;
                        }
                        if(periodamount!=0){
                            periodamount=-periodamount;
                        }else{
                            periodamount=periodamount;
                        }
                        if(endingamount!=0){
                            endingamount=-endingamount;
                        }else{
                            endingamount=endingamount;
                        }
                    }
                    if (isBalanceSheet) {
                         if (amount != 0) {
                            amount = -amount;
                        } else {
                            amount = amount;
                        }
                        if (previousAmount != 0) {
                            previousAmount = -previousAmount;
                        } else {
                            previousAmount = previousAmount;
                        }
                        if (openingamount != 0) {
                            openingamount = -openingamount;
                        } else {
                            openingamount = openingamount;
                        }
                        if(periodamount!=0){
                            periodamount=-periodamount;
                        }else{
                            periodamount=periodamount;
                        }
                        if(endingamount!=0){
                            endingamount=-endingamount;
                        }else{
                            endingamount=endingamount;
                        }
                    }
                    obj.put("amount", isShowZeroAmountAsBlank && amount==0.0?"":amount);
                    obj.put("periodamount",isShowZeroAmountAsBlank && periodamount==0.0?"":periodamount);
                    obj.put("openingamount",isShowZeroAmountAsBlank && openingamount==0.0?"":openingamount);
                    obj.put("endingamount",isShowZeroAmountAsBlank && endingamount==0.0?"":endingamount);
                    obj.put("budget",budget);
                    obj.put("amountInSelectedCurrency", (isShowZeroAmountAsBlank && amount*externalCurrencyRate==0.0)?"":amount*externalCurrencyRate);
                    obj.put("preamount", previousAmount);
                    obj.put("isdebit", isDebit);
                    obj.put("accountflag", true);
                    if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                        obj.put("acctype", "costofgoodssold");
                    } else {
                        obj.put("acctype", (account.getGroup().getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                    }
                    if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                        obj.put("group", "costofgoodssold");
                    } else if (account.getGroup().getParent() != null) {
                        obj.put("group", (account.getGroup().getParent().getID().toString().equals("15")) ? "income" : ((account.getGroup().getParent().getID().toString().equals("8")) ? "expense" : ""));
                    } else {
                        obj.put("group", (account.getGroup().getID().toString().equals("15")) ? "income" : ((account.getGroup().getID().toString().equals("8")) ? "expense" : ""));
                    }
                    
                    if (!hidechildCV) { //SDP-5997
                        jArr.put(obj);
                    }
                    
                    
                }
                
                if (showAccountsInGroup) {
                    obj = new JSONObject();
                    obj.put("accountname", hidechildCV ? accname : "Total " + accname);
                    obj.put("accountid", "Total" +account.getID());
                    obj.put("haschild", haschild);
                    obj.put("accountcode", account.getAcccode());
                    obj.put("totalFlagAccountsWithchild", true);
                    obj.put("level", level);
                    obj.put("leaf", hidechildCV ? true:false);//    ERP-10301- [Trading and Profit Loss with Budget] Child account are not shown while i am clicking on + symbol of Income account .
                    obj.put("show", true);
                    obj.put("amount1", 0);//Dont consider Total Values from child JSON
                    obj.put("preamount1", 0);
                    if (hidechildCV) {  //SDP-5997
                        obj.put("accountflag", true);
                    }
                    double ta = arrayAmount[0];
                    double pta = arrayAmount[1];
                    double topen=arrayAmount[2];
                    double tperiod=arrayAmount[3];
                    double tend=arrayAmount[4];
                    double tbudget = arrayAmount[5];
                    if (!isDebit) {
                        if (ta != 0) {
                            ta = -ta;
                        } else {
                            ta = ta;
                        }
                        if (pta != 0) {
                            pta = -pta;
                        } else {
                            pta = pta;
                        }
                        if(topen!=0){
                            topen=-topen;
                        }else{
                            topen=topen;
                        }
                        if(tperiod!=0){
                            tperiod=-tperiod;
                        }else{
                            tperiod=tperiod;
                        }
                        if(tend!=0){
                            tend=-tend;
                        }else{
                            tend=tend;
                        }
                     }
                    if (isBalanceSheet) {
                        if (ta != 0) {
                            ta = -ta;
                        } else {
                            ta = ta;
                        }
                        if (pta != 0) {
                            pta = -pta;
                        } else {
                            pta = pta;
                        }
                        if(topen!=0){
                            topen=-topen;
                        }else{
                            topen=topen;
                        }
                        if(tperiod!=0){
                            tperiod=-tperiod;
                        }else{
                            tperiod=tperiod;
                        }
                        if(tend!=0){
                            tend=-tend;
                        }else{
                            tend=tend;
                        }
                    }
                    obj.put("amount", (isShowZeroAmountAsBlank && ta==0 ? "":ta));
                    obj.put("budget",tbudget);
                    obj.put("openingamount",isShowZeroAmountAsBlank && topen==0 ? "":topen);
                    obj.put("periodamount",isShowZeroAmountAsBlank && tperiod==0 ? "":tperiod);
                    obj.put("endingamount",isShowZeroAmountAsBlank && tend==0 ? "":tend);
                    obj.put("amountInSelectedCurrency", (isShowZeroAmountAsBlank && ta==0 ?"":ta*externalCurrencyRate));
                    obj.put("preamount", pta);
                    obj.put("isdebit", isDebit);
                    if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                        obj.put("acctype", "costofgoodssold");
                    } else {
                    obj.put("acctype", (account.getGroup().getNature() == Group.NATURE_EXPENSES)?"expense":"income");
                    }
                    if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                        obj.put("group", "costofgoodssold");
                    } else if (account.getGroup().getParent() != null) {
                        obj.put("group", (account.getGroup().getParent().getID().toString().equals("15")) ? "income" : ((account.getGroup().getParent().getID().toString().equals("8")) ? "expense" : ""));
                    } else {
                        obj.put("group", (account.getGroup().getID().toString().equals("15")) ? "income" : ((account.getGroup().getID().toString().equals("8")) ? "expense" : ""));
                    }
                    
                    jArr.put(obj);
                } else {
                    for (int i = 0; i < chArr.length(); i++) {
                        jArr.put(chArr.getJSONObject(i));
                    }
                }
                
            } else if((amount != 0 || previousAmount!=0 ||openingamount!=0 ||periodamount!=0||endingamount!=0 || budget != 0)||isMonthlyReport) {
                JSONObject obj = new JSONObject();
                obj.put("accountname", accname);
                obj.put("accountcode", StringUtil.isNullOrEmpty(account.getAcccode())?"":account.getAcccode());
                obj.put("accountid", account.getID());
                obj.put("level", level);
                obj.put("leaf", true);
                obj.put("amount1", amount);
                obj.put("haschild", false);
                obj.put("preamount1", previousAmount);
                if (!isDebit) {
                    if (amount != 0) {
                            amount = -amount;
                        } else {
                            amount = amount;
                        }
                        if (previousAmount != 0) {
                            previousAmount = -previousAmount;
                        } else {
                            previousAmount = previousAmount;
                        }
                        if(openingamount!=0){
                            openingamount=-openingamount;
                        }else{
                            openingamount=openingamount;
                        }
                        if(periodamount!=0){
                            periodamount=-periodamount;
                        }else{
                            periodamount=periodamount;
                        }
                        if(endingamount!=0){
                            endingamount=-endingamount;
                        }else{
                            endingamount=endingamount;
                        }
                }
                if (isBalanceSheet) {
                        if (amount != 0) {
                            amount = -amount;
                        } else {
                            amount = amount;
                        }
                        if (previousAmount != 0) {
                            previousAmount = -previousAmount;
                        } else {
                            previousAmount = previousAmount;
                        }
                        if(openingamount!=0){
                            openingamount=-openingamount;
                        }else{
                            openingamount=openingamount;
                        }
                        if(periodamount!=0){
                            periodamount=-periodamount;
                        }else{
                            periodamount=periodamount;
                        }
                        if(endingamount!=0){
                            endingamount=-endingamount;
                        }else{
                            endingamount=endingamount;
                        }
                }
                obj.put("amount", (isShowZeroAmountAsBlank && amount == 0.0 ? "" : amount));
                obj.put("budget",(budget != 0.0 ? budget : ""));
                obj.put("openingamount",isShowZeroAmountAsBlank && openingamount == 0.0 ? "" :openingamount);
                
                obj.put("periodamount",isShowZeroAmountAsBlank && periodamount == 0.0 ? "" :periodamount);
                obj.put("endingamount",isShowZeroAmountAsBlank && endingamount == 0.0 ? "" :endingamount);
                
                obj.put("amountInSelectedCurrency", (isShowZeroAmountAsBlank && amount == 0.0 ? "" : amount*externalCurrencyRate));
                obj.put("preamount", (previousAmount != 0.0 ? previousAmount : ""));
                obj.put("isdebit", isDebit);
                obj.put("accountflag", true);
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                    obj.put("acctype", "costofgoodssold");
                } else {
                    obj.put("acctype", (account.getGroup().getNature() == Group.NATURE_EXPENSES)?"expense":"income");
                }
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                    obj.put("group", "costofgoodssold");
                } else if (account.getGroup().getParent() != null) {
                    obj.put("group", (account.getGroup().getParent().getID().toString().equals("15")) ? "income" : ((account.getGroup().getParent().getID().toString().equals("8")) ? "expense" : ""));
                } else {
                    obj.put("group", (account.getGroup().getID().toString().equals("15")) ? "income" : ((account.getGroup().getID().toString().equals("8")) ? "expense" : ""));
                }
                
                jArr.put(obj);
                
                if (!(amount != 0 || previousAmount!=0 ||openingamount!=0 ||periodamount!=0 || endingamount!=0 || budget != 0)) { //Since we take all accounts for monthly Reports to avoid total of main accounts we put this condition
                    double localArrayAmount[] = {0, 0,0,0,0,0};
                    return localArrayAmount;
                }
            } else {
                double localArrayAmount[] ={0,0,0,0,0,0};
                return localArrayAmount;
            }
        } catch (JSONException e) {
            throw ServiceException.FAILURE("populateAccountDetailsAllAccounts : " + e.getMessage(), e);
        }
        
        return arrayAmount;
    }   
    
    @Override
    public double[] formatGroupDetails(JSONObject paramJObj, String companyid, Group group, Date startDate, Date endDate, int level, boolean isBalanceSheet, JSONArray jArr,Date startPreDate,Date endPreDate, Map<String, Object> advSearchAttributes) throws ServiceException, SessionExpiredException, ParseException,JSONException {
        double totalAmount[] = {0,0,0,0,0,0};
        boolean isDebit = false;
        double externalCurrencyRate = paramJObj.optDouble("externalcurrencyrate", 1.0);
        ExtraCompanyPreferences extrapref = null;
        KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), paramJObj.getString(Constants.companyKey));
        if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
            extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
        }
        boolean isShowZeroAmountAsBlank=extrapref.isShowZeroAmountAsBlank();
        
        try {
            boolean isForTradingAndProfitLoss = false;
            if ((paramJObj.optString("isForTradingAndProfitLoss",null) != null)) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(paramJObj.optString("isForTradingAndProfitLoss"));
            }
            boolean isCostOfGoodsSold = false;
            if ((paramJObj.optString("isCostOfGoodsSold",null) != null)) {
                isCostOfGoodsSold = Boolean.parseBoolean(paramJObj.optString("isCostOfGoodsSold"));
            }
            boolean isGroupDetailReport = false;
            if ((paramJObj.optString(Constants.IS_GROUP_DETAIL_REPORT,null) != null)) {
                isGroupDetailReport = Boolean.parseBoolean(paramJObj.optString(Constants.IS_GROUP_DETAIL_REPORT));
            }
            if (isBalanceSheet) {
                if (group.getNature() == Group.NATURE_LIABILITY) {
                    isDebit = true;
                }
            } else if (isGroupDetailReport) {
                if (group.getNature() == Group.NATURE_LIABILITY || group.getNature() == Group.NATURE_EXPENSES) {
                    isDebit = true;
                }
            } else if (group.getNature() == Group.NATURE_EXPENSES) {
                isDebit = true;
            }
            
            boolean directionDesc = false;
            GroupComp groupComp = new GroupComp(directionDesc);
            List<Group> children = new ArrayList(group.getChildren());//Added code for sorting on child groups on group name
            Collections.sort(children, groupComp);
            
            JSONArray chArr = new JSONArray();
//            String query="from Account where parent is null and group.ID=? and company.companyID=?";
//            List list = executeQuery(session, query, new Object[]{group.getID(),companyid});
            HashMap<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put(Constants.companyKey, companyid);
            filterParams.put("groupid", group.getID());
            if (isForTradingAndProfitLoss) {
                filterParams.put("costOfGoodsSoldGroup", isCostOfGoodsSold);
            }
            filterParams.put("parent", null);
            filterParams.put("order_by", " acccode, name asc"); 
            KwlReturnObject accresult = accAccountDAOobj.getAccountEntry(filterParams);
            List<Account> list = accresult.getEntityList();
            DateFormat sdf = authHandler.getDateOnlyFormat();
            for (Account account : list) {
//                if(!account.getName().equals(Constants.NetProfitLossAccountName)&&!account.getName().equals(Constants.OpeningStock)&&!account.getName().equals(Constants.ClosingStock)){
                if(!(account.getID().equals(extrapref.getProfitLossAccountId()) || account.getID().equals(extrapref.getOpeningStockAccountId()) ||account.getID().equals(extrapref.getClosingStockAccountId()) ||account.getID().equals(extrapref.getStockInHandAccountId()))){
//                    double tempTotalAmount[] = formatAccountDetails(request, account, startDate, endDate, level + 1, isDebit, isBalanceSheet, chArr, sdf,startPreDate,endPreDate);
                    double tempTotalAmount[] = formatAccountDetails(paramJObj, account, startDate, endDate, level + 1, isDebit, isBalanceSheet, chArr, sdf,startPreDate,endPreDate,null, advSearchAttributes);
                    totalAmount[0] += tempTotalAmount[0];
                    totalAmount[1] += tempTotalAmount[1];
                    totalAmount[2] += tempTotalAmount[2];
                    totalAmount[3] += tempTotalAmount[3];
                    totalAmount[4] += tempTotalAmount[4];
                    totalAmount[5] += tempTotalAmount[5];
            }
            }

            if (children != null && !children.isEmpty()) {
                for (Group child : children) {
//                    totalAmount+=formatGroupDetails(session,request, companyid, child, startDate, endDate, level+1, isBalanceSheet, chArr);
                    double tempTotalAmount[] = formatGroupDetails(paramJObj, companyid, child, startDate, endDate, level + 1, isBalanceSheet, chArr,startPreDate,endPreDate, advSearchAttributes);
                    totalAmount[0] += tempTotalAmount[0];
                    totalAmount[1] += tempTotalAmount[1];
                    totalAmount[2] += tempTotalAmount[2];
                    totalAmount[3] += tempTotalAmount[3];
                    totalAmount[4] += tempTotalAmount[4];
                    totalAmount[5] += tempTotalAmount[5];
                }
            }

            if (chArr.length() > 0) {
                JSONObject obj = new JSONObject();
                obj.put("accountname", group.getName());
                obj.put("accountid", group.getID());
                obj.put("level", level);
                obj.put("leaf", false);
                obj.put("isaccountgroup", true);
                // For Main Group no need to show amount.
//                if(extrapref.isShowZeroAmountAsBlank()){
                    obj.put("amount", "");
                obj.put("budget","");
                obj.put("openingamount","");
                obj.put("periodamount","");
                obj.put("endingamount","");
                    obj.put("amountInSelectedCurrency", "");
                obj.put("preamount", "");
//                }else{
//                    obj.put("amount", 0.0);
//                    obj.put("budget",0.0);
//                    obj.put("openingamount",0.0);
//                    obj.put("periodamount",0.0);
//                    obj.put("endingamount",0.0);
//                    obj.put("amountInSelectedCurrency", 0.0);
//                    obj.put("preamount", 0.0);
//                }
                obj.put("isdebit", isDebit);
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && group != null && group.isCostOfGoodsSoldGroup()) {
                    obj.put("acctype", "costofgoodssold");
                } else {
                    obj.put("acctype", (group.getNature() == Group.NATURE_EXPENSES)?"expense":"income");
                }
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && group != null && group.isCostOfGoodsSoldGroup()) {
                    obj.put("group", "costofgoodssold");
                } else if (group.getParent() != null) {
                    obj.put("group", (group.getParent().getID().toString().equals("15"))?"income":((group.getParent().getID().toString().equals("8"))?"expense":""));
                } else {
                    obj.put("group", (group.getID().toString().equals("15"))?"income":((group.getID().toString().equals("8"))?"expense":""));
                }
                jArr.put(obj);
                for (int i = 0; i < chArr.length(); i++) {
                    chArr.getJSONObject(i).put("parentid", obj.getString("accountid"));
                    jArr.put(chArr.getJSONObject(i));
                }

                obj = new JSONObject();
                obj.put("accountname", "Total for " + group.getName());
                obj.put("accountid", "Total for " +group.getID());
                obj.put("level", level);
                obj.put("leaf", true);
                obj.put("show", true);
                obj.put("GroupTotal", true);// this key is used in monthly trading and profit lss/monthly revenue report for calculating last column i.e. total amount of groups like income, expense etc.
                if (isForTradingAndProfitLoss && isCostOfGoodsSold &&  group != null && group.isCostOfGoodsSoldGroup()) {
                    obj.put("acctype", "costofgoodssold");
                } else {
                    obj.put("acctype", (group.getNature() == Group.NATURE_EXPENSES)?"expense":"income");
                }
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && group != null && group.isCostOfGoodsSoldGroup()) {
                    obj.put("group", "costofgoodssold");
                } else if (group.getParent() != null) {
                    obj.put("group", (group.getParent().getID().toString().equals("15")) ? "income" : ((group.getParent().getID().toString().equals("8")) ? "expense" : ""));
                } else {
                    obj.put("group", (group.getID().toString().equals("15")) ? "income" : ((group.getID().toString().equals("8")) ? "expense" : ""));
                }
                double ta = totalAmount[0];
                double tempta = totalAmount[1];
                double topen=totalAmount[2];
                double tperiod=totalAmount[3];
                double tend=totalAmount[4];
                double tbudget = totalAmount[5];
                if (!isDebit ) {
                    if (ta != 0) {
                        ta = -ta;
                    } else {
                        ta = ta;
                    }
                    if (tempta != 0) {
                        tempta = -tempta;
                    } else {
                        tempta = -tempta;
                    }
                if(tperiod!=0){
                        tperiod=-tperiod;
                    }else{
                        tperiod=tperiod;
                    }   
                  if(topen!=0){
                        topen=-topen;
                    }else{
                        topen=topen;
                    }
                    if (tend != 0) {
                        tend = -tend;
                    } else {
                        tend = tend;
                    }
                }
                if (isBalanceSheet) {
                    if (ta != 0) {
                        ta = -ta;
                    } else {
                        ta = ta;
                    }
                    if (tempta != 0) {
                        tempta = -tempta;
                    } else {
                        tempta = -tempta;
                    }
                    if(topen!=0){
                        topen=-topen;
                    }else{
                        topen=topen;
                    }
                    if(tperiod!=0){
                        tperiod=-tperiod;
                    }else{
                        tperiod=tperiod;
                    }
                    if(tend!=0){
                        tend=-tend;
                    }else{
                        tend=tend;
                    }
                }
                obj.put("amount", (isShowZeroAmountAsBlank && ta==0)?"":ta);
                obj.put("openingamount",(isShowZeroAmountAsBlank && topen==0)?"":topen);
                obj.put("periodamount",(isShowZeroAmountAsBlank && tperiod==0)?"":tperiod);
                obj.put("endingamount",(isShowZeroAmountAsBlank && tend==0)?"":tend);
                obj.put("budget",(isShowZeroAmountAsBlank && tbudget==0)?"":tbudget);
                obj.put("amountInSelectedCurrency", (isShowZeroAmountAsBlank && ta==0)?"":ta*externalCurrencyRate);
                obj.put("preamount", (isShowZeroAmountAsBlank && tempta==0)?"":tempta);
                obj.put("isdebit", isDebit);
                jArr.put(obj);
            }
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("formatGroupDetails : " + ex.getMessage(), ex);
        }
        return totalAmount;
    }
    
    @Deprecated
    public double[] formatGroupDetails(HttpServletRequest request, String companyid, Group group, Date startDate, Date endDate, int level, boolean isBalanceSheet, JSONArray jArr, Date startPreDate, Date endPreDate, HashMap<String, List<Account>> accountGroupMap, Map<String, Object> advSearchAttributes) throws ServiceException, SessionExpiredException, ParseException {
        double totalAmount[] = {0, 0, 0, 0, 0, 0};
        try {
            JSONObject requestJobj = StringUtil.convertRequestToJsonObject(request);
            totalAmount = formatGroupDetails(requestJobj, companyid, group, startDate, endDate, 0, true, jArr,startPreDate,endPreDate, accountGroupMap, advSearchAttributes);
            // Maintaining consistency between requset and requestJobj for netProfitLossObj
            if(!requestJobj.has("netProfitLossObj") && request.getAttribute("netProfitLossObj") !=null){
                request.removeAttribute("netProfitLossObj");
            }
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return totalAmount;
    }
    
    @Deprecated
    public double[] formatGroupDetails(JSONObject requestJobj, String companyid, Group group, Date startDate, Date endDate, int level
            , boolean isBalanceSheet, JSONArray jArr,Date startPreDate,Date endPreDate, HashMap<String, List<Account>> accountGroupMap, Map<String, Object> advSearchAttributes) throws ServiceException, SessionExpiredException, ParseException {
        double totalAmount[] = {0,0,0,0,0,0};
        boolean isDebit = false;
        double rate=0.0;     
        double externalCurrencyRate = !StringUtil.isNullOrEmpty(requestJobj.optString("externalCurrencyRate", null)) ? Double.valueOf(requestJobj.optString("externalCurrencyRate")) : 1.0;
        boolean isConsolidationBS = requestJobj.optBoolean("consolidationBS");
        ExtraCompanyPreferences extrapref = null;
        KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
        if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
            extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
        }
        
        try {
            
            boolean isCostOfGoodsSold = false;
            if (requestJobj.has("isCostOfGoodsSold")) {
                isCostOfGoodsSold = requestJobj.optBoolean("isCostOfGoodsSold");
            }
            boolean isForTradingAndProfitLoss = false;
            if (requestJobj.has("isForTradingAndProfitLoss")) {
                isForTradingAndProfitLoss = requestJobj.optBoolean("isForTradingAndProfitLoss");
            }
            boolean isGroupDetailReport = false;
            if (requestJobj.has(Constants.IS_GROUP_DETAIL_REPORT)) {
                isGroupDetailReport = requestJobj.optBoolean(Constants.IS_GROUP_DETAIL_REPORT);
            }
            if (isBalanceSheet) {
                if (group.getNature() == Group.NATURE_LIABILITY) {
                    isDebit = true;
                }
            } else if (isGroupDetailReport) {
                if (group.getNature() == Group.NATURE_LIABILITY || group.getNature() == Group.NATURE_EXPENSES) {
                    isDebit = true;
                }
            }  else if (group.getNature() == Group.NATURE_EXPENSES) {
                isDebit = true;
            }
            boolean directionDesc = false;
            GroupComp groupComp = new GroupComp(directionDesc);
            List<Group> children = new ArrayList(group.getChildren());//Added code for sorting on child groups on group name
            Collections.sort(children, groupComp);
            
//            Set<Group> children = group.getChildren();
            JSONArray chArr = new JSONArray();
            if(accountGroupMap.containsKey(group.getID())) {
                List<Account> list = accountGroupMap.get(group.getID());
                DateFormat sdf = authHandler.getDateOnlyFormat();
                for (Account account : list) {
    //                if(!account.getName().equals(Constants.NetProfitLossAccountName)&&!account.getName().equals(Constants.OpeningStock)&&!account.getName().equals(Constants.ClosingStock)){
                    if(!(account.getID().equals(extrapref.getOpeningStockAccountId())||account.getID().equals(extrapref.getClosingStockAccountId())||account.getID().equals(extrapref.getStockInHandAccountId()))){
//                        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                        if(isConsolidationBS){//In consolidation balance sheet need data of other companies too hence passing companyid instead of getting it from session
                            requestJobj.put(Constants.companyKey, companyid);
                        }
//                        double tempTotalAmount[] = formatAccountDetails(request, account, startDate, endDate, level + 1, isDebit, isBalanceSheet, chArr, sdf,startPreDate,endPreDate);
                        double tempTotalAmount[] = formatAccountDetails(requestJobj, account, startDate, endDate, level + 1, isDebit, isBalanceSheet, chArr, sdf,startPreDate,endPreDate,null, advSearchAttributes);
                            totalAmount[0] += tempTotalAmount[0];
                            totalAmount[1] += tempTotalAmount[1];
                            totalAmount[2] += tempTotalAmount[2];
                            totalAmount[3] += tempTotalAmount[3];
                            totalAmount[4] += tempTotalAmount[4];
                            totalAmount[5] += tempTotalAmount[5];
                        }
                    }
                }

            if (children != null && !children.isEmpty()) {
                for (Group child : children) {
//                    totalAmount+=formatGroupDetails(session,request, companyid, child, startDate, endDate, level+1, isBalanceSheet, chArr);
                     double tempTotalAmount[] = formatGroupDetails(requestJobj, companyid, child, startDate, endDate, level + 1, isBalanceSheet, chArr,startPreDate,endPreDate, accountGroupMap, advSearchAttributes);
                     totalAmount[0] += tempTotalAmount[0];
                     totalAmount[1] += tempTotalAmount[1];
                     totalAmount[2] += tempTotalAmount[2];
                     totalAmount[3] += tempTotalAmount[3];
                     totalAmount[4] += tempTotalAmount[4];
                     totalAmount[5] += tempTotalAmount[5];
                }
            }
            
            /*
             * If Equity group is present for current company then show net
             * profit loss under this group. Calculate total amount
             * accordingly.Remove netProfitLossObj from requestJobj(request) to
             * avoid duplication.
             */
            if (isBalanceSheet && group.getName().equalsIgnoreCase(Constants.ACC_EQUITY_GROUPNAME) && group.getNature() == Group.NATURE_LIABILITY && group.getCompany() != null && group.getCompany().getCompanyID().equals(companyid)) {
                if (requestJobj.has("netProfitLossObj") && requestJobj.get("netProfitLossObj") instanceof JSONObject) {
                    JSONObject netProfitLossObj = (JSONObject) requestJobj.get("netProfitLossObj");
                    netProfitLossObj.put("level", level + 1);

                    chArr.put(netProfitLossObj);

                    totalAmount[0] -= (netProfitLossObj.optDouble("amount", 0));
                    totalAmount[1] -= (netProfitLossObj.optDouble("preamount", 0));
                    totalAmount[2] -= (netProfitLossObj.optDouble("openingamount", 0));
                    totalAmount[3] -= (netProfitLossObj.optDouble("periodamount", 0));
                    totalAmount[4] -= (netProfitLossObj.optDouble("endingamount", 0));
//                    totalAmount[5] += tempTotalAmount[5];

                    requestJobj.remove("netProfitLossObj");
                }
            }

            if (chArr.length() > 0) {
                JSONObject obj = new JSONObject();
                obj.put("accountname", group.getName());
                obj.put("accountid", group.getID());
                obj.put("level", level);
                obj.put("leaf", false);
                obj.put("amount", "");
                obj.put("budget","");
                obj.put("openingamount","");
                obj.put("perioamount","");
                obj.put("endingamount","");
                obj.put("amountInSelectedCurrency", "");
                obj.put("preamount", "");
                obj.put("isdebit", isDebit);
                obj.put("isgroupflag", true);// It is used in Consolidation BS for identifying that it is a group entry
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && group != null&& group.isCostOfGoodsSoldGroup()) {
                    obj.put("acctype", "costofgoodssold");
                } else {
                    obj.put("acctype", (group.getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                }
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && group != null && group.isCostOfGoodsSoldGroup()) {
                    obj.put("group", "costofgoodssold");
                } else if (group.getParent() != null) {
                    obj.put("group", (group.getParent().getID().toString().equals("15")) ? "income" : ((group.getParent().getID().toString().equals("8")) ? "expense" : ""));
                } else {
                    obj.put("group", (group.getID().toString().equals("15")) ? "income" : ((group.getID().toString().equals("8")) ? "expense" : ""));
                }
                jArr.put(obj);
                for (int i = 0; i < chArr.length(); i++) {
                    chArr.getJSONObject(i).put("parentid", obj.getString("accountid"));
                    chArr.getJSONObject(i).put("nameofaccountgroup", group.getName());// It is used in Consolidation BS for finding name of account group
                    jArr.put(chArr.getJSONObject(i));
                }

                obj = new JSONObject();
                obj.put("accountname", "Total for " + group.getName());
                obj.put("accountid", "Total for " +group.getID());
                obj.put("level", level);
                obj.put("leaf", true);
                obj.put("show", true);
                obj.put("GroupTotal", true);// It is used in Consolidation BS for identifyng of account group
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && group != null && group.isCostOfGoodsSoldGroup()) {
                    obj.put("acctype", "costofgoodssold");
                } else {
                    obj.put("acctype", (group.getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                }
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && group != null && group.isCostOfGoodsSoldGroup()) {
                    obj.put("group", "costofgoodssold");
                } else if (group.getParent() != null) {
                    obj.put("group", (group.getParent().getID().toString().equals("15")) ? "income" : ((group.getParent().getID().toString().equals("8")) ? "expense" : ""));
                } else {
                    obj.put("group", (group.getID().toString().equals("15")) ? "income" : ((group.getID().toString().equals("8")) ? "expense" : ""));
                }
                double ta = totalAmount[0];
                double tempta = totalAmount[1];
                double topen = totalAmount[2];
                double tperiod = totalAmount[3];
                double tend = totalAmount[4];
                double tbudget = totalAmount[5];
                if (!isDebit && !isGroupDetailReport) {
                    if (ta != 0) {
                        ta = -ta;
                    } else {
                        ta = ta;
                    }
                    if (tempta != 0) {
                        tempta = -tempta;
                    } else {
                        tempta = -tempta;
                    }
                    if(topen!=0){
                        topen=-topen;
                    }else{
                        topen=topen;
                    }
                    if(tperiod!=0){
                        tperiod=-tperiod;
                    }else{
                        tperiod=tperiod;
                    }
                    if (tend != 0) {
                        tend = -tend;
                    } else {
                        tend = tend;
                    }
                }
                if (isBalanceSheet) {
                    if (ta != 0) {
                        ta = -ta;
                    } else {
                        ta = ta;
                    }
                    if (tempta != 0) {
                        tempta = -tempta;
                    } else {
                        tempta = -tempta;
                    }
                    if(topen!=0){
                        topen=-topen;
                    }else{
                        topen=topen;
                    }
                    if(tperiod!=0){
                        tperiod=-tperiod;
                    }else{
                        tperiod=tperiod;
                    }
                    if(tend!=0){
                        tend=-tend;
                    }else{
                        tend=tend;
                    }
                }
                obj.put("amount", ta);
                obj.put("openingamount",topen);
                obj.put("periodamount",tperiod);
                obj.put("endingamount",tend);
                obj.put("budget",tbudget);
                obj.put("amountInSelectedCurrency", ta*externalCurrencyRate);
                obj.put("preamount", tempta);
                obj.put("isdebit", isDebit);
                jArr.put(obj);
            }
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("formatGroupDetails : " + ex.getMessage(), ex);
        }
        return totalAmount;
    }

 @Override
 @Deprecated 
     public double[] formatAccountDetails(JSONObject paramJobj, Account account, Date startDate, Date endDate, int level, boolean isDebit, boolean isBalanceSheet, JSONArray jArr, DateFormat sdf,Date startPreDate,Date endPreDate,List<GeneralLedger> generalLedgerList, Map<String, Object> advSearchAttributes) throws ServiceException, SessionExpiredException, ParseException,JSONException {        
        boolean isDeleted = false; 
        boolean excludePreviousYear=false;
        boolean isSubGeneralLedger = paramJobj.optBoolean("issubGeneralLedger");
        String filetype = paramJobj.optString("filetype");
        Boolean showAccountsInGroup = paramJobj.optBoolean("showAccountsInGroup",true);
        String companyid = paramJobj.optString("companyid");
        Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();
        String userdateformat= paramJobj.optString("userdateformat");
        SimpleDateFormat userdf=new SimpleDateFormat(Constants.MMMMddyyyy);
        if(userdateformat!=null){
        userdf = new SimpleDateFormat(userdateformat);
        }
        if (!StringUtil.isNullOrEmpty(paramJobj.optString("excludePreviousYear", null))) {
            excludePreviousYear = Boolean.parseBoolean(paramJobj.optString("excludePreviousYear"));
        }
        boolean isMonthlyReport=(paramJobj.optString("monthlyreport",null)!=null && paramJobj.optString("monthlyreport",null).equals("MonthlyReport")); //this flag is used to take all accounts in monthly reports
        boolean isMonthlyBalanceSheet=paramJobj.optBoolean("NewBalanceSheetCall", false); //this flag is used for monthly Balance Sheet.
        double rate=0.0;
        double externalCurrencyRate = paramJobj.optDouble("externalcurrencyrate", 1.0);
        ExtraCompanyPreferences extrapref = null;
        KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(),paramJobj.getString(Constants.companyKey));
        if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
            extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
        }
        
        Locale locale = Locale.forLanguageTag(paramJobj.getString(Constants.language));
        String naBalType = messageSource.getMessage("acc.field.N/A", null, locale);
        String creditBalType = messageSource.getMessage("acc.common.credit", null, locale);
        String debitBalType = messageSource.getMessage("acc.common.debit", null, locale);
        
        KWLCurrency currency = account.getCompany().getCurrency();
        boolean isShowZeroAmountAsBlank=extrapref.isShowZeroAmountAsBlank();
        boolean isShowAllAccountsInGL = extrapref.isShowAllAccountInGl();
        if(account.isDeleted()){ //BUG #16733: Deleted account check for sub Assets/Account
            isDeleted = true;
        }
        //Logic to get new fixed asset group from old fixed asset id
        //To do - Need to test wheteher is working or not
        String fixedAssetgrp = "";
        Group group = accAccountDAOobj.getNewGroupFromOldId(Group.FIXED_ASSETS, account.getCompany().getCompanyID());
        if (group != null) {
            fixedAssetgrp = group.getID();
        }
        boolean isForTradingAndProfitLoss = false;
        if ((paramJobj.optString("isForTradingAndProfitLoss",null) != null)) {
            isForTradingAndProfitLoss = Boolean.parseBoolean(paramJobj.optString("isForTradingAndProfitLoss"));
        }
        boolean isCostOfGoodsSold = false;
        if ((paramJobj.optString("isCostOfGoodsSold",null) != null)) {
            isCostOfGoodsSold = Boolean.parseBoolean(paramJobj.optString("isCostOfGoodsSold"));
        }
        if(account.getGroup()!= null && account.getGroup().getID().equalsIgnoreCase(fixedAssetgrp)){ //BUG Fixed #16739 : Creation date check for Fixed Assets
            Date createdOn = AccountingManager.resetTimeField(account.getCreationDate());
            Date toDate = AccountingManager.resetTimeField(endDate);
            if(toDate.compareTo(createdOn)<=0){
                isDeleted = true;
        }
        }
     boolean isGroupDetailReport = false;
     if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.IS_GROUP_DETAIL_REPORT, null))) {
         isGroupDetailReport = Boolean.parseBoolean(paramJobj.optString(Constants.IS_GROUP_DETAIL_REPORT));
     }
     HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
        boolean hidechildCV = false;
        double amount = 0;
        double previousopeningamount=0;
        double openingamount=0;
        double periodamount=0;
        double endingamount=0;
        double previousAmount = 0;
        double budget=0;
        double arrayAmount[] ={0,0,0,0,0,0};
        boolean withBudget = paramJobj.optString("withBudget",null)!=null?Boolean.parseBoolean(paramJobj.optString("withBudget")):false;
        boolean periodView=paramJobj.optString("periodView",null)!=null?Boolean.parseBoolean(paramJobj.optString("periodView")):false;
        if (paramJobj.optString("periodView", null) != null) {
            periodView = paramJobj.optString("periodView", null) != null ? Boolean.parseBoolean(paramJobj.optString("periodView")) : false;
        }
     //SDP-5997   
     if (isBalanceSheet && extrapref != null) {
         hidechildCV = !extrapref.isShowChildAccountsInBS();
     } else if (isForTradingAndProfitLoss && extrapref != null) {
         hidechildCV = !extrapref.isShowChildAccountsInPnl();
     }
     /*
      * All accounts are shown in Group Detail Report
      */
        if (!isDeleted || isGroupDetailReport) {
            if (periodView) {
                if (excludePreviousYear) {
//                    request.setAttribute("isPeriod", true); //To exclude opening balances in period view while calaculating period balances
                    paramJobj.put("isPeriod", true); //To exclude opening balances in period view while calaculating period balances
                } else {
//                    request.setAttribute("isPeriod", false);
                    paramJobj.put("isPeriod", false);
                }
                if (isGroupDetailReport) {
                    if (account.getAccounttype() == Group.ACC_TYPE_BALANCESHEET && excludePreviousYear) {
                        paramJobj.put("isPeriod", false);
                    }
                }
                if (excludePreviousYear && account.getAccounttype() == 0) {
                    Date start = getDateForExcludePreviousYearBalanceFilter(paramJobj,startDate);
                    openingamount = getAccountBalance(paramJobj, account.getID(), start, openBalEndDate, advSearchAttributes);
                } else {
                    //Date openingEndDate = new DateTime(startDate).minusDays(1).toDate();   //It disturbs opening amount for Total Receivable //Need to subtract one day from Start Date for Opening amount
                    openingamount = getAccountBalance(paramJobj, account.getID(), new Date(1970), openBalEndDate, advSearchAttributes);
                } 
                paramJobj.put("isPeriod", true);
            }if(isMonthlyBalanceSheet){
                paramJobj.put("isPeriod", true);
            }
            amount = getAccountBalance(paramJobj, account.getID(), startDate, endDate, advSearchAttributes);
            //  previousopeningamount = accInvoiceCommon.getOpeningBalanceOfAccount(request, account, false, null);

            if (startPreDate != null && endPreDate != null) {
                previousAmount = getAccountBalance(paramJobj, account.getID(), startPreDate, endPreDate, advSearchAttributes);
            }
            amount = authHandler.round(amount, companyid);
            previousAmount = authHandler.round(previousAmount, companyid);
            periodamount = amount;
            previousopeningamount = authHandler.round(previousopeningamount, companyid);
            openingamount = authHandler.round(openingamount, companyid);
            openingamount = openingamount + previousopeningamount;
            endingamount = authHandler.round(openingamount + periodamount, companyid);
            
         //for Monthly Budget Report of Accounts
         if (withBudget) {
//                budget = getAccountBudget(account.getID(), startDate, endDate);
             budget = getBudgetForAccounts(paramJobj, account.getID(), startDate, endDate);
         }
     }
        double openingInAccCurrency =0;
        arrayAmount[0]=amount;
        arrayAmount[1]=previousAmount;
        arrayAmount[2]=openingamount;
        arrayAmount[3]=periodamount;
        arrayAmount[4]=endingamount;
        arrayAmount[5]=budget;
        String accname = "";
        accname = account.getName();
        boolean directionDesc = false;
        boolean sortOnType = false;
        accountComp accComp = new accountComp(sortOnType, directionDesc);    
        List list = new ArrayList(account.getChildren());//Added code for sorting on account code, account name
        Collections.sort(list, accComp);
        Iterator<Account> itr = list.iterator();
        JSONArray chArr = new JSONArray();
        while (itr.hasNext()) {
            Account child = itr.next();
            double tempTotalAmount[]=formatAccountDetails(paramJobj, child, startDate, endDate, level + 1, isDebit, isBalanceSheet, chArr, sdf,startPreDate,endPreDate,generalLedgerList,advSearchAttributes);
            arrayAmount[0]+=tempTotalAmount[0];
            arrayAmount[1]+=tempTotalAmount[1];
            arrayAmount[2]+=tempTotalAmount[2];
            arrayAmount[3]+=tempTotalAmount[3];
            arrayAmount[4]+=tempTotalAmount[4];
            arrayAmount[5]+=tempTotalAmount[5];
                }

        try { 
            if (chArr.length() > 0) {
                JSONObject obj = null;
                boolean haschild = !hidechildCV;
                if (showAccountsInGroup) {
                    obj = new JSONObject();
                    obj.put("accountname", accname);
                    obj.put("accountcode", StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode());
                    obj.put("accountid", account.getID());
                    obj.put("haschild", haschild);
                    obj.put("isparent", true);
                    obj.put("level", level);
                    obj.put("leaf", false);
                    obj.put("amount",  "" );
                    obj.put("budget", "");
                    obj.put("openingamount", "" );
                    obj.put("periodamount", "" );
                    obj.put("endingamount",  "" );
                    obj.put("amountInSelectedCurrency",  "");
                    obj.put("preamount", "");
                    obj.put("isdebit", isDebit);
                    obj.put("accountflag", true);
                    if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                        obj.put("acctype", "costofgoodssold");
                    } else {
                        obj.put("acctype", (account.getGroup().getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                    }
                    if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                        obj.put("group", "costofgoodssold");
                    } else if (account.getGroup().getParent() != null) {
                        obj.put("group", (account.getGroup().getParent().getID().toString().equals("15")) ? "income" : ((account.getGroup().getParent().getID().toString().equals("8")) ? "expense" : ""));
                    } else {
                        obj.put("group", (account.getGroup().getID().toString().equals("15")) ? "income" : ((account.getGroup().getID().toString().equals("8")) ? "expense" : ""));
                    }
                    if (isGroupDetailReport) {
                        obj.put("creationDate", authHandler.getDateOnlyFormat().format(account.getCreationDate()));
                        obj.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
                        obj.put("currencyname", (account.getCurrency() == null ? currency.getName() : account.getCurrency().getName()));
                        obj.put("currencyCode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                        String currencyid = (account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());
                        KwlReturnObject kresult = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, openingamount, currencyid, account.getCreationDate(), 0);
                        if (kresult != null && kresult.getEntityList() != null && !kresult.getEntityList().isEmpty()) {
                            obj.put("openingbalanceinaccountcurrency", "");
                            obj.put("openingBalanceType", naBalType);
                        }
                        obj.put("accountgroupname", StringUtil.isNullOrEmpty(account.getGroup() != null ? account.getGroup().getName() : "") ? "" : account.getGroup() != null ? account.getGroup().getName() : "");
                        obj.put("aliascode", StringUtil.isNullOrEmpty(account.getAliascode()) ? "" : account.getAliascode());
                        obj.put("currencyid", currencyid);
                        obj.put("deleted", isDeleted);
                    }
                    if (!hidechildCV) {
                        jArr.put(obj);
                    }
                    for (int i = 0; i < chArr.length(); i++) {
                        if (hidechildCV) {
                            if (chArr.getJSONObject(i).has("amount1") && StringUtil.isNullOrEmpty(chArr.getJSONObject(i).getString("amount1"))) {
                                amount += chArr.getJSONObject(i).getDouble("amount1");
                            }
                            if (chArr.getJSONObject(i).has("preamount1") && StringUtil.isNullOrEmpty(chArr.getJSONObject(i).getString("preamount1"))) {
                                previousAmount += chArr.getJSONObject(i).getDouble("preamount1");
                            }
                        } else {
                            chArr.getJSONObject(i).put("haschild",haschild);
                            jArr.put(chArr.getJSONObject(i));
                        }
                    }
                }

                if ((amount != 0 || previousAmount != 0 || openingamount != 0 || periodamount != 0 || endingamount != 0 || budget != 0) || isMonthlyReport) {
                    obj = new JSONObject();
                    obj.put("accountname", showAccountsInGroup ? "Other " + accname : accname);
                    obj.put("accountid", showAccountsInGroup ? "Other " + account.getID() :account.getID());
                    obj.put("accountcode", StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode());
                    obj.put("level", showAccountsInGroup ? level + 1 : level);
                    obj.put("leaf", true);
                    obj.put("haschild", haschild);
                    obj.put("amount1", amount);
                    obj.put("preamount1", previousAmount);
                    if (!isDebit && !isGroupDetailReport) {
                        if (amount != 0) {
                            amount = -amount;
                        } else {
                            amount = amount;
                        }
                        if (previousAmount != 0) {
                            previousAmount = -previousAmount;
                        } else {
                            previousAmount = previousAmount;
                        }
                        if(openingamount!=0){
                            openingamount=-openingamount;
                        }else{
                            openingamount=openingamount;
                        }
                        if(periodamount!=0){
                            periodamount=-periodamount;
                        }else{
                            periodamount=periodamount;
                        }
                        if(endingamount!=0){
                            endingamount=-endingamount;
                        }else{
                            endingamount=endingamount;
                        }
                    }
                    if (isBalanceSheet) {
                         if (amount != 0) {
                            amount = -amount;
                        } else {
                            amount = amount;
                        }
                        if (previousAmount != 0) {
                            previousAmount = -previousAmount;
                        } else {
                            previousAmount = previousAmount;
                        }
                        if (openingamount != 0) {
                            openingamount = -openingamount;
                        } else {
                            openingamount = openingamount;
                        }
                        if(periodamount!=0){
                            periodamount=-periodamount;
                        }else{
                            periodamount=periodamount;
                        }
                        if(endingamount!=0){
                            endingamount=-endingamount;
                        }else{
                            endingamount=endingamount;
                        }
                    }
                    obj.put("amount", isShowZeroAmountAsBlank && amount==0.0?"":amount);
                    obj.put("periodamount",isShowZeroAmountAsBlank && periodamount==0.0?"":periodamount);
                    obj.put("openingamount",isShowZeroAmountAsBlank && openingamount==0.0?"":openingamount);
                    obj.put("endingamount",isShowZeroAmountAsBlank && endingamount==0.0?"":endingamount);
                    obj.put("budget",budget);
                    obj.put("amountInSelectedCurrency", (isShowZeroAmountAsBlank && amount*externalCurrencyRate==0.0)?"":amount*externalCurrencyRate);
                    obj.put("preamount", previousAmount);
                    obj.put("isdebit", isDebit);
                    obj.put("accountflag", true);
                    if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                        obj.put("acctype", "costofgoodssold");
                    } else {
                        obj.put("acctype", (account.getGroup().getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                    }
                    if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                        obj.put("group", "costofgoodssold");
                    } else if (account.getGroup().getParent() != null) {
                        obj.put("group", (account.getGroup().getParent().getID().toString().equals("15")) ? "income" : ((account.getGroup().getParent().getID().toString().equals("8")) ? "expense" : ""));
                    } else {
                        obj.put("group", (account.getGroup().getID().toString().equals("15")) ? "income" : ((account.getGroup().getID().toString().equals("8")) ? "expense" : ""));
                    }
                    if (isGroupDetailReport) {
                        obj.put("creationDate", authHandler.getDateOnlyFormat().format(account.getCreationDate()));
                        obj.put("currencysymbol", (account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getSymbol()));
                        obj.put("currencyname", (account.getCurrency() == null ? currency.getName() : account.getCurrency().getName()));
                        obj.put("currencyCode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                        String currencyid = (account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());
                        KwlReturnObject kresult = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, openingamount, currencyid, account.getCreationDate(), 0);
                        if (kresult != null && kresult.getEntityList() != null && !kresult.getEntityList().isEmpty()) {
                            openingInAccCurrency = authHandler.round((Double) kresult.getEntityList().get(0), companyid);
                            obj.put("openingbalanceinaccountcurrency",openingInAccCurrency );
                            obj.put("openingBalanceType",(openingInAccCurrency == 0) ? naBalType  : (openingInAccCurrency > 0) ? debitBalType : creditBalType);
                        }
                        obj.put("accountgroupname", StringUtil.isNullOrEmpty(account.getGroup() != null ? account.getGroup().getName() : "") ? "" : account.getGroup() != null ? account.getGroup().getName() : "");
                        obj.put("aliascode", StringUtil.isNullOrEmpty(account.getAliascode()) ? "" : account.getAliascode());
                        obj.put("deleted", isDeleted);
                    }
                    if (!hidechildCV) { //SDP-5997
                        jArr.put(obj);
                    }
                    if (isGroupDetailReport && (filetype.equals("detailedXls") || filetype.equals("detailedPDF") || filetype.equals("detailedCSV") || isSubGeneralLedger)) {
                        paramJobj.put("generalLedgerFlag", true);
                        paramJobj.put("accountid", account.getID());
                        getGroupWiseGLReportDetailJson(paramJobj, jArr,generalLedgerList, advSearchAttributes);
                    }
                    
                }
                
                if (showAccountsInGroup) {
                    obj = new JSONObject();
                    obj.put("accountname", hidechildCV ? accname : "Total " + accname);
                    obj.put("accountid", "Total" +account.getID());
                    obj.put("haschild", haschild);
                    obj.put("accountcode", account.getAcccode());
                    obj.put("totalFlagAccountsWithchild", true);
                    obj.put("level", level);
                    obj.put("leaf", hidechildCV ? true:false);//    ERP-10301- [Trading and Profit Loss with Budget] Child account are not shown while i am clicking on + symbol of Income account .
                    obj.put("show", true);
                    obj.put("amount1", 0);//Dont consider Total Values from child JSON
                    obj.put("preamount1", 0);
                    if (hidechildCV) {  //SDP-5997
                        obj.put("accountflag", true);
                    }
                    double ta = arrayAmount[0];
                    double pta = arrayAmount[1];
                    double topen=arrayAmount[2];
                    double tperiod=arrayAmount[3];
                    double tend=arrayAmount[4];
                    double tbudget = arrayAmount[5];
                    if (!isDebit && !isGroupDetailReport) {
                        if (ta != 0) {
                            ta = -ta;
                        } else {
                            ta = ta;
                        }
                        if (pta != 0) {
                            pta = -pta;
                        } else {
                            pta = pta;
                        }
                        if(topen!=0){
                            topen=-topen;
                        }else{
                            topen=topen;
                        }
                        if(tperiod!=0){
                            tperiod=-tperiod;
                        }else{
                            tperiod=tperiod;
                        }
                        if(tend!=0){
                            tend=-tend;
                        }else{
                            tend=tend;
                        }
                     }
                    if (isBalanceSheet) {
                        if (ta != 0) {
                            ta = -ta;
                        } else {
                            ta = ta;
                        }
                        if (pta != 0) {
                            pta = -pta;
                        } else {
                            pta = pta;
                        }
                        if(topen!=0){
                            topen=-topen;
                        }else{
                            topen=topen;
                        }
                        if(tperiod!=0){
                            tperiod=-tperiod;
                        }else{
                            tperiod=tperiod;
                        }
                        if(tend!=0){
                            tend=-tend;
                        }else{
                            tend=tend;
                        }
                    }
                    obj.put("amount", (isShowZeroAmountAsBlank && ta==0 ? "":ta));
                    obj.put("budget",tbudget);
                    obj.put("openingamount",isShowZeroAmountAsBlank && topen==0 ? "":topen);
                    obj.put("periodamount",isShowZeroAmountAsBlank && tperiod==0 ? "":tperiod);
                    obj.put("endingamount",isShowZeroAmountAsBlank && tend==0 ? "":tend);
                    obj.put("amountInSelectedCurrency", (isShowZeroAmountAsBlank && ta==0 ?"":ta*externalCurrencyRate));
                    obj.put("preamount", pta);
                    obj.put("isdebit", isDebit);
                    if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                        obj.put("acctype", "costofgoodssold");
                    } else {
                    obj.put("acctype", (account.getGroup().getNature() == Group.NATURE_EXPENSES)?"expense":"income");
                    }
                    if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                        obj.put("group", "costofgoodssold");
                    } else if (account.getGroup().getParent() != null) {
                        obj.put("group", (account.getGroup().getParent().getID().toString().equals("15")) ? "income" : ((account.getGroup().getParent().getID().toString().equals("8")) ? "expense" : ""));
                    } else {
                        obj.put("group", (account.getGroup().getID().toString().equals("15")) ? "income" : ((account.getGroup().getID().toString().equals("8")) ? "expense" : ""));
                    }
                    if (isGroupDetailReport) {
                        obj.put("creationDate", authHandler.getDateOnlyFormat().format(account.getCreationDate()));
                        obj.put("currencysymbol", (account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getSymbol()));
                        obj.put("currencyname", (account.getCurrency() == null ? currency.getName() : account.getCurrency().getName()));
                        obj.put("currencyCode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                        String currencyid = (account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());
                        KwlReturnObject kresult = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, openingamount, currencyid, account.getCreationDate(), 0);
                        if (kresult != null && kresult.getEntityList() != null && !kresult.getEntityList().isEmpty()) {
                            openingInAccCurrency = authHandler.round((Double) kresult.getEntityList().get(0), companyid);
                            obj.put("openingbalanceinaccountcurrency", openingInAccCurrency);
                            obj.put("openingBalanceType",(openingInAccCurrency == 0) ? naBalType  : (openingInAccCurrency > 0) ? debitBalType : creditBalType);
                        }
                        obj.put("accountgroupname", StringUtil.isNullOrEmpty(account.getGroup() != null ? account.getGroup().getName() : "") ? "" : account.getGroup() != null ? account.getGroup().getName() : "");
                        obj.put("aliascode", StringUtil.isNullOrEmpty(account.getAliascode()) ? "" : account.getAliascode());
                        obj.put("deleted", isDeleted);
                    }
                    jArr.put(obj);
                } else {
                    for (int i = 0; i < chArr.length(); i++) {
                        jArr.put(chArr.getJSONObject(i));
                    }
                }
                
            } else if((amount != 0 || previousAmount!=0 ||openingamount!=0 ||periodamount!=0||endingamount!=0 || budget != 0)||isMonthlyReport || (isGroupDetailReport && isShowAllAccountsInGL)) {
                JSONObject obj = new JSONObject();
                obj.put("accountname", accname);
                obj.put("accountcode", StringUtil.isNullOrEmpty(account.getAcccode())?"":account.getAcccode());
                obj.put("accountid", account.getID());
                obj.put("level", level);
                obj.put("leaf", true);
                obj.put("amount1", amount);
                obj.put("haschild", false);
                obj.put("preamount1", previousAmount);
                if (!isDebit && !isGroupDetailReport) {
                    if (amount != 0) {
                            amount = -amount;
                        } else {
                            amount = amount;
                        }
                        if (previousAmount != 0) {
                            previousAmount = -previousAmount;
                        } else {
                            previousAmount = previousAmount;
                        }
                        if(openingamount!=0){
                            openingamount=-openingamount;
                        }else{
                            openingamount=openingamount;
                        }
                        if(periodamount!=0){
                            periodamount=-periodamount;
                        }else{
                            periodamount=periodamount;
                        }
                        if(endingamount!=0){
                            endingamount=-endingamount;
                        }else{
                            endingamount=endingamount;
                        }
                }
                if (isBalanceSheet) {
                        if (amount != 0) {
                            amount = -amount;
                        } else {
                            amount = amount;
                        }
                        if (previousAmount != 0) {
                            previousAmount = -previousAmount;
                        } else {
                            previousAmount = previousAmount;
                        }
                        if(openingamount!=0){
                            openingamount=-openingamount;
                        }else{
                            openingamount=openingamount;
                        }
                        if(periodamount!=0){
                            periodamount=-periodamount;
                        }else{
                            periodamount=periodamount;
                        }
                        if(endingamount!=0){
                            endingamount=-endingamount;
                        }else{
                            endingamount=endingamount;
                        }
                }
                obj.put("amount", (isShowZeroAmountAsBlank && amount == 0.0 ? "" : amount));
                obj.put("budget",(budget != 0.0 ? budget : ""));
                obj.put("openingamount",isShowZeroAmountAsBlank && openingamount == 0.0 ? "" :openingamount);
                if((!(isGroupDetailReport && paramJobj.optBoolean("isexportledgerflag"))) || filetype.equals("detailedPDF")){
                    obj.put("periodamount",isShowZeroAmountAsBlank && periodamount == 0.0 ? "" :periodamount);
                    obj.put("endingamount",isShowZeroAmountAsBlank && endingamount == 0.0 ? "" :endingamount);
                }
                obj.put("amountInSelectedCurrency", (isShowZeroAmountAsBlank && amount == 0.0 ? "" : amount*externalCurrencyRate));
                obj.put("preamount", (previousAmount != 0.0 ? previousAmount : ""));
                obj.put("isdebit", isDebit);
                obj.put("accountflag", true);
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                    obj.put("acctype", "costofgoodssold");
                } else {
                    obj.put("acctype", (account.getGroup().getNature() == Group.NATURE_EXPENSES)?"expense":"income");
                }
                if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                    obj.put("group", "costofgoodssold");
                } else if (account.getGroup().getParent() != null) {
                    obj.put("group", (account.getGroup().getParent().getID().toString().equals("15")) ? "income" : ((account.getGroup().getParent().getID().toString().equals("8")) ? "expense" : ""));
                } else {
                    obj.put("group", (account.getGroup().getID().toString().equals("15")) ? "income" : ((account.getGroup().getID().toString().equals("8")) ? "expense" : ""));
                }
                if (isGroupDetailReport) {
                    if (filetype.equals("print")){
                    obj.put("creationDate",userdf.format(account.getCreationDate()));
                    }else{
                     obj.put("creationDate", authHandler.getDateOnlyFormat().format(account.getCreationDate()));
                    }
                    obj.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
                    obj.put("currencyname", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                    obj.put("currencyCode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                    String currencyid = (account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());
                    KwlReturnObject kresult=accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, openingamount, currencyid, account.getCreationDate(), 0);
                    if (kresult != null && kresult.getEntityList() != null && !kresult.getEntityList().isEmpty()) {
                        openingInAccCurrency = authHandler.round((Double) kresult.getEntityList().get(0), companyid);
                        obj.put("openingbalanceinaccountcurrency", openingInAccCurrency);
                        obj.put("openingBalanceType",(openingInAccCurrency == 0) ? naBalType  : (openingInAccCurrency > 0) ? debitBalType : creditBalType);
                    }
                    obj.put("accountgroupname", StringUtil.isNullOrEmpty(account.getGroup() != null ? account.getGroup().getName() : "") ? "" : account.getGroup() != null ? account.getGroup().getName() : "");
                    obj.put("aliascode", StringUtil.isNullOrEmpty(account.getAliascode()) ? "" : account.getAliascode());
                    obj.put("deleted", isDeleted);
                }
                jArr.put(obj);
                if(isGroupDetailReport && (filetype.equals("detailedXls") || filetype.equals("detailedPDF") || filetype.equals("detailedCSV") || isSubGeneralLedger)){
                    paramJobj.put("generalLedgerFlag", true);
                    paramJobj.put("accountid", account.getID());
                    JSONObject tempObj = getGroupWiseGLReportDetailJson(paramJobj, jArr, generalLedgerList, advSearchAttributes);

                    if (paramJobj.optBoolean("isexportledgerflag")) {
                        obj = new JSONObject();
                        obj.put("accountname", "Total " + accname);
                        obj.put("accountcode", StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode());
                        obj.put("accountid", account.getID());
                        obj.put("level", level);
                        obj.put("leaf", true);
                        obj.put("amount1", amount);
                        obj.put("preamount1", previousAmount);
                        obj.put("amount", (isShowZeroAmountAsBlank && amount == 0.0 ? "" : amount));
                        obj.put("budget", (budget != 0.0 ? budget : ""));
                        obj.put("openingamount", isShowZeroAmountAsBlank && openingamount == 0.0 ? "" : openingamount);
                        obj.put("periodamount", isShowZeroAmountAsBlank && periodamount == 0.0 ? "" : periodamount);
                        obj.put("endingamount", isShowZeroAmountAsBlank && endingamount == 0.0 ? "" : endingamount);
                        obj.put("amountInSelectedCurrency", (isShowZeroAmountAsBlank && amount == 0.0 ? "" : amount * externalCurrencyRate));
                        obj.put("preamount", (previousAmount != 0.0 ? previousAmount : ""));
                        obj.put("isdebit", isDebit);
                        obj.put("accountflag", true);
                        obj.put("d_amount", isShowZeroAmountAsBlank && tempObj.optDouble("d_sumamout",0.0) == 0.0 ? "" : tempObj.getDouble("d_sumamout"));
                        obj.put("c_amount", isShowZeroAmountAsBlank && tempObj.optDouble("c_sumamout",0.0) == 0.0 ? "" : tempObj.getDouble("c_sumamout"));
                        if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                            obj.put("acctype", "costofgoodssold");
                        } else {
                            obj.put("acctype", (account.getGroup().getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                        }
                        if (isForTradingAndProfitLoss && isCostOfGoodsSold && account.getGroup() != null && account.getGroup().isCostOfGoodsSoldGroup()) {
                            obj.put("group", "costofgoodssold");
                        } else if (account.getGroup().getParent() != null) {
                            obj.put("group", (account.getGroup().getParent().getID().toString().equals("15")) ? "income" : ((account.getGroup().getParent().getID().toString().equals("8")) ? "expense" : ""));
                        } else {
                            obj.put("group", (account.getGroup().getID().toString().equals("15")) ? "income" : ((account.getGroup().getID().toString().equals("8")) ? "expense" : ""));
                        }
                        if (isGroupDetailReport) {
//                            obj.put("creationDate", authHandler.getDateOnlyFormat().format(account.getCreationDate()));
//                            obj.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
//                            obj.put("currencyname", (account.getCurrency() == null ? currency.getName() : account.getCurrency().getName()));
//                            obj.put("currencyCode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                            String currencyid = (account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());
                            KwlReturnObject kresult = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, openingamount, currencyid, account.getCreationDate(), 0);
                            if (kresult != null && kresult.getEntityList() != null && !kresult.getEntityList().isEmpty()) {
                                openingInAccCurrency = authHandler.round((Double) kresult.getEntityList().get(0), companyid);
                                obj.put("openingbalanceinaccountcurrency", openingInAccCurrency);
                                obj.put("openingBalanceType",(openingInAccCurrency == 0) ? naBalType  : (openingInAccCurrency > 0) ? debitBalType : creditBalType);
                            }
//                            obj.put("accountgroupname", StringUtil.isNullOrEmpty(account.getGroup() != null ? account.getGroup().getName() : "") ? "" : account.getGroup() != null ? account.getGroup().getName() : "");
//                            obj.put("aliascode", StringUtil.isNullOrEmpty(account.getAliascode()) ? "" : account.getAliascode());
//                            obj.put("deleted", isDeleted);
                        }
                        jArr.put(obj);
                    }
                }
                if (!(amount != 0 || previousAmount!=0 ||openingamount!=0 ||periodamount!=0 || endingamount!=0 || budget != 0)) { //Since we take all accounts for monthly Reports to avoid total of main accounts we put this condition
                    double localArrayAmount[] = {0, 0,0,0,0,0};
                    return localArrayAmount;
                }
            } else {
                double localArrayAmount[] ={0,0,0,0,0,0};
                return localArrayAmount;
            }
        } catch (JSONException e) {
            throw ServiceException.FAILURE("formatAccountDetails : " + e.getMessage(), e);
        }
        return arrayAmount;
    }   
 
    private JSONObject getGroupWiseGLReportDetailJson(JSONObject paramJobj, JSONArray jArr, List<GeneralLedger> generalLedgerList, Map<String, Object> advSearchAttributes) throws JSONException, SessionExpiredException, ServiceException {

        JSONObject returnObj = new JSONObject();
        JSONObject jobj = null;
        boolean isSubGeneralLedger = paramJobj.optBoolean("issubGeneralLedger");
        String filetype = paramJobj.optString("filetype");
        JSONObject accountJobj = new JSONObject();
            if (jArr.length() > 0) {
                accountJobj = jArr.getJSONObject(jArr.length()-1);
        }

        if (paramJobj.optBoolean("isexportledgerflag")) {
            jobj = accTemplateReportService.getLedgerInfo(paramJobj,accountJobj, advSearchAttributes);
            returnObj.put("c_sumamout", jobj.optDouble("c_sumamout"));
            returnObj.put("d_sumamout", jobj.optDouble("d_sumamout"));
        }else{
            jobj = getLedger(paramJobj);
        }
        
        boolean isAccountAdded = false;
        JSONArray dataRowsArr = jobj.getJSONArray(Constants.RES_data);
        for (int j = 0; j < dataRowsArr.length(); j++) {
            JSONObject tempjobj = new JSONObject();
            tempjobj = dataRowsArr.getJSONObject(j);
            if (!tempjobj.optString("d_accountname").equals("Opening Balance") && !tempjobj.optString("d_accountname").equals("Balance c/f") && !tempjobj.optString("d_accountname").equals("Balance b/d") && !tempjobj.optString("c_accountname").equals("Opening Balance") && !tempjobj.optString("c_accountname").equals("Balance c/f") && !tempjobj.optString("c_accountname").equals("Balance b/d")) {
//                String d_amount = tempjobj.optString("d_amount");
//                String transactionAmount = tempjobj.optString("transactionAmount");
//                if (!StringUtil.isNullOrEmpty(d_amount)) {
//                    tempjobj.put("d_transactionAmount", transactionAmount);
//                } else {
//                    tempjobj.put("c_transactionAmount", transactionAmount);
//                }
//                tempjobj.remove("transactionAmount");
//                tempjobj.remove("accountname");

                if ((isSubGeneralLedger || filetype.equalsIgnoreCase("detailedPDF")) && generalLedgerList != null) {
                    GeneralLedger generalLedger = getSubLedgerDetailsToExport(paramJobj, accountJobj, tempjobj);
                    generalLedgerList.add(generalLedger);
                    isAccountAdded = true;
                } else {
                    jArr.put(tempjobj);
                }
            }
        }
        
        /*
         * If Account does not have any transactions then add description of
         * that account as No Transactions
         */
         if ((isSubGeneralLedger || filetype.equalsIgnoreCase("detailedPDF")) && generalLedgerList != null && !isAccountAdded) {
            JSONObject tempjobj = new JSONObject();
            tempjobj.put("d_transactionDetails","No Transactions");
            GeneralLedger generalLedger = getSubLedgerDetailsToExport(paramJobj, accountJobj, tempjobj);
            generalLedgerList.add(generalLedger);
        }
         return returnObj;
    }
    
    private GeneralLedger getSubLedgerDetailsToExport(JSONObject paramJobj, JSONObject accountJobj, JSONObject detailsJobj) throws JSONException, SessionExpiredException, ServiceException {
        DateFormat df2 = authHandler.getUserDateFormatterWithoutTimeZone(paramJobj.optString(Constants.userdateformat));
        GeneralLedger generalLedger = new GeneralLedger();
        boolean isSubGeneralLedger = paramJobj.optBoolean("issubGeneralLedger");
        boolean isexportledgerflag = paramJobj.optBoolean("isexportledgerflag");
        String companyid=paramJobj.optString("companyid");

        String personid = accountJobj.optString("personid", "");
        String personname = accountJobj.optString("personname", "");
        String accountname = accountJobj.optString("accountname", "");
        String accountid = accountJobj.optString("accountid", "");
        String aliascode = accountJobj.optString("aliascode", "");
        String accCode = accountJobj.optString("accountcode", "");
        double openingamount = accountJobj.optDouble("openingamount",0);
        double endingamount = accountJobj.optDouble("endingamount",0);
        double periodamount = accountJobj.optDouble("periodamount",0);
        boolean isVendor = accountJobj.optBoolean("isVendor");

        try {
            if(accountid.contains("Other")){
                accountid = accountid.replace("Other", "").trim();
                accountname = accountname.replace("Other", "").trim();
            }
            
            Integer Rpl = Constants.AMOUNT_DIGIT_AFTER_DECIMAL;
            if (Constants.CompanyPreferencePrecisionMap.containsKey(companyid)) {
                Rpl = (Integer) Constants.CompanyPreferencePrecisionMap.get(companyid).get(Constants.amountdecimalforcompany);
            }
            generalLedger.setDecimalCount(Rpl.toString());
            generalLedger.setAccountGroupID(accountid);
            generalLedger.setAcccode(accCode);
            generalLedger.setAliascode(aliascode);
            generalLedger.setAccname(accountname);
            generalLedger.setDate(!StringUtil.isNullOrEmpty(detailsJobj.optString("d_date")) ? df2.format(authHandler.getDateOnlyFormat().parse(detailsJobj.optString("d_date"))) : !StringUtil.isNullOrEmpty(detailsJobj.optString("c_date")) ? df2.format(authHandler.getDateOnlyFormat().parse(detailsJobj.optString("c_date"))) : "");
            generalLedger.setPersonID(personid);
            generalLedger.setPersonName(personname);

            int personType = personid.equals("") ? 3 : (isVendor ? 2 : 1);
            generalLedger.setTransactionTypePerson(personType);

            generalLedger.setName(!StringUtil.isNullOrEmpty(detailsJobj.optString("d_accountname")) ? detailsJobj.optString("d_accountname") : detailsJobj.optString("c_accountname"));
            generalLedger.setType(detailsJobj.optString("type"));
            generalLedger.setMemo(detailsJobj.optString("memoValue"));
            generalLedger.setPayer(detailsJobj.optString("payer"));
            generalLedger.setOnlydesc(!StringUtil.isNullOrEmpty(detailsJobj.optString("d_transactionDetails")) ? detailsJobj.optString("d_transactionDetails") : detailsJobj.optString("c_transactionDetails"));
            generalLedger.setJEnumber(!StringUtil.isNullOrEmpty(detailsJobj.optString("d_entryno")) ? detailsJobj.optString("d_entryno") : detailsJobj.optString("c_entryno"));
            generalLedger.setDebit(detailsJobj.optDouble("d_amount", 0));
            generalLedger.setCredit(detailsJobj.optDouble("c_amount", 0));
            generalLedger.setDebitAmtInAccCurrency(detailsJobj.optDouble("d_amountindocumentcurrency", 0));
            generalLedger.setCreditAmtInAccCurrency(detailsJobj.optDouble("c_amountindocumentcurrency", 0));
            generalLedger.setBalance(detailsJobj.optDouble("balance", 0));
            generalLedger.setBalanceString(authHandler.formattedCommaSeparatedAmount(detailsJobj.optDouble("balance", 0), companyid));
            generalLedger.setOpeningBalanceofAccount(openingamount);
            if (isSubGeneralLedger) {
                generalLedger.setOpening(0);
            } else {
                generalLedger.setOpening(openingamount);
            }
            generalLedger.setClosing(endingamount);
            generalLedger.setPeriod(periodamount);
            generalLedger.setHeaderString(detailsJobj.optString(Constants.MAIN_GROUP_VALUE));
            generalLedger.setInnerString(detailsJobj.optString(Constants.SUB_GROUP_VALUE));

            if (!StringUtil.isNullOrEmpty(detailsJobj.optString("transactionCurrency", "")) && !isexportledgerflag) {
                if (detailsJobj.getString("transactionCurrency").equals(paramJobj.optString(Constants.globalCurrencyKey))) {
                    generalLedger.setErate("1");
                    generalLedger.setCurrencyName(!StringUtil.isNullOrEmpty(detailsJobj.getString("transactionSymbol")) ? detailsJobj.getString("transactionSymbol") : "");
                } else {
                    String transactionSymbol = "";
                    String transactionDateString = "";
                    double exchangeRateAmount = 0.0;
                    if (detailsJobj.optDouble("d_amount", 0) > 0.0) {
                        transactionSymbol = !StringUtil.isNullOrEmpty(detailsJobj.getString("transactionSymbol")) ? detailsJobj.getString("transactionSymbol") : "";
                        transactionDateString = !StringUtil.isNullOrEmpty(detailsJobj.getString("transactionDateString")) ? detailsJobj.getString("transactionDateString") : "";
                        exchangeRateAmount = ((detailsJobj.getDouble("d_amount") / detailsJobj.getDouble("transactionAmount")) * 100 / 100);
                        generalLedger.setCurrencyName(transactionSymbol + "(" + transactionDateString + ")");
                        double externalcurrencyrate = detailsJobj.optDouble("d_externalcurrencyrate", 0);
                        if (externalcurrencyrate != 0) {
                            externalcurrencyrate = 1 / externalcurrencyrate;
                            externalcurrencyrate = (Math.round(externalcurrencyrate * Constants.ROUND_OFF_NUMBER)) / Constants.ROUND_OFF_NUMBER;
                            generalLedger.setErate(externalcurrencyrate + "");
                        } else {
                            generalLedger.setErate(exchangeRateAmount + "");
                        }
                    } else if (detailsJobj.optDouble("c_amount", 0) > 0.0) {
                        transactionSymbol = !StringUtil.isNullOrEmpty(detailsJobj.getString("transactionSymbol")) ? detailsJobj.getString("transactionSymbol") : "";
                        transactionDateString = !StringUtil.isNullOrEmpty(detailsJobj.getString("transactionDateString")) ? detailsJobj.getString("transactionDateString") : "";
                        exchangeRateAmount = ((detailsJobj.getDouble("c_amount") / detailsJobj.getDouble("transactionAmount")) * 100 / 100);
                        generalLedger.setCurrencyName(transactionSymbol + "(" + transactionDateString + ")");
                        double externalcurrencyrate = detailsJobj.optDouble("c_externalcurrencyrate", 0);
                        if (externalcurrencyrate != 0) {
                            externalcurrencyrate = 1 / externalcurrencyrate;
                            externalcurrencyrate = (Math.round(externalcurrencyrate * Constants.ROUND_OFF_NUMBER)) / Constants.ROUND_OFF_NUMBER;
                            generalLedger.setErate(externalcurrencyrate + "");
                        } else {
                            generalLedger.setErate(exchangeRateAmount + "");
                        }
                    }
                }
            }
            if(isexportledgerflag){
                double exchangerate = 1 / detailsJobj.optDouble("exchangeratefortransaction", 1);
                generalLedger.setErate(String.valueOf((Math.round(exchangerate * Constants.ROUND_OFF_NUMBER)) / Constants.ROUND_OFF_NUMBER));
                generalLedger.setVoucherno(!StringUtil.isNullOrEmpty(detailsJobj.optString("refno")) ? detailsJobj.optString("refno") : detailsJobj.optString("refno"));
                generalLedger.setDesc(!StringUtil.isNullOrEmpty(detailsJobj.optString("description")) ? detailsJobj.optString("description") : detailsJobj.optString("description"));
            }else{
                generalLedger.setVoucherno(!StringUtil.isNullOrEmpty(detailsJobj.optString("d_transactionID")) ? detailsJobj.optString("d_transactionID") : detailsJobj.optString("c_transactionID"));
                generalLedger.setDesc(!StringUtil.isNullOrEmpty(detailsJobj.optString("d_transactionDetails")) ? detailsJobj.optString("d_transactionDetails") : detailsJobj.optString("c_transactionDetails"));
            }
        } catch (ParseException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return generalLedger;
    }
    
@Override
    public double getAccountBalanceForCashFlowStatement(JSONObject paramJobj, Account account, Date startDate, Date endDate) throws ServiceException, SessionExpiredException, JSONException {
        double amount = 0;
        paramJobj.put("isPeriod", true);
        List childlist = new ArrayList(account.getChildren());
        if (childlist.isEmpty()) {
//            amount = getAccountBalance(request, account.getID(), startDate, endDate);
            amount = getAccountBalance(paramJobj, account.getID(), startDate, endDate,null);
        } else {
            Iterator itr = childlist.iterator();
            while (itr.hasNext()) {
                amount += getAccountBalanceForCashFlowStatement(paramJobj, (Account) itr.next(), startDate, endDate);
            }
        }
        return amount;
    }
    public JSONObject getRequestParams(HttpServletRequest request) {
        JSONObject params = new JSONObject();
        try {
            params.put(Constants.GLOBAL_PARAMS, AccountingManager.getGlobalParams(request));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            params.put(Constants.companyKey, companyid);
            String userdateformat = sessionHandlerImpl.getUserDateFormat(request);
            params.put("userdateformat", userdateformat);
            String globalCurrency = AccountingManager.getGlobalCurrencyidFromRequest(request);
            params.put(Constants.globalCurrencyKey, globalCurrency);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            params.put(Constants.currencyKey, currencyid);
            params.put(Constants.currencyKey, currencyid);
            params.put(Constants.globalCurrencyKey, currencyid);
            Enumeration<String> attributes = request.getAttributeNames();
            while (attributes.hasMoreElements()) {
                String attribute = attributes.nextElement();
                params.put(attribute, request.getAttribute(attribute));
            }
            Enumeration<String> parameters = request.getParameterNames();
            while (parameters.hasMoreElements()) {
                String parameter = parameters.nextElement();
                params.put(parameter, request.getParameter(parameter));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return params;
    }

    @Override
    public double getAccountBalance(JSONObject jsonParams, String accountid, Date startDate, Date endDate, Map<String, Object> advSearchAttributes) throws ServiceException, SessionExpiredException {
        HashMap<String, Object> requestParams = new HashMap<>();
        try {
            requestParams = AccountingManager.getGlobalParamsJson(jsonParams);
            requestParams.put("costcenter", jsonParams.optString("costcenter", ""));
            if (!StringUtil.isNullOrEmpty(jsonParams.optString("DimensionBasedComparisionReport", null)) && jsonParams.optString("DimensionBasedComparisionReport", "").equals("DimensionBasedComparisionReport")) {
                requestParams.put(Constants.Acc_Search_Json, jsonParams.optString("DimensionBasedSearchJson", ""));
            } else {
                requestParams.put(Constants.Acc_Search_Json, jsonParams.optString(Constants.Acc_Search_Json, ""));
            }
            requestParams.put(Constants.Filter_Criteria, jsonParams.optString(InvoiceConstants.Filter_Criteria, ""));
            requestParams.put("templatecode", (StringUtil.isNullOrEmpty(jsonParams.optString("templatecode", null))) ? -1 : Integer.parseInt(jsonParams.optString("templatecode")));
            String selectedCurrencyIds = jsonParams.optString("currencyIds", "");
            if (!StringUtil.isNullOrEmpty(selectedCurrencyIds)) {
                requestParams.put("currencyFlag", true);
                requestParams.put("selectedCurrencyIds", selectedCurrencyIds);
            }
            if (!StringUtil.isNullOrEmpty(jsonParams.optString("isGeneralLedger", null))) {
                boolean isGeneralLedger = Boolean.parseBoolean(jsonParams.optString("isGeneralLedger", ""));
                requestParams.put("generalLedgerFlag", isGeneralLedger);
            }
            if (jsonParams.optInt("accountTransactionType", Constants.All_Transaction_TypeID) != Constants.All_Transaction_TypeID) {
                requestParams.put("accountTransactionType", jsonParams.optInt("accountTransactionType", Constants.All_Transaction_TypeID));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return getAccountClosingBalance(jsonParams, requestParams, accountid, startDate, endDate, 0, false, advSearchAttributes);
    }

 @Override   
    public double getAccountBalanceWithOutClosing(JSONObject paramJobj, String accountid, Date startDate, Date endDate, Map<String, Object> advSearchAttributes) throws ServiceException, SessionExpiredException {
        HashMap<String, Object> requestParams = new HashMap<>();
        try {
            requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
            requestParams.put("costcenter", paramJobj.optString("costcenter", null));
            requestParams.put(Constants.Acc_Search_Json, paramJobj.optString(Constants.Acc_Search_Json, null));
            requestParams.put(Constants.Filter_Criteria, paramJobj.optString(InvoiceConstants.Filter_Criteria, null));
            requestParams.put("templatecode", (StringUtil.isNullOrEmpty(paramJobj.optString("templatecode", null))) ? -1 : Integer.parseInt(paramJobj.getString("templatecode")));
            String selectedCurrencyIds = paramJobj.optString("currencyIds",null);
            if (!StringUtil.isNullOrEmpty(selectedCurrencyIds)) {
                requestParams.put("currencyFlag", true);
                requestParams.put("selectedCurrencyIds", selectedCurrencyIds);
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("isGeneralLedger", null))) {
                boolean isGeneralLedger = Boolean.parseBoolean(paramJobj.optString("isGeneralLedger"));
                requestParams.put("generalLedgerFlag", isGeneralLedger);
            }
            if(paramJobj.optInt("accountTransactionType", Constants.All_Transaction_TypeID)!=Constants.All_Transaction_TypeID){
                requestParams.put("accountTransactionType", paramJobj.optInt("accountTransactionType", Constants.All_Transaction_TypeID));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return getAccountBalance(paramJobj, requestParams, accountid, startDate, endDate, 0, false, advSearchAttributes);
    }
    
  @Override  
    public double getAccountBalance(JSONObject paramJObj, HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate,
            double accountOpeningBalance, boolean isValidOpeningBalance, Map<String, Object> advSearchAttributes) throws ServiceException {
        double amount = 0;
        try {
            String companyid = paramJObj.optString("companyid");
            String gcurrencyid = (String) requestParams.get(Constants.globalCurrencyKey);
            KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountid);
            Account account = (Account) accresult.getEntityList().get(0);

            int templatecode = (Integer) requestParams.get("templatecode");
            boolean gstForm5Flag = paramJObj.optString("gstForm5Flag", null) != null ? Boolean.parseBoolean(paramJObj.optString("gstForm5Flag")) : false;
            boolean revenueFlag = paramJObj.optString("revenueonly", null) != null ? Boolean.parseBoolean(paramJObj.optString("revenueonly")) : false;
            String forexAccID = paramJObj.optString("forexAccID", null) != null ? paramJObj.optString("forexAccID") : "";

            String costCenterId = (String) requestParams.get("costcenter");
            String selectedCurrencyIds = (String) requestParams.get("selectedCurrencyIds");
            boolean isCurrencyFlag = false;

            String accCurrency = account.getCurrency().getCurrencyID();
            if (!StringUtil.isNullOrEmpty(selectedCurrencyIds)) {
                String[] selectedCurrencyIdsArray = selectedCurrencyIds.split(",");
                for (String selectedCurrencyIdsObj : selectedCurrencyIdsArray) {
                    if (selectedCurrencyIdsObj.equals(accCurrency)) {
                        isCurrencyFlag = true;
                        break;
                    }
                }

            }
            boolean isPeriod = paramJObj.optString("isPeriod", null) != null ? Boolean.parseBoolean(paramJObj.optString("isPeriod")) : false;
            if (!isPeriod) {
//            if (request.getAttribute("netProfitClosesFlag") == null) {//Dont Consider Opening Balance while transferring profit on year end Closing
                if ((templatecode == -1) || (account.getTemplatepermcode() != null && account.getTemplatepermcode() != 0 && ((templatecode & account.getTemplatepermcode()) == templatecode))) {
                    if (StringUtil.isNullOrEmpty(costCenterId)) { //Don't consider opening balance for CostCenter
                        if (startDate != null && ((startDate.before(account.getCreationDate()) || startDate.equals(account.getCreationDate())))) {
                            if(isValidOpeningBalance) {
                                amount = accountOpeningBalance;
                            } else {
                                String filterConjuctionCriteria = !StringUtil.isNullOrEmpty(paramJObj.optString(Constants.Filter_Criteria, null)) ? paramJObj.optString(Constants.Filter_Criteria, "") : "";
                                String Searchjson = !StringUtil.isNullOrEmpty(paramJObj.optString(Constants.Acc_Search_Json,null)) ? paramJObj.optString(Constants.Acc_Search_Json, "") : "";
                                if (!StringUtil.isNullOrEmpty(paramJObj.optString("DimensionBasedComparisionReport", null)) && paramJObj.optString("DimensionBasedComparisionReport", "").equals("DimensionBasedComparisionReport")) {
                                    Searchjson = paramJObj.optString("DimensionBasedSearchJson");
                                }
                                paramJObj.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                                paramJObj.put(Constants.Searchjson, Searchjson);                            
                                double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccountJson(paramJObj, account, false, null);
                                amount = accountOpeningBalanceInBase;//(Double) result.getEntityList().get(0);
//                                paramJObj.remove(Constants.Filter_Criteria); //To resolve ERP-27732 
                                paramJObj.remove(Constants.Searchjson);
                            }
                        }

                    }
                }
            }
            boolean includeClosingBalance = true;
            if (includeClosingBalance && paramJObj.has("periodView") && !paramJObj.optBoolean("periodView", false) && !isPeriod) {
                /* To be used in period view of balance sheet only.
                 * Opening balance for Retained Earnings was showing for the Balance Sheet (Period View)
                 */
                includeClosingBalance = false;
                
            }
            if (!isPeriod && !StringUtil.isNullOrEmpty(paramJObj.optString(Constants.companyKey)) && includeClosingBalance) {
                KwlReturnObject prefresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), paramJObj.optString(Constants.companyKey));
                CompanyAccountPreferences pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
                KwlReturnObject extraprefresult = accountingHandlerDAOobj.loadObject(ExtraCompanyPreferences.class.getName(), paramJObj.optString(Constants.companyKey));
                ExtraCompanyPreferences extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
                if (account != null && !StringUtil.isNullOrEmpty(extrapref.getProfitLossAccountId()) && extrapref.getProfitLossAccountId().equals(account.getID())) {
                    /**
                     * Date excludedPreviousYearDate =
                     * getDateForExcludePreviousYearBalanceFilter(paramJObj.optString(Constants.companyKey),
                     * endDate); Date previousFYEndDate = new
                     * DateTime(excludedPreviousYearDate).minusDays(1).toDate();
                     * double closedYrNetProfitAndLoss =
                     * getClosedYearNetProfitAndLoss(previousFYEndDate, pref,
                     * extrapref, paramJObj.optString(Constants.companyKey));
                     * amount += closedYrNetProfitAndLoss;
                     */
                    
                    double closedYrNetProfitAndLoss = getClosedYearNetProfitAndLoss(endDate, pref, extrapref, paramJObj.optString(Constants.companyKey));
                    amount += closedYrNetProfitAndLoss;
                }
            }
            if (gstForm5Flag && amount != 0 && accountid.equalsIgnoreCase(forexAccID) && !gcurrencyid.equalsIgnoreCase(Constants.SGDID)) { //GSTForm5 case: forex account amount calculation in SGD 
                KwlReturnObject bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amount, gcurrencyid, Constants.SGDID, account.getCreationDate(), 1);
                amount = (Double) bAmt.getEntityList().get(0);
            }
            if(!isCurrencyFlag && !StringUtil.isNullOrEmpty(selectedCurrencyIds)){                                         
                amount=0.0;
            }
            String Searchjson = "";

            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                if (requestParams.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = requestParams.get("searchJson").toString();
            }
            if (StringUtil.isNullOrEmpty(Searchjson) && account.getCompany().isOptimizedflag() && (templatecode == -1)) {
                KwlReturnObject abresult = accJournalEntryobj.getAccountBalance_optimized(accountid, startDate, endDate, costCenterId);
                List list = abresult.getEntityList();
                if(list.size() > 0 && list.get(0) != null) {
                    amount += (Double) list.get(0);
                }
            } else {
                if( account.getCompany().getSubDomain().equals("tonyfibreglass") || (account.getCompany().getCurrency().getCurrencyID() != Constants.SGDID && gstForm5Flag && !revenueFlag)){ // SDP-12162 When company currency is different than country currency for GST Form 5.
                    //   System.out.println("All Jes in General Ledger:"); //ERP-8660 - to find out difference in GL and T Ledger report
                    KwlReturnObject abresult = accJournalEntryobj.getAccountBalance(requestParams, accountid, startDate, endDate, costCenterId, filterConjuctionCriteria, Searchjson);
                    List<Object[]> list = abresult.getEntityList();
                    for (Object[] row : list) {
                        JournalEntryDetail jed = (JournalEntryDetail) row[1];
                        /*
                     * Here, isSalesTransactionForex is set default to False.
                     * When calculating the total forex gain loss , we calculate onlu sales side forex gain loss. 
                     * If journal entry associated with journal entry detais is posted for purchase side transaction,  isSalesTransactionForex is set to False.
                     * If isSalesTransactionForex is false, then forex gain-loss amount will not be calculated total.
                         */

                    JournalEntry je =jed.getJournalEntry();
                        boolean isSalesTransactionForex = true;
                        /*
                     * ERP-10003
                     * For tony fiber glass, only sales side forex gain loss is calculated
                     * for other clients on this build, forex gain loss of both purchase and sales side will be calculated.
                     * This is a temporary fix as told by Sagar A sir and Paritosh Sir  
                         */
                        if (account.getCompany().getSubDomain().equals("tonyfibreglass")) {
                            if (accountid.equalsIgnoreCase(forexAccID)) {       // When calculating forex gain loss for GST report
                                int moduleIdForJournalEntry = accJournalEntryobj.getModuleIdForJournalEntry(requestParams, je.getID());
                                if (moduleIdForJournalEntry == Constants.Acc_Make_Payment_ModuleId || moduleIdForJournalEntry == Constants.Acc_Debit_Note_ModuleId) {   // If journal entry posted for Purchase module
                                    isSalesTransactionForex = false;
                                }
                            }
                        }

                        if (((templatecode == -1) || (jed.getJournalEntry().getTemplatepermcode() != null && jed.getJournalEntry().getTemplatepermcode() != 0 && ((templatecode & jed.getJournalEntry().getTemplatepermcode()) == templatecode))) && isSalesTransactionForex) {
                            String fromcurrencyid = (jed.getJournalEntry().getCurrency() == null ? gcurrencyid : jed.getJournalEntry().getCurrency().getCurrencyID());

                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ((Double) row[0]).doubleValue(), fromcurrencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                            double tempamt = (Double) crresult.getEntityList().get(0);
                            //tempamt = authHandler.round(tempamt, companyid);
                            
                            //         System.out.println(""+jed.getJournalEntry().getEntryNumber()+"  "+tempamt); //ERP-8660- to find out difference in GL and T Ledger report

                            if (gstForm5Flag && tempamt != 0 && accountid.equalsIgnoreCase(forexAccID) && !gcurrencyid.equalsIgnoreCase(Constants.SGDID)) { //gst form5 case when forex account amount is calculated
                            KwlReturnObject bAmt=null;
                           if (jed.getJournalEntry().getGstCurrencyRate() != 0&&jed.getForexGainLoss()!=0.0&&jed.getPaymentType()!=0) { //to check if the Payment has forex gain loss and external GST rate when country is Singapore                                        
                                        KwlReturnObject bAmtForex=accJournalEntryobj.getJournalEntryDetail(jed.getJournalEntry().getID(),jed.getJournalEntry().getCompany().getCompanyID());
                                    double forexAmt = 0.0;
                                    boolean forexFlag = false;
                                        List<JournalEntryDetail> bAmtForexList=bAmtForex.getEntityList();
                                        for(JournalEntryDetail detail:bAmtForexList){
                                        double baseforexAmt = 0.0;
                                             KwlReturnObject forexObj=null;
                                            if(detail.getForexGainLoss()!=0.0&&!jed.getID().equals(detail.getID())&&jed.getPaymentType()==detail.getPaymentType()){
                                                forexFlag=true;
                                                if(detail.getGstCurrencyRate()!=0.0){
                                                    if(detail.getJournalEntry().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID)){
                                                        forexAmt+=detail.getForexGainLoss();
                                                        tempamt=forexAmt;
                                                    }else{
                                                    forexObj = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, detail.getForexGainLoss(), jed.getJournalEntry().getCurrency().getCurrencyID(), jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate(),detail.getGstCurrencyRate());
                                                forexAmt += (Double) forexObj.getEntityList().get(0);
                                                    tempamt=forexAmt;
                                                    }
                                                }else{
                                                forexObj = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, detail.getForexGainLoss(), fromcurrencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                                                baseforexAmt = (Double) forexObj.getEntityList().get(0);
                                                forexObj = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, baseforexAmt, gcurrencyid, Constants.SGDID, jed.getJournalEntry().getEntryDate(), 1);
                                                forexAmt += (Double) forexObj.getEntityList().get(0);
                                                    tempamt=forexAmt;
                                            }
                                                /*
                                                * If gstCurrencyRate!=0 for JE, then we iteratng all je details under JE to get gstCurrencyRate and calculate foreign exchange
                                                * In this case, need to check amount is credited or debited.
                                                */
                                               tempamt = jed.isDebit()? tempamt : (-1) * tempamt;
                                        }
                                    }
                                        if(!forexFlag)
                                            bAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, tempamt, jed.getJournalEntry().getCurrency().getCurrencyID(), jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate(),jed.getGstCurrencyRate());
                                } else if (jed.getJournalEntry().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID)) {
                                    //If transaction currency is SGD
                                    tempamt = ((Double) row[0]).doubleValue();
                                }else {
                                    bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, tempamt, gcurrencyid, Constants.SGDID, jed.getJournalEntry().getEntryDate(), 1);
                                }
                            if(bAmt!=null)
                                    tempamt = (Double) bAmt.getEntityList().get(0);
                                    amount += authHandler.round(tempamt, companyid);
                            } else {
                                amount += authHandler.round(tempamt, companyid);
                            }
                        }
                    }
                } else if (gstForm5Flag && revenueFlag && account.getCompany().getCurrency().getCurrencyID() != Constants.SGDID) { //SDP-4530 Diamond Aviation Revenue Calclulation
                    
                    KwlReturnObject JEDetailResult = accJournalEntryobj.getAccountBalance(requestParams, accountid, startDate, endDate, costCenterId, filterConjuctionCriteria, Searchjson);
                    List<Object[]> list = JEDetailResult.getEntityList();
                    Double revenueAmount = 0.0;
                    KwlReturnObject revenueObj = null;
                    for (Object[] row : list) {
                        JournalEntryDetail jed = (JournalEntryDetail) row[1];
                        if (jed.getAmountinbase() != 0) {
                            /*
                             Code to calcluate GST currency rate if prsesent
                             */

                            HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
                            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();

                            JournalEntry je = jed.getJournalEntry();
                            Double tempAmount = 0.0;
                            Double GSTCurrencyRate = 0.0;
                            if (je.getCurrency().getCurrencyID().equals(Constants.SGDID)) {
                                tempAmount = jed.getAmount();
                            } else if (je.getTransactionModuleid() == Constants.Acc_Invoice_ModuleId || je.getTransactionModuleid() == Constants.Acc_Vendor_Invoice_ModuleId || je.getTransactionModuleid() == Constants.Acc_Debit_Note_ModuleId || je.getTransactionModuleid() == Constants.Acc_Credit_Note_ModuleId) {
                                Map<String, String> params = new HashMap<>();
                                
                                filter_names.add("company.companyID");
                                filter_params.add(companyid);

                                if (je.getTransactionModuleid() == Constants.Acc_Invoice_ModuleId) {

                                    KwlReturnObject invoiceResult = accountingHandlerDAOobj.getObject(Invoice.class.getName(), je.getTransactionId());
                                    Invoice invoiceObj = (Invoice) invoiceResult.getEntityList().get(0);
                                    if (invoiceObj != null && invoiceObj.getGstCurrencyRate() != 0) {
                                        GSTCurrencyRate = invoiceObj.getGstCurrencyRate();
                } else {
                                        filter_names.add("invoice.ID");
                                        filter_params.add(invoiceObj.getID());
                                        filter_names.add("salesJED.ID");
                                        filter_params.add(jed.getID());
                                        doRequestParams.put("filter_names", filter_names);
                                        doRequestParams.put("filter_params", filter_params);
                                        KwlReturnObject invDtlResult = accInvoiceDAOobj.getInvoiceDetails(doRequestParams);
                                        InvoiceDetail invDetailObj = invDtlResult.getEntityList().size() != 0 ? (InvoiceDetail) invDtlResult.getEntityList().get(0) : null;
                                        if (invDetailObj != null && invDetailObj.getGstCurrencyRate() != 0) {
                                            GSTCurrencyRate = invDetailObj.getGstCurrencyRate();
                                        }
                                    }
                                } else if (je.getTransactionModuleid() == Constants.Acc_Vendor_Invoice_ModuleId) {
                                    KwlReturnObject grResult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), je.getTransactionId());
                                    GoodsReceipt grObj = (GoodsReceipt) grResult.getEntityList().get(0);
                                    if (grObj != null && grObj.getGstCurrencyRate() != 0) {
                                        GSTCurrencyRate = grObj.getGstCurrencyRate();
                                    } else {
                                        filter_names.add("goodsReceipt.ID");
                                        filter_params.add(grObj.getID());
                                        filter_names.add("purchaseJED.ID");
                                        filter_params.add(jed.getID());
                                        doRequestParams.put("filter_names", filter_names);
                                        doRequestParams.put("filter_params", filter_params);
                                        KwlReturnObject grDtlResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(doRequestParams);
                                        GoodsReceiptDetail grDetailObj = grDtlResult.getEntityList().size() != 0 ? (GoodsReceiptDetail) grDtlResult.getEntityList().get(0) : null;
                                        if (grDetailObj != null && grDetailObj.getGstCurrencyRate() != 0) {
                                            GSTCurrencyRate = grDetailObj.getGstCurrencyRate();
                                        }

                                    }
                                } else if (je.getTransactionModuleid() == Constants.Acc_Debit_Note_ModuleId) {
                                    KwlReturnObject dnResult = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), je.getTransactionId());
                                    DebitNote DNObj = (DebitNote) dnResult.getEntityList().get(0);
                                    if (DNObj != null) {
                                        HashMap<String, Object> paramsTaxDetails = new HashMap<>();
                                        paramsTaxDetails.put("companyid", companyid);
                                        paramsTaxDetails.put("dnid", DNObj.getID());
                                        paramsTaxDetails.put("accid", jed.getAccount().getID());                                                                             
                                        KwlReturnObject dnteResult = accDebitNoteobj.getDebitTaxDetails(paramsTaxDetails);
                                        DebitNoteTaxEntry dnteObj = dnteResult.getEntityList().size() != 0 ? (DebitNoteTaxEntry) dnteResult.getEntityList().get(0) : null;
                                        if (dnteObj != null && dnteObj.getGstCurrencyRate() != 0) {
                                            GSTCurrencyRate = dnteObj.getGstCurrencyRate();
                                        }
                                    }
                                } else if (je.getTransactionModuleid() == Constants.Acc_Credit_Note_ModuleId) {
                                    KwlReturnObject cnResult = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), je.getTransactionId());
                                    CreditNote CNObj = (CreditNote) cnResult.getEntityList().get(0);
                                    if (CNObj != null) {
                                        HashMap<String, Object> paramsTaxDetails = new HashMap<>();
                                        paramsTaxDetails.put("companyid", companyid);
                                        paramsTaxDetails.put("cnid", CNObj.getID());
                                        paramsTaxDetails.put("accid", jed.getAccount().getID());                                                                             
                                        KwlReturnObject cnteResult = accCreditNoteobj.getCreditTaxDetails(paramsTaxDetails);
                                        CreditNoteTaxEntry cnteObj = cnteResult.getEntityList().size() != 0 ? (CreditNoteTaxEntry) cnteResult.getEntityList().get(0) : null;
                                        if (cnteObj != null && cnteObj.getGstCurrencyRate() != 0) {
                                            GSTCurrencyRate = cnteObj.getGstCurrencyRate();
                                        }
                                    }

                                }
                            }
                            /*
                             For Module Journal Entry Except Auto Journal Entry  , Make Payment And Receive Payment
                             Conversion from base currency to SGD based on transcation date.
                             */
                            if (GSTCurrencyRate != 0) {
                                tempAmount = jed.getAmountinbase() * GSTCurrencyRate;
                            } else if (tempAmount == 0) {
                                revenueObj = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, jed.getAmountinbase(), gcurrencyid, Constants.SGDID, jed.getJournalEntry().getEntryDate(), 0);
                                tempAmount = (Double) revenueObj.getEntityList().get(0);
                            }
                            if (!jed.isDebit()) {
                                tempAmount = -tempAmount;
                            }
                            revenueAmount += tempAmount;
                        }
                    }

                    amount += authHandler.round(revenueAmount, companyid);
                } else {
                    KwlReturnObject abresult = accJournalEntryobj.getAccountBalanceAmount(requestParams, accountid, startDate, endDate, costCenterId, filterConjuctionCriteria, Searchjson, advSearchAttributes);
                    List list = abresult.getEntityList();
                    if (list.get(0) != null) {
                        amount += authHandler.round(((Double) list.get(0)).doubleValue(), companyid);
                    }
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalance : " + ex.getMessage(), ex);
        }
        return amount;
    }
  
  @Override  
    public double getAccountClosingBalance(JSONObject paramJObj, HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate, double accountopenbalance, boolean isValidOpeningBalance, Map<String, Object> advSearchAttributes) throws ServiceException {
        double amount = 0;
        try {
            CompanyAccountPreferences pref = null;
            KwlReturnObject prefresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), paramJObj.getString(Constants.companyKey));
            pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
            amount=getAccountBalance(paramJObj,requestParams, accountid, startDate, endDate, accountopenbalance, isValidOpeningBalance, advSearchAttributes);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalance : " + ex.getMessage(), ex);
        }
        return amount;
    }
    @Override
    public HashMap<String, Date> getStartAndEndFinancialDate(CompanyAccountPreferences companyAccountPreferences, int year) throws ServiceException, SessionExpiredException {
        HashMap<String, Date> startEndDateHashMap = new HashMap<String, Date>();
        Calendar startFinYearCal = Calendar.getInstance();
        Calendar endFinYearCal = Calendar.getInstance();
        startFinYearCal.setTime(companyAccountPreferences.getFinancialYearFrom());
        startFinYearCal.set(Calendar.YEAR, year);
        endFinYearCal.setTime(companyAccountPreferences.getFinancialYearFrom());
        endFinYearCal.set(Calendar.YEAR, year + 1);
//        endFinYearCal.add(Calendar.DATE, -1);
        String sstartFinYearCal = authHandler.getDateOnlyFormat().format(startFinYearCal.getTime());
        String sendFinYearCal = authHandler.getDateOnlyFormat().format(endFinYearCal.getTime());
        try {
            startEndDateHashMap.put("startDate", authHandler.getDateOnlyFormat().parse(sstartFinYearCal));
        } catch (ParseException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            startEndDateHashMap.put("endDate", authHandler.getDateOnlyFormat().parse(sendFinYearCal));
        } catch (ParseException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return startEndDateHashMap;
    }
    
    public double getAccountsAmountFromSavedData(String accountId, Account account, int year, boolean ytdFlag) throws ServiceException, SessionExpiredException {
        List closingAccountBalanceResultList = new ArrayList();
        if (ytdFlag) {
            KwlReturnObject closingAccountBalanceResult = accJournalEntryobj.getClosingAccountBalanceYTD(accountId, account.getCompany().getCompanyID());
            closingAccountBalanceResultList = closingAccountBalanceResult.getEntityList();
        } else {
            KwlReturnObject closingAccountBalanceResult = accJournalEntryobj.getClosingAccountBalance(accountId, account.getCompany().getCompanyID(), year);
            closingAccountBalanceResultList = closingAccountBalanceResult.getEntityList();
        }
        double amount = 0;
        List closingAccountBalanceList = closingAccountBalanceResultList;
        if (!closingAccountBalanceList.isEmpty()) {
            ClosingAccountBalance closingAccountBalance = (ClosingAccountBalance) closingAccountBalanceList.get(0);
            amount += closingAccountBalance.getAmount();
        }
        return amount;
    }
       
    @Override
    @Deprecated
    public double[] getTrading(JSONObject paramJObj, int nature, JSONArray jArr, boolean isProfitLoss, Map<String, Object> advSearchAttributes) throws ServiceException, SessionExpiredException, JSONException {
        double[] total = {0, 0, 0, 0, 0, 0};
        try {
            String companyid = paramJObj.getString(Constants.companyKey);
            boolean isCostOfGoodsSold = false;
            if (paramJObj.optString("isCostOfGoodsSold", null) != null) {
                isCostOfGoodsSold = Boolean.parseBoolean(paramJObj.optString("isCostOfGoodsSold"));
            }
            boolean isForTradingAndProfitLoss = false;
            if ((paramJObj.optString("isForTradingAndProfitLoss", null) != null)) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(paramJObj.optString("isForTradingAndProfitLoss"));
            }
            KwlReturnObject plresult = accAccountDAOobj.getGroupForProfitNloss(companyid, nature, true, isForTradingAndProfitLoss, isCostOfGoodsSold);
            List<Group> list = plresult.getEntityList();
            Date startDate = null;
            Date endDate = null;
            if (paramJObj.optString("netProfitClosesFlag", null) != null && (Boolean) paramJObj.get("netProfitClosesFlag")) {
                startDate = authHandler.getDateOnlyFormat().parse(paramJObj.optString("stdate"));
                endDate = authHandler.getDateOnlyFormat().parse(paramJObj.optString("enddate"));
            } else if (paramJObj.optString("jasperreport", null) != null && paramJObj.optString("jasperreport").equals("JasperReport")) {
                startDate = (Date) paramJObj.get("jaspersdate");
                endDate = (Date) paramJObj.get("jasperenddate");
            } else if (isProfitLoss) {
                startDate = (Date) paramJObj.get("startDate");
                endDate = (Date) paramJObj.get("endDate");
            } else {
                startDate = authHandler.getDateOnlyFormat().parse(paramJObj.optString("stdate"));
                endDate = authHandler.getDateOnlyFormat().parse(paramJObj.optString("enddate"));
            }
            if (paramJObj.optString("closingFilterFlag", null) != null && (Boolean) paramJObj.get("closingFilterFlag")) {
                startDate = (Date) paramJObj.get("closingStartDate");
                endDate = (Date) paramJObj.get("closingEndDate");
            }
            Date startPreDate = null;
            Date endPreDate = null;
            if (!StringUtil.isNullOrEmpty(paramJObj.optString("stpredate", null)) && !StringUtil.isNullOrEmpty(paramJObj.optString("endpredate", null))) {
                startPreDate = authHandler.getDateOnlyFormat().parse(paramJObj.optString("stpredate"));
                endPreDate = authHandler.getDateOnlyFormat().parse(paramJObj.optString("endpredate"));
            }
            for (Group group : list) {
//                double[] tempTotal = formatGroupDetails(request, companyid, group, startDate, endDate, 0, false, jArr, startPreDate, endPreDate);
                double[] tempTotal = formatGroupDetails(paramJObj, companyid, group, startDate, endDate, 0, false, jArr, startPreDate, endPreDate,advSearchAttributes);
                total[0] += tempTotal[0];
                total[1] += tempTotal[1];
                total[2] += tempTotal[2];
                total[3] += tempTotal[3];
                total[4] += tempTotal[4];
                total[5] += tempTotal[5];
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getTrading : " + ex.getMessage(), ex);
        }
        return total;
    }
    
    @Deprecated
    public double[] getTrading(HttpServletRequest request, int nature, JSONArray jArr, HashMap<String, List<Account>> accountGroupMap,boolean isProfitLoss, Map<String, Object> advSearchAttributes) throws ServiceException, SessionExpiredException {
        double[] total = {0,0,0,0,0,0};
        try {
            String companyid = "";
            boolean isConsolidationBS = request.getAttribute("consolidationBS")!=null?Boolean.FALSE.parseBoolean(request.getAttribute("consolidationBS").toString()):false;
            if(isConsolidationBS && request.getAttribute("consolidationCompanyID") != null){
                companyid = request.getAttribute("consolidationCompanyID").toString();
            } else{
                companyid = sessionHandlerImpl.getCompanyid(request);
            }
            boolean isCostOfGoodsSold = false;
            if (request.getAttribute("isCostOfGoodsSold") != null) {
                isCostOfGoodsSold = Boolean.parseBoolean(request.getAttribute("isCostOfGoodsSold").toString());
            }
            boolean isForTradingAndProfitLoss = false;
            if ((request.getAttribute("isForTradingAndProfitLoss") != null)) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(request.getAttribute("isForTradingAndProfitLoss").toString());
            }
            KwlReturnObject plresult = accAccountDAOobj.getGroupForProfitNloss(companyid, nature, true,isForTradingAndProfitLoss,isCostOfGoodsSold);
            List<Group> list = plresult.getEntityList();
            Date startDate=null;
            Date endDate=null;
            if(request.getAttribute("netProfitClosesFlag")!=null&&(Boolean)request.getAttribute("netProfitClosesFlag"))
            {
                startDate=authHandler.getDateOnlyFormat().parse(request.getAttribute("stdate").toString());
                endDate=authHandler.getDateOnlyFormat().parse(request.getAttribute("enddate").toString());
            }else if(request.getAttribute("jasperreport")!=null && request.getAttribute("jasperreport").equals("JasperReport")) {                                
                startDate=(Date)request.getAttribute("jaspersdate");
                endDate=(Date)request.getAttribute("jasperenddate");
            }else if(isProfitLoss){
                startDate=(Date)request.getAttribute("startDate");
                endDate=(Date)request.getAttribute("endDate");
            }else{
                startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
                endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            }
            if(request.getAttribute("closingFilterFlag")!=null&&(Boolean)request.getAttribute("closingFilterFlag")){
                startDate=(Date)request.getAttribute("closingStartDate");
                endDate=(Date)request.getAttribute("closingEndDate");
            }
            Date startPreDate=null;
            Date endPreDate=null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stpredate")) && !StringUtil.isNullOrEmpty(request.getParameter("endpredate"))) {
                startPreDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stpredate"));
                endPreDate = authHandler.getDateOnlyFormat().parse(request.getParameter("endpredate"));
            }
            
            for (Group group : list) {
                double[] tempTotal=formatGroupDetails(request, companyid, group, startDate, endDate, 0, false, jArr,startPreDate,endPreDate, accountGroupMap,advSearchAttributes);
                total[0] += tempTotal[0];
                total[1] += tempTotal[1];
                total[2] += tempTotal[2];
                total[3] += tempTotal[3];
                total[4] += tempTotal[4];
                total[5] += tempTotal[5];
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getTrading : "+ex.getMessage(), ex);
        }
        return total;
    }
    
    @Override
    @Deprecated
    public double[] getProfitLoss(JSONObject paramJObj, int nature, JSONArray jArr, boolean isProfitLoss, Map<String, Object> advSearchAttributes) throws ServiceException, SessionExpiredException, JSONException {
        double total[] = {0, 0, 0, 0, 0, 0};
        try {
            String companyid = paramJObj.getString(Constants.companyKey);
            boolean isCostOfGoodsSold = false;
            if (paramJObj.optString("isCostOfGoodsSold", null) != null) {
                isCostOfGoodsSold = Boolean.parseBoolean(paramJObj.optString("isCostOfGoodsSold"));
            }
            boolean isForTradingAndProfitLoss = false;
            if ((paramJObj.optString("isForTradingAndProfitLoss", null) != null)) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(paramJObj.optString("isForTradingAndProfitLoss"));
            }
            KwlReturnObject plresult = accAccountDAOobj.getGroupForProfitNloss(companyid, nature, false, isForTradingAndProfitLoss, isCostOfGoodsSold);
            List list = plresult.getEntityList();
            Iterator itr = list.iterator();

            Date startDate = null;
            Date endDate = null;
            if (paramJObj.optString("netProfitClosesFlag", null) != null && (Boolean) paramJObj.get("netProfitClosesFlag")) {
                startDate = authHandler.getDateOnlyFormat().parse(paramJObj.optString("stdate"));
                endDate = authHandler.getDateOnlyFormat().parse(paramJObj.optString("enddate"));
            } else if (paramJObj.optString("jasperreport", null) != null && paramJObj.optString("jasperreport").equals("JasperReport")) {
                startDate = (Date) paramJObj.get("jaspersdate");
                endDate = (Date) paramJObj.get("jasperenddate");
            } else if (isProfitLoss) {
                startDate = (Date) paramJObj.get("startDate");
                endDate = (Date) paramJObj.get("endDate");
            } else {
                startDate = authHandler.getDateOnlyFormat().parse(paramJObj.optString("stdate"));
                endDate = authHandler.getDateOnlyFormat().parse(paramJObj.optString("enddate"));
            }
            if (paramJObj.optString("closingFilterFlag",null) != null && (Boolean) paramJObj.get("closingFilterFlag")) {
                startDate = (Date) paramJObj.get("closingStartDate");
                endDate = (Date) paramJObj.get("closingEndDate");
            }
            Date startPreDate = null;
            Date endPreDate = null;
            if (!StringUtil.isNullOrEmpty(paramJObj.optString("stpredate", null))) {
                startPreDate = authHandler.getDateOnlyFormat().parse(paramJObj.optString("stpredate"));
            }
            if (!StringUtil.isNullOrEmpty(paramJObj.optString("endpredate", null))) {
                endPreDate = authHandler.getDateOnlyFormat().parse(paramJObj.optString("endpredate"));
            }

            while (itr.hasNext()) {
                Group group = (Group) itr.next();
//                double[] tempTotal = formatGroupDetails(request, companyid, group, startDate, endDate, 0, false, jArr, startPreDate, endPreDate);
                double[] tempTotal = formatGroupDetails(paramJObj, companyid, group, startDate, endDate, 0, false, jArr, startPreDate, endPreDate,advSearchAttributes);
//                total += formatGroupDetails(session, request, AuthHandler.getCompanyid(request), group, startDate, endDate, 0, false, jArr);
                total[0] += tempTotal[0];
                total[1] += tempTotal[1];
                total[2] += tempTotal[2];
                total[3] += tempTotal[3];
                total[4] += tempTotal[4];
                total[5] += tempTotal[5];
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getProfitLoss : " + ex.getMessage(), ex);
        }
        return total;
    }
    public double[] getProfitLossAllAccounts(JSONObject paramJObj, int nature, JSONArray jArr, boolean isProfitLoss, Map<String, Double> accAmtMap, Map<String, Object> extraObjects) throws ServiceException, SessionExpiredException, JSONException {
        double total[] ={0,0,0,0,0,0};
        try {
            String companyid = paramJObj.getString(Constants.companyKey);
            boolean isCostOfGoodsSold = false;
            if (paramJObj.optString("isCostOfGoodsSold", null) != null) {
                isCostOfGoodsSold = Boolean.parseBoolean(paramJObj.optString("isCostOfGoodsSold"));
            }
            boolean isForTradingAndProfitLoss = false;
            if ((paramJObj.optString("isForTradingAndProfitLoss", null) != null)) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(paramJObj.optString("isForTradingAndProfitLoss"));
            }
            KwlReturnObject plresult = accAccountDAOobj.getGroupForProfitNloss(companyid, nature, false, isForTradingAndProfitLoss, isCostOfGoodsSold);
            List list = plresult.getEntityList();
            Iterator itr = list.iterator();

            while (itr.hasNext()) {
                Group group = (Group) itr.next();
                double[] tempTotal = populateGroupDetailsAllAccount(paramJObj, group, 0, false, jArr, accAmtMap, extraObjects);
                total[0] += tempTotal[0];
                total[1] += tempTotal[1];
                total[2] += tempTotal[2];
                total[3] += tempTotal[3];
                total[4] += tempTotal[4];
                total[5] += tempTotal[5];
//             
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getProfitLossAllAccounts : " + ex.getMessage(), ex);
        }
        return total;
    }
    
    public double[] getProfitLoss(HttpServletRequest request, int nature, JSONArray jArr, HashMap<String, List<Account>> accountGroupMap,boolean isProfitLoss, Map<String, Object> advSearchAttributes) throws ServiceException, SessionExpiredException {
        double total[] ={0,0,0,0,0,0};
        try {            
            String companyid = "";
            boolean isConsolidationBS = request.getAttribute("consolidationBS")!=null?Boolean.FALSE.parseBoolean(request.getAttribute("consolidationBS").toString()):false;
            if(isConsolidationBS && request.getAttribute("consolidationCompanyID") != null){
                companyid = request.getAttribute("consolidationCompanyID").toString();
            } else{
                companyid = sessionHandlerImpl.getCompanyid(request);
            }
            boolean isCostOfGoodsSold = false;
            if (request.getAttribute("isCostOfGoodsSold") != null) {
                isCostOfGoodsSold = Boolean.parseBoolean(request.getAttribute("isCostOfGoodsSold").toString());
            }
            boolean isForTradingAndProfitLoss = false;
            if ((request.getAttribute("isForTradingAndProfitLoss") != null)) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(request.getAttribute("isForTradingAndProfitLoss").toString());
            }
            KwlReturnObject plresult = accAccountDAOobj.getGroupForProfitNloss(companyid, nature, false, isForTradingAndProfitLoss, isCostOfGoodsSold);
            List list = plresult.getEntityList();
            Iterator itr = list.iterator();

            Date startDate=null;
            Date endDate=null;
            if(request.getAttribute("netProfitClosesFlag")!=null&&(Boolean)request.getAttribute("netProfitClosesFlag"))
            {
                startDate=authHandler.getDateOnlyFormat().parse(request.getAttribute("stdate").toString());
                endDate=authHandler.getDateOnlyFormat().parse(request.getAttribute("enddate").toString());
            }else if(request.getAttribute("jasperreport")!=null && request.getAttribute("jasperreport").equals("JasperReport")) {                                  
                startDate=(Date)request.getAttribute("jaspersdate");
                endDate=(Date)request.getAttribute("jasperenddate");
            }else if(isProfitLoss){
                startDate=(Date)request.getAttribute("startDate");
                endDate=(Date)request.getAttribute("endDate");
            }else{
                startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
                endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            }
            if(request.getAttribute("closingFilterFlag")!=null&&(Boolean)request.getAttribute("closingFilterFlag")){
                startDate=(Date)request.getAttribute("closingStartDate");
                endDate=(Date)request.getAttribute("closingEndDate");            }
            Date startPreDate = null;
            Date endPreDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stpredate"))) {
                startPreDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stpredate"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("endpredate"))) {
                endPreDate = authHandler.getDateOnlyFormat().parse(request.getParameter("endpredate"));
            }
            while (itr.hasNext()) {
                Group group = (Group) itr.next();

                double[] tempTotal = formatGroupDetails(request, companyid, group, startDate, endDate, 0, false, jArr, startPreDate, endPreDate, accountGroupMap,advSearchAttributes);
//                total += formatGroupDetails(session, request, AuthHandler.getCompanyid(request), group, startDate, endDate, 0, false, jArr);
                total[0] += tempTotal[0];
                total[1] += tempTotal[1];
                total[2] += tempTotal[2];
                total[3] += tempTotal[3];
                total[4] += tempTotal[4];
                total[5] += tempTotal[5];
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getProfitLoss : " + ex.getMessage(), ex);
        }
        return total;
    }
    
    
    @Override
    public double getAccountBalanceMerged(HttpServletRequest request, String accountid, Date startDate, Date endDate, boolean eliminateflag) throws ServiceException, SessionExpiredException {
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put("costcenter", request.getParameter("costcenter"));
         requestParams.put(Constants.Acc_Search_Json ,request.getParameter(Constants.Acc_Search_Json));
         requestParams.put(Constants.Filter_Criteria ,request.getParameter(InvoiceConstants.Filter_Criteria));
       //  requestParams.put(Constants.moduleid ,"100");
        return getAccountClosingBalanceMerged(request,requestParams, accountid, startDate, endDate, eliminateflag);
    }

    @Override
    public double getAccountBalanceMerged(HttpServletRequest request, HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate, boolean eliminateflag) throws ServiceException {
        double amount = 0;
        try {
            JSONObject requestJobj = StringUtil.convertRequestToJsonObject(request);
            amount = getAccountBalanceMerged(requestJobj, requestParams, accountid, startDate, endDate, eliminateflag);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalance : " + ex.getMessage(), ex);
        }
        return amount;
    }

    public double getAccountBalanceMerged(JSONObject requestJobj, HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate, boolean eliminateflag) throws ServiceException {
        double amount = 0;
        String companyid = "";
        try {
            companyid = requestJobj.optString("companyid");
            String currencyid = (String) requestParams.get(Constants.globalCurrencyKey);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountid);
            Account account = (Account) accresult.getEntityList().get(0);

            String costCenterId = (String)requestParams.get("costcenter");
            if(StringUtil.isNullOrEmpty(costCenterId)){ //Don't consider opening balance for CostCenter
                if(startDate!=null && ((startDate.before(account.getCreationDate()) || startDate.equals(account.getCreationDate())) && endDate.after(account.getCreationDate()) || endDate.equals(account.getCreationDate()))  ){
                    double accountOpeningBalance = accInvoiceCommon.getOpeningBalanceOfAccountJson(requestJobj, account,false,null);
//                    KwlReturnObject result = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams,accountOpeningBalance,account.getCurrency().getCurrencyID(),account.getCreationDate(),0);
                    amount = authHandler.round(accountOpeningBalance, companyid);//(Double) result.getEntityList().get(0);
                } 
                
            }
            String Searchjson = "";
            
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                if (requestParams.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }            
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = requestParams.get("searchJson").toString();
            }
            if(StringUtil.isNullOrEmpty(Searchjson) && account.getCompany().isOptimizedflag() && !eliminateflag) {
                KwlReturnObject abresult = accJournalEntryobj.getAccountBalance_optimized(accountid, startDate, endDate, costCenterId);
                List list = abresult.getEntityList();
                if(list.size() > 0 && list.get(0) != null) {
                    amount += authHandler.round((Double) list.get(0), companyid);
                }
            } else {
                KwlReturnObject abresult = accJournalEntryobj.getAccountBalanceMerged(accountid, startDate, endDate, costCenterId, eliminateflag, filterConjuctionCriteria, Searchjson);
                List list = abresult.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    Object[] row = (Object[]) itr.next();
                    JournalEntryDetail jed = (JournalEntryDetail) row[1];
                    String fromcurrencyid = (jed.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : jed.getJournalEntry().getCurrency().getCurrencyID());
    //            amount += CompanyHandler.getCurrencyToBaseAmount(session, request, ((Double) row[0]).doubleValue(), fromcurrencyid, jed.getJournalEntry().getEntryDate());
                    KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ((Double) row[0]).doubleValue(), fromcurrencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                    amount += authHandler.round((Double) crresult.getEntityList().get(0), companyid);
                }
                if (itr.hasNext()) {
                    amount += authHandler.round(((Double) itr.next()).doubleValue(), companyid);
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalance : "+ex.getMessage(), ex);
        }
        return authHandler.round(amount, companyid);
    }
    
    
    @Override
     public double getAccountClosingBalanceMerged(HttpServletRequest request, HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate, boolean eliminateflag) throws ServiceException {
         double amount = 0;
         String companyid = "";
        try {
            companyid = sessionHandlerImpl.getCompanyid(request);
            amount=getAccountBalanceMerged(request,requestParams, accountid, startDate, endDate, eliminateflag);
            } catch (Exception ex) {
                throw ServiceException.FAILURE("getAccountBalance : "+ex.getMessage(), ex);
            }
        return authHandler.round(amount, companyid);
     }
    
    
    @Override
    public double getAccountBalanceDateWiseMerged(HttpServletRequest request, Account account, Date startDate, Date endDate,boolean  ytdFlag, boolean eliminateflag,HashMap<String,Double> openPeriodAmounts) throws ServiceException, SessionExpiredException {
        double amount = 0;
        try {
            Calendar cal = Calendar.getInstance();
            cal.setTime(account.getCreationDate());

            String companyid = sessionHandlerImpl.getCompanyid(request);
            //Added timzone code : Issue of account display having same creation and start date
            Date creationDate1 = account.getCreationDate();
            DateFormat sdf = authHandler.getDateOnlyFormat();
            Date creationDate = authHandler.getDateOnlyFormat().parse(sdf.format(creationDate1));

            String filterConjuctionCriteria = request.getParameter("filterConjuctionCriteria") != null ? request.getParameter("filterConjuctionCriteria") : "";
            String Searchjson = request.getParameter("searchJson") != null ? request.getParameter("searchJson") : "";
            if (request.getAttribute("DimensionBasedComparisionReport") != null && request.getAttribute("DimensionBasedComparisionReport").equals("DimensionBasedComparisionReport")) {
                Searchjson = request.getAttribute("DimensionBasedSearchJson").toString();
            }
            boolean isKnockOffAdvancedSearch = false;
            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                isKnockOffAdvancedSearch = fieldManagerDAOobj.isKnockOffAdvancedSearch(Searchjson, companyid);
            }
            request.setAttribute("filterConjuctionCriteria",filterConjuctionCriteria);
            request.setAttribute("Searchjson", Searchjson);
               
            if(ytdFlag)//getting Account Balance For YTD
            {
//                if ((creationDate.after(startDate) || creationDate.equals(startDate)) && creationDate.before(endDate) && !(eliminateflag && account.isEliminateflag())) {
                if ((creationDate.after(startDate) || creationDate.equals(startDate)) && (creationDate.before(endDate) || creationDate.equals(endDate)) && !(eliminateflag && account.isEliminateflag())) {
                    double accountOpeningBalance = accInvoiceCommon.getOpeningBalanceOfAccount(request, account, false, null);
                    amount = accountOpeningBalance;//(Double) crresult.getEntityList().get(0);
                    if (openPeriodAmounts != null) {
                        if (openPeriodAmounts.containsKey("openingBalance")) {
                            double previousOpeningAmount = openPeriodAmounts.get("openingBalance");
                            openPeriodAmounts.put("openingBalance", previousOpeningAmount + accountOpeningBalance);
                        } else {
                            openPeriodAmounts.put("openingBalance", accountOpeningBalance);
                        }
                    }
                }
            } else {
                if ((creationDate.after(startDate) || creationDate.equals(startDate)) && (creationDate.before(endDate) || creationDate.equals(endDate)) && !(eliminateflag && account.isEliminateflag())) {
                    //Added "creationDate.equals(endDate)" check to consider opening balance amount for Account whose creation Date & Report end date is same. [TimeZone Changes] 
                    double accountOpeningBalance = accInvoiceCommon.getOpeningBalanceOfAccount(request, account, false, null);
                    amount = accountOpeningBalance;//(Double) crresult.getEntityList().get(0);
                    if (openPeriodAmounts != null) {
                        if (openPeriodAmounts.containsKey("openingBalance")) {
                            double previousOpeningAmount = openPeriodAmounts.get("openingBalance");
                            openPeriodAmounts.put("openingBalance", previousOpeningAmount + accountOpeningBalance);
                        } else {
                            openPeriodAmounts.put("openingBalance", accountOpeningBalance);
                        }
                    }
                }
            }
 
            request.removeAttribute("filterConjuctionCriteria");
            request.removeAttribute("Searchjson");
 
            String costCenterId = "";
            
            double periodBalance = 0.0, d_period = 0.0, c_period = 0.0;
            if(account.getCompany().isOptimizedflag() && !eliminateflag) {
                KwlReturnObject abresult = accJournalEntryobj.getAccountBalance_optimized(account.getID(), startDate, endDate, costCenterId);
                List list = abresult.getEntityList();
                if(list.size() > 0 && list.get(0) != null) {
                    amount += authHandler.round((Double) list.get(0), companyid);
                    periodBalance+= authHandler.round((Double) list.get(0), companyid);
                }
            } else {
                KwlReturnObject abresult = accJournalEntryobj.getAccountBalanceMergedAmount(account.getID(), startDate, endDate, costCenterId, eliminateflag, filterConjuctionCriteria, Searchjson, null , isKnockOffAdvancedSearch,companyid);
                List list = abresult.getEntityList();
                if(list.get(0) != null){
                    amount += authHandler.round(((Double)list.get(0)).doubleValue(), companyid);
                    periodBalance += authHandler.round(((Double) list.get(0)).doubleValue(), companyid);
                }
                /* Period Debit Balance */
                abresult = accJournalEntryobj.getAccountBalanceMergedAmount(account.getID(), startDate, endDate, costCenterId, eliminateflag, filterConjuctionCriteria, Searchjson, true, isKnockOffAdvancedSearch,companyid);
                list = abresult.getEntityList();
                if (list.get(0) != null) {
                    d_period += authHandler.round(((Double) list.get(0)).doubleValue(), companyid);
                }
                /* Period Credit Balance */
                abresult = accJournalEntryobj.getAccountBalanceMergedAmount(account.getID(), startDate, endDate, costCenterId, eliminateflag, filterConjuctionCriteria, Searchjson, false, isKnockOffAdvancedSearch,companyid);
                list = abresult.getEntityList();
                if (list.get(0) != null) {
                    c_period += authHandler.round(((Double) list.get(0)).doubleValue(), companyid);
                    c_period = c_period * (-1);
                }
                if (openPeriodAmounts != null) {
                    if (openPeriodAmounts.containsKey("d_period")) {
                        double previous_d_period = openPeriodAmounts.get("d_period");
                        openPeriodAmounts.put("d_period", previous_d_period + d_period);
                    } else {
                        openPeriodAmounts.put("d_period", d_period);
                    }
                    if (openPeriodAmounts.containsKey("c_period")) {
                        double previous_c_period = openPeriodAmounts.get("c_period");
                        openPeriodAmounts.put("c_period", previous_c_period + c_period);
                    } else {
                        openPeriodAmounts.put("c_period", c_period);
                    }
                }
            }
            if(openPeriodAmounts!=null){
                if(openPeriodAmounts.containsKey("periodBalance")){
                            double previousPeriodAmount=openPeriodAmounts.get("periodBalance");
                            openPeriodAmounts.put("periodBalance", previousPeriodAmount+periodBalance);
                        }else{
                            openPeriodAmounts.put("periodBalance", periodBalance);
                        }
            }   
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalanceDateWise : "+ex.getMessage(), ex);
        }
        return amount;
    }
    

    public double getAccountBalanceDateWiseMerged(JSONObject paramJobj, Account account, Date startDate, Date endDate, boolean ytdFlag, boolean eliminateflag, HashMap<String, Double> openPeriodAmounts) throws ServiceException, SessionExpiredException {
        double amount = 0;
        try {
            Calendar cal = Calendar.getInstance();
            cal.setTime(account.getCreationDate());

            String companyid = (String) paramJobj.get("companyid");
            //Added timzone code : Issue of account display having same creation and start date
            Date creationDate1 = account.getCreationDate();
            DateFormat sdf = authHandler.getDateOnlyFormat();
            Date creationDate = authHandler.getDateOnlyFormat().parse(sdf.format(creationDate1));

            String filterConjuctionCriteria = paramJobj.optString("filterConjuctionCriteria", "");
            String Searchjson = paramJobj.optString("searchJson", "");
            if (paramJobj.optString("DimensionBasedComparisionReport", "").equals("DimensionBasedComparisionReport")) {
                Searchjson = paramJobj.optString("DimensionBasedComparisionReport", "");
            }
            paramJobj.put("filterConjuctionCriteria", filterConjuctionCriteria);
            paramJobj.put("Searchjson", Searchjson);
            if ((creationDate.after(startDate) || creationDate.equals(startDate)) && (creationDate.before(endDate) || creationDate.equals(endDate)) && !(eliminateflag && account.isEliminateflag())) {
                double accountOpeningBalance = accInvoiceCommon.getOpeningBalanceOfAccountJson(paramJobj, account, false, null);
                amount = accountOpeningBalance;//(Double) crresult.getEntityList().get(0);
                if (openPeriodAmounts != null) {
                    if (openPeriodAmounts.containsKey("openingBalance")) {
                        double previousOpeningAmount = openPeriodAmounts.get("openingBalance");
                        openPeriodAmounts.put("openingBalance", previousOpeningAmount + accountOpeningBalance);
                    } else {
                        openPeriodAmounts.put("openingBalance", accountOpeningBalance);
                    }
                }
            }
            paramJobj.remove("filterConjuctionCriteria");
            paramJobj.remove("Searchjson");

            String costCenterId = "";

            double periodBalance = 0.0;
            if (account.getCompany().isOptimizedflag() && !eliminateflag) {
                KwlReturnObject abresult = accJournalEntryobj.getAccountBalance_optimized(account.getID(), startDate, endDate, costCenterId);
                List list = abresult.getEntityList();
                if (list.size() > 0 && list.get(0) != null) {
                    amount += authHandler.round((Double) list.get(0), companyid);
                    periodBalance += authHandler.round((Double) list.get(0), companyid);
                }
            } else {
                KwlReturnObject abresult = accJournalEntryobj.getAccountBalanceMergedAmount(account.getID(), startDate, endDate, costCenterId, eliminateflag, filterConjuctionCriteria, Searchjson, null,null,companyid);
                List list = abresult.getEntityList();
                if (list.get(0) != null) {

                    amount += authHandler.round(((Double) list.get(0)).doubleValue(), companyid);
                    periodBalance += authHandler.round(((Double) list.get(0)).doubleValue(), companyid);
                }
            }
            if (openPeriodAmounts != null) {
                if (openPeriodAmounts.containsKey("periodBalance")) {
                    double previousPeriodAmount = openPeriodAmounts.get("periodBalance");
                    openPeriodAmounts.put("periodBalance", previousPeriodAmount + periodBalance);
                } else {
                    openPeriodAmounts.put("periodBalance", periodBalance);
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalanceDateWise : " + ex.getMessage(), ex);
        }
        return amount;
    }

    @Override
    public void generateIBGFile(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, ServiceException, AccountingException {
        try {
            java.io.ByteArrayOutputStream baos = new ByteArrayOutputStream();
            String accCompanyId = sessionHandlerImpl.getCompanyid(request);
            String payments = request.getParameter("payments");
            String valueDate = request.getParameter("valueDate");
            String generationDate = request.getParameter("genDate");                      
            String[] paymentIds = payments.split(",");
            
            if(paymentIds.length>24000){
                throw new AccountingException("Records count is greater than 24000. so GIRO File cannot be generate.");
            }

            String ibgBankAccountId = request.getParameter("accountId");

            KwlReturnObject accResult = accountingHandlerDAOobj.getObject(Account.class.getName(), ibgBankAccountId);
            Account originator = (Account) accResult.getEntityList().get(0);
            
            if (!originator.isIBGBank()) {
                throw new AccountingException("Bank is not IBG Type");
            }            
            
            HashMap<String, Object> ibgMap = new HashMap<String, Object>();
            ibgMap.put("companyId", accCompanyId);
            ibgMap.put("bankAccountId", originator.getID());
            
            KwlReturnObject ibgBankDetailsObj = accAccountDAOobj.getIBGBankDetails(ibgMap);
            
            IBGBankDetails bankDetails = (IBGBankDetails) ibgBankDetailsObj.getEntityList().get(0);                     
            
            int origBankNumber = Integer.parseInt(bankDetails.getBankCode());
            String origBranchNumber = bankDetails.getBranchCode();//
            String origAccountNumber = bankDetails.getAccountNumber();
            String origAccountName = bankDetails.getAccountName();
            Integer messageSequenceNumber = accVendorPaymentobj.getSequenceNumberForGiro(accCompanyId);
            String companyID = bankDetails.getSendersCompanyID();
            
            String fileName = companyID + " " + generationDate + "_" + messageSequenceNumber;

            String giroFileContent = "";

            giroFileContent += createControlRecordDBS(valueDate, origBankNumber, origBranchNumber, origAccountNumber, origAccountName, messageSequenceNumber, companyID);

            String adviceRecords = "";

            Integer totalAmount = 0;

            Long totalHashAmount = 0l;

            Integer numberofTransactions = 0;

            for (int i = 0; i < paymentIds.length; i++) {

                String paymentId = paymentIds[i];

                KwlReturnObject payResult = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                Payment payment = (Payment) payResult.getEntityList().get(0);

                String adviceRecord = createAdviceRecordsDBS(payment, origAccountNumber, accCompanyId);
                
                IBGReceivingBankDetails receivingBankDetails = payment.getIbgreceivingbankdetails();

                adviceRecords += adviceRecord;
                
                Integer paymentAmount = getPaymentAmount(payment, accCompanyId);
                
                totalAmount += paymentAmount;//payment amount

                Long origAccountNumberSplit = splitACNumber(origAccountNumber);

                Long recvAccountNumberSplit = splitACNumber(receivingBankDetails.getReceivingAccountNumber());// ask to kiran

                totalHashAmount += Math.abs(recvAccountNumberSplit - origAccountNumberSplit);

                numberofTransactions++;
            }

            adviceRecords += createSummaryRecordsDBS(numberofTransactions, totalAmount, totalHashAmount);
            giroFileContent+=adviceRecords;

            String ext = Constants.GiroFileExtension;

            baos.write(giroFileContent.getBytes());
            response.setHeader("Content-Disposition", "attachment; filename=\"" + fileName+ ext+ "\"");
            response.setContentType("application/octet-stream");
            response.setContentLength(baos.size());
            response.getOutputStream().write(baos.toByteArray());
            response.getOutputStream().flush();
            response.getOutputStream().close();
            
            saveGIROFileGenerationLog(companyID, fileName, "", origAccountName, "", messageSequenceNumber, accCompanyId);

            // update flag for payments that for those payments GIRO File has been generated
            
            updatePayment(paymentIds, accCompanyId); 
            
        } catch (IOException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("generateIBGFile : " + ex.getMessage(), ex);
        } catch (ServiceException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("generateIBGFile : " + ex.getMessage(), ex);
        }
    }
    
     @Override
    public void updatePayment(String[] paymentIds, String accCompanyId) throws ServiceException {
        KwlReturnObject result = null;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Vendor_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            int totalRowsUpdated = 0;

            for (String paymentId : paymentIds) {
                KwlReturnObject returnObject = accVendorPaymentobj.updatePaymentsIBGFlag(accCompanyId, paymentId);
                totalRowsUpdated+=(Integer) returnObject.getEntityList().get(0);
            }
            txnManager.commit(status);
        } catch (Exception ex) {
            txnManager.rollback(status);
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("AccReportsServiceImpl : updatePayment" + ex.getMessage(), ex);
        }
    }
    
    private Integer getPaymentAmount(Payment payment, String companyid) throws ServiceException {
        
        /*
            * If you are modifying in this method then you will need to modify on
            *  accVendorPaymentController.java - getPaymentsJson() method
            */

        Integer retAmt = 0;

        double amount = 0;

        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();

        HashMap<String, Object> rRequestParams = new HashMap<String, Object>();

        filter_names.add("payment.ID");

        filter_params.add(payment.getID());

        rRequestParams.put("filter_names", filter_names);

        rRequestParams.put("filter_params", filter_params);

        KwlReturnObject pdoresult = accVendorPaymentobj.getPaymentDetailOtherwise(rRequestParams);

        List<PaymentDetailOtherwise> list1 = pdoresult.getEntityList();

        Iterator pdoRow = list1.iterator();

        Iterator itrRow = payment.getRows().iterator();

        if (!payment.getRows().isEmpty()) {

            while (itrRow.hasNext()) {
                amount += ((PaymentDetail) itrRow.next()).getAmount();
            }

        } else if (pdoRow != null && list1.size() > 0) {

            for (PaymentDetailOtherwise paymentDetailOtherwise : list1) {

                if (payment.getID().equals(paymentDetailOtherwise.getPayment().getID())) {

                    if (payment.isIsmanydbcr()) {

                        if (paymentDetailOtherwise.isIsdebit()) {
                            amount += Double.parseDouble(authHandler.formattedAmount((paymentDetailOtherwise.getAmount() + paymentDetailOtherwise.getTaxamount()), companyid));
                        } else {
                            amount -= Double.parseDouble(authHandler.formattedAmount((paymentDetailOtherwise.getAmount() + paymentDetailOtherwise.getTaxamount()), companyid));
                        }

                    } else {
                        amount = amount + Double.parseDouble(authHandler.formattedAmount((paymentDetailOtherwise.getAmount() + paymentDetailOtherwise.getTaxamount()), companyid));
                    }
                }
            }
        } else {

            itrRow = payment.getJournalEntry().getDetails().iterator();

            while (itrRow.hasNext()) {

                JournalEntryDetail jed = ((JournalEntryDetail) itrRow.next());

                if (!jed.isDebit()) {

                    if (payment.getDeposittoJEDetail() != null) {
                        amount = payment.getDeposittoJEDetail().getAmount();
                    } else {
                        amount = jed.getAmount();
                    }
                }
            }
        }

        retAmt = new Double(amount).intValue();

        return retAmt;
    }
    
    
    private KwlReturnObject saveGIROFileGenerationLog(String companyid, String filename, String logstatus, String bank, String comments, Integer seqNumber, String accCompanyId) {
        KwlReturnObject result = null;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Vendor_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            String rule = "";
            HashMap<String, Object> qdDataMap = new HashMap<String, Object>();
            qdDataMap.put("filename", filename);
            qdDataMap.put("status", logstatus);
            qdDataMap.put(Constants.companyKey, companyid);
            qdDataMap.put("accCompanyId", accCompanyId);
            qdDataMap.put("bank", bank);
            qdDataMap.put("comments", comments);
            qdDataMap.put("sequencenumber", seqNumber);

            result = accVendorPaymentobj.saveGIROFileGenerationLog(qdDataMap);
            txnManager.commit(status);
        } catch (Exception ex) {
            txnManager.rollback(status);
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            return result;
        }
    }
    
    public String createSummaryRecordsDBS(Integer numberofTransactions,Integer totalAmount, Long totalHashAmount){
        String summaryRecord = "";
        
        summaryRecord += rightAdjustFill(numberofTransactions.toString(), "0", 8);
        
        summaryRecord += rightAdjustFill(totalAmount.toString(), "0", 11);
        
        summaryRecord = leftAdjustFill(summaryRecord, " ", 24);
        
        summaryRecord += rightAdjustFill("0", "0", 8);
        
        summaryRecord += rightAdjustFill("0", "0",11);
        
        summaryRecord = leftAdjustFill(summaryRecord, " ", 69);
        
        summaryRecord += rightAdjustFill(totalHashAmount.toString(), "0", 11);
        
        summaryRecord = leftAdjustFill(summaryRecord, " ", 113);
        
        summaryRecord += "9";
        
        summaryRecord += "\r\n";
        
        return summaryRecord;
    }
    
    public String createAdviceRecordsDBS(Payment payment, String origAccountNumber, String companyid) throws ServiceException{
        
        Integer temp = 0;
        
        IBGReceivingBankDetails receivingBankDetails = payment.getIbgreceivingbankdetails();
        
        if(receivingBankDetails == null){
            return "";
        }
        
        String adviceRecord = "";
            
        String recvBankNumber="";
        
        if (receivingBankDetails.getReceivingBankCode() != null) {
            recvBankNumber = receivingBankDetails.getReceivingBankCode().toString();
        }
        
        String recvBranchNumber="";
        if (receivingBankDetails.getReceivingBranchCode() != null) {
            recvBranchNumber=receivingBankDetails.getReceivingBranchCode().toString();
        }
        
        String recvAccountNumber="";
        if (receivingBankDetails.getReceivingAccountNumber() != null) {
            recvAccountNumber=receivingBankDetails.getReceivingAccountNumber().toString();
        }
        
        String recvAccountName="";
        if (receivingBankDetails.getReceivingAccountName() != null) {
            recvAccountName=receivingBankDetails.getReceivingAccountName().toString();
            if (recvAccountName.length() > 20) {
                recvAccountName = recvAccountName.substring(0, 20);
            }
        }        
        
        adviceRecord += recvBankNumber;
        
        adviceRecord += rightAdjustFill(recvBranchNumber, "0", 3);
        
        adviceRecord += rightAdjustFill(recvAccountNumber , "0", 11);

        adviceRecord += rightAdjustFill(recvAccountName, " ", 20);
        
        adviceRecord += payment.getIbgCode();//"22";      //22 for salary// transaction Number
        
        temp=getPaymentAmount(payment, companyid);
        
        adviceRecord += rightAdjustFill(temp.toString(), "0", 11);
        
        adviceRecord = leftAdjustFill(adviceRecord, " ", 89);
            
        adviceRecord = leftAdjustFill(adviceRecord, " ", 101);

        adviceRecord = leftAdjustFill(adviceRecord, " ", 113);

        adviceRecord += "1";

        adviceRecord += "\r\n";

        return adviceRecord;     
    }
    
    public Long splitACNumber(String acno){
        Long splitacno = 0l;
        String adjustedacno = leftAdjustFill(acno.toString(), "0", 11);
        String firstpartacno = adjustedacno.substring(0,6);
        String lastpartacno = adjustedacno.substring(6);
        splitacno = Long.parseLong(firstpartacno) - Long.parseLong(lastpartacno);
        return splitacno;
    }
    
    public String createControlRecordDBS(String valueDate, Integer origBankNumber, String origBranchNumber, String origAccountNumber, String origAccountName, Integer messageSequenceNumber, String companyID) {
        String controlRecord = "";
        if (valueDate.isEmpty()) {
            SimpleDateFormat format = new SimpleDateFormat("yyMMdd");
            valueDate = format.format(new Date());
        }
        controlRecord += valueDate;

        controlRecord = leftAdjustFill(controlRecord, " ", 51);

        controlRecord += origBankNumber;//"7171";

        controlRecord += rightAdjustFill(origBranchNumber, "0", 3);

        controlRecord += rightAdjustFill(origAccountNumber, "0", 11);

        controlRecord = leftAdjustFill(controlRecord, " ", 71);

        controlRecord += leftAdjustFill(origAccountName, " ", 20);

        if (messageSequenceNumber == null) {
            messageSequenceNumber = 1;
        }
        controlRecord += rightAdjustFill(messageSequenceNumber.toString(), "0", 5);

        controlRecord += companyID.toUpperCase();

        controlRecord = leftAdjustFill(controlRecord, " ", 113);

        controlRecord += "0";

        controlRecord += "\r\n";

        return controlRecord;
    }

    public String leftAdjustFill(String origText, String fillText, Integer length) {
        String text = origText;
        while (text.length() < length) {
            text += fillText;
        }
        return text;
    }

    public String rightAdjustFill(String origText, String fillText, Integer length) {
        String text = origText;
        while (text.length() < length) {
            text = fillText + text;
        }
        return text;
    }
    
    
    @Override
   public double getAccountClosingBalanceDateWiseMerged(HttpServletRequest request, Account account, Date startDate, Date endDate,boolean  ytdFlag, boolean eliminateflag,HashMap<String,Double> openPeriodAmounts) throws ServiceException, SessionExpiredException{
       double amount = 0;
       try{
//            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
//            String currencyid = sessionHandlerImpl.getCurrencyID(request);
           CompanyAccountPreferences pref = null;
           String companyid = sessionHandlerImpl.getCompanyid(request);
           KwlReturnObject prefresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
           pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
//           KwlReturnObject accresult = accountingHandlerDAOobj.loadObject(Account.class.getName(), accountid);
//           Account account = (Account) accresult.getEntityList().get(0);
           Calendar calendar = Calendar.getInstance();
           ExtraCompanyPreferences extrapref = null;
           KwlReturnObject extraprefresult = accountingHandlerDAOobj.loadObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
           if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
               extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
           }
            
            amount=getAccountBalanceDateWiseMerged(request, account, startDate, endDate, ytdFlag, eliminateflag,openPeriodAmounts);
           
            if(startDate!=null){
                calendar.setTime(startDate);
            }else{
                calendar.setTime(endDate);
            }
//            HashMap<String,Date> startEndDateHashMap=getStartAndEndFinancialDate(pref, calendar.get(Calendar.YEAR)-1);
            if(startDate==null){
                startDate=new Date(0);
            }
            
            if(startDate!=null){
                /* ERP-21031 : Commented as this was causing mismatch in Trial Balance Report (YTD Opening Balance Amount(Debit)) column*/
//                Date closingStartDate=startEndDateHashMap.get("startDate");
//                Date closingEndDate=startEndDateHashMap.get("endDate");
//                if(ytdFlag||startDate.after(closingEndDate)){
//                    double previousAmount=getAccountBalanceDateWiseMerged(request,account, closingEndDate, startDate, ytdFlag, eliminateflag,null);
//                    amount+=previousAmount;
//                    if(openPeriodAmounts!=null){
//                        if(openPeriodAmounts.containsKey("openingBalance")){
//                            double previousOpeningAmount=openPeriodAmounts.get("openingBalance");
//                            openPeriodAmounts.put("openingBalance", previousOpeningAmount+previousAmount);
//                        }else{
//                            openPeriodAmounts.put("openingBalance", previousAmount);
//                        }
//                    }
//                }
                if (account != null && !StringUtil.isNullOrEmpty(extrapref.getProfitLossAccountId()) && extrapref.getProfitLossAccountId().equals(account.getID())) {
                    
                    /* Call From Trial Balance. */
                    Date excludedPreviousYearDate = getDateForExcludePreviousYearBalanceFilter(companyid, startDate);
                    Date previousFYEndDate = new DateTime(excludedPreviousYearDate).minusDays(1).toDate();
                    double previousAmount = getClosedYearNetProfitAndLoss(previousFYEndDate, pref, extrapref, companyid);
                    amount += previousAmount;
                    if (openPeriodAmounts != null) {
                        if (openPeriodAmounts.containsKey("openingBalance")) {
                            double previousOpeningAmount = openPeriodAmounts.get("openingBalance");
                            openPeriodAmounts.put("openingBalance", previousOpeningAmount + previousAmount);
                        } else {
                            openPeriodAmounts.put("openingBalance", previousAmount);
                        }
                    }
                }
                
            }   
       }catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalanceDateWise : "+ex.getMessage(), ex);
        }
       return amount;
   }
    
    @Override
   public double getAccountClosingBalanceDateWiseMerged(JSONObject paramJobj, Account account, Date startDate, Date endDate,boolean  ytdFlag, boolean eliminateflag,HashMap<String,Double> openPeriodAmounts) throws ServiceException, SessionExpiredException{
       double amount = 0;
       try{
           CompanyAccountPreferences pref = null;
           KwlReturnObject prefresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), paramJobj.getString(Constants.companyKey));
           pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
           Calendar calendar = Calendar.getInstance();
           ExtraCompanyPreferences extrapref = null;
           KwlReturnObject extraprefresult = accountingHandlerDAOobj.loadObject(ExtraCompanyPreferences.class.getName(), paramJobj.getString(Constants.companyKey));
           if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
               extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
           }
            amount=getAccountBalanceDateWiseMerged(paramJobj, account, startDate, endDate, ytdFlag, eliminateflag,openPeriodAmounts);
            if(startDate!=null){
                calendar.setTime(startDate);
            }else{
                calendar.setTime(endDate);
            }
            if(startDate==null){
                startDate=new Date(0);
            }
            if(startDate!=null){
                 if (account.getID().equals(extrapref.getProfitLossAccountId())) {
                    double previousAmount= getAccountsAmountFromSavedData(account.getID(), account, (calendar.get(Calendar.YEAR) - 1),ytdFlag)*(-1);
                    amount += previousAmount;
                    if(openPeriodAmounts!=null){
                        if(openPeriodAmounts.containsKey("openingBalance")){
                            double previousOpeningAmount=openPeriodAmounts.get("openingBalance");
                            openPeriodAmounts.put("openingBalance", previousOpeningAmount+previousAmount);
                        }else{
                            openPeriodAmounts.put("openingBalance", previousAmount);
                        }
                    }
                }else if (account.getAccounttype() != 0){
                    double previousAmount=getAccountsAmountFromSavedData(account.getID(), account, (calendar.get(Calendar.YEAR) - 1),false);
                    amount += previousAmount;
                    if(openPeriodAmounts!=null){
                        if(openPeriodAmounts.containsKey("openingBalance")){
                            double previousOpeningAmount=openPeriodAmounts.get("openingBalance");
                            openPeriodAmounts.put("openingBalance", previousOpeningAmount+previousAmount);
                        }else{
                            openPeriodAmounts.put("openingBalance", previousAmount);
                        }
                    }
                }
            }   
       }catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalanceDateWise : "+ex.getMessage(), ex);
        }
       return amount;
   }

    @Override
    public double getOpeningBalanceBalanceSheet(HttpServletRequest request)throws JSONException,ServiceException {
        
            Date startDate=null;
            Date endDate=null;
            double balance=0;
            try {
            if (request.getAttribute("netProfitClosesFlag") != null && (Boolean) request.getAttribute("netProfitClosesFlag")) {
                startDate = authHandler.getDateOnlyFormat().parse(request.getAttribute("stdate").toString());
                endDate = authHandler.getDateOnlyFormat().parse(request.getAttribute("enddate").toString());
           }else if(request.getAttribute("jasperreport")!=null && request.getAttribute("jasperreport").equals("JasperReport")) {                                 
                startDate=(Date)request.getAttribute("jaspersdate");
                endDate=(Date)request.getAttribute("jasperenddate");
            }else{
                startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
                endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            }
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);  
//            double bals[] = getOpeningBalancesWithDate(request, sessionHandlerImpl.getCompanyid(request), startDate, endDate);
            double bals[] = getOpeningBalancesWithDate(paramJobj, paramJobj.optString(Constants.companyKey), startDate, endDate);
            balance = bals[0] + bals[1];////+invCloseBal;
            balance = authHandler.round(balance, paramJobj.optString("company"));
        }  catch (ParseException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }catch (SessionExpiredException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return balance;
    }

    @Override
    public KwlReturnObject getDimensionsReport(Map<String, Object> requestParams) throws ServiceException {
        boolean pagingFlag = false;
        String appendCase = "and";
        String innerQuery="";
        String joinString1="";
        String tableInv="";
        String conditionSQL="";
        String mySearchFilterStringVQ="";
        String mySearchFilterStringCQ="";
        String mySearchFilterStringPO="";
        String mySearchFilterStringSO="";
        String mySearchFilterStringCI="";
        String mySearchFilterStringVI="";
        String mySearchFilterStringMP="";
        String mySearchFilterStringRP="";
        List list=new ArrayList();
        String joinSql5="";
        String joinSql1="";
        String joinSql2="";
        String conditionQuotation = "";
        String conditionPO="";
        String conditionSO="";
        String conditionInvoice="";
        String conditionGR="";
        String conditionMP="";
        String conditionRP="";
        
        String joinCustomCQ="";
        String joinCustomVQ="";
        String joinCustomPO="";
        String joinCustomSO="";
        String joinCustomJE="";
        String start =null;
        String limit=null;
        int count=0;
         if (requestParams.containsKey(Constants.start) && requestParams.containsKey("limit") && !StringUtil.isNullOrEmpty(requestParams.get(Constants.start).toString())) {
            start = (String) requestParams.get(Constants.start);
            limit = (String) requestParams.get(Constants.limit);
            pagingFlag = true;
        }
       
        DateFormat df = (DateFormat) requestParams.get("dateformat");
        try{    
             ArrayList params = new ArrayList();
            ArrayList paramsVQ = new ArrayList();
            ArrayList paramsCQ = new ArrayList();
            ArrayList paramsPO = new ArrayList();
            ArrayList paramsSO = new ArrayList();
            ArrayList paramsCI = new ArrayList();
            ArrayList paramsVI = new ArrayList();
            ArrayList paramsMP = new ArrayList();
            ArrayList paramsRP = new ArrayList();
           
             String startDate = (String) requestParams.get(Constants.REQ_startdate);
            String endDate = (String) requestParams.get(Constants.REQ_enddate);
              
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                joinSql1 += " where (quotationdate >=? and quotationdate <=?)";
                paramsVQ.add(df.parse(startDate));
                paramsVQ.add(df.parse(endDate));
                paramsVQ.add(requestParams.get(Constants.companyKey));
                paramsCQ.add(df.parse(startDate));
                paramsCQ.add(df.parse(endDate));
                paramsCQ.add(requestParams.get(Constants.companyKey));
                joinSql2 += " where (orderdate >=? and orderdate <=?)";
                paramsPO.add(df.parse(startDate));
                paramsPO.add(df.parse(endDate));
                paramsPO.add(requestParams.get(Constants.companyKey));
                paramsSO.add(df.parse(startDate));
                paramsSO.add(df.parse(endDate));
                paramsSO.add(requestParams.get(Constants.companyKey));
               
                joinSql5 += " inner join journalentry je on journalentry=je.id where (je.entrydate >=? and je.entrydate <=?)";
                paramsCI.add(df.parse(startDate));
                paramsCI.add(df.parse(endDate));
                paramsCI.add(requestParams.get(Constants.companyKey));
                paramsVI.add(df.parse(startDate));
                paramsVI.add(df.parse(endDate));
                paramsVI.add(requestParams.get(Constants.companyKey));
                paramsMP.add(df.parse(startDate));
                paramsMP.add(df.parse(endDate));
                paramsMP.add(requestParams.get(Constants.companyKey));
                paramsRP.add(df.parse(startDate));
                paramsRP.add(df.parse(endDate));
                paramsRP.add(requestParams.get(Constants.companyKey));
                
            }
             String ss = (String) requestParams.get("ss");
             if (StringUtil.isNullOrEmpty(ss) == false) {
                 String[] searchcol = new String[]{"quotationnumber"};
                 Map SearchStringMap = StringUtil.insertParamSearchStringMap(paramsVQ, ss, 1);
                 StringUtil.insertParamSearchString(SearchStringMap);
                 conditionQuotation = StringUtil.getSearchString(ss, "and", searchcol);
                 SearchStringMap = StringUtil.insertParamSearchStringMap(paramsCQ, ss, 1);
                 StringUtil.insertParamSearchString(SearchStringMap);
                 
                 searchcol = new String[]{"ponumber"};
                 SearchStringMap = StringUtil.insertParamSearchStringMap(paramsPO, ss, 1);
                 StringUtil.insertParamSearchString(SearchStringMap);
                 conditionPO = StringUtil.getSearchString(ss, "and", searchcol);
                 
                 searchcol = new String[]{"sonumber"};
                 SearchStringMap = StringUtil.insertParamSearchStringMap(paramsSO, ss, 1);
                 StringUtil.insertParamSearchString(SearchStringMap);
                 conditionSO = StringUtil.getSearchString(ss, "and", searchcol);
                 
                 searchcol = new String[]{"invoice.invoicenumber"};
                 SearchStringMap = StringUtil.insertParamSearchStringMap(paramsCI, ss, 1);
                 StringUtil.insertParamSearchString(SearchStringMap);
                 conditionInvoice = StringUtil.getSearchString(ss, "and", searchcol);
                 
                 searchcol = new String[]{"goodsreceipt.grnumber"};
                 SearchStringMap = StringUtil.insertParamSearchStringMap(paramsVI, ss, 1);
                 StringUtil.insertParamSearchString(SearchStringMap);
                 conditionGR = StringUtil.getSearchString(ss, "and", searchcol);

                 searchcol = new String[]{"payment.paymentnumber"};
                 SearchStringMap = StringUtil.insertParamSearchStringMap(paramsMP, ss, 1);
                 StringUtil.insertParamSearchString(SearchStringMap);
                 conditionMP = StringUtil.getSearchString(ss, "and", searchcol);

                 searchcol = new String[]{"receipt.receiptnumber"};
                 SearchStringMap = StringUtil.insertParamSearchStringMap(paramsRP, ss, 1);
                 StringUtil.insertParamSearchString(SearchStringMap);
                 conditionRP = StringUtil.getSearchString(ss, "and", searchcol);

                }
            //for advance Search:
              String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                if (requestParams.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
             HashMap<String, Object> reqParams1 = new HashMap<String, Object>();
             String Searchjson = "",VQSearchJson="",CQSearchJson="",POSearchJson="",SOSearchJson="",CISearchJson="",VISearchJson="",MPSearchJson="",RPSearchJson="";
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = requestParams.get("searchJson").toString();
                if(Searchjson.length()>0){
                HashMap<String, Object> reqPar1 = new HashMap<String, Object>();
                reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqPar1.put(Constants.appendCase, appendCase);
                reqPar1.put("removeProductCustomFilter", true);
     
                    reqPar1.put(Constants.moduleid, Constants.Acc_Vendor_Quotation_ModuleId);
                    VQSearchJson = getSearchJsonByModule(reqPar1);
                    if (!StringUtil.isNullOrEmpty(VQSearchJson)) {
                        reqPar1.put(Constants.Searchjson, VQSearchJson);
                        mySearchFilterStringVQ = String.valueOf(StringUtil.getMyAdvanceSearchString(reqPar1, true).get(Constants.myResult));
                        joinCustomVQ = " inner join vendorquotationcustomdata on vendorquotationid=id ";
                        if (!StringUtil.isNullOrEmpty(VQSearchJson)) {
                            StringUtil.insertParamAdvanceSearchString1(paramsVQ, VQSearchJson);
                        }
                    }

                    reqPar1.put(Constants.moduleid, Constants.Acc_Customer_Quotation_ModuleId);
                    reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                    CQSearchJson = getSearchJsonByModule(reqPar1);
                    if (!StringUtil.isNullOrEmpty(CQSearchJson)) {
                        reqPar1.put(Constants.Searchjson, CQSearchJson);
                        mySearchFilterStringCQ = String.valueOf(StringUtil.getMyAdvanceSearchString(reqPar1, true).get(Constants.myResult));
                        joinCustomCQ = " inner join quotationcustomdata on quotationid=id ";
                        if (!StringUtil.isNullOrEmpty(CQSearchJson)) {
                            StringUtil.insertParamAdvanceSearchString1(paramsCQ, CQSearchJson);
                        }
                    }

                    reqPar1.put(Constants.moduleid, Constants.Acc_Purchase_Order_ModuleId);
                    reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                    POSearchJson = getSearchJsonByModule(reqPar1);
                    if (!StringUtil.isNullOrEmpty(POSearchJson)) {
                        reqPar1.put(Constants.Searchjson, POSearchJson);
                        mySearchFilterStringPO = String.valueOf(StringUtil.getMyAdvanceSearchString(reqPar1, true).get(Constants.myResult));
                        joinCustomPO = " inner join purchaseordercustomdata on poID=id ";
                        if (!StringUtil.isNullOrEmpty(POSearchJson)) {
                            StringUtil.insertParamAdvanceSearchString1(paramsPO, POSearchJson);
                        }
                    }

                    reqPar1.put(Constants.moduleid, Constants.Acc_Sales_Order_ModuleId);
                    reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                    SOSearchJson = getSearchJsonByModule(reqPar1);
                    if (!StringUtil.isNullOrEmpty(SOSearchJson)) {
                        reqPar1.put(Constants.Searchjson, SOSearchJson);
                        mySearchFilterStringSO = String.valueOf(StringUtil.getMyAdvanceSearchString(reqPar1, true).get(Constants.myResult));
                        joinCustomSO = " inner join salesordercustomdata on soID=id ";
                        if (!StringUtil.isNullOrEmpty(SOSearchJson)) {
                            StringUtil.insertParamAdvanceSearchString1(paramsSO, SOSearchJson);
                        }
                    }

                    reqPar1.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                    CISearchJson = getSearchJsonByModule(reqPar1);
                    if (!StringUtil.isNullOrEmpty(CISearchJson)) {
                        reqPar1.put(Constants.Searchjson, CISearchJson);
                        mySearchFilterStringCI = String.valueOf(StringUtil.getMyAdvanceSearchString(reqPar1, true).get(Constants.myResult));
                        joinCustomJE = " inner join accjecustomdata on accjecustomdata.journalentryId=journalentry";
                        if (!StringUtil.isNullOrEmpty(CISearchJson)) {
                            StringUtil.insertParamAdvanceSearchString1(paramsCI, CISearchJson);
                        }
                    }

                    reqPar1.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                    VISearchJson = getSearchJsonByModule(reqPar1);
                    if (!StringUtil.isNullOrEmpty(VISearchJson)) {
                        reqPar1.put(Constants.Searchjson, VISearchJson);
                        mySearchFilterStringVI = String.valueOf(StringUtil.getMyAdvanceSearchString(reqPar1, true).get(Constants.myResult));
                        joinCustomJE = " inner join accjecustomdata on accjecustomdata.journalentryId=journalentry";
                        if (!StringUtil.isNullOrEmpty(VISearchJson)) {
                            StringUtil.insertParamAdvanceSearchString1(paramsVI, VISearchJson);
                        }
                    }

                    reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                    MPSearchJson = getSearchJsonByModule(reqPar1);
                    if (!StringUtil.isNullOrEmpty(MPSearchJson)) {
                        reqPar1.put(Constants.Searchjson, MPSearchJson);
                        mySearchFilterStringMP = String.valueOf(StringUtil.getMyAdvanceSearchString(reqPar1, true).get(Constants.myResult));
                        joinCustomJE = " inner join accjecustomdata on accjecustomdata.journalentryId=journalentry";
                        if (!StringUtil.isNullOrEmpty(MPSearchJson)) {
                            StringUtil.insertParamAdvanceSearchString1(paramsMP, MPSearchJson);
                        }
                    }

                    reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                    RPSearchJson = getSearchJsonByModule(reqPar1);
                    if (!StringUtil.isNullOrEmpty(RPSearchJson)) {
                        reqPar1.put(Constants.Searchjson, RPSearchJson);
                        mySearchFilterStringRP = String.valueOf(StringUtil.getMyAdvanceSearchString(reqPar1, true).get(Constants.myResult));
                        joinCustomJE = " inner join accjecustomdata on accjecustomdata.journalentryId=journalentry";
                        if (!StringUtil.isNullOrEmpty(RPSearchJson)) {
                            StringUtil.insertParamAdvanceSearchString1(paramsRP, RPSearchJson);
                        }
                    }

                }
            }
            String sqlQuery = "select type,ID,docdate from (Select 'VQ' as type,id as ID,quotationdate as docdate from vendorquotation "+joinCustomVQ+joinSql1+" and vendorquotation.company=?"+conditionQuotation+mySearchFilterStringVQ;
            sqlQuery+=" UNION Select 'CQ' as type,id as ID,quotationdate as docdate from quotation "+joinCustomCQ+joinSql1+" and quotation.company=?"+conditionQuotation+mySearchFilterStringCQ;
            sqlQuery+=" UNION Select 'PO' as type,id as ID,orderdate as docdate from purchaseorder "+joinCustomPO+joinSql2+" and purchaseorder.company=?"+conditionPO+mySearchFilterStringPO;
            sqlQuery+=" UNION Select 'SO' as type,id as ID,orderdate as docdate from salesorder "+joinCustomSO+joinSql2+" and salesorder.company=?"+conditionSO+mySearchFilterStringSO;
            sqlQuery+=" UNION Select 'CI' as type,invoice.id as ID,je.entrydate as docdate from invoice "+joinCustomJE+joinSql5+" and invoice.company=?"+conditionInvoice+mySearchFilterStringCI;
            sqlQuery+=" UNION Select 'VI' as type,goodsreceipt.id as ID,je.entrydate as docdate from goodsreceipt "+joinCustomJE+joinSql5+" and goodsreceipt.company=?"+conditionGR+mySearchFilterStringVI;
            sqlQuery+=" UNION Select 'MP' as type,payment.id as ID,je.entrydate as docdate from payment "+joinCustomJE+joinSql5+" and payment.company=?"+conditionMP+mySearchFilterStringMP;
            sqlQuery+=" UNION Select 'RP' as type,receipt.id as ID,je.entrydate as docdate from receipt "+joinCustomJE+joinSql5+" and receipt.company=?"+conditionRP+mySearchFilterStringRP;
            sqlQuery+=" ) as T order by docdate";
                params.addAll(paramsVQ);
                params.addAll(paramsCQ);
                params.addAll(paramsPO);
                params.addAll(paramsSO);
                params.addAll(paramsCI);
                params.addAll(paramsVI);
                params.addAll(paramsMP);
                params.addAll(paramsRP);
            
            list = executeSQLQuery( sqlQuery, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeSQLQueryPaging( sqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
          } catch (Exception ex) {
            throw ServiceException.FAILURE("getDimensionsReport : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    /**
     * Following method is used only to get IRAS callback url String from table.
     * So user redirect to either to irasgstform5esubmissioncallback.jsp or
     * irastransactionlistingcallback.jsp .
     *
     * @param state
     * @param scope
     * @return
     */
    @Override
    public String getIRASCallbackUrl(String state, String scope, String code) throws ServiceException {
        String callbackUrl = "";

        try {
            if (!StringUtil.isNullOrEmpty(state) && !StringUtil.isNullOrEmpty(code)) {
                String proxyID = state;
                KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(DeskeraProxyDetails.class.getName(), proxyID);
                if (cpresult != null && cpresult.getEntityList() != null && !cpresult.getEntityList().isEmpty() && cpresult.getEntityList().get(0) != null) {
                    DeskeraProxyDetails dpd = (DeskeraProxyDetails) cpresult.getEntityList().get(0);
                    String ids = dpd.getParameters();
                    String url = dpd.getCallBackURL() + "?state=" + state + "&code=" + code + "&ids=" + ids;
                    if (!StringUtil.isNullOrEmpty(scope)) {
                        url += "&scope=" + scope;
                    }
                    callbackUrl = url;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getIRASCallbackUrl : " + ex.getMessage(), ex);
        }
        return callbackUrl;
    }

   

     private class accountComp implements Comparator<Account> {

        private boolean sortOnType;
        private boolean directionDesc;

        private accountComp(boolean sortOnType1, boolean direction1) {
            sortOnType = sortOnType1;
            directionDesc = direction1;
        }

        @Override
        public int compare(Account o1, Account o2) {
            String o1_Code = (o1.getAcccode() == null)? "" :  o1.getAcccode();
            String o2_Code = (o2.getAcccode() == null)? "" :  o2.getAcccode();

            if (sortOnType) {
                if (StringUtil.equal(o1.getGroup().getName(), o2.getGroup().getName())) {
                    if (StringUtil.equal(o1_Code, o2_Code)) {
                        return directionDesc ? o2.getName().compareTo(o1.getName()) : o1.getName().compareTo(o2.getName());
                    } else {
                        return directionDesc ? o2_Code.compareTo(o1_Code) : o1_Code.compareTo(o2_Code);
                    }
                } else {
                    return directionDesc ? o2.getGroup().getName().compareTo(o1.getGroup().getName()) : o1.getGroup().getName().compareTo(o2.getGroup().getName());
                }
            } else {
                if (StringUtil.equal(o1_Code, o2_Code)) {
                    return directionDesc ? o2.getName().compareTo(o1.getName()) : o1.getName().compareTo(o2.getName());
                } else {
                    return directionDesc ? o2_Code.compareTo(o1_Code) : o1_Code.compareTo(o2_Code);
                }
            }
        }
    }

    private class GroupComp implements Comparator<Group> {

        private boolean directionDesc;

        private GroupComp(boolean direction1) {
            directionDesc = direction1;
        }

     @Override
        public int compare(Group o1, Group o2) {
            String o1_Name = (o1.getName() == null) ? "" : o1.getName();
            String o2_Name = (o2.getName() == null) ? "" : o2.getName();

            return directionDesc ? o2_Name.compareTo(o1_Name) : o1_Name.compareTo(o2_Name);
        }
    }

     @Override
      public JSONObject getExportBalanceSheetJSONforStandardCSV(HttpServletRequest request,JSONObject jobj, int flag, int toggle,boolean periodView){
        JSONObject retObj = new JSONObject();
        JSONArray jArr = new JSONArray();
        JSONArray rightObjArr = new JSONArray();
        JSONArray leftObjArr = new JSONArray();
        try{
            jobj = jobj.getJSONObject(Constants.RES_data);
            if(toggle == 0){
            	rightObjArr = jobj.getJSONArray("right");
            	leftObjArr = jobj.getJSONArray("left");
            }else{
            	rightObjArr = jobj.getJSONArray("left");
                leftObjArr = jobj.getJSONArray("right");
            }
            boolean isCompare=StringUtil.isNullOrEmpty(request.getParameter("endpredate"))?false:true; // if endpredate coming it means that it is compare case
//            int length = leftObjArr.length()>rightObjArr.length()?leftObjArr.length():rightObjArr.length();
            for (int i = 0; i < rightObjArr.length(); i++) {
                JSONObject tempObj = new JSONObject();
                if (i < rightObjArr.length() && !rightObjArr.getJSONObject(i).toString().equalsIgnoreCase("{}")) {
                    JSONObject rightObj = rightObjArr.getJSONObject(i);
                    if (periodView) {
                        tempObj.put("laccountname", rightObj.get("accountname"));
                        tempObj.put("laccountcode", rightObj.optString("accountcode"));
                        tempObj.put("lopeningamount", com.krawler.common.util.StringUtil.serverHTMLStripper((rightObj.has("openingamount") ? rightObj.get("openingamount").toString() : "")));
                        tempObj.put("lperiodamount", com.krawler.common.util.StringUtil.serverHTMLStripper((rightObj.has("periodamount") ? rightObj.get("periodamount").toString() : "")));
                        tempObj.put("lendingamount", com.krawler.common.util.StringUtil.serverHTMLStripper((rightObj.has("endingamount") ? rightObj.get("endingamount").toString() : "")));
                    } else if(isCompare){
                        tempObj.put("laccountname", rightObj.get("accountname"));
                        tempObj.put("lamount", com.krawler.common.util.StringUtil.serverHTMLStripper(rightObj.has("amount") ? rightObj.get("amount").toString() : ""));
                        tempObj.put("lpreamount", com.krawler.common.util.StringUtil.serverHTMLStripper((rightObj.has("preamount") ? rightObj.get("preamount").toString() : "")));
                    } else {
                        tempObj.put("laccountname", rightObj.get("accountname"));
                        tempObj.put("lamount", com.krawler.common.util.StringUtil.serverHTMLStripper(rightObj.has("amount") ? rightObj.get("amount").toString() : ""));
                    }
                } else {
                    if (periodView) {
                        tempObj.put("laccountname", "");
                        tempObj.put("lopeningamount","");
                        tempObj.put("lperiodamount","");
                        tempObj.put("lendingamount","");
                    } else if(isCompare){
                        tempObj.put("laccountname", "");
                        tempObj.put("lamount", "");
                        tempObj.put("lpreamount", "");
                    } else {
                        tempObj.put("laccountname", "");
                        tempObj.put("lamount", "");
                    }
                }
                jArr.put(tempObj);
            }
            String leftSummaryHeader = "", rightSummaryHeader = "";
            double leftPeriod = 0, rightPeriod = 0, leftOpen = 0, rightOpen = 0, leftEnd = 0, rightEnd = 0;
            double leftPreTotal = 0, rightPreTotal = 0;
            if(flag!=-1){
                /*
                 * 0 index in openValArray,endValArray is for Liability 1 index
                 * in openValArray,endValArray is for Asset
                 */
                double externalCurrencyRate=request.getAttribute("externalCurrencyRate")!=null?(Double)request.getAttribute("externalCurrencyRate"):1.0;                
                double totalAsset=0, totalLibility=0,totalOpenAsset=0,totalOpenLiability=0,totalEndAsset=0,totalEndLiability=0;
                double pretotalAsset=0, pretotalLibility=0;
                JSONArray finalValArr = periodView?jobj.getJSONArray("periodtotal"):jobj.getJSONArray("total");
                JSONArray openValArray =jobj.getJSONArray("opentotal");
                JSONArray endValArray = jobj.getJSONArray("endtotal");
                JSONArray prefinalValArr = jobj.getJSONArray("pretotal");
                leftPreTotal = pretotalAsset = Double.parseDouble(prefinalValArr.getString(1));
                rightPreTotal = pretotalLibility = Double.parseDouble(prefinalValArr.getString(0));
                leftPeriod = totalAsset = Double.parseDouble(finalValArr.getString(1));
                rightPeriod = totalLibility = Double.parseDouble(finalValArr.getString(0));
                leftOpen = totalOpenAsset = Double.parseDouble(openValArray.getString(1));
                rightOpen = totalOpenLiability = Double.parseDouble(openValArray.getString(0));
                leftEnd = totalEndAsset = Double.parseDouble(endValArray.getString(1));
                rightEnd = totalEndLiability = Double.parseDouble(endValArray.getString(0));
//                String leftSummaryHeader = "", rightSummaryHeader = "";
                if(flag==1){
                	if(toggle == 0){
                		leftSummaryHeader = "Total Liability";
                		rightSummaryHeader = "Total Asset";
                                leftPreTotal = pretotalLibility;
                                rightPreTotal = pretotalAsset;
                                leftPeriod = totalLibility;
                                rightPeriod = totalAsset;
                                leftOpen = totalOpenLiability;
                                rightOpen = totalOpenAsset;
                                leftEnd = totalEndLiability;
                                rightEnd = totalEndAsset;
                	}else{
                		leftSummaryHeader = "Total Asset";
                		rightSummaryHeader = "Total Liability";
                	}
                }else if(flag==2){
                    leftSummaryHeader = "Total Debit";
                    rightSummaryHeader = "Total Credit";
                }

                JSONObject tempObj = new JSONObject();
                if (periodView) {
                    tempObj.put("laccountname", rightSummaryHeader);
                    tempObj.put("lopeningamount", rightOpen);
                    tempObj.put("lperiodamount", rightPeriod);
                    tempObj.put("lendingamount", rightEnd);
                } else if(isCompare){
                    tempObj.put("laccountname", rightSummaryHeader);
                    tempObj.put("lamount", rightPeriod);
                    tempObj.put("lpreamount", rightPreTotal);
                } else {
                    tempObj.put("laccountname", rightSummaryHeader);
                    tempObj.put("lamount", rightPeriod);                  
                }
                jArr.put(tempObj);
            }
         
            JSONObject blankTempObj = new JSONObject();
            if (periodView) {
                blankTempObj.put("laccountname", "");
                blankTempObj.put("lopeningamount", "");
                blankTempObj.put("lperiodamount", "");
                blankTempObj.put("lendingamount", "");
            } else if(isCompare) {
                blankTempObj.put("laccountname", "");
                blankTempObj.put("lamount", "");
                blankTempObj.put("lpreamount", "");
            } else {
                blankTempObj.put("laccountname", "");
                blankTempObj.put("lamount", "");
            }
            jArr.put(blankTempObj);
            
            String titles[] = null;
            String tit = request.getParameter("othertitle");
            titles = (String[]) tit.split(",");

            JSONObject nextHeaderObj = new JSONObject();
            if (periodView) {
                if (titles.length > 4) {
                    nextHeaderObj.put("laccountname", titles[0]);
                    nextHeaderObj.put("laccountcode", titles[1]);
                    nextHeaderObj.put("lopeningamount", titles[2]);
                    nextHeaderObj.put("lperiodamount", titles[3]);
                    nextHeaderObj.put("lendingamount", titles[4]);
                } else {
                    nextHeaderObj.put("laccountname", titles[0]);
                    nextHeaderObj.put("lopeningamount", titles[1]);
                    nextHeaderObj.put("lperiodamount", titles[2]);
                    nextHeaderObj.put("lendingamount", titles[3]);
                }
            } else if(isCompare) {
                nextHeaderObj.put("laccountname", titles[0]);
                nextHeaderObj.put("lamount", titles[1]);
                nextHeaderObj.put("lpreamount", titles[2]);
            } else {
                nextHeaderObj.put("laccountname", titles[0]);
                nextHeaderObj.put("lamount", titles[1]);               
            }
            jArr.put(nextHeaderObj);
            
            for(int i=0;i<leftObjArr.length();i++){
                JSONObject tempObj = new JSONObject();
                if(i<leftObjArr.length() && !leftObjArr.getJSONObject(i).toString().equalsIgnoreCase("{}")){
                    JSONObject leftObj = leftObjArr.getJSONObject(i);
                    if (periodView) {
                        tempObj.put("laccountname", leftObj.get("accountname"));
                        tempObj.put("laccountcode", leftObj.optString("accountcode"));
                        tempObj.put("lopeningamount", com.krawler.common.util.StringUtil.serverHTMLStripper(leftObj.has("openingamount") ? leftObj.get("openingamount").toString() : ""));
                        tempObj.put("lperiodamount", com.krawler.common.util.StringUtil.serverHTMLStripper(leftObj.has("periodamount") ? leftObj.get("periodamount").toString() : ""));
                        tempObj.put("lendingamount", com.krawler.common.util.StringUtil.serverHTMLStripper(leftObj.has("endingamount") ? leftObj.get("endingamount").toString() : ""));
                    } else if(isCompare) {
                        tempObj.put("laccountname", leftObj.get("accountname"));
                        tempObj.put("lamount", com.krawler.common.util.StringUtil.serverHTMLStripper(leftObj.has("amount") ? leftObj.get("amount").toString() : ""));
                        tempObj.put("lpreamount", com.krawler.common.util.StringUtil.serverHTMLStripper(leftObj.has("preamount") ? leftObj.get("preamount").toString() : ""));

                    } else {
                        tempObj.put("laccountname", leftObj.get("accountname"));
                        tempObj.put("lamount", com.krawler.common.util.StringUtil.serverHTMLStripper(leftObj.has("amount") ? leftObj.get("amount").toString() : ""));
                    }
                 }else{
                    tempObj.put("laccountname","");
                    tempObj.put("lamount","");
                    tempObj.put("lpreamount","");
                }
                jArr.put(tempObj);
            }
            
            if(flag!=-1){
//                double externalCurrencyRate=request.getAttribute("externalCurrencyRate")!=null?(Double)request.getAttribute("externalCurrencyRate"):1.0;                
//                double totalAsset=0, totalLibility=0,totalOpenAsset=0,totalEndAsset=0,totalOpenLiability=0,totalEndLiability;
//                double pretotalAsset=0, pretotalLibility=0;
//                JSONArray finalValArr = periodView ? jobj.getJSONArray("periodtotal") :jobj.getJSONArray("total");
//                JSONArray prefinalValArr = jobj.getJSONArray("pretotal");
//                JSONArray openValArray = jobj.getJSONArray("opentotal");
//                JSONArray endValArray = jobj.getJSONArray("endtotal");
//                pretotalAsset = Double.parseDouble(prefinalValArr.getString(1));
//                pretotalLibility = Double.parseDouble(prefinalValArr.getString(0));
//                totalAsset = Double.parseDouble(finalValArr.getString(1));
//                totalLibility = Double.parseDouble(finalValArr.getString(0));
//                totalOpenAsset = Double.parseDouble(openValArray.getString(1));
//                totalOpenLiability = Double.parseDouble(openValArray.getString(0));
//                totalEndAsset = Double.parseDouble(endValArray.getString(1));
//                totalEndLiability = Double.parseDouble(endValArray.getString(0));
//                String leftSummaryHeader = "", rightSummaryHeader = "";
//                if(flag==1){
//                	if(toggle == 0){
//                		leftSummaryHeader = "Total Liability";
//                		rightSummaryHeader = "Total Asset";
//                	}else{
//                		leftSummaryHeader = "Total Asset";
//                		rightSummaryHeader = "Total Liability";
//                	}
//                }else if(flag==2){
//                    leftSummaryHeader = "Total Debit";
//                    rightSummaryHeader = "Total Credit";
//                }
                JSONObject tempObj = new JSONObject();
                if (periodView) {
                    tempObj.put("laccountname", leftSummaryHeader);
                    tempObj.put("lopeningamount",leftOpen);
                    tempObj.put("lperiodamount",leftPeriod);
                    tempObj.put("lendingamount",leftEnd);
                } else if(isCompare) {
                    tempObj.put("laccountname", leftSummaryHeader);
                    tempObj.put("lamount", leftPeriod);
                    tempObj.put("lpreamount", leftPreTotal);
                } else {
                    tempObj.put("laccountname", leftSummaryHeader);
                    tempObj.put("lamount", leftPeriod);                  
                }
                jArr.put(tempObj);
            }
            retObj.put(Constants.RES_data,jArr);
        }catch(Exception ex){
             Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return retObj;
    }
    
   public JSONObject getJournalEntryJsonMerged(HashMap<String, Object> requestParams, List list, JSONArray jArr) throws ServiceException {
        JSONObject jobj = new JSONObject();
        //        JSONArray jArr=new JSONArray();
        try{
            String currencyid = (String) requestParams.get(Constants.globalCurrencyKey);
            String companyid = (String) requestParams.get(Constants.companyKey);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
           KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            KwlReturnObject prefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), (String)requestParams.get(Constants.companyKey));
            CompanyAccountPreferences pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
            String cashAccount = pref.getCashAccount().getID();
            DateFormat df = (DateFormat) requestParams.get("df");
            List<String> jeIdList = new ArrayList();
            for(int i=0; i< list.size(); i++){
                JournalEntry entry = (JournalEntry) list.get(i);
                jeIdList.add(entry.getID());
            }

            /*
             Create custom field map
             */
            HashMap<String, Object> fieldrequestParams = new HashMap();
            HashMap<String, String> JEcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> JEcustomDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, 0));
            HashMap<String, String> JEreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> JEFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, JEreplaceFieldMap, JEcustomFieldMap, JEcustomDateFieldMap);

            fieldrequestParams = new HashMap();
            HashMap<String, String> VIcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> VIcustomDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Vendor_Invoice_ModuleId, 0));
            HashMap<String, String> VIreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> VIFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, VIreplaceFieldMap, VIcustomFieldMap, VIcustomDateFieldMap);

            fieldrequestParams = new HashMap();
            HashMap<String, String> MPcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> MPcustomDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Make_Payment_ModuleId, 0));
            HashMap<String, String> MPreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> MPFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, MPreplaceFieldMap, MPcustomFieldMap, MPcustomDateFieldMap);

            fieldrequestParams = new HashMap();
            HashMap<String, String> DNcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> DNcustomDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId, 0));
            HashMap<String, String> DNreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> DNFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, DNreplaceFieldMap, DNcustomFieldMap, DNcustomDateFieldMap);

            fieldrequestParams = new HashMap();
            HashMap<String, String> CIcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> CIcustomDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Invoice_ModuleId, 0));
            HashMap<String, String> CIreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> CIFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, CIreplaceFieldMap, CIcustomFieldMap, CIcustomDateFieldMap);

            fieldrequestParams = new HashMap();
            HashMap<String, String> RPcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> RPcustomDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Receive_Payment_ModuleId, 0));
            HashMap<String, String> RPreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> RPFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, RPreplaceFieldMap, RPcustomFieldMap, RPcustomDateFieldMap);

            fieldrequestParams = new HashMap();
            HashMap<String, String> CNcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> CNcustomDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Credit_Note_ModuleId, 0));
            HashMap<String, String> CNreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> CNFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, CNreplaceFieldMap, CNcustomFieldMap, CNcustomDateFieldMap);

            fieldrequestParams = new HashMap();
            HashMap<String, String> FAVIcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> FAVIcustomDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId, 0));
            HashMap<String, String> FAVIreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FAVIFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, FAVIreplaceFieldMap, FAVIcustomFieldMap, FAVIcustomDateFieldMap);

            fieldrequestParams = new HashMap();
            HashMap<String, String> FACIcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> FACIcustomDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId, 0));
            HashMap<String, String> FACIreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FACIFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, FACIreplaceFieldMap, FACIcustomFieldMap, FACIcustomDateFieldMap);

            fieldrequestParams = new HashMap();
            HashMap<String, String> LCIcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> LCIcustomDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.LEASE_INVOICE_MODULEID, 0));
            HashMap<String, String> LCIreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> LCIFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, LCIreplaceFieldMap, LCIcustomFieldMap, LCIcustomDateFieldMap);

            fieldrequestParams = new HashMap();
            HashMap<String, String> ConsCIcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> ConsCIcustomDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_ConsignmentInvoice_ModuleId, 0));
            HashMap<String, String> ConsCIreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> ConsCIFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, ConsCIreplaceFieldMap, ConsCIcustomFieldMap, ConsCIcustomDateFieldMap);

            fieldrequestParams = new HashMap();
            HashMap<String, String> ConsVIcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> ConsVIcustomDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Consignment_GoodsReceipt_ModuleId, 0));
            HashMap<String, String> ConsVIreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> ConsVIFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, ConsVIreplaceFieldMap, ConsVIcustomFieldMap, ConsVIcustomDateFieldMap);
            String inParam = getInParamFromList(jeIdList);
            requestParams.put("jeIds",inParam);
            requestParams.put("inventoryValuationType", pref.getInventoryValuationType());//ERM-656
            Map<String, JSONArray> jeDetails = getJournalEntryDetailsMap(requestParams);

            boolean withoutinventory = true;//(Boolean) requestParams.get("withoutinventory");
            HashMap<String, Object> reqParams = new HashMap<String, Object>();
            reqParams.put(Constants.companyKey,(String)requestParams.get(Constants.companyKey));
            reqParams.put("includeFixedAssetInvoicesFlag",true);
            reqParams.put("jeIds",inParam);
            reqParams.put("CashAndInvoice" ,Boolean.FALSE.parseBoolean(String.valueOf(requestParams.get("CashAndInvoice"))));

            Map<String, BillingInvoice> billingInvoiceMap = Collections.emptyMap();
            Map<String, BillingGoodsReceipt> billingGrMap = Collections.emptyMap();
            Map<String, Object[]> billingCreditNoteMap = Collections.emptyMap();
            Map<String, Object[]> billingDebitNoteMap = Collections.emptyMap();
            Map<String, Object[]> billingPaymentReceivedMap = Collections.emptyMap();
            Map<String, Object[]> billingPaymentMadeMap = Collections.emptyMap();
//            Map<String, Invoice> invoiceMap = Collections.emptyMap();
//            Map<String, GoodsReceipt> grMap = Collections.emptyMap();
//            Map<String, Invoice> consignmentInvoiceMap = Collections.emptyMap();
//            Map<String, GoodsReceipt> consignmentGrMap = Collections.emptyMap();
            Map<String, Object[]> creditNoteMap = Collections.emptyMap();
            Map<String, Object[]> debitNoteMap = Collections.emptyMap();
            Map<String, Object[]> creditNoteMapVendor = Collections.emptyMap();
            Map<String, Object[]> debitNoteMapCustomer = Collections.emptyMap();
            Map<String, Object[]> paymentReceivedMap = Collections.emptyMap();
            Map<String, Object[]> paymentMadeMap = Collections.emptyMap();
            Map<String, DeliveryOrder> doMap = Collections.emptyMap();
            Map<String, AssetDepreciationDetail> assetDepreciationDetailMap = Collections.emptyMap();
            Map<String, BankReconciliationDetail> BRDetailMap = Collections.emptyMap();
            Map<String, BankUnreconciliationDetail> BURDetailMap = Collections.emptyMap();
            Map<String, Object[]> disHonouredpaymentReceivedMap = Collections.emptyMap();
            Map<String, Object[]> disHonouredPaymentMadeMap = Collections.emptyMap();
            Map<String, ProductBuild> buildAssemblyMap = Collections.emptyMap();
            Map<String, Disbursement> disbursementMap = Collections.emptyMap();
            Map<String, InvoiceWriteOff> invoiceWriteOffMap = Collections.emptyMap();            
            Map<String, InvoiceWriteOff> invoiceRevereseWriteOffMap = Collections.emptyMap();    
            Map<String, StockAdjustment> stockAdjustmentMap = Collections.emptyMap();
            
            billingGrMap = getBillingGoodsReceiptMap(reqParams);
            billingCreditNoteMap = getBillingCreditNoteMap(reqParams);
            billingDebitNoteMap = getBillingDebitNoteMap(reqParams);
            billingPaymentReceivedMap = getBillingPaymentReceivedMap(reqParams);
            billingPaymentMadeMap = getBillingPaymentMadeMap(reqParams);
            BRDetailMap=getJEBRMap(reqParams);
            BURDetailMap=getJEBURMap(reqParams);
            // } else {

//            invoiceMap = getInvoiceMap(reqParams);          
            doMap = getDOMap(reqParams);
//            grMap = getGoodsReceiptMap(reqParams);
//            reqParams.put("isConsignment", true);  
//            consignmentInvoiceMap = getInvoiceMap(reqParams);
//            consignmentGrMap = getGoodsReceiptMap(reqParams);
            reqParams.put("isConsignment", false); 
            reqParams.put("isPartyEntry", true); // fetch only CN/DN whichi is created by party journal
            creditNoteMap = getCreditNoteMap(reqParams);
            debitNoteMap = getDebitNoteMap(reqParams); 
            creditNoteMapVendor = creditNoteMapVendor(reqParams);
            debitNoteMapCustomer = debitNoteMapCustomer(reqParams);
            reqParams.put("paymentWindowType", 3);// fetch payment/receipt only against GL
            paymentReceivedMap = getPaymentReceivedMap(reqParams);
            paymentMadeMap = getPaymentMadeMap(reqParams);
            reqParams.remove("paymentWindowType");
            assetDepreciationDetailMap = getAssetDepreciationMap(reqParams);
            reqParams.put("disHonouredJeIds",inParam);
            disHonouredpaymentReceivedMap = getPaymentReceivedMap(reqParams);
            /**
             * Remove the Bank transfer and normal JE ids from hashmap to get the dishonounred JE records
             * from below getPaymentMadeMap method.
             */
            reqParams.remove("jeIds");
            disHonouredPaymentMadeMap = getPaymentMadeMap(reqParams);
            reqParams.put("jeIds", inParam);
            buildAssemblyMap = getBuildAssemblyMap(reqParams);
            disbursementMap = getLoanDisburementMap(reqParams);
            invoiceWriteOffMap = getInvoiceWriteOffMap(reqParams);
            invoiceRevereseWriteOffMap = getInvoiceReverseWriteOffMap(reqParams);
            stockAdjustmentMap = getStockAdjustmentMap(reqParams);
            
            // }

            Iterator itr = list.iterator();
            while(itr.hasNext()) {
                JournalEntry entry = (JournalEntry) itr.next();
                JSONObject obj = new JSONObject();
                int transactionModuleId=entry.getTransactionModuleid();
                obj.put("journalentryid", entry.getID());
                obj.put("isFromEclaim", entry.isIsFromEclaim());
                obj.put("ischequeprinted", entry.isChequeprinted());
                obj.put("isdisposalje", false);
                if(entry.getPaidTo()!=null){
                    obj.put("paidToCmb", entry.getPaidTo().getID());
                    obj.put("paidTo", entry.getPaidTo().getValue());
                }
                if(entry.getPaymentMethod()!=null){
                    obj.put("pmtmethod", entry.getPaymentMethod().getID());
                    obj.put("pmtmethodtype", entry.getPaymentMethod().getDetailType());
                    obj.put("pmtmethodaccountname", (entry.getPaymentMethod().getAccount()!=null)?entry.getPaymentMethod().getAccount().getName():"");
                    obj.put("pmtmethodaccountid", (entry.getPaymentMethod().getAccount()!=null)?entry.getPaymentMethod().getAccount().getID():"");
                    if(entry.getTypeValue()== Constants.FundTransfer_Journal_Entry && entry.getRepeateJE()!=null){
                        obj.put("chequeOption", entry.getRepeateJE().isAutoGenerateChequeNumber());
                    } else {
                        obj.put("chequeOption", false);
                    }
                }
                obj.put("gstrType", entry.getGstrType());
                obj.put("itctransactionids", entry.getItcTransactionIds());
                if(entry.getCheque() !=null){
                    obj.put("chequeNumber", entry.getCheque().getChequeNo());
                    obj.put("bankName", entry.getCheque().getBankName());
                    obj.put("chequeDate", df.format(entry.getCheque().getDueDate()));
                    obj.put("description", entry.getCheque().getDescription());
                    obj.put("chequesequenceformatid", entry.getCheque().getSeqformat()!=null?entry.getCheque().getSeqformat().getId():"");
                    // Check if cheque for JE is reconcilied or not
//                    KwlReturnObject reconciliationDetailResult = accBankReconciliationObj.getBRfromJE(entry.getID(), entry.getCompany().getCompanyID(), false);
//                    if (reconciliationDetailResult != null && reconciliationDetailResult.getEntityList() != null && reconciliationDetailResult.getEntityList().size() > 0) {
//                        BankReconciliationDetail brd = (BankReconciliationDetail) reconciliationDetailResult.getEntityList().get(0);
//                        if (brd.getBankReconciliation().getClearanceDate() != null) {
//                            obj.put("isReconcilied", true);
//                        }
//                    }
                }
                //To check whether the JE is reconciled or not. SDP-9631
                KwlReturnObject reconciliationDetailResult = accBankReconciliationObj.getBRfromJE(entry.getID(), entry.getCompany().getCompanyID(), false);
                if (reconciliationDetailResult != null && reconciliationDetailResult.getEntityList() != null && reconciliationDetailResult.getEntityList().size() > 0) {
                    BankReconciliationDetail brd = (BankReconciliationDetail) reconciliationDetailResult.getEntityList().get(0);
                    if (brd.getBankReconciliation().getClearanceDate() != null) {
                        obj.put("isReconcilied", true);
                    }
                }


                obj.put(  "approvalstatus",  (   (entry.getApprovestatuslevel()<0)?"Rejected":((entry.getApprovestatuslevel()==11)?"Approved" : "Waiting for approval at Level -"+entry.getApprovestatuslevel() )    ));
                obj.put("entryno", entry.getEntryNumber());
                obj.put(Constants.SEQUENCEFORMATID, entry.getSeqformat()!=null?entry.getSeqformat().getID():"");
                obj.put("currencysymbol",entry.getCurrency()==null?currency.getSymbol(): entry.getCurrency().getSymbol());
                obj.put("memo", entry.getMemo());
                obj.put("costcenter", entry.getCostcenter() == null?"":entry.getCostcenter().getID());
                obj.put("deleted", entry.isDeleted());
                obj.put("isreverseje", entry.isIsReverseJE());
                obj.put("isonetimereverse", entry.isIsOneTimeReverse());
                if(StringUtil.isNullOrEmpty(entry.getReverseJournalEntry())){
                    obj.put("reversejeno","");   
                }else{
                    KwlReturnObject jeres= accountingHandlerDAOobj.getObject(JournalEntry.class.getName(), (String)entry.getReverseJournalEntry());
                    JournalEntry je = (JournalEntry) jeres.getEntityList().get(0);
                    obj.put("reversejeno",je!=null?je.getEntryNumber():"");  
                }
                obj.put("entrydate", df.format(entry.getEntryDate()));
                obj.put(Constants.companyKey, entry.getCompany().getCompanyID());
                obj.put("companyname", entry.getCompany().getCompanyName());
                obj.put("eliminateflag", entry.isEliminateflag()?1:0);
                obj.put("revaluationid", entry.getIsReval());
                obj.put("externalcurrencyrate", entry.getExternalCurrencyRate());
                obj.put(Constants.currencyKey, entry.getCurrency()!= null ? entry.getCurrency().getCurrencyID() : "");
                obj.put("typeValue", entry.getTypeValue());
                obj.put("partlyJeEntryWithCnDn", entry.getPartlyJeEntryWithCnDn());
                if( entry.getParentJE() != null)
                     obj.put("parentje",entry.getParentJE().getID());
                else
                    obj.put("parentje","");
                if(jeDetails.containsKey(entry.getID())) {
                    obj.put("jeDetails", jeDetails.get(entry.getID()));
                } else {
//                    obj.put("jeDetails", "[]");
                        continue;//When there is no jedetail for je then there is no need to put such je in jarray because such record is corrupt.
                }
                 boolean isPartyJournalEntry=entry.getTypeValue()==2;
                    if(BRDetailMap.containsKey(entry.getID())){
                         obj.put("isBR","true");
                          BankReconciliationDetail brd =BRDetailMap.get(entry.getID());
                          obj.put("BRID",brd.getID());
                    }
                 
                    if(BURDetailMap.containsKey(entry.getID())){
                         obj.put("isBUR","true");
                         BankUnreconciliationDetail brd =BURDetailMap.get(entry.getID());
                         obj.put("BRID",brd.getID());
                    }
                //if(withoutinventory){
                    if(billingGrMap.containsKey(entry.getID())){
                        if(billingGrMap.get(entry.getID()).getVendorEntry() != null && billingGrMap.get(entry.getID()).getVendorEntry().getAccount().getID().equals(cashAccount)){
                        obj.put("transactionID", billingGrMap.get(entry.getID()).getBillingGoodsReceiptNumber());
                        obj.put("transactionDetails", Constants.CASH_PURCHASE + ", " + billingGrMap.get(entry.getID()).getVendor().getName());
                        obj.put(Constants.billid, billingGrMap.get(entry.getID()).getID());
                        obj.put("type", Constants.CASH_PURCHASE);
                        }else{
                        obj.put("transactionID", billingGrMap.get(entry.getID()).getBillingGoodsReceiptNumber());
                        obj.put("transactionDetails", Constants.VENDOR_INVOICE + ", " + billingGrMap.get(entry.getID()).getVendor().getName());
                        obj.put(Constants.billid, billingGrMap.get(entry.getID()).getID());
                        obj.put("type", Constants.VENDOR_INVOICE);
                    }
                    withoutinventory = true;
                    }else if(billingCreditNoteMap.containsKey(entry.getID())){
                        obj.put("transactionID", ((BillingCreditNote)billingCreditNoteMap.get(entry.getID())[0]).getCreditNoteNumber());
                        obj.put("transactionDetails", Constants.CREDIT_NOTE + ", " + ((Customer)billingCreditNoteMap.get(entry.getID())[1]).getName());
                        obj.put("noteid", ((BillingCreditNote)billingCreditNoteMap.get(entry.getID())[0]).getID());
                    obj.put("type", Constants.CREDIT_NOTE);
                    withoutinventory = true;
                    }else if(billingDebitNoteMap.containsKey(entry.getID())){
                        obj.put("transactionID", ((BillingDebitNote)billingDebitNoteMap.get(entry.getID())[0]).getDebitNoteNumber());
                        obj.put("transactionDetails", Constants.DEBIT_NOTE + ", " + ((Vendor)billingDebitNoteMap.get(entry.getID())[1]).getName());
                        obj.put("noteid", ((BillingDebitNote)billingDebitNoteMap.get(entry.getID())[0]).getID());
                    obj.put("type", Constants.DEBIT_NOTE);
                    withoutinventory = true;
                    }else if(billingPaymentReceivedMap.containsKey(entry.getID())){
                        obj.put("transactionID", ((BillingReceipt)billingPaymentReceivedMap.get(entry.getID())[0]).getBillingReceiptNumber());
                        obj.put("transactionDetails", Constants.PAYMENT_RECEIVED + ", " + ((Account)billingPaymentReceivedMap.get(entry.getID())[1]).getName());
                        obj.put(Constants.billid, ((BillingReceipt)billingPaymentReceivedMap.get(entry.getID())[0]).getID());
                    obj.put("type", Constants.PAYMENT_RECEIVED);
                    withoutinventory = true;
                    }else if(billingPaymentMadeMap.containsKey(entry.getID())){
                        obj.put("transactionID", ((BillingPayment)billingPaymentMadeMap.get(entry.getID())[0]).getBillingPaymentNumber());
                        obj.put("transactionDetails", Constants.PAYMENT_MADE + ", " + ((Account)billingPaymentMadeMap.get(entry.getID())[1]).getName());
                        obj.put(Constants.billid, ((BillingPayment)billingPaymentMadeMap.get(entry.getID())[0]).getID());
                    obj.put("type", Constants.PAYMENT_MADE);
                    withoutinventory = true;
                    }else if(transactionModuleId==Constants.Acc_Invoice_ModuleId || transactionModuleId == Constants.Acc_Cash_Sales_ModuleId || transactionModuleId==Constants.Acc_FixedAssets_DisposalInvoice_ModuleId || transactionModuleId==Constants.LEASE_INVOICE_MODULEID) {
                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), entry.getTransactionId());
                        Invoice invoice = (Invoice) KwlInvoice.getEntityList().get(0);
                        if(invoice!=null){
                            if (invoice.getCustomerEntry() != null && invoice.isCashtransaction()) {
                                obj.put("transactionID",invoice.getInvoiceNumber());
                                obj.put("transactionDetails", Constants.CASH_SALE + ", " + invoice.getCustomer().getName());
                                obj.put(Constants.billid, invoice.getID());
                                obj.put("type", Constants.CASH_SALE);
                            } else {
                                obj.put("transactionID", invoice.getInvoiceNumber());
                                if (invoice.isIsOpeningBalenceInvoice()) {
                                    obj.put("isOpeningDocument", true);
                                }
                                boolean fixedassetdisposalflag = invoice.isFixedAssetInvoice();
                                boolean isConsignmentFlag = invoice.isIsconsignment();
                                boolean isLeaseFixedAsset = invoice.isFixedAssetLeaseInvoice();
                                /*
                                 * If entry.getIsReval() is used for Unrealised Gain/Loss and Realised JE
                                 */
                                if (entry.getIsReval() == Constants.isUnRealisedJE) {
                                    obj.put("transactionDetails", "Unrealised Gain/Loss");
                                } else if (entry.getIsReval() == Constants.isRealisedJE) { // Used for Realised JE
                                    obj.put("transactionDetails", "Realised Gain/Loss");
                                } else {
                                    obj.put("transactionDetails", ((fixedassetdisposalflag == true) ? Constants.DISPOSAL_INVOICE : ((isConsignmentFlag == true) ? Constants.CUSTOMERCON_INVOICE : Constants.CUSTOMER_INVOICE)) + ", " + invoice.getCustomer().getName());
                                }
                                obj.put("isLeaseFixedAsset",isLeaseFixedAsset);
                                obj.put(Constants.billid, invoice.getID());
                                obj.put("type", Constants.CUSTOMER_INVOICE);
                            }
                            withoutinventory = false;
                        }
                    }else if(transactionModuleId==Constants.Acc_ConsignmentInvoice_ModuleId){
                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), entry.getTransactionId());
                        Invoice invoice = (Invoice) KwlInvoice.getEntityList().get(0);
                        if (invoice != null) {
                            obj.put("transactionID", invoice.getInvoiceNumber());
                            obj.put("transactionDetails", (Constants.CUSTOMERCON_INVOICE) + ", " + invoice.getCustomer().getName());
                            obj.put(Constants.billid, invoice.getID());
                            obj.put("type", Constants.CUSTOMERCON_INVOICE);
                            withoutinventory = false;
                        }
                    }else if(assetDepreciationDetailMap.containsKey(entry.getID())){
                    obj.put("transactionID", "Fixed Asset Depreciation");
                    obj.put("transactionDetails", "Fixed Asset Depreciation");
                    }else if(doMap.containsKey(entry.getID())){
                    obj.put("transactionID", doMap.get(entry.getID()).getDeliveryOrderNumber());
                    obj.put("transactionDetails", Constants.Delivery_Order);
                    obj.put(Constants.billid, doMap.get(entry.getID()).getID());
                    obj.put("type", Constants.Delivery_Order);
                    withoutinventory = false;
                    }else if(transactionModuleId==Constants.Acc_Cash_Purchase_ModuleId ||transactionModuleId==Constants.Acc_Vendor_Invoice_ModuleId || transactionModuleId==Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId) {
                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), entry.getTransactionId());
                        GoodsReceipt goodsReceipt = (GoodsReceipt) KwlgoodsReceipt.getEntityList().get(0);
                        if(goodsReceipt!=null ){
                            if (goodsReceipt.getVendorEntry() != null && goodsReceipt.isCashtransaction()) {
                                obj.put("transactionID", goodsReceipt.getGoodsReceiptNumber());
                                obj.put("transactionDetails", Constants.CASH_PURCHASE + ", " + goodsReceipt.getVendor().getName());
                                obj.put(Constants.billid, goodsReceipt.getID());
                                obj.put("type", Constants.CASH_PURCHASE);
                            } else {
                                obj.put("transactionID", goodsReceipt.getGoodsReceiptNumber());
                                if(goodsReceipt.isIsOpeningBalenceInvoice()){
                                    obj.put("isOpeningDocument",true);
                                }
                                boolean fixedassetinvoiceflag = goodsReceipt.isFixedAssetInvoice();
                                /*
                                 * If entry.getIsReval() is used for Unrealised Gain/Loss and Realised JE
                                 */
                                if (entry.getIsReval() == Constants.isUnRealisedJE) {
                                    obj.put("transactionDetails", "Unrealised Gain/Loss");
                                } else if (entry.getIsReval() == Constants.isRealisedJE) { // Used for Realised JE
                                    obj.put("transactionDetails", "Realised Gain/Loss");
                                } else {
                                    obj.put("transactionDetails", ((fixedassetinvoiceflag == true) ? Constants.ACQUIRED_INVOICE : Constants.VENDOR_INVOICE) + ", " + goodsReceipt.getVendor().getName());
                                }
                                obj.put(Constants.billid, goodsReceipt.getID());
                                obj.put("type", Constants.VENDOR_INVOICE);
                            }
                            withoutinventory = false;
                        }
                    }else if(transactionModuleId==Constants.Acc_Consignment_GoodsReceipt_ModuleId){
                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), entry.getTransactionId());
                        GoodsReceipt goodsReceipt = (GoodsReceipt) KwlgoodsReceipt.getEntityList().get(0);
                        if (goodsReceipt != null) {
                            obj.put("transactionID", goodsReceipt.getGoodsReceiptNumber());
                            obj.put("transactionDetails", (Constants.VENDORCON_INVOICE) + ", " + goodsReceipt.getVendor().getName());
                            obj.put(Constants.billid, goodsReceipt.getID());
                            obj.put("type", Constants.VENDORCON_INVOICE);
                            obj.put("isConsignment", goodsReceipt.isIsconsignment());
                            withoutinventory = false;
                        }
                    } else if (transactionModuleId == Constants.Acc_Goods_Receipt_ModuleId && !StringUtil.isNullOrEmpty(entry.getTransactionId())) {
                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), entry.getTransactionId());
                        GoodsReceiptOrder grOrder = (GoodsReceiptOrder) KwlgoodsReceipt.getEntityList().get(0);
                        if (grOrder != null) {
                            obj.put("transactionID", grOrder.getGoodsReceiptOrderNumber());
                            obj.put("transactionDetails", (Constants.Goods_Receipt) + ", " + grOrder.getVendor().getName());
                            obj.put(Constants.billid, grOrder.getID());
                            obj.put("type", Constants.GOODS_RECEIPT_ORDER);
                            withoutinventory = false;
                        }
                    } else if (transactionModuleId == Constants.Acc_Purchase_Return_ModuleId && !StringUtil.isNullOrEmpty(entry.getTransactionId())) {
                        KwlReturnObject kwlPurchaseReturn = accountingHandlerDAOobj.getObject(PurchaseReturn.class.getName(), entry.getTransactionId());
                        PurchaseReturn purchaseReturn = (PurchaseReturn) kwlPurchaseReturn.getEntityList().get(0);
                        if (purchaseReturn != null) {
                            obj.put("transactionID", purchaseReturn.getPurchaseReturnNumber());
                            obj.put("transactionDetails", (Constants.PURCHASE_RETURN) + ", " + purchaseReturn.getVendor().getName());
                            obj.put(Constants.billid, purchaseReturn.getID());
                            obj.put("type", Constants.PURCHASE_RETURN);
                            withoutinventory = false;
                        }
                    } else if (transactionModuleId == Constants.Inventory_Stock_Adjustment_ModuleId && !StringUtil.isNullOrEmpty(entry.getTransactionId())) {
                        KwlReturnObject kwlStockAdjustment = accountingHandlerDAOobj.getObject(StockAdjustment.class.getName(), entry.getTransactionId());
                        StockAdjustment stockAdjustment = (StockAdjustment) kwlStockAdjustment.getEntityList().get(0);
                        if (stockAdjustment != null) {
                            obj.put("transactionID", stockAdjustment.getTransactionNo());
                            obj.put("transactionDetails", (Constants.STOCK_ADJUSTMENT));
                            obj.put(Constants.billid,  stockAdjustment.getId());
                            obj.put("type", Constants.STOCK_ADJUSTMENT);
                            withoutinventory = false;
                        }
                    } else if (transactionModuleId == Constants.Acc_Delivery_Order_ModuleId && !StringUtil.isNullOrEmpty(entry.getTransactionId())) {
                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), entry.getTransactionId());
                        DeliveryOrder deliveryOrder = (DeliveryOrder) KwlgoodsReceipt.getEntityList().get(0);
                        if (deliveryOrder != null) {
                            obj.put("transactionID", deliveryOrder.getDeliveryOrderNumber());
                            obj.put("transactionDetails", (Constants.Delivery_Order) + ", " + deliveryOrder.getCustomer().getName());
                            obj.put(Constants.billid, deliveryOrder.getID());
                            obj.put("type", Constants.Delivery_Order);
                            withoutinventory = false;
                        }
                    }  else if (transactionModuleId == Constants.Acc_Sales_Return_ModuleId && !StringUtil.isNullOrEmpty(entry.getTransactionId())) {
                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), entry.getTransactionId());
                        SalesReturn salesReturn = (SalesReturn) KwlgoodsReceipt.getEntityList().get(0);
                        if (salesReturn != null) {
                            obj.put("transactionID", salesReturn.getSalesReturnNumber());
                            obj.put("transactionDetails", (Constants.SALES_RETURN) + ", " + salesReturn.getCustomer().getName());
                            obj.put(Constants.billid, salesReturn.getID());
                            obj.put("type", Constants.SALES_RETURN);
                            withoutinventory = false;
                        }
                    } else if (isPartyJournalEntry && creditNoteMap.containsKey(entry.getID())) {
                        CreditNote creditNote = (CreditNote) creditNoteMap.get(entry.getID())[0];
                        obj.put("transactionID", "");
                        obj.put("transactionDetails", "Party Journal Entry");

                        //below data used in edit party JE 
                        DebitNote debitNote = null;
                        if (debitNoteMap.containsKey(entry.getID())) {
                            debitNote = (DebitNote) debitNoteMap.get(entry.getID())[0];
                        } else if (debitNoteMapCustomer.containsKey(entry.getID())) {
                            debitNote = (DebitNote) debitNoteMapCustomer.get(entry.getID())[0];
                        }
                        getPartyJECNDNDetails(obj, creditNote, debitNote);
                        obj.put("noteid", creditNote.getID());
                        obj.put("cntype", creditNote.getCntype());
                        withoutinventory = false;
                    }else if(isPartyJournalEntry && creditNoteMapVendor.containsKey(entry.getID())){
                        CreditNote creditNote = (CreditNote) creditNoteMapVendor.get(entry.getID())[0];
                        obj.put("transactionID", "");
                        obj.put("transactionDetails", "Party Journal Entry");

                        //below data used in edit party JE 
                        DebitNote debitNote = null;
                        if (debitNoteMap.containsKey(entry.getID())) {
                            debitNote = (DebitNote) debitNoteMap.get(entry.getID())[0];
                        } else if (debitNoteMapCustomer.containsKey(entry.getID())) {
                            debitNote = (DebitNote) debitNoteMapCustomer.get(entry.getID())[0];
                        }
                        getPartyJECNDNDetails(obj, creditNote, debitNote);
                        obj.put("noteid", creditNote.getID());
                        obj.put("cntype", creditNote.getCntype());
                        withoutinventory = false;
                    }else if(transactionModuleId == Constants.Acc_Credit_Note_ModuleId && !isPartyJournalEntry){
                        KwlReturnObject KwlCreditNote = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), entry.getTransactionId());
                        CreditNote creditNote = (CreditNote)KwlCreditNote.getEntityList().get(0);
                        if (creditNote != null) {
                            obj.put("type", Constants.CREDIT_NOTE);
                            obj.put("transactionID", creditNote.getCreditNoteNumber());
                            if (creditNote.isIsOpeningBalenceCN()) {
                                obj.put("isOpeningDocument", true);
                            }
                            /*
                             * If entry.getIsReval() is used for Unrealised Gain/Loss and Realised JE
                             */
                            if (entry.getIsReval() == Constants.isUnRealisedJE) {
                                obj.put("transactionDetails", "Unrealised Gain/Loss");
                            } else if (entry.getIsReval() == Constants.isRealisedJE) { // Used for Realised JE
                                obj.put("transactionDetails", "Realised Gain/Loss");
                            } else {
                                obj.put("transactionDetails", Constants.CREDIT_NOTE + ", " + (creditNote.getCustomer() != null ? creditNote.getCustomer().getName() : creditNote.getVendor().getName()));
                            }
                            obj.put("noteid", creditNote.getID());
                            obj.put("cntype", creditNote.getCntype());
                            withoutinventory = false;
                        }
                    } else if (isPartyJournalEntry && debitNoteMap.containsKey(entry.getID())) {
                        DebitNote debitNote = (DebitNote) debitNoteMap.get(entry.getID())[0];
                        obj.put("transactionID", "");
                        obj.put("transactionDetails", "Party Journal Entry");
                        //below data used in edit party JE
                        CreditNote creditNote = null;
                        if (creditNoteMap.containsKey(entry.getID())) {
                            creditNote = (CreditNote) creditNoteMap.get(entry.getID())[0];
                        } else if (creditNoteMapVendor.containsKey(entry.getID())) {
                            creditNote = (CreditNote) creditNoteMapVendor.get(entry.getID())[0];
                        }
                        getPartyJECNDNDetails(obj, creditNote, debitNote);
                        obj.put("noteid", debitNote.getID());
                        obj.put("cntype", debitNote.getDntype());
                        withoutinventory = false;
                    }else if(isPartyJournalEntry && debitNoteMapCustomer.containsKey(entry.getID())){
                        DebitNote debitNote = (DebitNote) debitNoteMapCustomer.get(entry.getID())[0];
                        obj.put("transactionID", "");
                        obj.put("transactionDetails", "Party Journal Entry");
                        //below data used in edit party JE
                        CreditNote creditNote = null;
                        if (creditNoteMap.containsKey(entry.getID())) {
                            creditNote = (CreditNote) creditNoteMap.get(entry.getID())[0];
                        } else if (creditNoteMapVendor.containsKey(entry.getID())) {
                            creditNote = (CreditNote) creditNoteMapVendor.get(entry.getID())[0];
                        }
                        getPartyJECNDNDetails(obj, creditNote, debitNote);
                        obj.put("noteid", debitNote.getID());
                        obj.put("cntype", debitNote.getDntype());
                        withoutinventory = false;
                    }else if(transactionModuleId==Constants.Acc_Debit_Note_ModuleId) {
                        KwlReturnObject KwlDebitNote = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), entry.getTransactionId());
                        DebitNote debitNote = (DebitNote) KwlDebitNote.getEntityList().get(0);
                        if (debitNote != null) {
                            obj.put("type", Constants.DEBIT_NOTE);
                            obj.put("transactionID", debitNote.getDebitNoteNumber());
                            if (debitNote.isIsOpeningBalenceDN()) {
                                obj.put("isOpeningDocument", true);
                            }
                            /*
                             * If entry.getIsReval() is used for Unrealised Gain/Loss and Realised JE
                             */
                            if (entry.getIsReval() == Constants.isUnRealisedJE) {
                                obj.put("transactionDetails", "Unrealised Gain/Loss");
                            } else if (entry.getIsReval() == Constants.isRealisedJE) { // Used for Realised JE
                                obj.put("transactionDetails", "Realised Gain/Loss");
                            } else {
                                obj.put("transactionDetails", Constants.DEBIT_NOTE + ", " + (debitNote.getVendor() != null ? debitNote.getVendor().getName() : debitNote.getCustomer().getName()));
                            }
                            obj.put("noteid", debitNote.getID());
                            obj.put("cntype", debitNote.getDntype());
                            withoutinventory = false;
                        }
                }else if(transactionModuleId==Constants.Acc_Receive_Payment_ModuleId) {
                        KwlReturnObject resultReceipt = accountingHandlerDAOobj.getObject(Receipt.class.getName(), entry.getTransactionId());
                        Receipt receipt = (Receipt) resultReceipt.getEntityList().get(0);
                        boolean adddetails=true;
                        if (receipt != null) {
                            String name = "";
                            if (receipt.getCustomer() != null) {
                                name = receipt.getCustomer().getName();
                            } else if (receipt.getVendor() != null && !receipt.getVendor().equals("")) {
                                KwlReturnObject result = accountingHandlerDAOobj.getObject(Vendor.class.getName(), receipt.getVendor());
                                Vendor vendor = (Vendor) result.getEntityList().get(0);
                                name = vendor.getName();
                            } else {
                                if (paymentReceivedMap.containsKey(entry.getID())) {
                                    Account account = (Account) paymentReceivedMap.get(entry.getID())[1];
                                    name = account.getName();
                                } else {
                                    adddetails=false;
                                    obj.put("transactionID", "");
                                    obj.put("transactionDetails", "");
                                    JSONArray jeDetailsSorted = AccReportsHandler.sortJsonArrayOnJEDetailSerialNo(obj.getJSONArray("jeDetails"));
                                    obj.put("jeDetails", jeDetailsSorted);
                                }
                            }
                            if(adddetails){
                                obj.put("transactionID", receipt.getReceiptNumber());
                                if (receipt.getJournalEntryForBankCharges() != null && receipt.getJournalEntryForBankCharges().getID() == entry.getID()) {
                                    obj.put("transactionDetails", "Bank Charges JE for Receipt \"" + receipt.getReceiptNumber() + "\", " + name);
                                } else if (receipt.getJournalEntryForBankInterest() != null && receipt.getJournalEntryForBankInterest().getID() == entry.getID()) {
                                    obj.put("transactionDetails", "Bank Interest JE for Receipt \"" + receipt.getReceiptNumber() + "\", " + name);
                                } else {
                                    /*
                                     * If entry.getIsReval() is used for Unrealised Gain/Loss and Realised JE
                                     */
                                    if (receipt.isIsOpeningBalenceReceipt()) {
                                        obj.put("isOpeningDocument", true);
                                    }
                                    if (entry.getIsReval() == Constants.isUnRealisedJE) {
                                        obj.put("transactionDetails", "Unrealised Gain/Loss");
                                    } else if (entry.getIsReval() == Constants.isRealisedJE) { // Used for Realised JE
                                        obj.put("transactionDetails", "Realised Gain/Loss");
                                    } else {
                                        obj.put("transactionDetails", Constants.PAYMENT_RECEIVED + ", " + name);
                                    }
                                }
                                obj.put(Constants.billid, receipt.getID());
                                obj.put("type", Constants.PAYMENT_RECEIVED);
                                withoutinventory = false;
                            }
                        }
                } else if (disHonouredpaymentReceivedMap.containsKey(entry.getID())) {
                    Receipt receipt = (Receipt) disHonouredpaymentReceivedMap.get(entry.getID())[0];
                    String name = "";
                    if (receipt.getCustomer() != null) {
                        name = receipt.getCustomer().getName();
                    } else if (receipt.getVendor() != null && !receipt.getVendor().equals("")) {
                        KwlReturnObject result = accountingHandlerDAOobj.getObject(Vendor.class.getName(), receipt.getVendor());
                        Vendor vendor = (Vendor) result.getEntityList().get(0);
                        name = vendor.getName();
                    } else {
                        Account account = (Account) disHonouredpaymentReceivedMap.get(entry.getID())[1];
                        name = account.getName();
                    }
                    obj.put("transactionID", receipt.getReceiptNumber());
                    if (receipt.getDisHonouredChequeJe() != null && receipt.getDisHonouredChequeJe().getID() == entry.getID()) {
                        obj.put("transactionDetails", "JE for Cancelled/Dishonored Cheque for Receipt " + receipt.getReceiptNumber() + ", " + name);
                        /**
                         * For dishonoured type JE we are saving memo in db at
                         * the time of creating JE because we have to display
                         * memo in bank book report for dishonoured type entries
                         * but in JE report we do not display memo so setting
                         * empty value for memo ERM-744.
                         */
                        obj.remove("memo");     
                        obj.put("memo", "");
                    }else{
                        obj.put("transactionDetails", Constants.PAYMENT_RECEIVED + ", " + name);
                    }
                    obj.put(Constants.billid, receipt.getID());
                    obj.put("type", Constants.PAYMENT_RECEIVED);
                    withoutinventory = false;
                } else if (transactionModuleId == Constants.Acc_Dishonoured_Make_Payment_ModuleId && !disHonouredPaymentMadeMap.isEmpty() && disHonouredPaymentMadeMap.containsKey(entry.getID()) && disHonouredPaymentMadeMap.get(entry.getID())!=null) {
                    Payment payment = (Payment) disHonouredPaymentMadeMap.get(entry.getID())[0];
                    String name = "";
                    if (payment.getVendor() != null) {
                        name = payment.getVendor().getName();
                    } else if (payment.getCustomer() != null && !payment.getCustomer().equals("")) {
                        KwlReturnObject result = accountingHandlerDAOobj.getObject(Customer.class.getName(), payment.getCustomer());
                        Customer customer = (Customer) result.getEntityList().get(0);
                        name = customer.getName();
                    } else {
                        Account account = (Account) disHonouredPaymentMadeMap.get(entry.getID())[1];
                        name = account.getName();
                    }
                    obj.put("transactionID", payment.getPaymentNumber());
                    if (payment.getDisHonouredChequeJe() != null && payment.getDisHonouredChequeJe().getID() == entry.getID()) {
                        obj.put("transactionDetails", "JE for Cancelled/Dishonored Cheque for Payment " + payment.getPaymentNumber() + ", " + name);
                        /**
                         * For dishonoured type JE we are saving memo in db at
                         * the time of creating JE because we have to display
                         * memo in bank book report for dishonoured type entries
                         * but in JE report we do not display memo so setting
                         * empty value for memo ERM-744.
                         */
                        obj.put("memo", "");
                    } else {
                        obj.put("transactionDetails", Constants.PAYMENT_MADE + ", " + name);
                    }
                    obj.put(Constants.billid, payment.getID());
                    obj.put("type", Constants.PAYMENT_MADE);
                    withoutinventory = false;
                }else if(transactionModuleId==Constants.Acc_Make_Payment_ModuleId) {
                        KwlReturnObject resultPayment = accountingHandlerDAOobj.getObject(Payment.class.getName(), entry.getTransactionId());
                        Payment payment = (Payment) resultPayment.getEntityList().get(0);
                        if (payment != null) {
                            boolean addDetails=true;
                            String name = "";
                            if (payment.getVendor() != null) {
                                name = payment.getVendor().getName();
                            } else if (payment.getCustomer() != null && !payment.getCustomer().equals("")) {
                                KwlReturnObject result = accountingHandlerDAOobj.getObject(Customer.class.getName(), payment.getCustomer());
                                Customer customer = (Customer) result.getEntityList().get(0);
                                name = customer.getName();
                            } else {
                                if (paymentMadeMap.containsKey(entry.getID())) {
                                    Account account = (Account) paymentMadeMap.get(entry.getID())[1];
                                    name = account.getName();
                                } else {
                                    addDetails=false;
                                    obj.put("transactionID", "");
                                    obj.put("transactionDetails", "");
                                    JSONArray jeDetailsSorted = AccReportsHandler.sortJsonArrayOnJEDetailSerialNo(obj.getJSONArray("jeDetails"));
                                    obj.put("jeDetails", jeDetailsSorted);
                                }
                            }
                            if(addDetails){
                                obj.put("transactionID", payment.getPaymentNumber());
                                if (payment.getJournalEntryForBankCharges() != null && payment.getJournalEntryForBankCharges().getID() == entry.getID()) {
                                    obj.put("transactionDetails", "Bank Charges JE for Payment \"" + payment.getPaymentNumber() + "\", " + name);
                                } else if (payment.getJournalEntryForBankInterest() != null && payment.getJournalEntryForBankInterest().getID() == entry.getID()) {
                                    obj.put("transactionDetails", "Bank Interest JE for Payment \"" + payment.getPaymentNumber() + "\", " + name);
                                } else {
                                    /*
                                     * If entry.getIsReval() is used for Unrealised Gain/Loss and Realised JE
                                     */
                                    if (payment.isIsOpeningBalencePayment()) {
                                        obj.put("isOpeningDocument", true);
                                    }
                                    if (entry.getIsReval() == Constants.isUnRealisedJE) {
                                        obj.put("transactionDetails", "Unrealised Gain/Loss");
                                    } else if (entry.getIsReval() == Constants.isRealisedJE) { // Used for Realised JE
                                        obj.put("transactionDetails", "Realised Gain/Loss");
                                    } else {
                                        obj.put("transactionDetails", Constants.PAYMENT_MADE + ", " + name);
                                    }
                                }
                                obj.put(Constants.billid, payment.getID());
                                obj.put("type", Constants.PAYMENT_MADE);
                                withoutinventory = false;
                            }
                        }
                } else if(transactionModuleId == Constants.Acc_Receipt_WriteOff_ModuleId){
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(ReceiptWriteOff.class.getName(), entry.getTransactionId());
                    ReceiptWriteOff RWO = (ReceiptWriteOff)result.getEntityList().get(0);
                    obj.put("transactionID", RWO.getReceipt().getReceiptNumber());
                    if (RWO.getJournalEntry() != null && RWO.getJournalEntry().getID() == entry.getID()) {
                            obj.put("transactionDetails", "Write-off Adjustment Journal Entry for Receipt "+RWO.getReceipt().getReceiptNumber()+". "+((!StringUtil.isNullOrEmpty(RWO.getMemo()))?"("+RWO.getMemo()+")":""));
                        } else {
                            obj.put("transactionDetails", "");
                        }
                        obj.put(Constants.billid, RWO.getReceipt().getID());
                        obj.put("type", Constants.PAYMENT_RECEIVED );
                }else if(transactionModuleId == Constants.Acc_Receipt_WriteOff_ModuleId_Reverse){
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(ReceiptWriteOff.class.getName(), entry.getTransactionId());
                    ReceiptWriteOff RWO = (ReceiptWriteOff)result.getEntityList().get(0);
                    obj.put("transactionID", RWO.getReceipt().getReceiptNumber());
                    if (RWO.getJournalEntry() != null && RWO.getReversejournalEntry().getID() == entry.getID()) {
                            obj.put("transactionDetails", "Reverse Write-off Adjustment Journal Entry for Receipt "+RWO.getReceipt().getReceiptNumber()+". "+((!StringUtil.isNullOrEmpty(RWO.getMemo()))?"("+RWO.getMemo()+")":""));
                        } else {
                            obj.put("transactionDetails", "");
                        }
                        obj.put(Constants.billid, RWO.getReceipt().getID());
                        obj.put("type", Constants.PAYMENT_RECEIVED );
                } else if(transactionModuleId == Constants.Acc_Import_Service_Invoice_Payment_ModuleId){
                    /*
                     * Import service JE -SDP-1740 
                     */
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(Payment.class.getName(), entry.getTransactionId());
                    Payment payment = (Payment)result.getEntityList().get(0);
                    obj.put("transactionID", payment.getPaymentNumber());
                    String importServiceInvoices="";
                    GoodsReceipt GR =null;
                    if(payment.getRows()!=null && !payment.getRows().isEmpty()){
                        for(PaymentDetail PD : payment.getRows()){
                            GR = PD.getGoodsReceipt();
                            importServiceInvoices += GR.getGoodsReceiptNumber()+",";
                        }
                    }
                    if(!StringUtil.isNullOrEmpty(importServiceInvoices)){
                        importServiceInvoices = importServiceInvoices.substring(0, importServiceInvoices.length()-1);
                    }
                    obj.put("transactionDetails", StringUtil.isNullOrEmpty(importServiceInvoices)?"":"Journal Entry for Payment of Import Service Invoice(s) "+importServiceInvoices);
                    obj.put(Constants.billid, payment.getID());
                    obj.put("type", Constants.PAYMENT_MADE );
                } else if(transactionModuleId == Constants.Acc_Free_Gift_JE_ModuleId){
                    /*
                     * Free Gift JE
                     */
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), entry.getTransactionId());
                    DeliveryOrder DO = (DeliveryOrder)result.getEntityList().get(0);
                    obj.put("transactionID", DO.getDeliveryOrderNumber());
                    obj.put("transactionDetails", "Free Gift Journal Entry for Delivery Order "+DO.getDeliveryOrderNumber());
                    obj.put(Constants.billid, DO.getID());
                    obj.put("type", Constants.Delivery_Order );
                }else if (buildAssemblyMap.containsKey(entry.getID())) {
                        ProductBuild receipt = (ProductBuild) buildAssemblyMap.get(entry.getID());
                        obj.put("transactionID", receipt.getRefno());
                        if (receipt.getJournalentry() != null && receipt.getJournalentry().getID() == entry.getID()) {
                            if(receipt.isIsBuild()){
                                obj.put("transactionDetails", "JE for Build Assembly for Ref. No. " + receipt.getRefno());
                            }else{
                                obj.put("transactionDetails", "JE for Unbuild Assembly for Ref. No. " + receipt.getRefno());
                            }
                        } else {
                            obj.put("transactionDetails", "");
                        }
                        obj.put(Constants.billid, receipt.getID());
                        if(receipt.isIsBuild()){
                            obj.put("type", Constants.Assembly_Product_Master);
                        }else{
                            obj.put("type", Constants.Disassemble_Product_Master); 
                        }                        
                        withoutinventory = false;
                } else if (transactionModuleId == Constants.MRP_WORK_ORDER_MODULEID && !StringUtil.isNullOrEmpty(entry.getTransactionId())) {
                    KwlReturnObject KwlWorkOrder = accountingHandlerDAOobj.getObject(WorkOrder.class.getName(), entry.getTransactionId());
                    WorkOrder workOrder = (WorkOrder) KwlWorkOrder.getEntityList().get(0);
                    if (workOrder != null) {
                        obj.put("transactionID", workOrder.getWorkOrderID());
                        obj.put("transactionDetails", "Close Work Order JE for " + workOrder.getWorkOrderName());
                        obj.put(Constants.billid, workOrder.getID());
                        obj.put("type", Constants.MRP_WORK_ORDER);
                        withoutinventory = false;
                    }
                } else if (disbursementMap.containsKey(entry.getID())) {
                        Disbursement disbursement = (Disbursement) disbursementMap.get(entry.getID());
                        obj.put("transactionID", disbursement.getLoanrefnumber());
                        if (disbursement.getJournalEntry() != null && disbursement.getJournalEntry().getID() == entry.getID()) {
                            obj.put("transactionDetails", "JE for Loan Disbursement for Ref. No. " + disbursement.getLoanrefnumber());
                        } else {
                            obj.put("transactionDetails", "");
                        }
                        obj.put(Constants.billid, disbursement.getID());
                        obj.put("type", Constants.LOAN_DISBURSEMENT);
                    } else if (invoiceWriteOffMap.containsKey(entry.getID())) {
                        InvoiceWriteOff IWO = (InvoiceWriteOff) invoiceWriteOffMap.get(entry.getID());
                        obj.put("transactionID", IWO.getInvoice().getInvoiceNumber());
                        if (IWO.getJournalEntry() != null && IWO.getJournalEntry().getID() == entry.getID()) {
                            obj.put("transactionDetails", "Write-off Adjustment Journal Entry for Sales Invoice "+IWO.getInvoice().getInvoiceNumber()+". "+((!StringUtil.isNullOrEmpty(IWO.getMemo()))?"("+IWO.getMemo()+")":""));
                        } else {
                            obj.put("transactionDetails", "");
                        }
                        obj.put(Constants.billid, IWO.getInvoice().getID());
                        obj.put("type", Constants.CUSTOMER_INVOICE );
                        withoutinventory = false;
                    } else if (invoiceRevereseWriteOffMap.containsKey(entry.getID())) {
                        InvoiceWriteOff IWO = (InvoiceWriteOff) invoiceRevereseWriteOffMap.get(entry.getID());
                        obj.put("transactionID", IWO.getInvoice().getInvoiceNumber());
                        if (IWO.getReversejournalEntry() != null && IWO.getReversejournalEntry().getID() == entry.getID()) {
                            obj.put("transactionDetails", "Reverse Write-off Adjustment Journal Entry for Sales Invoice "+IWO.getInvoice().getInvoiceNumber()+". "+((!StringUtil.isNullOrEmpty(IWO.getMemo()))?"("+IWO.getMemo()+")":""));
                        } else {
                            obj.put("transactionDetails", "");
                        }
                        obj.put(Constants.billid, IWO.getInvoice().getID());
                        obj.put("type", Constants.CUSTOMER_INVOICE);
                        withoutinventory = false;
                    } else if (stockAdjustmentMap.containsKey(entry.getID())) {
                        StockAdjustment stockAdjustment = (StockAdjustment) stockAdjustmentMap.get(entry.getID());
                        obj.put("transactionID", stockAdjustment.getTransactionNo());
                        if (stockAdjustment.getJournalEntry() != null && stockAdjustment.getJournalEntry().getID() == entry.getID()) {
                            obj.put("transactionDetails", "JE for Stock Adjustment for Stock Adjustment No. " + stockAdjustment.getTransactionNo() + ".");
                        } else {
                            obj.put("transactionDetails", "");
                        }
                        obj.put(Constants.billid, stockAdjustment.getId());
                        obj.put("type", Constants.STOCK_ADJUSTMENT);
                        withoutinventory = false;
                    }else if(transactionModuleId == Constants.FIXED_ASSET_DISPOSAL_MODULE){ // If the JE is of Asset Disposal
                        obj.put("transactionID", "Fixed Asset Disposal");
                        obj.put("transactionDetails", "Fixed Asset Disposal Journal Entry");
                        obj.put("isdisposalje", true);
                    } else if(transactionModuleId == Constants.FIXED_ASSET_REVERT_DISPOSEDASSET_MODULE){ // If the JE is of reverted disposed asset
                        obj.put("transactionID", "");
                        obj.put("transactionDetails", "Reverse Journal Entry for Disposed Asset");
                    } else if (isPartyJournalEntry) {
                        obj.put("transactionID", "");
                        obj.put("transactionDetails", "Party Journal Entry");
                        JSONArray jeDetailsSorted = AccReportsHandler.sortJsonArrayOnJEDetailSerialNo(obj.getJSONArray("jeDetails"));
                        obj.put("jeDetails",jeDetailsSorted);
                    } else if (entry.getIsReval() == 1) {
                        /**
                         * Passing transactionid to get the document number
                         * because we have to display document number in
                         * transactionId column in journal entry report.As
                         * for opening type document no check is implemented on
                         * moduleid because for opening documents only realised
                         * and unrealised JE are posted.ERP-41455.
                         */
                        String transactionID = "";
                        HashMap<String, Object> params = new HashMap<>();
                        params.put("transactionId", entry.getTransactionId());
                        params.put(Constants.companyid, entry.getCompany().getCompanyID());
                        KwlReturnObject transactionResult = accJournalEntryobj.getTransactionNumber(params);
                        if (transactionResult != null && transactionResult.getEntityList() != null && !transactionResult.getEntityList().isEmpty()) {
                            Object[] row = (Object[]) transactionResult.getEntityList().get(0);
                            transactionID = row[0] != null ? row[0].toString() : "";
                            obj.put("isOpeningDocument", row[1] != null ? row[1].toString().equals("1") : false);
                        }
                        obj.put("transactionID", transactionID);
//                        obj.put("transactionID", "");
                        obj.put("transactionDetails", "Unrealised Gain/Loss");
                    } else if (entry.getIsReval() == 2) {
                        /**
                         * Passing transactionid to get the document number
                         * because we have to display document number in
                         * transactionId column in journal entry report.As
                         * for opening type document no check is implemented on
                         * moduleid because for opening documents only realised
                         * and unrealised JE are posted.ERP-41455.
                         */
                        String transactionID = "";
                        HashMap<String, Object> params = new HashMap<>();
                        params.put("transactionId", entry.getTransactionId());
                        params.put(Constants.companyid, entry.getCompany().getCompanyID());
                        KwlReturnObject transactionResult = accJournalEntryobj.getTransactionNumber(params);
                        if (transactionResult != null && transactionResult.getEntityList() != null && !transactionResult.getEntityList().isEmpty()) {
                            Object[] row = (Object[]) transactionResult.getEntityList().get(0);
                            transactionID = row[0] != null ? row[0].toString() : "";
                            obj.put("isOpeningDocument", row[1] != null ? row[1].toString().equals("1") : false);
                        }
                        obj.put("transactionID", transactionID);
//                        obj.put("transactionID", "");
                        obj.put("transactionDetails", "Realised Gain/Loss");
                    } else if (entry.isBadDebtJE()) {
                        if (StringUtil.isNullOrEmpty(entry.getBadDebtSeqNumber())) {
                            obj.put("transactionID", "Bad Debt Adjustment");
                        } else {
                            obj.put("transactionID", entry.getBadDebtSeqNumber());
                        }
                        obj.put("transactionDetails", "Bad Debt Adjustment");
                    }else if(entry.isTaxAdjustmentJE()){
                        obj.put("transactionID", "Tax Adjustment");
                        obj.put("transactionDetails", "Tax Adjustment");                    
                    }else if (entry.isIsexchangegainslossje()) {
                        obj.put("transactionID", "");
                        obj.put("transactionDetails", "Exchange Gains/Loss JE");
                    }else if (entry.getTypeValue()==4) {//Rounding Journal entry
                        obj.put("transactionID", "");
                        obj.put("transactionDetails", "Rounding Journal Entry");
                    }else{
                        obj.put("transactionID", "");
                        obj.put("transactionDetails", "");
                        JSONArray jeDetailsSorted = AccReportsHandler.sortJsonArrayOnJEDetailSerialNo(obj.getJSONArray("jeDetails"));
                        obj.put("jeDetails",jeDetailsSorted);
                }
                    /* IF EXCHNAGE JE THEN REPLACE THE DECRIPTION AS "EXCHANGE GAINS/LOSS JE" */ 
                if (entry.isIsexchangegainslossje()) {
                    obj.put("transactionDetails", "Exchange Gains/Loss JE");
                }
                obj.put("includeingstreport", entry.isToIncludeInGSTReport());
                Map<String, Object> variableMap = new HashMap<String, Object>();
                HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                Detailfilter_names.add(Constants.companyKey);
                Detailfilter_params.add(entry.getCompany().getCompanyID());
                Detailfilter_names.add("journalentryId");
                Detailfilter_params.add(entry.getID());
//                Detailfilter_names.add("moduleId");
//                Detailfilter_params.add( Constants.Acc_GENERAL_LEDGER_ModuleId + "");
                invDetailRequestParams.put("filter_names", Detailfilter_names);
                invDetailRequestParams.put("filter_params", Detailfilter_params);
                KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                if (idcustresult != null && idcustresult.getEntityList().size() > 0) {
                    AccJECustomData jeDetailCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                    if (jeDetailCustom != null) {
                        JSONObject params = new JSONObject();
                        params.put("companyid", companyid);
                        params.put("linkModuleId", Constants.Acc_GENERAL_LEDGER_ModuleId);
                        params.put("isLink", true);
                        params.put("customcolumn", 0);
                        params.put("isJEReport", true);
//                        params.put("isExport", true);
                        params.put(Constants.userdf, df);
                        if (transactionModuleId == Constants.Acc_Vendor_Invoice_ModuleId || transactionModuleId == Constants.Acc_Cash_Purchase_ModuleId) {
                            AccountingManager.setCustomColumnValues(jeDetailCustom, VIFieldMap, VIreplaceFieldMap, variableMap);
                            fieldDataManagercntrl.addCustomData(variableMap, VIcustomFieldMap, VIcustomDateFieldMap, obj, params);
                        } else if (transactionModuleId == Constants.Acc_Make_Payment_ModuleId) {
                            AccountingManager.setCustomColumnValues(jeDetailCustom, MPFieldMap, MPreplaceFieldMap, variableMap);
                            fieldDataManagercntrl.addCustomData(variableMap, MPcustomFieldMap, MPcustomDateFieldMap, obj, params);
                        } else if (transactionModuleId == Constants.Acc_Debit_Note_ModuleId) {
                            AccountingManager.setCustomColumnValues(jeDetailCustom, DNFieldMap, DNreplaceFieldMap, variableMap);
                            fieldDataManagercntrl.addCustomData(variableMap, DNcustomFieldMap, DNcustomDateFieldMap, obj, params);
                        } else if (transactionModuleId == Constants.Acc_Invoice_ModuleId || transactionModuleId == Constants.Acc_Cash_Sales_ModuleId) {
                            AccountingManager.setCustomColumnValues(jeDetailCustom, CIFieldMap, CIreplaceFieldMap, variableMap);
                            fieldDataManagercntrl.addCustomData(variableMap, CIcustomFieldMap, CIcustomDateFieldMap, obj, params);
                        } else if (transactionModuleId == Constants.Acc_Receive_Payment_ModuleId) {
                            AccountingManager.setCustomColumnValues(jeDetailCustom, RPFieldMap, RPreplaceFieldMap, variableMap);
                            fieldDataManagercntrl.addCustomData(variableMap, RPcustomFieldMap, RPcustomDateFieldMap, obj, params);
                        } else if (transactionModuleId == Constants.Acc_Credit_Note_ModuleId) {
                            AccountingManager.setCustomColumnValues(jeDetailCustom, CNFieldMap, CNreplaceFieldMap, variableMap);
                            fieldDataManagercntrl.addCustomData(variableMap, CNcustomFieldMap, CNcustomDateFieldMap, obj, params);
                        } else if (transactionModuleId == Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId) {
                            AccountingManager.setCustomColumnValues(jeDetailCustom, FAVIFieldMap, FAVIreplaceFieldMap, variableMap);
                            fieldDataManagercntrl.addCustomData(variableMap, FAVIcustomFieldMap, FAVIcustomDateFieldMap, obj, params);
                        } else if (transactionModuleId == Constants.Acc_FixedAssets_DisposalInvoice_ModuleId) {
                            AccountingManager.setCustomColumnValues(jeDetailCustom, FACIFieldMap, FACIreplaceFieldMap, variableMap);
                            fieldDataManagercntrl.addCustomData(variableMap, FACIcustomFieldMap, FACIcustomDateFieldMap, obj, params);
                        } else if (transactionModuleId == Constants.LEASE_INVOICE_MODULEID) {
                            AccountingManager.setCustomColumnValues(jeDetailCustom, LCIFieldMap, LCIreplaceFieldMap, variableMap);
                            fieldDataManagercntrl.addCustomData(variableMap, LCIcustomFieldMap, LCIcustomDateFieldMap, obj, params);
                        } else if (transactionModuleId == Constants.Acc_Consignment_GoodsReceipt_ModuleId) {
                            AccountingManager.setCustomColumnValues(jeDetailCustom, CNFieldMap, CNreplaceFieldMap, variableMap);
                            fieldDataManagercntrl.addCustomData(variableMap, CNcustomFieldMap, CNcustomDateFieldMap, obj, params);
                        } else if (transactionModuleId == Constants.Acc_ConsignmentInvoice_ModuleId) {
                            AccountingManager.setCustomColumnValues(jeDetailCustom, CNFieldMap, CNreplaceFieldMap, variableMap);
                            fieldDataManagercntrl.addCustomData(variableMap, CNcustomFieldMap, CNcustomDateFieldMap, obj, params);
                        } else {
                            AccountingManager.setCustomColumnValues(jeDetailCustom, JEFieldMap, JEreplaceFieldMap, variableMap);
                            fieldDataManagercntrl.addCustomData(variableMap, JEcustomFieldMap, JEcustomDateFieldMap, obj, params);
                        }
                    }
                }
                //ERM-656
                if (pref.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD) {
                    addPerpetualInventoryJEGlobalLevelCustomData(requestParams, entry, obj);
                }
                
                obj.put("withoutinventory", withoutinventory);
                // }
                RepeatedJE repeatedJE = entry.getRepeateJE();
                    obj.put("isRepeated", repeatedJE==null?false:true);
                    if(repeatedJE!=null){
                        obj.put("repeateid",repeatedJE.getId());
                        obj.put("interval",repeatedJE.getIntervalUnit());
                        obj.put("intervalType",repeatedJE.getIntervalType());
                        obj.put("NoOfJEpost",repeatedJE.getNoOfJEpost());
                        SimpleDateFormat sdf=new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                        obj.put("startDate",sdf.format(repeatedJE.getStartDate()));
                        obj.put("nextDate",sdf.format(repeatedJE.getNextDate()));
                        obj.put("expireDate",repeatedJE.getExpireDate()==null?"":sdf.format(repeatedJE.getExpireDate()));
                        obj.put("isactivate",repeatedJE.isIsActivate());
                        obj.put("approver",repeatedJE.getApprover());
                        obj.put("ispendingapproval",repeatedJE.isIspendingapproval());
                    requestParams.put("parentJEId", entry.getID());
                    KwlReturnObject details = accJournalEntryobj.getRepeateJEDetails(requestParams);
                    List detailsList = details.getEntityList();
                    obj.put("childCount", detailsList.size());
                }
                if (requestParams.containsKey("isCustomerReport")) {        // show report for LMS Weekly JE
                    if (!StringUtil.isNullOrEmpty(entry.getCustomer())) {
                        KwlReturnObject jeres = accountingHandlerDAOobj.getObject(Customer.class.getName(), (String) entry.getCustomer());
                        Customer customer = (Customer) jeres.getEntityList().get(0);
                        obj.put("customerid", customer.getID());
                        obj.put("customername", customer.getName());
                        JSONArray array = new JSONArray(jeDetails.get(entry.getID()).toString());
                        JSONObject jSONObject = array.getJSONObject(0);
                        if (jSONObject.has("d_amount")) {
                            obj.put("amountinbase", jSONObject.optDouble("d_amount", 0));
                        } else {
                            obj.put("amountinbase", jSONObject.optDouble("c_amount"));
                        }
                        if (requestParams.get("customer").toString().contains("All") || requestParams.get("customer").toString().contains(customer.getID())) {
                            jArr.put(obj);
                        }
                    }

                } else {
                    jArr.put(obj);
                }
            }
//            jobj.put(Constants.RES_data, jArr);
        } catch(ServiceException ex) {
            throw ServiceException.FAILURE("getJournalEntryJson : "+ex.getMessage(), ex);
        } catch(Exception ex) {
            throw ServiceException.FAILURE("getJournalEntryJson : "+ex.getMessage(), ex);
        }
        return jobj;
    }
   
    public void getPartyJECNDNDetails(JSONObject obj, CreditNote creditNote, DebitNote debitNote) {
        try {
            String companyid = obj.optString("companyid");
            if (creditNote != null) {
                double cnAmount = authHandler.round(creditNote.getCnamount(), companyid);
                double cnAmountDue = authHandler.round(creditNote.getCnamountdue(), companyid);
                if (cnAmount == cnAmountDue) {
                    obj.put("iscnused", false);
                } else {
                    obj.put("iscnused", true);
                }
                obj.put("creditnoteid",creditNote.getID());
                obj.put("CNsequenceformatid", creditNote.getSeqformat() != null ? creditNote.getSeqformat().getID() : "");
                obj.put("cnNumber", creditNote.getCreditNoteNumber());
            }
            if (debitNote != null) {
                double dnAmount = authHandler.round(debitNote.getDnamount(), companyid);
                double dnAmountDue = authHandler.round(debitNote.getDnamountdue(), companyid);
                if (dnAmount == dnAmountDue) {
                    obj.put("isdnused", false);
                } else {
                    obj.put("isdnused", true);
                }
                obj.put("debitnoteid",debitNote.getID());
                obj.put("DNsequenceformatid", debitNote.getSeqformat() != null ? debitNote.getSeqformat().getID() : "");
                obj.put("dnNumber", debitNote.getDebitNoteNumber());
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public String getInParamFromList(List<String> list) {
        StringBuilder result = new StringBuilder("");
        String resultStr = "";
        if (list.size() > 0) {
            for (String temp : list) {
                result.append("'").append(temp).append("',");
            }
            resultStr = result.substring(0, result.length() - 1);
        }
        return resultStr;
    }

    public Map<String, ProductBuild> getBuildAssemblyMap(HashMap<String, Object> requestParams) {

        Map<String, ProductBuild> billingInvoiceMap = new HashMap<String, ProductBuild>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = accInvoiceDAOobj.getBuildAssemblyJEs(requestParams);
            List<ProductBuild> billingInvoiceList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (ProductBuild tempBillingInvoice :billingInvoiceList) {
                if(tempBillingInvoice.getJournalentry()!=null){
                     billingInvoiceMap.put(tempBillingInvoice.getJournalentry().getID(), tempBillingInvoice);
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return billingInvoiceMap;
    }
    public Map<String, Disbursement> getLoanDisburementMap(HashMap<String, Object> requestParams) {
        Map<String, Disbursement> disbursementMap = new HashMap<String, Disbursement>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = accLoanDAOobj.getDisbursementJEs(requestParams);
            List<Disbursement>  disbursementList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (Disbursement disbursement :disbursementList) {
                if(disbursement.getJournalEntry()!=null){
                     disbursementMap.put(disbursement.getJournalEntry().getID(), disbursement);
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return disbursementMap;
    }
    public Map<String, InvoiceWriteOff> getInvoiceWriteOffMap(HashMap<String, Object> requestParams) {
        Map<String, InvoiceWriteOff> Map = new HashMap<String, InvoiceWriteOff>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = accWriteOffServiceDao.getWriteOffJEs(requestParams);
            List<InvoiceWriteOff> writeOffList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < writeOffList.size(); i++) {
                InvoiceWriteOff temp = writeOffList.get(i);
                Map.put(temp.getJournalEntry().getID(), temp);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return Map;
    }
    
    public Map<String, InvoiceWriteOff> getInvoiceReverseWriteOffMap(HashMap<String, Object> requestParams) {
        Map<String, InvoiceWriteOff> Map = new HashMap<String, InvoiceWriteOff>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = accWriteOffServiceDao.getReverseWriteOffJEs(requestParams);
            List<InvoiceWriteOff> writeOffList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < writeOffList.size(); i++) {
                InvoiceWriteOff temp = writeOffList.get(i);
                if(temp.getReversejournalEntry()!=null){
                    Map.put(temp.getReversejournalEntry().getID(), temp);
                }    
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return Map;
    }

    public Map<String, JSONArray> getJournalEntryDetailsMap(HashMap<String, Object> request) throws ServiceException {

        Map<String, JSONArray> jeDetailsMap = new HashMap<String, JSONArray>();
        try {
            KwlReturnObject result = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), (String) request.get(Constants.globalCurrencyKey));
            KWLCurrency currency = (KWLCurrency) result.getEntityList().get(0);
            KwlReturnObject jedresult = accJournalEntryobj.getJournalEntryDetailsForReport(request);
            Iterator itr = jedresult.getEntityList().iterator();
            String prevJE = "";
            boolean isForReport = false;
            if(request.containsKey("isForReport")){
                isForReport =(Boolean)request.get("isForReport");
            }
            boolean isCustomFieldRequired = true;
            if(request.containsKey("isCustomFieldRequired") && request.get("isCustomFieldRequired") != null){
                isCustomFieldRequired = (boolean)request.get("isCustomFieldRequired"); // true/false
            }
            JSONArray jArr = new JSONArray();
            String companyid = request.get(Constants.companyKey) != null ? (String) request.get(Constants.companyKey) : "";
            int inventoryValuationType = (request.containsKey("inventoryValuationType") && request.get("inventoryValuationType") != null) ? (int) request.get("inventoryValuationType") : -1;
            HashMap tempMap = new HashMap();
            tempMap.put(Constants.companyKey, companyid);
            tempMap.put(Constants.globalCurrencyKey,currency.getCurrencyID());
                   
            while (itr.hasNext()) {
                JournalEntryDetail entry = (JournalEntryDetail) itr.next();
                String jeId = entry.getJournalEntry().getID();

                if (prevJE.equals("")) {
                    prevJE = jeId;
                }

                if (!prevJE.equals(jeId)) {
                    jeDetailsMap.put(prevJE, jArr);
                    prevJE = jeId;
                    jArr = new JSONArray();
                }
                String currencyid = entry.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : entry.getJournalEntry().getCurrency().getCurrencyID();
                JSONObject obj = new JSONObject();
//                System.out.println(entry.getJournalEntry().getEntryNumber());
                obj.put("srno", entry.getSrno());
                obj.put("accountid", entry.getAccount().getID());
                obj.put("isbankcharge", entry.isBankcharge());  //To avoid adding bank charges in Grid
                obj.put("mappedaccountid", entry.getAccount().getID());  
                obj.put("masterTypeValueOfAccount", entry.getAccount().getMastertypevalue());
                obj.put("isAccountIsBankType", (entry.getAccount().getMastertypevalue() == 3) ? true : false);
                String accname = StringUtil.isNullOrEmpty(entry.getAccount().getAcccode()) ? entry.getAccount().getName() : "[" + entry.getAccount().getAcccode() + "] " + entry.getAccount().getName();
                obj.put("accountname", accname);
                obj.put("currencysymbol", entry.getJournalEntry().getCurrency() == null ? currency.getSymbol() : entry.getJournalEntry().getCurrency().getSymbol());
                obj.put("currencysymbolaccount", entry.getAccount()==null?currency.getSymbol():(entry.getAccount().getCurrency()==null?currency.getSymbol():entry.getAccount().getCurrency().getSymbol()));
                obj.put("sourceDocumentId", entry.getJournalEntry().getTransactionId());
                obj.put("sourceDocumentModuleId", entry.getJournalEntry().getTransactionModuleid());
                double exchangeRateForAccount=entry.getExchangeRateForTransaction();
                /*
                 * ERP-16072
                 * Below logic is to display the exchange rate at line level in case of old JE , where JE currency and account currency are different.
                 * Default value in db for this column is 1. So for old records, column 'exchangeratefortransaction' will be -1
                 * If it is -1 and JE currency != Account currency, in edit/view case, this rate will be be displayed according to following function.
                 * This rate is according to JE date
                 */
                if(entry.getJournalEntry().getTypeValue() == Constants.FundTransfer_Journal_Entry){
                    JournalEntry currentJE = entry.getJournalEntry();
                    KWLCurrency JECurrency = currentJE.getCurrency();
                    String JECurrencyId = JECurrency.getCurrencyID();
                    String AccountCurrencyId = entry.getAccount()==null?currency.getCurrencyID():(entry.getAccount().getCurrency()==null?currency.getCurrencyID():entry.getAccount().getCurrency().getCurrencyID());
                    if((!JECurrencyId.equals(AccountCurrencyId)) && (exchangeRateForAccount == -1)){
                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(tempMap, entry.getAmount(), JECurrencyId, entry.getJournalEntry().getEntryDate(), entry.getJournalEntry().getExternalCurrencyRate());
                        double baseamt = (Double) crresult.getEntityList().get(0);
                        KwlReturnObject crresult14 = accCurrencyDAOobj.getBaseToCurrencyAmount(tempMap, baseamt, AccountCurrencyId, entry.getJournalEntry().getEntryDate(), 0);
                        double amtinAccCurr = (Double) crresult14.getEntityList().get(0); 
                        exchangeRateForAccount = entry.getAmount()/amtinAccCurr;
                    } else if((JECurrencyId.equals(AccountCurrencyId)) && exchangeRateForAccount == -1){
                        exchangeRateForAccount = 1;
                    }
                }
                obj.put("exchangeratefortransaction", exchangeRateForAccount);
                obj.put("appliedGst", entry.getGstapplied()!=null?entry.getGstapplied().getID():"");
                try {
                    obj.put("description", entry.getDescription() != null ?StringUtil.DecodeText(entry.getDescription()) : "");
                } catch (Exception ex) {
                    obj.put("description", entry.getDescription() != null ? entry.getDescription() : "");
                }
                obj.put("jeId", entry.getJournalEntry().getID());
               // KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountRoundOff(request, entry.getAmount(), currencyid, entry.getJournalEntry().getEntryDate(), entry.getJournalEntry().getExternalCurrencyRate());
                if (entry.isDebit() == true) {
                    obj.put("debit", "Debit");
//                        obj.put("d_amount", bAmt.getEntityList().get(0));
                        obj.put("d_amount", entry.getAmountinbase());
                        obj.put("d_amount_transactioncurrency", entry.getAmount());

                } else {
                    obj.put("debit", "Credit");
//                    obj.put("c_amount", bAmt.getEntityList().get(0));
                    obj.put("c_amount", entry.getAmountinbase());
                    obj.put("c_amount_transactioncurrency", entry.getAmount());
                }
                obj.put("customerVendorId", entry.getCustomerVendorId());
                obj.put("accountpersontype", entry.getAccountpersontype());
                if (entry.getAccountpersontype() != 99 && entry.getAccountpersontype() != 0 && entry.getCustomerVendorId() != null) {
                    if (entry.getAccountpersontype() == 1) {
                        KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), entry.getCustomerVendorId());
                        if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
                            Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                            obj.put("customerVendorName", customer.getName());
                        }
                    } else if (entry.getAccountpersontype() == 2) {
                        KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), entry.getCustomerVendorId());
                        if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                            Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                            obj.put("customerVendorName", vendor.getName());
                        }
                    }
                }
                if (isCustomFieldRequired) {

                    // ## Get Custom Field Data 
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid,Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId ,1));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                    /**
                     * line level custom field map
                     */
                    HashMap<String, String> JEcustomFieldLineMap = new HashMap<String, String>();
                    HashMap<String, String> JEcustomDateFieldLineMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, 1));
                    HashMap<String, String> JEreplaceFieldLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> JEFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, JEreplaceFieldLineMap, JEcustomFieldLineMap, JEcustomDateFieldLineMap);


                    fieldrequestParams = new HashMap();
                    HashMap<String, String> VIcustomFieldLineMap = new HashMap<String, String>();
                    HashMap<String, String> VIcustomDateFieldLineMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Vendor_Invoice_ModuleId, 1));
                    HashMap<String, String> VIreplaceFieldLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> VIFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, VIreplaceFieldLineMap, VIcustomFieldLineMap, VIcustomDateFieldLineMap);

                    fieldrequestParams = new HashMap();
                    HashMap<String, String> MPcustomFieldLineMap = new HashMap<String, String>();
                    HashMap<String, String> MPcustomDateFieldLineMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Make_Payment_ModuleId, 1));
                    HashMap<String, String> MPreplaceFieldLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> MPFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, MPreplaceFieldLineMap, MPcustomFieldLineMap, MPcustomDateFieldLineMap);

                    fieldrequestParams = new HashMap();
                    HashMap<String, String> DNcustomFieldLineMap = new HashMap<String, String>();
                    HashMap<String, String> DNcustomDateFieldLineMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId, 1));
                    HashMap<String, String> DNreplaceFieldLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> DNFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, DNreplaceFieldLineMap, DNcustomFieldLineMap, DNcustomDateFieldLineMap);

                    fieldrequestParams = new HashMap();
                    HashMap<String, String> CIcustomFieldLineMap = new HashMap<String, String>();
                    HashMap<String, String> CIcustomDateFieldLineMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Invoice_ModuleId, 1));
                    HashMap<String, String> CIreplaceFieldLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> CIFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, CIreplaceFieldLineMap, CIcustomFieldLineMap, CIcustomDateFieldLineMap);


                    fieldrequestParams = new HashMap();
                    HashMap<String, String> RPcustomFieldLineMap = new HashMap<String, String>();
                    HashMap<String, String> RPcustomDateFieldLineMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Receive_Payment_ModuleId, 1));
                    HashMap<String, String> RPreplaceFieldLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> RPFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, RPreplaceFieldLineMap, RPcustomFieldLineMap, RPcustomDateFieldLineMap);

                    fieldrequestParams = new HashMap();
                    HashMap<String, String> CNcustomFieldLineMap = new HashMap<String, String>();
                    HashMap<String, String> CNcustomDateFieldLineMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Credit_Note_ModuleId, 1));
                    HashMap<String, String> CNreplaceFieldLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> CNFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, CNreplaceFieldLineMap, CNcustomFieldLineMap, CNcustomDateFieldLineMap);

                    fieldrequestParams = new HashMap();
                    HashMap<String, String> FAVIcustomFieldLineMap = new HashMap<String, String>();
                    HashMap<String, String> FAVIcustomDateFieldLineMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId, 1));
                    HashMap<String, String> FAVIreplaceFieldLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> FAVIFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, FAVIreplaceFieldLineMap, FAVIcustomFieldLineMap, FAVIcustomDateFieldLineMap);

                    fieldrequestParams = new HashMap();
                    HashMap<String, String> FACIcustomFieldLineMap = new HashMap<String, String>();
                    HashMap<String, String> FACIcustomDateFieldLineMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId, 1));
                    HashMap<String, String> FACIreplaceFieldLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> FACIFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, FACIreplaceFieldLineMap, FACIcustomFieldLineMap, FACIcustomDateFieldLineMap);

                    fieldrequestParams = new HashMap();
                    HashMap<String, String> LCIcustomFieldLineMap = new HashMap<String, String>();
                    HashMap<String, String> LCIcustomDateFieldLineMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.LEASE_INVOICE_MODULEID, 1));
                    HashMap<String, String> LCIreplaceFieldLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> LCIFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, LCIreplaceFieldLineMap, LCIcustomFieldLineMap, LCIcustomDateFieldLineMap);

                    fieldrequestParams = new HashMap();
                    HashMap<String, String> ConsCIcustomFieldLineMap = new HashMap<String, String>();
                    HashMap<String, String> ConsCIcustomDateFieldLineMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_ConsignmentInvoice_ModuleId, 1));
                    HashMap<String, String> ConsCIreplaceFieldLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> ConsCIFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, ConsCIreplaceFieldLineMap, ConsCIcustomFieldLineMap, ConsCIcustomDateFieldLineMap);

                    fieldrequestParams = new HashMap();
                    HashMap<String, String> ConsVIcustomFieldLineMap = new HashMap<String, String>();
                    HashMap<String, String> ConsVIcustomDateFieldLineMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Consignment_GoodsReceipt_ModuleId, 1));
                    HashMap<String, String> ConsVIreplaceFieldLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> ConsVIFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, ConsVIreplaceFieldLineMap, ConsVIcustomFieldLineMap, ConsVIcustomDateFieldLineMap);

                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();

                    int moduleID = entry.getJournalEntry().getTransactionModuleid();
                    DateFormat df = null;//authHandler.getUserDateFormatterWithoutTimeZone(request);
                    if (request.containsKey("dateformat")) {
                        df = (DateFormat) request.get("dateformat");
                    }
                    variableMap = new HashMap();
                    invDetailRequestParams = new HashMap();
                    Detailfilter_names = new ArrayList();
                    Detailfilter_params = new ArrayList();
                    Detailfilter_names.add("jedetailId");
                    if (entry.getJournalEntry().getParentJE() != null) {
                        if (entry.getAccJEDetailCustomData() != null) {
                            Detailfilter_params.add(entry.getAccJEDetailCustomData().getJedetail().getID());
                        } else {
                            Detailfilter_params.add(entry.getID());
                        }
                    } else {
                        Detailfilter_params.add(entry.getID());
                    }
                    invDetailRequestParams.put("filter_names", Detailfilter_names);
                    invDetailRequestParams.put("filter_params", Detailfilter_params);
                    KwlReturnObject  idcustresult = accInvoiceDAOobj.getInvoiceDetailsCustomData(invDetailRequestParams);
                    if (idcustresult.getEntityList().size() > 0) {
                        AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustresult.getEntityList().get(0);
                        if (jeDetailCustom != null) {
                            JSONObject params = new JSONObject();
                            params.put("companyid", companyid);
                            params.put("customcolumn", 1);
                            params.put("isExport", true);
                            params.put(Constants.userdf, df);
                            if (moduleID == Constants.Acc_Vendor_Invoice_ModuleId || moduleID == Constants.Acc_Cash_Purchase_ModuleId) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, VIFieldLineMap, VIreplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, VIcustomFieldLineMap, VIcustomDateFieldLineMap, obj, params);
                            } else if (moduleID == Constants.Acc_Make_Payment_ModuleId) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, MPFieldLineMap, MPreplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, MPcustomFieldLineMap, MPcustomDateFieldLineMap, obj, params);
                            } else if (moduleID == Constants.Acc_Debit_Note_ModuleId) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, DNFieldLineMap, DNreplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, DNcustomFieldLineMap, DNcustomDateFieldLineMap, obj, params);
                            } else if (moduleID == Constants.Acc_Invoice_ModuleId || moduleID == Constants.Acc_Cash_Sales_ModuleId) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, CIFieldLineMap, CIreplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, CIcustomFieldLineMap, CIcustomDateFieldLineMap, obj, params);
                            } else if (moduleID == Constants.Acc_Receive_Payment_ModuleId) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, RPFieldLineMap, RPreplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, RPcustomFieldLineMap, RPcustomDateFieldLineMap, obj, params);
                            } else if (moduleID == Constants.Acc_Credit_Note_ModuleId) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, CNFieldLineMap, CNreplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, CNcustomFieldLineMap, CNcustomDateFieldLineMap, obj, params);
                            } else if (moduleID == Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, FAVIFieldLineMap, FAVIreplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, FAVIcustomFieldLineMap, FAVIcustomDateFieldLineMap, obj, params);
                            } else if (moduleID == Constants.Acc_FixedAssets_DisposalInvoice_ModuleId) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, FACIFieldLineMap, FACIreplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, FACIcustomFieldLineMap, FACIcustomDateFieldLineMap, obj, params);
                            } else if (moduleID == Constants.LEASE_INVOICE_MODULEID) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, LCIFieldLineMap, LCIreplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, LCIcustomFieldLineMap, LCIcustomDateFieldLineMap, obj, params);
                            } else if (moduleID == Constants.Acc_Consignment_GoodsReceipt_ModuleId) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, ConsVIFieldLineMap, ConsVIreplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, ConsVIcustomFieldLineMap, ConsVIcustomDateFieldLineMap, obj, params);
                            } else if (moduleID == Constants.Acc_ConsignmentInvoice_ModuleId) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, ConsCIFieldLineMap, ConsCIreplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, ConsCIcustomFieldLineMap, ConsCIcustomDateFieldLineMap, obj, params);
                            } else {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, JEFieldLineMap, JEreplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, JEcustomFieldLineMap, JEcustomDateFieldLineMap, obj, params);
                            }
                        }
                    }
                    //ERM-656
                    if (inventoryValuationType == Constants.PERPETUAL_VALUATION_METHOD) {
                        addPerpetualInventoryJELineLevelCustomData(request, entry, obj);
                    }
                }
                jArr.put(obj);
            }
            if (!prevJE.equals("")) {
                jeDetailsMap.put(prevJE, jArr);
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("getJournalEntryDetails : " + ex.getMessage(), ex);
        }
        return jeDetailsMap;
    }

    public Map<String, BillingGoodsReceipt> getBillingGoodsReceiptMap(HashMap<String, Object> requestParams) {
        Map<String, BillingGoodsReceipt> billingGrMap = new HashMap<String, BillingGoodsReceipt>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = accGoodsReceiptDAOObj.getBillingGoodsReceipt(requestParams);
            List<BillingGoodsReceipt> billingGrList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < billingGrList.size(); i++) {
                BillingGoodsReceipt tempBillingGr = billingGrList.get(i);
                billingGrMap.put(tempBillingGr.getJournalEntry().getID(), tempBillingGr);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return billingGrMap;
    }

    public Map<String, Object[]> getBillingCreditNoteMap(HashMap<String, Object> requestParams) {

        Map<String, Object[]> cnMap = new HashMap<String, Object[]>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = accCreditNoteobj.getBillingCreaditNote(requestParams);
            List cnList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < cnList.size(); i++) {
                Object[] row = (Object[]) cnList.get(i);
                BillingCreditNote tempCN = (BillingCreditNote) row[0];
                cnMap.put(tempCN.getJournalEntry().getID(), row);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return cnMap;
    }

    public Map<String, Object[]> getBillingDebitNoteMap(HashMap<String, Object> requestParams) {

        Map<String, Object[]> dnMap = new HashMap<String, Object[]>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = accDebitNoteobj.getBillingDebitNotes(requestParams);
            List dnList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < dnList.size(); i++) {
                Object[] row = (Object[]) dnList.get(i);
                BillingDebitNote tempDN = (BillingDebitNote) row[0];
                dnMap.put(tempDN.getJournalEntry().getID(), row);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dnMap;
    }

    public Map<String, Object[]> getBillingPaymentReceivedMap(HashMap<String, Object> requestParams) {

        Map<String, Object[]> billingReceiptMap = new HashMap<String, Object[]>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = accReceiptDao.getBillingReceipts(requestParams);
            List billingReceiptList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < billingReceiptList.size(); i++) {
                Object[] row = (Object[]) billingReceiptList.get(i);
                BillingReceipt tempBillingReceipt = (BillingReceipt) row[0];
                billingReceiptMap.put(tempBillingReceipt.getJournalEntry().getID(), row);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return billingReceiptMap;
    }

    public Map<String, Object[]> getBillingPaymentMadeMap(HashMap<String, Object> requestParams) {

        Map<String, Object[]> billingPaymentMap = new HashMap<String, Object[]>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = accVendorPaymentobj.getBillingPayments(requestParams);
            List billingPaymentList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < billingPaymentList.size(); i++) {
                Object[] row = (Object[]) billingPaymentList.get(i);
                BillingPayment tempBillingPayment = (BillingPayment) row[0];
                billingPaymentMap.put(tempBillingPayment.getJournalEntry().getID(), row);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return billingPaymentMap;
    }
    public Map<String, BankReconciliationDetail> getJEBRMap(HashMap<String, Object> requestParams) {

        Map<String,BankReconciliationDetail> JEBRMap = new HashMap<String, BankReconciliationDetail>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = accVendorPaymentobj.getJEBRMap(requestParams);
            List<BankReconciliationDetail> BRList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < BRList.size(); i++) {
                BankReconciliationDetail row = BRList.get(i);
                if (row.getJournalEntry() != null) {
                    JEBRMap.put(row.getJournalEntry().getID(), row);
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return JEBRMap;
    }
    
    public Map<String, BankUnreconciliationDetail> getJEBURMap(HashMap<String, Object> requestParams) {

        Map<String,BankUnreconciliationDetail> JEBRMap = new HashMap<String, BankUnreconciliationDetail>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = accVendorPaymentobj.getJEBURMap(requestParams);
            List<BankUnreconciliationDetail> BRList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < BRList.size(); i++) {
                BankUnreconciliationDetail row = BRList.get(i);
                if (row.getJournalEntry() != null) {
                    JEBRMap.put(row.getJournalEntry().getID(), row);
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return JEBRMap;
    }

    public Map<String, Invoice> getInvoiceMap(HashMap<String, Object> requestParams) {

        Map<String, Invoice> invoiceMap = new HashMap<String, Invoice>();
        try {
            KwlReturnObject kmsg = null;
            if(requestParams.containsKey("isConsignment") && (Boolean) requestParams.get("isConsignment")){
                requestParams.put(Constants.moduleid, Constants.Acc_ConsignmentInvoice_ModuleId);  
            }else{
                requestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);  
            }
            kmsg = accInvoiceDAOobj.getInvoices(requestParams);
            List<Invoice> invoiceList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < invoiceList.size(); i++) {
                Invoice tempInvoice = invoiceList.get(i);
                invoiceMap.put(tempInvoice.getJournalEntry().getID(), tempInvoice);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return invoiceMap;
    }
    public Map<String, Invoice> getInvoiceMapNew(HashMap<String, Object> requestParams) {
        Map<String, Invoice> invoiceMap = new HashMap<String, Invoice>();
        try {
            KwlReturnObject kmsg = null;
            if(requestParams.containsKey("isConsignment") && (Boolean) requestParams.get("isConsignment")){
                requestParams.put(Constants.moduleid, Constants.Acc_ConsignmentInvoice_ModuleId);  
            }else{
                requestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);  
            }
            requestParams.put("getJEIDAndInvoice", true);
            kmsg = accInvoiceDAOobj.getInvoices(requestParams);
            List invoiceList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
//            System.out.println("Inv Iterator Before " + new Date());
            for (int i = 0; i < invoiceList.size(); i++) {
                Object []object= (Object[])invoiceList.get(i);
                invoiceMap.put((String)object[0], (Invoice)object[1]);
            }
//            System.out.println("\n Inv Iterator after " + new Date());
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return invoiceMap;
    }
   

    public Map<String, DeliveryOrder> getDOMap(HashMap<String, Object> requestParams) {

        Map<String, DeliveryOrder> doMap = new HashMap<String, DeliveryOrder>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = accInvoiceDAOobj.getDeliveryOrderForMap(requestParams);
            List<DeliveryOrder> deliveryOrders = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < deliveryOrders.size(); i++) {
                DeliveryOrder deliveryOrderTemp = deliveryOrders.get(i);
                doMap.put(deliveryOrderTemp.getJournalEntry().getID(), deliveryOrderTemp);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return doMap;
    }

    public Map<String, GoodsReceipt> getGoodsReceiptMap(HashMap<String, Object> requestParams) {

        Map<String, GoodsReceipt> grMap = new HashMap<String, GoodsReceipt>();

        try {
            KwlReturnObject kmsg = null;
            
            if(requestParams.containsKey("isConsignment") && (Boolean) requestParams.get("isConsignment")){
                requestParams.put(Constants.moduleid, Constants.Acc_Consignment_GoodsReceipt_ModuleId);  
            }else{
                requestParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);  
            }
            kmsg = accGoodsReceiptDAOObj.getGoodsReceipts(requestParams);
            List<GoodsReceipt> grList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < grList.size(); i++) {
                GoodsReceipt tempGr = grList.get(i);
                if (tempGr.getJournalEntry() != null) { //To avoid NPE in case of Recurring Invoice
                    grMap.put(tempGr.getJournalEntry().getID(), tempGr);
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return grMap;
    }
    public Map<String, GoodsReceipt> getGoodsReceiptMapNew(HashMap<String, Object> requestParams) {
        Map<String, GoodsReceipt> grMap = new HashMap<String, GoodsReceipt>();
        try {
            KwlReturnObject kmsg = null;
            if(requestParams.containsKey("isConsignment") && (Boolean) requestParams.get("isConsignment")){
                requestParams.put(Constants.moduleid, Constants.Acc_Consignment_GoodsReceipt_ModuleId);  
            }else{
                requestParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);  
            }
            requestParams.put("getJEIDAndGR", true);
            kmsg = accGoodsReceiptDAOObj.getGoodsReceipts(requestParams);
            List grList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
//            System.out.println("GR Iterator Before " + new Date());
            for (int i = 0; i < grList.size(); i++) {
                Object[] object = (Object[]) grList.get(i);
                grMap.put((String) object[0], (GoodsReceipt) object[1]);
            }
//            System.out.println("\n  Iterator after " + new Date());
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return grMap;
    }

    public Map<String, Object[]> getCreditNoteMap(HashMap<String, Object> requestParams) {

        Map<String, Object[]> cnMap = new HashMap<String, Object[]>();
        try {
            KwlReturnObject kmsg = null;
            requestParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);    
            kmsg = accCreditNoteobj.getCreaditNote(requestParams);
            List cnList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < cnList.size(); i++) {
                Object[] row = (Object[]) cnList.get(i);
                CreditNote tempCN = (CreditNote) row[0];
                cnMap.put(tempCN.getJournalEntry().getID(), row);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return cnMap;
    }

    public Map<String, Object[]> getDebitNoteMap(HashMap<String, Object> requestParams) {

        Map<String, Object[]> dnMap = new HashMap<String, Object[]>();
        try {
            KwlReturnObject kmsg = null;
            requestParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);      
            kmsg = accDebitNoteobj.getDebitNotes(requestParams);
            List dnList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < dnList.size(); i++) {
                Object[] row = (Object[]) dnList.get(i);
                DebitNote tempDN = (DebitNote) row[0];
                dnMap.put(tempDN.getJournalEntry().getID(), row);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dnMap;
    }

    public Map<String, Object[]> creditNoteMapVendor(HashMap<String, Object> requestParams) {

        Map<String, Object[]> cnMap = new HashMap<String, Object[]>();
        try {
            KwlReturnObject kmsg = null;
            requestParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);  
            kmsg = accCreditNoteobj.getCreaditNoteVendor(requestParams);
            List cnList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < cnList.size(); i++) {
                Object[] row = (Object[]) cnList.get(i);
                CreditNote tempCN = (CreditNote) row[0];
                cnMap.put(tempCN.getJournalEntry().getID(), row);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return cnMap;
    }

    public Map<String, Object[]> debitNoteMapCustomer(HashMap<String, Object> requestParams) {

        Map<String, Object[]> dnMap = new HashMap<String, Object[]>();
        try {
            KwlReturnObject kmsg = null;
            requestParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
            kmsg = accDebitNoteobj.getDebitNotesCustomers(requestParams);
            List dnList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < dnList.size(); i++) {
                Object[] row = (Object[]) dnList.get(i);
                DebitNote tempDN = (DebitNote) row[0];
                dnMap.put(tempDN.getJournalEntry().getID(), row);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dnMap;
    }

    public Map<String, Object[]> getPaymentReceivedMap(HashMap<String, Object> requestParams) {

        Map<String, Object[]> receiptMap = new HashMap<String, Object[]>();
        try {
            KwlReturnObject kmsg = null;
            boolean contraentryflag = false;
            requestParams.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
            requestParams.put("contraentryflag", contraentryflag);
            kmsg = accReceiptDao.getReceipts(requestParams);
            List receiptList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < receiptList.size(); i++) {
                Object[] row = (Object[]) receiptList.get(i);
                Receipt tempReceipt = (Receipt) row[0];
                receiptMap.put(tempReceipt.getJournalEntry().getID(), row);
                if (tempReceipt.getJournalEntryForBankCharges() != null) {      // get bank charge JE for Payments
                    receiptMap.put(tempReceipt.getJournalEntryForBankCharges().getID(), row);
                }
                if (tempReceipt.getJournalEntryForBankInterest() != null) {      // get bank charge JE for Payments
                    receiptMap.put(tempReceipt.getJournalEntryForBankInterest().getID(), row);
                }
                String disHonouredJeIds = (String) requestParams.get("disHonouredJeIds");
                if (!StringUtil.isNullOrEmpty(disHonouredJeIds)) {
                    if (tempReceipt.getDisHonouredChequeJe() != null) {
                        receiptMap.put(tempReceipt.getDisHonouredChequeJe().getID(), row);
                    }
                }                
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return receiptMap;
    }

    public Map<String, Object[]> getPaymentMadeMap(HashMap<String, Object> requestParams) {

        Map<String, Object[]> paymentMap = new HashMap<String, Object[]>();
        try {
            KwlReturnObject kmsg = null;
            boolean contraentryflag = false;
            requestParams.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
            requestParams.put("contraentryflag", contraentryflag);
            kmsg = accVendorPaymentobj.getPayments(requestParams);
            List paymentList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < paymentList.size(); i++) {
                Object[] row = (Object[]) paymentList.get(i);
                Payment tempPayment = (Payment) row[0];
                paymentMap.put(tempPayment.getJournalEntry().getID(), row);
                if (tempPayment.getJournalEntryForBankCharges() != null) {      // get bank charge JE for Payments
                    paymentMap.put(tempPayment.getJournalEntryForBankCharges().getID(), row);
                }
                if (tempPayment.getJournalEntryForBankInterest() != null) {      // get bank interest JE for Payments
                    paymentMap.put(tempPayment.getJournalEntryForBankInterest().getID(), row);
                }
                String disHonouredJeIds = (String) requestParams.get("disHonouredJeIds");
                if (!StringUtil.isNullOrEmpty(disHonouredJeIds)) {
                    if (tempPayment.getDisHonouredChequeJe() != null) {
                        paymentMap.put(tempPayment.getDisHonouredChequeJe().getID(), row);
                    }
                }    
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return paymentMap;
    }

    public Map<String, AssetDepreciationDetail> getAssetDepreciationMap(HashMap<String, Object> requestParams) {

        Map<String, AssetDepreciationDetail> assetDepreciationMap = new HashMap<String, AssetDepreciationDetail>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = accProductObj.getAssetDepreciationDetail(requestParams);
            List<AssetDepreciationDetail> assetDepreciationDetailList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (int i = 0; i < assetDepreciationDetailList.size(); i++) {
                AssetDepreciationDetail assetDepreciationDetail = assetDepreciationDetailList.get(i);
                assetDepreciationMap.put(assetDepreciationDetail.getJournalEntry().getID(), assetDepreciationDetail);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return assetDepreciationMap;
    }
    
    
    public Map<String, StockAdjustment> getStockAdjustmentMap(HashMap<String, Object> requestParams) {
        Map<String, StockAdjustment> stockAdjustmentMap = new HashMap<>();
        try {
            KwlReturnObject kmsg = null;
            kmsg = stockAdjustmentDAO.getStockAdjustmentJEs(requestParams);
            List<StockAdjustment> stockAdjustmentList = (kmsg.getRecordTotalCount() > 0 ? kmsg.getEntityList() : Collections.emptyList());
            for (StockAdjustment stockAdjustment : stockAdjustmentList) {
                if (stockAdjustment.getJournalEntry() != null) {
                    stockAdjustmentMap.put(stockAdjustment.getJournalEntry().getID(), stockAdjustment);
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return stockAdjustmentMap;
    }

    public JSONArray getBankBookSummay(HttpServletRequest request, List list) {
        JSONArray array = new JSONArray();
        try {
            JSONObject bankBookStoreData = new JSONObject();
            JSONObject bankBookObj = getLedger(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            JSONArray bankBookDataArray = bankBookObj.getJSONArray(Constants.RES_data);
            for (int i = 0; i < bankBookDataArray.length(); i++) {
                JSONObject bankBookData = bankBookDataArray.getJSONObject(i);
                String accountid = bankBookData.optString("accountid");
                if ((bankBookData.optString("d_accountname", "")).equals("Period Balance") || (bankBookData.optString("c_accountname", "")).equals("Period Balance")
                        || (bankBookData.optString("d_accountname", "")).equals("Balance c/f") || (bankBookData.optString("c_accountname", "")).equals("Balance c/f")) {
                    if (bankBookData.optString("d_accountname", "").equals("Balance c/f") || bankBookData.optString("c_accountname", "").equals("Balance c/f")) {
                        JSONObject getObj = new JSONObject();
                        if (bankBookStoreData.has(accountid)) {
                            getObj = bankBookStoreData.getJSONObject(accountid);
                        }
                        if (bankBookData.has("balanceAmountAccountCurrency")) {
                            getObj.put("amount", bankBookData.optString("balanceAmountAccountCurrency").equals("") ? 0.00 : authHandler.round(Double.parseDouble(bankBookData.getString("balanceAmountAccountCurrency")), companyid));
                        }
                    }
                    continue;
                }

                if (bankBookStoreData.has(accountid)) {
                    JSONObject getObj = bankBookStoreData.getJSONObject(accountid);
                    double receipt = 0;
                    double payment = 0;
                    if (!bankBookData.optString("d_amountAccountCurrency").equals("")) {
                        if (getObj.has("receipt")) {
                            receipt = getObj.optDouble("receipt");
                        }
                        receipt += Double.parseDouble(bankBookData.getString("d_amountAccountCurrency"));
                        getObj.put("receipt", authHandler.round(receipt, companyid));
                    } else if (!bankBookData.optString("c_amountAccountCurrency").equals("")) {
                        if (getObj.has("payment")) {
                            payment = getObj.optDouble("payment");
                        }
                        payment += Double.parseDouble(bankBookData.getString("c_amountAccountCurrency"));
                        getObj.put("payment", authHandler.round(payment, companyid));
                    }
                    if(bankBookData.has("balanceAmountAccountCurrency")){
                        getObj.put("amount", bankBookData.optString("balanceAmountAccountCurrency").equals("")?0.00:authHandler.round(Double.parseDouble(bankBookData.getString("balanceAmountAccountCurrency")), companyid));
                    }
                } else {
                    JSONObject putObj = new JSONObject();
                    if (bankBookData.has("accountid")) {
                        putObj.put("accountid", bankBookData.getString("accountid"));
                    }
                    if (!bankBookData.optString("d_amountAccountCurrency").equals("")) {
                        double receipt = Double.parseDouble(bankBookData.getString("d_amountAccountCurrency"));
                        putObj.put("receipt", authHandler.round(receipt, companyid));
                    } else if (!bankBookData.optString("c_amountAccountCurrency").equals("")) {
                        double payment = Double.parseDouble(bankBookData.getString("c_amountAccountCurrency"));
                        putObj.put("payment", authHandler.round(payment, companyid));
                    }
                    if(bankBookData.has("balanceAmountAccountCurrency")){
                        putObj.put("amount", bankBookData.optString("balanceAmountAccountCurrency").equals("")?0.00:authHandler.round(Double.parseDouble(bankBookData.getString("balanceAmountAccountCurrency")), companyid));
                    }
                    bankBookStoreData.put(bankBookData.optString("accountid"), putObj);
                }
//                if ((bankBookData.optString("d_accountname", "")).equals("Period Balance") || (bankBookData.optString("c_accountname", "")).equals("Period Balance")
//                        || (bankBookData.optString("d_accountname", "")).equals("Balance c/f") || (bankBookData.optString("c_accountname", "")).equals("Balance c/f")) {
//                    if (bankBookData.optString("d_accountname", "").equals("Balance c/f") || bankBookData.optString("c_accountname", "").equals("Balance c/f")) {
//                        JSONObject getObj = bankBookStoreData.getJSONObject(accountid);
//                        if (bankBookData.has("balanceAmountAccountCurrency")) {
//                            getObj.put("amount", bankBookData.optString("balanceAmountAccountCurrency").equals("") ? 0.00 : authHandler.round(Double.parseDouble(bankBookData.getString("balanceAmountAccountCurrency")), 2));
//                        }
//                    }
//                    continue;
//                }
            }
            Date startDate = new Date(0);
            Date endDate = new Date();
            String sDate = request.getParameter(Constants.REQ_startdate);
            String eDate = request.getParameter(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(sDate)) {
                startDate = authHandler.getDateOnlyFormat().parse(sDate);
            }
            if (!StringUtil.isNullOrEmpty(eDate)) {
                endDate = authHandler.getDateOnlyFormat().parse(eDate);
            }
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            if (list != null) {
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    JSONObject obj = new JSONObject();
                    Object[] row = (Object[]) itr.next();
                    String accountid = (String) row[0].toString();//accountid
                    String accountname = (row[1] != null ? (String) row[1].toString() : "");
                    if (bankBookStoreData.has(accountid)) {
                        JSONObject newObj = bankBookStoreData.getJSONObject(accountid);
                        obj.put("accname", accountname);
                        obj.put("currencyname", row[22] != null ? (String) row[22].toString() : "");
                        obj.put(Constants.currencyKey, row[12] != null ? (String) row[12].toString() : "");
                        obj.put("currencysymbol", row[21] != null ? (String) row[21].toString() : "");
                        if (newObj.has("receipt")) {
                            obj.put("receipt", newObj.getDouble("receipt"));
                        }
                        if (newObj.has("payment")) {
                            obj.put("payment", newObj.getDouble("payment"));
                        }
                        obj.put("amount",newObj.has("amount")? newObj.getDouble("amount"):0.00);
                        array.put(obj);
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return array;
    }

    @Override
    public JSONObject getLedger(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            jobj = getLedger(paramJobj);
        }catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getLedger : " + ex.getMessage(), ex);
        }
        return jobj;
    }

    @Override
    public JSONObject getLedger(JSONObject requestJobj) throws ServiceException, SessionExpiredException {
        
        JSONObject jobj = new JSONObject();
        List accountlist = new ArrayList();
        try {
            boolean includeExcludeChildBalances = requestJobj.optBoolean("includeExcludeChildBalances",true);
            double total = 0;
            String accountid = "";
            String selectedCurrencyIds = requestJobj.optString("currencyIds");
            double balanceAmount = 0;
            double OpeningBalanceInAccountCurrency = 0;
            double balanceAmountAccountCurrency = 0;
            double totalAccountCurrency = 0;
            accountid = requestJobj.optString("accountid") ;
            String requestAccId = accountid;
            boolean ledgerReportFlag = requestJobj.optBoolean("ledgerReport");
            boolean generalLedgerFlag = requestJobj.optBoolean("generalLedgerFlag");
          
            String subGroupHeader = "";
            String mainGroupHeader = "";
            boolean issubGeneralLedger = requestJobj.optBoolean("issubGeneralLedger");
            Map<String, Object> subLedgerMap = new HashMap<String, Object>();
            if (issubGeneralLedger) {
                mainGroupHeader = requestJobj.optString("mainGroupJSON");
                subGroupHeader = requestJobj.optString("subGroupJSON");
            }
            subLedgerMap.put(Constants.SUB_GROUP_HEADER, subGroupHeader);
            subLedgerMap.put(Constants.MAIN_GROUP_HEADER, mainGroupHeader);
            subLedgerMap.put(Constants.IS_SUB_LEDGER_EXPORT, issubGeneralLedger);

          /*
             * If viewFlag=0 then Display All Records in Bank Book records If
             * If viewFlag=1 then Display only Make Payment in Bank Book records If
             * If viewFlag=2 then Display only Receive Payment in Bank Book records
             */
            int viewFlag = requestJobj.optInt("viewFlag",0);
            int accountTransactionType = requestJobj.optInt("accountTransactionType",Constants.All_Transaction_TypeID);// It will be zero for all otherwise it value will be transaction type value given in constant
            int accountidCount = 0;
            if (!StringUtil.isNullOrEmpty(accountid)) {
                accountidCount = accountid.split(",").length;
            }
            String selectedBalPLId ="";
            boolean isFromTledgerReport = requestJobj.optBoolean("isFromTledgerReport");
            if (isFromTledgerReport && !StringUtil.isNullOrEmpty(requestJobj.optString("balPLId"))) {
                selectedBalPLId = requestJobj.optString("balPLId");
            }
            //SDP-319 : Used appropriate date format for proper filtering
            SimpleDateFormat formatter = (SimpleDateFormat) authHandler.getDateOnlyFormat();
            DateFormat df = authHandler.getDateOnlyFormat();
            Date endDate = df.parse(requestJobj.optString("enddate"));
            
            Date startDate=null;
            String stdate = requestJobj.optString("stdate",null);
            if (StringUtil.isNullOrEmpty(stdate)) {
                KwlReturnObject companyresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), requestJobj.optString(Constants.companyKey));
                CompanyAccountPreferences comppreferences = (CompanyAccountPreferences) companyresult.getEntityList().get(0);
                startDate = comppreferences.getBookBeginningFrom();
                requestJobj.put("stdate", authHandler.getDateOnlyFormat().format(startDate));
            } else {
                startDate = df.parse(requestJobj.optString("stdate"));
            }
            
            if (accountid.equalsIgnoreCase("All")) {
                HashMap<String, Object> requestParams = accAccountHandler.getJsonMap(requestJobj);
                requestParams.put("nondeleted", "true");
                requestParams.put(Constants.start, "");
                requestParams.put("limit", "");
                 requestParams.put("selectedBalPLId", selectedBalPLId);
                KwlReturnObject result = accAccountDAOobj.getAccountsForCombo(requestParams);
                accountlist = result.getEntityList();
            } else {  //addd for miltiple bank accounts selection
                String AccountidGroup[] = accountid.split(",");
                for (int i = 0; i < accountidCount; i++) {
                    KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), AccountidGroup[i]);
                    Account account = (Account) accresult.getEntityList().get(0);
                    if (account != null) {
                        accountlist.add(account);
                        if (generalLedgerFlag) {
                            if (includeExcludeChildBalances) {
                                accountlist = getChildAccounts(accountlist, account);
                            }
                        } else {
                            accountlist = getChildAccounts(accountlist, account);
                        }
                    }
                }
            }
            boolean loadTransactionDetails = false;
            if (requestJobj.has(Constants.LOAD_TRANSACTION_DETAILS)) {// flag to skip the transaction details
                loadTransactionDetails = requestJobj.optBoolean(Constants.LOAD_TRANSACTION_DETAILS);
            }
            boolean consolidateFlag = requestJobj.optBoolean("consolidateFlag");
            String gcurrencyid = requestJobj.optString(Constants.globalCurrencyKey);
            boolean eliminateflag = consolidateFlag;
            boolean excludePreviousYear = requestJobj.optBoolean("excludePreviousYear");
            Date start = new Date(1970);
            Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();  //end date used to calculate Opening Balance

            Boolean bankBook = requestJobj.optBoolean("bankBook");
            Boolean ledgerReport = requestJobj.optBoolean("ledgerReport");
            String companyid = requestJobj.optString(Constants.companyKey);
            KwlReturnObject prefresult = null;
            KwlReturnObject extraprefresult = null;
            CompanyAccountPreferences pref = null;
            ExtraCompanyPreferences extraPref = null;
            String cashAccount = "";
            if (!consolidateFlag) {
                prefresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
                pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
                cashAccount = pref.getCashAccount().getID();
            }
            extraprefresult = accountingHandlerDAOobj.loadObject(ExtraCompanyPreferences.class.getName(), companyid);
            extraPref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            boolean isMultiEntity = extraPref.isIsMultiEntity();
            
            HashMap<String, Object> reqParams = AccountingManager.getGlobalParamsJson(requestJobj);
            reqParams.put(Constants.REQ_startdate, requestJobj.get("stdate"));
            reqParams.put(Constants.REQ_enddate, requestJobj.get("enddate"));
            reqParams.put("dateformat", authHandler.getDateOnlyFormat());

            String Searchjson =  requestJobj.optString(Constants.Acc_Search_Json);
            String filterCriteria = requestJobj.optString(Constants.Filter_Criteria);
            String cnSearchJson = "";
            String dnSearchJson = "";
            if (!StringUtil.isNullOrEmpty(Searchjson) && !StringUtil.isNullOrEmpty(filterCriteria)) {
                reqParams.put("isIAF", true);
                HashMap<String, Object> reqPar1 = new HashMap<String, Object>();
                reqPar1.put(Constants.companyKey, companyid);
                reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                reqPar1.put(Constants.Filter_Criteria, filterCriteria);
                
                reqPar1.remove(Constants.moduleid);
                reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                cnSearchJson = getSearchJsonByModule(reqPar1);

                reqPar1.remove(Constants.moduleid);
                reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                dnSearchJson = getSearchJsonByModule(reqPar1);
            }

            Map<String, Object[]> creditNoteMap = Collections.emptyMap();
            Map<String, Object[]> creditNoteMapVendor = Collections.emptyMap();
            Map<String, Object[]> debitNoteMap = Collections.emptyMap();
            Map<String, Object[]> debitNoteMapCustomer = Collections.emptyMap();
            Map<String, Integer> jeDetailPaymentTypeMap = new HashMap<String, Integer>();
            Map<String, Integer> jeDetailReceiptTypeMap = new HashMap<String, Integer>();
            
            if (!consolidateFlag) {
                reqParams.put(Constants.companyKey, companyid);
                reqParams.put(Constants.globalCurrencyKey, gcurrencyid);
                reqParams.put(Constants.Filter_Criteria, requestJobj.optString(Constants.Filter_Criteria));

                if(!StringUtil.isNullOrEmpty(Searchjson)){
                    reqParams.remove(Constants.Acc_Search_Json);
                    reqParams.put(Constants.Acc_Search_Json, cnSearchJson);
                }
                reqParams.put("isPartyEntry", true);// fetch only CN/DN whichi is created by party journal
                creditNoteMap = getCreditNoteMap(reqParams);
                creditNoteMapVendor = creditNoteMapVendor(reqParams);

                if(!StringUtil.isNullOrEmpty(Searchjson)){
                    reqParams.remove(Constants.Acc_Search_Json);
                    reqParams.put(Constants.Acc_Search_Json, dnSearchJson);
                }
                debitNoteMap = getDebitNoteMap(reqParams);
                debitNoteMapCustomer = debitNoteMapCustomer(reqParams);
            }

            Iterator iterator = accountlist.iterator();
            JSONArray jArr = new JSONArray();
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(requestJobj);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            while (iterator.hasNext()) {
                balanceAmount = 0;
		balanceAmountAccountCurrency = 0;   //ERP-8853
                total = 0;
                OpeningBalanceInAccountCurrency = 0;
                //Object listObj = iterator.next();
                Account account = null;
                if (requestAccId.equalsIgnoreCase("All")) {
                    Object[] row = (Object[]) iterator.next();
                    KwlReturnObject retObj = accountingHandlerDAOobj.getObject(Account.class.getName(), row[0].toString());
                    account = (Account) retObj.getEntityList().get(0);
                } else {
                    account = (Account) iterator.next();	//SDP-11662
                }
                accountid = account.getID();
                boolean showOpeningBalanceSeprately = true;
                if (excludePreviousYear && account.getAccounttype() == 0) {//0 :- profit and loss account
                    
                    start = getDateForExcludePreviousYearBalanceFilter(requestJobj, startDate);
                } else {
                    start = null;  
                }

                double accountOpeningBalanceInBase = 0.0d;
                double OpeningBalanceInBaseCurrency = 0.0d;

                //other than T-Ledger reports call come in this else e.g.1)on expander click of General Ledger.2)cashbook/bank book reports.

                accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccountJson(requestJobj, account, false, null);

                boolean shouldAccountOpeningBalanceInclude = !accInvoiceCommon.accountHasOpeningTransactionsJson(requestJobj, account, false, null);

                if (shouldAccountOpeningBalanceInclude) {
                    OpeningBalanceInAccountCurrency = authHandler.round(account.getOpeningBalance(), companyid);
                } else {
                    String accountcurrencyid = account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID();
                    KwlReturnObject crresult11 = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, accountOpeningBalanceInBase, accountcurrencyid, account.getCreationDate(), 0);
                    OpeningBalanceInAccountCurrency = (Double) crresult11.getEntityList().get(0);
                    OpeningBalanceInAccountCurrency = authHandler.round(OpeningBalanceInAccountCurrency, companyid);
                }

                if (bankBook) {
                    balanceAmountAccountCurrency = 0;
                }
                OpeningBalanceInBaseCurrency = accountOpeningBalanceInBase;
                
                /*
                 * As discussed with Sagar A sir in ERP-36028 removing below
                 * code to show opening balance in tLedger reoprt in case of
                 * advance search. This method is also used by Bank Book and Bank
                 * Reconcilation report but advance search is not provided
                 * there. So commenting below code.
                 */
//                if (!StringUtil.isNullOrEmpty(requestJobj.optString(Constants.Acc_Search_Json))) { // ERP-11394 reset opening balance in case of advance serach
//                    accountOpeningBalanceInBase = 0;
//                    OpeningBalanceInBaseCurrency = 0;
//                    OpeningBalanceInAccountCurrency = 0;
//                }
                
                //BUG Fixed #16739 : Creation date check
                Date createdOn = AccountingManager.resetTimeField(account.getCreationDate());
                Date toDate = AccountingManager.resetTimeField(endDate);
                if (toDate.compareTo(createdOn) < 0) {
                    jobj.put(Constants.RES_data, new JSONArray()); //Return Empty Data
                    return jobj;
                }

                String entryChar = "c", emptyChar = "d";
                double balance = 0;
                double balanceAccountCurrency = 0;
                double openingBalance=0.00;
                double openingBalanceAccountCurrency=0.00;
                
                requestParams.put("costcenter", requestJobj.optString("costcenter"));
                requestParams.put(Constants.Acc_Search_Json, requestJobj.optString(Constants.Acc_Search_Json));
                requestParams.put(Constants.Filter_Criteria, requestJobj.optString(InvoiceConstants.Filter_Criteria));
                
                balance = getAccountBalanceMerged(requestJobj,requestParams, accountid, null, openBalEndDate, eliminateflag);
                String mappedAccIDs = accountid + ",";
                if (consolidateFlag) {//Fetch mapped account's balances.
                    List mapaccresult = accAccountDAOobj.getMappedAccountsForReports(accountid);
                    Iterator<Object[]> itr1 = mapaccresult.iterator();
                    String mappedaccountid = "";
                    while (itr1.hasNext()) {
                        Object[] row = (Object[]) itr1.next();
                        mappedaccountid = row[0].toString();
                        mappedAccIDs += mappedaccountid + ",";
                        KwlReturnObject childObj = accountingHandlerDAOobj.loadObject(Account.class.getName(), mappedaccountid);
                        Account child = (Account) childObj.getEntityList().get(0);
                        requestJobj.put(Constants.companyKey, child.getCompany().getCompanyID());

                        balance += getAccountBalanceMerged(requestJobj,requestParams, mappedaccountid, excludePreviousYear ? start : null, openBalEndDate, eliminateflag);
                    }
                }
                if (balance != 0) {
                    
                    requestParams.put("tocurrencyid", requestJobj.optString("tocurrencyid"));
                    requestParams.put("templatecode", requestJobj.optInt("templatecode",-1));
                    if (!StringUtil.isNullOrEmpty(selectedCurrencyIds)) {
                        requestParams.put("currencyFlag", true);
                        requestParams.put("selectedCurrencyIds", selectedCurrencyIds);
                    }
                    
                    balanceAccountCurrency = getAccountBalanceInOriginalCurrency(requestJobj,requestParams, accountid, excludePreviousYear ? start : null, openBalEndDate);
                    mappedAccIDs = accountid + ",";
                    if (consolidateFlag) {//Fetch mapped account's balances.
                        List mapaccresult = accAccountDAOobj.getMappedAccountsForReports(accountid);
                        Iterator<Object[]> itr1 = mapaccresult.iterator();
                        String mappedaccountid = "";
                        while (itr1.hasNext()) {
                            Object[] row = (Object[]) itr1.next();
                            mappedaccountid = row[0].toString();
                            mappedAccIDs += mappedaccountid + ",";
                            KwlReturnObject childObj = accountingHandlerDAOobj.loadObject(Account.class.getName(), mappedaccountid);
                            Account child = (Account) childObj.getEntityList().get(0);
                            requestJobj.put(Constants.companyKey, child.getCompany().getCompanyID());
                            balanceAccountCurrency += getAccountBalanceInOriginalCurrency(requestJobj,requestParams, mappedaccountid, excludePreviousYear ? start : null, openBalEndDate);
                        }
                    }
                }
                Date sDate = AccountingManager.resetTimeField(startDate);
                if (sDate.after(createdOn)) {
                    balance += accountOpeningBalanceInBase;
                    balanceAccountCurrency += OpeningBalanceInAccountCurrency;
                    showOpeningBalanceSeprately = false;
                }
                if (balance != 0 || balanceAccountCurrency != 0) {
                    if (balance > 0) {
                        entryChar = "d";
                        emptyChar = "c";
                    } else {
                        entryChar = "c";
                        emptyChar = "d";
                    }
                    JSONObject objlast = new JSONObject();
                    objlast.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(startDate));
                    objlast.put(entryChar + "_accountname", "Balance b/d");
                    objlast.put(entryChar + "_acccode", "");
                    objlast.put(entryChar + "_journalentryid", "");
                    objlast.put(entryChar + "_transactionID", "");
                    objlast.put(entryChar + "_transactionDetails", "");
                    objlast.put(entryChar + "_transactionDetailsForExpander", "");
                    objlast.put(entryChar + "_transactionDetailsBankBook", "");
                    objlast.put(entryChar + "_checkno", "");
                    objlast.put(entryChar + "_description", "");
                    objlast.put(entryChar + "_amount", Math.abs(balance));
                    objlast.put(emptyChar + "_date", "");
                    objlast.put(emptyChar + "_accountname", "");
                    objlast.put(emptyChar + "_journalentryid", "");
                    objlast.put(emptyChar + "_amount", "");
                    objlast.put(emptyChar + "_transactionID", "");
                    objlast.put(emptyChar + "_transactionDetails", "");
                    objlast.put(emptyChar + "_transactionDetailsForExpander", "");
                    objlast.put(emptyChar + "_transactionDetailsBankBook", "");
                    objlast.put(emptyChar + "_checkno", "");
                    objlast.put(emptyChar + "_description", "");
                    objlast.put("accountid", accountid);
                    objlast.put("currencysymbol", account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol());
                    objlast.put("currencycode", account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode());
                    String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                    objlast.put("accountname", accountname);

                    String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                    objlast.put("accCode", acccode);
                    objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());

                    // this is for displaying on the group header
                    if (!acccode.equals("") && account.getName().equals("")) {
                        objlast.put("accCodeName", acccode);
                    } else if (!acccode.equals("") && !account.getName().equals("")) {
                        objlast.put("accCodeName", acccode + " - " + account.getName());
                    } else {
                        objlast.put("accCodeName", accountname);
                    }

                    if (entryChar.equals("d")) {
                        balanceAmount = balanceAmount + Math.abs(balance);
                        objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                    } else if (entryChar.equals("c")) {
                        balanceAmount = balanceAmount - Math.abs(balance);
                        objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                    }

                    if (balanceAccountCurrency > 0) {
                        entryChar = "d";
                        emptyChar = "c";
                    } else {
                        entryChar = "c";
                        emptyChar = "d";
                    }
                    
                    if (entryChar.equals("d")) {
                        balanceAmountAccountCurrency = balanceAmountAccountCurrency + Math.abs(balanceAccountCurrency);
                        objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                    } else if (entryChar.equals("c")) {
                        balanceAmountAccountCurrency = balanceAmountAccountCurrency - Math.abs(balanceAccountCurrency);
                        objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                    }
                    objlast.put(entryChar + "_amountAccountCurrency", Math.abs(balanceAccountCurrency));
                    jArr.put(objlast);

                    if (requestJobj.optString("filetype") != null) {
                        if (requestJobj.optString("filetype").equals("print") || requestJobj.optString("filetype").equals("csv")) {
                            if (emptyChar == "d") {
                                total = total + Math.abs(balance);
                                totalAccountCurrency = totalAccountCurrency + Math.abs(balanceAccountCurrency);
                            }
                        }
                    }
                }

                if (showOpeningBalanceSeprately) {//shows opening balance if date from in account ceration date
                    if (OpeningBalanceInAccountCurrency != 0) {
                        if (OpeningBalanceInAccountCurrency > 0) {
                            entryChar = "d";
                            emptyChar = "c";
                            balance += OpeningBalanceInBaseCurrency;
                            balanceAccountCurrency += OpeningBalanceInAccountCurrency;
                        } else {
                            balance += OpeningBalanceInBaseCurrency;
                            balanceAccountCurrency += OpeningBalanceInAccountCurrency;
                            entryChar = "c";
                            emptyChar = "d";
                        }

                        JSONObject objlast = new JSONObject();
                        objlast.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(startDate));
                        objlast.put(entryChar + "_accountname", "Opening Balance");
                        objlast.put(entryChar + "_acccode", "");
                        objlast.put(entryChar + "_journalentryid", "");
                        objlast.put(entryChar + "_amount", Math.abs(OpeningBalanceInBaseCurrency));
                        objlast.put(entryChar + "_amountAccountCurrency", Math.abs(OpeningBalanceInAccountCurrency));
                        objlast.put(entryChar + "_transactionID", "");
                        objlast.put(entryChar + "_transactionDetails", "");
                        objlast.put(entryChar + "_transactionDetailsForExpander", "");
                        objlast.put(entryChar + "_transactionDetailsBankBook", "");
                        objlast.put(entryChar + "_checkno", "");
                        objlast.put(entryChar + "_description", "");
                        objlast.put(emptyChar + "_date", "");
                        objlast.put(emptyChar + "_accountname", "");
                        objlast.put(emptyChar + "_journalentryid", "");
                        objlast.put(emptyChar + "_amount", "");
                        objlast.put(emptyChar + "_transactionID", "");
                        objlast.put(emptyChar + "_transactionDetails", "");
                        objlast.put(emptyChar + "_transactionDetailsForExpander", "");
                        objlast.put(emptyChar + "_transactionDetailsBankBook", "");
                        objlast.put(emptyChar + "_checkno", "");
                        objlast.put(emptyChar + "_description", "");
                        objlast.put("accountid", accountid);
                        objlast.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
                        objlast.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                        String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                        objlast.put("accountname", accountname);

                        String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                        objlast.put("accCode", acccode);
                        objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());

                        // this is for displaying on the group header
                        if (!acccode.equals("") && account.getName().equals("")) {
                            objlast.put("accCodeName", acccode);
                        } else if (!acccode.equals("") && !account.getName().equals("")) {
                            objlast.put("accCodeName", acccode + " - " + account.getName());
                        } else {
                            objlast.put("accCodeName", accountname);
                        }

                        if (entryChar.equals("d")) {
                            balanceAmount = balanceAmount + Math.abs(OpeningBalanceInBaseCurrency);// work on home currency
                            objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                            balanceAmountAccountCurrency = balanceAmountAccountCurrency + Math.abs(OpeningBalanceInAccountCurrency);// work on home currency
                            objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                        } else if (entryChar.equals("c")) {
                            balanceAmount = balanceAmount - Math.abs(OpeningBalanceInBaseCurrency);
                            objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                            balanceAmountAccountCurrency = balanceAmountAccountCurrency - Math.abs(OpeningBalanceInAccountCurrency);
                            objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                        }
                        jArr.put(objlast);

                    }
                }
                if(!ledgerReportFlag && !generalLedgerFlag){//we saves balance brod down or Opening Balance to avoid adding to period balance
                    openingBalance=balance;
                    openingBalanceAccountCurrency=balanceAccountCurrency;
                    balance=0.00;
                    balanceAccountCurrency=0.00;
                }
                String searchJson = requestJobj.optString(Constants.Acc_Search_Json);
                if (!StringUtil.isNullOrEmpty(searchJson)) {//This is used for to Get different dimension entry from dimension name for diffrent modules
                    searchJson = accJournalEntryobj.getJsornStringForSearch(searchJson, mappedAccIDs.split(",")[0],null);
                }
                String filterConjuctionCriteria = requestJobj.optString(InvoiceConstants.Filter_Criteria);

                KwlReturnObject lresult = accJournalEntryobj.getLedgerMerged(mappedAccIDs, startDate, endDate, eliminateflag, generalLedgerFlag, selectedCurrencyIds, filterConjuctionCriteria, searchJson,viewFlag,accountTransactionType,pref);
                List list = lresult.getEntityList();
                Iterator itr = list.iterator();
                String fileType = requestJobj.optString("filetype");
                if (fileType!=null) {
                    if (itr.hasNext()) { //For Displaying Group Name in CSV and PDF
                        if (!bankBook && ledgerReportFlag && fileType != null && (fileType.equals("csv") || fileType.equals("pdf") || fileType.equals("print"))) {
                            JSONObject accountGroup = addAccountGroupJson(account);;
                            jArr.put(accountGroup);
                        }
                    }
                }
                while (itr.hasNext()) {

                    JournalEntry entry = null;
                    JournalEntryDetail jed = null;
                    Object[] row = (Object[]) itr.next();
                        
                    if (row[0] instanceof JournalEntry && row[1] instanceof JournalEntryDetail) {
                        entry = (JournalEntry) row[0];
                        jed = (JournalEntryDetail) row[1];
                    } else {
                        String jeid = (String) row[0];
                        String jedid = (String) row[1];

                        KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(JournalEntry.class.getName(), jeid);
                        entry = (JournalEntry) jeresult.getEntityList().get(0);
                        jeresult = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), jedid);
                        jed = (JournalEntryDetail) jeresult.getEntityList().get(0);
                    }
                    
                    if (consolidateFlag) {
                        companyid = entry.getCompany().getCompanyID();
                        requestJobj.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.globalCurrencyKey, gcurrencyid);

                        prefresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
                        pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
                        cashAccount = pref.getCashAccount().getID();
                    }
                    int transactionModuleID=entry.getTransactionModuleid();
                    String currencyid = (jed.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : jed.getJournalEntry().getCurrency().getCurrencyID());
                    JSONObject obj = new JSONObject();
                    KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, jed.getAmount(), currencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                    double transactionAmount = jed.getAmount();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                    Date transactionDate = jed.getJournalEntry().getEntryDate();
                    String transactionDateString = "";
                    if (transactionDate != null) {
                        transactionDateString = dateFormat.format(transactionDate);
                    }
                    KwlReturnObject crresult1 = null;
                    if (currencyid.equals(jed.getAccount().getCurrency().getCurrencyID())) {
                        crresult1 = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, jed.getAmount(), currencyid, jed.getAccount().getCurrency().getCurrencyID(), jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                    } else {
                        crresult1 = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, jed.getAmount(), currencyid, jed.getAccount().getCurrency().getCurrencyID(), jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());

                    }
                    double amountBaseCurrency = (Double) crresult.getEntityList().get(0);
                    amountBaseCurrency = authHandler.round(amountBaseCurrency, companyid);
                    double amountAccountCurrency = 0;
                    
                    /* ERP-14744 : I have commented following check. So far Exchange Gain/Loss transaction amount ll not be consider in Total 
                    Amount of Bank Book, Bank Reconciliation & Ledger Report. */
                    
                    if (jed.getJournalEntry().getIsReval() > 0){
                        amountAccountCurrency = 0;
                    } else {
                        if(!StringUtil.isNullOrEmpty(currencyid) && jed!=null && jed.getAccount() !=null && jed.getAccount().getCurrency()!=null && currencyid.equals(jed.getAccount().getCurrency().getCurrencyID())){
                            amountAccountCurrency=authHandler.round(jed.getAmount(), companyid); //SDP-10502 // if transactionCurrencyID=accountCurrencyID, then don't convert the amount
                        }
                        /**
                         * !(jed.getJournalEntry().getTypeValue() == Constants.FundTransfer_Journal_Entry) check added  If Account Currency & Transaction Currency is different
                         *  and if it is fund transfer then amount will be calculated with spot rate if spot rate given by user, if spot rate not given then it will take rate from exchangerate table. 
                         */
                        else if(!StringUtil.isNullOrEmpty(currencyid) && jed!=null && jed.getAccount() !=null && jed.getAccount().getCurrency()!=null && !(currencyid.equals(jed.getAccount().getCurrency().getCurrencyID())) && !(jed.getJournalEntry().getTypeValue() == Constants.FundTransfer_Journal_Entry)){
                            amountAccountCurrency = (Double) crresult1.getEntityList().get(0);      //If Account Currency & Transaction Currency is different	SDP-7928
                            amountAccountCurrency= authHandler.round(amountAccountCurrency, 2);
                        } else if ((jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate() != 1) || ((jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate() == 1) && jed.getJournalEntry().isIsmulticurrencypaymentje())) {    // If this JE is for that payment, which is having payment currency and payment method currency different.
                            double baseCurrencyToPaymentCurrencyConvertedAmount = jed.getAmount();   // This amount is already saved in payment currency only. 
                            double baseCurrencyToPaymentMethodCurrencyConvertedAmount = baseCurrencyToPaymentCurrencyConvertedAmount * jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate();
                            amountAccountCurrency = baseCurrencyToPaymentMethodCurrencyConvertedAmount;
                            amountAccountCurrency= authHandler.round(amountAccountCurrency, companyid);
                            /*
                             * ERP-16072
                             * When JE is fund transafer JE with line level exchange rate is applicable for account currency to JE currency,
                             * amount in account currency will be calculated according to user given exchange rate.
                             */
                        } else if(jed.getJournalEntry().getTypeValue() == Constants.FundTransfer_Journal_Entry && jed.getExchangeRateForTransaction() !=0 && jed.getExchangeRateForTransaction()!= -1){
                            amountAccountCurrency = jed.getAmount()/jed.getExchangeRateForTransaction();
                            amountAccountCurrency = authHandler.round(amountAccountCurrency, companyid);
                        }else {
                            amountAccountCurrency = (Double) crresult1.getEntityList().get(0);
                            amountAccountCurrency= authHandler.round(amountAccountCurrency, companyid);
                        }
                    }
                    if (jed.isDebit()) {
                        balance += authHandler.round(amountBaseCurrency, companyid);
                        balanceAccountCurrency += authHandler.round(amountAccountCurrency, companyid);
                        entryChar = "d";
                        emptyChar = "c";
                    } else {
                        balance -= authHandler.round(amountBaseCurrency, companyid);
                        balanceAccountCurrency -= authHandler.round(amountAccountCurrency, companyid);
                        entryChar = "c";
                        emptyChar = "d";
                    }
                    
                    Set details = entry.getDetails();
                    Iterator iter = details.iterator();
                    List<String> accnameList = new ArrayList<String>();
                    String accountName = "";
                    String accountCode = "";
                    String customerVendorId = "";
                    String customerVendorName = "";
                    int accountpersontype = 99;
                    while (iter.hasNext()) {
                        JournalEntryDetail d = (JournalEntryDetail) iter.next();
                        if (d.isDebit() == jed.isDebit()) {
                            continue;
                        }
                        String accname = StringUtil.isNullOrEmpty(d.getAccount().getName()) ? "" : d.getAccount().getName();
                        accnameList.add(accname);
                        accountCode += StringUtil.isNullOrEmpty(d.getAccount().getAcccode()) ? "" : d.getAccount().getAcccode() + ", ";
                        customerVendorId = d.getCustomerVendorId();
                        accountpersontype = d.getAccountpersontype();
                        if (accountpersontype != 99 && accountpersontype != 0 && customerVendorId != null) {
                            if (accountpersontype == 1) {
                                KwlReturnObject resultCustomer = accountingHandlerDAOobj.loadObject(Customer.class.getName(), customerVendorId);
                                if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
                                    Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                                    customerVendorName = customer.getName();
                                    obj.put("customerVendorName", customer.getName());
                                }
                            } else if (accountpersontype == 2) {
                                KwlReturnObject resultVendor = accountingHandlerDAOobj.loadObject(Vendor.class.getName(), customerVendorId);
                                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                                    customerVendorName = vendor.getName();
                                    obj.put("customerVendorName", vendor.getName());
                                }
                            }
                        }
                    }
                    //Sorting performed to avoid shuffling in two A/C name in Single String object. //ERP-8519
                    Collections.sort(accnameList);
                    for(String accName : accnameList){
                        accountName += StringUtil.isNullOrEmpty(accName)?"":accName + ", ";
                    }
                    accountName = StringUtil.isNullOrEmpty(accountName) ? "" : accountName.substring(0, Math.max(0, accountName.length() - 2));
                    accountCode = StringUtil.isNullOrEmpty(accountCode) ? "" : accountCode.substring(0, Math.max(0, accountCode.length() - 2));
                    accountName = (StringUtil.isNullOrEmpty(accountName) && !StringUtil.isNullOrEmpty(accountCode)) ? accountCode : accountName;
                    obj.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(entry.getEntryDate()));
                    if (!StringUtil.isNullOrEmpty(customerVendorName) && (bankBook || ledgerReport)) {
                        obj.put(entryChar + "_accountname", customerVendorName);
                    } else {
                        obj.put(entryChar + "_accountname", accountName);
                    }
                    obj.put(entryChar + "_acccode", accountCode);
                    obj.put(entryChar + "_entryno", entry.getEntryNumber());
		    obj.put(entryChar + "_externalcurrencyrate", entry.getExternalCurrencyRate());
                    obj.put(entryChar + "_journalentryid", entry.getID());
                    if(!loadTransactionDetails){ // skip the transaction details
                    boolean isPartyJournalEntry = entry.getTypeValue() == 2;
                    if ((transactionModuleID==Constants.Acc_Cash_Sales_ModuleId || transactionModuleID==Constants.Acc_Invoice_ModuleId ) &&  entry.getTransactionId()!= null){
                    
                        String configJSONStr="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Sales Invoice - $#$InvoiceNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Cash Sale - $#$InvoiceNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Customer',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'ProductDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.InvoiceDetail,com.krawler.common.admin.KWLCurrency,TRANSACTION_AMOUNT,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$InvDetailDescription$#$<br>Amount : $#$CurrencyCode$#$ $#$TRANSACTION_AMOUNT$#$ $#$CUSTOMDATA$#$'}]}]";          
                        JSONArray descJsonArr = new JSONArray();
                        boolean isDescConfig=false;
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Invoice_ModuleId);

                        isDescConfig=true;
                        if(isDescConfig) {
                            descJsonArr = new JSONArray(configJSONStr);
                        }
                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), entry.getTransactionId());
                        Invoice invoice = (Invoice) KwlInvoice.getEntityList().get(0);
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        if (accountid.equals(cashAccount) || invoice.isCashtransaction()) {
                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
                            obj.put(Constants.billid, invoice.getID());
                            obj.put("type", Constants.CASH_SALE);
                        } else {
                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
                            obj.put(Constants.billid, invoice.getID());
                            obj.put("type", Constants.CUSTOMER_INVOICE);
                        }
                        
                        //Get MultiEntity Dimension data
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_Invoice_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        Map<String, String> transDetMap = new HashMap<String, String> ();
                        if(!bankBook){
                            transDetMap = getTransactionDetailsForInvoiceForGL(invoice, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                            transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        }
                        if (invoice != null && invoice.getCustomer() != null && (bankBook || ledgerReport)) {
                            Customer customer = invoice.getCustomer();

                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        }
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue",invoice.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("paymentstatus", "Uncleared");
                        if (invoice.getPayDetail() != null) {
                            KwlReturnObject clearanceDate = accBankReconciliationObj.getBRfromJE(invoice.getJournalEntry().getID(), invoice.getCompany().getCompanyID(), false);
                            if (clearanceDate != null && clearanceDate.getEntityList() != null && clearanceDate.getEntityList().size() > 0) {
                                BankReconciliationDetail brd = (BankReconciliationDetail) clearanceDate.getEntityList().get(0);
                                if (brd.getBankReconciliation().getClearanceDate() != null) {
                                    obj.put("clearancedate", df.format(brd.getBankReconciliation().getClearanceDate()));
                                    obj.put("paymentstatus", "Cleared");
                                }
                            }
                        }
                        obj.put("gstCode", transDetMap.containsKey("gstCode") && !StringUtil.isNullOrEmpty(transDetMap.get("gstCode")) ? transDetMap.get("gstCode") : "");
                        obj.put("isconsignment",invoice.isIsconsignment());
                        obj.put("isLeaseFixedAsset",invoice.isFixedAssetLeaseInvoice());
                        if (issubGeneralLedger &&!bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForInvoiceSubLedger(invoice, subLedgerMap, entry, jed, accountid, companyid, cashAccount);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                    } else if ((transactionModuleID==Constants.Acc_Cash_Purchase_ModuleId || transactionModuleID==Constants.Acc_Vendor_Invoice_ModuleId) && entry.getTransactionId() != null) {
                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Purchase Invoice - $#$GoodsReceiptNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Cash Purchase - $#$GoodsReceiptNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Vendor',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'ProductDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.GoodsReceiptDetail,com.krawler.common.admin.KWLCurrency,TRANSACTION_AMOUNT,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$PIDetailDescription$#$<br>Amount : $#$CurrencyCode$#$ $#$TRANSACTION_AMOUNT$#$ $#$CUSTOMDATA$#$'}]},{seq:6,type:6,documentid:'ExpenseDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.ExpenseGRDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$EXPIDescription$#$ $#$CUSTOMDATA$#$'}]}]";          
                        JSONArray descJsonArr = new JSONArray(newString);
                        
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Vendor_Invoice_ModuleId);
                        
                        boolean isDescConfig=true;
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), entry.getTransactionId());
                        GoodsReceipt goodsReceipt = (GoodsReceipt) KwlInvoice.getEntityList().get(0);
                        if (accountid.equals(cashAccount) || goodsReceipt.isCashtransaction()) {
                            obj.put(entryChar + "_transactionID", goodsReceipt.getGoodsReceiptNumber());
                            obj.put(Constants.billid, goodsReceipt.getID());
                            obj.put("type", Constants.CASH_PURCHASE);
                        } else {
                            obj.put(entryChar + "_transactionID", goodsReceipt.getGoodsReceiptNumber());
                            obj.put(Constants.billid, goodsReceipt.getID());
                            obj.put("type", Constants.VENDOR_INVOICE);
                        }
                        
                        //Get MultiEntity Dimension data
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_Vendor_Invoice_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        Map<String, String> transDetMap = new HashMap<String, String> ();
                        if(!bankBook){
                            transDetMap = getTransactionDetailsForPurchaseInvoiceForGL(goodsReceipt, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                            transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                        }
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        if (goodsReceipt != null && goodsReceipt.getVendor() != null && (bankBook || ledgerReport)) {
                            Vendor vendor = goodsReceipt.getVendor();
                            obj.put("_cvName", vendor.getName());
                            obj.put(entryChar + "_accountname", vendor.getName());
                        }
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", goodsReceipt.getPayDetail()!=null && goodsReceipt.getPayDetail().getCheque()!=null && goodsReceipt.getPayDetail().getCheque().getDescription() != null ? goodsReceipt.getPayDetail().getCheque().getDescription() : "");
                        obj.put("memoValue", goodsReceipt.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("paymentstatus", "Uncleared");
                        if (goodsReceipt.getPayDetail() != null) {
                            KwlReturnObject clearanceDate = accBankReconciliationObj.getBRfromJE(goodsReceipt.getJournalEntry().getID(), goodsReceipt.getCompany().getCompanyID(), false);
                            if (clearanceDate != null && clearanceDate.getEntityList() != null && clearanceDate.getEntityList().size() > 0) {
                                BankReconciliationDetail brd = (BankReconciliationDetail) clearanceDate.getEntityList().get(0);
                                if (brd.getBankReconciliation().getClearanceDate() != null) {
                                    obj.put("clearancedate", df.format(brd.getBankReconciliation().getClearanceDate()));
                                    obj.put("paymentstatus", "Cleared");
                                }
                            }
                        }
                        obj.put("gstCode", transDetMap.containsKey("gstCode") && !StringUtil.isNullOrEmpty(transDetMap.get("gstCode")) ? transDetMap.get("gstCode") : "");
                        obj.put("isconsignment",goodsReceipt.isIsconsignment());
                        if (issubGeneralLedger &&!bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForPurchaseInvoiceSubLedger(goodsReceipt, subLedgerMap, entry, jed, accountid, companyid, cashAccount);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                    } else if (isPartyJournalEntry && (creditNoteMap.containsKey(entry.getID()) || creditNoteMapVendor.containsKey(entry.getID()))) {

                        String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.CreditNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Credit Note - $#$CreditNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.CreditNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.CreditNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$CNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                        JSONArray descJsonArr = new JSONArray(newString);

                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Credit_Note_ModuleId);
                        
                        boolean isDescConfig = true;
                        obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                        CreditNote creditNote = null;
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        Map<String, String> transDetMap = new HashMap<String, String> ();
                        if(!bankBook){
                        if (creditNoteMap.containsKey(entry.getID())) {
                            creditNote = (CreditNote) creditNoteMap.get(entry.getID())[0];
                            transDetMap = getTransactionDetailsForCreditNoteForGL(creditNote, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                        } else {
                            creditNote = (CreditNote) creditNoteMapVendor.get(entry.getID())[0];
                            transDetMap = getTransactionDetailsForCreditNoteForGL(creditNote, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                        }
                        }
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        if (creditNote != null && creditNote.getCustomer() != null && (bankBook || ledgerReport)) {
                            Customer customer = creditNote.getCustomer();

                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        } else if (creditNote != null && creditNote.getVendor() != null && (bankBook || ledgerReport)) {
                            Vendor vendor = creditNote.getVendor();
                            obj.put("_cvName", vendor.getName());
                            obj.put(entryChar + "_accountname", vendor.getName());
                        }
                        obj.put("noteid", creditNote.getID());
                        obj.put("type", Constants.CREDIT_NOTE);
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", creditNote.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("gstCode", transDetMap.containsKey("gstCode") && !StringUtil.isNullOrEmpty(transDetMap.get("gstCode")) ? transDetMap.get("gstCode") : "");
                        //Get MultiEntity Dimension data
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger &&!bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForCreditNoteSubLedger(creditNote, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                    } else if ((transactionModuleID == Constants.Acc_Credit_Note_ModuleId) && entry.getTransactionId() != null) {
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Credit_Note_ModuleId);
                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), entry.getTransactionId());
                        CreditNote creditNote = (CreditNote) KwlInvoice.getEntityList().get(0);
                        boolean isDescConfig = true;
                        obj.put(entryChar + "_transactionID", creditNote.getCreditNoteNumber());
                        String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.CreditNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Credit Note - $#$CreditNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.CreditNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.CreditNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$CNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                        JSONArray descJsonArr = new JSONArray(newString);
                        Map<String, String> transDetMap = new HashMap<String, String> ();
                        if(!bankBook){
                            transDetMap = getTransactionDetailsForCreditNoteForGL(creditNote, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                        }
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        if (creditNote != null && creditNote.getCustomer() != null && (bankBook || ledgerReport)) {
                            Customer customer = creditNote.getCustomer();

                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        } else if (creditNote != null && creditNote.getVendor() != null && (bankBook || ledgerReport)) {
                            Vendor vendor = creditNote.getVendor();
                            obj.put("_cvName", vendor.getName());
                            obj.put(entryChar + "_accountname", vendor.getName());
                        }
                        obj.put("noteid", creditNote.getID());
                        obj.put("type", Constants.CREDIT_NOTE);
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", creditNote.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("gstCode", transDetMap.containsKey("gstCode") && !StringUtil.isNullOrEmpty(transDetMap.get("gstCode")) ? transDetMap.get("gstCode") : "");
                        //Get MultiEntity Dimension data
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_Credit_Note_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger && !bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForCreditNoteSubLedger(creditNote, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                    } else if (isPartyJournalEntry && (debitNoteMap.containsKey(entry.getID()) || debitNoteMapCustomer.containsKey(entry.getID()))) {
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";

                        String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.DebitNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Debit Note - $#$DebitNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.DebitNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.DebitNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$DNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                        JSONArray descJsonArr = new JSONArray(newString);

                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Debit_Note_ModuleId);

                        boolean isDescConfig = true;
                        DebitNote debitNote = null;
                        Map<String, String> transDetMap = null;
                        if(!bankBook){
                            if (debitNoteMap.containsKey(entry.getID())) {
                                debitNote = (DebitNote) debitNoteMap.get(entry.getID())[0];
                                transDetMap = getTransactionDetailsForDebitNoteForGL(debitNote, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                                transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                                transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                            } else {
                                debitNote = (DebitNote) debitNoteMapCustomer.get(entry.getID())[0];
                                transDetMap = getTransactionDetailsForDebitNoteForGL(debitNote, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                                transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                                transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                            }
                        }
                        obj.put(entryChar + "_transactionID", entry.getEntryNumber());

                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        if (debitNote != null && debitNote.getCustomer() != null && (bankBook || ledgerReport)) {
                            Customer customer = debitNote.getCustomer();

                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        } else if (debitNote != null && debitNote.getVendor() != null && (bankBook || ledgerReport)) {
                            Vendor vendor = debitNote.getVendor();
                            obj.put("_cvName", vendor.getName());
                            obj.put(entryChar + "_accountname", vendor.getName());
                        }
                        obj.put("noteid", debitNote.getID());
                        obj.put("type", Constants.DEBIT_NOTE);
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", debitNote.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("gstCode", transDetMap.containsKey("gstCode") && !StringUtil.isNullOrEmpty(transDetMap.get("gstCode")) ? transDetMap.get("gstCode") : "");
                       //Get MultiEntity Dimension data
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger &&!bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForSubLedgerDebitNote(debitNote, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                    } else if (transactionModuleID == Constants.Acc_Debit_Note_ModuleId && entry.getTransactionId() != null) {
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Debit_Note_ModuleId);
                        boolean isDescConfig = true;
                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), entry.getTransactionId());
                        DebitNote debitNote = (DebitNote) KwlInvoice.getEntityList().get(0);
                        if (isPartyJournalEntry) {
                            obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                        } else {
                            obj.put(entryChar + "_transactionID", debitNote.getDebitNoteNumber());
                        }
                        String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.DebitNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Debit Note - $#$DebitNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.DebitNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.DebitNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$DNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                        JSONArray descJsonArr = new JSONArray(newString);
                        Map<String, String> transDetMap = new HashMap<String, String> ();
                        if(!bankBook){
                            transDetMap = getTransactionDetailsForDebitNoteForGL(debitNote, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                        }
                        transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        if (debitNote != null && debitNote.getCustomer() != null && (bankBook || ledgerReport)) {
                            Customer customer = debitNote.getCustomer();

                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        } else if (debitNote != null && debitNote.getVendor() != null && (bankBook || ledgerReport)) {
                            Vendor vendor = debitNote.getVendor();
                            obj.put("_cvName", vendor.getName());
                            obj.put(entryChar + "_accountname", vendor.getName());
                        }
                        obj.put("noteid", debitNote.getID());
                        obj.put("type", Constants.DEBIT_NOTE);
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", debitNote.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("gstCode", transDetMap.containsKey("gstCode") && !StringUtil.isNullOrEmpty(transDetMap.get("gstCode")) ? transDetMap.get("gstCode") : "");
                        //Get MultiEntity Dimension data
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_Debit_Note_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger && !bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForSubLedgerDebitNote(debitNote, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                    } else if (transactionModuleID == Constants.Acc_Receive_Payment_ModuleId && entry.getTransactionId() != null) {
                        String newString = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Receipt',key:'<br>$#$Memo$#$'}]},{seq:2,type:2,documentid:'AgainstGL',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptDetailOtherwise,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$, $#$CVName$#$ <br>$#$RDOtherwiseDescription$#$$#$CUSTOMDATA$#$'}]},{seq:3,type:3,documentid:'AdvancePayment',info:[{classname:'com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptAdvanceDetail,CUSTOMDATA',key:'<br>Advance Payment, $#$CVName$#$ <br>$#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:4,type:4,documentid:'AgainstInvoice',info:[{classname:'com.krawler.hql.accounting.Invoice,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptDetail,CUSTOMDATA',key:'<br>Invoice - $#$InvoiceNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'AgainstPurchaseInvoice',info:[{classname:'com.krawler.hql.accounting.GoodsReceipt,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptDetail,CUSTOMDATA',key:'<br>Purchase Invoice - $#$GoodsReceiptNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:6,type:6,documentid:'AgainstCNDN',info:[{classname:'com.krawler.hql.accounting.DebitNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.DebitNotePaymentDetails,CUSTOMDATA',key:'<br>Debit Note - $#$DebitNoteNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:7,type:7,info:[{classname:'com.krawler.hql.accounting.Cheque,com.krawler.hql.accounting.PaymentMethod',key:'<br>Cheque no. $#$ChequeNo$#$ dated $#$DueDate$#$, $#$MethodName$#$, $#$Description$#$'}]},{seq:8,type:8,info:[{classname:'com.krawler.hql.accounting.MasterItem',key:'<br>Received from : $#$Value$#$'}]}]";
                        JSONArray descJsonArr = new JSONArray(newString);
                        KwlReturnObject kwlReceipt = accountingHandlerDAOobj.getObject(Receipt.class.getName(), entry.getTransactionId());
                        Receipt tempr = (Receipt) kwlReceipt.getEntityList().get(0);
                        String cvName = "";
                        if (tempr != null && tempr.getCustomer() != null && (bankBook || ledgerReport)) {
                            Customer customer = tempr.getCustomer();
                            cvName = customer.getName();
                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        } else if (tempr != null && !StringUtil.isNullOrEmpty(tempr.getVendor()) && (bankBook || ledgerReport)) {
                            KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempr.getVendor());
                            if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                                Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                                cvName = vendor.getName();
                                obj.put("_cvName", vendor.getName());
                                obj.put(entryChar + "_accountname", vendor.getName());
                            }
                        }
                        obj.put(entryChar + "_transactionID", tempr.getReceiptNumber());
                        obj.put(Constants.billid, tempr.getID());
                        String transactionDetails = "", transactionDetailsForExpander = "";

                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Receive_Payment_ModuleId);

                        jeDetailReceiptTypeMap = new HashMap<String, Integer>();
                        Map<String, String> transDetMap = new HashMap<String, String> ();
                        if(!bankBook){
                            createJEDetailReceiptTypeMapNew(tempr, jeDetailReceiptTypeMap, companyid);
                            transDetMap = getTransactionDetailsForReceiptGL(tempr, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailReceiptTypeMap, bankBook, ledgerReport);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                        }
                        if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment received from : " + cvName);
                        } else {
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment received from : " + accountName);
                        }
                        obj.put("type", Constants.PAYMENT_RECEIVED);
                        obj.put("payer", tempr.getReceivedFrom() != null ? tempr.getReceivedFrom().getValue() : "");
                        obj.put("paymentstatus", "Uncleared");
                        if (tempr.getPayDetail() != null && tempr.getJournalEntry() != null) {
                            KwlReturnObject clearanceDate = accBankReconciliationObj.getBRfromJE(tempr.getJournalEntry().getID(), tempr.getCompany().getCompanyID(), false);
                            if (clearanceDate != null && clearanceDate.getEntityList() != null && clearanceDate.getEntityList().size() > 0) {
                                BankReconciliationDetail brd = (BankReconciliationDetail) clearanceDate.getEntityList().get(0);
                                if (brd.getBankReconciliation().getClearanceDate() != null) {
                                    obj.put("clearancedate", df.format(brd.getBankReconciliation().getClearanceDate()));
                                    obj.put("paymentstatus", "Cleared");
                                }
                            }
                        }
                        if (tempr.getPayDetail() != null && tempr.getPayDetail().getCheque() != null && !StringUtil.isNullOrEmpty(tempr.getPayDetail().getCheque().getChequeNo())) {
                            obj.put(entryChar + "_checkno", tempr.getPayDetail().getCheque().getChequeNo());
                            Date chequeDate = tempr.getPayDetail().getCheque().getDueDate();
                            String chequeDateString = "";
                            if (chequeDate != null) {
                                chequeDateString = df.format(chequeDate);
                            }
                            obj.put(entryChar + "_checkdate", chequeDateString);
                            obj.put(entryChar + "_description", tempr.getPayDetail().getCheque().getDescription() != null ? tempr.getPayDetail().getCheque().getDescription() : "");
                            obj.put("memoValue", tempr.getMemo());
                        } else {
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", tempr.getMemo());
                        }
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("gstCode", transDetMap.containsKey("gstCode") && !StringUtil.isNullOrEmpty(transDetMap.get("gstCode")) ? transDetMap.get("gstCode") : "");
                        //Get MultiEntity Dimension data
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger && !bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForReceiptSubLedger(tempr, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailReceiptTypeMap, bankBook, ledgerReport);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                    } else if (transactionModuleID==Constants.Acc_Make_Payment_ModuleId && entry.getTransactionId() != null) {
                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Payment',key:'<br>$#$Memo$#$'}]},{seq:2,type:2,documentid:'AgainstGL',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.PaymentDetailOtherwise,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$, $#$CVName$#$ <br>$#$PDOtherwiseDescription$#$$#$CUSTOMDATA$#$'}]},{seq:3,type:3,documentid:'AdvancePayment',info:[{classname:'com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.AdvanceDetail,CUSTOMDATA',key:'<br>Advance Payment, $#$CVName$#$<br>$#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:4,type:4,documentid:'AgainstInvoice',info:[{classname:'com.krawler.hql.accounting.Invoice,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.PaymentDetail,CUSTOMDATA',key:'<br>Invoice - $#$InvoiceNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'AgainstPurchaseInvoice',info:[{classname:'com.krawler.hql.accounting.GoodsReceipt,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.PaymentDetail,CUSTOMDATA',key:'<br>Purchase Invoice - $#$GoodsReceiptNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:6,type:6,documentid:'AgainstCNDN',info:[{classname:'com.krawler.hql.accounting.CreditNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.CreditNotePaymentDetails,CUSTOMDATA',key:'<br>Credit Note - $#$CreditNoteNumber$#$, $#$Name$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:7,type:7,info:[{classname:'com.krawler.hql.accounting.Cheque,com.krawler.hql.accounting.PaymentMethod',key:'<br>Cheque no. $#$ChequeNo$#$ dated $#$DueDate$#$, $#$MethodName$#$, $#$Description$#$'}]},{seq:8,type:8,info:[{classname:'com.krawler.hql.accounting.MasterItem',key:'<br>Paid to : $#$Value$#$'}]}]";
                        JSONArray descJsonArr = new JSONArray(newString);
                        
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Make_Payment_ModuleId);

                        KwlReturnObject kwlPayment = accountingHandlerDAOobj.getObject(Payment.class.getName(), entry.getTransactionId());
                        Payment tempp = (Payment) kwlPayment.getEntityList().get(0);
                        String cvName = "";
                        if (tempp != null && !StringUtil.isNullOrEmpty(tempp.getCustomer()) && (bankBook || ledgerReport)) {
                            KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempp.getCustomer());
                            if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
                                Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                                cvName = customer.getName();
                                obj.put(entryChar + "_accountname", customer.getName());
                                obj.put("_cvName", customer.getName());
                            }
                        } else if (tempp != null && tempp.getVendor() != null && (bankBook || ledgerReport)) {
                            Vendor vendor = tempp.getVendor();
                            cvName = vendor.getName();
                            obj.put(entryChar + "_accountname", vendor.getName());
                            obj.put("_cvName", vendor.getName());
                        }

                        obj.put(entryChar + "_transactionID", tempp.getPaymentNumber());
                        obj.put(Constants.billid, tempp.getID());
                        String transactionDetails = "", transactionDetailsForExpander="";
                        jeDetailPaymentTypeMap = new HashMap<String, Integer>();
                        Map<String, String> transDetMap = new HashMap<String, String> ();
                        if(!bankBook){
                            createJEDetailPaymentTypeMapNew(tempp, jeDetailPaymentTypeMap, companyid);
                            transDetMap = getTransactionDetailsForPaymentGL(tempp, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailPaymentTypeMap, bankBook, ledgerReport);
                            transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                            transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                        }
                        if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment made to : " + cvName);
                        } else {
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment made to : " + accountName);
                        }
                        obj.put("type", Constants.PAYMENT_MADE);
                        obj.put("payer", tempp.getPaidTo() != null ? tempp.getPaidTo().getValue() : "");
                        if (!StringUtil.isNullOrEmpty(tempp.getPayee())) {
                            obj.put("payee", tempp.getPayee());
                        }
                        obj.put("paymentstatus", "Uncleared");
                        if (tempp.getPayDetail() != null) {
                            KwlReturnObject clearanceDate = accBankReconciliationObj.getBRfromJE(tempp.getJournalEntry().getID(), tempp.getCompany().getCompanyID(), false);
                            if (clearanceDate != null && clearanceDate.getEntityList() != null && clearanceDate.getEntityList().size() > 0) {
                                BankReconciliationDetail brd = (BankReconciliationDetail) clearanceDate.getEntityList().get(0);
                                if (brd.getBankReconciliation().getClearanceDate() != null) {
                                    obj.put("clearancedate", df.format(brd.getBankReconciliation().getClearanceDate()));
                                    obj.put("paymentstatus", "Cleared");
                                }
                            }
                        }
                        if (tempp.getPayDetail() != null && tempp.getPayDetail().getCheque() != null && !StringUtil.isNullOrEmpty(tempp.getPayDetail().getCheque().getChequeNo())) {
                            obj.put(entryChar + "_checkno", tempp.getPayDetail().getCheque().getChequeNo());
                            Date chequeDate = tempp.getPayDetail().getCheque().getDueDate();
                            String chequeDateString = "";
                            if (chequeDate != null) {
                                chequeDateString = df.format(chequeDate);
                            }
                            obj.put(entryChar + "_checkdate", chequeDateString);
                            obj.put(entryChar + "_description", tempp.getPayDetail().getCheque().getDescription() != null ? tempp.getPayDetail().getCheque().getDescription() : "");
                            obj.put("memoValue", tempp.getMemo());
                        } else {
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", tempp.getMemo());
                        }
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("gstCode", transDetMap.containsKey("gstCode") && !StringUtil.isNullOrEmpty(transDetMap.get("gstCode")) ? transDetMap.get("gstCode") : "");
                        //Get MultiEntity Dimension data
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger && !bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForPaymentSubLedger(tempp, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailPaymentTypeMap, bankBook, ledgerReport);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                    } else if (transactionModuleID==Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId && entry.getTransactionId() != null) {
                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Fixed Asset Acquired Invoice - $#$GoodsReceiptNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Cash Purchase - $#$GoodsReceiptNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Vendor',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'AssetDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.GoodsReceiptDetail,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$PIDetailDescription$#$$#$CUSTOMDATA$#$'}]}]";          
                        JSONArray descJsonArr = new JSONArray(newString);
                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), entry.getTransactionId());
                        GoodsReceipt goodsReceipt = (GoodsReceipt) KwlgoodsReceipt.getEntityList().get(0);
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId);

                        boolean isDescConfig=true;
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        if (accountid.equals(cashAccount)) {
                            obj.put(entryChar + "_transactionID", goodsReceipt.getGoodsReceiptNumber());
                            obj.put(Constants.billid,goodsReceipt.getID());
                            obj.put("type", Constants.CASH_PURCHASE);
                        } else {
                            obj.put(entryChar + "_transactionID", goodsReceipt.getGoodsReceiptNumber());
                            obj.put(Constants.billid, goodsReceipt.getID());
                            obj.put("type", Constants.ACQUIRED_INVOICE);
                        }
                        Map<String, String> transDetMap = new HashMap<String, String> ();
                        if(!bankBook){
                            transDetMap = getTransactionDetailsForFixedAssetPurchaseInvoiceForGL(goodsReceipt, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                            transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        }
                        if (goodsReceipt != null && goodsReceipt.getVendor() != null && (bankBook || ledgerReport)) {
                            Vendor vendor = goodsReceipt.getVendor();
                            obj.put("_cvName", vendor.getName());
                            obj.put(entryChar + "_accountname", vendor.getName());
                        }
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", goodsReceipt.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("gstCode", transDetMap.containsKey("gstCode") && !StringUtil.isNullOrEmpty(transDetMap.get("gstCode")) ? transDetMap.get("gstCode") : "");
                        obj.put("isconsignment",goodsReceipt.isIsconsignment());
                        
                        //Get MultiEntity Dimension data
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger &&!bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForFixedAssetPurchaseInvoiceSubLedger(goodsReceipt, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                    } else if (transactionModuleID==Constants.Acc_FixedAssets_DisposalInvoice_ModuleId && entry.getTransactionId() != null) {
                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Fixed Asset Disposal Invoice - $#$InvoiceNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Cash Sale - $#$InvoiceNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Customer',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'AssetDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.InvoiceDetail,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$InvDetailDescription$#$$#$CUSTOMDATA$#$'}]}]";          
                        JSONArray descJsonArr = new JSONArray(newString);
                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), entry.getTransactionId());
                        Invoice invoice = (Invoice) KwlInvoice.getEntityList().get(0);
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_FixedAssets_DisposalInvoice_ModuleId);

                        boolean isDescConfig=true;
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        if (accountid.equals(cashAccount)) {
                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
                            obj.put(Constants.billid,invoice.getID());
                            obj.put("type", Constants.CASH_SALE);
                        } else {
                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
                            obj.put(Constants.billid, invoice.getID());
                            obj.put("type", Constants.DISPOSAL_INVOICE);
                        }
                        Map<String, String> transDetMap = new HashMap<String, String> ();
                        if(!bankBook){
                            transDetMap = getTransactionDetailsForFixedAssetInvoiceForGL(invoice, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig,Constants.Acc_FixedAssets_DisposalInvoice_ModuleId);
                            transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                            transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        }
                        if (invoice != null && invoice.getCustomer() != null && (bankBook || ledgerReport)) {
                            Customer customer = invoice.getCustomer();

                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        }
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue",invoice.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("gstCode", transDetMap.containsKey("gstCode") && !StringUtil.isNullOrEmpty(transDetMap.get("gstCode")) ? transDetMap.get("gstCode") : "");
                        obj.put("isconsignment",invoice.isIsconsignment());
                        obj.put("isLeaseFixedAsset",invoice.isFixedAssetLeaseInvoice());
                        
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger &&!bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForFixedAssetInvoiceSubLedger(invoice, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                    } else if (transactionModuleID==Constants.LEASE_INVOICE_MODULEID && entry.getTransactionId() != null) {
                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Lease Invoice - $#$InvoiceNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Cash Sale - $#$InvoiceNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Customer',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'AssetDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.InvoiceDetail,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$InvDetailDescription$#$$#$CUSTOMDATA$#$'}]}]";          
                        JSONArray descJsonArr = new JSONArray(newString);
                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), entry.getTransactionId());
                        Invoice invoice = (Invoice) KwlInvoice.getEntityList().get(0);
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.LEASE_INVOICE_MODULEID);

                        boolean isDescConfig=true;
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        if (accountid.equals(cashAccount)) {
                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
                            obj.put(Constants.billid, invoice.getID());
                            obj.put("type", Constants.CASH_SALE);
                        } else {
                            obj.put(entryChar + "_transactionID",invoice.getInvoiceNumber());
                            obj.put(Constants.billid, invoice.getID());
                            obj.put("type", Constants.LEASE_INVOICE);
                        }
                        Map<String, String> transDetMap = new HashMap<String, String> ();
                        if(!bankBook){
                            transDetMap = getTransactionDetailsForFixedAssetInvoiceForGL(invoice, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig,Constants.LEASE_INVOICE_MODULEID);
                            transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                            transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        }
                        if (invoice != null && invoice.getCustomer() != null && (bankBook || ledgerReport)) {
                            Customer customer = invoice.getCustomer();
                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        }
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", invoice.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("gstCode", transDetMap.containsKey("gstCode") && !StringUtil.isNullOrEmpty(transDetMap.get("gstCode")) ? transDetMap.get("gstCode") : "");
                        obj.put("isconsignment",invoice.isIsconsignment());
                        obj.put("isLeaseFixedAsset",invoice.isFixedAssetLeaseInvoice());

                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.LEASE_INVOICE_MODULEID, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger && !bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForLeaseInvoiceSubLedger(invoice, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                    } else if (transactionModuleID == Constants.Acc_Goods_Receipt_ModuleId && !StringUtil.isNullOrEmpty(entry.getTransactionId())) {

                        String newString = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Journal Entry'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'JEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                        JSONArray descJsonArr = new JSONArray(newString);

                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_GENERAL_LEDGER_ModuleId);

                        boolean isDescConfig = true;

                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), entry.getTransactionId());
                        GoodsReceiptOrder grOrder = (GoodsReceiptOrder) KwlgoodsReceipt.getEntityList().get(0);
                        if (grOrder != null) {
                            obj.put(entryChar + "_transactionID", grOrder.getGoodsReceiptOrderNumber());
                            obj.put(entryChar + "_transactionDetails", (Constants.Goods_Receipt) + ", " + grOrder.getVendor().getName());
                            obj.put(entryChar + "_transactionDetailsForExpander", (Constants.Goods_Receipt) + ", " + grOrder.getVendor().getName());
                            obj.put(Constants.billid, grOrder.getID());
                        }

                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", entry.getCheque() != null ? entry.getCheque().getDescription() != null ? entry.getCheque().getDescription() : "" : "");
                        if (entry.getTypeValue() == 3 && !StringUtil.isNullOrEmpty(entry.getMemo())) {// ADD MEMO FOR FUND TRANSFER JE REF SDP-2051
                            obj.put(entryChar + "_transactionDetailsBankBook", entry.getMemo());
                        } else {
                            obj.put(entryChar + "_transactionDetailsBankBook", "");
                        }
                        obj.put(entryChar + "_transactionDetailsBankBook", (entry.getTypeValue() != 3) ? "" : ((StringUtil.isNullOrEmpty(entry.getMemo())) ? "" : entry.getMemo()));
                        obj.put("memoValue", (entry.getTypeValue() != 0 && !StringUtil.isNullOrEmpty(entry.getMemo())) ? entry.getMemo() : "");
                        obj.put("costCenterName", entry.getCostcenter() == null ? "" : entry.getCostcenter().getName());
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger &&!bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForJournalEntrySubLedger(subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                        obj.put("type", Constants.GOODS_RECEIPT_ORDER);
                    } else if (transactionModuleID == Constants.Acc_Purchase_Return_ModuleId && !StringUtil.isNullOrEmpty(entry.getTransactionId())) {

                        String newString = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Journal Entry'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'JEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                        JSONArray descJsonArr = new JSONArray(newString);

                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_GENERAL_LEDGER_ModuleId);

                        boolean isDescConfig = true;

                        KwlReturnObject kwlPurchaseReturn = accountingHandlerDAOobj.getObject(PurchaseReturn.class.getName(), entry.getTransactionId());
                        PurchaseReturn purchaseReturn = (PurchaseReturn) kwlPurchaseReturn.getEntityList().get(0);
                        if (purchaseReturn != null) {
                            obj.put(entryChar + "_transactionID", purchaseReturn.getPurchaseReturnNumber());
                            obj.put(entryChar + "_transactionDetails", (Constants.PURCHASE_RETURN) + ", " + purchaseReturn.getVendor().getName());
                            obj.put(entryChar + "_transactionDetailsForExpander", (Constants.PURCHASE_RETURN) + ", " + purchaseReturn.getVendor().getName());
                            obj.put(Constants.billid, purchaseReturn.getID());

                        }

                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", entry.getCheque() != null ? entry.getCheque().getDescription() != null ? entry.getCheque().getDescription() : "" : "");
                        if (entry.getTypeValue() == 3 && !StringUtil.isNullOrEmpty(entry.getMemo())) {// ADD MEMO FOR FUND TRANSFER JE REF SDP-2051
                            obj.put(entryChar + "_transactionDetailsBankBook", entry.getMemo());
                        } else {
                            obj.put(entryChar + "_transactionDetailsBankBook", "");
                        }
                        obj.put(entryChar + "_transactionDetailsBankBook", (entry.getTypeValue() != 3) ? "" : ((StringUtil.isNullOrEmpty(entry.getMemo())) ? "" : entry.getMemo()));
                        obj.put("memoValue", (entry.getTypeValue() != 0 && !StringUtil.isNullOrEmpty(entry.getMemo())) ? entry.getMemo() : "");
                        obj.put("costCenterName", entry.getCostcenter() == null ? "" : entry.getCostcenter().getName());
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger && !bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForJournalEntrySubLedger(subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                        obj.put("type", Constants.PURCHASE_RETURN);
                    } else if (transactionModuleID == Constants.Acc_Delivery_Order_ModuleId && !StringUtil.isNullOrEmpty(entry.getTransactionId())) {

                        String newString = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Journal Entry'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'JEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                        JSONArray descJsonArr = new JSONArray(newString);

                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_GENERAL_LEDGER_ModuleId);

                        boolean isDescConfig = true;

                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), entry.getTransactionId());
                        DeliveryOrder deliveryOrder = (DeliveryOrder) KwlgoodsReceipt.getEntityList().get(0);
                        if (deliveryOrder != null) {
                            obj.put(entryChar + "_transactionID", deliveryOrder.getDeliveryOrderNumber());
                            obj.put(entryChar + "_transactionDetails", (Constants.Delivery_Order) + ", " + deliveryOrder.getCustomer().getName());
                            obj.put(entryChar + "_transactionDetailsForExpander", (Constants.Delivery_Order) + ", " + deliveryOrder.getCustomer().getName());
                            obj.put(Constants.billid, deliveryOrder.getID());
                        }

                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", entry.getCheque() != null ? entry.getCheque().getDescription() != null ? entry.getCheque().getDescription() : "" : "");
                        if (entry.getTypeValue() == 3 && !StringUtil.isNullOrEmpty(entry.getMemo())) {// ADD MEMO FOR FUND TRANSFER JE REF SDP-2051
                            obj.put(entryChar + "_transactionDetailsBankBook", entry.getMemo());
                        } else {
                            obj.put(entryChar + "_transactionDetailsBankBook", "");
                        }
                        obj.put(entryChar + "_transactionDetailsBankBook", (entry.getTypeValue() != 3) ? "" : ((StringUtil.isNullOrEmpty(entry.getMemo())) ? "" : entry.getMemo()));
                        obj.put("memoValue", (entry.getTypeValue() != 0 && !StringUtil.isNullOrEmpty(entry.getMemo())) ? entry.getMemo() : "");
                        obj.put("costCenterName", entry.getCostcenter() == null ? "" : entry.getCostcenter().getName());
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger &&!bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForJournalEntrySubLedger(subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }

                        obj.put("type", Constants.Delivery_Order);

                    } else if (transactionModuleID == Constants.Acc_Sales_Return_ModuleId && !StringUtil.isNullOrEmpty(entry.getTransactionId())) {

                        String newString = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Journal Entry'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'JEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                        JSONArray descJsonArr = new JSONArray(newString);

                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_GENERAL_LEDGER_ModuleId);

                        boolean isDescConfig = true;

                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), entry.getTransactionId());
                        SalesReturn salesReturn = (SalesReturn) KwlgoodsReceipt.getEntityList().get(0);
                        if (salesReturn != null) {
                            obj.put(entryChar + "_transactionID", salesReturn.getSalesReturnNumber());
                            obj.put(entryChar + "_transactionDetails", (Constants.SALES_RETURN) + ", " + salesReturn.getCustomer().getName());
                            obj.put(entryChar + "_transactionDetailsForExpander", (Constants.SALES_RETURN) + ", " + salesReturn.getCustomer().getName());
                            obj.put(Constants.billid, salesReturn.getID());

                        }

                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", entry.getCheque() != null ? entry.getCheque().getDescription() != null ? entry.getCheque().getDescription() : "" : "");
                        if (entry.getTypeValue() == 3 && !StringUtil.isNullOrEmpty(entry.getMemo())) {// ADD MEMO FOR FUND TRANSFER JE REF SDP-2051
                            obj.put(entryChar + "_transactionDetailsBankBook", entry.getMemo());
                        } else {
                            obj.put(entryChar + "_transactionDetailsBankBook", "");
                        }
                        obj.put(entryChar + "_transactionDetailsBankBook", (entry.getTypeValue() != 3) ? "" : ((StringUtil.isNullOrEmpty(entry.getMemo())) ? "" : entry.getMemo()));
                        obj.put("memoValue", (entry.getTypeValue() != 0 && !StringUtil.isNullOrEmpty(entry.getMemo())) ? entry.getMemo() : "");
                        obj.put("costCenterName", entry.getCostcenter() == null ? "" : entry.getCostcenter().getName());
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger &&!bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForJournalEntrySubLedger(subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }

                        obj.put("type", Constants.SALES_RETURN);

                    } else if (transactionModuleID == Constants.Inventory_Stock_Adjustment_ModuleId && !StringUtil.isNullOrEmpty(entry.getTransactionId())) {

                        String newString = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Journal Entry'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'JEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                        JSONArray descJsonArr = new JSONArray(newString);

                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_GENERAL_LEDGER_ModuleId);

                        boolean isDescConfig = true;

                        KwlReturnObject kwlStockAdjustment = accountingHandlerDAOobj.getObject(StockAdjustment.class.getName(), entry.getTransactionId());
                        StockAdjustment stockAdjustment = (StockAdjustment) kwlStockAdjustment.getEntityList().get(0);
                        if (stockAdjustment != null) {
                            obj.put(entryChar + "_transactionID", stockAdjustment.getTransactionNo());
                            obj.put(entryChar + "_transactionDetails", (Constants.STOCK_ADJUSTMENT));
                            obj.put(entryChar + "_transactionDetailsForExpander", (Constants.STOCK_ADJUSTMENT));
                            obj.put(Constants.billid, stockAdjustment.getId());

                        }

                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", entry.getCheque() != null ? entry.getCheque().getDescription() != null ? entry.getCheque().getDescription() : "" : "");
                        if (entry.getTypeValue() == 3 && !StringUtil.isNullOrEmpty(entry.getMemo())) {// ADD MEMO FOR FUND TRANSFER JE REF SDP-2051
                            obj.put(entryChar + "_transactionDetailsBankBook", entry.getMemo());
                        } else {
                            obj.put(entryChar + "_transactionDetailsBankBook", "");
                        }
                        obj.put(entryChar + "_transactionDetailsBankBook", (entry.getTypeValue() != 3) ? "" : ((StringUtil.isNullOrEmpty(entry.getMemo())) ? "" : entry.getMemo()));
                        obj.put("memoValue", (entry.getTypeValue() != 0 && !StringUtil.isNullOrEmpty(entry.getMemo())) ? entry.getMemo() : "");
                        obj.put("costCenterName", entry.getCostcenter() == null ? "" : entry.getCostcenter().getName());
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                        if (issubGeneralLedger &&!bankBook) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForJournalEntrySubLedger(subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }

                        obj.put("type", Constants.STOCK_ADJUSTMENT);

                    } else {
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";

                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Journal Entry'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'JEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";          
                            JSONArray descJsonArr = new JSONArray(newString);

                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                            reqParDescConfig.put(Constants.companyKey, companyid);
                            reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                            reqParDescConfig.put("document", Constants.Acc_GENERAL_LEDGER_ModuleId);

                        boolean isDescConfig=true;
                        if(!bankBook){
                            Map<String, String> transDetMap = getTransactionDetailsForJournalEntry(entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                            transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                        }
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", entry.getCheque()!= null ? entry.getCheque().getDescription() != null ? entry.getCheque().getDescription() : "" : "");
                        if(entry.getTypeValue()==3 && !StringUtil.isNullOrEmpty(entry.getMemo())){// ADD MEMO FOR FUND TRANSFER JE REF SDP-2051
                                obj.put(entryChar + "_transactionDetailsBankBook", entry.getMemo());
                        } else  if(entry.isIsDishonouredCheque()){              //Adding Memo in description for Dishonoured JE ERM-744
                                obj.put(entryChar + "_transactionDetailsBankBook", (entry.getTypeValue() == 0 && !StringUtil.isNullOrEmpty(entry.getMemo())) ? entry.getMemo() : "");
                        } else{
                                obj.put(entryChar + "_transactionDetailsBankBook", "");
                        }
                        /**
                         * Removed check (entry.getTypeValue() == 3)
                         * Need to show the All JEs i.e Normal,Party and Fund transfer are cleared or not. only for Bank Book report SDP-13962
                         */
//                        if (bankBook && entry.getTypeValue() == 3) {// ADD Cheque details for fund transfer-ERM-734
                        if (bankBook) {// ADD Cheque details for fund transfer-ERM-734
                            obj.put(entryChar + "_checkno", entry.getCheque() != null ? entry.getCheque().getChequeNo() != null ? entry.getCheque().getChequeNo() : "" : "");
                            obj.put(entryChar + "_checkdate", entry.getCheque() != null ? entry.getCheque().getDueDate() != null ? df.format(entry.getCheque().getDueDate()) : "" : "");
                            obj.put(entryChar + "_description", entry.getCheque() != null ? entry.getCheque().getDescription() != null ? entry.getCheque().getDescription() : "" : "");
                            obj.put("paymentstatus", "Uncleared");
                            /**
                             * entry.getPaymentMethod() != null check is removed because in case of journal entry with 
                             * cash account, payment method is null so removed below check to handle this case.
                             */
//                             if (entry.getPaymentMethod() != null) {
                                if (!StringUtil.isNullOrEmpty(entry.getID())) {
                                KwlReturnObject clearanceDate = accBankReconciliationObj.getBRfromJE(entry.getID(), entry.getCompany().getCompanyID(), false);
                                if (clearanceDate != null && clearanceDate.getEntityList() != null && clearanceDate.getEntityList().size() > 0) {
                                    BankReconciliationDetail brd = (BankReconciliationDetail) clearanceDate.getEntityList().get(0);
                                    if (brd.getBankReconciliation().getClearanceDate() != null) {
                                        obj.put("clearancedate", df.format(brd.getBankReconciliation().getClearanceDate()));
                                        obj.put("paymentstatus", "Cleared");
                                    }
                                }
                            }
                        }
                        
                            obj.put("memoValue", (entry.getTypeValue() != 0 && !StringUtil.isNullOrEmpty(entry.getMemo())) ? entry.getMemo() : "");
                            obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        if (isMultiEntity && !bankBook) {
                            String multiEntityData = getMultiEntityDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, entry.getID());
                            obj.put("multiEntityData", multiEntityData);
                        }
                            if (issubGeneralLedger &&!bankBook) {
                                Map<String, String> CustomDetMap = getTransactionDetailsForJournalEntrySubLedger(subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                                obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                                obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                            }
                        }
                    }
                    obj.put("transactionCurrency", (jed.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : jed.getJournalEntry().getCurrency().getCurrencyID()));
                    obj.put("transactionSymbol", (jed.getJournalEntry().getCurrency() == null ? currency.getCurrencyCode() : jed.getJournalEntry().getCurrency().getCurrencyCode())); //transaction currency code
                    obj.put("transactionCurrencySymbol", (jed.getJournalEntry().getCurrency() == null ? currency.getSymbol() : jed.getJournalEntry().getCurrency().getSymbol()));//transaction currency symbol
                    obj.put("transactionAmount", transactionAmount);
                    obj.put("transactionDateString", transactionDateString);
                    obj.put(entryChar + "_amount", amountBaseCurrency);   //Amount in base currency
                    obj.put(entryChar + "_transactionAmount", transactionAmount);   //Amount in document currency
                    if ((bankBook || ledgerReport) && jed.getJournalEntry().getIsReval() > 1) {
                        obj.put(entryChar + "_amountAccountCurrency", "");
                    } else {
                        obj.put(entryChar + "_amountAccountCurrency", amountAccountCurrency);   //Amount in account currency
                    }
                    obj.put(emptyChar + "_date", "");
                    obj.put(emptyChar + "_accountname", "");
                    obj.put(emptyChar + "_acccode", "");
                    obj.put(emptyChar + "_entryno", "");
                    obj.put(emptyChar + "_journalentryid", "");
                    obj.put(emptyChar + "_amount", "");
                    obj.put(emptyChar + "_amountAccountCurrency", "");
                    obj.put(emptyChar + "_transactionAmount", "");
                    obj.put(emptyChar + "_transactionID", "");
                    obj.put(emptyChar + "_transactionDetails", "");
                    obj.put(emptyChar + "_transactionDetailsForExpander", "");      
                    obj.put(emptyChar + "_checkno", "");
                    obj.put(emptyChar + "_transactionDetailsBankBook", "");
                    obj.put("currencysymbol", (jed.getAccount().getCurrency() == null ? currency.getSymbol() : jed.getAccount().getCurrency().getSymbol()));//Account currency syambol
                    obj.put("currencycode", (jed.getAccount().getCurrency() == null ? jed.getAccount().getCurrency().getCurrencyCode() : jed.getAccount().getCurrency().getCurrencyCode()));//Account currency code
                    obj.put("accountid", accountid);
                    String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                    obj.put("accountname", accountname);

                    String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                    obj.put("accCode", acccode);

                    obj.put(Constants.currencyKey, jed.getAccount().getCurrency().getCurrencyID());

                    // this is for displaying on the group header
                    if (!acccode.equals("") && account.getName().equals("")) {
                        obj.put("accCodeName", acccode);
                    } else if (!acccode.equals("") && !account.getName().equals("")) {
                        obj.put("accCodeName", acccode + " - " + account.getName());
                    } else {
                        obj.put("accCodeName", accountname);
                    }

                    if (entryChar.equals("d")) {
                        balanceAmount = balanceAmount + amountBaseCurrency;
                        obj.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                        balanceAmountAccountCurrency = balanceAmountAccountCurrency + amountAccountCurrency;
                        obj.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                    } else if (entryChar.equals("c")) {
                        balanceAmount = balanceAmount - amountBaseCurrency;
                        obj.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                        balanceAmountAccountCurrency = balanceAmountAccountCurrency - amountAccountCurrency;
                        obj.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                    }
                    jArr.put(obj);
                    if (requestJobj.optString("filetype") != null) {
                        if (requestJobj.optString("filetype").equals("print") || requestJobj.optString("filetype").equals("csv")) {
                            if (emptyChar == "d") {
                                total = total + amountBaseCurrency;
                                totalAccountCurrency = totalAccountCurrency + amountAccountCurrency;
                            }
                        }
                    }
                }

                double tempTotalAmount = balance;
                double tempTotalAmountAccountCurrency = balanceAccountCurrency;
                
                if (tempTotalAmount != 0 && !ledgerReportFlag && !generalLedgerFlag) {
                    if (tempTotalAmount > 0) {
                        entryChar = "d";
                        emptyChar = "c";
                    } else {
                        entryChar = "c";
                        emptyChar = "d";
                    }
                    JSONObject objlast = new JSONObject();
                    objlast.put(entryChar + "_date", formatter.format(endDate));  //Used GlobalDateFormat to avoid change in time as per time zone. ERP-8482
                    objlast.put(entryChar + "_accountname", "Period Balance");
                    objlast.put(entryChar + "_acccode", "");
                    objlast.put(entryChar + "_journalentryid", "");
                    objlast.put(entryChar + "_amount", (Double) Math.abs(tempTotalAmount));
                    objlast.put(entryChar + "_amountAccountCurrency", Math.abs(tempTotalAmountAccountCurrency));
                    objlast.put(entryChar + "_transactionAmount","");
                    objlast.put(entryChar + "_transactionID", "");
                    objlast.put(entryChar + "_transactionDetails", "");
                    objlast.put(entryChar + "_transactionDetailsForExpander", "");
                    objlast.put(entryChar + "_checkno", "");
                    objlast.put(entryChar + "_description", "");
                    objlast.put(entryChar + "_transactionDetailsBankBook", "");
                    objlast.put(emptyChar + "_amountAccountCurrency", "");
                    objlast.put(emptyChar + "_transactionAmount", "");
                    objlast.put(emptyChar + "_date", "");
                    objlast.put(emptyChar + "_accountname", "");
                    objlast.put(emptyChar + "_journalentryid", "");
                    objlast.put(emptyChar + "_amount", "");
                    objlast.put(emptyChar + "_transactionID", "");
                    objlast.put(emptyChar + "_transactionDetails", "");
                    objlast.put(emptyChar + "_transactionDetailsForExpander", "");
                    objlast.put(emptyChar + "_checkno", "");
                    objlast.put(emptyChar + "_description", "");
                    objlast.put(emptyChar + "_transactionDetailsBankBook", "");
                    objlast.put("accountid", accountid);
                    String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                    objlast.put("accountname", accountname);
                    objlast.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
                    objlast.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                    String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                    objlast.put("accCode", acccode);
                    objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());

                    // this is for displaying on the group header
                    if (!acccode.equals("") && account.getName().equals("")) {
                        objlast.put("accCodeName", acccode);
                    } else if (!acccode.equals("") && !account.getName().equals("")) {
                        objlast.put("accCodeName", acccode + " - " + account.getName());
                    } else {
                        objlast.put("accCodeName", accountname);
                    }
                    objlast.put("balanceAmount", "");
                    objlast.put("balanceAmountAccountCurrency", "");

                    jArr.put(objlast);

                }
                if(!ledgerReportFlag && !generalLedgerFlag && balance ==0){
                    balance=balance+openingBalance;
                    balanceAccountCurrency=balanceAccountCurrency+openingBalanceAccountCurrency;
                }
                    if (balance > 0) {
                        entryChar = "c";
                        emptyChar = "d";
                    } else {
                        entryChar = "d";
                        emptyChar = "c";
                    }
                    String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                    String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
//                    if (tempTotalAmount != 0) { // ERP-31520/SDP-7302 : Removed check to inset Balance c/f for every time.
                    JSONObject objlast = new JSONObject();
                    objlast.put(entryChar + "_date", formatter.format(endDate));  //Used GlobalDateFormat to avoid change in time as per time zone. ERP-8482
                    objlast.put(entryChar + "_accountname", "Balance c/f");
                    objlast.put(entryChar + "_acccode", "");
                    objlast.put(entryChar + "_journalentryid", "");
                    objlast.put(entryChar + "_amount", (Double) Math.abs(balance));
                    objlast.put(entryChar + "_transactionID", "");
                    objlast.put(entryChar + "_transactionDetails", "");
                    objlast.put(entryChar + "_transactionDetailsForExpander", "");
                    objlast.put(entryChar + "_checkno", "");
                    objlast.put(entryChar + "_description", "");
                    objlast.put(entryChar + "_transactionDetailsBankBook", "");
                    objlast.put(entryChar + "_amountAccountCurrency", "");
                    objlast.put(emptyChar + "_amountAccountCurrency", "");
                    objlast.put(entryChar + "_transactionAmount", "");
                    objlast.put(emptyChar + "_transactionAmount", "");
                    objlast.put(emptyChar + "_date", "");
                    objlast.put(emptyChar + "_accountname", "");
                    objlast.put(emptyChar + "_journalentryid", "");
                    objlast.put(emptyChar + "_amount", "");
                    objlast.put(emptyChar + "_transactionID", "");
                    objlast.put(emptyChar + "_transactionDetails", "");
                    objlast.put(emptyChar + "_transactionDetailsForExpander", "");
                    objlast.put(emptyChar + "_checkno", "");
                    objlast.put(emptyChar + "_description", "");
                    objlast.put(emptyChar + "_transactionDetailsBankBook", "");
                    objlast.put("accountid", accountid);
                    objlast.put("accountname", accountname);
                    objlast.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
                    objlast.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                    objlast.put("accCode", acccode);
                    objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());

                    // this is for displaying on the group header
                    if (!acccode.equals("") && account.getName().equals("")) {
                        objlast.put("accCodeName", acccode);
                    } else if (!acccode.equals("") && !account.getName().equals("")) {
                        objlast.put("accCodeName", acccode + " - " + account.getName());
                    } else {
                        objlast.put("accCodeName", accountname);
                    }

                    objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));                               //ERP-8775 & 8786
                    objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid)); //ERP-8775 & 8786
                    jArr.put(objlast);
//                }

                    if (!bankBook && ledgerReportFlag) {
                        JSONObject netbBalanceObj = addNetBalanceJson(requestJobj, account, balance, currency);
                        jArr.put(netbBalanceObj);
                    }
                    
                    if (!bankBook && generalLedgerFlag) {
                    if (requestJobj.optString("filetype") != null) {
                        if (requestJobj.optString("filetype").equals("print") || requestJobj.optString("filetype").equals("csv")) {
                            if (emptyChar == "d") {
                                total = total + Math.abs(balance);
                                totalAccountCurrency = totalAccountCurrency + Math.abs(balanceAccountCurrency);
                            }
                            JSONObject total1 = new JSONObject();
                            total1.put(entryChar + "_date", requestJobj.optString("enddate"));
                            total1.put(entryChar + "_accountname", "Total");
                            total1.put(entryChar + "_journalentryid", "");
                            total1.put(entryChar + "_amount", total);
                            total1.put(entryChar + "_transactionDetails", "");
                            total1.put(entryChar + "_transactionDetailsForExpander", "");
                            total1.put(entryChar + "_transactionID", "");
                            total1.put(entryChar + "_transactionDetailsBankBook", "");
                            total1.put(entryChar + "_description", "");
                            total1.put(emptyChar + "_date", requestJobj.optString("enddate"));
                            total1.put(emptyChar + "_accountname", "Total");
                            total1.put(emptyChar + "_acccode", "");
                            total1.put(emptyChar + "_journalentryid", "");
                            total1.put(emptyChar + "_amount", total);
                            total1.put(emptyChar + "_transactionID", "");
                            total1.put(emptyChar + "_transactionDetails", "");
                            total1.put(emptyChar + "_transactionDetailsForExpander", "");
                            total1.put(emptyChar + "_transactionDetailsBankBook", "");
                            total1.put(entryChar + "_description", "");
                            total1.put("accountid", accountid);
                            total1.put("isTotal", true);

                            // to separate account code & names into 2 different columns
                            accountname = StringUtil.isNullOrEmpty(account.getName()) ? "" : account.getName();
                            total1.put("accountname", account.getName());
                            total1.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
                            total1.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                            total1.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());

                            acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                            total1.put("accCode", acccode);

                            // this is for displaying on the group header
                            if (!acccode.equals("") && account.getName().equals("")) {
                                total1.put("accCodeName", acccode);
                            } else if (!acccode.equals("") && !account.getName().equals("")) {
                                total1.put("accCodeName", acccode + " - " + account.getName());
                            } else {
                                total1.put("accCodeName", accountname);
                            }

                            jArr.put(total1);
                        }
                    }
                }
            }
            String multiEntityHeader = "";
            if (isMultiEntity) {
                //Get Header for multi entity dimension.
                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.customcolumn, Constants.customfield, "GSTConfigType"));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, 0, 0, Constants.GST_CONFIG_ISFORMULTIENTITY));

                KwlReturnObject result = accAccountDAOobj.getFieldParams(fieldrequestParams);
                List<FieldParams> lst = result.getEntityList();
                if (lst != null && lst.size() > 0) {
                    multiEntityHeader = lst.get(0).getFieldlabel();
                }
            }
            jobj.put(Constants.RES_data, jArr);
            jobj.put("multiEntityHeader", multiEntityHeader);

        } catch (ParseException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getLedger : " + ex.getMessage(), ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getLedger : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getLedger : " + ex.getMessage(), ex);
        }  catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getLedger : " + ex.getMessage(), ex);
        }
        return jobj;
    }
    
//    public JSONObject getLedgerNew(JSONObject requestJobj) throws ServiceException, SessionExpiredException {        
//        JSONObject jobj = new JSONObject();
//        List accountlist = new ArrayList();
//        try {
//            boolean includeExcludeChildBalances = requestJobj.optBoolean("includeExcludeChildBalances",true);
//            double total = 0;
//            String accountid = "";
//            String selectedCurrencyIds = requestJobj.optString("currencyIds");
//            double balanceAmount = 0;
//            double OpeningBalanceInAccountCurrency = 0;
//            double balanceAmountAccountCurrency = 0;
//            double totalAccountCurrency = 0;
//            accountid = requestJobj.optString("accountid") ;
//            boolean ledgerReportFlag = requestJobj.optBoolean("ledgerReport");
//            boolean generalLedgerFlag = requestJobj.optBoolean("generalLedgerFlag");
//          /*
//             * If viewFlag=0 then Display All Records in Bank Book records If
//             * If viewFlag=1 then Display only Make Payment in Bank Book records If
//             * If viewFlag=2 then Display only Receive Payment in Bank Book records
//             */
//            int viewFlag = requestJobj.optInt("viewFlag",0);
//            int accountTransactionType = requestJobj.optInt("accountTransactionType",Constants.All_Transaction_TypeID);// It will be zero for all otherwise it value will be transaction type value given in constant
//            int accountidCount = 0;
//            if (!StringUtil.isNullOrEmpty(accountid)) {
//                accountidCount = accountid.split(",").length;
//            }
//            String selectedBalPLId ="";
//            boolean isFromTledgerReport = requestJobj.optBoolean("isFromTledgerReport");
//            if (isFromTledgerReport && !StringUtil.isNullOrEmpty(requestJobj.optString("balPLId"))) {
//                selectedBalPLId = requestJobj.optString("balPLId");
//            }
//            //SDP-319 : Used appropriate date format for proper filtering
//            SimpleDateFormat formatter = (SimpleDateFormat) authHandler.getDateOnlyFormat();
//            DateFormat df = authHandler.getDateOnlyFormat();
//            Date endDate = df.parse(requestJobj.optString("enddate"));
//            Date startDate = df.parse(requestJobj.optString("startdate"));
//            if (accountid.equalsIgnoreCase("All")) {
//                HashMap<String, Object> requestParams = accAccountHandler.getJsonMap(requestJobj);
//                requestParams.put("nondeleted", "true");
//                requestParams.put(Constants.start, "");
//                requestParams.put("limit", "");
//                 requestParams.put("selectedBalPLId", selectedBalPLId);
//                KwlReturnObject result = accAccountDAOobj.getAccountsForCombo(requestParams);
//                accountlist = result.getEntityList();
//            } else {  //addd for miltiple bank accounts selection
//                String AccountidGroup[] = accountid.split(",");
//                for (int i = 0; i < accountidCount; i++) {
//                    KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), AccountidGroup[i]);
//                    Account account = (Account) accresult.getEntityList().get(0);
//                    if (account != null) {
//                        accountlist.add(account);
//                        if (generalLedgerFlag) {
//                            if (includeExcludeChildBalances) {
//                                accountlist = getChildAccounts(accountlist, account);
//                            }
//                        } else {
//                            accountlist = getChildAccounts(accountlist, account);
//                        }
//                    }
//                }
//            }
//            boolean loadTransactionDetails = false;
//            if (requestJobj.has(Constants.LOAD_TRANSACTION_DETAILS)) {// flag to skip the transaction details
//                loadTransactionDetails = requestJobj.optBoolean(Constants.LOAD_TRANSACTION_DETAILS);
//            }
//            boolean consolidateFlag = requestJobj.optBoolean("consolidateFlag");
//            String gcurrencyid = requestJobj.optString(Constants.globalCurrencyKey);
//            boolean eliminateflag = consolidateFlag;
//            boolean excludePreviousYear = requestJobj.optBoolean("excludePreviousYear");
//            Date start = new Date(1970);
//            Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();  //end date used to calculate Opening Balance
//
//            Boolean bankBook = requestJobj.optBoolean("bankBook");
//            Boolean ledgerReport = requestJobj.optBoolean("ledgerReport");
//            String companyid = requestJobj.optString(Constants.companyKey);
//            KwlReturnObject prefresult = null;
//            CompanyAccountPreferences pref = null;
//            String cashAccount = "";
//            if (!consolidateFlag) {
//                prefresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
//                pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
//                cashAccount = pref.getCashAccount().getID();
//            }
//            HashMap<String, Object> reqParams = AccountingManager.getGlobalParamsJson(requestJobj);
//            reqParams.put(Constants.REQ_startdate, requestJobj.get("stdate"));
//            reqParams.put(Constants.REQ_enddate, requestJobj.get("enddate"));
//            reqParams.put("dateformat", authHandler.getDateOnlyFormat());
//
//            String Searchjson =  requestJobj.optString(Constants.Acc_Search_Json);
//            String filterCriteria = requestJobj.optString(Constants.Filter_Criteria);
//            String cnSearchJson = "";
//            String dnSearchJson = "";
//            if (!StringUtil.isNullOrEmpty(Searchjson) && !StringUtil.isNullOrEmpty(filterCriteria)) {
//                reqParams.put("isIAF", true);
//                HashMap<String, Object> reqPar1 = new HashMap<String, Object>();
//                reqPar1.put(Constants.companyKey, companyid);
//                reqPar1.put(Constants.Acc_Search_Json, Searchjson);
//                reqPar1.put(Constants.Filter_Criteria, filterCriteria);
//                
//                reqPar1.remove(Constants.moduleid);
//                reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
//                cnSearchJson = getSearchJsonByModule(reqPar1);
//
//                reqPar1.remove(Constants.moduleid);
//                reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
//                dnSearchJson = getSearchJsonByModule(reqPar1);
//            }
//
//            Map<String, Object[]> creditNoteMap = Collections.emptyMap();
//            Map<String, Object[]> creditNoteMapVendor = Collections.emptyMap();
//            Map<String, Object[]> debitNoteMap = Collections.emptyMap();
//            Map<String, Object[]> debitNoteMapCustomer = Collections.emptyMap();
//            Map<String, Integer> jeDetailPaymentTypeMap = new HashMap<String, Integer>();
//            Map<String, Integer> jeDetailReceiptTypeMap = new HashMap<String, Integer>();
//            
//            if (!consolidateFlag) {
//                reqParams.put(Constants.companyKey, companyid);
//                reqParams.put(Constants.globalCurrencyKey, gcurrencyid);
//                reqParams.put(Constants.Filter_Criteria, requestJobj.optString(Constants.Filter_Criteria));
//
//                if(!StringUtil.isNullOrEmpty(Searchjson)){
//                    reqParams.remove(Constants.Acc_Search_Json);
//                    reqParams.put(Constants.Acc_Search_Json, cnSearchJson);
//                }
//                reqParams.put("isPartyEntry", true);// fetch only CN/DN whichi is created by party journal
//                creditNoteMap = getCreditNoteMap(reqParams);
//                creditNoteMapVendor = creditNoteMapVendor(reqParams);
//
//                if(!StringUtil.isNullOrEmpty(Searchjson)){
//                    reqParams.remove(Constants.Acc_Search_Json);
//                    reqParams.put(Constants.Acc_Search_Json, dnSearchJson);
//                }
//                debitNoteMap = getDebitNoteMap(reqParams);
//                debitNoteMapCustomer = debitNoteMapCustomer(reqParams);
//            }
//
//            Iterator iterator = accountlist.iterator();
//            JSONArray jArr = new JSONArray();
//            HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(requestJobj);
//            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
//            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
//            int count = 0;
//            while (iterator.hasNext()) {
//                count++;
//                Calendar c0= Calendar.getInstance();
//                balanceAmount = 0;
//		balanceAmountAccountCurrency = 0;   //ERP-8853
//                total = 0;
//                OpeningBalanceInAccountCurrency = 0;
//                Object listObj = iterator.next();
//                Account account = (Account) listObj;
//                accountid = account.getID();
//                boolean showOpeningBalanceSeprately = true;
//                if (excludePreviousYear && account.getAccounttype() == 0) {//0 :- profit and loss account
//                    
//                    start = getDateForExcludePreviousYearBalanceFilter(requestJobj, startDate);
//                } else {
//                    start = null;  
//                }
//
//                double accountOpeningBalanceInBase = 0.0d;
//                double OpeningBalanceInBaseCurrency = 0.0d;
//
//                //other than T-Ledger reports call come in this else e.g.1)on expander click of General Ledger.2)cashbook/bank book reports.
//
//                Calendar cob1 = Calendar.getInstance();
//                accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccountJson(requestJobj, account, false, null);
//                Calendar cob2 = Calendar.getInstance();
//                boolean shouldAccountOpeningBalanceInclude = !accInvoiceCommon.accountHasOpeningTransactionsJson(requestJobj, account, false, null);
//                Calendar cob3 = Calendar.getInstance();
//                
//                if (shouldAccountOpeningBalanceInclude) {
//                    OpeningBalanceInAccountCurrency = authHandler.round(account.getOpeningBalance(), 2);
//                } else {
//                    String accountcurrencyid = account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID();
//                    KwlReturnObject crresult11 = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, accountOpeningBalanceInBase, accountcurrencyid, account.getCreationDate(), 0);
//                    OpeningBalanceInAccountCurrency = (Double) crresult11.getEntityList().get(0);
//                    OpeningBalanceInAccountCurrency = authHandler.round(OpeningBalanceInAccountCurrency, 2);
//                }
//
//                if (bankBook) {
//                    balanceAmountAccountCurrency = 0;
//                }
//                OpeningBalanceInBaseCurrency = accountOpeningBalanceInBase;
//                
//                if (!StringUtil.isNullOrEmpty(requestJobj.optString(Constants.Acc_Search_Json))) { // ERP-11394 reset opening balance in case of advance serach
//                    accountOpeningBalanceInBase = 0;
//                    OpeningBalanceInBaseCurrency = 0;
//                    OpeningBalanceInAccountCurrency = 0;
//                }
//                
//                //BUG Fixed #16739 : Creation date check
//                Date createdOn = AccountingManager.resetTimeField(account.getCreationDate());
//                Date toDate = AccountingManager.resetTimeField(endDate);
//                if (toDate.compareTo(createdOn) < 0) {
//                    jobj.put(Constants.RES_data, new JSONArray()); //Return Empty Data
//                    return jobj;
//                }
//
//                String entryChar = "c", emptyChar = "d";
//                double balance = 0;
//                double balanceAccountCurrency = 0;
//                double openingBalance=0.00;
//                double openingBalanceAccountCurrency=0.00;
//                
//                requestParams.put("costcenter", requestJobj.optString("costcenter"));
//                requestParams.put(Constants.Acc_Search_Json, requestJobj.optString(Constants.Acc_Search_Json));
//                requestParams.put(Constants.Filter_Criteria, requestJobj.optString(InvoiceConstants.Filter_Criteria));
//                
//                if(!generalLedgerFlag){
//                    Calendar cabm1 = Calendar.getInstance();
//
//                    balance = getAccountBalanceMerged(requestJobj,requestParams, accountid, null, openBalEndDate, eliminateflag);
//                    Calendar cabm2 = Calendar.getInstance();
//                }
//                String mappedAccIDs = accountid + ",";
//                if (consolidateFlag && !generalLedgerFlag) {//Fetch mapped account's balances.
//                    List mapaccresult = accAccountDAOobj.getMappedAccountsForReports(accountid);
//                    Iterator<Object[]> itr1 = mapaccresult.iterator();
//                    String mappedaccountid = "";
//                    while (itr1.hasNext()) {
//                        Object[] row = (Object[]) itr1.next();
//                        mappedaccountid = row[0].toString();
//                        mappedAccIDs += mappedaccountid + ",";
//                        KwlReturnObject childObj = accountingHandlerDAOobj.loadObject(Account.class.getName(), mappedaccountid);
//                        Account child = (Account) childObj.getEntityList().get(0);
//                        requestJobj.put(Constants.companyKey, child.getCompany().getCompanyID());
//
//                        balance += getAccountBalanceMerged(requestJobj,requestParams, mappedaccountid, excludePreviousYear ? start : null, openBalEndDate, eliminateflag);
//                    }
//                }
//                if (balance != 0) {
//                    
//                    requestParams.put("tocurrencyid", requestJobj.optString("tocurrencyid"));
//                    requestParams.put("templatecode", requestJobj.optInt("templatecode",-1));
//                    if (!StringUtil.isNullOrEmpty(selectedCurrencyIds)) {
//                        requestParams.put("currencyFlag", true);
//                        requestParams.put("selectedCurrencyIds", selectedCurrencyIds);
//                    }
//                    
//                    if(!generalLedgerFlag){
//                        Calendar caoc1 = Calendar.getInstance();
//                        balanceAccountCurrency = getAccountBalanceInOriginalCurrency(requestJobj,requestParams, accountid, excludePreviousYear ? start : null, openBalEndDate);
//                        Calendar caoc2 = Calendar.getInstance();
//                        mappedAccIDs = accountid + ",";
//                        if (consolidateFlag) {//Fetch mapped account's balances.
//                            List mapaccresult = accAccountDAOobj.getMappedAccountsForReports(accountid);
//                            Iterator<Object[]> itr1 = mapaccresult.iterator();
//                            String mappedaccountid = "";
//                            while (itr1.hasNext()) {
//                                Object[] row = (Object[]) itr1.next();
//                                mappedaccountid = row[0].toString();
//                                mappedAccIDs += mappedaccountid + ",";
//                                KwlReturnObject childObj = accountingHandlerDAOobj.loadObject(Account.class.getName(), mappedaccountid);
//                                Account child = (Account) childObj.getEntityList().get(0);
//                                requestJobj.put(Constants.companyKey, child.getCompany().getCompanyID());
//                                balanceAccountCurrency += getAccountBalanceInOriginalCurrency(requestJobj,requestParams, mappedaccountid, excludePreviousYear ? start : null, openBalEndDate);
//                            }
//                        }
//                    }
//                }
//                Date sDate = AccountingManager.resetTimeField(startDate);
//                if (sDate.after(createdOn)) {
//                    balance += accountOpeningBalanceInBase;
//                    balanceAccountCurrency += OpeningBalanceInAccountCurrency;
//                    showOpeningBalanceSeprately = false;
//                }
//                if (balance != 0 || balanceAccountCurrency != 0) {
//                    if (balance > 0) {
//                        entryChar = "d";
//                        emptyChar = "c";
//                    } else {
//                        entryChar = "c";
//                        emptyChar = "d";
//                    }
//                    JSONObject objlast = new JSONObject();
//                    objlast.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(startDate));
//                    objlast.put(entryChar + "_accountname", "Balance b/d");
//                    objlast.put(entryChar + "_acccode", "");
//                    objlast.put(entryChar + "_journalentryid", "");
//                    objlast.put(entryChar + "_transactionID", "");
//                    objlast.put(entryChar + "_transactionDetails", "");
//                    objlast.put(entryChar + "_transactionDetailsForExpander", "");
//                    objlast.put(entryChar + "_transactionDetailsBankBook", "");
//                    objlast.put(entryChar + "_checkno", "");
//                    objlast.put(entryChar + "_description", "");
//                    objlast.put(entryChar + "_amount", Math.abs(balance));
//                    objlast.put(emptyChar + "_date", "");
//                    objlast.put(emptyChar + "_accountname", "");
//                    objlast.put(emptyChar + "_journalentryid", "");
//                    objlast.put(emptyChar + "_amount", "");
//                    objlast.put(emptyChar + "_transactionID", "");
//                    objlast.put(emptyChar + "_transactionDetails", "");
//                    objlast.put(emptyChar + "_transactionDetailsForExpander", "");
//                    objlast.put(emptyChar + "_transactionDetailsBankBook", "");
//                    objlast.put(emptyChar + "_checkno", "");
//                    objlast.put(emptyChar + "_description", "");
//                    objlast.put("accountid", accountid);
//                    objlast.put("currencysymbol", account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol());
//                    objlast.put("currencycode", account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode());
//                    String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
//                    objlast.put("accountname", accountname);
//
//                    String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
//                    objlast.put("accCode", acccode);
//                    objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());
//
//                    // this is for displaying on the group header
//                    if (!acccode.equals("") && account.getName().equals("")) {
//                        objlast.put("accCodeName", acccode);
//                    } else if (!acccode.equals("") && !account.getName().equals("")) {
//                        objlast.put("accCodeName", acccode + " - " + account.getName());
//                    } else {
//                        objlast.put("accCodeName", accountname);
//                    }
//
//                    if (entryChar.equals("d")) {
//                        balanceAmount = balanceAmount + Math.abs(balance);
//                        objlast.put("balanceAmount", authHandler.round(balanceAmount, 2));
//                    } else if (entryChar.equals("c")) {
//                        balanceAmount = balanceAmount - Math.abs(balance);
//                        objlast.put("balanceAmount", authHandler.round(balanceAmount, 2));
//                    }
//
//                    if (balanceAccountCurrency > 0) {
//                        entryChar = "d";
//                        emptyChar = "c";
//                    } else {
//                        entryChar = "c";
//                        emptyChar = "d";
//                    }
//                    
//                    if (entryChar.equals("d")) {
//                        balanceAmountAccountCurrency = balanceAmountAccountCurrency + Math.abs(balanceAccountCurrency);
//                        objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, 2));
//                    } else if (entryChar.equals("c")) {
//                        balanceAmountAccountCurrency = balanceAmountAccountCurrency - Math.abs(balanceAccountCurrency);
//                        objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, 2));
//                    }
//                    objlast.put(entryChar + "_amountAccountCurrency", Math.abs(balanceAccountCurrency));
//                    jArr.put(objlast);
//
//                    if (requestJobj.optString("filetype") != null) {
//                        if (requestJobj.optString("filetype").equals("print") || requestJobj.optString("filetype").equals("csv")) {
//                            if (emptyChar == "d") {
//                                total = total + Math.abs(balance);
//                                totalAccountCurrency = totalAccountCurrency + Math.abs(balanceAccountCurrency);
//                            }
//                        }
//                    }
//                }
//
//                if (showOpeningBalanceSeprately) {//shows opening balance if date from in account ceration date
//                    if (OpeningBalanceInAccountCurrency != 0) {
//                        if (OpeningBalanceInAccountCurrency > 0) {
//                            entryChar = "d";
//                            emptyChar = "c";
//                            balance += OpeningBalanceInBaseCurrency;
//                            balanceAccountCurrency += OpeningBalanceInAccountCurrency;
//                        } else {
//                            balance += OpeningBalanceInBaseCurrency;
//                            balanceAccountCurrency += OpeningBalanceInAccountCurrency;
//                            entryChar = "c";
//                            emptyChar = "d";
//                        }
//
//                        JSONObject objlast = new JSONObject();
//                        objlast.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(startDate));
//                        objlast.put(entryChar + "_accountname", "Opening Balance");
//                        objlast.put(entryChar + "_acccode", "");
//                        objlast.put(entryChar + "_journalentryid", "");
//                        objlast.put(entryChar + "_amount", Math.abs(OpeningBalanceInBaseCurrency));
//                        objlast.put(entryChar + "_amountAccountCurrency", Math.abs(OpeningBalanceInAccountCurrency));
//                        objlast.put(entryChar + "_transactionID", "");
//                        objlast.put(entryChar + "_transactionDetails", "");
//                        objlast.put(entryChar + "_transactionDetailsForExpander", "");
//                        objlast.put(entryChar + "_transactionDetailsBankBook", "");
//                        objlast.put(entryChar + "_checkno", "");
//                        objlast.put(entryChar + "_description", "");
//                        objlast.put(emptyChar + "_date", "");
//                        objlast.put(emptyChar + "_accountname", "");
//                        objlast.put(emptyChar + "_journalentryid", "");
//                        objlast.put(emptyChar + "_amount", "");
//                        objlast.put(emptyChar + "_transactionID", "");
//                        objlast.put(emptyChar + "_transactionDetails", "");
//                        objlast.put(emptyChar + "_transactionDetailsForExpander", "");
//                        objlast.put(emptyChar + "_transactionDetailsBankBook", "");
//                        objlast.put(emptyChar + "_checkno", "");
//                        objlast.put(emptyChar + "_description", "");
//                        objlast.put("accountid", accountid);
//                        objlast.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
//                        objlast.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
//                        String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
//                        objlast.put("accountname", accountname);
//
//                        String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
//                        objlast.put("accCode", acccode);
//                        objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());
//
//                        // this is for displaying on the group header
//                        if (!acccode.equals("") && account.getName().equals("")) {
//                            objlast.put("accCodeName", acccode);
//                        } else if (!acccode.equals("") && !account.getName().equals("")) {
//                            objlast.put("accCodeName", acccode + " - " + account.getName());
//                        } else {
//                            objlast.put("accCodeName", accountname);
//                        }
//
//                        if (entryChar.equals("d")) {
//                            balanceAmount = balanceAmount + Math.abs(OpeningBalanceInBaseCurrency);// work on home currency
//                            objlast.put("balanceAmount", authHandler.round(balanceAmount, 2));
//                            balanceAmountAccountCurrency = balanceAmountAccountCurrency + Math.abs(OpeningBalanceInAccountCurrency);// work on home currency
//                            objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, 2));
//                        } else if (entryChar.equals("c")) {
//                            balanceAmount = balanceAmount - Math.abs(OpeningBalanceInBaseCurrency);
//                            objlast.put("balanceAmount", authHandler.round(balanceAmount, 2));
//                            balanceAmountAccountCurrency = balanceAmountAccountCurrency - Math.abs(OpeningBalanceInAccountCurrency);
//                            objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, 2));
//                        }
//                        jArr.put(objlast);
//
//                    }
//                }
//                if(!ledgerReportFlag && !generalLedgerFlag){//we saves balance brod down or Opening Balance to avoid adding to period balance
//                    openingBalance=balance;
//                    openingBalanceAccountCurrency=balanceAccountCurrency;
//                    balance=0.00;
//                    balanceAccountCurrency=0.00;
//                }
//                String searchJson = requestJobj.optString(Constants.Acc_Search_Json);
//                if (!StringUtil.isNullOrEmpty(searchJson)) {//This is used for to Get different dimension entry from dimension name for diffrent modules
//                    searchJson = accJournalEntryobj.getJsornStringForSearch(searchJson, mappedAccIDs.split(",")[0]);
//                }
//                String filterConjuctionCriteria = requestJobj.optString(InvoiceConstants.Filter_Criteria);
//                
//                Map<String, String> requestParams1 = new HashMap<String, String>();
//                requestParams1.put("accountid", accountid);
//                requestParams1.put("companyid", companyid);
//                DateFormat sqldf = new SimpleDateFormat("yyyy-MM-dd");
//                String sqlStartDate = sqldf.format(startDate);
//                String sqlEndDate = sqldf.format(endDate);
//                requestParams1.put("startdate", sqlStartDate);
//                requestParams1.put("enddate", sqlEndDate);
//                String userSessionId=requestJobj.getString(Constants.userSessionId);
//                requestParams1.put(Constants.userSessionId, userSessionId);
//                accInvoiceDAOobj.deleteTempCustomData(userSessionId);
//                accGoodsReceiptDAOObj.deleteTempCustomData(userSessionId);
//                
//                String deleteQuery = "delete from temp_gl_details where usersessionid='"+requestJobj.getString(Constants.userSessionId)+"'";
//                executeSQLUpdate(deleteQuery);
//                Calendar c1= Calendar.getInstance();
//                accInvoiceDAOobj.createTempCustomData(requestParams1);
//                accInvoiceDAOobj.insertLedgerInfoForInvoice(requestParams1);
//                accInvoiceDAOobj.insertLedgerInfoForInvoiceTermMap(requestParams1);
//                accInvoiceDAOobj.insertLedgerInfoForInvoiceCAPAccounts(requestParams1);
//                Calendar c2 = Calendar.getInstance();
//                System.out.println("time taken in invoice insertion -> "+(c2.getTimeInMillis()-c1.getTimeInMillis())/1000);
//                
//                accGoodsReceiptDAOObj.createTempCustomData(requestParams1);
//                accGoodsReceiptDAOObj.insertLedgerInfoForExpenseInvoice(requestParams1);
//                accGoodsReceiptDAOObj.insertLedgerInfoForPurchaseInvoice(requestParams1);
//                accGoodsReceiptDAOObj.insertLedgerInfoForExpensesRounding(requestParams1);
//                accGoodsReceiptDAOObj.insertLedgerInfoForCAPAccounts(requestParams1);
//                Calendar c3 = Calendar.getInstance();
//                System.out.println("time taken in GR insertion -> "+(c3.getTimeInMillis()-c2.getTimeInMillis())/1000);
//                accInvoiceDAOobj.deleteTempCustomData(userSessionId);
//                accGoodsReceiptDAOObj.deleteTempCustomData(userSessionId);
//                
//              KwlReturnObject lresult = accJournalEntryobj.getLedgerMerged(mappedAccIDs, startDate, endDate, eliminateflag, generalLedgerFlag, selectedCurrencyIds, filterConjuctionCriteria, searchJson,viewFlag,accountTransactionType);
//                List list = lresult.getEntityList();
//                System.out.println("Total ledgers : "+list.size());
//                Iterator itr = list.iterator();
//                String fileType = requestJobj.optString("filetype");
//                if (fileType!=null) {
//                    if (itr.hasNext()) { //For Displaying Group Name in CSV and PDF
//                        if (!bankBook && ledgerReportFlag && fileType != null && (fileType.equals("csv") || fileType.equals("pdf") || fileType.equals("print"))) {
//                            JSONObject accountGroup = addAccountGroupJson(account);;
//                            jArr.put(accountGroup);
//                        }
//                    }
//                }
//                Calendar c4 = Calendar.getInstance();
//                while (itr.hasNext()) {
//
//                    Object[] row = (Object[]) itr.next();
//                    JournalEntry entry = (JournalEntry) row[0];
//                    int transactionModuleID=entry.getTransactionModuleid();
//                    JournalEntryDetail jed = (JournalEntryDetail) row[1];
//                    if ((transactionModuleID==Constants.Acc_Cash_Sales_ModuleId || transactionModuleID==Constants.Acc_Invoice_ModuleId || transactionModuleID==Constants.Acc_Cash_Purchase_ModuleId || transactionModuleID==Constants.Acc_Vendor_Invoice_ModuleId) &&  entry.getTransactionId()!= null) {
//                        List glList = getLedgerInfoForJed(jed.getID());
//                        if (glList != null && !glList.isEmpty()) {
//                            Object[] details = (Object[]) glList.get(0);
//
//                            JSONObject obj = new JSONObject();
//
//                            if (consolidateFlag) {
//                                requestJobj.put(Constants.companyKey, companyid);
//                                requestParams.put(Constants.companyKey, companyid);
//                                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
//                            }
//                            String entrydateStr = details[13] == null ? "" : details[13].toString();
//                            String currencyid = (details[21] == null ? currency.getCurrencyID() : details[21].toString());
//                            String currencyCode = (details[3] == null ? currency.getCurrencyID() : details[3].toString());
//                            String currencySymbol = (details[5] == null ? currency.getCurrencyID() : details[5].toString());
//                            double transactionAmount = (details[11] == null) ? 0.0 : Double.parseDouble(details[11].toString());
//                            double jedExchangeRate = (details[9] == null) ? 0.0 : Double.parseDouble(details[9].toString());
//                            double jeExchangeRate = (details[16] == null) ? 0.0 : Double.parseDouble(details[16].toString());
//                            String accountCurrencyid = details[28] == null ? "" : details[28].toString();
//                            String jeDetailId = details[27] == null ? "" : details[27].toString();
//                            String jedAccountid = details[23] == null ? "" : details[23].toString();
//                            int isReval = (details[22] == null) ? 0 : Integer.parseInt(details[22].toString());
//                            int typeValue = (details[26] == null) ? 0 : Integer.parseInt(details[26].toString());
//                            double paymentCurrencyToPaymentMethodCurrencyRate = (details[24] == null) ? 0.0 : Double.parseDouble(details[24].toString());
//                            boolean isMulticurrencyPaymentJE = details[25] == null ? false : (details[25].toString().equalsIgnoreCase("T") ? true : false);
//                            double amountBaseCurrency = (details[12] == null) ? 0.0 : Double.parseDouble(details[12].toString());
//                            KwlReturnObject crresult1 = null;
//                            if (!currencyid.equals(accountCurrencyid)) {
//                                crresult1 = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, amountBaseCurrency, accountCurrencyid, sqldf.parse(entrydateStr), jeExchangeRate);
//
//                            }
//
//                            amountBaseCurrency = authHandler.round(amountBaseCurrency, 2);
//                            double amountAccountCurrency = 0;
//
//                            /*
//                             * ERP-14744 : I have commented following check. So
//                             * far Exchange Gain/Loss transaction amount ll not
//                             * be consider in Total Amount of Bank Book, Bank
//                             * Reconciliation & Ledger Report.
//                             */
//
//                            if (isReval > 0) {
//                                amountAccountCurrency = 0;
//                            } else {
//                                if (!StringUtil.isNullOrEmpty(currencyid) && !StringUtil.isNullOrEmpty(jeDetailId) && !StringUtil.isNullOrEmpty(jedAccountid) && !StringUtil.isNullOrEmpty(accountCurrencyid) && currencyid.equals(accountCurrencyid)) {
//                                    amountAccountCurrency = transactionAmount; // if transactionCurrencyID=accountCurrencyID, then don't convert the amount
//                                } else if ((paymentCurrencyToPaymentMethodCurrencyRate != 1) || ((paymentCurrencyToPaymentMethodCurrencyRate == 1) && isMulticurrencyPaymentJE)) {    // If this JE is for that payment, which is having payment currency and payment method currency different.
//                                    double baseCurrencyToPaymentCurrencyConvertedAmount = transactionAmount;   // This amount is already saved in payment currency only. 
//                                    double baseCurrencyToPaymentMethodCurrencyConvertedAmount = baseCurrencyToPaymentCurrencyConvertedAmount * paymentCurrencyToPaymentMethodCurrencyRate;
//                                    amountAccountCurrency = baseCurrencyToPaymentMethodCurrencyConvertedAmount;
//                                    amountAccountCurrency = authHandler.round(amountAccountCurrency, 2);
//                                    /*
//                                     * ERP-16072 When JE is fund transafer JE
//                                     * with line level exchange rate is
//                                     * applicable for account currency to JE
//                                     * currency, amount in account currency will
//                                     * be calculated according to user given
//                                     * exchange rate.
//                                     */
//                                } else if (typeValue == Constants.FundTransfer_Journal_Entry && jedExchangeRate != 0 && jedExchangeRate != -1) {
//                                    amountAccountCurrency = transactionAmount / jedExchangeRate;
//                                    amountAccountCurrency = authHandler.round(amountAccountCurrency, 2);
//                                } else {
//                                    amountAccountCurrency = (Double) crresult1.getEntityList().get(0);
//                                    amountAccountCurrency = authHandler.round(amountAccountCurrency, 2);
//                                }
//                            }
//
//
//                            String debit = details[10] == null ? "" : details[10].toString();
//                            if (!StringUtil.isNullOrEmpty(debit) && debit.equals("T")) {
//                                entryChar = "d";
//                                emptyChar = "c";
//                            } else {
//                                entryChar = "c";
//                                emptyChar = "d";
//                            }
//
//
//                            if (!StringUtil.isNullOrEmpty(entrydateStr)) {
//                                obj.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(sqldf.parse(entrydateStr)));
//                            } else {
//                                obj.put(entryChar + "_date", "");
//                            }
//                            if(details[20] == null || details[20].toString().trim().equals("")){
//                                System.out.println("NULL Value for "+details[27]);
//                            }
//                            if(StringUtil.isNullOrEmpty(details[20].toString())){
//                                int aa=0;
//                            }
//                            if(details[20].toString().equals("GL1938-201608")){
//                                System.out.println("******");
//                            }
//                            String accInfo = details[1]==null?"":details[1].toString();
//                            if(!accInfo.isEmpty()){
//                                String accNameList = null;
//                                String accCodeList =null;
//                                if(accInfo.contains(";;")){
//                                    String[] accDetails=accInfo.split(";;") ;
//                                    obj.put(entryChar + "_accountname", accDetails[0]);
//                                    obj.put(entryChar + "_acccode", accDetails[1]);
//                                }
//                            }
//                            
//                            
//                            obj.put(entryChar + "_entryno", details[20] == null ? "" : details[20].toString());
//                            obj.put(entryChar + "_externalcurrencyrate", details[16] == null ? "" : details[16].toString());
//                            obj.put(entryChar + "_journalentryid", details[14] == null ? "" : details[14].toString());
//                            obj.put(entryChar + "_transactionID", details[15] == null ? "" : details[15].toString());
//                            obj.put(Constants.billid, details[17] == null ? "" : details[17].toString());
//                            if (accountid.equals(cashAccount) || (details[18] != null && details[18].toString().equals("1"))) {
//                                if(transactionModuleID==Constants.Acc_Cash_Sales_ModuleId ){
//                                    obj.put("type", Constants.CASH_SALE);
//                                }else{
//                                    obj.put("type", Constants.CASH_PURCHASE);
//                                }
//                            } else {
//                                if(transactionModuleID==Constants.Acc_Invoice_ModuleId ){
//                                    obj.put("type", Constants.CUSTOMER_INVOICE);
//                                }else{
//                                    obj.put("type", Constants.VENDOR_INVOICE);
//                                }
//                            }
//                            String transactionDetails = details[8] == null ? "" : details[8].toString();
//                            String transactionDetailsForExpander = transactionDetails.replaceAll("<br>", ", ");
//                            obj.put(entryChar + "_transactionDetails", transactionDetails);
//                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//
//                            obj.put("_cvName", details[7] == null ? "" : details[7].toString());
//                            obj.put(entryChar + "_checkno", "");
//                            obj.put(entryChar + "_checkdate", "");
//                            obj.put(entryChar + "_description", "");
//                            obj.put("memoValue", details[19] == null ? "" : details[19].toString());
//                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
//                            obj.put("costCenterName", details[6] == null ? "" : details[6].toString());
//
//
//                            obj.put("transactionAmount", details[11] == null ? "" : details[11].toString());
//                            obj.put("transactionDateString", details[13] == null ? "" : details[13].toString());
//                            obj.put(entryChar + "_amount", details[12] == null ? "" : details[12].toString());
//                            obj.put(entryChar + "_transactionAmount", details[11] == null ? "" : details[11].toString());
//
//                            obj.put(emptyChar + "_date", "");
//                            obj.put(emptyChar + "_accountname", "");
//                            obj.put(emptyChar + "_acccode", "");
//                            obj.put(emptyChar + "_entryno", "");
//                            obj.put(emptyChar + "_journalentryid", "");
//                            obj.put(emptyChar + "_amount", "");
//                            obj.put(emptyChar + "_amountAccountCurrency", "");
//                            obj.put(emptyChar + "_transactionAmount", "");
//                            obj.put(emptyChar + "_transactionID", "");
//                            obj.put(emptyChar + "_transactionDetails", "");
//                            obj.put(emptyChar + "_transactionDetailsForExpander", "");
//                            obj.put(emptyChar + "_checkno", "");
//                            obj.put(emptyChar + "_transactionDetailsBankBook", "");
//
//                            obj.put("transactionCurrency", (StringUtil.isNullOrEmpty(currencyid) ? currency.getCurrencyID() : currencyid));
//                            obj.put("transactionSymbol", (StringUtil.isNullOrEmpty(currencyCode) ? currency.getCurrencyCode() : currencyCode)); //transaction currency code
//                            obj.put("transactionCurrencySymbol", (StringUtil.isNullOrEmpty(currencySymbol) ? currency.getSymbol() : currencySymbol));//transaction currency symbol
//                            obj.put("transactionAmount", transactionAmount);
//                            obj.put("transactionDateString", StringUtil.isNullOrEmpty(entrydateStr) ? "" : entrydateStr);
//                            obj.put(entryChar + "_amount", amountBaseCurrency);   //Amount in base currency
//                            obj.put(entryChar + "_transactionAmount", transactionAmount);   //Amount in document currency
//                            if ((bankBook || ledgerReport) && isReval > 1) {
//                                obj.put(entryChar + "_amountAccountCurrency", "");
//                            } else {
//                                obj.put(entryChar + "_amountAccountCurrency", amountAccountCurrency);   //Amount in account currency
//                            }
//
//                            String accountCurrencyCode = details[30] == null ? "" : details[30].toString();
//                            String accountCurrencySymbol = details[31] == null ? "" : details[31].toString();
//                            obj.put("currencysymbol", (StringUtil.isNullOrEmpty(accountCurrencySymbol) ? currency.getSymbol() : accountCurrencySymbol));//Account currency syambol
//                            obj.put("currencycode", (StringUtil.isNullOrEmpty(accountCurrencyCode) ? currency.getCurrencyCode() : accountCurrencyCode));//Account currency code
//                            obj.put("accountid", accountid);
//                            String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
//                            obj.put("accountname", accountname);
//
//                            String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
//                            obj.put("accCode", acccode);
//
//                            obj.put(Constants.currencyKey, accountCurrencyid);
//
//                            // this is for displaying on the group header
//                            if (!acccode.equals("") && account.getName().equals("")) {
//                                obj.put("accCodeName", acccode);
//                            } else if (!acccode.equals("") && !account.getName().equals("")) {
//                                obj.put("accCodeName", acccode + " - " + account.getName());
//                            } else {
//                                obj.put("accCodeName", accountname);
//                            }
//
//                            if (entryChar.equals("d")) {
//                                balanceAmount = balanceAmount + amountBaseCurrency;
//                                obj.put("balanceAmount", authHandler.round(balanceAmount, 2));
//                                balanceAmountAccountCurrency = balanceAmountAccountCurrency + amountAccountCurrency;
//                                obj.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, 2));
//                            } else if (entryChar.equals("c")) {
//                                balanceAmount = balanceAmount - amountBaseCurrency;
//                                obj.put("balanceAmount", authHandler.round(balanceAmount, 2));
//                                balanceAmountAccountCurrency = balanceAmountAccountCurrency - amountAccountCurrency;
//                                obj.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, 2));
//                            }
//                            jArr.put(obj);
//                            if (requestJobj.optString("filetype") != null) {
//                                if (requestJobj.optString("filetype").equals("print") || requestJobj.optString("filetype").equals("csv")) {
//                                    if (emptyChar == "d") {
//                                        total = total + amountBaseCurrency;
//                                        totalAccountCurrency = totalAccountCurrency + amountAccountCurrency;
//                                    }
//                                }
//                            }
//                        }
//                        continue;
//                    }
//                    
//                    
//                    
//                    Calendar c6 = Calendar.getInstance();
//                    if (consolidateFlag) {
//                        companyid = entry.getCompany().getCompanyID();
//                        requestJobj.put(Constants.companyKey, companyid);
//                        requestParams.put(Constants.companyKey, companyid);
//                        requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
//
//                        prefresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
//                        pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
//                        cashAccount = pref.getCashAccount().getID();
//                    }
//                    String currencyid = (jed.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : jed.getJournalEntry().getCurrency().getCurrencyID());
//                    JSONObject obj = new JSONObject();
//                    KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, jed.getAmount(), currencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
//                    double transactionAmount = jed.getAmount();
//                    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
//                    Date transactionDate = jed.getJournalEntry().getEntryDate();
//                    String transactionDateString = "";
//                    if (transactionDate != null) {
//                        transactionDateString = dateFormat.format(transactionDate);
//                    }
//                    KwlReturnObject crresult1 = null;
//                    if (currencyid.equals(jed.getAccount().getCurrency().getCurrencyID())) {
//                        crresult1 = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, jed.getAmount(), currencyid, jed.getAccount().getCurrency().getCurrencyID(), jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
//                    } else {
//                        crresult1 = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, jed.getAmount(), currencyid, jed.getAccount().getCurrency().getCurrencyID(), jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
//
//                    }
//                    double amountBaseCurrency = (Double) crresult.getEntityList().get(0);
//                    amountBaseCurrency = authHandler.round(amountBaseCurrency, 2);
//                    double amountAccountCurrency = 0;
//                    
//                    /* ERP-14744 : I have commented following check. So far Exchange Gain/Loss transaction amount ll not be consider in Total 
//                    Amount of Bank Book, Bank Reconciliation & Ledger Report. */
//                    
//                    if (jed.getJournalEntry().getIsReval() > 0){
//                        amountAccountCurrency = 0;
//                    } else {
//                        if(!StringUtil.isNullOrEmpty(currencyid) && jed!=null && jed.getAccount() !=null && jed.getAccount().getCurrency()!=null && currencyid.equals(jed.getAccount().getCurrency().getCurrencyID())){
//                            amountAccountCurrency=jed.getAmount(); // if transactionCurrencyID=accountCurrencyID, then don't convert the amount
//                        }else if ((jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate() != 1) || ((jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate() == 1) && jed.getJournalEntry().isIsmulticurrencypaymentje())) {    // If this JE is for that payment, which is having payment currency and payment method currency different.
//                            double baseCurrencyToPaymentCurrencyConvertedAmount = jed.getAmount();   // This amount is already saved in payment currency only. 
//                            double baseCurrencyToPaymentMethodCurrencyConvertedAmount = baseCurrencyToPaymentCurrencyConvertedAmount * jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate();
//                            amountAccountCurrency = baseCurrencyToPaymentMethodCurrencyConvertedAmount;
//                            amountAccountCurrency= authHandler.round(amountAccountCurrency, 2);
//                            /*
//                             * ERP-16072
//                             * When JE is fund transafer JE with line level exchange rate is applicable for account currency to JE currency,
//                             * amount in account currency will be calculated according to user given exchange rate.
//                             */
//                        } else if(jed.getJournalEntry().getTypeValue() == Constants.FundTransfer_Journal_Entry && jed.getExchangeRateForTransaction() !=0 && jed.getExchangeRateForTransaction()!= -1){
//                            amountAccountCurrency = jed.getAmount()/jed.getExchangeRateForTransaction();
//                            amountAccountCurrency = authHandler.round(amountAccountCurrency, 2);
//                        }else {
//                            amountAccountCurrency = (Double) crresult1.getEntityList().get(0);
//                            amountAccountCurrency= authHandler.round(amountAccountCurrency, 2);
//                        }
//                    }
//                    if (jed.isDebit()) {
//                        balance += authHandler.round(amountBaseCurrency, 2);
//                        balanceAccountCurrency += authHandler.round(amountAccountCurrency, 2);
//                        entryChar = "d";
//                        emptyChar = "c";
//                    } else {
//                        balance -= authHandler.round(amountBaseCurrency, 2);
//                        balanceAccountCurrency -= authHandler.round(amountAccountCurrency, 2);
//                        entryChar = "c";
//                        emptyChar = "d";
//                    }
//                    
//                    Set details = entry.getDetails();
//                    Iterator iter = details.iterator();
//                    List<String> accnameList = new ArrayList<String>();
//                    String accountName = "";
//                    String accountCode = "";
//                    String customerVendorId = "";
//                    String customerVendorName = "";
//                    int accountpersontype = 99;
//                    while (iter.hasNext()) {
//                        JournalEntryDetail d = (JournalEntryDetail) iter.next();
//                        if (d.isDebit() == jed.isDebit()) {
//                            continue;
//                        }
//                        String accname = StringUtil.isNullOrEmpty(d.getAccount().getName()) ? "" : d.getAccount().getName();
//                        accnameList.add(accname);
//                        accountCode += StringUtil.isNullOrEmpty(d.getAccount().getAcccode()) ? "" : d.getAccount().getAcccode() + ", ";
//                        customerVendorId = d.getCustomerVendorId();
//                        accountpersontype = d.getAccountpersontype();
//                        if (accountpersontype != 99 && accountpersontype != 0 && customerVendorId != null) {
//                            if (accountpersontype == 1) {
//                                KwlReturnObject resultCustomer = accountingHandlerDAOobj.loadObject(Customer.class.getName(), customerVendorId);
//                                if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
//                                    Customer customer = (Customer) resultCustomer.getEntityList().get(0);
//                                    customerVendorName = customer.getName();
//                                    obj.put("customerVendorName", customer.getName());
//                                }
//                            } else if (accountpersontype == 2) {
//                                KwlReturnObject resultVendor = accountingHandlerDAOobj.loadObject(Vendor.class.getName(), customerVendorId);
//                                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
//                                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
//                                    customerVendorName = vendor.getName();
//                                    obj.put("customerVendorName", vendor.getName());
//                                }
//                            }
//                        }
//                    }
//                    //Sorting performed to avoid shuffling in two A/C name in Single String object. //ERP-8519
//                    Collections.sort(accnameList);
//                    for(String accName : accnameList){
//                        accountName += StringUtil.isNullOrEmpty(accName)?"":accName + ", ";
//                    }
//                    accountName = StringUtil.isNullOrEmpty(accountName) ? "" : accountName.substring(0, Math.max(0, accountName.length() - 2));
//                    accountCode = StringUtil.isNullOrEmpty(accountCode) ? "" : accountCode.substring(0, Math.max(0, accountCode.length() - 2));
//                    accountName = (StringUtil.isNullOrEmpty(accountName) && !StringUtil.isNullOrEmpty(accountCode)) ? accountCode : accountName;
//                    obj.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(entry.getEntryDate()));
//                    if (!StringUtil.isNullOrEmpty(customerVendorName) && (bankBook || ledgerReport)) {
//                        obj.put(entryChar + "_accountname", customerVendorName);
//                    } else {
//                        obj.put(entryChar + "_accountname", accountName);
//                    }
//                    obj.put(entryChar + "_acccode", accountCode);
//                    obj.put(entryChar + "_entryno", entry.getEntryNumber());
//		    obj.put(entryChar + "_externalcurrencyrate", entry.getExternalCurrencyRate());
//                    obj.put(entryChar + "_journalentryid", entry.getID());
//                    if(!loadTransactionDetails){ // skip the transaction details
//                    boolean isPartyJournalEntry = entry.getTypeValue() == 2;
//                    if ((transactionModuleID==Constants.Acc_Cash_Sales_ModuleId || transactionModuleID==Constants.Acc_Invoice_ModuleId ) &&  entry.getTransactionId()!= null){
//                    
//                        String configJSONStr="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Sales Invoice - $#$InvoiceNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Cash Sale - $#$InvoiceNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Customer',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'ProductDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.InvoiceDetail,com.krawler.common.admin.KWLCurrency,TRANSACTION_AMOUNT,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$InvDetailDescription$#$<br>Amount : $#$CurrencyCode$#$ $#$TRANSACTION_AMOUNT$#$ $#$CUSTOMDATA$#$'}]}]";          
//                        JSONArray descJsonArr = new JSONArray();
//                        boolean isDescConfig=false;
//                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
//                        reqParDescConfig.put(Constants.companyKey, companyid);
//                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        reqParDescConfig.put("document", Constants.Acc_Invoice_ModuleId);
//
//                        isDescConfig=true;
//                        if(isDescConfig) {
//                            descJsonArr = new JSONArray(configJSONStr);
//                        }
//                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), entry.getTransactionId());
//                        Invoice invoice = (Invoice) KwlInvoice.getEntityList().get(0);
//                        String transactionDetails = "";
//                        String transactionDetailsForExpander = "";
//                        if (accountid.equals(cashAccount) || invoice.isCashtransaction()) {
//                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
//                            obj.put(Constants.billid, invoice.getID());
//                            obj.put("type", Constants.CASH_SALE);
//                        } else {
//                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
//                            obj.put(Constants.billid, invoice.getID());
//                            obj.put("type", Constants.CUSTOMER_INVOICE);
//                        }
//                        Map<String, String> transDetMap = getTransactionDetailsForInvoiceForGL(invoice, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
//                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
//                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
//                        obj.put(entryChar + "_transactionDetails", transactionDetails);
//                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//
//                        if (invoice != null && invoice.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = invoice.getCustomer();
//
//                            obj.put("_cvName", customer.getName());
//                            obj.put(entryChar + "_accountname", customer.getName());
//                        }
//                        obj.put(entryChar + "_checkno", "");
//                        obj.put(entryChar + "_checkdate", "");
//                        obj.put(entryChar + "_description", "");
//                        obj.put("memoValue",invoice.getMemo());
//                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
//                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                    } else if ((transactionModuleID==Constants.Acc_Cash_Purchase_ModuleId || transactionModuleID==Constants.Acc_Vendor_Invoice_ModuleId) && entry.getTransactionId() != null) {
//                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Purchase Invoice - $#$GoodsReceiptNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Cash Purchase - $#$GoodsReceiptNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Vendor',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'ProductDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.GoodsReceiptDetail,com.krawler.common.admin.KWLCurrency,TRANSACTION_AMOUNT,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$PIDetailDescription$#$<br>Amount : $#$CurrencyCode$#$ $#$TRANSACTION_AMOUNT$#$ $#$CUSTOMDATA$#$'}]},{seq:6,type:6,documentid:'ExpenseDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.ExpenseGRDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$EXPIDescription$#$ $#$CUSTOMDATA$#$'}]}]";          
//                        JSONArray descJsonArr = new JSONArray(newString);
//                        
//                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
//                        reqParDescConfig.put(Constants.companyKey, companyid);
//                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        reqParDescConfig.put("document", Constants.Acc_Vendor_Invoice_ModuleId);
//                        
//                        boolean isDescConfig=true;
//                        String transactionDetails = "";
//                        String transactionDetailsForExpander = "";
//                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), entry.getTransactionId());
//                        GoodsReceipt goodsReceipt = (GoodsReceipt) KwlInvoice.getEntityList().get(0);
//                        if (accountid.equals(cashAccount) || goodsReceipt.isCashtransaction()) {
//                            obj.put(entryChar + "_transactionID", goodsReceipt.getGoodsReceiptNumber());
//                            obj.put(Constants.billid, goodsReceipt.getID());
//                            obj.put("type", Constants.CASH_PURCHASE);
//                        } else {
//                            obj.put(entryChar + "_transactionID", goodsReceipt.getGoodsReceiptNumber());
//                            obj.put(Constants.billid, goodsReceipt.getID());
//                            obj.put("type", Constants.VENDOR_INVOICE);
//                        }
//                        Map<String, String> transDetMap = getTransactionDetailsForPurchaseInvoiceForGL(goodsReceipt, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
//                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
//                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
//                        obj.put(entryChar + "_transactionDetails", transactionDetails);
//                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//                        if (goodsReceipt != null && goodsReceipt.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = goodsReceipt.getVendor();
//                            obj.put("_cvName", vendor.getName());
//                            obj.put(entryChar + "_accountname", vendor.getName());
//                        }
//                        obj.put(entryChar + "_checkno", "");
//                        obj.put(entryChar + "_checkdate", "");
//                        obj.put(entryChar + "_description", goodsReceipt.getPayDetail()!=null && goodsReceipt.getPayDetail().getCheque()!=null && goodsReceipt.getPayDetail().getCheque().getDescription() != null ? goodsReceipt.getPayDetail().getCheque().getDescription() : "");
//                        obj.put("memoValue", goodsReceipt.getMemo());
//                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
//                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                    } else if (isPartyJournalEntry && (creditNoteMap.containsKey(entry.getID()) || creditNoteMapVendor.containsKey(entry.getID()))) {
//
//                        String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.CreditNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Credit Note - $#$CreditNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.CreditNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.CreditNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$CNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
//                        JSONArray descJsonArr = new JSONArray(newString);
//
//                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
//                        reqParDescConfig.put(Constants.companyKey, companyid);
//                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        reqParDescConfig.put("document", Constants.Acc_Credit_Note_ModuleId);
//                        
//                        boolean isDescConfig = true;
//                        obj.put(entryChar + "_transactionID", entry.getEntryNumber());
//                        CreditNote creditNote = null;
//                        String transactionDetails = "";
//                        String transactionDetailsForExpander = "";
//                        if (creditNoteMap.containsKey(entry.getID())) {
//                            creditNote = (CreditNote) creditNoteMap.get(entry.getID())[0];
//                            Map<String, String> transDetMap = getTransactionDetailsForCreditNote(creditNoteMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
//                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
//                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
//                        } else {
//                            creditNote = (CreditNote) creditNoteMapVendor.get(entry.getID())[0];
//                            Map<String, String> transDetMap = getTransactionDetailsForCreditNote(creditNoteMapVendor, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
//                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
//                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
//                        }
//                        obj.put(entryChar + "_transactionDetails", transactionDetails);
//                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//                        if (creditNote != null && creditNote.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = creditNote.getCustomer();
//
//                            obj.put("_cvName", customer.getName());
//                            obj.put(entryChar + "_accountname", customer.getName());
//                        } else if (creditNote != null && creditNote.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = creditNote.getVendor();
//                            obj.put("_cvName", vendor.getName());
//                            obj.put(entryChar + "_accountname", vendor.getName());
//                        }
//                        obj.put("noteid", creditNote.getID());
//                        obj.put("type", Constants.CREDIT_NOTE);
//                        obj.put(entryChar + "_checkno", "");
//                        obj.put(entryChar + "_checkdate", "");
//                        obj.put(entryChar + "_description", "");
//                        obj.put("memoValue", creditNote.getMemo());
//                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
//                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                    } else if ((transactionModuleID == Constants.Acc_Credit_Note_ModuleId) && entry.getTransactionId() != null) {
//                        String transactionDetails = "";
//                        String transactionDetailsForExpander = "";
//                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
//                        reqParDescConfig.put(Constants.companyKey, companyid);
//                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        reqParDescConfig.put("document", Constants.Acc_Credit_Note_ModuleId);
//                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), entry.getTransactionId());
//                        CreditNote creditNote = (CreditNote) KwlInvoice.getEntityList().get(0);
//                        boolean isDescConfig = true;
//                        obj.put(entryChar + "_transactionID", creditNote.getCreditNoteNumber());
//                        String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.CreditNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Credit Note - $#$CreditNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.CreditNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.CreditNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$CNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
//                        JSONArray descJsonArr = new JSONArray(newString);
//                        Map<String, String> transDetMap = getTransactionDetailsForCreditNoteForGL(creditNote, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
//                        transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
//                        transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
//                        obj.put(entryChar + "_transactionDetails", transactionDetails);
//                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//                        if (creditNote != null && creditNote.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = creditNote.getCustomer();
//
//                            obj.put("_cvName", customer.getName());
//                            obj.put(entryChar + "_accountname", customer.getName());
//                        } else if (creditNote != null && creditNote.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = creditNote.getVendor();
//                            obj.put("_cvName", vendor.getName());
//                            obj.put(entryChar + "_accountname", vendor.getName());
//                        }
//                        obj.put("noteid", creditNote.getID());
//                        obj.put("type", Constants.CREDIT_NOTE);
//                        obj.put(entryChar + "_checkno", "");
//                        obj.put(entryChar + "_checkdate", "");
//                        obj.put(entryChar + "_description", "");
//                        obj.put("memoValue", creditNote.getMemo());
//                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
//                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                    }else if (isPartyJournalEntry && (debitNoteMap.containsKey(entry.getID()) || debitNoteMapCustomer.containsKey(entry.getID()))) {
//                        String transactionDetails = "";
//                        String transactionDetailsForExpander = "";
//
//                        String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.DebitNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Debit Note - $#$DebitNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.DebitNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.DebitNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$DNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
//                        JSONArray descJsonArr = new JSONArray(newString);
//
//                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
//                        reqParDescConfig.put(Constants.companyKey, companyid);
//                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        reqParDescConfig.put("document", Constants.Acc_Debit_Note_ModuleId);
//
//                        boolean isDescConfig = true;
//                        DebitNote debitNote = null;
//                        if (debitNoteMap.containsKey(entry.getID())) {
//                            debitNote = (DebitNote) debitNoteMap.get(entry.getID())[0];
//                            Map<String, String> transDetMap = getTransactionDetailsForDebitNote(debitNoteMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
//                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
//                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
//                        } else {
//                            debitNote = (DebitNote) debitNoteMapCustomer.get(entry.getID())[0];
//                            Map<String, String> transDetMap = getTransactionDetailsForDebitNote(debitNoteMapCustomer, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
//                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
//                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
//                        }
//                        obj.put(entryChar + "_transactionID", entry.getEntryNumber());
//
//                        obj.put(entryChar + "_transactionDetails", transactionDetails);
//                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//                        if (debitNote != null && debitNote.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = debitNote.getCustomer();
//
//                            obj.put("_cvName", customer.getName());
//                            obj.put(entryChar + "_accountname", customer.getName());
//                        } else if (debitNote != null && debitNote.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = debitNote.getVendor();
//                            obj.put("_cvName", vendor.getName());
//                            obj.put(entryChar + "_accountname", vendor.getName());
//                        }
//                        obj.put("noteid", debitNote.getID());
//                        obj.put("type", Constants.DEBIT_NOTE);
//                        obj.put(entryChar + "_checkno", "");
//                        obj.put(entryChar + "_checkdate", "");
//                        obj.put(entryChar + "_description", "");
//                        obj.put("memoValue", debitNote.getMemo());
//                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
//                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                    } else if (transactionModuleID == Constants.Acc_Debit_Note_ModuleId && entry.getTransactionId() != null) {
//                        String transactionDetails = "";
//                        String transactionDetailsForExpander = "";
//                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
//                        reqParDescConfig.put(Constants.companyKey, companyid);
//                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        reqParDescConfig.put("document", Constants.Acc_Debit_Note_ModuleId);
//                        boolean isDescConfig = true;
//                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), entry.getTransactionId());
//                        DebitNote debitNote = (DebitNote) KwlInvoice.getEntityList().get(0);
//                        if (isPartyJournalEntry) {
//                            obj.put(entryChar + "_transactionID", entry.getEntryNumber());
//                        } else {
//                            obj.put(entryChar + "_transactionID", debitNote.getDebitNoteNumber());
//                        }
//                        String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.DebitNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Debit Note - $#$DebitNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.DebitNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.DebitNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$DNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
//                        JSONArray descJsonArr = new JSONArray(newString);
//                        Map<String, String> transDetMap = getTransactionDetailsForDebitNoteForGL(debitNote, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
//                        transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
//                        transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
//                        obj.put(entryChar + "_transactionDetails", transactionDetails);
//                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//                        if (debitNote != null && debitNote.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = debitNote.getCustomer();
//
//                            obj.put("_cvName", customer.getName());
//                            obj.put(entryChar + "_accountname", customer.getName());
//                        } else if (debitNote != null && debitNote.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = debitNote.getVendor();
//                            obj.put("_cvName", vendor.getName());
//                            obj.put(entryChar + "_accountname", vendor.getName());
//                        }
//                        obj.put("noteid", debitNote.getID());
//                        obj.put("type", Constants.DEBIT_NOTE);
//                        obj.put(entryChar + "_checkno", "");
//                        obj.put(entryChar + "_checkdate", "");
//                        obj.put(entryChar + "_description", "");
//                        obj.put("memoValue", debitNote.getMemo());
//                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
//                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                    }else if (transactionModuleID == Constants.Acc_Receive_Payment_ModuleId && entry.getTransactionId() != null) {
//                        String newString = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Receipt',key:'<br>$#$Memo$#$'}]},{seq:2,type:2,documentid:'AgainstGL',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptDetailOtherwise,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$, $#$CVName$#$ <br>$#$RDOtherwiseDescription$#$$#$CUSTOMDATA$#$'}]},{seq:3,type:3,documentid:'AdvancePayment',info:[{classname:'com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptAdvanceDetail,CUSTOMDATA',key:'<br>Advance Payment, $#$CVName$#$ <br>$#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:4,type:4,documentid:'AgainstInvoice',info:[{classname:'com.krawler.hql.accounting.Invoice,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptDetail,CUSTOMDATA',key:'<br>Invoice - $#$InvoiceNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'AgainstPurchaseInvoice',info:[{classname:'com.krawler.hql.accounting.GoodsReceipt,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptDetail,CUSTOMDATA',key:'<br>Purchase Invoice - $#$GoodsReceiptNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:6,type:6,documentid:'AgainstCNDN',info:[{classname:'com.krawler.hql.accounting.DebitNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.DebitNotePaymentDetails,CUSTOMDATA',key:'<br>Debit Note - $#$DebitNoteNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:7,type:7,info:[{classname:'com.krawler.hql.accounting.Cheque,com.krawler.hql.accounting.PaymentMethod',key:'<br>Cheque no. $#$ChequeNo$#$ dated $#$DueDate$#$, $#$MethodName$#$, $#$Description$#$'}]},{seq:8,type:8,info:[{classname:'com.krawler.hql.accounting.MasterItem',key:'<br>Received from : $#$Value$#$'}]}]";
//                        JSONArray descJsonArr = new JSONArray(newString);
//                        KwlReturnObject kwlReceipt = accountingHandlerDAOobj.getObject(Receipt.class.getName(), entry.getTransactionId());
//                        Receipt tempr = (Receipt) kwlReceipt.getEntityList().get(0);
//                        String cvName = "";
//                        if (tempr != null && tempr.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = tempr.getCustomer();
//                            cvName = customer.getName();
//                            obj.put("_cvName", customer.getName());
//                            obj.put(entryChar + "_accountname", customer.getName());
//                        } else if (tempr != null && !StringUtil.isNullOrEmpty(tempr.getVendor()) && (bankBook || ledgerReport)) {
//                            KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempr.getVendor());
//                            if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
//                                Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
//                                cvName = vendor.getName();
//                                obj.put("_cvName", vendor.getName());
//                                obj.put(entryChar + "_accountname", vendor.getName());
//                            }
//                        }
//                        obj.put(entryChar + "_transactionID", tempr.getReceiptNumber());
//                        obj.put(Constants.billid, tempr.getID());
//                        String transactionDetails = "", transactionDetailsForExpander = "";
//
//                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
//                        reqParDescConfig.put(Constants.companyKey, companyid);
//                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        reqParDescConfig.put("document", Constants.Acc_Receive_Payment_ModuleId);
//
//                        jeDetailReceiptTypeMap = new HashMap<String, Integer>();
//                        createJEDetailReceiptTypeMapNew(tempr, jeDetailReceiptTypeMap, companyid);
//                        Map<String, String> transDetMap = getTransactionDetailsForReceiptGL(tempr, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailReceiptTypeMap, bankBook, ledgerReport);
//                        transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
//                        transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
//
//                        if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
//                            obj.put(entryChar + "_transactionDetails", transactionDetails);
//                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment received from : " + cvName);
//                        } else {
//                            obj.put(entryChar + "_transactionDetails", transactionDetails);
//                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment received from : " + accountName);
//                        }
//                        obj.put("type", Constants.PAYMENT_RECEIVED);
//                        obj.put("payer", tempr.getReceivedFrom() != null ? tempr.getReceivedFrom().getValue() : "");
//                        obj.put("paymentstatus", "Uncleared");
//                        if (tempr.getPayDetail() != null) {
//                            KwlReturnObject clearanceDate = accBankReconciliationObj.getBRfromJE(tempr.getJournalEntry().getID(), tempr.getCompany().getCompanyID(), false);
//                            if (clearanceDate != null && clearanceDate.getEntityList() != null && clearanceDate.getEntityList().size() > 0) {
//                                BankReconciliationDetail brd = (BankReconciliationDetail) clearanceDate.getEntityList().get(0);
//                                if (brd.getBankReconciliation().getClearanceDate() != null) {
//                                    obj.put("clearancedate", df.format(brd.getBankReconciliation().getClearanceDate()));
//                                    obj.put("paymentstatus", "Cleared");
//                                }
//                            }
//                        }
//                        if (tempr.getPayDetail() != null && tempr.getPayDetail().getCheque() != null && !StringUtil.isNullOrEmpty(tempr.getPayDetail().getCheque().getChequeNo())) {
//                            obj.put(entryChar + "_checkno", tempr.getPayDetail().getCheque().getChequeNo());
//                            Date chequeDate = tempr.getPayDetail().getCheque().getDueDate();
//                            String chequeDateString = "";
//                            if (chequeDate != null) {
//                                chequeDateString = dateFormat.format(chequeDate);
//                            }
//                            obj.put(entryChar + "_checkdate", chequeDateString);
//                            obj.put(entryChar + "_description", tempr.getPayDetail().getCheque().getDescription() != null ? tempr.getPayDetail().getCheque().getDescription() : "");
//                            obj.put("memoValue", tempr.getMemo());
//                        } else {
//                            obj.put(entryChar + "_checkno", "");
//                            obj.put(entryChar + "_checkdate", "");
//                            obj.put(entryChar + "_description", "");
//                            obj.put("memoValue", tempr.getMemo());
//                        }
//                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                    } else if (transactionModuleID==Constants.Acc_Make_Payment_ModuleId && entry.getTransactionId() != null) {
//                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Payment',key:'<br>$#$Memo$#$'}]},{seq:2,type:2,documentid:'AgainstGL',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.PaymentDetailOtherwise,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$, $#$CVName$#$ <br>$#$PDOtherwiseDescription$#$$#$CUSTOMDATA$#$'}]},{seq:3,type:3,documentid:'AdvancePayment',info:[{classname:'com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.AdvanceDetail,CUSTOMDATA',key:'<br>Advance Payment, $#$CVName$#$<br>$#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:4,type:4,documentid:'AgainstInvoice',info:[{classname:'com.krawler.hql.accounting.Invoice,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.PaymentDetail,CUSTOMDATA',key:'<br>Invoice - $#$InvoiceNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'AgainstPurchaseInvoice',info:[{classname:'com.krawler.hql.accounting.GoodsReceipt,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.PaymentDetail,CUSTOMDATA',key:'<br>Purchase Invoice - $#$GoodsReceiptNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:6,type:6,documentid:'AgainstCNDN',info:[{classname:'com.krawler.hql.accounting.CreditNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.CreditNotePaymentDetails,CUSTOMDATA',key:'<br>Credit Note - $#$CreditNoteNumber$#$, $#$Name$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:7,type:7,info:[{classname:'com.krawler.hql.accounting.Cheque,com.krawler.hql.accounting.PaymentMethod',key:'<br>Cheque no. $#$ChequeNo$#$ dated $#$DueDate$#$, $#$MethodName$#$, $#$Description$#$'}]},{seq:8,type:8,info:[{classname:'com.krawler.hql.accounting.MasterItem',key:'<br>Paid to : $#$Value$#$'}]}]";
//                        JSONArray descJsonArr = new JSONArray(newString);
//                        
//                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
//                        reqParDescConfig.put(Constants.companyKey, companyid);
//                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        reqParDescConfig.put("document", Constants.Acc_Make_Payment_ModuleId);
//
//                        KwlReturnObject kwlPayment = accountingHandlerDAOobj.getObject(Payment.class.getName(), entry.getTransactionId());
//                        Payment tempp = (Payment) kwlPayment.getEntityList().get(0);
//                        String cvName = "";
//                        if (tempp != null && !StringUtil.isNullOrEmpty(tempp.getCustomer()) && (bankBook || ledgerReport)) {
//                            KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempp.getCustomer());
//                            if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
//                                Customer customer = (Customer) resultCustomer.getEntityList().get(0);
//                                cvName = customer.getName();
//                                obj.put(entryChar + "_accountname", customer.getName());
//                                obj.put("_cvName", customer.getName());
//                            }
//                        } else if (tempp != null && tempp.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = tempp.getVendor();
//                            cvName = vendor.getName();
//                            obj.put(entryChar + "_accountname", vendor.getName());
//                            obj.put("_cvName", vendor.getName());
//                        }
//
//                        obj.put(entryChar + "_transactionID", tempp.getPaymentNumber());
//                        obj.put(Constants.billid, tempp.getID());
//                        String transactionDetails = "", transactionDetailsForExpander="";
//                        jeDetailPaymentTypeMap = new HashMap<String, Integer>();
//                        createJEDetailPaymentTypeMapNew(tempp, jeDetailPaymentTypeMap, companyid);
//                        Map<String, String> transDetMap = getTransactionDetailsForPaymentGL(tempp, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailPaymentTypeMap, bankBook, ledgerReport);
//                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
//                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
//
//                        if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
//                            obj.put(entryChar + "_transactionDetails", transactionDetails);
//                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment made to : " + cvName);
//                        } else {
//                            obj.put(entryChar + "_transactionDetails", transactionDetails);
//                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment made to : " + accountName);
//                        }
//                        obj.put("type", Constants.PAYMENT_MADE);
//                        obj.put("payer", tempp.getPaidTo() != null ? tempp.getPaidTo().getValue() : "");
//                        if (!StringUtil.isNullOrEmpty(tempp.getPayee())) {
//                            obj.put("payee", tempp.getPayee());
//                        }
//                        obj.put("paymentstatus", "Uncleared");
//                        if (tempp.getPayDetail() != null) {
//                            KwlReturnObject clearanceDate = accBankReconciliationObj.getBRfromJE(tempp.getJournalEntry().getID(), tempp.getCompany().getCompanyID(), false);
//                            if (clearanceDate != null && clearanceDate.getEntityList() != null && clearanceDate.getEntityList().size() > 0) {
//                                BankReconciliationDetail brd = (BankReconciliationDetail) clearanceDate.getEntityList().get(0);
//                                if (brd.getBankReconciliation().getClearanceDate() != null) {
//                                    obj.put("clearancedate", df.format(brd.getBankReconciliation().getClearanceDate()));
//                                    obj.put("paymentstatus", "Cleared");
//                                }
//                            }
//                        }
//                        if (tempp.getPayDetail() != null && tempp.getPayDetail().getCheque() != null && !StringUtil.isNullOrEmpty(tempp.getPayDetail().getCheque().getChequeNo())) {
//                            obj.put(entryChar + "_checkno", tempp.getPayDetail().getCheque().getChequeNo());
//                            Date chequeDate = tempp.getPayDetail().getCheque().getDueDate();
//                            String chequeDateString = "";
//                            if (chequeDate != null) {
//                                chequeDateString = dateFormat.format(chequeDate);
//                            }
//                            obj.put(entryChar + "_checkdate", chequeDateString);
//                            obj.put(entryChar + "_description", tempp.getPayDetail().getCheque().getDescription() != null ? tempp.getPayDetail().getCheque().getDescription() : "");
//                            obj.put("memoValue", tempp.getMemo());
//                        } else {
//                            obj.put(entryChar + "_checkno", "");
//                            obj.put(entryChar + "_checkdate", "");
//                            obj.put(entryChar + "_description", "");
//                            obj.put("memoValue", tempp.getMemo());
//                        }
//                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                    } else if (transactionModuleID==Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId && entry.getTransactionId() != null) {
//                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Fixed Asset Acquired Invoice - $#$GoodsReceiptNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Cash Purchase - $#$GoodsReceiptNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Vendor',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'AssetDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.GoodsReceiptDetail,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$PIDetailDescription$#$$#$CUSTOMDATA$#$'}]}]";          
//                        JSONArray descJsonArr = new JSONArray(newString);
//                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), entry.getTransactionId());
//                        GoodsReceipt goodsReceipt = (GoodsReceipt) KwlgoodsReceipt.getEntityList().get(0);
//                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
//                        reqParDescConfig.put(Constants.companyKey, companyid);
//                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        reqParDescConfig.put("document", Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId);
//
//                        boolean isDescConfig=true;
//                        String transactionDetails = "";
//                        String transactionDetailsForExpander = "";
//                        if (accountid.equals(cashAccount)) {
//                            obj.put(entryChar + "_transactionID", goodsReceipt.getGoodsReceiptNumber());
//                            obj.put(Constants.billid,goodsReceipt.getID());
//                            obj.put("type", Constants.CASH_PURCHASE);
//                        } else {
//                            obj.put(entryChar + "_transactionID", goodsReceipt.getGoodsReceiptNumber());
//                            obj.put(Constants.billid, goodsReceipt.getID());
//                            obj.put("type", Constants.ACQUIRED_INVOICE);
//                        }
//                        
//                        Map<String, String> transDetMap = getTransactionDetailsForFixedAssetPurchaseInvoiceForGL(goodsReceipt, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
//                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
//                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
//                        obj.put(entryChar + "_transactionDetails", transactionDetails);
//                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//                        
//                        if (goodsReceipt != null && goodsReceipt.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = goodsReceipt.getVendor();
//                            obj.put("_cvName", vendor.getName());
//                            obj.put(entryChar + "_accountname", vendor.getName());
//                        }
//                        obj.put(entryChar + "_checkno", "");
//                        obj.put(entryChar + "_checkdate", "");
//                        obj.put(entryChar + "_description", "");
//                        obj.put("memoValue", goodsReceipt.getMemo());
//                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
//                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                    } else if (transactionModuleID==Constants.Acc_FixedAssets_DisposalInvoice_ModuleId && entry.getTransactionId() != null) {
//                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Fixed Asset Disposal Invoice - $#$InvoiceNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Cash Sale - $#$InvoiceNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Customer',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'AssetDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.InvoiceDetail,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$InvDetailDescription$#$$#$CUSTOMDATA$#$'}]}]";          
//                        JSONArray descJsonArr = new JSONArray(newString);
//                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), entry.getTransactionId());
//                        Invoice invoice = (Invoice) KwlInvoice.getEntityList().get(0);
//                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
//                        reqParDescConfig.put(Constants.companyKey, companyid);
//                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        reqParDescConfig.put("document", Constants.Acc_FixedAssets_DisposalInvoice_ModuleId);
//
//                        boolean isDescConfig=true;
//                        String transactionDetails = "";
//                        String transactionDetailsForExpander = "";
//                        if (accountid.equals(cashAccount)) {
//                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
//                            obj.put(Constants.billid,invoice.getID());
//                            obj.put("type", Constants.CASH_SALE);
//                        } else {
//                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
//                            obj.put(Constants.billid, invoice.getID());
//                            obj.put("type", Constants.DISPOSAL_INVOICE);
//                        }
//                        
//                        Map<String, String> transDetMap = getTransactionDetailsForFixedAssetInvoiceForGL(invoice, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
//                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
//                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
//                        obj.put(entryChar + "_transactionDetails", transactionDetails);
//                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//                        
//                        if (invoice != null && invoice.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = invoice.getCustomer();
//
//                            obj.put("_cvName", customer.getName());
//                            obj.put(entryChar + "_accountname", customer.getName());
//                        }
//                        obj.put(entryChar + "_checkno", "");
//                        obj.put(entryChar + "_checkdate", "");
//                        obj.put(entryChar + "_description", "");
//                        obj.put("memoValue",invoice.getMemo());
//                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
//                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                    }else if (transactionModuleID==Constants.LEASE_INVOICE_MODULEID && entry.getTransactionId() != null) {
//                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Lease Invoice - $#$InvoiceNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Cash Sale - $#$InvoiceNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Customer',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'AssetDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.InvoiceDetail,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$InvDetailDescription$#$$#$CUSTOMDATA$#$'}]}]";          
//                        JSONArray descJsonArr = new JSONArray(newString);
//                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), entry.getTransactionId());
//                        Invoice invoice = (Invoice) KwlInvoice.getEntityList().get(0);
//                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
//                        reqParDescConfig.put(Constants.companyKey, companyid);
//                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        reqParDescConfig.put("document", Constants.LEASE_INVOICE_MODULEID);
//
//                        boolean isDescConfig=true;
//                        String transactionDetails = "";
//                        String transactionDetailsForExpander = "";
//                        if (accountid.equals(cashAccount)) {
//                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
//                            obj.put(Constants.billid, invoice.getID());
//                            obj.put("type", Constants.CASH_SALE);
//                        } else {
//                            obj.put(entryChar + "_transactionID",invoice.getInvoiceNumber());
//                            obj.put(Constants.billid, invoice.getID());
//                            obj.put("type", Constants.LEASE_INVOICE);
//                        }
//                        
//                        Map<String, String> transDetMap = getTransactionDetailsForFixedAssetInvoiceForGL(invoice, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
//                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
//                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
//                        obj.put(entryChar + "_transactionDetails", transactionDetails);
//                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//                        
//                        if (invoice != null && invoice.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = invoice.getCustomer();
//                            obj.put("_cvName", customer.getName());
//                            obj.put(entryChar + "_accountname", customer.getName());
//                        }
//                        obj.put(entryChar + "_checkno", "");
//                        obj.put(entryChar + "_checkdate", "");
//                        obj.put(entryChar + "_description", "");
//                        obj.put("memoValue", invoice.getMemo());
//                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
//                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                    } else {
//                        String transactionDetails = "";
//                        String transactionDetailsForExpander = "";
//                        
//                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Journal Entry'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'JEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";          
//                        JSONArray descJsonArr = new JSONArray(newString);
//                        
//                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
//                        reqParDescConfig.put(Constants.companyKey, companyid);
//                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        reqParDescConfig.put("document", Constants.Acc_GENERAL_LEDGER_ModuleId);
//
//                        boolean isDescConfig=true;
//                        Map<String, String> transDetMap = getTransactionDetailsForJournalEntry(entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
//                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
//                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
//                        obj.put(entryChar + "_transactionDetails", transactionDetails);
//                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
//                        obj.put(entryChar + "_transactionID", entry.getEntryNumber());
//                        obj.put(entryChar + "_checkno", "");
//                        obj.put(entryChar + "_checkdate", "");
//                        if(entry.getTypeValue()==3 && !StringUtil.isNullOrEmpty(entry.getMemo())){// ADD MEMO FOR FUND TRANSFER JE REF SDP-2051
//                              obj.put(entryChar + "_transactionDetailsBankBook", entry.getMemo());
//                        }else{
//                             obj.put(entryChar + "_transactionDetailsBankBook", "");
//                        }
//                        obj.put(entryChar + "_transactionDetailsBankBook", (entry.getTypeValue()!=3)?"":((StringUtil.isNullOrEmpty(entry.getMemo()))?"":entry.getMemo()));
//                        obj.put("memoValue", (entry.getTypeValue() != 0 && !StringUtil.isNullOrEmpty(entry.getMemo())) ? entry.getMemo() : "");
//                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                    }
//                    }
//                    obj.put("transactionCurrency", (jed.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : jed.getJournalEntry().getCurrency().getCurrencyID()));
//                    obj.put("transactionSymbol", (jed.getJournalEntry().getCurrency() == null ? currency.getCurrencyCode() : jed.getJournalEntry().getCurrency().getCurrencyCode())); //transaction currency code
//                    obj.put("transactionCurrencySymbol", (jed.getJournalEntry().getCurrency() == null ? currency.getSymbol() : jed.getJournalEntry().getCurrency().getSymbol()));//transaction currency symbol
//                    obj.put("transactionAmount", transactionAmount);
//                    obj.put("transactionDateString", transactionDateString);
//                    obj.put(entryChar + "_amount", amountBaseCurrency);   //Amount in base currency
//                    obj.put(entryChar + "_transactionAmount", transactionAmount);   //Amount in document currency
//                    if ((bankBook || ledgerReport) && jed.getJournalEntry().getIsReval() > 1) {
//                        obj.put(entryChar + "_amountAccountCurrency", "");
//                    } else {
//                        obj.put(entryChar + "_amountAccountCurrency", amountAccountCurrency);   //Amount in account currency
//                    }
//                    obj.put(emptyChar + "_date", "");
//                    obj.put(emptyChar + "_accountname", "");
//                    obj.put(emptyChar + "_acccode", "");
//                    obj.put(emptyChar + "_entryno", "");
//                    obj.put(emptyChar + "_journalentryid", "");
//                    obj.put(emptyChar + "_amount", "");
//                    obj.put(emptyChar + "_amountAccountCurrency", "");
//                    obj.put(emptyChar + "_transactionAmount", "");
//                    obj.put(emptyChar + "_transactionID", "");
//                    obj.put(emptyChar + "_transactionDetails", "");
//                    obj.put(emptyChar + "_transactionDetailsForExpander", "");      
//                    obj.put(emptyChar + "_checkno", "");
//                    obj.put(emptyChar + "_transactionDetailsBankBook", "");
//                    obj.put("currencysymbol", (jed.getAccount().getCurrency() == null ? currency.getSymbol() : jed.getAccount().getCurrency().getSymbol()));//Account currency syambol
//                    obj.put("currencycode", (jed.getAccount().getCurrency() == null ? jed.getAccount().getCurrency().getCurrencyCode() : jed.getAccount().getCurrency().getCurrencyCode()));//Account currency code
//                    obj.put("accountid", accountid);
//                    String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
//                    obj.put("accountname", accountname);
//
//                    String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
//                    obj.put("accCode", acccode);
//
//                    obj.put(Constants.currencyKey, jed.getAccount().getCurrency().getCurrencyID());
//
//                    // this is for displaying on the group header
//                    if (!acccode.equals("") && account.getName().equals("")) {
//                        obj.put("accCodeName", acccode);
//                    } else if (!acccode.equals("") && !account.getName().equals("")) {
//                        obj.put("accCodeName", acccode + " - " + account.getName());
//                    } else {
//                        obj.put("accCodeName", accountname);
//                    }
//
//                    if (entryChar.equals("d")) {
//                        balanceAmount = balanceAmount + amountBaseCurrency;
//                        obj.put("balanceAmount", authHandler.round(balanceAmount, 2));
//                        balanceAmountAccountCurrency = balanceAmountAccountCurrency + amountAccountCurrency;
//                        obj.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, 2));
//                    } else if (entryChar.equals("c")) {
//                        balanceAmount = balanceAmount - amountBaseCurrency;
//                        obj.put("balanceAmount", authHandler.round(balanceAmount, 2));
//                        balanceAmountAccountCurrency = balanceAmountAccountCurrency - amountAccountCurrency;
//                        obj.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, 2));
//                    }
//                    jArr.put(obj);
//                    if (requestJobj.optString("filetype") != null) {
//                        if (requestJobj.optString("filetype").equals("print") || requestJobj.optString("filetype").equals("csv")) {
//                            if (emptyChar == "d") {
//                                total = total + amountBaseCurrency;
//                                totalAccountCurrency = totalAccountCurrency + amountAccountCurrency;
//                            }
//                        }
//                    }
//                    Calendar c7 = Calendar.getInstance();
//                System.out.println("time taken in NON invoice loop -> "+(c7.getTimeInMillis()-c6.getTimeInMillis())/1000);
//                }
//                Calendar c5 = Calendar.getInstance();
//                System.out.println("time taken in total loop -> "+(c5.getTimeInMillis()-c4.getTimeInMillis())/1000);
//                executeSQLUpdate(deleteQuery);
//
//                double tempTotalAmount = balance;
//                double tempTotalAmountAccountCurrency = balanceAccountCurrency;
//                
//                if (tempTotalAmount != 0 && !ledgerReportFlag && !generalLedgerFlag) {
//                    if (tempTotalAmount > 0) {
//                        entryChar = "d";
//                        emptyChar = "c";
//                    } else {
//                        entryChar = "c";
//                        emptyChar = "d";
//                    }
//                    JSONObject objlast = new JSONObject();
//                    objlast.put(entryChar + "_date", formatter.format(endDate));  //Used GlobalDateFormat to avoid change in time as per time zone. ERP-8482
//                    objlast.put(entryChar + "_accountname", "Period Balance");
//                    objlast.put(entryChar + "_acccode", "");
//                    objlast.put(entryChar + "_journalentryid", "");
//                    objlast.put(entryChar + "_amount", (Double) Math.abs(tempTotalAmount));
//                    objlast.put(entryChar + "_amountAccountCurrency", Math.abs(tempTotalAmountAccountCurrency));
//                    objlast.put(entryChar + "_transactionAmount","");
//                    objlast.put(entryChar + "_transactionID", "");
//                    objlast.put(entryChar + "_transactionDetails", "");
//                    objlast.put(entryChar + "_transactionDetailsForExpander", "");
//                    objlast.put(entryChar + "_checkno", "");
//                    objlast.put(entryChar + "_description", "");
//                    objlast.put(entryChar + "_transactionDetailsBankBook", "");
//                    objlast.put(emptyChar + "_amountAccountCurrency", "");
//                    objlast.put(emptyChar + "_transactionAmount", "");
//                    objlast.put(emptyChar + "_date", "");
//                    objlast.put(emptyChar + "_accountname", "");
//                    objlast.put(emptyChar + "_journalentryid", "");
//                    objlast.put(emptyChar + "_amount", "");
//                    objlast.put(emptyChar + "_transactionID", "");
//                    objlast.put(emptyChar + "_transactionDetails", "");
//                    objlast.put(emptyChar + "_transactionDetailsForExpander", "");
//                    objlast.put(emptyChar + "_checkno", "");
//                    objlast.put(emptyChar + "_description", "");
//                    objlast.put(emptyChar + "_transactionDetailsBankBook", "");
//                    objlast.put("accountid", accountid);
//                    String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
//                    objlast.put("accountname", accountname);
//                    objlast.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
//                    objlast.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
//                    String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
//                    objlast.put("accCode", acccode);
//                    objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());
//
//                    // this is for displaying on the group header
//                    if (!acccode.equals("") && account.getName().equals("")) {
//                        objlast.put("accCodeName", acccode);
//                    } else if (!acccode.equals("") && !account.getName().equals("")) {
//                        objlast.put("accCodeName", acccode + " - " + account.getName());
//                    } else {
//                        objlast.put("accCodeName", accountname);
//                    }
//                    objlast.put("balanceAmount", "");
//                    objlast.put("balanceAmountAccountCurrency", "");
//
//                    jArr.put(objlast);
//
//                }
//                if(!ledgerReportFlag && !generalLedgerFlag && balance ==0){
//                    balance=balance+openingBalance;
//                    balanceAccountCurrency=balanceAccountCurrency+openingBalanceAccountCurrency;
//                }
//                    if (balance > 0) {
//                        entryChar = "c";
//                        emptyChar = "d";
//                    } else {
//                        entryChar = "d";
//                        emptyChar = "c";
//                    }
//                    String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
//                    String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
//                    if (tempTotalAmount != 0) {
//                    JSONObject objlast = new JSONObject();
//                    objlast.put(entryChar + "_date", formatter.format(endDate));  //Used GlobalDateFormat to avoid change in time as per time zone. ERP-8482
//                    objlast.put(entryChar + "_accountname", "Balance c/f");
//                    objlast.put(entryChar + "_acccode", "");
//                    objlast.put(entryChar + "_journalentryid", "");
//                    objlast.put(entryChar + "_amount", (Double) Math.abs(balance));
//                    objlast.put(entryChar + "_transactionID", "");
//                    objlast.put(entryChar + "_transactionDetails", "");
//                    objlast.put(entryChar + "_transactionDetailsForExpander", "");
//                    objlast.put(entryChar + "_checkno", "");
//                    objlast.put(entryChar + "_description", "");
//                    objlast.put(entryChar + "_transactionDetailsBankBook", "");
//                    objlast.put(entryChar + "_amountAccountCurrency", "");
//                    objlast.put(emptyChar + "_amountAccountCurrency", "");
//                    objlast.put(entryChar + "_transactionAmount", "");
//                    objlast.put(emptyChar + "_transactionAmount", "");
//                    objlast.put(emptyChar + "_date", "");
//                    objlast.put(emptyChar + "_accountname", "");
//                    objlast.put(emptyChar + "_journalentryid", "");
//                    objlast.put(emptyChar + "_amount", "");
//                    objlast.put(emptyChar + "_transactionID", "");
//                    objlast.put(emptyChar + "_transactionDetails", "");
//                    objlast.put(emptyChar + "_transactionDetailsForExpander", "");
//                    objlast.put(emptyChar + "_checkno", "");
//                    objlast.put(emptyChar + "_description", "");
//                    objlast.put(emptyChar + "_transactionDetailsBankBook", "");
//                    objlast.put("accountid", accountid);
//                    objlast.put("accountname", accountname);
//                    objlast.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
//                    objlast.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
//                    objlast.put("accCode", acccode);
//                    objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());
//
//                    // this is for displaying on the group header
//                    if (!acccode.equals("") && account.getName().equals("")) {
//                        objlast.put("accCodeName", acccode);
//                    } else if (!acccode.equals("") && !account.getName().equals("")) {
//                        objlast.put("accCodeName", acccode + " - " + account.getName());
//                    } else {
//                        objlast.put("accCodeName", accountname);
//                    }
//
//                    objlast.put("balanceAmount", authHandler.round(balanceAmount, 2));                               //ERP-8775 & 8786
//                    objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, 2)); //ERP-8775 & 8786
//                    jArr.put(objlast);
//                }
//
//                    if (!bankBook && ledgerReportFlag) {
//                        JSONObject netbBalanceObj = addNetBalanceJson(requestJobj, account, balance, currency);
//                        jArr.put(netbBalanceObj);
//                    }
//                    
//                    if (!bankBook && generalLedgerFlag) {
//                    if (requestJobj.optString("filetype") != null) {
//                        if (requestJobj.optString("filetype").equals("print") || requestJobj.optString("filetype").equals("csv")) {
//                            if (emptyChar == "d") {
//                                total = total + Math.abs(balance);
//                                totalAccountCurrency = totalAccountCurrency + Math.abs(balanceAccountCurrency);
//                            }
//                            JSONObject total1 = new JSONObject();
//                            total1.put(entryChar + "_date", requestJobj.optString("enddate"));
//                            total1.put(entryChar + "_accountname", "Total");
//                            total1.put(entryChar + "_journalentryid", "");
//                            total1.put(entryChar + "_amount", total);
//                            total1.put(entryChar + "_transactionDetails", "");
//                            total1.put(entryChar + "_transactionDetailsForExpander", "");
//                            total1.put(entryChar + "_transactionID", "");
//                            total1.put(entryChar + "_transactionDetailsBankBook", "");
//                            total1.put(entryChar + "_description", "");
//                            total1.put(emptyChar + "_date", requestJobj.optString("enddate"));
//                            total1.put(emptyChar + "_accountname", "Total");
//                            total1.put(emptyChar + "_acccode", "");
//                            total1.put(emptyChar + "_journalentryid", "");
//                            total1.put(emptyChar + "_amount", total);
//                            total1.put(emptyChar + "_transactionID", "");
//                            total1.put(emptyChar + "_transactionDetails", "");
//                            total1.put(emptyChar + "_transactionDetailsForExpander", "");
//                            total1.put(emptyChar + "_transactionDetailsBankBook", "");
//                            total1.put(entryChar + "_description", "");
//                            total1.put("accountid", accountid);
//                            total1.put("isTotal", true);
//
//                            // to separate account code & names into 2 different columns
//                            accountname = StringUtil.isNullOrEmpty(account.getName()) ? "" : account.getName();
//                            total1.put("accountname", account.getName());
//                            total1.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
//                            total1.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
//                            total1.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());
//
//                            acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
//                            total1.put("accCode", acccode);
//
//                            // this is for displaying on the group header
//                            if (!acccode.equals("") && account.getName().equals("")) {
//                                total1.put("accCodeName", acccode);
//                            } else if (!acccode.equals("") && !account.getName().equals("")) {
//                                total1.put("accCodeName", acccode + " - " + account.getName());
//                            } else {
//                                total1.put("accCodeName", accountname);
//                            }
//
//                            jArr.put(total1);
//                        }
//                    }
//                }
//            }
//                jobj.put(Constants.RES_data, jArr);
//
//        } catch (ParseException ex) {
//            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
//            throw ServiceException.FAILURE("getLedger : " + ex.getMessage(), ex);
//        } catch (UnsupportedEncodingException ex) {
//            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
//            throw ServiceException.FAILURE("getLedger : " + ex.getMessage(), ex);
//        } catch (JSONException ex) {
//            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
//            throw ServiceException.FAILURE("getLedger : " + ex.getMessage(), ex);
//        }  catch (Exception ex) {
//            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
//            throw ServiceException.FAILURE("getLedger : " + ex.getMessage(), ex);
//        }
//     
//        return jobj;
//    }

 @Override
    public double getTotalAccountBalance(Account account, double totalAccountBalance, JSONObject paramJobj) throws ServiceException, ParseException, JSONException {
        try {
            List list = new ArrayList(account.getChildren());
            Iterator itr = list.iterator();
            Date stDate = null;
            Date endDate = null;
            if(!StringUtil.isNullOrEmpty(paramJobj.optString("stdate")) && !StringUtil.isNullOrEmpty(paramJobj.optString("enddate"))){
                stDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString("stdate"));
                endDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString("enddate"));
            } else {
                stDate = new Date(0);
                endDate = new Date();
            }
            while (itr.hasNext()) {
                Account subAccount = (Account) itr.next();
                double balance = 0;
                if (!subAccount.isDeleted()) {
                    balance = getAccountBalance(paramJobj, subAccount.getID(), stDate, endDate,null);
                }
                totalAccountBalance = totalAccountBalance + balance;
                if (subAccount.getChildren().isEmpty()) {
                    continue;
                }
                //Recursive function to get child accounts
                totalAccountBalance = getTotalAccountBalance(subAccount, totalAccountBalance, paramJobj);
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return totalAccountBalance;
    }
 
    public JSONObject addNetBalanceJson(HttpServletRequest request, Account account, double balance, KWLCurrency currency) {
        JSONObject netbBalanceObj = new JSONObject();
        try {
            JSONObject requestJobj = StringUtil.convertRequestToJsonObject(request);
            netbBalanceObj = addNetBalanceJson(requestJobj,account,balance,currency);
        } catch (JSONException | SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return netbBalanceObj;
    }

    public JSONObject addNetBalanceJson(JSONObject requestJobj, Account account, double balance, KWLCurrency currency) {
        JSONObject netbBalanceObj = new JSONObject();
        try {
            Date endDate = authHandler.getDateOnlyFormat().parse(requestJobj.optString("enddate"));
            String date = authHandler.getDateOnlyFormat().format(endDate);  //Converted into String for Export to Excel in T-Ledger
            String accountid = StringUtil.isNullOrEmpty(account.getID()) ? "" : account.getID();
            String accountname = StringUtil.isNullOrEmpty(account.getName()) ? "" : account.getName();
            String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
            String entryChar = "", emptyChar = "";
            if (balance > 0) {
                entryChar = "d";
                emptyChar = "c";
            } else {
                entryChar = "c";
                emptyChar = "d";
            }
            netbBalanceObj.put("isnetbalance", true);
            netbBalanceObj.put("netbalance", balance);
            netbBalanceObj.put(entryChar + "_date", date);
            netbBalanceObj.put(entryChar + "_accountname", accountname);
            netbBalanceObj.put(entryChar + "_acccode",acccode);
            netbBalanceObj.put(entryChar + "_journalentryid", "");
            netbBalanceObj.put(entryChar + "_amount", "");
            netbBalanceObj.put(entryChar + "_transactionID", "");
            netbBalanceObj.put(entryChar + "_transactionDetails", "");
            netbBalanceObj.put(entryChar + "_transactionDetailsForExpander", "");            
            netbBalanceObj.put(entryChar + "_checkno", "");
            netbBalanceObj.put(entryChar + "_description", "");
            netbBalanceObj.put(entryChar + "_transactionDetailsBankBook", "");
            netbBalanceObj.put(entryChar + "_amountAccountCurrency", "");
            netbBalanceObj.put(emptyChar + "_amountAccountCurrency", "");
            netbBalanceObj.put(emptyChar + "_date", "");
            netbBalanceObj.put(emptyChar + "_acccode",acccode);
            netbBalanceObj.put(emptyChar + "_isnetbalance", "");
            netbBalanceObj.put(emptyChar + "_netbalance", "");
            netbBalanceObj.put(emptyChar + "_accountname", accountname);
            netbBalanceObj.put(emptyChar + "_journalentryid", "");
            netbBalanceObj.put(emptyChar + "_amount", "");
            netbBalanceObj.put(emptyChar + "_transactionID", "");
            netbBalanceObj.put(emptyChar + "_transactionDetails", "");
            netbBalanceObj.put(emptyChar + "_transactionDetailsForExpander", "");  
            netbBalanceObj.put(emptyChar + "_checkno", "");
            netbBalanceObj.put(emptyChar + "_description", "");
            netbBalanceObj.put(emptyChar + "_transactionDetailsBankBook", "");
            netbBalanceObj.put("accountid", accountid);
            netbBalanceObj.put("accountname", accountname);
            netbBalanceObj.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
            netbBalanceObj.put("accCode", acccode);
            netbBalanceObj.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());
            if (!acccode.equals("") && account.getName().equals("")) {
                netbBalanceObj.put("accCodeName", acccode);
            } else if (!acccode.equals("") && !account.getName().equals("")) {
                netbBalanceObj.put("accCodeName", acccode + " - " + account.getName());
            } else {
                netbBalanceObj.put("accCodeName", accountname);
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return netbBalanceObj;
    }

    public JSONObject addAccountGroupJson(Account account) {
        JSONObject obj = new JSONObject();
        try {
            String accountid = StringUtil.isNullOrEmpty(account.getID()) ? "" : account.getID();
            String accountname = StringUtil.isNullOrEmpty(account.getName()) ? "" : account.getName();
            String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
            obj.put("accCode", acccode);
            // this is for displaying on the group header
            if (!acccode.equals("") && account.getName().equals("")) {
                obj.put("d_date", acccode);
            } else if (!acccode.equals("") && !account.getName().equals("")) {
                obj.put("d_date", acccode + " - " + account.getName());
            } else {
                obj.put("d_date", accountname);
            }
            obj.put("isgroupname", true);
            obj.put("d_accountname", "");
            obj.put("d_acccode", "");
            obj.put("d_journalentryid", "");
            obj.put("d_amountAccountCurrency", "");
            obj.put("d_transactionID", "");
            obj.put("d_transactionDetails", "");
            obj.put("d_transactionDetailsBankBook", "");
            obj.put("d_checkno", "");
            obj.put("d_description", "");
            obj.put("d_amount", "");
            obj.put("c_date", "");
            obj.put("c_accountname", "");
            obj.put("c_journalentryid", "");
            obj.put("c_amount", "");
            obj.put("c_transactionID", "");
            obj.put("c_transactionDetails", "");
            obj.put("c_transactionDetailsBankBook", "");
            obj.put("c_checkno", "");
            obj.put("c_description", "");
            obj.put("accountid", accountid);

        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return obj;
    }

    public List getChildAccounts(List ll, Account account) {
        Iterator<Account> itr = account.getChildren().iterator();
        while (itr.hasNext()) {
            Account child = itr.next();
            ll.add(child);
            ll = getChildAccounts(ll, child);
        }
        return ll;
    }
    
    public double getAccountBalanceInOriginalCurrency(HttpServletRequest request, String accountid, Date startDate, Date endDate) throws ServiceException, SessionExpiredException {
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put("costcenter", request.getParameter("costcenter"));
        requestParams.put("tocurrencyid", request.getParameter("tocurrencyid"));
        requestParams.put(Constants.Acc_Search_Json, request.getParameter(Constants.Acc_Search_Json));
        requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
        requestParams.put("templatecode", (StringUtil.isNullOrEmpty(request.getParameter("templatecode"))) ? -1 : Integer.parseInt(request.getParameter("templatecode")));
        String selectedCurrencyIds = request.getParameter("currencyIds");
        if (!StringUtil.isNullOrEmpty(selectedCurrencyIds)) {
            requestParams.put("currencyFlag", true);
            requestParams.put("selectedCurrencyIds", selectedCurrencyIds);
        }
        return getAccountBalanceInOriginalCurrency(request, requestParams, accountid, startDate, endDate);
    }
    
    public double getAccountBalanceInOriginalCurrency(HttpServletRequest request, HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate) throws ServiceException {
        double amount = 0;
        try {
            JSONObject requestJobj = StringUtil.convertRequestToJsonObject(request);
            amount = getAccountBalanceInOriginalCurrency(requestJobj, requestParams, accountid, startDate, endDate);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalance : " + ex.getMessage(), ex);
        }
        return amount;
    }

   public double getAccountBalanceInOriginalCurrency(JSONObject requestJobj, HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate) throws ServiceException {
        double amount = 0;
        String companyid = "";
        try {
            String gcurrencyid = (String) requestParams.get(Constants.globalCurrencyKey);

            KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountid);
            Account account = (Account) accresult.getEntityList().get(0);

            companyid = requestJobj.optString("companyid");
            int templatecode = (Integer) requestParams.get("templatecode");
            String tocurrencyid = requestParams.containsKey("tocurrencyid") && requestParams.get("tocurrencyid") != null ? (String) requestParams.get("tocurrencyid") : account.getCurrency().getCurrencyID();
            boolean convertOBFlag = requestParams.containsKey("tocurrencyid") && requestParams.get("tocurrencyid") != null ? true : false;//No need to convert opening balance in case of tocurrencyid = acc currency as opening balance value enetered is in account currnecy only

            String costCenterId = requestParams.containsKey("costcenter") && requestParams.get("costcenter") != null ? (String) requestParams.get("costcenter") : "";
            if ((templatecode == -1) || (account.getTemplatepermcode() != null && account.getTemplatepermcode() != 0 && ((templatecode & account.getTemplatepermcode()) == templatecode))) {
                if (StringUtil.isNullOrEmpty(costCenterId)) { //Don't consider opening balance for CostCenter
                    if (startDate != null && ((startDate.before(account.getCreationDate()) || startDate.equals(account.getCreationDate())) && endDate.after(account.getCreationDate()) || endDate.equals(account.getCreationDate()))) {
                        double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccountJson(requestJobj, account, false, null);
                        amount = accountOpeningBalanceInBase;//account.getOpeningBalance();
                        KwlReturnObject cresult = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, amount, account.getCurrency().getCurrencyID(), account.getCreationDate(), 0);
                        amount = authHandler.round((Double) cresult.getEntityList().get(0), companyid);
                        if (convertOBFlag) {
                            String fromcurrencyid = account.getCurrency().getCurrencyID();
                            KwlReturnObject crresult = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, amount, fromcurrencyid, tocurrencyid, account.getCreationDate(), 0);
                            amount = authHandler.round((Double) crresult.getEntityList().get(0), companyid);
                        }
                    }

                }
            }
            String Searchjson = "";

            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey(InvoiceConstants.Filter_Criteria) && requestParams.get(InvoiceConstants.Filter_Criteria) != null) {
                if (requestParams.get(InvoiceConstants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                Searchjson = requestParams.get(Constants.Acc_Search_Json).toString();
            }

            KwlReturnObject abresult = accJournalEntryobj.getAccountBalance(requestParams, accountid, startDate, endDate, costCenterId, filterConjuctionCriteria, Searchjson);
            List list = abresult.getEntityList();
            Iterator itr = list.iterator();
            String accountCurrency=account.getCurrency().getCurrencyID();    //Account Currency
                
            while (itr.hasNext()) {
                Object[] row = (Object[]) itr.next();
                JournalEntryDetail jed = (JournalEntryDetail) row[1];
                double amountConverted = 0.0d;
                if ((templatecode == -1) || (jed.getJournalEntry().getTemplatepermcode() != null && jed.getJournalEntry().getTemplatepermcode() != 0 && ((templatecode & jed.getJournalEntry().getTemplatepermcode()) == templatecode))) {
                    if (jed.getJournalEntry().getIsReval() <= 0) {
                        String fromcurrencyid = (jed.getJournalEntry().getCurrency() == null ? gcurrencyid : jed.getJournalEntry().getCurrency().getCurrencyID());
                        if(jed.isDebit()){
                            amountConverted = jed.getAmountinbase();
                        }else{
                            amountConverted = -(jed.getAmountinbase());
                        }
                        KwlReturnObject crresult = null;//if Same currency then use - getOneCurrencyToOther()
                        if(!accountCurrency.equals(gcurrencyid))
                        {                            
                            crresult = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, ((Double) row[0]).doubleValue(), fromcurrencyid, tocurrencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                            amountConverted = (Double)crresult.getEntityList().get(0);
                        }
                        if(!StringUtil.isNullOrEmpty(fromcurrencyid) && jed != null && jed.getAccount() != null && jed.getAccount().getCurrency() != null && fromcurrencyid.equals(jed.getAccount().getCurrency().getCurrencyID())) {
                            amount += authHandler.round(((Double) row[0]).doubleValue(),companyid); // if transactionCurrencyID=accountCurrencyID, then don't convert the amount
                        } else if(!fromcurrencyid.equals(accountCurrency) && !(jed.getJournalEntry().getTypeValue() == Constants.FundTransfer_Journal_Entry)){
                            /*
                             * If acccount currency and transaction currency is
                             * different then convert amount from transaction
                             * curreny to account currency.
                             * refer SDP-15639
                             */
                            KwlReturnObject bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, ((Double) row[0]).doubleValue(), fromcurrencyid, accountCurrency, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                            amount += authHandler.round((Double) bAmt.getEntityList().get(0),companyid);    // SDP-16242 ERP-41665
                        }else if ((jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate() != 1) || ((jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate() == 1) && jed.getJournalEntry().isIsmulticurrencypaymentje())) {    // If this JE is for that payment, which is having payment currency and payment method currency different.                         
                            double baseCurrencyToPaymentMethodCurrencyConvertedAmount = ((Double) row[0]).doubleValue() * jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate();                      
                            amount += authHandler.round(baseCurrencyToPaymentMethodCurrencyConvertedAmount, companyid);
                        }else if(jed.getJournalEntry().getTypeValue() == Constants.FundTransfer_Journal_Entry && jed.getExchangeRateForTransaction() !=0 && jed.getExchangeRateForTransaction()!= -1){
                            amount += authHandler.round(jed.getAmount()/jed.getExchangeRateForTransaction(), companyid);
                        }else{
                            amount += authHandler.round(amountConverted, companyid);
                        }
                    }
                }
            }
            if (itr.hasNext()) {
                amount += authHandler.round(((Double) itr.next()).doubleValue(), companyid);
            }
//            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalance : " + ex.getMessage(), ex);
        }
        return authHandler.round(amount, companyid);
    }
    
  @Override
    public void exportBankBook(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = true;
        String msg = "";
        String view = "";
        ArrayList<BankBook> bankBoookList = new ArrayList<BankBook>();
        Map<String, Object> financeDetailsMap = new HashMap<String, Object>();
        try {
            String jrxmlPath = !StringUtil.isNullOrEmpty(request.getSession().getServletContext().getRealPath("jrxml")) ? request.getSession().getServletContext().getRealPath("jrxml") : ""; 
            int templateflag = StringUtil.isNullOrEmpty(request.getParameter("templateflag")) ? 0 : Integer.parseInt(request.getParameter("templateflag"));
            Boolean isBankBook = Boolean.parseBoolean((String) request.getParameter("isBankBook"));
            
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            KwlReturnObject compAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compAccPrefResult.getEntityList().get(0);
            financeDetailsMap.put("CompanyName", company.getCompanyName());
            financeDetailsMap.put("CompanyAdd", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));

            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            DateFormat ed = new SimpleDateFormat("MMM dd, yyyy HH:mm:ss a");
            String endDate1 = df.format(ed.parse(request.getParameter("enddate")));
            String startDate1 = df.format(authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
            String date1 = " " + startDate1 + " to " + endDate1;
            financeDetailsMap.put("BankBookDateRange", date1);

            String fiscalstart = df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(df.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            String fiscalend = df.format(c1.getTime());
            String accPeriod = "";
            financeDetailsMap.put("CompanyAccountingPeriod", accPeriod);
            
            if (templateflag == Constants.TID_templateflag || templateflag == Constants.TID_Subdomain_templateflag || templateflag == Constants.TIDR_Subdomain_templateflag || templateflag == Constants.MITSUI_Subdomain_templateflag
                    || templateflag == Constants.CUSCADEN_Subdomain_templateflag || templateflag == Constants.TCD_Subdomain_templateflag || templateflag == Constants.CAMBORNE_Subdomain_templateflag) {
                financeDetailsMap.put("title", isBankBook ? "B A N K   B O O K" : "C A S H   B O O K");
                accPeriod = "<b>Accounting Period</b><br>" + fiscalstart + " - " + fiscalend;
            } else {
                financeDetailsMap.put("title", "Cash / Bank Book");
                accPeriod = "<b>Accounting Period</b> : " + fiscalstart + " - " + fiscalend;
            }
            financeDetailsMap.put("CompanyAccountingPeriod", accPeriod);
            JSONObject bankBookObj = getLedger(request);
            JSONArray bankBookDataArray = bankBookObj.getJSONArray(Constants.RES_data);
            HashMap<String, String> idsList = new HashMap<String, String>();
            for (int i = 0; i < bankBookDataArray.length(); i++) {
                JSONObject bankBookData = bankBookDataArray.getJSONObject(i);
                String baseCurr = company.getCurrency().getCurrencyCode() != null ? company.getCurrency().getCurrencyCode() : "";
                baseCurr =  accCommonTablesDAO.getCustomCurrencyCode(baseCurr, companyid);
                String accCurr = bankBookData.optString("currencycode","").equals("")?bankBookData.optString("currencysymbol","").equals("")?"":bankBookData.optString("currencysymbol",""):bankBookData.optString("currencycode","");
                accCurr =  accCommonTablesDAO.getCustomCurrencyCode(accCurr, companyid);
                BankBook bankBook = new BankBook();
                bankBook.setAccname(bankBookData.optString("accountname", ""));
                if ((bankBookData.optString("d_accountname", "")).equals("Opening Balance") || (bankBookData.optString("c_accountname", "")).equals("Opening Balance")) {
                    bankBook.setOpeningbalance(bankBookData.optString("balanceAmountAccountCurrency", "").equals("") ? "": authHandler.formattedCommaSeparatedAmount((Double.parseDouble(bankBookData.getString("balanceAmountAccountCurrency"))), companyid));
                    bankBook.setBaseCurr(baseCurr);
                    bankBook.setAccCurr(accCurr);
                    bankBoookList.add(bankBook);
                } else if ((bankBookData.optString("d_accountname", "")).equals("Period Balance") || (bankBookData.optString("c_accountname", "")).equals("Period Balance")
                        || (bankBookData.optString("d_accountname", "")).equals("Balance c/f") || (bankBookData.optString("c_accountname", "")).equals("Balance c/f") 
                        || (bankBookData.optString("d_accountname", "")).equals("Balance b/d") || (bankBookData.optString("c_accountname", "")).equals("Balance b/d")) {

                    double balance = bankBookData.optString("balanceAmount", "").equals("") ? 0 : bankBookData.optDouble("balanceAmount", 0);
                    double balanceInAccCurr = bankBookData.optString("balanceAmountAccountCurrency", "").equals("") ? 0 : bankBookData.optDouble("balanceAmountAccountCurrency", 0);
                    String pcdate = bankBookData.has("c_date") ? (bankBookData.getString("c_date")) : (bankBookData.has("d_date") ? bankBookData.getString("d_date") : "");
                    bankBook.setParticulars(!bankBookData.optString("c_accountname", "").equals("") ? bankBookData.optString("c_accountname", "") : bankBookData.optString("d_accountname", ""));
                    bankBook.setPayment(bankBookData.optDouble("d_transactionAmount", 0) == 0 ? "" : authHandler.formattedCommaSeparatedAmount((bankBookData.optDouble("d_transactionAmount", 0)), companyid));
                    bankBook.setReceipt(bankBookData.optDouble("c_transactionAmount", 0) == 0 ? "" : authHandler.formattedCommaSeparatedAmount((bankBookData.optDouble("c_transactionAmount", 0)), companyid));
                    bankBook.setAccname(bankBookData.optString("accountname", ""));
                    bankBook.setAcccode(bankBookData.optString("accCode", ""));
                    bankBook.setDate(pcdate);
                    bankBook.setBalanceInBaseCurr(authHandler.formattedCommaSeparatedAmount(balance, companyid));
                    bankBook.setBalanceInAccCurr(authHandler.formattedCommaSeparatedAmount(balanceInAccCurr, companyid));
                    bankBook.setVouchertotal(bankBookData.optDouble("d_transactionAmount", 0) == 0 ? authHandler.formattedCommaSeparatedAmount(bankBookData.optDouble("c_transactionAmount", 0), companyid) : authHandler.formattedCommaSeparatedAmount(bankBookData.optDouble("d_transactionAmount", 0), companyid));
                    bankBook.setTransCurr(bankBookData.optString("currencycode", "").equals("") ? bankBookData.optString("currencysymbol", "").equals("") ? "" : bankBookData.optString("currencysymbol", "") : bankBookData.optString("currencycode", ""));
                    bankBook.setBaseCurr(baseCurr);
                    bankBook.setAccCurr(accCurr);
                    bankBoookList.add(bankBook);

                    continue;
                } else {
                    double balance = bankBookData.optString("balanceAmount", "").equals("") ? 0 : bankBookData.optDouble("balanceAmount", 0);
                    double balanceInAccCurr = bankBookData.optString("balanceAmountAccountCurrency", "").equals("") ? 0 : bankBookData.optDouble("balanceAmountAccountCurrency", 0);
                    String pcdate = bankBookData.has("transactionDateString") ? bankBookData.getString("transactionDateString") : "";


                    String voucherno = "";
                    if (!bankBookData.optString("d_transactionID", "").equals("")) {
                        voucherno = bankBookData.getString("d_transactionID");
                    } else if (!bankBookData.optString("c_transactionID", "").equals("")) {
                        voucherno = bankBookData.getString("c_transactionID");
                    }

                    String entryno = "";
                    if (!bankBookData.optString("d_entryno", "").equals("")) {
                        entryno = bankBookData.getString("d_entryno");
                    } else if (!bankBookData.optString("c_entryno", "").equals("")) {
                        entryno = bankBookData.getString("c_entryno");
                    }

                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                    String type = bankBookData.optString("type", "");
                    JSONArray DataJArr = null;
                    String billid = bankBookData.optString(Constants.billid, "");
                    String payer = "";
                    
                    if(idsList.containsKey(billid) && idsList.containsValue(voucherno)) {   //Added this check for - refer ticket ERP-6378
                        continue;
                    } else {
                        idsList.put(billid, voucherno);
                    }

                    if (type == Constants.PAYMENT_MADE && !billid.equals("")) {
                        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                        requestParams.put(Constants.billid, billid);
                        request.setAttribute(Constants.companyKey, companyid);
                        request.setAttribute(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
                        requestParams.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
                        KwlReturnObject result = accVendorPaymentobj.getPayments(requestParams);
                        tempList = accVendorPaymentServiceDAOobj.getPaymentsJsonNew(requestParams, result.getEntityList(), tempList);
                        requestParams.put("dateformat", authHandler.getDateOnlyFormat());
                        requestParams.put("userdateformat", authHandler.getUserDateFormatterWithoutTimeZone(request));
                        requestParams.put("bills", billid.split(","));
                        DataJArr = accVendorPaymentServiceDAOobj.getPaymentDetailJsonNew(requestParams);
                        if (!bankBookData.optString("payer", "").equals("")) {
                            payer = "Paid To : " + bankBookData.getString("payer");
                        }
                    } else if (type == Constants.PAYMENT_RECEIVED && !billid.equals("")) {
                        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                        HashMap<String, Object> requestParams = accReceiptServiceDAOobj.getReceiptRequestMapJSON(paramJobj);
                        requestParams.put(Constants.billid, billid);
                        
                        request.setAttribute(Constants.companyKey, companyid);
                        request.setAttribute(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
                        request.setAttribute("bills", billid);
                        paramJobj.put(Constants.companyKey, companyid);
                        paramJobj.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
                        paramJobj.put("bills", billid);
                        
                        requestParams.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
                        KwlReturnObject result = accReceiptDao.getReceipts(requestParams);
                        tempList = accReceiptServiceDAOobj.getReceiptJson(paramJobj, result.getEntityList(), tempList);
                        
                        request.setAttribute(Constants.companyKey, companyid);
                        request.setAttribute(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
                        request.setAttribute("bills", billid);
                        paramJobj.put(Constants.companyKey, companyid);
                        paramJobj.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
                        paramJobj.put("bills", billid);
                        
                        JSONObject tempobj = accReceiptServiceDAOobj.getReceiptRowsJSONNew(paramJobj);
                        DataJArr = tempobj.getJSONArray(Constants.RES_data);
                        if (!bankBookData.optString("payer", "").equals("")) {
                            payer = "Recd From : " + bankBookData.getString("payer");
                        }
                    } else if (!voucherno.equals("") && !entryno.equals("") && voucherno.equals(entryno)) {
                        bankBook = new BankBook();
                        String invDesc = "Manual Journal Entry";
                        HashMap<String, Object> jeRequestParams = new HashMap<String, Object>();
                        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                        filter_names.add("journalEntry.ID");
                        if (bankBookData.has("d_journalentryid") && !bankBookData.getString("d_journalentryid").equals("")) {
                            filter_params.add(bankBookData.optString("d_journalentryid", ""));
                        }
                        if (bankBookData.has("c_journalentryid") && !bankBookData.getString("c_journalentryid").equals("")) {
                            filter_params.add(bankBookData.optString("c_journalentryid", ""));
                        }
                        order_by.add("debit");
                        order_type.add("desc");
                        jeRequestParams.put("filter_names", filter_names);
                        jeRequestParams.put("filter_params", filter_params);
                        jeRequestParams.put("order_by", order_by);
                        jeRequestParams.put("order_type", order_type);
                        KwlReturnObject jedresult = accJournalEntryobj.getJournalEntryDetails(jeRequestParams);
                        Iterator itrIterator = jedresult.getEntityList().iterator();
                        while (itrIterator.hasNext()) {
                            JournalEntryDetail entry = (JournalEntryDetail) itrIterator.next();
                            String accname = entry.getAccount().getName();
                            if (accname != null) {
                                if ((bankBookData.has("d_journalentryid") && !bankBookData.getString("d_journalentryid").equals("") && entry.isDebit()) || (bankBookData.has("c_journalentryid") && !bankBookData.getString("c_journalentryid").equals("") && !entry.isDebit())) {
                                    if (bankBookData.optString("accountname", "").contains(accname)) {
                                        if (!StringUtil.isNullOrEmpty(entry.getDescription())) {    //To avoid NPException.
                                            invDesc += "<br> Description:" + entry.getDescription();
                                        }
                                    }
                                }
                            }
                        }
                        bankBook.setParticulars(invDesc);
                        bankBook.setPayment(bankBookData.optDouble("d_transactionAmount", 0)==0?"":authHandler.formattedCommaSeparatedAmount((bankBookData.optDouble("d_transactionAmount", 0)), companyid));
                        bankBook.setReceipt(bankBookData.optDouble("c_transactionAmount", 0)==0?"":authHandler.formattedCommaSeparatedAmount((bankBookData.optDouble("c_transactionAmount", 0)), companyid));
                        bankBook.setAccname(bankBookData.optString("accountname", ""));
                        bankBook.setAcccode(bankBookData.optString("accCode", ""));
                        bankBook.setDate(pcdate);
                        bankBook.setVoucherno(voucherno);
                        bankBook.setBalanceInBaseCurr(authHandler.formattedCommaSeparatedAmount(balance, companyid));
                        bankBook.setBalanceInAccCurr(authHandler.formattedCommaSeparatedAmount(balanceInAccCurr, companyid));
                        bankBook.setVouchertotal(bankBookData.optDouble("d_transactionAmount", 0)==0?authHandler.formattedCommaSeparatedAmount(bankBookData.optDouble("c_transactionAmount", 0), companyid):authHandler.formattedCommaSeparatedAmount(bankBookData.optDouble("d_transactionAmount", 0), companyid));
                        bankBook.setTransCurr(bankBookData.optString("currencycode","").equals("")?bankBookData.optString("currencysymbol","").equals("")?"":bankBookData.optString("currencysymbol",""):bankBookData.optString("currencycode",""));
                        bankBook.setBaseCurr(baseCurr);
                        bankBook.setAccCurr(accCurr);
                        bankBoookList.add(bankBook);
                    }else if(!voucherno.equals("")){
                        bankBook = new BankBook();
                        String invDesc = "Other Transaction Entry";     
                        bankBook.setReceipt(bankBookData.optDouble("d_amountAccountCurrency", 0)==0?"":authHandler.formattedCommaSeparatedAmount(bankBookData.optDouble("d_amountAccountCurrency", 0), companyid));
                        bankBook.setPayment(bankBookData.optDouble("c_amountAccountCurrency", 0)==0?"":authHandler.formattedCommaSeparatedAmount(bankBookData.optDouble("c_amountAccountCurrency", 0), companyid));
                        bankBook.setAccname(bankBookData.optString("accountname", ""));
                        bankBook.setAcccode(bankBookData.optString("accCode", ""));
                        bankBook.setDate(pcdate);
                        bankBook.setVoucherno(voucherno);
                        bankBook.setBalanceInBaseCurr(authHandler.formattedCommaSeparatedAmount(balance, companyid));
                        bankBook.setBalanceInAccCurr(authHandler.formattedCommaSeparatedAmount(balanceInAccCurr, companyid));
                        bankBook.setVouchertotal(bankBookData.optDouble("d_amountAccountCurrency", 0)==0?authHandler.formattedCommaSeparatedAmount(bankBookData.optDouble("c_amountAccountCurrency", 0), companyid):authHandler.formattedCommaSeparatedAmount(bankBookData.optDouble("d_amountAccountCurrency", 0), companyid));
                        bankBook.setTransCurr(bankBookData.optString("currencycode","").equals("")?bankBookData.optString("currencysymbol","").equals("")?"":bankBookData.optString("currencysymbol",""):bankBookData.optString("currencycode",""));
                        bankBook.setBaseCurr(baseCurr);
                        bankBook.setAccCurr(accCurr);
                        String chequeNumber = "";
                        String chequeDate = "";
                        String narration = "";
                        String particulars = "";                        
                        if (!bankBookData.optString("_cvName", "").equals("")) {
                            payer = bankBookData.getString("_cvName");
                        }
                        if (!bankBookData.optString("d_checkno", "").equals("")) {
                            chequeNumber = bankBookData.getString("d_checkno");
                            chequeDate = bankBookData.getString("d_checkdate");
                        } else if (!bankBookData.optString("c_checkno", "").equals("")) {
                            chequeNumber = bankBookData.getString("c_checkno");
                            chequeDate = bankBookData.getString("c_checkdate");
                        }

                        if (!bankBookData.optString("d_description", "").equals("")) {
                            narration = "Narr : " + bankBookData.getString("d_description");
                        } else if (!bankBookData.optString("c_description", "").equals("")) {
                            narration = "Narr : " + bankBookData.getString("c_description");
                        }
                        particulars =  (StringUtil.isNullOrEmpty(payer) ? "" : payer)
                                + (StringUtil.isNullOrEmpty(chequeNumber) ? "" : " by chq no " + chequeNumber + " dt " + chequeDate)
                                + (StringUtil.isNullOrEmpty(narration) ? "" : "<br>" + narration);
                        bankBook.setParticulars(particulars);
                        bankBoookList.add(bankBook);
                    }
                    if (!tempList.isEmpty()) {
                        JSONObject obj = tempList.get(0);
                        double vouchertotal = obj.optDouble("amount", 0);
                        String transCurr = obj.optString("currencycode","").equals("")?obj.optString("currencysymbol","").equals("")?"":obj.optString("currencysymbol",""):obj.optString("currencycode","");
                        transCurr = accCommonTablesDAO.getCustomCurrencyCode(transCurr, companyid);
                        String transCurrSymbol = obj.optString("currencysymbol","").equals("")?"":obj.optString("currencysymbol","");
                        transCurrSymbol = accCommonTablesDAO.getCustomCurrencySymbol(transCurrSymbol, companyid);
                        if (DataJArr != null) {

                            for (int k = 0; k < DataJArr.length(); k++) {
                                jobj = DataJArr.getJSONObject(k);
                                int detailtype = (Integer) jobj.get("type");
                                if (detailtype == Constants.PaymentAgainstInvoice) {
                                    JSONArray arr = jobj.getJSONArray("typedata");
                                    for (int j = 0; j < arr.length(); j++) {
                                        bankBook = new BankBook();
                                        JSONObject data = arr.getJSONObject(j);
                                        int srno = data.optInt("srno", 0);
                                        String invDesc = "Invoice# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                        if (data.has("description") && !data.optString("description").equals("")) {
                                            invDesc += "<br>Description : " + data.optString("description");
                                        }
                                        if(bankBookData.has(Constants.currencyKey) && data.has("exchangeratefortransaction")){
                                            if(!(bankBookData.optInt(Constants.currencyKey)==data.optInt("currencyidtransaction"))){
                                                invDesc += "<br>Exchange Rate : "+"1 "+data.optString("currencysymbol")+" = " + data.optDouble("exchangeratefortransaction")+" "+accCommonTablesDAO.getCustomCurrencyCode(bankBookData.getString("currencycode"), companyid);
                                            }
                                        }
                                        bankBook.setParticulars(invDesc);
                                        if (type == Constants.PAYMENT_MADE) {
                                            bankBook.setPayment(data.optDouble("enteramount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0), companyid));
                                        } else {
                                            bankBook.setReceipt(data.optDouble("enteramount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0), companyid));
                                        }
                                        bankBook.setAccname(bankBookData.optString("accountname", ""));
                                        bankBook.setAcccode(bankBookData.optString("accCode", ""));
                                        bankBook.setDate(pcdate);
                                        bankBook.setVoucherno(voucherno);
                                        bankBook.setBalanceInBaseCurr(authHandler.formattedCommaSeparatedAmount(balance, companyid));
                                        bankBook.setBalanceInAccCurr(authHandler.formattedCommaSeparatedAmount(balanceInAccCurr, companyid));
                                        bankBook.setVouchertotal(authHandler.formattedCommaSeparatedAmount(vouchertotal, companyid));
                                        bankBook.setTransCurr(transCurr);
                                        bankBook.setBaseCurr(baseCurr);
                                        bankBook.setAccCurr(accCurr);
                                        bankBoookList.add(bankBook);
                                    }
                                } else if (detailtype == Constants.GLPayment) {
                                    JSONArray arr = jobj.getJSONArray("typedata");
                                    for (int j = 0; j < arr.length(); j++) {
                                        bankBook = new BankBook();
                                        JSONObject data = arr.getJSONObject(j);
                                        int srno = data.optInt("srno", 0);
                                        boolean debit=data.optBoolean("debit", false);
                                        String taxname = "";
                                        String taxpercent = "";
                                        String invDesc = /*
                                                 * "Against GL Account " +
                                                 */ (data.optString("accountcode", "").equals("") ? "" : data.optString("accountcode", "") + " - ") + data.getString("accountname");
                                        if (!data.optString("taxamount", "0.0").equals("0.0")) {
                                            taxpercent = data.optString("taxpercent", "");
                                            taxname = (data.optString("taxcode", "").equals("") ? "" : data.optString("taxcode", "") + " - ") + data.optString("taxname", "") + (taxpercent.equals("") ? "" : " - (" + taxpercent + "%)");
                                            if (data.has("description") && !data.optString("description").equals("")) {
                                                invDesc += "<br>Description : " + data.optString("description");
                                            }
                                            if (bankBookData.has(Constants.currencyKey) && data.has("exchangeratefortransaction")) {
                                                if (!(bankBookData.optInt(Constants.currencyKey) == data.optInt("currencyidtransaction"))) {
                                                    invDesc += "<br>Exchange Rate : " + "1 " +accCommonTablesDAO.getCustomCurrencySymbol(data.optString("currencysymbol"), companyid) + " = " + data.optDouble("exchangeratefortransaction") +" "+ accCommonTablesDAO.getCustomCurrencyCode(bankBookData.getString("currencycode"), companyid) ;
                                                }
                                            }
                                            bankBook.setParticulars(invDesc);
                                            if (debit) {
                                                bankBook.setPayment(data.optDouble("totalamount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("totalamount", 0), companyid));
                                            } else {
                                                bankBook.setReceipt(data.optDouble("totalamount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("totalamount", 0), companyid));
                                            }
                                            bankBook.setAccname(bankBookData.optString("accountname", ""));
                                            bankBook.setAcccode(bankBookData.optString("accCode", ""));
                                            bankBook.setDate(pcdate);
                                            bankBook.setVoucherno(voucherno);
                                            bankBook.setBalanceInBaseCurr(authHandler.formattedCommaSeparatedAmount(balance, companyid));
                                            bankBook.setBalanceInAccCurr(authHandler.formattedCommaSeparatedAmount(balanceInAccCurr, companyid));
                                            bankBook.setVouchertotal(authHandler.formattedCommaSeparatedAmount(vouchertotal, companyid));
                                            bankBook.setTransCurr(transCurr);
                                            bankBook.setBaseCurr(baseCurr);
                                            bankBook.setAccCurr(accCurr);
                                            bankBoookList.add(bankBook);

                                            bankBook = new BankBook();
                                            bankBook.setParticulars(taxname);
                                            if (debit) {
                                                bankBook.setPayment(data.optDouble("taxamount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("taxamount", 0), companyid));
                                            } else {
                                                bankBook.setReceipt(data.optDouble("taxamount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("taxamount", 0), companyid));
                                            }
                                            bankBook.setAccname(bankBookData.optString("accountname", ""));
                                            bankBook.setAcccode(bankBookData.optString("accCode", ""));
                                            bankBook.setDate(pcdate);
                                            bankBook.setVoucherno(voucherno);
                                            bankBook.setBalanceInBaseCurr(authHandler.formattedCommaSeparatedAmount(balance, companyid));
                                            bankBook.setBalanceInAccCurr(authHandler.formattedCommaSeparatedAmount(balanceInAccCurr, companyid));
                                            bankBook.setVouchertotal(authHandler.formattedCommaSeparatedAmount(vouchertotal, companyid));
                                            bankBook.setTransCurr(transCurr);
                                            bankBook.setBaseCurr(baseCurr);
                                            bankBook.setAccCurr(accCurr);
                                            bankBoookList.add(bankBook);
                                        } else {
                                            if (data.has("description") && !data.optString("description").equals("")) {
                                                invDesc += "<br>Description : " + data.optString("description");
                                            }
                                            if (bankBookData.has(Constants.currencyKey) && data.has("exchangeratefortransaction")) {
                                                if (!(bankBookData.optInt(Constants.currencyKey) == data.optInt("currencyidtransaction"))) {
                                                    invDesc += "<br>Exchange Rate : " + "1 " +accCommonTablesDAO.getCustomCurrencySymbol(data.optString("currencysymbol") , companyid)+ " = " + data.optDouble("exchangeratefortransaction") +" "+ accCommonTablesDAO.getCustomCurrencyCode(bankBookData.getString("currencycode"), companyid) ;
                                                }
                                            }
                                            bankBook.setParticulars(invDesc);
                                            if (debit) {
                                                bankBook.setPayment(data.optDouble("totalamount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("totalamount", 0), companyid));
                                            } else {
                                                bankBook.setReceipt(data.optDouble("totalamount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("totalamount", 0), companyid));
                                            }
                                            bankBook.setAccname(bankBookData.optString("accountname", ""));
                                            bankBook.setAcccode(bankBookData.optString("accCode", ""));
                                            bankBook.setDate(pcdate);
                                            bankBook.setVoucherno(voucherno);
                                            bankBook.setBalanceInBaseCurr(authHandler.formattedCommaSeparatedAmount(balance, companyid));
                                            bankBook.setBalanceInAccCurr(authHandler.formattedCommaSeparatedAmount(balanceInAccCurr, companyid));
                                            bankBook.setVouchertotal(authHandler.formattedCommaSeparatedAmount(vouchertotal, companyid));
                                            bankBook.setTransCurr(transCurr);
                                            bankBook.setBaseCurr(baseCurr);
                                            bankBook.setAccCurr(accCurr);
                                            bankBoookList.add(bankBook);
                                        }
                                    }
                                } else if (detailtype == Constants.PaymentAgainstCNDN) {
                                    JSONArray arr = jobj.getJSONArray("typedata");
                                    for (int j = 0; j < arr.length(); j++) {
                                        bankBook = new BankBook();
                                        JSONObject data = arr.getJSONObject(j);
                                        int srno = data.optInt("srno", 0);
                                        String invDesc = type == Constants.PAYMENT_MADE ? "Credit Note# " : "Debit Note# ";
                                        invDesc += data.getString("transectionno") + " dated " + data.getString("creationdate");                                      
                                        if (type == Constants.PAYMENT_MADE) {
                                            bankBook.setPayment(data.optDouble("enteramount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0), companyid));
                                        } else {
                                            bankBook.setReceipt(data.optDouble("enteramount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0), companyid));
                                        }
                                        if(data.has("description") && !data.optString("description").equals("")){
                                            invDesc+= "<br>Description : "+data.optString("description");
                                        }
                                        if(bankBookData.has(Constants.currencyKey) && data.has("exchangeratefortransaction")){
                                            if(!(bankBookData.optInt(Constants.currencyKey)==data.optInt("currencyidtransaction"))){
                                                invDesc += "<br>Exchange Rate : "+"1 "+accCommonTablesDAO.getCustomCurrencySymbol(data.optString("currencysymbol"), companyid)+" = " + data.optDouble("exchangeratefortransaction")+" "+accCommonTablesDAO.getCustomCurrencyCode(bankBookData.getString("currencycode"), companyid);
                                            }
                                        }
                                        bankBook.setParticulars(invDesc);
                                        bankBook.setAccname(bankBookData.optString("accountname", ""));
                                        bankBook.setAcccode(bankBookData.optString("accCode", ""));
                                        bankBook.setDate(pcdate);
                                        bankBook.setVoucherno(voucherno);
                                        bankBook.setBalanceInBaseCurr(authHandler.formattedCommaSeparatedAmount(balance, companyid));
                                        bankBook.setBalanceInAccCurr(authHandler.formattedCommaSeparatedAmount(balanceInAccCurr, companyid));
                                        bankBook.setVouchertotal(authHandler.formattedCommaSeparatedAmount(vouchertotal, companyid));
                                        bankBook.setTransCurr(transCurr);
                                        bankBook.setBaseCurr(baseCurr);
                                        bankBook.setAccCurr(accCurr);
                                        bankBoookList.add(bankBook);
                                    }
                                } else if (detailtype == Constants.AdvancePayment) {
                                    JSONArray arr = jobj.getJSONArray("typedata");
                                    for (int j = 0; j < arr.length(); j++) {
                                        bankBook = new BankBook();
                                        JSONObject data = arr.getJSONObject(j);
                                        int srno = data.optInt("srno", 0);
                                        String invDesc = "Advance Amount ";
                                        invDesc += (type == Constants.PAYMENT_MADE ? " to " : " from ");
                                        if (!data.optString("acccode", "").equals("") && !data.optString("accname", "").equals("")) {
                                            invDesc += data.getString("acccode") + "-" + data.getString("accname");
                                            if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                                invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                            } else if (!data.optString("accountname", "").equals("")) {
                                                invDesc += " (" + data.getString("accountname") + ")";
                                            }
                                        } else if (!data.optString("accname", "").equals("")) {
                                            invDesc += data.getString("accname");
                                            if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                                invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                            } else if (!data.optString("accountname", "").equals("")) {
                                                invDesc += " (" + data.getString("accountname") + ")";
                                            }
                                        }   // This will add the account name with code and then account holder name with code  
                                        
                                        if (data.has("description") && !data.optString("description").equals("")) {
                                            invDesc += "<br>Description : " + data.optString("description");
                                        }
                                        if (bankBookData.has(Constants.currencyKey) && data.has("exchangeratefortransaction")) {
                                            if (!(bankBookData.optInt(Constants.currencyKey) == data.optInt("currencyidtransaction"))) {
                                                invDesc += "<br>Exchange Rate : "+"1 "+accCommonTablesDAO.getCustomCurrencySymbol(data.optString("currencysymbol"), companyid)+" = " + data.optDouble("exchangeratefortransaction")+" "+accCommonTablesDAO.getCustomCurrencyCode(bankBookData.getString("currencycode"), companyid);
                                            }
                                        }
                                        bankBook.setParticulars(invDesc);
                                        if (type == Constants.PAYMENT_MADE) {
                                            bankBook.setPayment(data.optDouble("totalamount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("totalamount", 0), companyid));
                                        } else {
                                            bankBook.setReceipt(data.optDouble("totalamount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("totalamount", 0), companyid));
                                        }
                                        bankBook.setAccname(bankBookData.optString("accountname", ""));
                                        bankBook.setAcccode(bankBookData.optString("accCode", ""));
                                        bankBook.setDate(pcdate);
                                        bankBook.setVoucherno(voucherno);
                                        bankBook.setBalanceInBaseCurr(authHandler.formattedCommaSeparatedAmount(balance, companyid));
                                        bankBook.setBalanceInAccCurr(authHandler.formattedCommaSeparatedAmount(balanceInAccCurr, companyid));
                                        bankBook.setVouchertotal(authHandler.formattedCommaSeparatedAmount(vouchertotal, companyid));
                                        bankBook.setTransCurr(transCurr);
                                        bankBook.setBaseCurr(baseCurr);
                                        bankBook.setAccCurr(accCurr);
                                        bankBoookList.add(bankBook);
                                    }
                                } else if (detailtype == Constants.AdvanceLinkedWithInvoicePayment) {
                                    JSONArray arr = jobj.getJSONArray("typedata");
                                    for (int j = 0; j < arr.length(); j++) {
                                        bankBook = new BankBook();
                                        JSONObject data = arr.getJSONObject(j);
                                        int srno = data.optInt("srno", 0);
                                        String invDesc = "Adjusted Against Invoice# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                        if (data.has("description") && !data.optString("description").equals("")) {
                                            invDesc += "<br>Description : " + data.optString("description");
                                        }
                                        if (bankBookData.has(Constants.currencyKey) && data.has("exchangeratefortransaction")) {
                                            if (!(bankBookData.optInt(Constants.currencyKey) == data.optInt("currencyidtransaction"))) {
                                                invDesc += "<br>Exchange Rate : "+"1 "+accCommonTablesDAO.getCustomCurrencySymbol(data.optString("currencysymbol"), companyid)+" = " + data.optDouble("exchangeratefortransaction")+" "+accCommonTablesDAO.getCustomCurrencyCode(bankBookData.getString("currencycode"), companyid);
                                            }
                                        }
                                        bankBook.setParticulars(invDesc);
                                        if (type == Constants.PAYMENT_MADE) {
                                            bankBook.setPayment(data.optDouble("enteramount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0), companyid));
                                        } else {
                                            bankBook.setReceipt(data.optDouble("enteramount", 0)==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0), companyid));
                                        }
                                        bankBook.setAccname(bankBookData.optString("accountname", ""));
                                        bankBook.setAcccode(bankBookData.optString("accCode", ""));
                                        bankBook.setDate(pcdate);
                                        bankBook.setVoucherno(voucherno);
                                        bankBook.setBalanceInBaseCurr(authHandler.formattedCommaSeparatedAmount(balance, companyid));
                                        bankBook.setBalanceInAccCurr(authHandler.formattedCommaSeparatedAmount(balanceInAccCurr, companyid));
                                        bankBook.setVouchertotal(authHandler.formattedCommaSeparatedAmount(vouchertotal, companyid));
                                        bankBook.setTransCurr(transCurr);
                                        bankBook.setBaseCurr(baseCurr);
                                        bankBook.setAccCurr(accCurr);
                                        bankBoookList.add(bankBook);
                                    }
                                }
                            }
                        }
                        String chequeNumber = "";
                        String chequeDate = "";
                        String narration = "";
                        String particulars = "";

                        if (!bankBookData.optString("d_checkno", "").equals("")) {
                            chequeNumber = bankBookData.getString("d_checkno");
                            chequeDate = bankBookData.getString("d_checkdate");
                        } else if (!bankBookData.optString("c_checkno", "").equals("")) {
                            chequeNumber = bankBookData.getString("c_checkno");
                            chequeDate = bankBookData.getString("c_checkdate");
                        }
                       
                        if (templateflag == Constants.TID_templateflag || templateflag == Constants.TID_Subdomain_templateflag || templateflag == Constants.TIDR_Subdomain_templateflag || templateflag == Constants.MITSUI_Subdomain_templateflag
                                || templateflag == Constants.CUSCADEN_Subdomain_templateflag || templateflag == Constants.TCD_Subdomain_templateflag || templateflag == Constants.CAMBORNE_Subdomain_templateflag) {
                            if (!bankBookData.optString("d_description", "").equals("")) {
                                narration = "Narr : " + bankBookData.getString("d_description");
                            } else if (!bankBookData.optString("c_description", "").equals("")) {
                                narration = "Narr : " + bankBookData.getString("c_description");
                            }
                        } else if (!bankBookData.optString("memoValue", "").equals("")) {
                            narration = "Narration : " + bankBookData.getString("memoValue");

                        }
                        particulars =(StringUtil.isNullOrEmpty(payer) ? "" : payer)
                                + (StringUtil.isNullOrEmpty(chequeNumber) ? "" : " by chq no " + chequeNumber + " dt " + chequeDate)
                                + (StringUtil.isNullOrEmpty(narration) ? "" : "<br>" + narration);
                        if (!bankBoookList.isEmpty()) {
                            BankBook bankBook1 = bankBoookList.get(bankBoookList.lastIndexOf(bankBook));
                            String tmp = bankBook1.getParticulars();
                            tmp += ("<br>" + particulars);
                            bankBoookList.remove(bankBoookList.lastIndexOf(bankBook));
                            bankBook1.setParticulars(tmp);
                            bankBoookList.add(bankBook1);
                        }

                        if (!obj.optString("bankCharges", "0.0").equals("0.0")) {
                            double bankcharges = Double.parseDouble(obj.getString("bankCharges"));
                            String invDesc = "";
                            bankBook = new BankBook();
                            if (!obj.optString("bankChargesAccCode", "").equals("") && !obj.optString("bankChargesAccName", "").equals("")) {
                                invDesc += " (" + obj.getString("bankChargesAccCode") + "-" + obj.getString("bankChargesAccName") + ")";
                            } else if (!obj.optString("bankChargesAccName", "").equals("")) {
                                invDesc += " (" + obj.optString("bankChargesAccName", "") + ")";
                            }
                            bankBook.setParticulars("Bank Charges "+invDesc);
                            bankBook.setDate(pcdate);
                            bankBook.setVoucherno(voucherno);
                            if (type == Constants.PAYMENT_MADE) {
                                bankBook.setPayment(bankcharges==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            } else {
                                bankBook.setReceipt(bankcharges==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            }
                            bankBook.setBalanceInBaseCurr(authHandler.formattedCommaSeparatedAmount(balance, companyid));
                            bankBook.setBalanceInAccCurr(authHandler.formattedCommaSeparatedAmount(balanceInAccCurr, companyid));
                            bankBook.setVouchertotal(authHandler.formattedCommaSeparatedAmount(vouchertotal, companyid));
                            bankBook.setAccname(bankBookData.optString("accountname", ""));
                            bankBook.setAcccode(bankBookData.optString("accCode", ""));
                            bankBook.setTransCurr(transCurr);
                            bankBook.setBaseCurr(baseCurr);
                            bankBook.setAccCurr(accCurr);
                            bankBoookList.add(bankBook);
                        }

                        if (!obj.optString("bankInterest", "0.0").equals("0.0")) {
                            double bankInterest = Double.parseDouble(obj.getString("bankInterest"));
                            String invDesc = "";
                            bankBook = new BankBook();
                            if (!obj.optString("bankInterestAccCode", "").equals("") && !obj.optString("bankInterestAccName", "").equals("")) {
                                invDesc += " (" + obj.getString("bankInterestAccCode") + "-" + obj.getString("bankInterestAccName") + ")";
                            } else if (!obj.optString("bankInterestsAccName", "").equals("")) {
                                invDesc += " (" + obj.optString("bankInterestAccName", "") + ")";
                            }
                            bankBook.setParticulars("Bank Interest "+invDesc);
                            bankBook.setDate(pcdate);
                            bankBook.setVoucherno(voucherno);
                            if (type == Constants.PAYMENT_MADE) {
                                bankBook.setPayment(bankInterest==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            } else {
                                bankBook.setReceipt(bankInterest==0?"":transCurrSymbol+" "+authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            }
                            bankBook.setBalanceInBaseCurr(authHandler.formattedCommaSeparatedAmount(balance, companyid));
                            bankBook.setBalanceInAccCurr(authHandler.formattedCommaSeparatedAmount(balanceInAccCurr, companyid));
                            bankBook.setVouchertotal(authHandler.formattedCommaSeparatedAmount(vouchertotal, companyid));
                            bankBook.setAccname(bankBookData.optString("accountname", ""));
                            bankBook.setAcccode(bankBookData.optString("accCode", ""));
                            bankBook.setTransCurr(transCurr);
                            bankBook.setBaseCurr(baseCurr);
                            bankBook.setAccCurr(accCurr);
                            bankBoookList.add(bankBook);
                        }
                    }
                }
            }

            financeDetailsMap.put("format", "pdf");
            boolean isLandscape = request.getParameter("isLandscape") != null ? Boolean.parseBoolean(request.getParameter("isLandscape")) : false;
            InputStream inputStream = null;
            if (templateflag == Constants.TID_templateflag || templateflag == Constants.TID_Subdomain_templateflag || templateflag == Constants.TIDR_Subdomain_templateflag || templateflag == Constants.MITSUI_Subdomain_templateflag
                    || templateflag == Constants.CUSCADEN_Subdomain_templateflag || templateflag == Constants.TCD_Subdomain_templateflag || templateflag == Constants.CAMBORNE_Subdomain_templateflag) {
                inputStream = new FileInputStream((!jrxmlPath.equals("")) ? jrxmlPath + "/TIDBankBook.jrxml" : request.getSession().getServletContext().getRealPath("/jrxml") + "/TIDBankBook.jrxml");
            } else if (isLandscape) {
                inputStream = new FileInputStream((!jrxmlPath.equals("")) ? jrxmlPath + "/BankBookLandscape.jrxml" : request.getSession().getServletContext().getRealPath("/jrxml") + "/BankBookLandscape.jrxml");
            } else {
                inputStream = new FileInputStream((!jrxmlPath.equals("")) ? jrxmlPath + "/BankBook.jrxml" : request.getSession().getServletContext().getRealPath("/jrxml") + "/BankBook.jrxml");
            }
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(bankBoookList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, financeDetailsMap, beanColDataSource);
                
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT, jasperPrint);
             exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
             if (isBankBook)    //check if the export pdf request is generated from the Cash book panel or Bank Book panel and name the pdf as per that request
            {
                response.setHeader("Content-Disposition", "attachment;filename=" + "BankBook_v1.pdf");
            } else {                     
                response.setHeader("Content-Disposition", "attachment;filename=" + "CashBook_v1.pdf");
            }
             exp.exportReport();
            
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = "" + ex.getMessage();
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }   
    
 @Override 
    public double calculateProfitAndLoss(JSONObject paramJobj, Date startDate, Date endDate, Date startPreDate, Date endPreDate, String accname1,
            boolean isPeriod, boolean isOpening, String companyid, Map<String, Object> advSearchAttributes) {
        double balance = 0;
        try {
            paramJobj.put("startDate", startDate);
            paramJobj.put("endDate", endDate);
            if (!isPeriod) {
                paramJobj.put("periodView", false);
                paramJobj.put("isPeriod", isPeriod);
            } else {
                paramJobj.put("periodView", true);
                paramJobj.put("isPeriod", isPeriod);
            }
            CompanyAccountPreferences pref = null;
            KwlReturnObject prefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(),paramJobj.getString(Constants.companyKey));
            pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
            Calendar calendar = Calendar.getInstance();
            if (startDate != null) {
                calendar.setTime(startDate);
            } else {
                calendar.setTime(endDate);
            }
            double invOpeBal = 0, invCloseBal = 0;
            if (paramJobj.optString("invOpeBal",null) != null) {
                invOpeBal = Double.parseDouble(paramJobj.optString("invOpeBal"));
            }
            if (paramJobj.optString("invCloseBal",null) != null) {
                invCloseBal = Double.parseDouble(paramJobj.optString("invCloseBal"));
            }
            boolean isPnLForBalanceSheet = false;
            if (paramJobj.optString("isPnLForBalanceSheet",null) != null) {
                isPnLForBalanceSheet = Boolean.parseBoolean(paramJobj.optString("isPnLForBalanceSheet"));
            }
            boolean isEndingCall = false; //  ending balance calculate flag
            if (paramJobj.optString("isEndingCall",null) != null) {
                isEndingCall = Boolean.parseBoolean(paramJobj.optString("isEndingCall"));
            }
            boolean callFromBS = false;  /* Not included opening stock while calculating "Net Profit/Loss" SDP-2742 */
            if (paramJobj.optString("callFromBS",null) != null) {
                callFromBS = Boolean.parseBoolean(paramJobj.optString("callFromBS"));
            }
            KwlReturnObject closingAccountBalanceResultList = accCompanyPreferencesObj.getClosingBalanceList(null, (calendar.get(Calendar.YEAR) - 1), companyid);
            List<ClosingAccountBalance> closingAccountBalancesList = closingAccountBalanceResultList.getEntityList();
            HashMap<String, Date> startEndDateHashMap = getStartAndEndFinancialDate(pref, calendar.get(Calendar.YEAR) - 1);
            Date closingEndDate = startEndDateHashMap.get("endDate");
            ExtraCompanyPreferences extrapref = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(),paramJobj.getString(Constants.companyKey));
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            }
            HashMap<String, List<Account>> accountGroupMap = new HashMap<String, List<Account>>();
            HashMap<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put(Constants.companyKey, companyid);
            filterParams.put("parent", null);
            KwlReturnObject accgroupresult = accAccountDAOobj.getAccountGroupInfo(filterParams);
            List<Object[]> list = accgroupresult.getEntityList();
            for (Object[] row : list) {
                String grID = row[1].toString();
                List<Account> tempList = new ArrayList();
                if (accountGroupMap.containsKey(grID)) {
                    tempList = accountGroupMap.get(grID);
                }
                tempList.add((Account) row[0]);
                accountGroupMap.put(grID, tempList);
            }
            double dexpensetotal = 0, cincometotal = 0;
            double tradingAmount1[] = getTrading(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true,advSearchAttributes);
            if (!isEndingCall) {
                dexpensetotal = tradingAmount1[0];
            } else {
                dexpensetotal += tradingAmount1[4];
            }
            double tradingAmount2[] = getTrading(paramJobj, Group.NATURE_INCOME, new JSONArray(), true, advSearchAttributes);
            if (!isEndingCall) {
                cincometotal = tradingAmount2[0];
            } else {
                cincometotal += tradingAmount2[4];
            }
            double profitLossAmount1[] = getProfitLoss(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true, advSearchAttributes);
            if (!isEndingCall) {
                dexpensetotal += profitLossAmount1[0];
            } else {
                dexpensetotal += profitLossAmount1[4];
            }
            double profitLossAmount2[] = getProfitLoss(paramJobj, Group.NATURE_INCOME, new JSONArray(), true, advSearchAttributes);
            if (!isEndingCall) {
                cincometotal += profitLossAmount2[0];
            } else {
                cincometotal += profitLossAmount2[4];
            }
            balance = tradingAmount1[0] + tradingAmount2[0] + profitLossAmount1[0] + profitLossAmount2[0];
            double costofgoodsSoldTotal = 0;
            if (isPnLForBalanceSheet) {
                paramJobj.put("isCostOfGoodsSold", true);
                double goodsSoldAmount[] = getTrading(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true, advSearchAttributes);
                double profitLossAmountCoGS[] = getProfitLoss(paramJobj, Group.NATURE_EXPENSES, new JSONArray(),true, advSearchAttributes);
                paramJobj.remove("isCostOfGoodsSold");
                if (!isEndingCall) {
                    costofgoodsSoldTotal = goodsSoldAmount[0];
                } else {
                    costofgoodsSoldTotal = goodsSoldAmount[4];
                }
                if (!isEndingCall) {
                    costofgoodsSoldTotal += profitLossAmountCoGS[0];
                } else {
                    costofgoodsSoldTotal += profitLossAmountCoGS[4];
                }
                costofgoodsSoldTotal = authHandler.round((costofgoodsSoldTotal + (callFromBS ? 0.0 : invOpeBal) - invCloseBal), companyid);
                double grossprofit = ((-1 * cincometotal) - costofgoodsSoldTotal) * (-1);
                balance = ((grossprofit * (-1)) - dexpensetotal) * (-1);
            }
            double netProfitAndLossAmount = 0.0;
            if (closingAccountBalancesList.size() > 0 && startDate.after(closingEndDate)) {
                paramJobj.put("closingFilterFlag", true);
                paramJobj.put("closingStartDate", closingEndDate);
                paramJobj.put("closingEndDate", startDate);
                double tradingAmount3[] = getTrading(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true, advSearchAttributes);
                double tradingAmount4[] = getTrading(paramJobj, Group.NATURE_INCOME, new JSONArray(), true, advSearchAttributes);
                
                double profitLossAmount3[] = getProfitLoss(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true, advSearchAttributes);
                double profitLossAmount4[] = getProfitLoss(paramJobj, Group.NATURE_INCOME, new JSONArray(), true, advSearchAttributes);
                
                balance += tradingAmount3[0] + tradingAmount4[0] + profitLossAmount3[0] + profitLossAmount4[0];
            }
            Account accountProfitAndLoss = null;
            if (!StringUtil.isNullOrEmpty(accname1)) {
                paramJobj.put("isPeriod", isPeriod); // set to exclude opening balance while calculating period balance
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                if (!StringUtil.isNullOrEmpty(extrapref.getProfitLossAccountId())) {
                    filter_names.add("ID");
                    filter_params.add(extrapref.getProfitLossAccountId());
                }
                requestParams.put("filter_names", filter_names);
                requestParams.put("filter_params", filter_params);
                KwlReturnObject venresult = accAccountDAOobj.getAccount(requestParams);
                if (!venresult.getEntityList().isEmpty()) {
                    accountProfitAndLoss = (Account) venresult.getEntityList().get(0);
                    netProfitAndLossAmount = netProfitAndLossAmount * (-1);//to match the conventions of balance (-bal---profit +bal Loss) 
                    netProfitAndLossAmount += getAccountBalanceWithOutClosing(paramJobj, accountProfitAndLoss.getID(), startDate, endDate, advSearchAttributes);
                    balance = balance + netProfitAndLossAmount;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        balance = authHandler.round(balance, companyid);
        return balance;
    }
                
    /**
     * This method is used to get the Net Profit/Loss for Balance Sheet Report and Year End Closing.
     * @param paramJobj
     * @param startDate
     * @param endDate
     * @param start
     * @param isOpeningFlag
     * @param periodView
     * @param isPeriod
     * @param stockValuationFlag
     * @return double[] At 0th index, it returns the profit and loss for the
     * previously closed year. At 1st index, it will return the profit and loss
     * after the closed year till the enddate.
     */
    @Deprecated
    public double[] calculateProfitLossForTrialBalance(JSONObject paramJobj, Date startDate, Date endDate, Date start, boolean isOpeningFlag, boolean periodView, boolean isPeriod, boolean stockValuationFlag, MutableDouble[] valuationObj, Map<String, Object> advSearchAttributes) {
        double profitloss = 0;
        double closedyearprofitloss = 0;
        double[] profitAndLossList = {0, 0};
        try {
            String companyid = (String) paramJobj.get(Constants.companyKey);
            KwlReturnObject kresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) kresult.getEntityList().get(0);
            if (isOpeningFlag) {
                paramJobj.put("startDate", preferences.getBookBeginningFrom());
                paramJobj.put("endDate", start);
            } else {
                paramJobj.put("startDate", startDate);
                paramJobj.put("endDate", endDate);
            }
            Calendar endFinYearCal = Calendar.getInstance();
            Calendar startFinYearCal = Calendar.getInstance();
            YearLock yearLock = null;
            boolean isBookClosed = false;
            JSONObject closingJSON = new JSONObject();
            Date excludedPreviousYearDate = getDateForExcludePreviousYearBalanceFilter(companyid, startDate);
            excludedPreviousYearDate = new DateTime(excludedPreviousYearDate).minusDays(1).toDate();
            if (isOpeningFlag) {
                int yearid = excludedPreviousYearDate.getYear() + 1900;
                KwlReturnObject maxYearLockDetailResult = accCompanyPreferencesObj.getMaxYearLockDetails(companyid, yearid);
                if (maxYearLockDetailResult != null && maxYearLockDetailResult.getEntityList() != null && !maxYearLockDetailResult.getEntityList().isEmpty()) {
                    String yearlockid = (String) maxYearLockDetailResult.getEntityList().get(0);
                    if (!StringUtil.isNullOrEmpty(yearlockid)) {
                        KwlReturnObject ylresult = accountingHandlerDAOobj.getObject(YearLock.class.getName(), yearlockid);
                        yearLock = (YearLock) ylresult.getEntityList().get(0);
                        if (yearLock != null && yearLock.isIsLock()) {
                            startFinYearCal.setTime(preferences.getFirstFinancialYearFrom() != null ? preferences.getFirstFinancialYearFrom() : preferences.getFinancialYearFrom());
                            endFinYearCal.set(Calendar.YEAR, yearLock.getYearid() + 1);
                            endFinYearCal.set(Calendar.MONTH, startFinYearCal.get(Calendar.MONTH));
                            endFinYearCal.set(Calendar.DAY_OF_MONTH, startFinYearCal.get(Calendar.DAY_OF_MONTH) - 1);
                            if (DateUtils.isSameDay(authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())), excludedPreviousYearDate) || authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())).before(excludedPreviousYearDate)) {                                
                                closingJSON.put("yearlockid", yearlockid);
                                closingJSON.put("yearid", yearLock.getYearid());
                                if (stockValuationFlag) {
                                    closingJSON.put("netProfitAndLossWithStock", true);
                                } else {
                                    closingJSON.put("netProfitAndLossWithOutStock", true);
                                }
                                List<ClosingAccountBalance> closingAccountBalances = accCompanyPreferencesObj.getClosingAccountBalance(closingJSON);
                                if (closingAccountBalances != null && !closingAccountBalances.isEmpty()) {
                                    ClosingAccountBalance netProfitAndLoss = closingAccountBalances.get(0);
                                    if (netProfitAndLoss != null) {
                                        profitloss = netProfitAndLoss.getAmount();
                                        closedyearprofitloss = netProfitAndLoss.getAmount();
                                        Date stDate = authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime()));
                                        Calendar std = Calendar.getInstance();
                                        std.setTime(stDate);
                                        std.add(Calendar.DATE, 1);
                                        paramJobj.put("startDate", std.getTime());
                                        if (preferences.getBookBeginningFrom() != null && stDate.after(preferences.getBookBeginningFrom())) {
                                            isBookClosed = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                   
                }
            } 
            paramJobj.put("periodView", periodView);
            paramJobj.put("isPeriod", isPeriod);
            paramJobj.put("isForTradingAndProfitLoss", true);
//            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            double tradingAmount1[] = getTrading(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true, advSearchAttributes);
            double tradingAmount2[] = getTrading(paramJobj, Group.NATURE_INCOME, new JSONArray(), true, advSearchAttributes);
            double totalIncome = 0.0, totalExpense = 0.0;
            totalIncome = tradingAmount2[0];
            totalExpense = tradingAmount1[0];
            double profitLossAmount1[] = getProfitLoss(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true, advSearchAttributes);
            double profitLossAmount2[] = getProfitLoss(paramJobj, Group.NATURE_INCOME, new JSONArray(), true, advSearchAttributes);
            totalIncome += profitLossAmount2[0];
            totalExpense += profitLossAmount1[0];
//            request.setAttribute("isCostOfGoodsSold", true);
            paramJobj.put("isCostOfGoodsSold", true);
            
            double goodsSoldAmount[] = getTrading(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true, advSearchAttributes);
            double profitLossAmountCoGS[] = getProfitLoss(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true, advSearchAttributes);
            
//            request.removeAttribute("isCostOfGoodsSold");
            paramJobj.remove("isCostOfGoodsSold");
//            request.removeAttribute("isForTradingAndProfitLoss");
            paramJobj.remove("isForTradingAndProfitLoss");
            double costofgoodsSoldTotal = 0.0;
            costofgoodsSoldTotal = goodsSoldAmount[0];
            costofgoodsSoldTotal += profitLossAmountCoGS[0];
            HashMap<String, Object> requestParam = new HashMap<String, Object>();
            if (paramJobj.has("searchJson") && !StringUtil.isNullOrEmpty(paramJobj.optString("searchJson"))) {
                requestParam.put("searchJson", paramJobj.optString("searchJson"));
            }
            if (paramJobj.has("filterConjuctionCriteria") && !StringUtil.isNullOrEmpty(paramJobj.optString("filterConjuctionCriteria"))) {
                requestParam.put("filterConjuctionCriteria", paramJobj.optString("filterConjuctionCriteria"));
            }
            Date reqParamStartDate = null;
            Date reqParamEndDate = null;
            double invOpeBal = 0, invCloseBal = 0.0, closeStock = 0.0;
            boolean isMRPActivated = accCompanyPreferencesObj.isMRPModuleActivated(companyid);
            if (stockValuationFlag && !(isMRPActivated || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {  // Do not calculate opening stock if MRP module is activated
                if (isOpeningFlag) {
                    requestParam.put(Constants.REQ_startdate, preferences.getBookBeginningFrom() != null ? authHandler.getDateOnlyFormat().format(preferences.getBookBeginningFrom()) : "");
                    requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(start));
                    reqParamStartDate = preferences.getBookBeginningFrom();
                    reqParamEndDate = start;
                    if (DateUtils.isSameDay(authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())), excludedPreviousYearDate) || authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())).before(excludedPreviousYearDate)) {                                
                        if (yearLock != null) {
                            closingJSON = new JSONObject();
                            closingJSON.put("yearlockid", yearLock.getID());
                            closingJSON.put("yearid", yearLock.getYearid());
                            closingJSON.put("stockInHand", true);
                            List<ClosingAccountBalance> closingAccountBalances = accCompanyPreferencesObj.getClosingAccountBalance(closingJSON);
                            if (closingAccountBalances != null && !closingAccountBalances.isEmpty()) {
                                ClosingAccountBalance stockInHand = closingAccountBalances.get(0);
                                if (stockInHand != null) {
//                                closeStock = stockInHand.getAmount();
                                    Date stDate = authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime()));
                                    Calendar std = Calendar.getInstance();
                                    std.setTime(stDate);
                                    std.add(Calendar.DATE, 1);
                                    requestParam.put(Constants.REQ_startdate, authHandler.getDateOnlyFormat().format(std.getTime()));
                                    reqParamStartDate = std.getTime();                    
                                }
                            }
                        }
                    }
                } else {
                    requestParam.put(Constants.REQ_startdate, authHandler.getDateOnlyFormat().format(startDate));
                    requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(endDate));
                    reqParamStartDate = startDate;
                    reqParamEndDate = endDate;
                }
                requestParam.put(Constants.companyKey, companyid);
                requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                Date tempStartDate = null;
                Date tempEndDate = null;
                if (paramJobj.optString("jasperreport").equals("JasperReport")) {
                    /*
                     Dates used for monthly balance sheet
                     */
                    
                    startDate = authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format((Date) paramJobj.opt("jaspersdate")));
                    endDate = authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format((Date) paramJobj.opt("jasperenddate")));
                } else if (!StringUtil.isNullOrEmpty(paramJobj.optString("stdate", "")) && !StringUtil.isNullOrEmpty(paramJobj.optString("enddate", ""))) {
                    tempStartDate = authHandler.getDateOnlyFormat().parse(paramJobj.getString("stdate"));
                    tempEndDate = authHandler.getDateOnlyFormat().parse(paramJobj.getString("enddate"));
                }
                
                if(valuationObj !=null && reqParamEndDate!=null && reqParamStartDate!=null && tempEndDate!=null && tempStartDate!=null && reqParamStartDate == tempStartDate && reqParamEndDate == tempEndDate){
                    invOpeBal = valuationObj[2].doubleValue();
                    invCloseBal = valuationObj[5].doubleValue();
                }
                else{
                    double[] valuation = AccProductService.getInventoryValuationDataForFinancialReports(requestParam);
                    invOpeBal = valuation[2];
                    invCloseBal = valuation[5];
                }
                
            }

            costofgoodsSoldTotal = authHandler.round((costofgoodsSoldTotal + invOpeBal - invCloseBal), companyid);
            double grossprofit = ((-1 * totalIncome) - costofgoodsSoldTotal) * (-1);
            profitloss = ((grossprofit * (-1)) - totalExpense) * (-1);
            if (isOpeningFlag && !isBookClosed) {
                double[] balances = {0, 0};
                KwlReturnObject accresult = accAccountDAOobj.getAccountDatewise(companyid, periodView ? new Date(1970) : startDate, endDate, true);// "true" as onlyPnLAccounts -> Get Only Accounts
                List<Account> list = accresult.getEntityList();
                int templatecode = (StringUtil.isNullOrEmpty(paramJobj.optString("templatecode", null))) ? -1 : Integer.parseInt(paramJobj.getString("templatecode"));
                for (Account account : list) {
                    /* Add Opening Balance of P&L type of accounts in Net Profit/Loss*/
                    if ((templatecode == -1) || (account.getTemplatepermcode() != null && account.getTemplatepermcode() != 0 && ((templatecode & account.getTemplatepermcode()) == templatecode))) {
                        double accountOpeningBalance = accInvoiceCommon.getOpeningBalanceOfAccountJson(paramJobj, account, false, null);
                        double bal = accountOpeningBalance;
                        if (bal > 0) {
                            balances[0] += bal;
                        } else if (bal < 0) {
                            balances[1] += bal;
                        }
                    }
                }
                double openingBalance = balances[0] + balances[1];
                profitloss += openingBalance;
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        profitAndLossList[0] = closedyearprofitloss;
        profitAndLossList[1] = profitloss;
        return profitAndLossList;
    }  
    
    @Override
    public Date calculateStartDateIfBookClosed(Date startDate, boolean stockValuationFlag, String companyid) throws ServiceException, JSONException, SessionExpiredException {
        KwlReturnObject kresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) kresult.getEntityList().get(0);
        Date finDate = preferences.getBookBeginningFrom();
        Calendar endFinYearCal = Calendar.getInstance();
        Calendar startFinYearCal = Calendar.getInstance();
        YearLock yearLock = null;
        JSONObject closingJSON = new JSONObject();
        Date excludedPreviousYearDate = getDateForExcludePreviousYearBalanceFilter(companyid, startDate);
        excludedPreviousYearDate = new DateTime(excludedPreviousYearDate).minusDays(1).toDate();
        int yearid = excludedPreviousYearDate.getYear() + 1900;
        KwlReturnObject maxYearLockDetailResult = accCompanyPreferencesObj.getMaxYearLockDetails(companyid, yearid);
        if (maxYearLockDetailResult != null && maxYearLockDetailResult.getEntityList() != null && !maxYearLockDetailResult.getEntityList().isEmpty()) {
            String yearlockid = (String) maxYearLockDetailResult.getEntityList().get(0);
            if (!StringUtil.isNullOrEmpty(yearlockid)) {
                KwlReturnObject ylresult = accountingHandlerDAOobj.getObject(YearLock.class.getName(), yearlockid);
                yearLock = (YearLock) ylresult.getEntityList().get(0);
                if (yearLock != null && yearLock.isIsLock()) {
                    try {
                        startFinYearCal.setTime(preferences.getFirstFinancialYearFrom() != null ? preferences.getFirstFinancialYearFrom() : preferences.getFinancialYearFrom());
                        endFinYearCal.set(Calendar.YEAR, yearLock.getYearid() + 1);
                        endFinYearCal.set(Calendar.MONTH, startFinYearCal.get(Calendar.MONTH));
                        endFinYearCal.set(Calendar.DAY_OF_MONTH, startFinYearCal.get(Calendar.DAY_OF_MONTH) - 1);
                        if (DateUtils.isSameDay(authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())), excludedPreviousYearDate) || authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())).before(excludedPreviousYearDate)) {
                            closingJSON.put("yearlockid", yearlockid);
                            closingJSON.put("yearid", yearLock.getYearid());
                            if (stockValuationFlag) {
                                closingJSON.put("netProfitAndLossWithStock", true);
                            } else {
                                closingJSON.put("netProfitAndLossWithOutStock", true);
                            }
                            List<ClosingAccountBalance> closingAccountBalances = accCompanyPreferencesObj.getClosingAccountBalance(closingJSON);
                            if (closingAccountBalances != null && !closingAccountBalances.isEmpty()) {
                                ClosingAccountBalance netProfitAndLoss = closingAccountBalances.get(0);
                                if (netProfitAndLoss != null) {
                                    Date stDate = authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime()));
                                    Calendar std = Calendar.getInstance();
                                    std.setTime(stDate);
                                    std.add(Calendar.DATE, 1);
                                    finDate=std.getTime();
                                }
                            }
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        return finDate;
    }
    
    public double[] calculateProfitLossForTrialBalanceAllAccounts(JSONObject paramJobj, Date startDate, Date endDate, Date start, boolean isOpeningFlag, boolean periodView, boolean isPeriod, boolean stockValuationFlag,Map<String, Double> accAmtMap, Map<String, Object> extraObjects) {
        double profitloss = 0;
        double closedyearprofitloss = 0;
        double[] profitAndLossList = {0, 0};
        try {
            String companyid = (String) paramJobj.get(Constants.companyKey);
            KwlReturnObject kresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) kresult.getEntityList().get(0);
            Date tempStartDate = startDate;
        if (isOpeningFlag) {
            paramJobj.put("startDate", preferences.getBookBeginningFrom());
            tempStartDate = preferences.getBookBeginningFrom();
            paramJobj.put("endDate", start);
        } else {
            paramJobj.put("startDate", startDate);
            paramJobj.put("endDate", endDate);
        }
        Calendar endFinYearCal = Calendar.getInstance();
        Calendar startFinYearCal = Calendar.getInstance();
            YearLock yearLock = null;
        boolean isBookClosed = false;
            JSONObject closingJSON = new JSONObject();
            Date currentYearFYStartDate = getDateForExcludePreviousYearBalanceFilter(companyid, startDate);
        Date excludedPreviousYearDate = getDateForExcludePreviousYearBalanceFilter(companyid, startDate);
        excludedPreviousYearDate = new DateTime(excludedPreviousYearDate).minusDays(1).toDate();
        if (isOpeningFlag) {
            int yearid = excludedPreviousYearDate.getYear() + 1900;
            KwlReturnObject maxYearLockDetailResult = accCompanyPreferencesObj.getMaxYearLockDetails(companyid, yearid);
            if (maxYearLockDetailResult != null && maxYearLockDetailResult.getEntityList() != null && !maxYearLockDetailResult.getEntityList().isEmpty()) {
                String yearlockid = (String) maxYearLockDetailResult.getEntityList().get(0);
                if (!StringUtil.isNullOrEmpty(yearlockid)) {
                    KwlReturnObject ylresult = accountingHandlerDAOobj.getObject(YearLock.class.getName(), yearlockid);
                    yearLock = (YearLock) ylresult.getEntityList().get(0);
                    if (yearLock != null && yearLock.isIsLock()) {
                        startFinYearCal.setTime(preferences.getFirstFinancialYearFrom() != null ? preferences.getFirstFinancialYearFrom() : preferences.getFinancialYearFrom());
                        endFinYearCal.set(Calendar.YEAR, yearLock.getYearid() + 1);
                        endFinYearCal.set(Calendar.MONTH, startFinYearCal.get(Calendar.MONTH));
                        endFinYearCal.set(Calendar.DAY_OF_MONTH, startFinYearCal.get(Calendar.DAY_OF_MONTH) - 1);
                        if (DateUtils.isSameDay(authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())), excludedPreviousYearDate) || authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())).before(excludedPreviousYearDate)) {
                            closingJSON.put("yearlockid", yearlockid);
                            closingJSON.put("yearid", yearLock.getYearid());
                            if (stockValuationFlag) {
                                closingJSON.put("netProfitAndLossWithStock", true);
                            } else {
                                closingJSON.put("netProfitAndLossWithOutStock", true);
                            }
                            List<ClosingAccountBalance> closingAccountBalances = accCompanyPreferencesObj.getClosingAccountBalance(closingJSON);
                            if (closingAccountBalances != null && !closingAccountBalances.isEmpty()) {
                                ClosingAccountBalance netProfitAndLoss = closingAccountBalances.get(0);
                                if (netProfitAndLoss != null) {
                                    profitloss = netProfitAndLoss.getAmount();
                                    closedyearprofitloss = netProfitAndLoss.getAmount();
                                    Date stDate = authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime()));
                                    Calendar std = Calendar.getInstance();
                                    std.setTime(stDate);
                                    std.add(Calendar.DATE, 1);
                                    paramJobj.put("startDate", std.getTime());
                                    tempStartDate = std.getTime();
                                    if (preferences.getBookBeginningFrom() != null && stDate.after(preferences.getBookBeginningFrom())) {
                                        isBookClosed = true;
                                    }
                                }
                            }
                        }
                    }
                }

            }
        }
            if(accAmtMap == null){
                accAmtMap = new HashMap<String, Double>();
                Map<String, Object> requestParamsAccount = (Map<String, Object>) extraObjects.get("requestParamsAccount");
                if(isBookClosed){
                    requestParamsAccount.put("startdate", tempStartDate);
                    requestParamsAccount.put("enddate", start);
                    requestParamsAccount.put("accounttype", 0);
                    accAmtMap.putAll(getPeriodAccountAmountMap(requestParamsAccount));    
                }
                else{
                    boolean isTrialBalance = false;
                    if(extraObjects.containsKey("isTrialBalance")){
                        isTrialBalance = (Boolean) extraObjects.get("isTrialBalance");
                    }
                    if(isTrialBalance){
                        requestParamsAccount.put("accountstartdate", new Date(1970));
                        requestParamsAccount.put("accountenddate", start);
//                        requestParamsAccount.put("startdate", start);
                         requestParamsAccount.put("startdate", currentYearFYStartDate);
                    } else {
                        requestParamsAccount.put("startdate", startDate);
                    }
                    
                    requestParamsAccount.put("isBookClosed", isBookClosed);
                    requestParamsAccount.put("isTrialBalance", isTrialBalance);
                    accAmtMap.putAll(getOpeningAccountAmountMap(requestParamsAccount));
                }
//                }
                extraObjects.put("requestParamsAccount", requestParamsAccount);
            }
            paramJobj.put("periodView", periodView);
            paramJobj.put("isPeriod", isPeriod);
            paramJobj.put("isForTradingAndProfitLoss", true);
//            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            int index=3;
            // In case of opening flag always take ending amount whereas not opening should take only period amount
            if(isOpeningFlag){
                index=4;
            }
            
            double tradingAmount1[] = getTradingAllAccount(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), accAmtMap, extraObjects);
            double tradingAmount2[] = getTradingAllAccount(paramJobj, Group.NATURE_INCOME, new JSONArray(), accAmtMap, extraObjects);
            double totalIncome = 0.0, totalExpense = 0.0;
            totalIncome = tradingAmount2[index];
            totalExpense = tradingAmount1[index];
            double profitLossAmount1[] = getProfitLossAllAccounts(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true, accAmtMap, extraObjects);
            double profitLossAmount2[] = getProfitLossAllAccounts(paramJobj, Group.NATURE_INCOME, new JSONArray(), true, accAmtMap, extraObjects);
            totalIncome += profitLossAmount2[index];
            totalExpense += profitLossAmount1[index];
//            request.setAttribute("isCostOfGoodsSold", true);
            paramJobj.put("isCostOfGoodsSold", true);
            
            double goodsSoldAmount[] = getTradingAllAccount(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), accAmtMap, extraObjects);
            double profitLossAmountCoGS[] = getProfitLossAllAccounts(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true, accAmtMap, extraObjects);
            
//            request.removeAttribute("isCostOfGoodsSold");
            paramJobj.remove("isCostOfGoodsSold");
//            request.removeAttribute("isForTradingAndProfitLoss");
            paramJobj.remove("isForTradingAndProfitLoss");
            double costofgoodsSoldTotal = 0.0;
            costofgoodsSoldTotal = goodsSoldAmount[index];
            costofgoodsSoldTotal += profitLossAmountCoGS[index];
            HashMap<String, Object> requestParam = new HashMap<String, Object>();
            if (paramJobj.optString("DimensionBasedComparisionReport", "").equals("DimensionBasedComparisionReport")) {
                requestParam.put("searchJson", paramJobj.optString("DimensionBasedSearchJson"));
            } else if (paramJobj.has("searchJson") && !StringUtil.isNullOrEmpty(paramJobj.optString("searchJson"))) {
                requestParam.put("searchJson", paramJobj.optString("searchJson"));
            }
            if (paramJobj.has("filterConjuctionCriteria") && !StringUtil.isNullOrEmpty(paramJobj.optString("filterConjuctionCriteria"))) {
                requestParam.put("filterConjuctionCriteria", paramJobj.optString("filterConjuctionCriteria"));
            }
            Date reqParamStartDate = null;
            Date reqParamEndDate = null;
            double invOpeBal = 0, invCloseBal = 0.0, closeStock = 0.0;
            boolean isMRPActivated = accCompanyPreferencesObj.isMRPModuleActivated(companyid);
            if (stockValuationFlag && !(isMRPActivated || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {  // Do not calculate opening stock if MRP module is activated
                if (isOpeningFlag) {
                    requestParam.put(Constants.REQ_startdate, preferences.getBookBeginningFrom() != null ? authHandler.getDateOnlyFormat().format(preferences.getBookBeginningFrom()) : "");
                    requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(start));
                    reqParamStartDate = preferences.getBookBeginningFrom();
                    reqParamEndDate = start;
                    if (DateUtils.isSameDay(authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())), excludedPreviousYearDate) || authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())).before(excludedPreviousYearDate)) {                                
                        if (yearLock != null) {
                            closingJSON = new JSONObject();
                            closingJSON.put("yearlockid", yearLock.getID());
                            closingJSON.put("yearid", yearLock.getYearid());
                            closingJSON.put("stockInHand", true);
                            List<ClosingAccountBalance> closingAccountBalances = accCompanyPreferencesObj.getClosingAccountBalance(closingJSON);
                            if (closingAccountBalances != null && !closingAccountBalances.isEmpty()) {
                                ClosingAccountBalance stockInHand = closingAccountBalances.get(0);
                                if (stockInHand != null) {
//                                closeStock = stockInHand.getAmount();
                                    Date stDate = authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime()));
                                    Calendar std = Calendar.getInstance();
                                    std.setTime(stDate);
                                    std.add(Calendar.DATE, 1);
                                    requestParam.put(Constants.REQ_startdate, authHandler.getDateOnlyFormat().format(std.getTime()));
                                    reqParamStartDate = std.getTime();                    
                                }
                            }
                        }
                    }
                } else {
                    requestParam.put(Constants.REQ_startdate, authHandler.getDateOnlyFormat().format(startDate));
                    requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(endDate));
                    reqParamStartDate = startDate;
                    reqParamEndDate = endDate;
                }
                requestParam.put(Constants.companyKey, companyid);
                requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                    
                double[] valuation = {0, 0, 0, 0, 0, 0};
                Map<String, Map> stockDateMap = null;
                String startTemp = null;
                String endTemp = null;
                        
                if(extraObjects.containsKey("stockDateMap")){
                    stockDateMap = (Map<String, Map>) extraObjects.get("stockDateMap");
                    DateFormat sqlDF = new SimpleDateFormat("yyyy-MM-dd");
                    startTemp = sqlDF.format(authHandler.getDateOnlyFormat().parse((String) requestParam.get(Constants.REQ_startdate)));
                    endTemp = sqlDF.format(authHandler.getDateOnlyFormat().parse((String) requestParam.get(Constants.REQ_enddate)));                    
                }
                if (stockDateMap != null && stockDateMap.containsKey(startTemp + "-" + endTemp)) {
                        valuation = (double[]) stockDateMap.get(startTemp + "-" + endTemp).get("valuation");
                } else{
                 requestParam.put("gcurrencyid", paramJobj.getString("gcurrencyid"));
                 valuation = AccProductService.getInventoryValuationDataForFinancialReports(requestParam);
                }
                    invOpeBal = valuation[2];
                    invCloseBal = valuation[5];
                }
                
            costofgoodsSoldTotal = authHandler.round((costofgoodsSoldTotal + invOpeBal - invCloseBal), companyid);
            double grossprofit = ((-1 * totalIncome) - costofgoodsSoldTotal) * (-1);
            profitloss = ((grossprofit * (-1)) - totalExpense) * (-1);
//            if (isOpeningFlag && !isBookClosed) {
//                double[] balances = {0, 0};
//                KwlReturnObject accresult = accAccountDAOobj.getAccountDatewise(companyid, periodView ? new Date(1970) : startDate, endDate, true);// "true" as onlyPnLAccounts -> Get Only Accounts
//                List<Account> list = accresult.getEntityList();
//                int templatecode = (StringUtil.isNullOrEmpty(paramJobj.optString("templatecode", null))) ? -1 : Integer.parseInt(paramJobj.getString("templatecode"));
//                for (Account account : list) {
//                    /* Add Opening Balance of P&L type of accounts in Net Profit/Loss*/
//                    if ((templatecode == -1) || (account.getTemplatepermcode() != null && account.getTemplatepermcode() != 0 && ((templatecode & account.getTemplatepermcode()) == templatecode))) {
//                        double accountOpeningBalance = accInvoiceCommon.getOpeningBalanceOfAccountJson(paramJobj, account, false, null);
//                        double bal = accountOpeningBalance;
//                        if (bal > 0) {
//                            balances[0] += bal;
//                        } else if (bal < 0) {
//                            balances[1] += bal;
//                        }
//                    }
//                }
//                double openingBalance = balances[0] + balances[1];
//                profitloss += openingBalance;
//            }
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        profitAndLossList[0] = closedyearprofitloss;
        profitAndLossList[1] = profitloss;
        return profitAndLossList;
    }  
    
  @Override  
    public String getSearchJsonByModule(HashMap<String, Object> requestParams) throws SessionExpiredException, UnsupportedEncodingException {
        JSONObject resultObj = null;
        JSONArray dataJArrObj = new JSONArray();
        boolean removeProductCustomFilter = false;   //Default true
        if (requestParams.containsKey("removeProductCustomFilter")) {
            removeProductCustomFilter = Boolean.parseBoolean(requestParams.get("removeProductCustomFilter").toString());
        }
        String Searchjson =  requestParams.get(Constants.Acc_Search_Json).toString();
        String filterCriteria = requestParams.get(Constants.Filter_Criteria).toString();
        String companyid = requestParams.get(Constants.companyKey)!=null? requestParams.get(Constants.companyKey).toString() : "";
        int moduleid = requestParams.get(Constants.moduleid)!=null? Integer.parseInt(requestParams.get(Constants.moduleid).toString()): 0;
        try{
            JSONObject jObj = new JSONObject(Searchjson);
            if(!StringUtil.isNullOrEmpty(Searchjson) && !StringUtil.isNullOrEmpty(filterCriteria) && moduleid!=0){
                int count = jObj.getJSONArray(Constants.root).length();
                for (int i = 0; i < count; i++) {
                    JSONObject jobj1 = jObj.getJSONArray(Constants.root).getJSONObject(i);
                    boolean mastersearch=false;
                    int mastermoduleid = 0;
                    if(jobj1.optString(Constants.moduleid).equalsIgnoreCase(""+Constants.Acc_Customer_ModuleId)){
                        mastersearch=true;
                        mastermoduleid = Constants.Acc_Customer_ModuleId;
                    } else if(jobj1.optString(Constants.moduleid).equalsIgnoreCase(""+Constants.Acc_Vendor_ModuleId)){
                        mastersearch=true;
                        mastermoduleid = Constants.Acc_Vendor_ModuleId;
                    }
                    if(removeProductCustomFilter && jobj1.optBoolean("isfrmpmproduct",false)){
                        jobj1.put("isfrmpmproduct", false);
                    }
                    if(((jobj1.getString("fieldtype").equalsIgnoreCase("4") || jobj1.getString("fieldtype").equalsIgnoreCase("7") || jobj1.getString("fieldtype").equalsIgnoreCase("12")) && jobj1.optString("xtype","").equalsIgnoreCase("select")) && !mastersearch){
                        String fieldlabel = jobj1.get("columnheader")!=null? jobj1.get("columnheader").toString() : "";
                        fieldlabel = StringUtil.DecodeText(fieldlabel);
                        String searchText = jobj1.get("combosearch")!=null? jobj1.get("combosearch").toString() : "";
                        searchText =StringUtil.DecodeText(searchText);

                        KwlReturnObject result = null;
                        HashMap<String, Object> reqPar = new HashMap<String, Object>();
                        reqPar.put("filter_names", Arrays.asList(Constants.companyKey, "fieldlabel"));
                        reqPar.put("filter_values", Arrays.asList(companyid, fieldlabel));
                        reqPar.put(Constants.moduleid, mastersearch?mastermoduleid:moduleid);
                        result = accAccountDAOobj.getFieldParams(reqPar);
                        List lst = result.getEntityList();
                        Iterator ite = lst.iterator();
                        while (ite.hasNext()) {
                            FieldParams tmpcontyp = new FieldParams();
                            tmpcontyp = (FieldParams) ite.next();
                            String fieldid = tmpcontyp.getId();
                            int columnNo=tmpcontyp.getColnum();
                            jobj1.remove("column");
                            jobj1.put("column",fieldid);
                            jobj1.remove("refdbname");
                            jobj1.put("refdbname","Col"+columnNo);
                            jobj1.remove("xfield");
                            jobj1.put("xfield", "Col"+columnNo);
                            jobj1.put("iscustomcolumndata", tmpcontyp.getCustomcolumn() == 1);
                            if (!mastersearch) {
                                jobj1.remove(Constants.moduleid);
                                jobj1.put(Constants.moduleid, tmpcontyp.getModuleid());
                            }

                            HashMap<String, Object> reqParams = new HashMap<String, Object>();
                            reqParams.put(Constants.filter_names, Arrays.asList("fieldid", FieldConstants.Crm_deleteflag));
                            reqParams.put(Constants.filter_values, Arrays.asList(fieldid, 0));
                            reqParams.put("searchText", searchText);
                            ArrayList order_by = new ArrayList();
                            ArrayList order_type = new ArrayList();
                            order_by.add("itemsequence");
                            order_type.add("asc");
                            reqParams.put("order_by", order_by);
                            reqParams.put("order_type", order_type);

                            KwlReturnObject result1 = accAccountDAOobj.getCustomCombodata(reqParams);
                            List lst1 = result1.getEntityList();
                            String comboDataIds = "";
                            Iterator ite1 = lst1.iterator();
                            while (ite1.hasNext()) {
                                Object[] row = (Object[]) ite1.next();
                                FieldComboData comboDataObj = (FieldComboData) row[0];
                                comboDataIds = comboDataIds + comboDataObj.getId() + ","; 
                            }
                            comboDataIds = comboDataIds.length()>0 ? comboDataIds.substring(0,comboDataIds.length()-1) : "";
                            jobj1.remove("searchText");
                            jobj1.remove("search");
                            jobj1.put("searchText",comboDataIds);   
                            jobj1.put("search",comboDataIds);   
                        }
                    }
                        dataJArrObj.put(jobj1);
                }
                jObj.put(Constants.root, dataJArrObj);
            } else {
                jObj = new JSONObject(Searchjson);
            }
            resultObj = jObj;
        }        
        catch (JSONException ex) {
            Logger.getLogger(AccReceiptServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return resultObj!=null ? resultObj.toString():"{}";
    }
    public String getCustomFieldAndDimensionData(String companyid, int moduleid, String recid, boolean isJEDetailId) throws UnsupportedEncodingException, ServiceException {
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1));
        fieldrequestParams.put("order_by", Arrays.asList("fieldlabel"));
        fieldrequestParams.put("order_type", Arrays.asList("asc"));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

        // ## Get Custom Field Data 
        Map<String, Object> variableMap = new HashMap<String, Object>();
        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
        if(isJEDetailId){
            Detailfilter_names.add(Constants.Acc_jedetailId);
        }else{
            Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
        }        
        Detailfilter_params.add(recid);
        invDetailRequestParams.put("filter_names", Detailfilter_names);
        invDetailRequestParams.put("filter_params", Detailfilter_params);
        
        KwlReturnObject idcustresult = accInvoiceDAOobj.getInvoiceDetailsCustomData(invDetailRequestParams);
        String valueForReportFinal = "";
        if (idcustresult.getEntityList().size() > 0) {
            AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustresult.getEntityList().get(0);
            AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
            variableMap = StringUtil.sortMapByKeyValue(variableMap);
            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                String coldata = varEntry.getValue() != null ? varEntry.getValue().toString() : "";
                String fieldName = "";
                fieldName = StringUtil.isNullOrEmpty(varEntry.getKey()) ? "" : varEntry.getKey().substring( 7, varEntry.getKey().length());
                String valueForReport = "";
                if (customFieldMap.containsKey(varEntry.getKey()) && coldata != null) {
                    try {
                        String[] valueData = coldata.split(",");
                        for (String value : valueData) {
                            KwlReturnObject resultFieldComboData = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), value);
                            if (!resultFieldComboData.getEntityList().isEmpty() && resultFieldComboData.getEntityList().get(0) != null) {
                                FieldComboData fieldComboData = (FieldComboData) resultFieldComboData.getEntityList().get(0);
                                if (fieldComboData != null) {
                                    valueForReport += fieldComboData.getValue() + ",";
                                }
                            }
                        }
                        if (valueForReport.length() > 1) {
                            valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                        }
                    } catch (Exception ex) {
                        valueForReport=coldata;
                    }
                } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                    DateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
                    DateFormat defaultDateFormat = new SimpleDateFormat(Constants.MMMMdyyyy);
                    Date dateFromDB = null;
                    try {
                        dateFromDB = defaultDateFormat.parse(coldata);
                        coldata = df2.format(dateFromDB);

                    } catch (Exception e) {
                    }
                    valueForReport = coldata;
                } else {
                    valueForReport = coldata!=null ? coldata : "";
                }
                valueForReportFinal += ( StringUtil.isNullOrEmpty(fieldName)?"": "<br>"+fieldName ) + " : " + (StringUtil.isNullOrEmpty(valueForReport)? "" : valueForReport);
            }
        }
        return valueForReportFinal;
    }
    // Method to fetch global level custom fields and dimensions

    public String getMultiEntityDimensionData(String companyid, int moduleid, String recid) throws UnsupportedEncodingException, ServiceException {
        HashMap<String, Object> fieldrequestParams = new HashMap();
        String value = "";
        Map<String, String> customFieldDataMap = new HashMap();
        
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield,"GSTConfigType"));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 0,Constants.GST_CONFIG_ISFORMULTIENTITY));
        fieldrequestParams.put("order_by", Arrays.asList("fieldlabel"));
        fieldrequestParams.put("order_type", Arrays.asList("asc"));
        
        customFieldDataMap = getDataForGlobalCustomFieldAndDimension(companyid, moduleid, recid, fieldrequestParams);
        for (Map.Entry<String, String> entry : customFieldDataMap.entrySet()) {
            value = entry.getValue();
        }
        return value;
    }
    
    public Map<String, String> getGlobalCustomFieldAndDimensionData(String companyid, int moduleid, String recid) throws UnsupportedEncodingException, ServiceException {
        HashMap<String, Object> fieldrequestParams = new HashMap();
        
        Map<String, String> customFieldDataMap = new HashMap();
        
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 0));
        fieldrequestParams.put("order_by", Arrays.asList("fieldlabel"));
        fieldrequestParams.put("order_type", Arrays.asList("asc"));
        
        customFieldDataMap = getDataForGlobalCustomFieldAndDimension(companyid,moduleid,recid,fieldrequestParams);

        return customFieldDataMap;
    }

    public Map<String, String> getDataForGlobalCustomFieldAndDimension(String companyid, int moduleid, String recid,HashMap<String, Object> fieldrequestParams) throws UnsupportedEncodingException, ServiceException {
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customFieldDataMap = new HashMap();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        // ## Get Custom Field Data 
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

        // ## Get Custom Field Data 
        Map<String, Object> variableMap = new HashMap<String, Object>();
        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
        Detailfilter_names.add(Constants.companyKey);
        Detailfilter_params.add(companyid);
        Detailfilter_names.add("journalentryId");
        Detailfilter_params.add(recid);
        Detailfilter_names.add("moduleId");
        Detailfilter_params.add(moduleid + "");
        invDetailRequestParams.put("filter_names", Detailfilter_names);
        invDetailRequestParams.put("filter_params", Detailfilter_params);
        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
        if (idcustresult.getEntityList().size() > 0) {
            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
            variableMap = StringUtil.sortMapByKeyValue(variableMap);
            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                String coldata = varEntry.getValue() != null ? varEntry.getValue().toString() : "";
                String fieldName = "";
                fieldName = StringUtil.isNullOrEmpty(varEntry.getKey()) ? "" : varEntry.getKey().substring( 7, varEntry.getKey().length());
                String valueForReport = "";
                if (customFieldMap.containsKey(varEntry.getKey()) && coldata != null) {
                    try {
                        String[] valueData = coldata.split(",");
                        for (String value : valueData) {
                            KwlReturnObject resultFieldComboData = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), value);
                            if (!resultFieldComboData.getEntityList().isEmpty() && resultFieldComboData.getEntityList().get(0) != null) {
                                FieldComboData fieldComboData = (FieldComboData) resultFieldComboData.getEntityList().get(0);
                                if (fieldComboData != null) {
                                    valueForReport += fieldComboData.getValue() + ",";
                                }
                            }
                        }
                        if (valueForReport.length() > 1) {
                            valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                        }
                    } catch (Exception ex) {
                        valueForReport=coldata;
                    }
                } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                    DateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
                    DateFormat defaultDateFormat = new SimpleDateFormat(Constants.MMMMdyyyy);
                    Date dateFromDB = null;
                    try {
                        dateFromDB = defaultDateFormat.parse(coldata);
                        coldata = df2.format(dateFromDB);

                    } catch (Exception e) {
                    }
                    valueForReport = coldata;
                } else {
                    valueForReport = coldata!=null ? coldata : "";
                }
                if (!StringUtil.isNullOrEmpty(fieldName) && !StringUtil.isNullOrEmpty(valueForReport)) {
                    customFieldDataMap.put(fieldName, valueForReport);
                }
            }
        }
        return customFieldDataMap;
    }

    // Method to fetch line level custom fields and dimensions
    public Map<String, String> getLineLevelCustomFieldAndDimensionData(String companyid, int moduleid, String recid, boolean isJEDetailId) throws UnsupportedEncodingException, ServiceException {
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customFieldDataMap = new HashMap();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 0));
        fieldrequestParams.put("order_by", Arrays.asList("fieldlabel"));
        fieldrequestParams.put("order_type", Arrays.asList("asc"));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

        // ## Get Custom Field Data 
        Map<String, Object> variableMap = new HashMap<String, Object>();
        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
        if(isJEDetailId){
            Detailfilter_names.add(Constants.Acc_jedetailId);
        }else{
            Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
        }        
        Detailfilter_params.add(recid);
        invDetailRequestParams.put("filter_names", Detailfilter_names);
        invDetailRequestParams.put("filter_params", Detailfilter_params);
        
        KwlReturnObject idcustresult = accInvoiceDAOobj.getInvoiceDetailsCustomData(invDetailRequestParams);
        String valueForReportFinal = "";
        if (idcustresult.getEntityList().size() > 0) {
            AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustresult.getEntityList().get(0);
            AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
            DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                        Date dateFromDB=null;
            variableMap = StringUtil.sortMapByKeyValue(variableMap);
            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                String coldata = varEntry.getValue() != null ? varEntry.getValue().toString() : "";
                String fieldName = "";
                fieldName = StringUtil.isNullOrEmpty(varEntry.getKey()) ? "" : varEntry.getKey().substring( 7, varEntry.getKey().length());
                String valueForReport = "";
                if (customFieldMap.containsKey(varEntry.getKey()) && coldata != null) {
                    try {
                        String[] valueData = coldata.split(",");
                        for (String value : valueData) {
                            KwlReturnObject resultFieldComboData = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), value);
                            if (!resultFieldComboData.getEntityList().isEmpty() && resultFieldComboData.getEntityList().get(0) != null) {
                                FieldComboData fieldComboData = (FieldComboData) resultFieldComboData.getEntityList().get(0);
                                if (fieldComboData != null) {
                                    valueForReport += fieldComboData.getValue() + ",";
                                }
                            }
                        }
                        if (valueForReport.length() > 1) {
                            valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                        }
                    } catch (Exception ex) {
                        valueForReport=coldata;
                    }
                } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                    DateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
                    try {
                        dateFromDB = defaultDateFormat.parse(coldata);
                        coldata = df2.format(dateFromDB);

                    } catch (Exception e) {
                    }
                    valueForReport = coldata;
                } else {
                    valueForReport = coldata!=null ? coldata : "";
                }
                if (!StringUtil.isNullOrEmpty(fieldName) && !StringUtil.isNullOrEmpty(valueForReport)) {
                    customFieldDataMap.put(fieldName, valueForReport);
                }
            }
        }
        return customFieldDataMap;
    }
    
    Map<String, String> getTransactionDetailsForInvoice(Map<String, Invoice> invoiceMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException{
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        DecimalFormat decimalFormat = new DecimalFormat("#,##0.00");
        Map<String, String> transDetMap = new HashMap<String, String>();
        if(isDescConfig){
            Invoice invoice = (Invoice) invoiceMap.get(entry.getID());
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            //Get Transaction Details by config
            classPathIDMap.put(Invoice.class.getName(), invoice.getID());
            String placeHolderDetails = "";
            JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            if (accountid.equals(cashAccount) || invoiceMap.get(entry.getID()).isCashtransaction()) {
                configJSON = getConfiguredTypeJSON(descJsonArr, 2);
            }
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Customer Info by config
            classPathIDMap.clear();
            classPathIDMap.put(Customer.class.getName(), invoice.getCustomer().getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 3);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Memo by config
            classPathIDMap.clear();
            classPathIDMap.put(Invoice.class.getName(), invoice.getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 4);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), invoice.getCustomer().getID());
            Customer customer =  (Customer)KWLCustomer.getEntityList().get(0);
            if (invoice != null) {
                placeHolderDetails="";
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("invoice.ID");
                filter_params.add(invoice.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
//                Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                for (InvoiceDetail detail : invoiceDetails) {
                    String transDetail = "";
                    if (detail.getInventory() != null) {
                        Inventory inventory =  null;;
                        Product prd =  null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        if (prd.getSalesAccount().getID().equals(accountid) || customer.getAccount().getID().equals(accountid) || cashAccount.equals(accountid)) {
                            classPathIDMap.clear();
                            classPathIDMap.put(Product.class.getName(), prd != null ? prd.getID() : "");
                            classPathIDMap.put(InvoiceDetail.class.getName(), detail.getID());
                            if(invoice.getCurrency()!=null){
                                classPathIDMap.put(KWLCurrency.class.getName(), invoice.getCurrency().getCurrencyID());
                            }
                            classPathIDMap.put("CUSTOMDATA", detail.getID());
                            double rate = invoice.isGstIncluded() ? detail.getRateincludegst() : detail.getRate();
                            double quantity = inventory.getQuantity();
                            double amount = (rate * quantity);
                            if (!invoice.isGstIncluded()) {// adding tax amount to the price only when gst is false
                                amount += detail.getRowTaxAmount() + detail.getRowTermTaxAmount();
                            }
                            if (detail.getDiscount() != null) { // subtracting discount amount
                                KwlReturnObject kwlDisc = accountingHandlerDAOobj.getObject(Discount.class.getName(), detail.getDiscount().getID());
                                Discount disc =  (Discount)kwlDisc.getEntityList().get(0);
                                amount -= disc.getDiscountValue();
                            }
                            classPathIDMap.put("TRANSACTION_AMOUNT", decimalFormat.format(amount));
                            configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                            transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Invoice_ModuleId, false);
                            transDetail = replaceNullPlaceHolders(transDetail);
                            transDetail = StringUtil.DecodeText(transDetail);
                            if (detail.getSalesJED() != null && jed.getID().equals(detail.getSalesJED().getID())) {
                                placeHolderDetails = transDetail;
                            }else{
                                placeHolderDetails += transDetail;
                            }
                            seqNo = configJSON.getInt("seq");
                            if (detail.getSalesJED() != null && jed.getID().equals(detail.getSalesJED().getID())) {
                                break;
                            }
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            transactionDetails+=getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander=transactionDetails.replaceAll("<br>", ", ");
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", customer.getID());
            transDetMap.put("madname", customer.getName());
            transDetMap.put("isVendor", "false");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        }else{
            if (accountid.equals(cashAccount) || invoiceMap.get(entry.getID()).isCashtransaction()) {
                transactionDetails = Constants.CASH_SALE + " - " + invoiceMap.get(entry.getID()).getInvoiceNumber();
                transactionDetailsForExpander = Constants.CASH_SALE + " - " + invoiceMap.get(entry.getID()).getInvoiceNumber();
            } else {
                transactionDetails = Constants.CUSTOMER_INVOICE + " - " + invoiceMap.get(entry.getID()).getInvoiceNumber();
                transactionDetailsForExpander = Constants.CUSTOMER_INVOICE + " - " + invoiceMap.get(entry.getID()).getInvoiceNumber();
            }
            Invoice invoice = (Invoice) invoiceMap.get(entry.getID());
            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), invoice.getCustomer().getID());
            Customer customer =  (Customer)KWLCustomer.getEntityList().get(0);
            transactionDetails += "<br>" + customer.getAcccode() + " - " + customer.getName();
            transactionDetailsForExpander += ", " + customer.getAcccode() + " - " + customer.getName();
            transactionDetails += invoice.getMemo().isEmpty() ? "" : "<br>" + invoice.getMemo();
            transactionDetailsForExpander += invoice.getMemo().isEmpty() ? "" : ", " + invoice.getMemo();
            if (invoice != null) {
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("invoice.ID");
                filter_params.add(invoice.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
//                Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                for (InvoiceDetail detail : invoiceDetails) {
                    if (detail.getInventory() != null) {
                        Inventory inventory =  null;;
                        Product prd =  null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        if (prd.getSalesAccount().getID().equals(accountid) || customer.getAccount().getID().equals(accountid) || cashAccount.equals(accountid)) {
                            String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                            prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                            prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                            prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                            double rate = invoice.isGstIncluded() ? detail.getRateincludegst() : detail.getRate();
                            double quantity = detail.getInventory().getQuantity();
                            double amount = (rate * quantity);
                            if (!invoice.isGstIncluded()) {// adding tax amount to the price only when gst is false
                                amount += detail.getRowTaxAmount() + detail.getRowTermTaxAmount();
                            }
                            if (detail.getDiscount() != null) { // subtracting discount amount
                                KwlReturnObject kwlDisc = accountingHandlerDAOobj.getObject(Discount.class.getName(), detail.getDiscount().getID());
                                Discount disc =  (Discount)kwlDisc.getEntityList().get(0);
                                amount -= disc.getDiscountValue();
                            }
                            String currencyCode = invoice.getCurrency() != null ? invoice.getCurrency().getCurrencyCode() : "";
                            prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                            if (detail.getSalesJED() != null && jed.getID().equals(detail.getSalesJED().getID())) {
                                lineLevelDetails = "<br>" + prdID + " - " + prdName + prdDesc + "<br>" + " Amount : " + currencyCode + " " + decimalFormat.format(amount);
                                lineLevelDetailsForExpander = ", " + prdID + " - " + prdName + prdDescForExpander + " Amount : " + currencyCode + " " + decimalFormat.format(amount);
                            } else {
                                lineLevelDetails += "<br>" + prdID + " - " + prdName + prdDesc + "<br>" + " Amount : " + currencyCode + " " + decimalFormat.format(amount);
                                lineLevelDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander + " Amount : " + currencyCode + " " + decimalFormat.format(amount);
                            }
                            String customColData = "", customColDataForExpander = "";
                            customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Invoice_ModuleId, detail.getID(), false);
                            lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                            customColDataForExpander = customColData;
                            customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                            lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                            if (detail.getSalesJED() != null && jed.getID().equals(detail.getSalesJED().getID())) {
                                break;
                            }
                        }
                    }
                }
                transactionDetails += lineLevelDetails;
                transactionDetailsForExpander += lineLevelDetailsForExpander;
            }
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", customer.getID());
            transDetMap.put("madname", customer.getName());
            transDetMap.put("isVendor", "false");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        }
        return transDetMap;
    }
    
    Map<String, String> getTransactionDetailsForInvoiceForGL(Invoice invoice, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        DecimalFormat decimalFormat = new DecimalFormat("#,##0.00");
        Map<String, String> transDetMap = new HashMap<String, String>();
        if (isDescConfig) {
//            Invoice invoice = (Invoice) invoiceMap.get(entry.getID());
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            //Get Transaction Details by config
            classPathIDMap.put(Invoice.class.getName(), invoice.getID());
            String placeHolderDetails = "";
            String lineLevelGSTCodes = "";
            String gstCode = invoice.getTax() == null ? "" : invoice.getTax().getTaxCode();
            boolean isDocLevelGST = !StringUtil.isNullOrEmpty(gstCode);
            JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            if (accountid.equals(cashAccount) || invoice.isCashtransaction()) {
                configJSON = getConfiguredTypeJSON(descJsonArr, 2);
            }
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Invoice_ModuleId, true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Customer Info by config
            classPathIDMap.clear();
            classPathIDMap.put(Customer.class.getName(), invoice.getCustomer().getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 3);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Invoice_ModuleId, true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Memo by config
            classPathIDMap.clear();
            classPathIDMap.put(Invoice.class.getName(), invoice.getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 4);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Invoice_ModuleId, true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), invoice.getCustomer().getID());
            Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
            String lineLevelCustomFieldData = "";
            if (invoice != null) {
                placeHolderDetails = "";
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("invoice.ID");
                filter_params.add(invoice.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
//                Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                for (InvoiceDetail detail : invoiceDetails) {
                    String transDetail = "";
                    String tempGSTCode = "";
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        String taxAccountId = detail.getTax() != null ? detail.getTax().getAccount().getID() : "";
                        if ((prd != null && prd.getSalesAccount().getID().equals(accountid)) || customer.getAccount().getID().equals(accountid) || cashAccount.equals(accountid) || taxAccountId.equals(accountid)) {
                            classPathIDMap.clear();
                            classPathIDMap.put(Product.class.getName(), prd != null ? prd.getID() : "");
                            classPathIDMap.put(InvoiceDetail.class.getName(), detail.getID());
                            if (invoice.getCurrency() != null) {
                                classPathIDMap.put(KWLCurrency.class.getName(), invoice.getCurrency().getCurrencyID());
                            }
                            classPathIDMap.put("CUSTOMDATA", detail.getID());
                            double rate = invoice.isGstIncluded() ? detail.getRateincludegst() : detail.getRate();
                            double quantity = inventory.getQuantity();
                            double amount = (rate * quantity);
                            if (!invoice.isGstIncluded()) {// adding tax amount to the price only when gst is false
                                amount += detail.getRowTaxAmount() + detail.getRowTermTaxAmount();
                            }
                            if (detail.getDiscount() != null) { // subtracting discount amount
                                KwlReturnObject kwlDisc = accountingHandlerDAOobj.getObject(Discount.class.getName(), detail.getDiscount().getID());
                                Discount disc = (Discount) kwlDisc.getEntityList().get(0);
                                amount -= disc.getDiscountValue();
                            }
                            classPathIDMap.put("TRANSACTION_AMOUNT", decimalFormat.format(amount));
                            configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                            transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Invoice_ModuleId, false);
                            transDetail = replaceNullPlaceHolders(transDetail);
                            transDetail = StringUtil.DecodeText(transDetail);
                            //Get line level Dimension Data
                            Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Invoice_ModuleId, detail.getID(), false);
                            lineLevelCustomFieldData = customFieldData.toString();
                            tempGSTCode = detail.getTax()==null ? "" : detail.getTax().getTaxCode();
                            if ((detail.getSalesJED() != null && jed.getID().equals(detail.getSalesJED().getID())) || (detail.getGstJED() != null && detail.getGstJED().getID().equals(jed.getID()))) {
                                placeHolderDetails = transDetail;
                                lineLevelGSTCodes = tempGSTCode;
                                break;
                            } else {
                                placeHolderDetails += transDetail;
                                if(!StringUtil.isNullOrEmpty(tempGSTCode)){
                                    if (!StringUtil.isNullOrEmpty(lineLevelGSTCodes)) {
                                        lineLevelGSTCodes += ", " + tempGSTCode;
                                    } else {
                                        lineLevelGSTCodes += tempGSTCode;
                                    }
                                }
                            }
                            seqNo = configJSON.getInt("seq");
                            if (detail.getSalesJED() != null && jed.getID().equals(detail.getSalesJED().getID())) {
                                break;
                            }
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            transactionDetails += getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander = transactionDetails.replaceAll("<br>", ", ");
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", customer.getID());
            transDetMap.put("madname", customer.getName());
            transDetMap.put("isVendor", "false");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
            transDetMap.put("gstCode", isDocLevelGST?gstCode:lineLevelGSTCodes);
            transDetMap.put("lineLevelCustomFieldData", lineLevelCustomFieldData);
        } else {
            if (accountid.equals(cashAccount) || invoice.isCashtransaction()) {
                transactionDetails = Constants.CASH_SALE + " - " + invoice.getInvoiceNumber();
                transactionDetailsForExpander = Constants.CASH_SALE + " - " + invoice.getInvoiceNumber();
            } else {
                transactionDetails = Constants.CUSTOMER_INVOICE + " - " + invoice.getInvoiceNumber();
                transactionDetailsForExpander = Constants.CUSTOMER_INVOICE + " - " + invoice.getInvoiceNumber();
            }
//            Invoice invoice = (Invoice) invoiceMap.get(entry.getID());
            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), invoice.getCustomer().getID());
            Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
            transactionDetails += "<br>" + customer.getAcccode() + " - " + customer.getName();
            transactionDetailsForExpander += ", " + customer.getAcccode() + " - " + customer.getName();
            transactionDetails += invoice.getMemo().isEmpty() ? "" : "<br>" + invoice.getMemo();
            transactionDetailsForExpander += invoice.getMemo().isEmpty() ? "" : ", " + invoice.getMemo();
            if (invoice != null) {
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("invoice.ID");
                filter_params.add(invoice.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
//                Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                for (InvoiceDetail detail : invoiceDetails) {
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        if (prd.getSalesAccount().getID().equals(accountid) || customer.getAccount().getID().equals(accountid) || cashAccount.equals(accountid)) {
                            String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                            prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                            prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                            prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                            double rate = invoice.isGstIncluded() ? detail.getRateincludegst() : detail.getRate();
                            double quantity = detail.getInventory().getQuantity();
                            double amount = (rate * quantity);
                            if (!invoice.isGstIncluded()) {// adding tax amount to the price only when gst is false
                                amount += detail.getRowTaxAmount() + detail.getRowTermTaxAmount();
                            }
                            if (detail.getDiscount() != null) { // subtracting discount amount
                                KwlReturnObject kwlDisc = accountingHandlerDAOobj.getObject(Discount.class.getName(), detail.getDiscount().getID());
                                Discount disc = (Discount) kwlDisc.getEntityList().get(0);
                                amount -= disc.getDiscountValue();
                            }
                            String currencyCode = invoice.getCurrency() != null ? invoice.getCurrency().getCurrencyCode() : "";
                            prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                            if (detail.getSalesJED() != null && jed.getID().equals(detail.getSalesJED().getID())) {
                                lineLevelDetails = "<br>" + prdID + " - " + prdName + prdDesc + "<br>" + " Amount : " + currencyCode + " " + decimalFormat.format(amount);
                                lineLevelDetailsForExpander = ", " + prdID + " - " + prdName + prdDescForExpander + " Amount : " + currencyCode + " " + decimalFormat.format(amount);
                            } else {
                                lineLevelDetails += "<br>" + prdID + " - " + prdName + prdDesc + "<br>" + " Amount : " + currencyCode + " " + decimalFormat.format(amount);
                                lineLevelDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander + " Amount : " + currencyCode + " " + decimalFormat.format(amount);
                            }
                            String customColData = "", customColDataForExpander = "";
                            customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Invoice_ModuleId, detail.getID(), false);
                            lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                            customColDataForExpander = customColData;
                            customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                            lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                            if (detail.getSalesJED() != null && jed.getID().equals(detail.getSalesJED().getID())) {
                                break;
                            }
                        }
                    }
                }
                transactionDetails += lineLevelDetails;
                transactionDetailsForExpander += lineLevelDetailsForExpander;
            }
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", customer.getID());
            transDetMap.put("madname", customer.getName());
            transDetMap.put("isVendor", "false");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        }
        return transDetMap;
    }
   
    Map<String, String> getTransactionDetailsForPurchaseInvoice(Map<String, GoodsReceipt> grMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException{
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        DecimalFormat decimalFormat = new DecimalFormat("#,##0.00");
        Map<String, String> transDetMap = new HashMap<String, String>();
        if(isDescConfig){
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            GoodsReceipt goodsReceipt = grMap.get(entry.getID());
            
            //Get Transaction Details by config
            classPathIDMap.put(GoodsReceipt.class.getName(), goodsReceipt.getID());
            String placeHolderDetails = "";
            JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            if (accountid.equals(cashAccount) || grMap.get(entry.getID()).isCashtransaction()) {
                configJSON = getConfiguredTypeJSON(descJsonArr, 2);
            }
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Vendor_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Customer Info by config
            classPathIDMap.clear();
            classPathIDMap.put(Vendor.class.getName(), goodsReceipt.getVendor().getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 3);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Vendor_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Memo by config
            classPathIDMap.clear();
            classPathIDMap.put(GoodsReceipt.class.getName(), goodsReceipt.getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 4);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Vendor_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), goodsReceipt.getVendor().getID());
            Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
            if (goodsReceipt != null) {
                placeHolderDetails="";
//                Set<GoodsReceiptDetail> invoiceDetails = goodsReceipt.getRows();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("goodsReceipt.ID");
                filter_params.add(goodsReceipt.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(requestParamsHash);
                List<GoodsReceiptDetail> invoiceDetails = cnResult.getEntityList();
//                Set<GoodsReceiptDetail> invoiceDetails = goodsReceipt.getRows();
                for (GoodsReceiptDetail detail : invoiceDetails) {
                    String transDetail = "";
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        if (prd.getPurchaseAccount().getID().equals(accountid) || vendor.getAccount().getID().equals(accountid) || cashAccount.equals(accountid)) {
                            classPathIDMap.clear();
                            classPathIDMap.put(Product.class.getName(), prd != null ? prd.getID() : "");
                            classPathIDMap.put(GoodsReceiptDetail.class.getName(), detail.getID());
                            if(goodsReceipt.getCurrency()!=null){
                                classPathIDMap.put(KWLCurrency.class.getName(), goodsReceipt.getCurrency().getCurrencyID());
                            }
                            classPathIDMap.put("CUSTOMDATA", detail.getID());
                            double rate = goodsReceipt.isGstIncluded() ? detail.getRateincludegst() : detail.getRate();
                            double quantity = inventory.getQuantity();
                            double amount = (rate * quantity);
                            if (!goodsReceipt.isGstIncluded()) {// adding tax amount to the price only when gst is false
                                amount += detail.getRowTaxAmount() + detail.getRowTermTaxAmount();
                            }
                            if (detail.getDiscount() != null) { // subtracting discount amount
                                KwlReturnObject kwlDisc = accountingHandlerDAOobj.getObject(Discount.class.getName(), detail.getDiscount().getID());
                                Discount disc =  (Discount)kwlDisc.getEntityList().get(0);
                                amount -= disc.getDiscountValue();
                            }
                            classPathIDMap.put("TRANSACTION_AMOUNT", decimalFormat.format(amount));
                            configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                            transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Vendor_Invoice_ModuleId, false);
                            transDetail = replaceNullPlaceHolders(transDetail);
                            transDetail = StringUtil.DecodeText(transDetail);
                            if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                placeHolderDetails = transDetail;
                            }else{
                                placeHolderDetails += transDetail;
                            }
                            seqNo = configJSON.getInt("seq");
                            if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                break;
                            }
                        }
                    }
                }
                KwlReturnObject exResult = accGoodsReceiptDAOObj.getExpenseGRDetails(requestParamsHash);
                List<ExpenseGRDetail> expGRDetail = exResult.getEntityList();
                if (expGRDetail != null && expGRDetail.size() > 0) {
                    placeHolderDetails="";
                    for (ExpenseGRDetail detail : expGRDetail) {
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        String transDetail = "";
                        if (acc != null) {
                            if (acc.getID().equals(accountid) || vendor.getAccount().getID().equals(accountid) || cashAccount.equals(accountid)) {
                                classPathIDMap.clear();
                                classPathIDMap.put(Account.class.getName(), acc != null ? acc.getID() : "");
                                classPathIDMap.put(ExpenseGRDetail.class.getName(), detail.getID());
                                classPathIDMap.put("CUSTOMDATA", detail.getID());
                                configJSON = getConfiguredTypeJSON(descJsonArr, 6);
                                transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Vendor_Invoice_ModuleId, false);
                                transDetail = replaceNullPlaceHolders(transDetail);
                                transDetail = StringUtil.DecodeText(transDetail);
                                seqNo = configJSON.getInt("seq");
                                if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                    placeHolderDetails = transDetail;
                                    break;
                                }else{
                                    placeHolderDetails += transDetail;
                                }
                            }
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            transactionDetails+=getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander=transactionDetails.replaceAll("<br>", ", ");
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", vendor.getID());
            transDetMap.put("madname", vendor.getName());
            transDetMap.put("isVendor", "true");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        }else{
            GoodsReceipt goodsReceipt = grMap.get(entry.getID());
            if (accountid.equals(cashAccount) || grMap.get(entry.getID()).isCashtransaction()) {
                transactionDetails = Constants.CASH_PURCHASE + " - " + grMap.get(entry.getID()).getGoodsReceiptNumber();
                transactionDetailsForExpander = Constants.CASH_PURCHASE + " - " + grMap.get(entry.getID()).getGoodsReceiptNumber();
            } else {
                transactionDetails = Constants.VENDOR_INVOICE + " - " + grMap.get(entry.getID()).getGoodsReceiptNumber();
                transactionDetailsForExpander = Constants.VENDOR_INVOICE + " - " + grMap.get(entry.getID()).getGoodsReceiptNumber();
            }
            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), goodsReceipt.getVendor().getID());
            Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
            transactionDetails += "<br>" + vendor.getAcccode() + "-" + vendor.getName();
            transactionDetailsForExpander += ", " + vendor.getAcccode() + "-" + vendor.getName();
            transactionDetails += goodsReceipt.getMemo().isEmpty() ? "" : "<br>" + goodsReceipt.getMemo();
            transactionDetailsForExpander += goodsReceipt.getMemo().isEmpty() ? "" : ", " + goodsReceipt.getMemo();
            if (goodsReceipt != null) {
//                Set<GoodsReceiptDetail> invoiceDetails = goodsReceipt.getRows();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("goodsReceipt.ID");
                filter_params.add(goodsReceipt.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(requestParamsHash);
                List<GoodsReceiptDetail> invoiceDetails = cnResult.getEntityList();
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                for (GoodsReceiptDetail detail : invoiceDetails) {
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        if (prd.getPurchaseAccount().getID().equals(accountid) || vendor.getAccount().getID().equals(accountid) || cashAccount.equals(accountid)) {
                            String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                            prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                            prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                            prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                            double rate = goodsReceipt.isGstIncluded() ? detail.getRateincludegst() : detail.getRate();
                            double quantity = inventory.getQuantity();
                            double amount = (rate * quantity);
                            if (!goodsReceipt.isGstIncluded()) {//  adding tax amount to the price only when gst is false
                                amount += detail.getRowTaxAmount() + detail.getRowTermTaxAmount();
                            }
                            if (detail.getDiscount() != null) { // subtracting discount amount
                                KwlReturnObject kwlDisc = accountingHandlerDAOobj.getObject(Discount.class.getName(), detail.getDiscount().getID());
                                Discount disc =  (Discount)kwlDisc.getEntityList().get(0);
                                amount -= disc.getDiscountValue();
                            }
                            String currencyCode = goodsReceipt.getCurrency() != null ? goodsReceipt.getCurrency().getCurrencyCode() : "";
                            prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                            if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                lineLevelDetails = "<br>" + prdID + " - " + prdName + prdDesc + "<br>" + "Amount : " + currencyCode + " " + decimalFormat.format(amount);
                                lineLevelDetailsForExpander = ", " + prdID + " - " + prdName + prdDescForExpander + " Amount : " + currencyCode + " " + decimalFormat.format(amount);
                            } else {
                                lineLevelDetails += "<br>" + prdID + " - " + prdName + prdDesc + "<br>" + "Amount : " + currencyCode + " " + decimalFormat.format(amount);
                                lineLevelDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander + " Amount :" + currencyCode + " " + decimalFormat.format(amount);
                            }
                            String customColData = "", customColDataForExpander = "";
                            customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Vendor_Invoice_ModuleId, detail.getID(), false);
                            lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                            customColDataForExpander = customColData;
                            customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                            lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                            if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                break;
                            }
                        }
                    }
                }
                transactionDetails += lineLevelDetails;
                transactionDetailsForExpander += lineLevelDetailsForExpander;
//                Set<ExpenseGRDetail> expGRDetail = goodsReceipt.getExpenserows();
                KwlReturnObject exResult = accGoodsReceiptDAOObj.getExpenseGRDetails(requestParamsHash);
                List<ExpenseGRDetail> expGRDetail = exResult.getEntityList();
                if (expGRDetail != null && expGRDetail.size() > 0) {
                    lineLevelDetails = "";
                    lineLevelDetailsForExpander = "";
                    for (ExpenseGRDetail detail : expGRDetail) {
//                        Account acc = detail.getAccount();
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        if (acc != null) {
                            if (acc.getID().equals(accountid) || vendor.getAccount().getID().equals(accountid) || cashAccount.equals(accountid)) {
                                String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                                accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                                accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                                accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                                accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                                if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                    lineLevelDetails = "<br>" + accID + " - " + accName + accDesc;
                                    lineLevelDetailsForExpander = ", " + accID + " - " + accName + accDescForExpander;
                                }else{
                                    lineLevelDetails += "<br>" + accID + " - " + accName + accDesc;
                                    lineLevelDetailsForExpander += ", " + accID + " - " + accName + accDescForExpander;
                                }
                                String customColData = "", customColDataForExpander = "";

                                int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataJECount(companyid, detail.getID());
                                customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Vendor_Invoice_ModuleId, detail.getID(), false) : "";

                                lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                                customColDataForExpander = customColData;
                                customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                                lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                                if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                    break;
                                }
                            }
                        }
                    }
                    transactionDetails += lineLevelDetails;
                    transactionDetailsForExpander += lineLevelDetailsForExpander;
                }
            }
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", vendor.getID());
            transDetMap.put("madname", vendor.getName());
            transDetMap.put("isVendor", "true");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        }
        return transDetMap;
    }
    Map<String, String> getTransactionDetailsForPurchaseInvoiceForGL(GoodsReceipt goodsReceipt, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        DecimalFormat decimalFormat = new DecimalFormat("#,##0.00");
        Map<String, String> transDetMap = new HashMap<String, String>();
        if (isDescConfig) {
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            //Get Transaction Details by config
            classPathIDMap.put(GoodsReceipt.class.getName(), goodsReceipt.getID());
            String placeHolderDetails = "";
            String lineLevelGSTCodes = "";
            String gstCode = goodsReceipt.getTax() == null ? "" : goodsReceipt.getTax().getTaxCode();
            boolean isDocLevelGST = !StringUtil.isNullOrEmpty(gstCode);
            JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            if (accountid.equals(cashAccount) || goodsReceipt.isCashtransaction()) {
                configJSON = getConfiguredTypeJSON(descJsonArr, 2);
            }
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Vendor_Invoice_ModuleId, true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Customer Info by config
            classPathIDMap.clear();
            classPathIDMap.put(Vendor.class.getName(), goodsReceipt.getVendor().getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 3);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Vendor_Invoice_ModuleId, true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Memo by config
            classPathIDMap.clear();
            classPathIDMap.put(GoodsReceipt.class.getName(), goodsReceipt.getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 4);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Vendor_Invoice_ModuleId, true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), goodsReceipt.getVendor().getID());
            Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
            String lineLevelCustomFieldData="";
            if (goodsReceipt != null) {
                placeHolderDetails = "";
                String tempGSTCode = "";
//                Set<GoodsReceiptDetail> invoiceDetails = goodsReceipt.getRows();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("goodsReceipt.ID");
                filter_params.add(goodsReceipt.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(requestParamsHash);
                List<GoodsReceiptDetail> invoiceDetails = cnResult.getEntityList();
                for (GoodsReceiptDetail detail : invoiceDetails) {
                    String transDetail = "";
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        String taxAccountId = detail.getTax() != null ? detail.getTax().getAccount().getID() : "";
                        if ((prd!=null && prd.getPurchaseAccount().getID().equals(accountid)) || vendor.getAccount().getID().equals(accountid) || cashAccount.equals(accountid) || taxAccountId.equals(accountid)) {
                            classPathIDMap.clear();
                            classPathIDMap.put(Product.class.getName(), prd != null ? prd.getID() : "");
                            classPathIDMap.put(GoodsReceiptDetail.class.getName(), detail.getID());
                            if (goodsReceipt.getCurrency() != null) {
                                classPathIDMap.put(KWLCurrency.class.getName(), goodsReceipt.getCurrency().getCurrencyID());
                            }
                            classPathIDMap.put("CUSTOMDATA", detail.getID());
                            double rate = goodsReceipt.isGstIncluded() ? detail.getRateincludegst() : detail.getRate();
                            double quantity = inventory.getQuantity();
                            double amount = (rate * quantity);
                            if (!goodsReceipt.isGstIncluded()) {// adding tax amount to the price only when gst is false
                                amount += detail.getRowTaxAmount() + detail.getRowTermTaxAmount();
                            }
                            if (detail.getDiscount() != null) { // subtracting discount amount
                                KwlReturnObject kwlDisc = accountingHandlerDAOobj.getObject(Discount.class.getName(), detail.getDiscount().getID());
                                Discount disc = (Discount) kwlDisc.getEntityList().get(0);
                                amount -= disc.getDiscountValue();
                            }
                            classPathIDMap.put("TRANSACTION_AMOUNT", decimalFormat.format(amount));
                            configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                            transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Vendor_Invoice_ModuleId, false);
                            transDetail = replaceNullPlaceHolders(transDetail);
                            transDetail = StringUtil.DecodeText(transDetail);
                            //Get line level Dimension Data
                            Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Vendor_Invoice_ModuleId, detail.getID(), false);
                            lineLevelCustomFieldData = customFieldData.toString();
                            tempGSTCode = detail.getTax()==null ? "" : detail.getTax().getTaxCode();
                            if ((detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) || (detail.getGstJED() != null && detail.getGstJED().getID().equals(jed.getID()))) {
                                placeHolderDetails = transDetail;
                                lineLevelGSTCodes = tempGSTCode;
                                break;
                            } else {
                                placeHolderDetails += transDetail;
                                if(!StringUtil.isNullOrEmpty(tempGSTCode)){
                                    if (!StringUtil.isNullOrEmpty(lineLevelGSTCodes)) {
                                        lineLevelGSTCodes += ", " + tempGSTCode;
                                    } else {
                                        lineLevelGSTCodes += tempGSTCode;
                                    }
                                }
                            }
                            seqNo = configJSON.getInt("seq");
                            if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                break;
                            }
                        }
                    }
                }
                KwlReturnObject exResult = accGoodsReceiptDAOObj.getExpenseGRDetails(requestParamsHash);
                List<ExpenseGRDetail> expGRDetail = exResult.getEntityList();
                if (expGRDetail != null && expGRDetail.size() > 0) {
                    placeHolderDetails = "";
                    for (ExpenseGRDetail detail : expGRDetail) {
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        String transDetail = "";
                        if (acc != null) {
                            String taxAccountId = detail.getTax() != null ? detail.getTax().getAccount().getID() : "";
                            if (acc.getID().equals(accountid) || vendor.getAccount().getID().equals(accountid) || cashAccount.equals(accountid) || taxAccountId.equals(accountid)) {
                                classPathIDMap.clear();
                                classPathIDMap.put(Account.class.getName(), acc != null ? acc.getID() : "");
                                classPathIDMap.put(ExpenseGRDetail.class.getName(), detail.getID());
                                classPathIDMap.put("CUSTOMDATA", detail.getID());
                                configJSON = getConfiguredTypeJSON(descJsonArr, 6);
                                transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Vendor_Invoice_ModuleId, false);
                                transDetail = replaceNullPlaceHolders(transDetail);
                                transDetail =StringUtil.DecodeText(transDetail);
                                //Get line level Dimension Data
                                Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Vendor_Invoice_ModuleId, detail.getID(), false);
                                lineLevelCustomFieldData = customFieldData.toString();
                                seqNo = configJSON.getInt("seq");
                                tempGSTCode = detail.getTax()==null ? "" : detail.getTax().getTaxCode();
                                if ((detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) || (detail.getGstJED() != null && detail.getGstJED().getID().equals(jed.getID()))) {
                                    placeHolderDetails = transDetail;
                                    lineLevelGSTCodes = tempGSTCode;
                                    break;
                                } else {
                                    placeHolderDetails += transDetail;
                                    if(!StringUtil.isNullOrEmpty(tempGSTCode)){
                                        if (!StringUtil.isNullOrEmpty(lineLevelGSTCodes)) {
                                            lineLevelGSTCodes += ", " + tempGSTCode;
                                        } else {
                                            lineLevelGSTCodes += tempGSTCode;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            transactionDetails += getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander = transactionDetails.replaceAll("<br>", ", ");
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", vendor.getID());
            transDetMap.put("madname", vendor.getName());
            transDetMap.put("isVendor", "true");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
            transDetMap.put("gstCode", isDocLevelGST?gstCode:lineLevelGSTCodes);
            transDetMap.put("lineLevelCustomFieldData", lineLevelCustomFieldData);
        } else {
            if (accountid.equals(cashAccount) || goodsReceipt.isCashtransaction()) {
                transactionDetails = Constants.CASH_PURCHASE + " - " + goodsReceipt.getGoodsReceiptNumber();
                transactionDetailsForExpander = Constants.CASH_PURCHASE + " - " + goodsReceipt.getGoodsReceiptNumber();
            } else {
                transactionDetails = Constants.VENDOR_INVOICE + " - " + goodsReceipt.getGoodsReceiptNumber();
                transactionDetailsForExpander = Constants.VENDOR_INVOICE + " - " + goodsReceipt.getGoodsReceiptNumber();
            }
            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), goodsReceipt.getVendor().getID());
            Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
            transactionDetails += "<br>" + vendor.getAcccode() + "-" + vendor.getName();
            transactionDetailsForExpander += ", " + vendor.getAcccode() + "-" + vendor.getName();
            transactionDetails += goodsReceipt.getMemo().isEmpty() ? "" : "<br>" + goodsReceipt.getMemo();
            transactionDetailsForExpander += goodsReceipt.getMemo().isEmpty() ? "" : ", " + goodsReceipt.getMemo();
            if (goodsReceipt != null) {
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("goodsReceipt.ID");
                filter_params.add(goodsReceipt.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(requestParamsHash);
                List<GoodsReceiptDetail> invoiceDetails = cnResult.getEntityList();
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                for (GoodsReceiptDetail detail : invoiceDetails) {
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        if (prd.getPurchaseAccount().getID().equals(accountid) || vendor.getAccount().getID().equals(accountid) || cashAccount.equals(accountid)) {
                            String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                            prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                            prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                            prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                            double rate = goodsReceipt.isGstIncluded() ? detail.getRateincludegst() : detail.getRate();
                            double quantity = inventory.getQuantity();
                            double amount = (rate * quantity);
                            if (!goodsReceipt.isGstIncluded()) {//  adding tax amount to the price only when gst is false
                                amount += detail.getRowTaxAmount() + detail.getRowTermTaxAmount();
                            }
                            if (detail.getDiscount() != null) { // subtracting discount amount
                                KwlReturnObject kwlDisc = accountingHandlerDAOobj.getObject(Discount.class.getName(), detail.getDiscount().getID());
                                Discount disc = (Discount) kwlDisc.getEntityList().get(0);
                                amount -= disc.getDiscountValue();
                            }
                            String currencyCode = goodsReceipt.getCurrency() != null ? goodsReceipt.getCurrency().getCurrencyCode() : "";
                            prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                            if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                lineLevelDetails = "<br>" + prdID + " - " + prdName + prdDesc + "<br>" + "Amount : " + currencyCode + " " + decimalFormat.format(amount);
                                lineLevelDetailsForExpander = ", " + prdID + " - " + prdName + prdDescForExpander + " Amount : " + currencyCode + " " + decimalFormat.format(amount);
                            } else {
                                lineLevelDetails += "<br>" + prdID + " - " + prdName + prdDesc + "<br>" + "Amount : " + currencyCode + " " + decimalFormat.format(amount);
                                lineLevelDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander + " Amount :" + currencyCode + " " + decimalFormat.format(amount);
                            }
                            String customColData = "", customColDataForExpander = "";
                            customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Vendor_Invoice_ModuleId, detail.getID(), false);
                            lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                            customColDataForExpander = customColData;
                            customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                            lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                            if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                break;
                            }
                        }
                    }
                }
                transactionDetails += lineLevelDetails;
                transactionDetailsForExpander += lineLevelDetailsForExpander;
                KwlReturnObject exResult = accGoodsReceiptDAOObj.getExpenseGRDetails(requestParamsHash);
                List<ExpenseGRDetail> expGRDetail = exResult.getEntityList();
                if (expGRDetail != null && expGRDetail.size() > 0) {
                    lineLevelDetails = "";
                    lineLevelDetailsForExpander = "";
                    for (ExpenseGRDetail detail : expGRDetail) {
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        if (acc != null) {
                            if (acc.getID().equals(accountid) || vendor.getAccount().getID().equals(accountid) || cashAccount.equals(accountid)) {
                                String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                                accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                                accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                                accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                                accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                                if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                    lineLevelDetails = "<br>" + accID + " - " + accName + accDesc;
                                    lineLevelDetailsForExpander = ", " + accID + " - " + accName + accDescForExpander;
                                } else {
                                    lineLevelDetails += "<br>" + accID + " - " + accName + accDesc;
                                    lineLevelDetailsForExpander += ", " + accID + " - " + accName + accDescForExpander;
                                }
                                String customColData = "", customColDataForExpander = "";

                                int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataJECount(companyid, detail.getID());
                                customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Vendor_Invoice_ModuleId, detail.getID(), false) : "";

                                lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                                customColDataForExpander = customColData;
                                customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                                lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                                if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                    break;
                                }
                            }
                        }
                    }
                    transactionDetails += lineLevelDetails;
                    transactionDetailsForExpander += lineLevelDetailsForExpander;
                }
            }
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", vendor.getID());
            transDetMap.put("madname", vendor.getName());
            transDetMap.put("isVendor", "true");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        }
        return transDetMap;
    }
    
    Map<String, String> getTransactionDetailsForCreditNote(Map<String, Object[]> creditNoteMapPar, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException{
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        boolean isPartyJournalEntry = entry.getTypeValue() == 2;
        boolean isVendor = false;
        String madid="";
        String madname="";
        
        Map<String, String> transDetMap = new HashMap<String, String>();
        if(isDescConfig){
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            if (isPartyJournalEntry) {
                //Get Transaction Details by config
                String placeHolderDetails = "";
                JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                int seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);

                //Get Memo by config
                classPathIDMap.clear();
                classPathIDMap.put(JournalEntry.class.getName(), entry.getID());
                placeHolderDetails = "";
                configJSON = getConfiguredTypeJSON(descJsonArr, 3);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
                
                if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                    Account acc = jed.getAccount();
                    KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                    Account acc = (Account) KWLAccount.getEntityList().get(0);
                    if (acc != null && acc.getID().equals(accountid)) {
                        classPathIDMap.clear();
                        classPathIDMap.put(Account.class.getName(), acc != null ? acc.getID() : "");
                        classPathIDMap.put(JournalEntryDetail.class.getName(), jed.getID());
                        classPathIDMap.put("CUSTOMDATA", jed.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                        placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
                        placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                        seqNo = configJSON.getInt("seq");
                    }
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                 if(!StringUtil.isNullOrEmpty(jed.getCustomerVendorId())){
                    KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), jed.getCustomerVendorId());
                    
                      Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
                    if (customer != null) {
                        isVendor = false;
                        madid = customer.getID();
                        madname = customer.getName();
                    }

                    KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), jed.getCustomerVendorId());

                    Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
                    if (vendor != null) {
                        isVendor = true;
                        madid = vendor.getID();
                        madname = vendor.getName();
                    }
                 }
                }
            } else {
                CreditNote creditNote = (CreditNote) creditNoteMapPar.get(entry.getID())[0];
                
                //Get Transaction Details by config
                String placeHolderDetails = "";
                if(creditNote.getCustomer()!=null){
                    classPathIDMap.put(Customer.class.getName(), creditNote.getCustomer().getID());
                }
                if(creditNote.getVendor()!=null){
                    classPathIDMap.put(Vendor.class.getName(), creditNote.getVendor().getID());
                }
                classPathIDMap.put(CreditNote.class.getName(), creditNote != null ? creditNote.getID() : "");
                JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 2);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Credit_Note_ModuleId, true);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                int seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);

                //Get Memo by config
                classPathIDMap.clear();
                classPathIDMap.put(CreditNote.class.getName(), creditNote.getID());
                placeHolderDetails = "";
                configJSON = getConfiguredTypeJSON(descJsonArr, 3);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Credit_Note_ModuleId, true);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
                Customer customer=null;
                Vendor vendor=null;
                if (creditNote != null && creditNote.getCustomer() != null) {
                    KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), creditNote.getCustomer().getID());
                    customer = (Customer) KWLCustomer.getEntityList().get(0);
                    isVendor = false;
                    madid = customer.getID();
                    madname = customer.getName();
                } else if (creditNote != null && creditNote.getVendor() != null) {
                    KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), creditNote.getVendor().getID());
                    vendor = (Vendor) KWLVendor.getEntityList().get(0);
                    isVendor = true;
                    madid = vendor.getID();
                    madname = vendor.getName();
                }
                HashMap<String, Object> paramsTaxDetails = new HashMap<>();
                paramsTaxDetails.put("companyid", companyid);
                paramsTaxDetails.put("cnid", creditNote.getID());
                paramsTaxDetails.put("accid", null);
                KwlReturnObject cnResult = accCreditNoteobj.getCreditTaxDetails(paramsTaxDetails);
                List<CreditNoteTaxEntry> invoiceDetails = cnResult.getEntityList();
                if (invoiceDetails != null && invoiceDetails.size()>0) {
                    placeHolderDetails="";
                    for (CreditNoteTaxEntry detail : invoiceDetails) {
//                        Account acc = detail.getAccount();
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        String transDetail = "";
                        if (acc != null) {
                            if (acc.getID().equals(accountid) || (vendor != null && vendor.getAccount().getID().equals(accountid)) || (customer != null && customer.getAccount().getID().equals(accountid)) || cashAccount.equals(accountid)) {
                                classPathIDMap.clear();
                                classPathIDMap.put(Account.class.getName(), acc != null ? acc.getID() : "");
                                classPathIDMap.put(CreditNoteTaxEntry.class.getName(), detail.getID());
                                classPathIDMap.put("CUSTOMDATA", detail.getID());
                                configJSON = getConfiguredTypeJSON(descJsonArr, 4);
                                transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Credit_Note_ModuleId, false);
                                transDetail = replaceNullPlaceHolders(transDetail);
                                transDetail = StringUtil.DecodeText(transDetail);
                                seqNo = configJSON.getInt("seq");
                                if (detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) {
                                    placeHolderDetails = transDetail;
                                    break;
                                }else{
                                    placeHolderDetails += transDetail;
                                }
                            }
                        }
                    }
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);                
                }
            }
            transactionDetails+=getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander=transactionDetails.replaceAll("<br>", ", ");            
        }else {
            if (isPartyJournalEntry) {
                transactionDetails = "Party Journal Entry";
                transactionDetailsForExpander = "Party Journal Entry";
                String memo = StringUtil.isNullOrEmpty(entry.getMemo()) ? "" : "<br>" + entry.getMemo();
                String memoForExpander = StringUtil.isNullOrEmpty(entry.getMemo()) ? "" : ", " + entry.getMemo();
                transactionDetails += memo;
                transactionDetailsForExpander += memoForExpander;
                if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                    Account acc = jed.getAccount();
                    KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                    Account acc = (Account) KWLAccount.getEntityList().get(0);
                    if (acc != null && acc.getID().equals(accountid)) {
                        String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                        accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                        accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                        accDesc = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : "<br>" + jed.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : ", " + jed.getDescription();
                        transactionDetails += "<br>" + accID + " - " + accName + accDesc;
                        transactionDetailsForExpander += ", " + accID + " - " + accName + accDescForExpander;
                        String customColData = "", customColDataForExpander = "";

                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, jed.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(),false);

                        transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                    }
                }
            } else {
                CreditNote creditNote = (CreditNote) creditNoteMapPar.get(entry.getID())[0];
                Customer customer=null;
                Vendor vendor=null;
                if (creditNote != null && creditNote.getCustomer() != null) {
                    KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), creditNote.getCustomer().getID());
                    customer = (Customer) KWLCustomer.getEntityList().get(0);
                    isVendor = false;
                    madid = customer.getID();
                    madname = customer.getName();
                } else if (creditNote != null && creditNote.getVendor() != null) {
                    KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), creditNote.getVendor().getID());
                    vendor = (Vendor) KWLVendor.getEntityList().get(0);
                    isVendor = true;
                    madid = vendor.getID();
                    madname = vendor.getName();
                }
                transactionDetails = Constants.CREDIT_NOTE + "<br>" + (customer != null ? (customer.getAcccode() + " - " + customer.getName()) : (vendor.getAcccode() + " - " + vendor.getName()));
                transactionDetailsForExpander = Constants.CREDIT_NOTE + ", " + (customer != null ? (customer.getAcccode() + " - " + customer.getName()) : (vendor.getAcccode() + " - " + vendor.getName()));
                transactionDetails += (creditNote.getMemo() != null ? (creditNote.getMemo().isEmpty() ? "" : "<br>" + creditNote.getMemo()) : "");
                transactionDetailsForExpander += (creditNote.getMemo() != null ? (creditNote.getMemo().isEmpty() ? "" : ", " + creditNote.getMemo()) : "");
                HashMap<String, Object> paramsTaxDetails = new HashMap<>();
                paramsTaxDetails.put("companyid", companyid);
                paramsTaxDetails.put("cnid", creditNote.getID());
                paramsTaxDetails.put("accid", null);
                KwlReturnObject cnResult = accCreditNoteobj.getCreditTaxDetails(paramsTaxDetails);
                List<CreditNoteTaxEntry> invoiceDetails = cnResult.getEntityList();
                if (invoiceDetails != null && invoiceDetails.size()>0) {
//                    Set<CreditNoteTaxEntry> invoiceDetails = creditNote.getCnTaxEntryDetails();
                    String lineLevelDetails = "";
                    String lineLevelDetailsForExpander = "";
                    for (CreditNoteTaxEntry detail : invoiceDetails) {
//                        Account acc = detail.getAccount();
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        if (acc != null) {
                            if (acc.getID().equals(accountid) || (vendor != null && vendor.getAccount().getID().equals(accountid)) || (customer != null && customer.getAccount().getID().equals(accountid)) || cashAccount.equals(accountid)) {
                                String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                                accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                                accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                                accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                                accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                                if (detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) {
                                    lineLevelDetails = "<br>" + accID + " - " + accName + accDesc;
                                    lineLevelDetailsForExpander = ", " + accID + " - " + accName + accDescForExpander;
                                } else {
                                    lineLevelDetails += "<br>" + accID + " - " + accName + accDesc;
                                    lineLevelDetailsForExpander += ", " + accID + " - " + accName + accDescForExpander;
                                }

                                String customColData = "", customColDataForExpander = "";

                                int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataJECount(companyid, detail.getID());
                                customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Credit_Note_ModuleId, detail.getID(), false) : "";
                                //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Credit_Note_ModuleId, jed.getID(), true);

                                lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                                customColDataForExpander = customColData;
                                customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                                lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                                if (detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) {
                                    break;
                                }
                            }
                        }
                    }
                    transactionDetails += lineLevelDetails;
                    transactionDetailsForExpander += lineLevelDetailsForExpander;
                }
            }
        }
        transDetMap.put("transactionDetails", transactionDetails);
        transDetMap.put("madid", madid);
        transDetMap.put("madname", madname);
        transDetMap.put("isVendor", isVendor?"true":"false");
        transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        return transDetMap;
    }
    Map<String, String> getTransactionDetailsForCreditNoteForGL(CreditNote creditNote, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        String lineLevelGSTCodes = "";     
        boolean isPartyJournalEntry = entry.getTypeValue() == 2;
        boolean isVendor = false;
        String madid="";
        String madname="";
        String gstCode = creditNote.getTax() == null ? "" : creditNote.getTax().getTaxCode();
        boolean isDocLevelGST = !StringUtil.isNullOrEmpty(gstCode);
        Map<String, String> transDetMap = new HashMap<String, String>();
        String lineLevelCustomFieldData="";
        if (isDescConfig) {
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            if (isPartyJournalEntry) {
                //Get Transaction Details by config
                String placeHolderDetails = "";
                JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                int seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
    
                //Get Memo by config
                classPathIDMap.clear();
                classPathIDMap.put(JournalEntry.class.getName(), entry.getID());
                placeHolderDetails = "";
                configJSON = getConfiguredTypeJSON(descJsonArr, 3);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);

                if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                    Account acc = jed.getAccount();
                    KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                    Account acc = (Account) KWLAccount.getEntityList().get(0);
                    if (acc != null && acc.getID().equals(accountid)) {
                        classPathIDMap.clear();
                        classPathIDMap.put(Account.class.getName(), acc != null ? acc.getID() : "");
                        classPathIDMap.put(JournalEntryDetail.class.getName(), jed.getID());
                        classPathIDMap.put("CUSTOMDATA", jed.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                        placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
                        placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                        //Get line level Dimension Data
                        Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(), false);
                        lineLevelCustomFieldData = customFieldData.toString();
                        seqNo = configJSON.getInt("seq");
                        
                        if(!StringUtil.isNullOrEmpty(jed.getCustomerVendorId())){
                            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), jed.getCustomerVendorId());

                            Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
                            if (customer != null) {
                                isVendor = false;
                                madid = customer.getID();
                                madname = customer.getName();
                            }

                            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), jed.getCustomerVendorId());

                            Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
                            if (vendor != null) {
                                isVendor = true;
                                madid = vendor.getID();
                                madname = vendor.getName();
                            }
                        }
                    }
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            } else {
//                CreditNote creditNote = (CreditNote) creditNoteMapPar.get(entry.getID())[0];

                //Get Transaction Details by config
                String placeHolderDetails = "";
                if (creditNote.getCustomer() != null) {
                    classPathIDMap.put(Customer.class.getName(), creditNote.getCustomer().getID());
                }
                if (creditNote.getVendor() != null) {
                    classPathIDMap.put(Vendor.class.getName(), creditNote.getVendor().getID());
                }
                classPathIDMap.put(CreditNote.class.getName(), creditNote != null ? creditNote.getID() : "");
                JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 2);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Credit_Note_ModuleId, true);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                int seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);

                //Get Memo by config
                classPathIDMap.clear();
                classPathIDMap.put(CreditNote.class.getName(), creditNote.getID());
                placeHolderDetails = "";
                configJSON = getConfiguredTypeJSON(descJsonArr, 3);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Credit_Note_ModuleId, true);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
                Customer customer = null;
                Vendor vendor = null;
                if (creditNote != null && creditNote.getCustomer() != null) {
                    KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), creditNote.getCustomer().getID());
                    customer = (Customer) KWLCustomer.getEntityList().get(0);
                    isVendor = false;
                    madid = customer.getID();
                    madname = customer.getName();
                } else if (creditNote != null && creditNote.getVendor() != null) {
                    KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), creditNote.getVendor().getID());
                    vendor = (Vendor) KWLVendor.getEntityList().get(0);
                    isVendor = true;
                    madid = vendor.getID();
                    madname = vendor.getName();
                }

                String tempGSTCode = "";
                HashMap<String, Object> paramsTaxDetails = new HashMap<>();
                paramsTaxDetails.put("companyid", companyid);
                paramsTaxDetails.put("cnid", creditNote.getID());
                paramsTaxDetails.put("accid", null);
                KwlReturnObject cnResult = accCreditNoteobj.getCreditTaxDetails(paramsTaxDetails);
                List<CreditNoteTaxEntry> invoiceDetails = cnResult.getEntityList();
                if (invoiceDetails != null && invoiceDetails.size() > 0) {
                    placeHolderDetails = "";
                    for (CreditNoteTaxEntry detail : invoiceDetails) {
//                        Account acc = detail.getAccount();
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        String transDetail = "";
                        if (acc != null) {
                            String taxAccountId = detail.getTax() != null ? detail.getTax().getAccount().getID() : "";
                            if (acc.getID().equals(accountid) || (vendor != null && vendor.getAccount().getID().equals(accountid)) || (customer != null && customer.getAccount().getID().equals(accountid)) || cashAccount.equals(accountid) || taxAccountId.equals(accountid)) {
                                classPathIDMap.clear();
                                classPathIDMap.put(Account.class.getName(), acc != null ? acc.getID() : "");
                                classPathIDMap.put(CreditNoteTaxEntry.class.getName(), detail.getID());
                                classPathIDMap.put("CUSTOMDATA", detail.getID());
                                configJSON = getConfiguredTypeJSON(descJsonArr, 4);
                                transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Credit_Note_ModuleId, false);
                                transDetail = replaceNullPlaceHolders(transDetail);
                                transDetail = StringUtil.DecodeText(transDetail);
                                //Get line level Dimension Data
                                Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Credit_Note_ModuleId, detail.getID(), false);
                                lineLevelCustomFieldData = customFieldData.toString();
                                seqNo = configJSON.getInt("seq");
                                tempGSTCode = detail.getTax()==null ? "" : detail.getTax().getTaxCode();
                                if ((detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) || (detail.getGstJED() != null && detail.getGstJED().getID().equals(jed.getID())) || (detail.getTaxJedId() !=null && detail.getTaxJedId().equals(jed.getID()))) {//detail.getTaxJedId() for CN with SR
                                    placeHolderDetails = transDetail;
                                    lineLevelGSTCodes = tempGSTCode;
                                    break;
                                } else {
                                    placeHolderDetails += transDetail;
                                    if(!StringUtil.isNullOrEmpty(tempGSTCode)){
                                        if (!StringUtil.isNullOrEmpty(lineLevelGSTCodes)) {
                                            lineLevelGSTCodes += ", " + tempGSTCode;
                                        } else {
                                            lineLevelGSTCodes += tempGSTCode;
                                        }
                                }
                            }
                        }
                    }
                    }
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
                if (isVendor) {
                    /*
                     * CreditNote against Vendor (For Malaysian country).
                     */
                    cnResult = accCreditNoteobj.getCreditNoteAgainstVendorGst(creditNote.getID(), companyid);
                    List<CreditNoteAgainstVendorGst> creditNoteAgainstVendorGsts = cnResult.getEntityList();
                    for (CreditNoteAgainstVendorGst detail : creditNoteAgainstVendorGsts) {
                        Product product = detail.getProduct();
                        String vendorAccountId = vendor !=null ? vendor.getAccount().getID() :"";
                        String taxAccountId = detail.getTax() != null ? detail.getTax().getAccount().getID() : "";
                        if (product.getPurchaseAccount().getID().equals(accountid) || vendorAccountId.equals(accountid) || cashAccount.equals(accountid) || taxAccountId.equals(accountid)) {
                            tempGSTCode = detail.getTax() != null ? detail.getTax().getTaxCode() : "";
                            if ((detail.getJedid() != null && jed.getID().equals(detail.getJedid().getID())) || (detail.getGstJED() != null && detail.getGstJED().getID().equals(jed.getID()))) {
                                lineLevelGSTCodes = tempGSTCode;
                                break;
                            } else {
                                if (!StringUtil.isNullOrEmpty(tempGSTCode)) {
                                    if (!StringUtil.isNullOrEmpty(lineLevelGSTCodes)) {
                                        lineLevelGSTCodes += ", " + tempGSTCode;
                                    } else {
                                        lineLevelGSTCodes += tempGSTCode;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            transactionDetails += getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander = transactionDetails.replaceAll("<br>", ", ");
        } else {
            if (isPartyJournalEntry) {
                transactionDetails = "Party Journal Entry";
                transactionDetailsForExpander = "Party Journal Entry";
                String memo = StringUtil.isNullOrEmpty(entry.getMemo()) ? "" : "<br>" + entry.getMemo();
                String memoForExpander = StringUtil.isNullOrEmpty(entry.getMemo()) ? "" : ", " + entry.getMemo();
                transactionDetails += memo;
                transactionDetailsForExpander += memoForExpander;
                if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                    Account acc = jed.getAccount();
                    KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                    Account acc = (Account) KWLAccount.getEntityList().get(0);
                    if (acc != null && acc.getID().equals(accountid)) {
                        String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                        accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                        accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                        accDesc = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : "<br>" + jed.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : ", " + jed.getDescription();
                        transactionDetails += "<br>" + accID + " - " + accName + accDesc;
                        transactionDetailsForExpander += ", " + accID + " - " + accName + accDescForExpander;
                        String customColData = "", customColDataForExpander = "";

                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, jed.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(),false);

                        transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                    }
                }
            } else {
//                CreditNote creditNote = (CreditNote) creditNoteMapPar.get(entry.getID())[0];
                Customer customer = null;
                Vendor vendor = null;
                if (creditNote != null && creditNote.getCustomer() != null) {
                    KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), creditNote.getCustomer().getID());
                    customer = (Customer) KWLCustomer.getEntityList().get(0);
                    isVendor = false;
                    madid = customer.getID();
                    madname = customer.getName();
                } else if (creditNote != null && creditNote.getVendor() != null) {
                    KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), creditNote.getVendor().getID());
                    vendor = (Vendor) KWLVendor.getEntityList().get(0);
                    isVendor = true;
                    madid = vendor.getID();
                    madname = vendor.getName();
                }
                transactionDetails = Constants.CREDIT_NOTE + "<br>" + (customer != null ? (customer.getAcccode() + " - " + customer.getName()) : (vendor.getAcccode() + " - " + vendor.getName()));
                transactionDetailsForExpander = Constants.CREDIT_NOTE + ", " + (customer != null ? (customer.getAcccode() + " - " + customer.getName()) : (vendor.getAcccode() + " - " + vendor.getName()));
                transactionDetails += (creditNote.getMemo() != null ? (creditNote.getMemo().isEmpty() ? "" : "<br>" + creditNote.getMemo()) : "");
                transactionDetailsForExpander += (creditNote.getMemo() != null ? (creditNote.getMemo().isEmpty() ? "" : ", " + creditNote.getMemo()) : "");
                HashMap<String, Object> paramsTaxDetails = new HashMap<>();
                paramsTaxDetails.put("companyid", companyid);
                paramsTaxDetails.put("cnid", creditNote.getID());
                paramsTaxDetails.put("accid", null);
                KwlReturnObject cnResult = accCreditNoteobj.getCreditTaxDetails(paramsTaxDetails);
                List<CreditNoteTaxEntry> invoiceDetails = cnResult.getEntityList();
                if (invoiceDetails != null && invoiceDetails.size() > 0) {
//                    Set<CreditNoteTaxEntry> invoiceDetails = creditNote.getCnTaxEntryDetails();
                    String lineLevelDetails = "";
                    String lineLevelDetailsForExpander = "";
                    for (CreditNoteTaxEntry detail : invoiceDetails) {
//                        Account acc = detail.getAccount();
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        if (acc != null) {
                            if (acc.getID().equals(accountid) || (vendor != null && vendor.getAccount().getID().equals(accountid)) || (customer != null && customer.getAccount().getID().equals(accountid)) || cashAccount.equals(accountid)) {
                                String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                                accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                                accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                                accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                                accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                                if (detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) {
                                    lineLevelDetails = "<br>" + accID + " - " + accName + accDesc;
                                    lineLevelDetailsForExpander = ", " + accID + " - " + accName + accDescForExpander;
                                } else {
                                    lineLevelDetails += "<br>" + accID + " - " + accName + accDesc;
                                    lineLevelDetailsForExpander += ", " + accID + " - " + accName + accDescForExpander;
                                }

                                String customColData = "", customColDataForExpander = "";

                                int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataJECount(companyid, detail.getID());
                                customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Credit_Note_ModuleId, detail.getID(), false) : "";
                                //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Credit_Note_ModuleId, jed.getID(), true);

                                lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                                customColDataForExpander = customColData;
                                customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                                lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                                if (detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) {
                                    break;
                                }
                            }
                        }
                    }
                    transactionDetails += lineLevelDetails;
                    transactionDetailsForExpander += lineLevelDetailsForExpander;
                }
            }
        }
        transDetMap.put("transactionDetails", transactionDetails);
        transDetMap.put("madid", madid);
        transDetMap.put("madname", madname);
        transDetMap.put("isVendor", isVendor?"true":"false");
        transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        transDetMap.put("gstCode", isDocLevelGST ? gstCode : lineLevelGSTCodes);
        transDetMap.put("lineLevelCustomFieldData", lineLevelCustomFieldData);
        return transDetMap;
    }
    
    Map<String, String> getTransactionDetailsForDebitNote(Map<String, Object[]> debitNoteMapPar, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException{
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        boolean isPartyJournalEntry = entry.getTypeValue() == 2;
        boolean isVendor = false;
        String madid="";
        String madname="";
        Map<String, String> transDetMap = new HashMap<String, String>();
        if(isDescConfig){
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            if (isPartyJournalEntry) {
                //Get Transaction Details by config
                String placeHolderDetails = "";
                JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                int seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);

                //Get Memo by config
                classPathIDMap.clear();
                classPathIDMap.put(JournalEntry.class.getName(), entry.getID());
                placeHolderDetails = "";
                configJSON = getConfiguredTypeJSON(descJsonArr, 3);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);

                if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                    Account acc = jed.getAccount();
                    KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                    Account acc = (Account) KWLAccount.getEntityList().get(0);
                    if (acc != null && acc.getID().equals(accountid)) {
                        classPathIDMap.clear();
                        classPathIDMap.put(Account.class.getName(), acc != null ? acc.getID() : "");
                        classPathIDMap.put(JournalEntryDetail.class.getName(), jed.getID());
                        classPathIDMap.put("CUSTOMDATA", jed.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                        placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
                        placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                        seqNo = configJSON.getInt("seq");
                  
                        if (!StringUtil.isNullOrEmpty(jed.getCustomerVendorId())) {
                            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), jed.getCustomerVendorId());

                            Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
                            if (customer != null) {
                                isVendor = false;
                                madid = customer.getID();
                                madname = customer.getName();
                            }

                            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), jed.getCustomerVendorId());

                            Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
                            if (vendor != null) {
                                isVendor = true;
                                madid = vendor.getID();
                                madname = vendor.getName();
                            }
                        }
                    }
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            } else {
                DebitNote debitNote = (DebitNote) debitNoteMapPar.get(entry.getID())[0];
                
                //Get Transaction Details by config
                String placeHolderDetails = "";
                if(debitNote.getCustomer()!=null){
                    classPathIDMap.put(Customer.class.getName(), debitNote.getCustomer().getID());
                }
                if(debitNote.getVendor()!=null){
                    classPathIDMap.put(Vendor.class.getName(), debitNote.getVendor().getID());
                }
                classPathIDMap.put(DebitNote.class.getName(), debitNote != null ? debitNote.getID() : "");
                JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 2);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Debit_Note_ModuleId, true);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                int seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);

                //Get Memo by config
                classPathIDMap.clear();
                classPathIDMap.put(DebitNote.class.getName(), debitNote.getID());
                placeHolderDetails = "";
                configJSON = getConfiguredTypeJSON(descJsonArr, 3);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Debit_Note_ModuleId, true);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
                Customer customer=null;
                Vendor vendor=null;
                if (debitNote != null && debitNote.getCustomer() != null) {
                    KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), debitNote.getCustomer().getID());
                    customer = (Customer) KWLCustomer.getEntityList().get(0);
                    isVendor = false;
                    madid = customer.getID();
                    madname = customer.getName();
                } else if (debitNote != null && debitNote.getVendor() != null) {
                    KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), debitNote.getVendor().getID());
                    vendor = (Vendor) KWLVendor.getEntityList().get(0);
                    isVendor = true;
                    madid = vendor.getID();
                    madname = vendor.getName();
                }
                HashMap<String, Object> paramsTaxDetails = new HashMap<>();
                paramsTaxDetails.put("companyid", companyid);
                paramsTaxDetails.put("dnid", debitNote.getID());
                paramsTaxDetails.put("accid", null);
                KwlReturnObject cnResult = accDebitNoteobj.getDebitTaxDetails(paramsTaxDetails);
                List<DebitNoteTaxEntry> invoiceDetails = cnResult.getEntityList();
                if (invoiceDetails != null && invoiceDetails.size()>0) {
                    placeHolderDetails="";
//                    Set<DebitNoteTaxEntry> invoiceDetails = debitNote.getDnTaxEntryDetails();
                    for (DebitNoteTaxEntry detail : invoiceDetails) {
//                        Account acc = detail.getAccount();
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        String transDetail = "";
                        if (acc != null) {
                            if (acc.getID().equals(accountid) || (vendor != null && vendor.getAccount().getID().equals(accountid)) || (customer != null && customer.getAccount().getID().equals(accountid)) || cashAccount.equals(accountid)) {
                                classPathIDMap.clear();
                                classPathIDMap.put(Account.class.getName(), acc != null ? acc.getID() : "");
                                classPathIDMap.put(DebitNoteTaxEntry.class.getName(), detail.getID());
                                classPathIDMap.put("CUSTOMDATA", detail.getID());
                                configJSON = getConfiguredTypeJSON(descJsonArr, 4);
                                transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Debit_Note_ModuleId, false);
                                transDetail = replaceNullPlaceHolders(transDetail);
                                transDetail = StringUtil.DecodeText(transDetail);
                                seqNo = configJSON.getInt("seq");
                                if (detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) {
                                    placeHolderDetails = transDetail;
                                    break;
                                } else {
                                    placeHolderDetails += transDetail;
                                }
                            }
                        }
                    }
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            }
            transactionDetails+=getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander=transactionDetails.replaceAll("<br>", ", ");
        }else{
            if (isPartyJournalEntry) {
                transactionDetails = "Party Journal Entry";
                transactionDetailsForExpander = "Party Journal Entry";
                String memo = StringUtil.isNullOrEmpty(entry.getMemo()) ? "" : "<br>" + entry.getMemo();
                String memoForExpander = StringUtil.isNullOrEmpty(entry.getMemo()) ? "" : ", " + entry.getMemo();
                transactionDetails += memo;
                transactionDetailsForExpander += memoForExpander;
                if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                    Account acc = jed.getAccount();
                    KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                    Account acc = (Account) KWLAccount.getEntityList().get(0);
                    if (acc != null && acc.getID().equals(accountid)) {
                        String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                        accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                        accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                        accDesc = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : "<br>" + jed.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : ", " + jed.getDescription();
                        transactionDetails += "<br>" + accID + " - " + accName + accDesc;
                        transactionDetailsForExpander += ", " + accID + " - " + accName + accDescForExpander;
                        String customColData = "", customColDataForExpander = "";


                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, jed.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(),false);


                        transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                    }
                }
            } else {
                DebitNote debitNote = (DebitNote) debitNoteMapPar.get(entry.getID())[0];
                Customer customer=null;
                Vendor vendor=null;
                if (debitNote != null && debitNote.getCustomer() != null) {
                    KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), debitNote.getCustomer().getID());
                    customer = (Customer) KWLCustomer.getEntityList().get(0);
                    isVendor = false;
                    madid = customer.getID();
                    madname = customer.getName();
                } else if (debitNote != null && debitNote.getVendor() != null) {
                    KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), debitNote.getVendor().getID());
                    vendor = (Vendor) KWLVendor.getEntityList().get(0);
                    isVendor = true;
                    madid = vendor.getID();
                    madname = vendor.getName();
                }
                transactionDetails = Constants.DEBIT_NOTE + "<br>" + (vendor != null ? (vendor.getAcccode() + " - " + vendor.getName()) : (customer.getAcccode() + " - " + customer.getName()));
                transactionDetailsForExpander = Constants.DEBIT_NOTE + ", " + (vendor != null ? (vendor.getAcccode() + " - " + vendor.getName()) : (customer.getAcccode() + " - " + customer.getName()));
                transactionDetails += (debitNote.getMemo() != null ? debitNote.getMemo().isEmpty() ? "" : "<br>" + debitNote.getMemo() : "");
                transactionDetailsForExpander += (debitNote.getMemo() != null ? debitNote.getMemo().isEmpty() ? "" : ", " + debitNote.getMemo() : "");
                HashMap<String, Object> paramsTaxDetails = new HashMap<>();
                paramsTaxDetails.put("companyid", companyid);
                paramsTaxDetails.put("dnid", debitNote.getID());
                paramsTaxDetails.put("accid", null);
                KwlReturnObject cnResult = accDebitNoteobj.getDebitTaxDetails(paramsTaxDetails);
                List<DebitNoteTaxEntry> invoiceDetails = cnResult.getEntityList();
                if (invoiceDetails != null && invoiceDetails.size()>0) {
                    String lineLevelDetails = "";
                    String lineLevelDetailsForExpander = "";
//                    Set<DebitNoteTaxEntry> invoiceDetails = debitNote.getDnTaxEntryDetails();
                    for (DebitNoteTaxEntry detail : invoiceDetails) {
//                        Account acc = detail.getAccount();
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        if (acc != null) {
                            if (acc.getID().equals(accountid) || (vendor != null && vendor.getAccount().getID().equals(accountid)) || (customer != null && customer.getAccount().getID().equals(accountid)) || cashAccount.equals(accountid)) {
                                String accName = "", accID = "", accDesc = "", accDescForExpander;
                                accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                                accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                                accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                                accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                                if (detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) {
                                    lineLevelDetails = "<br>" + accID + " - " + accName + accDesc;
                                    lineLevelDetailsForExpander = ", " + accID + " - " + accName + accDescForExpander;
                                } else {
                                    lineLevelDetails += "<br>" + accID + " - " + accName + accDesc;
                                    lineLevelDetailsForExpander += ", " + accID + " - " + accName + accDescForExpander;
                                }

                                String customColData = "", customColDataForExpander = "";

                                int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataJECount(companyid, detail.getID());
                                customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Debit_Note_ModuleId, detail.getID(), false) : "";
                                //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Debit_Note_ModuleId, jed.getID(), true);

                                lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                                customColDataForExpander = customColData;
                                customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                                lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                                if (detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) {
                                    break;
                                }
                            }
                        }
                    }
                    transactionDetails += lineLevelDetails;
                    transactionDetailsForExpander += lineLevelDetailsForExpander;
                }
            }
        }
        transDetMap.put("transactionDetails", transactionDetails);
        transDetMap.put("madid", madid);
        transDetMap.put("madname", madname);
        transDetMap.put("isVendor", isVendor?"true":"false");
        transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        return transDetMap;
    }
    Map<String, String> getTransactionDetailsForDebitNoteForGL(DebitNote debitNote, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        String lineLevelGSTCodes = "";     
        boolean isPartyJournalEntry = entry.getTypeValue() == 2;
        boolean isVendor = false;
        String madid="";
        String madname="";
        String gstCode = debitNote.getTax() == null ? "" : debitNote.getTax().getTaxCode();
        boolean isDocLevelGST = !StringUtil.isNullOrEmpty(gstCode);
        Map<String, String> transDetMap = new HashMap<String, String>();
        String lineLevelCustomFieldData="";
        if (isDescConfig) {
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            if (isPartyJournalEntry) {
                //Get Transaction Details by config
                String placeHolderDetails = "";
                JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                int seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
                //Get Memo by config
                classPathIDMap.clear();
                classPathIDMap.put(JournalEntry.class.getName(), entry.getID());
                placeHolderDetails = "";
                configJSON = getConfiguredTypeJSON(descJsonArr, 3);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
                if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                    Account acc = jed.getAccount();
                    KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                    Account acc = (Account) KWLAccount.getEntityList().get(0);
                    if (acc != null && acc.getID().equals(accountid)) {
                        classPathIDMap.clear();
                        classPathIDMap.put(Account.class.getName(), acc != null ? acc.getID() : "");
                        classPathIDMap.put(JournalEntryDetail.class.getName(), jed.getID());
                        classPathIDMap.put("CUSTOMDATA", jed.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                        placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
                        placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                        //Get line level Dimension Data
                        Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(), false);
                        lineLevelCustomFieldData = customFieldData.toString();
                        seqNo = configJSON.getInt("seq");
                        if (!StringUtil.isNullOrEmpty(jed.getCustomerVendorId())) {
                            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), jed.getCustomerVendorId());

                            Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
                            if (customer != null) {
                                isVendor = false;
                                madid = customer.getID();
                                madname = customer.getName();
                            }

                            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), jed.getCustomerVendorId());

                            Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
                            if (vendor != null) {
                                isVendor = true;
                                madid = vendor.getID();
                                madname = vendor.getName();
                            }
                        }
                    }
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            } else {
//                DebitNote debitNote = (DebitNote) debitNoteMapPar.get(entry.getID())[0];
                //Get Transaction Details by config
                String placeHolderDetails = "";
                if (debitNote.getCustomer() != null) {
                    classPathIDMap.put(Customer.class.getName(), debitNote.getCustomer().getID());
                }
                if (debitNote.getVendor() != null) {
                    classPathIDMap.put(Vendor.class.getName(), debitNote.getVendor().getID());
                }
                classPathIDMap.put(DebitNote.class.getName(), debitNote != null ? debitNote.getID() : "");
                JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 2);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Debit_Note_ModuleId, true);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                int seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
                //Get Memo by config
                classPathIDMap.clear();
                classPathIDMap.put(DebitNote.class.getName(), debitNote.getID());
                placeHolderDetails = "";
                configJSON = getConfiguredTypeJSON(descJsonArr, 3);
                placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_Debit_Note_ModuleId, true);
                placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                seqNo = configJSON.getInt("seq");
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
                Customer customer = null;
                Vendor vendor = null;
                if (debitNote != null && debitNote.getCustomer() != null) {
                    KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), debitNote.getCustomer().getID());
                    customer = (Customer) KWLCustomer.getEntityList().get(0);
                    isVendor = false;
                    madid = customer.getID();
                    madname = customer.getName();
                } else if (debitNote != null && debitNote.getVendor() != null) {
                    KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), debitNote.getVendor().getID());
                    vendor = (Vendor) KWLVendor.getEntityList().get(0);
                    isVendor = true;
                    madid = vendor.getID();
                    madname = vendor.getName();
                }
                HashMap<String, Object> paramsTaxDetails = new HashMap<>();
                paramsTaxDetails.put("companyid", companyid);
                paramsTaxDetails.put("dnid", debitNote.getID());
                paramsTaxDetails.put("accid", null);
                KwlReturnObject cnResult = accDebitNoteobj.getDebitTaxDetails(paramsTaxDetails);
                String tempGSTCode = "";
                List<DebitNoteTaxEntry> invoiceDetails = cnResult.getEntityList();
                if (invoiceDetails != null && invoiceDetails.size() > 0) {
                    placeHolderDetails = "";
//                    Set<DebitNoteTaxEntry> invoiceDetails = debitNote.getDnTaxEntryDetails();
                    for (DebitNoteTaxEntry detail : invoiceDetails) {
//                        Account acc = detail.getAccount();
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        String taxAccountId = detail.getTax() != null ? detail.getTax().getAccount().getID() : "";
                        String vendorAccountId = vendor != null ? vendor.getAccount().getID() : "";
                        String customerAccountId = customer != null ? customer.getAccount().getID() : "";
                        String transDetail = "";
                        if (acc != null) {
                            if (acc.getID().equals(accountid) || vendorAccountId.equals(accountid) || customerAccountId.equals(accountid) || cashAccount.equals(accountid) || taxAccountId.equals(accountid)) {
                                classPathIDMap.clear();
                                classPathIDMap.put(Account.class.getName(), acc != null ? acc.getID() : "");
                                classPathIDMap.put(DebitNoteTaxEntry.class.getName(), detail.getID());
                                classPathIDMap.put("CUSTOMDATA", detail.getID());
                                configJSON = getConfiguredTypeJSON(descJsonArr, 4);
                                transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Debit_Note_ModuleId, false);
                                transDetail = replaceNullPlaceHolders(transDetail);
                                transDetail = StringUtil.DecodeText(transDetail);
                                //Get line level Dimension Data
                                Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Debit_Note_ModuleId, detail.getID(), false);
                                lineLevelCustomFieldData = customFieldData.toString();
                                seqNo = configJSON.getInt("seq");
                                tempGSTCode = detail.getTax()==null ? "" : detail.getTax().getTaxCode();
                                if ((detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) || (detail.getGstJED() != null && detail.getGstJED().getID().equals(jed.getID())) || (detail.getTaxJedId() !=null && detail.getTaxJedId().equals(jed.getID()))) { //detail.getTaxJedId() for PR with DN
                                    placeHolderDetails = transDetail;
                                    lineLevelGSTCodes = tempGSTCode;
                                    break;
                                } else {
                                    placeHolderDetails += transDetail;
                                    if(!StringUtil.isNullOrEmpty(tempGSTCode)){
                                        if (!StringUtil.isNullOrEmpty(lineLevelGSTCodes)) {
                                            lineLevelGSTCodes += ", " + tempGSTCode;
                                        } else {
                                            lineLevelGSTCodes += tempGSTCode;
                                        }
                                }
                            }
                        }
                    }
                    }
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
                if (!isVendor) {
                    /*
                     * DebitNote against Customer (For Malaysian country).
                     */
                    cnResult = accDebitNoteobj.getDebitNoteAgainstCustomerGst(debitNote.getID(), companyid);
                    List<DebitNoteAgainstCustomerGst> debitNoteAgainstCustomerGsts = cnResult.getEntityList();
                    for (DebitNoteAgainstCustomerGst detail : debitNoteAgainstCustomerGsts) {
                        Product product = detail.getProduct();
                        String customerAccountId = customer != null ? customer.getAccount().getID() : "";
                        String taxAccountId = detail.getTax() != null ? detail.getTax().getAccount().getID() : "";
                        if (product.getSalesAccount().getID().equals(accountid) || customerAccountId.equals(accountid) || cashAccount.equals(accountid) || taxAccountId.equals(accountid)) {
                            tempGSTCode = detail.getTax() != null ? detail.getTax().getTaxCode() : "";
                            if ((detail.getJedid() != null && jed.getID().equals(detail.getJedid().getID())) || (detail.getGstJED() != null && detail.getGstJED().getID().equals(jed.getID()))) {
                                lineLevelGSTCodes = tempGSTCode;
                                break;
                            } else {
                                if (!StringUtil.isNullOrEmpty(tempGSTCode)) {
                                    if (!StringUtil.isNullOrEmpty(lineLevelGSTCodes)) {
                                        lineLevelGSTCodes += ", " + tempGSTCode;
                                    } else {
                                        lineLevelGSTCodes += tempGSTCode;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            transactionDetails += getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander = transactionDetails.replaceAll("<br>", ", ");
        } else {
            if (isPartyJournalEntry) {
                transactionDetails = "Party Journal Entry";
                transactionDetailsForExpander = "Party Journal Entry";
                String memo = StringUtil.isNullOrEmpty(entry.getMemo()) ? "" : "<br>" + entry.getMemo();
                String memoForExpander = StringUtil.isNullOrEmpty(entry.getMemo()) ? "" : ", " + entry.getMemo();
                transactionDetails += memo;
                transactionDetailsForExpander += memoForExpander;
                if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                    Account acc = jed.getAccount();
                    KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                    Account acc = (Account) KWLAccount.getEntityList().get(0);
                    if (acc != null && acc.getID().equals(accountid)) {
                        String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                        accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                        accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                        accDesc = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : "<br>" + jed.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : ", " + jed.getDescription();
                        transactionDetails += "<br>" + accID + " - " + accName + accDesc;
                        transactionDetailsForExpander += ", " + accID + " - " + accName + accDescForExpander;
                        String customColData = "", customColDataForExpander = "";
                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, jed.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(),false);
                        transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                    }
                }
            } else {
//                DebitNote debitNote = (DebitNote) debitNoteMapPar.get(entry.getID())[0];
                Customer customer = null;
                Vendor vendor = null;
                if (debitNote != null && debitNote.getCustomer() != null) {
                    KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), debitNote.getCustomer().getID());
                    customer = (Customer) KWLCustomer.getEntityList().get(0);
                    isVendor = false;
                    madid = customer.getID();
                    madname = customer.getName();
                } else if (debitNote != null && debitNote.getVendor() != null) {
                    KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), debitNote.getVendor().getID());
                    vendor = (Vendor) KWLVendor.getEntityList().get(0);
                    isVendor = true;
                    madid = vendor.getID();
                    madname = vendor.getName();
                }
                transactionDetails = Constants.DEBIT_NOTE + "<br>" + (vendor != null ? (vendor.getAcccode() + " - " + vendor.getName()) : (customer.getAcccode() + " - " + customer.getName()));
                transactionDetailsForExpander = Constants.DEBIT_NOTE + ", " + (vendor != null ? (vendor.getAcccode() + " - " + vendor.getName()) : (customer.getAcccode() + " - " + customer.getName()));
                transactionDetails += (debitNote.getMemo() != null ? debitNote.getMemo().isEmpty() ? "" : "<br>" + debitNote.getMemo() : "");
                transactionDetailsForExpander += (debitNote.getMemo() != null ? debitNote.getMemo().isEmpty() ? "" : ", " + debitNote.getMemo() : "");
                HashMap<String, Object> paramsTaxDetails = new HashMap<>();
                paramsTaxDetails.put("companyid", companyid);
                paramsTaxDetails.put("dnid", debitNote.getID());
                paramsTaxDetails.put("accid", null);
                KwlReturnObject cnResult = accDebitNoteobj.getDebitTaxDetails(paramsTaxDetails);
                List<DebitNoteTaxEntry> invoiceDetails = cnResult.getEntityList();
                if (invoiceDetails != null && invoiceDetails.size() > 0) {
                    String lineLevelDetails = "";
                    String lineLevelDetailsForExpander = "";
//                    Set<DebitNoteTaxEntry> invoiceDetails = debitNote.getDnTaxEntryDetails();
                    for (DebitNoteTaxEntry detail : invoiceDetails) {
//                        Account acc = detail.getAccount();
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        if (acc != null) {
                            if (acc.getID().equals(accountid) || (vendor != null && vendor.getAccount().getID().equals(accountid)) || (customer != null && customer.getAccount().getID().equals(accountid)) || cashAccount.equals(accountid)) {
                                String accName = "", accID = "", accDesc = "", accDescForExpander;
                                accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                                accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                                accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                                accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                                if (detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) {
                                    lineLevelDetails = "<br>" + accID + " - " + accName + accDesc;
                                    lineLevelDetailsForExpander = ", " + accID + " - " + accName + accDescForExpander;
                                } else {
                                    lineLevelDetails += "<br>" + accID + " - " + accName + accDesc;
                                    lineLevelDetailsForExpander += ", " + accID + " - " + accName + accDescForExpander;
                                }
                                String customColData = "", customColDataForExpander = "";
                                int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataJECount(companyid, detail.getID());
                                customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Debit_Note_ModuleId, detail.getID(), false) : "";
                                //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Debit_Note_ModuleId, jed.getID(), true);
                                lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                                customColDataForExpander = customColData;
                                customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                                lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                                if (detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) {
                                    break;
                                }
                            }
                        }
                    }
                    transactionDetails += lineLevelDetails;
                    transactionDetailsForExpander += lineLevelDetailsForExpander;
                }
            }
        }
        transDetMap.put("transactionDetails", transactionDetails);
        transDetMap.put("madid", madid);
        transDetMap.put("madname", madname);
        transDetMap.put("isVendor", isVendor?"true":"false");
        transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        transDetMap.put("gstCode", isDocLevelGST ? gstCode : lineLevelGSTCodes);
        transDetMap.put("lineLevelCustomFieldData", lineLevelCustomFieldData);
        return transDetMap;
    }
    
    
    Map<String, String> getTransactionDetailsForFixedAssetPurchaseInvoice(Map<String, GoodsReceipt> fixedAssetgrMapPar, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException{
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        boolean isVendor = false;
        String madid="";
        String madname="";
        Map<String, String> transDetMap = new HashMap<String, String>();
        if(isDescConfig){
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            GoodsReceipt goodsReceipt = fixedAssetgrMapPar.get(entry.getID());
            
            //Get Transaction Details by config
            classPathIDMap.put(GoodsReceipt.class.getName(), goodsReceipt.getID());
            String placeHolderDetails = "";
            JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            if (accountid.equals(cashAccount)) {
                configJSON = getConfiguredTypeJSON(descJsonArr, 2);
            }
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Vendor_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Customer Info by config
            classPathIDMap.clear();
            classPathIDMap.put(Vendor.class.getName(), goodsReceipt.getVendor().getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 3);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Vendor_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Memo by config
            classPathIDMap.clear();
            classPathIDMap.put(GoodsReceipt.class.getName(), goodsReceipt.getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 4);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Vendor_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            
            if (goodsReceipt != null) {
                isVendor = true;
                madid = goodsReceipt.getVendor().getID();
                madname = goodsReceipt.getVendor().getName();
                placeHolderDetails="";
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("goodsReceipt.ID");
                filter_params.add(goodsReceipt.getID());

                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(requestParamsHash);
                List<GoodsReceiptDetail> invoiceDetails = cnResult.getEntityList();
                for (GoodsReceiptDetail detail : invoiceDetails) {
                    String transDetail = "";
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        if (prd != null) {
                            classPathIDMap.clear();
                            classPathIDMap.put(Product.class.getName(), prd != null ? prd.getID() : "");
                            classPathIDMap.put(GoodsReceiptDetail.class.getName(), detail.getID());
                            classPathIDMap.put("CUSTOMDATA", detail.getID());
                            configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                            transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Vendor_Invoice_ModuleId, false);
                            transDetail = replaceNullPlaceHolders(transDetail);
                            transDetail =StringUtil.DecodeText(transDetail);
                            placeHolderDetails += transDetail;
                            seqNo = configJSON.getInt("seq");
                            if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                break;
                            }
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            transactionDetails+=getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander=transactionDetails.replaceAll("<br>", ", ");
        }else{
            GoodsReceipt gr = fixedAssetgrMapPar.get(entry.getID());
            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), gr.getVendor().getID());
            Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
            isVendor = true;
            madid = vendor.getID();
            madname = vendor.getName();
            if (accountid.equals(cashAccount)) {
                transactionDetails = Constants.CASH_PURCHASE + "<br>" + vendor.getAcccode() + " - " + vendor.getName();
                transactionDetailsForExpander = Constants.CASH_PURCHASE + ", " + vendor.getAcccode() + " - " + vendor.getName();
                transactionDetails += gr.getMemo().isEmpty() ? "" : "<br>" + gr.getMemo();
                transactionDetailsForExpander += gr.getMemo().isEmpty() ? "" : ", " + gr.getMemo();
                if (gr != null) {
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    HashMap<String, Object> requestParamsHash = new HashMap();
                    filter_names.add("goodsReceipt.ID");
                    filter_params.add(gr.getID());
                    requestParamsHash.put("filter_names", filter_names);
                    requestParamsHash.put("filter_params", filter_params);
                    KwlReturnObject cnResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(requestParamsHash);
                    List<GoodsReceiptDetail> invoiceDetails = cnResult.getEntityList();
                    for (GoodsReceiptDetail detail : invoiceDetails) {
                        if (detail.getInventory() != null) {
                            Inventory inventory = null;;
                            Product prd = null;
                            KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                            List listInv = KWLInventory.getEntityList();
                            Iterator itrInv = listInv.iterator();
                            if (itrInv.hasNext()) {
                                Object[] rowInv = (Object[]) itrInv.next();
                                inventory = (Inventory) rowInv[0];
                                prd = (Product) rowInv[1];
                            }
                            if (prd != null) {
                                String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                                prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                                prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                                prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                                prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                                transactionDetails += "<br>" + prdID + " - " + prdName + prdDesc;
                                transactionDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander;
                                String customColData = "", customColDataForExpander = "";

                                int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                                customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Vendor_Invoice_ModuleId, detail.getID(), false) : "";
                                //customColData = getCustomFieldAndDimensionData(companyid,Constants.Acc_Vendor_Invoice_ModuleId,detail.getID(),false);
                                transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                                customColDataForExpander = customColData;
                                customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                                transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                            }
                        }
                    }
                }
            } else {
                transactionDetails = Constants.ACQUIRED_INVOICE + "<br>" + vendor.getAcccode() + " - " + vendor.getName();
                transactionDetailsForExpander = Constants.ACQUIRED_INVOICE + ", " + vendor.getAcccode() + " - " + vendor.getName();
                transactionDetails += gr.getMemo().isEmpty() ? "" : "<br>" + gr.getMemo();
                transactionDetailsForExpander += gr.getMemo().isEmpty() ? "" : ", " + gr.getMemo();
                if (gr != null) {
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    HashMap<String, Object> requestParamsHash = new HashMap();
                    filter_names.add("goodsReceipt.ID");
                    filter_params.add(gr.getID());
                    requestParamsHash.put("filter_names", filter_names);
                    requestParamsHash.put("filter_params", filter_params);
                    KwlReturnObject cnResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(requestParamsHash);
                    List<GoodsReceiptDetail> invoiceDetails = cnResult.getEntityList();
                    for (GoodsReceiptDetail detail : invoiceDetails) {
                        if (detail.getInventory() != null) {
                            Inventory inventory = null;;
                            Product prd = null;
                            KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                            List listInv = KWLInventory.getEntityList();
                            Iterator itrInv = listInv.iterator();
                            if (itrInv.hasNext()) {
                                Object[] rowInv = (Object[]) itrInv.next();
                                inventory = (Inventory) rowInv[0];
                                prd = (Product) rowInv[1];
                            }
                            if (prd != null) {
                                String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                                prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                                prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                                prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                                prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                                transactionDetails += "<br>" + prdID + " - " + prdName + prdDesc;
                                transactionDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander;
                                String customColData = "", customColDataForExpander = "";

                                int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                                customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Vendor_Invoice_ModuleId, detail.getID(), false) : "";
                                //customColData = getCustomFieldAndDimensionData(companyid,Constants.Acc_Vendor_Invoice_ModuleId,detail.getID(),false);

                                transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                                customColDataForExpander = customColData;
                                customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                                transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                            }
                        }
                    }
                }
            }
        }
        transDetMap.put("transactionDetails", transactionDetails);
        transDetMap.put("madid", madid);
        transDetMap.put("madname", madname);
        transDetMap.put("isVendor", "true");
        transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        return transDetMap;
    }
    
    Map<String, String> getTransactionDetailsForFixedAssetPurchaseInvoiceForGL(GoodsReceipt goodsReceipt, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        boolean isVendor = false;
        String madid="";
        String madname="";
        String lineLevelGSTCodes = "";
        String gstCode = goodsReceipt.getTax() == null ? "" : goodsReceipt.getTax().getTaxCode();
        boolean isDocLevelGST = !StringUtil.isNullOrEmpty(gstCode);
        Map<String, String> transDetMap = new HashMap<String, String>();
        String lineLevelCustomFieldData="";
        if (isDescConfig) {
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
//            GoodsReceipt goodsReceipt = fixedAssetgrMapPar.get(entry.getID());

            //Get Transaction Details by config
            classPathIDMap.put(GoodsReceipt.class.getName(), goodsReceipt.getID());
            String placeHolderDetails = "";
            JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            if (accountid.equals(cashAccount)) {
                configJSON = getConfiguredTypeJSON(descJsonArr, 2);
            }
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId, true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Customer Info by config
            classPathIDMap.clear();
            classPathIDMap.put(Vendor.class.getName(), goodsReceipt.getVendor().getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 3);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId, true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Memo by config
            classPathIDMap.clear();
            classPathIDMap.put(GoodsReceipt.class.getName(), goodsReceipt.getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 4);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId, true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);

            if (goodsReceipt != null) {
                String tempGSTCode = "";
                isVendor = true;
                KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), goodsReceipt.getVendor().getID());
                Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
                madid = vendor.getID();
                madname = vendor.getName();
                placeHolderDetails = "";
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("goodsReceipt.ID");
                filter_params.add(goodsReceipt.getID());

                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(requestParamsHash);
                List<GoodsReceiptDetail> invoiceDetails = cnResult.getEntityList();
                for (GoodsReceiptDetail detail : invoiceDetails) {
                    String transDetail = "";
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        if (prd != null) {
                            classPathIDMap.clear();
                            classPathIDMap.put(Product.class.getName(), prd != null ? prd.getID() : "");
                            classPathIDMap.put(GoodsReceiptDetail.class.getName(), detail.getID());
                            classPathIDMap.put("CUSTOMDATA", detail.getID());
                            configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                            transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId, false);
                            transDetail = replaceNullPlaceHolders(transDetail);
                            transDetail = StringUtil.DecodeText(transDetail);
                            //Get line level Dimension Data
                            Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId, detail.getID(), false);
                            lineLevelCustomFieldData = customFieldData.toString();
                            placeHolderDetails += transDetail;
                            seqNo = configJSON.getInt("seq");
                            tempGSTCode = detail.getTax()==null ? "" : detail.getTax().getTaxCode();
                            if ((detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) || (detail.getGstJED() != null && detail.getGstJED().getID().equals(jed.getID()))) {
                                lineLevelGSTCodes = tempGSTCode;
                                break;
                            } else {
                                if(!StringUtil.isNullOrEmpty(tempGSTCode)){
                                    if (!StringUtil.isNullOrEmpty(lineLevelGSTCodes)) {
                                        lineLevelGSTCodes += ", " + tempGSTCode;
                                    } else {
                                        lineLevelGSTCodes += tempGSTCode;
                                    }
                                }
                            }
                            if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                break;
                            }
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            transactionDetails += getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander = transactionDetails.replaceAll("<br>", ", ");
        } else {
//            GoodsReceipt gr = fixedAssetgrMapPar.get(entry.getID());
            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), goodsReceipt.getVendor().getID());
            Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
            isVendor = true;
            madid = vendor.getID();
            madname = vendor.getName();
            if (accountid.equals(cashAccount)) {
                transactionDetails = Constants.CASH_PURCHASE + "<br>" + vendor.getAcccode() + " - " + vendor.getName();
                transactionDetailsForExpander = Constants.CASH_PURCHASE + ", " + vendor.getAcccode() + " - " + vendor.getName();
                transactionDetails += goodsReceipt.getMemo().isEmpty() ? "" : "<br>" + goodsReceipt.getMemo();
                transactionDetailsForExpander += goodsReceipt.getMemo().isEmpty() ? "" : ", " + goodsReceipt.getMemo();
                if (goodsReceipt != null) {
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    HashMap<String, Object> requestParamsHash = new HashMap();
                    filter_names.add("goodsReceipt.ID");
                    filter_params.add(goodsReceipt.getID());
                    requestParamsHash.put("filter_names", filter_names);
                    requestParamsHash.put("filter_params", filter_params);
                    KwlReturnObject cnResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(requestParamsHash);
                    List<GoodsReceiptDetail> invoiceDetails = cnResult.getEntityList();
                    for (GoodsReceiptDetail detail : invoiceDetails) {
                        if (detail.getInventory() != null) {
                            Inventory inventory = null;;
                            Product prd = null;
                            KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                            List listInv = KWLInventory.getEntityList();
                            Iterator itrInv = listInv.iterator();
                            if (itrInv.hasNext()) {
                                Object[] rowInv = (Object[]) itrInv.next();
                                inventory = (Inventory) rowInv[0];
                                prd = (Product) rowInv[1];
                            }
                            if (prd != null) {
                                String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                                prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                                prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                                prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                                prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                                transactionDetails += "<br>" + prdID + " - " + prdName + prdDesc;
                                transactionDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander;
                                String customColData = "", customColDataForExpander = "";

                                int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                                customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId, detail.getID(), false) : "";
                                //customColData = getCustomFieldAndDimensionData(companyid,Constants.Acc_Vendor_Invoice_ModuleId,detail.getID(),false);
                                transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                                customColDataForExpander = customColData;
                                customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                                transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                            }
                        }
                    }
                }
            } else {
                transactionDetails = Constants.ACQUIRED_INVOICE + "<br>" + vendor.getAcccode() + " - " + vendor.getName();
                transactionDetailsForExpander = Constants.ACQUIRED_INVOICE + ", " + vendor.getAcccode() + " - " + vendor.getName();
                transactionDetails += goodsReceipt.getMemo().isEmpty() ? "" : "<br>" + goodsReceipt.getMemo();
                transactionDetailsForExpander +=goodsReceipt.getMemo().isEmpty() ? "" : ", " + goodsReceipt.getMemo();
                if (goodsReceipt != null) {
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    HashMap<String, Object> requestParamsHash = new HashMap();
                    filter_names.add("goodsReceipt.ID");
                    filter_params.add(goodsReceipt.getID());
                    requestParamsHash.put("filter_names", filter_names);
                    requestParamsHash.put("filter_params", filter_params);
                    KwlReturnObject cnResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(requestParamsHash);
                    List<GoodsReceiptDetail> invoiceDetails = cnResult.getEntityList();
                    for (GoodsReceiptDetail detail : invoiceDetails) {
                        if (detail.getInventory() != null) {
                            Inventory inventory = null;;
                            Product prd = null;
                            KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                            List listInv = KWLInventory.getEntityList();
                            Iterator itrInv = listInv.iterator();
                            if (itrInv.hasNext()) {
                                Object[] rowInv = (Object[]) itrInv.next();
                                inventory = (Inventory) rowInv[0];
                                prd = (Product) rowInv[1];
                            }
                            if (prd != null) {
                                String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                                prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                                prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                                prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                                prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                                transactionDetails += "<br>" + prdID + " - " + prdName + prdDesc;
                                transactionDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander;
                                String customColData = "", customColDataForExpander = "";

                                int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                                customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId, detail.getID(), false) : "";
                                //customColData = getCustomFieldAndDimensionData(companyid,Constants.Acc_Vendor_Invoice_ModuleId,detail.getID(),false);

                                transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                                customColDataForExpander = customColData;
                                customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                                transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                            }
                        }
                    }
                }
            }
        }
        transDetMap.put("transactionDetails", transactionDetails);
        transDetMap.put("madid", madid);
        transDetMap.put("madname", madname);
        transDetMap.put("isVendor", "true");
        transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        transDetMap.put("gstCode", isDocLevelGST?gstCode:lineLevelGSTCodes);
        transDetMap.put("lineLevelCustomFieldData", lineLevelCustomFieldData);
        return transDetMap;
    }

    Map<String, String> getTransactionDetailsForFixedAssetInvoice(Map<String, Invoice> fixedAssetInvoiceMapPar, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException{
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        boolean isVendor = false;
String madid="";
String madname="";
        Map<String, String> transDetMap = new HashMap<String, String>();
        if(isDescConfig){
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            Invoice inv = fixedAssetInvoiceMapPar.get(entry.getID());
            
            //Get Transaction Details by config
            classPathIDMap.put(Invoice.class.getName(), inv.getID());
            String placeHolderDetails = "";
            JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            if (accountid.equals(cashAccount)) {
                configJSON = getConfiguredTypeJSON(descJsonArr, 2);
            }
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Customer Info by config
            classPathIDMap.clear();
            classPathIDMap.put(Customer.class.getName(), inv.getCustomer().getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 3);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Memo by config
            classPathIDMap.clear();
            classPathIDMap.put(Invoice.class.getName(), inv.getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 4);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            
            if (inv != null) {
                isVendor = false;
madid = inv.getCustomer().getID();
madname = inv.getCustomer().getName();
                placeHolderDetails="";
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("invoice.ID");
                filter_params.add(inv.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
                for (InvoiceDetail detail : invoiceDetails) {
                    String transDetail = "";
                    if (detail.getInventory() != null) {
                        Inventory inventory =  null;;
                        Product prd =  null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        if(prd!=null){
                            classPathIDMap.clear();
                            classPathIDMap.put(Product.class.getName(), prd != null ? prd.getID() : "");
                            classPathIDMap.put(InvoiceDetail.class.getName(), detail.getID());
                            classPathIDMap.put("CUSTOMDATA", detail.getID());
                            configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                            transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_FixedAssets_DisposalInvoice_ModuleId, false);
                            transDetail = replaceNullPlaceHolders(transDetail);
                            transDetail =StringUtil.DecodeText(transDetail);
                            placeHolderDetails += transDetail;
                            seqNo = configJSON.getInt("seq");
                            if (detail.getSalesJED() != null && jed.getID().equals(detail.getSalesJED().getID())) {
                                break;
                            }
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            transactionDetails+=getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander=transactionDetails.replaceAll("<br>", ", ");
        }else{
            Invoice inv = fixedAssetInvoiceMapPar.get(entry.getID());
            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), inv.getCustomer().getID());
            Customer customer =  (Customer)KWLCustomer.getEntityList().get(0);
            isVendor = false;
madid = customer.getID();
madname = customer.getName();
            if (accountid.equals(cashAccount)) {
                transactionDetails = Constants.CASH_SALE + "<br>" + customer.getAcccode() + " - " + customer.getName();
                transactionDetailsForExpander = Constants.CASH_SALE + ", " + customer.getAcccode() + " - " + customer.getName();
                transactionDetails += inv.getMemo().isEmpty() ? "" : "<br>" + inv.getMemo();
                transactionDetailsForExpander += inv.getMemo().isEmpty() ? "" : ", " + inv.getMemo();
                if (inv != null) {
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    HashMap<String, Object> requestParamsHash = new HashMap();
                    filter_names.add("invoice.ID");
                    filter_params.add(inv.getID());
                    requestParamsHash.put("filter_names", filter_names);
                    requestParamsHash.put("filter_params", filter_params);
                    KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                    List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
                    for (InvoiceDetail detail : invoiceDetails) {
                        if (detail.getInventory() != null) {
                            Inventory inventory =  null;;
                            Product prd =  null;
                            KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                            List listInv = KWLInventory.getEntityList();
                            Iterator itrInv = listInv.iterator();
                            if (itrInv.hasNext()) {
                                Object[] rowInv = (Object[]) itrInv.next();
                                inventory = (Inventory) rowInv[0];
                                prd = (Product) rowInv[1];
                            }
                            String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                            prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                            prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                            prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                            prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                            transactionDetails += "<br>" + prdID + " - " + prdName + prdDesc;
                            transactionDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander;
                            String customColData = "", customColDataForExpander = "";

                            int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                            customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId, detail.getID(), false) : "";
                            //customColData = getCustomFieldAndDimensionData(companyid,Constants.Acc_Invoice_ModuleId,detail.getID(),false);

                            transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                            customColDataForExpander = customColData;
                            customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                            transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        }
                    }
                }
            } else {
                transactionDetails = Constants.DISPOSAL_INVOICE + "<br>" + customer.getAcccode() + " - " + customer.getName();
                transactionDetailsForExpander = Constants.DISPOSAL_INVOICE + ", " + customer.getAcccode() + " - " + customer.getName();
                transactionDetails += inv.getMemo().isEmpty() ? "" : "<br>" + inv.getMemo();
                transactionDetailsForExpander += inv.getMemo().isEmpty() ? "" : ", " + inv.getMemo();
                if (inv != null) {
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    HashMap<String, Object> requestParamsHash = new HashMap();
                    filter_names.add("invoice.ID");
                    filter_params.add(inv.getID());
                    requestParamsHash.put("filter_names", filter_names);
                    requestParamsHash.put("filter_params", filter_params);
                    KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                    List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
                    for (InvoiceDetail detail : invoiceDetails) {
                        if (detail.getInventory() != null) {
                            Inventory inventory =  null;;
                            Product prd =  null;
                            KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                            List listInv = KWLInventory.getEntityList();
                            Iterator itrInv = listInv.iterator();
                            if (itrInv.hasNext()) {
                                Object[] rowInv = (Object[]) itrInv.next();
                                inventory = (Inventory) rowInv[0];
                                prd = (Product) rowInv[1];
                            }
                            String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                            prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                            prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                            prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                            prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                            transactionDetails += "<br>" + prdID + " - " + prdName + prdDesc;
                            transactionDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander;
                            String customColData = "", customColDataForExpander = "";

                            int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                            customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId, detail.getID(), false) : "";
                            //customColData = getCustomFieldAndDimensionData(companyid,Constants.Acc_Invoice_ModuleId,detail.getID(),false);
                            transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                            customColDataForExpander = customColData;
                            customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                            transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        }
                    }
                }
            }
        }
        transDetMap.put("transactionDetails", transactionDetails);
        transDetMap.put("madid", madid);
        transDetMap.put("madname", madname);
        transDetMap.put("isVendor", "false");
        transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        return transDetMap;
    }
    
     Map<String, String> getTransactionDetailsForLeaseInvoice(Map<String, Invoice> fixedAssetInvoiceMapPar, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException{
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        boolean isVendor = false;
String madid="";
String madname="";
        Map<String, String> transDetMap = new HashMap<String, String>();
        if(isDescConfig){
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            Invoice inv = fixedAssetInvoiceMapPar.get(entry.getID());
            
            //Get Transaction Details by config
            classPathIDMap.put(Invoice.class.getName(), inv.getID());
            String placeHolderDetails = "";
            JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            if (accountid.equals(cashAccount)) {
                configJSON = getConfiguredTypeJSON(descJsonArr, 2);
            }
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Customer Info by config
            classPathIDMap.clear();
            classPathIDMap.put(Customer.class.getName(), inv.getCustomer().getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 3);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Memo by config
            classPathIDMap.clear();
            classPathIDMap.put(Invoice.class.getName(), inv.getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 4);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Invoice_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            
            if (inv != null) {
                 isVendor = false;
madid = inv.getCustomer().getID();
madname = inv.getCustomer().getName();
                placeHolderDetails="";
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("invoice.ID");
                filter_params.add(inv.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
                for (InvoiceDetail detail : invoiceDetails) {
                    String transDetail = "";
                    if (detail.getInventory() != null) {
                        Inventory inventory =  null;;
                        Product prd =  null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        if(prd!=null){
                            classPathIDMap.clear();
                            classPathIDMap.put(Product.class.getName(), prd != null ? prd.getID() : "");
                            classPathIDMap.put(InvoiceDetail.class.getName(), detail.getID());
                            classPathIDMap.put("CUSTOMDATA", detail.getID());
                            configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                            transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_FixedAssets_DisposalInvoice_ModuleId, false);
                            transDetail = replaceNullPlaceHolders(transDetail);
                            transDetail = StringUtil.DecodeText(transDetail);
                            placeHolderDetails += transDetail;
                            seqNo = configJSON.getInt("seq");
                            if (detail.getSalesJED() != null && jed.getID().equals(detail.getSalesJED().getID())) {
                                break;
                            }
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            transactionDetails+=getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander=transactionDetails.replaceAll("<br>", ", ");
        }else{
            Invoice inv = fixedAssetInvoiceMapPar.get(entry.getID());
            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), inv.getCustomer().getID());
            Customer customer =  (Customer)KWLCustomer.getEntityList().get(0);
            isVendor = false;
madid = customer.getID();
madname = customer.getName();
            if (accountid.equals(cashAccount)) {
                transactionDetails = Constants.CASH_SALE + "<br>" + customer.getAcccode() + " - " + customer.getName();
                transactionDetailsForExpander = Constants.CASH_SALE + ", " + customer.getAcccode() + " - " + customer.getName();
                transactionDetails += inv.getMemo().isEmpty() ? "" : "<br>" + inv.getMemo();
                transactionDetailsForExpander += inv.getMemo().isEmpty() ? "" : ", " + inv.getMemo();
                if (inv != null) {
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    HashMap<String, Object> requestParamsHash = new HashMap();
                    filter_names.add("invoice.ID");
                    filter_params.add(inv.getID());
                    requestParamsHash.put("filter_names", filter_names);
                    requestParamsHash.put("filter_params", filter_params);
                    KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                    List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
                    for (InvoiceDetail detail : invoiceDetails) {
                        if (detail.getInventory() != null) {
                            Inventory inventory =  null;;
                            Product prd =  null;
                            KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                            List listInv = KWLInventory.getEntityList();
                            Iterator itrInv = listInv.iterator();
                            if (itrInv.hasNext()) {
                                Object[] rowInv = (Object[]) itrInv.next();
                                inventory = (Inventory) rowInv[0];
                                prd = (Product) rowInv[1];
                            }
                            String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                            prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                            prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                            prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                            prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                            transactionDetails += "<br>" + prdID + " - " + prdName + prdDesc;
                            transactionDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander;
                            String customColData = "", customColDataForExpander = "";

                            int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                            customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId, detail.getID(), false) : "";
                            //customColData = getCustomFieldAndDimensionData(companyid,Constants.Acc_Invoice_ModuleId,detail.getID(),false);

                            transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                            customColDataForExpander = customColData;
                            customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                            transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        }
                    }
                }
            } else {
                transactionDetails = Constants.LEASE_INVOICE + "<br>" + customer.getAcccode() + " - " + customer.getName();
                transactionDetailsForExpander = Constants.LEASE_INVOICE + ", " + customer.getAcccode() + " - " + customer.getName();
                transactionDetails += inv.getMemo().isEmpty() ? "" : "<br>" + inv.getMemo();
                transactionDetailsForExpander += inv.getMemo().isEmpty() ? "" : ", " + inv.getMemo();
                if (inv != null) {
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    HashMap<String, Object> requestParamsHash = new HashMap();
                    filter_names.add("invoice.ID");
                    filter_params.add(inv.getID());
                    requestParamsHash.put("filter_names", filter_names);
                    requestParamsHash.put("filter_params", filter_params);
                    KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                    List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
                    for (InvoiceDetail detail : invoiceDetails) {
                        if (detail.getInventory() != null) {
                            Inventory inventory =  null;;
                            Product prd =  null;
                            KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                            List listInv = KWLInventory.getEntityList();
                            Iterator itrInv = listInv.iterator();
                            if (itrInv.hasNext()) {
                                Object[] rowInv = (Object[]) itrInv.next();
                                inventory = (Inventory) rowInv[0];
                                prd = (Product) rowInv[1];
                            }
                            String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                            prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                            prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                            prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                            prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                            transactionDetails += "<br>" + prdID + " - " + prdName + prdDesc;
                            transactionDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander;
                            String customColData = "", customColDataForExpander = "";

                            int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                            customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.LEASE_INVOICE_MODULEID, detail.getID(), false) : "";
                            //customColData = getCustomFieldAndDimensionData(companyid,Constants.Acc_Invoice_ModuleId,detail.getID(),false);
                            transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                            customColDataForExpander = customColData;
                            customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                            transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        }
                    }
                }
            }
        }
        transDetMap.put("transactionDetails", transactionDetails);
        transDetMap.put("madid", madid);
        transDetMap.put("madname", madname);
        transDetMap.put("isVendor", "false");
        transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        return transDetMap;
    }
     
    Map<String, String> getTransactionDetailsForFixedAssetInvoiceForGL(Invoice inv, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig,Integer moduleid) throws UnsupportedEncodingException, ServiceException, JSONException {
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        boolean isVendor = false;
        String madid = "";
        String madname = "";
        String lineLevelGSTCodes = "";
        String gstCode = inv.getTax() == null ? "" : inv.getTax().getTaxCode();
        boolean isDocLevelGST = !StringUtil.isNullOrEmpty(gstCode);
        Map<String, String> transDetMap = new HashMap<String, String>();
        String lineLevelCustomFieldData="";
        if (isDescConfig) {
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
//            Invoice inv = fixedAssetInvoiceMapPar.get(entry.getID());
            //Get Transaction Details by config
            classPathIDMap.put(Invoice.class.getName(), inv.getID());
            String placeHolderDetails = "";
            JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            if (accountid.equals(cashAccount)) {
                configJSON = getConfiguredTypeJSON(descJsonArr, 2);
            }
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), moduleid, true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Customer Info by config
            classPathIDMap.clear();
            classPathIDMap.put(Customer.class.getName(), inv.getCustomer().getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 3);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), moduleid, true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            //Get Memo by config
            classPathIDMap.clear();
            classPathIDMap.put(Invoice.class.getName(), inv.getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 4);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), moduleid, true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            if (inv != null) {
                String tempGSTCode = "";
                 isVendor = false;
                KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), inv.getCustomer().getID());
                Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
                madid = customer.getID();
                madname = customer.getName();
                placeHolderDetails = "";
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("invoice.ID");
                filter_params.add(inv.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
                for (InvoiceDetail detail : invoiceDetails) {
                    String transDetail = "";
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        if (prd != null) {
                            classPathIDMap.clear();
                            classPathIDMap.put(Product.class.getName(), prd != null ? prd.getID() : "");
                            classPathIDMap.put(InvoiceDetail.class.getName(), detail.getID());
                            classPathIDMap.put("CUSTOMDATA", detail.getID());
                            configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                            transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), moduleid, false);
                            transDetail = replaceNullPlaceHolders(transDetail);
                            transDetail = StringUtil.DecodeText(transDetail);
                            //Get line level Dimension Data
                            Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, moduleid, detail.getID(), false);
                            lineLevelCustomFieldData = customFieldData.toString();
                            placeHolderDetails += transDetail;
                            seqNo = configJSON.getInt("seq");
                            tempGSTCode = detail.getTax()==null ? "" : detail.getTax().getTaxCode();
                            if ((detail.getSalesJED() != null && jed.getID().equals(detail.getSalesJED().getID())) || (detail.getGstJED() != null && detail.getGstJED().getID().equals(jed.getID()))) {
                                lineLevelGSTCodes = tempGSTCode;
                                break;
                            } else {
                                if(!StringUtil.isNullOrEmpty(tempGSTCode)){
                                    if (!StringUtil.isNullOrEmpty(lineLevelGSTCodes)) {
                                        lineLevelGSTCodes += ", " + tempGSTCode;
                                    } else {
                                        lineLevelGSTCodes += tempGSTCode;
                                    }
                                }
                            }
                            if (detail.getSalesJED() != null && jed.getID().equals(detail.getSalesJED().getID())) {
                                break;
                            }
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            transactionDetails += getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander = transactionDetails.replaceAll("<br>", ", ");
        } else {
//            Invoice inv = fixedAssetInvoiceMapPar.get(entry.getID());
            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), inv.getCustomer().getID());
            Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
            isVendor = false;
            madid = customer.getID();
            madname = customer.getName();
            if (accountid.equals(cashAccount)) {
                transactionDetails = Constants.CASH_SALE + "<br>" + customer.getAcccode() + " - " + customer.getName();
                transactionDetailsForExpander = Constants.CASH_SALE + ", " + customer.getAcccode() + " - " + customer.getName();
                transactionDetails += inv.getMemo().isEmpty() ? "" : "<br>" + inv.getMemo();
                transactionDetailsForExpander += inv.getMemo().isEmpty() ? "" : ", " + inv.getMemo();
                if (inv != null) {
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    HashMap<String, Object> requestParamsHash = new HashMap();
                    filter_names.add("invoice.ID");
                    filter_params.add(inv.getID());
                    requestParamsHash.put("filter_names", filter_names);
                    requestParamsHash.put("filter_params", filter_params);
                    KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                    List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
                    for (InvoiceDetail detail : invoiceDetails) {
                        if (detail.getInventory() != null) {
                            Inventory inventory = null;;
                            Product prd = null;
                            KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                            List listInv = KWLInventory.getEntityList();
                            Iterator itrInv = listInv.iterator();
                            if (itrInv.hasNext()) {
                                Object[] rowInv = (Object[]) itrInv.next();
                                inventory = (Inventory) rowInv[0];
                                prd = (Product) rowInv[1];
                            }
                            String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                            prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                            prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                            prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                            prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                            transactionDetails += "<br>" + prdID + " - " + prdName + prdDesc;
                            transactionDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander;
                            String customColData = "", customColDataForExpander = "";
                            int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                            customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, moduleid, detail.getID(), false) : "";
                            //customColData = getCustomFieldAndDimensionData(companyid,Constants.Acc_Invoice_ModuleId,detail.getID(),false);
                            transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                            customColDataForExpander = customColData;
                            customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                            transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        }
                    }
                }
            } else {
                transactionDetails = (inv.isFixedAssetLeaseInvoice()?Constants.LEASE_INVOICE:Constants.DISPOSAL_INVOICE) + "<br>" + customer.getAcccode() + " - " + customer.getName();
                transactionDetailsForExpander = (inv.isFixedAssetLeaseInvoice()?Constants.LEASE_INVOICE:Constants.DISPOSAL_INVOICE) + ", " + customer.getAcccode() + " - " + customer.getName();
                transactionDetails += inv.getMemo().isEmpty() ? "" : "<br>" + inv.getMemo();
                transactionDetailsForExpander += inv.getMemo().isEmpty() ? "" : ", " + inv.getMemo();
                if (inv != null) {
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    HashMap<String, Object> requestParamsHash = new HashMap();
                    filter_names.add("invoice.ID");
                    filter_params.add(inv.getID());
                    requestParamsHash.put("filter_names", filter_names);
                    requestParamsHash.put("filter_params", filter_params);
                    KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                    List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
                    for (InvoiceDetail detail : invoiceDetails) {
                        if (detail.getInventory() != null) {
                            Inventory inventory = null;;
                            Product prd = null;
                            KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                            List listInv = KWLInventory.getEntityList();
                            Iterator itrInv = listInv.iterator();
                            if (itrInv.hasNext()) {
                                Object[] rowInv = (Object[]) itrInv.next();
                                inventory = (Inventory) rowInv[0];
                                prd = (Product) rowInv[1];
                            }
                            String prdName = "", prdID = "", prdDesc = "", prdDescForExpander = "";
                            prdID = StringUtil.isNullOrEmpty(prd.getProductid()) ? "" : prd.getProductid();
                            prdName = StringUtil.isNullOrEmpty(prd.getName()) ? "" : prd.getName();
                            prdDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                            prdDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                            transactionDetails += "<br>" + prdID + " - " + prdName + prdDesc;
                            transactionDetailsForExpander += ", " + prdID + " - " + prdName + prdDescForExpander;
                            String customColData = "", customColDataForExpander = "";
                            int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                            customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid,(inv.isFixedAssetLeaseInvoice()?Constants.LEASE_INVOICE_MODULEID:Constants.Acc_FixedAssets_DisposalInvoice_ModuleId) , detail.getID(), false) : "";
                            //customColData = getCustomFieldAndDimensionData(companyid,Constants.Acc_Invoice_ModuleId,detail.getID(),false);
                            transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                            customColDataForExpander = customColData;
                            customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                            transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        }
                    }
                }
            }
        }
        transDetMap.put("transactionDetails", transactionDetails);
        transDetMap.put("madid", madid);
        transDetMap.put("madname", madname);
        transDetMap.put("isVendor", "false");
        transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        transDetMap.put("gstCode", isDocLevelGST?gstCode:lineLevelGSTCodes);
        transDetMap.put("lineLevelCustomFieldData", lineLevelCustomFieldData);
        return transDetMap;
    }
    
    Map<String, String> getTransactionDetailsForJournalEntry(JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException{
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        boolean isPartyJournalEntry = entry.getTypeValue() == 2;
        String madname = "";
        String madid = "";
        boolean isVendor= false;
        Map<String, String> transDetMap = new HashMap<String, String>();
        String lineLevelCustomFieldData="";
        if(isDescConfig){
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            
            //Get Transaction Details by config
            String placeHolderDetails = "";
            classPathIDMap.put(JournalEntry.class.getName(), entry.getID());
            JSONObject configJSON = new JSONObject();
            if(isPartyJournalEntry){
                configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            }else{
                configJSON = getConfiguredTypeJSON(descJsonArr, 2);
            }
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);

            //Get Memo by config
            classPathIDMap.clear();
            classPathIDMap.put(JournalEntry.class.getName(), entry.getID());
            placeHolderDetails = "";
            configJSON = getConfiguredTypeJSON(descJsonArr, 3);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            
            if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                Account acc = jed.getAccount();
                KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                Account acc = (Account) KWLAccount.getEntityList().get(0);
                if (acc != null && acc.getID().equals(accountid)) {
                    classPathIDMap.clear();
                    classPathIDMap.put(Account.class.getName(), acc != null ? acc.getID() : "");
                    classPathIDMap.put(JournalEntryDetail.class.getName(), jed.getID());
                    classPathIDMap.put("CUSTOMDATA", jed.getID());
                    configJSON = getConfiguredTypeJSON(descJsonArr, 4);
                    placeHolderDetails = getFinalDescription(classPathIDMap, configJSON, companyid, jed.getID(), Constants.Acc_GENERAL_LEDGER_ModuleId, false);
                    placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                    placeHolderDetails = StringUtil.DecodeText(placeHolderDetails);
                    //Get line level Dimension Data
                    Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(), false);
                    lineLevelCustomFieldData = customFieldData.toString();
                    seqNo = configJSON.getInt("seq");
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            }
            if (!StringUtil.isNullOrEmpty(jed.getCustomerVendorId())) {
                KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), jed.getCustomerVendorId());
                Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
                if (customer != null) {
                    madid = customer.getID();
                    madname = customer.getName();
                    isVendor = false;
                }
                KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), jed.getCustomerVendorId());
                Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
                if (vendor != null) {
                    madid = vendor.getID();
                    madname = vendor.getName();
                    isVendor = true;
                }
            }
            transactionDetails+=getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander=transactionDetails.replaceAll("<br>", ", ");
        }else{
            transactionDetails = isPartyJournalEntry ? "Party Journal Entry" : "Journal Entry";
            transactionDetailsForExpander = isPartyJournalEntry ? "Party Journal Entry" : "Journal Entry";
            String memo = StringUtil.isNullOrEmpty(entry.getMemo()) ? "" : "<br>" + entry.getMemo();
            String memoForExpander = StringUtil.isNullOrEmpty(entry.getMemo()) ? "" : ", " + entry.getMemo();
            transactionDetails += memo;
            transactionDetailsForExpander += memoForExpander;
            if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                Account acc = jed.getAccount();
                KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                Account acc = (Account) KWLAccount.getEntityList().get(0);
                if (acc != null && acc.getID().equals(accountid)) {
                    String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                    accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                    accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                    accDesc = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : "<br>" + jed.getDescription();
                    accDescForExpander = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : ", " + jed.getDescription();
                    transactionDetails += "<br>" + accID + " - " + accName + accDesc;
                    transactionDetailsForExpander += ", " + accID + " - " + accName + accDescForExpander;
                    String customColData = "", customColDataForExpander = "";

                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, jed.getID());
                    customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(), false) : "";
                    //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(),false);

                    transactionDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                    customColDataForExpander = customColData;
                    customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                    transactionDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                }
            }
        }
        transDetMap.put("transactionDetails", transactionDetails);
        transDetMap.put("isJERecord", "true");
        transDetMap.put("madid", madid);
        transDetMap.put("madname", madname);
        transDetMap.put("isVendor", isVendor?"true":"false");
        transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        transDetMap.put("lineLevelCustomFieldData", lineLevelCustomFieldData);
        return  transDetMap;
    }

    private String getFinalDescription(HashMap<String, String> classPathIDMap, JSONObject jobj, String companyid, String transDetailId, int moduleId, boolean isJEDetailsId) {
        String configuredKey = "";
        try {
            JSONArray jArr = jobj.getJSONArray("info");
            for(int cnt =0; cnt < jArr.length(); cnt ++) {
                JSONObject jtemp = jArr.getJSONObject(cnt);
                configuredKey =  jtemp.getString("key");
                String[] classPaths = jtemp.getString("classname").split(",");
                for(int pathCnt = 0; pathCnt < classPaths.length; pathCnt++) {
                    if(classPathIDMap.containsKey(classPaths[pathCnt])) {
                        configuredKey = getKeyDataByClassName(classPaths[pathCnt], classPathIDMap.get(classPaths[pathCnt]).toString(), configuredKey,companyid,transDetailId,moduleId,isJEDetailsId);
                    }
                }
            }
        } catch (Exception ex) {
            
        }
        return configuredKey;
    }
    
    private String replaceNullPlaceHolders(String mainStr){
        String resString=mainStr;
        Pattern p = Pattern.compile("\\$\\#\\$(.*?)\\$\\#\\$");
        Matcher m = p.matcher(mainStr);
        while (m.find()) {
            String getterKey = m.group(1);
            resString = getFormatedKeyData(resString, getterKey);
        }
        resString = resString.replaceAll("\\$\\#\\$(.*?)\\$\\#\\$", "");
        return resString;
    }
    
    private String getSequenceWiseDescription(HashMap<Integer, String> finalTransDetailsMap){
        String finalSeqWiseDesc="";
        if(!finalTransDetailsMap.entrySet().isEmpty()){
            finalTransDetailsMap=StringUtil.sortMapByIntegerKeyValue(finalTransDetailsMap);
            List<Map.Entry<Integer,String>> list = new LinkedList<Map.Entry<Integer,String>>(finalTransDetailsMap.entrySet());
            for (Iterator<Map.Entry<Integer,String>> itr = list.iterator();itr.hasNext();) {
                Map.Entry<Integer,String> entry = itr.next();
                finalSeqWiseDesc+=entry.getValue();
            }
        }
        return finalSeqWiseDesc;
    }
    
   
    
    Map<String, String> getTransactionDetailsForReceipt(Map<String, Object[]> paymentReceivedMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig, Map<String, Integer> jeDetailReceiptTypeMap, boolean bankBook, boolean ledgerReport) throws UnsupportedEncodingException, ServiceException, JSONException{
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        boolean isVendor = false;
String madid="";
String madname="";
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        Map<String, String> transDetMap = new HashMap<String, String>();
        if(isDescConfig){
            //Desc by config
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            Receipt tempr = (Receipt) paymentReceivedMap.get(entry.getID())[0];
            int receiptType = 0; // 0 if no mapping present
            if (jeDetailReceiptTypeMap.containsKey(jed.getID()) && jeDetailReceiptTypeMap.get(jed.getID()) != null) {
                receiptType = jeDetailReceiptTypeMap.get(jed.getID()).intValue();
            }
            
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            HashMap<String, Object> requestParamsMap = new HashMap();
            filter_names.add("ID");
            filter_params.add(tempr.getPayDetail().getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            KwlReturnObject resultPayDet = accReceiptDao.getPayDetails(requestParamsMap);
            PayDetail payDetail = (PayDetail) resultPayDet.getEntityList().get(0);
            String cvName = "";
            if (tempr != null && tempr.getCustomer() != null && (bankBook || ledgerReport)) {
//                Customer customer = tempr.getCustomer();
                KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempr.getCustomer().getID());
                Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                cvName = customer.getName();
                isVendor = false;
madid = customer.getID();
madname = customer.getName();
            } else if (tempr != null && !StringUtil.isNullOrEmpty(tempr.getVendor()) && (bankBook || ledgerReport)) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempr.getVendor());
                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                    cvName = vendor.getName();
                    isVendor = true;
madid = vendor.getID();
madname = vendor.getName();
                }
            }
            
            if (tempr.getPaymentWindowType() == 3) {// Payment Aginst GL
                transactionDetails += "Receipt Payment Against GL";
                transactionDetailsForExpander += "Receipt Payment Against GL";
                if (tempr.getPayDetail() != null && payDetail.getPaymentMethod() != null) {
                    KwlReturnObject resultPaymentMethod = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), payDetail.getPaymentMethod().getID());
                    PaymentMethod paymentMethod = (PaymentMethod) resultPaymentMethod.getEntityList().get(0);
                    if (paymentMethod.getDetailType() == PaymentMethod.TYPE_CASH) {
                        transactionDetails += ", Cash Payment";
                        transactionDetailsForExpander += ", Cash Payment";
                    }
                }
            } else {// Receive Payment from Vendor or Customer
                transactionDetails += "Receive Payment";
                transactionDetailsForExpander += "Receive Payment";
            }

            classPathIDMap.put(Receipt.class.getName(), tempr.getID());
            // get Receipt level Desc 
            String placeHolderDetails = "";
            JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Receive_Payment_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            
            filter_names.clear(); filter_params.clear(); requestParamsMap.clear();
            filter_names.add("receipt.ID");
            filter_params.add(tempr.getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            
            KwlReturnObject result = accReceiptDao.getReceiptDetailOtherwise(requestParamsMap);
            List<ReceiptDetailOtherwise> tempList = result.getEntityList();

            if (tempList != null && tempList.size() > 0 && (receiptType == Constants.GLPayment || receiptType == 0)) {
                String transDetail = "";
                placeHolderDetails = "";
                for (ReceiptDetailOtherwise detail : tempList) {
//                    if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        if (acc != null ) {
                            classPathIDMap.clear();
                            classPathIDMap.put(Account.class.getName(), acc.getID());
                            if (tempr.getCustomer() != null) {
                                classPathIDMap.put(Customer.class.getName(), tempr.getCustomer().getID());
                            }
                            if (!StringUtil.isNullOrEmpty(tempr.getVendor())) {
                                classPathIDMap.put(Vendor.class.getName(), tempr.getVendor());
                            }
                            classPathIDMap.put(ReceiptDetailOtherwise.class.getName(), detail.getID());
                            classPathIDMap.put("CUSTOMDATA", detail.getID());
                            // get Receipt level Desc 
                            configJSON = getConfiguredTypeJSON(descJsonArr, 2);
                            transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Receive_Payment_ModuleId, false);
                            transDetail = replaceNullPlaceHolders(transDetail);
                            transDetail =StringUtil.DecodeText(transDetail);
                            seqNo = configJSON.getInt("seq");
                            if ((detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) || (detail.getGstJED() != null && detail.getGstJED().getID().equals(jed.getID()))) {
                                placeHolderDetails = transDetail;
                                break;
                            } else {
                                placeHolderDetails += transDetail;
                            }
                        }
//                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            KwlReturnObject resultAdv = accReceiptDao.getReceiptAdvanceDetails(requestParamsMap);
            List<ReceiptAdvanceDetail> tempListresultAdv = resultAdv.getEntityList();
            if (tempListresultAdv != null && tempListresultAdv.size() > 0 && (receiptType == Constants.AdvancePayment || receiptType == 0)) {
                placeHolderDetails="";
//                Set<ReceiptAdvanceDetail> invoiceDetails = tempr.getReceiptAdvanceDetails();
                String transDetail = "";
                for (ReceiptAdvanceDetail detail : tempListresultAdv) {
                    classPathIDMap.clear();
                    if (tempr.getCustomer() != null) {
                        classPathIDMap.put(Customer.class.getName(), tempr.getCustomer().getID());
                    }
                    if (!StringUtil.isNullOrEmpty(tempr.getVendor())) {
                        classPathIDMap.put(Vendor.class.getName(), tempr.getVendor());
                    }
                    classPathIDMap.put(ReceiptAdvanceDetail.class.getName(), detail.getId());
                    classPathIDMap.put("CUSTOMDATA", detail.getId());
                    // get Receipt level Desc 
                    configJSON = getConfiguredTypeJSON(descJsonArr, 3);
                    transDetail = getFinalDescription(classPathIDMap, configJSON,companyid,detail.getId(),Constants.Acc_Receive_Payment_ModuleId,false);
                    transDetail = replaceNullPlaceHolders(transDetail);
                    transDetail = StringUtil.DecodeText(transDetail);
                    placeHolderDetails += transDetail;
                    seqNo = configJSON.getInt("seq");
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }

//            KwlReturnObject cnResult = accDebitNoteobj.getDebitNoteIdFromReceiptId(tempr.getID());
//            Iterator itr2 = cnResult.getEntityList().iterator();
//            String lineLevelDNDetails = "";
//            String lineLevelDNDetailsForExpander = "";
            KwlReturnObject resultDNPaymentDet = accReceiptDao.getDebitNotePaymentDetails(requestParamsMap);
            List<DebitNotePaymentDetails> tempListresultDNPaymentDet = resultDNPaymentDet.getEntityList();
            if (tempListresultDNPaymentDet!=null && tempListresultDNPaymentDet.size() > 0 && (receiptType == Constants.PaymentAgainstCNDN || receiptType == 0)) {
                String transDetail = "";
                placeHolderDetails="";
//                Set<DebitNotePaymentDetails> invoiceDetails = tempr.getDebitNotePaymentDetails();
                for (DebitNotePaymentDetails detail : tempListresultDNPaymentDet) {
                    DebitNote debitNote = detail.getDebitnote();
                    if (debitNote != null) {
                        KwlReturnObject KWLdebitNote = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), detail.getDebitnote().getID());
                        debitNote = (DebitNote) KWLdebitNote.getEntityList().get(0);
                        classPathIDMap.clear();
                        classPathIDMap.put(DebitNote.class.getName(), debitNote != null ? debitNote.getID() : "");
                        if (tempr.getCustomer() != null) {
                            classPathIDMap.put(Customer.class.getName(), tempr.getCustomer().getID());
                        }
                        if (!StringUtil.isNullOrEmpty(tempr.getVendor())) {
                            classPathIDMap.put(Vendor.class.getName(), tempr.getVendor());
                        }
                        classPathIDMap.put(DebitNotePaymentDetails.class.getName(), detail.getID());
                        classPathIDMap.put("CUSTOMDATA", detail.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 6);
                        transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Receive_Payment_ModuleId, false);
                        transDetail = replaceNullPlaceHolders(transDetail);
                        transDetail = StringUtil.DecodeText(transDetail);
                        placeHolderDetails += transDetail;
                        seqNo = configJSON.getInt("seq");
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            
            KwlReturnObject resultReceiptDetail = accReceiptDao.getReceiptDetails(requestParamsMap);
            List<ReceiptDetail> tempListresultReceiptDetail = resultReceiptDetail.getEntityList();

            if (tempListresultReceiptDetail!=null && tempListresultReceiptDetail.size() > 0 && (receiptType == Constants.PaymentAgainstInvoice || receiptType == 0)) {
//                Set<ReceiptDetail> invoiceDetails = tempr.getRows();
                String transDetail = "";
                placeHolderDetails="";
                for (ReceiptDetail detail : tempListresultReceiptDetail) {
                    Invoice inv = detail.getInvoice();
                    if (inv != null) {
                        KwlReturnObject KWLInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), detail.getInvoice().getID());
                        inv = (Invoice) KWLInvoice.getEntityList().get(0);
                        classPathIDMap.clear();
                        classPathIDMap.put(Invoice.class.getName(), inv != null ? inv.getID() : "");
                        if (tempr.getCustomer() != null) {
                            classPathIDMap.put(Customer.class.getName(), tempr.getCustomer().getID());
                        }
                        if (!StringUtil.isNullOrEmpty(tempr.getVendor())) {
                            classPathIDMap.put(Vendor.class.getName(), tempr.getVendor());
                        }
                        classPathIDMap.put(ReceiptDetail.class.getName(), detail.getID());
                        classPathIDMap.put("CUSTOMDATA", detail.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 4);
                        transDetail = getFinalDescription(classPathIDMap, configJSON,companyid,detail.getID(),Constants.Acc_Receive_Payment_ModuleId,false);
                        transDetail = replaceNullPlaceHolders(transDetail);
                        transDetail = StringUtil.DecodeText(transDetail);
                        placeHolderDetails += transDetail;
                        seqNo = configJSON.getInt("seq");
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                    GoodsReceipt gr = detail.getGoodsReceipt();
                    if (gr != null) {
                        KwlReturnObject KWLGoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), detail.getGoodsReceipt().getID());
                        gr = (GoodsReceipt) KWLGoodsReceipt.getEntityList().get(0);
                        classPathIDMap.clear();
                        classPathIDMap.put(GoodsReceipt.class.getName(), gr != null ? gr.getID() : "");
                        if (tempr.getCustomer() != null) {
                            classPathIDMap.put(Customer.class.getName(), tempr.getCustomer().getID());
                        }
                        if (!StringUtil.isNullOrEmpty(tempr.getVendor())) {
                            classPathIDMap.put(Vendor.class.getName(), tempr.getVendor());
                        }
                        classPathIDMap.put(ReceiptDetail.class.getName(), detail.getID());
                        classPathIDMap.put("CUSTOMDATA", detail.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                        transDetail = getFinalDescription(classPathIDMap, configJSON,companyid,detail.getID(),Constants.Acc_Receive_Payment_ModuleId,false);
                        transDetail = replaceNullPlaceHolders(transDetail);
                        transDetail = StringUtil.DecodeText(transDetail);
                        placeHolderDetails += transDetail;
                        seqNo = configJSON.getInt("seq");
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            if (payDetail != null && payDetail.getCheque() != null) {
                KwlReturnObject KWLCheque = accountingHandlerDAOobj.getObject(Cheque.class.getName(), payDetail.getCheque().getID());
                Cheque cheque = (Cheque) KWLCheque.getEntityList().get(0);
                if (cheque!=null && !StringUtil.isNullOrEmpty(cheque.getChequeNo())) {
                    classPathIDMap.clear();
                    placeHolderDetails="";
                    classPathIDMap.put(Cheque.class.getName(), cheque.getID());
                    classPathIDMap.put(PaymentMethod.class.getName(),  payDetail.getPaymentMethod() != null ? payDetail.getPaymentMethod().getID() : "" );
                    configJSON = getConfiguredTypeJSON(descJsonArr, 7);
                    placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Receive_Payment_ModuleId,true);
                    placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                    seqNo = configJSON.getInt("seq");
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            }
            if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                if (tempr != null && tempr.getReceivedFrom() != null) {
                    classPathIDMap.clear();
                    placeHolderDetails="";
                    classPathIDMap.put(MasterItem.class.getName(), tempr.getReceivedFrom().getID());
                    configJSON = getConfiguredTypeJSON(descJsonArr, 8);
                    placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Receive_Payment_ModuleId,true);
                    placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                    seqNo = configJSON.getInt("seq");
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            } else {
                if (tempr != null && tempr.getReceivedFrom() != null) {
                    classPathIDMap.clear();
                    placeHolderDetails="";
                    classPathIDMap.put(MasterItem.class.getName(), tempr.getReceivedFrom().getID());
                    configJSON = getConfiguredTypeJSON(descJsonArr, 8);
                    placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Receive_Payment_ModuleId,true);
                    placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                    seqNo = configJSON.getInt("seq");
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            }
            transactionDetails+=getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander=transactionDetails.replaceAll("<br>", ",");
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", madid);
            transDetMap.put("madname", madname);
transDetMap.put("isVendor", isVendor?"true":"false");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        }else{
            Receipt tempr = (Receipt) paymentReceivedMap.get(entry.getID())[0];
            int receiptType = 0; // 0 if no mapping present
            if (jeDetailReceiptTypeMap.containsKey(jed.getID()) && jeDetailReceiptTypeMap.get(jed.getID()) != null) {
                receiptType = jeDetailReceiptTypeMap.get(jed.getID()).intValue();
            }
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            HashMap<String, Object> requestParamsMap = new HashMap();
            filter_names.add("ID");
            filter_params.add(tempr.getPayDetail().getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            KwlReturnObject resultPayDet = accReceiptDao.getPayDetails(requestParamsMap);
            PayDetail payDetail = (PayDetail) resultPayDet.getEntityList().get(0);
            String cvName = "";
            if (tempr != null && tempr.getCustomer() != null && (bankBook || ledgerReport)) {
//                Customer customer = tempr.getCustomer();
                KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempr.getCustomer().getID());
                Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                cvName = customer.getName();
                isVendor = false;
madid = customer.getID();
madname = customer.getName();
            } else if (tempr != null && !StringUtil.isNullOrEmpty(tempr.getVendor()) && (bankBook || ledgerReport)) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempr.getVendor());
                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                    cvName = vendor.getName();
                    isVendor = true;
madid = vendor.getID();
madname = vendor.getName();
                }
                
            }
            String memo = StringUtil.isNullOrEmpty(tempr.getMemo()) ? "" : "<br>" + tempr.getMemo();
            String memoForExpander = StringUtil.isNullOrEmpty(tempr.getMemo()) ? "" : ", " + tempr.getMemo();
            String vName = "";
            if (tempr != null && tempr.getCustomer() != null) {
                KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempr.getCustomer().getID());
                Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                vName = customer.getName();
                isVendor = false;
madid = customer.getID();
madname = customer.getName();
            } else if (tempr != null && !StringUtil.isNullOrEmpty(tempr.getVendor())) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempr.getVendor());
                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().size() > 0) {
                    if (resultVendor.getEntityList().get(0) != null) {
                        Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                        vName = vendor.getName();
                        isVendor = true;
madid = vendor.getID();
madname = vendor.getName();
                    }
                }
            }

            if (tempr.getPaymentWindowType() == 3) {// Payment Aginst GL
                transactionDetails += "Receipt Payment Against GL";
                transactionDetailsForExpander += "Receipt Payment Against GL";
                if (tempr.getPayDetail() != null && payDetail.getPaymentMethod() != null) {
                    KwlReturnObject resultPaymentMethod = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), payDetail.getPaymentMethod().getID());
                    PaymentMethod paymentMethod = (PaymentMethod) resultPaymentMethod.getEntityList().get(0);
                    if (paymentMethod.getDetailType() == PaymentMethod.TYPE_CASH) {
                        transactionDetails += ", Cash Payment";
                        transactionDetailsForExpander += ", Cash Payment";
                    }
                }
            } else {// Receive Payment from Vendor or Customer
                transactionDetails += "Receive Payment";
                transactionDetailsForExpander += "Receive Payment";
            }
            transactionDetails += memo;
            transactionDetailsForExpander += memoForExpander;

            String chequeDetails = "";
            if (payDetail != null && payDetail.getCheque() != null) {
                KwlReturnObject KWLCheque = accountingHandlerDAOobj.getObject(Cheque.class.getName(), payDetail.getCheque().getID());
                Cheque cheque = (Cheque) KWLCheque.getEntityList().get(0);
                if (cheque!=null && !StringUtil.isNullOrEmpty(cheque.getChequeNo())) {
                    chequeDetails += "Cheque No. " + cheque.getChequeNo();
                    Date chequeDate = cheque.getDueDate();
                    String chequeDateString = "";
                    if (chequeDate != null) {
                        chequeDateString = df.format(chequeDate);
                    }
                    chequeDetails += " dated " + chequeDateString;
                    if(payDetail != null && payDetail.getPaymentMethod() != null){
                        KwlReturnObject KWLPaymentMethod = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), payDetail.getPaymentMethod().getID());
                        PaymentMethod paymentMethod = (PaymentMethod) KWLPaymentMethod.getEntityList().get(0);
                        chequeDetails += StringUtil.isNullOrEmpty(paymentMethod.getMethodName()) ? "" : (", " + paymentMethod.getMethodName());
                    }
    //                            chequeDetails+=(StringUtil.isNullOrEmpty(tempr.getPayDetail().getCheque().getBankName())? "" : (", " + tempr.getPayDetail().getCheque().getBankName()));
                    chequeDetails += (StringUtil.isNullOrEmpty(cheque.getDescription()) ? "" : (", " + cheque.getDescription()));
                }
            }
            
            filter_names.clear(); filter_params.clear(); requestParamsMap.clear();
            filter_names.add("receipt.ID");
            filter_params.add(tempr.getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            
            KwlReturnObject result = accReceiptDao.getReceiptDetailOtherwise(requestParamsMap);
            List<ReceiptDetailOtherwise> tempList = result.getEntityList();
            if (tempList != null && tempList.size() > 0 && (receiptType == Constants.GLPayment || receiptType == 0)) {
                if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
                    KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                    Account acc = (Account) KWLAccount.getEntityList().get(0);
                    if (acc != null && acc.getID().equals(accountid)) {
                        String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                        accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                        accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                        accDesc = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : "<br>" + jed.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : ", " + jed.getDescription();
                        transactionDetails += ", " + accID + " - " + accName + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                        transactionDetailsForExpander += ", " + accID + " - " + accName + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        String customColData = "", customColDataForExpander = "";

                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataJECount(companyid, jed.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, jed.getID(), true) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, jed.getID(),true);

                        transactionDetails += (StringUtil.isNullOrEmpty(customColData) ? "" : customColData);
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        transactionDetailsForExpander += (StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander);
                    }
                }
            }
            KwlReturnObject resultAdv = accReceiptDao.getReceiptAdvanceDetails(requestParamsMap);
            List<ReceiptAdvanceDetail> tempListresultAdv = resultAdv.getEntityList();
            if (tempListresultAdv != null && tempListresultAdv.size() > 0 && (receiptType == Constants.AdvancePayment || receiptType == 0)) {
//                Set<ReceiptAdvanceDetail> invoiceDetails = tempr.getReceiptAdvanceDetails();
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                for (ReceiptAdvanceDetail detail : tempListresultAdv) {
                    String transDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                    String transDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "" + detail.getDescription();
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        lineLevelDetails = "<br>Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDesc;
                        lineLevelDetailsForExpander = ", Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDescForExpander;
                    } else {
                        lineLevelDetails += "<br>Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDesc;
                        lineLevelDetailsForExpander += ", Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDescForExpander;
                    }
                    String customColData = "", customColDataForExpander = "";

                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getId());
                    customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getId(), false) : "";
                    //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getId(),false);

                    lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                    customColDataForExpander = customColData;
                    customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                    lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
                transactionDetails += lineLevelDetails;
                transactionDetailsForExpander += lineLevelDetailsForExpander;
            }

            KwlReturnObject resultDNPaymentDet = accReceiptDao.getDebitNotePaymentDetails(requestParamsMap);
            List<DebitNotePaymentDetails> tempListresultDNPaymentDet = resultDNPaymentDet.getEntityList();
//            KwlReturnObject cnResult = accDebitNoteobj.getDebitNoteIdFromReceiptId(tempr.getID());
//            Iterator itr2 = cnResult.getEntityList().iterator();
            String lineLevelDNDetails = "";
            String lineLevelDNDetailsForExpander = "";
            if (tempListresultDNPaymentDet!=null && tempListresultDNPaymentDet.size() > 0 && (receiptType == Constants.PaymentAgainstCNDN || receiptType == 0)) {
                for (DebitNotePaymentDetails detail : tempListresultDNPaymentDet) {
                    DebitNote debitNote = detail.getDebitnote();
                    if (debitNote != null) {
                        KwlReturnObject kwlDebitNote = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), detail.getDebitnote().getID());
                        debitNote = (DebitNote) kwlDebitNote.getEntityList().get(0);
                        String grNo = "";
                        String dnDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ("<br>" + detail.getDescription());
                        String dnDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : (", " + detail.getDescription());
                        grNo = StringUtil.isNullOrEmpty(debitNote.getDebitNoteNumber()) ? "" : debitNote.getDebitNoteNumber();
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            lineLevelDNDetails = "<br>Debit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + dnDesc;
                            lineLevelDNDetailsForExpander = ", Debit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + dnDescForExpander;
                        } else {
                            lineLevelDNDetails += "<br>Debit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + dnDesc;
                            lineLevelDNDetailsForExpander += ", Debit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + dnDescForExpander;
                        }
                        String customColData = "", customColDataForExpander = "";

                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, recid,false);

                        lineLevelDNDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        lineLevelDNDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                }
                transactionDetails += lineLevelDNDetails;
                transactionDetailsForExpander += lineLevelDNDetailsForExpander;
            }
            
            KwlReturnObject resultReceiptDetail = accReceiptDao.getReceiptDetails(requestParamsMap);
            List<ReceiptDetail> tempListresultReceiptDetail = resultReceiptDetail.getEntityList();
            if (tempListresultReceiptDetail!=null && tempListresultReceiptDetail.size() > 0 && (receiptType == Constants.PaymentAgainstInvoice || receiptType == 0)) {
//                Set<ReceiptDetail> invoiceDetails = tempr.getRows();
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                for (ReceiptDetail detail : tempListresultReceiptDetail) {
                    Invoice inv = detail.getInvoice();
                    if (inv != null) {
                        KwlReturnObject KWLInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), detail.getInvoice().getID());
                        inv = (Invoice) KWLInvoice.getEntityList().get(0);
                        String grNo = "", accDesc = "", accDescForExpander;
                        grNo = StringUtil.isNullOrEmpty(inv.getInvoiceNumber()) ? "" : inv.getInvoiceNumber();
                        accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            lineLevelDetails = "<br>Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander = ", Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        } else {
                            lineLevelDetails += "<br>Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander += ", Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        }
                        String customColData = "", customColDataForExpander = "";

                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getID(),false);

                        lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                    GoodsReceipt gr = detail.getGoodsReceipt();
                    if (gr != null) {
                        KwlReturnObject KWLGoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), detail.getGoodsReceipt().getID());
                        gr = (GoodsReceipt) KWLGoodsReceipt.getEntityList().get(0);
                        String grNo = "", accDesc = "", accDescForExpander = "";
                        grNo = StringUtil.isNullOrEmpty(gr.getGoodsReceiptNumber()) ? "" : gr.getGoodsReceiptNumber();
                        accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            lineLevelDetails = "<br>Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander = ", Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        } else {
                            lineLevelDetails += "<br>Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander += ", Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        }
                        String customColData = "", customColDataForExpander = "";

                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getID(),false);
                        lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }

                }
                transactionDetails += lineLevelDetails;
                transactionDetailsForExpander += lineLevelDetailsForExpander;
            }
            transactionDetails += StringUtil.isNullOrEmpty(chequeDetails) ? "" : ("<br>" + chequeDetails);
            transactionDetailsForExpander += StringUtil.isNullOrEmpty(chequeDetails) ? "" : (", " + chequeDetails);
            
            if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                if (tempr != null && tempr.getReceivedFrom() != null) {
                    KwlReturnObject KWLMasterItem = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), tempr.getReceivedFrom().getID());
                    MasterItem masterItem = (MasterItem) KWLMasterItem.getEntityList().get(0);
                    transactionDetails += "<br>Received from : " + masterItem.getValue();
                    transactionDetailsForExpander += ", Received from : " + masterItem.getValue();
                }
            } else {
                if (tempr != null && tempr.getReceivedFrom() != null) {
                    KwlReturnObject KWLMasterItem = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), tempr.getReceivedFrom().getID());
                    MasterItem masterItem = (MasterItem) KWLMasterItem.getEntityList().get(0);
                    transactionDetails += "<br>Received from : " + masterItem.getValue();
                    transactionDetailsForExpander += ", Received from : " + masterItem.getValue();
                }
            }
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", madid);
            transDetMap.put("madname", madname);
transDetMap.put("isVendor", isVendor?"true":"false");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        }
        return transDetMap;
    }
    Map<String, String> getTransactionDetailsForReceiptGL(Receipt tempr, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig, Map<String, Integer> jeDetailReceiptTypeMap, boolean bankBook, boolean ledgerReport) throws UnsupportedEncodingException, ServiceException, JSONException{
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        boolean isVendor = false;
String madid="";
String madname="";
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        Map<String, String> transDetMap = new HashMap<String, String>();
        String lineLevelCustomFieldData="";
        if(isDescConfig){
            //Desc by config
            String lineLevelGSTCodes = "";
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
//            Receipt tempr = (Receipt) paymentReceivedMap.get(entry.getID())[0];
            int receiptType = 0; // 0 if no mapping present
            if (jeDetailReceiptTypeMap.containsKey(jed.getID()) && jeDetailReceiptTypeMap.get(jed.getID()) != null) {
                receiptType = jeDetailReceiptTypeMap.get(jed.getID()).intValue();
            }
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            HashMap<String, Object> requestParamsMap = new HashMap();
            filter_names.add("ID");
            filter_params.add(tempr.getPayDetail().getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            KwlReturnObject resultPayDet = accReceiptDao.getPayDetails(requestParamsMap);
            PayDetail payDetail = (PayDetail) resultPayDet.getEntityList().get(0);
            String cvName = "";
            if (tempr != null && tempr.getCustomer() != null && (bankBook || ledgerReport)) {
//                Customer customer = tempr.getCustomer();
                KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempr.getCustomer().getID());
                Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                cvName = customer.getName();
            } else if (tempr != null && !StringUtil.isNullOrEmpty(tempr.getVendor()) && (bankBook || ledgerReport)) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempr.getVendor());
                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                    cvName = vendor.getName();
                }
            }
            
             if (tempr != null && tempr.getCustomer() != null){
                 KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempr.getCustomer().getID());
                if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
                    Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                    isVendor = false;
                    madid = customer.getID();
                    madname = customer.getName();
                }
                
            }else if(tempr != null && !StringUtil.isNullOrEmpty(tempr.getVendor())){
                 KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempr.getVendor());

                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                    isVendor = true;
                    madid = vendor.getID();
                    madname = vendor.getName();
                }
            }
            
            
            if (tempr.getPaymentWindowType() == 3) {// Payment Aginst GL
                transactionDetails += "Receipt Payment Against GL";
                transactionDetailsForExpander += "Receipt Payment Against GL";
                if (tempr.getPayDetail() != null && payDetail.getPaymentMethod() != null) {
                    KwlReturnObject resultPaymentMethod = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), payDetail.getPaymentMethod().getID());
                    PaymentMethod paymentMethod = (PaymentMethod) resultPaymentMethod.getEntityList().get(0);
                    if (paymentMethod.getDetailType() == PaymentMethod.TYPE_CASH) {
                        transactionDetails += ", Cash Payment";
                        transactionDetailsForExpander += ", Cash Payment";
                    }
                }
            } else {// Receive Payment from Vendor or Customer
                transactionDetails += "Receive Payment";
                transactionDetailsForExpander += "Receive Payment";
            }
            classPathIDMap.put(Receipt.class.getName(), tempr.getID());
            // get Receipt level Desc 
            String placeHolderDetails = "";
            JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Receive_Payment_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);
            filter_names.clear(); filter_params.clear(); requestParamsMap.clear();
            filter_names.add("receipt.ID");
            filter_params.add(tempr.getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            KwlReturnObject result = accReceiptDao.getReceiptDetailOtherwise(requestParamsMap);
            List<ReceiptDetailOtherwise> tempList = result.getEntityList();
            if (tempList != null && tempList.size() > 0 && (receiptType == Constants.GLPayment || receiptType == 0)) {
                String transDetail = "";
                placeHolderDetails = "";
                String tempGSTCode = "";
                for (ReceiptDetailOtherwise detail : tempList) {
//                    if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) KWLAccount.getEntityList().get(0);
                        if (acc != null ) {
                            classPathIDMap.clear();
                            classPathIDMap.put(Account.class.getName(), acc.getID());
                            if (tempr.getCustomer() != null) {
                                classPathIDMap.put(Customer.class.getName(), tempr.getCustomer().getID());
                            }
                            if (!StringUtil.isNullOrEmpty(tempr.getVendor())) {
                                classPathIDMap.put(Vendor.class.getName(), tempr.getVendor());
                            }
                            classPathIDMap.put(ReceiptDetailOtherwise.class.getName(), detail.getID());
                            classPathIDMap.put("CUSTOMDATA", detail.getID());
                            // get Receipt level Desc 
                            configJSON = getConfiguredTypeJSON(descJsonArr, 2);
                            transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Receive_Payment_ModuleId, false);
                            transDetail = replaceNullPlaceHolders(transDetail);
                            transDetail = StringUtil.DecodeText(transDetail);
                            //Get line level Dimension Data
                            Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, jed.getID(), true);
                            lineLevelCustomFieldData = customFieldData.toString();
                            seqNo = configJSON.getInt("seq");
                            tempGSTCode = detail.getTax()==null ? "" : detail.getTax().getTaxCode();
                            if ((detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) || (detail.getGstJED() != null && detail.getGstJED().getID().equals(jed.getID()))) {
                                placeHolderDetails = transDetail;
                                lineLevelGSTCodes = tempGSTCode;
                                break;
                            } else {
                                placeHolderDetails += transDetail;
                                if(!StringUtil.isNullOrEmpty(tempGSTCode)){
                                    if (!StringUtil.isNullOrEmpty(lineLevelGSTCodes)) {
                                        lineLevelGSTCodes += ", " + tempGSTCode;
                                    } else {
                                        lineLevelGSTCodes += tempGSTCode;
                                    }
                            }
                        }
                        }
//                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            KwlReturnObject resultAdv = accReceiptDao.getReceiptAdvanceDetails(requestParamsMap);
            List<ReceiptAdvanceDetail> tempListresultAdv = resultAdv.getEntityList();
            if (tempListresultAdv != null && tempListresultAdv.size() > 0 && (receiptType == Constants.AdvancePayment || receiptType == 0)) {
                placeHolderDetails="";
//                Set<ReceiptAdvanceDetail> invoiceDetails = tempr.getReceiptAdvanceDetails();
                String transDetail = "";
                for (ReceiptAdvanceDetail detail : tempListresultAdv) {
                    classPathIDMap.clear();
                    if (tempr.getCustomer() != null) {
                        classPathIDMap.put(Customer.class.getName(), tempr.getCustomer().getID());
                    }
                    if (!StringUtil.isNullOrEmpty(tempr.getVendor())) {
                        classPathIDMap.put(Vendor.class.getName(), tempr.getVendor());
                    }
                    classPathIDMap.put(ReceiptAdvanceDetail.class.getName(), detail.getId());
                    classPathIDMap.put("CUSTOMDATA", detail.getId());
                    // get Receipt level Desc 
                    configJSON = getConfiguredTypeJSON(descJsonArr, 3);
                    transDetail = getFinalDescription(classPathIDMap, configJSON,companyid,detail.getId(),Constants.Acc_Receive_Payment_ModuleId,false);
                    transDetail = replaceNullPlaceHolders(transDetail);
                    transDetail = StringUtil.DecodeText(transDetail);
                    //Get line level Dimension Data
                    Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getId(), false);
                    lineLevelCustomFieldData = customFieldData.toString();
                    placeHolderDetails += transDetail;
                    seqNo = configJSON.getInt("seq");
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
//            KwlReturnObject cnResult = accDebitNoteobj.getDebitNoteIdFromReceiptId(tempr.getID());
//            Iterator itr2 = cnResult.getEntityList().iterator();
//            String lineLevelDNDetails = "";
//            String lineLevelDNDetailsForExpander = "";
            KwlReturnObject resultDNPaymentDet = accReceiptDao.getDebitNotePaymentDetails(requestParamsMap);
            List<DebitNotePaymentDetails> tempListresultDNPaymentDet = resultDNPaymentDet.getEntityList();
            if (tempListresultDNPaymentDet!=null && tempListresultDNPaymentDet.size() > 0 && (receiptType == Constants.PaymentAgainstCNDN || receiptType == 0)) {
                String transDetail = "";
                placeHolderDetails="";
//                Set<DebitNotePaymentDetails> invoiceDetails = tempr.getDebitNotePaymentDetails();
                for (DebitNotePaymentDetails detail : tempListresultDNPaymentDet) {
                    DebitNote debitNote = detail.getDebitnote();
                    if (debitNote != null) {
                        KwlReturnObject KWLdebitNote = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), detail.getDebitnote().getID());
                        debitNote = (DebitNote) KWLdebitNote.getEntityList().get(0);
                        classPathIDMap.clear();
                        classPathIDMap.put(DebitNote.class.getName(), debitNote != null ? debitNote.getID() : "");
                        if (tempr.getCustomer() != null) {
                            classPathIDMap.put(Customer.class.getName(), tempr.getCustomer().getID());
                        }
                        if (!StringUtil.isNullOrEmpty(tempr.getVendor())) {
                            classPathIDMap.put(Vendor.class.getName(), tempr.getVendor());
                        }
                        classPathIDMap.put(DebitNotePaymentDetails.class.getName(), detail.getID());
                        classPathIDMap.put("CUSTOMDATA", detail.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 6);
                        transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Receive_Payment_ModuleId, false);
                        transDetail = replaceNullPlaceHolders(transDetail);
                        transDetail = StringUtil.DecodeText(transDetail);
                        //Get line level Dimension Data
                        Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getID(), false);
                        lineLevelCustomFieldData = customFieldData.toString();
                        placeHolderDetails += transDetail;
                        seqNo = configJSON.getInt("seq");
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            KwlReturnObject resultReceiptDetail = accReceiptDao.getReceiptDetails(requestParamsMap);
            List<ReceiptDetail> tempListresultReceiptDetail = resultReceiptDetail.getEntityList();
            if (tempListresultReceiptDetail!=null && tempListresultReceiptDetail.size() > 0 && (receiptType == Constants.PaymentAgainstInvoice || receiptType == 0)) {
//                Set<ReceiptDetail> invoiceDetails = tempr.getRows();
                String transDetail = "";
                placeHolderDetails="";
                for (ReceiptDetail detail : tempListresultReceiptDetail) {
                    Invoice inv = detail.getInvoice();
                    if (inv != null) {
                        KwlReturnObject KWLInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), detail.getInvoice().getID());
                        inv = (Invoice) KWLInvoice.getEntityList().get(0);
                        classPathIDMap.clear();
                        classPathIDMap.put(Invoice.class.getName(), inv != null ? inv.getID() : "");
                        if (tempr.getCustomer() != null) {
                            classPathIDMap.put(Customer.class.getName(), tempr.getCustomer().getID());
                        }
                        if (!StringUtil.isNullOrEmpty(tempr.getVendor())) {
                            classPathIDMap.put(Vendor.class.getName(), tempr.getVendor());
                        }
                        classPathIDMap.put(ReceiptDetail.class.getName(), detail.getID());
                        classPathIDMap.put("CUSTOMDATA", detail.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 4);
                        transDetail = getFinalDescription(classPathIDMap, configJSON,companyid,detail.getID(),Constants.Acc_Receive_Payment_ModuleId,false);
                        transDetail = replaceNullPlaceHolders(transDetail);
                        transDetail = StringUtil.DecodeText(transDetail);
                        //Get line level Dimension Data
                        Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getID(), false);
                        lineLevelCustomFieldData = customFieldData.toString();
                        placeHolderDetails += transDetail;
                        seqNo = configJSON.getInt("seq");
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                    GoodsReceipt gr = detail.getGoodsReceipt();
                    if (gr != null) {
                        KwlReturnObject KWLGoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), detail.getGoodsReceipt().getID());
                        gr = (GoodsReceipt) KWLGoodsReceipt.getEntityList().get(0);
                        classPathIDMap.clear();
                        classPathIDMap.put(GoodsReceipt.class.getName(), gr != null ? gr.getID() : "");
                        if (tempr.getCustomer() != null) {
                            classPathIDMap.put(Customer.class.getName(), tempr.getCustomer().getID());
                        }
                        if (!StringUtil.isNullOrEmpty(tempr.getVendor())) {
                            classPathIDMap.put(Vendor.class.getName(), tempr.getVendor());
                        }
                        classPathIDMap.put(ReceiptDetail.class.getName(), detail.getID());
                        classPathIDMap.put("CUSTOMDATA", detail.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                        transDetail = getFinalDescription(classPathIDMap, configJSON,companyid,detail.getID(),Constants.Acc_Receive_Payment_ModuleId,false);
                        transDetail = replaceNullPlaceHolders(transDetail);
                        transDetail = StringUtil.DecodeText(transDetail);
                        //Get line level Dimension Data
                        Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getID(), false);
                        lineLevelCustomFieldData = customFieldData.toString();
                        placeHolderDetails += transDetail;
                        seqNo = configJSON.getInt("seq");
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            if (payDetail != null && payDetail.getCheque() != null) {
                KwlReturnObject KWLCheque = accountingHandlerDAOobj.getObject(Cheque.class.getName(), payDetail.getCheque().getID());
                Cheque cheque = (Cheque) KWLCheque.getEntityList().get(0);
                if (cheque!=null && !StringUtil.isNullOrEmpty(cheque.getChequeNo())) {
                    classPathIDMap.clear();
                    placeHolderDetails="";
                    classPathIDMap.put(Cheque.class.getName(), cheque.getID());
                    classPathIDMap.put(PaymentMethod.class.getName(),  payDetail.getPaymentMethod() != null ? payDetail.getPaymentMethod().getID() : "" );
                    configJSON = getConfiguredTypeJSON(descJsonArr, 7);
                    placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Receive_Payment_ModuleId,true);
                    placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                    seqNo = configJSON.getInt("seq");
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            }
            if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                if (tempr != null && tempr.getReceivedFrom() != null) {
                    classPathIDMap.clear();
                    placeHolderDetails="";
                    classPathIDMap.put(MasterItem.class.getName(), tempr.getReceivedFrom().getID());
                    configJSON = getConfiguredTypeJSON(descJsonArr, 8);
                    placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Receive_Payment_ModuleId,true);
                    placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                    seqNo = configJSON.getInt("seq");
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            } else {
                if (tempr != null && tempr.getReceivedFrom() != null) {
                    classPathIDMap.clear();
                    placeHolderDetails="";
                    classPathIDMap.put(MasterItem.class.getName(), tempr.getReceivedFrom().getID());
                    configJSON = getConfiguredTypeJSON(descJsonArr, 8);
                    placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Receive_Payment_ModuleId,true);
                    placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                    seqNo = configJSON.getInt("seq");
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            }
            transactionDetails+=getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander=transactionDetails.replaceAll("<br>", ",");
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", madid);
            transDetMap.put("madname", madname);
transDetMap.put("isVendor", isVendor?"true":"false");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
            transDetMap.put("gstCode", lineLevelGSTCodes);
            transDetMap.put("lineLevelCustomFieldData", lineLevelCustomFieldData);
        }else{
//            Receipt tempr = (Receipt) paymentReceivedMap.get(entry.getID())[0];
            int receiptType = 0; // 0 if no mapping present
            if (jeDetailReceiptTypeMap.containsKey(jed.getID()) && jeDetailReceiptTypeMap.get(jed.getID()) != null) {
                receiptType = jeDetailReceiptTypeMap.get(jed.getID()).intValue();
            }
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            HashMap<String, Object> requestParamsMap = new HashMap();
            filter_names.add("ID");
            filter_params.add(tempr.getPayDetail().getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            KwlReturnObject resultPayDet = accReceiptDao.getPayDetails(requestParamsMap);
            PayDetail payDetail = (PayDetail) resultPayDet.getEntityList().get(0);
            String cvName = "";
            if (tempr != null && tempr.getCustomer() != null && (bankBook || ledgerReport)) {
//                Customer customer = tempr.getCustomer();
                KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempr.getCustomer().getID());
                Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                cvName = customer.getName();
                isVendor = false;
madid = customer.getID();
madname = customer.getName();
            } else if (tempr != null && !StringUtil.isNullOrEmpty(tempr.getVendor()) && (bankBook || ledgerReport)) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempr.getVendor());
                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                    cvName = vendor.getName();
                    isVendor = true;
madid = vendor.getID();
madname = vendor.getName();
                }
            }
            String memo = StringUtil.isNullOrEmpty(tempr.getMemo()) ? "" : "<br>" + tempr.getMemo();
            String memoForExpander = StringUtil.isNullOrEmpty(tempr.getMemo()) ? "" : ", " + tempr.getMemo();
            String vName = "";
            if (tempr != null && tempr.getCustomer() != null) {
                KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempr.getCustomer().getID());
                Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                vName = customer.getName();
                isVendor = false;
madid = customer.getID();
madname = customer.getName();

            } else if (tempr != null && !StringUtil.isNullOrEmpty(tempr.getVendor())) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempr.getVendor());
                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().size() > 0) {
                    if (resultVendor.getEntityList().get(0) != null) {
                        Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                        vName = vendor.getName();
                        isVendor = true;
madid = vendor.getID();
madname = vendor.getName();
                    }
                }
            }
            if (tempr.getPaymentWindowType() == 3) {// Payment Aginst GL
                transactionDetails += "Receipt Payment Against GL";
                transactionDetailsForExpander += "Receipt Payment Against GL";
                if (tempr.getPayDetail() != null && payDetail.getPaymentMethod() != null) {
                    KwlReturnObject resultPaymentMethod = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), payDetail.getPaymentMethod().getID());
                    PaymentMethod paymentMethod = (PaymentMethod) resultPaymentMethod.getEntityList().get(0);
                    if (paymentMethod.getDetailType() == PaymentMethod.TYPE_CASH) {
                        transactionDetails += ", Cash Payment";
                        transactionDetailsForExpander += ", Cash Payment";
                    }
                }
            } else {// Receive Payment from Vendor or Customer
                transactionDetails += "Receive Payment";
                transactionDetailsForExpander += "Receive Payment";
            }
            transactionDetails += memo;
            transactionDetailsForExpander += memoForExpander;
            String chequeDetails = "";
            if (payDetail != null && payDetail.getCheque() != null) {
                KwlReturnObject KWLCheque = accountingHandlerDAOobj.getObject(Cheque.class.getName(), payDetail.getCheque().getID());
                Cheque cheque = (Cheque) KWLCheque.getEntityList().get(0);
                if (cheque!=null && !StringUtil.isNullOrEmpty(cheque.getChequeNo())) {
                    chequeDetails += "Cheque No. " + cheque.getChequeNo();
                    Date chequeDate = cheque.getDueDate();
                    String chequeDateString = "";
                    if (chequeDate != null) {
                        chequeDateString = df.format(chequeDate);
                    }
                    chequeDetails += " dated " + chequeDateString;
                    if(payDetail != null && payDetail.getPaymentMethod() != null){
                        KwlReturnObject KWLPaymentMethod = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), payDetail.getPaymentMethod().getID());
                        PaymentMethod paymentMethod = (PaymentMethod) KWLPaymentMethod.getEntityList().get(0);
                        chequeDetails += StringUtil.isNullOrEmpty(paymentMethod.getMethodName()) ? "" : (", " + paymentMethod.getMethodName());
                    }
    //                            chequeDetails+=(StringUtil.isNullOrEmpty(tempr.getPayDetail().getCheque().getBankName())? "" : (", " + tempr.getPayDetail().getCheque().getBankName()));
                    chequeDetails += (StringUtil.isNullOrEmpty(cheque.getDescription()) ? "" : (", " + cheque.getDescription()));
                }
            }
            filter_names.clear(); filter_params.clear(); requestParamsMap.clear();
            filter_names.add("receipt.ID");
            filter_params.add(tempr.getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            KwlReturnObject result = accReceiptDao.getReceiptDetailOtherwise(requestParamsMap);
            List<ReceiptDetailOtherwise> tempList = result.getEntityList();
            if (tempList != null && tempList.size() > 0 && (receiptType == Constants.GLPayment || receiptType == 0)) {
                if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
                    KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                    Account acc = (Account) KWLAccount.getEntityList().get(0);
                    if (acc != null && acc.getID().equals(accountid)) {
                        String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                        accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                        accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                        accDesc = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : "<br>" + jed.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : ", " + jed.getDescription();
                        transactionDetails += ", " + accID + " - " + accName + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                        transactionDetailsForExpander += ", " + accID + " - " + accName + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        String customColData = "", customColDataForExpander = "";
                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataJECount(companyid, jed.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, jed.getID(), true) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, jed.getID(),true);
                        transactionDetails += (StringUtil.isNullOrEmpty(customColData) ? "" : customColData);
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        transactionDetailsForExpander += (StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander);
                    }
                }
            }
            KwlReturnObject resultAdv = accReceiptDao.getReceiptAdvanceDetails(requestParamsMap);
            List<ReceiptAdvanceDetail> tempListresultAdv = resultAdv.getEntityList();
            if (tempListresultAdv != null && tempListresultAdv.size() > 0 && (receiptType == Constants.AdvancePayment || receiptType == 0)) {
//                Set<ReceiptAdvanceDetail> invoiceDetails = tempr.getReceiptAdvanceDetails();
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                for (ReceiptAdvanceDetail detail : tempListresultAdv) {
                    String transDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                    String transDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "" + detail.getDescription();
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        lineLevelDetails = "<br>Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDesc;
                        lineLevelDetailsForExpander = ", Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDescForExpander;
                    } else {
                        lineLevelDetails += "<br>Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDesc;
                        lineLevelDetailsForExpander += ", Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDescForExpander;
                    }
                    String customColData = "", customColDataForExpander = "";
                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getId());
                    customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getId(), false) : "";
                    //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getId(),false);
                    lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                    customColDataForExpander = customColData;
                    customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                    lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
                transactionDetails += lineLevelDetails;
                transactionDetailsForExpander += lineLevelDetailsForExpander;
            }
            KwlReturnObject resultDNPaymentDet = accReceiptDao.getDebitNotePaymentDetails(requestParamsMap);
            List<DebitNotePaymentDetails> tempListresultDNPaymentDet = resultDNPaymentDet.getEntityList();
//            KwlReturnObject cnResult = accDebitNoteobj.getDebitNoteIdFromReceiptId(tempr.getID());
//            Iterator itr2 = cnResult.getEntityList().iterator();
            String lineLevelDNDetails = "";
            String lineLevelDNDetailsForExpander = "";
            if (tempListresultDNPaymentDet!=null && tempListresultDNPaymentDet.size() > 0 && (receiptType == Constants.PaymentAgainstCNDN || receiptType == 0)) {
                for (DebitNotePaymentDetails detail : tempListresultDNPaymentDet) {
                    DebitNote debitNote = detail.getDebitnote();
                    if (debitNote != null) {
                        KwlReturnObject kwlDebitNote = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), detail.getDebitnote().getID());
                        debitNote = (DebitNote) kwlDebitNote.getEntityList().get(0);
                        String grNo = "";
                        String dnDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ("<br>" + detail.getDescription());
                        String dnDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : (", " + detail.getDescription());
                        grNo = StringUtil.isNullOrEmpty(debitNote.getDebitNoteNumber()) ? "" : debitNote.getDebitNoteNumber();
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            lineLevelDNDetails = "<br>Debit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + dnDesc;
                            lineLevelDNDetailsForExpander = ", Debit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + dnDescForExpander;
                        } else {
                            lineLevelDNDetails += "<br>Debit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + dnDesc;
                            lineLevelDNDetailsForExpander += ", Debit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + dnDescForExpander;
                        }
                        String customColData = "", customColDataForExpander = "";
                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, recid,false);
                        lineLevelDNDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        lineLevelDNDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                }
                transactionDetails += lineLevelDNDetails;
                transactionDetailsForExpander += lineLevelDNDetailsForExpander;
            }
            KwlReturnObject resultReceiptDetail = accReceiptDao.getReceiptDetails(requestParamsMap);
            List<ReceiptDetail> tempListresultReceiptDetail = resultReceiptDetail.getEntityList();
            if (tempListresultReceiptDetail!=null && tempListresultReceiptDetail.size() > 0 && (receiptType == Constants.PaymentAgainstInvoice || receiptType == 0)) {
//                Set<ReceiptDetail> invoiceDetails = tempr.getRows();
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                for (ReceiptDetail detail : tempListresultReceiptDetail) {
                    Invoice inv = detail.getInvoice();
                    if (inv != null) {
                        KwlReturnObject KWLInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), detail.getInvoice().getID());
                        inv = (Invoice) KWLInvoice.getEntityList().get(0);
                        String grNo = "", accDesc = "", accDescForExpander;
                        grNo = StringUtil.isNullOrEmpty(inv.getInvoiceNumber()) ? "" : inv.getInvoiceNumber();
                        accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            lineLevelDetails = "<br>Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander = ", Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        } else {
                            lineLevelDetails += "<br>Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander += ", Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        }
                        String customColData = "", customColDataForExpander = "";
                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getID(),false);
                        lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                    GoodsReceipt gr = detail.getGoodsReceipt();
                    if (gr != null) {
                        KwlReturnObject KWLGoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), detail.getGoodsReceipt().getID());
                        gr = (GoodsReceipt) KWLGoodsReceipt.getEntityList().get(0);
                        String grNo = "", accDesc = "", accDescForExpander = "";
                        grNo = StringUtil.isNullOrEmpty(gr.getGoodsReceiptNumber()) ? "" : gr.getGoodsReceiptNumber();
                        accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            lineLevelDetails = "<br>Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander = ", Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        } else {
                            lineLevelDetails += "<br>Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander += ", Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        }
                        String customColData = "", customColDataForExpander = "";
                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getID(),false);
                        lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                }
                transactionDetails += lineLevelDetails;
                transactionDetailsForExpander += lineLevelDetailsForExpander;
            }
            transactionDetails += StringUtil.isNullOrEmpty(chequeDetails) ? "" : ("<br>" + chequeDetails);
            transactionDetailsForExpander += StringUtil.isNullOrEmpty(chequeDetails) ? "" : (", " + chequeDetails);
            if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                if (tempr != null && tempr.getReceivedFrom() != null) {
                    KwlReturnObject KWLMasterItem = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), tempr.getReceivedFrom().getID());
                    MasterItem masterItem = (MasterItem) KWLMasterItem.getEntityList().get(0);
                    transactionDetails += "<br>Received from : " + masterItem.getValue();
                    transactionDetailsForExpander += ", Received from : " + masterItem.getValue();
                }
            } else {
                if (tempr != null && tempr.getReceivedFrom() != null) {
                    KwlReturnObject KWLMasterItem = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), tempr.getReceivedFrom().getID());
                    MasterItem masterItem = (MasterItem) KWLMasterItem.getEntityList().get(0);
                    transactionDetails += "<br>Received from : " + masterItem.getValue();
                    transactionDetailsForExpander += ", Received from : " + masterItem.getValue();
                }
            }
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", madid);
            transDetMap.put("madname", madname);
transDetMap.put("isVendor", isVendor?"true":"false");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        }
        return transDetMap;
    }
    Map<String, String> getTransactionDetailsForPayment(Map<String, Object[]> paymentMadeMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig, Map<String, Integer> jeDetailPaymentTypeMap, boolean bankBook, boolean ledgerReport) throws UnsupportedEncodingException, ServiceException, JSONException{
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        boolean isVendor = false;
String madid="";
String madname="";
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        Map<String, String> transDetMap = new HashMap<String, String>();
        if(isDescConfig){
            //Desc by config
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
            Payment tempp = (Payment) paymentMadeMap.get(entry.getID())[0];
            int paymentType = 0;
            if (jeDetailPaymentTypeMap.containsKey(jed.getID()) && jeDetailPaymentTypeMap.get(jed.getID()) != null) {
                paymentType = jeDetailPaymentTypeMap.get(jed.getID()).intValue();
            }
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            HashMap<String, Object> requestParamsMap = new HashMap();
            filter_names.add("ID");
            filter_params.add(tempp.getPayDetail().getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            KwlReturnObject resultPayDet = accReceiptDao.getPayDetails(requestParamsMap);
            PayDetail payDetail = (PayDetail) resultPayDet.getEntityList().get(0);
            String cvName = "";
            if (tempp != null && !StringUtil.isNullOrEmpty(tempp.getCustomer()) && (bankBook || ledgerReport)) {
                KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempp.getCustomer());
                if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
                    Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                    cvName = customer.getName();
                }
            } else if (tempp != null && tempp.getVendor() != null && (bankBook || ledgerReport)) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempp.getVendor().getID());

                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                    cvName = vendor.getName();
                }
            }
            
            if (tempp != null && !StringUtil.isNullOrEmpty(tempp.getCustomer())){
                 KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempp.getCustomer());
                if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
                    Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                    isVendor = false;
                    madid = customer.getID();
                    madname = customer.getName();
                }
                
            }else if(tempp != null && tempp.getVendor() != null){
                 KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempp.getVendor().getID());

                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                    isVendor = true;
                    madid = vendor.getID();
                    madname = vendor.getName();
                }
            }
            
            
            if (tempp.getPaymentWindowType() == 3) {// Payment Aginst GL
                transactionDetails += "Make Payment Against GL";
                if (payDetail != null && payDetail.getPaymentMethod() != null) {
                    KwlReturnObject resultPaymentMethod = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), payDetail.getPaymentMethod().getID());
                    PaymentMethod paymentMethod = (PaymentMethod) resultPaymentMethod.getEntityList().get(0);
                    if (paymentMethod.getDetailType() == PaymentMethod.TYPE_CASH) {
                        transactionDetails += ", Cash Payment";
                    }
                }
            } else {// Receive Payment from Vendor or Customer
                transactionDetails += "Make Payment";
            }
            
            classPathIDMap.put(Payment.class.getName(), tempp.getID());
            // get Receipt level Desc 
            String placeHolderDetails = "";
            JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Make_Payment_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);

            filter_names.clear(); filter_params.clear(); requestParamsMap.clear();
            filter_names.add("payment.ID");
            filter_params.add(tempp.getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            
            List<PaymentDetailOtherwise> detailsList = accVendorPaymentobj.getPaymentDetailOtherwise(tempp.getID());
            if (detailsList!=null && detailsList.size() > 0 && (paymentType == Constants.GLPayment || paymentType == 0)) {
                String transDetail = "";
                placeHolderDetails = "";
                for (PaymentDetailOtherwise detail : detailsList) {
//                    if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                    Account acc = jed.getAccount();
                        KwlReturnObject resultAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) resultAccount.getEntityList().get(0);
                        if (acc != null ) {
                            classPathIDMap.clear();
                            classPathIDMap.put(Account.class.getName(), acc.getID());
                            if (!StringUtil.isNullOrEmpty(tempp.getCustomer())) {
                                classPathIDMap.put(Customer.class.getName(), tempp.getCustomer());
                            }
                            if (tempp.getVendor() != null) {
                                classPathIDMap.put(Vendor.class.getName(), tempp.getVendor().getID());
                            }
                            classPathIDMap.put(PaymentDetailOtherwise.class.getName(), detail.getID());
                            classPathIDMap.put("CUSTOMDATA", detail.getID());
                            // get Receipt level Desc 
                            configJSON = getConfiguredTypeJSON(descJsonArr, 2);
                            transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Make_Payment_ModuleId, false);
                            transDetail = replaceNullPlaceHolders(transDetail);
                            transDetail = StringUtil.DecodeText(transDetail);
                            seqNo = configJSON.getInt("seq");
                            if ((detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID()))|| (detail.getGstJED() != null && detail.getGstJED().getID().equals(jed.getID()))) {
                                placeHolderDetails = transDetail;
                                break;
                            }else{
                                placeHolderDetails += transDetail;
                            }
                        }
//                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            List<AdvanceDetail> detailsListAdvanced = accVendorPaymentobj.getPaymentDetailAdvanced(tempp.getID());
            if (detailsListAdvanced!=null && detailsListAdvanced.size() > 0 && (paymentType == Constants.AdvancePayment || paymentType == 0)) {
//                Set<AdvanceDetail> invoiceDetails = tempp.getAdvanceDetails();
                placeHolderDetails="";
                String transDetail = "";
                for (AdvanceDetail detail : detailsListAdvanced) {
                    classPathIDMap.clear();
                    if (!StringUtil.isNullOrEmpty(tempp.getCustomer())) {
                        classPathIDMap.put(Customer.class.getName(), tempp.getCustomer());
                    }
                    if (tempp.getVendor() != null) {
                        classPathIDMap.put(Vendor.class.getName(), tempp.getVendor().getID());
                    }
                    classPathIDMap.put(AdvanceDetail.class.getName(), detail.getId());
                    classPathIDMap.put("CUSTOMDATA", detail.getId());
                    // get Receipt level Desc 
                    configJSON = getConfiguredTypeJSON(descJsonArr, 3);
                    transDetail = getFinalDescription(classPathIDMap, configJSON,companyid,detail.getId(),Constants.Acc_Make_Payment_ModuleId,false);
                    transDetail = replaceNullPlaceHolders(transDetail);
                    transDetail = StringUtil.DecodeText(transDetail);
                    placeHolderDetails += transDetail;
                    seqNo = configJSON.getInt("seq");
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }

//            KwlReturnObject cnResult = accCreditNoteobj.getCreditNoteIdFromPaymentId(tempp.getID());
//            Iterator itr2 = cnResult.getEntityList().iterator();
//            String lineLevelCNDetails = "";
//            String lineLevelCNDetailsForExpander = "";
            
            KwlReturnObject resultCNPaymentDet = accVendorPaymentobj.getCreditNotePaymentDetails(requestParamsMap);
            List<CreditNotePaymentDetails> tempListresultCNPaymentDet = resultCNPaymentDet.getEntityList();
            if (tempListresultCNPaymentDet!=null && tempListresultCNPaymentDet.size() > 0 && (paymentType == Constants.PaymentAgainstCNDN || paymentType == 0)) {
                String transDetail = "";
                placeHolderDetails="";
//                Set<CreditNotePaymentDetails> invoiceDetails = tempp.getCreditNotePaymentDetails();
                for (CreditNotePaymentDetails detail : tempListresultCNPaymentDet) {
                    CreditNote creditNote = detail.getCreditnote();
                    if (creditNote != null) {
                        KwlReturnObject cnresult = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), detail.getCreditnote().getID());
                        creditNote = (CreditNote) cnresult.getEntityList().get(0);
                        classPathIDMap.clear();
                        classPathIDMap.put(CreditNote.class.getName(), creditNote != null ? creditNote.getID() : "");
                        if (!StringUtil.isNullOrEmpty(tempp.getCustomer())) {
                            classPathIDMap.put(Customer.class.getName(), tempp.getCustomer());
                        }
                        if (tempp.getVendor() != null) {
                            classPathIDMap.put(Vendor.class.getName(), tempp.getVendor().getID());
                        }
                        classPathIDMap.put(CreditNotePaymentDetails.class.getName(), detail.getID());
                        classPathIDMap.put("CUSTOMDATA", detail.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 6);
                        transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Make_Payment_ModuleId, false);
                        transDetail = replaceNullPlaceHolders(transDetail);
                        transDetail = StringUtil.DecodeText(transDetail);
                        placeHolderDetails += transDetail;
                        seqNo = configJSON.getInt("seq");
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            
            KwlReturnObject resultPaymentDetails = accVendorPaymentobj.getPaymentDetails(requestParamsMap);
            List<PaymentDetail> tempListresultPaymentDetails = resultPaymentDetails.getEntityList();
            
            if (tempListresultPaymentDetails!=null && tempListresultPaymentDetails.size() > 0 && (paymentType == Constants.PaymentAgainstInvoice || paymentType == 0)) {
//                Set<PaymentDetail> invoiceDetails = tempp.getRows();
                String transDetail = "";
                placeHolderDetails="";
                for (PaymentDetail detail : tempListresultPaymentDetails) {
                    Invoice inv = detail.getInvoice();
                    if (inv != null) {
                        KwlReturnObject KWLInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), detail.getInvoice().getID());
                        inv = (Invoice) KWLInvoice.getEntityList().get(0);
                        classPathIDMap.clear();
                        classPathIDMap.put(Invoice.class.getName(), inv != null ? inv.getID() : "");
                        if (!StringUtil.isNullOrEmpty(tempp.getCustomer())) {
                            classPathIDMap.put(Customer.class.getName(), tempp.getCustomer());
                        }
                        if (tempp.getVendor() != null) {
                            classPathIDMap.put(Vendor.class.getName(), tempp.getVendor().getID());
                        }
                        classPathIDMap.put(PaymentDetail.class.getName(), detail.getID());
                        classPathIDMap.put("CUSTOMDATA", detail.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 4);
                        transDetail = getFinalDescription(classPathIDMap, configJSON,companyid,detail.getID(),Constants.Acc_Make_Payment_ModuleId,false);
                        transDetail = replaceNullPlaceHolders(transDetail);
                        transDetail = StringUtil.DecodeText(transDetail);
                        placeHolderDetails += transDetail;
                        seqNo = configJSON.getInt("seq");
                    }
                    GoodsReceipt gr = detail.getGoodsReceipt();
                    if (gr != null) {
                        KwlReturnObject KWLGoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), detail.getGoodsReceipt().getID());
                        gr = (GoodsReceipt) KWLGoodsReceipt.getEntityList().get(0);
                        classPathIDMap.clear();
                        classPathIDMap.put(GoodsReceipt.class.getName(), gr != null ? gr.getID() : "");
                        if (!StringUtil.isNullOrEmpty(tempp.getCustomer())) {
                            classPathIDMap.put(Customer.class.getName(), tempp.getCustomer());
                        }
                        if (tempp.getVendor() != null) {
                            classPathIDMap.put(Vendor.class.getName(), tempp.getVendor().getID());
                        }
                        classPathIDMap.put(PaymentDetail.class.getName(), detail.getID());
                        classPathIDMap.put("CUSTOMDATA", detail.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                        transDetail = getFinalDescription(classPathIDMap, configJSON,companyid,detail.getID(),Constants.Acc_Make_Payment_ModuleId,false);
                        transDetail = replaceNullPlaceHolders(transDetail);
                        transDetail = StringUtil.DecodeText(transDetail);
                        placeHolderDetails += transDetail;
                        seqNo = configJSON.getInt("seq");
                    }
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            if (payDetail != null && payDetail.getCheque() != null) {
                KwlReturnObject KWLCheque = accountingHandlerDAOobj.getObject(Cheque.class.getName(), payDetail.getCheque().getID());
                Cheque cheque = (Cheque) KWLCheque.getEntityList().get(0);
                if (cheque!=null && !StringUtil.isNullOrEmpty(cheque.getChequeNo())) {
                    classPathIDMap.clear();
                    placeHolderDetails="";
                    classPathIDMap.put(Cheque.class.getName(), cheque.getID());
                    classPathIDMap.put(PaymentMethod.class.getName(),  payDetail.getPaymentMethod() != null ? payDetail.getPaymentMethod().getID() : "" );
                    configJSON = getConfiguredTypeJSON(descJsonArr, 7);
                    placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Make_Payment_ModuleId,true);
                    placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                    seqNo = configJSON.getInt("seq");
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            }
            if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                if (tempp != null && tempp.getPaidTo() != null) {
                    classPathIDMap.clear();
                    placeHolderDetails="";
                    classPathIDMap.put(MasterItem.class.getName(), tempp.getPaidTo().getID());
                    configJSON = getConfiguredTypeJSON(descJsonArr, 8);
                    placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Make_Payment_ModuleId,true);
                    placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                    seqNo = configJSON.getInt("seq");
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            } else {
                if (tempp != null && tempp.getPaidTo() != null) {
                    classPathIDMap.clear();
                    placeHolderDetails="";
                    classPathIDMap.put(MasterItem.class.getName(), tempp.getPaidTo().getID());
                    configJSON = getConfiguredTypeJSON(descJsonArr, 8);
                    placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Make_Payment_ModuleId,true);
                    placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                    seqNo = configJSON.getInt("seq");
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            }
            transactionDetails+=getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander=transactionDetails.replaceAll("<br>", ",");
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", madid);
            transDetMap.put("madname", madname);
            transDetMap.put("isVendor", isVendor?"true":"false");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        }else {
            Payment tempp = (Payment) paymentMadeMap.get(entry.getID())[0];
            int paymentType = 0;
            if (jeDetailPaymentTypeMap.containsKey(jed.getID()) && jeDetailPaymentTypeMap.get(jed.getID()) != null) {
                paymentType = jeDetailPaymentTypeMap.get(jed.getID()).intValue();
            }
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            HashMap<String, Object> requestParamsMap = new HashMap();
            filter_names.add("ID");
            filter_params.add(tempp.getPayDetail().getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            KwlReturnObject resultPayDet = accReceiptDao.getPayDetails(requestParamsMap);
            PayDetail payDetail = (PayDetail) resultPayDet.getEntityList().get(0);
            String cvName = "";
            if (tempp != null && !StringUtil.isNullOrEmpty(tempp.getCustomer()) && (bankBook || ledgerReport)) {
                KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempp.getCustomer());
                if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
                    Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                    cvName = customer.getName();
                    isVendor = false;
madid = customer.getID();
madname = customer.getName();
                }
            } else if (tempp != null && tempp.getVendor() != null && (bankBook || ledgerReport)) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempp.getVendor().getID());
                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                    cvName = vendor.getName();
                    isVendor = true;
madid = vendor.getID();
madname = vendor.getName();
                }
            }

            String memo = StringUtil.isNullOrEmpty(tempp.getMemo()) ? "" : "<br>" + tempp.getMemo();
            String memoForExpander = StringUtil.isNullOrEmpty(tempp.getMemo()) ? "" : ", " + tempp.getMemo();
            String vName = "";
            if (tempp != null && !StringUtil.isNullOrEmpty(tempp.getCustomer())) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempp.getCustomer());
                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().size() > 0) {
                    if (resultVendor.getEntityList().get(0) != null) {
                        Customer customer = (Customer) resultVendor.getEntityList().get(0);
                        vName = customer.getName();
                        isVendor = false;
madid = customer.getID();
madname = customer.getName();
                    }
                }
            } else if (tempp != null && tempp.getVendor() != null) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempp.getVendor().getID());
                Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                vName = vendor.getName();
                isVendor = true;
madid = vendor.getID();
madname = vendor.getName();
            }
            if (tempp.getPaymentWindowType() == 3) {// Payment Aginst GL
                transactionDetails += "Make Payment Against GL";
                transactionDetailsForExpander += "Make Payment Against GL";
                if (payDetail != null && payDetail.getPaymentMethod() != null) {
                    KwlReturnObject resultPaymentMethod = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), payDetail.getPaymentMethod().getID());
                    PaymentMethod paymentMethod = (PaymentMethod) resultPaymentMethod.getEntityList().get(0);
                    if (paymentMethod.getDetailType() == PaymentMethod.TYPE_CASH) {
                        transactionDetails += ", Cash Payment";
                        transactionDetailsForExpander += ", Cash Payment";
                    }
                }
            } else {// Receive Payment from Vendor or Customer
                transactionDetails += "Make Payment";
                transactionDetailsForExpander += "Make Payment";
            }
            transactionDetails += memo;
            transactionDetailsForExpander += memoForExpander;

            String chequeDetails = "";
            if (payDetail != null && payDetail.getCheque() != null) {
                KwlReturnObject KWLCheque = accountingHandlerDAOobj.getObject(Cheque.class.getName(), payDetail.getCheque().getID());
                Cheque cheque = (Cheque) KWLCheque.getEntityList().get(0);
                if (cheque!=null && !StringUtil.isNullOrEmpty(cheque.getChequeNo())) {
                    chequeDetails += "Cheque No. " + cheque.getChequeNo();
                    Date chequeDate = cheque.getDueDate();
                    String chequeDateString = "";
                    if (chequeDate != null) {
                        chequeDateString = df.format(chequeDate);
                    }
                    chequeDetails += " dated " + chequeDateString;
                    if(payDetail != null && payDetail.getPaymentMethod() != null){
                        KwlReturnObject KWLPaymentMethod = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), payDetail.getPaymentMethod().getID());
                        PaymentMethod paymentMethod = (PaymentMethod) KWLPaymentMethod.getEntityList().get(0);
                        chequeDetails += StringUtil.isNullOrEmpty(paymentMethod.getMethodName()) ? "" : (", " + paymentMethod.getMethodName());
                    }
    //                            chequeDetails+=(StringUtil.isNullOrEmpty(tempp.getPayDetail().getCheque().getBankName())? "" : (", " + tempp.getPayDetail().getCheque().getBankName()));
                    chequeDetails += (StringUtil.isNullOrEmpty(cheque.getDescription()) ? "" : (", " + cheque.getDescription()));
                }
            }
            
            filter_names.clear(); filter_params.clear(); requestParamsMap.clear();
            filter_names.add("payment.ID");
            filter_params.add(tempp.getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            
            List<PaymentDetailOtherwise> detailsList = accVendorPaymentobj.getPaymentDetailOtherwise(tempp.getID());
            if (detailsList!=null && detailsList.size() > 0 && (paymentType == Constants.GLPayment || paymentType == 0)) {
                if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                    Account acc = jed.getAccount();
                    KwlReturnObject resultAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                    Account acc = (Account) resultAccount.getEntityList().get(0);
                    if (acc != null && acc.getID().equals(accountid)) {
                        String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                        accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                        accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                        accDesc = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : "<br>" + jed.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : ", " + jed.getDescription();
                        transactionDetails += "<br>" + accID + " - " + accName + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                        transactionDetailsForExpander += ", " + accID + " - " + accName + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        String customColData = "", customColDataForExpander = "";

                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataJECount(companyid, jed.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, jed.getID(), true) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, jed.getID(),true);

                        transactionDetails += (StringUtil.isNullOrEmpty(customColData) ? "" : customColData);
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        transactionDetailsForExpander += (StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander);
                    }
                }
            }

            List<AdvanceDetail> detailsListAdvanced = accVendorPaymentobj.getPaymentDetailAdvanced(tempp.getID());
            if (detailsListAdvanced!=null && detailsListAdvanced.size() > 0 && (paymentType == Constants.AdvancePayment || paymentType == 0)) {
//                Set<AdvanceDetail> invoiceDetails = tempp.getAdvanceDetails();
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                for (AdvanceDetail detail : detailsListAdvanced) {
                    String transDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                    String transDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        lineLevelDetails = "<br>Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDesc;
                        lineLevelDetailsForExpander = ", Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDescForExpander;
                    } else {
                        lineLevelDetails += "<br>Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDesc;
                        lineLevelDetailsForExpander += ", Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDescForExpander;
                    }
                    String customColData = "", customColDataForExpander = "";

                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getId());
                    customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getId(), false) : "";
                    //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getId(),false);
                    lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                    customColDataForExpander = customColData;
                    customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                    lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
                transactionDetails += lineLevelDetails;
                transactionDetailsForExpander += lineLevelDetailsForExpander;
            }

//            KwlReturnObject cnResult = accCreditNoteobj.getCreditNoteIdFromPaymentId(tempp.getID());
//            Iterator itr2 = cnResult.getEntityList().iterator();
            String lineLevelCNDetails = "";
            String lineLevelCNDetailsForExpander = "";
            KwlReturnObject resultCNPaymentDet = accVendorPaymentobj.getCreditNotePaymentDetails(requestParamsMap);
            List<CreditNotePaymentDetails> tempListresultCNPaymentDet = resultCNPaymentDet.getEntityList();
            if (tempListresultCNPaymentDet!=null && tempListresultCNPaymentDet.size() > 0 && (paymentType == Constants.PaymentAgainstCNDN || paymentType == 0)) {
                for (CreditNotePaymentDetails detail : tempListresultCNPaymentDet) {
                    CreditNote creditNote = detail.getCreditnote();
                    if (creditNote != null) {
                        KwlReturnObject cnresult = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), detail.getCreditnote().getID());
                        creditNote = (CreditNote) cnresult.getEntityList().get(0);
                        String cnDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ("<br>" + detail.getDescription());
                        String cnDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : (", " + detail.getDescription());
                        String grNo = "";
                        grNo = StringUtil.isNullOrEmpty(creditNote.getCreditNoteNumber()) ? "" : creditNote.getCreditNoteNumber();
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            lineLevelCNDetails = "<br>Credit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + cnDesc;
                            lineLevelCNDetailsForExpander = ", Credit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + cnDescForExpander;
                        } else {
                            lineLevelCNDetails += "<br>Credit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + cnDesc;
                            lineLevelCNDetailsForExpander += ", Credit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + cnDescForExpander;
                        }
                        String customColData = "", customColDataForExpander = "";

                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, recid,false);

                        lineLevelCNDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        lineLevelCNDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                }
                transactionDetails += lineLevelCNDetails;
                transactionDetailsForExpander += lineLevelCNDetailsForExpander;
            }

            KwlReturnObject resultPaymentDetails = accVendorPaymentobj.getPaymentDetails(requestParamsMap);
            List<PaymentDetail> tempListresultPaymentDetails = resultPaymentDetails.getEntityList();
            if (tempListresultPaymentDetails!=null && tempListresultPaymentDetails.size() > 0 && (paymentType == Constants.PaymentAgainstInvoice || paymentType == 0)) {
//                Set<PaymentDetail> invoiceDetails = tempp.getRows();
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                for (PaymentDetail detail : tempListresultPaymentDetails) {
                    Invoice inv = detail.getInvoice();
                    if (inv != null) {
                        KwlReturnObject KWLInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), detail.getInvoice().getID());
                        inv = (Invoice) KWLInvoice.getEntityList().get(0);
                        String grNo = "", accDesc = "", accDescForExpander = "";
                        grNo = StringUtil.isNullOrEmpty(inv.getInvoiceNumber()) ? "" : inv.getInvoiceNumber();
                        accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            lineLevelDetails += "<br>Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander += ", Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        } else {
                            lineLevelDetails += "<br>Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander += ", Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        }
                        String customColData = "", customColDataForExpander = "";

                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(),false);

                        lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                    }
                    GoodsReceipt gr = detail.getGoodsReceipt();
                    if (gr != null) {
                        KwlReturnObject KWLGoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), detail.getGoodsReceipt().getID());
                        gr = (GoodsReceipt) KWLGoodsReceipt.getEntityList().get(0);
                        String grNo = "", accDesc = "", accDescForExpander = "";
                        grNo = StringUtil.isNullOrEmpty(gr.getGoodsReceiptNumber()) ? "" : gr.getGoodsReceiptNumber();
                        accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            lineLevelDetails = "<br>Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander = ", Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        } else {
                            lineLevelDetails += "<br>Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander += ", Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        }

                        String customColData = "", customColDataForExpander = "";
                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(),false);
                        lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                    }
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
                transactionDetails += lineLevelDetails;
                transactionDetailsForExpander += lineLevelDetailsForExpander;
            }
            transactionDetails += StringUtil.isNullOrEmpty(chequeDetails) ? "" : ("<br>" + chequeDetails);
            transactionDetailsForExpander += StringUtil.isNullOrEmpty(chequeDetails) ? "" : (", " + chequeDetails);

            if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                if (tempp != null && tempp.getPaidTo() != null) {
                    KwlReturnObject KWLMasterItem = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), tempp.getPaidTo().getID());
                    MasterItem masterItem = (MasterItem) KWLMasterItem.getEntityList().get(0);
                    transactionDetails += "<br>Paid to : " + masterItem.getValue();
                    transactionDetailsForExpander += ", Paid to : " + masterItem.getValue();
                }
            } else {
                if (tempp != null && tempp.getPaidTo() != null) {
                    KwlReturnObject KWLMasterItem = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), tempp.getPaidTo().getID());
                    MasterItem masterItem = (MasterItem) KWLMasterItem.getEntityList().get(0);
                    transactionDetails += "<br>Paid to : " + masterItem.getValue();
                    transactionDetailsForExpander += ", Paid to : " + masterItem.getValue();
                }
            }
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", madid);
            transDetMap.put("madname", madname);
transDetMap.put("isVendor", isVendor?"true":"false");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        }
        return transDetMap;
    }
    
    Map<String, String> getTransactionDetailsForPaymentGL(Payment tempp, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig, Map<String, Integer> jeDetailPaymentTypeMap, boolean bankBook, boolean ledgerReport) throws UnsupportedEncodingException, ServiceException, JSONException{
        String transactionDetails = "";
        String transactionDetailsForExpander = "";
        boolean isVendor = false;
String madid="";
String madname="";
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        Map<String, String> transDetMap = new HashMap<String, String>();
        String lineLevelCustomFieldData="";
        if(isDescConfig){
            //Desc by config
            String lineLevelGSTCodes = "";
            HashMap<String, String> classPathIDMap = new HashMap<String, String>();
            HashMap<Integer, String> finalTransDetailsMap = new HashMap<Integer, String>();
//            Payment tempp = (Payment) paymentMadeMap.get(entry.getID())[0];
            int paymentType = 0;
            if (jeDetailPaymentTypeMap.containsKey(jed.getID()) && jeDetailPaymentTypeMap.get(jed.getID()) != null) {
                paymentType = jeDetailPaymentTypeMap.get(jed.getID()).intValue();
            }
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            HashMap<String, Object> requestParamsMap = new HashMap();
            filter_names.add("ID");
            filter_params.add(tempp.getPayDetail().getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            KwlReturnObject resultPayDet = accReceiptDao.getPayDetails(requestParamsMap);
            PayDetail payDetail = (PayDetail) resultPayDet.getEntityList().get(0);
            String cvName = "";
            if (tempp != null && !StringUtil.isNullOrEmpty(tempp.getCustomer()) && (bankBook || ledgerReport)) {
                KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempp.getCustomer());
                if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
                    Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                    cvName = customer.getName();
                    isVendor = false;
madid = customer.getID();
madname = customer.getName();

                }
            } else if (tempp != null && tempp.getVendor() != null && (bankBook || ledgerReport)) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempp.getVendor().getID());

                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                    cvName = vendor.getName();
                    isVendor = true;
madid = vendor.getID();
madname = vendor.getName();
                }
            }
            
            if (tempp.getPaymentWindowType() == 3) {// Payment Aginst GL
                transactionDetails += "Make Payment Against GL";
                if (payDetail != null && payDetail.getPaymentMethod() != null) {
                    KwlReturnObject resultPaymentMethod = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), payDetail.getPaymentMethod().getID());
                    PaymentMethod paymentMethod = (PaymentMethod) resultPaymentMethod.getEntityList().get(0);
                    if (paymentMethod.getDetailType() == PaymentMethod.TYPE_CASH) {
                        transactionDetails += ", Cash Payment";
                    }
                }
            } else {// Receive Payment from Vendor or Customer
                transactionDetails += "Make Payment";
            }
            
            classPathIDMap.put(Payment.class.getName(), tempp.getID());
            // get Receipt level Desc 
            String placeHolderDetails = "";
            JSONObject configJSON = getConfiguredTypeJSON(descJsonArr, 1);
            placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Make_Payment_ModuleId,true);
            placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
            int seqNo = configJSON.getInt("seq");
            finalTransDetailsMap.put(seqNo, placeHolderDetails);

            filter_names.clear(); filter_params.clear(); requestParamsMap.clear();
            filter_names.add("payment.ID");
            filter_params.add(tempp.getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            
            List<PaymentDetailOtherwise> detailsList = accVendorPaymentobj.getPaymentDetailOtherwise(tempp.getID());
            if (detailsList!=null && detailsList.size() > 0 && (paymentType == Constants.GLPayment || paymentType == 0)) {
                String transDetail = "";
                placeHolderDetails = "";
                String tempGSTCode = "";
                for (PaymentDetailOtherwise detail : detailsList) {
//                    if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                    Account acc = jed.getAccount();
                        KwlReturnObject resultAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                        Account acc = (Account) resultAccount.getEntityList().get(0);
                        if (acc != null ) {
                            classPathIDMap.clear();
                            classPathIDMap.put(Account.class.getName(), acc.getID());
                            if (!StringUtil.isNullOrEmpty(tempp.getCustomer())) {
                                classPathIDMap.put(Customer.class.getName(), tempp.getCustomer());
                            }
                            if (tempp.getVendor() != null) {
                                classPathIDMap.put(Vendor.class.getName(), tempp.getVendor().getID());
                            }
                            classPathIDMap.put(PaymentDetailOtherwise.class.getName(), detail.getID());
                            classPathIDMap.put("CUSTOMDATA", detail.getID());
                            // get Receipt level Desc 
                            configJSON = getConfiguredTypeJSON(descJsonArr, 2);
                            transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Make_Payment_ModuleId, false);
                            transDetail = replaceNullPlaceHolders(transDetail);
                            transDetail = StringUtil.DecodeText(transDetail);
                            //Get line level Dimension Data
                            Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(), false);
                            lineLevelCustomFieldData = customFieldData.toString();
                            seqNo = configJSON.getInt("seq");
                            tempGSTCode = detail.getTax()==null ? "" : detail.getTax().getTaxCode();
                            if ((detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID()))|| (detail.getGstJED() != null && detail.getGstJED().getID().equals(jed.getID()))) {
                                placeHolderDetails = transDetail;
                                lineLevelGSTCodes = tempGSTCode;
                                break;
                            }else{
                                placeHolderDetails += transDetail;
                                if(!StringUtil.isNullOrEmpty(tempGSTCode)){
                                    if (!StringUtil.isNullOrEmpty(lineLevelGSTCodes)) {
                                        lineLevelGSTCodes += ", " + tempGSTCode;
                                    } else {
                                        lineLevelGSTCodes += tempGSTCode;
                                    }
                            }
                        }
                        }
//                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            List<AdvanceDetail> detailsListAdvanced = accVendorPaymentobj.getPaymentDetailAdvanced(tempp.getID());
            if (detailsListAdvanced!=null && detailsListAdvanced.size() > 0 && (paymentType == Constants.AdvancePayment || paymentType == 0)) {
//                Set<AdvanceDetail> invoiceDetails = tempp.getAdvanceDetails();
                placeHolderDetails="";
                String transDetail = "";
                for (AdvanceDetail detail : detailsListAdvanced) {
                    classPathIDMap.clear();
                    if (!StringUtil.isNullOrEmpty(tempp.getCustomer())) {
                        classPathIDMap.put(Customer.class.getName(), tempp.getCustomer());
                    }
                    if (tempp.getVendor() != null) {
                        classPathIDMap.put(Vendor.class.getName(), tempp.getVendor().getID());
                    }
                    classPathIDMap.put(AdvanceDetail.class.getName(), detail.getId());
                    classPathIDMap.put("CUSTOMDATA", detail.getId());
                    // get Receipt level Desc 
                    configJSON = getConfiguredTypeJSON(descJsonArr, 3);
                    transDetail = getFinalDescription(classPathIDMap, configJSON,companyid,detail.getId(),Constants.Acc_Make_Payment_ModuleId,false);
                    transDetail = replaceNullPlaceHolders(transDetail);
                    transDetail = StringUtil.DecodeText(transDetail);
                    //Get line level Dimension Data
                    Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getId(), false);
                    lineLevelCustomFieldData = customFieldData.toString();
                    placeHolderDetails += transDetail;
                    seqNo = configJSON.getInt("seq");
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }

//            KwlReturnObject cnResult = accCreditNoteobj.getCreditNoteIdFromPaymentId(tempp.getID());
//            Iterator itr2 = cnResult.getEntityList().iterator();
//            String lineLevelCNDetails = "";
//            String lineLevelCNDetailsForExpander = "";
            
            KwlReturnObject resultCNPaymentDet = accVendorPaymentobj.getCreditNotePaymentDetails(requestParamsMap);
            List<CreditNotePaymentDetails> tempListresultCNPaymentDet = resultCNPaymentDet.getEntityList();
            if (tempListresultCNPaymentDet!=null && tempListresultCNPaymentDet.size() > 0 && (paymentType == Constants.PaymentAgainstCNDN || paymentType == 0)) {
                String transDetail = "";
                placeHolderDetails="";
//                Set<CreditNotePaymentDetails> invoiceDetails = tempp.getCreditNotePaymentDetails();
                for (CreditNotePaymentDetails detail : tempListresultCNPaymentDet) {
                    CreditNote creditNote = detail.getCreditnote();
                    if (creditNote != null) {
                        KwlReturnObject cnresult = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), detail.getCreditnote().getID());
                        creditNote = (CreditNote) cnresult.getEntityList().get(0);
                        classPathIDMap.clear();
                        classPathIDMap.put(CreditNote.class.getName(), creditNote != null ? creditNote.getID() : "");
                        if (!StringUtil.isNullOrEmpty(tempp.getCustomer())) {
                            classPathIDMap.put(Customer.class.getName(), tempp.getCustomer());
                        }
                        if (tempp.getVendor() != null) {
                            classPathIDMap.put(Vendor.class.getName(), tempp.getVendor().getID());
                        }
                        classPathIDMap.put(CreditNotePaymentDetails.class.getName(), detail.getID());
                        classPathIDMap.put("CUSTOMDATA", detail.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 6);
                        transDetail = getFinalDescription(classPathIDMap, configJSON, companyid, detail.getID(), Constants.Acc_Make_Payment_ModuleId, false);
                        transDetail = replaceNullPlaceHolders(transDetail);
                        transDetail = StringUtil.DecodeText(transDetail);
                        //Get line level Dimension Data
                        Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(), false);
                        lineLevelCustomFieldData = customFieldData.toString();
                        placeHolderDetails += transDetail;
                        seqNo = configJSON.getInt("seq");
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            
            KwlReturnObject resultPaymentDetails = accVendorPaymentobj.getPaymentDetails(requestParamsMap);
            List<PaymentDetail> tempListresultPaymentDetails = resultPaymentDetails.getEntityList();
            
            if (tempListresultPaymentDetails!=null && tempListresultPaymentDetails.size() > 0 && (paymentType == Constants.PaymentAgainstInvoice || paymentType == 0)) {
//                Set<PaymentDetail> invoiceDetails = tempp.getRows();
                String transDetail = "";
                placeHolderDetails="";
                for (PaymentDetail detail : tempListresultPaymentDetails) {
                    Invoice inv = detail.getInvoice();
                    if (inv != null) {
                        KwlReturnObject KWLInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), detail.getInvoice().getID());
                        inv = (Invoice) KWLInvoice.getEntityList().get(0);
                        classPathIDMap.clear();
                        classPathIDMap.put(Invoice.class.getName(), inv != null ? inv.getID() : "");
                        if (!StringUtil.isNullOrEmpty(tempp.getCustomer())) {
                            classPathIDMap.put(Customer.class.getName(), tempp.getCustomer());
                        }
                        if (tempp.getVendor() != null) {
                            classPathIDMap.put(Vendor.class.getName(), tempp.getVendor().getID());
                        }
                        classPathIDMap.put(PaymentDetail.class.getName(), detail.getID());
                        classPathIDMap.put("CUSTOMDATA", detail.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 4);
                        transDetail = getFinalDescription(classPathIDMap, configJSON,companyid,detail.getID(),Constants.Acc_Make_Payment_ModuleId,false);
                        transDetail = replaceNullPlaceHolders(transDetail);
                        transDetail = StringUtil.DecodeText(transDetail);
                        //Get line level Dimension Data
                        Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(), false);
                        lineLevelCustomFieldData = customFieldData.toString();
                        placeHolderDetails += transDetail;
                        seqNo = configJSON.getInt("seq");
                    }
                    GoodsReceipt gr = detail.getGoodsReceipt();
                    if (gr != null) {
                        KwlReturnObject KWLGoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), detail.getGoodsReceipt().getID());
                        gr = (GoodsReceipt) KWLGoodsReceipt.getEntityList().get(0);
                        classPathIDMap.clear();
                        classPathIDMap.put(GoodsReceipt.class.getName(), gr != null ? gr.getID() : "");
                        if (!StringUtil.isNullOrEmpty(tempp.getCustomer())) {
                            classPathIDMap.put(Customer.class.getName(), tempp.getCustomer());
                        }
                        if (tempp.getVendor() != null) {
                            classPathIDMap.put(Vendor.class.getName(), tempp.getVendor().getID());
                        }
                        classPathIDMap.put(PaymentDetail.class.getName(), detail.getID());
                        classPathIDMap.put("CUSTOMDATA", detail.getID());
                        configJSON = getConfiguredTypeJSON(descJsonArr, 5);
                        transDetail = getFinalDescription(classPathIDMap, configJSON,companyid,detail.getID(),Constants.Acc_Make_Payment_ModuleId,false);
                        transDetail = replaceNullPlaceHolders(transDetail);
                        transDetail =StringUtil.DecodeText(transDetail);
                        //Get line level Dimension Data
                        Map<String, String> customFieldData = getLineLevelCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(), false);
                        lineLevelCustomFieldData = customFieldData.toString();
                        placeHolderDetails += transDetail;
                        seqNo = configJSON.getInt("seq");
                    }
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
                finalTransDetailsMap.put(seqNo, placeHolderDetails);
            }
            if (payDetail != null && payDetail.getCheque() != null) {
                KwlReturnObject KWLCheque = accountingHandlerDAOobj.getObject(Cheque.class.getName(), payDetail.getCheque().getID());
                Cheque cheque = (Cheque) KWLCheque.getEntityList().get(0);
                if (cheque!=null && !StringUtil.isNullOrEmpty(cheque.getChequeNo())) {
                    classPathIDMap.clear();
                    placeHolderDetails="";
                    classPathIDMap.put(Cheque.class.getName(), cheque.getID());
                    classPathIDMap.put(PaymentMethod.class.getName(),  payDetail.getPaymentMethod() != null ? payDetail.getPaymentMethod().getID() : "" );
                    configJSON = getConfiguredTypeJSON(descJsonArr, 7);
                    placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Make_Payment_ModuleId,true);
                    placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                    seqNo = configJSON.getInt("seq");
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            }
            if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                if (tempp != null && tempp.getPaidTo() != null) {
                    classPathIDMap.clear();
                    placeHolderDetails="";
                    classPathIDMap.put(MasterItem.class.getName(), tempp.getPaidTo().getID());
                    configJSON = getConfiguredTypeJSON(descJsonArr, 8);
                    placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Make_Payment_ModuleId,true);
                    placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                    seqNo = configJSON.getInt("seq");
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            } else {
                if (tempp != null && tempp.getPaidTo() != null) {
                    classPathIDMap.clear();
                    placeHolderDetails="";
                    classPathIDMap.put(MasterItem.class.getName(), tempp.getPaidTo().getID());
                    configJSON = getConfiguredTypeJSON(descJsonArr, 8);
                    placeHolderDetails = getFinalDescription(classPathIDMap, configJSON,companyid,jed.getID(),Constants.Acc_Make_Payment_ModuleId,true);
                    placeHolderDetails = replaceNullPlaceHolders(placeHolderDetails);
                    seqNo = configJSON.getInt("seq");
                    finalTransDetailsMap.put(seqNo, placeHolderDetails);
                }
            }
            transactionDetails+=getSequenceWiseDescription(finalTransDetailsMap);
            transactionDetailsForExpander=transactionDetails.replaceAll("<br>", ",");
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", madid);
            transDetMap.put("madname", madname);
transDetMap.put("isVendor", isVendor?"true":"false");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
            transDetMap.put("gstCode", lineLevelGSTCodes);
            transDetMap.put("lineLevelCustomFieldData", lineLevelCustomFieldData);
        }else {
//            Payment tempp = (Payment) paymentMadeMap.get(entry.getID())[0];
            int paymentType = 0;
            if (jeDetailPaymentTypeMap.containsKey(jed.getID()) && jeDetailPaymentTypeMap.get(jed.getID()) != null) {
                paymentType = jeDetailPaymentTypeMap.get(jed.getID()).intValue();
            }
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            HashMap<String, Object> requestParamsMap = new HashMap();
            filter_names.add("ID");
            filter_params.add(tempp.getPayDetail().getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            KwlReturnObject resultPayDet = accReceiptDao.getPayDetails(requestParamsMap);
            PayDetail payDetail = (PayDetail) resultPayDet.getEntityList().get(0);
            String cvName = "";
            if (tempp != null && !StringUtil.isNullOrEmpty(tempp.getCustomer()) && (bankBook || ledgerReport)) {
                KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempp.getCustomer());
                if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
                    Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                    cvName = customer.getName();
                    isVendor = false;
madid = customer.getID();
madname = customer.getName();
                }
            } else if (tempp != null && tempp.getVendor() != null && (bankBook || ledgerReport)) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempp.getVendor().getID());
                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                    cvName = vendor.getName();
                    isVendor = true;
madid = vendor.getID();
madname = vendor.getName();
                }
            }

            String memo = StringUtil.isNullOrEmpty(tempp.getMemo()) ? "" : "<br>" + tempp.getMemo();
            String memoForExpander = StringUtil.isNullOrEmpty(tempp.getMemo()) ? "" : ", " + tempp.getMemo();
            String vName = "";
            if (tempp != null && !StringUtil.isNullOrEmpty(tempp.getCustomer())) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempp.getCustomer());
                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().size() > 0) {
                    if (resultVendor.getEntityList().get(0) != null) {
                        Customer customer = (Customer) resultVendor.getEntityList().get(0);
                        vName = customer.getName();
                        isVendor = false;
madid = customer.getID();
madname = customer.getName();
                    }
                }
            } else if (tempp != null && tempp.getVendor() != null) {
                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempp.getVendor().getID());
                Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                vName = vendor.getName();
                isVendor = true;
madid = vendor.getID();
madname = vendor.getName();
            }
            if (tempp.getPaymentWindowType() == 3) {// Payment Aginst GL
                transactionDetails += "Make Payment Against GL";
                transactionDetailsForExpander += "Make Payment Against GL";
                if (payDetail != null && payDetail.getPaymentMethod() != null) {
                    KwlReturnObject resultPaymentMethod = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), payDetail.getPaymentMethod().getID());
                    PaymentMethod paymentMethod = (PaymentMethod) resultPaymentMethod.getEntityList().get(0);
                    if (paymentMethod.getDetailType() == PaymentMethod.TYPE_CASH) {
                        transactionDetails += ", Cash Payment";
                        transactionDetailsForExpander += ", Cash Payment";
                    }
                }
            } else {// Receive Payment from Vendor or Customer
                transactionDetails += "Make Payment";
                transactionDetailsForExpander += "Make Payment";
            }
            transactionDetails += memo;
            transactionDetailsForExpander += memoForExpander;

            String chequeDetails = "";
            if (payDetail != null && payDetail.getCheque() != null) {
                KwlReturnObject KWLCheque = accountingHandlerDAOobj.getObject(Cheque.class.getName(), payDetail.getCheque().getID());
                Cheque cheque = (Cheque) KWLCheque.getEntityList().get(0);
                if (cheque!=null && !StringUtil.isNullOrEmpty(cheque.getChequeNo())) {
                    chequeDetails += "Cheque No. " + cheque.getChequeNo();
                    Date chequeDate = cheque.getDueDate();
                    String chequeDateString = "";
                    if (chequeDate != null) {
                        chequeDateString = df.format(chequeDate);
                    }
                    chequeDetails += " dated " + chequeDateString;
                    if(payDetail != null && payDetail.getPaymentMethod() != null){
                        KwlReturnObject KWLPaymentMethod = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), payDetail.getPaymentMethod().getID());
                        PaymentMethod paymentMethod = (PaymentMethod) KWLPaymentMethod.getEntityList().get(0);
                        chequeDetails += StringUtil.isNullOrEmpty(paymentMethod.getMethodName()) ? "" : (", " + paymentMethod.getMethodName());
                    }
    //                            chequeDetails+=(StringUtil.isNullOrEmpty(tempp.getPayDetail().getCheque().getBankName())? "" : (", " + tempp.getPayDetail().getCheque().getBankName()));
                    chequeDetails += (StringUtil.isNullOrEmpty(cheque.getDescription()) ? "" : (", " + cheque.getDescription()));
                }
            }
            
            filter_names.clear(); filter_params.clear(); requestParamsMap.clear();
            filter_names.add("payment.ID");
            filter_params.add(tempp.getID());
            requestParamsMap.put("filter_names", filter_names);
            requestParamsMap.put("filter_params", filter_params);
            
            List<PaymentDetailOtherwise> detailsList = accVendorPaymentobj.getPaymentDetailOtherwise(tempp.getID());
            if (detailsList!=null && detailsList.size() > 0 && (paymentType == Constants.GLPayment || paymentType == 0)) {
                if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                    Account acc = jed.getAccount();
                    KwlReturnObject resultAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                    Account acc = (Account) resultAccount.getEntityList().get(0);
                    if (acc != null && acc.getID().equals(accountid)) {
                        String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                        accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                        accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                        accDesc = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : "<br>" + jed.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : ", " + jed.getDescription();
                        transactionDetails += "<br>" + accID + " - " + accName + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                        transactionDetailsForExpander += ", " + accID + " - " + accName + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        String customColData = "", customColDataForExpander = "";

                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataJECount(companyid, jed.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, jed.getID(), true) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, jed.getID(),true);

                        transactionDetails += (StringUtil.isNullOrEmpty(customColData) ? "" : customColData);
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        transactionDetailsForExpander += (StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander);
                    }
                }
            }

            List<AdvanceDetail> detailsListAdvanced = accVendorPaymentobj.getPaymentDetailAdvanced(tempp.getID());
            if (detailsListAdvanced!=null && detailsListAdvanced.size() > 0 && (paymentType == Constants.AdvancePayment || paymentType == 0)) {
//                Set<AdvanceDetail> invoiceDetails = tempp.getAdvanceDetails();
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                for (AdvanceDetail detail : detailsListAdvanced) {
                    String transDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                    String transDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        lineLevelDetails = "<br>Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDesc;
                        lineLevelDetailsForExpander = ", Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDescForExpander;
                    } else {
                        lineLevelDetails += "<br>Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDesc;
                        lineLevelDetailsForExpander += ", Advance Payment" + (vName.isEmpty() ? "" : ", " + vName) + transDescForExpander;
                    }
                    String customColData = "", customColDataForExpander = "";

                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getId());
                    customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getId(), false) : "";
                    //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getId(),false);
                    lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                    customColDataForExpander = customColData;
                    customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                    lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
                transactionDetails += lineLevelDetails;
                transactionDetailsForExpander += lineLevelDetailsForExpander;
            }

//            KwlReturnObject cnResult = accCreditNoteobj.getCreditNoteIdFromPaymentId(tempp.getID());
//            Iterator itr2 = cnResult.getEntityList().iterator();
            String lineLevelCNDetails = "";
            String lineLevelCNDetailsForExpander = "";
            KwlReturnObject resultCNPaymentDet = accVendorPaymentobj.getCreditNotePaymentDetails(requestParamsMap);
            List<CreditNotePaymentDetails> tempListresultCNPaymentDet = resultCNPaymentDet.getEntityList();
            if (tempListresultCNPaymentDet!=null && tempListresultCNPaymentDet.size() > 0 && (paymentType == Constants.PaymentAgainstCNDN || paymentType == 0)) {
                for (CreditNotePaymentDetails detail : tempListresultCNPaymentDet) {
                    CreditNote creditNote = detail.getCreditnote();
                    if (creditNote != null) {
                        KwlReturnObject cnresult = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), detail.getCreditnote().getID());
                        creditNote = (CreditNote) cnresult.getEntityList().get(0);
                        String cnDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ("<br>" + detail.getDescription());
                        String cnDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : (", " + detail.getDescription());
                        String grNo = "";
                        grNo = StringUtil.isNullOrEmpty(creditNote.getCreditNoteNumber()) ? "" : creditNote.getCreditNoteNumber();
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            lineLevelCNDetails = "<br>Credit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + cnDesc;
                            lineLevelCNDetailsForExpander = ", Credit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + cnDescForExpander;
                        } else {
                            lineLevelCNDetails += "<br>Credit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + cnDesc;
                            lineLevelCNDetailsForExpander += ", Credit Note - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + cnDescForExpander;
                        }
                        String customColData = "", customColDataForExpander = "";

                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, recid,false);

                        lineLevelCNDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        lineLevelCNDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            break;
                        }
                    }
                }
                transactionDetails += lineLevelCNDetails;
                transactionDetailsForExpander += lineLevelCNDetailsForExpander;
            }

            KwlReturnObject resultPaymentDetails = accVendorPaymentobj.getPaymentDetails(requestParamsMap);
            List<PaymentDetail> tempListresultPaymentDetails = resultPaymentDetails.getEntityList();
            if (tempListresultPaymentDetails!=null && tempListresultPaymentDetails.size() > 0 && (paymentType == Constants.PaymentAgainstInvoice || paymentType == 0)) {
//                Set<PaymentDetail> invoiceDetails = tempp.getRows();
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                for (PaymentDetail detail : tempListresultPaymentDetails) {
                    Invoice inv = detail.getInvoice();
                    if (inv != null) {
                        KwlReturnObject KWLInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), detail.getInvoice().getID());
                        inv = (Invoice) KWLInvoice.getEntityList().get(0);
                        String grNo = "", accDesc = "", accDescForExpander = "";
                        grNo = StringUtil.isNullOrEmpty(inv.getInvoiceNumber()) ? "" : inv.getInvoiceNumber();
                        accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            lineLevelDetails += "<br>Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander += ", Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        } else {
                            lineLevelDetails += "<br>Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander += ", Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        }
                        String customColData = "", customColDataForExpander = "";

                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(),false);

                        lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                    }
                    GoodsReceipt gr = detail.getGoodsReceipt();
                    if (gr != null) {
                        KwlReturnObject KWLGoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), detail.getGoodsReceipt().getID());
                        gr = (GoodsReceipt) KWLGoodsReceipt.getEntityList().get(0);
                        String grNo = "", accDesc = "", accDescForExpander = "";
                        grNo = StringUtil.isNullOrEmpty(gr.getGoodsReceiptNumber()) ? "" : gr.getGoodsReceiptNumber();
                        accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                        accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();
                        if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                            lineLevelDetails = "<br>Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander = ", Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        } else {
                            lineLevelDetails += "<br>Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDesc;
                            lineLevelDetailsForExpander += ", Purchase Invoice - " + grNo + (vName.isEmpty() ? "" : ", " + vName) + accDescForExpander;
                        }

                        String customColData = "", customColDataForExpander = "";
                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(), false) : "";
                        //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, detail.getID(),false);
                        lineLevelDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                        customColDataForExpander = customColData;
                        customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                        lineLevelDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                    }
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
                transactionDetails += lineLevelDetails;
                transactionDetailsForExpander += lineLevelDetailsForExpander;
            }
            transactionDetails += StringUtil.isNullOrEmpty(chequeDetails) ? "" : ("<br>" + chequeDetails);
            transactionDetailsForExpander += StringUtil.isNullOrEmpty(chequeDetails) ? "" : (", " + chequeDetails);

            if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                if (tempp != null && tempp.getPaidTo() != null) {
                    KwlReturnObject KWLMasterItem = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), tempp.getPaidTo().getID());
                    MasterItem masterItem = (MasterItem) KWLMasterItem.getEntityList().get(0);
                    transactionDetails += "<br>Paid to : " + masterItem.getValue();
                    transactionDetailsForExpander += ", Paid to : " + masterItem.getValue();
                }
            } else {
                if (tempp != null && tempp.getPaidTo() != null) {
                    KwlReturnObject KWLMasterItem = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), tempp.getPaidTo().getID());
                    MasterItem masterItem = (MasterItem) KWLMasterItem.getEntityList().get(0);
                    transactionDetails += "<br>Paid to : " + masterItem.getValue();
                    transactionDetailsForExpander += ", Paid to : " + masterItem.getValue();
                }
            }
            transDetMap.put("transactionDetails", transactionDetails);
            transDetMap.put("madid", madid);
            transDetMap.put("madname", madname);
transDetMap.put("isVendor", isVendor?"true":"false");
            transDetMap.put("transactionDetailsForExpander", transactionDetailsForExpander);
        }
        return transDetMap;
    }
    
    public String getKeyDataByClassName(String clName, String primaryKey, String keyData,String companyid,String transDetailId, int moduleId, boolean isJEDetailsId){
        String retKeyData="";
        Object obj = null;
        try {
            if(clName.equals("CUSTOMDATA")){
                Pattern p = Pattern.compile("\\$\\#\\$(.*?)\\$\\#\\$");
                Matcher m = p.matcher(keyData);
                while (m.find()) {
                    String getterKey = m.group(1);
                    if (getterKey.equals("CUSTOMDATA")) {
                        int isRecPresent=0;
                        if(isJEDetailsId){
                            isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataJECount(companyid, primaryKey);
                        }else{
                            isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, primaryKey);
                        }
                        retKeyData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, moduleId, primaryKey, isJEDetailsId) : "";
                        if (retKeyData.isEmpty()) {
                            keyData = getFormatedKeyData(keyData, getterKey);
                        }
                        keyData = keyData.replace("$#$" + getterKey + "$#$",retKeyData);
                    }
                }
            }else if(clName.equals("TRANSACTION_AMOUNT")){
                keyData = keyData.replace("$#$" + "TRANSACTION_AMOUNT" + "$#$", primaryKey);
            }else{
                Class cl = Class.forName(clName);
                if (!StringUtil.isNullOrEmpty(primaryKey)) {
                    obj = get(cl, primaryKey);
                    if (obj != null) {
                        Pattern p = Pattern.compile("\\$\\#\\$(.*?)\\$\\#\\$");
                        Matcher m = p.matcher(keyData);
                        while (m.find()) {
                            String getterKey = m.group(1);
                            try {
                                Object argObj[] = null;
                                Method getter = cl.getMethod("get" + getterKey);
                                Object getterData = (Object) getter.invoke(obj, argObj);
                                String getterDataStr = getterData.toString();
                                if(getterDataStr.isEmpty()){
                                    keyData=getFormatedKeyData(keyData,getterKey);
                                }
                                keyData = keyData.replace("$#$" + getterKey + "$#$", getterDataStr);
                            } catch (Exception e) {
                                continue;
                            }
                        }
                    }
                }   
            }
            if(keyData.equals("<br>"))
                keyData="";
        } catch (Exception e) {
            e.printStackTrace();
        }
        return keyData;
    }
    
    public String getFormatedKeyData(String keyData,String getterKey){
        if(!keyData.isEmpty()){
            String getterKeyVal="$#$" + getterKey + "$#$";
            if(keyData.indexOf(getterKeyVal)!=-1){
                String trailingSubString = keyData.substring(0, keyData.indexOf(getterKeyVal));
                String endingSubString = keyData.substring(keyData.indexOf(getterKeyVal) + getterKeyVal.length(), keyData.length());
                String trailingTrimedString = trailingSubString.trim();
                String endingTrimedString = endingSubString.trim();
                if (!(endingTrimedString.startsWith(":") || endingTrimedString.startsWith("-"))) {
                    if (trailingTrimedString.endsWith(",")) {
                        trailingTrimedString = org.springframework.util.StringUtils.trimTrailingCharacter(trailingTrimedString, ',');
                    }
                    if (trailingTrimedString.endsWith("-")) {
                        trailingTrimedString = org.springframework.util.StringUtils.trimTrailingCharacter(trailingTrimedString, '-');
                    }
                    if (trailingTrimedString.endsWith("<br>")) {
                        trailingTrimedString = trailingTrimedString.substring(0, trailingTrimedString.lastIndexOf("<br>"));
                    }
                }
                if (endingTrimedString.startsWith("-")) {
                    endingTrimedString = org.springframework.util.StringUtils.trimLeadingCharacter(endingTrimedString, '-');
                }
                if (endingTrimedString.startsWith(":")) {
                    endingTrimedString = org.springframework.util.StringUtils.trimLeadingCharacter(endingTrimedString, ':');
                }
                endingTrimedString = endingTrimedString.trim();
                keyData = trailingTrimedString + endingTrimedString;
            }
        }
        return  keyData;
    }
    
    
    public JSONArray getDimensionsReportJson(HttpServletRequest request, List list) {
        JSONArray array = new JSONArray();
        try {
            Date date = null;
            String documentId = "";
            String documentNo = "";
            String documentType = "";
            String documentDescription = "";
            String currency="";
            String currencycode="";
            Date documentDate = null;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            double amount = 0, totalDiscount = 0;
            if (list != null) {
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    JSONObject obj = new JSONObject();
                    amount = 0;
                    totalDiscount = 0;
                    Object[] row = (Object[]) itr.next();
                    if (row[0].toString().equals("VQ")) {
                        KwlReturnObject result = accountingHandlerDAOobj.getObject(VendorQuotation.class.getName(), row[1].toString());
                        VendorQuotation vendorQuotation = (VendorQuotation) result.getEntityList().get(0);
                        documentId = vendorQuotation.getID();
                        documentNo = vendorQuotation.getQuotationNumber();
                        documentType = "Vendor Quotation";
                        documentDate = vendorQuotation.getQuotationDate();
                        documentDescription=vendorQuotation.getMemo();
                        currency=vendorQuotation.getCurrency().getSymbol();
                        currencycode=vendorQuotation.getCurrency().getCurrencyCode();
                        double discountPrice = 0;
                        Iterator itrRow = vendorQuotation.getRows().iterator();
                        while (itrRow.hasNext()) {
                            VendorQuotationDetail sod = (VendorQuotationDetail) itrRow.next();
                            //amount+=sod.getQuantity()*sod.getRate();
                            //discountPrice = (sod.getQuantity() * sod.getRate()) - (sod.getQuantity() * sod.getRate() * sod.getDiscount()/100);
                            double vqrate = vendorQuotation.isGstIncluded() ? authHandler.roundUnitPrice(sod.getRateincludegst(), companyid) : authHandler.roundUnitPrice(sod.getRate(), companyid);
                            double quantity = authHandler.roundQuantity(sod.getQuantity(), companyid);
                            double quotationPrice = authHandler.round(quantity * vqrate, companyid);
                            double discountVQD = authHandler.round(sod.getDiscount(), companyid);
                            if (sod.getDiscountispercent() == 1) {
                                discountPrice = (quotationPrice) - authHandler.round((quotationPrice * discountVQD / 100), companyid);
                            } else {
                                discountPrice = quotationPrice - discountVQD;
                            }
                            //amount = amount - (sod.getQuantity() * sod.getRate() * sod.getDiscount()/100);
                            amount += discountPrice + (vendorQuotation.isGstIncluded() ? 0 : authHandler.round(sod.getRowTaxAmount(), companyid));//amount += discountPrice + (discountPrice * rowTaxPercent/100);
                        }
                        double discountVQ = authHandler.round(vendorQuotation.getDiscount(), companyid);
                        if (discountVQ != 0) {
                            if (vendorQuotation.isPerDiscount()) {
                                totalDiscount = authHandler.round(amount * discountVQ / 100, companyid);;
                                amount = amount - totalDiscount;
                            } else {
                                amount = amount - discountVQ;
                            }
                        }
                    } else if (row[0].toString().equals("CQ")) {
                        KwlReturnObject result = accountingHandlerDAOobj.getObject(Quotation.class.getName(), row[1].toString());
                        Quotation quotation = (Quotation) result.getEntityList().get(0);
                        documentId = quotation.getID();
                        documentNo = quotation.getQuotationNumber();
                        documentType = "Customer Quotation";
                        documentDate = quotation.getQuotationDate();
                        documentDescription=quotation.getMemo();
                        currency=quotation.getCurrency().getSymbol();
                        currencycode=quotation.getCurrency().getCurrencyCode();
                        double discountPrice = 0;
                        Iterator itrRow = quotation.getRows().iterator();
                        while (itrRow.hasNext()) {
                            QuotationDetail sod = (QuotationDetail) itrRow.next();
                            double vqrate = quotation.isGstIncluded() ? authHandler.roundUnitPrice(sod.getRateincludegst(), companyid) : authHandler.roundUnitPrice(sod.getRate(), companyid);
                            double quantity = authHandler.roundQuantity(sod.getQuantity(), companyid);
                            double quotationPrice = authHandler.round(quantity * vqrate, companyid);
                            double discountVQD = authHandler.round(sod.getDiscount(), companyid);
                            if (sod.getDiscountispercent() == 1) {
                                discountPrice = (quotationPrice) - authHandler.round((quotationPrice * discountVQD / 100), companyid);
                            } else {
                                discountPrice = quotationPrice - discountVQD;
                            }
                            amount += discountPrice + (authHandler.round(sod.getRowTaxAmount(), companyid));//amount += discountPrice + (discountPrice * rowTaxPercent/100);
                        }
                        double discountVQ = authHandler.round(quotation.getDiscount(), companyid);
                        if (discountVQ != 0) {
                            if (quotation.isPerDiscount()) {
                                totalDiscount = authHandler.round(amount * discountVQ / 100, companyid);;
                                amount = amount - totalDiscount;
                            } else {
                                amount = amount - discountVQ;
                            }
                        }
                    } else if (row[0].toString().equals("PO")) {
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), row[1].toString());
                        PurchaseOrder purchaseOrder = (PurchaseOrder) objItr.getEntityList().get(0);
                        documentId = purchaseOrder.getID();
                        documentNo = purchaseOrder.getPurchaseOrderNumber();
                        documentType = "Purchase Order";
                        documentDate = purchaseOrder.getOrderDate();
                        documentDescription=purchaseOrder.getMemo();
                        currency=purchaseOrder.getCurrency().getSymbol();
                        currencycode=purchaseOrder.getCurrency().getCurrencyCode();
                        Iterator itrRow = purchaseOrder.getRows().iterator();
                        double discountPrice = 0;
                        while (itrRow.hasNext()) {
                            PurchaseOrderDetail pod = (PurchaseOrderDetail) itrRow.next();
                            double quantity = authHandler.roundQuantity(pod.getQuantity(), companyid);
                            double rate = authHandler.roundUnitPrice(pod.getRate(), companyid);
                            double rateIncludedGst = pod.getRateincludegst();
                            double discount = authHandler.round(pod.getDiscount(), companyid);
                            amount += calculateAmount(pod.getRowTaxAmount(), quantity, rate, rateIncludedGst, discount, purchaseOrder.isGstIncluded(), pod.getDiscountispercent(),companyid);
                        }
                        double discountVQ = authHandler.round(purchaseOrder.getDiscount(), companyid);
                        if (discountVQ != 0) {
                            if (purchaseOrder.isPerDiscount()) {
                                totalDiscount = authHandler.round(amount * discountVQ / 100, companyid);;
                                amount = amount - totalDiscount;
                            } else {
                                amount = amount - discountVQ;
                            }
                        }

                    } else if (row[0].toString().equals("SO")) {
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(SalesOrder.class.getName(), row[1].toString());
                        SalesOrder salesOrder = (SalesOrder) objItr.getEntityList().get(0);
                        documentId = salesOrder.getID();
                        documentNo = salesOrder.getSalesOrderNumber();
                        documentType = "Sales Order";
                        documentDate = salesOrder.getOrderDate();
                        documentDescription=salesOrder.getMemo();
                        currency=salesOrder.getCurrency().getSymbol();
                        currencycode=salesOrder.getCurrency().getCurrencyCode();
                        Iterator itrRow = salesOrder.getRows().iterator();
                        double discountPrice = 0;
                        while (itrRow.hasNext()) {
                            SalesOrderDetail sod = (SalesOrderDetail) itrRow.next();
                            double quantity = authHandler.roundQuantity(sod.getQuantity(), companyid);
                            double rate = authHandler.roundUnitPrice(sod.getRate(), companyid);
                            double rateIncludedGst = sod.getRateincludegst();
                            double discount = authHandler.round(sod.getDiscount(), companyid);
                            amount += calculateAmount(sod.getRowTaxAmount(), quantity, rate, rateIncludedGst, discount, salesOrder.isGstIncluded(), sod.getDiscountispercent(), companyid);
                        }
                        double discountVQ = authHandler.round(salesOrder.getDiscount(), companyid);
                        if (discountVQ != 0) {
                            if (salesOrder.isPerDiscount()) {
                                totalDiscount = authHandler.round(amount * discountVQ / 100, companyid);;
                                amount = amount - totalDiscount;
                            } else {
                                amount = amount - discountVQ;
                            }
                        }

                    } else if (row[0].toString().equals("VI")) {
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), row[1].toString());
                        GoodsReceipt goodsReceipt = (GoodsReceipt) objItr.getEntityList().get(0);
                        documentId = goodsReceipt.getID();
                        documentNo = goodsReceipt.getGoodsReceiptNumber();
                        documentType = "Vendor Invoice";
//                        documentDate = goodsReceipt.getJournalEntry().getEntryDate();
                        documentDate = goodsReceipt.getCreationDate();
                        documentDescription=goodsReceipt.getMemo();
                        currency=goodsReceipt.getCurrency().getSymbol();
                        currencycode=goodsReceipt.getCurrency().getCurrencyCode();
                        if (goodsReceipt.isIsOpeningBalenceInvoice() && !goodsReceipt.isNormalInvoice()) {
                            amount = goodsReceipt.getOriginalOpeningBalanceAmount();
                        } else {
                            amount = goodsReceipt.getVendorEntry().getAmount();
                        }
                    } else if (row[0].toString().equals("CI")) {
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), row[1].toString());
                        Invoice invoice = (Invoice) objItr.getEntityList().get(0);
                        documentId = invoice.getID();
                        documentNo = invoice.getInvoiceNumber();
                        documentType = "Customer Invoice";
//                        documentDate = invoice.getJournalEntry().getEntryDate();
                        documentDate = invoice.getCreationDate();
                        documentDescription=invoice.getMemo();
                        currency=invoice.getCurrency().getSymbol();
                        currencycode=invoice.getCurrency().getCurrencyCode();
                        if (invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()) {
                            amount = invoice.getOriginalOpeningBalanceAmount();
                        } else {
                            amount = invoice.getCustomerEntry().getAmount();
                        }
                    } else if (row[0].toString().equals("MP")) {
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), row[1].toString());
                        Payment payment = (Payment) objItr.getEntityList().get(0);
                        documentId = payment.getID();
                        documentNo = payment.getPaymentNumber();
                        documentType = "Make Payment";
//                        documentDate = payment.getJournalEntry().getEntryDate();
                        documentDate = payment.getCreationDate();
                        documentDescription=payment.getMemo();
                        currency=payment.getCurrency().getSymbol();
                        currencycode=payment.getCurrency().getCurrencyCode();
                        rRequestParams.clear();
                        filter_names.clear();
                        filter_params.clear();
                        filter_names.add("payment.ID");
                        filter_params.add(payment.getID());
                        rRequestParams.put("filter_names", filter_names);
                        rRequestParams.put("filter_params", filter_params);
                        KwlReturnObject pdoresult = accVendorPaymentobj.getPaymentDetailOtherwise(rRequestParams);
                        List<PaymentDetailOtherwise> list1 = pdoresult.getEntityList();
                        Iterator pdoRow = list1.iterator();
                        if (!payment.getRows().isEmpty()) { // Payment Details - Against Invoice
                            amount = payment.getDepositAmount();
                        } else if (pdoRow != null && list1.size() > 0) { // Payment Details Otherwise case
                            amount = payment.getDepositAmount();
                        } else {
                            amount = payment.getDepositAmount();
                        }
                    } else if (row[0].toString().equals("RP")) {
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), row[1].toString());
                        Receipt receipt = (Receipt) objItr.getEntityList().get(0);
                        documentId = receipt.getID();
                        documentNo = receipt.getReceiptNumber();
                        documentType = "Receive Payment";
//                        documentDate = receipt.getJournalEntry().getEntryDate();
                        documentDate = receipt.getCreationDate();
                        amount = receipt.getDepositAmount();
                        documentDescription=receipt.getMemo();
                        currency=receipt.getCurrency().getSymbol();
                        currencycode=receipt.getCurrency().getCurrencyCode();
                    }
//                    SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
                    DateFormat sdf= authHandler.getUserDateFormatter(request);
                    obj.put("documentid", documentId);
                    obj.put("documentno", documentNo);
                    obj.put("date",sdf.format(documentDate));
                    obj.put("documenttype", documentType);
                    obj.put("description", documentDescription);
                    obj.put("amount", amount);
                    obj.put("currencysymbol", currency);
                    obj.put("currencycode", currencycode);
                    array.put(obj);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return array;
    }
    
    @Override
     public double getAccountBalanceLedger(HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate) throws ServiceException, SessionExpiredException {


        String selectedCurrencyIds = requestParams.get("currencyIds").toString();
        if(!StringUtil.isNullOrEmpty(selectedCurrencyIds)){
                requestParams.put("currencyFlag", true);
                requestParams.put("selectedCurrencyIds", selectedCurrencyIds);
        }
        return getAccountClosingBalanceLedger(requestParams, accountid, startDate, endDate, 0, false);
    }
    
     @Override
     public double getAccountBalanceWithOutClosingLedger(HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate) throws ServiceException, SessionExpiredException {

        
        return getAccountBalanceLedger(requestParams, accountid, startDate, endDate, 0, false);
    }
     
    
        @Override
    public double getAccountBalanceLedger(HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate,
            double accountOpeningBalance, boolean isValidOpeningBalance) throws ServiceException {
        double amount = 0;
        try {
            String gcurrencyid = (String) requestParams.get(Constants.globalCurrencyKey);

            KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountid);
            Account account = (Account) accresult.getEntityList().get(0);

            int templatecode = (Integer)requestParams.get("templatecode");
            boolean gstForm5Flag= (Boolean)requestParams.get("gstForm5Flag");
            String forexAccID=requestParams.get("forexAccID").toString();

            String costCenterId = (String)requestParams.get("costcenter");
            String selectedCurrencyIds = (String)requestParams.get("selectedCurrencyIds");
            boolean isCurrencyFlag=false;

            String accCurrency=account.getCurrency().getCurrencyID();
            if(!StringUtil.isNullOrEmpty(selectedCurrencyIds)){
                String[] selectedCurrencyIdsArray=selectedCurrencyIds.split(",");
                for (String selectedCurrencyIdsObj : selectedCurrencyIdsArray) {
                    if (selectedCurrencyIdsObj.equals(accCurrency)) {
                        isCurrencyFlag = true;
                    }
                }

            }
            boolean isPeriod= (Boolean)requestParams.get("isPeriod");
            if(!isPeriod){
//            if (request.getAttribute("netProfitClosesFlag") == null) {//Dont Consider Opening Balance while transferring profit on year end Closing
                if ((templatecode == -1) || (account.getTemplatepermcode() != null && account.getTemplatepermcode() != 0 && ((templatecode & account.getTemplatepermcode()) == templatecode))) {
                    if (StringUtil.isNullOrEmpty(costCenterId)) { //Don't consider opening balance for CostCenter
                        if (startDate != null && ((startDate.before(account.getCreationDate()) || startDate.equals(account.getCreationDate())))) {
                            if(isValidOpeningBalance) {
                                amount = accountOpeningBalance;
                            } else {
                                double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccountLedger(requestParams, account, false, null);
    //                            KwlReturnObject result = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams,accountOpeningBalanceInBase,account.getCurrency().getCurrencyID(),account.getCreationDate(),0);
                                amount = accountOpeningBalanceInBase;//(Double) result.getEntityList().get(0);
                            }
                        }

                    }
                }
            }
            if (gstForm5Flag && amount !=0 && accountid.equalsIgnoreCase(forexAccID) && !gcurrencyid.equalsIgnoreCase(Constants.SGDID)) { //GSTForm5 case: forex account amount calculation in SGD
                KwlReturnObject bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amount, gcurrencyid, Constants.SGDID, account.getCreationDate(), 1);
                amount = (Double) bAmt.getEntityList().get(0);
            }
            if(!isCurrencyFlag && !StringUtil.isNullOrEmpty(selectedCurrencyIds)){
                amount=0.0;
            }
            String Searchjson = "";

            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                if (requestParams.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = requestParams.get("searchJson").toString();
            }

             //   System.out.println("All Jes in General Ledger:"); //ERP-8660 - to find out difference in GL and T Ledger report
                KwlReturnObject abresult = accJournalEntryobj.getAccountBalance(requestParams, accountid, startDate, endDate, costCenterId, filterConjuctionCriteria, Searchjson);
                List<Object[]> list = abresult.getEntityList();
                for (Object[] row : list) {
                    JournalEntryDetail jed = (JournalEntryDetail) row[1];

                    if ((templatecode == -1) || (jed.getJournalEntry().getTemplatepermcode() != null && jed.getJournalEntry().getTemplatepermcode() != 0 && ((templatecode & jed.getJournalEntry().getTemplatepermcode()) == templatecode))) {

                        String fromcurrencyid = (row[2] == null)? gcurrencyid : row[2].toString();

                        /*Code to fetch JE*/
                        HashMap<String, Object> reqParams = new HashMap();
                        reqParams.put(Constants.companyKey, requestParams.get(Constants.companyKey).toString());
                        reqParams.put(Constants.billid, jed.getJournalEntry().getID());

                        KwlReturnObject abresultJE = accJournalEntryobj.getJournalEntry(reqParams);
                        JournalEntry je  = (JournalEntry)abresultJE.getEntityList().get(0);

                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ((Double) row[0]).doubleValue(), fromcurrencyid, je.getEntryDate(), je.getExternalCurrencyRate());
                        double tempamt = (Double) crresult.getEntityList().get(0);

                //         System.out.println(""+jed.getJournalEntry().getEntryNumber()+"  "+tempamt); //ERP-8660- to find out difference in GL and T Ledger report

                        if (gstForm5Flag && tempamt != 0 && accountid.equalsIgnoreCase(forexAccID) && !gcurrencyid.equalsIgnoreCase(Constants.SGDID)) { //gst form5 case when forex account amount is calculated
                            KwlReturnObject bAmt=null;
                           if (jed.getJournalEntry().getGstCurrencyRate() != 0&&jed.getForexGainLoss()!=0.0&&jed.getPaymentType()!=0) { //to check if the Payment has forex gain loss and external GST rate when country is Singapore
                                        KwlReturnObject bAmtForex=accJournalEntryobj.getJournalEntryDetail(jed.getJournalEntry().getID(),jed.getJournalEntry().getCompany().getCompanyID());
                                        double forexAmt = 0.0;
                                        boolean forexFlag = false;
                                        List<JournalEntryDetail> bAmtForexList=bAmtForex.getEntityList();
                                        for(JournalEntryDetail detail:bAmtForexList){
                                            double baseforexAmt = 0.0;
                                             KwlReturnObject forexObj=null;
                                            if(detail.getForexGainLoss()!=0.0&&!jed.getID().equals(detail.getID())&&jed.getPaymentType()==detail.getPaymentType()){
                                                forexFlag=true;
                                                if(detail.getGstCurrencyRate()!=0.0){
                                                    forexObj = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, detail.getForexGainLoss(), jed.getJournalEntry().getCurrency().getCurrencyID(), jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate(),detail.getGstCurrencyRate());
                                                    forexAmt += (Double) forexObj.getEntityList().get(0);
                                                    tempamt=forexAmt;
                                                }else{
                                                    forexObj = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, detail.getForexGainLoss(), fromcurrencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                                                    baseforexAmt = (Double) forexObj.getEntityList().get(0);
                                                    forexObj = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, baseforexAmt, gcurrencyid, Constants.SGDID, jed.getJournalEntry().getEntryDate(), 1);
                                                    forexAmt += (Double) forexObj.getEntityList().get(0);
                                                    tempamt=forexAmt;
                                                }
                                            }
                                        }
                                        if(!forexFlag)
                                            bAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, tempamt, jed.getJournalEntry().getCurrency().getCurrencyID(), jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate(),jed.getGstCurrencyRate());
                                    } else {
                                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, tempamt, gcurrencyid, Constants.SGDID, jed.getJournalEntry().getEntryDate(), 1);
                                    }
                            if(bAmt!=null)
                                tempamt = (Double) bAmt.getEntityList().get(0);
                            amount += tempamt;
                        } else {
                            amount += tempamt;
                        }
                    }
                }
//                if (itr.hasNext()) {
//                    amount += ((Double) itr.next()).doubleValue();
//                }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalance : "+ex.getMessage(), ex);
        }
        return amount;
    }
    
    public double getAccountClosingBalanceLedger(HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate, double accountopenbalance, boolean isValidOpeningBalance) throws ServiceException {
        double amount = 0;
        try {

            CompanyAccountPreferences pref = null;
            KwlReturnObject prefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), requestParams.get(Constants.companyid).toString());
            pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);

            KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountid);
            Account account = (Account) accresult.getEntityList().get(0);
            amount=getAccountBalanceLedger(requestParams, accountid, startDate, endDate, accountopenbalance, isValidOpeningBalance);
            Calendar calendar= Calendar.getInstance();
            if(startDate!=null){
                calendar.setTime(startDate);
            }else{
                calendar.setTime(endDate);
            }
            HashMap<String,Date> startEndDateHashMap=getStartAndEndFinancialDate(pref, calendar.get(Calendar.YEAR)-1);

            boolean periodView = requestParams.get("periodView") != null ? ((Boolean) requestParams.get("periodView")) : false;
            if (!periodView) { 
                if (requestParams.get("netProfitClosesFlag") == null) {
                    KwlReturnObject closingAccountBalanceResultList = accCompanyPreferencesObj.getClosingBalanceList(null, (calendar.get(Calendar.YEAR) - 1), account.getCompany().getCompanyID());
                    List<ClosingAccountBalance> closingAccountBalancesList = closingAccountBalanceResultList.getEntityList();
                    Date closingStartDate = startEndDateHashMap.get("startDate");
                    Date closingEndDate = startEndDateHashMap.get("endDate");
                    if (closingAccountBalancesList.size() > 0 && startDate.after(closingEndDate)) {
                        amount += getAccountBalanceLedger(requestParams, accountid, closingEndDate, startDate, accountopenbalance, isValidOpeningBalance);
                    }
//                if (account.getName().equals(Constants.NetProfitLossAccountName)) {
//                    amount +=getAccountBalance(request,requestParams, accountid, closingStartDate, closingEndDate);
//                }else{
                    amount += getAccountsAmountFromSavedData(accountid, account, (calendar.get(Calendar.YEAR) - 1),false);
//                }
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalance : "+ex.getMessage(), ex);
        }
        return amount;
    }
    
    @Override
    public double getAccountBalanceMergedLedger(HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate, boolean eliminateflag) throws ServiceException, SessionExpiredException {


        return getAccountClosingBalanceMergedLedger(requestParams, accountid, startDate, endDate, eliminateflag);
    }
    
    @Override
    public double getAccountBalanceMergedLedgerForExport(HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate, boolean eliminateflag) throws ServiceException {
        double amount = 0;
        try {
            String currencyid = (String) requestParams.get(Constants.globalCurrencyKey);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountid);
            Account account = (Account) accresult.getEntityList().get(0);
            String companyid = (String) requestParams.get("companyid");
            JSONObject paramJObj = new JSONObject();
            for (Map.Entry e : requestParams.entrySet()) {
                paramJObj.put(e.getKey().toString(), e.getValue());
            }
            String costCenterId = (String)requestParams.get("costcenter");
            if(StringUtil.isNullOrEmpty(costCenterId)){ //Don't consider opening balance for CostCenter
                if(startDate!=null && ((startDate.before(account.getCreationDate()) || startDate.equals(account.getCreationDate())) && endDate.after(account.getCreationDate()) || endDate.equals(account.getCreationDate()))  ){
                    double accountOpeningBalance = accInvoiceCommon.getOpeningBalanceOfAccountJson(paramJObj, account,false,null);
//                    KwlReturnObject result = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams,accountOpeningBalance,account.getCurrency().getCurrencyID(),account.getCreationDate(),0);
                    amount = authHandler.round(accountOpeningBalance, companyid);//(Double) result.getEntityList().get(0);
                }

            }
            String Searchjson = "";

            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                if (requestParams.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = requestParams.get("searchJson").toString();
            }
            if (StringUtil.isNullOrEmpty(Searchjson) && account.getCompany().isOptimizedflag() && !eliminateflag) {
                KwlReturnObject abresult = accJournalEntryobj.getAccountBalance_optimized(accountid, startDate, endDate, costCenterId);
                List list = abresult.getEntityList();
                if (list.size() > 0 && list.get(0) != null) {
                    amount += authHandler.round((Double) list.get(0), companyid);
                }
            } else {
                KwlReturnObject abresult = accJournalEntryobj.getAccountBalanceMerged(accountid, startDate, endDate, costCenterId, eliminateflag, filterConjuctionCriteria, Searchjson);
                List list = abresult.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    Object[] row = (Object[]) itr.next();
                    JournalEntryDetail jed = (JournalEntryDetail) row[1];
                    String fromcurrencyid = (jed.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : jed.getJournalEntry().getCurrency().getCurrencyID());
    //            amount += CompanyHandler.getCurrencyToBaseAmount(session, request, ((Double) row[0]).doubleValue(), fromcurrencyid, jed.getJournalEntry().getEntryDate());
                    KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ((Double) row[0]).doubleValue(), fromcurrencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                    amount += authHandler.round((Double) crresult.getEntityList().get(0), companyid);
                }
                if (itr.hasNext()) {
                    amount += authHandler.round(((Double) itr.next()).doubleValue(), companyid);
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalance : "+ex.getMessage(), ex);
        }
        return amount;
    }
    
    @Override
     public double getAccountClosingBalanceMergedLedger(HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate, boolean eliminateflag) throws ServiceException {
         double amount = 0;
        try {
            amount=getAccountBalanceMergedLedgerForExport(requestParams, accountid, startDate, endDate, eliminateflag);

            } catch (Exception ex) {
                throw ServiceException.FAILURE("getAccountBalance : "+ex.getMessage(), ex);
            }
        return amount;
     }
     
         public double getTotalAccountBalanceLedger(Account account, double totalAccountBalance, HashMap<String, Object> requestParams) throws ServiceException, ParseException {
        try {
            KwlReturnObject resultChild = accAccountDAOobj.getAccountChilds(account);

            List list = resultChild.getEntityList();

            Iterator itr = null;

            if(list != null && !list.isEmpty()) {
                itr = list.iterator();
            }
            
            DateFormat df = (DateFormat) requestParams.get("dateformat");
            
            Date stDate = null;
            Date endDate = null;
            if (requestParams.get("stdate") != null && requestParams.get("enddate") != null) {
                stDate = df.parse(requestParams.get("stdate").toString());
                endDate = df.parse(requestParams.get("enddate").toString());
            } else {
                stDate = new Date(0);
                endDate = new Date();
            }
            while ( itr!= null && itr.hasNext()) {
                Account subAccount = (Account) itr.next();
                double balance = 0;
                if (!subAccount.isDeleted()) {
                    balance = getAccountBalanceLedger(requestParams, subAccount.getID(), stDate, endDate);
                }
                totalAccountBalance = totalAccountBalance + balance;
                
                KwlReturnObject result_Child = accAccountDAOobj.getAccountChilds(subAccount);

                List list_child = result_Child.getEntityList();
                
                if (list_child == null || list_child.isEmpty()) {
                    continue;
                }
                //Recursive function to get child accounts
                totalAccountBalance = getTotalAccountBalanceLedger(subAccount, totalAccountBalance, requestParams);
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return totalAccountBalance;
    }
     
     public double getAccountBalanceInOriginalCurrencyLedger(HashMap<String, Object> requestParams,String accountid, Date startDate, Date endDate) throws ServiceException, SessionExpiredException {

        String selectedCurrencyIds = requestParams.get("currencyIds").toString();
        if (!StringUtil.isNullOrEmpty(selectedCurrencyIds)) {
            requestParams.put("currencyFlag", true);
            requestParams.put("selectedCurrencyIds", selectedCurrencyIds);
        }
        return getAccountBalanceInOriginalCurrencyLedgerExport(requestParams, accountid, startDate, endDate);
    }
     
     public double getAccountBalanceInOriginalCurrencyLedgerExport(HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate) throws ServiceException {
        double amount = 0;
        try {
            String gcurrencyid = (String) requestParams.get(Constants.globalCurrencyKey);
            String companyid = (String) requestParams.get("companyid");
            KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountid);
            Account account = (Account) accresult.getEntityList().get(0);

            int templatecode = (Integer) requestParams.get("templatecode");
            String tocurrencyid = requestParams.containsKey("tocurrencyid") && requestParams.get("tocurrencyid") != null ? (String) requestParams.get("tocurrencyid") : account.getCurrency().getCurrencyID();
            boolean convertOBFlag = requestParams.containsKey("tocurrencyid") && requestParams.get("tocurrencyid") != null ? true : false;//No need to convert opening balance in case of tocurrencyid = acc currency as opening balance value enetered is in account currnecy only
            JSONObject paramJObj = new JSONObject();
            for (Map.Entry e : requestParams.entrySet()) {
                paramJObj.put(e.getKey().toString(), e.getValue());
            }
            String costCenterId = requestParams.containsKey("costcenter") && requestParams.get("costcenter") != null ? (String) requestParams.get("costcenter") : "";
            if ((templatecode == -1) || (account.getTemplatepermcode() != null && account.getTemplatepermcode() != 0 && ((templatecode & account.getTemplatepermcode()) == templatecode))) {
                if (StringUtil.isNullOrEmpty(costCenterId)) { //Don't consider opening balance for CostCenter
                    if (startDate != null && ((startDate.before(account.getCreationDate()) || startDate.equals(account.getCreationDate())) && endDate.after(account.getCreationDate()) || endDate.equals(account.getCreationDate()))) {
//                        KwlReturnObject result = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams,account.getOpeningBalance(),account.getCurrency().getCurrencyID(),account.getCreationDate(),0);
                        double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccountJson(paramJObj, account, false, null);
                        amount = accountOpeningBalanceInBase;//account.getOpeningBalance();
                        KwlReturnObject cresult = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, amount, account.getCurrency().getCurrencyID(), account.getCreationDate(), 0);
                        amount = authHandler.round((Double) cresult.getEntityList().get(0), companyid);
                        if (convertOBFlag) {
                            String fromcurrencyid = account.getCurrency().getCurrencyID();
                            KwlReturnObject crresult = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, amount, fromcurrencyid, tocurrencyid, account.getCreationDate(), 0);
                            amount = authHandler.round((Double) crresult.getEntityList().get(0), companyid);
                        }
                    }

                }
            }
            String Searchjson = "";

            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey(InvoiceConstants.Filter_Criteria) && requestParams.get(InvoiceConstants.Filter_Criteria) != null) {
                if (requestParams.get(InvoiceConstants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                Searchjson = requestParams.get(Constants.Acc_Search_Json).toString();
            }
//            if(StringUtil.isNullOrEmpty(Searchjson) && account.getCompany().isOptimizedflag() && (templatecode == -1)) {
//                KwlReturnObject abresult = accJournalEntryobj.getAccountBalance_optimized(accountid, startDate, endDate, costCenterId);
//                List list = abresult.getEntityList();
//                if(list.size() > 0 && list.get(0) != null) {
//                    amount += (Double) list.get(0);
//                }
//            } else {
            KwlReturnObject abresult = accJournalEntryobj.getAccountBalance(requestParams, accountid, startDate, endDate, costCenterId, filterConjuctionCriteria, Searchjson);
            List list = abresult.getEntityList();
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                Object[] row = (Object[]) itr.next();
                JournalEntryDetail jed = (JournalEntryDetail) row[1];
                if ((templatecode == -1) || (jed.getJournalEntry().getTemplatepermcode() != null && jed.getJournalEntry().getTemplatepermcode() != 0 && ((templatecode & jed.getJournalEntry().getTemplatepermcode()) == templatecode))) {
                    if (jed.getJournalEntry().getIsReval() <= 0) {
                        String fromcurrencyid = (jed.getJournalEntry().getCurrency() == null ? gcurrencyid : jed.getJournalEntry().getCurrency().getCurrencyID());
                        //            amount += CompanyHandler.getCurrencyToBaseAmount(session, request, ((Double) row[0]).doubleValue(), fromcurrencyid, jed.getJournalEntry().getEntryDate());
                        KwlReturnObject crresult = null;//if Same currency then use - getOneCurrencyToOther()
                        if (fromcurrencyid.equalsIgnoreCase(tocurrencyid)) {
                            crresult = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, ((Double) row[0]).doubleValue(), fromcurrencyid, tocurrencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                        } else {
                            crresult = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, ((Double) row[0]).doubleValue(), fromcurrencyid, tocurrencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                        }

                        if (!StringUtil.isNullOrEmpty(fromcurrencyid) && jed != null && jed.getAccount() != null && jed.getAccount().getCurrency() != null && fromcurrencyid.equals(jed.getAccount().getCurrency().getCurrencyID())) {
                            amount += ((Double) row[0]).doubleValue(); // if transactionCurrencyID=accountCurrencyID, then don't convert the amount
                        } else if (jed.getJournalEntry().getTypeValue() == Constants.FundTransfer_Journal_Entry && jed.getExchangeRateForTransaction() != 0 && jed.getExchangeRateForTransaction() != -1) {
                            amount += authHandler.round(jed.getAmount() / jed.getExchangeRateForTransaction(), companyid);
                        } else if ((jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate() != 1) || ((jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate() == 1) && jed.getJournalEntry().isIsmulticurrencypaymentje())) {    // If this JE is for that payment, which is having payment currency and payment method currency different.                         
                            double baseCurrencyToPaymentMethodCurrencyConvertedAmount = ((Double) row[0]).doubleValue() * jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate();
                            amount += authHandler.round(baseCurrencyToPaymentMethodCurrencyConvertedAmount, companyid);
                        } else {
                            amount += authHandler.round((Double) crresult.getEntityList().get(0), companyid);
                        }
                    }
                }
            }
            if (itr.hasNext()) {
                amount += authHandler.round(((Double) itr.next()).doubleValue(), companyid);
            }
//            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalance : " + ex.getMessage(), ex);
        }
        return amount;
    }

     public JSONObject getLedgerForExport(HashMap<String, Object> requestParams, String accountid, Map<String, BillingInvoice> billingInvoiceMapGL, Map<String, BillingGoodsReceipt> billingGrMapGL, Map<String, Object[]> billingCreditNoteMapGL, Map<String, Object[]> billingDebitNoteMapGL, Map<String, Object[]> billingPaymentReceivedMapGL, Map<String, Object[]> billingPaymentMadeMapGL, Map<String, Invoice> invoiceMapGL, Map<String, GoodsReceipt> grMapGL, Map<String, Object[]> creditNoteMapGL, Map<String, Object[]> creditNoteMapVendorGL, Map<String, Object[]> debitNoteMapGL, Map<String, Object[]> debitNoteMapCustomerGL, Map<String, Object[]> paymentReceivedMapGL, Map<String, Object[]> paymentMadeMapGL, Map<String, GoodsReceipt> fixedAssetgrMapGL, Map<String, Invoice> fixedAssetInvoiceMapGL, Map<String, Integer> jeDetailPaymentTypeMapGL, Map<String, Integer> jeDetailReceiptTypeMapGL) throws ServiceException, SessionExpiredException { 
        JSONObject jobj = new JSONObject();
        List accountlist = new ArrayList();
        try {
            double total = 0;

            String selectedCurrencyIds = "";
            double balanceAmount = 0;
            double OpeningBalanceInAccountCurrency = 0;
            double balanceAmountAccountCurrency = 0;
            double totalAccountCurrency = 0;
            int accountTransactionType = requestParams.containsKey("accountTransactionType") && requestParams.get("accountTransactionType")!=null?Integer.parseInt(requestParams.get("accountTransactionType").toString()):Constants.All_Transaction_TypeID;//It will be zero for all otherwise it value will be transaction type value given in constant
            boolean ledgerReportFlag = (Boolean) requestParams.get("ledgerReport");
            int accountidCount = 0;
            if (!StringUtil.isNullOrEmpty(accountid)) {
                accountidCount = accountid.split(",").length;
            }

            DateFormat dateFormat = (DateFormat)requestParams.get("dateformat");
            Date endDate = dateFormat.parse(requestParams.get("enddate").toString());
            Date startDate = dateFormat.parse(requestParams.get("stdate").toString());
            if (accountid.equalsIgnoreCase("All")) {

                requestParams.put("nondeleted", "true");
                KwlReturnObject result = accAccountDAOobj.getAccountsForCombo(requestParams);
                accountlist = result.getEntityList();
            } else {  //addd for miltiple bank accounts selection
                String AccountidGroup[] = accountid.split(",");
                for (int i = 0; i < accountidCount; i++) {
                    KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), AccountidGroup[i]);
                    Account account = (Account) accresult.getEntityList().get(0);
                    accountlist.add(account);
                    KwlReturnObject resultChild = accAccountDAOobj.getAccountChilds(account);
                    List childlist = resultChild.getEntityList();
                    accountlist.addAll(childlist);
                }
            }

            boolean consolidateFlag = (Boolean) requestParams.get("consolidateFlag");

            String gcurrencyid = requestParams.get(Constants.currencyKey).toString() ;
            Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();  //end date used to calculate Opening Balance
            boolean eliminateflag = consolidateFlag;
            boolean generalLedgerFlag = false;
            boolean excludePreviousYear = (requestParams.containsKey("excludePreviousYear") && requestParams.get("excludePreviousYear") != null) ? Boolean.parseBoolean(requestParams.get("excludePreviousYear").toString()) : false;
            Date start = new Date(1970);
//        if(!StringUtil.isNullOrEmpty(request.getParameter("currencytype"))) {
//            currencyType  = Integer.parseInt((String)request.getParameter("currencytype"));
//        }
//        if(!StringUtil.isNullOrEmpty(request.getParameter("currencytype"))) {
//            currencyType  = Integer.parseInt((String)request.getParameter("currencytype"));
//        }
            generalLedgerFlag = true;

            Boolean bankBook = (Boolean)requestParams.get("bankBook");
            Boolean ledgerReport = (Boolean)requestParams.get("ledgerReport");
            String companyid = requestParams.get(Constants.companyKey).toString();
            KwlReturnObject prefresult = null;
            CompanyAccountPreferences pref = null;
            String cashAccount = "";
            if (!consolidateFlag) {
                prefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
                cashAccount = pref.getCashAccount().getID();
            }


            HashMap<String, Object> reqParams = requestParams;
            reqParams.put(Constants.REQ_startdate, requestParams.get("stdate").toString());
            reqParams.put(Constants.REQ_enddate, requestParams.get("enddate").toString());
            reqParams.put("dateformat", dateFormat);
//
//            String Searchjson =  requestParams.get(Constants.Acc_Search_Json).toString();
//            String filterCriteria = requestParams.get(Constants.Filter_Criteria).toString();
//            String invoiceSearchJson = "";
//            String grSearchJson = "";
//            String cnSearchJson = "";
//            String dnSearchJson = "";
//            String paymentSearchJson = "";
//            String receiptSearchJson = "";
//            if (!StringUtil.isNullOrEmpty(Searchjson) && !StringUtil.isNullOrEmpty(filterCriteria)) {
//                reqParams.put("isIAF", true);
//                HashMap<String, Object> reqPar1 = new HashMap<String, Object>();
//                reqPar1.put(Constants.companyKey, companyid);
//                reqPar1.put(Constants.Acc_Search_Json, Searchjson);
//                reqPar1.put(Constants.Filter_Criteria, filterCriteria);
//
//                reqPar1.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
//                invoiceSearchJson = getSearchJsonByModule(reqPar1);
//
//                reqPar1.remove(Constants.moduleid);
//                reqPar1.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
//                grSearchJson = getSearchJsonByModule(reqPar1);
//
//                reqPar1.remove(Constants.moduleid);
//                reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
//                cnSearchJson = getSearchJsonByModule(reqPar1);
//
//                reqPar1.remove(Constants.moduleid);
//                reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
//                dnSearchJson = getSearchJsonByModule(reqPar1);
//
//                reqPar1.remove(Constants.moduleid);
//                reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
//                paymentSearchJson = getSearchJsonByModule(reqPar1);
//
//                reqPar1.remove(Constants.moduleid);
//                reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
//                receiptSearchJson = getSearchJsonByModule(reqPar1);
//            }

            Map<String, BillingInvoice> billingInvoiceMap = new HashMap<String, BillingInvoice>();
            Map<String, BillingGoodsReceipt> billingGrMap = new HashMap<String, BillingGoodsReceipt>();
            Map<String, Object[]> billingCreditNoteMap = new HashMap<String, Object[]>();
            Map<String, Object[]> billingDebitNoteMap = new HashMap<String, Object[]>();
            Map<String, Object[]> billingPaymentReceivedMap = new HashMap<String, Object[]>();
            Map<String, Object[]> billingPaymentMadeMap = new HashMap<String, Object[]>();
            Map<String, Invoice> invoiceMap = new HashMap<String, Invoice>();
            Map<String, GoodsReceipt> grMap = new HashMap<String, GoodsReceipt>();
            Map<String, Object[]> creditNoteMap = new HashMap<String, Object[]>();
            Map<String, Object[]> creditNoteMapVendor = new HashMap<String, Object[]>();
            Map<String, Object[]> debitNoteMap = new HashMap<String, Object[]>();
            Map<String, Object[]> debitNoteMapCustomer = new HashMap<String, Object[]>();
            Map<String, Object[]> paymentReceivedMap = new HashMap<String, Object[]>();
            Map<String, Object[]> paymentMadeMap = new HashMap<String, Object[]>();
            Map<String, GoodsReceipt> fixedAssetgrMap = new HashMap<String, GoodsReceipt>();
            Map<String, Invoice> fixedAssetInvoiceMap = new HashMap<String, Invoice>();
//            Map<String, Invoice> cashSales = new HashMap<String, Invoice>();
//            Map<String, GoodsReceipt> cashPurchase = new HashMap<String, GoodsReceipt>();
            Map<String, Integer> jeDetailPaymentTypeMap = new HashMap<String, Integer>();
            Map<String, Integer> jeDetailReceiptTypeMap = new HashMap<String, Integer>();
            if (!consolidateFlag) {
                billingInvoiceMap = billingInvoiceMapGL;
                billingGrMap = billingGrMapGL;
                billingCreditNoteMap = billingCreditNoteMapGL;
                billingDebitNoteMap = billingDebitNoteMapGL;
                billingPaymentReceivedMap = billingPaymentReceivedMapGL;
                billingPaymentMadeMap = billingPaymentMadeMapGL;
                invoiceMap = invoiceMapGL;
                grMap = grMapGL;
                creditNoteMap = creditNoteMapGL;
                creditNoteMapVendor = creditNoteMapVendorGL;
                debitNoteMap = debitNoteMapGL;
                debitNoteMapCustomer = debitNoteMapCustomerGL;
                paymentReceivedMap = paymentReceivedMapGL;
                paymentMadeMap = paymentMadeMapGL;
                fixedAssetgrMap = fixedAssetgrMapGL;
                fixedAssetInvoiceMap = fixedAssetInvoiceMapGL;
//                cashSales = cashSalesGL;
//                cashPurchase = cashPurchaseGL;
                jeDetailPaymentTypeMap = jeDetailPaymentTypeMapGL;
                jeDetailReceiptTypeMap = jeDetailReceiptTypeMapGL;
            }
//            if (!consolidateFlag) {
//                HashMap<String, Object> reqParams1 = new HashMap<String, Object>();
//                HashMap<String, Object> reqParams2 = new HashMap<String, Object>();
//
//                reqParams.put(Constants.companyKey, companyid);
//                reqParams.put(Constants.globalCurrencyKey, gcurrencyid);
//                reqParams.put(Constants.Filter_Criteria, requestParams.get(Constants.Filter_Criteria).toString());
//
//                billingInvoiceMap = getBillingInvoiceMap(reqParams);
//                billingGrMap = getBillingGoodsReceiptMap(reqParams);
//                billingCreditNoteMap = getBillingCreditNoteMap(reqParams);
//                billingDebitNoteMap = getBillingDebitNoteMap(reqParams);
//                billingPaymentReceivedMap = getBillingPaymentReceivedMap(reqParams);
//                billingPaymentMadeMap = getBillingPaymentMadeMap(reqParams);
//                // reqParams.put("")
//                // reqParams.put("isFixedAsset", true);
//                if(!StringUtil.isNullOrEmpty(Searchjson))
//                    reqParams.put(Constants.Acc_Search_Json, invoiceSearchJson);
//                invoiceMap = getInvoiceMap(reqParams);
//                reqParams1.putAll(reqParams);
//                reqParams1.put("isFixedAsset", true);
//                reqParams2.putAll(reqParams);
//                reqParams2.put("cashonly", "true");
//                fixedAssetInvoiceMap = getInvoiceMap(reqParams1);
//                cashSales = getInvoiceMap(reqParams2);
//
//                if(!StringUtil.isNullOrEmpty(Searchjson)){
//                    reqParams.remove(Constants.Acc_Search_Json);
//                    reqParams.put(Constants.Acc_Search_Json, grSearchJson);
//                }
//                grMap = getGoodsReceiptMap(reqParams);
//                reqParams1.clear();
//                reqParams2.clear();
//                reqParams1.putAll(reqParams);
//                reqParams1.put("isFixedAsset", true);
//                reqParams2.putAll(reqParams);
//                reqParams2.put("cashonly", "true");
//                fixedAssetgrMap = getGoodsReceiptMap(reqParams1);
//                cashPurchase = getGoodsReceiptMap(reqParams2);
//
//                if(!StringUtil.isNullOrEmpty(Searchjson)){
//                    reqParams.remove(Constants.Acc_Search_Json);
//                    reqParams.put(Constants.Acc_Search_Json, cnSearchJson);
//                }
//                creditNoteMap = getCreditNoteMap(reqParams);
//                creditNoteMapVendor = creditNoteMapVendor(reqParams);
//
//                if(!StringUtil.isNullOrEmpty(Searchjson)){
//                    reqParams.remove(Constants.Acc_Search_Json);
//                    reqParams.put(Constants.Acc_Search_Json, dnSearchJson);
//                }
//                debitNoteMap = getDebitNoteMap(reqParams);
//                debitNoteMapCustomer = debitNoteMapCustomer(reqParams);
//
//                if(!StringUtil.isNullOrEmpty(Searchjson)){
//                    reqParams.remove(Constants.Acc_Search_Json);
//                    reqParams.put(Constants.Acc_Search_Json, receiptSearchJson);
//                }
//                paymentReceivedMap = getPaymentReceivedMap(reqParams);
//
//                if(!StringUtil.isNullOrEmpty(Searchjson)){
//                    reqParams.remove(Constants.Acc_Search_Json);
//                    reqParams.put(Constants.Acc_Search_Json, paymentSearchJson);
//                }
//                paymentMadeMap = getPaymentMadeMap(reqParams);
//
//                invoiceMap.putAll(cashSales);
//                grMap.putAll(cashPurchase);
//                for(String jeid : paymentMadeMap.keySet()){
//                    if(!StringUtil.isNullOrEmpty(jeid)){
//                        Payment tempp = (Payment) paymentMadeMap.get(jeid)[0];
//                        if(tempp!=null)
//                            createJEDetailPaymentTypeMap(tempp, jeDetailPaymentTypeMap);
//                    }
//                }
//                for(String jeid : paymentReceivedMap.keySet()){
//                    if(!StringUtil.isNullOrEmpty(jeid)){
//                        Receipt tempr = (Receipt) paymentReceivedMap.get(jeid)[0];
//                        if(tempr!=null)
//                            createJEDetailReceiptTypeMap(tempr, jeDetailReceiptTypeMap);
//                    }
//                }
//            }

            Iterator iterator = accountlist.iterator();
            JSONArray jArr = new JSONArray();
            JSONObject paramJObj = new JSONObject();
            for (Map.Entry e : requestParams.entrySet()) {
                paramJObj.put(e.getKey().toString(), e.getValue());
            }
            String currencyid = gcurrencyid;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            while (iterator.hasNext()) {
                balanceAmount = 0;
                total = 0;
                OpeningBalanceInAccountCurrency = 0;
                Object listObj = iterator.next();
                Account account = (Account) listObj;
                accountid = account.getID();
                boolean showOpeningBalanceSeprately = true;
                if (excludePreviousYear && account.getAccounttype() == 0) {
                    start = getDateForExcludePreviousYearBalanceFilter(companyid, startDate);
                } else {
                    start = null;
                }
                // calculate opening balance of account
//                acco unt;
                double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccountJson(paramJObj, account, false, null);
//                OpeningBalanceInAccountCurrency=accountOpeningBalanceInBase;//account.getOpeningBalance();

                boolean shouldAccountOpeningBalanceInclude = !accInvoiceCommon.accountHasOpeningTransactionsJson(paramJObj, account, false, null);

                if (shouldAccountOpeningBalanceInclude) {
                    OpeningBalanceInAccountCurrency= account.getOpeningBalance();
                } else {
                    String accountcurrencyid = account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID();
                    KwlReturnObject crresult11 = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, accountOpeningBalanceInBase, accountcurrencyid, account.getCreationDate(), 0);
                    OpeningBalanceInAccountCurrency = (Double) crresult11.getEntityList().get(0);
                }

                if (bankBook) {
                    balanceAmountAccountCurrency = 0;
                }
                double OpeningBalanceInBaseCurrency = accountOpeningBalanceInBase;
                //BUG Fixed #16739 : Creation date check
                Date createdOn = AccountingManager.resetTimeField(account.getCreationDate());
                Date toDate = AccountingManager.resetTimeField(endDate);
                if (toDate.compareTo(createdOn) < 0) {
                    jobj.put(Constants.RES_data, new JSONArray()); //Return Empty Data
                    return jobj;
                }

                if (!StringUtil.isNullOrEmpty((String) requestParams.get(Constants.Acc_Search_Json))) { // ERP-11394 reset opening balance in case of advance serach
                    accountOpeningBalanceInBase = 0;
                    OpeningBalanceInBaseCurrency = 0;
                    OpeningBalanceInAccountCurrency = 0;
                }

                String entryChar = "c", emptyChar = "d";
                double balance = 0;
                double balanceAccountCurrency = 0;
                double openingBalance=0.00;
                double openingBalanceAccountCurrency=0.00;
                balance = getAccountBalanceMergedLedger(requestParams, accountid, excludePreviousYear ? start : null, openBalEndDate, eliminateflag);
                String mappedAccIDs = accountid + ",";
                if (consolidateFlag) {//Fetch mapped account's balances.
                    List mapaccresult = accAccountDAOobj.getMappedAccountsForReports(accountid);
                    Iterator<Object[]> itr1 = mapaccresult.iterator();
                    String mappedaccountid = "";
                    while (itr1.hasNext()) {
                        Object[] row = (Object[]) itr1.next();
                        mappedaccountid = row[0].toString();
                        mappedAccIDs += mappedaccountid + ",";
//                        KwlReturnObject childObj = accountingHandlerDAOobj.getObject(Account.class.getName(), mappedaccountid);
//                        Account child = (Account) childObj.getEntityList().get(0);

                        balance += getAccountBalanceMergedLedger(requestParams, mappedaccountid, excludePreviousYear ? start : null, openBalEndDate, eliminateflag);
                    }
                }
                if (balance != 0) {
//                    request.setAttribute("tocurrencyid", currencyid1);
                    balanceAccountCurrency = getAccountBalanceInOriginalCurrencyLedger(requestParams, accountid, excludePreviousYear ? start : null, openBalEndDate);
                    mappedAccIDs = accountid + ",";
                    if (consolidateFlag) {//Fetch mapped account's balances.
                        List mapaccresult = accAccountDAOobj.getMappedAccountsForReports(accountid);
                        Iterator<Object[]> itr1 = mapaccresult.iterator();
                        String mappedaccountid = "";
                        while (itr1.hasNext()) {
                            Object[] row = (Object[]) itr1.next();
                            mappedaccountid = row[0].toString();
                            mappedAccIDs += mappedaccountid + ",";
//                            KwlReturnObject childObj = accountingHandlerDAOobj.getObject(Account.class.getName(), mappedaccountid);
//                            Account child = (Account) childObj.getEntityList().get(0);
                            balanceAccountCurrency += getAccountBalanceInOriginalCurrencyLedger(requestParams ,mappedaccountid, excludePreviousYear ? start : null, openBalEndDate);
                        }
                    }
                }
                Date sDate = AccountingManager.resetTimeField(startDate);
                if (sDate.after(createdOn)) {
                    balance += accountOpeningBalanceInBase;
                    balanceAccountCurrency += OpeningBalanceInAccountCurrency;
                    showOpeningBalanceSeprately = false;
                }
                if (balance != 0) {
                    if (balance > 0) {
                        entryChar = "d";
                        emptyChar = "c";
                    } else {
                        entryChar = "c";
                        emptyChar = "d";
                    }
                    JSONObject objlast = new JSONObject();
                    objlast.put(entryChar + "_date", dateFormat.format(startDate));
                    objlast.put(entryChar + "_accountname", "Balance b/d");
                    objlast.put(entryChar + "_acccode", "");
                    objlast.put(entryChar + "_journalentryid", "");
                    objlast.put(entryChar + "_amountAccountCurrency", Math.abs(balanceAccountCurrency));
                    objlast.put(entryChar + "_transactionID", "");
                    objlast.put(entryChar + "_transactionDetails", "");
                    objlast.put(entryChar + "_transactionDetailsForExpander", "");
                    objlast.put(entryChar + "_transactionDetailsBankBook", "");
                    objlast.put(entryChar + "_checkno", "");
                    objlast.put(entryChar + "_description", "");
                    objlast.put(entryChar + "_amount", Math.abs(balance));
                    objlast.put(emptyChar + "_date", "");
                    objlast.put(emptyChar + "_accountname", "");
                    objlast.put(emptyChar + "_journalentryid", "");
                    objlast.put(emptyChar + "_amount", "");
                    objlast.put(emptyChar + "_transactionID", "");
                    objlast.put(emptyChar + "_transactionDetails", "");
                    objlast.put(emptyChar + "_transactionDetailsForExpander", "");
                    objlast.put(emptyChar + "_transactionDetailsBankBook", "");
                    objlast.put(emptyChar + "_checkno", "");
                    objlast.put(emptyChar + "_description", "");
                    objlast.put("accountid", accountid);
//                    if (bankBook) {
                        //objlast.put("currencysymbol", account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol());
                        //objlast.put("currencycode", account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode());
//                    }
                    String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                    objlast.put("accountname", accountname);

                    String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                    objlast.put("accCode", acccode);
                    //objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());

                    // this is for displaying on the group header
                    if (!acccode.equals("") && account.getName().equals("")) {
                        objlast.put("accCodeName", acccode);
                    } else if (!acccode.equals("") && !account.getName().equals("")) {
                        objlast.put("accCodeName", acccode + " - " + account.getName());
                    } else {
                        objlast.put("accCodeName", accountname);
                    }

                    if (entryChar.equals("d")) {
                        balanceAmount = balanceAmount + Math.abs(balance);
                        objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                        balanceAmountAccountCurrency = balanceAmountAccountCurrency + Math.abs(balanceAccountCurrency);
                        objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                    } else if (entryChar.equals("c")) {
                        balanceAmount = balanceAmount - Math.abs(balance);
                        objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                        balanceAmountAccountCurrency = balanceAmountAccountCurrency - Math.abs(balanceAccountCurrency);
                        objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                    }
                    jArr.put(objlast);


                    if (emptyChar == "d") {
                        total = total + Math.abs(balance);
                        totalAccountCurrency = totalAccountCurrency + Math.abs(balanceAccountCurrency);
                    }


                }

                if (showOpeningBalanceSeprately) {//shows opening balance if date from in account ceration date
                    if (OpeningBalanceInAccountCurrency != 0) {
                        if (OpeningBalanceInAccountCurrency > 0) {
                            entryChar = "d";
                            emptyChar = "c";
                            balance += OpeningBalanceInBaseCurrency;
                            balanceAccountCurrency += OpeningBalanceInAccountCurrency;
                        } else {
                            balance += OpeningBalanceInBaseCurrency;
                            balanceAccountCurrency += OpeningBalanceInAccountCurrency;
                            entryChar = "c";
                            emptyChar = "d";
                        }

                        JSONObject objlast = new JSONObject();
                        objlast.put(entryChar + "_date", dateFormat.format(startDate));
                        objlast.put(entryChar + "_accountname", "Opening Balance");
                        objlast.put(entryChar + "_acccode", "");
                        objlast.put(entryChar + "_journalentryid", "");
                        objlast.put(entryChar + "_amount", Math.abs(OpeningBalanceInBaseCurrency));
                        objlast.put(entryChar + "_amountAccountCurrency", Math.abs(OpeningBalanceInAccountCurrency));
                        objlast.put(entryChar + "_transactionID", "");
                        objlast.put(entryChar + "_transactionDetails", "");
                        objlast.put(entryChar + "_transactionDetailsForExpander", "");
                        objlast.put(entryChar + "_transactionDetailsBankBook", "");
                        objlast.put(entryChar + "_checkno", "");
                        objlast.put(entryChar + "_description", "");
                        objlast.put(emptyChar + "_date", "");
                        objlast.put(emptyChar + "_accountname", "");
                        objlast.put(emptyChar + "_journalentryid", "");
                        objlast.put(emptyChar + "_amount", "");
                        objlast.put(emptyChar + "_transactionID", "");
                        objlast.put(emptyChar + "_transactionDetails", "");
                        objlast.put(emptyChar + "_transactionDetailsForExpander", "");
                        objlast.put(emptyChar + "_transactionDetailsBankBook", "");
                        objlast.put(emptyChar + "_checkno", "");
                        objlast.put(emptyChar + "_description", "");
                        objlast.put("accountid", accountid);
                        //objlast.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
                        //objlast.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                        String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                        objlast.put("accountname", accountname);

//                        String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                        //objlast.put("accCode", acccode);
                        objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());

                        // this is for displaying on the group header
//                        if (!acccode.equals("") && account.getName().equals("")) {
//                            objlast.put("accCodeName", acccode);
//                        } else if (!acccode.equals("") && !account.getName().equals("")) {
//                            objlast.put("accCodeName", acccode + " - " + account.getName());
//                        } else {
//                            objlast.put("accCodeName", accountname);
//                        }

                        if (entryChar.equals("d")) {
                            balanceAmount = balanceAmount + Math.abs(OpeningBalanceInBaseCurrency);// work on home currency
                            objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                            balanceAmountAccountCurrency = balanceAmountAccountCurrency + Math.abs(OpeningBalanceInAccountCurrency);// work on home currency
                            objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                        } else if (entryChar.equals("c")) {
                            balanceAmount = balanceAmount - Math.abs(OpeningBalanceInBaseCurrency);
                            objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                            balanceAmountAccountCurrency = balanceAmountAccountCurrency - Math.abs(OpeningBalanceInAccountCurrency);
                            objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                        }
                        jArr.put(objlast);

                    }
                }
                if(!ledgerReportFlag && !generalLedgerFlag){//we saves balance brod down or Opening Balance to avoid adding to period balance
                    openingBalance=balance;
                    openingBalanceAccountCurrency=balanceAccountCurrency;
                    balance=0.00;
                    balanceAccountCurrency=0.00;
                }
                String searchJson = requestParams.get(Constants.Acc_Search_Json).toString();
                if (!StringUtil.isNullOrEmpty(searchJson)) {//This is used for to Get different dimension entry from dimension name for diffrent modules
                    searchJson = accJournalEntryobj.getJsornStringForSearch(searchJson, mappedAccIDs.split(",")[0],null);
                }
                String filterConjuctionCriteria = requestParams.get(InvoiceConstants.Filter_Criteria).toString();
                
                KwlReturnObject lresult = accJournalEntryobj.getLedgerMerged(mappedAccIDs, startDate, endDate, eliminateflag, generalLedgerFlag, selectedCurrencyIds, filterConjuctionCriteria, searchJson,0,0,pref);
                List list = lresult.getEntityList();
                Iterator itr = list.iterator();

                if (itr.hasNext()) { //For Displaying Group Name in CSV and PDF
                    String fileType = requestParams.get("filetype").toString();
                    if (!bankBook && ledgerReportFlag && fileType != null && (fileType.equals("csv") || fileType.equals("pdf") || fileType.equals("print"))) {
                        JSONObject accountGroup = addAccountGroupJson(account);;
                        jArr.put(accountGroup);
                    }
                }
               // System.out.println("All JEs with there amounts:"); //ERP-8660- to find out difference in GL and T Ledger report
                while (itr.hasNext()) {

                    JournalEntry entry = null;
                    JournalEntryDetail jed = null;
                    Object[] row = (Object[]) itr.next();
                    if (row[0] instanceof JournalEntry && row[1] instanceof JournalEntryDetail) {
                        entry = (JournalEntry) row[0];
                        jed = (JournalEntryDetail) row[1];
                    } else {
                        String jeid = (String) row[0];
                        String jedid = (String) row[1];

                        KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(JournalEntry.class.getName(), jeid);
                        entry = (JournalEntry) jeresult.getEntityList().get(0);
                        jeresult = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), jedid);
                        jed = (JournalEntryDetail) jeresult.getEntityList().get(0);
                    }
                    String transDetails = "", transDetailsForExpander="";
                    if((entry.getTypeValue() == 1 || entry.getTypeValue() == 2) && jed.getAccount()!=null && jed.getAccount().getID().equals(accountid)){
                        //Account acc = jed.getAccount();
                        KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                        Account acc =  (Account)KWLAccount.getEntityList().get(0);

                        if (acc != null && acc.getID().equals(accountid)) {
                            String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                            accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                            accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                            accDesc = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : "<br>" + jed.getDescription();
                            accDescForExpander = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : ", " + jed.getDescription();
                            transDetails += "<br>" + accID + " - " + accName + accDesc;
                            transDetailsForExpander += ", " + accID + " - " + accName + accDescForExpander;
                            String customColData = "", customColDataForExpander = "";

                            int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, jed.getID());
                            customColData = (isRecPresent > 0)? getCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(), false): "";
                            //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(), false);
                            transDetails += StringUtil.isNullOrEmpty(customColData) ? "" : customColData;
                            customColDataForExpander = customColData;
                            customColDataForExpander = StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander.replaceAll("<br>", ", ");
                            transDetailsForExpander += StringUtil.isNullOrEmpty(customColDataForExpander) ? "" : customColDataForExpander;
                        }
                    }
                    if (consolidateFlag) {
                        companyid = entry.getCompany().getCompanyID();


                        prefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                        pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
                        cashAccount = pref.getCashAccount().getID();
                    }

                    currencyid = (entry.getCurrency() == null ? currency.getCurrencyID() : entry.getCurrency().getCurrencyID());
//                    String transactionCurrency = currencyid;
                    JSONObject obj = new JSONObject();
                    int transactionModuleId=entry.getTransactionModuleid();
                    KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, jed.getAmount(), currencyid, entry.getEntryDate(), entry.getExternalCurrencyRate());
                    double transactionAmount = jed.getAmount();
                    SimpleDateFormat sdFormat = new SimpleDateFormat("dd/MM/yyyy"); // Used same DF as used in PDF export
                    Date transactionDate = jed.getJournalEntry().getEntryDate();
                    String transactionDateString = "";
                    if (transactionDate != null) {
                        transactionDateString = sdFormat.format(transactionDate);
                    }
		    double amountindocumentcurrency = 0;      //For GL excel Sheet
                    amountindocumentcurrency = jed.getAmount();
                    KwlReturnObject crresult1 = null;
                    if (currencyid.equals(entry.getCurrency().getCurrencyID())) {
                        crresult1 = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, jed.getAmount(), currencyid, entry.getCurrency().getCurrencyID(), entry.getEntryDate(), entry.getExternalCurrencyRate());
                    } else {
                        crresult1 = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, jed.getAmount(), currencyid, jed.getAccount().getCurrency().getCurrencyID(), entry.getEntryDate(), entry.getExternalCurrencyRate());

                    }
                    double amountBaseCurrency = (Double) crresult.getEntityList().get(0);
                    double amountAccountCurrency = 0;
                    if ((bankBook || ledgerReport) && entry.getIsReval() > 0) {
                        amountAccountCurrency = 0;
                    } else {
                        amountAccountCurrency = (Double) crresult1.getEntityList().get(0);
                    }
                    if (jed.isDebit()) {
                        balance += amountBaseCurrency;
                        balanceAccountCurrency += amountAccountCurrency;
                        entryChar = "d";
                        emptyChar = "c";
                    } else {
                        balance -= amountBaseCurrency;
                        balanceAccountCurrency -= amountAccountCurrency;
                        entryChar = "c";
                        emptyChar = "d";
                    }

       //             System.out.println(""+jed.getJournalEntry().getEntryNumber()+"  "+amountBaseCurrency); //ERP-8660- to find out difference in GL and T Ledger report

                    Set details = entry.getDetails();

                    HashMap<String, Object> reqJED = new HashMap();
                    reqJED.put(Constants.companyKey, companyid);
                    reqJED.put("jeIds", entry.getID());
                    KwlReturnObject resultJED = accJournalEntryobj.getJournalEntryDetail(entry.getID(), companyid);
                    Iterator iter = resultJED.getEntityList().iterator();

                    List<String> accnameList = new ArrayList<String>();
                    String accountName = "";
                    String accountCode = "";
                    String customerVendorId = "";
                    String customerVendorName = "";
                    int accountpersontype = 99;
                    while (iter.hasNext()) {
                        JournalEntryDetail d = (JournalEntryDetail) iter.next();
                        if (d.isDebit() == jed.isDebit()) {
                            continue;
                        }
//                        String accname = StringUtil.isNullOrEmpty(d.getAccount().getAcccode()) ? d.getAccount().getName() : "[" + d.getAccount().getAcccode() + "] " + d.getAccount().getName();
                        KwlReturnObject resultAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), d.getAccount().getID());

                        Account accountReq = (Account)resultAccount.getEntityList().get(0);
                        String accname = StringUtil.isNullOrEmpty(accountReq.getName()) ? "" : accountReq.getName();
                        accnameList.add(accname);
                        //String acccode = StringUtil.isNullOrEmpty(d.getAccount().getAcccode()) ? "" : d.getAccount().getAcccode();
//                        accountName += StringUtil.isNullOrEmpty(accname) ? "" : accname + ", ";
                        accountCode += StringUtil.isNullOrEmpty(accountReq.getAcccode()) ? "" : accountReq.getAcccode() + ", ";
                        customerVendorId = d.getCustomerVendorId();
                        accountpersontype = d.getAccountpersontype();
                        if (accountpersontype != 99 && accountpersontype != 0 && customerVendorId != null) {
                            if (accountpersontype == 1) {
                                KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), customerVendorId);
                                if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
                                    Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                                    customerVendorName = customer.getName();
                                    obj.put("customerVendorName", customer.getName());
                                }
                            } else if (accountpersontype == 2) {
                                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), customerVendorId);
                                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                                    customerVendorName = vendor.getName();
                                    obj.put("customerVendorName", vendor.getName());
                                }
                            }
                        }
                    }
                    //Sorting performed to avoid shuffling in two A/C name in Single String object. //ERP-8519
                    Collections.sort(accnameList);
                    for(String accName : accnameList){
                        accountName += StringUtil.isNullOrEmpty(accName)?"":accName + ", ";
                    }
                    accountName = StringUtil.isNullOrEmpty(accountName) ? "" : accountName.substring(0, Math.max(0, accountName.length() - 2));
                    accountCode = StringUtil.isNullOrEmpty(accountCode) ? "" : accountCode.substring(0, Math.max(0, accountCode.length() - 2));
                    accountName = (StringUtil.isNullOrEmpty(accountName) && !StringUtil.isNullOrEmpty(accountCode)) ? accountCode : accountName;
                    obj.put(entryChar + "_date", dateFormat.format(entry.getEntryDate()));
                    if (!StringUtil.isNullOrEmpty(customerVendorName) && (bankBook || ledgerReport)) {
                        obj.put(entryChar + "_accountname", customerVendorName);
                    } else {
                        obj.put(entryChar + "_accountname", accountName);
                    }
                    obj.put(entryChar + "_acccode", accountCode);
		    obj.put(entryChar + "_externalcurrencyrate", entry.getExternalCurrencyRate());
                    obj.put(entryChar + "_entryno", entry.getEntryNumber());
                    obj.put(entryChar + "_journalentryid", entry.getID());
//                if(withoutinventory.equals("true")){
                    boolean isPartyJournalEntry = entry.getTypeValue() == 2;
                    if (billingInvoiceMap.containsKey(entry.getID())) {
                        if (accountid.equals(cashAccount)) {
                            obj.put(entryChar + "_transactionID", billingInvoiceMap.get(entry.getID()).getBillingInvoiceNumber());
                            obj.put(Constants.billid, billingInvoiceMap.get(entry.getID()).getID());
                            obj.put(entryChar + "_transactionDetails", Constants.CASH_SALE + ", " + billingInvoiceMap.get(entry.getID()).getCustomer().getName());
                            obj.put(entryChar + "_transactionDetailsForExpander", Constants.CASH_SALE + ", " + billingInvoiceMap.get(entry.getID()).getCustomer().getName());
                            obj.put("type", Constants.CASH_SALE);
                        } else {
                            obj.put(entryChar + "_transactionID", billingInvoiceMap.get(entry.getID()).getBillingInvoiceNumber());
                            obj.put(Constants.billid, billingInvoiceMap.get(entry.getID()).getID());
                            obj.put(entryChar + "_transactionDetails", Constants.CUSTOMER_INVOICE + ", " + billingInvoiceMap.get(entry.getID()).getCustomer().getName());
                            obj.put(entryChar + "_transactionDetailsForExpander", Constants.CUSTOMER_INVOICE + ", " + billingInvoiceMap.get(entry.getID()).getCustomer().getName());
                            obj.put("type", Constants.CUSTOMER_INVOICE);
                        }
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", billingInvoiceMap.get(entry.getID()).getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                    } else if (billingGrMap.containsKey(entry.getID())) {
                        if (accountid.equals(cashAccount)) {
                            obj.put(entryChar + "_transactionID", billingGrMap.get(entry.getID()).getBillingGoodsReceiptNumber());
                            obj.put(Constants.billid, billingGrMap.get(entry.getID()).getID());
                            obj.put(entryChar + "_transactionDetails", Constants.CASH_PURCHASE + ", " + billingGrMap.get(entry.getID()).getVendor().getName());
                            obj.put(entryChar + "_transactionDetailsForExpander", Constants.CASH_PURCHASE + ", " + billingGrMap.get(entry.getID()).getVendor().getName());
                            obj.put("type", Constants.CASH_PURCHASE);
                        } else {
                            obj.put(entryChar + "_transactionID", billingGrMap.get(entry.getID()).getBillingGoodsReceiptNumber());
                            obj.put(Constants.billid, billingGrMap.get(entry.getID()).getID());
                            obj.put(entryChar + "_transactionDetails", Constants.VENDOR_INVOICE + ", " + billingGrMap.get(entry.getID()).getVendor().getName());
                            obj.put(entryChar + "_transactionDetailsForExpander", Constants.VENDOR_INVOICE + ", " + billingGrMap.get(entry.getID()).getVendor().getName());
                            obj.put("type", Constants.VENDOR_INVOICE);
                        }
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", billingGrMap.get(entry.getID()).getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                    } else if (billingCreditNoteMap.containsKey(entry.getID())) {
                        obj.put(entryChar + "_transactionID", ((BillingCreditNote) billingCreditNoteMap.get(entry.getID())[0]).getCreditNoteNumber());
                        obj.put("noteid", ((BillingCreditNote) billingCreditNoteMap.get(entry.getID())[0]).getID());
                        obj.put(entryChar + "_transactionDetails", Constants.CREDIT_NOTE + ", " + ((Customer) billingCreditNoteMap.get(entry.getID())[1]).getName());
                        obj.put(entryChar + "_transactionDetailsForExpander", Constants.CREDIT_NOTE + ", " + ((Customer) billingCreditNoteMap.get(entry.getID())[1]).getName());
                        obj.put("type", Constants.CREDIT_NOTE);
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", ((BillingCreditNote) billingCreditNoteMap.get(entry.getID())[0]).getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                    } else if (billingDebitNoteMap.containsKey(entry.getID())) {
                        obj.put(entryChar + "_transactionID", ((BillingDebitNote) billingDebitNoteMap.get(entry.getID())[0]).getDebitNoteNumber());
                        obj.put("noteid", ((BillingDebitNote) billingDebitNoteMap.get(entry.getID())[0]).getID());
                        obj.put(entryChar + "_transactionDetails", Constants.DEBIT_NOTE + ", " + ((Vendor) billingDebitNoteMap.get(entry.getID())[1]).getName());
                        obj.put(entryChar + "_transactionDetailsForExpander", Constants.DEBIT_NOTE + ", " + ((Vendor) billingDebitNoteMap.get(entry.getID())[1]).getName());
                        obj.put("type", Constants.DEBIT_NOTE);
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", ((BillingDebitNote) billingDebitNoteMap.get(entry.getID())[0]).getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                    } else if (billingPaymentReceivedMap.containsKey(entry.getID())) {
                        BillingReceipt tempbr = (BillingReceipt) billingPaymentReceivedMap.get(entry.getID())[0];
                        obj.put(entryChar + "_transactionID", tempbr.getBillingReceiptNumber());
                        obj.put(Constants.billid, tempbr.getID());
                        obj.put(entryChar + "_transactionDetails", "Payment received from : " + accountName);
                        obj.put(entryChar + "_transactionDetailsForExpander", "Payment received from : " + accountName);
                        obj.put("type", Constants.PAYMENT_RECEIVED);
                        obj.put("payer", tempbr.getReceivedFrom() != null ? tempbr.getReceivedFrom().getValue() : "");
                        obj.put(entryChar + "_transactionDetailsBankBook", "Payment received from : " + accountName);
                        if (tempbr.getPayDetail() != null && tempbr.getPayDetail().getCheque() != null && !StringUtil.isNullOrEmpty(tempbr.getPayDetail().getCheque().getChequeNo())) {
                            obj.put(entryChar + "_checkno", tempbr.getPayDetail().getCheque().getChequeNo());
                            Date chequeDate = tempbr.getPayDetail().getCheque().getDueDate();
                            String chequeDateString = "";
                            if (chequeDate != null) {
                                chequeDateString = dateFormat.format(chequeDate);
                            }
                            obj.put(entryChar + "_checkdate", chequeDateString);
                            obj.put(entryChar + "_description", tempbr.getPayDetail().getCheque().getDescription() != null ? tempbr.getPayDetail().getCheque().getDescription() : "");
                        } else {
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                        }

                    } else if (billingPaymentMadeMap.containsKey(entry.getID())) {
                        BillingPayment tempbp = (BillingPayment) billingPaymentMadeMap.get(entry.getID())[0];
                        obj.put(entryChar + "_transactionID", tempbp.getBillingPaymentNumber());
                        obj.put(Constants.billid, tempbp.getID());
                        obj.put(entryChar + "_transactionDetails", "Payment made to : " + accountName);
                        obj.put(entryChar + "_transactionDetailsForExpander", "Payment made to : " + accountName);
                        obj.put("type", Constants.PAYMENT_MADE);
                        obj.put("payer", tempbp.getPaidTo() != null ? tempbp.getPaidTo().getValue() : "");
                        obj.put(entryChar + "_transactionDetailsBankBook", "Payment made to : " + accountName);
                        if (tempbp.getPayDetail() != null && tempbp.getPayDetail().getCheque() != null && !StringUtil.isNullOrEmpty(tempbp.getPayDetail().getCheque().getChequeNo())) {
                            obj.put(entryChar + "_checkno", tempbp.getPayDetail().getCheque().getChequeNo());
                            Date chequeDate = tempbp.getPayDetail().getCheque().getDueDate();
                            String chequeDateString = "";
                            if (chequeDate != null) {
                                chequeDateString = dateFormat.format(chequeDate);
                            }
                            obj.put(entryChar + "_checkdate", chequeDateString);
                            obj.put(entryChar + "_description", tempbp.getPayDetail().getCheque().getDescription() != null ? tempbp.getPayDetail().getCheque().getDescription() : "");
                        } else {
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                        }

                    } else if (invoiceMap.containsKey(entry.getID())|| transactionModuleId==Constants.Acc_Cash_Sales_ModuleId || transactionModuleId==Constants.Acc_Invoice_ModuleId) {
                        String configJSONStr="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Sales Invoice - $#$InvoiceNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Cash Sale - $#$InvoiceNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Customer',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'ProductDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.InvoiceDetail,com.krawler.common.admin.KWLCurrency,TRANSACTION_AMOUNT,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$InvDetailDescription$#$<br>Amount : $#$CurrencyCode$#$ $#$TRANSACTION_AMOUNT$#$ $#$CUSTOMDATA$#$'}]}]";          
                        JSONArray descJsonArr = new JSONArray();
                        boolean isDescConfig=false;
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Invoice_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                        isDescConfig=true;
                        if(isDescConfig)
                            descJsonArr = new JSONArray(configJSONStr);
                        
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), entry.getTransactionId());
                        Invoice invoice = (Invoice) KwlInvoice.getEntityList().get(0);
                        if (accountid.equals(cashAccount) || (invoice!=null && invoice.isCashtransaction())) {
                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
                            obj.put(Constants.billid, invoice.getID());
                            obj.put("type", Constants.CASH_SALE);
                        } else {
                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
                            obj.put(Constants.billid, invoice.getID());
                            obj.put("type", Constants.CUSTOMER_INVOICE);
                        }
                        //Get Global level Dimension Data
                        Map<String, String> customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_Invoice_ModuleId, entry.getID());
                        obj.put(entryChar + "_transactionCustomFieldData", customFieldData);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("salesPersonName", invoice.getMasterSalesPerson()==null?"":invoice.getMasterSalesPerson().getValue());
//                        Invoice invoice = (Invoice) invoiceMap.get(entry.getID());
//                        Map<String, String> transDetMap = getTransactionDetailsForInvoice(invoiceMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                        Map<String, String> transDetMap = getTransactionDetailsForInvoiceForGL(invoice, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        String lineLevelCustomFieldData=transDetMap.get("lineLevelCustomFieldData")!=null?transDetMap.get("lineLevelCustomFieldData"):"";
                        obj.put(entryChar + "_lineLevelCustomFieldData", lineLevelCustomFieldData);
                        String gstCode=transDetMap.get("gstCode")!=null?transDetMap.get("gstCode"):"";
                        obj.put("gstCode", gstCode);
                        KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), invoice.getCustomer().getID());
                        Customer customer =  (Customer)KWLCustomer.getEntityList().get(0);
                        if (invoice != null && invoice.getCustomer() != null && (bankBook || ledgerReport)) {
                            //customer = invoice.getCustomer();
                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        }
                        obj.put("personid", transDetMap.containsKey("madid") && transDetMap.get("madid")!=null?transDetMap.get("madid"):"");
                        obj.put("personname", transDetMap.containsKey("madname") && transDetMap.get("madname")!=null?transDetMap.get("madname"):"");
                        obj.put("isVendor", transDetMap.containsKey("isVendor") && transDetMap.get("isVendor")!=null?transDetMap.get("isVendor"):"");
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", invoice.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                    } else if (grMap.containsKey(entry.getID()) || transactionModuleId==Constants.Acc_Cash_Purchase_ModuleId || transactionModuleId==Constants.Acc_Vendor_Invoice_ModuleId) {
                        String configJSONStr="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Purchase Invoice - $#$GoodsReceiptNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Cash Purchase - $#$GoodsReceiptNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Vendor',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'ProductDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.GoodsReceiptDetail,com.krawler.common.admin.KWLCurrency,TRANSACTION_AMOUNT,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$PIDetailDescription$#$<br>Amount : $#$CurrencyCode$#$ $#$TRANSACTION_AMOUNT$#$ $#$CUSTOMDATA$#$'}]},{seq:6,type:6,documentid:'ExpenseDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.ExpenseGRDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$EXPIDescription$#$ $#$CUSTOMDATA$#$'}]}]";          
                        JSONArray descJsonArr = new JSONArray();
                        boolean isDescConfig=false;
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Vendor_Invoice_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                        isDescConfig=true;
                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), entry.getTransactionId());
                        GoodsReceipt goodsReceipt = (GoodsReceipt) KwlgoodsReceipt.getEntityList().get(0);
                        if(isDescConfig)
                            descJsonArr = new JSONArray(configJSONStr);
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        if (accountid.equals(cashAccount) || (goodsReceipt!=null && goodsReceipt.isCashtransaction())) {
                            obj.put(entryChar + "_transactionID", goodsReceipt.getGoodsReceiptNumber());
                            obj.put(Constants.billid, goodsReceipt.getID());
                            obj.put("type", Constants.CASH_PURCHASE);
                        } else {
                            obj.put(entryChar + "_transactionID",goodsReceipt.getGoodsReceiptNumber());
                            obj.put(Constants.billid, goodsReceipt.getID());
                            obj.put("type", Constants.VENDOR_INVOICE);
                        }
                        //Get Global level Dimension Data
                        Map<String, String> customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_Vendor_Invoice_ModuleId, entry.getID());
                        obj.put(entryChar + "_transactionCustomFieldData", customFieldData);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("salesPersonName", goodsReceipt.getMasterAgent()==null?"":goodsReceipt.getMasterAgent().getValue());
//                        GoodsReceipt goodsReceipt = grMap.get(entry.getID());
                        
;
                        Map<String, String> transDetMap = getTransactionDetailsForPurchaseInvoiceForGL(goodsReceipt, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        String lineLevelCustomFieldData=transDetMap.get("lineLevelCustomFieldData")!=null?transDetMap.get("lineLevelCustomFieldData"):"";
                        obj.put(entryChar + "_lineLevelCustomFieldData", lineLevelCustomFieldData);
                        String gstCode=transDetMap.get("gstCode")!=null?transDetMap.get("gstCode"):"";
                        obj.put("gstCode", gstCode);
                        KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), goodsReceipt.getVendor().getID());
                        Vendor vendor =  (Vendor)KWLVendor.getEntityList().get(0);
                        if (goodsReceipt != null && goodsReceipt.getVendor() != null && (bankBook || ledgerReport)) {
                            obj.put("_cvName", vendor.getName());
                            obj.put(entryChar + "_accountname", vendor.getName());
                        }
                        obj.put("personid", transDetMap.containsKey("madid") && transDetMap.get("madid")!=null?transDetMap.get("madid"):"");
                        obj.put("personname", transDetMap.containsKey("madname") && transDetMap.get("madname")!=null?transDetMap.get("madname"):"");
                        obj.put("isVendor", transDetMap.containsKey("isVendor") && transDetMap.get("isVendor")!=null?transDetMap.get("isVendor"):"");
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", goodsReceipt.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                    } else if (creditNoteMap.containsKey(entry.getID()) || transactionModuleId == Constants.Acc_Credit_Note_ModuleId) {
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        KwlReturnObject KwlCreditNote = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), entry.getTransactionId());
                        CreditNote creditNote = (CreditNote) KwlCreditNote.getEntityList().get(0);
                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Credit_Note_ModuleId);
                        if (creditNote.getCustomer() != null) {
                            String configJSONStr = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.CreditNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Credit Note - $#$CreditNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.CreditNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.CreditNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$CNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(configJSONStr);
                            boolean isDescConfig = true;
                        if (isPartyJournalEntry) {
                            obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                        } else {
                                obj.put(entryChar + "_transactionID", creditNote.getCreditNoteNumber());
                        }
                        //Get Global level Dimension Data
                        Map<String, String> customFieldData= new HashMap<>();
                        if(isPartyJournalEntry){
                            customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, entry.getID());
                        }else{
                            customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_Credit_Note_ModuleId, entry.getID());
                        }
                        obj.put(entryChar + "_transactionCustomFieldData", customFieldData);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("salesPersonName", creditNote.getSalesPerson()==null?"":creditNote.getSalesPerson().getValue());
                        
//                        Map<String, String> transDetMap = getTransactionDetailsForCreditNote(creditNoteMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            Map<String, String> transDetMap = getTransactionDetailsForCreditNoteForGL(creditNote, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        String lineLevelCustomFieldData=transDetMap.get("lineLevelCustomFieldData")!=null?transDetMap.get("lineLevelCustomFieldData"):"";
                        obj.put(entryChar + "_lineLevelCustomFieldData", lineLevelCustomFieldData);
                        String gstCode=transDetMap.get("gstCode")!=null?transDetMap.get("gstCode"):"";
                        obj.put("gstCode", gstCode);
//                        CreditNote creditNote = (CreditNote) creditNoteMap.get(entry.getID())[0];
                        if (creditNote != null && creditNote.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = creditNote.getCustomer();
                            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), creditNote.getCustomer().getID());
                            Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        } else if (creditNote != null && creditNote.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = creditNote.getVendor();
                            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), creditNote.getVendor().getID());
                            Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
                            obj.put("_cvName", vendor.getName());
                            obj.put(entryChar + "_accountname", vendor.getName());
                        }
                            obj.put("personid", transDetMap.containsKey("madid") && transDetMap.get("madid") != null ? transDetMap.get("madid") : "");
                            obj.put("personname", transDetMap.containsKey("madname") && transDetMap.get("madname") != null ? transDetMap.get("madname") : "");
                            obj.put("isVendor", transDetMap.containsKey("isVendor") && transDetMap.get("isVendor") != null ? transDetMap.get("isVendor") : "");
                            obj.put("noteid", creditNote.getID());
                        obj.put("type", Constants.CREDIT_NOTE);
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                            obj.put("memoValue", creditNote.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                    } else if (creditNote.getVendor() != null) {
                            
                            String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.CreditNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Credit Note - $#$CreditNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.CreditNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.CreditNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$CNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(newString);
                           
                            boolean isDescConfig = true;
                            if (isPartyJournalEntry) {
                                obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                            } else {
                                obj.put(entryChar + "_transactionID", creditNote.getCreditNoteNumber());
                            }
                            //Get Global level Dimension Data
                            Map<String, String> customFieldData= new HashMap<>();
                            if(isPartyJournalEntry){
                                customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, entry.getID());
                            }else{
                                customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_Credit_Note_ModuleId, entry.getID());
                            }
                            obj.put(entryChar + "_transactionCustomFieldData", customFieldData);
                            obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                            obj.put("salesPersonName", creditNote.getMasterAgent()==null?"":creditNote.getMasterAgent().getValue());
//                            Map<String, String> transDetMap = getTransactionDetailsForCreditNote(creditNoteMapVendor, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            Map<String, String> transDetMap = getTransactionDetailsForCreditNoteForGL(creditNote, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            String lineLevelCustomFieldData=transDetMap.get("lineLevelCustomFieldData")!=null?transDetMap.get("lineLevelCustomFieldData"):"";
                            obj.put(entryChar + "_lineLevelCustomFieldData", lineLevelCustomFieldData);
                            String gstCode=transDetMap.get("gstCode")!=null?transDetMap.get("gstCode"):"";
                            obj.put("gstCode", gstCode);
                            obj.put("personid", transDetMap.containsKey("madid") && transDetMap.get("madid") != null ? transDetMap.get("madid") : "");
                            obj.put("personname", transDetMap.containsKey("madname") && transDetMap.get("madname") != null ? transDetMap.get("madname") : "");
                            obj.put("isVendor", transDetMap.containsKey("isVendor") && transDetMap.get("isVendor") != null ? transDetMap.get("isVendor") : "");
//                            CreditNote creditNote = (CreditNote) creditNoteMapVendor.get(entry.getID())[0];
                            if (creditNote != null && creditNote.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = creditNote.getCustomer();
                                KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), creditNote.getCustomer().getID());
                                Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
                                obj.put("_cvName", customer.getName());
                                obj.put(entryChar + "_accountname", customer.getName());
                            } else if (creditNote != null && creditNote.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = creditNote.getVendor();
                                KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), creditNote.getVendor().getID());
                                Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
                                obj.put("_cvName", vendor.getName());
                                obj.put(entryChar + "_accountname", vendor.getName());
                            }
                            obj.put("noteid", creditNote.getID());
                            obj.put("type", Constants.CREDIT_NOTE);
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", creditNote.getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        }
                        
                    }/* else if (creditNoteMapVendor.containsKey(entry.getID())) {
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        
                        String newString="[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.CreditNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Credit Note - $#$CreditNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.CreditNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.CreditNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$CNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";          
                        JSONArray descJsonArr = new JSONArray(newString);
                        
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Credit_Note_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                        boolean isDescConfig=true;
                        
                        if (isPartyJournalEntry) {
                            obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                        } else {
                            obj.put(entryChar + "_transactionID", ((CreditNote) creditNoteMapVendor.get(entry.getID())[0]).getCreditNoteNumber());
                        }
                        Map<String, String> transDetMap = getTransactionDetailsForCreditNote(creditNoteMapVendor, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        
                        CreditNote creditNote = (CreditNote) creditNoteMapVendor.get(entry.getID())[0];
                        if (creditNote != null && creditNote.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = creditNote.getCustomer();
                            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), creditNote.getCustomer().getID());
                            Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        } else if (creditNote != null && creditNote.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = creditNote.getVendor();
                            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), creditNote.getVendor().getID());
                            Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
                            obj.put("_cvName", vendor.getName());
                            obj.put(entryChar + "_accountname", vendor.getName());
                        }
                        obj.put("noteid", ((CreditNote) creditNoteMapVendor.get(entry.getID())[0]).getID());
                        obj.put("type", Constants.CREDIT_NOTE);
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", ((CreditNote) creditNoteMapVendor.get(entry.getID())[0]).getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                    }*/ else if (debitNoteMap.containsKey(entry.getID()) || transactionModuleId==Constants.Acc_Debit_Note_ModuleId) {
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        KwlReturnObject KwlDebitNote = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), entry.getTransactionId());
                        DebitNote debitNote = (DebitNote) KwlDebitNote.getEntityList().get(0);
                        HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Debit_Note_ModuleId);
                        if (debitNote.getVendor() != null) {
                            String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.DebitNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Debit Note - $#$DebitNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.DebitNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.DebitNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$DNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(newString);
                            boolean isDescConfig = true;
                        if (isPartyJournalEntry) {
                            obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                        } else {
                                obj.put(entryChar + "_transactionID", debitNote.getDebitNoteNumber());
                        }
                        //Get Global level Dimension Data
                        Map<String, String> customFieldData= new HashMap<>();
                        if(isPartyJournalEntry){
                            customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, entry.getID());
                        }else{
                            customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_Debit_Note_ModuleId, entry.getID());
                        }
                        obj.put(entryChar + "_transactionCustomFieldData", customFieldData);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                            Map<String, String> transDetMap = getTransactionDetailsForDebitNote(debitNoteMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            Map<String, String> transDetMap = getTransactionDetailsForDebitNoteForGL(debitNote, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        String lineLevelCustomFieldData=transDetMap.get("lineLevelCustomFieldData")!=null?transDetMap.get("lineLevelCustomFieldData"):"";
                        obj.put(entryChar + "_lineLevelCustomFieldData", lineLevelCustomFieldData);
                        String gstCode=transDetMap.get("gstCode")!=null?transDetMap.get("gstCode"):"";
                        obj.put("gstCode", gstCode);
//                            DebitNote debitNote = (DebitNote) debitNoteMap.get(entry.getID())[0];
                        if (debitNote != null && debitNote.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = debitNote.getCustomer();
                            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), debitNote.getCustomer().getID());
                            Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        } else if (debitNote != null && debitNote.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = debitNote.getVendor();
                            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), debitNote.getVendor().getID());
                            Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
                            obj.put("_cvName", vendor.getName());
                            obj.put(entryChar + "_accountname", vendor.getName());
                        }
                            obj.put("personid", transDetMap.containsKey("madid") && transDetMap.get("madid") != null ? transDetMap.get("madid") : "");
                            obj.put("personname", transDetMap.containsKey("madname") && transDetMap.get("madname") != null ? transDetMap.get("madname") : "");
                            obj.put("isVendor", transDetMap.containsKey("isVendor") && transDetMap.get("isVendor") != null ? transDetMap.get("isVendor") : "");
                            obj.put("noteid", debitNote.getID());
                        obj.put("type", Constants.DEBIT_NOTE);
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                            obj.put("memoValue", debitNote.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        } else if (debitNote.getCustomer() != null) {
                            String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.DebitNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Debit Note - $#$DebitNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.DebitNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.DebitNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$DNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(newString);
                            boolean isDescConfig = true;
                            if (isPartyJournalEntry) {
                                obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                            } else {
                                obj.put(entryChar + "_transactionID", debitNote.getDebitNoteNumber());
                            }
                            //Get Global level Dimension Data
                            Map<String, String> customFieldData= new HashMap<>();
                            if(isPartyJournalEntry){
                                customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, entry.getID());
                            }else{
                                customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_Debit_Note_ModuleId, entry.getID());
                            }
                            obj.put(entryChar + "_transactionCustomFieldData", customFieldData);
                            obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
//                            Map<String, String> transDetMap = getTransactionDetailsForDebitNote(debitNoteMapCustomer, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            Map<String, String> transDetMap = getTransactionDetailsForDebitNoteForGL(debitNote, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            String lineLevelCustomFieldData=transDetMap.get("lineLevelCustomFieldData")!=null?transDetMap.get("lineLevelCustomFieldData"):"";
                            obj.put(entryChar + "_lineLevelCustomFieldData", lineLevelCustomFieldData);
                            String gstCode=transDetMap.get("gstCode")!=null?transDetMap.get("gstCode"):"";
                            obj.put("gstCode", gstCode);
                            obj.put("personid", transDetMap.containsKey("madid") && transDetMap.get("madid") != null ? transDetMap.get("madid") : "");
                            obj.put("personname", transDetMap.containsKey("madname") && transDetMap.get("madname") != null ? transDetMap.get("madname") : "");
                            obj.put("isVendor", transDetMap.containsKey("isVendor") && transDetMap.get("isVendor") != null ? transDetMap.get("isVendor") : "");
//                            DebitNote debitNote = (DebitNote) debitNoteMapCustomer.get(entry.getID())[0];
                            if (debitNote != null && debitNote.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = debitNote.getCustomer();
                                KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), debitNote.getCustomer().getID());
                                Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
                                obj.put("_cvName", customer.getName());
                                obj.put(entryChar + "_accountname", customer.getName());
                            } else if (debitNote != null && debitNote.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = debitNote.getVendor();
                                KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), debitNote.getVendor().getID());
                                Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
                                obj.put("_cvName", vendor.getName());
                                obj.put(entryChar + "_accountname", vendor.getName());
                            }
                            obj.put("noteid", debitNote.getID());
                            obj.put("type", Constants.DEBIT_NOTE);
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", debitNote.getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        }
                        
                    } /*else if (debitNoteMapCustomer.containsKey(entry.getID())) {
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        
                        String newString="[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.DebitNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Debit Note - $#$DebitNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.DebitNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.DebitNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$DNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";          
                        JSONArray descJsonArr = new JSONArray(newString);
                        
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Debit_Note_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                        boolean isDescConfig=true;
                        if (isPartyJournalEntry) {
                            obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                        } else {
                            obj.put(entryChar + "_transactionID", ((DebitNote) debitNoteMapCustomer.get(entry.getID())[0]).getDebitNoteNumber());
                        }
                        Map<String, String> transDetMap = getTransactionDetailsForDebitNote(debitNoteMapCustomer, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        DebitNote debitNote = (DebitNote) debitNoteMapCustomer.get(entry.getID())[0];
                        if (debitNote != null && debitNote.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = debitNote.getCustomer();
                            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), debitNote.getCustomer().getID());
                            Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        } else if (debitNote != null && debitNote.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = debitNote.getVendor();
                            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), debitNote.getVendor().getID());
                            Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
                            obj.put("_cvName", vendor.getName());
                            obj.put(entryChar + "_accountname", vendor.getName());
                        }
                        obj.put("noteid", ((DebitNote) debitNoteMapCustomer.get(entry.getID())[0]).getID());
                        obj.put("type", Constants.DEBIT_NOTE);
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", ((DebitNote) debitNoteMapCustomer.get(entry.getID())[0]).getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                    }*/ else if (paymentReceivedMap.containsKey(entry.getID()) || transactionModuleId==Constants.Acc_Receive_Payment_ModuleId) {
                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Receipt',key:'<br>$#$Memo$#$'}]},{seq:2,type:2,documentid:'AgainstGL',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptDetailOtherwise,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$, $#$CVName$#$ <br>$#$RDOtherwiseDescription$#$$#$CUSTOMDATA$#$'}]},{seq:3,type:3,documentid:'AdvancePayment',info:[{classname:'com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptAdvanceDetail,CUSTOMDATA',key:'<br>Advance Payment, $#$CVName$#$ <br>$#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:4,type:4,documentid:'AgainstInvoice',info:[{classname:'com.krawler.hql.accounting.Invoice,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptDetail,CUSTOMDATA',key:'<br>Invoice - $#$InvoiceNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'AgainstPurchaseInvoice',info:[{classname:'com.krawler.hql.accounting.GoodsReceipt,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptDetail,CUSTOMDATA',key:'<br>Purchase Invoice - $#$GoodsReceiptNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:6,type:6,documentid:'AgainstCNDN',info:[{classname:'com.krawler.hql.accounting.DebitNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.DebitNotePaymentDetails,CUSTOMDATA',key:'<br>Debit Note - $#$DebitNoteNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:7,type:7,info:[{classname:'com.krawler.hql.accounting.Cheque,com.krawler.hql.accounting.PaymentMethod',key:'<br>Cheque no. $#$ChequeNo$#$ dated $#$DueDate$#$, $#$MethodName$#$, $#$Description$#$'}]},{seq:8,type:8,info:[{classname:'com.krawler.hql.accounting.MasterItem',key:'<br>Received from : $#$Value$#$'}]}]";
                        JSONArray descJsonArr = new JSONArray(newString);
                        KwlReturnObject resultReceipt = accountingHandlerDAOobj.getObject(Receipt.class.getName(), entry.getTransactionId());
                        Receipt tempr = (Receipt) resultReceipt.getEntityList().get(0);
                        String cvName = "";
                        if (tempr != null && tempr.getCustomer() != null && (bankBook || ledgerReport)) {
                            KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempr.getCustomer().getID());
                            Customer customer = (Customer)resultCustomer.getEntityList().get(0);
                            cvName = customer.getName();
                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        } else if (tempr != null && !StringUtil.isNullOrEmpty(tempr.getVendor()) && (bankBook || ledgerReport)) {
                            KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempr.getVendor());
                            if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                                Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                                cvName = vendor.getName();
                                obj.put("_cvName", vendor.getName());
                                obj.put(entryChar + "_accountname", vendor.getName());
                            }
                        }
                        obj.put(entryChar + "_transactionID", tempr.getReceiptNumber());
                        obj.put(Constants.billid, tempr.getID());
                        String transactionDetails = "", transactionDetailsForExpander="";
                        
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Receive_Payment_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                        jeDetailReceiptTypeMap = new HashMap<String, Integer>();
                        createJEDetailReceiptTypeMapNew(tempr, jeDetailReceiptTypeMap, companyid);
                        Map<String, String> transDetMap = getTransactionDetailsForReceiptGL(tempr, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailReceiptTypeMap, bankBook,ledgerReport);
                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                        String lineLevelCustomFieldData=transDetMap.get("lineLevelCustomFieldData")!=null?transDetMap.get("lineLevelCustomFieldData"):"";
                        obj.put(entryChar + "_lineLevelCustomFieldData", lineLevelCustomFieldData);
                        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                        HashMap<String, Object> requestParamsMap = new HashMap();
                        filter_names.add("ID");
                        filter_params.add(tempr.getPayDetail().getID());
                        requestParamsMap.put("filter_names", filter_names);
                        requestParamsMap.put("filter_params", filter_params);
                        KwlReturnObject resultPayDet = accReceiptDao.getPayDetails(requestParamsMap);
                        PayDetail payDetail = (PayDetail) resultPayDet.getEntityList().get(0);
                        //Get Global level Dimension Data
                        Map<String, String> customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, entry.getID());
                        obj.put(entryChar + "_transactionCustomFieldData", customFieldData);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        
                        if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment received from : " + cvName);
                        } else {
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment received from : " + accountName);
                        }
                        obj.put("type", Constants.PAYMENT_RECEIVED);
                        obj.put("personid", transDetMap.containsKey("madid") && transDetMap.get("madid") != null ? transDetMap.get("madid") : "");
                        obj.put("personname", transDetMap.containsKey("madname") && transDetMap.get("madname") != null ? transDetMap.get("madname") : "");
                        obj.put("isVendor", transDetMap.containsKey("isVendor") && transDetMap.get("isVendor") != null ? transDetMap.get("isVendor") : "");
                        if (tempr.getReceivedFrom() != null) {
                            KwlReturnObject KWLMasterItem = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), tempr.getReceivedFrom().getID());
                            MasterItem masterItem = (MasterItem) KWLMasterItem.getEntityList().get(0);

                            obj.put("payer", masterItem != null ? masterItem.getValue() : "");
                        }else{
                            obj.put("payer", "");
                        }
                        
                        if (payDetail != null && payDetail.getCheque() != null) {
                            KwlReturnObject KWLCheque = accountingHandlerDAOobj.getObject(Cheque.class.getName(), payDetail.getCheque().getID());
                            Cheque cheque = (Cheque) KWLCheque.getEntityList().get(0);
                            obj.put(entryChar + "_checkno", cheque.getChequeNo());
                            Date chequeDate = cheque.getDueDate();
                            String chequeDateString = "";
                            if (chequeDate != null) {
                                chequeDateString = dateFormat.format(chequeDate);
                            }
                            obj.put(entryChar + "_checkdate", chequeDateString);
                            obj.put(entryChar + "_description", cheque.getDescription() != null ? cheque.getDescription() : "");
                            obj.put("memoValue", tempr.getMemo());
                        } else {
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", tempr.getMemo());
                        }

                    } else if (paymentMadeMap.containsKey(entry.getID()) || transactionModuleId==Constants.Acc_Make_Payment_ModuleId) {
                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Payment',key:'<br>$#$Memo$#$'}]},{seq:2,type:2,documentid:'AgainstGL',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.PaymentDetailOtherwise,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$, $#$CVName$#$ <br>$#$PDOtherwiseDescription$#$$#$CUSTOMDATA$#$'}]},{seq:3,type:3,documentid:'AdvancePayment',info:[{classname:'com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.AdvanceDetail,CUSTOMDATA',key:'<br>Advance Payment, $#$CVName$#$<br>$#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:4,type:4,documentid:'AgainstInvoice',info:[{classname:'com.krawler.hql.accounting.Invoice,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.PaymentDetail,CUSTOMDATA',key:'<br>Invoice - $#$InvoiceNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'AgainstPurchaseInvoice',info:[{classname:'com.krawler.hql.accounting.GoodsReceipt,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.PaymentDetail,CUSTOMDATA',key:'<br>Purchase Invoice - $#$GoodsReceiptNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:6,type:6,documentid:'AgainstCNDN',info:[{classname:'com.krawler.hql.accounting.CreditNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.CreditNotePaymentDetails,CUSTOMDATA',key:'<br>Credit Note - $#$CreditNoteNumber$#$, $#$Name$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:7,type:7,info:[{classname:'com.krawler.hql.accounting.Cheque,com.krawler.hql.accounting.PaymentMethod',key:'<br>Cheque no. $#$ChequeNo$#$ dated $#$DueDate$#$, $#$MethodName$#$, $#$Description$#$'}]},{seq:8,type:8,info:[{classname:'com.krawler.hql.accounting.MasterItem',key:'<br>Paid to : $#$Value$#$'}]}]";
                        JSONArray descJsonArr = new JSONArray(newString);
                        
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_Make_Payment_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                        KwlReturnObject resultPayment = accountingHandlerDAOobj.getObject(Payment.class.getName(), entry.getTransactionId());
                        Payment tempp = (Payment) resultPayment.getEntityList().get(0);
                        String cvName = "";
                        if (tempp != null && !StringUtil.isNullOrEmpty(tempp.getCustomer()) && (bankBook || ledgerReport)) {
                            KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempp.getCustomer());
                            if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
                                Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                                cvName = customer.getName();
                                obj.put(entryChar + "_accountname", customer.getName());
                                obj.put("_cvName", customer.getName());
                            }
                        } else if (tempp != null && tempp.getVendor() != null && (bankBook || ledgerReport)) {
                            KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempp.getVendor().getID());
                            Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                            cvName = vendor.getName();
                            obj.put(entryChar + "_accountname", vendor.getName());
                            obj.put("_cvName", vendor.getName());
                        }

                        obj.put(entryChar + "_transactionID", tempp.getPaymentNumber());
                        obj.put(Constants.billid, tempp.getID());
                        String transactionDetails = "", transactionDetailsForExpander="";
                        jeDetailPaymentTypeMap = new HashMap<String, Integer>();
                        createJEDetailPaymentTypeMapNew(tempp, jeDetailPaymentTypeMap, companyid);
                        Map<String, String> transDetMap = getTransactionDetailsForPaymentGL(tempp, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailPaymentTypeMap, bankBook,ledgerReport);
                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
//                        
                        String lineLevelCustomFieldData=transDetMap.get("lineLevelCustomFieldData")!=null?transDetMap.get("lineLevelCustomFieldData"):"";
                        obj.put(entryChar + "_lineLevelCustomFieldData", lineLevelCustomFieldData);
                        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                        HashMap<String, Object> requestParamsMap = new HashMap();
                        filter_names.add("ID");
                        filter_params.add(tempp.getPayDetail().getID());
                        requestParamsMap.put("filter_names", filter_names);
                        requestParamsMap.put("filter_params", filter_params);
                        KwlReturnObject resultPayDet = accReceiptDao.getPayDetails(requestParamsMap);
                        PayDetail payDetail = (PayDetail) resultPayDet.getEntityList().get(0);
                        //Get Global level Dimension Data
                        Map<String, String> customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_Make_Payment_ModuleId, entry.getID());
                        obj.put(entryChar + "_transactionCustomFieldData", customFieldData);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        
                        obj.put("personid", transDetMap.containsKey("madid") && transDetMap.get("madid") != null ? transDetMap.get("madid") : "");
                        obj.put("personname", transDetMap.containsKey("madname") && transDetMap.get("madname") != null ? transDetMap.get("madname") : "");
                        obj.put("isVendor", transDetMap.containsKey("isVendor") && transDetMap.get("isVendor") != null ? transDetMap.get("isVendor") : "");
                        if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment made to : " + cvName);
                        } else {
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment made to : " + accountName);
                        }
                        obj.put("type", Constants.PAYMENT_MADE);
                        if (tempp.getPaidTo() != null) {
                            KwlReturnObject KWLMasterItem = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), tempp.getPaidTo().getID());
                            MasterItem masterItem = (MasterItem) KWLMasterItem.getEntityList().get(0);

                            obj.put("payer", masterItem != null ? masterItem.getValue() : "");
                        }else{
                            obj.put("payer", "");
                        }
                        if (tempp.getPayDetail() != null && payDetail.getCheque() != null ) {
                            KwlReturnObject KWLCheque = accountingHandlerDAOobj.getObject(Cheque.class.getName(), payDetail.getCheque().getID());
                            Cheque cheque = (Cheque) KWLCheque.getEntityList().get(0);
                            obj.put(entryChar + "_checkno", StringUtil.isNullOrEmpty(cheque.getChequeNo())?"":cheque.getChequeNo());
                            Date chequeDate = cheque.getDueDate();
                            String chequeDateString = "";
                            if (chequeDate != null) {
                                chequeDateString = dateFormat.format(chequeDate);
                            }
                            obj.put(entryChar + "_checkdate", chequeDateString);
                            obj.put(entryChar + "_description", cheque.getDescription() != null ? cheque.getDescription() : "");
                            obj.put("memoValue", tempp.getMemo());
                        } else {
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", tempp.getMemo());
                        }

                    } else if (fixedAssetgrMap.containsKey(entry.getID())|| transactionModuleId==Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId) {
                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Fixed Asset Acquired Invoice - $#$GoodsReceiptNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Cash Purchase - $#$GoodsReceiptNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Vendor',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'AssetDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.GoodsReceiptDetail,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$PIDetailDescription$#$$#$CUSTOMDATA$#$'}]}]";          
                        JSONArray descJsonArr = new JSONArray(newString);
                        
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                        boolean isDescConfig=true;
                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), entry.getTransactionId());
                        GoodsReceipt goodsReceipt = (GoodsReceipt) KwlgoodsReceipt.getEntityList().get(0);
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        if (accountid.equals(cashAccount)) {
                            obj.put(entryChar + "_transactionID", goodsReceipt.getGoodsReceiptNumber());
                            obj.put(Constants.billid,goodsReceipt.getID());
                            obj.put("type", Constants.CASH_PURCHASE);
                        } else {
                            obj.put(entryChar + "_transactionID", goodsReceipt.getGoodsReceiptNumber());
                            obj.put(Constants.billid, goodsReceipt.getID());
                            obj.put("type", Constants.ACQUIRED_INVOICE);
                        }
                        //Get Global level Dimension Data
                        Map<String, String> customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId, entry.getID());
                        obj.put(entryChar + "_transactionCustomFieldData", customFieldData);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("salesPersonName", goodsReceipt.getMasterAgent()==null?"":goodsReceipt.getMasterAgent().getValue());
                        
//                        Map<String, String> transDetMap = getTransactionDetailsForFixedAssetPurchaseInvoice(fixedAssetgrMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                        Map<String, String> transDetMap = getTransactionDetailsForFixedAssetPurchaseInvoiceForGL(goodsReceipt, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        String lineLevelCustomFieldData=transDetMap.get("lineLevelCustomFieldData")!=null?transDetMap.get("lineLevelCustomFieldData"):"";
                        obj.put(entryChar + "_lineLevelCustomFieldData", lineLevelCustomFieldData);
                        String gstCode=transDetMap.get("gstCode")!=null?transDetMap.get("gstCode"):"";
                        obj.put("gstCode", gstCode);
                        obj.put("personid", transDetMap.containsKey("madid") && transDetMap.get("madid") != null ? transDetMap.get("madid") : "");
                        obj.put("personname", transDetMap.containsKey("madname") && transDetMap.get("madname") != null ? transDetMap.get("madname") : "");
                        obj.put("isVendor", transDetMap.containsKey("isVendor") && transDetMap.get("isVendor") != null ? transDetMap.get("isVendor") : "");
//                        GoodsReceipt goodsReceipt = fixedAssetgrMap.get(egoodsReceiptntry.getID());
                        if (goodsReceipt != null && goodsReceipt.getVendor() != null && (bankBook || ledgerReport)) {
//                            Vendor vendor = goodsReceipt.getVendor();
                            KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), goodsReceipt.getVendor().getID());
                            Vendor vendor =  (Vendor)KWLVendor.getEntityList().get(0);
                            obj.put("_cvName", vendor.getName());
                            obj.put(entryChar + "_accountname", vendor.getName());
                        }
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", goodsReceipt.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                    } else if (fixedAssetInvoiceMap.containsKey(entry.getID())|| transactionModuleId==Constants.Acc_FixedAssets_DisposalInvoice_ModuleId) {
                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Fixed Asset Disposal Invoice - $#$InvoiceNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Cash Sale - $#$InvoiceNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Customer',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'AssetDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.InvoiceDetail,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$InvDetailDescription$#$$#$CUSTOMDATA$#$'}]}]";          
                        JSONArray descJsonArr = new JSONArray(newString);
                        
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_FixedAssets_DisposalInvoice_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                        boolean isDescConfig=true;
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), entry.getTransactionId());
                        Invoice invoice = (Invoice) KwlInvoice.getEntityList().get(0);
                        if (accountid.equals(cashAccount)) {
                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
                            obj.put(Constants.billid, invoice.getID());
                            obj.put("type", Constants.CASH_SALE);
                        } else {
                            obj.put(entryChar + "_transactionID", invoice.getInvoiceNumber());
                            obj.put(Constants.billid,invoice.getID());
                            obj.put("type", Constants.DISPOSAL_INVOICE);
                        }
                        //Get Global level Dimension Data
                        Map<String, String> customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId, entry.getID());
                        obj.put(entryChar + "_transactionCustomFieldData", customFieldData);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        obj.put("salesPersonName", invoice.getMasterSalesPerson()==null?"":invoice.getMasterSalesPerson().getValue());
                        
//                          Map<String, String> transDetMap = getTransactionDetailsForFixedAssetInvoice(fixedAssetInvoiceMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                        Map<String, String> transDetMap = getTransactionDetailsForFixedAssetInvoiceForGL(invoice, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig,Constants.Acc_FixedAssets_DisposalInvoice_ModuleId);
                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        String lineLevelCustomFieldData=transDetMap.get("lineLevelCustomFieldData")!=null?transDetMap.get("lineLevelCustomFieldData"):"";
                        obj.put(entryChar + "_lineLevelCustomFieldData", lineLevelCustomFieldData);
                        String gstCode=transDetMap.get("gstCode")!=null?transDetMap.get("gstCode"):"";
                        obj.put("gstCode", gstCode);
                        obj.put("personid", transDetMap.containsKey("madid") && transDetMap.get("madid") != null ? transDetMap.get("madid") : "");
                        obj.put("personname", transDetMap.containsKey("madname") && transDetMap.get("madname") != null ? transDetMap.get("madname") : "");
                        obj.put("isVendor", transDetMap.containsKey("isVendor") && transDetMap.get("isVendor") != null ? transDetMap.get("isVendor") : "");
//                        Invoice invoice = (Invoice) fixedAssetInvoiceMap.get(entry.getID());
                        if (invoice != null && invoice.getCustomer() != null && (bankBook || ledgerReport)) {
//                            Customer customer = invoice.getCustomer();
                            KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), invoice.getCustomer().getID());
                            Customer customer =  (Customer)KWLCustomer.getEntityList().get(0);
                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        }
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", invoice.getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);

                    } else {
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        
                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Journal Entry'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'JEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";          
                        JSONArray descJsonArr = new JSONArray(newString);
                        
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                        boolean isDescConfig=true;
                        //Get Global level Dimension Data
                        Map<String, String> customFieldData = getGlobalCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, entry.getID());
                        obj.put(entryChar + "_transactionCustomFieldData", customFieldData);
                        obj.put("costCenterName", entry.getCostcenter()==null?"":entry.getCostcenter().getName());
                        
                        Map<String, String> transDetMap = getTransactionDetailsForJournalEntry(entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                        String lineLevelCustomFieldData=transDetMap.get("lineLevelCustomFieldData")!=null?transDetMap.get("lineLevelCustomFieldData"):"";
                        obj.put(entryChar + "_lineLevelCustomFieldData", lineLevelCustomFieldData);
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_transactionDetailsBankBook", "");
                        obj.put("memoValue", (entry.getTypeValue() != 0 && !StringUtil.isNullOrEmpty(entry.getMemo())) ? entry.getMemo() : "");
                    }

                    KwlReturnObject KWLCurrency = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), entry.getCurrency().getCurrencyID());
                    KWLCurrency currencyObj =  (KWLCurrency)KWLCurrency.getEntityList().get(0);


                    obj.put("transactionCurrency", (entry.getCurrency() == null ? currency.getCurrencyID() : entry.getCurrency().getCurrencyID()));
                    obj.put("transactionSymbol", (entry.getCurrency() == null ? currency.getCurrencyCode() : currencyObj.getCurrencyCode())); //transaction currency code
                    obj.put("transactionCurrencySymbol", (entry.getCurrency() == null ? currency.getSymbol() : currencyObj.getSymbol()));//transaction currency symbol
                    obj.put("transactionAmount", transactionAmount);
                    obj.put("transactionDateString", transactionDateString);
                    obj.put(entryChar + "_amountindocumentcurrency", amountindocumentcurrency);   //Amount in Account Currency
                    obj.put(entryChar + "_amount", amountBaseCurrency);   //Amount in base currency
                    obj.put(entryChar + "_transactionAmount", transactionAmount);   //Amount in document currency
                    if ((bankBook || ledgerReport) && entry.getIsReval() > 1) {
                        obj.put(entryChar + "_amountAccountCurrency", "");
                    } else {
                        obj.put(entryChar + "_amountAccountCurrency", amountAccountCurrency);   //Amount in account currency
                    }
                    obj.put(emptyChar + "_date", "");
                    obj.put(emptyChar + "_accountname", "");
                    obj.put(emptyChar + "_acccode", "");
                    obj.put(emptyChar + "_entryno", "");
                    obj.put(emptyChar + "_journalentryid", "");
                    obj.put(emptyChar + "_amount", "");
                    obj.put(emptyChar + "_amountAccountCurrency", "");
                    obj.put(emptyChar + "_transactionAmount", "");
                    obj.put(emptyChar + "_transactionID", "");
                    obj.put(emptyChar + "_transactionDetails", "");
                    obj.put(emptyChar + "_checkno", "");
                    obj.put(emptyChar + "_transactionDetailsBankBook", "");
                    obj.put("accountid", accountid);

                    if (entryChar.equals("d")) {
                        balanceAmount = balanceAmount + amountBaseCurrency;
                        obj.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                        balanceAmountAccountCurrency = balanceAmountAccountCurrency + amountAccountCurrency;
                        obj.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                    } else if (entryChar.equals("c")) {
                        balanceAmount = balanceAmount - amountBaseCurrency;
                        obj.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                        balanceAmountAccountCurrency = balanceAmountAccountCurrency - amountAccountCurrency;
                        obj.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                    }
                    jArr.put(obj);
                    if (requestParams.get("filetype") != null) {
                        if (requestParams.get("filetype").toString().equals("print") || requestParams.get("filetype").toString().equals("csv")) {
                            if (emptyChar == "d") {
                                total = total + amountBaseCurrency;
                                totalAccountCurrency = totalAccountCurrency + amountAccountCurrency;
                            }
                        }
                    }
                }

                double tempTotalAmount = balance;
                double tempTotalAmountAccountCurrency = balanceAccountCurrency;
                /*
                 * Comment: For Date filter end date is passed with adding 1 day
                 * extra so here need to subtract 1 day from end date. Suppose
                 * the Journal Entry is created with creation date 31st January
                 * 2014 12:30:00. Now if we filter Ledger records on date and
                 * give start date as 1st January 2014 and end date as 31st
                 * January 2014 then it takes record till 31st January 2014
                 * 00:00:00 so it does not get the 31st January's records thats
                 * why For Date filter end date is passed with adding 1 day
                 * extra.
                 *
                 */
//                Date endDateTemp = authHandler.getDateFormatter(request).parse(request.getParameter("enddate"));
//                Calendar c = Calendar.getInstance();
//                c.setTime(endDateTemp);
//                c.add(Calendar.DATE, -1);
//                endDateTemp.setTime(c.getTime().getTime());
//                // Comment : 1 day is subtracted from End date
                if (tempTotalAmount != 0 && !ledgerReportFlag && !generalLedgerFlag) {
                    if (tempTotalAmount > 0) {
                        entryChar = "d";
                        emptyChar = "c";
                    } else {
                        entryChar = "c";
                        emptyChar = "d";
                    }
                    JSONObject objlast = new JSONObject();
                    objlast.put(entryChar + "_date", dateFormat.format(endDate));
                    objlast.put(entryChar + "_accountname", "Period Balance");
                    objlast.put(entryChar + "_acccode", "");
                    objlast.put(entryChar + "_journalentryid", "");
                    objlast.put(entryChar + "_amount", (Double) Math.abs(tempTotalAmount));
                    objlast.put(entryChar + "_amountAccountCurrency", Math.abs(tempTotalAmountAccountCurrency));
                    objlast.put(entryChar + "_transactionAmount","");
                    objlast.put(entryChar + "_transactionID", "");
                    objlast.put(entryChar + "_transactionDetails", "");
                    objlast.put(entryChar + "_checkno", "");
                    objlast.put(entryChar + "_description", "");
                    objlast.put(entryChar + "_transactionDetailsBankBook", "");
                    objlast.put(emptyChar + "_amountAccountCurrency", "");
                    objlast.put(emptyChar + "_transactionAmount", "");
                    objlast.put(emptyChar + "_date", "");
                    objlast.put(emptyChar + "_accountname", "");
                    objlast.put(emptyChar + "_journalentryid", "");
                    objlast.put(emptyChar + "_amount", "");
                    objlast.put(emptyChar + "_transactionID", "");
                    objlast.put(emptyChar + "_transactionDetails", "");
                    objlast.put(emptyChar + "_checkno", "");
                    objlast.put(emptyChar + "_description", "");
                    objlast.put(emptyChar + "_transactionDetailsBankBook", "");

                    objlast.put("balanceAmount", "");
                    objlast.put("balanceAmountAccountCurrency", "");

                    jArr.put(objlast);

                }
                if(!ledgerReportFlag && !generalLedgerFlag && balance ==0){
                    balance=balance+openingBalance;
                    balanceAccountCurrency=balanceAccountCurrency+openingBalanceAccountCurrency;
                }
                if (balance != 0) {
                    if (balance > 0) {
                        entryChar = "c";
                        emptyChar = "d";
                    } else {
                        entryChar = "d";
                        emptyChar = "c";
                    }
                    JSONObject objlast = new JSONObject();
                    objlast.put(entryChar + "_date", dateFormat.format(endDate));
                    objlast.put(entryChar + "_accountname", "Balance c/f");
                    objlast.put(entryChar + "_acccode", "");
                    objlast.put(entryChar + "_journalentryid", "");
                    objlast.put(entryChar + "_amount", (Double) Math.abs(balance));
                    objlast.put(entryChar + "_transactionID", "");
                    objlast.put(entryChar + "_transactionDetails", "");
                    objlast.put(entryChar + "_checkno", "");
                    objlast.put(entryChar + "_description", "");
                    objlast.put(entryChar + "_transactionDetailsBankBook", "");
                    objlast.put(entryChar + "_amountAccountCurrency", "");
                    objlast.put(emptyChar + "_amountAccountCurrency", "");
                    objlast.put(entryChar + "_transactionAmount", "");
                    objlast.put(emptyChar + "_transactionAmount", "");
                    objlast.put(emptyChar + "_date", "");
                    objlast.put(emptyChar + "_accountname", "");
                    objlast.put(emptyChar + "_journalentryid", "");
                    objlast.put(emptyChar + "_amount", "");
                    objlast.put(emptyChar + "_transactionID", "");
                    objlast.put(emptyChar + "_transactionDetails", "");
                    objlast.put(emptyChar + "_checkno", "");
                    objlast.put(emptyChar + "_description", "");
                    objlast.put(emptyChar + "_transactionDetailsBankBook", "");
                    objlast.put("accountid", accountid);
                    String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                    objlast.put("accountname", accountname);

                    objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));                               //ERP-8775 & 8786
                    objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid)); //ERP-8775 & 8786
                    jArr.put(objlast);

                    if (!bankBook && ledgerReportFlag) {
                        JSONObject netbBalanceObj = addNetBalanceJsonLedger(requestParams, account, balance, currency);
                        jArr.put(netbBalanceObj);
                    }
                    
                        if (requestParams.get("filetype") != null && !generalLedgerFlag) { // two times total shown
                            if (requestParams.get("filetype").toString().equals("print") || requestParams.get("filetype").toString().equals("csv")) {
                                if (emptyChar == "d") {
                                    total = total + Math.abs(balance);
                                    totalAccountCurrency = totalAccountCurrency + Math.abs(balanceAccountCurrency);
                                }
                                JSONObject total1 = new JSONObject();
                                total1.put(entryChar + "_date", requestParams.get("enddate").toString());
                                total1.put(entryChar + "_accountname", "Total");
                                total1.put(entryChar + "_journalentryid", "");
                                total1.put(entryChar + "_amount", total);
                                total1.put(entryChar + "_transactionDetails", "");
                                total1.put(entryChar + "_transactionID", "");
                                total1.put(entryChar + "_transactionDetailsBankBook", "");
                                total1.put(entryChar + "_description", "");
                                total1.put(emptyChar + "_date", requestParams.get("enddate").toString());
                                total1.put(emptyChar + "_accountname", "Total");
                                total1.put(emptyChar + "_acccode", "");
                                total1.put(emptyChar + "_journalentryid", "");
                                total1.put(emptyChar + "_amount", total);
                                total1.put(emptyChar + "_transactionID", "");
                                total1.put(emptyChar + "_transactionDetails", "");
                                total1.put(emptyChar + "_transactionDetailsBankBook", "");
                                total1.put(entryChar + "_description", "");
                                total1.put("accountid", accountid);
                                total1.put("isTotal", true);

                                // to separate account code & names into 2 different columns
                                accountname = StringUtil.isNullOrEmpty(account.getName()) ? "" : account.getName();
                                total1.put("accountname", account.getName());
                                jArr.put(total1);
                            }
                        }
                    }
                }
            jobj.put(Constants.RES_data, jArr);
        } catch (ParseException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getLedgerForExport : " + ex.getMessage(), ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getLedgerForExport : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getLedgerForExport : " + ex.getMessage(), ex);
        }  catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getLedgerForExport : " + ex.getMessage(), ex);
        }
        return jobj;
    }
     
    public double getParentOpeningBalance(Account account, double totalAccountBalance, HttpServletRequest request, Date startDate, Date endDate) throws ServiceException, ParseException {
        JSONObject params = getRequestParams(request);
        return getParentOpeningBalance(account, totalAccountBalance, params, startDate, endDate);
    }

    @Override
    public double getParentOpeningBalance(Account account, double totalAccountBalance, JSONObject params, Date startDate, Date endDate) throws ServiceException, ParseException {
        try {
            List<Account> list = new ArrayList(account.getChildren());
            for (Account subAccount : list) {
                double balance = 0;
                if (!subAccount.isDeleted()) {
                    balance = getAccountBalance(params, subAccount.getID(), startDate, endDate,null);
                }
                totalAccountBalance = totalAccountBalance + balance;
                if (subAccount.getChildren().isEmpty()) {
                    continue;
                }
                //Recursive function to get child accounts
                totalAccountBalance = getParentOpeningBalance(subAccount, totalAccountBalance, params, startDate, endDate);
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return totalAccountBalance;
    }

    public double getParentOpeningBalanceLedger(Account account, double totalAccountBalance, HashMap<String, Object> requestParams, Date startDate, Date endDate) throws ServiceException, ParseException {
        try {
            KwlReturnObject resultChild = accAccountDAOobj.getAccountChilds(account);

            List list = resultChild.getEntityList();

            Iterator itr = null;

            if(list != null && !list.isEmpty()) {
                itr = list.iterator();
            }

            while (itr.hasNext()) {
                Account subAccount = (Account) itr.next();
                double balance = 0;
                if (!subAccount.isDeleted()) {
                    balance = getAccountBalanceLedger(requestParams, subAccount.getID(), startDate, endDate);
                }
                totalAccountBalance = totalAccountBalance + balance;

                KwlReturnObject resultChild_1 = accAccountDAOobj.getAccountChilds(subAccount);

                List listChild = resultChild_1.getEntityList();


                if (listChild == null || listChild.isEmpty()) {
                    continue;
                }
                //Recursive function to get child accounts
                totalAccountBalance = getParentOpeningBalanceLedger(subAccount, totalAccountBalance, requestParams, startDate, endDate);
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return totalAccountBalance;
    }
    
    public JSONObject addNetBalanceJsonLedger(HashMap<String, Object> requestParams, Account account, double balance, KWLCurrency currency) {
        JSONObject netbBalanceObj = new JSONObject();
        try {
            Date endDate = ((DateFormat)requestParams.get("dateformat")).parse(requestParams.get("enddate").toString());
            String accountid = StringUtil.isNullOrEmpty(account.getID()) ? "" : account.getID();
            String accountname = StringUtil.isNullOrEmpty(account.getName()) ? "" : account.getName();
            String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
            String entryChar = "", emptyChar = "";
            if (balance > 0) {
                entryChar = "d";
                emptyChar = "c";
            } else {
                entryChar = "c";
                emptyChar = "d";
            }
            netbBalanceObj.put("isnetbalance", true);
            netbBalanceObj.put("netbalance", balance);
            netbBalanceObj.put(entryChar + "_date", endDate);
            netbBalanceObj.put(entryChar + "_accountname", "");
            netbBalanceObj.put(entryChar + "_acccode", "");
            netbBalanceObj.put(entryChar + "_journalentryid", "");
            netbBalanceObj.put(entryChar + "_amount", "");
            netbBalanceObj.put(entryChar + "_transactionID", "");
            netbBalanceObj.put(entryChar + "_transactionDetails", "");
            netbBalanceObj.put(entryChar + "_checkno", "");
            netbBalanceObj.put(entryChar + "_description", "");
            netbBalanceObj.put(entryChar + "_transactionDetailsBankBook", "");
            netbBalanceObj.put(entryChar + "_amountAccountCurrency", "");
            netbBalanceObj.put(emptyChar + "_amountAccountCurrency", "");
            netbBalanceObj.put(emptyChar + "_date", "");
            netbBalanceObj.put(emptyChar + "_isnetbalance", "");
            netbBalanceObj.put(emptyChar + "_netbalance", "");
            netbBalanceObj.put(emptyChar + "_accountname", "");
            netbBalanceObj.put(emptyChar + "_journalentryid", "");
            netbBalanceObj.put(emptyChar + "_amount", "");
            netbBalanceObj.put(emptyChar + "_transactionID", "");
            netbBalanceObj.put(emptyChar + "_transactionDetails", "");
            netbBalanceObj.put(emptyChar + "_checkno", "");
            netbBalanceObj.put(emptyChar + "_description", "");
            netbBalanceObj.put(emptyChar + "_transactionDetailsBankBook", "");
            netbBalanceObj.put("accountid", accountid);
            netbBalanceObj.put("accountname", accountname);
            netbBalanceObj.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
            netbBalanceObj.put("accCode", acccode);
            netbBalanceObj.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());
            if (!acccode.equals("") && account.getName().equals("")) {
                netbBalanceObj.put("accCodeName", acccode);
            } else if (!acccode.equals("") && !account.getName().equals("")) {
                netbBalanceObj.put("accCodeName", acccode + " - " + account.getName());
            } else {
                netbBalanceObj.put("accCodeName", accountname);
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return netbBalanceObj;
    }
  
    
    public double calculateAmount(double rowTaxAmount, double quantity, double rate, double rateIncludedGst, double discount, boolean isGstIncluded, int discountispercent, String companyid) {
        double amount = 0;
        double discountPrice = 0;
        if (isGstIncluded) {
            rate = rateIncludedGst;
        }
        double poPrice = authHandler.round(quantity * rate, companyid);
        double discountPOD = authHandler.round(discount, companyid);
        if (discountispercent == 1) {
            discountPrice = (poPrice) - authHandler.round((poPrice * discountPOD / 100), companyid);
        } else {
            discountPrice = poPrice - discountPOD;
        }
        amount += discountPrice;
        if (!isGstIncluded) {
            amount += authHandler.round(rowTaxAmount, companyid);
        }
        return amount;
    }

    public double getAccountBudget(HttpServletRequest request, String accountid, Date startDate, Date endDate) throws ServiceException, SessionExpiredException {
        double budget = 0;
        String query = " ";
        try {    
            LocalDate lastDateOfMonth = new LocalDate(endDate);
            lastDateOfMonth = lastDateOfMonth.minusDays(2);
            endDate = lastDateOfMonth.toDate();
            SimpleDateFormat df = new SimpleDateFormat();
            df.applyPattern("MMMM d, yyyy");
            Calendar startcal = Calendar.getInstance();
            Calendar endcal = Calendar.getInstance();
            startcal.setTime(new Date(df.format(startDate)));
            startcal.set(Calendar.DAY_OF_MONTH, 1);
            endcal.setTime(new Date(df.format(endDate)));
            endcal.set(Calendar.DAY_OF_MONTH, 1);
                while (startcal.getTimeInMillis() <= endcal.getTimeInMillis()) {   
                    query = "select id from accountbudget where year=" + startcal.get(Calendar.YEAR) + " and account='" + accountid + "'";
                    List list = executeSQLQuery( query);
                    Iterator itr = list.iterator();
                    AccountBudget budgetObj = null;
                    while (itr.hasNext()) {
                        budgetObj = (AccountBudget) get(AccountBudget.class, (String) itr.next());
                    }
                    if (budgetObj != null) {
                        switch (startcal.get(Calendar.MONTH)) {
                            case Calendar.JANUARY:
                                if (budgetObj.getJan() != -1) {
                                    budget += budgetObj.getJan();
                                }
                                break;
                            case Calendar.FEBRUARY:
                                if (budgetObj.getFeb() != -1) {
                                    budget += budgetObj.getFeb();
                                }
                                break;
                            case Calendar.MARCH:
                                if (budgetObj.getMarch() != -1) {
                                    budget += budgetObj.getMarch();
                                }
                                break;
                            case Calendar.APRIL:
                                if (budgetObj.getApril() != -1) {
                                    budget += budgetObj.getApril();
                                }
                                break;
                            case Calendar.MAY:
                                if (budgetObj.getMay() != -1) {
                                    budget += budgetObj.getMay();
                                }
                                break;
                            case Calendar.JUNE:
                                if (budgetObj.getJune() != -1) {
                                    budget += budgetObj.getJune();
                                }
                                break;
                            case Calendar.JULY:
                                if (budgetObj.getJuly() != -1) {
                                    budget += budgetObj.getJuly();
                                }
                                break;
                            case Calendar.AUGUST:
                                if (budgetObj.getAug() != -1) {
                                    budget += budgetObj.getAug();
                                }
                                break;
                            case Calendar.SEPTEMBER:
                                if (budgetObj.getSept() != -1) {
                                    budget += budgetObj.getSept();
                                }
                                break;
                            case Calendar.OCTOBER:
                                if (budgetObj.getOct() != -1) {
                                    budget += budgetObj.getOct();
                                }
                                break;
                            case Calendar.NOVEMBER:
                                if (budgetObj.getNov() != -1) {
                                    budget += budgetObj.getNov();
                                }
                                break;
                            case Calendar.DECEMBER:
                                if (budgetObj.getDecember() != -1) {
                                    budget += budgetObj.getDecember();
                                }
                                break;
                        }
                    }
                    String sstartcal = authHandler.getDateOnlyFormat().format(startcal.getTime());
                    Date start = authHandler.getDateOnlyFormat().parse(sstartcal);
                 
                    LocalDate localStartDate = new LocalDate(start);
                    localStartDate = localStartDate.plus(Period.months(1));
                    startcal.setTime(localStartDate.toDate());
                }
            
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return budget;
    }
    
    
    public double getAccountBudget(String accountid, Date startDate, Date endDate) throws ServiceException, SessionExpiredException {
        double budget = 0;
        String query = " ";
        try {    
            LocalDate lastDateOfMonth = new LocalDate(endDate);
            lastDateOfMonth = lastDateOfMonth.minusDays(2);
            endDate = lastDateOfMonth.toDate();
            SimpleDateFormat df = new SimpleDateFormat();
            df.applyPattern("MMMM d, yyyy");
            Calendar startcal = Calendar.getInstance();
            Calendar endcal = Calendar.getInstance();
            startcal.setTime(new Date(df.format(startDate)));
            startcal.set(Calendar.DAY_OF_MONTH, 1);
            endcal.setTime(new Date(df.format(endDate)));
            endcal.set(Calendar.DAY_OF_MONTH, 1);
                while (startcal.getTimeInMillis() <= endcal.getTimeInMillis()) {   
                    query = "select id from accountbudget where year=" + startcal.get(Calendar.YEAR) + " and account='" + accountid + "'";
                    List list = executeSQLQuery( query);
                    Iterator itr = list.iterator();
                    AccountBudget budgetObj = null;
                    while (itr.hasNext()) {
                        budgetObj = (AccountBudget) get(AccountBudget.class, (String) itr.next());
                    }
                    if (budgetObj != null) {
                        switch (startcal.get(Calendar.MONTH)) {
                            case Calendar.JANUARY:
                                if (budgetObj.getJan() != -1) {
                                    budget += budgetObj.getJan();
                                }
                                break;
                            case Calendar.FEBRUARY:
                                if (budgetObj.getFeb() != -1) {
                                    budget += budgetObj.getFeb();
                                }
                                break;
                            case Calendar.MARCH:
                                if (budgetObj.getMarch() != -1) {
                                    budget += budgetObj.getMarch();
                                }
                                break;
                            case Calendar.APRIL:
                                if (budgetObj.getApril() != -1) {
                                    budget += budgetObj.getApril();
                                }
                                break;
                            case Calendar.MAY:
                                if (budgetObj.getMay() != -1) {
                                    budget += budgetObj.getMay();
                                }
                                break;
                            case Calendar.JUNE:
                                if (budgetObj.getJune() != -1) {
                                    budget += budgetObj.getJune();
                                }
                                break;
                            case Calendar.JULY:
                                if (budgetObj.getJuly() != -1) {
                                    budget += budgetObj.getJuly();
                                }
                                break;
                            case Calendar.AUGUST:
                                if (budgetObj.getAug() != -1) {
                                    budget += budgetObj.getAug();
                                }
                                break;
                            case Calendar.SEPTEMBER:
                                if (budgetObj.getSept() != -1) {
                                    budget += budgetObj.getSept();
                                }
                                break;
                            case Calendar.OCTOBER:
                                if (budgetObj.getOct() != -1) {
                                    budget += budgetObj.getOct();
                                }
                                break;
                            case Calendar.NOVEMBER:
                                if (budgetObj.getNov() != -1) {
                                    budget += budgetObj.getNov();
                                }
                                break;
                            case Calendar.DECEMBER:
                                if (budgetObj.getDecember() != -1) {
                                    budget += budgetObj.getDecember();
                                }
                                break;
                        }
                    }
                    String sstartcal = authHandler.getDateOnlyFormat().format(startcal.getTime());
                    Date start = authHandler.getDateOnlyFormat().parse(sstartcal);
                 
                    LocalDate localStartDate = new LocalDate(start);
                    localStartDate = localStartDate.plus(Period.months(1));
                    startcal.setTime(localStartDate.toDate());
                }
            
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return budget;
    }
        
    public double getBudgetForAccounts(JSONObject paramJobj, String accId,Date startDate, Date endDate) throws ServiceException, SessionExpiredException {
        double budget = 0;
        Map<String, Double> accountsTotalBudget = new HashMap<String, Double>();
        boolean iscustomfield = true;
        boolean isDimensionFlag = false;
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("companyid", paramJobj.optString(Constants.companyKey));
            boolean isMonthlyBudget = paramJobj.optBoolean("isMonthlyBudget", false);
            boolean isYTDBudget = paramJobj.optBoolean("isYTDBudget", false);;
            boolean isAnnualBudget = paramJobj.optBoolean("isAnnualBudget", true);
            String month = paramJobj.optString("month");
            int year = paramJobj.optString("year", null) != null ? Integer.parseInt(paramJobj.optString("year", "1970")) : 1970;
            
            String Searchjson = null;
            int searchJsonsize = 0;
            
            if (!StringUtil.isNullOrEmpty(accId)) {
                requestParams.put("accountvalue", accId);
                KwlReturnObject accountresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accId);
                Account account = (Account) accountresult.getEntityList().get(0);
                //FOr expense type account only
                if (account != null && account.getGroup() != null && account.getGroup().getNature() == Group.NATURE_EXPENSES) {
                    // advance search on the basis of one field
                    if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.Acc_Search_Json, null))) {
                        Searchjson = paramJobj.optString(Constants.Acc_Search_Json, "{}");

                        JSONObject SearchJsonObj = new JSONObject(Searchjson);
                        JSONArray SearchJsonArray = SearchJsonObj.getJSONArray("root");
                        searchJsonsize = SearchJsonArray.length();
                        if (searchJsonsize == 1) {
                            JSONObject compareObj = SearchJsonArray.optJSONObject(0);
                            iscustomfield = Boolean.parseBoolean(compareObj.optString("iscustomfield"));
                            isDimensionFlag = !iscustomfield;
                            int xtype = Integer.parseInt(compareObj.optString("fieldtype", "1"));
                            if (xtype == 4 && isDimensionFlag) {//only for dimensions
                                String dimId = compareObj.optString("column");
                                String dimIDvalue = compareObj.optString("search");
                                if (!StringUtil.isNullOrEmpty(dimId)) {
                                    requestParams.put("dimension", dimId);
                                }
                                if (!StringUtil.isNullOrEmpty(dimIDvalue)) {
                                    requestParams.put("dimensionvalue", dimIDvalue);
                                }
                            }
                        } else if (searchJsonsize > 1) {
                            requestParams.put(Constants.Acc_Search_Json, paramJobj.optString(Constants.Acc_Search_Json, null));
                            requestParams.put(Constants.Filter_Criteria, paramJobj.optString(Constants.Filter_Criteria, null));
                        }
                    }

                    if (isYTDBudget) {
                        LocalDate lastDateOfMonth = new LocalDate(endDate);
                        lastDateOfMonth = lastDateOfMonth.minusDays(2);
                        endDate = lastDateOfMonth.toDate();
                        SimpleDateFormat df = new SimpleDateFormat();
                        df.applyPattern("MMMM d, yyyy");
                        Calendar startcal = Calendar.getInstance();
                        Calendar endcal = Calendar.getInstance();
                        startcal.setTime(new Date(df.format(startDate)));
                        startcal.set(Calendar.DAY_OF_MONTH, 1);
                        endcal.setTime(new Date(df.format(endDate)));
                        endcal.set(Calendar.DAY_OF_MONTH, 1);
                        if (startcal.getTimeInMillis() <= endcal.getTimeInMillis()) {
                            requestParams.put("startyear", startcal.get(Calendar.YEAR));
                            requestParams.put("endyear", endcal.get(Calendar.YEAR));
                            requestParams.remove("year");
                        }
                    } else if (isMonthlyBudget) {
                        if (year != 0) {
                            requestParams.put("year", year);
                        }
                    } else if (isAnnualBudget) {
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(startDate);
                        int startYear = cal.get(Calendar.YEAR);
                        requestParams.put("startyear", startYear);
                        cal.setTime(endDate);
                        requestParams.put("endyear", cal.get(Calendar.YEAR));
                        requestParams.remove("year");
                    }
                    //this code is only for dimension based trading &profit loss budget

                    KwlReturnObject result = accAccountDAOobj.getMonthlyBudget(requestParams);
                    List<AccountBudget> list = result.getEntityList();
                    if (list.size() > 0) {
                        JSONObject returnjobj = getTotalBudgetofMonth(list, month);
                        if (isAnnualBudget) {
                            if (returnjobj.has("totalBudget") && returnjobj.get("totalBudget") != null) {
                                accountsTotalBudget.put(accId, returnjobj.optDouble("totalBudget", 0.0));
                                budget = returnjobj.optDouble("totalBudget", 0.0);
                            }
                        } else if (returnjobj.has("monthBudget") && returnjobj.get("monthBudget") != null) {
                            budget = returnjobj.optDouble("monthBudget", 0.0);
                        }
                    }
                }//end of account != null && account.getGroup() != null && account.getGroup().getNature() == Group.NATURE_EXPENSES
            }//end of accid

        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return budget;
    }
    
    
    //In Report List when fetching report on the basis of monthly budget report-ERP-37238
    public JSONObject getTotalBudgetofMonth(List<AccountBudget> accbudgetList, String month) throws ServiceException {
        JSONObject obj = new JSONObject();
        double totalBudget = 0.0;
        double monthBudgetTotal = 0.0;//multiple accounts entry and their month addition
        try {
            for (AccountBudget accbudget : accbudgetList) {
                if (accbudget != null) {

                    if (month.equalsIgnoreCase("January")) {
                        monthBudgetTotal += (accbudget.getJan() < 0) ? 0 : accbudget.getJan();
                    }

                    if (month.equalsIgnoreCase("February")) {
                        monthBudgetTotal += (accbudget.getFeb() < 0) ? 0 : accbudget.getFeb();
                    }

                    if (month.equalsIgnoreCase("March")) {
                        monthBudgetTotal += (accbudget.getMarch() < 0) ? 0 : accbudget.getMarch();
                    }

                    if (month.equalsIgnoreCase("April")) {
                        monthBudgetTotal += (accbudget.getApril() < 0) ? 0 : accbudget.getApril();
                    }

                    if (month.equalsIgnoreCase("May")) {
                        monthBudgetTotal += (accbudget.getMay() < 0) ? 0 : accbudget.getMay();
                    }

                    if (month.equalsIgnoreCase("June")) {
                        monthBudgetTotal += (accbudget.getJune() < 0) ? 0 : accbudget.getJune();
                    }

                    if (month.equalsIgnoreCase("July")) {
                        monthBudgetTotal += (accbudget.getJuly() < 0) ? 0 : accbudget.getJuly();
                    }

                    if (month.equalsIgnoreCase("August")) {
                        monthBudgetTotal += (accbudget.getAug() < 0) ? 0 : accbudget.getAug();
                    }


                    if (month.equalsIgnoreCase("September")) {
                        monthBudgetTotal += (accbudget.getSept() < 0) ? 0 : accbudget.getSept();
                    }


                    if (month.equalsIgnoreCase("October")) {
                        monthBudgetTotal += (accbudget.getOct() < 0) ? 0 : accbudget.getOct();
                    }

                    if (month.equalsIgnoreCase("November")) {
                        monthBudgetTotal += (accbudget.getNov() < 0) ? 0 : accbudget.getNov();
                    }

                    if (month.equalsIgnoreCase("December")) {
                        monthBudgetTotal += (accbudget.getDecember() < 0) ? 0 : accbudget.getDecember();
                    }

                    totalBudget += (accbudget.getJan() < 0) ? 0 : accbudget.getJan();
                    totalBudget += (accbudget.getFeb() < 0) ? 0 : accbudget.getFeb();
                    totalBudget += (accbudget.getMarch() < 0) ? 0 : accbudget.getMarch();
                    totalBudget += (accbudget.getApril() < 0) ? 0 : accbudget.getApril();
                    totalBudget += (accbudget.getMay() < 0) ? 0 : accbudget.getMay();
                    totalBudget += (accbudget.getJune() < 0) ? 0 : accbudget.getJune();
                    totalBudget += (accbudget.getJuly() < 0) ? 0 : accbudget.getJuly();
                    totalBudget += (accbudget.getAug() < 0) ? 0 : accbudget.getAug();
                    totalBudget += (accbudget.getSept() < 0) ? 0 : accbudget.getSept();
                    totalBudget += (accbudget.getOct() < 0) ? 0 : accbudget.getOct();
                    totalBudget += (accbudget.getNov() < 0) ? 0 : accbudget.getNov();
                    totalBudget += (accbudget.getDecember() < 0) ? 0 : accbudget.getDecember();
                }
            }
            obj.put("totalBudget", totalBudget);
            obj.put("monthBudget", monthBudgetTotal);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getMonthlyBudgetJson : " + ex.getMessage(), ex);
        }
        return obj;
    }
    
    

  @Override
    public Date getDateForExcludePreviousYearBalanceFilter(JSONObject paramJobj, Date startDate) {
        Date start = null;
        try {
            KwlReturnObject cpresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(),paramJobj.getString(Constants.companyKey));
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cpresult.getEntityList().get(0);
            Calendar cal = Calendar.getInstance();
            cal.setTime(startDate);

            Calendar finacialcal = Calendar.getInstance();
            finacialcal.setTime(pref.getFinancialYearFrom());
            int startYear = cal.get(Calendar.YEAR);
            int startMonth = cal.get(Calendar.MONTH);

            int finacialcalYear = finacialcal.get(Calendar.YEAR);
            int finacialcalMonth = finacialcal.get(Calendar.MONTH);
            if (startMonth < finacialcalMonth && !(startYear < finacialcalYear)) {
                startYear = startYear - 1;
            }
            Calendar annualcal = Calendar.getInstance();
            annualcal.set(Calendar.YEAR, startYear);
            annualcal.set(Calendar.DAY_OF_MONTH, finacialcal.get(Calendar.DAY_OF_MONTH));
            annualcal.set(Calendar.MONTH, finacialcalMonth);
            String sstart = authHandler.getDateOnlyFormat().format(annualcal.getTime());
            start = authHandler.getDateOnlyFormat().parse(sstart);
            LocalDate localStartDate = new LocalDate(start);
            Date tempDate = localStartDate.toDate();
            Calendar cal1 = Calendar.getInstance();
            SimpleDateFormat df = new SimpleDateFormat();

            df.applyPattern("MMMM d, yyyy");
            cal1.setTime(new Date(df.format(tempDate)));
            String sstart1 = authHandler.getDateOnlyFormat().format(cal1.getTime());
            start = authHandler.getDateOnlyFormat().parse(sstart1);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return start;
    }
   public void createJEDetailPaymentTypeMap(Payment tempp, Map<String, Integer> jeDetailPaymentTypeMap) throws ServiceException {
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
        HashMap<String, Object> requestParamsMap = new HashMap();
        filter_names.add("payment.ID");
        filter_params.add(tempp.getID());
        requestParamsMap.put("filter_names", filter_names);
        requestParamsMap.put("filter_params", filter_params);
        //Check for Advance Payment
        List<AdvanceDetail> detailsListAdvanced = accVendorPaymentobj.getPaymentDetailAdvanced(tempp.getID());
        if (detailsListAdvanced!=null && detailsListAdvanced.size() > 0 ) {
            for (AdvanceDetail detail : detailsListAdvanced) {
                if(detail.getTotalJED()!=null && !StringUtil.isNullOrEmpty(detail.getTotalJED().getID())){
                    jeDetailPaymentTypeMap.put(detail.getTotalJED().getID(), Constants.AdvancePayment);
                }
            }
        }
        //Check for payment against invoice
        KwlReturnObject resultPaymentDetails = accVendorPaymentobj.getPaymentDetails(requestParamsMap);
        List<PaymentDetail> tempListresultPaymentDetails = resultPaymentDetails.getEntityList();
        if (tempListresultPaymentDetails!=null && tempListresultPaymentDetails.size() > 0 ) {
            for (PaymentDetail detail : tempListresultPaymentDetails) {
                if(detail.getTotalJED()!=null && !StringUtil.isNullOrEmpty(detail.getTotalJED().getID())){
                    jeDetailPaymentTypeMap.put(detail.getTotalJED().getID(), Constants.PaymentAgainstInvoice);
                }
            }
        }
        //Check for payment against CN/DN
        KwlReturnObject resultCNPaymentDet = accVendorPaymentobj.getCreditNotePaymentDetails(requestParamsMap);
        List<CreditNotePaymentDetails> tempListresultCNPaymentDet = resultCNPaymentDet.getEntityList();
        if (tempListresultCNPaymentDet!=null && tempListresultCNPaymentDet.size() > 0 ) {
            for (CreditNotePaymentDetails detail : tempListresultCNPaymentDet) {
                if(detail.getTotalJED()!=null && !StringUtil.isNullOrEmpty(detail.getTotalJED().getID())){
                    jeDetailPaymentTypeMap.put(detail.getTotalJED().getID(), Constants.PaymentAgainstCNDN);
                }
            }
        }
        //Check for payment against GL
        List<PaymentDetailOtherwise> detailsList = accVendorPaymentobj.getPaymentDetailOtherwise(tempp.getID());
        if (detailsList!=null && detailsList.size() > 0 ) {
            for (PaymentDetailOtherwise detail : detailsList) {
                if(detail.getTotalJED()!=null && !StringUtil.isNullOrEmpty(detail.getTotalJED().getID())){
                    jeDetailPaymentTypeMap.put(detail.getTotalJED().getID(), Constants.GLPayment);
                } else if(detail.getGstJED()!=null && !StringUtil.isNullOrEmpty(detail.getGstJED().getID())) {
                    jeDetailPaymentTypeMap.put(detail.getGstJED().getID(), Constants.GLPayment);
                }
            }
        }
    }
    public void createJEDetailPaymentTypeMapNew(Payment tempp, Map<String, Integer> jeDetailPaymentTypeMap,String companyid) throws ServiceException {
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
        HashMap<String, Object> requestParamsMap = new HashMap();
        filter_names.add("payment.ID");
        filter_params.add(tempp.getID());
        requestParamsMap.put("filter_names", filter_names);
        requestParamsMap.put("filter_params", filter_params);
        //Check for Advance Payment
        List<String> detailsListAdvanced = accVendorPaymentobj.getTotalJEDIDPaymentDetailAdvanced(tempp.getID(),companyid);
        if (detailsListAdvanced != null && detailsListAdvanced.size() > 0) {
            for (String detail : detailsListAdvanced) {
                if (!StringUtil.isNullOrEmpty(detail)) {
                    jeDetailPaymentTypeMap.put(detail, Constants.AdvancePayment);
                }
            }
        }
        //Check for payment against invoice
        List<String> tempListresultPaymentDetails = accVendorPaymentobj.getTotalJEDIDPaymentDetails(tempp.getID(),companyid);
        if (tempListresultPaymentDetails != null && tempListresultPaymentDetails.size() > 0) {
            for (String detail : tempListresultPaymentDetails) {
                if (!StringUtil.isNullOrEmpty(detail)) {
                    jeDetailPaymentTypeMap.put(detail, Constants.PaymentAgainstInvoice);
                }
            }
        }
        //Check for payment against CN/DN
        List<String> tempListresultCNPaymentDet = accVendorPaymentobj.getTotalJEDIDCreditNotePaymentDetails(tempp.getID(),companyid);
        if (tempListresultCNPaymentDet != null && tempListresultCNPaymentDet.size() > 0) {
            for (String detail : tempListresultCNPaymentDet) {
                if (!StringUtil.isNullOrEmpty(detail)) {
                    jeDetailPaymentTypeMap.put(detail, Constants.PaymentAgainstCNDN);
                }
            }
        }
        //Check for payment against GL
        List<PaymentDetailOtherwise> detailsList = accVendorPaymentobj.getPaymentDetailOtherwise(tempp.getID());
        if (detailsList != null && detailsList.size() > 0) {
            for (PaymentDetailOtherwise detail : detailsList) {
                if (detail.getTotalJED() != null && !StringUtil.isNullOrEmpty(detail.getTotalJED().getID())) {
                    jeDetailPaymentTypeMap.put(detail.getTotalJED().getID(), Constants.GLPayment);
                } else if (detail.getGstJED() != null && !StringUtil.isNullOrEmpty(detail.getGstJED().getID())) {
                    jeDetailPaymentTypeMap.put(detail.getGstJED().getID(), Constants.GLPayment);
                }
            }
        }
    }
     public void createJEDetailReceiptTypeMap(Receipt tempr, Map<String, Integer> jeDetailReceiptTypeMap) throws ServiceException {
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
        HashMap<String, Object> requestParamsMap = new HashMap();
        filter_names.add("receipt.ID");
        filter_params.add(tempr.getID());
        requestParamsMap.put("filter_names", filter_names);
        requestParamsMap.put("filter_params", filter_params);
        
        //Check for Advance Payment
        KwlReturnObject resultAdv = accReceiptDao.getReceiptAdvanceDetails(requestParamsMap);
        List<ReceiptAdvanceDetail> tempListresultAdv = resultAdv.getEntityList();
        if (tempListresultAdv!=null && tempListresultAdv.size() > 0 ) {
            for (ReceiptAdvanceDetail detail : tempListresultAdv) {
                if(detail.getTotalJED()!=null && !StringUtil.isNullOrEmpty(detail.getTotalJED().getID())){
                    jeDetailReceiptTypeMap.put(detail.getTotalJED().getID(), Constants.AdvancePayment);
                }
            }
        }
        //Check for Receipt against invoice
        KwlReturnObject resultReceiptDetail = accReceiptDao.getReceiptDetails(requestParamsMap);
        List<ReceiptDetail> tempListresultReceiptDetail = resultReceiptDetail.getEntityList();
        if (tempListresultReceiptDetail!=null && tempListresultReceiptDetail.size() > 0) {
            for (ReceiptDetail detail : tempListresultReceiptDetail) {
                if(detail.getTotalJED()!=null && !StringUtil.isNullOrEmpty(detail.getTotalJED().getID())){
                    jeDetailReceiptTypeMap.put(detail.getTotalJED().getID(), Constants.PaymentAgainstInvoice);
                }
            }
        }
        //Check for Receipt against CN/DN
        KwlReturnObject resultDNPaymentDet = accReceiptDao.getDebitNotePaymentDetails(requestParamsMap);
        List<DebitNotePaymentDetails> tempListresultDNPaymentDet = resultDNPaymentDet.getEntityList();
        if (tempListresultDNPaymentDet!=null && tempListresultDNPaymentDet.size() > 0 ) {
            for (DebitNotePaymentDetails detail : tempListresultDNPaymentDet) {
                if(detail.getTotalJED()!=null && !StringUtil.isNullOrEmpty(detail.getTotalJED().getID())){
                    jeDetailReceiptTypeMap.put(detail.getTotalJED().getID(), Constants.PaymentAgainstCNDN);
                }
            }
        }
         //Check for Receipt against GL
         KwlReturnObject result = accReceiptDao.getReceiptDetailOtherwise(requestParamsMap);
         List<ReceiptDetailOtherwise> tempList = result.getEntityList();
        if (tempList!=null && tempList.size() > 0 ) {
             for (ReceiptDetailOtherwise detail : tempList) {
                if(detail.getTotalJED()!=null && !StringUtil.isNullOrEmpty(detail.getTotalJED().getID())){
                     jeDetailReceiptTypeMap.put(detail.getTotalJED().getID(), Constants.GLPayment);
                }else if(detail.getGstJED()!=null && !StringUtil.isNullOrEmpty(detail.getGstJED().getID())){
                     jeDetailReceiptTypeMap.put(detail.getGstJED().getID(), Constants.GLPayment);
                 }
             }
         }
    }
    public void createJEDetailReceiptTypeMapNew(Receipt tempr, Map<String, Integer> jeDetailReceiptTypeMap, String companyid) throws ServiceException {
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
        HashMap<String, Object> requestParamsMap = new HashMap();
        filter_names.add("receipt.ID");
        filter_params.add(tempr.getID());
        requestParamsMap.put("filter_names", filter_names);
        requestParamsMap.put("filter_params", filter_params);
        //Check for Advance Payment
        List<String> tempListresultAdv = accReceiptDao.getTotalJEDIDDebitNotePaymentDetails(tempr.getID(),companyid);
        if (tempListresultAdv != null && tempListresultAdv.size() > 0) {
            for (String detail : tempListresultAdv) {
                if (!StringUtil.isNullOrEmpty(detail)) {
                    jeDetailReceiptTypeMap.put(detail, Constants.AdvancePayment);
                }
            }
        }
        //Check for Receipt against invoice
        List<String> tempListresultReceiptDetail = accReceiptDao.getTotalJEDIDReceiptDetails(tempr.getID(),companyid);
        if (tempListresultReceiptDetail != null && tempListresultReceiptDetail.size() > 0) {
            for (String detail : tempListresultReceiptDetail) {
                if (!StringUtil.isNullOrEmpty(detail)) {
                    jeDetailReceiptTypeMap.put(detail, Constants.PaymentAgainstInvoice);
                }
            }
        }
        //Check for Receipt against CN/DN
        List<String> tempListresultDNPaymentDet = accReceiptDao.getTotalJEDIDDebitNotePaymentDetails(tempr.getID(),companyid);
        if (tempListresultDNPaymentDet != null && tempListresultDNPaymentDet.size() > 0) {
            for (String detail : tempListresultDNPaymentDet) {
                if (!StringUtil.isNullOrEmpty(detail)) {
                    jeDetailReceiptTypeMap.put(detail, Constants.PaymentAgainstCNDN);
                }
            }
        }
        //Check for Receipt against GL
        KwlReturnObject result = accReceiptDao.getReceiptDetailOtherwise(requestParamsMap);
        List<ReceiptDetailOtherwise> tempList = result.getEntityList();
        if (tempList != null && tempList.size() > 0) {
            for (ReceiptDetailOtherwise detail : tempList) {
                if (detail.getTotalJED() != null && !StringUtil.isNullOrEmpty(detail.getTotalJED().getID())) {
                    jeDetailReceiptTypeMap.put(detail.getTotalJED().getID(), Constants.GLPayment);
                } else if (detail.getGstJED() != null && !StringUtil.isNullOrEmpty(detail.getGstJED().getID())) {
                    jeDetailReceiptTypeMap.put(detail.getGstJED().getID(), Constants.GLPayment);
                }
            }
        }
    }
    
    private JSONObject getConfiguredTypeJSON(JSONArray descJsonArr, int type) {
        JSONObject searchedJSON = new JSONObject(); 
        try {
            for(int cnt=0; cnt< descJsonArr.length(); cnt++) {
                if(descJsonArr.getJSONObject(cnt).optInt("type", -1)==type) {
                    searchedJSON = descJsonArr.getJSONObject(cnt);
                    break;
                }
            }
        }catch(Exception ex) {
        } finally {
            return searchedJSON;
        }
    }

    @Override
    public void clearMaps(Map<String, BillingInvoice> billingInvoiceMapGL, Map<String, BillingGoodsReceipt> billingGrMapGL, Map<String, Object[]> billingCreditNoteMapGL, Map<String, Object[]> billingDebitNoteMapGL, Map<String, Object[]> billingPaymentReceivedMapGL, Map<String, Object[]> billingPaymentMadeMapGL, Map<String, Invoice> invoiceMapGL, Map<String, GoodsReceipt> grMapGL,Map<String, Object[]> creditNoteMapGL,Map<String, Object[]> creditNoteMapVendorGL,Map<String, Object[]> debitNoteMapGL,Map<String, Object[]> debitNoteMapCustomerGL,Map<String, Object[]> paymentReceivedMapGL,Map<String, Object[]> paymentMadeMapGL,Map<String, GoodsReceipt> fixedAssetgrMapGL,Map<String, Invoice> fixedAssetInvoiceMapGL,Map<String, Invoice> cashSalesGL,Map<String, GoodsReceipt> cashPurchaseGL,Map<String, Integer> jeDetailPaymentTypeMapGL,Map<String, Integer> jeDetailReceiptTypeMapGL){
        try {
            billingInvoiceMapGL.clear();
            billingGrMapGL.clear();
            billingCreditNoteMapGL.clear();
            billingDebitNoteMapGL.clear();
            billingPaymentReceivedMapGL.clear();
            billingPaymentMadeMapGL.clear();
            invoiceMapGL.clear();
            grMapGL.clear();
            creditNoteMapGL.clear();
            creditNoteMapVendorGL.clear();
            debitNoteMapGL.clear();
            debitNoteMapCustomerGL.clear();
            paymentReceivedMapGL.clear();
            paymentMadeMapGL.clear();
            fixedAssetgrMapGL.clear();
            fixedAssetInvoiceMapGL.clear();
            cashSalesGL.clear();
            cashPurchaseGL.clear();
            jeDetailPaymentTypeMapGL.clear();
            jeDetailReceiptTypeMapGL.clear();
        } catch (Exception ex) {
            System.out.println("Exception in clearing maps: " + ex.getMessage());
        }
    }

    @Override
    public JSONObject getLedgerForGL(HttpServletRequest request, Map<String, BillingInvoice> billingInvoiceMapGL, Map<String, BillingGoodsReceipt> billingGrMapGL, Map<String, Object[]> billingCreditNoteMapGL, Map<String, Object[]> billingDebitNoteMapGL, Map<String, Object[]> billingPaymentReceivedMapGL, Map<String, Object[]> billingPaymentMadeMapGL, Map<String, Invoice> invoiceMapGL, Map<String, GoodsReceipt> grMapGL, Map<String, Object[]> creditNoteMapGL, Map<String, Object[]> creditNoteMapVendorGL, Map<String, Object[]> debitNoteMapGL, Map<String, Object[]> debitNoteMapCustomerGL, Map<String, Object[]> paymentReceivedMapGL, Map<String, Object[]> paymentMadeMapGL, Map<String, GoodsReceipt> fixedAssetgrMapGL, Map<String, Invoice> fixedAssetInvoiceMapGL, Map<String, Invoice> leaseInvoiceMapGL, Map<String, Integer> jeDetailPaymentTypeMapGL, Map<String, Integer> jeDetailReceiptTypeMapGL) throws ServiceException, SessionExpiredException {
        {
            JSONObject jobj = new JSONObject();
            List accountlist = new ArrayList();
            try {
                boolean includeExcludeChildBalances = request.getParameter("includeExcludeChildBalances") != null ? Boolean.parseBoolean(request.getParameter("includeExcludeChildBalances")) : true;
                boolean issubGeneralLedger = request.getParameter("issubGeneralLedger") != null ? Boolean.parseBoolean(request.getParameter("issubGeneralLedger")) : false;
                String subGroupHeader = "";
                String mainGroupHeader = "";
                int accountTransactionType=request.getParameter("accountTransactionType") != null ? Integer.parseInt(request.getParameter("accountTransactionType").toString()) : Constants.All_Transaction_TypeID;
                Map<String, Object> subLedgerMap = new HashMap<String, Object>();
                if (issubGeneralLedger) {
                     mainGroupHeader = StringUtil.isNullOrEmpty((String) request.getParameter("mainGroupJSON")) ? (StringUtil.isNullOrEmpty((String) request.getAttribute("mainGroupJSON")) ? "" : (String) request.getAttribute("mainGroupJSON")) : (String) request.getParameter("mainGroupJSON");
                     subGroupHeader = StringUtil.isNullOrEmpty((String) request.getParameter("subGroupJSON")) ? (StringUtil.isNullOrEmpty((String) request.getAttribute("subGroupJSON")) ? "" : (String) request.getAttribute("subGroupJSON")) : (String) request.getParameter("subGroupJSON");
                }
                subLedgerMap.put(Constants.SUB_GROUP_HEADER, subGroupHeader);
                subLedgerMap.put(Constants.MAIN_GROUP_HEADER, mainGroupHeader);
                subLedgerMap.put(Constants.IS_SUB_LEDGER_EXPORT, issubGeneralLedger);
                double total = 0;
                String accountid = "";
                String selectedCurrencyIds = request.getParameter("currencyIds") != null ? request.getParameter("currencyIds") : "";
                double balanceAmount = 0;
                double OpeningBalanceInAccountCurrency = 0;
                double balanceAmountAccountCurrency = 0;
                double totalAccountCurrency = 0;
                accountid = StringUtil.isNullOrEmpty((String) request.getParameter("accountid")) ? (StringUtil.isNullOrEmpty((String) request.getAttribute("accountid")) ? "" : (String) request.getAttribute("accountid")) : (String) request.getParameter("accountid");
                boolean ledgerReportFlag = request.getParameter("ledgerReport") != null ? Boolean.parseBoolean(request.getParameter("ledgerReport")) : false;
                boolean generalLedgerFlag = false;
                if (!StringUtil.isNullOrEmpty(request.getParameter("generalLedgerFlag"))) {
                    generalLedgerFlag = Boolean.parseBoolean((String) request.getParameter("generalLedgerFlag"));
                }
                int accountidCount = 0;
                if (!StringUtil.isNullOrEmpty(accountid)) {
                    accountidCount = accountid.split(",").length;
                }
//            DecimalFormat df = new DecimalFormat("#,##0.00");
                //Used GlobalDateFormat to avoid change in time as per time zone. ERP-8482
                SimpleDateFormat formatter = (SimpleDateFormat) authHandler.getDateOnlyFormat(); //ERP-18543 - Mayur B
                Date endDate = formatter.parse(request.getParameter("enddate")); 
                Date startDate = formatter.parse(request.getParameter("stdate"));
                Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();  //end date used to calculate Opening Balance
                if (accountid.equalsIgnoreCase("All")) {
                    HashMap<String, Object> requestParams = accAccountHandler.getRequestMap(request);
                    requestParams.put("nondeleted", "true");
                    requestParams.put(Constants.start, "");
                    requestParams.put("limit", "");
                    KwlReturnObject result = accAccountDAOobj.getAccountsForCombo(requestParams);
                    accountlist = result.getEntityList();
                } else {  //addd for miltiple bank accounts selection
                    String AccountidGroup[] = accountid.split(",");
                    for (int i = 0; i < accountidCount; i++) {
                        KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), AccountidGroup[i]);
                        Account account = (Account) accresult.getEntityList().get(0);
                        accountlist.add(account);
                        if (generalLedgerFlag) {
                            if (includeExcludeChildBalances) {
                                accountlist = getChildAccounts(accountlist, account);
                            }
                        } else {
                            accountlist = getChildAccounts(accountlist, account);
                        }
                    }
                }
                boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
                String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                boolean eliminateflag = consolidateFlag;
                boolean excludePreviousYear = request.getParameter("excludePreviousYear") != null ? Boolean.parseBoolean(request.getParameter("excludePreviousYear")) : false;
                Date start = new Date(1970);
                Boolean bankBook = Boolean.parseBoolean((String) request.getParameter("bankBook"));
                Boolean ledgerReport = Boolean.parseBoolean((String) request.getParameter("ledgerReport"));
                String companyid = sessionHandlerImpl.getCompanyid(request);
                KwlReturnObject prefresult = null;
                CompanyAccountPreferences pref = null;
                String cashAccount = "";
                if (!consolidateFlag) {
                    prefresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
                    pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
                    cashAccount = pref.getCashAccount().getID();
                }
                HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
                reqParams.put(Constants.REQ_startdate, request.getParameter("stdate"));
                reqParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
                reqParams.put("dateformat", authHandler.getDateOnlyFormat());
                Map<String, BillingInvoice> billingInvoiceMap = new HashMap<String, BillingInvoice>();
                Map<String, BillingGoodsReceipt> billingGrMap = new HashMap<String, BillingGoodsReceipt>();
                Map<String, Object[]> billingCreditNoteMap = new HashMap<String, Object[]>();
                Map<String, Object[]> billingDebitNoteMap = new HashMap<String, Object[]>();
                Map<String, Object[]> billingPaymentReceivedMap = new HashMap<String, Object[]>();
                Map<String, Object[]> billingPaymentMadeMap = new HashMap<String, Object[]>();
                Map<String, Invoice> invoiceMap = new HashMap<String, Invoice>();
                Map<String, GoodsReceipt> grMap = new HashMap<String, GoodsReceipt>();
                Map<String, Object[]> creditNoteMap = new HashMap<String, Object[]>();
                Map<String, Object[]> creditNoteMapVendor = new HashMap<String, Object[]>();
                Map<String, Object[]> debitNoteMap = new HashMap<String, Object[]>();
                Map<String, Object[]> debitNoteMapCustomer = new HashMap<String, Object[]>();
                Map<String, Object[]> paymentReceivedMap = new HashMap<String, Object[]>();
                Map<String, Object[]> paymentMadeMap = new HashMap<String, Object[]>();
                Map<String, GoodsReceipt> fixedAssetgrMap = new HashMap<String, GoodsReceipt>();
                Map<String, Invoice> fixedAssetInvoiceMap = new HashMap<String, Invoice>();
                Map<String, Invoice> leaseInvoiceMap = new HashMap<String, Invoice>();
                Map<String, Integer> jeDetailPaymentTypeMap = new HashMap<String, Integer>();
                Map<String, Integer> jeDetailReceiptTypeMap = new HashMap<String, Integer>();
                if (!consolidateFlag) {
                    billingInvoiceMap = billingInvoiceMapGL;
                    billingGrMap = billingGrMapGL;
                    billingCreditNoteMap = billingCreditNoteMapGL;
                    billingDebitNoteMap = billingDebitNoteMapGL;
                    billingPaymentReceivedMap = billingPaymentReceivedMapGL;
                    billingPaymentMadeMap = billingPaymentMadeMapGL;
                    invoiceMap = invoiceMapGL;
                    grMap = grMapGL;
                    creditNoteMap = creditNoteMapGL;
                    creditNoteMapVendor = creditNoteMapVendorGL;
                    debitNoteMap = debitNoteMapGL;
                    debitNoteMapCustomer = debitNoteMapCustomerGL;
                    paymentReceivedMap = paymentReceivedMapGL;
                    paymentMadeMap = paymentMadeMapGL;
                    fixedAssetgrMap = fixedAssetgrMapGL;
                    fixedAssetInvoiceMap = fixedAssetInvoiceMapGL;
                    leaseInvoiceMap = leaseInvoiceMapGL;
                    jeDetailPaymentTypeMap = jeDetailPaymentTypeMapGL;
                    jeDetailReceiptTypeMap = jeDetailReceiptTypeMapGL;
                }
                Iterator iterator = accountlist.iterator();
                JSONArray jArr = new JSONArray();
                HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                String currencyid = sessionHandlerImpl.getCurrencyID(request);
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

                while (iterator.hasNext()) {
                    balanceAmount = 0;
                    balanceAmountAccountCurrency = 0;   //ERP-8853
                    total = 0;
                    OpeningBalanceInAccountCurrency = 0;
                    Object listObj = iterator.next();
                    Account account = (Account) listObj;
                    accountid = account.getID();
                    boolean showOpeningBalanceSeprately = true;
                    if (excludePreviousYear && account.getAccounttype() == 0) {
                        
                        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                        start = getDateForExcludePreviousYearBalanceFilter(paramJobj, startDate);
                    } else {
                        start = null;
                    }
                    // calculate opening balance of account
                    double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccount(request, account, false, null);

                    boolean shouldAccountOpeningBalanceInclude = !accInvoiceCommon.accountHasOpeningTransactions(request, account, false, null);

                    if (shouldAccountOpeningBalanceInclude) {
                        OpeningBalanceInAccountCurrency = account.getOpeningBalance();
                    } else {
                        String accountcurrencyid = account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID();
                        KwlReturnObject crresult11 = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, accountOpeningBalanceInBase, accountcurrencyid, account.getCreationDate(), 0);
                        OpeningBalanceInAccountCurrency = (Double) crresult11.getEntityList().get(0);
                        OpeningBalanceInAccountCurrency = authHandler.round(OpeningBalanceInAccountCurrency, companyid);
                    }

                    if (bankBook) {
                        balanceAmountAccountCurrency = 0;
                    }
                    double OpeningBalanceInBaseCurrency = accountOpeningBalanceInBase;

                    if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_Search_Json))) { // ERP-11394 reset opening balance in case of advance serach
                        accountOpeningBalanceInBase = 0;
                        OpeningBalanceInBaseCurrency = 0;
                        OpeningBalanceInAccountCurrency = 0;
                    }

                    //BUG Fixed #16739 : Creation date check
                    Date createdOn = AccountingManager.resetTimeField(account.getCreationDate());
                    Date toDate = AccountingManager.resetTimeField(endDate);
                    if (toDate.compareTo(createdOn) < 0) {
                        jobj.put(Constants.RES_data, new JSONArray()); //Return Empty Data
                        return jobj;
                    }

                    String entryChar = "c", emptyChar = "d";
                    double balance = 0;
                    double balanceAccountCurrency = 0;
                    double openingBalance = 0.00;
                    double openingBalanceAccountCurrency = 0.00;
                    balance = getAccountBalanceMerged(request, accountid, excludePreviousYear ? start : null, openBalEndDate, eliminateflag);
                    String mappedAccIDs = accountid + ",";
                    if (consolidateFlag) {//Fetch mapped account's balances.
                        List mapaccresult = accAccountDAOobj.getMappedAccountsForReports(accountid);
                        Iterator<Object[]> itr1 = mapaccresult.iterator();
                        String mappedaccountid = "";
                        while (itr1.hasNext()) {
                            Object[] row = (Object[]) itr1.next();
                            mappedaccountid = row[0].toString();
                            mappedAccIDs += mappedaccountid + ",";
                            KwlReturnObject childObj = accountingHandlerDAOobj.loadObject(Account.class.getName(), mappedaccountid);
                            Account child = (Account) childObj.getEntityList().get(0);
                            request.setAttribute(Constants.companyKey, child.getCompany().getCompanyID());
                            request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);

                            balance += getAccountBalanceMerged(request, mappedaccountid, excludePreviousYear ? start : null, openBalEndDate, eliminateflag);
                        }
                    }
                    if (balance != 0) {
                        balanceAccountCurrency = getAccountBalanceInOriginalCurrency(request, accountid, excludePreviousYear ? start : null, openBalEndDate);
                        mappedAccIDs = accountid + ",";
                        if (consolidateFlag) {//Fetch mapped account's balances.
                            List mapaccresult = accAccountDAOobj.getMappedAccountsForReports(accountid);
                            Iterator<Object[]> itr1 = mapaccresult.iterator();
                            String mappedaccountid = "";
                            while (itr1.hasNext()) {
                                Object[] row = (Object[]) itr1.next();
                                mappedaccountid = row[0].toString();
                                mappedAccIDs += mappedaccountid + ",";
                                KwlReturnObject childObj = accountingHandlerDAOobj.loadObject(Account.class.getName(), mappedaccountid);
                                Account child = (Account) childObj.getEntityList().get(0);
                                request.setAttribute(Constants.companyKey, child.getCompany().getCompanyID());
                                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);

                                balanceAccountCurrency += getAccountBalanceInOriginalCurrency(request, mappedaccountid, excludePreviousYear ? start : null, openBalEndDate);
                            }
                        }
                    }
                    Date sDate = AccountingManager.resetTimeField(startDate);
                    if (sDate.after(createdOn)) {
                        balance += accountOpeningBalanceInBase;
                        balanceAccountCurrency += OpeningBalanceInAccountCurrency;
                        showOpeningBalanceSeprately = false;
                    }
                    if (balance != 0) {
                        if (balance > 0) {
                            entryChar = "d";
                            emptyChar = "c";
                        } else {
                            entryChar = "c";
                            emptyChar = "d";
                        }
                        JSONObject objlast = new JSONObject();
                        objlast.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(startDate));
                        objlast.put(entryChar + "_accountname", "Balance b/d");
                        objlast.put(entryChar + "_acccode", "");
                        objlast.put(entryChar + "_journalentryid", "");
                        objlast.put(entryChar + "_amountAccountCurrency", Math.abs(balanceAccountCurrency));
                        objlast.put(entryChar + "_transactionID", "");
                        objlast.put(entryChar + "_transactionDetails", "");
                        objlast.put(entryChar + "_transactionDetailsForExpander", "");
                        objlast.put(entryChar + "_transactionDetailsBankBook", "");
                        objlast.put(entryChar + "_checkno", "");
                        objlast.put(entryChar + "_description", "");
                        objlast.put(entryChar + "_amount", Math.abs(balance));
                        objlast.put(emptyChar + "_date", "");
                        objlast.put(emptyChar + "_accountname", "");
                        objlast.put(emptyChar + "_journalentryid", "");
                        objlast.put(emptyChar + "_amount", "");
                        objlast.put(emptyChar + "_transactionID", "");
                        objlast.put(emptyChar + "_transactionDetails", "");
                        objlast.put(emptyChar + "_transactionDetailsForExpander", "");
                        objlast.put(emptyChar + "_transactionDetailsBankBook", "");
                        objlast.put(emptyChar + "_checkno", "");
                        objlast.put(emptyChar + "_description", "");
                        objlast.put("accountid", accountid);
//                    if (bankBook) {
                        objlast.put("currencysymbol", account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol());
                        objlast.put("currencycode", account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode());
//                    }
                        String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                        objlast.put("accountname", accountname);

                        String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                        objlast.put("accCode", acccode);
                        objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());

                        // this is for displaying on the group header
                        if (!acccode.equals("") && account.getName().equals("")) {
                            objlast.put("accCodeName", acccode);
                        } else if (!acccode.equals("") && !account.getName().equals("")) {
                            objlast.put("accCodeName", acccode + " - " + account.getName());
                        } else {
                            objlast.put("accCodeName", accountname);
                        }

                        if (entryChar.equals("d")) {
                            balanceAmount = balanceAmount + Math.abs(balance);
                            objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                            balanceAmountAccountCurrency = balanceAmountAccountCurrency + Math.abs(balanceAccountCurrency);
                            objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                        } else if (entryChar.equals("c")) {
                            balanceAmount = balanceAmount - Math.abs(balance);
                            objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                            balanceAmountAccountCurrency = balanceAmountAccountCurrency - Math.abs(balanceAccountCurrency);
                            objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                        }
                        jArr.put(objlast);

                        if (request.getParameter("filetype") != null) {
                            if (request.getParameter("filetype").equals("print") || request.getParameter("filetype").equals("csv")) {
                                if (emptyChar == "d") {
                                    total = total + Math.abs(balance);
                                    totalAccountCurrency = totalAccountCurrency + Math.abs(balanceAccountCurrency);
                                }
                            }
                        }
                    }

                    if (showOpeningBalanceSeprately) {//shows opening balance if date from in account ceration date
                        if (OpeningBalanceInAccountCurrency != 0) {
                            if (OpeningBalanceInAccountCurrency > 0) {
                                entryChar = "d";
                                emptyChar = "c";
                                balance += OpeningBalanceInBaseCurrency;
                                balanceAccountCurrency += OpeningBalanceInAccountCurrency;
                            } else {
                                balance += OpeningBalanceInBaseCurrency;
                                balanceAccountCurrency += OpeningBalanceInAccountCurrency;
                                entryChar = "c";
                                emptyChar = "d";
                            }

                            JSONObject objlast = new JSONObject();
                            objlast.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(startDate));
                            objlast.put(entryChar + "_accountname", "Opening Balance");
                            objlast.put(entryChar + "_acccode", "");
                            objlast.put(entryChar + "_journalentryid", "");
                            objlast.put(entryChar + "_amount", Math.abs(OpeningBalanceInBaseCurrency));
                            objlast.put(entryChar + "_amountAccountCurrency", Math.abs(OpeningBalanceInAccountCurrency));
                            objlast.put(entryChar + "_transactionID", "");
                            objlast.put(entryChar + "_transactionDetails", "");
                            objlast.put(entryChar + "_transactionDetailsForExpander", "");
                            objlast.put(entryChar + "_transactionDetailsBankBook", "");
                            objlast.put(entryChar + "_checkno", "");
                            objlast.put(entryChar + "_description", "");
                            objlast.put(emptyChar + "_date", "");
                            objlast.put(emptyChar + "_accountname", "");
                            objlast.put(emptyChar + "_journalentryid", "");
                            objlast.put(emptyChar + "_amount", "");
                            objlast.put(emptyChar + "_transactionID", "");
                            objlast.put(emptyChar + "_transactionDetails", "");
                            objlast.put(emptyChar + "_transactionDetailsForExpander", "");
                            objlast.put(emptyChar + "_transactionDetailsBankBook", "");
                            objlast.put(emptyChar + "_checkno", "");
                            objlast.put(emptyChar + "_description", "");
                            objlast.put("accountid", accountid);
                            objlast.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
                            objlast.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                            String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                            objlast.put("accountname", accountname);

                            String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                            objlast.put("accCode", acccode);
                            objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());

                            // this is for displaying on the group header
                            if (!acccode.equals("") && account.getName().equals("")) {
                                objlast.put("accCodeName", acccode);
                            } else if (!acccode.equals("") && !account.getName().equals("")) {
                                objlast.put("accCodeName", acccode + " - " + account.getName());
                            } else {
                                objlast.put("accCodeName", accountname);
                            }

                            if (entryChar.equals("d")) {
                                balanceAmount = balanceAmount + Math.abs(OpeningBalanceInBaseCurrency);// work on home currency
                                objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                                balanceAmountAccountCurrency = balanceAmountAccountCurrency + Math.abs(OpeningBalanceInAccountCurrency);// work on home currency
                                objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                            } else if (entryChar.equals("c")) {
                                balanceAmount = balanceAmount - Math.abs(OpeningBalanceInBaseCurrency);
                                objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                                balanceAmountAccountCurrency = balanceAmountAccountCurrency - Math.abs(OpeningBalanceInAccountCurrency);
                                objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                            }
                            jArr.put(objlast);

                        }
                    }
                    if (!ledgerReportFlag && !generalLedgerFlag) {//we saves balance brod down or Opening Balance to avoid adding to period balance
                        openingBalance = balance;
                        openingBalanceAccountCurrency = balanceAccountCurrency;
                        balance = 0.00;
                        balanceAccountCurrency = 0.00;
                    }
                    String searchJson = request.getParameter(Constants.Acc_Search_Json);
                    if (!StringUtil.isNullOrEmpty(searchJson)) {//This is used for to Get different dimension entry from dimension name for diffrent modules
                        searchJson = accJournalEntryobj.getJsornStringForSearch(searchJson, mappedAccIDs.split(",")[0],null);
                    }
                    String filterConjuctionCriteria = request.getParameter(InvoiceConstants.Filter_Criteria);

                    KwlReturnObject lresult = accJournalEntryobj.getLedgerMerged(mappedAccIDs, startDate, endDate, eliminateflag, generalLedgerFlag, selectedCurrencyIds, filterConjuctionCriteria, searchJson,0,0,pref);
                    List list = lresult.getEntityList();
                    Iterator itr = list.iterator();

                    if (itr.hasNext()) { //For Displaying Group Name in CSV and PDF
                        String fileType = request.getParameter("filetype");
                        if (!bankBook && ledgerReportFlag && fileType != null && (fileType.equals("csv") || fileType.equals("pdf") || fileType.equals("print"))) {
                            JSONObject accountGroup = addAccountGroupJson(account);;
                            jArr.put(accountGroup);
                        }
                    }
                    // System.out.println("All JEs with there amounts:"); //ERP-8660- to find out difference in GL and T Ledger report
                    while (itr.hasNext()) {

                        JournalEntry entry = null;
                        JournalEntryDetail jed = null;
                        Object[] row = (Object[]) itr.next();
                        if (row[0] instanceof JournalEntry && row[1] instanceof JournalEntryDetail) {
                            entry = (JournalEntry) row[0];
                            jed = (JournalEntryDetail) row[1];
                        } else {
                            String jeid = (String) row[0];
                            String jedid = (String) row[1];

                            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(JournalEntry.class.getName(), jeid);
                            entry = (JournalEntry) jeresult.getEntityList().get(0);
                            jeresult = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), jedid);
                            jed = (JournalEntryDetail) jeresult.getEntityList().get(0);
                        }
                        if (consolidateFlag) {
                            companyid = entry.getCompany().getCompanyID();
                            request.setAttribute(Constants.companyKey, companyid);
                            request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                            requestParams.put(Constants.companyKey, companyid);
                            requestParams.put(Constants.globalCurrencyKey, gcurrencyid);

                            prefresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
                            pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
                            cashAccount = pref.getCashAccount().getID();
                        }

                        currencyid = (jed.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : jed.getJournalEntry().getCurrency().getCurrencyID());
//                        String transactionCurrency = currencyid;
                        JSONObject obj = new JSONObject();
                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, jed.getAmount(), currencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                        double transactionAmount = jed.getAmount();
                        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                        Date transactionDate = jed.getJournalEntry().getEntryDate();
                        String transactionDateString = "";
                        if (transactionDate != null) {
                            transactionDateString = dateFormat.format(transactionDate);
                        }
                        double amountindocumentcurrency = 0;      //For GL excel Sheet
                        amountindocumentcurrency = jed.getAmount();
                        KwlReturnObject crresult1 = null;
                        if (currencyid.equals(jed.getAccount().getCurrency().getCurrencyID())) {
                            crresult1 = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, jed.getAmount(), currencyid, jed.getAccount().getCurrency().getCurrencyID(), jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                        } else {
                            crresult1 = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, jed.getAmount(), currencyid, jed.getAccount().getCurrency().getCurrencyID(), jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());

                        }
                        double amountBaseCurrency = (Double) crresult.getEntityList().get(0);
                        amountBaseCurrency = authHandler.round(amountBaseCurrency, companyid);
                        double amountAccountCurrency = 0;
                        if ((bankBook || ledgerReport) && jed.getJournalEntry().getIsReval() > 0) {
                            amountAccountCurrency = 0;
                        } else {
                            if ((jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate() != 1) || ((jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate() == 1) && jed.getJournalEntry().isIsmulticurrencypaymentje())) {    // If this JE is for that payment, which is having payment currency and payment method currency different.
                                KwlReturnObject baseCurrencyToPaymentCurrencyResult = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, amountBaseCurrency, currencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                                double baseCurrencyToPaymentCurrencyConvertedAmount = (Double) baseCurrencyToPaymentCurrencyResult.getEntityList().get(0);
                                double baseCurrencyToPaymentMethodCurrencyConvertedAmount = baseCurrencyToPaymentCurrencyConvertedAmount * jed.getJournalEntry().getPaymentcurrencytopaymentmethodcurrencyrate();
                                amountAccountCurrency = baseCurrencyToPaymentMethodCurrencyConvertedAmount;
                                amountAccountCurrency = authHandler.round(amountAccountCurrency, companyid);
                            } else {
                                amountAccountCurrency = (Double) crresult1.getEntityList().get(0);
                                amountAccountCurrency = authHandler.round(amountAccountCurrency, companyid);
                            }
                        }
                        if (jed.isDebit()) {
                            balance += authHandler.round(amountBaseCurrency, companyid);
                            balanceAccountCurrency += authHandler.round(amountAccountCurrency, companyid);
                            entryChar = "d";
                            emptyChar = "c";
                        } else {
                            balance -= authHandler.round(amountBaseCurrency, companyid);
                            balanceAccountCurrency -= authHandler.round(amountAccountCurrency, companyid);
                            entryChar = "c";
                            emptyChar = "d";
                        }

       //             System.out.println(""+jed.getJournalEntry().getEntryNumber()+"  "+amountBaseCurrency); //ERP-8660- to find out difference in GL and T Ledger report
                        Set details = entry.getDetails();
                        Iterator iter = details.iterator();
                        List<String> accnameList = new ArrayList<String>();
                        String accountName = "";
                        String accountCode = "";
                        String customerVendorId = "";
                        String customerVendorName = "";
                        int accountpersontype = 99;
                        while (iter.hasNext()) {
                            JournalEntryDetail d = (JournalEntryDetail) iter.next();
                            if (d.isDebit() == jed.isDebit()) {
                                continue;
                            }
//                        String accname = StringUtil.isNullOrEmpty(d.getAccount().getAcccode()) ? d.getAccount().getName() : "[" + d.getAccount().getAcccode() + "] " + d.getAccount().getName();
                            String accname = StringUtil.isNullOrEmpty(d.getAccount().getName()) ? "" : d.getAccount().getName();
                            accnameList.add(accname);
                            //String acccode = StringUtil.isNullOrEmpty(d.getAccount().getAcccode()) ? "" : d.getAccount().getAcccode();
//                        accountName += StringUtil.isNullOrEmpty(accname) ? "" : accname + ", ";
                            accountCode += StringUtil.isNullOrEmpty(d.getAccount().getAcccode()) ? "" : d.getAccount().getAcccode() + ", ";
                            customerVendorId = d.getCustomerVendorId();
                            accountpersontype = d.getAccountpersontype();
                            if (accountpersontype != 99 && accountpersontype != 0 && customerVendorId != null) {
                                if (accountpersontype == 1) {
                                    KwlReturnObject resultCustomer = accountingHandlerDAOobj.loadObject(Customer.class.getName(), customerVendorId);
                                    if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
                                        Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                                        customerVendorName = customer.getName();
                                        obj.put("customerVendorName", customer.getName());
                                    }
                                } else if (accountpersontype == 2) {
                                    KwlReturnObject resultVendor = accountingHandlerDAOobj.loadObject(Vendor.class.getName(), customerVendorId);
                                    if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                                        Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                                        customerVendorName = vendor.getName();
                                        obj.put("customerVendorName", vendor.getName());
                                    }
                                }
                            }
                        }
                        //Sorting performed to avoid shuffling in two A/C name in Single String object. //ERP-8519
                        Collections.sort(accnameList);
                        for (String accName : accnameList) {
                            accountName += StringUtil.isNullOrEmpty(accName) ? "" : accName + ", ";
                        }
                        accountName = StringUtil.isNullOrEmpty(accountName) ? "" : accountName.substring(0, Math.max(0, accountName.length() - 2));
                        accountCode = StringUtil.isNullOrEmpty(accountCode) ? "" : accountCode.substring(0, Math.max(0, accountCode.length() - 2));
                        accountName = (StringUtil.isNullOrEmpty(accountName) && !StringUtil.isNullOrEmpty(accountCode)) ? accountCode : accountName;
                        obj.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(entry.getEntryDate()));
                        if (!StringUtil.isNullOrEmpty(customerVendorName) && (bankBook || ledgerReport)) {
                            obj.put(entryChar + "_accountname", customerVendorName);
                        } else {
                            obj.put(entryChar + "_accountname", accountName);
                        }
                        obj.put(entryChar + "_acccode", accountCode);
                        obj.put(entryChar + "_entryno", entry.getEntryNumber());
                        obj.put(entryChar + "_externalcurrencyrate", entry.getExternalCurrencyRate());
                        obj.put(entryChar + "_journalentryid", entry.getID());
//                if(withoutinventory.equals("true")){
                        boolean isPartyJournalEntry = entry.getTypeValue() == 2;
                        if (billingInvoiceMap.containsKey(entry.getID())) {
                            if (accountid.equals(cashAccount)) {
                                obj.put(entryChar + "_transactionID", billingInvoiceMap.get(entry.getID()).getBillingInvoiceNumber());
                                obj.put(Constants.billid, billingInvoiceMap.get(entry.getID()).getID());
                                obj.put(entryChar + "_transactionDetails", Constants.CASH_SALE + ", " + billingInvoiceMap.get(entry.getID()).getCustomer().getName());
                                obj.put(entryChar + "_transactionDetailsForExpander", Constants.CASH_SALE + ", " + billingInvoiceMap.get(entry.getID()).getCustomer().getName());
                                obj.put("type", Constants.CASH_SALE);
                            } else {
                                obj.put(entryChar + "_transactionID", billingInvoiceMap.get(entry.getID()).getBillingInvoiceNumber());
                                obj.put(Constants.billid, billingInvoiceMap.get(entry.getID()).getID());
                                obj.put(entryChar + "_transactionDetails", Constants.CUSTOMER_INVOICE + ", " + billingInvoiceMap.get(entry.getID()).getCustomer().getName());
                                obj.put(entryChar + "_transactionDetailsForExpander", Constants.CUSTOMER_INVOICE + ", " + billingInvoiceMap.get(entry.getID()).getCustomer().getName());
                                obj.put("type", Constants.CUSTOMER_INVOICE);
                            }
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", billingInvoiceMap.get(entry.getID()).getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        } else if (billingGrMap.containsKey(entry.getID())) {
                            if (accountid.equals(cashAccount)) {
                                obj.put(entryChar + "_transactionID", billingGrMap.get(entry.getID()).getBillingGoodsReceiptNumber());
                                obj.put(Constants.billid, billingGrMap.get(entry.getID()).getID());
                                obj.put(entryChar + "_transactionDetails", Constants.CASH_PURCHASE + ", " + billingGrMap.get(entry.getID()).getVendor().getName());
                                obj.put(entryChar + "_transactionDetailsForExpander", Constants.CASH_PURCHASE + ", " + billingGrMap.get(entry.getID()).getVendor().getName());
                                obj.put("type", Constants.CASH_PURCHASE);
                            } else {
                                obj.put(entryChar + "_transactionID", billingGrMap.get(entry.getID()).getBillingGoodsReceiptNumber());
                                obj.put(Constants.billid, billingGrMap.get(entry.getID()).getID());
                                obj.put(entryChar + "_transactionDetails", Constants.VENDOR_INVOICE + ", " + billingGrMap.get(entry.getID()).getVendor().getName());
                                obj.put(entryChar + "_transactionDetailsForExpander", Constants.VENDOR_INVOICE + ", " + billingGrMap.get(entry.getID()).getVendor().getName());
                                obj.put("type", Constants.VENDOR_INVOICE);
                            }
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", billingGrMap.get(entry.getID()).getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        } else if (billingCreditNoteMap.containsKey(entry.getID())) {
                            obj.put(entryChar + "_transactionID", ((BillingCreditNote) billingCreditNoteMap.get(entry.getID())[0]).getCreditNoteNumber());
                            obj.put("noteid", ((BillingCreditNote) billingCreditNoteMap.get(entry.getID())[0]).getID());
                            obj.put(entryChar + "_transactionDetails", Constants.CREDIT_NOTE + ", " + ((Customer) billingCreditNoteMap.get(entry.getID())[1]).getName());
                            obj.put(entryChar + "_transactionDetailsForExpander", Constants.CREDIT_NOTE + ", " + ((Customer) billingCreditNoteMap.get(entry.getID())[1]).getName());
                            obj.put("type", Constants.CREDIT_NOTE);
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", ((BillingCreditNote) billingCreditNoteMap.get(entry.getID())[0]).getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        } else if (billingDebitNoteMap.containsKey(entry.getID())) {
                            obj.put(entryChar + "_transactionID", ((BillingDebitNote) billingDebitNoteMap.get(entry.getID())[0]).getDebitNoteNumber());
                            obj.put("noteid", ((BillingDebitNote) billingDebitNoteMap.get(entry.getID())[0]).getID());
                            obj.put(entryChar + "_transactionDetails", Constants.DEBIT_NOTE + ", " + ((Vendor) billingDebitNoteMap.get(entry.getID())[1]).getName());
                            obj.put(entryChar + "_transactionDetailsForExpander", Constants.DEBIT_NOTE + ", " + ((Vendor) billingDebitNoteMap.get(entry.getID())[1]).getName());
                            obj.put("type", Constants.DEBIT_NOTE);
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", ((BillingDebitNote) billingDebitNoteMap.get(entry.getID())[0]).getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        } else if (billingPaymentReceivedMap.containsKey(entry.getID())) {
                            BillingReceipt tempbr = (BillingReceipt) billingPaymentReceivedMap.get(entry.getID())[0];
                            obj.put(entryChar + "_transactionID", tempbr.getBillingReceiptNumber());
                            obj.put(Constants.billid, tempbr.getID());
                            obj.put(entryChar + "_transactionDetails", "Payment received from : " + accountName);
                            obj.put(entryChar + "_transactionDetailsForExpander", "Payment received from : " + accountName);
                            obj.put("type", Constants.PAYMENT_RECEIVED);
                            obj.put("payer", tempbr.getReceivedFrom() != null ? tempbr.getReceivedFrom().getValue() : "");
                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment received from : " + accountName);
                            if (tempbr.getPayDetail() != null && tempbr.getPayDetail().getCheque() != null && !StringUtil.isNullOrEmpty(tempbr.getPayDetail().getCheque().getChequeNo())) {
                                obj.put(entryChar + "_checkno", tempbr.getPayDetail().getCheque().getChequeNo());
                                Date chequeDate = tempbr.getPayDetail().getCheque().getDueDate();
                                String chequeDateString = "";
                                if (chequeDate != null) {
                                    chequeDateString = dateFormat.format(chequeDate);
                                }
                                obj.put(entryChar + "_checkdate", chequeDateString);
                                obj.put(entryChar + "_description", tempbr.getPayDetail().getCheque().getDescription() != null ? tempbr.getPayDetail().getCheque().getDescription() : "");
                            } else {
                                obj.put(entryChar + "_checkno", "");
                                obj.put(entryChar + "_checkdate", "");
                                obj.put(entryChar + "_description", "");
                            }

                        } else if (billingPaymentMadeMap.containsKey(entry.getID())) {
                            BillingPayment tempbp = (BillingPayment) billingPaymentMadeMap.get(entry.getID())[0];
                            obj.put(entryChar + "_transactionID", tempbp.getBillingPaymentNumber());
                            obj.put(Constants.billid, tempbp.getID());
                            obj.put(entryChar + "_transactionDetails", "Payment made to : " + accountName);
                            obj.put(entryChar + "_transactionDetailsForExpander", "Payment made to : " + accountName);
                            obj.put("type", Constants.PAYMENT_MADE);
                            obj.put("payer", tempbp.getPaidTo() != null ? tempbp.getPaidTo().getValue() : "");
                            obj.put(entryChar + "_transactionDetailsBankBook", "Payment made to : " + accountName);
                            if (tempbp.getPayDetail() != null && tempbp.getPayDetail().getCheque() != null && !StringUtil.isNullOrEmpty(tempbp.getPayDetail().getCheque().getChequeNo())) {
                                obj.put(entryChar + "_checkno", tempbp.getPayDetail().getCheque().getChequeNo());
                                Date chequeDate = tempbp.getPayDetail().getCheque().getDueDate();
                                String chequeDateString = "";
                                if (chequeDate != null) {
                                    chequeDateString = dateFormat.format(chequeDate);
                                }
                                obj.put(entryChar + "_checkdate", chequeDateString);
                                obj.put(entryChar + "_description", tempbp.getPayDetail().getCheque().getDescription() != null ? tempbp.getPayDetail().getCheque().getDescription() : "");
                            } else {
                                obj.put(entryChar + "_checkno", "");
                                obj.put(entryChar + "_checkdate", "");
                                obj.put(entryChar + "_description", "");
                            }

                        } else if (invoiceMap.containsKey(entry.getID())) {

                            String configJSONStr = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Sales Invoice - $#$InvoiceNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Cash Sale - $#$InvoiceNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Customer',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'ProductDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.InvoiceDetail,com.krawler.common.admin.KWLCurrency,TRANSACTION_AMOUNT,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$InvDetailDescription$#$<br>Amount : $#$CurrencyCode$#$ $#$TRANSACTION_AMOUNT$#$ $#$CUSTOMDATA$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray();
                            boolean isDescConfig = false;
                            HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                            reqParDescConfig.put(Constants.companyKey, companyid);
                            reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                            reqParDescConfig.put("document", Constants.Acc_Invoice_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                            isDescConfig = true;
                            if (isDescConfig) {
                                descJsonArr = new JSONArray(configJSONStr);
                            }
                            String transactionDetails = "";
                            String transactionDetailsForExpander = "";
                            if (accountid.equals(cashAccount) || invoiceMap.get(entry.getID()).isCashtransaction()) {
                                obj.put(entryChar + "_transactionID", invoiceMap.get(entry.getID()).getInvoiceNumber());
                                obj.put(Constants.billid, invoiceMap.get(entry.getID()).getID());
                                obj.put("type", Constants.CASH_SALE);
                            } else {
                                obj.put(entryChar + "_transactionID", invoiceMap.get(entry.getID()).getInvoiceNumber());
                                obj.put(Constants.billid, invoiceMap.get(entry.getID()).getID());
                                obj.put("type", Constants.CUSTOMER_INVOICE);
                            }
                             Invoice invoice = (Invoice) invoiceMap.get(entry.getID());
                            Map<String, String> transDetMap = getTransactionDetailsForInvoice(invoiceMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put("personid", transDetMap.get("madid"));
                            obj.put("personname", transDetMap.get("madname"));
                            obj.put("isVendor", transDetMap.get("isVendor"));
                            obj.put("isJERecord", false);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);

                            if (invoice != null && invoice.getCustomer() != null && (bankBook || ledgerReport)) {
                                Customer customer = invoice.getCustomer();
//                                 if(!customer.getID().equals(customer1.getID())){         //please uncomment the code order to calculate the amoundue for single customer
//                                        if (jed.isDebit()) {
//                                            balance -= amountBaseCurrency;
//                                            balanceAccountCurrency -= amountAccountCurrency;
//                                            entryChar = "d";
//                                            emptyChar = "c";
//                                        } else {
//                                            balance += amountBaseCurrency;
//                                            balanceAccountCurrency += amountAccountCurrency;
//                                            entryChar = "c";
//                                            emptyChar = "d";
//                                        }
//                                        continue;
//                                    }
                                obj.put("_cvName", customer.getName());
                                obj.put(entryChar + "_accountname", customer.getName());
                            }
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", invoiceMap.get(entry.getID()).getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                            if (issubGeneralLedger) {
                                Map<String, String> CustomDetMap = getTransactionDetailsForInvoiceSubLedger(invoiceMap, subLedgerMap, entry, jed, accountid, companyid, cashAccount);
                                obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                                obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                            }
                        } else if (grMap.containsKey(entry.getID())) {
                            String newString = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Purchase Invoice - $#$GoodsReceiptNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Cash Purchase - $#$GoodsReceiptNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Vendor',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'ProductDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.GoodsReceiptDetail,com.krawler.common.admin.KWLCurrency,TRANSACTION_AMOUNT,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$PIDetailDescription$#$<br>Amount : $#$CurrencyCode$#$ $#$TRANSACTION_AMOUNT$#$ $#$CUSTOMDATA$#$'}]},{seq:6,type:6,documentid:'ExpenseDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.ExpenseGRDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$EXPIDescription$#$ $#$CUSTOMDATA$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(newString);

                            HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                            reqParDescConfig.put(Constants.companyKey, companyid);
                            reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                            reqParDescConfig.put("document", Constants.Acc_Vendor_Invoice_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }

                            boolean isDescConfig = true;
                            String transactionDetails = "";
                            String transactionDetailsForExpander = "";
                            if (accountid.equals(cashAccount) || grMap.get(entry.getID()).isCashtransaction()) {
                                obj.put(entryChar + "_transactionID", grMap.get(entry.getID()).getGoodsReceiptNumber());
                                obj.put(Constants.billid, grMap.get(entry.getID()).getID());
                                obj.put("type", Constants.CASH_PURCHASE);
                            } else {
                                obj.put(entryChar + "_transactionID", grMap.get(entry.getID()).getGoodsReceiptNumber());
                                obj.put(Constants.billid, grMap.get(entry.getID()).getID());
                                obj.put("type", Constants.VENDOR_INVOICE);
                            }
                            GoodsReceipt goodsReceipt = grMap.get(entry.getID());
                            Map<String, String> transDetMap = getTransactionDetailsForPurchaseInvoice(grMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put("personid", transDetMap.get("madid"));
                            obj.put("personname", transDetMap.get("madname"));
                            obj.put("isVendor", transDetMap.get("isVendor"));
                            obj.put("isJERecord", false);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            if (goodsReceipt != null && goodsReceipt.getVendor() != null && (bankBook || ledgerReport)) {
                                Vendor vendor = goodsReceipt.getVendor();
                                obj.put("_cvName", vendor.getName());
                                obj.put(entryChar + "_accountname", vendor.getName());
                            }
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", grMap.get(entry.getID()).getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                            if (issubGeneralLedger) {
                                Map<String, String> CustomDetMap = getTransactionDetailsForPurchaseInvoiceSubLedger(grMap, subLedgerMap, entry, jed, accountid, companyid, cashAccount);
                                obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                                obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                            }
                        } else if (creditNoteMap.containsKey(entry.getID())) {
                            String transactionDetails = "";
                            String transactionDetailsForExpander = "";

                            String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.CreditNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Credit Note - $#$CreditNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.CreditNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.CreditNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$CNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(newString);

                            HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                            reqParDescConfig.put(Constants.companyKey, companyid);
                            reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                            reqParDescConfig.put("document", Constants.Acc_Credit_Note_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                            boolean isDescConfig = true;
                            if (isPartyJournalEntry) {
                                obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                            } else {
                                obj.put(entryChar + "_transactionID", ((CreditNote) creditNoteMap.get(entry.getID())[0]).getCreditNoteNumber());
                            }
                            Map<String, String> transDetMap = getTransactionDetailsForCreditNote(creditNoteMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put("personid", transDetMap.get("madid"));
                            obj.put("personname", transDetMap.get("madname"));
                            obj.put("isVendor", transDetMap.get("isVendor"));
                            obj.put("isJERecord", false);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            CreditNote creditNote = (CreditNote) creditNoteMap.get(entry.getID())[0];
                            if (creditNote != null && creditNote.getCustomer() != null && (bankBook || ledgerReport)) {
                                Customer customer = creditNote.getCustomer();
//                                 if(!customer.getID().equals(customer1.getID())){  //please uncomment the code order to calculate the amoundue for single customer
//                                        if (jed.isDebit()) {
//                                            balance -= amountBaseCurrency;
//                                            balanceAccountCurrency -= amountAccountCurrency;
//                                            entryChar = "d";
//                                            emptyChar = "c";
//                                        } else {
//                                            balance += amountBaseCurrency;
//                                            balanceAccountCurrency += amountAccountCurrency;
//                                            entryChar = "c";
//                                            emptyChar = "d";
//                                        }
//                                        continue;
//                                    }
                                obj.put("_cvName", customer.getName());
                                obj.put(entryChar + "_accountname", customer.getName());
                            } else if (creditNote != null && creditNote.getVendor() != null && (bankBook || ledgerReport)) {
                                Vendor vendor = creditNote.getVendor();
                                obj.put("_cvName", vendor.getName());
                                obj.put(entryChar + "_accountname", vendor.getName());
                            }
                            obj.put("noteid", ((CreditNote) creditNoteMap.get(entry.getID())[0]).getID());
                            obj.put("type", Constants.CREDIT_NOTE);
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", ((CreditNote) creditNoteMap.get(entry.getID())[0]).getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                            if (issubGeneralLedger) {
                                Map<String, String> CustomDetMap = getTransactionDetailsForCreditNoteSubLedger(creditNoteMap, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                                obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                                obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                            }
                        } else if (creditNoteMapVendor.containsKey(entry.getID())) {
                            String transactionDetails = "";
                            String transactionDetailsForExpander = "";

                            String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.CreditNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Credit Note - $#$CreditNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.CreditNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.CreditNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$CNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(newString);

                            HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                            reqParDescConfig.put(Constants.companyKey, companyid);
                            reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                            reqParDescConfig.put("document", Constants.Acc_Credit_Note_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                            boolean isDescConfig = true;

                            if (isPartyJournalEntry) {
                                obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                            } else {
                                obj.put(entryChar + "_transactionID", ((CreditNote) creditNoteMapVendor.get(entry.getID())[0]).getCreditNoteNumber());
                            }
                            Map<String, String> transDetMap = getTransactionDetailsForCreditNote(creditNoteMapVendor, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put("personid", transDetMap.get("madid"));
                            obj.put("personname", transDetMap.get("madname"));
                            obj.put("isVendor", transDetMap.get("isVendor"));
                            obj.put("isJERecord", false);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);

                            CreditNote creditNote = (CreditNote) creditNoteMapVendor.get(entry.getID())[0];
                            if (creditNote != null && creditNote.getCustomer() != null && (bankBook || ledgerReport)) {
                                Customer customer = creditNote.getCustomer();

//                                 if(!customer.getID().equals(customer1.getID())){  //please uncomment the code order to calculate the amoundue for single customer
//                                        if (jed.isDebit()) {
//                                            balance -= amountBaseCurrency;
//                                            balanceAccountCurrency -= amountAccountCurrency;
//                                            entryChar = "d";
//                                            emptyChar = "c";
//                                        } else {
//                                            balance += amountBaseCurrency;
//                                            balanceAccountCurrency += amountAccountCurrency;
//                                            entryChar = "c";
//                                            emptyChar = "d";
//                                        }
//                                        continue;
//                                    }
                                obj.put("_cvName", customer.getName());
                                obj.put(entryChar + "_accountname", customer.getName());
                            } else if (creditNote != null && creditNote.getVendor() != null && (bankBook || ledgerReport)) {
                                Vendor vendor = creditNote.getVendor();
                                obj.put("_cvName", vendor.getName());
                                obj.put(entryChar + "_accountname", vendor.getName());
                            }
                            obj.put("noteid", ((CreditNote) creditNoteMapVendor.get(entry.getID())[0]).getID());
                            obj.put("type", Constants.CREDIT_NOTE);
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", ((CreditNote) creditNoteMapVendor.get(entry.getID())[0]).getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                            if (issubGeneralLedger) {
                                Map<String, String> CustomDetMap = getTransactionDetailsForCreditNoteSubLedger(creditNoteMapVendor, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                                obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                                obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                            }
                        } else if (debitNoteMap.containsKey(entry.getID())) {
                            String transactionDetails = "";
                            String transactionDetailsForExpander = "";

                            String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.DebitNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Debit Note - $#$DebitNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.DebitNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.DebitNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$DNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(newString);

                            HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                            reqParDescConfig.put(Constants.companyKey, companyid);
                            reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                            reqParDescConfig.put("document", Constants.Acc_Debit_Note_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                            boolean isDescConfig = true;

                            if (isPartyJournalEntry) {
                                obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                            } else {
                                obj.put(entryChar + "_transactionID", ((DebitNote) debitNoteMap.get(entry.getID())[0]).getDebitNoteNumber());
                            }
                            Map<String, String> transDetMap = getTransactionDetailsForDebitNote(debitNoteMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put("personid", transDetMap.get("madid"));
                            obj.put("personname", transDetMap.get("madname"));
                            obj.put("isVendor", transDetMap.get("isVendor"));
                            obj.put("isJERecord", false);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);

                            DebitNote debitNote = (DebitNote) debitNoteMap.get(entry.getID())[0];
                            if (debitNote != null && debitNote.getCustomer() != null && (bankBook || ledgerReport)) {
                                Customer customer = debitNote.getCustomer();

//                                 if(!customer.getID().equals(customer1.getID())){ //please uncomment the code order to calculate the amoundue for single customer
//                                        if (jed.isDebit()) {
//                                            balance -= amountBaseCurrency;
//                                            balanceAccountCurrency -= amountAccountCurrency;
//                                            entryChar = "d";
//                                            emptyChar = "c";
//                                        } else {
//                                            balance += amountBaseCurrency;
//                                            balanceAccountCurrency += amountAccountCurrency;
//                                            entryChar = "c";
//                                            emptyChar = "d";
//                                        }
//                                        continue;
//                                    }
                                obj.put("_cvName", customer.getName());
                                obj.put(entryChar + "_accountname", customer.getName());
                            } else if (debitNote != null && debitNote.getVendor() != null && (bankBook || ledgerReport)) {
                                Vendor vendor = debitNote.getVendor();
                                obj.put("_cvName", vendor.getName());
                                obj.put(entryChar + "_accountname", vendor.getName());
                            }
                            obj.put("noteid", ((DebitNote) debitNoteMap.get(entry.getID())[0]).getID());
                            obj.put("type", Constants.DEBIT_NOTE);
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", ((DebitNote) debitNoteMap.get(entry.getID())[0]).getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                            if (issubGeneralLedger) {
                                Map<String, String> CustomDetMap = getTransactionDetailsForSubLedgerDebitNote(debitNoteMap, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                                obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                                obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                            }
                        } else if (debitNoteMapCustomer.containsKey(entry.getID())) {
                            String transactionDetails = "";
                            String transactionDetailsForExpander = "";

                            String newString = "[{seq:1,type:1,info:[{classname:'',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.DebitNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor',key:'Debit Note - $#$DebitNoteNumber$#$<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry,com.krawler.hql.accounting.DebitNote',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'NoteDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.DebitNoteTaxEntry,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$DNDDescription$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'PartyJEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(newString);

                            HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                            reqParDescConfig.put(Constants.companyKey, companyid);
                            reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                            reqParDescConfig.put("document", Constants.Acc_Debit_Note_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                            boolean isDescConfig = true;
                            if (isPartyJournalEntry) {
                                obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                            } else {
                                obj.put(entryChar + "_transactionID", ((DebitNote) debitNoteMapCustomer.get(entry.getID())[0]).getDebitNoteNumber());
                            }
                            Map<String, String> transDetMap = getTransactionDetailsForDebitNote(debitNoteMapCustomer, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put("personid", transDetMap.get("madid"));
                            obj.put("personname", transDetMap.get("madname"));
                            obj.put("isVendor", transDetMap.get("isVendor"));
                            obj.put("isJERecord", false);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            DebitNote debitNote = (DebitNote) debitNoteMapCustomer.get(entry.getID())[0];
                            if (debitNote != null && debitNote.getCustomer() != null && (bankBook || ledgerReport)) {
                                Customer customer = debitNote.getCustomer();
//                                if(!customer.getID().equals(customer1.getID())){  //please uncomment the code order to calculate the amoundue for single customer
//                                        if (jed.isDebit()) {
//                                            balance -= amountBaseCurrency;
//                                            balanceAccountCurrency -= amountAccountCurrency;
//                                            entryChar = "d";
//                                            emptyChar = "c";
//                                        } else {
//                                            balance += amountBaseCurrency;
//                                            balanceAccountCurrency += amountAccountCurrency;
//                                            entryChar = "c";
//                                            emptyChar = "d";
//                                        }
//                                        continue;
//                                    }
                                obj.put("_cvName", customer.getName());
                                obj.put(entryChar + "_accountname", customer.getName());
                            } else if (debitNote != null && debitNote.getVendor() != null && (bankBook || ledgerReport)) {
                                Vendor vendor = debitNote.getVendor();
                                obj.put("_cvName", vendor.getName());
                                obj.put(entryChar + "_accountname", vendor.getName());
                            }
                            obj.put("noteid", ((DebitNote) debitNoteMapCustomer.get(entry.getID())[0]).getID());
                            obj.put("type", Constants.DEBIT_NOTE);
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", ((DebitNote) debitNoteMapCustomer.get(entry.getID())[0]).getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                            
                            if (issubGeneralLedger) {
                                Map<String, String> CustomDetMap = getTransactionDetailsForSubLedgerDebitNote(debitNoteMapCustomer, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                                obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                                obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                            }
                        } else if (paymentReceivedMap.containsKey(entry.getID())) {
                            String newString = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Receipt',key:'<br>$#$Memo$#$'}]},{seq:2,type:2,documentid:'AgainstGL',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptDetailOtherwise,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$, $#$CVName$#$ <br>$#$RDOtherwiseDescription$#$$#$CUSTOMDATA$#$'}]},{seq:3,type:3,documentid:'AdvancePayment',info:[{classname:'com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptAdvanceDetail,CUSTOMDATA',key:'<br>Advance Payment, $#$CVName$#$ <br>$#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:4,type:4,documentid:'AgainstInvoice',info:[{classname:'com.krawler.hql.accounting.Invoice,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptDetail,CUSTOMDATA',key:'<br>Invoice - $#$InvoiceNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'AgainstPurchaseInvoice',info:[{classname:'com.krawler.hql.accounting.GoodsReceipt,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.ReceiptDetail,CUSTOMDATA',key:'<br>Purchase Invoice - $#$GoodsReceiptNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:6,type:6,documentid:'AgainstCNDN',info:[{classname:'com.krawler.hql.accounting.DebitNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.DebitNotePaymentDetails,CUSTOMDATA',key:'<br>Debit Note - $#$DebitNoteNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:7,type:7,info:[{classname:'com.krawler.hql.accounting.Cheque,com.krawler.hql.accounting.PaymentMethod',key:'<br>Cheque no. $#$ChequeNo$#$ dated $#$DueDate$#$, $#$MethodName$#$, $#$Description$#$'}]},{seq:8,type:8,info:[{classname:'com.krawler.hql.accounting.MasterItem',key:'<br>Received from : $#$Value$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(newString);
                            Receipt tempr = (Receipt) paymentReceivedMap.get(entry.getID())[0];
                            String cvName = "";
                            if (tempr != null && tempr.getCustomer() != null && (bankBook || ledgerReport)) {
                                Customer customer = tempr.getCustomer();
                                cvName = customer.getName();
                                obj.put("_cvName", customer.getName());
                                obj.put(entryChar + "_accountname", customer.getName());
                            } else if (tempr != null && !StringUtil.isNullOrEmpty(tempr.getVendor()) && (bankBook || ledgerReport)) {
                                KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempr.getVendor());
                                if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                                    cvName = vendor.getName();
                                    obj.put("_cvName", vendor.getName());
                                    obj.put(entryChar + "_accountname", vendor.getName());
                                }
                            }
                            obj.put(entryChar + "_transactionID", tempr.getReceiptNumber());
                            obj.put(Constants.billid, tempr.getID());
                            String transactionDetails = "", transactionDetailsForExpander = "";

                            HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                            reqParDescConfig.put(Constants.companyKey, companyid);
                            reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                            reqParDescConfig.put("document", Constants.Acc_Receive_Payment_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }

                            Map<String, String> transDetMap = getTransactionDetailsForReceipt(paymentReceivedMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailReceiptTypeMap, bankBook, ledgerReport);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";

                            if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                                obj.put(entryChar + "_transactionDetails", transactionDetails);
                                obj.put("personid", transDetMap.get("madid"));
                                obj.put("personname", transDetMap.get("madname"));
                                obj.put("isVendor", transDetMap.get("isVendor"));
                                obj.put("isJERecord", false);
                                obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                                obj.put(entryChar + "_transactionDetailsBankBook", "Payment received from : " + cvName);
                            } else {
                                obj.put(entryChar + "_transactionDetails", transactionDetails);
                                obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                                obj.put(entryChar + "_transactionDetailsBankBook", "Payment received from : " + accountName);
                                obj.put("personid", transDetMap.get("madid"));
                                obj.put("personname", transDetMap.get("madname"));
                                obj.put("isVendor", transDetMap.get("isVendor"));
                                obj.put("isJERecord", false);
                            }
                            obj.put("type", Constants.PAYMENT_RECEIVED);
                            obj.put("payer", tempr.getReceivedFrom() != null ? tempr.getReceivedFrom().getValue() : "");
                            if (tempr.getPayDetail() != null && tempr.getPayDetail().getCheque() != null && !StringUtil.isNullOrEmpty(tempr.getPayDetail().getCheque().getChequeNo())) {
                                obj.put(entryChar + "_checkno", tempr.getPayDetail().getCheque().getChequeNo());
                                Date chequeDate = tempr.getPayDetail().getCheque().getDueDate();
                                String chequeDateString = "";
                                if (chequeDate != null) {
                                    chequeDateString = dateFormat.format(chequeDate);
                                }
                                obj.put(entryChar + "_checkdate", chequeDateString);
                                obj.put(entryChar + "_description", tempr.getPayDetail().getCheque().getDescription() != null ? tempr.getPayDetail().getCheque().getDescription() : "");
                                obj.put("memoValue", tempr.getMemo());
                            } else {
                                obj.put(entryChar + "_checkno", "");
                                obj.put(entryChar + "_checkdate", "");
                                obj.put(entryChar + "_description", "");
                                obj.put("memoValue", tempr.getMemo());
                            }
                            if (issubGeneralLedger) {
                                Map<String, String> CustomDetMap = getTransactionDetailsForReceiptSubLedger(paymentReceivedMap, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailReceiptTypeMap, bankBook, ledgerReport);
                                obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                                obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                            }

                        } else if (paymentMadeMap.containsKey(entry.getID())) {
                            String newString = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Payment',key:'<br>$#$Memo$#$'}]},{seq:2,type:2,documentid:'AgainstGL',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.PaymentDetailOtherwise,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$, $#$CVName$#$ <br>$#$PDOtherwiseDescription$#$$#$CUSTOMDATA$#$'}]},{seq:3,type:3,documentid:'AdvancePayment',info:[{classname:'com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.AdvanceDetail,CUSTOMDATA',key:'<br>Advance Payment, $#$CVName$#$<br>$#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:4,type:4,documentid:'AgainstInvoice',info:[{classname:'com.krawler.hql.accounting.Invoice,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.PaymentDetail,CUSTOMDATA',key:'<br>Invoice - $#$InvoiceNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:5,type:5,documentid:'AgainstPurchaseInvoice',info:[{classname:'com.krawler.hql.accounting.GoodsReceipt,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.PaymentDetail,CUSTOMDATA',key:'<br>Purchase Invoice - $#$GoodsReceiptNumber$#$, $#$CVName$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:6,type:6,documentid:'AgainstCNDN',info:[{classname:'com.krawler.hql.accounting.CreditNote,com.krawler.hql.accounting.Customer,com.krawler.hql.accounting.Vendor,com.krawler.hql.accounting.CreditNotePaymentDetails,CUSTOMDATA',key:'<br>Credit Note - $#$CreditNoteNumber$#$, $#$Name$#$ <br> $#$Description$#$$#$CUSTOMDATA$#$'}]},{seq:7,type:7,info:[{classname:'com.krawler.hql.accounting.Cheque,com.krawler.hql.accounting.PaymentMethod',key:'<br>Cheque no. $#$ChequeNo$#$ dated $#$DueDate$#$, $#$MethodName$#$, $#$Description$#$'}]},{seq:8,type:8,info:[{classname:'com.krawler.hql.accounting.MasterItem',key:'<br>Paid to : $#$Value$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(newString);

                            HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                            reqParDescConfig.put(Constants.companyKey, companyid);
                            reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                            reqParDescConfig.put("document", Constants.Acc_Make_Payment_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                            Payment tempp = (Payment) paymentMadeMap.get(entry.getID())[0];
                            String cvName = "";
                            if (tempp != null && !StringUtil.isNullOrEmpty(tempp.getCustomer()) && (bankBook || ledgerReport)) {
                                KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempp.getCustomer());
                                if (!resultCustomer.getEntityList().isEmpty() && resultCustomer.getEntityList().get(0) != null) {
                                    Customer customer = (Customer) resultCustomer.getEntityList().get(0);
                                    cvName = customer.getName();
                                    obj.put(entryChar + "_accountname", customer.getName());
                                    obj.put("_cvName", customer.getName());
                                }
                            } else if (tempp != null && tempp.getVendor() != null && (bankBook || ledgerReport)) {
                                Vendor vendor = tempp.getVendor();
                                cvName = vendor.getName();
                                obj.put(entryChar + "_accountname", vendor.getName());
                                obj.put("_cvName", vendor.getName());
                            }

                            obj.put(entryChar + "_transactionID", tempp.getPaymentNumber());
                            obj.put(Constants.billid, tempp.getID());
                            String transactionDetails = "", transactionDetailsForExpander = "";

                            Map<String, String> transDetMap = getTransactionDetailsForPayment(paymentMadeMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailPaymentTypeMap, bankBook, ledgerReport);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
//                        
                            if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
                                obj.put(entryChar + "_transactionDetails", transactionDetails);
                                obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                                obj.put(entryChar + "_transactionDetailsBankBook", "Payment made to : " + cvName);
                                obj.put("personid", transDetMap.get("madid"));
                                obj.put("personname", transDetMap.get("madname"));
                                obj.put("isVendor", transDetMap.get("isVendor"));
                                obj.put("isJERecord", false);
                            } else {
                                obj.put(entryChar + "_transactionDetails", transactionDetails);
                                obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                                obj.put(entryChar + "_transactionDetailsBankBook", "Payment made to : " + accountName);
                                obj.put("personid", transDetMap.get("madid"));
                                obj.put("personname", transDetMap.get("madname"));
                                obj.put("isVendor", transDetMap.get("isVendor"));
                                obj.put("isJERecord", false);
                            }
                            obj.put("type", Constants.PAYMENT_MADE);
                            obj.put("payer", tempp.getPaidTo() != null ? tempp.getPaidTo().getValue() : "");
                            if (tempp.getPayDetail() != null && tempp.getPayDetail().getCheque() != null && !StringUtil.isNullOrEmpty(tempp.getPayDetail().getCheque().getChequeNo())) {
                                obj.put(entryChar + "_checkno", tempp.getPayDetail().getCheque().getChequeNo());
                                Date chequeDate = tempp.getPayDetail().getCheque().getDueDate();
                                String chequeDateString = "";
                                if (chequeDate != null) {
                                    chequeDateString = dateFormat.format(chequeDate);
                                }
                                obj.put(entryChar + "_checkdate", chequeDateString);
                                obj.put(entryChar + "_description", tempp.getPayDetail().getCheque().getDescription() != null ? tempp.getPayDetail().getCheque().getDescription() : "");
                                obj.put("memoValue", tempp.getMemo());
                            } else {
                                obj.put(entryChar + "_checkno", "");
                                obj.put(entryChar + "_checkdate", "");
                                obj.put(entryChar + "_description", "");
                                obj.put("memoValue", tempp.getMemo());
                            }
                            if (issubGeneralLedger) {
                                Map<String, String> CustomDetMap = getTransactionDetailsForPaymentSubLedger(paymentMadeMap, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailPaymentTypeMap, bankBook, ledgerReport);
                                obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                                obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                            }

                        } else if (fixedAssetgrMap.containsKey(entry.getID())) {
                            String newString = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Fixed Asset Acquired Invoice - $#$GoodsReceiptNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'Cash Purchase - $#$GoodsReceiptNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Vendor',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.GoodsReceipt',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'AssetDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.GoodsReceiptDetail,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$PIDetailDescription$#$$#$CUSTOMDATA$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(newString);

                            HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                            reqParDescConfig.put(Constants.companyKey, companyid);
                            reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                            reqParDescConfig.put("document", Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                            boolean isDescConfig = true;
                            String transactionDetails = "";
                            String transactionDetailsForExpander = "";
                            if (accountid.equals(cashAccount)) {
                                obj.put(entryChar + "_transactionID", fixedAssetgrMap.get(entry.getID()).getGoodsReceiptNumber());
                                obj.put(Constants.billid, fixedAssetgrMap.get(entry.getID()).getID());
                                obj.put("type", Constants.CASH_PURCHASE);
                            } else {
                                obj.put(entryChar + "_transactionID", fixedAssetgrMap.get(entry.getID()).getGoodsReceiptNumber());
                                obj.put(Constants.billid, fixedAssetgrMap.get(entry.getID()).getID());
                                obj.put("type", Constants.ACQUIRED_INVOICE);
                            }

                            Map<String, String> transDetMap = getTransactionDetailsForFixedAssetPurchaseInvoice(fixedAssetgrMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put("personid", transDetMap.get("madid"));
                            obj.put("personname", transDetMap.get("madname"));
                            obj.put("isVendor", transDetMap.get("isVendor"));
                            obj.put("isJERecord", false);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);

                            GoodsReceipt goodsReceipt = fixedAssetgrMap.get(entry.getID());
                            if (goodsReceipt != null && goodsReceipt.getVendor() != null && (bankBook || ledgerReport)) {
                                Vendor vendor = goodsReceipt.getVendor();
                                obj.put("_cvName", vendor.getName());
                                obj.put(entryChar + "_accountname", vendor.getName());
                            }
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", fixedAssetgrMap.get(entry.getID()).getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                            if (issubGeneralLedger) {
                                Map<String, String> CustomDetMap = getTransactionDetailsForFixedAssetPurchaseInvoiceSubLedger(fixedAssetgrMap, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                                obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                                obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                            }
                        } else if (fixedAssetInvoiceMap.containsKey(entry.getID())) {
                            String newString = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Fixed Asset Disposal Invoice - $#$InvoiceNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Cash Sale - $#$InvoiceNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Customer',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'AssetDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.InvoiceDetail,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$InvDetailDescription$#$$#$CUSTOMDATA$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(newString);

                            HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                            reqParDescConfig.put(Constants.companyKey, companyid);
                            reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                            reqParDescConfig.put("document", Constants.Acc_FixedAssets_DisposalInvoice_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                            boolean isDescConfig = true;
                            String transactionDetails = "";
                            String transactionDetailsForExpander = "";
                            if (accountid.equals(cashAccount)) {
                                obj.put(entryChar + "_transactionID", fixedAssetInvoiceMap.get(entry.getID()).getInvoiceNumber());
                                obj.put(Constants.billid, fixedAssetInvoiceMap.get(entry.getID()).getID());
                                obj.put("type", Constants.CASH_SALE);
                            } else {
                                obj.put(entryChar + "_transactionID", fixedAssetInvoiceMap.get(entry.getID()).getInvoiceNumber());
                                obj.put(Constants.billid, fixedAssetInvoiceMap.get(entry.getID()).getID());
                                obj.put("type", Constants.DISPOSAL_INVOICE);
                            }

                            Map<String, String> transDetMap = getTransactionDetailsForFixedAssetInvoice(fixedAssetInvoiceMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put("personid", transDetMap.get("madid"));
                            obj.put("personname", transDetMap.get("madname"));
                            obj.put("isVendor", transDetMap.get("isVendor"));
                            obj.put("isJERecord", false);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);

                            Invoice invoice = (Invoice) fixedAssetInvoiceMap.get(entry.getID());
                            if (invoice != null && invoice.getCustomer() != null && (bankBook || ledgerReport)) {
                                Customer customer = invoice.getCustomer();
//                                 if(!customer.getID().equals(customer1.getID())){  //please uncomment the code order to calculate the amoundue for single customer
//                                        if (jed.isDebit()) {
//                                            balance -= amountBaseCurrency;
//                                            balanceAccountCurrency -= amountAccountCurrency;
//                                            entryChar = "d";
//                                            emptyChar = "c";
//                                        } else {
//                                            balance += amountBaseCurrency;
//                                            balanceAccountCurrency += amountAccountCurrency;
//                                            entryChar = "c";
//                                            emptyChar = "d";
//                                        }
//                                        continue;
//                                    }

                                obj.put("_cvName", customer.getName());
                                obj.put(entryChar + "_accountname", customer.getName());
                            }
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_description", "");
                            obj.put("memoValue", fixedAssetInvoiceMap.get(entry.getID()).getMemo());
                            obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                            if (issubGeneralLedger) {
                                Map<String, String> CustomDetMap = getTransactionDetailsForFixedAssetInvoiceSubLedger(fixedAssetInvoiceMap, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                                obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                                obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                            }

                        } else if (leaseInvoiceMap.containsKey(entry.getID())) {
                        String newString="[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Lease Invoice - $#$InvoiceNumber$#$'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'Cash Sale - $#$InvoiceNumber$#$'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.Customer',key:'<br>$#$Acccode$#$ - $#$CVName$#$'}]},{seq:4,type:4,info:[{classname:'com.krawler.hql.accounting.Invoice',key:'<br>$#$Memo$#$'}]},{seq:5,type:5,documentid:'AssetDetails',info:[{classname:'com.krawler.hql.accounting.Product,com.krawler.hql.accounting.InvoiceDetail,CUSTOMDATA',key:'<br>$#$Productid$#$ - $#$ProductName$#$<br>$#$InvDetailDescription$#$$#$CUSTOMDATA$#$'}]}]";          
                        JSONArray descJsonArr = new JSONArray(newString);
                        
                        HashMap<String, Object> reqParDescConfig=new HashMap<String, Object>();
                        reqParDescConfig.put(Constants.companyKey, companyid);
                        reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        reqParDescConfig.put("document", Constants.LEASE_INVOICE_MODULEID);

                        boolean isDescConfig=true;
                        String transactionDetails = "";
                        String transactionDetailsForExpander = "";
                        if (accountid.equals(cashAccount)) {
                            obj.put(entryChar + "_transactionID", leaseInvoiceMap.get(entry.getID()).getInvoiceNumber());
                            obj.put(Constants.billid, leaseInvoiceMap.get(entry.getID()).getID());
                            obj.put("type", Constants.CASH_SALE);
                        } else {
                            obj.put(entryChar + "_transactionID", leaseInvoiceMap.get(entry.getID()).getInvoiceNumber());
                            obj.put(Constants.billid, leaseInvoiceMap.get(entry.getID()).getID());
                            obj.put("type", Constants.LEASE_INVOICE);
                        }
                        
                        Map<String, String> transDetMap = getTransactionDetailsForLeaseInvoice(leaseInvoiceMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                        transactionDetails=transDetMap.get("transactionDetails")!=null?transDetMap.get("transactionDetails"):"";
                        transactionDetailsForExpander=transDetMap.get("transactionDetailsForExpander")!=null?transDetMap.get("transactionDetailsForExpander"):"";
                        obj.put(entryChar + "_transactionDetails", transactionDetails);
                        obj.put("personid", transDetMap.get("madid"));
                        obj.put("personname", transDetMap.get("madname"));
                            obj.put("isVendor", transDetMap.get("isVendor"));
                            obj.put("isJERecord", false);
                        obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                        
                        Invoice invoice = (Invoice) leaseInvoiceMap.get(entry.getID());
                        if (invoice != null && invoice.getCustomer() != null && (bankBook || ledgerReport)) {
                            Customer customer = invoice.getCustomer();
                            obj.put("_cvName", customer.getName());
                            obj.put(entryChar + "_accountname", customer.getName());
                        }
                        obj.put(entryChar + "_checkno", "");
                        obj.put(entryChar + "_checkdate", "");
                        obj.put(entryChar + "_description", "");
                        obj.put("memoValue", leaseInvoiceMap.get(entry.getID()).getMemo());
                        obj.put(entryChar + "_transactionDetailsBankBook", Constants.TRANSFER);
                        if (issubGeneralLedger) {
                            Map<String, String> CustomDetMap = getTransactionDetailsForLeaseInvoiceSubLedger(leaseInvoiceMap, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                            obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }

                    }else {
                            String transactionDetails = "";
                            String transactionDetailsForExpander = "";

                            String newString = "[{seq:1,type:1,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Party Journal Entry'}]},{seq:2,type:2,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'Journal Entry'}]},{seq:3,type:3,info:[{classname:'com.krawler.hql.accounting.JournalEntry',key:'<br>$#$Memo$#$'}]},{seq:4,type:4,documentid:'JEDetails',info:[{classname:'com.krawler.hql.accounting.Account,com.krawler.hql.accounting.JournalEntryDetail,CUSTOMDATA',key:'<br>$#$AccountCode$#$ - $#$AccountName$#$<br>$#$JEDDescription$#$$#$CUSTOMDATA$#$'}]}]";
                            JSONArray descJsonArr = new JSONArray(newString);

                            HashMap<String, Object> reqParDescConfig = new HashMap<String, Object>();
                            reqParDescConfig.put(Constants.companyKey, companyid);
                            reqParDescConfig.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                            reqParDescConfig.put("document", Constants.Acc_GENERAL_LEDGER_ModuleId);
//                        List<Object[]> configList = accountingHandlerDAOobj.getDescriptionConfig(reqParDescConfig);
//                        if(configList!=null && configList.size()>0){
//                            Object[] configRow = configList.get(0);
//                            configJSONStr = configRow[4].toString();
//                            if(!StringUtil.isNullOrEmpty(configJSONStr)){
//                                descJsonArr = new JSONArray(configJSONStr);
//                                isDescConfig=true;
//                            }
//                        }
                            boolean isDescConfig = true;
                            Map<String, String> transDetMap = getTransactionDetailsForJournalEntry(entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                            transactionDetails = transDetMap.get("transactionDetails") != null ? transDetMap.get("transactionDetails") : "";
                            transactionDetailsForExpander = transDetMap.get("transactionDetailsForExpander") != null ? transDetMap.get("transactionDetailsForExpander") : "";
                            obj.put(entryChar + "_transactionDetails", transactionDetails);
                            obj.put("personid", transDetMap.get("madid"));
                            obj.put("personname", transDetMap.get("madname"));
                            obj.put("isVendor", transDetMap.get("isVendor"));
                            obj.put("isJERecord", true);
                            obj.put(entryChar + "_transactionDetailsForExpander", transactionDetailsForExpander);
                            obj.put(entryChar + "_transactionID", entry.getEntryNumber());
                            obj.put(entryChar + "_checkno", "");
                            obj.put(entryChar + "_checkdate", "");
                            obj.put(entryChar + "_transactionDetailsBankBook", "");
                            obj.put("memoValue", (entry.getTypeValue() != 0 && !StringUtil.isNullOrEmpty(entry.getMemo())) ? entry.getMemo() : "");
                            if (issubGeneralLedger) {
                                Map<String, String> CustomDetMap = getTransactionDetailsForJournalEntrySubLedger(subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
                                obj.put(Constants.MAIN_GROUP_VALUE, CustomDetMap.get(Constants.MAIN_GROUP_VALUE) != null ? CustomDetMap.get(Constants.MAIN_GROUP_VALUE) : "");
                                obj.put(Constants.SUB_GROUP_VALUE, CustomDetMap.get(Constants.SUB_GROUP_VALUE) != null ? CustomDetMap.get(Constants.SUB_GROUP_VALUE) : "");
                        }
                        }
                        obj.put("transactionCurrency", (jed.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : jed.getJournalEntry().getCurrency().getCurrencyID()));
                        obj.put("transactionSymbol", (jed.getJournalEntry().getCurrency() == null ? currency.getCurrencyCode() : jed.getJournalEntry().getCurrency().getCurrencyCode())); //transaction currency code
                        obj.put("transactionCurrencySymbol", (jed.getJournalEntry().getCurrency() == null ? currency.getSymbol() : jed.getJournalEntry().getCurrency().getSymbol()));//transaction currency symbol
                        obj.put("transactionAmount", transactionAmount);
                        obj.put("transactionDateString", transactionDateString);
			obj.put(entryChar + "_amountindocumentcurrency", amountindocumentcurrency);   //Amount in Account Currency
                        obj.put(entryChar + "_amount", amountBaseCurrency);   //Amount in base currency
                        obj.put(entryChar + "_transactionAmount", transactionAmount);   //Amount in document currency
                        if ((bankBook || ledgerReport) && jed.getJournalEntry().getIsReval() > 1) {
                            obj.put(entryChar + "_amountAccountCurrency", "");
                        } else {
                            obj.put(entryChar + "_amountAccountCurrency", amountAccountCurrency);   //Amount in account currency
                        }
                        obj.put(emptyChar + "_date", "");
                        obj.put(emptyChar + "_accountname", "");
                        obj.put(emptyChar + "_acccode", "");
                        obj.put(emptyChar + "_entryno", "");
                        obj.put(emptyChar + "_journalentryid", "");
                        obj.put(emptyChar + "_amount", "");
                        obj.put(emptyChar + "_amountAccountCurrency", "");
                        obj.put(emptyChar + "_transactionAmount", "");
                        obj.put(emptyChar + "_transactionID", "");
                        obj.put(emptyChar + "_transactionDetails", "");
                        obj.put(emptyChar + "_transactionDetailsForExpander", "");
                        obj.put(emptyChar + "_checkno", "");
                        obj.put(emptyChar + "_transactionDetailsBankBook", "");
                        obj.put("currencysymbol", (jed.getAccount().getCurrency() == null ? currency.getSymbol() : jed.getAccount().getCurrency().getSymbol()));//Account currency syambol
                        obj.put("currencycode", (jed.getAccount().getCurrency() == null ? jed.getAccount().getCurrency().getCurrencyCode() : jed.getAccount().getCurrency().getCurrencyCode()));//Account currency code
                        obj.put("accountid", accountid);
                        String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                        obj.put("accountname", accountname);

                        String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                        obj.put("accCode", acccode);

                        obj.put(Constants.currencyKey, jed.getAccount().getCurrency().getCurrencyID());

                        // this is for displaying on the group header
                        if (!acccode.equals("") && account.getName().equals("")) {
                            obj.put("accCodeName", acccode);
                        } else if (!acccode.equals("") && !account.getName().equals("")) {
                            obj.put("accCodeName", acccode + " - " + account.getName());
                        } else {
                            obj.put("accCodeName", accountname);
                        }

                        if (entryChar.equals("d")) {
                            balanceAmount = balanceAmount + amountBaseCurrency;
                            obj.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                            balanceAmountAccountCurrency = balanceAmountAccountCurrency + amountAccountCurrency;
                            obj.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                        } else if (entryChar.equals("c")) {
                            balanceAmount = balanceAmount - amountBaseCurrency;
                            obj.put("balanceAmount", authHandler.round(balanceAmount, companyid));
                            balanceAmountAccountCurrency = balanceAmountAccountCurrency - amountAccountCurrency;
                            obj.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid));
                        }
                        jArr.put(obj);
                        if (request.getParameter("filetype") != null) {
                            if (request.getParameter("filetype").equals("print") || request.getParameter("filetype").equals("csv")) {
                                if (emptyChar == "d") {
                                    total = total + amountBaseCurrency;
                                    totalAccountCurrency = totalAccountCurrency + amountAccountCurrency;
                                }
                            }
                        }
                    }

                    double tempTotalAmount = balance;
                    double tempTotalAmountAccountCurrency = balanceAccountCurrency;
                    /*
                     * Comment: For Date filter end date is passed with adding 1 day
                     * extra so here need to subtract 1 day from end date. Suppose
                     * the Journal Entry is created with creation date 31st January
                     * 2014 12:30:00. Now if we filter Ledger records on date and
                     * give start date as 1st January 2014 and end date as 31st
                     * January 2014 then it takes record till 31st January 2014
                     * 00:00:00 so it does not get the 31st January's records thats
                     * why For Date filter end date is passed with adding 1 day
                     * extra.
                     *
                     */
//                Date endDateTemp = authHandler.getDateFormatter(request).parse(request.getParameter("enddate"));
//                Calendar c = Calendar.getInstance();
//                c.setTime(endDateTemp);
//                c.add(Calendar.DATE, -1);
//                endDateTemp.setTime(c.getTime().getTime());
//                // Comment : 1 day is subtracted from End date
                    if (tempTotalAmount != 0 && !ledgerReportFlag && !generalLedgerFlag) {
                        if (tempTotalAmount > 0) {
                            entryChar = "d";
                            emptyChar = "c";
                        } else {
                            entryChar = "c";
                            emptyChar = "d";
                        }
                        JSONObject objlast = new JSONObject();
                        objlast.put(entryChar + "_date", formatter.format(endDate));  //Used GlobalDateFormat to avoid change in time as per time zone. ERP-8482
                        objlast.put(entryChar + "_accountname", "Period Balance");
                        objlast.put(entryChar + "_acccode", "");
                        objlast.put(entryChar + "_journalentryid", "");
                        objlast.put(entryChar + "_amount", (Double) Math.abs(tempTotalAmount));
                        objlast.put(entryChar + "_amountAccountCurrency", Math.abs(tempTotalAmountAccountCurrency));
                        objlast.put(entryChar + "_transactionAmount", "");
                        objlast.put(entryChar + "_transactionID", "");
                        objlast.put(entryChar + "_transactionDetails", "");
                        objlast.put(entryChar + "_transactionDetailsForExpander", "");
                        objlast.put(entryChar + "_checkno", "");
                        objlast.put(entryChar + "_description", "");
                        objlast.put(entryChar + "_transactionDetailsBankBook", "");
                        objlast.put(emptyChar + "_amountAccountCurrency", "");
                        objlast.put(emptyChar + "_transactionAmount", "");
                        objlast.put(emptyChar + "_date", "");
                        objlast.put(emptyChar + "_accountname", "");
                        objlast.put(emptyChar + "_journalentryid", "");
                        objlast.put(emptyChar + "_amount", "");
                        objlast.put(emptyChar + "_transactionID", "");
                        objlast.put(emptyChar + "_transactionDetails", "");
                        objlast.put(emptyChar + "_transactionDetailsForExpander", "");
                        objlast.put(emptyChar + "_checkno", "");
                        objlast.put(emptyChar + "_description", "");
                        objlast.put(emptyChar + "_transactionDetailsBankBook", "");
                        objlast.put("accountid", accountid);
                        String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                        objlast.put("accountname", accountname);
                        objlast.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
                        objlast.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                        String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                        objlast.put("accCode", acccode);
                        objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());

                        // this is for displaying on the group header
                        if (!acccode.equals("") && account.getName().equals("")) {
                            objlast.put("accCodeName", acccode);
                        } else if (!acccode.equals("") && !account.getName().equals("")) {
                            objlast.put("accCodeName", acccode + " - " + account.getName());
                        } else {
                            objlast.put("accCodeName", accountname);
                        }
                        objlast.put("balanceAmount", "");
                        objlast.put("balanceAmountAccountCurrency", "");

                        jArr.put(objlast);

                    }
                    if (!ledgerReportFlag && !generalLedgerFlag && balance == 0) {
                        balance = balance + openingBalance;
                        balanceAccountCurrency = balanceAccountCurrency + openingBalanceAccountCurrency;
                    }
//                if (balance != 0) {                   //ERP-8896
                    if (balance > 0) {
                        entryChar = "c";
                        emptyChar = "d";
                    } else {
                        entryChar = "d";
                        emptyChar = "c";
                    }
                    JSONObject objlast = new JSONObject();
                    objlast.put(entryChar + "_date", formatter.format(endDate));  //Used GlobalDateFormat to avoid change in time as per time zone. ERP-8482
                    objlast.put(entryChar + "_accountname", "Balance c/f");
                    objlast.put(entryChar + "_acccode", "");
                    objlast.put(entryChar + "_journalentryid", "");
                    objlast.put(entryChar + "_amount", (Double) Math.abs(balance));
                    objlast.put(entryChar + "_transactionID", "");
                    objlast.put(entryChar + "_transactionDetails", "");
                    objlast.put(entryChar + "_transactionDetailsForExpander", "");
                    objlast.put(entryChar + "_checkno", "");
                    objlast.put(entryChar + "_description", "");
                    objlast.put(entryChar + "_transactionDetailsBankBook", "");
                    objlast.put(entryChar + "_amountAccountCurrency", "");
                    objlast.put(emptyChar + "_amountAccountCurrency", "");
                    objlast.put(entryChar + "_transactionAmount", "");
                    objlast.put(emptyChar + "_transactionAmount", "");
                    objlast.put(emptyChar + "_date", "");
                    objlast.put(emptyChar + "_accountname", "");
                    objlast.put(emptyChar + "_journalentryid", "");
                    objlast.put(emptyChar + "_amount", "");
                    objlast.put(emptyChar + "_transactionID", "");
                    objlast.put(emptyChar + "_transactionDetails", "");
                    objlast.put(emptyChar + "_transactionDetailsForExpander", "");
                    objlast.put(emptyChar + "_checkno", "");
                    objlast.put(emptyChar + "_description", "");
                    objlast.put(emptyChar + "_transactionDetailsBankBook", "");
                    objlast.put("accountid", accountid);
                    String accountname = StringUtil.isNullOrEmpty(account.getName()) ? (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : "") : account.getName();
                    objlast.put("accountname", accountname);
                    objlast.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
                    objlast.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                    String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                    objlast.put("accCode", acccode);
                    objlast.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());

                    // this is for displaying on the group header
                    if (!acccode.equals("") && account.getName().equals("")) {
                        objlast.put("accCodeName", acccode);
                    } else if (!acccode.equals("") && !account.getName().equals("")) {
                        objlast.put("accCodeName", acccode + " - " + account.getName());
                    } else {
                        objlast.put("accCodeName", accountname);
                    }

                    objlast.put("balanceAmount", authHandler.round(balanceAmount, companyid));                               //ERP-8775 & 8786
                    objlast.put("balanceAmountAccountCurrency", authHandler.round(balanceAmountAccountCurrency, companyid)); //ERP-8775 & 8786
                    jArr.put(objlast);

                    if (!bankBook && ledgerReportFlag) {
                        JSONObject netbBalanceObj = addNetBalanceJson(request, account, balance, currency);
                        jArr.put(netbBalanceObj);
                    }
                    
                    if (!bankBook && !generalLedgerFlag) { //two times total shown
                        if (request.getParameter("filetype") != null) {
                            if (request.getParameter("filetype").equals("print") || request.getParameter("filetype").equals("csv")) {
                                if (emptyChar == "d") {
                                    total = total + Math.abs(balance);
                                    totalAccountCurrency = totalAccountCurrency + Math.abs(balanceAccountCurrency);
                                }
                                JSONObject total1 = new JSONObject();
                                total1.put(entryChar + "_date", request.getParameter("enddate"));
                                total1.put(entryChar + "_accountname", "Total");
                                total1.put(entryChar + "_journalentryid", "");
                                total1.put(entryChar + "_amount", total);
                                total1.put(entryChar + "_transactionDetails", "");
                                total1.put(entryChar + "_transactionDetailsForExpander", "");
                                total1.put(entryChar + "_transactionID", "");
                                total1.put(entryChar + "_transactionDetailsBankBook", "");
                                total1.put(entryChar + "_description", "");
                                total1.put(emptyChar + "_date", request.getParameter("enddate"));
                                total1.put(emptyChar + "_accountname", "Total");
                                total1.put(emptyChar + "_acccode", "");
                                total1.put(emptyChar + "_journalentryid", "");
                                total1.put(emptyChar + "_amount", total);
                                total1.put(emptyChar + "_transactionID", "");
                                total1.put(emptyChar + "_transactionDetails", "");
                                total1.put(emptyChar + "_transactionDetailsForExpander", "");
                                total1.put(emptyChar + "_transactionDetailsBankBook", "");
                                total1.put(entryChar + "_description", "");
                                total1.put("accountid", accountid);
                                total1.put("isTotal", true);

                                // to separate account code & names into 2 different columns
                                accountname = StringUtil.isNullOrEmpty(account.getName()) ? "" : account.getName();
                                total1.put("accountname", account.getName());
                                total1.put("currencysymbol", (account.getCurrency() == null ? currency.getSymbol() : account.getCurrency().getSymbol()));
                                total1.put("currencycode", (account.getCurrency() == null ? currency.getCurrencyCode() : account.getCurrency().getCurrencyCode()));
                                total1.put(Constants.currencyKey, account.getCurrency() == null ? currency.getCurrencyID() : account.getCurrency().getCurrencyID());

                                acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                                total1.put("accCode", acccode);

                                // this is for displaying on the group header
                                if (!acccode.equals("") && account.getName().equals("")) {
                                    total1.put("accCodeName", acccode);
                                } else if (!acccode.equals("") && !account.getName().equals("")) {
                                    total1.put("accCodeName", acccode + " - " + account.getName());
                                } else {
                                    total1.put("accCodeName", accountname);
                                }

                                jArr.put(total1);
                            }
                        }
                    }
//                }
//                     System.out.println(""+customer1.getName()+"  "+authHandler.formattedAmount(balance)); //please uncomment the code order to calculate the amoundue for single customer
//                }
                }
                jobj.put(Constants.RES_data, jArr);

            } catch (ParseException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
                throw ServiceException.FAILURE("getLedgerForGL : " + ex.getMessage(), ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
                throw ServiceException.FAILURE("getLedgerForGL : " + ex.getMessage(), ex);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
                throw ServiceException.FAILURE("getLedgerForGL : " + ex.getMessage(), ex);
            } catch (Exception ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
                throw ServiceException.FAILURE("getLedgerForGL : " + ex.getMessage(), ex);
            }
            return jobj;
        }
    }

    public KwlReturnObject getVendorLedgerOpeningTransactionReport(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyId = (String) request.get(Constants.companyKey);
//            String vendorId = (String) request.get("vendorId");
//            Date startDate = (Date) request.get("startDate");
//            Date endDate = (Date) request.get("endDate");
            boolean isLedgerReport = false;
            if (request.get("isLedgerReport") != null) {
                isLedgerReport = (Boolean) request.get("isLedgerReport");
            }
            boolean isSortedOnCreationDate = false;
            if (request.get("isSortedOnCreationDate") != null) {
                isSortedOnCreationDate = (Boolean) request.get("isSortedOnCreationDate");
            }
            String orderBy = " ";
            if (isLedgerReport) {
                orderBy = " ORDER BY entrydate";//vendorName,inttype,, entryno  
            }else if(isSortedOnCreationDate){
                orderBy = " ORDER BY vendorName,entrydate";
            }else {
                 if (request.containsKey("dir") && request.containsKey("sort")) {
                    String Col_Name = request.get("sort").toString();
                    String Col_Dir = request.get("dir").toString();
//                    orderBy = columSortSOA(Col_Name, Col_Dir,false);

                }else{
                    orderBy = " ORDER BY vendorName,inttype, entrydate, entryno ";
                }
            }
            ArrayList<String> params = new ArrayList();
            ArrayList<String> paramsInv = new ArrayList();
            String openingVIQry = "";
            String openingDNQry = "";
            String openingCNQry = "";
            String openingMPQry = "";
            String vendorIds = "";
            String accountID = "";
            String opnVICondition = " WHERE gsr.company = 'bfb110be-2654-4759-92c8-fa08b87aae93' ";
            String opnDNCondition = " WHERE dn.company = 'bfb110be-2654-4759-92c8-fa08b87aae93' ";
            String opnCNCondition = " WHERE cn.company = 'bfb110be-2654-4759-92c8-fa08b87aae93' ";
            String opnMPCondition = " WHERE mp.company = 'bfb110be-2654-4759-92c8-fa08b87aae93' ";
            if (request.containsKey("vendorIds") && request.get("vendorIds") != null) {
                vendorIds = (String) request.get("vendorIds");
            }
            if (!StringUtil.isNullOrEmpty(vendorIds) && !vendorIds.contains("All")) {
                vendorIds = AccountingManager.getFilterInString(vendorIds);
                opnVICondition += " AND gsr.vendor in" + vendorIds;
                opnDNCondition += " AND dn.vendor in" + vendorIds;
                opnCNCondition += " AND cn.vendor in" + vendorIds;
                opnMPCondition += " AND mp.vendor in" + vendorIds;
            }
            if (request.containsKey("accid") && request.get("accid") != null) {
                accountID = (String) request.get("accid");
            }
            if (!StringUtil.isNullOrEmpty(accountID) && !accountID.contains("All")) {
                accountID = AccountingManager.getFilterInString(accountID);
                opnVICondition += " AND gsr.account in" + accountID;
                opnDNCondition += " AND dn.account in" + accountID;
                opnCNCondition += " AND cn.account in" + accountID;
                opnMPCondition += " AND mp.account in" + accountID;
            }
            openingVIQry = "SELECT DISTINCT 'Purchase Invoice' AS type,gsr.id as invoiceId,gsr.grnumber AS invoicenumber,gsr.journalentry, "
                    + " gsr.memo,gsr.currency,gsr.originalopeningbalanceamount as Amount,'' AS entryno,gsr.creationdate AS entrydate,gsr.exchangerateforopeningtransaction AS externalcurrencyrate, gsr.vendor, v.name as vendorName,2 AS inttype "
                    + " ,'FALSE' as withoutinventory,gsr.openingbalanceamountdue as amountDue,gsr.account, gsr.isopeningbalenceinvoice as isopeningtransaction, gsr.isconversionratefromcurrencytobase FROM goodsreceipt gsr "
                    + " INNER JOIN vendor v ON gsr.vendor = v.id ";

            openingDNQry = "SELECT DISTINCT 'Debit Note' AS type,dn.id as invoiceId,dn.dnnumber AS invoicenumber,dn.journalentry, "
                    + " dn.memo,dn.currency,dn.dnamount as Amount,'' AS entryno,dn.creationdate AS entrydate,dn.exchangerateforopeningtransaction AS externalcurrencyrate, dn.vendor, v.name as vendorName,5 AS inttype "
                    + " ,'FALSE' as withoutinventory,dn.openingbalanceamountdue as amountDue,dn.account, dn.isopeningbalencedn as isopeningtransaction, dn.isconversionratefromcurrencytobase FROM debitnote dn "
                    + " INNER JOIN vendor v ON dn.vendor = v.id ";

            openingCNQry = "SELECT DISTINCT 'Credit Note' AS type,cn.id as invoiceId,cn.cnnumber AS invoicenumber,cn.journalentry, "
                    + " cn.memo,cn.currency,cn.cnamount as Amount,'' AS entryno,cn.creationdate AS entrydate,cn.exchangerateforopeningtransaction AS externalcurrencyrate, cn.vendor, v.name as vendorName,3 AS inttype "
                    + " ,'FALSE' as withoutinventory,cn.openingbalanceamountdue as amountDue,cn.account, cn.isopeningbalencecn as isopeningtransaction, cn.isconversionratefromcurrencytobase FROM creditnote cn "
                    + " INNER JOIN vendor v ON cn.vendor = v.id ";

            openingMPQry = "SELECT DISTINCT 'Payment Made' AS type,mp.id as invoiceId,mp.paymentnumber AS invoicenumber,mp.journalentry, "
                    + " mp.memo,mp.currency,mp.depositamount as Amount,'' AS entryno,mp.creationdate AS entrydate,mp.exchangerateforopeningtransaction AS externalcurrencyrate, mp.vendor, v.name as vendorName,4 AS inttype "
                    + " ,'FALSE' as withoutinventory,mp.openingbalanceamountdue as amountDue,mp.account, mp.isopeningbalencepayment as isopeningtransaction, mp.isconversionratefromcurrencytobase FROM payment mp "
                    + " INNER JOIN vendor v ON mp.vendor = v.id ";
            openingVIQry += opnVICondition + " AND gsr.deleteflag='F' AND gsr.isopeningbalenceinvoice= 1 ";
            openingDNQry += opnDNCondition + " AND dn.deleteflag='F' AND dn.isopeningbalencedn= 1 ";
            openingCNQry += opnCNCondition + " AND cn.deleteflag='F' AND cn.isopeningbalencecn= 1 ";
            openingMPQry += opnMPCondition + " AND mp.deleteflag='F' AND mp.isopeningbalencepayment= 1 ";
            
            //For openingVIQry
            paramsInv.add(companyId);
            //For openingDNQry
            paramsInv.add(companyId);
            //For openingCNQry
            paramsInv.add(companyId);
            //For openingMPQry
            paramsInv.add(companyId);
            
//            params.addAll(paramsInv);
            
            String query = " SELECT * FROM ("
                    + " (" + openingVIQry + ") "
                    + " UNION "
                    + " (" + openingDNQry + ") "
                    + " UNION "
                    + " (" + openingCNQry + ") "
                    + " UNION "
                    + " (" + openingMPQry + ") "
                    + " ) AS t1 " + orderBy;
//            query = "SELECT * FROM ((SELECT DISTINCT 'Purchase Invoice' AS type,gsr.id as invoiceId,gsr.grnumber AS invoicenumber,gsr.journalentry,  gsr.memo,gsr.currency,gsr.originalopeningbalanceamount as Amount,'' AS entryno,gsr.creationdate AS entrydate,gsr.exchangerateforopeningtransaction AS externalcurrencyrate, gsr.vendor, v.name as vendorName,2 AS inttype  ,'FALSE' as withoutinventory,gsr.openingbalanceamountdue as amountDue,gsr.account, gsr.isopeningbalenceinvoice as isopeningtransaction, gsr.isconversionratefromcurrencytobase FROM goodsreceipt gsr  INNER JOIN vendor v ON gsr.vendor = v.id  WHERE gsr.company = ?  AND gsr.deleteflag='F' AND gsr.isopeningbalenceinvoice= 1 ) UNION (SELECT DISTINCT 'Debit Note' AS type,dn.id as invoiceId,dn.dnnumber AS invoicenumber,dn.journalentry,  dn.memo,dn.currency,dn.dnamount as Amount,'' AS entryno,dn.creationdate AS entrydate,dn.exchangerateforopeningtransaction AS externalcurrencyrate, dn.vendor, v.name as vendorName,5 AS inttype  ,'FALSE' as withoutinventory,dn.openingbalanceamountdue as amountDue,dn.account, dn.isopeningbalencedn as isopeningtransaction, dn.isconversionratefromcurrencytobase FROM debitnote dn  INNER JOIN vendor v ON dn.vendor = v.id  WHERE dn.company = ?  AND dn.deleteflag='F' AND dn.isopeningbalencedn= 1 ) UNION (SELECT DISTINCT 'Credit Note' AS type,cn.id as invoiceId,cn.cnnumber AS invoicenumber,cn.journalentry,  cn.memo,cn.currency,cn.cnamount as Amount,'' AS entryno,cn.creationdate AS entrydate,cn.exchangerateforopeningtransaction AS externalcurrencyrate, cn.vendor, v.name as vendorName,3 AS inttype  ,'FALSE' as withoutinventory,cn.openingbalanceamountdue as amountDue,cn.account, cn.isopeningbalencecn as isopeningtransaction, cn.isconversionratefromcurrencytobase FROM creditnote cn  INNER JOIN vendor v ON cn.vendor = v.id  WHERE cn.company = ?  AND cn.deleteflag='F' AND cn.isopeningbalencecn= 1 ) UNION (SELECT DISTINCT 'Payment Made' AS type,mp.id as invoiceId,mp.paymentnumber AS invoicenumber,mp.journalentry,  mp.memo,mp.currency,mp.depositamount as Amount,'' AS entryno,mp.creationdate AS entrydate,mp.exchangerateforopeningtransaction AS externalcurrencyrate, mp.vendor, v.name as vendorName,4 AS inttype  ,'FALSE' as withoutinventory,mp.openingbalanceamountdue as amountDue,mp.account, mp.isopeningbalencepayment as isopeningtransaction, mp.isconversionratefromcurrencytobase FROM payment mp  INNER JOIN vendor v ON mp.vendor = v.id  WHERE mp.company = ?  AND mp.deleteflag='F' AND mp.isopeningbalencepayment= 1 )) AS t1 ORDER BY vendorName,inttype, entrydate, entryno";
//            query = "SELECT * FROM ((SELECT DISTINCT 'Purchase Invoice' AS type,gsr.id as invoiceId,gsr.grnumber AS invoicenumber,gsr.journalentry,  gsr.memo,gsr.currency,gsr.originalopeningbalanceamount as Amount,'' AS entryno,gsr.creationdate AS entrydate,gsr.exchangerateforopeningtransaction AS externalcurrencyrate, gsr.vendor, v.name as vendorName,2 AS inttype  ,'FALSE' as withoutinventory,gsr.openingbalanceamountdue as amountDue,gsr.account, gsr.isopeningbalenceinvoice as isopeningtransaction, gsr.isconversionratefromcurrencytobase FROM goodsreceipt gsr  INNER JOIN vendor v ON gsr.vendor = v.id  WHERE gsr.company = 'bfb110be-2654-4759-92c8-fa08b87aae93'  AND gsr.deleteflag='F' AND gsr.isopeningbalenceinvoice= 1 ) UNION (SELECT DISTINCT 'Debit Note' AS type,dn.id as invoiceId,dn.dnnumber AS invoicenumber,dn.journalentry,  dn.memo,dn.currency,dn.dnamount as Amount,'' AS entryno,dn.creationdate AS entrydate,dn.exchangerateforopeningtransaction AS externalcurrencyrate, dn.vendor, v.name as vendorName,5 AS inttype  ,'FALSE' as withoutinventory,dn.openingbalanceamountdue as amountDue,dn.account, dn.isopeningbalencedn as isopeningtransaction, dn.isconversionratefromcurrencytobase FROM debitnote dn  INNER JOIN vendor v ON dn.vendor = v.id  WHERE dn.company = 'bfb110be-2654-4759-92c8-fa08b87aae93'  AND dn.deleteflag='F' AND dn.isopeningbalencedn= 1 ) UNION (SELECT DISTINCT 'Credit Note' AS type,cn.id as invoiceId,cn.cnnumber AS invoicenumber,cn.journalentry,  cn.memo,cn.currency,cn.cnamount as Amount,'' AS entryno,cn.creationdate AS entrydate,cn.exchangerateforopeningtransaction AS externalcurrencyrate, cn.vendor, v.name as vendorName,3 AS inttype  ,'FALSE' as withoutinventory,cn.openingbalanceamountdue as amountDue,cn.account, cn.isopeningbalencecn as isopeningtransaction, cn.isconversionratefromcurrencytobase FROM creditnote cn  INNER JOIN vendor v ON cn.vendor = v.id  WHERE cn.company = 'bfb110be-2654-4759-92c8-fa08b87aae93'  AND cn.deleteflag='F' AND cn.isopeningbalencecn= 1 ) UNION (SELECT DISTINCT 'Payment Made' AS type,mp.id as invoiceId,mp.paymentnumber AS invoicenumber,mp.journalentry,  mp.memo,mp.currency,mp.depositamount as Amount,'' AS entryno,mp.creationdate AS entrydate,mp.exchangerateforopeningtransaction AS externalcurrencyrate, mp.vendor, v.name as vendorName,4 AS inttype  ,'FALSE' as withoutinventory,mp.openingbalanceamountdue as amountDue,mp.account, mp.isopeningbalencepayment as isopeningtransaction, mp.isconversionratefromcurrencytobase FROM payment mp  INNER JOIN vendor v ON mp.vendor = v.id  WHERE mp.company = 'bfb110be-2654-4759-92c8-fa08b87aae93'  AND mp.deleteflag='F' AND mp.isopeningbalencepayment= 1 )) AS t1 ORDER BY vendorName,inttype, entrydate, entryno";
            list = executeSQLQuery( query, params.toArray());
//            list = executeSQLQuery( query, null);
            count = list.size();
            
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getVendorLedgerOpeningTransactionReport:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", "", list, count);
    }
    public Map<String, String> getCustomFieldAndDimensionData(Map<String, Object> subLedegrExportMap, HashMap<String, HashMap> map, String recid, boolean isJEDetailId) throws UnsupportedEncodingException, ServiceException {
        HashMap<String, String> returnMap = new HashMap();
        String subGroupHeader = "";
        String mainGroupHeader = "";

        HashMap<String, Integer> FieldMap = map.get("FieldMap");
        HashMap<String, String> replaceFieldMap = map.get("replaceFieldMap");
        HashMap<String, String> customFieldMap = map.get("customFieldMap");
        HashMap<String, String> customDateFieldMap = map.get("customDateFieldMap");

        boolean isSubLedgerExport = false;
        if (subLedegrExportMap.containsKey("isSubLedgerExport")) {
            isSubLedgerExport = (boolean) subLedegrExportMap.get("isSubLedgerExport");
        }
        if (isSubLedgerExport) {
            subGroupHeader = subLedegrExportMap.get(Constants.SUB_GROUP_HEADER).toString();
            mainGroupHeader = subLedegrExportMap.get(Constants.MAIN_GROUP_HEADER).toString();
        }
        // ## Get Custom Field Data 
        Map<String, Object> variableMap = new HashMap<String, Object>();
        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
        if (isJEDetailId) {
            Detailfilter_names.add(Constants.Acc_jedetailId);
        } else {
            Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
        }
        Detailfilter_params.add(recid);
        invDetailRequestParams.put("filter_names", Detailfilter_names);
        invDetailRequestParams.put("filter_params", Detailfilter_params);

        KwlReturnObject idcustresult = accInvoiceDAOobj.getInvoiceDetailsCustomData(invDetailRequestParams);
        if (idcustresult.getEntityList().size() > 0) {
            AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustresult.getEntityList().get(0);
            AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
            DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                        Date dateFromDB=null;
            variableMap = StringUtil.sortMapByKeyValue(variableMap);
            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                String coldata = varEntry.getValue() != null ? varEntry.getValue().toString() : "";
                String fieldName = "";
                fieldName = StringUtil.isNullOrEmpty(varEntry.getKey()) ? "" : varEntry.getKey().substring(7, varEntry.getKey().length());
                String valueForReport = "";
                if (customFieldMap.containsKey(varEntry.getKey()) && coldata != null) {
                    try {
                        String[] valueData = coldata.split(",");
                        for (String value : valueData) {
                            KwlReturnObject resultFieldComboData = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), value);
                            if (!resultFieldComboData.getEntityList().isEmpty() && resultFieldComboData.getEntityList().get(0) != null) {
                                FieldComboData fieldComboData = (FieldComboData) resultFieldComboData.getEntityList().get(0);
                                if (fieldComboData != null) {
                                    valueForReport += fieldComboData.getValue() + ",";
                                }
                            }
                        }
                        if (valueForReport.length() > 1) {
                            valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                        }
                    } catch (Exception ex) {
                        valueForReport = coldata;
                    }
                } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                    DateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
                    try {
                        dateFromDB = defaultDateFormat.parse(coldata);
                        coldata = df2.format(dateFromDB);

                    } catch (Exception e) {
                    }
                    valueForReport = coldata;
                } else {
                    valueForReport = coldata != null ? coldata : "";
                }
                if ((varEntry.getKey()).equals("Custom_"+mainGroupHeader)) {
                    returnMap.put(Constants.MAIN_GROUP_VALUE, mainGroupHeader +" : " +valueForReport);
                } else if ((varEntry.getKey()).equals("Custom_"+subGroupHeader)) {
                    returnMap.put(Constants.SUB_GROUP_VALUE, subGroupHeader +" : " +valueForReport);
                }
            }
        }
        return returnMap;
    }

    HashMap<String, HashMap> getMapOfCustomFieldDataForSubLedger(String companyid, int moduleid) {
        HashMap<String, HashMap> returnMap = new HashMap<String, HashMap>();
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1));
        fieldrequestParams.put("order_by", Arrays.asList("fieldlabel"));
        fieldrequestParams.put("order_type", Arrays.asList("asc"));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
        returnMap.put("FieldMap", FieldMap);
        returnMap.put("replaceFieldMap", replaceFieldMap);
        returnMap.put("customFieldMap", customFieldMap);
        returnMap.put("customDateFieldMap", customDateFieldMap);
        return returnMap;
    }

    Map<String, String> getTransactionDetailsForInvoiceSubLedger(Map<String, Invoice> invoiceMap, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount) throws UnsupportedEncodingException, ServiceException, JSONException {

        Invoice invoice = (Invoice) invoiceMap.get(entry.getID());
        return getTransactionDetailsForInvoiceSubLedger(invoice,subLedgerMap,entry,jed,accountid,companyid,cashAccount);
    }
    
    private Map<String, String> getTransactionDetailsForInvoiceSubLedger(Invoice invoice, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount) throws UnsupportedEncodingException, ServiceException, JSONException {

        String subGroupValue = "";
        String mainGroupValue = "";
        DecimalFormat decimalFormat = new DecimalFormat("#,##0.00");
        Map<String, String> transDetMap = new HashMap<String, String>();

        HashMap<String, HashMap> map = getMapOfCustomFieldDataForSubLedger(companyid, Constants.Acc_Invoice_ModuleId);

        KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), invoice.getCustomer().getID());
        Customer customer = (Customer) KWLCustomer.getEntityList().get(0);

        if (invoice != null) {
            String lineLevelDetails = "";
            String lineLevelDetailsForExpander = "";
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            HashMap<String, Object> requestParamsHash = new HashMap();
            filter_names.add("invoice.ID");
            filter_params.add(invoice.getID());
            requestParamsHash.put("filter_names", filter_names);
            requestParamsHash.put("filter_params", filter_params);
            KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
            List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
            for (InvoiceDetail detail : invoiceDetails) {
                if (detail.getInventory() != null) {
                    Inventory inventory = null;;
                    Product prd = null;
                    KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                    List listInv = KWLInventory.getEntityList();
                    Iterator itrInv = listInv.iterator();
                    if (itrInv.hasNext()) {
                        Object[] rowInv = (Object[]) itrInv.next();
                        inventory = (Inventory) rowInv[0];
                        prd = (Product) rowInv[1];
                    }
                    if (prd.getSalesAccount().getID().equals(accountid) || customer.getAccount().getID().equals(accountid) || cashAccount.equals(accountid)) {

                        Map<String, String> customColDataMap = new HashMap<String, String>();
                        customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                        if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                            subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                        }
                        if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                            mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                        }
                        if (detail.getSalesJED() != null && jed.getID().equals(detail.getSalesJED().getID())) {
                            break;
                        }
                    }
                }
            }

        }
        transDetMap.put(Constants.SUB_GROUP_VALUE, subGroupValue);
        transDetMap.put(Constants.MAIN_GROUP_VALUE, mainGroupValue);
        return transDetMap;
    }

    Map<String, String> getTransactionDetailsForPurchaseInvoiceSubLedger(Map<String, GoodsReceipt> grMap, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount) throws UnsupportedEncodingException, ServiceException, JSONException {

        GoodsReceipt goodsReceipt = grMap.get(entry.getID());
        return getTransactionDetailsForPurchaseInvoiceSubLedger(goodsReceipt, subLedgerMap, entry, jed, accountid, companyid, cashAccount);
    }
    
    private Map<String, String> getTransactionDetailsForPurchaseInvoiceSubLedger(GoodsReceipt goodsReceipt, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount) throws UnsupportedEncodingException, ServiceException, JSONException {

        String subGroupValue = "";
        String mainGroupValue = "";
        Map<String, String> transDetMap = new HashMap<String, String>();

        HashMap<String, HashMap> map = getMapOfCustomFieldDataForSubLedger(companyid, Constants.Acc_Vendor_Invoice_ModuleId);

        KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), goodsReceipt.getVendor().getID());
        Vendor vendor = (Vendor) KWLVendor.getEntityList().get(0);
        if (goodsReceipt != null) {
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            HashMap<String, Object> requestParamsHash = new HashMap();
            filter_names.add("goodsReceipt.ID");
            filter_params.add(goodsReceipt.getID());
            requestParamsHash.put("filter_names", filter_names);
            requestParamsHash.put("filter_params", filter_params);
            KwlReturnObject cnResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(requestParamsHash);
            List<GoodsReceiptDetail> invoiceDetails = cnResult.getEntityList();

            for (GoodsReceiptDetail detail : invoiceDetails) {
                if (detail.getInventory() != null) {
                    Inventory inventory = null;;
                    Product prd = null;
                    KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                    List listInv = KWLInventory.getEntityList();
                    Iterator itrInv = listInv.iterator();
                    if (itrInv.hasNext()) {
                        Object[] rowInv = (Object[]) itrInv.next();
                        inventory = (Inventory) rowInv[0];
                        prd = (Product) rowInv[1];
                    }
                    if (prd.getPurchaseAccount().getID().equals(accountid) || vendor.getAccount().getID().equals(accountid) || cashAccount.equals(accountid)) {
                        Map<String, String> customColDataMap = new HashMap<String, String>();
                        customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                        if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                            subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                        }
                        if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                            mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                        }

                        if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                            break;
                        }
                    }
                }
            }

            KwlReturnObject exResult = accGoodsReceiptDAOObj.getExpenseGRDetails(requestParamsHash);
            List<ExpenseGRDetail> expGRDetail = exResult.getEntityList();
            if (expGRDetail != null && expGRDetail.size() > 0) {

                for (ExpenseGRDetail detail : expGRDetail) {
                    KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                    Account acc = (Account) KWLAccount.getEntityList().get(0);
                    if (acc != null) {
                        if (acc.getID().equals(accountid) || vendor.getAccount().getID().equals(accountid) || cashAccount.equals(accountid)) {
                            String accName = "", accID = "", accDesc = "", accDescForExpander = "";
                            accID = StringUtil.isNullOrEmpty(acc.getAcccode()) ? "" : acc.getAcccode();
                            accName = StringUtil.isNullOrEmpty(acc.getName()) ? "" : acc.getName();
                            accDesc = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : "<br>" + detail.getDescription();
                            accDescForExpander = StringUtil.isNullOrEmpty(detail.getDescription()) ? "" : ", " + detail.getDescription();


                            int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                            if (isRecPresent > 0) {
                                Map<String, String> customColDataMap = new HashMap<String, String>();
                                customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                                if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                                    subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                                }
                                if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                                    mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                                }
                            }

                            if (detail.getPurchaseJED() != null && jed.getID().equals(detail.getPurchaseJED().getID())) {
                                break;
                            }
                        }
                    }
                }

            }
        }
        transDetMap.put(Constants.SUB_GROUP_VALUE, subGroupValue);
        transDetMap.put(Constants.MAIN_GROUP_VALUE, mainGroupValue);
        return transDetMap;
    }

    Map<String, String> getTransactionDetailsForCreditNoteSubLedger(Map<String, Object[]> creditNoteMapPar, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {

        CreditNote creditNote = null;
        boolean isPartyJournalEntry = entry.getTypeValue() == 2;
        if (!isPartyJournalEntry) {
            creditNote = (CreditNote) creditNoteMapPar.get(entry.getID())[0];
        }
        return getTransactionDetailsForCreditNoteSubLedger(creditNote, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
    }
    
    private Map<String, String> getTransactionDetailsForCreditNoteSubLedger(CreditNote creditNote, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {

        String subGroupValue = "";
        String mainGroupValue = "";
        String transactionDetailsForExpander = "";
        boolean isPartyJournalEntry = entry.getTypeValue() == 2;
        Map<String, String> transDetMap = new HashMap<String, String>();
        if (isPartyJournalEntry) {

            HashMap<String, HashMap> map = getMapOfCustomFieldDataForSubLedger(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId);

            if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
                KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                Account acc = (Account) KWLAccount.getEntityList().get(0);
                if (acc != null && acc.getID().equals(accountid)) {
                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, jed.getID());
//                        customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId, jed.getID(), false) : "";
                    if (isRecPresent > 0) {
                        Map<String, String> customColDataMap = new HashMap<String, String>();
                        customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, jed.getID(), false);
                        if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                            subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                        }
                        if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                            mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                        }
                    }
                }
            }
        } else {

            HashMap<String, HashMap> map = getMapOfCustomFieldDataForSubLedger(companyid, Constants.Acc_Credit_Note_ModuleId);

            Customer customer = null;
            Vendor vendor = null;
            if (creditNote != null && creditNote.getCustomer() != null) {
                KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), creditNote.getCustomer().getID());
                customer = (Customer) KWLCustomer.getEntityList().get(0);
            } else if (creditNote != null && creditNote.getVendor() != null) {
                KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), creditNote.getVendor().getID());
                vendor = (Vendor) KWLVendor.getEntityList().get(0);
            }
            HashMap<String, Object> paramsTaxDetails = new HashMap<>();
            paramsTaxDetails.put("companyid", companyid);
            paramsTaxDetails.put("cnid", creditNote.getID());
            paramsTaxDetails.put("accid", null);
            KwlReturnObject cnResult = accCreditNoteobj.getCreditTaxDetails(paramsTaxDetails);
            List<CreditNoteTaxEntry> invoiceDetails = cnResult.getEntityList();
            if (invoiceDetails != null && invoiceDetails.size() > 0) {
//                    Set<CreditNoteTaxEntry> invoiceDetails = creditNote.getCnTaxEntryDetails();
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                for (CreditNoteTaxEntry detail : invoiceDetails) {
//                        Account acc = detail.getAccount();
                    KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                    Account acc = (Account) KWLAccount.getEntityList().get(0);
                    if (acc != null) {
                        if (acc.getID().equals(accountid) || (vendor != null && vendor.getAccount().getID().equals(accountid)) || (customer != null && customer.getAccount().getID().equals(accountid)) || cashAccount.equals(accountid)) {
                            String customColData = "", customColDataForExpander = "";
                            int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
//                                customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Credit_Note_ModuleId, detail.getID(), false) : "";
                            if (isRecPresent > 0) {
                                Map<String, String> customColDataMap = new HashMap<String, String>();
                                customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);

                                if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                                    subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                                }
                                if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                                    mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                                }
                            }

                            if (detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) {
                                break;
                            }
                        }
                    }
                }

            }
        }

        transDetMap.put(Constants.SUB_GROUP_VALUE, subGroupValue);
        transDetMap.put(Constants.MAIN_GROUP_VALUE, mainGroupValue);
        return transDetMap;
    }

    Map<String, String> getTransactionDetailsForSubLedgerDebitNote(Map<String, Object[]> debitNoteMapPar, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {

        boolean isPartyJournalEntry = entry.getTypeValue() == 2;
        Map<String, String> transDetMap = new HashMap<String, String>();
        DebitNote debitNote = null;

        if (!isPartyJournalEntry) {
            debitNote = (DebitNote) debitNoteMapPar.get(entry.getID())[0];
        }
        return getTransactionDetailsForSubLedgerDebitNote(debitNote, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
    }
    Map<String, String> getTransactionDetailsForSubLedgerDebitNote(DebitNote debitNote, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {

        String subGroupValue = "";
        String mainGroupValue = "";
        boolean isPartyJournalEntry = entry.getTypeValue() == 2;
        Map<String, String> transDetMap = new HashMap<String, String>();

        if (isPartyJournalEntry) {
            HashMap<String, HashMap> map = getMapOfCustomFieldDataForSubLedger(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId);

            if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
                KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                Account acc = (Account) KWLAccount.getEntityList().get(0);
                if (acc != null && acc.getID().equals(accountid)) {
                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, jed.getID());
                    if (isRecPresent > 0) {
                        Map<String, String> customColDataMap = new HashMap<String, String>();
                        customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, jed.getID(), false);

                        if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                            subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                        }
                        if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                            mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                        }
                    }
                }
            }
        } else {

            HashMap<String, HashMap> map = getMapOfCustomFieldDataForSubLedger(companyid, Constants.Acc_Debit_Note_ModuleId);

            Customer customer = null;
            Vendor vendor = null;
            if (debitNote != null && debitNote.getCustomer() != null) {
                KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), debitNote.getCustomer().getID());
                customer = (Customer) KWLCustomer.getEntityList().get(0);
            } else if (debitNote != null && debitNote.getVendor() != null) {
                KwlReturnObject KWLVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), debitNote.getVendor().getID());
                vendor = (Vendor) KWLVendor.getEntityList().get(0);
            }
            HashMap<String, Object> paramsTaxDetails = new HashMap<>();
            paramsTaxDetails.put("companyid", companyid);
            paramsTaxDetails.put("dnid", debitNote.getID());
            paramsTaxDetails.put("accid", null);
            KwlReturnObject cnResult = accDebitNoteobj.getDebitTaxDetails(paramsTaxDetails);
            List<DebitNoteTaxEntry> invoiceDetails = cnResult.getEntityList();
            if (invoiceDetails != null && invoiceDetails.size() > 0) {
                String lineLevelDetails = "";
                String lineLevelDetailsForExpander = "";
                for (DebitNoteTaxEntry detail : invoiceDetails) {
                    KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), detail.getAccount().getID());
                    Account acc = (Account) KWLAccount.getEntityList().get(0);
                    if (acc != null) {
                        if (acc.getID().equals(accountid) || (vendor != null && vendor.getAccount().getID().equals(accountid)) || (customer != null && customer.getAccount().getID().equals(accountid)) || cashAccount.equals(accountid)) {
                            int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                            if (isRecPresent > 0) {
                                Map<String, String> customColDataMap = new HashMap<String, String>();
                                customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                                if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                                    subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                                }
                                if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                                    mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                                }
                            }
                            if (detail.getTotalJED() != null && jed.getID().equals(detail.getTotalJED().getID())) {
                                break;
                            }
                        }
                    }
                }

            }
        }
        transDetMap.put(Constants.SUB_GROUP_VALUE, subGroupValue);
        transDetMap.put(Constants.MAIN_GROUP_VALUE, mainGroupValue);
        return transDetMap;
    }

    Map<String, String> getTransactionDetailsForReceiptSubLedger(Map<String, Object[]> paymentReceivedMap, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig, Map<String, Integer> jeDetailReceiptTypeMap, boolean bankBook, boolean ledgerReport) throws UnsupportedEncodingException, ServiceException, JSONException {

        Receipt tempr = (Receipt) paymentReceivedMap.get(entry.getID())[0];
        return getTransactionDetailsForReceiptSubLedger(tempr, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailReceiptTypeMap, bankBook, ledgerReport);
    }
    
    Map<String, String> getTransactionDetailsForReceiptSubLedger(Receipt tempr, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig, Map<String, Integer> jeDetailReceiptTypeMap, boolean bankBook, boolean ledgerReport) throws UnsupportedEncodingException, ServiceException, JSONException {

        String subGroupValue = "";
        String mainGroupValue = "";
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        Map<String, String> transDetMap = new HashMap<String, String>();

        HashMap<String, HashMap> map = getMapOfCustomFieldDataForSubLedger(companyid, Constants.Acc_Receive_Payment_ModuleId);

        int receiptType = 0; // 0 if no mapping present
        if (jeDetailReceiptTypeMap.containsKey(jed.getID()) && jeDetailReceiptTypeMap.get(jed.getID()) != null) {
            receiptType = jeDetailReceiptTypeMap.get(jed.getID()).intValue();
        }
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
        HashMap<String, Object> requestParamsMap = new HashMap();
        filter_names.add("ID");
        filter_params.add(tempr.getPayDetail().getID());
        requestParamsMap.put("filter_names", filter_names);
        requestParamsMap.put("filter_params", filter_params);
        KwlReturnObject resultPayDet = accReceiptDao.getPayDetails(requestParamsMap);
        PayDetail payDetail = (PayDetail) resultPayDet.getEntityList().get(0);
        String cvName = "";
        if (tempr != null && tempr.getCustomer() != null && (bankBook || ledgerReport)) {
            KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempr.getCustomer().getID());
            Customer customer = (Customer) resultCustomer.getEntityList().get(0);
            cvName = customer.getName();
        } else if (tempr != null && !StringUtil.isNullOrEmpty(tempr.getVendor()) && (bankBook || ledgerReport)) {
            KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempr.getVendor());
            if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().get(0) != null) {
                Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                cvName = vendor.getName();
            }
        }
        String memo = StringUtil.isNullOrEmpty(tempr.getMemo()) ? "" : "<br>" + tempr.getMemo();
        String memoForExpander = StringUtil.isNullOrEmpty(tempr.getMemo()) ? "" : ", " + tempr.getMemo();
        String vName = "";
        if (tempr != null && tempr.getCustomer() != null) {
            KwlReturnObject resultCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), tempr.getCustomer().getID());
            Customer customer = (Customer) resultCustomer.getEntityList().get(0);
            vName = customer.getName();
        } else if (tempr != null && !StringUtil.isNullOrEmpty(tempr.getVendor())) {
            KwlReturnObject resultVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), tempr.getVendor());
            if (!resultVendor.getEntityList().isEmpty() && resultVendor.getEntityList().size() > 0) {
                if (resultVendor.getEntityList().get(0) != null) {
                    Vendor vendor = (Vendor) resultVendor.getEntityList().get(0);
                    vName = vendor.getName();
                }
            }
        }
        filter_names.clear();
        filter_params.clear();
        requestParamsMap.clear();
        filter_names.add("receipt.ID");
        filter_params.add(tempr.getID());
        requestParamsMap.put("filter_names", filter_names);
        requestParamsMap.put("filter_params", filter_params);

        KwlReturnObject result = accReceiptDao.getReceiptDetailOtherwise(requestParamsMap);
        List<ReceiptDetailOtherwise> tempList = result.getEntityList();
        if (tempList != null && tempList.size() > 0 && (receiptType == Constants.GLPayment || receiptType == 0)) {
            if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
                KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                Account acc = (Account) KWLAccount.getEntityList().get(0);
                if (acc != null && acc.getID().equals(accountid)) {


                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataJECount(companyid, jed.getID());
                    if (isRecPresent > 0) {
                        Map<String, String> customColDataMap = new HashMap<String, String>();
                        customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, jed.getID(), true);

                        if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                            subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                        }
                        if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                            mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                        }
                    }

                }
            }
        }
        KwlReturnObject resultAdv = accReceiptDao.getReceiptAdvanceDetails(requestParamsMap);
        List<ReceiptAdvanceDetail> tempListresultAdv = resultAdv.getEntityList();
        if (tempListresultAdv != null && tempListresultAdv.size() > 0 && (receiptType == Constants.AdvancePayment || receiptType == 0)) {
//                Set<ReceiptAdvanceDetail> invoiceDetails = tempr.getReceiptAdvanceDetails();
            String lineLevelDetails = "";
            String lineLevelDetailsForExpander = "";
            for (ReceiptAdvanceDetail detail : tempListresultAdv) {

                int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getId());
//                    customColData = (isRecPresent > 0) ? getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getId(), false) : "";
                //customColData = getCustomFieldAndDimensionData(companyid, Constants.Acc_Receive_Payment_ModuleId, detail.getId(),false);
                if (isRecPresent > 0) {
                    Map<String, String> customColDataMap = new HashMap<String, String>();
                    customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getId(), false);
                    if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                        subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                    }
                    if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                        mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                    }
                }

                if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                    break;
                }
            }

        }

        KwlReturnObject resultDNPaymentDet = accReceiptDao.getDebitNotePaymentDetails(requestParamsMap);
        List<DebitNotePaymentDetails> tempListresultDNPaymentDet = resultDNPaymentDet.getEntityList();
        String lineLevelDNDetails = "";
        String lineLevelDNDetailsForExpander = "";
        if (tempListresultDNPaymentDet != null && tempListresultDNPaymentDet.size() > 0 && (receiptType == Constants.PaymentAgainstCNDN || receiptType == 0)) {
            for (DebitNotePaymentDetails detail : tempListresultDNPaymentDet) {
                DebitNote debitNote = detail.getDebitnote();
                if (debitNote != null) {
                    KwlReturnObject kwlDebitNote = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), detail.getDebitnote().getID());
                    debitNote = (DebitNote) kwlDebitNote.getEntityList().get(0);
                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                    if (isRecPresent > 0) {
                        Map<String, String> customColDataMap = new HashMap<String, String>();
                        customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                        if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                            subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                        }
                        if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                            mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                        }
                    }
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
            }

        }

        KwlReturnObject resultReceiptDetail = accReceiptDao.getReceiptDetails(requestParamsMap);
        List<ReceiptDetail> tempListresultReceiptDetail = resultReceiptDetail.getEntityList();
        if (tempListresultReceiptDetail != null && tempListresultReceiptDetail.size() > 0 && (receiptType == Constants.PaymentAgainstInvoice || receiptType == 0)) {
            String lineLevelDetails = "";
            String lineLevelDetailsForExpander = "";
            for (ReceiptDetail detail : tempListresultReceiptDetail) {
                Invoice inv = detail.getInvoice();
                if (inv != null) {
                    KwlReturnObject KWLInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), detail.getInvoice().getID());
                    inv = (Invoice) KWLInvoice.getEntityList().get(0);
                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                    if (isRecPresent > 0) {
                        Map<String, String> customColDataMap = new HashMap<String, String>();
                        customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                        if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                            subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                        }
                        if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                            mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                        }
                    }

                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
                GoodsReceipt gr = detail.getGoodsReceipt();
                if (gr != null) {
                    KwlReturnObject KWLGoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), detail.getGoodsReceipt().getID());
                    gr = (GoodsReceipt) KWLGoodsReceipt.getEntityList().get(0);
                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                    if (isRecPresent > 0) {
                        Map<String, String> customColDataMap = new HashMap<String, String>();
                        customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                        if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                            subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                        }
                        if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                            mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                        }
                    }
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
            }
        }

        if (!StringUtil.isNullOrEmpty(cvName) && (bankBook || ledgerReport)) {
            if (tempr != null && tempr.getReceivedFrom() != null) {
                KwlReturnObject KWLMasterItem = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), tempr.getReceivedFrom().getID());
                MasterItem masterItem = (MasterItem) KWLMasterItem.getEntityList().get(0);
            }
        } else {
            if (tempr != null && tempr.getReceivedFrom() != null) {
                KwlReturnObject KWLMasterItem = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), tempr.getReceivedFrom().getID());
                MasterItem masterItem = (MasterItem) KWLMasterItem.getEntityList().get(0);
            }
        }
        transDetMap.put(Constants.SUB_GROUP_VALUE, subGroupValue);
        transDetMap.put(Constants.MAIN_GROUP_VALUE, mainGroupValue);
        return transDetMap;
    }

    Map<String, String> getTransactionDetailsForPaymentSubLedger(Map<String, Object[]> paymentMadeMap, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig, Map<String, Integer> jeDetailPaymentTypeMap, boolean bankBook, boolean ledgerReport) throws UnsupportedEncodingException, ServiceException, JSONException {

        Payment tempp = (Payment) paymentMadeMap.get(entry.getID())[0];
        return getTransactionDetailsForPaymentSubLedger(tempp, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, true, jeDetailPaymentTypeMap, bankBook, ledgerReport);
    }
    
    Map<String, String> getTransactionDetailsForPaymentSubLedger(Payment tempp, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig, Map<String, Integer> jeDetailPaymentTypeMap, boolean bankBook, boolean ledgerReport) throws UnsupportedEncodingException, ServiceException, JSONException {

        String subGroupValue = "";
        String mainGroupValue = "";
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        Map<String, String> transDetMap = new HashMap<String, String>();

        HashMap<String, HashMap> map = getMapOfCustomFieldDataForSubLedger(companyid, Constants.Acc_Make_Payment_ModuleId);

        int paymentType = 0;
        if (jeDetailPaymentTypeMap.containsKey(jed.getID()) && jeDetailPaymentTypeMap.get(jed.getID()) != null) {
            paymentType = jeDetailPaymentTypeMap.get(jed.getID()).intValue();
        }
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
        HashMap<String, Object> requestParamsMap = new HashMap();
        filter_names.add("payment.ID");
        filter_params.add(tempp.getID());
        requestParamsMap.put("filter_names", filter_names);
        requestParamsMap.put("filter_params", filter_params);

        List<PaymentDetailOtherwise> detailsList = accVendorPaymentobj.getPaymentDetailOtherwise(tempp.getID());
        if (detailsList != null && detailsList.size() > 0 && (paymentType == Constants.GLPayment || paymentType == 0)) {
            if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
//                    Account acc = jed.getAccount();
                KwlReturnObject resultAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
                Account acc = (Account) resultAccount.getEntityList().get(0);
                if (acc != null && acc.getID().equals(accountid)) {
                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataJECount(companyid, jed.getID());
                    if (isRecPresent > 0) {
                        Map<String, String> customColDataMap = new HashMap<String, String>();
                        customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, jed.getID(), true);
                        if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                            subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                        }
                        if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                            mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                        }
                    }
                }
            }
        }
        List<AdvanceDetail> detailsListAdvanced = accVendorPaymentobj.getPaymentDetailAdvanced(tempp.getID());
        if (detailsListAdvanced != null && detailsListAdvanced.size() > 0 && (paymentType == Constants.AdvancePayment || paymentType == 0)) {
            String lineLevelDetails = "";
            String lineLevelDetailsForExpander = "";
            for (AdvanceDetail detail : detailsListAdvanced) {
                int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getId());
                if (isRecPresent > 0) {
                    Map<String, String> customColDataMap = new HashMap<String, String>();
                    customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getId(), false);
                    if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                        subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                    }
                    if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                        mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                    }
                }

                if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                    break;
                }
            }
        }
        KwlReturnObject resultCNPaymentDet = accVendorPaymentobj.getCreditNotePaymentDetails(requestParamsMap);
        List<CreditNotePaymentDetails> tempListresultCNPaymentDet = resultCNPaymentDet.getEntityList();
        if (tempListresultCNPaymentDet != null && tempListresultCNPaymentDet.size() > 0 && (paymentType == Constants.PaymentAgainstCNDN || paymentType == 0)) {
            for (CreditNotePaymentDetails detail : tempListresultCNPaymentDet) {
                CreditNote creditNote = detail.getCreditnote();
                if (creditNote != null) {
                    KwlReturnObject cnresult = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), detail.getCreditnote().getID());
                    creditNote = (CreditNote) cnresult.getEntityList().get(0);
                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                    if (isRecPresent > 0) {
                        Map<String, String> customColDataMap = new HashMap<String, String>();
                        customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                        if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                            subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                        }
                        if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                            mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                        }
                    }
                    if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                        break;
                    }
                }
            }
        }

        KwlReturnObject resultPaymentDetails = accVendorPaymentobj.getPaymentDetails(requestParamsMap);
        List<PaymentDetail> tempListresultPaymentDetails = resultPaymentDetails.getEntityList();
        if (tempListresultPaymentDetails != null && tempListresultPaymentDetails.size() > 0 && (paymentType == Constants.PaymentAgainstInvoice || paymentType == 0)) {
            for (PaymentDetail detail : tempListresultPaymentDetails) {
                Invoice inv = detail.getInvoice();
                if (inv != null) {
                    KwlReturnObject KWLInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), detail.getInvoice().getID());
                    inv = (Invoice) KWLInvoice.getEntityList().get(0);
                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                    if (isRecPresent > 0) {
                        Map<String, String> customColDataMap = new HashMap<String, String>();
                        customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                        if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                            subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                        }
                        if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                            mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                        }
                    }
                }
                GoodsReceipt gr = detail.getGoodsReceipt();
                if (gr != null) {
                    KwlReturnObject KWLGoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), detail.getGoodsReceipt().getID());
                    gr = (GoodsReceipt) KWLGoodsReceipt.getEntityList().get(0);
                    int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                    if (isRecPresent > 0) {
                        Map<String, String> customColDataMap = new HashMap<String, String>();
                        customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                        if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                            subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                        }
                        if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                            mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                        }
                    }
                }
                if (detail.getTotalJED() != null && detail.getTotalJED().getID().equals(jed.getID())) {
                    break;
                }
            }
        }

        transDetMap.put(Constants.SUB_GROUP_VALUE, subGroupValue);
        transDetMap.put(Constants.MAIN_GROUP_VALUE, mainGroupValue);
        return transDetMap;
    }

    Map<String, String> getTransactionDetailsForFixedAssetPurchaseInvoiceSubLedger(Map<String, GoodsReceipt> fixedAssetgrMapPar, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {
        GoodsReceipt gr = fixedAssetgrMapPar.get(entry.getID());
        return getTransactionDetailsForFixedAssetPurchaseInvoiceSubLedger(gr, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
    }
    
    Map<String, String> getTransactionDetailsForFixedAssetPurchaseInvoiceSubLedger(GoodsReceipt gr, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {
        String subGroupValue = "";
        String mainGroupValue = "";
        Map<String, String> transDetMap = new HashMap<String, String>();

        HashMap<String, HashMap> map = getMapOfCustomFieldDataForSubLedger(companyid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId);

        if (accountid.equals(cashAccount)) {

            if (gr != null) {
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("goodsReceipt.ID");
                filter_params.add(gr.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(requestParamsHash);
                List<GoodsReceiptDetail> invoiceDetails = cnResult.getEntityList();
                for (GoodsReceiptDetail detail : invoiceDetails) {
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        if (prd != null) {
                            int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                            if (isRecPresent > 0) {
                                Map<String, String> customColDataMap = new HashMap<String, String>();
                                customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                                if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                                    subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                                }
                                if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                                    mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                                }
                            }
                        }
                    }
                }
            }
        } else {

            if (gr != null) {
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("goodsReceipt.ID");
                filter_params.add(gr.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accGoodsReceiptDAOObj.getGoodsReceiptDetails(requestParamsHash);
                List<GoodsReceiptDetail> invoiceDetails = cnResult.getEntityList();
                for (GoodsReceiptDetail detail : invoiceDetails) {
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        if (prd != null) {
                            int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                            if (isRecPresent > 0) {
                                Map<String, String> customColDataMap = new HashMap<String, String>();
                                customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                                if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                                    subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                                }
                                if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                                    mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                                }
                            }

                        }
                    }
                }
            }
        }
        transDetMap.put(Constants.SUB_GROUP_VALUE, subGroupValue);
        transDetMap.put(Constants.MAIN_GROUP_VALUE, mainGroupValue);
        return transDetMap;
    }

    Map<String, String> getTransactionDetailsForFixedAssetInvoiceSubLedger(Map<String, Invoice> fixedAssetInvoiceMapPar, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {
        Invoice inv = fixedAssetInvoiceMapPar.get(entry.getID());
        return getTransactionDetailsForFixedAssetInvoiceSubLedger(inv, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
    }
    
    Map<String, String> getTransactionDetailsForFixedAssetInvoiceSubLedger(Invoice inv, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {

        String subGroupValue = "";
        String mainGroupValue = "";
        Map<String, String> transDetMap = new HashMap<String, String>();

        HashMap<String, HashMap> map = getMapOfCustomFieldDataForSubLedger(companyid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId);

        KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), inv.getCustomer().getID());
        Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
        if (accountid.equals(cashAccount)) {

            if (inv != null) {
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("invoice.ID");
                filter_params.add(inv.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
                for (InvoiceDetail detail : invoiceDetails) {
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }


                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        if (isRecPresent > 0) {
                            Map<String, String> customColDataMap = new HashMap<String, String>();
                            customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                            if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                                subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                            }
                            if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                                mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                            }
                        }
                    }
                }
            }
        } else {

            if (inv != null) {
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("invoice.ID");
                filter_params.add(inv.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
                for (InvoiceDetail detail : invoiceDetails) {
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        if (isRecPresent > 0) {
                            Map<String, String> customColDataMap = new HashMap<String, String>();
                            customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                            if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                                subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                            }
                            if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                                mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                            }
                        }
                    }
                }
            }
        }
        transDetMap.put(Constants.SUB_GROUP_VALUE, subGroupValue);
        transDetMap.put(Constants.MAIN_GROUP_VALUE, mainGroupValue);
        return transDetMap;
    }
    
    Map<String, String> getTransactionDetailsForLeaseInvoiceSubLedger(Map<String, Invoice> leaseInvoiceMap, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {
        Invoice inv = leaseInvoiceMap.get(entry.getID());
        return getTransactionDetailsForLeaseInvoiceSubLedger(inv, subLedgerMap, entry, jed, accountid, companyid, cashAccount, descJsonArr, isDescConfig);
    }
     Map<String, String> getTransactionDetailsForLeaseInvoiceSubLedger(Invoice inv, Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {

        String subGroupValue = "";
        String mainGroupValue = "";
        Map<String, String> transDetMap = new HashMap<String, String>();

        HashMap<String, HashMap> map = getMapOfCustomFieldDataForSubLedger(companyid, Constants.LEASE_INVOICE_MODULEID);

        KwlReturnObject KWLCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), inv.getCustomer().getID());
        Customer customer = (Customer) KWLCustomer.getEntityList().get(0);
        if (accountid.equals(cashAccount)) {

            if (inv != null) {
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("invoice.ID");
                filter_params.add(inv.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
                for (InvoiceDetail detail : invoiceDetails) {
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }


                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        if (isRecPresent > 0) {
                            Map<String, String> customColDataMap = new HashMap<String, String>();
                            customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                            if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                                subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                            }
                            if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                                mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                            }
                        }
                    }
                }
            }
        } else {

            if (inv != null) {
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> requestParamsHash = new HashMap();
                filter_names.add("invoice.ID");
                filter_params.add(inv.getID());
                requestParamsHash.put("filter_names", filter_names);
                requestParamsHash.put("filter_params", filter_params);
                KwlReturnObject cnResult = accInvoiceDAOobj.getInvoiceDetails(requestParamsHash);
                List<InvoiceDetail> invoiceDetails = cnResult.getEntityList();
                for (InvoiceDetail detail : invoiceDetails) {
                    if (detail.getInventory() != null) {
                        Inventory inventory = null;;
                        Product prd = null;
                        KwlReturnObject KWLInventory = accProductObj.getProductByInventoryID(detail.getInventory().getID(), companyid);
                        List listInv = KWLInventory.getEntityList();
                        Iterator itrInv = listInv.iterator();
                        if (itrInv.hasNext()) {
                            Object[] rowInv = (Object[]) itrInv.next();
                            inventory = (Inventory) rowInv[0];
                            prd = (Product) rowInv[1];
                        }
                        int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, detail.getID());
                        if (isRecPresent > 0) {
                            Map<String, String> customColDataMap = new HashMap<String, String>();
                            customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, detail.getID(), false);
                            if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                                subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                            }
                            if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                                mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                            }
                        }
                    }
                }
            }
        }
        transDetMap.put(Constants.SUB_GROUP_VALUE, subGroupValue);
        transDetMap.put(Constants.MAIN_GROUP_VALUE, mainGroupValue);
        return transDetMap;
    }

    Map<String, String> getTransactionDetailsForJournalEntrySubLedger(Map<String, Object> subLedgerMap, JournalEntry entry, JournalEntryDetail jed, String accountid, String companyid, String cashAccount, JSONArray descJsonArr, boolean isDescConfig) throws UnsupportedEncodingException, ServiceException, JSONException {

        String subGroupValue = "";
        String mainGroupValue = "";
        boolean isPartyJournalEntry = entry.getTypeValue() == 2;
        Map<String, String> transDetMap = new HashMap<String, String>();

        HashMap<String, HashMap> map = getMapOfCustomFieldDataForSubLedger(companyid, Constants.Acc_GENERAL_LEDGER_ModuleId);

        if (jed.getAccount() != null && jed.getAccount().getID().equals(accountid)) {
            KwlReturnObject KWLAccount = accountingHandlerDAOobj.getObject(Account.class.getName(), jed.getAccount().getID());
            Account acc = (Account) KWLAccount.getEntityList().get(0);
            if (acc != null && acc.getID().equals(accountid)) {
                int isRecPresent = accInvoiceDAOobj.getInvoiceDetailsCustomDataRecCount(companyid, jed.getID());
                if (isRecPresent > 0) {
                    Map<String, String> customColDataMap = new HashMap<String, String>();
                    customColDataMap = getCustomFieldAndDimensionData(subLedgerMap, map, jed.getID(), false);
                    if (customColDataMap.containsKey(Constants.SUB_GROUP_VALUE)) {
                        subGroupValue = customColDataMap.get(Constants.SUB_GROUP_VALUE);
                    }
                    if (customColDataMap.containsKey(Constants.MAIN_GROUP_VALUE)) {
                        mainGroupValue = customColDataMap.get(Constants.MAIN_GROUP_VALUE);
                    }
                }
            }
        }
        transDetMap.put(Constants.SUB_GROUP_VALUE, subGroupValue);
        transDetMap.put(Constants.MAIN_GROUP_VALUE, mainGroupValue);
        return transDetMap;
    }
    
    /*
     * Method to generate GIRO file for CIMB bank
     */
    @Override
    public void generateIBGFileForCIMBbank(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, ServiceException, AccountingException {
        try {
            java.io.ByteArrayOutputStream baos = new ByteArrayOutputStream();
            String accCompanyId = sessionHandlerImpl.getCompanyid(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            
            String payments = request.getParameter("payments");
            String generationDateString = request.getParameter("genDate");                      
            String purposeCode = !StringUtil.isNullOrEmpty(request.getParameter("purposeCode"))?request.getParameter("purposeCode"):"";                      
            String[] paymentIds = payments.split(",");
            DateFormat df = authHandler.getDateOnlyFormat();
            Date generationDate = df.parse(generationDateString);
            SimpleDateFormat dfInFileFormat = new SimpleDateFormat("ddMMyyyy");   // This date format is a requirement from client. Do not modify the format. 
            generationDateString = dfInFileFormat.format(generationDate);
            String giroFileContent = "";
            double totalPaymentAmount = 0.0;
            if(paymentIds.length>24000){               // As provided for DBS bank
                throw new AccountingException("Records count is greater than 24000. so GIRO File cannot be generate.");
            }

            String ibgBankAccountId = request.getParameter("accountId");
            KwlReturnObject accResult = accountingHandlerDAOobj.getObject(Account.class.getName(), ibgBankAccountId);
            Account originator = (Account) accResult.getEntityList().get(0);
            
            if (!originator.isIBGBank()) {        // If account is not of IBG type
                throw new AccountingException("Bank is not IBG Type");
            }            
            
            HashMap<String, Object> GlobalParams = new HashMap<String, Object>();
            GlobalParams.put(Constants.companyKey, accCompanyId);
            GlobalParams.put(Constants.globalCurrencyKey, currencyid);
            
            HashMap<String, Object> ibgMap = new HashMap<String, Object>();
            ibgMap.put("companyId", accCompanyId);
            ibgMap.put("bankAccountId", originator.getID());
            
            KwlReturnObject ibgBankDetailsObj = accAccountDAOobj.getCIMBBankDetails(ibgMap);
            
            CIMBBankDetails bankDetails = (CIMBBankDetails) ibgBankDetailsObj.getEntityList().get(0);                     
            
            
            String bankAccNo = bankDetails.getBankAccountNumber();
            String currencyCode = bankDetails.getCurrencyCode();
            String ordererName = bankDetails.getOrdererName();
            int pi = bankDetails.getPostingIndicator();
            String sc = bankDetails.getServiceCode();
            int sm = bankDetails.getSettelementMode();
            String companyId = bankDetails.getCompany().getCompanyID();
            String lineLevelRecord="";
            Map<String,Object> map = new HashMap<>();
            double paymentAmount=0.0;
            double depositamountinbase=0.0;
            // Getting detailed line level data
            for (int i = 0; i < paymentIds.length; i++) {
                String paymentId = paymentIds[i];
                KwlReturnObject payResult = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                Payment payment = (Payment) payResult.getEntityList().get(0);
                paymentAmount = payment.getDepositAmount();
                if(payment.getBankChargesAmount() > 0 && payment.getJournalEntryForBankCharges()==null){
                    paymentAmount-= payment.getBankChargesAmount();
                }
                if(payment.getBankInterestAmount() > 0 && payment.getJournalEntryForBankInterest()==null){
                    paymentAmount-= payment.getBankInterestAmount();
                }
                depositamountinbase = paymentAmount;                    
                String transactionCurrency = payment.getCurrency() != null ? payment.getCurrency().getCurrencyID() : payment.getCompany().getCurrency().getCurrencyID();
                if (!transactionCurrency.equals(currencyid)) {
//                    KwlReturnObject baseAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, paymentAmount, transactionCurrency, payment.getJournalEntry().getEntryDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    KwlReturnObject baseAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, paymentAmount, transactionCurrency, payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    depositamountinbase = (Double) baseAmount.getEntityList().get(0);
                    depositamountinbase = authHandler.round(depositamountinbase, companyId);
                }
                totalPaymentAmount+= depositamountinbase;
                map.put("payment", payment);
                map.put("purposeCode", purposeCode);
                map.put("GlobalParams", GlobalParams);
                map.put(Constants.currencyKey, currencyid);
                lineLevelRecord += createLineLevelRecordsDBS(map);
            }
            
            Map<String,Object> params = new HashMap<>();
            params.put("bankAccNo", bankAccNo);
            params.put("currencyCode", currencyCode);
            params.put("ordererName", ordererName);
            params.put("pi", pi);
            params.put("sc", sc);
            params.put("sm", sm);
            params.put("companyId", companyId);
            params.put("recordsLength", paymentIds.length);
            params.put("totalPaymentAmount", totalPaymentAmount);
            params.put("generationDate", generationDateString);
            KwlReturnObject companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
            Company company = (Company)companyResult.getEntityList().get(0);
            String fileName = (!StringUtil.isNullOrEmpty(company.getCompanyName())?company.getCompanyName():company.getSubDomain()) + " " + generationDate ;

            // Getting header data
            giroFileContent += createControlRecordCIMB(params);
            
            giroFileContent+=lineLevelRecord;

            String ext = Constants.CIMBGiroFileExtension;

            // Writing a GIRO file
            baos.write(giroFileContent.getBytes());
            response.setHeader("Content-Disposition", "attachment; filename=\"" + fileName+ ext+ "\"");
            response.setContentType("application/octet-stream");
            response.setContentLength(baos.size());
            response.getOutputStream().write(baos.toByteArray());
            response.getOutputStream().flush();
            response.getOutputStream().close();
            
            // update flag for payments that for those payments GIRO File has been generated
            
            updatePayment(paymentIds, accCompanyId); 
            
        } catch (ParseException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("generateIBGFile : " + ex.getMessage(), ex);
        } catch (IOException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("generateIBGFile : " + ex.getMessage(), ex);
        }catch (ServiceException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("generateIBGFile : " + ex.getMessage(), ex);
        }
    }
     @Override
    public void generateIBGFileForUOBbank(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, ServiceException, AccountingException {
        
        
         try {

            String giroFileContent = "";
            String companyid = sessionHandlerImpl.getCompanyid(request);
            java.io.ByteArrayOutputStream baos = new ByteArrayOutputStream();
            String accCompanyId = sessionHandlerImpl.getCompanyid(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String userFullName = sessionHandlerImpl.getUserFullName(request);
            String userid = sessionHandlerImpl.getUserid(request);
            String invoices = request.getParameter("arrayOfBillIds");
            String[] invoiceIds = invoices.split(",");
            String accountId = request.getParameter("accountId");
            String paymentMethodId = request.getParameter("paymentMethodId");
            String paymentType = request.getParameter("paymentType");
            int serviceType = Integer.parseInt(request.getParameter("serviceType"));
            int processingMode = request.getParameter("processingMode") != null ? Integer.parseInt(request.getParameter("processingMode")) : 1;
            String companyIdForFile = request.getParameter("companyId") != null ? request.getParameter("companyId") : "";
            String bulkCustomerReference = request.getParameter("bulkCustomerReference");
            String creationDateString = request.getParameter("creationDate");
            String valueDateString = request.getParameter("valueDate");
            String softwareLabel = Constants.Software_Label_For_UOB_GIRO;
            String UOBFileName = Constants.File_Name_For_UOB_GIRO;
            
            DateFormat df = authHandler.getDateOnlyFormat(request);
            DateFormat sdf = new SimpleDateFormat("ddMM");
            Date today = new Date();
            
            int count = 0;
            HashMap<String,Object> paramsForCount = new HashMap<>();
            paramsForCount.put("companyid", accCompanyId);
            paramsForCount.put("bank", Constants.UOB_Bank);
            paramsForCount.put("generationDate", df.format(new Date()));
            paramsForCount.put(Constants.df, df);
            
            KwlReturnObject countResult = accInvoiceDAOobj.getMaxCountOfGiroFile(paramsForCount);
            List list = countResult.getEntityList();
            if(list!=null && !list.isEmpty() && list.get(0)!=null){
                count = (Integer)list.get(0);
            }
            count++;
            String countString = rightAdjustFill(""+count, "0", 2);
            UOBFileName = UOBFileName+sdf.format(today) +countString;
            
            Date creationDate = df.parse(creationDateString);
            Date valueDate = df.parse(valueDateString);

            SimpleDateFormat dfInFileFormat = new SimpleDateFormat("yyyyMMdd");
            creationDateString = dfInFileFormat.format(creationDate);
            

            valueDateString = dfInFileFormat.format(valueDate);
            
            KwlReturnObject objResult = null;
            objResult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountId);
            Account account = (Account) objResult.getEntityList().get(0);

            objResult = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), paymentMethodId);
            PaymentMethod paymentMethod = (PaymentMethod)objResult.getEntityList().get(0);
            
            KwlReturnObject uobDetailsResult = accAccountDAOobj.getUOBDetailsForAccount(accountId, accCompanyId);
            UOBBankDetails uobDetail = (UOBBankDetails) uobDetailsResult.getEntityList().get(0);

            HashMap<String, Object> GlobalParams = new HashMap<String, Object>();
            GlobalParams.put(Constants.companyKey, accCompanyId);
            GlobalParams.put(Constants.globalCurrencyKey, currencyid);

            Invoice invoice = null;
            String invoiceId = "";
            Customer customer = null;
            KwlReturnObject result = null;
            UOBReceivingDetails uobReceivingDetails = null;
            List resultList = null;
            double invoiceAmount = 0.0d;
            double totalAmount = 0.0d;
            String invoiceAmountString = "";
            String totalAmountString = "";
            HashMap<String, Object> paramsForReceivingDetails = new HashMap<>();
            paramsForReceivingDetails.put("companyId", accCompanyId);
            
            

            // Create Header Data
            giroFileContent += "" + 1;
            giroFileContent += leftAdjustFill(UOBFileName, " ", 10);
            giroFileContent += "C";
            giroFileContent += (serviceType == Constants.UOB_ServiceType_EXPRESS) ? leftAdjustFill("EXPRESS", " ", 10): leftAdjustFill("NORMAL", " ", 10);
            giroFileContent += processingMode == 1 ? " " : ((processingMode == Constants.UOB_ProcessingMode_Immediate) ? "I" : "B");
            giroFileContent += leftAdjustFill(companyIdForFile, " ", 12);
            giroFileContent += uobDetail.getOriginatingBICCode();
            giroFileContent += uobDetail.getCurrencyCode();
            giroFileContent += leftAdjustFill(uobDetail.getOriginatingAccountNumber(), " ", 34);
            giroFileContent += leftAdjustFill(uobDetail.getOriginatingAccountName(), " ", 140);
            giroFileContent += creationDateString;
            giroFileContent += valueDateString;
            giroFileContent += leftAdjustFill(uobDetail.getUltimateOriginatingCustomer() == null ? "" : uobDetail.getUltimateOriginatingCustomer(), " ", 140);
            giroFileContent += leftAdjustFill(bulkCustomerReference, " ", 16);
            giroFileContent += leftAdjustFill(softwareLabel, " ", 10);
            giroFileContent += leftAdjustFill("", " ", 210);
            giroFileContent += "\r\n";

            int sum1,sum2,sum3,sum4,sum5,sum6,sum7=0;
            int totalSum7=0;
            int hashCode = 0;
            int paymentCode = Constants.UOB_PaymentCode_Collection;
            for (int i = 0; i < invoiceIds.length; i++) {
                invoiceId = invoiceIds[i];
                result = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceId);

                invoice = (Invoice) result.getEntityList().get(0);
                customer = invoice.getCustomer();
                
                paramsForReceivingDetails.put("customer", customer.getID());
                paramsForReceivingDetails.put("customerBankAccountType", invoice.getCustomerBankAccountType().getID());
                paramsForReceivingDetails.put("activated", true);
                result = accAccountDAOobj.getUOBReceivingBankDetails(paramsForReceivingDetails);
                resultList = result.getEntityList();
                if (resultList == null || resultList.isEmpty() || resultList.get(0) == null) {
                    throw new AccountException(messageSource.getMessage("acc.uob.receivingDetailsNotSetToCustomer", null, RequestContextUtils.getLocale(request))+"</br>"+customer.getName());
                } else {

                    invoiceAmount = invoice.getInvoiceAmountDueInBase();//SDP-7140
                    totalAmount += invoiceAmount;
                    invoiceAmountString = authHandler.formattingDecimalForAmount(invoiceAmount, companyid);
                    invoiceAmountString = invoiceAmountString.replace(".","");
                    uobReceivingDetails = (UOBReceivingDetails) resultList.get(0);

                    String receivingBankAccountNumber = uobReceivingDetails.getReceivingBankAccountNumber();
                    if (uobReceivingDetails.getBankName() !=null && uobReceivingDetails.getReceivingBranchCode()!=null && uobReceivingDetails.getBankName().isIsAppendBranchCode()) {
                        String BranchCode = uobReceivingDetails.getReceivingBranchCode().trim();//ERP-31397
                        receivingBankAccountNumber = BranchCode + receivingBankAccountNumber;
                    }
                    // Create Batch Details Data
                    giroFileContent += "" + 2;
                    giroFileContent += leftAdjustFill(uobReceivingDetails.getReceivingBICCode(), " ", 11);
                    giroFileContent += leftAdjustFill(receivingBankAccountNumber, " ", 34);
                    giroFileContent += leftAdjustFill(uobReceivingDetails.getReceivingAccountName(), " ", 140);
                    giroFileContent += leftAdjustFill(uobReceivingDetails.getCurrencyCode(), " ", 3);
                    giroFileContent += rightAdjustFill(invoiceAmountString, "0", 18);
                    giroFileContent += leftAdjustFill(uobReceivingDetails.getEndToEndId(), " ", 35);
                    giroFileContent += leftAdjustFill(uobReceivingDetails.getMandateId(), " ", 35);
                    giroFileContent += leftAdjustFill(uobReceivingDetails.getPurposeCode(), " ", 4);
                    giroFileContent += leftAdjustFill(invoice.getMemo() != null ? removeSpecialCharacters(invoice.getMemo()) : "", " ", 140);
                    giroFileContent += leftAdjustFill(uobReceivingDetails.getUltimatePayerOrBeneficiaryName() != null ? uobReceivingDetails.getUltimatePayerOrBeneficiaryName() : "", " ", 140);
                    giroFileContent += leftAdjustFill(uobReceivingDetails.getCustomerReference() != null ? uobReceivingDetails.getCustomerReference() : "", " ", 16);
                    giroFileContent += leftAdjustFill("", " ", 38);
                    giroFileContent += "\r\n";
                    
                    
                    
                    if (hashCode == 9) {
                        hashCode = 1;
                    } else {
                        hashCode++;
                    }
                    sum1 = getFieldCheckSummaryTotal(leftAdjustFill(uobReceivingDetails.getReceivingBICCode(), " ", 11),Constants.UOB_HashIndex_ReceivingBICCode);
                    sum2 = getFieldCheckSummaryTotal(leftAdjustFill(receivingBankAccountNumber, " ", 34),Constants.UOB_HashIndex_ReceivingAccountNo);
                    sum2 = sum2*hashCode;
                    sum3 = getFieldCheckSummaryTotal(leftAdjustFill(uobReceivingDetails.getReceivingAccountName(), " ", 140),Constants.UOB_HashIndex_ReceivingAccountName);
                    sum3 = sum3*hashCode;
                    sum4 = getFieldCheckSummaryTotal(leftAdjustFill(uobReceivingDetails.getCurrencyCode(), " ", 3),Constants.UOB_HashIndex_ReceivingCurrency);
                    sum5 = getFieldCheckSummaryTotal(rightAdjustFill(invoiceAmountString, "0", 18),Constants.UOB_HashIndex_ReceivingAmount);
                    sum6 = getFieldCheckSummaryTotal(leftAdjustFill(uobReceivingDetails.getPurposeCode(), " ", 4),Constants.UOB_HashIndex_ReceivingPurposeCode);
                    
                    sum7 = sum1+sum2+sum3+sum4+sum5+sum6+(paymentCode*hashCode);
                    
                    totalSum7 += sum7;
                    
                    invoice.setIsGIROFileGeneratedForUOBBank(true);
                    invoice.setPaymentMethodUsedForUOB(paymentMethod);
                    save(invoice);
                }
            }
            
            int total2 = totalSum7;
            
            sum1 = getFieldCheckSummaryTotal(uobDetail.getOriginatingBICCode(),Constants.UOB_HashIndex_OriginatingBICCode);
            sum2 = getFieldCheckSummaryTotal(leftAdjustFill(uobDetail.getOriginatingAccountNumber(), " ", 34),Constants.UOB_HashIndex_OriginatingAccountNo);
            sum3 = getFieldCheckSummaryTotal(leftAdjustFill(uobDetail.getOriginatingAccountName(), " ", 140),Constants.UOB_HashIndex_OriginatingAccountName);
            
            int total1 = sum1+sum2+sum3;
            
            int finalHashTotal = total1+total2;
            
            totalAmountString = authHandler.formattingDecimalForAmount(totalAmount, companyid);
            totalAmountString = totalAmountString.replace(".","");
            //Creating Trailer Data
            giroFileContent += ""+9;
            giroFileContent += rightAdjustFill(totalAmountString, "0", 18);
            giroFileContent += rightAdjustFill(""+invoiceIds.length,"0", 7);
            giroFileContent += rightAdjustFill(""+finalHashTotal, "0", 16);
            giroFileContent += leftAdjustFill("", " ", 573);
            
            String ext = Constants.GiroFileExtension;

            // Writing a GIRO file
            baos.write(giroFileContent.getBytes());
            response.setHeader("Content-Disposition", "attachment; filename=\"" + UOBFileName+ ext+ "\"");
            response.setContentType("application/octet-stream");
            response.setContentLength(baos.size());
            response.getOutputStream().write(baos.toByteArray());
            response.getOutputStream().flush();
            response.getOutputStream().close();
            
            String destinationDirectory = storageHandlerImpl.GetDocStorePath();
            File directory = new File(destinationDirectory + Constants.GIRO_FILE_STORAGE_PATH);
            if (!directory.exists()) {
                directory.mkdirs();
            }
             /*
              *SDP-6721 - appended datetime to FileName
              */
            SimpleDateFormat sdfTemp = new SimpleDateFormat("ddMMyyyyhhmmssaa");
            UOBFileName += "_" + (sdfTemp.format(today)).toString();
            
            File file = new File(destinationDirectory + Constants.GIRO_FILE_STORAGE_PATH + File.separator + UOBFileName);
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(baos.toByteArray());
            fos.close();
            
            
            
            HashMap<String,Object> params = new HashMap<>();
            params.put("fileName", UOBFileName);
            params.put("generationDate", new Date());
            params.put("count", count);
            params.put("companyid", accCompanyId);
            params.put("bank", Constants.UOB_Bank);
            accInvoiceDAOobj.saveGiroFileGenerationHistory(params);
            
             Map<String, Object> auditRequestParams = new HashMap<>();
             auditRequestParams.put(Constants.reqHeader, StringUtil.getIpAddress(request));
             auditRequestParams.put(Constants.remoteIPAddress, request.getRemoteAddr());
             auditRequestParams.put(Constants.useridKey,userid);
            auditTrailObj.insertAuditLog(AuditAction.GIRO_GENERATION_FOR_UOBBank, "User " + userFullName +" "+ messageSource.getMessage("acc.uob.hasGeneratedIBGFile", null, RequestContextUtils.getLocale(request)), auditRequestParams, "");
            
        } catch (ParseException ex) {
            
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("generateIBGFile : " + ex.getMessage(), ex);
        } catch (IOException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("generateIBGFile : " + ex.getMessage(), ex);
        } catch (AccountException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
             throw new AccountingException(ex.getMessage());
        }
    }
    
     
    
    @Override
    public String generateIBGFileForOCBCBank(JSONObject paramJObj) throws SessionExpiredException, ServiceException, AccountingException {
        String giroFileContent = "";
        try {
            String companyId = paramJObj.optString(Constants.companyKey);
            String currencyId = paramJObj.optString(Constants.globalCurrencyKey);

            String submissionDate = paramJObj.optString("submissionDate");
            String valueDate = paramJObj.optString("valueDate");
            String valueTime = paramJObj.optString("valueTime");

            String batchNumber = paramJObj.optString("batchNumber");
            String onBehalfOf = paramJObj.optString("onBehalfOf");
            String clearing = paramJObj.optString("clearing");

            String purposeCode = paramJObj.optString("purposeCode");
            String ibgBankAccountId = paramJObj.optString("accountId");

            String paymentIds = paramJObj.optString("payments");
            String[] paymentIdArr = paymentIds.split(",");

            KwlReturnObject accResult = accountingHandlerDAOobj.getObject(Account.class.getName(), ibgBankAccountId);
            Account account = (Account) accResult.getEntityList().get(0);
            if (!account.isIBGBank()) {        // If account is not of IBG type
                throw new AccountingException("Bank is not IBG Type");
            }

            HashMap<String, Object> GlobalParams = new HashMap<>();
            GlobalParams.put(Constants.companyKey, companyId);
            GlobalParams.put(Constants.globalCurrencyKey, currencyId);

            KwlReturnObject ibgBankDetailsKwlObj = accAccountDAOobj.getOCBCBankDetailsForAccount(account.getID(), companyId);
            OCBCBankDetails ibgBankDetails = (OCBCBankDetails) ibgBankDetailsKwlObj.getEntityList().get(0);

            String ocbcOriginatingBankCode = ibgBankDetails.getOriginatingBankCode();
            String ocbcBankAccountNumber = ibgBankDetails.getAccountNumber();
            String ocbcBankReferenceNumber = ibgBankDetails.getReferenceNumber();

            //Create header data
            giroFileContent += "" + Constants.OCBC_TransactionTypeCode;
            giroFileContent += leftAdjustFill(batchNumber, " ", 3);
            giroFileContent += submissionDate;
            giroFileContent += leftAdjustFill(ocbcOriginatingBankCode, " ", 11);
            giroFileContent += leftAdjustFill(ocbcBankAccountNumber, " ", 34);
            giroFileContent += leftAdjustFill("", " ", 3);
            giroFileContent += leftAdjustFill(onBehalfOf, " ", 20);
            giroFileContent += leftAdjustFill("", " ", 120);
            giroFileContent += leftAdjustFill("", " ", 4);
            giroFileContent += clearing;
            giroFileContent += leftAdjustFill(ocbcBankReferenceNumber, " ", 16);
            giroFileContent += valueDate;
            giroFileContent += leftAdjustFill(valueTime, " ", 4);
            giroFileContent += leftAdjustFill("", " ", 1);
            giroFileContent += leftAdjustFill("", " ", 762);
            giroFileContent += "\r\n";

            for (String paymentId : paymentIdArr) {
                KwlReturnObject payResult = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                Payment payment = (Payment) payResult.getEntityList().get(0);
                OCBCReceivingDetails ocbcReceivingDetails = payment.getOCBCReceivingDetails();

                double paymentAmount = payment.getDepositAmount();
                if (payment.getBankChargesAmount() > 0 && payment.getJournalEntryForBankCharges() == null) {
                    paymentAmount -= payment.getBankChargesAmount();
                }
                if (payment.getBankInterestAmount() > 0 && payment.getJournalEntryForBankInterest() == null) {
                    paymentAmount -= payment.getBankInterestAmount();
                }
                double depositamountinbase = paymentAmount;
                String transactionCurrency = payment.getCurrency() != null ? payment.getCurrency().getCurrencyID() : payment.getCompany().getCurrency().getCurrencyID();
                if (!transactionCurrency.equals(currencyId)) {
//                    KwlReturnObject baseAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, paymentAmount, transactionCurrency, payment.getJournalEntry().getEntryDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    KwlReturnObject baseAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, paymentAmount, transactionCurrency, payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    depositamountinbase = (Double) baseAmount.getEntityList().get(0);
                    depositamountinbase = authHandler.round(depositamountinbase, companyId);
                }
                String depositamountinbaseString = authHandler.formattingDecimalForAmount(depositamountinbase, companyId);
                depositamountinbaseString = depositamountinbaseString.replace(".", "");

                //Details
                giroFileContent += leftAdjustFill(ocbcReceivingDetails.getBankCode(), " ", 11);
                giroFileContent += leftAdjustFill(ocbcReceivingDetails.getAccountNumber(), " ", 34);
                giroFileContent += leftAdjustFill(payment.getVendor() != null ? payment.getVendor().getName() : payment.getPayee(), " ", 140);
                giroFileContent += leftAdjustFill("", " ", 3);
                giroFileContent += rightAdjustFill(depositamountinbaseString, "0", 17);
                giroFileContent += leftAdjustFill(payment.getMemo() != null ? removeSpecialCharacters(payment.getMemo()) : "", " ", 35);
                giroFileContent += leftAdjustFill(purposeCode, " ", 4);
                giroFileContent += rightAdjustFill("", " ", 35);
                giroFileContent += leftAdjustFill(ocbcReceivingDetails.getUltimateCreditorName() != null ? ocbcReceivingDetails.getUltimateCreditorName() : "", " ", 140);
                giroFileContent += leftAdjustFill(ocbcReceivingDetails.getUltimateDebtorName() != null ? ocbcReceivingDetails.getUltimateDebtorName() : "", " ", 140);
                giroFileContent += leftAdjustFill(ocbcReceivingDetails.getRemittanceAdviceVia(), " ", 1);
                giroFileContent += leftAdjustFill(ocbcReceivingDetails.getRemittanceAdviceSendDetails(), " ", 255);
                giroFileContent += leftAdjustFill("", " ", 185);
                giroFileContent += "\r\n";

                String invoiceDetails = "";
                //Advance Detail
                Set<AdvanceDetail> advanceDetailSet = payment.getAdvanceDetails();
                for (AdvanceDetail advanceDetail : advanceDetailSet) {
                    invoiceDetails += !StringUtil.isNullOrEmpty(advanceDetail.getDescription()) ? removeSpecialCharacters(StringUtil.DecodeText(advanceDetail.getDescription())) + "," : "";
                }
                //Invoice Details
                Set<PaymentDetail> paymentDetailSet = payment.getRows();
                for (PaymentDetail paymentDetail : paymentDetailSet) {
                    GoodsReceipt goodsReceipt = paymentDetail.getGoodsReceipt();
                    invoiceDetails += goodsReceipt.getGoodsReceiptNumber();
                    invoiceDetails += !StringUtil.isNullOrEmpty(goodsReceipt.getMemo()) ? "-" + removeSpecialCharacters(goodsReceipt.getMemo()) + "," : ",";
                }
                //Credit Note Details
                Set<CreditNotePaymentDetails> notePaymentDetailSet = payment.getCreditNotePaymentDetails();
                for (CreditNotePaymentDetails notePaymentDetails : notePaymentDetailSet) {
                    invoiceDetails += notePaymentDetails.getCreditnote().getCreditNoteNumber();
                    invoiceDetails += !StringUtil.isNullOrEmpty(notePaymentDetails.getCreditnote().getMemo()) ? "-" + removeSpecialCharacters(notePaymentDetails.getCreditnote().getMemo()) + "," : ",";
                }
                //General Ledger Code Details
                Set<PaymentDetailOtherwise> detailOtherwiseSet = payment.getPaymentDetailOtherwises();
                for (PaymentDetailOtherwise paymentDetailOtherwise : detailOtherwiseSet) {
                    invoiceDetails += !StringUtil.isNullOrEmpty(paymentDetailOtherwise.getAccount().getAcccode()) ? paymentDetailOtherwise.getAccount().getAcccode() + " " : "";
                    invoiceDetails += paymentDetailOtherwise.getAccount().getAccountName();
                    invoiceDetails += !StringUtil.isNullOrEmpty(paymentDetailOtherwise.getDescription()) ? "-" + removeSpecialCharacters(StringUtil.DecodeText(paymentDetailOtherwise.getDescription())) + "," : ",";
                }
                
                int subStringIndex = invoiceDetails.indexOf(",", invoiceDetails.length()-1);
                if (subStringIndex != -1) {
                    invoiceDetails = invoiceDetails.substring(0, subStringIndex);
                }
                giroFileContent += leftAdjustFill("INV", " ", 3);
                giroFileContent += leftAdjustFill(invoiceDetails, " ", 97);
                giroFileContent += "\r\n";
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AccReportsServiceImpl.generateIBGFileForOCBCBank : " + ex.getMessage(), ex);
        }
        return giroFileContent;
    }

    public int getFieldCheckSummaryTotal(String str,int hashIndex){
        
        int sum = 0;
        char[] charArray = str.toCharArray();
        for(int columnNumber=1;columnNumber<=charArray.length;columnNumber++){
             sum = sum+ ((int)charArray[columnNumber-1] * columnNumber);   
        }
        return sum;
    }
    public String removeSpecialCharacters(String str){
        String returtnStr = "";
        if (!StringUtil.isNullOrEmpty(str)) {
            Set<String> specialChars = new HashSet<>();
            specialChars.add("`");
            specialChars.add("~");
            specialChars.add("!");
            specialChars.add("@");
            specialChars.add("#");
            specialChars.add("$");
            specialChars.add("%");
            specialChars.add("^");
            specialChars.add("&");
            specialChars.add("*");
            specialChars.add("_");
            specialChars.add("=");
            specialChars.add("<");
            specialChars.add(">");
            specialChars.add("[");
            specialChars.add("]");
            specialChars.add("{");
            specialChars.add("}");
            specialChars.add("\\");
            specialChars.add("|");
            specialChars.add("\n");

            char[] charArray = str.toCharArray();
            String temp="";
            for (int i = 0; i < charArray.length; i++) {
                temp = ""+charArray[i];
                if(!specialChars.contains(temp)){
                    returtnStr += temp;
                }
            }
        }
        return returtnStr;
    }
    public String createControlRecordCIMB(Map<String,Object> map) throws ParseException {
        String controlRecord = "";
        String bankAccNo = (String) map.get("bankAccNo");
        String currencyCode = (String) map.get("currencyCode");
        String ordererName = (String)map.get("ordererName");
        int pi = (Integer)map.get("pi");
        String postingIndicator = (pi==Constants.Posting_Indicator_Consolidated)?"C":"I";
        String sc = (String)map.get("sc");
        int sm = (Integer)map.get("sm");
        String settlementMode = (sm == Constants.Settlement_Mode_Batch)?"B":"R";
        String companyId = (String)map.get("companyId");
        String generationDate = (String)map.get("generationDate");
        int recordsLength = (Integer)map.get("recordsLength");
        
        double totalPaymentAmount = (Double)map.get("totalPaymentAmount");
        totalPaymentAmount = authHandler.round(totalPaymentAmount, companyId);
        String totalPaymentAmountTemp = authHandler.formattingDecimalForAmount(totalPaymentAmount, companyId);
        
        controlRecord += sc+",";
        
        controlRecord += bankAccNo+",";

        controlRecord += ordererName+",";

        controlRecord += currencyCode+",";

        controlRecord += totalPaymentAmountTemp+",";
        
        controlRecord += recordsLength+",";
        
        controlRecord += settlementMode+",";
        
        controlRecord += postingIndicator+",";
        
        controlRecord += generationDate;
        
        controlRecord += "\r\n";

        return controlRecord;
    }
    
    public String createLineLevelRecordsDBS(Map<String,Object> map) throws ServiceException{
        
        Integer temp = 0;
        Payment payment = (Payment) map.get("payment");
        String purposeCode = (String)map.get("purposeCode");
        String currencyid = (String)map.get(Constants.currencyKey);
        HashMap GlobalParams = (HashMap) map.get("GlobalParams");
        CIMBReceivingDetails receivingBankDetails = payment.getCimbreceivingbankdetails();
        
        if(receivingBankDetails == null){
            return "";
        }
        
        String lineRecord = "";
        String companyid = (String) map.get("companyid");    
        String collectionAccNo = receivingBankDetails.getCollectionAccountNumber();        
        String collectionAccName = receivingBankDetails.getCollectionAccountName();        
        double paymentAmount =  payment.getDepositAmount();
        double paymentAmountInSGD =  0.0;
        if (payment.getBankChargesAmount() > 0 && payment.getJournalEntryForBankCharges() == null) {
            paymentAmount -= payment.getBankChargesAmount();
        }
        if (payment.getBankInterestAmount() > 0 && payment.getJournalEntryForBankInterest() == null) {
            paymentAmount -= payment.getBankInterestAmount();
        }
        paymentAmountInSGD = paymentAmount;
        String transactionCurrency = payment.getCurrency() != null ? payment.getCurrency().getCurrencyID() : payment.getCompany().getCurrency().getCurrencyID();
        if (!transactionCurrency.equals(currencyid)) {
//            KwlReturnObject baseAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, paymentAmount, transactionCurrency, payment.getJournalEntry().getEntryDate(), payment.getJournalEntry().getExternalCurrencyRate());
            KwlReturnObject baseAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, paymentAmount, transactionCurrency, payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
            paymentAmountInSGD = (Double) baseAmount.getEntityList().get(0);
            paymentAmountInSGD = authHandler.round(paymentAmountInSGD, companyid);
        }
        String paymentAmountInSGDString = authHandler.formattingDecimalForAmount(paymentAmountInSGD, companyid);
        String currencyCode = "SGD";
        String giroBICCode = receivingBankDetails.getGiroBICCode();
        String memo = "";
        if(payment.getPayDetail()!=null && payment.getPayDetail().getCheque()!=null){
            memo += !StringUtil.isNullOrEmpty(payment.getPayDetail().getCheque().getChequeNo()) ? "Cheque No: "+payment.getPayDetail().getCheque().getChequeNo()+" ":"";
            memo += !StringUtil.isNullOrEmpty(payment.getPayDetail().getCheque().getDescription()) ? "Reference No: "+payment.getPayDetail().getCheque().getDescription()+" ":"";
            memo += !StringUtil.isNullOrEmpty(payment.getMemo())?payment.getMemo():"";
        }
        if(memo.length()>100){
            memo = memo.substring(0,100);
        }
        String referenceNo = receivingBankDetails.getReferenceNumber()==null?"":receivingBankDetails.getReferenceNumber();
        String mailId = receivingBankDetails.getEmailForGiro()!=null?receivingBankDetails.getEmailForGiro():"";
                   
        lineRecord += collectionAccNo+",";
        
        lineRecord += collectionAccName+",";
        
        lineRecord += paymentAmountInSGDString+",";

        lineRecord += currencyCode+",";
        
        lineRecord += giroBICCode+",";
        
        lineRecord += purposeCode+",";
        
        lineRecord += memo+",";
            
        lineRecord += referenceNo+",";

        lineRecord += mailId;

        lineRecord += "\r\n";

        return lineRecord;     
    }
    /* Function to copy custom layout template
     * @param requestParams Map for Parameters
     * @return success 
     */
    public boolean copyCustomLayoutTemplate(Map<String, Object> requestParams) {
        boolean success = false;
        try {
            String countryid = "";
            boolean isAdminSubdomain = false;
            if(requestParams.containsKey("isAdminSubdomain") && requestParams.get("isAdminSubdomain")!=null){
                isAdminSubdomain = Boolean.parseBoolean(requestParams.get("isAdminSubdomain").toString());
            }
            if(requestParams.containsKey("countryid") && requestParams.get("countryid")!=null){
                countryid = requestParams.get("countryid").toString();
            }
            Map<String, Object> params = new HashMap<>();
            int templatecode = accAccountDAOobj.getMaxTemplateId(requestParams.get(Constants.companyKey).toString(), isAdminSubdomain, countryid);
            params.put("name", requestParams.get("templatename"));
            params.put("templateid", templatecode);
            params.put("templatetitle", requestParams.get("templatetitle"));
            params.put("isDefault", requestParams.get("isDefault"));
            params.put("templatetype", Integer.parseInt(requestParams.get("templatetype").toString()));
            params.put(Constants.companyKey, requestParams.get(Constants.companyKey));
            params.put("status", 1);
            KwlReturnObject result = null;
            if(isAdminSubdomain){
                params.put("countryid", countryid);
                result = accAccountDAOobj.updateDefaultPnLTemplate(params);
                
                DefaultTemplatePnL templatepnl = (DefaultTemplatePnL) result.getEntityList().get(0);
                if(templatepnl!=null){
                    params.clear();
                    params.put("countryid", countryid);
                    params.put("templateid", requestParams.get("copytemplateid"));
                    params.put("isAdminSubdomain", isAdminSubdomain);
                    result = accAccountDAOobj.copyDefaultLayoutGroups(templatepnl,params);
                }
            }else{
                result = accAccountDAOobj.updatePnLTemplate(params);
                Templatepnl templatepnl = (Templatepnl) result.getEntityList().get(0);
                if(templatepnl!=null){
                    params.clear();
                    params.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                    params.put("templateid", requestParams.get("copytemplateid"));
                    result = accAccountDAOobj.copyLayoutGroups(templatepnl,params);
                }
            }
            success = true;
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage());
            success = false;
        } finally {
            return success;
        }
    }
    @Override
    public JSONArray getProductPriceReportCustVenJson(HttpServletRequest request, HashMap requestParams) {
        JSONArray DataJArr = new JSONArray();
        /*
         * --- fatch from database ---
         */
        try {
            boolean carryin = ((Boolean) requestParams.get("carryin")).booleanValue();
            KwlReturnObject result = accProductObj.getProductPriceReportCustVen(requestParams);
            List list = result.getEntityList();  //Price List of a product(s)

            KwlReturnObject resultPriceBand = accProductObj.getPriceBandListReportCustVen(requestParams);
            List listPriceBand = resultPriceBand.getEntityList();//Price Band List of a product(s)

            DataJArr = getPriceListJsonCustVen(request, list, carryin);  //Change into Json array of price List
            JSONArray DataJArrPriceBand = getPriceBandListReportJsonCustVen(request, listPriceBand, carryin);//Change into Json array Price band
            for (int i = 0; i < DataJArrPriceBand.length(); i++) { //merage the aboe two json array
                DataJArr.put(DataJArrPriceBand.get(i));
}
        } catch (Exception e) {
        }
        return DataJArr;
    }

    public JSONArray getPriceListJsonCustVen(HttpServletRequest request, List list, boolean carryin) throws ServiceException, SessionExpiredException {
        JSONArray jArr = new JSONArray();
        try {
            Iterator itr = list.iterator();
            DateFormat df = authHandler.getDateOnlyFormat();
            while (itr.hasNext()) {
                PriceList price = (PriceList) itr.next();
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  //ERP-8349[SJ]                             
                Map obj = new HashMap<String, Object>();
                obj.put("priceid", price.getID());
                obj.put("productname", price.getProduct().getName());
                obj.put("productid", price.getProduct().getID());
                obj.put("productcode", price.getProduct().getProductid());
                obj.put("applydate", df.format(price.getApplyDate()));
                obj.put("carryin", (price.isCarryIn()?messageSource.getMessage("acc.productList.gridPurchasePrice", null, RequestContextUtils.getLocale(request)):messageSource.getMessage("acc.productList.gridSalesPrice", null, RequestContextUtils.getLocale(request))));
                obj.put("price", price.getPrice());
                obj.put("uom", price.getUomid() != null ? price.getUomid().getNameEmptyforNA() : "");
                obj.put("bandlist", "Special Rate");
                obj.put("currency", price.getCurrency() != null ? price.getCurrency().getName() : "-");
                String affecteduser = price.getAffecteduser();
                if (!affecteduser.equals("-1")) { //SDP-175
                    if (carryin) {
                        KwlReturnObject compresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), affecteduser);
                        Vendor vendor = (Vendor) compresult.getEntityList().get(0);
                        affecteduser = vendor.getName();
                    } else {
                        KwlReturnObject compresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), affecteduser);
                        Customer customer = (Customer) compresult.getEntityList().get(0);
                        affecteduser = customer.getName();
                    }
                } else {
                    continue;
                }
                obj.put("affecteduser", affecteduser);
                jArr.put(obj);

            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getPriceListJsonCustVen : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public JSONArray getPriceBandListReportJsonCustVen(HttpServletRequest request, List list, boolean carryin) throws ServiceException, SessionExpiredException {
        JSONArray jArr = new JSONArray();
        try {
            Iterator itr = list.iterator();
            DateFormat df = authHandler.getDateOnlyFormat();
            while (itr.hasNext()) {
                ArrayList<Object> priceBand1 = new ArrayList<Object>(Arrays.asList(itr.next()));
                Object[] obj1 = (Object[]) priceBand1.get(0);
                ArrayList<Object> priceBand = new ArrayList<Object>(Arrays.asList(obj1));
                String priceband = priceBand.get(0).toString(), product = priceBand.get(1).toString(), price = priceBand.get(carryin ? 2 : 3).toString(), pricebandmaster = priceBand.get(5).toString(), currency = priceBand.get(6).toString(), vendor = priceBand.get(7).toString();
                Date applydate = (java.util.Date) priceBand.get(4);
                KwlReturnObject compresult = accountingHandlerDAOobj.getObject(Product.class.getName(), product);
                Product productObj = (Product) compresult.getEntityList().get(0);

                compresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), vendor);
                Vendor vendorObj = (Vendor) compresult.getEntityList().get(0);

                compresult = accountingHandlerDAOobj.getObject(PricingBandMaster.class.getName(), pricebandmaster);
                PricingBandMaster pricingbandmasterObj = (PricingBandMaster) compresult.getEntityList().get(0);

                compresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currency);
                KWLCurrency currencyObj = (KWLCurrency) compresult.getEntityList().get(0);

                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  //ERP-8349[SJ]                             
                Map obj = new HashMap<String, Object>();
                obj.put("priceid", priceband);
                obj.put("productname", productObj.getName());
                obj.put("productid", productObj.getID());
                obj.put("productcode", productObj.getProductid());
                obj.put("applydate", df.format(applydate));
                obj.put("price", price);
                obj.put("uom", productObj.getUnitOfMeasure() != null ? productObj.getUnitOfMeasure().getNameEmptyforNA() : "");
                obj.put("carryin", carryin?messageSource.getMessage("acc.productList.gridPurchasePrice", null, RequestContextUtils.getLocale(request)):messageSource.getMessage("acc.productList.gridSalesPrice", null, RequestContextUtils.getLocale(request)));
                obj.put("bandlist", pricingbandmasterObj.getName());
                obj.put("currency", currencyObj != null ? currencyObj.getName() : "-");
                String affecteduser = vendorObj.getName();
                obj.put("affecteduser", affecteduser);
                jArr.put(obj);

            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getPriceBandListReportJsonCustVen : " + ex.getMessage(), ex);
        }
        return jArr;
    }
    
    /**
     * Description : Method is used to get Ordered/Grouped JSON based on the LayoutGroup
     * @param <requestParams> contains parameters
     * @param <tradingjobj> is a JSONObject
     * @param <isPrint> is is used for export/print case where we have to pass Constants.RES_data key as JSONArray
     * @return :JSONObject 
     */
    public JSONObject getOrderedJSONForDimensionBasedCustomLayout(Map<String,Object> requestParams, JSONObject tradingjobj, boolean isPrint) throws ServiceException, SessionExpiredException {
        try {
            String companyid = (String) requestParams.get(Constants.companyKey);
            String templateid = (String) requestParams.get("templateid");
            HashMap<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put(Constants.companyKey, companyid);
            filterParams.put("templateid", templateid);
            filterParams.put("levelZeroFlag", true);
            KwlReturnObject plresult = accAccountDAOobj.getCustomLayoutGroups(filterParams);
            List<LayoutGroup> list = plresult.getEntityList();
            JSONObject jobj = tradingjobj.getJSONObject(Constants.RES_data);
            JSONArray rightObjArr = jobj.getJSONArray("right");
            JSONArray leftObjArr = jobj.getJSONArray("left");
            JSONArray tradingArray = new JSONArray();
            for (int i = 0; i < rightObjArr.length(); i++) {
                leftObjArr.put(rightObjArr.getJSONObject(i));
            }
            for (LayoutGroup layoutGroup : list) {
                tradingArray = getChildAndTotalJSON(tradingArray, leftObjArr, layoutGroup, companyid);
            }
            tradingjobj.getJSONObject(Constants.RES_data).remove("left");
            tradingjobj.getJSONObject(Constants.RES_data).put(Constants.RES_data, tradingArray);
            if (isPrint) {
                tradingjobj.remove(Constants.RES_data);
                tradingjobj.put(Constants.RES_data, tradingArray);
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tradingjobj;
    }
    /**
     * Description : Recursive function to get the details of the LayoutGroup     *
     * @param <tradingArray>
     * @param <leftObjArr> 
     * @param <layoutGroup>
     * @param <companyid> 
     * @return :JSONArray
     */
    private JSONArray getChildAndTotalJSON(JSONArray tradingArray, JSONArray leftObjArr, LayoutGroup layoutGroup, String companyid) {
        try {
            for (int i = 0; i < leftObjArr.length(); i++) { // for empty group text/ group total
                JSONObject json = leftObjArr.getJSONObject(i);
                if (json.has("accountid") && json.optString("accountid", "").equals(layoutGroup.getID())) {
                    tradingArray.put(json);
                }
            }
            HashMap<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put(Constants.companyKey, companyid);
            filterParams.put("groupid", layoutGroup.getID());
            filterParams.put("parent", null);
            KwlReturnObject accresult = accAccountDAOobj.getAccountsForLayoutGroup(filterParams);
            List<GroupAccMap> list2 = accresult.getEntityList();
            for (GroupAccMap groupAccMap : list2) { // Mapped Accounts to the group
                for (int i = 0; i < leftObjArr.length(); i++) {
                    JSONObject json = leftObjArr.getJSONObject(i);
                    if (json.has("accountid") && json.optString("accountid", "").equals(groupAccMap.getAccount() != null ? groupAccMap.getAccount().getID() : "")) {
                        tradingArray.put(json);
                    }
                }
            }
            HashMap<String, Object> filterParams1 = new HashMap<String, Object>();
            filterParams1.put("parentid", layoutGroup.getID());
            KwlReturnObject childresult = accAccountDAOobj.getCustomLayoutGroups(filterParams1);
            List<LayoutGroup> list1 = childresult.getEntityList();
            for (LayoutGroup childLayoutGroup : list1) { // Child Account Groups
                tradingArray = getChildAndTotalJSON(tradingArray, leftObjArr, childLayoutGroup, companyid);
            }
            if (layoutGroup.getShowtotal() == 1) { // total for parent group
                for (int i = 0; i < leftObjArr.length(); i++) {
                    JSONObject json = leftObjArr.getJSONObject(i);
                    if (json.has("accountid") && json.optString("accountid", "").equals("Total" + layoutGroup.getID())) {
                        tradingArray.put(json);
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tradingArray;
    }
    
    @Override
    public JSONObject getPriceListBandReport(Map<String, Object> requestParams, boolean isExport) {
        JSONObject jobj = new JSONObject();
        JSONArray dataJArr = new JSONArray();
        try {
            // get params from requestParams
            String ss = "";
            if (requestParams.containsKey(Constants.ss) && requestParams.get(Constants.ss) != null) {
                ss = (String) requestParams.get(Constants.ss);
            }
            String start = "";
            if (requestParams.containsKey(Constants.start) && requestParams.get(Constants.start) != null) {
                start = (String) requestParams.get(Constants.start);
            }
            String limit = "";
            if (requestParams.containsKey(Constants.limit) && requestParams.get(Constants.limit) != null) {
                limit = (String) requestParams.get(Constants.limit);
            }
            String companyid = "";
            if (requestParams.containsKey(Constants.companyid) && requestParams.get(Constants.companyid) != null) {
                companyid = (String) requestParams.get(Constants.companyid);
            }
            String productid = "";
            if (requestParams.containsKey(Constants.productid) && requestParams.get(Constants.productid) != null) {
                productid = (String) requestParams.get(Constants.productid);
            }
            String currencyid = "";
            if (requestParams.containsKey(Constants.currencyKey) && requestParams.get(Constants.currencyKey) != null) {
                currencyid = (String) requestParams.get(Constants.currencyKey);
            }
            String priceType = "";
            if (requestParams.containsKey("priceType") && requestParams.get("priceType") != null) {
                priceType = (String) requestParams.get("priceType");
            }
            
            KwlReturnObject curResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curResult.getEntityList().get(0);
            
            // Column Model
            JSONObject commData = new JSONObject();
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            HashMap<String, Object> bandParams = new HashMap<>();
            bandParams.put(Constants.companyKey, companyid);
            bandParams.put("locale",requestParams.get("locale"));
            createColumnModelForPriceListBandReport(jarrColumns, jarrRecords, bandParams);
            
            HashMap<String, Object> productParams = new HashMap<>();
            productParams.put("ss", ss);
            productParams.put(Constants.start, start);
            productParams.put("limit", limit);
            productParams.put("companyID", companyid);
            productParams.put("productid", productid);

            KwlReturnObject productResult = accMasterItemsDAOobj.getProductsForPricingBandMasterDetails(productParams);
            List<Object[]> list = productResult.getEntityList();
            int totalCount = productResult.getRecordTotalCount();
            
            // get price details by bands
            for (Object[] row : list) {
                String productUUID = (row[0] != null) ? (String) row[0] : "";
                String productName = (row[1] != null) ? (String) row[1] : "";
                String productID = (row[2] != null) ? (String) row[2] : "";
                
                JSONObject obj = new JSONObject();
                obj.put("productUUID", productUUID);
                obj.put("productName", productName);
                obj.put("productID", productID);
                obj.put("currencysymbol", (currency != null) ? currency.getSymbol() : "");
                obj.put("currencycode", (currency != null) ? currency.getCurrencyCode() : "");
                
                KwlReturnObject bandResult = accMasterItemsDAOobj.getPricingBandItems(bandParams);
                List<PricingBandMaster> bandList = bandResult.getEntityList();
                for (PricingBandMaster pricingBandMaster : bandList) {
                    HashMap<String, Object> bandDetailParams = new HashMap<>();
                    bandDetailParams.put("pricingBandMasterID", pricingBandMaster.getID());
                    bandDetailParams.put("applicableDate", new Date());
                    bandDetailParams.put("currencyID", currencyid);
                    bandDetailParams.put("productID", productUUID);
                    bandDetailParams.put("companyID", companyid);
                    KwlReturnObject result = accMasterItemsDAOobj.getPriceOfBandForProductAndCurrency(bandDetailParams);
                    if (result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        Object[] priceObj = (Object[]) result.getEntityList().get(0);
                        KwlReturnObject prefresult = accountingHandlerDAOobj.getObject(PricingBandMasterDetail.class.getName(), (String) priceObj[2]);
                        PricingBandMasterDetail bandDetails = (PricingBandMasterDetail) prefresult.getEntityList().get(0);
                        
                        if (priceType.equalsIgnoreCase("1")) {
                            obj.put((pricingBandMaster != null && !pricingBandMaster.getName().isEmpty()) ? (isExport) ? StringUtil.DecodeText(pricingBandMaster.getName().replaceAll("\\.", " ")) : pricingBandMaster.getName().replaceAll("\\.", " ") : "", bandDetails.getSalesPrice());
                        } else if (priceType.equalsIgnoreCase("2")) {
                            obj.put((pricingBandMaster != null && !pricingBandMaster.getName().isEmpty()) ? (isExport) ? StringUtil.DecodeText(pricingBandMaster.getName().replaceAll("\\.", " ")) : pricingBandMaster.getName().replaceAll("\\.", " ") : "", bandDetails.getPurchasePrice());
                        }
                    } else {
                        obj.put((pricingBandMaster != null && !pricingBandMaster.getName().isEmpty()) ? (isExport) ? StringUtil.DecodeText(pricingBandMaster.getName().replaceAll("\\.", " ")) : pricingBandMaster.getName().replaceAll("\\.", " ") : "", 0);
                    }
                }
                
                dataJArr.put(obj);
            }

            // Column Model
            commData.put(Constants.RES_success, true);
            commData.put("coldata", dataJArr);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            commData.put("totalCount", totalCount);
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            JSONArray jcom = new JSONArray();
            jcom.put(commData);

            jobj.put("valid", true);
            if (isExport) {
                jobj.put(Constants.RES_data, dataJArr);
            } else {
                jobj.put(Constants.RES_data, commData);
            }
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
    
    public void createColumnModelForPriceListBandReport(JSONArray jarrColumns, JSONArray jarrRecords, HashMap<String, Object> bandParams) throws JSONException, ServiceException {
        JSONObject jobjTemp = new JSONObject();
        Locale locale = (Locale) bandParams.get("locale");
        jobjTemp.put("name", "productID");
        jarrRecords.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.product.gridProductID", null,locale));
        jobjTemp.put("dataIndex", "productID");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("name", "productName");
        jarrRecords.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.rem.prodName", null,locale));
        jobjTemp.put("dataIndex", "productName");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("name", "currencycode");
        jarrRecords.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("name", "currencysymbol");
        jarrRecords.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("name", Constants.currencyKey);
        jarrRecords.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.cust.currency", null,locale));
        jobjTemp.put("dataIndex", "currencycode");
        jobjTemp.put("hidden", "true");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        KwlReturnObject bandResult = accMasterItemsDAOobj.getPricingBandItems(bandParams);
        List<PricingBandMaster> bandList = bandResult.getEntityList();
        for (PricingBandMaster pricingBandMaster : bandList) {
            // Dynamic columns of Band
            jobjTemp = new JSONObject();
            jobjTemp.put("name", (pricingBandMaster!=null && !pricingBandMaster.getName().isEmpty())?pricingBandMaster.getName().replaceAll("\\.", " "):"");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header",pricingBandMaster.getName());
            jobjTemp.put("dataIndex",(pricingBandMaster!=null && !pricingBandMaster.getName().isEmpty())?pricingBandMaster.getName().replaceAll("\\.", " "):"");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
        }
    }
    
       /**
     * Description : Method is used to get Foreign Gain Loss Data array for GST Form5
     * @param <requestParams> contains parameters
     * @return :Map<String,Object> 
     */
    public Map<String,Object> getForexEnrtyDetailData(Map<String, Object> requestParams) throws ServiceException, SessionExpiredException {
        Map<String,Object> map= new HashMap<String, Object>();
        try {
            JSONArray array = new JSONArray();
            double forexAmt = 0d;
            String companyid = (String) requestParams.get(Constants.companyKey);
            String gcurrencyid = (String) requestParams.get(Constants.globalCurrencyKey);
            Account forexAccount = (Account) requestParams.get("forexAccount");
            String accounts = forexAccount.getID();
            Set<Account> childAccounts = forexAccount.getChildren();
            for (Account child : childAccounts) {
                accounts += ","+child.getID();
            }
            requestParams.put("accountid",accounts);
            
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cpresult.getEntityList().get(0);
            String sngcurrencyid = "", sngcurrencysymbol = "", sngcurrencyname = "", sngcurrencycode = "";
            KWLCurrency currency = null;
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {// For singapore company GSTForm5 will have detail in SGD regardless of base currency. Other will have detail in base currency  
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), Constants.SGDID);
                currency = (KWLCurrency) curresult.getEntityList().get(0);
            } else {
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
                currency = (KWLCurrency) curresult.getEntityList().get(0);
            }

            sngcurrencyid = currency.getCurrencyID();
            sngcurrencysymbol = currency.getSymbol();
            sngcurrencyname = currency.getName();
            sngcurrencycode = currency.getCurrencyCode();

            KwlReturnObject returnObject = accJournalEntryobj.getForeignGainLossJouranalEntryDetails(requestParams);
            List<JournalEntryDetail> details = returnObject.getEntityList();
            for (JournalEntryDetail jed : details) {
                KwlReturnObject bAmt = null;
                double amount = 0;
                double exchangeRate = jed.getJournalEntry().getExternalCurrencyRate();
                String transactionCurrencyID = jed.getJournalEntry().getCurrency().getCurrencyID();
                double originalAmount = authHandler.round(jed.getAmount(), companyid);
                /*
                 * If company is singaporean the we need amount in SGD currecy
                 * regardless of base currecny If company is other than
                 * singapore then we need amount in base currecny
                 */
                JournalEntry journalEntryID = jed.getJournalEntry();                
                String fromcurrencyid = (jed.getJournalEntry().getCurrency() == null ? gcurrencyid : jed.getJournalEntry().getCurrency().getCurrencyID());
                /*
                * If gstCurrencyRate!=0 in journal entry, this case occures when base currency different than SGD and transaction currency 
                * is different than country currency(SGD) and base currency.
                */
                if (jed.getJournalEntry().getGstCurrencyRate() != 0 && jed.getForexGainLoss() != 0.0 && jed.getPaymentType() != 0) {                    
                    KwlReturnObject bAmtForex = accJournalEntryobj.getJournalEntryDetail(jed.getJournalEntry().getID(), jed.getJournalEntry().getCompany().getCompanyID());
                    double forexAmount = 0.0;                    
                    List<JournalEntryDetail> bAmtForexList = bAmtForex.getEntityList();
                    for (JournalEntryDetail detail : bAmtForexList) {
                        double baseforexAmt = 0.0;
                        KwlReturnObject forexObj = null;
                        /*
                        *If jedetail have foreign gain loss and other than foreign exchange account 
                        *and if the country is Singapore and the base currency is not SGD. 
                        */
                        if (detail.getForexGainLoss() != 0.0 && !jed.getID().equals(detail.getID()) && jed.getPaymentType() == detail.getPaymentType()) {                                                        
                            if (detail.getGstCurrencyRate() != 0.0) {
                                
                                if (detail.getJournalEntry().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID)) {
                                    /*
                                    * For SGD transaction Exchange Rate from JE and gstCurrencyRate not work for GST Report, hence hardcoded gstCurrencyRate 
                                    */                                    
                                    exchangeRate = 1;
                                    forexAmount += detail.getForexGainLoss();
                                    amount = authHandler.round(forexAmount, companyid);
                                } else {
                                    forexObj = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, detail.getForexGainLoss(), jed.getJournalEntry().getCurrency().getCurrencyID(), jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate(), detail.getGstCurrencyRate());
                                    forexAmount += (Double) forexObj.getEntityList().get(0);
                                    amount = authHandler.round(forexAmount, companyid);
                                }
                            } else {
                                forexObj = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, detail.getForexGainLoss(), fromcurrencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                                baseforexAmt = (Double) forexObj.getEntityList().get(0);
                                forexObj = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, baseforexAmt, gcurrencyid, Constants.SGDID, jed.getJournalEntry().getEntryDate(), 1);
                                forexAmount += (Double) forexObj.getEntityList().get(0);
                                amount = authHandler.round(forexAmount, companyid);
                                
                                                                                                  
                            }
                        }
                        
                    }
                    /*
                     * Need to calculate exchangeRate in terms of third currency and if gstCUrrencyRate pop up for multiple rows in single document.
                     */
                    exchangeRate = originalAmount / amount;
                } else if (sngcurrencyid.equals(transactionCurrencyID)) {// In this case no need to convert amount because amount already in desired currency                    
                    exchangeRate = 1;
                    amount = authHandler.round(jed.getAmount(), companyid);
                } else {
                    if (sngcurrencyid.equals(gcurrencyid)) {// In this case conver amount with method getCurrencyToBaseAmount
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, jed.getAmount(), transactionCurrencyID, jed.getJournalEntry().getEntryDate(), exchangeRate);
                    } else {// In this case convert amount with method
                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, jed.getAmount(), transactionCurrencyID, sngcurrencyid, jed.getJournalEntry().getEntryDate(), exchangeRate);
                    }
                    amount = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                    /**
                     * Calculate exchange rate from originalAmount(transaction
                     * amount) present and amount(converted amount). Need to
                     * calculate Exchange Rate for Diamond Aviation Case.
                     */
                    if (!gcurrencyid.equals(Constants.SGDID)) {
                        exchangeRate = originalAmount / amount;
                    }
                }
                
                exchangeRate = authHandler.round(exchangeRate, companyid);
                
                /*
                *!gstCurrencyFlag: Check used for if the gstcurrencyrate of jedetail is not equal to zero, 
                *then no need of isDebit check.
                *!jed.isDebit(): If the jedeatil is credit, then show amount negative. 
                */
                if(!jed.isDebit()){
                    amount =(-1) * amount;
                } 
                forexAmt +=amount;
                String name = "", type = "", billid ="", noteid="";
                String transactionNumber = "";
                String transactionId = jed.getJournalEntry().getTransactionId();
                int transactionModuleId = jed.getJournalEntry().getTransactionModuleid();

                if (!StringUtil.isNullOrEmpty(transactionId)) {
                    if (transactionModuleId == Constants.Acc_Invoice_ModuleId || transactionModuleId == Constants.Acc_FixedAssets_DisposalInvoice_ModuleId || transactionModuleId == Constants.LEASE_INVOICE_MODULEID) {
                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), transactionId);
                        Invoice invoice = (Invoice) KwlInvoice.getEntityList().get(0);
                        if (invoice != null) {
                            billid = invoice.getID();
                            transactionNumber = invoice.getInvoiceNumber();
                            name = invoice.getCustomer() != null ? invoice.getCustomer().getName() : "";
                            type = "Sales Invoice";
                        }
                    } else if (transactionModuleId == Constants.Acc_ConsignmentInvoice_ModuleId) {
                        KwlReturnObject KwlInvoice = accountingHandlerDAOobj.getObject(Invoice.class.getName(), transactionId);
                        Invoice invoice = (Invoice) KwlInvoice.getEntityList().get(0);
                        if (invoice != null) {
                            billid = invoice.getID();
                            transactionNumber = invoice.getInvoiceNumber();
                            name = invoice.getCustomer() != null ? invoice.getCustomer().getName() : "";
                            type = "Sales Invoice";
                        }
                    } else if (transactionModuleId == Constants.Acc_Vendor_Invoice_ModuleId || transactionModuleId == Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId) {
                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), transactionId);
                        GoodsReceipt goodsReceipt = (GoodsReceipt) KwlgoodsReceipt.getEntityList().get(0);
                        if (goodsReceipt != null) {
                            billid = goodsReceipt.getID();
                            transactionNumber = goodsReceipt.getGoodsReceiptNumber();
                            name = goodsReceipt.getVendor() != null ? goodsReceipt.getVendor().getName() : "";
                            type = "Purchase Invoice";
                        }
                    } else if (transactionModuleId == Constants.Acc_Consignment_GoodsReceipt_ModuleId) {
                        KwlReturnObject KwlgoodsReceipt = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), transactionId);
                        GoodsReceipt goodsReceipt = (GoodsReceipt) KwlgoodsReceipt.getEntityList().get(0);
                        if (goodsReceipt != null) {
                            billid = goodsReceipt.getID();
                            transactionNumber = goodsReceipt.getGoodsReceiptNumber();
                            name = goodsReceipt.getVendor() != null ? goodsReceipt.getVendor().getName() : "";
                            type = "Purchase Invoice";
                        }
                    } else if (transactionModuleId == Constants.Acc_Credit_Note_ModuleId) {
                        KwlReturnObject KwlCreditNote = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), transactionId);
                        CreditNote creditNote = (CreditNote) KwlCreditNote.getEntityList().get(0);
                        if (creditNote != null) {
                            noteid = creditNote.getID();
                            transactionNumber = creditNote.getCreditNoteNumber();
                            if (creditNote.getCustomer() != null) {
                                name = creditNote.getCustomer().getName();
                            } else if (creditNote.getVendor() != null) {
                                name = creditNote.getVendor().getName();
                            }
                            type = "Credit Note";
                        }
                    } else if (transactionModuleId == Constants.Acc_Debit_Note_ModuleId) {
                        KwlReturnObject KwlDebitNote = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), transactionId);
                        DebitNote debitNote = (DebitNote) KwlDebitNote.getEntityList().get(0);
                        if (debitNote != null) {
                            noteid = debitNote.getID();
                            transactionNumber = debitNote.getDebitNoteNumber();
                            if (debitNote.getVendor() != null) {
                                name = debitNote.getVendor().getName();
                            } else if (debitNote.getCustomer() != null) {
                                name = debitNote.getCustomer().getName();
                            }
                            type = "Debit Note";
                        }
                    } else if (transactionModuleId == Constants.Acc_Receive_Payment_ModuleId) {
                        KwlReturnObject resultReceipt = accountingHandlerDAOobj.getObject(Receipt.class.getName(), transactionId);
                        Receipt receipt = (Receipt) resultReceipt.getEntityList().get(0);
                        if (receipt != null) {
                            billid = receipt.getID();
                            transactionNumber = receipt.getReceiptNumber();
                            if (receipt.getCustomer() != null) {
                                name = receipt.getCustomer().getName();
                            } else if (receipt.getVendor() != null && !receipt.getVendor().equals("")) {
                                KwlReturnObject result = accountingHandlerDAOobj.getObject(Vendor.class.getName(), receipt.getVendor());
                                Vendor vendor = (Vendor) result.getEntityList().get(0);
                                name = vendor.getName();
                            }
                            type = "Payment Received";
                        }
                    } else if (transactionModuleId == Constants.Acc_Make_Payment_ModuleId) {
                        KwlReturnObject resultPayment = accountingHandlerDAOobj.getObject(Payment.class.getName(), transactionId);
                        Payment payment = (Payment) resultPayment.getEntityList().get(0);
                        if (payment != null) {
                            billid = payment.getID();
                            transactionNumber = payment.getPaymentNumber();
                            if (payment.getVendor() != null) {
                                name = payment.getVendor().getName();
                            } else if (payment.getCustomer() != null && !payment.getCustomer().equals("")) {
                                KwlReturnObject result = accountingHandlerDAOobj.getObject(Customer.class.getName(), payment.getCustomer());
                                Customer customer = (Customer) result.getEntityList().get(0);
                                name = customer.getName();
                            }
                            type = "Payment Made";
                        }
                    }
                }
                              
                JSONObject jObj2ndLevelBox3 = new JSONObject();
                jObj2ndLevelBox3.put("taxname", jed.getAccount().getAccountName());
                jObj2ndLevelBox3.put("transactionid", transactionNumber);
                jObj2ndLevelBox3.put("journalentry", jed.getJournalEntry().getEntryNumber());
                jObj2ndLevelBox3.put("name", name);
                jObj2ndLevelBox3.put("level", 3);                
                jObj2ndLevelBox3.put("taxamount", amount);
                jObj2ndLevelBox3.put("box", "");
                jObj2ndLevelBox3.put("mergedCategoryData", forexAccount.getName() + " (Absolute value)");
                jObj2ndLevelBox3.put(Constants.currencyKey, sngcurrencyid);
                jObj2ndLevelBox3.put("currencysymbol", sngcurrencysymbol);
                jObj2ndLevelBox3.put("currencyname", sngcurrencyname);
                jObj2ndLevelBox3.put("currencycode", sngcurrencycode);
                jObj2ndLevelBox3.put(Constants.billid, billid);
                jObj2ndLevelBox3.put("type", type);
                jObj2ndLevelBox3.put("jeid", jed.getJournalEntry().getID());
                jObj2ndLevelBox3.put("jedate", jed.getJournalEntry().getEntryDate());
                jObj2ndLevelBox3.put("noteid", noteid);                
                jObj2ndLevelBox3.put("originalamount", jed.isDebit() ? originalAmount : (-1) * originalAmount);
                jObj2ndLevelBox3.put("transactionexchangerate", exchangeRate);
                jObj2ndLevelBox3.put("transactioncurrencysymbol", jed.getJournalEntry().getCurrency()!=null?jed.getJournalEntry().getCurrency().getSymbol():"");
                jObj2ndLevelBox3.put("transactioncurrencyid", transactionCurrencyID);
                array.put(jObj2ndLevelBox3);
            }
            map.put("dataArray", array);
            map.put("forexAmount", authHandler.round(forexAmt, companyid));
        } catch (Exception ex) {
            throw ServiceException.FAILURE( ex.getMessage(), ex);
        }
        return map;
    }
    @Override
    public JSONObject getDNdataForCustomLineDetailReport(HashMap<String, Object> requestParams, JSONArray DataJArr) {

        JSONObject jsonobj = new JSONObject();
        boolean searchFlag = false;
        String Searchjson = "";
        KwlReturnObject result = null;
        int totalCount = 0;
        try {
            String companyid = requestParams.get(Constants.companyKey).toString();
            boolean lineLevelAmount = (Boolean) requestParams.get("lineLevelAmount");
            boolean includingTax = (Boolean) requestParams.get("includingTax");
            KWLCurrency currency = (KWLCurrency) requestParams.get("currency");
            DateFormat df = (DateFormat) requestParams.get("df");
            double APAmount = (Double)requestParams.get("APAmount");
            boolean isCustomDetailLineReport = false;
            if ((requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null)) {
                Searchjson = requestParams.get("searchJson").toString();
                boolean retainModuleId = true;
                Searchjson = accJournalEntryobj.advanceserachJsornEdit(Searchjson, companyid, (Integer) requestParams.get(Constants.moduleid), retainModuleId);
                requestParams.put(Constants.Acc_Search_Json, Searchjson);
            }
            if ((requestParams.containsKey("isCustomDetailLineReport") && requestParams.get("isCustomDetailLineReport") != null)) {
                isCustomDetailLineReport = (Boolean)  requestParams.get("isCustomDetailLineReport");
            }
            requestParams.put("isCustomDetailLineReport", isCustomDetailLineReport);
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null && requestParams.get("searchJson") != "") {
                JSONObject serachJobj = new JSONObject(Searchjson);
                JSONArray array = serachJobj.has(Constants.root) ? serachJobj.getJSONArray(Constants.root) : new JSONArray();
                JSONArray array1 = new JSONArray();
                for (int i = 0; i < array.length(); i++) {
                    JSONObject Jobj = array.get(i) != null ? new JSONObject(array.get(i).toString()) : new JSONObject();
                    if (Jobj.has(Constants.moduleid) && Constants.Acc_Debit_Note_ModuleId == Integer.parseInt(Jobj.getString(Constants.moduleid))) {
                        searchFlag = true;
                        array1.put(Jobj);
                    }
                }
                if (searchFlag) {
                    JSONObject jSONObject = new JSONObject();
                    jSONObject.put("root", array1);
                    requestParams.put(Constants.Acc_Search_Json, jSONObject.toString());
                }
            }
            HashMap lineMap = new HashMap(requestParams);
            if (searchFlag) { // temporaryly made false
                result = accDebitNoteobj.getDebitNoteMerged(requestParams);
                totalCount = result != null ? result.getRecordTotalCount() : 0;
                List list = result.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    Object[] oj = (Object[]) itr.next();
                    String cnid = oj[1].toString();
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), cnid);
                    DebitNote cn = (DebitNote) objItr.getEntityList().get(0);
                    Date dnCreationDate = null;
                    Double externalCurrencyRate = 0d;
                    Double dnOriginalAmount = 0d;
                    double taxAmount = 0;
                    double rowAmount = 0;
                    JournalEntry je = null;
                    je = cn.getJournalEntry();
//                    dnCreationDate = je.getEntryDate();
                    dnCreationDate = cn.getCreationDate();
                    externalCurrencyRate = je.getExternalCurrencyRate();

                    JSONObject obj = new JSONObject();
                    /*
                     get Debit Note details 
                     */
                    Map map = new HashMap();
                    map.put("companyId", companyid);
                    map.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    lineMap.put("Id", cn.getID());
                    lineMap.put("lineLevelAmount", lineLevelAmount);
                    KwlReturnObject grdresult = accDebitNoteobj.getDNDetailsUsingAdvanceSearch(lineMap);
                    List<DebitNoteTaxEntry> dnDetailList = grdresult.getEntityList();
                    JSONArray details = new JSONArray();
                    if (dnDetailList != null && !dnDetailList.isEmpty()) {
                        for (DebitNoteTaxEntry debitNoteTaxEntry : dnDetailList) {
                            map.put("DebitNoteDetail", debitNoteTaxEntry);
                            obj = new JSONObject();
                            putLineCustomDetails(obj, map);
                            String accname = StringUtil.isNullOrEmpty(debitNoteTaxEntry.getAccount().getAcccode()) ? debitNoteTaxEntry.getAccount().getName() : "[" + debitNoteTaxEntry.getAccount().getAcccode() + "] " + debitNoteTaxEntry.getAccount().getName();
                            double taxpercent = 0.0d;
                            if (debitNoteTaxEntry.getTax() != null) {
//                                KwlReturnObject perresult = accTaxObj.getTaxPercent(cn.getCompany().getCompanyID(), cn.getJournalEntry().getEntryDate(), debitNoteTaxEntry.getTax().getID());
                                KwlReturnObject perresult = accTaxObj.getTaxPercent(cn.getCompany().getCompanyID(), cn.getCreationDate(), debitNoteTaxEntry.getTax().getID());
                                taxpercent = (Double) perresult.getEntityList().get(0);
                            }
                            double txAmount = authHandler.round(debitNoteTaxEntry.getTaxamount(), companyid);

                            obj.put("accountname", accname);
                            obj.put("taxpercent", taxpercent);
                            obj.put("taxamount", txAmount);
                            obj.put("description", debitNoteTaxEntry.getDescription());
                            obj.put("amount", debitNoteTaxEntry.getAmount());
                            obj.put("detailType", "DNAccountDetails");
                            details.put(obj);

                            rowAmount = rowAmount + debitNoteTaxEntry.getAmount();
                            taxAmount = taxAmount + txAmount;
                        }

                    }

                    KwlReturnObject cndresult = accDebitNoteobj.getVendorInvoicesLinkedWithDebitNote(cn.getID(), cn.getCompany().getCompanyID());

                    List dndlist = cndresult.getEntityList();
                    Iterator it = dndlist.iterator();
                    while (it.hasNext()) {
                        String grid = (String) it.next();
                        KwlReturnObject invItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), grid);
                        GoodsReceipt invObj = (GoodsReceipt) invItr.getEntityList().get(0);
                        Double invoiceAmount = 0d;
                        Date invoiceCreationDate = null;
                        obj = new JSONObject();
                        if (invObj != null) {
//                            invoiceCreationDate = invObj.getJournalEntry().getEntryDate();
                            invoiceCreationDate = invObj.getCreationDate();
                            invoiceAmount = invObj.getVendorEntry().getAmount();

                            obj.put("invoiceno", invObj.getGoodsReceiptNumber());
                            obj.put("invoicecreationdate", df.format(invoiceCreationDate));
                            obj.put("invduedate", df.format(invObj.getDueDate()));
                            obj.put("invamount", invoiceAmount);
                            obj.put("invamountdue", (invObj.isIsOpeningBalenceInvoice() ? invObj.getOpeningBalanceAmountDue() : invObj.getInvoiceamountdue()));
                            obj.put("detailType", "DNInvoiceDetails");
                            details.put(obj);
                        }

                    }

                    dnOriginalAmount = rowAmount;
                    if (includingTax) {
                        dnOriginalAmount = dnOriginalAmount + taxAmount;
                    }
                    boolean isDNagainstVendor = (cn.getDntype() != 4) ? true : false;
                    if (isDNagainstVendor) {
                        dnOriginalAmount = 0 - dnOriginalAmount;
                    }
                    obj = new JSONObject();
                    obj.put("details", details);
                    String currencyid = (currency != null ? currency.getCurrencyID() : cn.getCurrency().getCurrencyID());
                    obj.put("date", df.format(dnCreationDate));
                    obj.put("entryno", (je != null ? je.getEntryNumber() : ""));
                    obj.put(Constants.currencyKey, currencyid);
                    obj.put("currencysymbol", (cn.getCurrency() == null ? currency.getSymbol() : cn.getCurrency().getSymbol()));
                    obj.put("currencyname", (cn.getCurrency() == null ? currency.getName() : cn.getCurrency().getName()));
                    obj.put("amount", dnOriginalAmount);

                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, dnOriginalAmount, currencyid, dnCreationDate, externalCurrencyRate);
                    double amountinbase = (Double) bAmt.getEntityList().get(0);
                    obj.put("amountinbase", authHandler.round(amountinbase, companyid));
                    obj.put("billno", cn.getDebitNoteNumber());
                    obj.put("group", cn.getDntype() != 4 ? "Accounts Payable (AP)" : "Accounts Receivable (AR)");
                    obj.put("description", cn.getMemo());
                    obj.put("customer_vendor", (cn.getCustomer() == null ? "" : cn.getCustomer().getName()));
                    obj.put("isDebitNote", true);
                    APAmount = APAmount + authHandler.round(amountinbase, companyid);
                    jsonobj.put("APAmount", APAmount);
                    /*
                     Add Global Custom data for document
                     */
                    Map globalMap = new HashMap();
                    globalMap.put("moduleId", Constants.Acc_Debit_Note_ModuleId);
                    globalMap.put("companyId", companyid);
                    globalMap.put("jeId", cn.getJournalEntry().getID());
                    putGlobalCustomDetails(obj, globalMap);
                    DataJArr.put(obj);
                    jsonobj.put("DataJArr", DataJArr);

                }
            }else{
                 jsonobj.put("APAmount", 0.0);
                 jsonobj.put("DataJArr", "[]");
            }
        } catch (ServiceException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, "AccReportsServiceImpl.getDNdataForCustomLineDetailReport", ex);
        } catch (JSONException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, "AccReportsServiceImpl.getDNdataForCustomLineDetailReport", ex);
        }

        return jsonobj;

    }

    @Override
    public JSONObject getCNdataForCustomLineDetailReport(HashMap<String, Object> requestParams, JSONArray DataJArr) {

        JSONObject jsonobj = new JSONObject();
        boolean searchFlag = false;
        String Searchjson = "";
        KwlReturnObject result = null;
        int totalCount = 0;
        try {
            String companyid = requestParams.get(Constants.companyKey).toString();
            boolean lineLevelAmount = (Boolean) requestParams.get("lineLevelAmount");
            boolean includingTax = (Boolean) requestParams.get("includingTax");
            KWLCurrency currency = (KWLCurrency) requestParams.get("currency");
            DateFormat df = (DateFormat) requestParams.get("df");
            double ARAmount = (Double) requestParams.get("ARAmount");
            boolean isCustomDetailLineReport = false;
            if ((requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null)) {
                Searchjson = requestParams.get("searchJson").toString();
                boolean retainModuleId = true;
                Searchjson = accJournalEntryobj.advanceserachJsornEdit(Searchjson, companyid, (Integer) requestParams.get(Constants.moduleid), retainModuleId);
                requestParams.put(Constants.Acc_Search_Json, Searchjson);
            }
            if ((requestParams.containsKey("isCustomDetailLineReport") && requestParams.get("isCustomDetailLineReport") != null)) {
                isCustomDetailLineReport = (Boolean)  requestParams.get("isCustomDetailLineReport");
            }
            requestParams.put("isCustomDetailLineReport", isCustomDetailLineReport);
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null && requestParams.get("searchJson") != "") {
                JSONObject serachJobj = new JSONObject(Searchjson);
                JSONArray array = serachJobj.has(Constants.root) ? serachJobj.getJSONArray(Constants.root) : new JSONArray();
                JSONArray array1 = new JSONArray();
                for (int i = 0; i < array.length(); i++) {
                    JSONObject Jobj = array.get(i) != null ? new JSONObject(array.get(i).toString()) : new JSONObject();
                    if (Jobj.has(Constants.moduleid) && Constants.Acc_Credit_Note_ModuleId == Integer.parseInt(Jobj.getString(Constants.moduleid))) {
                        searchFlag = true;
                        array1.put(Jobj);
                    }
                }
                if (searchFlag) {
                    JSONObject jSONObject = new JSONObject();
                    jSONObject.put("root", array1);
                    requestParams.put(Constants.Acc_Search_Json, jSONObject.toString());
                }
            }
            HashMap lineMap = new HashMap(requestParams);
            if (searchFlag) { // temporaryly made false
                result = accCreditNoteobj.getCreditNoteMerged(requestParams);
                totalCount = result != null ? result.getRecordTotalCount() : 0;
                List list = result.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    Object[] oj = (Object[]) itr.next();
                    String cnid = oj[1].toString();
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), cnid);
                    CreditNote cn = (CreditNote) objItr.getEntityList().get(0);
                    Date cnCreationDate = null;
                    Double externalCurrencyRate = 0d;
                    Double cnOriginalAmount = 0d;
                    double taxAmount = 0;
                    double rowAmount = 0;
                    JournalEntry je = null;
                    je = cn.getJournalEntry();
//                    cnCreationDate = je.getEntryDate();
                    cnCreationDate = cn.getCreationDate();
                    externalCurrencyRate = je.getExternalCurrencyRate();

                    JSONObject obj = new JSONObject();
                    /*
                     get Credit Note details 
                     */
                    Map map = new HashMap();
                    map.put("companyId", companyid);
                    map.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    lineMap.put("Id", cn.getID());
                    lineMap.put("lineLevelAmount", lineLevelAmount);
                    KwlReturnObject grdresult = accCreditNoteobj.getCNDetailsUsingAdvanceSearch(lineMap);
                    List<CreditNoteTaxEntry> cnDetailList = grdresult.getEntityList();
                    JSONArray details = new JSONArray();
                    if (cnDetailList != null && !cnDetailList.isEmpty()) {
                        for (CreditNoteTaxEntry creditNoteTaxEntry : cnDetailList) {
                            map.put("CreditNoteDetail", creditNoteTaxEntry);
                            obj = new JSONObject();
                            putLineCustomDetails(obj, map);
                            String accname = StringUtil.isNullOrEmpty(creditNoteTaxEntry.getAccount().getAcccode()) ? creditNoteTaxEntry.getAccount().getName() : "[" + creditNoteTaxEntry.getAccount().getAcccode() + "] " + creditNoteTaxEntry.getAccount().getName();
                            double taxpercent = 0.0d;
                            if (creditNoteTaxEntry.getTax() != null) {
//                                KwlReturnObject perresult = accTaxObj.getTaxPercent(cn.getCompany().getCompanyID(), cn.getJournalEntry().getEntryDate(), creditNoteTaxEntry.getTax().getID());
                                KwlReturnObject perresult = accTaxObj.getTaxPercent(cn.getCompany().getCompanyID(), cn.getCreationDate(), creditNoteTaxEntry.getTax().getID());
                                taxpercent = (Double) perresult.getEntityList().get(0);
                            }
                            double txAmount = authHandler.round(creditNoteTaxEntry.getTaxamount(), companyid);

                            obj.put("accountname", accname);
                            obj.put("taxpercent", taxpercent);
                            obj.put("taxamount", txAmount);
                            obj.put("description", creditNoteTaxEntry.getDescription());
                            obj.put("amount", creditNoteTaxEntry.getAmount());
                            obj.put("detailType", "CNAccountDetails");
                            details.put(obj);

                            rowAmount = rowAmount + creditNoteTaxEntry.getAmount();
                            taxAmount = taxAmount + txAmount;
                        }

                    }

                    KwlReturnObject cndresult = accCreditNoteobj.getInvoicesLinkedWithCreditNote(cn.getID(), cn.getCompany().getCompanyID());

                    List cndlist = cndresult.getEntityList();
                    Iterator it = cndlist.iterator();
                    while (it.hasNext()) {
                        String invoiceid = (String) it.next();
                        KwlReturnObject invItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceid);
                        Invoice invObj = (Invoice) invItr.getEntityList().get(0);
                        Double invoiceAmount = 0d;
                        Date invoiceCreationDate = null;
                        obj = new JSONObject();
                        if (invObj != null) {
//                            invoiceCreationDate = invObj.getJournalEntry().getEntryDate();
                            invoiceCreationDate = invObj.getCreationDate();
                            invoiceAmount = invObj.getCustomerEntry().getAmount();

                            obj.put("invoiceno", invObj.getInvoiceNumber());
                            obj.put("invoicecreationdate", df.format(invoiceCreationDate));
                            obj.put("invduedate", df.format(invObj.getDueDate()));
                            obj.put("invamount", invoiceAmount);
                            obj.put("invamountdue", (invObj.isIsOpeningBalenceInvoice() ? invObj.getOpeningBalanceAmountDue() : invObj.getInvoiceamountdue()));
                            obj.put("detailType", "CNInvoiceDetails");
                            details.put(obj);
                        }

                    }

                    cnOriginalAmount = rowAmount;
                    if (includingTax) {
                        cnOriginalAmount = cnOriginalAmount + taxAmount;
                    }
                    boolean isCNagainstCustomer = (cn.getCntype() != 4) ? true : false;
                    if (isCNagainstCustomer) {
                        cnOriginalAmount = 0 - cnOriginalAmount;
                    }
                    obj = new JSONObject();
                    obj.put("details", details);
                    String currencyid = (currency != null ? currency.getCurrencyID() : cn.getCurrency().getCurrencyID());
                    obj.put("date", df.format(cnCreationDate));
                    obj.put("entryno", (je != null ? je.getEntryNumber() : ""));
                    obj.put(Constants.currencyKey, currencyid);
                    obj.put("currencysymbol", (cn.getCurrency() == null ? currency.getSymbol() : cn.getCurrency().getSymbol()));
                    obj.put("currencyname", (cn.getCurrency() == null ? currency.getName() : cn.getCurrency().getName()));
                    obj.put("amount", cnOriginalAmount);

                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, cnOriginalAmount, currencyid, cnCreationDate, externalCurrencyRate);
                    double amountinbase = (Double) bAmt.getEntityList().get(0);
                    obj.put("amountinbase", authHandler.round(amountinbase, companyid));
                    obj.put("billno", cn.getCreditNoteNumber());
                    obj.put("group", cn.getCntype() != 4 ? "Accounts Receivable (AR)" : "Accounts Payable (AP)");
                    obj.put("description", cn.getMemo());
                    obj.put("customer_vendor", (cn.getCustomer() == null ? "" : cn.getCustomer().getName()));
                    obj.put("isCreditNote", true);
                    ARAmount = ARAmount + authHandler.round(amountinbase, companyid);
                    jsonobj.put("ARAmount", ARAmount);
                    /*
                     Add Global Custom data for document
                     */
                    Map globalMap = new HashMap();
                    globalMap.put("moduleId", Constants.Acc_Credit_Note_ModuleId);
                    globalMap.put("companyId", companyid);
                    globalMap.put("jeId", cn.getJournalEntry().getID());
                    putGlobalCustomDetails(obj, globalMap);
                    DataJArr.put(obj);
                    jsonobj.put("DataJArr", DataJArr);

                }
            } else{
                 jsonobj.put("ARAmount", 0.0);
                 jsonobj.put("DataJArr", "[]");
            }
        } catch (ServiceException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, "AccReportsServiceImpl.getDNdataForCustomLineDetailReport", ex);
        } catch (JSONException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, "AccReportsServiceImpl.getDNdataForCustomLineDetailReport", ex);
        }

        return jsonobj;

    }
    /**
     *
     * @param jSONObject
     * @param map
     * @throws ServiceException
     * @throws JSONException
     * @Description : Get Line Level Custom data for Modules
     */
    public void putLineCustomDetails(JSONObject jSONObject, Map<String, Object> map) throws ServiceException, JSONException {
        String key = "";
        String companyId = "";
        int moduleid = 0;
        boolean isExpense = false;
        GoodsReceiptDetail goodsReceiptDetail = null;
        ExpenseGRDetail expenseGRDetail = null;
        InvoiceDetail invoiceDetail = null;
        JournalEntryDetail journalEntryDetail = null;
        CreditNoteTaxEntry creditNoteTaxEntry = null;
        DebitNoteTaxEntry debitNoteTaxEntry = null;
        if (map.containsKey("companyId")) {
            companyId = map.get("companyId").toString();
        }

        if (map.containsKey("InvoiceDetail")) {
            invoiceDetail = (InvoiceDetail) map.get("InvoiceDetail");
            moduleid = Constants.Acc_Invoice_ModuleId;
            key = "pr";
        }
        if (map.containsKey("grDetails")) {
            goodsReceiptDetail = (GoodsReceiptDetail) map.get("grDetails");
            moduleid = Constants.Acc_Vendor_Invoice_ModuleId;
            key = "pr";
        }
        if (map.containsKey("expenseDetails")) {
            expenseGRDetail = (ExpenseGRDetail) map.get("expenseDetails");
            moduleid = Constants.Acc_Vendor_Invoice_ModuleId;
            isExpense = true;
            key = "ex";
        }
        if (map.containsKey("jeDetails")) {
            journalEntryDetail = (JournalEntryDetail) map.get("jeDetails");
            moduleid = Constants.Acc_GENERAL_LEDGER_ModuleId;
            key = "je";
        }
        if (map.containsKey("CreditNoteDetail")) {
            creditNoteTaxEntry = (CreditNoteTaxEntry) map.get("CreditNoteDetail");
            moduleid = Constants.Acc_Credit_Note_ModuleId;
            key = "je";
        }
        if (map.containsKey("DebitNoteDetail")) {
            debitNoteTaxEntry = (DebitNoteTaxEntry) map.get("DebitNoteDetail");
            moduleid = Constants.Acc_Debit_Note_ModuleId;
            key = "je";
        }
        // ## Get Custom Field Data 
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyId, moduleid, 1));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
        Map<String, Object> variableMap = new HashMap<String, Object>();
        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
        Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
        if (moduleid == Constants.Acc_Invoice_ModuleId) {
            Detailfilter_params.add(invoiceDetail.getID());
        } else if (moduleid == Constants.Acc_Vendor_Invoice_ModuleId) {
            if (isExpense) {
                Detailfilter_params.add(expenseGRDetail.getID());
            } else {
                Detailfilter_params.add(goodsReceiptDetail.getID());
            }
        } else if (moduleid == Constants.Acc_Credit_Note_ModuleId) {
            Detailfilter_params.add(creditNoteTaxEntry.getID());
        } else if (moduleid == Constants.Acc_Debit_Note_ModuleId) {
            Detailfilter_params.add(debitNoteTaxEntry.getID());
        } else {
            Detailfilter_params.add(journalEntryDetail.getID());
        }
        invDetailRequestParams.put("filter_names", Detailfilter_names);
        invDetailRequestParams.put("filter_params", Detailfilter_params);
        String description = "";
        KwlReturnObject idcustresult = accGoodsReceiptDAOObj.getGoodsReceiptCustomData(invDetailRequestParams);
        if (idcustresult.getEntityList().size() > 0) {
            AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustresult.getEntityList().get(0);
            AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
            JSONObject params = new JSONObject();
            boolean isExport = true;
            params.put("isExport", isExport);
            params.put("key", key);
            if (map.containsKey("browsertz") && !StringUtil.isNullOrEmpty((String)map.get("browsertz"))) {
                params.put("browsertz",map.get("browsertz"));
            }
            fieldDataManagercntrl.getLineLevelCustomDataWithKey(variableMap, customFieldMap, customDateFieldMap, jSONObject, params);
        }
    }
    /**
     *
     * @param jSONObject
     * @param map
     * @throws ServiceException
     * @throws JSONException
     * @Description : Return Array for Custom Column Global data in report
     */
    public void putGlobalCustomDetails(JSONObject jSONObject, Map<String, Object> map) throws ServiceException, JSONException {

        String companyId = "";
        String jeId = "";
        int moduleid = 0;
        boolean isExpense = false;
        GoodsReceiptDetail goodsReceiptDetail = null;
        ExpenseGRDetail expenseGRDetail = null;
        InvoiceDetail invoiceDetail = null;
        JournalEntryDetail journalEntryDetail = null;
        if (map.containsKey("companyId")) {
            companyId = map.get("companyId").toString();
        }
        if (map.containsKey("moduleId")) {
            moduleid = Integer.parseInt(map.get("moduleId").toString());
        }
        if (map.containsKey("jeId")) {
            jeId = map.get("jeId").toString();
        }
        // ## Get Custom Field Data 
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyId, moduleid));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
        Map<String, Object> variableMap = new HashMap<String, Object>();

        KwlReturnObject custumObjresult = null;
        custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jeId);
        replaceFieldMap = new HashMap<String, String>();
        if (custumObjresult != null && custumObjresult.getEntityList().size() > 0) {
            AccJECustomData jeDetailCustom = (AccJECustomData) custumObjresult.getEntityList().get(0);
            if (jeDetailCustom != null) {
                AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                JSONObject params = new JSONObject();
                params.put(Constants.companyKey, companyId);
                params.put("isExport", true);
                fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, jSONObject, params);
            }
        }
    }
    
 @Override   
    public double[] calculateOpeningAndClosingStock(JSONObject paramJobj, CompanyAccountPreferences pref, ExtraCompanyPreferences extrapref, String companyid, Date startDate, Date endDate, MutableDouble[] valuationObj, Map<String, Object> advSearchAttributes, Map<String, Map> stockDateMap) {
        double[] stock = {0, 0, 0, 0, 0, 0, 0, 0};
        double invOpeBal = 0, openInvOpeBal = 0, endInvOpeBal = 0, invCloseBal = 0, assemblyValuation = 0, openInvCloseBal = 0, openassemblyValuation = 0, endInvCloseBal = 0;
        Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();    //Vivek P.
        try {
//            if (extrapref == null) {
//                KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), paramJobj.getString(Constants.companyKey));
//                if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
//                    extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
//                }
//            }
            String Searchjson = paramJobj.optString("searchJson",null) != null ? paramJobj.optString("searchJson") : "";
            if (paramJobj.optString("DimensionBasedComparisionReport",null) != null && paramJobj.optString("DimensionBasedComparisionReport").equals("DimensionBasedComparisionReport")) {
                Searchjson = paramJobj.optString("DimensionBasedSearchJson");
            }
            boolean excludePreviousYear = false;
            boolean isForTradingAndProfitLoss = false;
            if ((paramJobj.optString("isForTradingAndProfitLoss",null) != null)) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(paramJobj.optString("isForTradingAndProfitLoss"));
            }
            Date start = null;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("excludePreviousYear",null))) {
                excludePreviousYear = Boolean.parseBoolean(paramJobj.optString("excludePreviousYear"));
            }
            if (excludePreviousYear) {
//                start = getDateForExcludePreviousYearBalanceFilter(request, startDate);
                start = getDateForExcludePreviousYearBalanceFilter(paramJobj, startDate);
            }
            Calendar calendar = Calendar.getInstance();
            if (startDate != null) {
                calendar.setTime(startDate);
            } else {
                calendar.setTime(endDate);
            }
            HashMap<String, Object> requestParam = new HashMap<String, Object>();
            requestParam.put("searchJson", Searchjson);
            requestParam.put(Constants.companyKey, companyid);
            requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
            boolean periodView = paramJobj.optString("periodView",null) != null ? Boolean.parseBoolean(paramJobj.optString("periodView")) : false;
            requestParam.put(Constants.REQ_startdate, paramJobj.optString("stdate"));
            requestParam.put(Constants.REQ_enddate, paramJobj.optString("enddate"));
            requestParam.put(Constants.Filter_Criteria, paramJobj.optString("filterConjuctionCriteria"));
            double[] valuation = {0, 0, 0, 0, 0, 0};
            DateFormat sqlDF = new SimpleDateFormat("yyyy-MM-dd");
            String startTemp = sqlDF.format(authHandler.getDateOnlyFormat().parse((String) requestParam.get(Constants.REQ_startdate)));
            String endTemp = sqlDF.format(authHandler.getDateOnlyFormat().parse((String) requestParam.get(Constants.REQ_enddate)));
            if(stockDateMap!= null && stockDateMap.containsKey(startTemp+"-"+endTemp)){
                valuation = (double[]) stockDateMap.get(startTemp+"-"+endTemp).get("valuation");
            }else{
                valuation = AccProductService.getInventoryValuationDataForFinancialReports(new HashMap<String, Object>(requestParam));
            }
            if (isForTradingAndProfitLoss) {
                openInvOpeBal = valuation[0];
            }
//            valuationObj = new MutableDouble[9];
            if (valuationObj != null) {
                for (int i = 0; i < valuation.length; i++) {
                    valuationObj[i] = new MutableDouble(valuation[i]);
                }
            }
            String name = null;//Only Profit and Loss Account
            Account openingStock = null;
            double openingstockaccountbal = 0;
            if (!StringUtil.isNullOrEmpty(name)) {
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                if (!StringUtil.isNullOrEmpty(name)) {
                    filter_names.add("ID");
                    filter_params.add(name);
                }
                requestParams.put("filter_names", filter_names);
                requestParams.put("filter_params", filter_params);
                KwlReturnObject venresult = accAccountDAOobj.getAccount(requestParams);
                if (!venresult.getEntityList().isEmpty()) {
                    openingStock = (Account) venresult.getEntityList().get(0);
                    KwlReturnObject closingAccountBalanceResult = accJournalEntryobj.getClosingAccountBalance(openingStock.getID(), companyid, (calendar.get(Calendar.YEAR) - 1));
                    List closingAccountBalanceList = closingAccountBalanceResult.getEntityList();
                    if (!closingAccountBalanceList.isEmpty()) {
                        ClosingAccountBalance closingAccountBalance = (ClosingAccountBalance) closingAccountBalanceList.get(0);
                        openInvOpeBal += closingAccountBalance.getAmount();
                    }
                    paramJobj.put("isPeriod", true);
//                    openingstockaccountbal += getAccountBalanceWithOutClosing(request, openingStock.getID(), startDate, endDate);
                    openingstockaccountbal += getAccountBalanceWithOutClosing(paramJobj, openingStock.getID(), startDate, endDate, advSearchAttributes);
                    invOpeBal = invOpeBal + openingstockaccountbal;
                    paramJobj.put("isPeriod", false);
//                    openInvOpeBal = openInvOpeBal + (getAccountBalanceWithOutClosing(request, openingStock.getID(), new Date(1970), openBalEndDate));
                    openInvOpeBal = openInvOpeBal + (getAccountBalanceWithOutClosing(paramJobj, openingStock.getID(), new Date(1970), openBalEndDate, advSearchAttributes));
                }
            }
            endInvOpeBal = openInvOpeBal + invOpeBal;
            stock[0] = openInvOpeBal;
            stock[1] = invOpeBal;
            stock[2] = endInvOpeBal;
            requestParam.put("searchJson", Searchjson);
            requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
            invCloseBal = valuation[4];
            openInvCloseBal = valuation[3];
            assemblyValuation = valuation[7];
            openassemblyValuation = valuation[6];
            String ClosingStock = null;
            Account stockInHand = null;
            double closingstockaccountbal = 0;
            if (!StringUtil.isNullOrEmpty(ClosingStock)) {
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                if (!StringUtil.isNullOrEmpty(ClosingStock)) {
                    filter_names.add("ID");
                    filter_params.add(ClosingStock);
                }
                requestParams.put("filter_names", filter_names);
                requestParams.put("filter_params", filter_params);
                KwlReturnObject venresult = accAccountDAOobj.getAccount(requestParams);
                if (!venresult.getEntityList().isEmpty()) {
                    stockInHand = (Account) venresult.getEntityList().get(0);
                    KwlReturnObject closingAccountBalanceResult = accJournalEntryobj.getClosingAccountBalance(stockInHand.getID(), companyid, (calendar.get(Calendar.YEAR) - 1));
                    List closingAccountBalanceList = closingAccountBalanceResult.getEntityList();
                    if (!closingAccountBalanceList.isEmpty()) {
                        ClosingAccountBalance closingAccountBalance = (ClosingAccountBalance) closingAccountBalanceList.get(0);
                        openInvCloseBal += closingAccountBalance.getAmount();
                    }
                    paramJobj.put("isPeriod", true);
//                    closingstockaccountbal += getAccountBalanceWithOutClosing(request, stockInHand.getID(), startDate, endDate);
                    closingstockaccountbal += getAccountBalanceWithOutClosing(paramJobj, stockInHand.getID(), startDate, endDate,advSearchAttributes);
                    invCloseBal = invCloseBal + closingstockaccountbal;
                    paramJobj.put("isPeriod", false);
//                    openInvCloseBal = openInvCloseBal + (getAccountBalanceWithOutClosing(request, stockInHand.getID(), (excludePreviousYear ? start : new Date(1970)), openBalEndDate));
                    openInvCloseBal = openInvCloseBal + (getAccountBalanceWithOutClosing(paramJobj, stockInHand.getID(), (excludePreviousYear ? start : new Date(1970)), openBalEndDate,advSearchAttributes));
                }
            }
//            endInvCloseBal = authHandler.round(openInvCloseBal, companyid) + authHandler.round(invCloseBal, companyid); //ERP-20519- one cent difference for closing stock
             endInvCloseBal = authHandler.round(openInvCloseBal+invCloseBal,companyid); //ERP-20519- one cent difference for closing stock
            stock[3] = openInvCloseBal;
            stock[4] = invCloseBal;
            stock[5] = endInvCloseBal;
            stock[6] = openassemblyValuation;
            stock[7] = assemblyValuation;
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return stock;
    }
    
    /**
     * This method is used to get the JSONArray for cost and selling price
     * report.
     *
     * @param list List of InvoiceDetail IDS whose delivery order has been
     * created.
     * @param requestParams Contains request parameters.
     * @param valuationMap Contains valuation details for the delivery order.
     * @return JSONArray
     */
    @Override
    public JSONArray getDataForCostAndSellingPriceReport(List list, JSONObject requestParams, Map<String, PriceValuationStack.Batch> valuationMap) {
        JSONArray dataArr = new JSONArray();
        try {
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            HashMap globalParams = new HashMap();
            String companyid = requestParams.optString("companyid");
            globalParams.put(Constants.userdf, requestParams.get(Constants.userdf));
            globalParams.put(Constants.df, df);
            globalParams.put(Constants.companyKey, requestParams.get(Constants.companyKey));
            globalParams.put(Constants.globalCurrencyKey, requestParams.get(Constants.globalCurrencyKey));
            if (list != null & !list.isEmpty()) {
                for (Object object : list) {
                    Object[] objArr = (Object[]) object;
                    String invoiceDetailID = (String) objArr[0];
                    String dodId = (String) objArr[1];
                    String doNumber = (String) objArr[2];
                    String poNumber = null;
                    Date poOrderDate = null;
                    String vendorID = null;
                    KwlReturnObject invoiceDetailObj = accountingHandlerDAOobj.getObject(InvoiceDetail.class.getName(), invoiceDetailID);
                    InvoiceDetail invoiceDetail = (InvoiceDetail) invoiceDetailObj.getEntityList().get(0);
                    KwlReturnObject doDetailObject = accountingHandlerDAOobj.getObject(DeliveryOrderDetail.class.getName(), dodId);
                    DeliveryOrderDetail dod = (DeliveryOrderDetail) doDetailObject.getEntityList().get(0);
                    if (invoiceDetail != null && dod != null) {
                        PriceValuationStack.Batch batch = (valuationMap.containsKey(dodId) && valuationMap.get(dodId) != null) ? valuationMap.get(dodId) : null;
                        Inventory inventory = invoiceDetail.getInventory() ;
                        Invoice invoice = invoiceDetail.getInvoice();
                        Product product = inventory.getProduct();
                        if (batch != null && batch.getInTransactionQtyAmountMap() != null) {
                            Map<String, List> inTransactionQtyAmountMap = batch.getInTransactionQtyAmountMap();
                            double remainingQty = batch.getQuantity() * (-1);
                            for (Map.Entry<String, List> entry : inTransactionQtyAmountMap.entrySet()) {
                                String groDetailID = entry.getKey();
                                List qtyPriceList = entry.getValue();
                                JSONObject json = new JSONObject();
                                json.put("invoiceid", invoice.getID());
                                json.put("productid", product != null ? product.getID() : "");
                                json.put("productname", (product != null && !StringUtil.isNullOrEmpty(product.getName())) ? product.getName() : "");
                                json.put("desc", (product != null && !StringUtil.isNullOrEmpty(product.getDescription())) ? product.getDescription() : "");
                                json.put("invoiceno", invoice != null ? invoice.getInvoiceNumber() : "");
//                                json.put("date", (invoice.getJournalEntry() != null && invoice.getJournalEntry().getEntryDate() != null) ? df.format(invoice.getJournalEntry().getEntryDate()) : "");
                                json.put("date", invoice.getCreationDate() != null ? df.format(invoice.getCreationDate()) : "");
                                json.put("customername", (invoice.getCustomer() != null && !StringUtil.isNullOrEmpty(invoice.getCustomer().getName())) ? invoice.getCustomer().getName() : "");
                                remainingQty -= ((Double) qtyPriceList.get(0));
                                json.put("quantity", ((Double) qtyPriceList.get(0)));
//                                double unitprice = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, (invoiceDetail.getRate()), invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0);
                                double unitprice = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, (invoiceDetail.getRate()), invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0);
                                json.put("unitprice", authHandler.roundUnitPrice(unitprice, companyid));
                                double amountsales = ((Double) qtyPriceList.get(0)) * invoiceDetail.getRate();
//                                double amountsalesbase = authHandler.round((Double) accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, amountsales, invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0), companyid);
                                double amountsalesbase = authHandler.round((Double) accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, amountsales, invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0), companyid);
                                double amountcost= authHandler.round((Double) qtyPriceList.get(2), companyid);
                                double profitMargin = amountsalesbase - amountcost;
                                json.put("amountsales", authHandler.formattedAmount(amountsalesbase, companyid));
                                json.put("amountcost", authHandler.formattedAmount(amountcost, companyid));
                                json.put("profitmargin", authHandler.formattedAmount(profitMargin, companyid));
                                if(amountcost == 0 && profitMargin != 0){// Infinity case
                                    json.put("percentageprofitmargin", "-");
                                } else{
                                    json.put("percentageprofitmargin", authHandler.round((profitMargin / amountcost) * 100, companyid));
                                }
                                json.put("costprice", authHandler.formattedAmount((Double) qtyPriceList.get(1), companyid));
                                json.put("donumber", StringUtil.isNullOrEmpty(doNumber) ? "" : doNumber);
                                String uom = dod.getUom() != null ? dod.getUom().getNameEmptyforNA() : dod.getProduct().getUnitOfMeasure() == null ? "" : dod.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                                json.put("unitname", uom);
                                uom = StringUtil.isNullOrEmpty(uom) ? "" : " (" + uom + ")";
                                json.put("quantitywithuom", (authHandler.formattedQuantity((Double) qtyPriceList.get(0), companyid) + " " + uom));
                                KwlReturnObject poInformationResult = accGoodsReceiptDAOObj.getPurchaseOrderInfoUsingGROD(groDetailID, requestParams.getString(Constants.companyKey));
                                if (poInformationResult != null && poInformationResult.getEntityList() != null && !poInformationResult.getEntityList().isEmpty()) {
                                    Object[] poInfoObject = (Object[]) poInformationResult.getEntityList().get(0);
                                    if (poInfoObject != null && poInfoObject.length > 0) {
                                        if (poInfoObject[0] != null) {
                                            poNumber = (String) poInfoObject[0];
                                        }
                                        if (poInfoObject[1] != null) {
                                            poOrderDate = (Date) poInfoObject[1];
                                        }
                                        if (poInfoObject[2] != null) {
                                            vendorID = (String) poInfoObject[2];
                                        }
                                        json.put("ponumber", StringUtil.isNullOrEmpty(poNumber) ? "" : poNumber);
                                        json.put("podate", poOrderDate == null ? "" : df.format(poOrderDate));
                                        if (!StringUtil.isNullOrEmpty(vendorID)) {
                                            KwlReturnObject vendorObj = accountingHandlerDAOobj.getObject(Vendor.class.getName(), vendorID);
                                            Vendor vendor = (Vendor) vendorObj.getEntityList().get(0);
                                            if (vendor != null) {
                                                json.put("vendorname", !StringUtil.isNullOrEmpty(vendor.getName()) ? vendor.getName() : "");
                                            }
                                        }
                                    }
                                }
                                dataArr.put(json);
                            }
                            if (remainingQty > 0) {
                                JSONObject json = new JSONObject();
                                json.put("invoiceid", invoice.getID());
                                json.put("productid", product != null ? product.getID() : "");
                                json.put("productname", (product != null && !StringUtil.isNullOrEmpty(product.getName())) ? product.getName() : "");
                                json.put("desc", (product != null && !StringUtil.isNullOrEmpty(product.getDescription())) ? product.getDescription() : "");
                                json.put("invoiceno", invoice != null ? invoice.getInvoiceNumber() : "");
//                                json.put("date", (invoice.getJournalEntry() != null && invoice.getJournalEntry().getEntryDate() != null) ? df.format(invoice.getJournalEntry().getEntryDate()) : "");
                                json.put("date", invoice.getCreationDate() != null ? df.format(invoice.getCreationDate()) : "");
                                json.put("customername", (invoice.getCustomer() != null && !StringUtil.isNullOrEmpty(invoice.getCustomer().getName())) ? invoice.getCustomer().getName() : "");
                                json.put("quantity", remainingQty);
//                                double unitprice = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, (invoiceDetail.getRate()), invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0);
                                double unitprice = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, (invoiceDetail.getRate()), invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0);
                                json.put("unitprice", authHandler.roundUnitPrice(unitprice, companyid));
                                double amountsales = remainingQty * invoiceDetail.getRate();
//                                double amountsalesbase = authHandler.round((Double) accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, amountsales, invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0), companyid);
                                double amountsalesbase = authHandler.round((Double) accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, amountsales, invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0), companyid);
                                json.put("amountsales", authHandler.formattedAmount(amountsalesbase, companyid));
                                json.put("amountcost", authHandler.formattedAmount((0.0), companyid));
                                json.put("profitmargin", authHandler.formattedAmount(amountsalesbase, companyid));
                                json.put("percentageprofitmargin", "-");// infinity case putting -
                                json.put("costprice", authHandler.formattedAmount((0.0), companyid));
                                json.put("donumber", StringUtil.isNullOrEmpty(doNumber) ? "" : doNumber);
                                String uom = dod.getUom() != null ? dod.getUom().getNameEmptyforNA() : dod.getProduct().getUnitOfMeasure() == null ? "" : dod.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                                json.put("unitname", uom);
                                uom = StringUtil.isNullOrEmpty(uom) ? "" : " (" + uom + ")";
                                json.put("quantitywithuom", (authHandler.formattedQuantity(remainingQty, companyid) + " " + uom));
                                dataArr.put(json);
                            }
                        } else if (batch != null) {
                            JSONObject json = new JSONObject();
                            json.put("invoiceid", invoice.getID());
                            json.put("productid", product != null ? product.getID() : "");
                            json.put("productname", (product != null && !StringUtil.isNullOrEmpty(product.getName())) ? product.getName() : "");
                            json.put("desc", (product != null && !StringUtil.isNullOrEmpty(product.getDescription())) ? product.getDescription() : "");
                            json.put("invoiceno", invoice != null ? invoice.getInvoiceNumber() : "");
//                            json.put("date", (invoice.getJournalEntry() != null && invoice.getJournalEntry().getEntryDate() != null) ? df.format(invoice.getJournalEntry().getEntryDate()) : "");
                            json.put("date", invoice.getCreationDate() != null ? df.format(invoice.getCreationDate()) : "");
                            json.put("customername", (invoice.getCustomer() != null && !StringUtil.isNullOrEmpty(invoice.getCustomer().getName())) ? invoice.getCustomer().getName() : "");
                            json.put("quantity", (batch.getQuantity() * (-1)));
//                            double unitprice = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, (invoiceDetail.getRate()), invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0);
                            double unitprice = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, (invoiceDetail.getRate()), invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0);
                            json.put("unitprice", authHandler.roundUnitPrice(unitprice, companyid));
                            double amountsales = (batch.getQuantity() * (-1)) * invoiceDetail.getRate();
//                            double amountsalesbase = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, amountsales, invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0);
                            double amountsalesbase = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, amountsales, invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0);
                            double amountcost = authHandler.round(batch.getAmount() * (-1), companyid);
                            double profitMargin = amountsalesbase - amountcost;
                            json.put("amountsales", authHandler.formattedAmount(amountsalesbase, companyid));
                            json.put("amountcost", authHandler.formattedAmount(amountcost, companyid));
                            json.put("profitmargin", authHandler.formattedAmount(profitMargin, companyid));
                            if (amountcost == 0 && profitMargin != 0) {// Infinity case
                                json.put("percentageprofitmargin", "-");
                            } else {
                                json.put("percentageprofitmargin", authHandler.round((profitMargin / amountcost) * 100 , companyid));
                            }
                            json.put("costprice", authHandler.formattedAmount(batch.getPrice(), companyid));
                            json.put("donumber", StringUtil.isNullOrEmpty(doNumber) ? "" : doNumber);
                            String uom = dod.getUom() != null ? dod.getUom().getNameEmptyforNA() : dod.getProduct().getUnitOfMeasure() == null ? "" : dod.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                            json.put("unitname", uom);
                            uom = StringUtil.isNullOrEmpty(uom) ? "" : " (" + uom + ")";
                            json.put("quantitywithuom", (authHandler.formattedQuantity((batch.getQuantity() * (-1)), companyid) + " " + uom));
                            dataArr.put(json);
                        }
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage());
        }
        return dataArr;
    }
        @Override 
    public JSONObject getServiceTaxInputCreditSummaryReportJSON(JSONObject dataMap, boolean isExport){
        JSONObject finaljobj = new JSONObject();
        JSONArray dataArr = new JSONArray();

        try {
            DateFormat df = null;
            DateFormat userdf = null;
            String start = "", limit = "";
            int type= 0;
            Locale locale = null;
            DecimalFormat deciformat = null;
            double assesblevalue = 0.0;
            String companyid = dataMap.optString("companyid");
            HashMap<String, Object> requestParams = new HashMap();
            if(dataMap.has(Constants.companyKey) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.companyKey))){
                requestParams.put(Constants.companyKey, dataMap.getString(Constants.companyKey));
            }
            if(dataMap.has(Constants.REQ_startdate) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.REQ_startdate))){
                requestParams.put(Constants.REQ_startdate, dataMap.getString(Constants.REQ_startdate));
            }
            if(dataMap.has(Constants.REQ_enddate) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.REQ_enddate))){
                requestParams.put(Constants.REQ_enddate, dataMap.getString(Constants.REQ_enddate));
            }
            if(dataMap.has("basisOfCalculation") && !StringUtil.isNullOrEmpty(dataMap.getString("basisOfCalculation"))){
                requestParams.put("basisOfCalculation", dataMap.getString("basisOfCalculation"));
            }
            if(dataMap.has("natureOfTransaction") && !StringUtil.isNullOrEmpty(dataMap.getString("natureOfTransaction"))){// Import on service check  (For filter - vendor IEC code not empty)
                requestParams.put("natureOfTransaction", dataMap.getString("natureOfTransaction"));
            }
            if(dataMap.has(Constants.start) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.start))){
                start = dataMap.getString(Constants.start);
            }
            if(dataMap.has("limit") && !StringUtil.isNullOrEmpty(dataMap.getString("limit"))){
                limit = dataMap.getString("limit");
            }
            if(dataMap.has("dateformat") && !StringUtil.isNullOrEmpty(dataMap.getString("dateformat"))){
                df = (DateFormat) dataMap.get("dateformat");
                requestParams.put(Constants.df, df);
                requestParams.put("dateformat", df);
            }
            if(dataMap.has("userdateformat") && !StringUtil.isNullOrEmpty(dataMap.getString("userdateformat"))){
                userdf = (DateFormat) dataMap.get("userdateformat");
                requestParams.put("userdateformat", userdf);
            }
            if(dataMap.has("type") && !StringUtil.isNullOrEmpty(dataMap.getString("type"))){
                type = Integer.parseInt(dataMap.get("type").toString());
            }
            if(dataMap.has("locale") && !StringUtil.isNullOrEmpty(dataMap.getString("locale"))){
                locale = (Locale) dataMap.get("locale");
            }
            KwlReturnObject kwl = null;
            List invoiceList = new ArrayList();
            if(type == Constants.INPUT_CREDIT_SUMMARY_REPORT){
                kwl = accGoodsReceiptDAOObj.getDataSTInputCreditSummaryForReport(requestParams);
            }else if(type == Constants.BILL_DATE_WISE_REPORT){
                kwl = accInvoiceDAOobj.getDataSTBillDateWiseReport(requestParams);
            }else if(type == Constants.REALISATION_DATE_WISE_REPORT){
                kwl = accReceiptDao.getDataSTRealisationDateWiseReport(requestParams);
            }
            if(kwl != null){
                invoiceList = kwl.getEntityList();
                Iterator itr = invoiceList.iterator();

                while (itr.hasNext()) {
                    Object[] dataObject = (Object[]) itr.next();

                    Date transactionDate = (Date) (dataObject[1] != null?dataObject[1]:new Date());
                    String transactionNumber = (String) (dataObject[2] != null?dataObject[2]:"");
                    String partyname = (String) (dataObject[3] != null?dataObject[3]:"");
                    String category = (String) (dataObject[4] != null?dataObject[4]:"Taxable Service");
                    double totalamount = (double) (dataObject[5] != null?dataObject[5]:0.0);
                    double totaltax = (double) ((dataObject[6] != null)?dataObject[6]:0.0);
    //                double paidamount = (double) ((dataObject[7] != null)?dataObject[7]:0.0);
    //                double inputcredit = (double) ((dataObject[8] != null) ?dataObject[8]:0.0);
    //                double balancecredit = (double) (( dataObject[9] != null )?dataObject[9]:0.0);

                    // paidamount,inputcredit Replicated --> When Service Tax Computation Report will be generated then this will be alterd

                    double paidamount = totalamount;
                    double inputcredit = totaltax;
                    double balancecredit = 0.0;
                    double receiptamount = 0.0;
                    
                    double realisedamount = totalamount;
                    double totaltaxpayable = totaltax;
                    
                    String receiptNumber = "";

                    if(type == Constants.REALISATION_DATE_WISE_REPORT){
                        realisedamount = 0.0;
                        assesblevalue = (double) (( dataObject[10] != null )?dataObject[10]:0.0);
                        receiptNumber = (String) (dataObject[11] != null?dataObject[11]:"");
                        realisedamount = (double) (( dataObject[12] != null )?dataObject[12]:0.0);
                        category = "Event Management Service";
                    }
                    
         // To Show values from (4.843633088E7) scientific natation to Normal Decimal Format(48436330.88)having specified Constants.AMOUNT_DIGIT_AFTER_DECIMAL.
                    if(locale != null){
                        deciformat = new DecimalFormat("0", DecimalFormatSymbols.getInstance(locale));
                        deciformat.setMaximumFractionDigits(Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                    }
                    String date = userdf!=null ?userdf.format(transactionDate):transactionDate.toString();
                    JSONObject reportJson = new JSONObject();
                    reportJson.put("date", date);
                    reportJson.put("refno", transactionNumber);
                    reportJson.put("partyname", partyname);
                    reportJson.put("category", category);
                    reportJson.put("billamount", authHandler.formattedAmount(totalamount, companyid));
                    reportJson.put("totaltax", authHandler.formattedAmount(totaltax, companyid));
                    reportJson.put("paidamount",authHandler.formattedAmount(paidamount, companyid) );
                    reportJson.put("inputcreditutilized",authHandler.formattedAmount(inputcredit, companyid) );
                    reportJson.put("balanceinputcredit",authHandler.formattedAmount(balancecredit, companyid) );
                    reportJson.put("realisedamount",authHandler.formattedAmount(realisedamount, companyid) );
                    reportJson.put("totaltaxpayable",authHandler.formattedAmount(totaltaxpayable, companyid) );
                    reportJson.put("realisedassasableamount",authHandler.formattedAmount(assesblevalue, companyid) );
                    reportJson.put("reftype","Receipt");
                    reportJson.put("receiptno",receiptNumber);

                    dataArr.put(reportJson);
                }
            }
            int totalCount = dataArr.length();
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit) && !isExport) {
                dataArr = StringUtil.getPagedJSON(dataArr, Integer.parseInt(start), Integer.parseInt(limit));
            }
            finaljobj.put(Constants.RES_data,dataArr);
            finaljobj.put("totalcount",totalCount);
            finaljobj.put("count",totalCount);
            finaljobj.put(Constants.RES_success,true);
        }catch (Exception ex) {
            Logger.getLogger(accReportsCombineController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return finaljobj;
    }
        
    @Override 
    public JSONObject getForm201CExcelJSON(HashMap dataMap, boolean isExport){
        JSONObject finaljobj = new JSONObject();
        JSONArray dataArr = new JSONArray();

        try {
            DateFormat df = null;
            String start = "", limit = "", companyid= "";
            JSONArray DataJArr = new JSONArray();
            String  startdateF = "", enddateF = "";
            
            HashMap<String, Object> requestParams = new HashMap();
            if(dataMap.containsKey(Constants.companyKey) && dataMap.get(Constants.companyKey)!=null && !StringUtil.isNullOrEmpty(dataMap.get(Constants.companyKey).toString())){
                companyid = dataMap.get(Constants.companyKey).toString();
                requestParams.put(Constants.companyKey, companyid);
            }
            if(dataMap.containsKey(Constants.REQ_startdate) && dataMap.get(Constants.REQ_startdate) != null && !StringUtil.isNullOrEmpty(dataMap.get(Constants.REQ_startdate).toString())){
                requestParams.put(Constants.REQ_startdate, dataMap.get(Constants.REQ_startdate));
            }
            if(dataMap.containsKey(Constants.REQ_enddate) && dataMap.get(Constants.REQ_enddate)!=null && !StringUtil.isNullOrEmpty(dataMap.get(Constants.REQ_enddate).toString())){
                requestParams.put(Constants.REQ_enddate, dataMap.get(Constants.REQ_enddate));
            }
            if(dataMap.containsKey(Constants.start) && dataMap.get(Constants.start)!= null && !StringUtil.isNullOrEmpty(dataMap.get(Constants.start).toString())){
                start = dataMap.get(Constants.start).toString();
            }
            if(dataMap.containsKey("limit") && dataMap.get("limit") != null && !StringUtil.isNullOrEmpty(dataMap.get("limit").toString())){
                limit = dataMap.get("limit").toString();
            }
            if(dataMap.containsKey("startdate") && dataMap.get("startdate")!= null && !StringUtil.isNullOrEmpty(dataMap.get("startdate").toString())){
                startdateF = dataMap.get("startdate").toString();
            }
            if(dataMap.containsKey("enddate") && dataMap.get("enddate") != null && !StringUtil.isNullOrEmpty(dataMap.get("enddate").toString())){
                enddateF = dataMap.get("enddate").toString();
            }
            if(dataMap.containsKey("dateformat") && dataMap.get("dateformat") != null && !StringUtil.isNullOrEmpty(dataMap.get("dateformat").toString())){
                df = (DateFormat) dataMap.get("dateformat");
                requestParams.put(Constants.df, df);
                requestParams.put("dateformat", df);
            }
            
            
            KwlReturnObject preferences = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) preferences.getEntityList().get(0);

            KwlReturnObject comppreferences = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccPreferences = (CompanyAccountPreferences) comppreferences.getEntityList().get(0);

            KwlReturnObject compobj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company companyObj = (Company) compobj.getEntityList().get(0);

            int countryid = 0;
            if(companyObj != null && companyObj.getCountry()!= null && !StringUtil.isNullOrEmpty(companyObj.getCountry().getID())){
                countryid = Integer.parseInt(companyObj.getCountry().getID());
            }
            //////////////////////// Data for Form 201C ////////////////////////
            String regNo = extraCompanyPreferences.getVatNumber() != null ? extraCompanyPreferences.getVatNumber() : "";

            HashMap<String, Object> requestParamsProd = new HashMap<String, Object>();
            requestParamsProd.put(Constants.companyKey, companyid);
            requestParamsProd.put("stDate", df.parse(startdateF));
            requestParamsProd.put("endDate", df.parse(enddateF));
            requestParamsProd.put("isFromStockReport", true);
            requestParamsProd.put("isprovalReport", true);
            int i = 1;
            double stockInQty = 0, stockOutQty = 0, openingstockQty = 0, totalStockInQty = 0, totalStockOutQty = 0, totalOpeningstockQty = 0, closingBalance = 0;
            List<Store> storeList = storeService.getStores(companyObj, null, null);// Taken all stores including default
            Map<String, Object> tableMap = new HashMap<String, Object>();
            HashMap<String, Object> requestParamsProduct = new HashMap<String, Object>();
            requestParamsProduct.put(Constants.companyKey, companyid);
            requestParamsProduct.put("isStoreLocationEnable", true);
            requestParamsProduct.put("endingTaxPeriod", enddateF);
            requestParamsProduct.put("companyNameAndStyleOfBuss", companyObj.getCompanyName() + ", " + companyAccPreferences.getCompanyType().getName());
            requestParamsProduct.put("fromDate", startdateF);
            requestParamsProduct.put("toDate", enddateF);
            requestParamsProduct.put("companyName", companyObj.getCompanyName().toUpperCase());
            if (storeList.size() > 0) {
                for (Store tmpStore : storeList) {
                    requestParamsProduct.put("productStore", tmpStore.getId());
                    requestParamsProduct.put(Constants.PRODUCT_SEARCH_FLAG,extraCompanyPreferences.getProductSearchingFlag());
                    KwlReturnObject result = accProductObj.getProductsForCombo(requestParamsProduct);// Taken all products of perticular store
                    List<Product> productList = result.getEntityList();
                    i++;
                    for (Product productObj : productList) {
                        stockInQty = 0;
                        stockOutQty = 0;
                        openingstockQty = 0;
                        totalStockInQty = 0;
                        totalStockOutQty = 0;
                        totalOpeningstockQty = 0;
                        closingBalance = 0;
                        Date date = new Date();
                        try {
                            date = yyyyMMdd_HIPHON.parse(yyyyMMdd_HIPHON.format(date));
                        } catch (ParseException ex) {
                            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        double purchasePrice = stockService.getProductPurchasePrice(productObj, date);
                        requestParamsProd.put("productid", productObj.getID());
                        KwlReturnObject rObject = accProductObj.getStockInOutOpeningCalculation(requestParamsProd);
                        List<Object[]> stocklist = rObject.getEntityList();
                        for (Object[] stockrow : stocklist) {
                            stockInQty = Double.parseDouble(stockrow[0] == null ? "0" : stockrow[0].toString());
                            stockOutQty = Double.parseDouble(stockrow[1] == null ? "0" : stockrow[1].toString());
                            openingstockQty = Double.parseDouble(stockrow[2] == null ? "0" : stockrow[2].toString());
                        }
                        totalStockInQty += stockInQty;
                        totalStockOutQty += stockOutQty;
                        totalOpeningstockQty += openingstockQty;
                        if (totalOpeningstockQty == 0) {// If there is no initial entry for GR,DO,SR,PR
                            KwlReturnObject initialQty = accProductObj.getInitialQuantity(productObj.getID());
                            totalOpeningstockQty = (initialQty.getEntityList().get(0)!=null)?Double.parseDouble(initialQty.getEntityList().get(0).toString()):0;
                        }
                        closingBalance = ((totalOpeningstockQty + totalStockInQty) - totalStockOutQty);
                        tableMap = new HashMap<String, Object>();
                        tableMap.put("godown", StringUtil.isNullOrEmpty(tmpStore.getFullName()) ? "" : tmpStore.getFullName());
                        tableMap.put("comoName", productObj.getProductName());
                        tableMap.put("HSNCode", productObj.getHSCode());
                        tableMap.put("openingBal", totalOpeningstockQty + "");
                        tableMap.put("incomingINTax", totalStockInQty + "");
                        tableMap.put("outgoingINTax", totalStockOutQty + "");
                        tableMap.put("closingBal", closingBalance + "");
                        tableMap.put("valueOfClosingBal", (closingBalance>0)? (CustomDesignHandler.getAmountinCommaDecimal(((totalOpeningstockQty + totalStockInQty) == 0) ? (totalOpeningstockQty * purchasePrice) : (closingBalance * purchasePrice), 2,countryid) + ""): 0 +"");
                        dataArr.put(tableMap);
                    }
                }
            }
            
            finaljobj.put(Constants.RES_data,dataArr);
            finaljobj.put("summary",new JSONArray());
            finaljobj.put(Constants.RES_success,true);
        }catch (Exception ex) {
            Logger.getLogger(accReportsCombineController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return finaljobj;
    }
    
    @Override
    public JSONObject getTDSChallanControlReportJSON(JSONObject dataMap, boolean isExport) {
        JSONObject finaljobj = new JSONObject();
        JSONArray dataArr = new JSONArray();

        try {
            DateFormat df = null;
            DateFormat userdf = null;
            String start = "", limit = "", ExportType = "";
            int type = 0;
            double assesblevalue = 0.0;

            HashMap<String, Object> requestParams = new HashMap();
            if (dataMap.has(Constants.companyKey) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.companyKey))) {
                requestParams.put(Constants.companyKey, dataMap.getString(Constants.companyKey));
            }
            if (dataMap.has(Constants.REQ_startdate) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.REQ_startdate))) {
                requestParams.put(Constants.REQ_startdate, dataMap.getString(Constants.REQ_startdate));
            }
            if (dataMap.has(Constants.REQ_enddate) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.REQ_enddate))) {
                requestParams.put(Constants.REQ_enddate, dataMap.getString(Constants.REQ_enddate));
            }
            if (dataMap.has(Constants.start) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.start))) {
                start = dataMap.getString(Constants.start);
            }
            if (dataMap.has("limit") && !StringUtil.isNullOrEmpty(dataMap.getString("limit"))) {
                limit = dataMap.getString("limit");
            }
            if (dataMap.has("dateformat") && !StringUtil.isNullOrEmpty(dataMap.getString("dateformat"))) {
                df = (DateFormat) dataMap.get("dateformat");
                requestParams.put(Constants.df, df);
                requestParams.put("dateformat", df);
            }
            if (dataMap.has("userdateformat") && !StringUtil.isNullOrEmpty(dataMap.getString("userdateformat"))) {
                userdf = (DateFormat) dataMap.get("userdateformat");
                requestParams.put("userdateformat", userdf);
            }
            if (dataMap.has("type") && !StringUtil.isNullOrEmpty(dataMap.getString("type"))) {
                type = Integer.parseInt(dataMap.get("type").toString());
            }
            if (dataMap.has("ExportType") && !StringUtil.isNullOrEmpty(dataMap.getString("ExportType"))) {
                ExportType = dataMap.getString("ExportType");
            }
            KwlReturnObject kwl = null;
            List invoiceList = new ArrayList();
            kwl = accGoodsReceiptDAOObj.getDataTDSChallanControlReport(requestParams);
            if (kwl != null) {
                invoiceList = kwl.getEntityList();
                Iterator itr = invoiceList.iterator();

                while (itr.hasNext()) {
                    Object[] dataObject = (Object[]) itr.next();

                    Date transactionDate = (Date) (dataObject[0] != null ? dataObject[0] : new Date());
                    double amount = (double) (dataObject[1] != null ? dataObject[1] : 0.0);
                    String bankname = (String) (dataObject[2] != null ? dataObject[2] : "");
                    String bsrcode="";
                    if(dataObject[3] != null){
                        int bcode = (Integer) (dataObject[3] != null ? dataObject[3] : "");
                        bsrcode=bcode+"";
                    }
                    String natureofpayment = "";
                    String cinno = (String) (dataObject[4] != null ? dataObject[4] : "");
                    String account = (String) (dataObject[5] != null ? dataObject[5] : "");
                    String payment = (String) (dataObject[6] != null ? dataObject[6] : "");
                    
                    //-------Deductee type (Company/Non-Corporate )----------

                    HashMap<String, Object> hm = new HashMap();
                    String companyid = "";
                    if (dataMap.has(Constants.companyKey) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.companyKey))) {
                        companyid = dataMap.getString(Constants.companyKey);
                        hm.put(Constants.companyKey, companyid);
                    }
                    if (!StringUtil.isNullOrEmpty(account)) {
                        hm.put("account", account);
                    }
                    hm.put("payment",payment);
                    String deducteeType = accGoodsReceiptDAOObj.getDeducteeTypeForTDSChallanControlReport(hm);
                    
                    if(!StringUtil.isNullOrEmpty(payment)){
                        KwlReturnObject kwltds = accVendorDAOobj.getVendorForTDSPayment(payment,companyid);
                        List<String> vendor = kwltds.getEntityList();
                        if(vendor.size() > 0){
                            KwlReturnObject venresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), vendor.get(0));
                            Vendor vendorobj = (Vendor) venresult.getEntityList().get(0);
                            if(vendorobj!=null){
                                if(!StringUtil.isNullOrEmpty(vendorobj.getNatureOfPayment())){
                                    natureofpayment = vendorobj.getNatureOfPayment(); 
                                    KwlReturnObject NOPObj = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), natureofpayment);
                                    if (NOPObj != null) {
                                        MasterItem masteritem = (MasterItem) NOPObj.getEntityList().get(0);
                                        natureofpayment = masteritem.getValue();
                                    } else {
                                        natureofpayment = "";
                                    }
                                }
                                if(!StringUtil.isNullOrEmpty(vendorobj.getDeducteeCode())){
                                    deducteeType = vendorobj.getDeducteeCode(); 
                                    if(IndiaComplianceConstants.DEDUCTEE_CODE_COMPANY.equals(deducteeType)){
                                        deducteeType = IndiaComplianceConstants.DEDUCTEE_CODE_CORPORATE_STR;
                                    } else{
                                        deducteeType = IndiaComplianceConstants.DEDUCTEE_CODE_NONCORPORATE_STR;
                                    }
                                }
                            }
                        }
                    }
                    //------------------
                    int TDSPaymentType = IndiaComplianceConstants.NOTDSPAID;
                    if (!StringUtil.isNullOrEmpty(payment)) {
                        HashMap TDSPaymentParams = new HashMap();
                        TDSPaymentParams.put("companyID", companyid);
                        TDSPaymentParams.put("paymentID", payment);
                        TDSPaymentType = accVendorPaymentobj.getTDSPaymentType(TDSPaymentParams);
                        String nop = accVendorPaymentobj.getTDSPaymentNOP(TDSPaymentParams);
                        natureofpayment = !StringUtil.isNullOrEmpty(nop)?nop:natureofpayment;
                    }
                    String date = userdf != null ? userdf.format(transactionDate) : transactionDate.toString();
                    JSONObject reportJson = new JSONObject();
                    reportJson.put("date", date);
                    reportJson.put("natureofpayment", natureofpayment);
                    reportJson.put("deducteetype", deducteeType);
                    reportJson.put("bankname", bankname);
                    reportJson.put("bsrcode", bsrcode);
                    reportJson.put("cinno", cinno);
                    reportJson.put("amount", authHandler.round(amount, companyid));
                    reportJson.put("paymentid", payment);
                    reportJson.put("paymentInterestId",(TDSPaymentType == IndiaComplianceConstants.TDSINTERESTPAYMENT || TDSPaymentType == IndiaComplianceConstants.TDSANDTDSINTERESTPAYMENT) ? payment : "");
                    reportJson.put("TDSPaymentType",TDSPaymentType);
                    if (TDSPaymentType == IndiaComplianceConstants.TDSPAYMENT) {
                        reportJson.put("TDSPaymentTypeDesc", "TDS Payment");
                    } else if (TDSPaymentType == IndiaComplianceConstants.TDSINTERESTPAYMENT) {
                        reportJson.put("TDSPaymentTypeDesc", "TDS Interest Payment");
                    } else if (TDSPaymentType == IndiaComplianceConstants.TDSANDTDSINTERESTPAYMENT) {
                        reportJson.put("TDSPaymentTypeDesc", "TDS And Interest Payment");
                    }
                    dataArr.put(reportJson);
                }
            }
            int totalCount = dataArr.length();
            if (isExport && ExportType.equals("detailedXls")) {
                //To Export TDS Challan Control Report in detail.
                requestParams.put("reportid", Constants.NatureOfPaymentWiseReportID);
                requestParams.put("expanderStoreLoad", true);
                JSONArray tempArray = new JSONArray();
                for (int i = 0; i < dataArr.length(); i++) {
                    JSONObject rowjobj = new JSONObject();
                    rowjobj = dataArr.getJSONObject(i);
                    rowjobj.put("type", "");
                    tempArray.put(rowjobj);
                    if (!StringUtil.isNullOrEmpty(rowjobj.get("paymentid").toString()) || !StringUtil.isNullOrEmpty(rowjobj.get("paymentInterestId").toString())) {
                        requestParams.put("paymentid", (!StringUtil.isNullOrEmpty(rowjobj.get("paymentid").toString()) ? rowjobj.get("paymentid") : (!StringUtil.isNullOrEmpty(rowjobj.get("paymentInterestId").toString()) ? rowjobj.get("paymentInterestId") : "")));
                        JSONArray dataRowsArr = getNatureOfPaymentWiseReport(requestParams);
                        for (int j = 0; j < dataRowsArr.length(); j++) {
                            JSONObject tempjobj = new JSONObject();
                            tempjobj = dataRowsArr.getJSONObject(j);
                            tempArray.put(tempjobj);
                        }
                    }
                }
                dataArr = tempArray;
            }
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit) && !isExport) {
                dataArr = StringUtil.getPagedJSON(dataArr, Integer.parseInt(start), Integer.parseInt(limit));
            }
            finaljobj.put(Constants.RES_data, dataArr);
            finaljobj.put("totalcount", totalCount);
            finaljobj.put("count", totalCount);
            finaljobj.put(Constants.RES_success, true);
        } catch (Exception ex) {
            Logger.getLogger(accReportsCombineController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return finaljobj;
    }
    
    @Override
    public double getAccountBalance(JSONObject params, HashMap<String, Object> requestParams, String accountid, Date startDate, Date endDate) throws ServiceException {
        double amount = 0;
        try {
            String gcurrencyid = (String) requestParams.get(Constants.globalCurrencyKey);

            KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountid);
            Account account = (Account) accresult.getEntityList().get(0);

            int templatecode = (Integer) requestParams.get("templatecode");

            String costCenterId = (String) requestParams.get("costcenter");
            String selectedCurrencyIds = (String) requestParams.get("selectedCurrencyIds");
            boolean isCurrencyFlag = false;

            String accCurrency = account.getCurrency().getCurrencyID();
            if (!StringUtil.isNullOrEmpty(selectedCurrencyIds)) {
                String[] selectedCurrencyIdsArray = selectedCurrencyIds.split(",");
                for (String selectedCurrencyIdsObj : selectedCurrencyIdsArray) {
                    if (selectedCurrencyIdsObj.equals(accCurrency)) {
                        isCurrencyFlag = true;
                    }
                }
            }
            boolean isPeriod = !StringUtil.isNullOrEmpty(params.optString("isPeriod", null)) ? Boolean.parseBoolean(params.optString("isPeriod")) : false;
            if (!isPeriod) {
                if ((templatecode == -1) || (account.getTemplatepermcode() != null && account.getTemplatepermcode() != 0 && ((templatecode & account.getTemplatepermcode()) == templatecode))) {
                    if (StringUtil.isNullOrEmpty(costCenterId)) { //Don't consider opening balance for CostCenter
                        if (startDate != null && ((startDate.before(account.getCreationDate()) || startDate.equals(account.getCreationDate())) && endDate.after(account.getCreationDate()) || endDate.equals(account.getCreationDate()))) {
                            double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccountJson(params, account, false, null);
                            amount = accountOpeningBalanceInBase;//(Double) result.getEntityList().get(0);
                        }
                    }
                }
            }
            if (!isCurrencyFlag && !StringUtil.isNullOrEmpty(selectedCurrencyIds)) {
                amount = 0.0;
            }
            String Searchjson = "";

            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                if (requestParams.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = requestParams.get("searchJson").toString();
            }
            if (requestParams.containsKey("generalLedgerFlag") && requestParams.get("generalLedgerFlag") != null) {
                boolean generalLedgerFlag = Boolean.parseBoolean(requestParams.get("generalLedgerFlag").toString());
                if (generalLedgerFlag && !StringUtil.isNullOrEmpty(Searchjson)) {
                    /*
                     * code in this if is done for:- 1)do not include opening
                     * balance of account 2) do not include opening trasactions
                     * amount of customer/vendor mapped with this current
                     * account when advanced search is performed on dimension
                     * 3)when advanced search is performed on dimension then
                     * documents are considered for calculation are - saved with
                     * that dimension.
                     */
                    amount = 0;
                }
            }
            if (StringUtil.isNullOrEmpty(Searchjson) && account.getCompany().isOptimizedflag() && (templatecode == -1)) {
                KwlReturnObject abresult = accJournalEntryobj.getAccountBalance_optimized(accountid, startDate, endDate, costCenterId);
                List list = abresult.getEntityList();
                if (list.size() > 0 && list.get(0) != null) {
                    amount += (Double) list.get(0);
                }
            } else {
                KwlReturnObject abresult = accJournalEntryobj.getAccountBalance(requestParams, accountid, startDate, endDate, costCenterId, filterConjuctionCriteria, Searchjson);
                List list = abresult.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    Object[] row = (Object[]) itr.next();
                    JournalEntryDetail jed = (JournalEntryDetail) row[1];
                    if ((templatecode == -1) || (jed.getJournalEntry().getTemplatepermcode() != null && jed.getJournalEntry().getTemplatepermcode() != 0 && ((templatecode & jed.getJournalEntry().getTemplatepermcode()) == templatecode))) {
                        String fromcurrencyid = (jed.getJournalEntry().getCurrency() == null ? gcurrencyid : jed.getJournalEntry().getCurrency().getCurrencyID());

                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ((Double) row[0]).doubleValue(), fromcurrencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                        amount += (Double) crresult.getEntityList().get(0);
                    }
                }
                if (itr.hasNext()) {
                    amount += ((Double) itr.next()).doubleValue();
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAccountBalance : " + ex.getMessage(), ex);
        }
        return amount;
    }
    public Date getDateForExcludePreviousYearBalanceFilter(String companyID, Date startDate) {
        Date start = null;
        try {
            KwlReturnObject cpresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyID);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cpresult.getEntityList().get(0);
            Calendar cal = Calendar.getInstance();
            cal.setTime(startDate);
//            cal.add(Calendar.DAY_OF_MONTH, 1);

            Calendar finacialcal = Calendar.getInstance();
            finacialcal.setTime(pref.getFinancialYearFrom());
            int startYear = cal.get(Calendar.YEAR);
            int startMonth = cal.get(Calendar.MONTH);

            int finacialcalYear = finacialcal.get(Calendar.YEAR);
            int finacialcalMonth = finacialcal.get(Calendar.MONTH);
            if (startMonth < finacialcalMonth && !(startYear < finacialcalYear)) {
                startYear = startYear - 1;
            }
            Calendar annualcal = Calendar.getInstance();
            annualcal.set(Calendar.YEAR, startYear);
            annualcal.set(Calendar.DAY_OF_MONTH, finacialcal.get(Calendar.DAY_OF_MONTH));
            annualcal.set(Calendar.MONTH, finacialcalMonth);
            String sstart = authHandler.getDateOnlyFormat().format(annualcal.getTime());
            start = authHandler.getDateOnlyFormat().parse(sstart);
            LocalDate localStartDate = new LocalDate(start);
            Date tempDate = localStartDate.toDate();
            Calendar cal1 = Calendar.getInstance();
//            Date d = new Date();
            SimpleDateFormat df = new SimpleDateFormat();
            //df.applyPattern("E MMM dd 00:00:00 yyyy");
//            System.out.println(df.format(tempDate));
            df.applyPattern("MMMM d, yyyy");
            cal1.setTime(new Date(df.format(tempDate)));
            String sstart1 = authHandler.getDateOnlyFormat().format(cal1.getTime());
            start = authHandler.getDateOnlyFormat().parse(sstart1);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return start;
    }
    /*This function get SI data for DVAT Form 31*/
    @Override
    public JSONObject getDVATForm31ReportJSON(JSONObject dataMap, boolean isExport) {
        JSONObject jobj = new JSONObject();
        JSONObject finaljobj = new JSONObject();
        JSONArray dataArr = new JSONArray();
        String msg = "";
        boolean issuccess = false;
        String start = "";
        String limit = "";
        try {
            int srno = 1;
            int jsonIndex = 0;
            String companyid="";
            DateFormat df = authHandler.getDateOnlyFormat();
            HashMap requestParams = new HashMap();
            
            if (dataMap.has(Constants.companyKey) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.companyKey))) {
                requestParams.put(Constants.companyKey, dataMap.getString(Constants.companyKey));
                companyid=dataMap.getString(Constants.companyKey);
            }
            if (dataMap.has(Constants.REQ_startdate) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.REQ_startdate))) {
                requestParams.put(Constants.REQ_startdate, dataMap.getString(Constants.REQ_startdate));
            }
            if (dataMap.has(Constants.REQ_enddate) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.REQ_enddate))) {
                requestParams.put(Constants.REQ_enddate, dataMap.getString(Constants.REQ_enddate));
            }
            if (dataMap.has(Constants.start) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.start))) {
                start = dataMap.getString(Constants.start);
            }
            if (dataMap.has(Constants.limit) && !StringUtil.isNullOrEmpty(dataMap.getString(Constants.limit))) {
                limit = dataMap.getString(Constants.limit);
            }
            if (dataMap.has("dateformat") && !StringUtil.isNullOrEmpty(dataMap.getString("dateformat"))) {
                df = (DateFormat) dataMap.get("dateformat");
                requestParams.put(Constants.df, df);
                requestParams.put("dateformat", df);
            }
            requestParams.put("CashAndInvoice", true);
            requestParams.put("sort", "date");
            requestParams.put("dir", "DESC");
            
            /*Company Information*/
            KwlReturnObject cmpResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpResult.getEntityList().get(0);
            String companyName=!StringUtil.isNullOrEmpty(company.getCompanyName())?company.getCompanyName():"";
            String companyAddress=!StringUtil.isNullOrEmpty(company.getAddress())? company.getAddress():"";
            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPref = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
            String vatTIN=!StringUtil.isNullOrEmpty(extraCompanyPref.getVatNumber())? extraCompanyPref.getVatNumber():"";
            
            KwlReturnObject kwl = accInvoiceDAOobj.getInvoicesMerged(requestParams);
            List siList = kwl.getEntityList();
            Iterator siitr = siList.iterator();
            while (siitr.hasNext()) {
                String TIN = "";
                String customerName = "";
                Object[] oj = (Object[]) siitr.next();
                String grid = oj[0].toString();
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), grid);
                Invoice invoice = (Invoice) objItr.getEntityList().get(0);
                double externalcurrencyrate = 1.0;
                Date invoiceDate = null;
                if (invoice.getJournalEntry() != null) {
                    externalcurrencyrate = invoice.getJournalEntry().getExternalCurrencyRate();
//                    invoiceDate = invoice.getJournalEntry().getEntryDate();
                    invoiceDate = invoice.getCreationDate();
                }
                /*
                 * Customer Information
                 */
                if (invoice.getCustomer() != null) {
                    customerName = invoice.getCustomer().getName() != null ? invoice.getCustomer().getName() : "";
                    TIN = invoice.getCustomer().isInterstateparty() ? (invoice.getCustomer().getCSTTINnumber() != null ? invoice.getCustomer().getCSTTINnumber() : "") : (invoice.getCustomer().getVATTINnumber() != null ? invoice.getCustomer().getVATTINnumber() : "");
                }
                String si = invoice.getInvoiceNumber();
                JournalEntry je = null;
                if (invoice.isNormalInvoice()) {
                    je = invoice.getJournalEntry();
                }
                double VATamount = 0;
                double assessableValue = 0;
                double col5 = 0, col6 = 0, col7 = 0, col8 = 0, col9 = 0, col10 = 0, col11 = 0, col12 = 0, col13 = 0;
                double col14 = 0, col15 = 0, col16 = 0, col17 = 0, col18 = 0, col19 = 0, col20 = 0, col21 = 0, col22 = 0;
                double col23 = 0, col24 = 0, col25 = 0, col26 = 0, col27 = 0, col28 = 0, col29 = 0, col30 = 0;
                Set<InvoiceDetail> rows = invoice.getRows();
                for (InvoiceDetail row : rows) {
                    if (row.getInventory() != null && row.getInventory().getProduct() != null) {
                        VATamount = 0;
                        assessableValue = 0;
                        col5 = 0;col6 = 0;col7=0;col8=0;col9=0;col10=0;col11=0;col12=0;col13=0;
                        col14=0;col15=0;col16=0;col17=0;col18=0;col19=0;col20=0;col21=0;col22=0;
                        col23=0;col24=0;col25=0;col26=0;col27=0;col28=0;col29=0;col30=0;
                        /*
                         * Type of sale
                         */
                        String typeOfSale = "";
                        if (row.getSalesJED() != null && !StringUtil.isNullOrEmpty(row.getSalesJED().getID())) {
                            if (row.getSalesJED().getAccount() != null && !StringUtil.isNullOrEmpty(row.getSalesJED().getAccount().getSalesType())) {
                                typeOfSale = row.getSalesJED().getAccount().getSalesType();
                            }
                        }
                        HashMap<String, Object> invoiceDetailParams = new HashMap();
                        invoiceDetailParams.put("InvoiceDetailid", row.getID());
                        KwlReturnObject invoiceMapresult = accInvoiceDAOobj.getInvoicedetailTermMap(invoiceDetailParams);
                        List<InvoiceDetailTermsMap> PurchaseReturnDetailTermsMapList = invoiceMapresult.getEntityList();
                        for (InvoiceDetailTermsMap invDetailTermMap : PurchaseReturnDetailTermsMapList) {
                            /*
                             * 1=VAT   3=CST
                             */
                            if (invDetailTermMap.getTerm() != null && (invDetailTermMap.getTerm().getTermType() == IndiaComplianceConstants.LINELEVELTERMTYPE_CST || invDetailTermMap.getTerm().getTermType() == IndiaComplianceConstants.LINELEVELTERMTYPE_VAT)) {
                                switch (typeOfSale) {
                                    case "1":  //5 Export
                                        col6 += invDetailTermMap.getAssessablevalue();
                                        col5 = invDetailTermMap.getPercentage();  // Tax Rate
                                        break;
                                    case "2":  //5 High Sea Sale
                                        col7 += invDetailTermMap.getAssessablevalue();
                                        col5 = invDetailTermMap.getPercentage();  // Tax Rate
                                        break;
                                    case "3":  // Own goods transferrd for Job Work against F-Form
                                        col8 += invDetailTermMap.getAssessablevalue();
                                        break;
                                    case "4":  // Other dealers goods returned after Job work against F-Form
                                        col9 += invDetailTermMap.getAssessablevalue();
                                        break;
                                    case "5":  //5 Stock transfer (Branch) against F- Form
                                        col10 += invDetailTermMap.getAssessablevalue();
                                        col5 = invDetailTermMap.getPercentage();  // Tax Rate
                                        break;
                                    case "6":  // Stock transfer (Consignment) against F- Form
                                        col11 += invDetailTermMap.getAssessablevalue();
                                        break;
                                    case "7":  //19 Sale against H- Form
                                        col12 += invDetailTermMap.getAssessablevalue();
                                        col19 = invDetailTermMap.getPercentage();  // Rate of Tax
                                        break;
                                    case "8":  //19 Sale against I- Form
                                        col13 += invDetailTermMap.getAssessablevalue();
                                        col19 = invDetailTermMap.getPercentage();  // Rate of Tax
                                        break;
                                    case "9":  // Sale against J- Form
                                        col14 += invDetailTermMap.getAssessablevalue();
                                        break;
                                    case "10":  //19 Sale against C+E- I/E-II
                                        col15 += invDetailTermMap.getAssessablevalue();
                                        col19 = invDetailTermMap.getPercentage();  // Rate of Tax
                                        break;
                                    case "11": // 19 23  Sale of Exempted Goods [Sch. I]
                                        col16 += invDetailTermMap.getAssessablevalue();
                                        col19 = invDetailTermMap.getPercentage();  // Rate of Tax
                                        col23 = invDetailTermMap.getTermamount();  // Tax 
                                        break;
                                    case "12": //Sales covered under proviso to [Sec.9( 1)] Read with Sec.8(4)]
                                        col17 += invDetailTermMap.getAssessablevalue();
                                        break;
                                    case "13": // Sales of Goods Outside Delhi (Sec. 4)
                                        col18 += invDetailTermMap.getAssessablevalue();
                                        break;
                                    case "14": // 19 23 Sale against C-Form excluding sale of capital assets
                                        col20 += invDetailTermMap.getAssessablevalue();
                                        col19 = invDetailTermMap.getPercentage();  // Rate of Tax
                                        col23 = invDetailTermMap.getTermamount();  // Tax 
                                        break;
                                    case "15": //19 23 Capital Goods sold against C- Forms
                                        col21 += invDetailTermMap.getAssessablevalue();
                                        col19 = invDetailTermMap.getPercentage();  // Rate of Tax
                                        col23 = invDetailTermMap.getTermamount();  // Tax 
                                        break;
                                    case "16"://19 23 Sale without forms
                                        col22 += invDetailTermMap.getAssessablevalue();
                                        col19 = invDetailTermMap.getPercentage();  // Rate of Tax

                                        break;
                                    case "17":// 5 26 Turnover (Goods) (excluding VAT)
                                        col24 += invDetailTermMap.getAssessablevalue();
                                        col26 += invDetailTermMap.getTermamount();  // Tax 
                                        col5 = invDetailTermMap.getPercentage();  // Tax Rate
                                        break;
                                    case "18": // 5 26 Turnover (WC) (excluding VAT
                                        col25 += invDetailTermMap.getAssessablevalue();
                                        col26 += invDetailTermMap.getTermamount();  // Tax 
                                        col5 = invDetailTermMap.getPercentage();  // Tax Rate
                                        break;
                                    case "19": // Charges towards labour, services and other like charges, in civil works contracts
                                        col27 += invDetailTermMap.getAssessablevalue();
                                        break;
                                    case "20": // Charges towards cost of land, if any, in civil works contracts
                                        col28 += invDetailTermMap.getAssessablevalue();
                                        break;
                                    case "21": // Sale against H-Form to Delhi dealers
                                        col29 += invDetailTermMap.getAssessablevalue();
                                        break;
                                    case "22": // Sale of Petrol/Diesel suffered tax on full sale price at OMC level
                                        col30 += invDetailTermMap.getAssessablevalue();
                                        break;
                                    default:
                                        col24 += invDetailTermMap.getAssessablevalue();
                                        col26 += invDetailTermMap.getTermamount();  // Tax 
                                        col5 = invDetailTermMap.getPercentage();  // Tax Rate
                                        break;
                                }
                                assessableValue += invDetailTermMap.getAssessablevalue();
                                VATamount += invDetailTermMap.getTermamount();
                            }
                        }
                    }
                    assessableValue = assessableValue / externalcurrencyrate;
                    VATamount = VATamount / externalcurrencyrate;

                    JSONObject jsonObj = new JSONObject();
                    jsonObj.put("srno", srno);
                    jsonObj.put("nameofdealer", !StringUtil.isNullOrEmpty(companyName)?companyName:"");
                    jsonObj.put("address", !StringUtil.isNullOrEmpty(companyAddress)?companyAddress:"");
                    jsonObj.put("dealertin", !StringUtil.isNullOrEmpty(vatTIN)?vatTIN:"");
                    jsonObj.put("date", invoiceDate!=null?invoiceDate:"");
                    jsonObj.put("invoiceno", !StringUtil.isNullOrEmpty(si)?si:"");
                    jsonObj.put("buyertin", !StringUtil.isNullOrEmpty(TIN)?TIN:"");
                    jsonObj.put("nameofbuyer", !StringUtil.isNullOrEmpty(customerName)?customerName:"");
                    jsonObj.put("col5", col5!=0?authHandler.formattingDecimalForAmount(col5, companyid):"");
                    jsonObj.put("col6", col6!=0?authHandler.formattingDecimalForAmount(col6/externalcurrencyrate, companyid):"");
                    jsonObj.put("col7", col7!=0?authHandler.formattingDecimalForAmount(col7/externalcurrencyrate, companyid):"");
                    jsonObj.put("col8", col8!=0?authHandler.formattingDecimalForAmount(col8/externalcurrencyrate, companyid):"");
                    jsonObj.put("col9", col9!=0?authHandler.formattingDecimalForAmount(col9/externalcurrencyrate, companyid):"");
                    jsonObj.put("col10", col10!=0?authHandler.formattingDecimalForAmount(col10/externalcurrencyrate, companyid):"");
                    jsonObj.put("col11", col11!=0?authHandler.formattingDecimalForAmount(col11/externalcurrencyrate, companyid):"");
                    jsonObj.put("col12", col12!=0?authHandler.formattingDecimalForAmount(col12/externalcurrencyrate, companyid):"");
                    jsonObj.put("col13", col13!=0?authHandler.formattingDecimalForAmount(col13/externalcurrencyrate, companyid):"");
                    jsonObj.put("col14", col14!=0?authHandler.formattingDecimalForAmount(col14/externalcurrencyrate, companyid):"");
                    jsonObj.put("col15", col15!=0?authHandler.formattingDecimalForAmount(col15/externalcurrencyrate, companyid):"");
                    jsonObj.put("col16", col16!=0?authHandler.formattingDecimalForAmount(col16/externalcurrencyrate, companyid):"");
                    jsonObj.put("col17", col17!=0?authHandler.formattingDecimalForAmount(col17/externalcurrencyrate, companyid):"");
                    jsonObj.put("col18", col18!=0?authHandler.formattingDecimalForAmount(col18/externalcurrencyrate, companyid):"");
                    jsonObj.put("col19", col19!=0?authHandler.formattingDecimalForAmount(col19, companyid):"");
                    jsonObj.put("col20", col20!=0?authHandler.formattingDecimalForAmount(col20/externalcurrencyrate, companyid):"");
                    jsonObj.put("col21", col21!=0?authHandler.formattingDecimalForAmount(col21/externalcurrencyrate, companyid):"");
                    jsonObj.put("col22", col22!=0?authHandler.formattingDecimalForAmount(col22/externalcurrencyrate, companyid):"");
                    jsonObj.put("col23", col23!=0?authHandler.formattingDecimalForAmount(col23/externalcurrencyrate, companyid):"");
                    jsonObj.put("col24", col24!=0?authHandler.formattingDecimalForAmount(col24/externalcurrencyrate, companyid):"");
                    jsonObj.put("col25", col25!=0?authHandler.formattingDecimalForAmount(col25/externalcurrencyrate, companyid):"");
                    jsonObj.put("col26", col26!=0?authHandler.formattingDecimalForAmount(col26/externalcurrencyrate, companyid):"");
                    jsonObj.put("col27", col27!=0?authHandler.formattingDecimalForAmount(col27/externalcurrencyrate, companyid):"");
                    jsonObj.put("col28", col28!=0?authHandler.formattingDecimalForAmount(col28/externalcurrencyrate, companyid):"");
                    jsonObj.put("col29", col29!=0?authHandler.formattingDecimalForAmount(col29/externalcurrencyrate, companyid):"");
                    jsonObj.put("col30", col30!=0?authHandler.formattingDecimalForAmount(col30/externalcurrencyrate, companyid):"");
                    dataArr.put(jsonIndex, jsonObj);
                    jsonIndex++;
                    srno++;
                }
            }
            int totalCount = dataArr.length();
            if ((!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) && !isExport) {
                dataArr = StringUtil.getPagedJSON(dataArr, Integer.parseInt(start), Integer.parseInt(limit));
            }
            finaljobj.put("data", dataArr);
            finaljobj.put("totalcount", totalCount);
            finaljobj.put("success", true);

        } catch (SessionExpiredException | ServiceException ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return finaljobj;
    }
    

    
    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public double[] getGroupWiseGLReport(JSONObject requestParams, JSONArray jsonArray, List<GeneralLedger> generalLedgerList) {
        double[] total = {0, 0, 0, 0, 0, 0};
        try {
            
            String companyid = (String) requestParams.get(Constants.companyKey);
            Date startDate = null, endDate = null;
            String filetype = requestParams.optString("filetype","");
            if (requestParams.has(Constants.REQ_startdate) && !StringUtil.isNullOrEmpty(requestParams.getString(Constants.REQ_startdate))) {
                startDate = authHandler.getDateOnlyFormat().parse(requestParams.getString(Constants.REQ_startdate));
            }
            if (requestParams.has(Constants.REQ_enddate) && !StringUtil.isNullOrEmpty(requestParams.getString(Constants.REQ_enddate))) {
                endDate = authHandler.getDateOnlyFormat().parse(requestParams.getString(Constants.REQ_enddate));
            }
            
            ExtraCompanyPreferences extrapref = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            }
            /*
             Check to show accounts in group or in normal.
             */
            boolean showAccountsInGroup = requestParams.optBoolean("showAccountsInGroup",true);
            
            requestParams.put(Constants.IS_GROUP_DETAIL_REPORT, true);
            HashMap<String, List<Account>> accountGroupMap = new HashMap<String, List<Account>>();
            HashMap<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put(Constants.companyKey, companyid);
            filterParams.put("parent", null);
            filterParams.put("order_by", "acc.acccode,acc.name asc");
            if (!StringUtil.isNullOrEmpty(requestParams.optString("accountIds", null))) {
                filterParams.put("accountids", requestParams.optString("accountIds"));
                filterParams.remove("parent");
            }
            if (!StringUtil.isNullOrEmpty(requestParams.optString("mastertypeid", null))) {
                filterParams.put("mastertypeid", requestParams.optString("mastertypeid"));
            }
            boolean noActivityAcc = false; 
            /*
             * noActivityAcc : Filter is used to filter out the no activity
             * accounts for Group Detail Report.
             */
            
            if (requestParams.has("acctypes")) {
                if (StringUtil.equal(requestParams.optString("acctypes"), "3")) {
                    noActivityAcc = true;
                }
            }
            
            if (requestParams.optBoolean("isexportledgerflag")) {
                int showCustomFieldDimension = 2;
//                int showCustomFieldDimension = companyReportConfigurationServiceObj.showCustomFieldsDimensionInDescForGL(companyid);
                requestParams.put("showCustomFieldDimension", showCustomFieldDimension);
                requestParams=companyReportConfigurationServiceObj.pouplateSelectStatementForGL(requestParams, requestParams.getString(Constants.userSessionId),companyid);
                String defaultAttr = CompanyReportConfigConstants.GL_SELECT_NON_CONFIG_FIELDS;
                int defaultLength = 0;
                if(!StringUtil.isNullOrEmpty(defaultAttr)){
                    defaultLength= StringUtils.countMatches(defaultAttr, ",");
                }
                requestParams.put("defaultattrlength", defaultLength);
            }
            
            boolean isInActiveAccount = false;
            filterParams.put("deleted", requestParams.optBoolean("deleted",false));
            filterParams.put("nondeleted", requestParams.optBoolean("nondeleted",false));
            
            /**
             * Separate search JSON (Custom Field Vs Default Fields)
             */
            JSONArray customSearchFieldArray = new JSONArray();
            JSONArray defaultSearchFieldArray = new JSONArray();
            Map<String, Object> advSearchAttributes = null;
            if (!StringUtil.isNullOrEmpty(requestParams.optString(Constants.Acc_Search_Json))) {
                String searchJSON = requestParams.optString(Constants.Acc_Search_Json);
                if (!StringUtil.isNullOrEmpty(searchJSON)) {
                    try {
                        JSONObject searchJobj = new JSONObject(searchJSON);
                        StringUtil.seperateCostomAndDefaultSerachJson(searchJobj, customSearchFieldArray, defaultSearchFieldArray);
                        filterParams.put("defaultSearchJson", defaultSearchFieldArray);
                        if (!StringUtil.isNullOrEmpty(searchJSON)) {
                        CompanyAccountPreferences preferences = null;
                        advSearchAttributes = new HashMap<String, Object> ();
                        String filterConjuctionCriteria = requestParams.optString(InvoiceConstants.Filter_Criteria, com.krawler.common.util.Constants.and);
                        if (!StringUtil.isNullOrEmpty(companyid)) {
                            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                            preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
                        }
                        advSearchAttributes = accJournalEntryobj.getAdvanceSearchAttributes(searchJSON, preferences, companyid, null, filterConjuctionCriteria);
                    }
                    } catch (JSONException ex) {
                        Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }
            filterParams.put(Constants.IS_GROUP_DETAIL_REPORT, true);
            filterParams.put("filterConjuctionCriteria", requestParams.optString("filterConjuctionCriteria"));
            if (!StringUtil.isNullOrEmpty(requestParams.optString("typeid", null))) {
                int typeid = requestParams.optInt("typeid");
                filterParams.put("typeid", typeid);
            }
            
            KwlReturnObject accgroupresult = accAccountDAOobj.getAccountGroupInfo(filterParams);
            /**
             * We can't search default field and custom field at the same time.
             * So, if the default field is available then we should remove the
             * search JSON for custom field.
             */
            if(defaultSearchFieldArray.length() > 0){
                requestParams.remove(Constants.Acc_Search_Json);
            }
            List<Object[]> list1 = accgroupresult.getEntityList();
            double totalAmount[] = {0, 0, 0, 0, 0, 0};
            if (showAccountsInGroup) {
                for (Object[] row : list1) {
                    String grID = row[1].toString();
                    List<Account> tempList = new ArrayList();
                    if (noActivityAcc) {
                        /*
                         * Check account activity. If No Account then
                     * isInActiveAccount will contain true else it will contain
                     * false.
                         */
                        isInActiveAccount = accAccountDAOobj.checkInActiveAccounts((Account) row[0]);
                    }
                    if (accountGroupMap.containsKey(grID)) {
                        tempList = accountGroupMap.get(grID);
                    }
                    /*
                 * If noActivityAcc is true then all account having no activity else add all accounts.
                     */
                    if ((!isInActiveAccount && !noActivityAcc) || (noActivityAcc && isInActiveAccount)) {
                        tempList.add((Account) row[0]);
                        accountGroupMap.put(grID, tempList);
                    }
                }
                HashMap<String, Object> hashMap = new HashMap<>();
                hashMap.put(Constants.companyKey, companyid);
                hashMap.put(Constants.IS_GROUP_DETAIL_REPORT, true);
                if (!StringUtil.isNullOrEmpty(requestParams.optString("typeid", null))) {
                    int typeid = requestParams.optInt("typeid");
                    if (typeid == 1) { // Balance Sheet
                    hashMap.put("nature",new String[]{"0","1"});
                    } else if (typeid == 2) { // Profit & Loss
                    hashMap.put("nature", new String[]{"2","3"});
                    }
                }
                KwlReturnObject result = accAccountDAOobj.getGroups(hashMap);
                List<Group> list = result.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    Object[] row = (Object[]) itr.next();
                    Group group = (Group) row[0];
                    double[] tempTotal = formatGroupDetails(requestParams, companyid, group, startDate, endDate, 0, false, jsonArray, null, null, accountGroupMap,advSearchAttributes);
                    total[0] += tempTotal[0];
                    total[1] += tempTotal[1];
                    total[2] += tempTotal[2];
                    total[3] += tempTotal[3];
                    total[4] += tempTotal[4];
                    total[5] += tempTotal[5];
                }
            } else {
                DateFormat sdf = authHandler.getDateOnlyFormat();
                if (!filetype.equals("detailedPDF")) {
                    requestParams.put("showAccountsInGroup", true);
                }
                for (Object[] row : list1) {
                    boolean isDebit = false;
                    Account account = (Account) row[0];

                    if (!(account.getID().equals(extrapref.getOpeningStockAccountId()) || account.getID().equals(extrapref.getClosingStockAccountId()) || account.getID().equals(extrapref.getStockInHandAccountId()))) {

                        if (noActivityAcc) {
                            /*
                             * Check account activity. If No Account then
                             * isInActiveAccount will contain true else it will
                             * contain false.
                             */
                            isInActiveAccount = accAccountDAOobj.checkInActiveAccounts(account);
                        }
                        /*
                         * If noActivityAcc is true then show account(s) having no
                         * activity else add all accounts.
                         */
                        if ((!isInActiveAccount && !noActivityAcc) || (noActivityAcc && isInActiveAccount)) {
                            if ((account.getGroup() != null) && (account.getGroup().getNature() == Group.NATURE_LIABILITY || account.getGroup().getNature() == Group.NATURE_EXPENSES)) {
                                isDebit = true;
                            }
                            double tempTotalAmount[] = formatAccountDetails(requestParams, account, startDate, endDate, 1, isDebit, false, jsonArray, sdf, null, null,generalLedgerList,advSearchAttributes);
                                totalAmount[0] += tempTotalAmount[0];
                                totalAmount[1] += tempTotalAmount[1];
                                totalAmount[2] += tempTotalAmount[2];
                                totalAmount[3] += tempTotalAmount[3];
                                totalAmount[4] += tempTotalAmount[4];
                                totalAmount[5] += tempTotalAmount[5];
                            }
                        }
                    }
                }
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return total;
    }
    /**
     *
     * @param paramobj Request object converted to JSON
     * @return List of the Industry Codes with percentage and output tax amount
     * @throws Exception
     */
    @Override
    public List<Map<String, Object>> getMalaysiangstMSICCodes(JSONObject paramobj, JSONObject industryCodes) throws Exception {
        List<Map<String, Object>> l = new ArrayList();
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
        HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();

        String companyid = paramobj.optString("companyid");
        /*
         * Get Master Item >> Indusrty Code
         */
        filter_names.add("masterGroup.ID");
        filter_params.add("59");                              // group id = 59 MSIC
        filter_names.add("company.companyID");
        filter_params.add(paramobj.opt(Constants.companyKey));
        order_by.add("value");
        order_type.add("asc");
        filterRequestParams.put("filter_names", filter_names);
        filterRequestParams.put("filter_params", filter_params);
        filterRequestParams.put("order_by", order_by);
        filterRequestParams.put("order_type", order_type);
        KwlReturnObject result = accMasterItemsDAOobj.getMasterItemsHire(filterRequestParams);

        List list = result.getEntityList();
        Iterator itr = list.iterator();

        /*
         * GET TOTAL OUTPUT TAX for Percentage Calculations
         */
        double totalOtputTax = industryCodes.optDouble(Constants.MSIC_TOTAL, 0);
        double totalMsicTax = 0;

        while (itr.hasNext()) {
            Object[] row = (Object[]) itr.next();
            MasterItem fieldComboData = (MasterItem) row[0];
            String msic_code = fieldComboData.getValue();
            double taxamount = authHandler.round(industryCodes.optDouble(msic_code, 0), companyid);
            if (taxamount != 0.00) {
                Map<String, Object> obj = new HashMap<>();
                obj.put("id", fieldComboData.getID());
                obj.put("code", msic_code);
                /*
                 * out put tax and percentage calculated
                 */
                totalMsicTax += taxamount;
                obj.put("outputtax",  (taxamount));
                obj.put("percentage", authHandler.formattedAmount(((taxamount / totalOtputTax) * 100), companyid));
                l.add(obj);
            }
        }

        /*
         * Insert entry for Others
         */
        Map<String, Object> obj = new HashMap<>();
        double totalamount = authHandler.round(industryCodes.optDouble(Constants.MSIC_TOTAL, 0), companyid);
        if ((authHandler.round(totalamount, companyid) - authHandler.round(totalMsicTax, companyid)) != 0.00) {
            obj.put("code", Constants.GSTFORM03_OTHERS_KEY);
            obj.put("outputtax",  (authHandler.round(totalamount, companyid) - authHandler.round(totalMsicTax, companyid)));
            obj.put("percentage", authHandler.formattedAmount((((authHandler.round(totalamount, companyid) - authHandler.round(totalMsicTax, companyid)) / totalOtputTax) * 100), companyid));
            l.add(obj);
        }

        /*
         * Insert Total entry
         */
        if (totalamount != 0.00) {
            obj = new HashMap<>();
            obj.put("id", "");
            obj.put("code", Constants.GSTFORM03_TOTAL_KEY);
            obj.put("outputtax",  (totalamount));
            obj.put("percentage", totalamount == 0 ? authHandler.formattedAmount(0, companyid) : authHandler.formattedAmount(100, companyid));
        }
        l.add(obj);

        return l;
    }
    
    @Override
    public JSONArray getGSTForm5BreakDown(Company company, JSONObject industryCodes) throws Exception {
        JSONArray jArr = new JSONArray();
        JSONObject jObj = new JSONObject();
        String companyid = company.getCompanyID();
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
        HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
        /*
         * Get Master Item >> Indusrty Code
         */
        filter_names.add("masterGroup.ID");
        filter_params.add("59");                              // group id = 59 MSIC
        filter_names.add("company.companyID");
            filter_params.add(company.getCompanyID());
        order_by.add("value");
        order_type.add("asc");
        filterRequestParams.put("filter_names", filter_names);
        filterRequestParams.put("filter_params", filter_params);
        filterRequestParams.put("order_by", order_by);
        filterRequestParams.put("order_type", order_type);
        KwlReturnObject result = accMasterItemsDAOobj.getMasterItemsHire(filterRequestParams);

        List list = result.getEntityList();
        Iterator itr = list.iterator();

        /*
         * GET TOTAL OUTPUT TAX for Percentage Calculations
         */
        double totalOtputTax = authHandler.round(industryCodes.optDouble(Constants.MSIC_TOTAL, 0), company.getCompanyID());
        double totalMsicTax = 0.0d;

        while (itr.hasNext()) {
            Object[] row = (Object[]) itr.next();
            MasterItem fieldComboData = (MasterItem) row[0];
            String msic_code = fieldComboData.getValue();
     
            double taxamount = authHandler.round(industryCodes.optDouble(msic_code, 0), company.getCompanyID());
            if (taxamount != 0.00) {
                JSONObject obj = new JSONObject();
                obj.put("code", msic_code);
                totalMsicTax += taxamount;
                obj.put("outputtax", authHandler.formattedAmount(taxamount, companyid));
                obj.put("percentage", authHandler.formattedAmount(((taxamount / totalOtputTax) * 100), companyid));
                jArr.put(obj);
            }
        }

        /*
         * Insert entry for Others
         */
        double totalamount = industryCodes.optDouble(Constants.MSIC_TOTAL, 0);
        Map<String, Object> obj = new HashMap<>();
        if ((authHandler.round(totalamount, company.getCompanyID()) - authHandler.round(totalMsicTax, company.getCompanyID())) != 0.00) {
            obj.put("code", "Others");
            obj.put("outputtax", authHandler.formattedAmount((authHandler.round(totalOtputTax, company.getCompanyID()) - authHandler.round(totalMsicTax, company.getCompanyID())), companyid));
            obj.put("percentage", authHandler.formattedAmount((((authHandler.round(totalOtputTax, company.getCompanyID()) - authHandler.round(totalMsicTax, company.getCompanyID())) / totalOtputTax) * 100), companyid));
            jArr.put(obj);
        }
        /*
         * Insert Total entry
         */
        if(totalamount!=0.00){
        obj = new HashMap<>();
        obj.put("code", "Total");
        obj.put("outputtax", authHandler.formattedAmount(totalamount, companyid));
        obj.put("percentage", totalamount == 0 ? authHandler.formattedAmount(0, companyid) : authHandler.formattedAmount(100, companyid));
        jArr.put(obj);
        }

        return jArr;
    }
    
    
    
    /**
     * 
     * @param requestParams Request parameter map
     * @param list Invoice row set
     * @param isMalasianCompany 
     * @return JasonArray for MSIC codes >> With Amount distribution according to global tax applied
     * @throws Exception 
     */
    @Override
    public JSONArray getMsicLineBreakUp(Map<String, Object> requestParams,  Invoice inv, boolean isMalasianCompany) throws Exception {
        JSONArray jarry = new JSONArray();
        DateFormat sdf = authHandler.getDateOnlyFormat();

        String companyid = (String) requestParams.get("companyid");
        double principalAmtForLineDetailWithSameTax = 0.0d; 
        double tempVariableForPrincipal = 0.0d; // rowtotal 
        double tempVariableForTax = 0.0d; // row total tax
        double rowTaxPercent = 0;
        
        /*Tax percent for the global tax*/
        if (inv.getTax() != null) {
//            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), inv.getJournalEntry().getEntryDate(), inv.getTax().getID());
            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), inv.getCreationDate(), inv.getTax().getID());
            rowTaxPercent = (Double) perresult.getEntityList().get(0);
        }
        /*calulate row lel total amt and tax*/
        for (InvoiceDetail invDetail : inv.getRows()) {
            tempVariableForPrincipal = (invDetail.getRate() * invDetail.getInventory().getQuantity());
            tempVariableForPrincipal -= (invDetail.getDiscount() != null ? invDetail.getDiscount().getDiscountValue() : 0);
            tempVariableForPrincipal += (invDetail.getLineLevelTermAmount());
            tempVariableForPrincipal = authHandler.round(tempVariableForPrincipal, companyid);
            principalAmtForLineDetailWithSameTax += tempVariableForPrincipal;
            tempVariableForTax += authHandler.round((tempVariableForPrincipal * rowTaxPercent / 100), companyid);
        }
       
       
        /* calculate Linking amount received and tax received */
        double amountReceivedWhileLinking = 0.0;
        double taxReceivedWhileLinking = 0.0;
        HashMap<String, Object> linkReceiptDetailMap = new HashMap<String, Object>();
                    linkReceiptDetailMap.put("invoiceid", inv.getID());
                    linkReceiptDetailMap.put(Constants.companyKey, inv.getCompany().getCompanyID());
                    linkReceiptDetailMap.put("upperLimitDate", requestParams.get("endDate") != null ? requestParams.get("endDate") : null);
                    linkReceiptDetailMap.put("taxId", inv.getTax().getID());
                    KwlReturnObject linkedReceiptDetailResult = accReceiptDao.getLinkDetailReceipt(linkReceiptDetailMap);
                    List LinkedreceiptDetailList = linkedReceiptDetailResult.getEntityList();
                    Iterator iterator = LinkedreceiptDetailList.iterator();
                    while (iterator.hasNext()) {
                        LinkDetailReceipt ldr = (LinkDetailReceipt) iterator.next();
                        // Tax amount applied in advance receipt is converted in Invoice currency
                        Set<ReceiptAdvanceDetail> rad = ldr.getReceipt().getReceiptAdvanceDetails();
                        double totalAdvAmount = 0;
                        for (ReceiptAdvanceDetail receiptAdv : rad) {
                            totalAdvAmount += receiptAdv.getAmount();
                        }
                        KwlReturnObject bTotalAdvAmount = null;
                        Date date = ldr.getReceiptLinkDate();
                        bTotalAdvAmount = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, totalAdvAmount, ldr.getReceipt().getCurrency().getCurrencyID(), inv.getCurrency().getCurrencyID(), date, 0);
                        if (bTotalAdvAmount != null) {
                            totalAdvAmount = (Double) bTotalAdvAmount.getEntityList().get(0);
                        }
                        double taxAmountInInvoiceCurrency = ldr.getReceipt().getTaxAmount() / ldr.getExchangeRateForTransaction(); // Tax amount applied in advance receipt is converted in Invoice currency
                        taxAmountInInvoiceCurrency = (taxAmountInInvoiceCurrency * ldr.getAmountInInvoiceCurrency()) / totalAdvAmount;
                        amountReceivedWhileLinking += (ldr.getAmountInInvoiceCurrency() - taxAmountInInvoiceCurrency);
                        taxReceivedWhileLinking += taxAmountInInvoiceCurrency;
                    }

        for (InvoiceDetail temp : inv.getRows()) {
            if (temp.getInventory().getProduct().getIndustryCodeId() != null) { // Only if Product has associated MSIC code
                double quantity;
//                double rowTaxPercent = 0;
                double rowTaxAmount = 0;
                boolean isRowTaxApplicable = false;
                double invAmtDue = 0;
                double gramtexcludingtax = 0;
                double ramount = 0;
                quantity = temp.getInventory().getQuantity();
                double rdisc = 0;
                double deductAmountReceivedWhileLinking = 0.0;
                double deductTaxReceivedWhileLinking = 0.0;
                ramount = authHandler.round(temp.getRate() * quantity, companyid);
                double lineLevelTermAmount = 0;
                lineLevelTermAmount = temp.getLineLevelTermAmount();

                /*
                 * CALCULATE ROW AMOUNT AND TAX ACOORDING TO GLOBAL TAX FO MSIC
                 * CODE
                 */
                if (temp.getInvoice().getTax() != null) {
//                    KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getTax().getID());
                    KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getInvoice().getCreationDate(), temp.getInvoice().getTax().getID());
                    rowTaxPercent = (Double) perresult.getEntityList().get(0);
                    isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                }
               
                rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                ramount = temp.getRate() * quantity;
                ramount -= rdisc;
                ramount += lineLevelTermAmount;
                
                rowTaxAmount = ramount * rowTaxPercent / 100;
 
                /*calculate amount deduction in ratio of row amount*/
                    deductAmountReceivedWhileLinking = (ramount / principalAmtForLineDetailWithSameTax) * amountReceivedWhileLinking;
                    deductTaxReceivedWhileLinking = (rowTaxAmount / tempVariableForTax) * taxReceivedWhileLinking;

             
                ramount = ramount - deductAmountReceivedWhileLinking;
                rowTaxAmount = rowTaxAmount - deductTaxReceivedWhileLinking;

                KwlReturnObject bAmt = null;
                if (requestParams.containsKey("gstFlag")) {
                    if (!temp.getInvoice().getCurrency().getCurrencyID().equals(Constants.SGDID)) {   // Will not convert amount to SGD if transactio is allready in SGD - ERP-10409
//                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, ramount, temp.getInvoice().getCurrency().getCurrencyID(), Constants.SGDID, temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, ramount, temp.getInvoice().getCurrency().getCurrencyID(), Constants.SGDID, temp.getInvoice().getCreationDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    }
                } else {
//                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getCreationDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                }
                if (bAmt != null) {
                    ramount = (Double) bAmt.getEntityList().get(0);
                }
              
                KwlReturnObject  bTaxAmt = null;
                if (requestParams.containsKey("gstFlag")) {
                    if (!temp.getInvoice().getCurrency().getCurrencyID().equals(Constants.SGDID)) {   // Will not convert amount to SGD if transactio is allready in SGD - ERP-10409
//                        bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rowTaxAmount, temp.getInvoice().getCurrency().getCurrencyID(), Constants.SGDID, temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rowTaxAmount, temp.getInvoice().getCurrency().getCurrencyID(), Constants.SGDID, temp.getInvoice().getCreationDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    }
                } else {
//                    bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getCreationDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                }
                if (bTaxAmt != null) {
                    rowTaxAmount = (Double) bTaxAmt.getEntityList().get(0);
                }

                double invoiceAmount = 0d;
                ramount = authHandler.round(ramount, companyid);
                rowTaxAmount = authHandler.round(rowTaxAmount, companyid);
                invoiceAmount = ramount + (rowTaxAmount); 
                invoiceAmount = authHandler.round(invoiceAmount, companyid);

                JSONObject salesTax = new JSONObject();

                JSONObject msicdetails = new JSONObject();
                msicdetails.put(Constants.MSIC_INVAMT, invoiceAmount);
                msicdetails.put(Constants.MSIC_INVTAXAMT, rowTaxAmount);
                msicdetails.put(Constants.MSIC_CODE, temp.getInventory().getProduct().getIndustryCodeId());
                jarry.put(msicdetails);
            }

        }
        return jarry;
    }
    
    /**
     *Used to get transaction,entity  map for  Purchase Invoice,Sales invoice,Debit Note,Credit Note.
     * @param requestParams
     * @return1 Map
     * @throws Exception
     */
    @Override
    public Map<String, String> getTransactionIndustryCodeMap(Map<String, Object> requestParams) throws Exception {
        Map<String, String> returnMap = new HashMap<>();
        ArrayList params = new ArrayList();
        ArrayList params0 = new ArrayList();
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        List list = null;
        String companyid = "";
        String condition = "";
        short colnum;
        int moduleid = 0, baddebttype = 0;
        boolean isimportservice = false;

        if (requestParams.containsKey(Constants.moduleid) && requestParams.get(Constants.moduleid) != null) {
            moduleid = Integer.parseInt(requestParams.get(Constants.moduleid).toString());
        }
        if (requestParams.containsKey(Constants.companyid) && requestParams.get(Constants.companyid) != null) {
            companyid = requestParams.get(Constants.companyid).toString();
        }
        // Check Used to get only those invoice claimed / recovered i.e Bad debt Claimed Purchase Invoice and Bad debt Recovered Sales Invoice
        if (requestParams.containsKey("baddebttype") && requestParams.get("baddebttype") != null) {
            baddebttype = Integer.parseInt(requestParams.get("baddebttype").toString());
        }
         // Used to get only those purchase invoice which has import service invoice checked / enabled
        if (requestParams.containsKey("isimportservice") && requestParams.get("isimportservice") != null) {
            isimportservice = Boolean.parseBoolean(requestParams.get("isimportservice").toString());
        }
        Date startDate = (Date) requestParams.get(Constants.REQ_startdate);
        Date endDate = (Date) requestParams.get(Constants.REQ_enddate);

        /*
         * GET Column for Multi Entity Dimension from fieldparams in separate
         * query
         */
        String query0 = "select colnum from fieldparams where moduleid=? and companyid=? and gstconfigtype=1;";
        params0.add(moduleid);
        params0.add(companyid);
        list = executeSQLQuery(query0, params0.toArray());
        if (list.isEmpty()) {
            return returnMap;
        } else {
            colnum = (short) list.get(0);
        }
        StringBuilder query = new StringBuilder();
        switch (moduleid) {
            case Constants.Acc_Invoice_ModuleId:
                query.append("select fcmb.value , inv.id from invoice inv ");
                condition += " and inv.deleteflag='F' and inv.approvestatuslevel=11 and inv.isdraft = false and inv.isfixedassetleaseinvoice = false and inv.isconsignment='F' ";
                break;
            case Constants.Acc_Vendor_Invoice_ModuleId:
                query.append("select fcmb.value , inv.id from goodsreceipt inv ");
                condition += " and inv.deleteflag='F' and inv.approvestatuslevel=11 and inv.isfixedassetinvoice = false and inv.isconsignment='F' ";
                break;
            case Constants.Acc_Credit_Note_ModuleId:
                query.append("select fcmb.value , inv.id from creditnote inv ");
                condition += " and inv.deleteflag='F' and inv.approvestatuslevel=11  ";
                break;
            case Constants.Acc_Debit_Note_ModuleId:
                query.append("select fcmb.value , inv.id from debitnote inv ");
                condition += " and inv.deleteflag='F' and inv.approvestatuslevel=11  ";
                break;
            case Constants.Acc_Receive_Payment_ModuleId:
                query.append("select fcmb.value , inv.id from receipt inv ");
                condition += " and inv.deleteflag='F' ";
                break;
            case Constants.Acc_Make_Payment_ModuleId:
                query.append("select fcmb.value , inv.id from payment inv ");
                condition += " and inv.deleteflag='F' and inv.approvestatuslevel=11  ";
                break;
            case Constants.Acc_GENERAL_LEDGER_ModuleId:
                query.append("select fcmb.value , je.id from journalentry je ");
                condition += " and je.deleteflag='F' and je.pendingapproval=0  and je.isdraft = false and je.typevalue !=0 ";
                break;
        }
        if (!(moduleid == Constants.Acc_GENERAL_LEDGER_ModuleId)) // No Need to join if Journal entry module Custom field
        {
            query.append("inner join journalentry je on inv.journalentry = je.id ");
        }
        query.append("inner join accjecustomdata jec on jec.journalentryId = je.id ");
        query.append("inner join company cmp on  cmp.companyid=je.company ");
        query.append("inner join fieldcombodata fcmb on fcmb.id =jec.col").append(colnum);

        query.append(" and je.company=? ");
        params.add(companyid);
        query.append(condition);
        if (startDate != null && endDate != null && !(baddebttype == 1)) {
            query.append(" and  (je.entryDate >=? and je.entryDate <=?)");
            params.add(startDate);
            params.add(endDate);
        }
        if (baddebttype == 1 && (moduleid == Constants.Acc_Invoice_ModuleId || moduleid == Constants.Acc_Vendor_Invoice_ModuleId)) {// Sales/Purchase invoice Claimed
            query.append("and inv.baddebttype = 1");
        }
        if (isimportservice && moduleid == Constants.Acc_Vendor_Invoice_ModuleId) { // Import service invoice in output tax
            query.append(" and inv.isimportservice = true");
        }
        list = executeSQLQuery(query.toString(), params.toArray());


        Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
            Object[] objArr = (Object[]) iterator.next();
            String entityValue = (String) objArr[0];
            String transactionNumber = (String) objArr[1];
            returnMap.put(transactionNumber, entityValue);
        }

        return returnMap;
    }
    
      /**
     * Used to get transaction entity map for Delivery Order
     * @param requestParams
     * @return Map
     * @throws Exception
     */
        public Map<String, String> getTransactionIndustryCodeMapForDeliveryOrder(Map<String, Object> requestParams) throws Exception {
        Map<String, String> returnMap = new HashMap<>();
        ArrayList params = new ArrayList();
        ArrayList params0 = new ArrayList();
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        boolean isFreeGift = requestParams.get("isFreeGift")!=null?Boolean.parseBoolean((String)requestParams.get("isFreeGift")) :false;
        List list = null;
        String companyid = "";
        String condition = "";
        short colnum;
        int moduleid = 0;

        if (requestParams.containsKey(Constants.moduleid) && requestParams.get(Constants.moduleid) != null) {
            moduleid = Integer.parseInt(requestParams.get(Constants.moduleid).toString());
        }
        if (requestParams.containsKey(Constants.companyid) && requestParams.get(Constants.companyid) != null) {
            companyid = requestParams.get(Constants.companyid).toString();
        }
        Date startDate = (Date) requestParams.get(Constants.REQ_startdate);
        Date endDate = (Date) requestParams.get(Constants.REQ_enddate);

        /*
         * GET Column for Multi Entity Dimension from fieldparams in separate
         * query
         */
        String query0 = "select colnum from fieldparams where moduleid=? and companyid=? and gstconfigtype=1;";
        params0.add(moduleid);
        params0.add(companyid);
        list = executeSQLQuery(query0, params0.toArray());
        if (list.isEmpty()) {
            return returnMap;
        } else {
            colnum = (short) list.get(0);
        }
        StringBuilder query = new StringBuilder();

        query.append("select fcmb.value , do.id from deliveryorder do ");
        condition = "and do.deleteflag = 'F' and do.approvestatuslevel=11  and do.isfixedassetdo = false and do.isconsignment='F' and do.isappliedfortax=true ";
        query.append("inner join deliveryordercustomdata doc on do.id= doc.deliveryOrderId ");
        query.append("inner join company cmp on  cmp.companyid=do.company ");
        query.append("inner join fieldcombodata fcmb on fcmb.id =doc.col").append(colnum);
        query.append(" and do.company=? ");
        params.add(companyid);
        
        if(requestParams.get("isFreeGift")!=null){
            if(isFreeGift){
                condition += " and do.isfreegift = 1 ";
            } else {
                condition += " and do.isfreegift = 0 ";
            }
        }
        query.append(condition);
        if (startDate != null && endDate != null) {
            query.append(" and  (do.applieddate >=? and do.applieddate <=?)");
            params.add(startDate);
            params.add(endDate);
        }
        list = executeSQLQuery(query.toString(), params.toArray());


        Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
            Object[] objArr = (Object[]) iterator.next();
            String entityValue = (String) objArr[0];
            String transactionNumber = (String) objArr[1];
            returnMap.put(transactionNumber, entityValue);
        }

        return returnMap;
    }
        
    /**
     * Used to get VatPurchaseRegister.
     *
     * @param requestParams
     * @return1 JSONArray
     * @throws ServiceException
     */
    public JSONArray getVatPurchaseRegister(HashMap<String, Object> requestParams) throws ServiceException {
        JSONArray dataArr = new JSONArray();
        try {
            DateFormat userdf = null;
            boolean isExport = false;
            if (requestParams.containsKey("isExport")) {
                isExport = (boolean) requestParams.get("isExport");
            }
            if (requestParams.containsKey("userdf")) {
                userdf = (DateFormat) requestParams.get("userdf");
            }
            int countryid = 0;
            String companyid = "";
            if (requestParams.containsKey("companyid")) {
                companyid = (String) requestParams.get("companyid");
            }
            KwlReturnObject cmpObj = accountingHandlerDAOobj.getObject("com.krawler.common.admin.Company", companyid);
            if (cmpObj != null) {
                Company cmp = (Company) cmpObj.getEntityList().get(0);
                if (cmp != null && cmp.getCountry() != null && !StringUtil.isNullOrEmpty(cmp.getCountry().getID())) {
                    countryid = Integer.parseInt(cmp.getCountry().getID());
                }
            }
            KwlReturnObject kwl = accGoodsReceiptDAOObj.getGoodsReceiptsMerged(requestParams);
            List grList = kwl.getEntityList();
            Iterator gritr = grList.iterator();
            while (gritr.hasNext()) {
                Object[] oj = (Object[]) gritr.next();
                String grid = oj[0].toString();
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), grid);
                GoodsReceipt goodsReceipt = (GoodsReceipt) objItr.getEntityList().get(0);
                double externalcurrencyrate = 1.0;
                if (goodsReceipt.getJournalEntry() != null) {
                    externalcurrencyrate = goodsReceipt.getJournalEntry().getExternalCurrencyRate();
                }
                Set<GoodsReceiptDetail> rows = goodsReceipt.getRows();
                double totalquantity = 0.0;
                double totalrate = 0.0;
                double totalvalue = 0.0;
                double TotalVat = 0.0;
                double TotalAssessableValue = 0.0;
                double totalTermAmount = 0.0;
                String vatname = "";
                String productnames = "";
                String productquantities = "";
                String productrates = "";
                String productvalues = "";
                String assessablevalues = "";
                String taxamounts = "";
                for (GoodsReceiptDetail row : rows) {
                    double rate = row.getRate() / externalcurrencyrate;
                    totalquantity += row.getInventory().getQuantity();
                    totalrate += rate;
                    totalvalue += row.getInventory().getQuantity() * rate;
                    HashMap<String, Object> grDetailParams = new HashMap();
                    grDetailParams.put("GoodsReceiptDetailid", row.getID());
                    KwlReturnObject grMapresult = accGoodsReceiptDAOObj.getGoodsReceiptdetailTermMap(grDetailParams);

                    List<ReceiptDetailTermsMap> grTermsMapList = grMapresult.getEntityList();
                    int cnt = 0;
                    for (ReceiptDetailTermsMap grtermmap : grTermsMapList) {
                        if (grtermmap.getTerm() != null) {
                            if (grtermmap.getTerm().getTermType() == 1) {
                                double vat = grtermmap.getTermamount() / externalcurrencyrate;
                                double assessable = grtermmap.getAssessablevalue() / externalcurrencyrate;
                                TotalVat += vat;
                                TotalAssessableValue += assessable;
                                vatname += grtermmap.getTerm().getTerm() + "!##";
                                taxamounts += vat + "!##";

                                if (cnt == 0) {
                                    productnames += row.getInventory().getProduct().getProductName() + "!##";
                                    productquantities += authHandler.formattingDecimalForQuantity(row.getInventory().getQuantity(), companyid) + "!##";
                                    productrates += CustomDesignHandler.getAmountinCommaDecimal(rate, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid) + "!##";
                                    productvalues += CustomDesignHandler.getAmountinCommaDecimal(row.getInventory().getQuantity() * rate, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid) + "!##";
                                } else {
                                    productnames += "!##";
                                    productquantities += "!##";
                                    productrates += "!##";
                                    productvalues += "!##";
                                }
                                assessablevalues += CustomDesignHandler.getAmountinCommaDecimal(assessable, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid) + "!##";
                                cnt++;

                            }
                        }
                    }
                }
                /* Global Terms calculation */
                KwlReturnObject curresult = null;
                HashMap<String, Object> requestParam = new HashMap();
                requestParam.put("invoiceid", goodsReceipt.getID());
                String date = (goodsReceipt.getJournalEntry() != null) ? userdf.format(goodsReceipt.getJournalEntry().getEntryDate()) : "";
                curresult = accGoodsReceiptDAOObj.getInvoiceTermMap(requestParam);
                List<ReceiptTermsMap> termMap = curresult.getEntityList();
                for (ReceiptTermsMap receiptTermsMap : termMap) {
                    double termAmnt = receiptTermsMap.getTermamount();
                    totalTermAmount += termAmnt;
                }
                if (!StringUtil.isNullOrEmpty(vatname)) {
                    vatname = vatname.substring(0, vatname.length() - 3);
                }
                if (!StringUtil.isNullOrEmpty(productnames)) {
                    productnames = productnames.substring(0, productnames.length() - 3);
                }
                if (!StringUtil.isNullOrEmpty(productquantities)) {
                    productquantities = productquantities.substring(0, productquantities.length() - 3);
                }
                if (!StringUtil.isNullOrEmpty(productrates)) {
                    productrates = productrates.substring(0, productrates.length() - 3);
                }
                if (!StringUtil.isNullOrEmpty(productvalues)) {
                    productvalues = productvalues.substring(0, productvalues.length() - 3);
                }
                if (!StringUtil.isNullOrEmpty(assessablevalues)) {
                    assessablevalues = assessablevalues.substring(0, assessablevalues.length() - 3);
                }
                if (!StringUtil.isNullOrEmpty(taxamounts)) {
                    taxamounts = taxamounts.substring(0, taxamounts.length() - 3);
                }
                if (TotalVat > 0) {
                    if (isExport) {
                        JSONObject ExportinvoiceJsonobj = new JSONObject();
                        ExportinvoiceJsonobj.put("date", date);
                        ExportinvoiceJsonobj.put("customername", goodsReceipt.getVendor().getName());
                        ExportinvoiceJsonobj.put("transactionnumber", goodsReceipt.getGoodsReceiptNumber());
                        ExportinvoiceJsonobj.put("customertin", goodsReceipt.getVendor().getVATTINnumber());
                        ExportinvoiceJsonobj.put("customercst", goodsReceipt.getVendor().getCSTTINnumber());
                        ExportinvoiceJsonobj.put("formtypeid", goodsReceipt.getFormtype());
                        ExportinvoiceJsonobj.put("totalquantity", authHandler.formattingDecimalForQuantity(totalquantity, companyid));
                        ExportinvoiceJsonobj.put("totalrate", CustomDesignHandler.getAmountinCommaDecimal(totalrate, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        ExportinvoiceJsonobj.put("totalvalue", CustomDesignHandler.getAmountinCommaDecimal(totalvalue, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        ExportinvoiceJsonobj.put("grosstotal", CustomDesignHandler.getAmountinCommaDecimal(goodsReceipt.getInvoiceAmountInBase(), Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        ExportinvoiceJsonobj.put("totalassessablevalue", CustomDesignHandler.getAmountinCommaDecimal(TotalAssessableValue, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        ExportinvoiceJsonobj.put("additionalcost", CustomDesignHandler.getAmountinCommaDecimal(totalTermAmount, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        ExportinvoiceJsonobj.put("taxamount", CustomDesignHandler.getAmountinCommaDecimal(TotalVat, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        dataArr.put(ExportinvoiceJsonobj);
                        String Products[] = productnames.split("!##");
                        String ProductQuantity[] = productquantities.split("!##");
                        String ProductRate[] = productrates.split("!##");
                        String ProductValues[] = productvalues.split("!##");
                        for (int i = 0; i < Products.length; i++) {
                            ExportinvoiceJsonobj = new JSONObject();
                            String Vats[] = vatname.split("!##");
                            String AssessbleValue[] = assessablevalues.split("!##");
                            String TaxAmt[] = taxamounts.split("!##");
                            if (!StringUtil.isNullOrEmpty(Products[i])) {
                                ExportinvoiceJsonobj.put("customername", Products[i]);
                                ExportinvoiceJsonobj.put("totalquantity", ProductQuantity[i]);
                                ExportinvoiceJsonobj.put("totalrate", ProductRate[i]);
                                ExportinvoiceJsonobj.put("totalvalue", ProductValues[i]);
                                ExportinvoiceJsonobj.put("vatname", Vats[i]);
                                ExportinvoiceJsonobj.put("totalassessablevalue", AssessbleValue[i]);
                                ExportinvoiceJsonobj.put("taxamount", TaxAmt[i]);
                            } else {
                                ExportinvoiceJsonobj.put("vatname", Vats[i]);
                                ExportinvoiceJsonobj.put("totalassessablevalue", AssessbleValue[i]);
                                ExportinvoiceJsonobj.put("taxamount", TaxAmt[i]);
                            }
                            dataArr.put(ExportinvoiceJsonobj);
                        }
                    } else {
                        JSONObject invoiceJsonobj = new JSONObject();
                        invoiceJsonobj.put("date", date);
                        invoiceJsonobj.put("customername", goodsReceipt.getVendor().getName());
                        invoiceJsonobj.put("transactionnumber", goodsReceipt.getGoodsReceiptNumber());
                        invoiceJsonobj.put("customertin", goodsReceipt.getVendor().getVATTINnumber());
                        invoiceJsonobj.put("customercst", goodsReceipt.getVendor().getCSTTINnumber());
                        invoiceJsonobj.put("formtypeid", goodsReceipt.getFormtype());
                        invoiceJsonobj.put("grosstotal", CustomDesignHandler.getAmountinCommaDecimal(goodsReceipt.getInvoiceAmountInBase(), Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        invoiceJsonobj.put("totalquantity", authHandler.formattingDecimalForQuantity(totalquantity, companyid));
                        invoiceJsonobj.put("totalrate", CustomDesignHandler.getAmountinCommaDecimal(totalrate, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        invoiceJsonobj.put("totalvalue", CustomDesignHandler.getAmountinCommaDecimal(totalvalue, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        invoiceJsonobj.put("totalassessablevalue", CustomDesignHandler.getAmountinCommaDecimal(TotalAssessableValue, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        invoiceJsonobj.put("additionalcost", CustomDesignHandler.getAmountinCommaDecimal(totalTermAmount, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        invoiceJsonobj.put("taxamount", CustomDesignHandler.getAmountinCommaDecimal(TotalVat, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        invoiceJsonobj.put("vatname", vatname);
                        invoiceJsonobj.put("productname", productnames);
                        invoiceJsonobj.put("productquantities", productquantities);
                        invoiceJsonobj.put("productrates", productrates);
                        invoiceJsonobj.put("productvalues", productvalues);
                        invoiceJsonobj.put("assessablevalues", assessablevalues);
                        invoiceJsonobj.put("taxamounts", taxamounts);
                        dataArr.put(invoiceJsonobj);
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dataArr;
    }

    /**
     * Used to get VatPurchaseRegister.
     *
     * @param requestParams
     * @return1 JSONArray
     * @throws ServiceException
     */
    public JSONArray getVatSalesRegister(HashMap<String, Object> requestParams) throws ServiceException {
        JSONArray dataArr = new JSONArray();
        try {
            DateFormat userdf = null;
            boolean isExport = false;
            if (requestParams.containsKey("isExport")) {
                isExport = (boolean) requestParams.get("isExport");
            }
            if (requestParams.containsKey("userdf")) {
                userdf = (DateFormat) requestParams.get("userdf");
            }
            int countryid = 0;
            String companyid = "";
            if (requestParams.containsKey("companyid")) {
                companyid = (String) requestParams.get("companyid");
            }
            KwlReturnObject cmpObj = accountingHandlerDAOobj.getObject("com.krawler.common.admin.Company", companyid);
            if (cmpObj != null) {
                Company cmp = (Company) cmpObj.getEntityList().get(0);
                if (cmp != null && cmp.getCountry() != null && !StringUtil.isNullOrEmpty(cmp.getCountry().getID())) {
                    countryid = Integer.parseInt(cmp.getCountry().getID());
                }
            }

            KwlReturnObject kwl = accInvoiceDAOobj.getInvoicesMerged(requestParams);
            List invoiceList = kwl.getEntityList();
            Iterator itr = invoiceList.iterator();
            while (itr.hasNext()) {
                Object[] oj = (Object[]) itr.next();
                String invid = oj[0].toString();
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invid);
                Invoice invoice = (Invoice) objItr.getEntityList().get(0);
                double externalcurrencyrate = 1.0;
                if (invoice.getJournalEntry() != null) {
                    externalcurrencyrate = invoice.getJournalEntry().getExternalCurrencyRate();
                }
                Set<InvoiceDetail> rows = invoice.getRows();
                double totalquantity = 0.0;
                double totalrate = 0.0;
                double totalvalue = 0.0;
                double TotalVat = 0.0;
                double TotalAssessableValue = 0.0;
                double totalTermAmount = 0.0;
                String vatname = "";
                String productnames = "";
                String productquantities = "";
                String productrates = "";
                String productvalues = "";
                String assessablevalues = "";
                String taxamounts = "";
                for (InvoiceDetail row : rows) {
                    double rate = row.getRate() / externalcurrencyrate;
                    totalquantity += row.getInventory().getQuantity();
                    totalrate += rate;
                    totalvalue += row.getInventory().getQuantity() * rate;
                    HashMap<String, Object> invoiceDetailParams = new HashMap();
                    invoiceDetailParams.put("InvoiceDetailid", row.getID());
                    KwlReturnObject invoiceMapresult = accInvoiceDAOobj.getInvoicedetailTermMap(invoiceDetailParams);
                    List<InvoiceDetailTermsMap> PurchaseReturnDetailTermsMapList = invoiceMapresult.getEntityList();
                    int cnt = 0;
                    for (InvoiceDetailTermsMap invoicetermmap : PurchaseReturnDetailTermsMapList) {
                        if (invoicetermmap.getTerm() != null) {
                            if (invoicetermmap.getTerm().getTermType() == 1) {
                                double vat = invoicetermmap.getTermamount() / externalcurrencyrate;
                                double assessable = invoicetermmap.getAssessablevalue() / externalcurrencyrate;
                                TotalVat += vat;
                                TotalAssessableValue += assessable;
                                vatname += invoicetermmap.getTerm().getTerm() + "!##";
                                taxamounts += CustomDesignHandler.getAmountinCommaDecimal(vat, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid) + "!##";
                                if (cnt == 0) {
                                    productnames += row.getInventory().getProduct().getProductName() + "!##";
                                    productquantities += authHandler.formattingDecimalForQuantity(row.getInventory().getQuantity(), companyid) + "!##";
                                    productrates += CustomDesignHandler.getAmountinCommaDecimal(rate, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid) + "!##";
                                    productvalues += CustomDesignHandler.getAmountinCommaDecimal(row.getInventory().getQuantity() * rate, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid) + "!##";
                                } else {
                                    productnames += "!##";
                                    productquantities += "!##";
                                    productrates += "!##";
                                    productvalues += "!##";
                                }
                                assessablevalues += CustomDesignHandler.getAmountinCommaDecimal(assessable, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid) + "!##";
                                cnt++;
                            }
                        }
                    }
                }
                /* Global Term Calculation */
                KwlReturnObject curresult = null;
                HashMap<String, Object> requestParam = new HashMap();
                requestParam.put("invoiceid", invoice.getID());
                curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
                List<InvoiceTermsMap> termMap = curresult.getEntityList();
                for (InvoiceTermsMap invoiceTerMap : termMap) {
                    double termAmnt = invoiceTerMap.getTermamount();
                    totalTermAmount += termAmnt;
                }

                if (!StringUtil.isNullOrEmpty(vatname)) {
                    vatname = vatname.substring(0, vatname.length() - 3);
                }
                if (!StringUtil.isNullOrEmpty(productnames)) {
                    productnames = productnames.substring(0, productnames.length() - 3);
                }
                if (!StringUtil.isNullOrEmpty(productquantities)) {
                    productquantities = productquantities.substring(0, productquantities.length() - 3);
                }
                if (!StringUtil.isNullOrEmpty(productrates)) {
                    productrates = productrates.substring(0, productrates.length() - 3);
                }
                if (!StringUtil.isNullOrEmpty(productvalues)) {
                    productvalues = productvalues.substring(0, productvalues.length() - 3);
                }
                if (!StringUtil.isNullOrEmpty(assessablevalues)) {
                    assessablevalues = assessablevalues.substring(0, assessablevalues.length() - 3);
                }
                if (!StringUtil.isNullOrEmpty(taxamounts)) {
                    taxamounts = taxamounts.substring(0, taxamounts.length() - 3);
                }

                if (TotalVat > 0) {
                    if (isExport) {
                        JSONObject ExportinvoiceJsonobj = new JSONObject();
                        String date = (invoice.getJournalEntry() != null) ? userdf.format(invoice.getJournalEntry().getEntryDate()) : "";
                        ExportinvoiceJsonobj.put("date", date);
                        ExportinvoiceJsonobj.put("customername", invoice.getCustomer().getName());
                        ExportinvoiceJsonobj.put("transactionnumber", invoice.getInvoiceNumber());
                        ExportinvoiceJsonobj.put("customertin", invoice.getCustomer().getVATTINnumber());
                        ExportinvoiceJsonobj.put("customercst", invoice.getCustomer().getCSTTINnumber());
                        ExportinvoiceJsonobj.put("totalquantity", authHandler.formattingDecimalForQuantity(totalquantity, companyid));
                        ExportinvoiceJsonobj.put("totalrate", CustomDesignHandler.getAmountinCommaDecimal(totalrate, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        ExportinvoiceJsonobj.put("totalvalue", CustomDesignHandler.getAmountinCommaDecimal(totalvalue, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        ExportinvoiceJsonobj.put("grosstotal", CustomDesignHandler.getAmountinCommaDecimal(invoice.getInvoiceamountinbase(), Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        ExportinvoiceJsonobj.put("totalassessablevalue", CustomDesignHandler.getAmountinCommaDecimal(TotalAssessableValue, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        ExportinvoiceJsonobj.put("additionalcost", CustomDesignHandler.getAmountinCommaDecimal(totalTermAmount, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        ExportinvoiceJsonobj.put("taxamount", CustomDesignHandler.getAmountinCommaDecimal(TotalVat, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        dataArr.put(ExportinvoiceJsonobj);
                        String Products[] = productnames.split("!##");
                        String ProductQuantity[] = productquantities.split("!##");
                        String ProductRate[] = productrates.split("!##");
                        String ProductValues[] = productvalues.split("!##");
                        for (int i = 0; i < Products.length; i++) {
                            ExportinvoiceJsonobj = new JSONObject();
                            String Vats[] = vatname.split("!##");
                            String AssessbleValue[] = assessablevalues.split("!##");
                            String TaxAmt[] = taxamounts.split("!##");
                            if (!StringUtil.isNullOrEmpty(Products[i])) {
                                ExportinvoiceJsonobj.put("customername", Products[i]);
                                ExportinvoiceJsonobj.put("totalquantity", ProductQuantity[i]);
                                ExportinvoiceJsonobj.put("totalrate", ProductRate[i]);
                                ExportinvoiceJsonobj.put("totalvalue", ProductValues[i]);
                                ExportinvoiceJsonobj.put("vatname", Vats[i]);
                                ExportinvoiceJsonobj.put("totalassessablevalue", AssessbleValue[i]);
                                ExportinvoiceJsonobj.put("taxamount", TaxAmt[i]);
                            } else {
                                ExportinvoiceJsonobj.put("vatname", Vats[i]);
                                ExportinvoiceJsonobj.put("totalassessablevalue", AssessbleValue[i]);
                                ExportinvoiceJsonobj.put("taxamount", TaxAmt[i]);
                            }
                            dataArr.put(ExportinvoiceJsonobj);
                        }
                    } else {
//                        String date = (invoice.getJournalEntry() != null) ? userdf.format(invoice.getJournalEntry().getEntryDate()) : "";
                        String date = (invoice.getCreationDate() != null) ? userdf.format(invoice.getCreationDate()) : "";
                        JSONObject invoiceJsonobj = new JSONObject();
                        invoiceJsonobj.put("date", date);
                        invoiceJsonobj.put("customername", invoice.getCustomer().getName());
                        invoiceJsonobj.put("transactionnumber", invoice.getInvoiceNumber());
                        invoiceJsonobj.put("customertin", invoice.getCustomer().getVATTINnumber());
                        invoiceJsonobj.put("customercst", invoice.getCustomer().getCSTTINnumber());
                        invoiceJsonobj.put("totalquantity", authHandler.formattingDecimalForQuantity(totalquantity, companyid));
                        invoiceJsonobj.put("totalrate", CustomDesignHandler.getAmountinCommaDecimal(totalrate, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        invoiceJsonobj.put("totalvalue", CustomDesignHandler.getAmountinCommaDecimal(totalvalue, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        invoiceJsonobj.put("grosstotal", CustomDesignHandler.getAmountinCommaDecimal(invoice.getInvoiceamountinbase(), Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        invoiceJsonobj.put("totalassessablevalue", CustomDesignHandler.getAmountinCommaDecimal(TotalAssessableValue, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        invoiceJsonobj.put("additionalcost", CustomDesignHandler.getAmountinCommaDecimal(totalTermAmount, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        invoiceJsonobj.put("vatname", vatname);
                        invoiceJsonobj.put("taxamount", CustomDesignHandler.getAmountinCommaDecimal(TotalVat, Constants.AMOUNT_DIGIT_AFTER_DECIMAL, countryid));
                        invoiceJsonobj.put("productname", productnames);
                        invoiceJsonobj.put("productquantities", productquantities);
                        invoiceJsonobj.put("productrates", productrates);
                        invoiceJsonobj.put("productvalues", productvalues);
                        invoiceJsonobj.put("assessablevalues", assessablevalues);
                        invoiceJsonobj.put("taxamounts", taxamounts);
                        dataArr.put(invoiceJsonobj);
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dataArr;
    }
    
    /**
     * This method will be used to get the Net Profit/Loss amount for previously closed year.
     * @param endDate (required) this is used for checking is there any closed year before the enddate.
     * @param preferences (Required)  
     * @param extraCompanyPreferences(Required)  
     * @param companyid(Required)  
     * @return
     */
    @Override
    public double getClosedYearNetProfitAndLoss(Date endDate, CompanyAccountPreferences preferences, ExtraCompanyPreferences extraCompanyPreferences, String companyid) {
        double closedYearNetProfitAndLoss = 0;
        try {
            int yearid = endDate.getYear() + 1900;
            KwlReturnObject maxYearLockDetailResult = accCompanyPreferencesObj.getMaxYearLockDetails(companyid, yearid);
            if (maxYearLockDetailResult != null && maxYearLockDetailResult.getEntityList() != null && !maxYearLockDetailResult.getEntityList().isEmpty()) {
                String yearlockid = (String) maxYearLockDetailResult.getEntityList().get(0);
                if (!StringUtil.isNullOrEmpty(yearlockid)) {
                    KwlReturnObject ylresult = accountingHandlerDAOobj.getObject(YearLock.class.getName(), yearlockid);
                    YearLock yearLock = (YearLock) ylresult.getEntityList().get(0);
                    if (yearLock != null && yearLock.isIsLock()) {
                        Calendar startFinYearCal = Calendar.getInstance();
                        Calendar endFinYearCal = Calendar.getInstance();
                        startFinYearCal.setTime(preferences.getFirstFinancialYearFrom() != null ? preferences.getFirstFinancialYearFrom() : preferences.getFinancialYearFrom());
                        endFinYearCal.set(Calendar.YEAR, yearLock.getYearid() + 1);
                        endFinYearCal.set(Calendar.MONTH, startFinYearCal.get(Calendar.MONTH));
                        endFinYearCal.set(Calendar.DAY_OF_MONTH, startFinYearCal.get(Calendar.DAY_OF_MONTH) - 1);
                        if (DateUtils.isSameDay(authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())), endDate) || authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())).before(endDate)) {
                            JSONObject closingJSON = new JSONObject();
                            closingJSON.put("yearlockid", yearlockid);
                            closingJSON.put("yearid", yearLock.getYearid());
                            if (extraCompanyPreferences.isStockValuationFlag() && !(extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                                closingJSON.put("netProfitAndLossWithStock", true);
                            } else {
                                closingJSON.put("netProfitAndLossWithOutStock", true);
                            }
                            List<ClosingAccountBalance> closingAccountBalances = accCompanyPreferencesObj.getClosingAccountBalance(closingJSON);
                            if (closingAccountBalances != null && !closingAccountBalances.isEmpty()) {
                                ClosingAccountBalance netProfitAndLoss = closingAccountBalances.get(0);
                                if (netProfitAndLoss != null) {
                                    closedYearNetProfitAndLoss += netProfitAndLoss.getAmount();
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return closedYearNetProfitAndLoss;
    }
//    
    @Override
    public KwlReturnObject getTDSAppliedInvoices(Map<String, Object> requestParams) throws Exception {
        List finalResult = new ArrayList(); 
        
        // GoodsReceiptDetail
        List productInvoiceGrDetailsList = getTDSAppliedOnProductInvoices(requestParams);
        finalResult.addAll(productInvoiceGrDetailsList);
        
        // ExpenseGRDetail
        List expenseInvoiceGrDetailsList = getTDSAppliedOnExpenseInvoices(requestParams);
        finalResult.addAll(expenseInvoiceGrDetailsList);
      
        return new KwlReturnObject(true, "", null, finalResult, finalResult.size());
    }
    
    public List getTDSAppliedOnProductInvoices(Map<String, Object> requestParams) throws Exception {
        List finalResult = new ArrayList(); 
        requestParams.put("class", "GoodsReceiptDetail");// TDS details from Goodsreceipt Details 
        // Product Invoice Data
        KwlReturnObject result = accGoodsReceiptDAOObj.getTDSAppliedVendorInvoices(requestParams);
        Iterator itr = result.getEntityList().iterator();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MMM-dd");
        String companyid = (String) requestParams.get("companyid");
        while(itr.hasNext()){
            String natureOfPayment = "";
            String dueOn = "";
            int overdueDays = 0;
            int overdueMonths = 0;
            
            GoodsReceiptDetail row = (GoodsReceiptDetail) itr.next();
            
            Calendar cal = Calendar.getInstance();
            Calendar dueCal = Calendar.getInstance();
            Date d = row.getGoodsReceipt().getJournalEntry().getEntryDate();
            cal.setTime(d);
            int month = cal.get(Calendar.MONTH) + 1;
            if(cal.get(Calendar.MONTH) == Calendar.MARCH){ // i.e. month of March
                dueCal.set(cal.get(Calendar.YEAR), month, 30); // then due date is 30th of April
            } else {
                dueCal.set(cal.get(Calendar.YEAR), month, 7);
            }
            overdueDays = (int) ((new Date().getTime() - dueCal.getTimeInMillis()) / (1000 * 60 * 60 * 24));

            dueOn = sdf.format(dueCal.getTime());
            //Calculation of OverDue By Months.
            HashMap overDuebyMonthParams = new HashMap();
            overDuebyMonthParams.put("transactionDate", row.getGoodsReceipt().getJournalEntry().getEntryDate());
            if (requestParams.containsKey("asOfDate") && !StringUtil.isNullOrEmpty((String) requestParams.get("asOfDate"))) {
                overDuebyMonthParams.put("asOfDate", authHandler.getDateOnlyFormat().parse(requestParams.get("asOfDate").toString()));
            } else {
                overDuebyMonthParams.put("asOfDate", new Date());
            }
            overdueMonths = accVendorPaymentobj.CalculateOverDueByMonths(overDuebyMonthParams);
            
            if(row.getNatureOfPayment()!=null){
                natureOfPayment = row.getGoodsReceipt().getVendor().getNatureOfPayment();
                    natureOfPayment = row.getNatureOfPayment().getValue();
            }
                double baseAmt = 0.0;
                double quantity = row.getInventory().getQuantity();
                double rate = row.getTdsAssessableAmount();
                rate = authHandler.round(rate, companyid);
                baseAmt += rate;
                
                HashMap<String, Object> GoodsReceiptDetailParams = new HashMap<String, Object>();
                GoodsReceiptDetailParams.put("GoodsReceiptDetailid", row.getID());
                KwlReturnObject grdTermMapresult = accGoodsReceiptDAOObj.getGoodsReceiptdetailTermMap(GoodsReceiptDetailParams);
                List<ReceiptDetailTermsMap> ReceiptDetailTermsMapList = grdTermMapresult.getEntityList();
                for (ReceiptDetailTermsMap invoicedetailTermMap : ReceiptDetailTermsMapList) {
                    LineLevelTerms mt = invoicedetailTermMap.getTerm();
                    if(mt.isIncludeInTDSCalculation()){
                        baseAmt += invoicedetailTermMap.getTermamount();
                    }
                }
            
            double totalTermAmount = 0;  
                HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("invoiceid", row.getGoodsReceipt().getID());
            KwlReturnObject curresult = null;
            curresult = accGoodsReceiptDAOObj.getInvoiceTermMap(requestParam);
            List<ReceiptTermsMap> termMap = curresult.getEntityList();
            for (ReceiptTermsMap receiptTermsMap : termMap) {
                if(receiptTermsMap.getTerm().isIncludeInTDSCalculation()){
                    totalTermAmount += receiptTermsMap.getTermamount();
                }
            }
            baseAmt+= totalTermAmount;
            double TDSlineAmount = (row.getTdsLineAmount()==0 &&row.getTdsJEMapping()!=null)?row.getTdsJEMapping().getTdsLineAmount():row.getTdsLineAmount();
            double paymentMappingamount = 0.0; 
            if (row.getGoodsReceiptDetailPaymentMapping() != null) {
                Set<GoodsReceiptDetailPaymentMapping> paymentDetailsSet = row.getGoodsReceiptDetailPaymentMapping();
                for (GoodsReceiptDetailPaymentMapping mappingDetails : paymentDetailsSet) {
                    paymentMappingamount += mappingDetails.getAdvanceAdjustedAmount();
                }
            }
            TDSlineAmount = TDSlineAmount - paymentMappingamount;
            if(TDSlineAmount<=0){
                continue;
            }
            HashMap finalHM = new HashMap();
            finalHM.put("vendorname",row.getGoodsReceipt().getVendor().getName());
            finalHM.put("vendorPanNo", row.getGoodsReceipt().getVendor().getPANnumber());
            finalHM.put("vendorPanStatus", row.getGoodsReceipt().getVendor().getPanStatus());
            finalHM.put("transactionDate", sdf.format(row.getGoodsReceipt().getJournalEntry().getEntryDate()));
            finalHM.put("transactionDocNo", row.getGoodsReceipt().getGoodsReceiptNumber());
            finalHM.put("natureOfPayment", natureOfPayment);
            finalHM.put("amountpaid", authHandler.round(baseAmt,companyid));
            finalHM.put("TDSAssessableAmount", row.getTdsAssessableAmount());
            finalHM.put("tdsamount",TDSlineAmount);
            finalHM.put("unpaidtdsamount",(row.getTdsPaidFlag()== IndiaComplianceConstants.NOTDSPAID || row.getTdsPaidFlag()== IndiaComplianceConstants.TDSINTERESTPAYMENT)?TDSlineAmount:0);
            finalHM.put("duedate", dueOn);
            finalHM.put("overdueMonths", overdueMonths <= 0 ? 0 : overdueMonths);
            finalHM.put("tdsPayableAccountid", row.getTdsPayableAccount()!= null?row.getTdsPayableAccount().getID():"");
            finalHM.put("tdsPayableAccount", row.getTdsPayableAccount()!= null?row.getTdsPayableAccount().getAccountName():"");
            finalHM.put("tdsInterestPayableAccountid", row.getGoodsReceipt().getVendor().getTdsInterestPayableAccount()!= null?row.getGoodsReceipt().getVendor().getTdsInterestPayableAccount().getID():"");
            finalHM.put("tdsInterestPayableAccount", row.getGoodsReceipt().getVendor().getTdsInterestPayableAccount()!= null?row.getGoodsReceipt().getVendor().getTdsInterestPayableAccount().getAccountName():"");
            finalHM.put("TDSPaidFlag", row.getTdsPaidFlag());
            finalHM.put("tdsInterestPaidFlag", row.getTdsInterestPaidFlag());
            finalHM.put("tdsInterestRateAtPaymentTime", row.getTdsInterestRateAtPaymentTime());
            
            String tdsPaymentID = row.getTdsPayment();
            if (row.getTdsPaidFlag() == 1 && !StringUtil.isNullOrEmpty(tdsPaymentID)) {
                //If TDS is paid then Freeze the TDS Interest Amount.
                KwlReturnObject TDSPaymentObjList = accountingHandlerDAOobj.getObject(Payment.class.getName(), tdsPaymentID);
                Payment TDSPaymentObj = (Payment) TDSPaymentObjList.getEntityList().get(0);
                finalHM.put("asOnDateForDueDateCaluculation", TDSPaymentObj.getJournalEntry().getEntryDate());
                finalHM.put("transactionDateForDueDateCaluculation", row.getGoodsReceipt().getJournalEntry().getEntryDate());
            }
            
            finalHM.put("paymentid", row.getTdsPayment()!=null?row.getTdsPayment():"");
            finalHM.put("tdsRate", (row.getTdsRate()==0 &&row.getTdsJEMapping()!=null)?row.getTdsJEMapping().getTdsRate():row.getTdsRate());
            finalHM.put("paymentInterestId", row.getTdsInterestPayment()!=null?row.getTdsInterestPayment():"");
            finalHM.put("openingAmt", authHandler.round(TDSlineAmount,companyid));
            finalHM.put("tdsAmt",TDSlineAmount);
            finalHM.put("PendingAmt",(row.getTdsPaidFlag()== IndiaComplianceConstants.NOTDSPAID || row.getTdsPaidFlag()== IndiaComplianceConstants.TDSINTERESTPAYMENT)?TDSlineAmount:0);
            finalHM.put("dueOn", dueOn);
            finalHM.put("overdueDays", overdueDays <= 0 ? 0 : overdueDays);
            finalResult.add(finalHM);
        }
        return finalResult;
    }
    
    public List getTDSAppliedOnExpenseInvoices(Map<String, Object> requestParams) throws Exception {
        List finalResult = new ArrayList(); 
        // Expense Invoice Data
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MMM-dd");
        String companyid = (String) requestParams.get("companyid");
        requestParams.put("class", "ExpenseGRDetail");
        KwlReturnObject result = accGoodsReceiptDAOObj.getTDSAppliedVendorInvoices(requestParams);
        Iterator itr = result.getEntityList().iterator();
        while(itr.hasNext()){
            String natureOfPayment = "";
            String dueOn = "";
            int overdueDays = 0;
            int overdueMonths = 0;
            
            ExpenseGRDetail row = (ExpenseGRDetail) itr.next();
            
            Calendar cal = Calendar.getInstance();
            Calendar dueCal = Calendar.getInstance();
            Date d = row.getGoodsReceipt().getJournalEntry().getEntryDate();
            cal.setTime(d);
            int month = cal.get(Calendar.MONTH) + 1;
            if(cal.get(Calendar.MONTH) == Calendar.MARCH){ // i.e. month of March
                dueCal.set(cal.get(Calendar.YEAR), month, 30); // then due date is 30th of April
            } else {
                dueCal.set(cal.get(Calendar.YEAR), month, 7);
            }
            overdueDays = (int) ((new Date().getTime() - dueCal.getTimeInMillis()) / (1000 * 60 * 60 * 24));

            dueOn = sdf.format(dueCal.getTime());
            //Calculation of OverDue By Months.
            HashMap overDuebyMonthParams = new HashMap();
            overDuebyMonthParams.put("transactionDate", row.getGoodsReceipt().getJournalEntry().getEntryDate());
            if (requestParams.containsKey("asOfDate") && !StringUtil.isNullOrEmpty((String) requestParams.get("asOfDate"))) {
                overDuebyMonthParams.put("asOfDate", authHandler.getDateOnlyFormat().parse(requestParams.get("asOfDate").toString()));
            } else {
                overDuebyMonthParams.put("asOfDate", new Date());
            }
            overdueMonths = accVendorPaymentobj.CalculateOverDueByMonths(overDuebyMonthParams);
            
            if(row.getNatureOfPayment()!=null){
                natureOfPayment = row.getGoodsReceipt().getVendor().getNatureOfPayment();
                    natureOfPayment = row.getNatureOfPayment().getValue();
            }
                double baseAmt = 0.0;
                double rate = row.getTdsAssessableAmount();
                rate = authHandler.round(rate, companyid);
                baseAmt += rate;
                
                HashMap<String, Object> GoodsReceiptDetailParams = new HashMap<String, Object>();
                GoodsReceiptDetailParams.put("GoodsReceiptDetailid", row.getID());
                KwlReturnObject grdTermMapresult = accGoodsReceiptDAOObj.getGoodsReceiptdetailTermMap(GoodsReceiptDetailParams);
                List<ReceiptDetailTermsMap> ReceiptDetailTermsMapList = grdTermMapresult.getEntityList();
                for (ReceiptDetailTermsMap invoicedetailTermMap : ReceiptDetailTermsMapList) {
                    LineLevelTerms mt = invoicedetailTermMap.getTerm();
                    if(mt.isIncludeInTDSCalculation()){
                        baseAmt += invoicedetailTermMap.getTermamount();
                    }
                }
            
            double totalTermAmount = 0;  
                HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("invoiceid", row.getGoodsReceipt().getID());
            KwlReturnObject curresult = null;
            curresult = accGoodsReceiptDAOObj.getInvoiceTermMap(requestParam);
            List<ReceiptTermsMap> termMap = curresult.getEntityList();
            for (ReceiptTermsMap receiptTermsMap : termMap) {
                if(receiptTermsMap.getTerm().isIncludeInTDSCalculation()){
                    totalTermAmount += receiptTermsMap.getTermamount();
                }
            }
            baseAmt+= totalTermAmount;
            double TDSlineAmount = (row.getTdsLineAmount()==0 &&row.getTdsJEMapping()!=null)?row.getTdsJEMapping().getTdsLineAmount():row.getTdsLineAmount();
            double paymentMappingamount = 0.0;
            if (row.getGoodsReceiptDetailPaymentMapping() != null) {
                Set<GoodsReceiptDetailPaymentMapping> paymentDetailsSet = row.getGoodsReceiptDetailPaymentMapping();
                for (GoodsReceiptDetailPaymentMapping mappingDetails : paymentDetailsSet) {
                    paymentMappingamount += mappingDetails.getAdvanceAdjustedAmount();
                }
            }
            TDSlineAmount = TDSlineAmount - paymentMappingamount;
            if (TDSlineAmount <= 0) {
                continue;
            }
            HashMap finalHM = new HashMap();
            finalHM.put("vendorname",row.getGoodsReceipt().getVendor().getName());
            finalHM.put("vendorPanNo", row.getGoodsReceipt().getVendor().getPANnumber());
            finalHM.put("vendorPanStatus", row.getGoodsReceipt().getVendor().getPanStatus());
            finalHM.put("transactionDate", sdf.format(row.getGoodsReceipt().getJournalEntry().getEntryDate()));
            finalHM.put("transactionDocNo", row.getGoodsReceipt().getGoodsReceiptNumber());
            finalHM.put("natureOfPayment", natureOfPayment);
            finalHM.put("amountpaid", authHandler.round(baseAmt,companyid));
            finalHM.put("TDSAssessableAmount", row.getTdsAssessableAmount());
            finalHM.put("tdsamount",TDSlineAmount);
            finalHM.put("unpaidtdsamount",(row.getTdsPaidFlag()== IndiaComplianceConstants.NOTDSPAID || row.getTdsPaidFlag()== IndiaComplianceConstants.TDSINTERESTPAYMENT)?TDSlineAmount:0);
            finalHM.put("duedate", dueOn);
            finalHM.put("overdueMonths", overdueMonths <= 0 ? 0 : overdueMonths);
            finalHM.put("tdsPayableAccountid", row.getTdsPayableAccount()!= null?row.getTdsPayableAccount().getID():"");
            finalHM.put("tdsPayableAccount", row.getTdsPayableAccount()!= null?row.getTdsPayableAccount().getAccountName():"");
            finalHM.put("tdsInterestPayableAccountid", row.getGoodsReceipt().getVendor().getTdsInterestPayableAccount()!= null?row.getGoodsReceipt().getVendor().getTdsInterestPayableAccount().getID():"");
            finalHM.put("tdsInterestPayableAccount", row.getGoodsReceipt().getVendor().getTdsInterestPayableAccount()!= null?row.getGoodsReceipt().getVendor().getTdsInterestPayableAccount().getAccountName():"");
            finalHM.put("TDSPaidFlag", row.getTdsPaidFlag());
            finalHM.put("tdsInterestPaidFlag", row.getTdsInterestPaidFlag());
            finalHM.put("tdsInterestRateAtPaymentTime", row.getTdsInterestRateAtPaymentTime());
            
            String tdsPaymentID = row.getTdsPayment();
            if (row.getTdsPaidFlag() == 1 && !StringUtil.isNullOrEmpty(tdsPaymentID)) {
                //If TDS is paid then Freeze the TDS Interest Amount.
                KwlReturnObject TDSPaymentObjList = accountingHandlerDAOobj.getObject(Payment.class.getName(), tdsPaymentID);
                Payment TDSPaymentObj = (Payment) TDSPaymentObjList.getEntityList().get(0);
                finalHM.put("asOnDateForDueDateCaluculation", TDSPaymentObj.getJournalEntry().getEntryDate());
                finalHM.put("transactionDateForDueDateCaluculation", row.getGoodsReceipt().getJournalEntry().getEntryDate());
            }
            
            finalHM.put("paymentid", row.getTdsPayment()!=null?row.getTdsPayment():"");
            finalHM.put("tdsRate", (row.getTdsRate()==0 &&row.getTdsJEMapping()!=null)?row.getTdsJEMapping().getTdsRate():row.getTdsRate());
            finalHM.put("paymentInterestId", row.getTdsInterestPayment()!=null?row.getTdsInterestPayment():"");
            finalHM.put("openingAmt", authHandler.round(TDSlineAmount,companyid));
            finalHM.put("tdsAmt",TDSlineAmount );
            finalHM.put("PendingAmt",(row.getTdsPaidFlag()== IndiaComplianceConstants.NOTDSPAID || row.getTdsPaidFlag()== IndiaComplianceConstants.TDSINTERESTPAYMENT)?TDSlineAmount:0);
            finalHM.put("dueOn", dueOn);
            finalHM.put("overdueDays", overdueDays <= 0 ? 0 : overdueDays);
            finalResult.add(finalHM);
        }
        return finalResult;
    }
    
    @Override
    public KwlReturnObject getTDSAppliedDebitNote(Map<String, Object> requestParams) throws Exception {
        List finalResult = new ArrayList();
        String companyid= "";
        if (requestParams.containsKey(Constants.companyKey) && requestParams.get(Constants.companyKey) != null && !StringUtil.isNullOrEmpty(requestParams.get(Constants.companyKey).toString())) {
            companyid = requestParams.get(Constants.companyKey).toString();
        }
        KwlReturnObject result = accDebitNoteobj.getTDSAppliedDebitNote(requestParams);
        Iterator itr = result.getEntityList().iterator();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MMM-dd");
        Set<String> dnIdsUsed = new HashSet<String>();
        while(itr.hasNext()){
            String natureOfPayment = "";
            String tdsPayableAccountid = "";
            String tdsPayableAccount = "";
            String dueOn = "";
            int overdueDays = 0;
            int overdueMonths = 0;
            
            String dnid = itr.next().toString();
            if(dnIdsUsed.contains(dnid)){
                continue;   
            }
            dnIdsUsed.add(dnid);
            
            KwlReturnObject debitNoteResult = accountingHandlerDAOobj.loadObject(DebitNote.class.getName(), dnid);
            DebitNote debitNote = (DebitNote) debitNoteResult.getEntityList().get(0);
            
            
            Calendar cal = Calendar.getInstance();
            Calendar dueCal = Calendar.getInstance();
            Date d = debitNote.getJournalEntry().getEntryDate();
            cal.setTime(d);
            int month = cal.get(Calendar.MONTH) + 1;
            if(cal.get(Calendar.MONTH) == Calendar.MARCH){ // i.e. month of March
                dueCal.set(cal.get(Calendar.YEAR), month, 30); // then due date is 30th of April
            } else {
                dueCal.set(cal.get(Calendar.YEAR), month, 7);
            }
            overdueDays = (int) ((new Date().getTime() - dueCal.getTimeInMillis()) / (1000 * 60 * 60 * 24));

            dueOn = sdf.format(dueCal.getTime());
            //Calculation of OverDue By Months.
            HashMap overDuebyMonthParams = new HashMap();
            overDuebyMonthParams.put("transactionDate", debitNote.getJournalEntry().getEntryDate());
            overDuebyMonthParams.put("asOfDate", !StringUtil.isNullOrEmpty(requestParams.get("asOfDate").toString()) ? new Date((String) requestParams.get("asOfDate")) : new Date());
            overdueMonths = accVendorPaymentobj.CalculateOverDueByMonths(overDuebyMonthParams);
            
            if(!StringUtil.isNullOrEmpty(debitNote.getVendor().getNatureOfPayment())){
                natureOfPayment = debitNote.getVendor().getNatureOfPayment();
                KwlReturnObject NOPObj = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), natureOfPayment);
                if (NOPObj != null) {
                    MasterItem masteritem = (MasterItem) NOPObj.getEntityList().get(0);
                    natureOfPayment = masteritem.getValue();
                    tdsPayableAccountid = masteritem.getAccID();
                    KwlReturnObject tdsPayableAccountResult = accountingHandlerDAOobj.getObject(Account.class.getName(), tdsPayableAccountid);
                    if(tdsPayableAccountResult != null){
                        Account tdsPayableAccountObj = (Account) tdsPayableAccountResult.getEntityList().get(0);
                        tdsPayableAccount = tdsPayableAccountObj.getAccountName();
                    }
                } else {
                    natureOfPayment = "";
                }
            }
            
            Set<DebitNoteTaxEntry> rows = debitNote.getDnTaxEntryDetails();
            double tdsAmount = 0.0;
            for( DebitNoteTaxEntry row : rows ){
                if(row.isTDSAmount()){
                    tdsAmount += row.getAmount();
                }
            }
            HashMap finalHM = new HashMap();
            finalHM.put("vendorname",debitNote.getVendor().getName());
            finalHM.put("transactionDate", sdf.format(debitNote.getJournalEntry().getEntryDate()));
            finalHM.put("transactionDocNo", debitNote.getDebitNoteNumber());
            finalHM.put("natureOfPayment", natureOfPayment);
            finalHM.put("amountpaid", authHandler.round(tdsAmount,companyid));
            finalHM.put("tdsamount",tdsAmount );
            finalHM.put("unpaidtdsamount",(debitNote.getTdsPaidFlag()== IndiaComplianceConstants.NOTDSPAID || debitNote.getTdsInterestPaidFlag()== IndiaComplianceConstants.TDSINTERESTPAYMENT)?tdsAmount:0);
            finalHM.put("duedate", dueOn);
            finalHM.put("overdueMonths", overdueMonths <= 0 ? 0 : overdueMonths);
            finalHM.put("tdsPayableAccountid", tdsPayableAccountid);
            finalHM.put("tdsPayableAccount", tdsPayableAccount);
            finalHM.put("tdsInterestPayableAccountid", debitNote.getVendor().getTdsInterestPayableAccount()!= null?debitNote.getVendor().getTdsInterestPayableAccount().getID():"");
            finalHM.put("tdsInterestPayableAccount", debitNote.getVendor().getTdsInterestPayableAccount()!= null?debitNote.getVendor().getTdsInterestPayableAccount().getAccountName():"");
            finalHM.put("TDSPaidFlag", debitNote.getTdsPaidFlag());
            finalHM.put("tdsInterestPaidFlag", debitNote.getTdsInterestPaidFlag());
            
            String tdsPaymentID = debitNote.getTdsPayment();
            if (debitNote.getTdsPaidFlag() == 1 && !StringUtil.isNullOrEmpty(tdsPaymentID)) {
                //If TDS is paid then Freeze the TDS Interest Amount.
                KwlReturnObject TDSPaymentObjList = accountingHandlerDAOobj.getObject(Payment.class.getName(), tdsPaymentID);
                Payment TDSPaymentObj = (Payment) TDSPaymentObjList.getEntityList().get(0);
                finalHM.put("asOnDateForDueDateCaluculation", TDSPaymentObj.getJournalEntry().getEntryDate());
                finalHM.put("transactionDateForDueDateCaluculation", debitNote.getJournalEntry().getEntryDate());
            }
            
            finalHM.put("paymentid", debitNote.getTdsPayment()!=null?debitNote.getTdsPayment():"");
            finalHM.put("paymentInterestId", debitNote.getTdsInterestPayment()!=null?debitNote.getTdsInterestPayment():"");
            finalHM.put("openingAmt", authHandler.round(tdsAmount,companyid));
            finalHM.put("tdsAmt",tdsAmount );
            finalHM.put("PendingAmt",(debitNote.getTdsPaidFlag()== IndiaComplianceConstants.NOTDSPAID || debitNote.getTdsInterestPaidFlag()== IndiaComplianceConstants.TDSINTERESTPAYMENT)?tdsAmount:0);
            finalHM.put("dueOn", dueOn);
            finalHM.put("overdueDays", overdueDays <= 0 ? 0 : overdueDays);
            finalResult.add(finalHM);
        }
        return new KwlReturnObject(true, "", null, finalResult, finalResult.size());
    }
    @Override
    public void getInvoicesForTDSNotDeductedReport(Map<String, Object> requestParams, List tdsnotdeducted) throws Exception {
        
        String companyId = requestParams.get("companyid").toString();
        HashMap getVendorMap = new HashMap();
        getVendorMap.put("companyid", companyId);

        // Get Financial Year Start Date and End Date
        KwlReturnObject companyAccprefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyId);
        CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) companyAccprefresult.getEntityList().get(0);
        Date financialYearStartDate = companyAccountPreferences.getFinancialYearFrom();
        Calendar startCal = Calendar.getInstance();
        startCal.setTime(financialYearStartDate);
        startCal.add(Calendar.YEAR, 1);
        startCal.add(Calendar.DAY_OF_YEAR, -1);
        Date financialYearEndDate = startCal.getTime();
        
                
        KwlReturnObject result = accVendorDAOobj.getVendor(getVendorMap);
        Iterator Vendoritr = result.getEntityList().iterator();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        List finalResult = new ArrayList();
        DateFormat sdf1 = authHandler.getDateOnlyFormat();

        while (Vendoritr.hasNext()) {
            
             double totalTaxableAmount = 0.0;
             double totalTdsTobeMade = 0.0;
             double tdsDeductedTillDate = 0.0;
             double balanceTDStoBeMade = 0.0;
             double BalanceTDStobeMade = 0.0;
             double advancesTDSAmount = 0;
             Vendor vendor = (Vendor) Vendoritr.next();
             
             requestParams.put("vendorId",vendor.getID());
             // Get GoodsReceiptDetail and ExpenseGRDetail Rows in hashmap to iterate TDS data at line level for report
             result = getTDSAppliedInvoices(requestParams);
             Iterator itr = result.getEntityList().iterator();
             
             String natureOfPayment = vendor.getNatureOfPayment();
             String deducteeType = vendor.getDeducteeType();
       
             while (itr.hasNext()) {
                 HashMap hm = (HashMap) itr.next();
                 if(hm.get("TDSAssessableAmount")!=null){
                     totalTaxableAmount += (Double) hm.get("TDSAssessableAmount");
                 }
                 if(hm.get("tdsamount")!=null){
                     totalTdsTobeMade += (Double) hm.get("tdsamount");
                     if(hm.get("TDSPaidFlag")!=null && (Integer)hm.get("TDSPaidFlag")==IndiaComplianceConstants.TDSPAYMENT){
                         tdsDeductedTillDate += (Double) hm.get("tdsamount");
                     }
                     if(hm.get("unpaidtdsamount")!=null){
                         balanceTDStoBeMade += (Double) hm.get("unpaidtdsamount");
                     }
                 }
            }
            
            HashMap data = new HashMap();
             data = searchTDSRecord(tdsnotdeducted,vendor.getID());
             if(data.size() > 0){
                 if(data.containsKey("deductedtilldate") && data.get("deductedtilldate")!=null && !StringUtil.isNullOrEmpty(data.get("deductedtilldate").toString())){
                     tdsDeductedTillDate += Double.parseDouble(data.get("deductedtilldate").toString());
                 }
                 if(data.containsKey("tdstobemade") && data.get("tdstobemade")!=null && !StringUtil.isNullOrEmpty(data.get("tdstobemade").toString())){
                     totalTdsTobeMade += Double.parseDouble(data.get("tdstobemade").toString());
                 }
                 if(data.containsKey("balancetobededucted") && data.get("balancetobededucted")!=null && !StringUtil.isNullOrEmpty(data.get("balancetobededucted").toString())){
                     balanceTDStoBeMade += Double.parseDouble(data.get("balancetobededucted").toString());
                 }
                 if(data.containsKey("totaltaxableamount") && data.get("totaltaxableamount")!=null && !StringUtil.isNullOrEmpty(data.get("totaltaxableamount").toString())){
                     totalTaxableAmount += Double.parseDouble(data.get("totaltaxableamount").toString());
                 }
             }
            data.put("deductedtilldate", tdsDeductedTillDate);
            data.put("tdstobemade", totalTdsTobeMade);
            data.put("totaltaxableamount", totalTaxableAmount);
            data.put("taxableamount", totalTaxableAmount);
            data.put("balancetobededucted", balanceTDStoBeMade > 0 ?balanceTDStoBeMade:0);
            data.put("balancetobemade", balanceTDStoBeMade > 0 ?balanceTDStoBeMade:0);
            data.put("vendorname", vendor.getName());
            data.put("vendorid", vendor.getID());
            data.put("vendorpan", vendor.getPANnumber());
            data.put("vendorpanstatus", vendor.getPanStatus());
            data.put("deducteeType", vendor.getDeducteeType());
            String tdsPayableAccount = "";
            String tdsPayableAccountId = "";
            if(!StringUtil.isNullObject(natureOfPayment)){
                KwlReturnObject nopresult = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), natureOfPayment);
                MasterItem masteritemNOP = (MasterItem) nopresult.getEntityList().get(0);
                if(masteritemNOP != null && !StringUtil.isNullObject(masteritemNOP.getAccID())){
                    KwlReturnObject tdsPayableAccountresult = accountingHandlerDAOobj.getObject(Account.class.getName(), masteritemNOP.getAccID());
                    Account tdsPayableAccountObj = (Account) tdsPayableAccountresult.getEntityList().get(0);
                    if(tdsPayableAccountObj != null){
                        tdsPayableAccountId = tdsPayableAccountObj.getID();
                        tdsPayableAccount = tdsPayableAccountObj.getAccountName();
                    }
                }
            }
            data.put("tdsPayableAccount", tdsPayableAccount);
            data.put("tdsPayableAccountid", tdsPayableAccountId);
            data.put("natureOfPayment", natureOfPayment);
        }
    }
    
    public HashMap searchTDSRecord(List tdsnotdeducted, String vendorId){
        HashMap returnMap = new HashMap();
        for(int vendorCnt = 0; vendorCnt < tdsnotdeducted.size(); vendorCnt++){
            if(tdsnotdeducted.get(vendorCnt)!= null){
                HashMap checkMap = (HashMap) tdsnotdeducted.get(vendorCnt);
                if(checkMap.containsKey("vendorid") && checkMap.get("vendorid")!=null && !StringUtil.isNullOrEmpty(checkMap.get("vendorid").toString()) ){
                    String vendor = checkMap.get("vendorid").toString();
                    if(vendor.equals(vendorId)){
                        returnMap = (HashMap) tdsnotdeducted.get(vendorCnt);
                        break;
                    }
                }
            }
        }
        return returnMap;
    }
    
    public JSONObject calculateCustomerAccuredBalance(List customerLedgerList, HashMap<String, Object> requestParams) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        JSONObject openingJSON = new JSONObject();
        double totalOpeningInBase = 0;
        String gcurrencyid = requestParams.containsKey(Constants.globalCurrencyKey) ? requestParams.get(Constants.globalCurrencyKey).toString() : "";
        String customerId = requestParams.containsKey("invoiceCustomerId") ? requestParams.get("invoiceCustomerId").toString() : "";
        String CustCurrId = requestParams.containsKey("CustCurrId") ? requestParams.get("CustCurrId").toString() : "";
        Boolean isCustomerCurrExport = false;
        Date startDate = (requestParams.containsKey("startDate") && requestParams.get("startDate") != null) ? (Date) requestParams.get("startDate") : new Date();
        String companyid = (String) requestParams.get("companyid");
        isCustomerCurrExport = requestParams.containsKey("isCustomerCurrExport") ? Boolean.parseBoolean(requestParams.get("isCustomerCurrExport").toString()) : false;
        double amountinbase = 0.0;
        String jeId = "";
        String CustomerAccountID = requestParams.containsKey("CustomerAccountID") ? requestParams.get("CustomerAccountID").toString() : "";
        List<JournalEntryDetail> listJEDetail = new ArrayList<>();
                
        for (int i = 0; i < customerLedgerList.size(); i++) {
            Object[] tempCustomerLedger = (Object[]) customerLedgerList.get(i);
            Date jeEntryDate = (Date) tempCustomerLedger[8];
            String invoiceCustomerId = (String) tempCustomerLedger[10];
            
            if (customerId.equals(invoiceCustomerId) && isPeriodWiseOpeningTransaction(jeEntryDate, startDate)) {
                String type = (String) tempCustomerLedger[0];
                String invoiceId = (String) tempCustomerLedger[1]; 
                String currencyid = StringUtil.isNullOrEmpty((String) tempCustomerLedger[5]) ? gcurrencyid : (String) tempCustomerLedger[5]; // if(type=='invoice') ==> invoice.currency, if(type=='receipt') ==> receipt.currency, if(type=='creditnote') ==> creditnote.currency
                double amount = (Double) tempCustomerLedger[6]; 
                double jeEntryExternalCurrencyRate = (Double) tempCustomerLedger[9];
                int openingtransactionFlag = Integer.parseInt(tempCustomerLedger[16].toString());
                jeId = tempCustomerLedger[3] == null ? "" : (String) tempCustomerLedger[3]; // journalentry.id
                boolean isOpeningBalanceTransaction = false;
                if (openingtransactionFlag == 1) {
                    isOpeningBalanceTransaction = true;
                }

                boolean isConversionRateFromCurrencyToBase = false;
                int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempCustomerLedger[17].toString());
                if (conversionRateFromCurrencyToBaseFlag == 1) {
                    isConversionRateFromCurrencyToBase = true;
                }

                HashMap<String, Object> reqMap = new HashMap();
                reqMap.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                reqMap.put(Constants.globalCurrencyKey, requestParams.get(Constants.globalCurrencyKey));
                reqMap.put(Constants.df, requestParams.get(Constants.df));
                reqMap.put(Constants.userdf, requestParams.get(Constants.userdf));
                reqMap.put("invoiceAmountDueFilter", requestParams.get("invoiceAmountDueFilter"));
                reqMap.put("startDate", startDate);
                reqMap.put("asofDate", requestParams.get("asofDate"));
                reqMap.put("isOpeningBalanceTransaction", isOpeningBalanceTransaction);
                reqMap.put("transactionAmount", amount);
                reqMap.put("invoiceId", invoiceId);
                reqMap.put("type", type);

                amount = getAmountOfTransactionForCusromerSOA(reqMap);
                if (amount <= 0) { //if amount is zero then no need to show data in SOA Report so continue with next record
                    continue;
                }
                
                amount = authHandler.round(amount, companyid);
                
                KwlReturnObject bAmt = null;
                if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                }

                amountinbase = (Double) bAmt.getEntityList().get(0);
                
                amountinbase = authHandler.round(amountinbase, companyid);
                
                reqMap.put("type", type);
                reqMap.put("invoiceId", invoiceId);
                reqMap.put("amount", amount);
                reqMap.put("amountinbase", amountinbase);
                reqMap.put("CustomerAccountID", CustomerAccountID);
                reqMap.put("jeId", jeId);
                reqMap.put("isAccured", true); //
                double[] amountArray = getSOACustomerAmountFromJEDetail(reqMap, listJEDetail);

                amount = amountArray[0];
                amountinbase = amountArray[1];
                
                if (isCustomerCurrExport) {
                    double custCurrToBaseExchRate = 1 / accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, CustCurrId, jeEntryDate);
                    if (accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, CustCurrId, jeEntryDate) == 0.0) {
                        custCurrToBaseExchRate = jeEntryExternalCurrencyRate;
                    }
                    if (gcurrencyid.equals(CustCurrId)) {
                        custCurrToBaseExchRate = 1;
                    } else if (currencyid.equals(CustCurrId)) {
                        custCurrToBaseExchRate = 1 / jeEntryExternalCurrencyRate;
                    }

                    if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                        custCurrToBaseExchRate = 1 / custCurrToBaseExchRate;
                    }

                    KwlReturnObject CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountinbase, CustCurrId, jeEntryDate, custCurrToBaseExchRate);
                    amountinbase = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
                } 
                if (type.equalsIgnoreCase("Customer Invoice") || type.equalsIgnoreCase("Sales Invoice") || type.equalsIgnoreCase("Payment Made") || type.equalsIgnoreCase("Debit Note") || type.equalsIgnoreCase(Constants.DISHONOURED_RECEIVE_PAYMENT)) {
                    //debit type account
                    totalOpeningInBase += amountinbase;
                } else if(!type.equalsIgnoreCase("Cash Sale")) { // We are not adding cash sale in total amount in base For SOA Accrued Amount Calculation. ERP-40682 / SDP-15702 
                    //Credit type account
                    totalOpeningInBase -= amountinbase;
                }
            }
        }
        for (JournalEntryDetail jeDetail : listJEDetail) {
            if (jeDetail.isDebit()) {
                totalOpeningInBase = totalOpeningInBase - jeDetail.getAmountinbase();
            } else {
                totalOpeningInBase = totalOpeningInBase + jeDetail.getAmountinbase();
            }
        }
        openingJSON.put("type", "Accrued Balance");
        openingJSON.put("debitAmount", "");
        openingJSON.put("creditAmount", "");
        openingJSON.put("balanceAmount", "");
        openingJSON.put("balanceAmountInBase", authHandler.round(totalOpeningInBase, companyid));
        if (totalOpeningInBase == 0) {//Nor Debit nor Credit
            openingJSON.put("debitAmountInBase", 0);
            openingJSON.put("creditAmountInBase", 0);
        } else if (totalOpeningInBase > 0) {// Debit
            openingJSON.put("debitAmountInBase", Math.abs(authHandler.round(totalOpeningInBase, companyid)));
            openingJSON.put("creditAmountInBase", "");
        } else { // Credit
            openingJSON.put("debitAmountInBase", "");
            openingJSON.put("creditAmountInBase", Math.abs(authHandler.round(totalOpeningInBase, companyid)));
        }
        return openingJSON;
    }
    public boolean isPeriodWiseOpeningTransaction(Date transactionDate, Date startDate) throws SessionExpiredException, ParseException {
        String transDate = authHandler.getDateOnlyFormat().format(transactionDate);
        transactionDate = authHandler.getDateOnlyFormat().parse(transDate);
        return transactionDate.before(startDate);
    }
       public double getAmountOfTransactionForCusromerSOA(HashMap<String, Object> requestParams) throws SessionExpiredException, ParseException, ServiceException {
        String companyid = (String) requestParams.get(Constants.companyKey);
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        boolean invoiceAmountDueFilter = (requestParams.containsKey("invoiceAmountDueFilter") && requestParams.get("invoiceAmountDueFilter") != null) ? Boolean.parseBoolean(requestParams.get("invoiceAmountDueFilter").toString()) : false;
        boolean isOpeningBalanceTransaction = (requestParams.containsKey("isOpeningBalanceTransaction") && requestParams.get("isOpeningBalanceTransaction") != null) ? Boolean.parseBoolean(requestParams.get("isOpeningBalanceTransaction").toString()) : false;
        double amount = (requestParams.containsKey("transactionAmount") && requestParams.get("transactionAmount") != null) ? (Double) (requestParams.get("transactionAmount")) : 0;
        String type = (requestParams.containsKey("type") && requestParams.get("type") != null) ? requestParams.get("type").toString() : "";
        String invoiceId = (requestParams.containsKey("invoiceId") && requestParams.get("invoiceId") != null) ? requestParams.get("invoiceId").toString() : "";
        Date startDate = (requestParams.containsKey("startDate") && requestParams.get("startDate") != null) ? (Date) requestParams.get("startDate") : new Date();
        Date asofDate = (requestParams.containsKey("asofDate") && requestParams.get("asofDate") != null) ? (Date) requestParams.get("asofDate") : new Date();

        if (!invoiceAmountDueFilter) {
//            if (isOpeningBalanceTransaction) {   // if "select transaction" filter in SOA is "all" and transaction is openoing type .In this case on dated amount will be calculated for opening invoices only                                                                
//                Calendar startCal = Calendar.getInstance();
//                startCal.setTime(startDate);
//                String sstart = authHandler.getDateOnlyFormat().format(startCal.getTime());
//                Date asOfDate = authHandler.getDateOnlyFormat().parse(sstart);
//                //Date asOfDate = startCal.getTime();//this variable used for calculating amount due upto that date
//                if (!type.equalsIgnoreCase("Payment Received")) {
//                    amount = getAsOnDateAmountDueForTransactions(requestParams, asOfDate, invoiceId, type, amount);
//                }
//            } else if (type.equalsIgnoreCase("Payment Received")) { //Removing bank charges from total amount of payment if present
//                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), invoiceId);
//                Receipt receipt = (Receipt) objItr.getEntityList().get(0);
////                if (receipt.getBankChargesAmount() > 0 && (receipt.getJournalEntryForBankCharges() == null || StringUtil.isNullOrEmpty(receipt.getJournalEntryForBankCharges().toString()))) {
////                    amount -= receipt.getBankChargesAmount();
////                }
////                if (receipt.getBankInterestAmount() > 0 && (receipt.getJournalEntryForBankInterest() == null || StringUtil.isNullOrEmpty(receipt.getJournalEntryForBankInterest().toString()))) {
////                    amount -= receipt.getBankInterestAmount();
////                }
//            }
//        } else { //if "select transaction" filter in SOA is "Outstanding". then only document will come which has amount due 
            double documentAmtDue = 0;
            if (type.equalsIgnoreCase("Cash Sale")) {//Cash Sale against customer amount due is always zero
                documentAmtDue = 0;
            } else if (type.equalsIgnoreCase("Payment Made")) { // payment recived agaisnt customer can be due in case of refudnd
                documentAmtDue = 0;
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), invoiceId);
                Payment payment = (Payment) objItr.getEntityList().get(0);
                if (!StringUtil.isNullOrEmpty(payment.getCustomer()) && (payment.getAdvanceDetails() != null && !payment.getAdvanceDetails().isEmpty() && !payment.isIsDishonouredCheque())) {// Payment gaistt customer can only be due when it made against Refund 
                    HashMap<String, Object> reqParams1 = new HashMap();
                    reqParams1.put("companyid", companyid);
                    reqParams1.put(Constants.df, df);
                    reqParams1.put("asofdate", df.format(asofDate));
                    documentAmtDue = AccGoodsReceiptServiceHandler.getPaymentAmountDue(payment, reqParams1, accVendorPaymentobj);
                }
            } else if (type.equalsIgnoreCase("Payment Received")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), invoiceId);
                Receipt receipt = (Receipt) objItr.getEntityList().get(0);
                if(!receipt.isIsDishonouredCheque()){
                    HashMap<String, Object> reqParams1 = new HashMap();
                    reqParams1.put("companyid", companyid);
                    reqParams1.put(Constants.df, df);
                    reqParams1.put("asofdate", df.format(asofDate));
                    documentAmtDue = AccInvoiceServiceHandler.getReceiptAmountDue(receipt, reqParams1, accReceiptDao);
                }

            } else { //other types are 1.Sales Invoice, 2.Credit Note, 3.Debit Note which are coming in this lese part
                documentAmtDue = getAsOnDateAmountDueForTransactions(requestParams, asofDate, invoiceId, type, amount);
            }
            amount = documentAmtDue;
        }
        return amount;
    }
 public double getAsOnDateAmountDueForTransactions(HashMap<String, Object> reqMap, Date asOfDate, String documentId, String type, double documentAmt) throws ServiceException {
        double amtDue = 0;
        DateFormat df = (DateFormat) reqMap.get(Constants.df);
        String companyid = (String) reqMap.get("companyid");
        String asofDate = df.format(asOfDate);
        if (!StringUtil.isNullOrEmpty(type)) {
            if (type.equalsIgnoreCase("Sales Invoice")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), documentId);
                Invoice invoice = (Invoice) objItr.getEntityList().get(0);
                if (invoice != null) {
                    if (invoice.isIsOpeningBalenceInvoice() && invoice.getOpeningBalanceAmountDue() == invoice.getOriginalOpeningBalanceAmount()) {
                        amtDue = invoice.getOriginalOpeningBalanceAmount();
                    } else if (!invoice.isIsOpeningBalenceInvoice() && invoice.isNormalInvoice() && invoice.getInvoiceamount() == invoice.getInvoiceamountdue()) {
                        amtDue = invoice.getInvoiceamountdue();
                    } else {
                        reqMap.put("invoiceid", documentId);
                        reqMap.put("asofdate", asofDate);
                        List ll = accInvoiceCommon.getAmountDue_Discount(reqMap, invoice);
                        amtDue = (Double) ll.get(0);
                    }
                }
            } else if (type.equalsIgnoreCase("Purchase Invoice")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), documentId);
                GoodsReceipt goodsReceipt = (GoodsReceipt) objItr.getEntityList().get(0);
                if (goodsReceipt != null) {
                    if (goodsReceipt.isIsOpeningBalenceInvoice() && goodsReceipt.getOpeningBalanceAmountDue() == goodsReceipt.getOriginalOpeningBalanceAmount()) {
                        amtDue = goodsReceipt.getOriginalOpeningBalanceAmount();
                    } else if (!goodsReceipt.isIsOpeningBalenceInvoice() && goodsReceipt.isNormalInvoice() && goodsReceipt.getInvoiceAmount() == goodsReceipt.getInvoiceamountdue()) {
                        amtDue = goodsReceipt.getInvoiceamountdue();
                    } else {
                        List ll = Collections.EMPTY_LIST;
                        reqMap.put("grid", documentId);
                        reqMap.put("asofdate", asofDate);
                        if (goodsReceipt.isIsExpenseType()) {
                            ll = accGoodsReceiptCommon.getExpGRAmountDue(reqMap, goodsReceipt);
                        } else {
                            ll = accGoodsReceiptCommon.getGRAmountDue(reqMap, goodsReceipt);
                        }
                        amtDue = (Double) ll.get(1);
                    }
                }
            } else if (type.equalsIgnoreCase("Debit Note")) {
                double dnAmount = 0;
                double invReturnAmt = 0;
                reqMap.put("debitnoteid", documentId);
                reqMap.put("asofdate", asofDate);
                KwlReturnObject dnpResult = accReceiptDao.getDebitNotePaymentDetail(reqMap);
                if (!dnpResult.getEntityList().isEmpty()) {
                    Iterator dnpItr = dnpResult.getEntityList().iterator();
                    while (dnpItr.hasNext()) {
                        Object[] objects = (Object[]) dnpItr.next();
                        double exchangeratefortransaction = objects[0] != null ? (Double) objects[0] : 1.0;
                        double dnPaidAmtInReceiptCurrency = objects[1] != null ? (Double) objects[1] : 0.0;
                        dnAmount += authHandler.round(dnPaidAmtInReceiptCurrency / exchangeratefortransaction, companyid);
                    }
                }
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), documentId);
                DebitNote note = (DebitNote) objItr.getEntityList().get(0);
                if (note != null) {
                    KwlReturnObject dnresult = accDebitNoteobj.getDNRowsFromVendorInvoice(reqMap);
                    List<DebitNoteDetail> rows = dnresult.getEntityList();
                    for (DebitNoteDetail detail : rows) {
                        Discount disc = detail.getDiscount();
                        if (disc != null) {
                            invReturnAmt += disc.getDiscountValue();
                        }
                    }
                }
                double linkAmount = 0;
                KwlReturnObject linkResult = accReceiptDao.getLinkDetailReceiptToDebitNote(reqMap);
                List<LinkDetailReceiptToDebitNote> detail = linkResult.getEntityList();
                for (LinkDetailReceiptToDebitNote ldr : detail) {
                    linkAmount += ldr.getAmountInDNCurrency();
                }
                
                double cndnLinkedAmt = 0;
                if(note != null){
                    boolean isCustomerTransaction = note.getCustomer() != null? true:false;
                    cndnLinkedAmt = getCNDNAmountLinkedTogether(isCustomerTransaction,reqMap);
                }

                amtDue = documentAmt - (dnAmount + invReturnAmt + linkAmount + cndnLinkedAmt);
            } else if (type.equalsIgnoreCase("Credit Note")) {
                double cnAmount = 0;
                double invReturnAmt = 0;
                reqMap.put("creditnoteid", documentId);
                reqMap.put("asofdate", asofDate);
                KwlReturnObject cnpResult = accPaymentDAOobj.getCreditNotePaymentDetails(reqMap);
                if (!cnpResult.getEntityList().isEmpty()) {
                    Iterator cnpItr = cnpResult.getEntityList().iterator();
                    while (cnpItr.hasNext()) {
                        Object[] objects = (Object[]) cnpItr.next();
                        double exchangeratefortransaction = objects[0] != null ? (Double) objects[0] : 1.0;
                        double cnPaidAmtInReceiptCurrency = objects[1] != null ? (Double) objects[1] : 0.0;
                        cnAmount += authHandler.round(cnPaidAmtInReceiptCurrency / exchangeratefortransaction, companyid);
                    }
                }
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), documentId);
                CreditNote note = (CreditNote) objItr.getEntityList().get(0);
                if (note != null) {
                    KwlReturnObject result = accCreditNoteobj.getCNRowsFromInvoice(reqMap);
                    List<CreditNoteDetail> rows = result.getEntityList();
                    for (CreditNoteDetail detail : rows) {
                        Discount disc = detail.getDiscount();
                        if (disc != null) {
                            invReturnAmt += disc.getDiscountValue();
                        }
                    }
                }
                double linkAmount = 0;
                KwlReturnObject cnLinkResult = accVendorPaymentobj.getLinkDetailPaymentToCreditNote(reqMap);
                List<LinkDetailPaymentToCreditNote> linkDetail = cnLinkResult.getEntityList();
                for (LinkDetailPaymentToCreditNote ldr : linkDetail) {
                    linkAmount += ldr.getAmountInCNCurrency();
                }
                
                double cndnLinkedAmt = 0;
                if(note != null){
                    boolean isCustomerTransaction = note.getCustomer() != null? true:false;
                    cndnLinkedAmt = getCNDNAmountLinkedTogether(isCustomerTransaction,reqMap);
                }

                amtDue = documentAmt - (cnAmount + invReturnAmt + linkAmount + cndnLinkedAmt);
            }
        }
        amtDue = authHandler.round(amtDue, companyid);
        return amtDue;
    }
 
    private double getCNDNAmountLinkedTogether(boolean isCustomerTransaction, HashMap<String, Object> reqMap) throws ServiceException {
        double cndnLinkedAmt = 0;
        String companyid = (String) reqMap.get("companyid");
        if (isCustomerTransaction) {// If CN against Customer
            KwlReturnObject result = accCreditNoteobj.getCNRowsFromDebitNote(reqMap);
            List<CreditNoteDetail> rows = result.getEntityList();
            for (CreditNoteDetail creditNoteDetail : rows) {
                double exchangeRate = creditNoteDetail.getExchangeRateForTransaction();
                Discount disc = creditNoteDetail.getDiscount();
                if (disc != null) {
                    //When currency of CN and DN is different, if currency is same then exchangeRate=1, case exchangeRate!=0 is applied for avaoiding AE
                    if (exchangeRate != 1 && exchangeRate != 0) {
                        cndnLinkedAmt += authHandler.round(disc.getDiscountValue() / exchangeRate, companyid);
                    } else {
                        cndnLinkedAmt += disc.getDiscountValue();
                    }
                }
            }
        } else { // If CN against Vendor
            KwlReturnObject dnresult = accDebitNoteobj.getDNRowsFromCreditNote(reqMap);
            List<DebitNoteDetail> rows = dnresult.getEntityList();
            for (DebitNoteDetail dndetail : rows) {
                double exchangeRate = dndetail.getExchangeRateForTransaction();
                Discount disc = dndetail.getDiscount();
                if (disc != null) {
                    //When currency of CN and DN is different, if currency is same then exchangeRate=1, case exchangeRate!=0 is applied for avaoiding AE
                    if (exchangeRate != 1 && exchangeRate != 0) {
                        cndnLinkedAmt += authHandler.round(disc.getDiscountValue() / exchangeRate, companyid);
                    } else {
                        cndnLinkedAmt += disc.getDiscountValue();
                    }
                }
            }
        }
        return cndnLinkedAmt;
    }
 
 public JSONObject calculateVendorAccuredBalance(List vendorLedgerList, HashMap<String, Object> requestParams) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        JSONObject openingJSON = new JSONObject();
        double totalOpeningInBase = 0;
        String companyid = (String) requestParams.get("companyid");
        String gcurrencyid = requestParams.containsKey(Constants.globalCurrencyKey) ? requestParams.get(Constants.globalCurrencyKey).toString() : "";
        String vendorId = requestParams.containsKey("invoiceVendorId") ? requestParams.get("invoiceVendorId").toString() : "";
        String vendorCurrId = requestParams.containsKey("vendorCurrId") ? requestParams.get("vendorCurrId").toString() : "";
        Boolean isVendorCurrExport = false;
                
        isVendorCurrExport = requestParams.containsKey("isVendorCurrExport") ? Boolean.parseBoolean(requestParams.get("isVendorCurrExport").toString()) : false;
        Date startDate = (requestParams.containsKey("startDate") && requestParams.get("startDate") != null) ? (Date) requestParams.get("startDate") : new Date();

        double amountinbase = 0.0;
        
        String jeId = "";
        List<JournalEntryDetail> listJEDetail = new ArrayList<>();
        String VendorAccountID = requestParams.containsKey("VendorAccountID") ? requestParams.get("VendorAccountID").toString() : "";
      
        for (int i = 0; i < vendorLedgerList.size(); i++) {
            Object[] tempVendorLedger = (Object[]) vendorLedgerList.get(i);
            Date jeEntryDate = (Date) tempVendorLedger[8];
            String invoiceVendorId = (String) tempVendorLedger[10];

            if (vendorId.equals(invoiceVendorId) && isPeriodWiseOpeningTransaction(jeEntryDate, startDate)) {

                String type = (String) tempVendorLedger[0];
                String invoiceId = (String) tempVendorLedger[1];
                String currencyid = StringUtil.isNullOrEmpty((String) tempVendorLedger[5]) ? gcurrencyid : (String) tempVendorLedger[5];
                double amount = (Double) tempVendorLedger[6];
                double jeEntryExternalCurrencyRate = (Double) tempVendorLedger[9];
                int openingtransactionFlag = Integer.parseInt(tempVendorLedger[16].toString());
                jeId = tempVendorLedger[3] == null ? "" : (String) tempVendorLedger[3]; // journalentry.id
                boolean isOpeningBalanceTransaction = false;
                if (openingtransactionFlag == 1) {
                    isOpeningBalanceTransaction = true;
                }

                boolean isConversionRateFromCurrencyToBase = false;
                int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempVendorLedger[17].toString());
                if (conversionRateFromCurrencyToBaseFlag == 1) {
                    isConversionRateFromCurrencyToBase = true;
                }

                HashMap<String, Object> reqMap = new HashMap();
                reqMap.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                reqMap.put(Constants.globalCurrencyKey, requestParams.get(Constants.globalCurrencyKey));
                reqMap.put(Constants.df, requestParams.get(Constants.df));
                reqMap.put(Constants.userdf, requestParams.get(Constants.userdf));
                reqMap.put("invoiceAmountDueFilter", requestParams.get("invoiceAmountDueFilter"));
                reqMap.put("startDate", startDate);
                reqMap.put("asofDate", requestParams.get("asofDate"));
                reqMap.put("isOpeningBalanceTransaction", isOpeningBalanceTransaction);
                reqMap.put("transactionAmount", amount);
                reqMap.put("invoiceId", invoiceId);
                reqMap.put("type", type);

                amount = getAmountOfTransactionForVendorSOA(reqMap);
                if (amount <= 0) { //if amount is zero then no need to show data in SOA Report so continue with next record
                    continue;
                }

                amount = authHandler.round(amount, companyid);
                KwlReturnObject bAmt = null;
                if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                }
                amountinbase = (Double) bAmt.getEntityList().get(0);

                amountinbase = authHandler.round(amountinbase, companyid);
                
                reqMap.put("type", type);
                reqMap.put("invoiceId", invoiceId);
                reqMap.put("amount", amount);
                reqMap.put("amountinbase", amountinbase);
                reqMap.put("jeId", jeId);
                reqMap.put("VendorAccountID",VendorAccountID);
                reqMap.put("isAccured",true);

                double[] amountArray = getSOAVendorAmountFromJEDetail(reqMap, listJEDetail);

                amount = amountArray[0];
                amountinbase = amountArray[1];
                
                if (isVendorCurrExport) {
                    double custCurrToBaseExchRate = 1 / accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, vendorCurrId, jeEntryDate);
                    if (accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, vendorCurrId, jeEntryDate) == 0.0) {
                        custCurrToBaseExchRate = jeEntryExternalCurrencyRate;
                    }                    
                    if (gcurrencyid.equals(vendorCurrId)) {
                        custCurrToBaseExchRate = 1;
                    } else if (currencyid.equals(vendorCurrId)) {
                        custCurrToBaseExchRate = 1 / jeEntryExternalCurrencyRate;
                    }

                    if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                        custCurrToBaseExchRate = 1/custCurrToBaseExchRate;
                    }
                    
                    KwlReturnObject CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountinbase, vendorCurrId, jeEntryDate, custCurrToBaseExchRate);
                    amountinbase = (Double) CustCurrencyTotalAmount.getEntityList().get(0);

                } 
                    
                if (type.equalsIgnoreCase("Vendor Invoice") || type.equalsIgnoreCase("Purchase Invoice") || type.equalsIgnoreCase("Payment Received") || type.equalsIgnoreCase("Credit Note") || type.equalsIgnoreCase(Constants.DISHONOURED_MAKE_PAYMENT)) {
                    //Credit type account   
                    totalOpeningInBase -= amountinbase;
                } else if(!type.equalsIgnoreCase("Cash Purchase")) { // We are not adding cash Purchase in total amount in base For SOA Accrued Amount Calculation. ERP-40682 / SDP-15702 
                    //Debit type account
                    totalOpeningInBase += amountinbase;
                }
            }
        }
        for (JournalEntryDetail jeDetail : listJEDetail) {
            if (jeDetail.isDebit()) {
                totalOpeningInBase = totalOpeningInBase - jeDetail.getAmountinbase();
            } else {
                totalOpeningInBase = totalOpeningInBase + jeDetail.getAmountinbase();
            }
        }
        
        openingJSON.put("type", "Accrued Balance");
        openingJSON.put("debitAmount", "");
        openingJSON.put("creditAmount", "");
        openingJSON.put("balanceAmount", "");
        openingJSON.put("balanceAmountInBase", authHandler.round(totalOpeningInBase, companyid));
        if (totalOpeningInBase == 0) {//Nor Debit nor Credit
            openingJSON.put("debitAmountInBase", 0);
            openingJSON.put("creditAmountInBase", 0);
        } else if (totalOpeningInBase > 0) {// Debit
            openingJSON.put("debitAmountInBase", Math.abs(authHandler.round(totalOpeningInBase, companyid)));
            openingJSON.put("creditAmountInBase", "");
        } else { // Credit
            openingJSON.put("debitAmountInBase", "");
            openingJSON.put("creditAmountInBase", Math.abs(authHandler.round(totalOpeningInBase, companyid)));
        }
        return openingJSON;
    }

    public double getAmountOfTransactionForVendorSOA(HashMap<String, Object> requestParams) throws SessionExpiredException, ParseException, ServiceException {
        String companyid = (String) requestParams.get(Constants.companyKey);
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        boolean invoiceAmountDueFilter = (requestParams.containsKey("invoiceAmountDueFilter") && requestParams.get("invoiceAmountDueFilter") != null) ? Boolean.parseBoolean(requestParams.get("invoiceAmountDueFilter").toString()) : false;
        boolean isOpeningBalanceTransaction = (requestParams.containsKey("isOpeningBalanceTransaction") && requestParams.get("isOpeningBalanceTransaction") != null) ? Boolean.parseBoolean(requestParams.get("isOpeningBalanceTransaction").toString()) : false;
        double amount = (requestParams.containsKey("transactionAmount") && requestParams.get("transactionAmount") != null) ? (Double) (requestParams.get("transactionAmount")) : 0;
        String type = (requestParams.containsKey("type") && requestParams.get("type") != null) ? requestParams.get("type").toString() : "";
        String invoiceId = (requestParams.containsKey("invoiceId") && requestParams.get("invoiceId") != null) ? requestParams.get("invoiceId").toString() : "";
        Date startDate = (requestParams.containsKey("startDate") && requestParams.get("startDate") != null) ? (Date) requestParams.get("startDate") : new Date();
        Date asofDate = (requestParams.containsKey("asofDate") && requestParams.get("asofDate") != null) ? (Date) requestParams.get("asofDate") : new Date();
        
        if (!invoiceAmountDueFilter) {
//            if (isOpeningBalanceTransaction) {  // if "select transaction" filter in SOA is "all" and transaction is openoing type .In this case amountdue calculated up to one day before of start date. 
//                if (!type.equalsIgnoreCase("Payment Made")) {
//                    Calendar startCal = Calendar.getInstance();
//                    startCal.setTime(startDate);
//                    startCal.add(Calendar.DATE, 0);
//                    String sstart = authHandler.getDateOnlyFormat().format(startCal.getTime());
//                    Date asOfDate = authHandler.getDateOnlyFormat().parse(sstart);
////                    amount = getAsOnDateAmountDueForTransactions(requestParams, asOfDate, invoiceId, type, amount);
//                    amount = amount;
//                }
//            } else if (type.equalsIgnoreCase("Payment Made")) {
//                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), invoiceId);
//                    Payment payment = (Payment) objItr.getEntityList().get(0);
//                if (payment.getBankChargesAmount() > 0 && (payment.getJournalEntryForBankCharges() == null || StringUtil.isNullOrEmpty(payment.getJournalEntryForBankCharges().toString()))) {
//                    amount -= payment.getBankChargesAmount();
//                }
//                if (payment.getBankInterestAmount() > 0 && (payment.getJournalEntryForBankInterest() == null || StringUtil.isNullOrEmpty(payment.getJournalEntryForBankInterest().toString()))) {
//                    amount -= payment.getBankInterestAmount();
//                }
//        }
//        } else { //if "select transaction" filter in SOA is "Outstanding". then only document will come which has amount due 
            double documentAmtDue = 0;
            if (type.equalsIgnoreCase("Cash Purchase")) {//Cash Purchse against vendor amount due is always zero.
                documentAmtDue = 0;
            } else if (type.equalsIgnoreCase("Payment Received")) { // For payment recived against vendor can be due only in case of refund
                documentAmtDue = 0;
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), invoiceId);
                Receipt receipt = (Receipt) objItr.getEntityList().get(0);
                if (receipt != null && !StringUtil.isNullOrEmpty(receipt.getVendor()) && receipt.getReceiptAdvanceDetails() != null && !receipt.getReceiptAdvanceDetails().isEmpty() && !receipt.isIsDishonouredCheque()) {//receipt against vendor receipt
                    HashMap<String, Object> reqParams1 = new HashMap();
                    reqParams1.put(Constants.companyKey, companyid);
                    reqParams1.put(Constants.df, df);
                    reqParams1.put("asofdate", df.format(asofDate));
                    documentAmtDue = AccInvoiceServiceHandler.getReceiptAmountDue(receipt, reqParams1, accReceiptDao);
                }
            } else if (type.equalsIgnoreCase("Payment Made")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), invoiceId);
                Payment payment = (Payment) objItr.getEntityList().get(0);
                if (!payment.isIsDishonouredCheque()) {
                    HashMap<String, Object> reqParams1 = new HashMap();
                    reqParams1.put(Constants.companyKey, companyid);
                    reqParams1.put(Constants.df, df);
                    reqParams1.put("asofdate", df.format(asofDate));
                    documentAmtDue = AccGoodsReceiptServiceHandler.getPaymentAmountDue(payment, reqParams1, accVendorPaymentobj);
                }
            } else { //other types are 1.Purchase Invoice, 2.Credit Note, 3.Debit Note which are coming in this lese part
                documentAmtDue = getAsOnDateAmountDueForTransactions(requestParams, asofDate, invoiceId, type, amount);
            }
            amount = documentAmtDue;
        }
        return amount;
    }
    
    
    /*-------------Function is used to return document status based on amountdue consumed as per "as of date"---------------*/
    public String getDocumentStatusForVendorAccountStatement(HashMap<String, Object> requestParams) throws SessionExpiredException, ParseException, ServiceException {

        boolean invoiceAmountDueFilter = true;
        if (requestParams.containsKey("invoiceAmountDueFilter") && (!StringUtil.isNullOrEmpty("invoiceAmountDueFilter"))) {
            invoiceAmountDueFilter = Boolean.parseBoolean(requestParams.get("invoiceAmountDueFilter").toString());
        }
        
        requestParams.put("invoiceAmountDueFilter", false);
        double amountdueForSelectedAsofdate = getAmountOfTransactionForVendorSOA(requestParams);
        
        String documentStatus = "Open";
        /*------If amount Due is zero then staus of document should be Closed otherwise Open--------*/
        if (amountdueForSelectedAsofdate <= 0) {
            documentStatus = "Closed";
        }
        
        requestParams.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
        
        return documentStatus;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public Map<String, Object> getSubLedgerToExport(JSONObject paramJobj, JSONArray dataArr) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        List<GeneralLedger> generalLedgerList = new ArrayList<GeneralLedger>();
        Map<String, Object> financeDetailsMap = new HashMap<String, Object>();
        FinanceDetails financeDetails = new FinanceDetails();
        ArrayList<FinanceDetails> financeDetailsList = new ArrayList<FinanceDetails>();

        try {
            String companyid = paramJobj.optString(Constants.companyKey);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            financeDetails.setName(company.getCompanyName());
            financeDetails.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            financeDetails.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            financeDetails.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            financeDetails.setCurrencyinword(company.getCurrency().getName() != null ? company.getCurrency().getName() : "");
            
            try {
                SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                String startDate = !StringUtil.isNullOrEmpty(paramJobj.optString("startDate","")) ? paramJobj.optString("startDate","") : paramJobj.optString("startdate","");
                DateFormat df2 = authHandler.getUserDateFormatterWithoutTimeZone(paramJobj.optString(Constants.userdateformat));
                String endDate1 = df.format(authHandler.getGlobalDateFormat().parse(paramJobj.optString("enddate")));
                Calendar c = Calendar.getInstance();
                c.setTime(df.parse(endDate1)); // number of days to substract
                c.add(Calendar.DATE, 0);
                endDate1 = df.format(c.getTime());
                SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                String startDate2 = df2.format(sdf.parse(startDate));
                String endDate2 = df2.format(sdf.parse(paramJobj.optString("enddate")));
                String date1 = "From Date : " + startDate2 + ",To Date : " + endDate2;
                financeDetails.setDateRange(date1);

                KwlReturnObject compAccPrefResult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compAccPrefResult.getEntityList().get(0);
                String fiscalstart = df2.format(companyAccountPreferences.getFinancialYearFrom());
                Calendar c1 = Calendar.getInstance();
                c1.setTime(df2.parse(fiscalstart));
                c1.add(Calendar.YEAR, 1); // number of years to add
                c1.add(Calendar.DATE, -1);  //Check this line-VP
                String fiscalend = df2.format(c1.getTime());
                String accPeriod = "Accounting Period : " + fiscalstart + " - " + fiscalend;
//                financeDetails.setAccountigperiod(accPeriod);   //to calculate financial year.
                if(paramJobj.get("filename").equals("General Ledger Report_v1")){
                    financeDetails.setReportname("General Ledger Report");
                }else{
                    financeDetails.setReportname("Group Detail Report");
                }
            } catch (ParseException ex) {
                Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            paramJobj.put("showAccountsInGroup", false);
            getGroupWiseGLReport(paramJobj, dataArr ,generalLedgerList);

//            Collections.sort(generalLedgerList, new SubLedgerComparator());
            ListIterator<GeneralLedger> glList = generalLedgerList.listIterator();
            String firstHeader = "";
            while (glList.hasNext()) {
                GeneralLedger g = glList.next();
                if (g.getHeaderString().equals("")) {
                    continue;
                } else {
                    firstHeader = g.getHeaderString();
                    break;
                }
            }
            ListIterator<GeneralLedger> glList1 = generalLedgerList.listIterator();
            while (glList1.hasNext()) {
                GeneralLedger g = glList1.next();
                if (g.getHeaderString().equals("") && g.getDesc().equals("No Transactions")) {
                    g.setHeaderString(firstHeader);
                } else {
                    continue;
                }
            }
            financeDetailsList.add(financeDetails);
            financeDetailsMap.put("datasource", new JRBeanCollectionDataSource(financeDetailsList));
            financeDetailsMap.put("GeneralLedgerSubReportData", new JRBeanCollectionDataSource(generalLedgerList));
            financeDetailsMap.put("format", "pdf");
            financeDetailsMap.put("address", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
        } catch (JSONException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return financeDetailsMap;
    }
    
    @Override
    public Map<String, Object> getGeneralLedgerToExportPDFSummary(JSONObject jsonObject, JSONArray dataArr) throws ServiceException, SessionExpiredException {
        Map SummaryLevelPDF = new HashMap();
        List rows = new ArrayList();
        Map row = Collections.EMPTY_MAP;
        String companyid = jsonObject.optString(Constants.companyKey);
        FinanceDetails financeDetails = new FinanceDetails();
        ArrayList<FinanceDetails> financeDetailsList = new ArrayList<FinanceDetails>();

        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
        Company company = (Company) cmpresult.getEntityList().get(0);

        financeDetails.setName(company.getCompanyName());
        financeDetails.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
        financeDetails.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
        financeDetails.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
        financeDetails.setCurrencyinword(company.getCurrency().getName() != null ? company.getCurrency().getName() : "");
        financeDetails.setReportname("General Ledger Report");
        String companyCurrencyCode = company.getCurrency().getCurrencyCode();
        try {
            for (int itr = 0; itr <= dataArr.length() - 1; itr++) {
                JSONObject rowObj = new JSONObject();
                row = new HashMap();
                double openingAmount, openingAmountInBase, periodAmountInBase, endingAmountInBase;
                rowObj = dataArr.getJSONObject(itr);
                row.put("accname", rowObj.optString("accountname"));
                row.put("accgroup", rowObj.optString("accountgroupname"));
                row.put("acccode", rowObj.optString("accountcode"));
                row.put("aliascode", rowObj.optString("aliascode"));
                String creationDate = rowObj.optString("creationDate");
                SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy");
                DateFormat df2 = authHandler.getUserDateFormatterWithoutTimeZone(jsonObject.optString(Constants.userdateformat));
                creationDate = df2.format(sdf.parse(creationDate));
                row.put("creationDate", creationDate);
                row.put("currency", rowObj.optString("currencyname"));
                openingAmount = rowObj.optDouble("openingbalanceinaccountcurrency", 0.0);
                openingAmount = authHandler.round(openingAmount, companyid);
                String openingAmountString = null;
                String openingBalanceType = null;
                String openingAmountInBaseString = null;
                String periodAmountInBaseString = null;
                String endingAmountInBaseString = null;
                if (openingAmount < 0) {
                    openingAmountString = "(" + rowObj.optString("currencyCode") + " " + authHandler.formattedCommaSeparatedAmount(openingAmount * (-1), companyid) + ")";
                    openingBalanceType = "Credit";
                } else {
                    openingAmountString = rowObj.optString("currencyCode") + " " + authHandler.formattedCommaSeparatedAmount(openingAmount, companyid);
                    openingBalanceType = openingAmount == 0.0 ? "N/A" : "Debit";

                }
                row.put("openingAmount", openingAmountString);
                row.put("openingBalanceType", openingBalanceType);

                openingAmountInBase = rowObj.optDouble("openingamount");
                if (openingAmountInBase < 0) {
                    openingAmountInBaseString = "(" + companyCurrencyCode + " " + authHandler.formattedCommaSeparatedAmount(openingAmountInBase * (-1), companyid) + ")";
                } else {
                    openingAmountInBaseString = companyCurrencyCode + " " + authHandler.formattedCommaSeparatedAmount(openingAmountInBase, companyid);
                }

                row.put("openingAmountInBase", openingAmountInBaseString);

                periodAmountInBase = rowObj.optDouble("periodamount");
                if (periodAmountInBase < 0) {
                    periodAmountInBaseString = "(" + companyCurrencyCode + " " + authHandler.formattedCommaSeparatedAmount(periodAmountInBase * (-1), companyid) + ")";
                } else {
                    periodAmountInBaseString = companyCurrencyCode + " " + authHandler.formattedCommaSeparatedAmount(periodAmountInBase, companyid);
                }
                row.put("periodAmountInBase", periodAmountInBaseString);

                endingAmountInBase = rowObj.optDouble("endingamount");
                if (endingAmountInBase < 0) {
                    endingAmountInBaseString = "(" + companyCurrencyCode + " " + authHandler.formattedCommaSeparatedAmount((endingAmountInBase * (-1)), companyid) + ")";
                } else {
                    endingAmountInBaseString = companyCurrencyCode + " " + authHandler.formattedCommaSeparatedAmount(endingAmountInBase, companyid);
                }
                row.put("endingAmountInBase", endingAmountInBaseString);
                rows.add(row);
            }

            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            String startDate = !StringUtil.isNullOrEmpty(jsonObject.optString("startDate", "")) ? jsonObject.optString("startDate", "") : jsonObject.optString("startdate", "");
            DateFormat df2 = authHandler.getUserDateFormatterWithoutTimeZone(jsonObject.optString(Constants.userdateformat));
            String endDate1 = df.format(authHandler.getGlobalDateFormat().parse(jsonObject.optString("enddate")));
            Calendar c = Calendar.getInstance();
            c.setTime(df.parse(endDate1)); // number of days to substract
            c.add(Calendar.DATE, 0);
            endDate1 = df.format(c.getTime());
            SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
            String startDate2 = df2.format(sdf.parse(startDate));
            String endDate2 = df2.format(sdf.parse(jsonObject.optString("enddate")));
            String date1 = "From Date : " + startDate2 + ",To Date : " + endDate2;
            financeDetails.setDateRange(date1);
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        financeDetailsList.add(financeDetails);
        SummaryLevelPDF.put("datasource", new JRBeanCollectionDataSource(financeDetailsList));
        SummaryLevelPDF.put("GeneralLedgerSubReportData", new JRBeanCollectionDataSource(rows));
        SummaryLevelPDF.put("format", "pdf");
        SummaryLevelPDF.put("address", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
        return SummaryLevelPDF;
    }
    
    class SubLedgerComparator implements Comparator<GeneralLedger> {

        @Override
        public int compare(GeneralLedger gl1, GeneralLedger gl2) {
            int sort;
            // Sort on Header first 
            sort = gl1.getHeaderString().compareTo(gl2.getHeaderString());
            if (sort == 0) {
                // If Header is equal, sort on Account
                sort = gl1.getAcccode().compareTo(gl2.getAcccode());
            }
            if (sort == 0) {
                // If Header and Account is equal, sort on Inner String.
                sort = gl1.getInnerString().compareTo(gl2.getInnerString());
            }
            return sort;
        }
    }
    @Override
    public List exportCustVenProductsPriceJasper(HttpServletRequest request, JSONArray jarr, AccountingHandlerDAO accountingHandlerDAOobj) throws ServiceException {
        List<JasperPrint> l = new ArrayList<>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            Map<String, Object> salesInvoiceMap = new HashMap<String, Object>();
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            String companyname = company.getCompanyName() != null ? company.getCompanyName() : "";
            String companyaddress = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
            String companyemail = company.getEmailID() != null ? company.getEmailID() : "";
            String companyfax = company.getFaxNumber() != null ? company.getFaxNumber() : "";
            String companyphone = company.getPhoneNumber() != null ? company.getPhoneNumber() : "";
            String currencyname = company.getCurrency().getName();
            String currencyCode = company.getCurrency().getCurrencyCode();
            String fileLocalPath = request.getSession().getServletContext().getRealPath("jrxml");
            int templateFlag = company.getTemplateflag();
            List<Map<String, Object>> subreportDataList = new ArrayList<>();
            String startDate = (String) request.getParameter(Constants.REQ_startdate);
            String endDate = (String) request.getParameter(Constants.REQ_enddate);
            boolean carryin = Boolean.parseBoolean(request.getParameter("carryin"));
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.REQ_startdate)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.REQ_enddate))) {
                Date end_Date = authHandler.getDateOnlyFormat(request).parse(request.getParameter(Constants.REQ_enddate));    //ERP-8442
                Calendar c = Calendar.getInstance();
                c.setTime(end_Date);

                endDate = userdf.format(c.getTime());
                startDate = userdf.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter(Constants.REQ_startdate)));
            }
            // Line detail for Report
            Map<String, Object> rows = Collections.EMPTY_MAP;
            int mode = Integer.parseInt(request.getParameter("mode"));          //mode = 12
            boolean displayUnitPriceandAmtInSalesDocPerm = exportDaoObj.getDisplayUnitPriceandAmtInDocPerm(request, mode, true);
            boolean displayUnitPriceandAmtInPurchaseDocPerm = exportDaoObj.getDisplayUnitPriceandAmtInDocPerm(request,mode,false);
            for (int i = 0; i < jarr.length(); i++) {
                rows = new HashMap<>();
                JSONObject jobj = jarr.getJSONObject(i);
                String price = Constants.UPAndAmtDispalyValueNoPerm;
                if (displayUnitPriceandAmtInSalesDocPerm && displayUnitPriceandAmtInPurchaseDocPerm) {
                    price = authHandler.formattingDecimalForUnitPrice(jobj.optDouble("price", 0),companyid);//ERP-39166-solved decimal precision in customer/vendor pricelist report.
                }
                rows.put("ITEMNO", jobj.optString("productid", ""));
                rows.put("SRNO", i + 1);
                rows.put("DESC", jobj.optString("productDesc", ""));
                rows.put("CURRENCY", jobj.optString("currencyCode", ""));
                rows.put("PRICEINSTOCUOM", jobj.optString("pricrinstockoum", ""));
                if (templateFlag == Constants.hinsitsu_templateflag) { // SUBREPORT FIELDS HANDLED ON TEMPLATE FLAG
                    rows.put("CUSTOM1", jobj.optString("Custom_UNIT COST", ""));
                    rows.put("CUSTOM2", jobj.optString("Custom_UNIT USED", ""));
                }
                rows.put("productName", jobj.optString("productName", ""));
                rows.put("PriceType", jobj.optBoolean("carryin", false) ? "Purchase Price" : "Sales Price");
                rows.put("PRICE", price);
                rows.put("DATEMODIFIED", jobj.optString("applydateUserFormat", ""));
                rows.put("SUPPLIERNAME", jobj.optString("affecteduser", ""));
                rows.put("custvendcode", jobj.optString("affectedusercode", ""));

                subreportDataList.add(rows);
            }
            // Global Parameters

            salesInvoiceMap.put("reportName", carryin?"Vendor Price List":"Customer Price List");
            salesInvoiceMap.put("companyname", companyname);
            salesInvoiceMap.put("companyaddress", companyaddress);
            salesInvoiceMap.put("companyphone", companyphone);
            salesInvoiceMap.put("companyfax", companyfax);
            salesInvoiceMap.put("companyemail", companyemail);
            salesInvoiceMap.put("currencyname", currencyname);
            salesInvoiceMap.put("currencycode", currencyCode);
            salesInvoiceMap.put("rangeType", "Custom");
            salesInvoiceMap.put("fromDate", startDate);
            salesInvoiceMap.put("toDate", endDate);
            salesInvoiceMap.put("startPeriod", "");
            salesInvoiceMap.put("endPeriod", "");
            
            if (templateFlag == Constants.hinsitsu_templateflag) { // SUBREPORT FIELDS HANDLED ON TEMPLATE FLAG
                salesInvoiceMap.put("CustomLabel1", "UNIT COST");
                salesInvoiceMap.put("CustomLabel2", "UNIT USED");
                salesInvoiceMap.put("CustomLabel3", carryin ? "VENDOR NAME" : "CUSTOMER NAME");
            } else {
                salesInvoiceMap.put("CustomLabel1", "PRICE TYPE");
                salesInvoiceMap.put("CustomLabel2", "DATE MODIFIED");
                salesInvoiceMap.put("CustomLabel3", carryin ? "Vendor Name" : "Customer Name");
                salesInvoiceMap.put("CustVenCodeLabel", carryin ? "Vendor Code" : "Customer Code");
            }
            salesInvoiceMap.put("SubReportData", new JRBeanCollectionDataSource(subreportDataList));

            JasperPrint jasperPrint = null;
            JasperReport jasperReport = null;
            JasperReport jasperReportSubReport = null;
            FileInputStream inputStream = null;
            FileInputStream inputStreamSubReport = null;

            inputStream = new FileInputStream(fileLocalPath + "/SupplierPriceList.jrxml");
            if (templateFlag == Constants.hinsitsu_templateflag) {
                inputStreamSubReport = new FileInputStream(fileLocalPath + "/VendorPriceListSubreport.jrxml");
            } else {
                inputStreamSubReport = new FileInputStream(fileLocalPath + "/VendorPriceListSubreportDefault.jrxml");
            }

            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);

            List salesInvoiceList = new ArrayList();
            OnlyDatePojo odp = new OnlyDatePojo();
            odp.setDate(new Date().toString());
            salesInvoiceList.add(odp);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            salesInvoiceMap.put("SubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(salesInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, salesInvoiceMap, beanColDataSource);

            l.add(jasperPrint);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AccReportsServiceImpl.exportCustVenProductsPriceJasper : " + ex.getMessage(), ex);
        }
        return l;
    }
    /**
     * Description : This Method is used to generate Nature Of Payment Wise
     * Report Data map
     *
     * @param < tdsDetailHM > used to get request parameters
     * @return :< dataArr > JSONArray of Advance Make Payments & Purchase
     * Invoices and Debit Note.
     */
    public JSONArray getNatureOfPaymentWiseReport(HashMap tdsDetailHM) {
        JSONArray dataArr = new JSONArray();
        KwlReturnObject result = null, indiacompanypreferencesresult = null;
        Iterator itr = null;
        IndiaComplianceCompanyPreferences IndiaCompanyPreferences = null;
        String companyId = "";
        try {
            if (tdsDetailHM.containsKey("companyid") & !StringUtil.isNullOrEmpty((String) tdsDetailHM.get("companyid"))) {
                companyId = (String) tdsDetailHM.get("companyid");
                indiacompanypreferencesresult = accountingHandlerDAOobj.getObject(IndiaComplianceCompanyPreferences.class.getName(), companyId);
                IndiaCompanyPreferences = (IndiaComplianceCompanyPreferences) indiacompanypreferencesresult.getEntityList().get(0);
            }
            //To Fetch Advance Make Payments Records
            result = accVendorPaymentobj.getTDSReportTransactionWise(tdsDetailHM);
            tdsDetailHM.put("isTDSApplied", true);
            /* added Invoices in the Nature of Payment Report*/
            KwlReturnObject invoices = getTDSAppliedInvoices(tdsDetailHM);
            KwlReturnObject debitnotes = getTDSAppliedDebitNote(tdsDetailHM);
            //Final Result Output
            List output = new ArrayList();
            output.addAll(result.getEntityList());
            output.addAll(invoices.getEntityList());
            output.addAll(debitnotes.getEntityList());
            //To Sort added two resultLists on the basis of "transaction date" ASC (AdvancePaymentList & PurchaseInvoiceList).
            Collections.sort(output, new Comparator<HashMap<String, String>>() {
                @Override
                public int compare(HashMap<String, String> one, HashMap<String, String> two) {
                    String transactionDateStr1 = one.get("transactionDate");
                    String transactionDateStr2 = two.get("transactionDate");
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MMM-dd");
                    Date TransactionDate1 = null, TransactionDate2 = null;
                    try {
                        if (!StringUtil.isNullOrEmpty(transactionDateStr1) && !StringUtil.isNullOrEmpty(transactionDateStr2)) {
                            TransactionDate1 = sdf.parse(transactionDateStr1);
                            TransactionDate2 = sdf.parse(transactionDateStr2);
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(accReportsCombineController.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (TransactionDate1 != null && TransactionDate2 != null) {
                        return TransactionDate1.compareTo(TransactionDate2);
                    }
                    return 0;
                }
            });
            itr = output.iterator();

            boolean tdsPaymentJsonFlag = false;
            int tdsPaymentType = IndiaComplianceConstants.NOTDSPAID;
            double TDSInterestRate = 0;
            String paymentMethodId = "";
            if (tdsDetailHM.containsKey("tdsPaymentJsonFlag")) {
                tdsPaymentJsonFlag = (boolean) tdsDetailHM.get("tdsPaymentJsonFlag");
            }
            if (tdsDetailHM.containsKey("tdsPaymentType")) {
                tdsPaymentType = (int) tdsDetailHM.get("tdsPaymentType");
            }
            if (tdsDetailHM.containsKey("TDSInterestRate")) {
                TDSInterestRate = (double) tdsDetailHM.get("TDSInterestRate");
            } else if (IndiaCompanyPreferences != null) {
                TDSInterestRate = IndiaCompanyPreferences.getTdsInterestRate();
            }
            if (tdsDetailHM.containsKey("paymentMethodId")) {
                paymentMethodId = (String) tdsDetailHM.get("paymentMethodId");
            }
            if (tdsPaymentJsonFlag) {
                // Create JSON for Make TDS Payment or TDS Interest Payment or both i.e. For Make Payment Against GL.
                JSONObject tdsPayableAccounts = new JSONObject();
                JSONObject tdsPayableAccountNames = new JSONObject();
                while (itr.hasNext()) {
                    if (tdsDetailHM.containsKey("TDSInterestRate")) {
                        TDSInterestRate = (double) tdsDetailHM.get("TDSInterestRate");
                    } else if (IndiaCompanyPreferences != null) {
                        TDSInterestRate = IndiaCompanyPreferences.getTdsInterestRate();
                    }
                    HashMap res = (HashMap) itr.next();
                    //Adding TDS Payment Accounts
                    if (tdsPaymentType == IndiaComplianceConstants.TDSPAYMENT || tdsPaymentType == IndiaComplianceConstants.TDSANDTDSINTERESTPAYMENT) {
                        if (tdsPayableAccounts.has(res.get("tdsPayableAccountid").toString())) {
                            double tdsAmount = Double.parseDouble(tdsPayableAccounts.getString(res.get("tdsPayableAccountid").toString()));
                            tdsAmount += Double.parseDouble(res.get("tdsAmt").toString());
                            tdsPayableAccounts.put(res.get("tdsPayableAccountid").toString(), tdsAmount);
                        } else {
                            tdsPayableAccounts.put(res.get("tdsPayableAccountid").toString(), res.get("tdsAmt").toString());
                        }
                        tdsPayableAccountNames.put(res.get("tdsPayableAccountid").toString(), res.get("tdsPayableAccount").toString());
                    }
                    //Adding TDS Interest Payable Acounts
                    if (tdsPaymentType == IndiaComplianceConstants.TDSINTERESTPAYMENT || tdsPaymentType == IndiaComplianceConstants.TDSANDTDSINTERESTPAYMENT) {
                        int tdsPaidFlag = (int) res.get("TDSPaidFlag");
                        double TDSInterestAmt = 0.0;
                        if (tdsPaidFlag == 1) {
                            /*
                             Fatch TDS Interest Rate at time of payment of TDS Interest rate.(For Both Challan Control Report and NOP wise report) 
                             If TDS Interest Payment is not done, showing latest rate which is stored in system control.
                             */
                            if (res.containsKey("tdsInterestPaidFlag") && (int) res.get("tdsInterestPaidFlag") != IndiaComplianceConstants.NOTDSPAID && res.containsKey("tdsInterestRateAtPaymentTime")) {
                               TDSInterestRate = (Double)res.get("tdsInterestRateAtPaymentTime");
                            }
                            int overdueMonths = 0;
                            HashMap overDuebyMonthParams = new HashMap();
                            overDuebyMonthParams.put("transactionDate", res.get("transactionDateForDueDateCaluculation"));
                            overDuebyMonthParams.put("asOfDate", res.get("asOnDateForDueDateCaluculation"));
                            overdueMonths = accVendorPaymentobj.CalculateOverDueByMonths(overDuebyMonthParams);
                            TDSInterestAmt = (((double) res.get("tdsamount") * (TDSInterestRate * 0.01)) * overdueMonths);
                        } else {
                            if (res.containsKey("tdsInterestPaidFlag") && (int) res.get("tdsInterestPaidFlag") != IndiaComplianceConstants.NOTDSPAID && res.containsKey("tdsInterestRateAtPaymentTime")) {
                               TDSInterestRate = (Double)res.get("tdsInterestRateAtPaymentTime");
                            }
                            TDSInterestAmt = (((double) res.get("tdsamount") * (TDSInterestRate * 0.01)) * Double.parseDouble(res.get("overdueMonths").toString()));
                        }
                        if (TDSInterestAmt > 0) {
                            if (tdsPayableAccounts.has(res.get("tdsInterestPayableAccountid").toString())) {
                                double PrevtdsInterestAmount = Double.parseDouble(tdsPayableAccounts.getString(res.get("tdsInterestPayableAccountid").toString()));
                                PrevtdsInterestAmount += TDSInterestAmt;
                                tdsPayableAccounts.put(res.get("tdsInterestPayableAccountid").toString(), PrevtdsInterestAmount);
                            } else {
                                tdsPayableAccounts.put(res.get("tdsInterestPayableAccountid").toString(), TDSInterestAmt);
                            }
                            tdsPayableAccountNames.put(res.get("tdsInterestPayableAccountid").toString(), res.get("tdsInterestPayableAccount").toString());
                        }
                    }
                }
                if (tdsPayableAccountNames.length() > 0) {
                    JSONArray jeDetailsArr = new JSONArray();
                    JSONObject data = new JSONObject();
                    JSONObject jtemp2 = new JSONObject();
                    for (int tdsAccountCnt = 0; tdsAccountCnt < tdsPayableAccountNames.names().length(); tdsAccountCnt++) {
                        JSONObject jobj = new JSONObject();
                        String accountid = tdsPayableAccountNames.names().getString(tdsAccountCnt);
                        jobj.put("documentno", tdsPayableAccountNames.getString(accountid));

                        jobj.put("srNoForRow", tdsAccountCnt + 1);
                        jobj.put("description", "");
                        jobj.put("debit", true);
                        jobj.put("exchangeratefortransaction", 1);
                        jobj.put("amountdue", 0);
                        jobj.put("amountDueOriginalSaved", 0);
                        jobj.put("type", 4);// Document Type - General Ledger Code
                        jobj.put("enteramount", tdsPayableAccounts.getString(accountid));
                        jobj.put("documentid", accountid);
                        if (StringUtil.isNullOrEmpty(paymentMethodId)) {
                            jobj.put("paymentMethodNotSetFlag", true);
                        }
                        jeDetailsArr.put(jobj);
                    }
                    jtemp2.put("data", jeDetailsArr);
                    data.put("Details", jtemp2);
                    data.put("memo", "");
                    KwlReturnObject paymentMethodresult = null;
                    PaymentMethod paymentMethod = null;
                    if (!StringUtil.isNullOrEmpty(paymentMethodId)) {
                        paymentMethodresult = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), paymentMethodId);
                        paymentMethod = (PaymentMethod) paymentMethodresult.getEntityList().get(0);
                    }
                    if (paymentMethod != null) {
                        data.put("paymentmethodname", paymentMethod.getMethodName());
                        data.put("pmtmethod", paymentMethod.getID());
                        data.put("paymentMethodNotSetFlag", false);
                    } else {
                        data.put("paymentMethodNotSetFlag", true);
                    }
                    data.put("billid", "");
                    data.put("sequenceformatid", "");
                    data.put("bankChargesCmb", "");
                    data.put("bankInterestCmb", "");
                    dataArr.put(data);
                }
            } else {
                // Create JSON to show in Nature Of Payment Wise Report.
                while (itr.hasNext()) {
                    JSONObject jobj = new JSONObject();
                    HashMap res = (HashMap) itr.next();
                    if (tdsDetailHM.containsKey("TDSInterestRate")) {
                        TDSInterestRate = (double) tdsDetailHM.get("TDSInterestRate");
                    } else if (IndiaCompanyPreferences != null) {
                        TDSInterestRate = IndiaCompanyPreferences.getTdsInterestRate();
                    }
                    double pendingamount = (double) res.get("PendingAmt");
                    jobj.put("vendorName", res.get("vendorname"));
                    jobj.put("vendorPanNo", StringUtil.isNullOrEmpty((String)res.get("vendorPanNo")) ? "&nbsp;" :res.get("vendorPanNo"));
                    jobj.put("vendorPanStatus", res.get("vendorPanStatus"));
                    jobj.put("transactionDate", res.get("transactionDate"));
                    jobj.put("transactionDocumentNo", res.get("transactionDocNo"));
                    jobj.put("natureOfPayment", res.get("natureOfPayment"));
                    jobj.put("amountPaid", res.get("amountpaid"));
                    jobj.put("tdsAmount", res.get("openingAmt"));
                    jobj.put("unpaidTdsAmount", authHandler.round(pendingamount,companyId));
                    jobj.put("dueDate", res.get("dueOn"));
                    jobj.put("overdueByMonths", pendingamount > 0 ? res.get("overdueMonths") : 0);

                    //Interest Amount Calculation.
                    int tdsPaidFlag = (int) res.get("TDSPaidFlag");
                    int tdsInterestPaidFlag = (int) res.get("tdsInterestPaidFlag");
                    double TDSInterestAmt = 0.0, tdsRate = 0.0;
                    tdsRate = (double) (res.get("tdsRate") != null? res.get("tdsRate"):0.0);
                    jobj.put("tdsRate", authHandler.round(tdsRate,companyId));
                    if (tdsPaidFlag == 1) {
                        //If TDS is paid then Freeze the TDS Interest Amount.
                        int overdueMonths = 0;
                        HashMap overDuebyMonthParams = new HashMap();
                        overDuebyMonthParams.put("transactionDate", res.get("transactionDateForDueDateCaluculation"));
                        overDuebyMonthParams.put("asOfDate", res.get("asOnDateForDueDateCaluculation"));
//                        overDuebyMonthParams.put("dueOnDate", dueOn);
                        
                        /*
                           Fatch TDS Interest Rate at time of payment of TDS Interest rate.(For Both Challan Control Report and NOP wise report) 
                           If TDS Interest Payment is not done, showing latest rate which is stored in system control.
                        */
                        if (res.containsKey("tdsInterestPaidFlag") && (int) res.get("tdsInterestPaidFlag") != IndiaComplianceConstants.NOTDSPAID && res.containsKey("tdsInterestRateAtPaymentTime")) {
                            TDSInterestRate = (Double) res.get("tdsInterestRateAtPaymentTime");
                        }
                        /*---*/
                        
                        if(res.get("transactionDateForDueDateCaluculation")!=null && res.get("asOnDateForDueDateCaluculation")!=null){
                            overdueMonths = accVendorPaymentobj.CalculateOverDueByMonths(overDuebyMonthParams);
                            TDSInterestAmt = (((double) res.get("tdsamount") * (TDSInterestRate * 0.01)) * overdueMonths);
                        }else{
                            TDSInterestAmt = (((double) res.get("tdsamount") * (TDSInterestRate * 0.01)) * Double.parseDouble(res.get("overdueMonths").toString()));
                        }
                    } else {
                        if (res.containsKey("tdsInterestPaidFlag") && (int) res.get("tdsInterestPaidFlag") != IndiaComplianceConstants.NOTDSPAID && res.containsKey("tdsInterestRateAtPaymentTime")) {
                            TDSInterestRate = (Double) res.get("tdsInterestRateAtPaymentTime");
                        }
                        TDSInterestAmt = (((double) res.get("tdsamount") * (TDSInterestRate * 0.01)) * Double.parseDouble(res.get("overdueMonths").toString()));
                    }
                    double UnpaidTDSInterestAmt = (tdsInterestPaidFlag == IndiaComplianceConstants.NOTDSPAID) ? TDSInterestAmt : 0;
                    double TDSAndInterestAmt = (double) res.get("tdsamount") + TDSInterestAmt;
                    double UnpaidTDSAndUnpaidInterestAmt = pendingamount + UnpaidTDSInterestAmt;
                    jobj.put("tdsInterestAmount", authHandler.round(TDSInterestAmt,companyId));
                    jobj.put("unpaidTdsInterestAmount", authHandler.round(UnpaidTDSInterestAmt,companyId));
                    jobj.put("tdsAndInterestAmount", authHandler.round(TDSAndInterestAmt,companyId));
                    jobj.put("unpaidTdsAndUnpaidInterestAmount", authHandler.round(UnpaidTDSAndUnpaidInterestAmt,companyId));
                    jobj.put("tdsInterestPayableAccountid", res.get("tdsInterestPayableAccountid"));
                    jobj.put("paymentid", res.get("paymentid"));
                    jobj.put("TDSInterestRate", TDSInterestRate);
                    jobj.put("paymentInterestId", res.get("paymentInterestId"));
                    dataArr.put(jobj);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsCombineController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dataArr;
    }
    
    public JSONObject getTrialBalance(JSONObject paramJobj) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        JSONObject summaryJobj = new JSONObject();
        try {
            String isexportString = "false";
            String companyidmain = paramJobj.getString(Constants.companyKey);
            boolean isExport = false;
            Boolean isJasperTemplate = (paramJobj.has("templateflag") && !paramJobj.isNull("templateflag") && !StringUtil.isNullOrEmpty(paramJobj.get("templateflag").toString())) ? true : false;
            isExport = isJasperTemplate;
            if (paramJobj.optString("isExport", null) != null) {
                isexportString = paramJobj.getString("isExport");
                isExport = !StringUtil.isNullOrEmpty(isexportString) ? Boolean.parseBoolean(isexportString) : false;
                String fileType = paramJobj.optString("filetype", "");
                if (StringUtil.equal(fileType, "pdf") || StringUtil.equal(fileType, "print") || StringUtil.equal(fileType, "csv")) {
                    isExport = false;//setting true for showing total amount row in default pdf export - itext.
                }
            }
            boolean hidechildCV = false;
            ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.loadObject(ExtraCompanyPreferences.class.getName(), companyidmain);
            extraCompanyPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            boolean stockValuationFlag = extraCompanyPreferences.isStockValuationFlag();
            
            boolean showAllAccounts = false;
            if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAllAccount()) {//Check to show all accounts.
                showAllAccounts = true;
                paramJobj.put("showAllAccounts", true);
            }

            if (!extraCompanyPreferences.isShowChildAccountsInTb()) {//Anup Check to hide child child accounts and include its sum in parent account if it is hidden.
                hidechildCV = true;
                paramJobj.put("hidechildCV", true);
            }
            KwlReturnObject pref = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyidmain);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) pref.getEntityList().get(0);

            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(paramJobj);
            boolean consolidateFlag = paramJobj.optBoolean("consolidateFlag", false);
            String[] companyids = paramJobj.optString("companyids", companyidmain).split(",");
            String gcurrencyid = paramJobj.getString(Constants.globalCurrencyKey);
            boolean eliminateflag = consolidateFlag;
            HashMap<String, String> usedAccountsMap = new HashMap<String, String>();

            requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
            JSONArray jArr = new JSONArray();
            Date startDate = null;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("stdate", null))) {
                startDate = authHandler.getDateOnlyFormat().parse(paramJobj.getString("stdate"));//ERP-32676 - date parse exception
            }
            Date endDate = null;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("enddate", null))) {
                endDate = authHandler.getDateOnlyFormat().parse(paramJobj.getString("enddate"));//ERP-32676 - date parse exception
            }
            Map<String, Object> extraObjects = new HashMap<String, Object>();
            extraObjects.put("extraCompanyPreferences", extraCompanyPreferences);
            extraObjects.put("startdate", startDate);
            extraObjects.put("enddate", endDate);

            Date excludedPreviousYearDate = getDateForExcludePreviousYearBalanceFilter(paramJobj, startDate);

            double netProfitAndLossAmount = 0;
            double netProfitLossPeriod = 0;
            paramJobj.put("isTrialBalance", true);
            paramJobj.put("startDate", startDate);
            String profitLossId = "", profitLossName = "", profitLossCode = "";
            boolean isOpeningBalanceFlag = false;
            isOpeningBalanceFlag = paramJobj.optBoolean("isOpeningBalanceFlag");
            double[] bals = {0, 0};
            HashMap<String, Object> filterParams = new HashMap<String, Object>();
            //Code for remote sort
            boolean directionDesc = false;
            boolean sortOnType = false;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("dir", null)) && !StringUtil.isNullOrEmpty(paramJobj.optString("sort", null))) {
                String orderBy = "";
//                if (filterParams.containsKey("direction") && filterParams.get("direction") != null) {
                String direction = paramJobj.getString("dir");
                if (direction.equalsIgnoreCase("desc")) {
                    directionDesc = true;
                } else {
                    directionDesc = false;
                }
                String field = paramJobj.getString("sort");
                if (field.equalsIgnoreCase("acctype")) {
                    sortOnType = true;
                    field = "  group.name " + direction;
                } else if (field.equalsIgnoreCase("accountname")) {//this check is added for :- ERP-13291[CSH] GST in Financial Staements
                    sortOnType = false;
                    field = "  name " + direction;
                } else if (field.equalsIgnoreCase("acccode")) {//this check is added for :- ERP-13291[CSH] GST in Financial Staements
                    sortOnType = false;
                    field = "  acccode " + direction;
                } else if (field.equalsIgnoreCase("aliascode")) {//this check is added for :- ERP-13291[CSH] GST in Financial Staements
                    sortOnType = false;
                    field = "  aliascode " + direction;
                } else {
                    sortOnType = false;
                    field = " acccode " + direction + ", name " + direction;
                }
                orderBy = field;
                filterParams.put("order_by", orderBy);
            } else {
                filterParams.put("order_by", " acccode, name asc");
            }
            //Object for sorting of account objects
            AccountComparator accComp = new AccountComparator(sortOnType, directionDesc);
            String companyid = "";
            Date start = new Date(1970);
            Map<String, Double> openPeriod_Ytd_Amounts = new HashMap<String, Double>();

            String filterConjuctionCriteria = paramJobj.optString("filterConjuctionCriteria", "");
            if (StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                filterConjuctionCriteria = Constants.and;
            }
            String Searchjson = paramJobj.optString("searchJson", "");
            if (paramJobj.optString("DimensionBasedComparisionReport", "").equals("DimensionBasedComparisionReport")) {
                Searchjson = paramJobj.getString("DimensionBasedSearchJson");
            }
            Date oneDayBeforeStartDate = new DateTime(startDate).minusDays(1).toDate();
            Map<String, Object> requestParamsAccount = new HashMap<String, Object>();
            requestParamsAccount.put("groupByDebit", true);
            DateFormat sqlDF = new SimpleDateFormat("yyyy-MM-dd");
            Map<String, Double> accAmtMap = new HashMap<String, Double>();
            Map<String, Map> stockDateMap = null;
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                HashMap<String, Object> requestParam1 = new HashMap<String, Object>();
                requestParam1.put("searchJson", Searchjson);
                requestParam1.put(Constants.companyKey, companyid);
                requestParam1.put(Constants.df, authHandler.getDateOnlyFormat());
                requestParam1.put("gcurrencyid", paramJobj.getString("gcurrencyid"));
                boolean isMRPActivated = accCompanyPreferencesObj.isMRPModuleActivated(companyid);                    
                if(stockValuationFlag  && !(isMRPActivated || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)){
                    Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();
                    stockDateMap = new HashMap<String, Map>();
                    Map temp = new HashMap();
//                    temp.put("startdate", startDate);
//                    temp.put("enddate", endDate);
//                    stockDateMap.put(sqlDF.format(startDate) + "-" + sqlDF.format(endDate), temp);
//
//                    temp = new HashMap();
                    Date t = new Date(1970);
                    temp.put("startdate", t);
                    temp.put("enddate", endDate);
                    temp.put("isDifferenceInOpeningBalanceFlag", true);
                    stockDateMap.put(sqlDF.format(t) + "-" + sqlDF.format(endDate) + "-T", temp);

                    temp = new HashMap();
                    Date bookDate = calculateStartDateIfBookClosed(startDate, stockValuationFlag, companyid);
                    temp.put("startdate", bookDate);
                    temp.put("enddate", openBalEndDate);
                    stockDateMap.put(sqlDF.format(bookDate) + "-" + sqlDF.format(openBalEndDate), temp);

                    temp = new HashMap();
                    temp.put("startdate", preferences.getBookBeginningFrom());
                    temp.put("enddate", openBalEndDate);
                    stockDateMap.put(sqlDF.format(preferences.getBookBeginningFrom()) + "-" + sqlDF.format(openBalEndDate), temp);

                    stockDateMap = AccProductService.getInventoryValuationDataForFinancialReports(requestParam1, stockDateMap);
                }
                paramJobj.put(Constants.companyKey, companyid);
                paramJobj.put(Constants.globalCurrencyKey, gcurrencyid);
                filterParams.put("parent", null);
                filterParams.put(Constants.companyKey, companyid);
                String selectedAccountIds = paramJobj.optString("accountIds", null);
                if (!StringUtil.isNullOrEmpty(selectedAccountIds)) {
                    filterParams.put("selectedAccountIds", selectedAccountIds);
                }
                
                /**
                 * Create array for Adv search on default fields.
                 */
                JSONArray customSearchFieldArray = new JSONArray();
                JSONArray defaultSearchFieldArray = new JSONArray();
                
                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject searchJobj = new JSONObject(Searchjson);
                    StringUtil.seperateCostomAndDefaultSerachJson(searchJobj, customSearchFieldArray, defaultSearchFieldArray);
                    filterParams.put("defaultSearchJson", defaultSearchFieldArray);
                    filterParams.put("filterConjuctionCriteria", filterConjuctionCriteria);
                }
                KwlReturnObject accresult = accAccountDAOobj.getAccountEntry(filterParams);
                List<Account> list = accresult.getEntityList();
                requestParamsAccount.put("isMonthly", paramJobj.has("isMonthly") ? paramJobj.getBoolean("isMonthly") : false);
                requestParamsAccount.put("startdate", startDate);
                requestParamsAccount.put("enddate", endDate);
                requestParamsAccount.put("companyid", companyid);
                requestParamsAccount.put("fieldtype", null);
                requestParamsAccount.put("customdatavalues", null);
                requestParamsAccount.put("columns", null);
                requestParamsAccount.put("iscustomcolumndata", 0);
                requestParamsAccount.put("columnheader", null);
                requestParamsAccount.put("isProductCustomData", false);
                requestParamsAccount.put("isForKnockOff", false);
                requestParamsAccount.put("Searchjson", Searchjson);
                requestParamsAccount.put("filterConjuctionCriteria", filterConjuctionCriteria);
                if (paramJobj.has("costcenter") && !StringUtil.isNullOrEmpty(paramJobj.getString("costcenter"))) {
                    requestParamsAccount.put("costcenter", paramJobj.getString("costcenter"));
                }
                accAmtMap = getPeriodAccountAmountMap(requestParamsAccount);
                accAmtMap.putAll(getOpeningAccountAmountMap(requestParamsAccount));

                requestParamsAccount.remove("groupByDebit");
                requestParamsAccount.put("startdate", excludedPreviousYearDate);
                requestParamsAccount.put("enddate", endDate);
                Map<String, Double> pnlYtdAccAmtMap = getPeriodAccountAmountMap(requestParamsAccount);
                pnlYtdAccAmtMap.putAll(getOpeningAccountAmountMap(requestParamsAccount));

                requestParamsAccount.put("startdate", excludedPreviousYearDate);
                requestParamsAccount.put("enddate", endDate);
                Map<String, Double> ytdAccAmtMap = getPeriodAccountAmountMap(requestParamsAccount);
                ytdAccAmtMap.putAll(getOpeningAccountAmountMap(requestParamsAccount));

                requestParamsAccount.put("startdate", excludedPreviousYearDate);
                requestParamsAccount.put("enddate", oneDayBeforeStartDate);
                Map<String, Double> accountOpeningForInBetweenDtInFY = getPeriodAccountAmountMap(requestParamsAccount);
                
                requestParamsAccount.put("startdate", new Date(1970));
                requestParamsAccount.put("enddate", endDate);
                requestParamsAccount.put("openingdifferencecalculation", true);
                Map<String, Double> diffOpeningAmtMap = getOpeningAccountAmountMap(requestParamsAccount);

                for (String key : diffOpeningAmtMap.keySet()) {
                    if (key.contains("opening--")) {
                        double bal = diffOpeningAmtMap.get(key);
                        bal = authHandler.round(bal, companyid);
                        if (bal > 0) {
                            bals[0] += bal;
                        } else if (bal < 0) {
                            bals[1] += bal;
                        }
                    }
                }
                bals = getOpeningBalanceMRPActivated(paramJobj, companyid, new Date(1970), endDate, filterConjuctionCriteria, Searchjson, bals, stockDateMap);

                for (Account account : list) {
                    JSONArray childArray = new JSONArray();
                    if (usedAccountsMap.containsKey(account.getID())) {
                        continue;
                    }
                    if (account.getAccounttype() == 0) {
                        start = excludedPreviousYearDate;
                        openPeriod_Ytd_Amounts = pnlYtdAccAmtMap;
                    } else {
                        start = new Date(1970);
                        openPeriod_Ytd_Amounts = ytdAccAmtMap;
                    }
                    usedAccountsMap.put(account.getID(), account.getID());
                    double openingBalance = 0.0;
                    double periodBalance = 0.0, c_period = 0.0, d_period = 0.0;
                    double amount = 0.0;
                    double ytd_amount = 0.0;///(openPeriod_Ytd_Amounts.containsKey(account.getID()) ? openPeriod_Ytd_Amounts.get(account.getID()) : 0);
                    double openingBalanceYtd = 0.0;
                    double periodBalanceYtd = 0.0;
                    Date creationDate1 = account.getCreationDate();
                    DateFormat sdf = authHandler.getDateOnlyFormat();
                    Date creationDate = authHandler.getDateOnlyFormat().parse(sdf.format(creationDate1));
                    if ((creationDate.after(start) || creationDate.equals(start)) && (creationDate.before(endDate) || creationDate.equals(endDate)) && !(eliminateflag && account.isEliminateflag())) {
                        if (accAmtMap.containsKey("opening--" + account.getID())) {
                            openingBalance += accAmtMap.get("opening--" + account.getID());
                            openingBalance = authHandler.round(openingBalance, companyid);
                        }
                    
                    } else  if (account.getAccounttype() == 0 && startDate.after(start)){
                        if (accountOpeningForInBetweenDtInFY.containsKey(account.getID())) {
                            openingBalance = accountOpeningForInBetweenDtInFY.get(account.getID());
                        }
                    }
//                    if ((creationDate.after(startDate) || creationDate.equals(startDate)) && (creationDate.before(endDate) || creationDate.equals(endDate)) && !(eliminateflag && account.isEliminateflag())) {
//                        if (accAmtMap.containsKey("opening--" + account.getID())) {
//                            openingBalance += accAmtMap.get("opening--" + account.getID());
//                        }
//                    
//                    }
                    if ((creationDate.after(start) || creationDate.equals(start)) && (creationDate.before(endDate) || creationDate.equals(endDate)) && !(eliminateflag && account.isEliminateflag())) {
                        if (openPeriod_Ytd_Amounts.containsKey("opening--" + account.getID())) {
                            openingBalanceYtd = openPeriod_Ytd_Amounts.get("opening--" + account.getID());
                            openingBalanceYtd = authHandler.round(openingBalanceYtd, companyid);
                        }
                        ytd_amount += (openPeriod_Ytd_Amounts.containsKey("opening--" + account.getID()) ? openPeriod_Ytd_Amounts.get("opening--" + account.getID()) : 0);

                    }

                    if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getProfitLossAccountId()) && account.getID().equals(extraCompanyPreferences.getProfitLossAccountId())) {
                        profitLossId = account.getID();
                        profitLossName = account.getName();
                        profitLossCode = account.getAcccode();
                        netProfitAndLossAmount += openingBalance;
                        if (openingBalance == 0 && accAmtMap.containsKey("opening--" + account.getID())) {
                            netProfitAndLossAmount += accAmtMap.get("opening--" + account.getID());
                        }
                        if (accAmtMap.containsKey(account.getID())) {
                            netProfitLossPeriod += accAmtMap.get(account.getID());
                        }
                        Date previousFYEndDate = new DateTime(excludedPreviousYearDate).minusDays(1).toDate();
                        double previousAmount = getClosedYearNetProfitAndLoss(previousFYEndDate, preferences, extraCompanyPreferences, companyid);
                        openingBalance += previousAmount;
                        openingBalanceYtd+= previousAmount;
                        }

                    if (accAmtMap.containsKey("c_-"+account.getID())) {
                        c_period = -accAmtMap.get("c_-"+account.getID());                        
                    }
                    if (accAmtMap.containsKey("d_-"+account.getID())) {
                        d_period = accAmtMap.get("d_-"+account.getID());                        
                    }
                    periodBalance=d_period - c_period;
                    amount = openingBalance + periodBalance;

                    if (openPeriod_Ytd_Amounts.containsKey(account.getID())) {
                        periodBalanceYtd = openPeriod_Ytd_Amounts.get(account.getID());
                    }
                    ytd_amount = openingBalanceYtd + periodBalanceYtd;
                    if (!showAllAccounts && StringUtil.roundDoubleTo(openingBalance, 2) == 0 && StringUtil.roundDoubleTo(periodBalance, 2) == 0 && StringUtil.roundDoubleTo(openingBalanceYtd, 2) == 0 && StringUtil.roundDoubleTo(periodBalanceYtd, 2) == 0 && StringUtil.roundDoubleTo(ytd_amount, 2) == 0 && StringUtil.roundDoubleTo(amount, 2) == 0 && account.getChildren().isEmpty()) {
                        continue;
                    }

                    if (!account.getChildren().isEmpty()) {
                        childArray = getChildAccounts(account, 0, accComp, usedAccountsMap, hidechildCV, showAllAccounts, openPeriod_Ytd_Amounts, accAmtMap, start, endDate, eliminateflag, sdf,accountOpeningForInBetweenDtInFY,startDate);
                    }
                    //Fetched Mapped accounts amount for multi company feature.

                    int level = 0;
                    JSONObject obj = new JSONObject();
                    obj.put("accountid", account.getID());
                    obj.put("accountname", (!StringUtil.isNullOrEmpty(account.getName())) ? account.getName() : (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : ""));
                    if (!StringUtil.isNullOrEmpty(account.getAcccode())) {
                        obj.put("acccode", account.getAcccode());
                    } else {
                        obj.put("acccode", "");
                    }
                    if (!StringUtil.isNullOrEmpty(account.getAliascode())) {
                        obj.put("aliascode", account.getAliascode());
                    } else {
                        obj.put("aliascode", "");
                    }
                    obj.put("description", account.getDescription() != null ? account.getDescription() : "");
                    obj.put("acctype", account.getGroup().getName());
                    obj.put("level", level);
                    obj.put("c_period", c_period);
                    summaryJobj.put("c_period", summaryJobj.has("c_period") ? summaryJobj.getDouble("c_period") + c_period : c_period);
                    obj.put("d_period", d_period);
                    summaryJobj.put("d_period", summaryJobj.has("d_period") ? summaryJobj.getDouble("d_period") + d_period : d_period);
                    obj.put("periodBalance", periodBalance);
                    summaryJobj.put("periodBalance", summaryJobj.has("periodBalance") ? summaryJobj.getDouble("periodBalance") + periodBalance : periodBalance);
                    obj.put("leaf", true);
                    if (openingBalance > 0) {
                        obj.put("d_amount_open", openingBalance);
                        obj.put("c_amount_open", "");
                        summaryJobj.put("d_amount_open", summaryJobj.has("d_amount_open") ? summaryJobj.getDouble("d_amount_open") + openingBalance : openingBalance);
                    } else if (openingBalance < 0) {
                        obj.put("c_amount_open", (openingBalance == 0.0) ? openingBalance : -openingBalance);
                        obj.put("d_amount_open", "");
                        summaryJobj.put("c_amount_open", summaryJobj.has("c_amount_open") ? summaryJobj.getDouble("c_amount_open") - openingBalance : (openingBalance == 0.0) ? openingBalance : -openingBalance);
                    } else {
                        obj.put("c_amount_open", "");
                        obj.put("d_amount_open", "");
                    }
                    obj.put("openingamount", openingBalance);
                    if (periodBalance > 0) {
                        obj.put("d_amount_period", periodBalance);
                        obj.put("c_amount_period", "");
                        summaryJobj.put("d_amount_period", summaryJobj.has("d_amount_period") ? summaryJobj.getDouble("d_amount_period") + periodBalance : periodBalance);
                    } else if (periodBalance < 0) {
                        obj.put("c_amount_period", (periodBalance == 0.0) ? periodBalance : -periodBalance);
                        obj.put("d_amount_period", "");
                        summaryJobj.put("c_amount_period", summaryJobj.has("c_amount_period") ? summaryJobj.getDouble("c_amount_period") - periodBalance : (periodBalance == 0.0) ? periodBalance : -periodBalance);
                    } else {
                        obj.put("c_amount_period", "");
                        obj.put("d_amount_period", "");
                    }
                    if (amount > 0) {
                        obj.put("d_amount", amount);
                        obj.put("c_amount", "");
                        summaryJobj.put("d_amount", summaryJobj.has("d_amount") ? summaryJobj.getDouble("d_amount") + amount : amount);
                    } else if (amount < 0) {
                        obj.put("c_amount", (amount == 0.0) ? amount : -amount);
                        obj.put("d_amount", "");
                        summaryJobj.put("c_amount", summaryJobj.has("c_amount") ? summaryJobj.getDouble("c_amount") - amount : (amount == 0.0) ? amount : -amount);
                    } else {
                        obj.put("c_amount", "");
                        obj.put("d_amount", "");
                    }
                    obj.put("endingamount", amount);

                    if (openingBalanceYtd > 0) {
                        obj.put("ytd_d_amount_open", openingBalanceYtd);
                        obj.put("ytd_c_amount_open", "");
                        summaryJobj.put("ytd_d_amount_open", summaryJobj.has("ytd_d_amount_open") ? summaryJobj.getDouble("ytd_d_amount_open") + openingBalanceYtd : openingBalanceYtd);
                    } else if (openingBalanceYtd < 0) {
                        obj.put("ytd_c_amount_open", (openingBalanceYtd == 0.0) ? openingBalanceYtd : -openingBalanceYtd);
                        obj.put("ytd_d_amount_open", "");
                        summaryJobj.put("ytd_c_amount_open", summaryJobj.has("ytd_c_amount_open") ? summaryJobj.getDouble("ytd_c_amount_open") - openingBalanceYtd : (openingBalanceYtd == 0.0) ? openingBalanceYtd : -openingBalanceYtd);
                    } else {
                        obj.put("ytd_c_amount_open", "");
                        obj.put("ytd_d_amount_open", "");
                    }
                    if (periodBalanceYtd > 0) {
                        obj.put("ytd_d_amount_period", periodBalanceYtd);
                        obj.put("ytd_c_amount_period", "");
                        summaryJobj.put("ytd_d_amount_period", summaryJobj.has("ytd_d_amount_period") ? summaryJobj.getDouble("ytd_d_amount_period") + periodBalanceYtd : periodBalanceYtd);
                    } else if (periodBalanceYtd < 0) {
                        obj.put("ytd_c_amount_period", (periodBalanceYtd == 0.0) ? periodBalanceYtd : -periodBalanceYtd);
                        obj.put("ytd_d_amount_period", "");
                        summaryJobj.put("ytd_c_amount_period", summaryJobj.has("ytd_c_amount_period") ? summaryJobj.getDouble("ytd_c_amount_period") - periodBalanceYtd : (periodBalanceYtd == 0.0) ? periodBalanceYtd : -periodBalanceYtd);
                    } else {
                        obj.put("ytd_c_amount_period", "");
                        obj.put("ytd_d_amount_period", "");
                    }

                    if (ytd_amount > 0) {
                        obj.put("ytd_d_amount", ytd_amount);
                        obj.put("ytd_c_amount", "");
                        summaryJobj.put("ytd_d_amount", summaryJobj.has("ytd_d_amount") ? summaryJobj.getDouble("ytd_d_amount") + ytd_amount : ytd_amount);
                    } else if (ytd_amount < 0) {
                        obj.put("ytd_c_amount", (ytd_amount == 0.0) ? ytd_amount : -ytd_amount);
                        obj.put("ytd_d_amount", "");
                        summaryJobj.put("ytd_c_amount", summaryJobj.has("ytd_c_amount") ? summaryJobj.getDouble("ytd_c_amount") - ytd_amount : (ytd_amount == 0.0) ? ytd_amount : -ytd_amount);
                    } else {
                        obj.put("ytd_c_amount", "");
                        obj.put("ytd_d_amount", "");
                    }

                    //Put child account's JSON from group company
                    if (childArray.length() == 0) {
                        if (showAllAccounts || (!showAllAccounts && (amount != 0 || ytd_amount != 0 || periodBalanceYtd != 0 || openingBalanceYtd != 0 || openingBalance != 0 || periodBalance != 0))) {
                            obj.put("leaf", true);
                            jArr.put(obj);
                        }
                    } else {
                        if (hidechildCV) {
                            for (int i = 0; i < childArray.length(); i++) {
                                JSONObject jobjTemp = childArray.getJSONObject(i);
                                if (jobjTemp.has("level") && jobjTemp.get("level") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("level").toString())) {
                                    int levelTemp = Integer.parseInt(jobjTemp.get("level").toString());
                                    if (levelTemp == level + 1) {//Add only one level down child accounts sum as it already contain sum of their childrens in case of multi level.                                    
                                        if (jobjTemp.has("d_amount") && jobjTemp.get("d_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount").toString())) {
                                            double d_amount = Double.parseDouble(jobjTemp.get("d_amount").toString());
                                            amount += d_amount;
                                            summaryJobj.put("d_amount", summaryJobj.has("d_amount") ? summaryJobj.getDouble("d_amount") + d_amount : d_amount);
                                        }
                                        if (jobjTemp.has("d_amount_open") && jobjTemp.get("d_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount_open").toString())) {
                                            double d_amount_open = Double.parseDouble(jobjTemp.get("d_amount_open").toString());
                                            openingBalance += d_amount_open;
                                            summaryJobj.put("d_amount_open", summaryJobj.has("d_amount_open") ? summaryJobj.getDouble("d_amount_open") + d_amount_open : d_amount_open);
                                        }
                                        if (jobjTemp.has("d_amount_period") && jobjTemp.get("d_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount_period").toString())) {
                                            double d_amount_period = Double.parseDouble(jobjTemp.get("d_amount_period").toString());
                                            periodBalance += d_amount_period;
                                            summaryJobj.put("d_amount_period", summaryJobj.has("d_amount_period") ? summaryJobj.getDouble("d_amount_period") + d_amount_period : d_amount_period);
                                        }
                                        if (jobjTemp.has("d_period") && jobjTemp.get("d_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_period").toString())) {
                                            double d_amount_period = Double.parseDouble(jobjTemp.get("d_period").toString());
                                            d_period += d_amount_period;
                                            summaryJobj.put("d_period", summaryJobj.has("d_period") ? summaryJobj.getDouble("d_period") + d_amount_period : d_amount_period);
                                        }
                                        if (jobjTemp.has("c_period") && jobjTemp.get("c_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_period").toString())) {
                                            double d_amount_period = Double.parseDouble(jobjTemp.get("c_period").toString());
                                            c_period += d_amount_period;
                                            summaryJobj.put("c_period", summaryJobj.has("c_period") ? summaryJobj.getDouble("c_period") + d_amount_period : d_amount_period);
                                        }
                                        if (jobjTemp.has("periodBalance") && jobjTemp.get("periodBalance") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("periodBalance").toString())) {
                                            double d_amount_period = Double.parseDouble(jobjTemp.get("periodBalance").toString());
//                                            periodBalance += d_amount_period;
                                            summaryJobj.put("periodBalance", summaryJobj.has("periodBalance") ? summaryJobj.getDouble("periodBalance") + d_amount_period : d_amount_period);
                                        }
                                        if (jobjTemp.has("ytd_d_amount_open") && jobjTemp.get("ytd_d_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount_open").toString())) {
                                            double ytd_d_amount_open = Double.parseDouble(jobjTemp.get("ytd_d_amount_open").toString());
                                            openingBalanceYtd += ytd_d_amount_open;
                                            summaryJobj.put("ytd_d_amount_open", summaryJobj.has("ytd_d_amount_open") ? summaryJobj.getDouble("ytd_d_amount_open") + ytd_d_amount_open : ytd_d_amount_open);
                                        }
                                        if (jobjTemp.has("ytd_d_amount_period") && jobjTemp.get("ytd_d_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount_period").toString())) {
                                            double ytd_d_amount_period = Double.parseDouble(jobjTemp.get("ytd_d_amount_period").toString());
                                            periodBalanceYtd += ytd_d_amount_period;
                                            summaryJobj.put("ytd_d_amount_period", summaryJobj.has("ytd_d_amount_period") ? summaryJobj.getDouble("ytd_d_amount_period") + ytd_d_amount_period : ytd_d_amount_period);
                                        }
                                        if (jobjTemp.has("ytd_d_amount") && jobjTemp.get("ytd_d_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount").toString())) {
                                            double ytd_d_amount = Double.parseDouble(jobjTemp.get("ytd_d_amount").toString());
                                            ytd_amount += ytd_d_amount;
                                            summaryJobj.put("ytd_d_amount", summaryJobj.has("ytd_d_amount") ? summaryJobj.getDouble("ytd_d_amount") + ytd_d_amount : ytd_d_amount);
                                        }
                                        if (jobjTemp.has("c_amount") && jobjTemp.get("c_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount").toString())) {
                                            double c_amount = Double.parseDouble(jobjTemp.get("c_amount").toString());
                                            amount -= c_amount;
                                            summaryJobj.put("c_amount", summaryJobj.has("c_amount") ? summaryJobj.getDouble("c_amount") + c_amount : c_amount);
                                        }
                                        if (jobjTemp.has("c_amount_open") && jobjTemp.get("c_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount_open").toString())) {
                                            double c_amount_open = Double.parseDouble(jobjTemp.get("c_amount_open").toString());
                                            openingBalance -= c_amount_open;
                                            summaryJobj.put("c_amount_open", summaryJobj.has("c_amount_open") ? summaryJobj.getDouble("c_amount_open") + c_amount_open : c_amount_open);
                                        }
                                        if (jobjTemp.has("c_amount_period") && jobjTemp.get("c_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount_period").toString())) {
                                            double c_amount_period = Double.parseDouble(jobjTemp.get("c_amount_period").toString());
                                            periodBalance -= c_amount_period;
                                            summaryJobj.put("c_amount_period", summaryJobj.has("c_amount_period") ? summaryJobj.getDouble("c_amount_period") + c_amount_period : c_amount_period);
                                        }
                                        if (jobjTemp.has("ytd_c_amount_open") && jobjTemp.get("ytd_c_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount_open").toString())) {
                                            double ytd_c_amount_open = Double.parseDouble(jobjTemp.get("ytd_c_amount_open").toString());
                                            openingBalanceYtd -= ytd_c_amount_open;
                                            summaryJobj.put("ytd_c_amount_open", summaryJobj.has("ytd_c_amount_open") ? summaryJobj.getDouble("ytd_c_amount_open") + ytd_c_amount_open : ytd_c_amount_open);
                                        }
                                        if (jobjTemp.has("ytd_c_amount_period") && jobjTemp.get("ytd_c_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount_period").toString())) {
                                            double ytd_c_amount_period = Double.parseDouble(jobjTemp.get("ytd_c_amount_period").toString());
                                            periodBalanceYtd -= ytd_c_amount_period;
                                            summaryJobj.put("ytd_c_amount_period", summaryJobj.has("ytd_c_amount_period") ? summaryJobj.getDouble("ytd_c_amount_period") + ytd_c_amount_period : ytd_c_amount_period);
                                        }
                                        if (jobjTemp.has("ytd_c_amount") && jobjTemp.get("ytd_c_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount").toString())) {
                                            double ytd_c_amount = Double.parseDouble(jobjTemp.get("ytd_c_amount").toString());
                                            ytd_amount -= ytd_c_amount;
                                            summaryJobj.put("ytd_c_amount", summaryJobj.has("ytd_c_amount") ? summaryJobj.getDouble("ytd_c_amount") + ytd_c_amount : ytd_c_amount);
                                        }
                                    }
                                }
                            }
                            if (amount > 0) {
                                obj.put("d_amount", amount);
                                obj.put("c_amount", "");
                            } else if (amount < 0) {
                                obj.put("c_amount", (amount == 0.0) ? amount : -amount);
                                obj.put("d_amount", "");
                            } else {
                                obj.put("c_amount", "");
                                obj.put("d_amount", "");
                            }
                            obj.put("endingamount", amount);

                            if (openingBalance > 0) {
                                obj.put("d_amount_open", openingBalance);
                                obj.put("c_amount_open", "");
                            } else if (openingBalance < 0) {
                                obj.put("c_amount_open", (openingBalance == 0.0) ? openingBalance : -openingBalance);
                                obj.put("d_amount_open", "");
                            } else {
                                obj.put("c_amount_open", "");
                                obj.put("d_amount_open", "");
                            }
                            obj.put("openingamount", openingBalance);
                            if (periodBalance > 0) {
                                obj.put("d_amount_period", periodBalance);
                                obj.put("c_amount_period", "");
                            } else if (periodBalance < 0) {
                                obj.put("c_amount_period", (periodBalance == 0.0) ? periodBalance : -periodBalance);
                                obj.put("d_amount_period", "");
                            } else {
                                obj.put("c_amount_period", "");
                                obj.put("d_amount_period", "");
                            }
                            obj.put("periodBalance", periodBalance);
                            obj.put("c_period", c_period);
                            obj.put("d_period", d_period);
                            if (ytd_amount > 0) {
                                obj.put("ytd_d_amount", ytd_amount);
                                obj.put("ytd_c_amount", "");
                            } else if (ytd_amount < 0) {
                                obj.put("ytd_c_amount", (ytd_amount == 0.0) ? ytd_amount : -ytd_amount);
                                obj.put("ytd_d_amount", "");
                            } else {
                                obj.put("ytd_c_amount", "");
                                obj.put("ytd_d_amount", "");
                            }
                            if (openingBalanceYtd > 0) {
                                obj.put("ytd_d_amount_open", openingBalanceYtd);
                                obj.put("ytd_c_amount_open", "");
                            } else if (openingBalanceYtd < 0) {
                                obj.put("ytd_c_amount_open", (openingBalanceYtd == 0.0) ? openingBalanceYtd : -openingBalanceYtd);
                                obj.put("ytd_d_amount_open", "");
                            } else {
                                obj.put("ytd_c_amount_open", "");
                                obj.put("ytd_d_amount_open", "");
                            }
                            if (periodBalanceYtd > 0) {
                                obj.put("ytd_d_amount_period", periodBalanceYtd);
                                obj.put("ytd_c_amount_period", "");
                            } else if (periodBalanceYtd < 0) {
                                obj.put("ytd_c_amount_period", (periodBalanceYtd == 0.0) ? periodBalanceYtd : -periodBalanceYtd);
                                obj.put("ytd_d_amount_period", "");
                            } else {
                                obj.put("ytd_c_amount_period", "");
                                obj.put("ytd_d_amount_period", "");
                            }
                        }
                        if (amount == 0) {
                            obj.put("c_amount", "");
                        }
                        if (openingBalance == 0) {
                            obj.put("c_amount_open", "");
                        }
                        if (periodBalance == 0) {
                            obj.put("c_amount_period", "");
                        }
                        if (ytd_amount == 0) {
                            obj.put("ytd_c_amount", "");
                        }
                        if (openingBalanceYtd == 0) {
                            obj.put("ytd_c_amount_open", "");
                        }
                        if (periodBalanceYtd == 0) {
                            obj.put("ytd_c_amount_period", "");
                        }
                        if (hidechildCV) {
                            obj.put("leaf", true);
                        } else {
                            obj.put("leaf", false);
                        }
                        jArr.put(obj);
                        if (!hidechildCV) {
                            for (int i = 0; i < childArray.length(); i++) {//whenn  we are showing child account at that time to addd child amount in final total. 
                                JSONObject jobjTemp = childArray.getJSONObject(i);
                                if (jobjTemp.has("level") && jobjTemp.get("level") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("level").toString())) {
                                    if (jobjTemp.has("d_amount") && jobjTemp.get("d_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount").toString())) {
                                        double d_amount = Double.parseDouble(jobjTemp.get("d_amount").toString());
                                        summaryJobj.put("d_amount", summaryJobj.has("d_amount") ? summaryJobj.getDouble("d_amount") + d_amount : d_amount);
                                    }
                                    if (jobjTemp.has("d_amount_open") && jobjTemp.get("d_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount_open").toString())) {
                                        double d_amount_open = Double.parseDouble(jobjTemp.get("d_amount_open").toString());
                                        summaryJobj.put("d_amount_open", summaryJobj.has("d_amount_open") ? summaryJobj.getDouble("d_amount_open") + d_amount_open : d_amount_open);
                                    }
                                    if (jobjTemp.has("d_amount_period") && jobjTemp.get("d_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount_period").toString())) {
                                        double d_amount_period = Double.parseDouble(jobjTemp.get("d_amount_period").toString());
                                        summaryJobj.put("d_amount_period", summaryJobj.has("d_amount_period") ? summaryJobj.getDouble("d_amount_period") + d_amount_period : d_amount_period);
                                    }
                                    if (jobjTemp.has("ytd_d_amount_open") && jobjTemp.get("ytd_d_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount_open").toString())) {
                                        double ytd_d_amount_open = Double.parseDouble(jobjTemp.get("ytd_d_amount_open").toString());
                                        summaryJobj.put("ytd_d_amount_open", summaryJobj.has("ytd_d_amount_open") ? summaryJobj.getDouble("ytd_d_amount_open") + ytd_d_amount_open : ytd_d_amount_open);
                                    }
                                    if (jobjTemp.has("ytd_d_amount_period") && jobjTemp.get("ytd_d_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount_period").toString())) {
                                        double ytd_d_amount_period = Double.parseDouble(jobjTemp.get("ytd_d_amount_period").toString());
                                        summaryJobj.put("ytd_d_amount_period", summaryJobj.has("ytd_d_amount_period") ? summaryJobj.getDouble("ytd_d_amount_period") + ytd_d_amount_period : ytd_d_amount_period);
                                    }
                                    if (jobjTemp.has("ytd_d_amount") && jobjTemp.get("ytd_d_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount").toString())) {
                                        double ytd_d_amount = Double.parseDouble(jobjTemp.get("ytd_d_amount").toString());
                                        summaryJobj.put("ytd_d_amount", summaryJobj.has("ytd_d_amount") ? summaryJobj.getDouble("ytd_d_amount") + ytd_d_amount : ytd_d_amount);
                                    }
                                    if (jobjTemp.has("c_amount") && jobjTemp.get("c_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount").toString())) {
                                        double c_amount = Double.parseDouble(jobjTemp.get("c_amount").toString());
                                        summaryJobj.put("c_amount", summaryJobj.has("c_amount") ? summaryJobj.getDouble("c_amount") + c_amount : c_amount);
                                    }
                                    if (jobjTemp.has("c_amount_open") && jobjTemp.get("c_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount_open").toString())) {
                                        double c_amount_open = Double.parseDouble(jobjTemp.get("c_amount_open").toString());
                                        summaryJobj.put("c_amount_open", summaryJobj.has("c_amount_open") ? summaryJobj.getDouble("c_amount_open") + c_amount_open : c_amount_open);
                                    }
                                    if (jobjTemp.has("c_amount_period") && jobjTemp.get("c_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount_period").toString())) {
                                        double c_amount_period = Double.parseDouble(jobjTemp.get("c_amount_period").toString());
                                        summaryJobj.put("c_amount_period", summaryJobj.has("c_amount_period") ? summaryJobj.getDouble("c_amount_period") + c_amount_period : c_amount_period);
                                    }
                                    if (jobjTemp.has("ytd_c_amount_open") && jobjTemp.get("ytd_c_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount_open").toString())) {
                                        double ytd_c_amount_open = Double.parseDouble(jobjTemp.get("ytd_c_amount_open").toString());
                                        summaryJobj.put("ytd_c_amount_open", summaryJobj.has("ytd_c_amount_open") ? summaryJobj.getDouble("ytd_c_amount_open") + ytd_c_amount_open : ytd_c_amount_open);
                                    }
                                    if (jobjTemp.has("ytd_c_amount_period") && jobjTemp.get("ytd_c_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount_period").toString())) {
                                        double ytd_c_amount_period = Double.parseDouble(jobjTemp.get("ytd_c_amount_period").toString());
                                        summaryJobj.put("ytd_c_amount_period", summaryJobj.has("ytd_c_amount_period") ? summaryJobj.getDouble("ytd_c_amount_period") + ytd_c_amount_period : ytd_c_amount_period);
                                    }
                                    if (jobjTemp.has("ytd_c_amount") && jobjTemp.get("ytd_c_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount").toString())) {
                                        double ytd_c_amount = Double.parseDouble(jobjTemp.get("ytd_c_amount").toString());
                                        summaryJobj.put("ytd_c_amount", summaryJobj.has("ytd_c_amount") ? summaryJobj.getDouble("ytd_c_amount") + ytd_c_amount : ytd_c_amount);
                                    }
                                    if (jobjTemp.has("d_period") && jobjTemp.get("d_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_period").toString())) {
                                        double d_period_total = Double.parseDouble(jobjTemp.get("d_period").toString());
                                        summaryJobj.put("d_period", summaryJobj.has("d_period") ? summaryJobj.getDouble("d_period") + d_period_total : d_period_total);
                                    }
                                    if (jobjTemp.has("c_period") && jobjTemp.get("c_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_period").toString())) {
                                        double c_period_total = Double.parseDouble(jobjTemp.get("c_period").toString());
                                        summaryJobj.put("c_period", summaryJobj.has("c_period") ? summaryJobj.getDouble("c_period") + c_period_total : c_period_total);
                                    }
                                    if (jobjTemp.has("periodBalance") && jobjTemp.get("periodBalance") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("periodBalance").toString())) {
                                        double ytd_c_amount = Double.parseDouble(jobjTemp.get("periodBalance").toString());
                                        summaryJobj.put("periodBalance", summaryJobj.has("periodBalance") ? summaryJobj.getDouble("periodBalance") + ytd_c_amount : ytd_c_amount);
                                    }
                                }
                                jArr.put(childArray.getJSONObject(i));
                            }
                        }
                    }
                }

                if (isOpeningBalanceFlag) { // Below code does not require for TB So commenting it Refer ticketSDP-2374 // include opening/closing stock
                    if (extraCompanyPreferences.isStockValuationFlag() && !(isMRPActivated || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) { // do not calculate closing stock if MRP module is activated
                        double invCloseBal = 0, ytdinvCloseBal = 0;
                        HashMap<String, Object> requestParam = new HashMap<String, Object>();
                        requestParam.put(Constants.REQ_startdate, preferences.getBookBeginningFrom() != null ? authHandler.getDateOnlyFormat().format(preferences.getBookBeginningFrom()) : "");
                        Date previousFYEndDate = new DateTime(excludedPreviousYearDate).minusDays(1).toDate();
                        if (preferences.getFinancialYearFrom() != null && preferences.getBookBeginningFrom() != null && (preferences.getFinancialYearFrom() != preferences.getBookBeginningFrom())) {
                            Calendar calendar = Calendar.getInstance();
                            calendar.setTime(preferences.getFinancialYearFrom());
                            Date ffyDate = calendar.getTime();
                            calendar.add(Calendar.YEAR, 1);
                            calendar.add(Calendar.DATE, -1);
                            Date endingFYDate = calendar.getTime();
                            if (startDate.after(ffyDate) && (startDate.before(endingFYDate) || DateUtils.isSameDay(startDate, endingFYDate))) {
                                calendar.setTime(preferences.getBookBeginningFrom());
                                calendar.add(Calendar.DATE, -1);
                                Date dayBeforeBBDate = calendar.getTime();
                                /*If BB != FFY and startdate falls between 1st FY startdate and endate then pass BB date - 1 as the endate*/
                                requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(dayBeforeBBDate));
                            } else {
                                /* Previous FY Endate to be pass as enddate*/
                                requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(previousFYEndDate));
                            }
                        } else {
                            /* Previous FY Endate to be pass as enddate*/
                            requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(previousFYEndDate));
                        }
                        requestParam.put(Constants.companyKey, companyidmain);
                        requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                        if (!StringUtil.isNullOrEmpty(paramJobj.optString("searchJson", null))) {
                            requestParam.put(Constants.Acc_Search_Json, paramJobj.getString("searchJson"));
                        }
                        double[] valuation = {0, 0, 0, 0, 0, 0};
                        String startTemp = null;
                        String endTemp = null;
                        startTemp = sqlDF.format(authHandler.getDateOnlyFormat().parse((String) requestParam.get(Constants.REQ_startdate)));
                        endTemp = sqlDF.format(authHandler.getDateOnlyFormat().parse((String) requestParam.get(Constants.REQ_enddate)));                    
                        if(stockDateMap!= null && stockDateMap.containsKey(startTemp+"-"+endTemp)){
                            valuation = (double[]) stockDateMap.get(startTemp+"-"+endTemp).get("valuation");
                        }else{
                            requestParam.put("gcurrencyid", paramJobj.getString("gcurrencyid"));
                            valuation = AccProductService.getInventoryValuationDataForFinancialReports(requestParam);
                        }
                        invCloseBal = valuation[5];
                        ytdinvCloseBal = invCloseBal;
                        if (invCloseBal != 0 || ytdinvCloseBal != 0) {
                            JSONObject obj = new JSONObject();
                            if (invCloseBal > 0) {
                                obj.put("d_amount_period", "");
                                obj.put("c_amount_period", "");
                                obj.put("d_period", 0.0);
                                obj.put("c_period", 0.0);
                                obj.put("periodbalance", 0.0);
                                obj.put("d_amount_open", invCloseBal);
                                summaryJobj.put("d_amount_open", summaryJobj.has("d_amount_open") ? summaryJobj.getDouble("d_amount_open") + invCloseBal : invCloseBal);
                                obj.put("c_amount_open", "");
                                obj.put("d_amount", (invCloseBal));
                                summaryJobj.put("d_amount", summaryJobj.has("d_amount") ? summaryJobj.getDouble("d_amount") + invCloseBal : invCloseBal);
                                obj.put("c_amount", "");
                            } else {
                                obj.put("c_amount_period", "");
                                obj.put("d_amount_period", "");
                                obj.put("d_period", 0.0);
                                obj.put("c_period", 0.0);
                                obj.put("periodbalance", 0.0);
                                obj.put("c_amount_open", (invCloseBal == 0.0) ? invCloseBal : -invCloseBal);
                                summaryJobj.put("c_amount_open", summaryJobj.has("c_amount_open") ? summaryJobj.getDouble("c_amount_open") - invCloseBal : (invCloseBal == 0.0) ? invCloseBal : -invCloseBal);
                                obj.put("d_amount_open", "");
                                obj.put("c_amount", (invCloseBal == 0.0) ? invCloseBal : -(invCloseBal));
                                summaryJobj.put("c_amount", summaryJobj.has("c_amount") ? summaryJobj.getDouble("c_amount") - (invCloseBal) : (invCloseBal == 0.0) ? invCloseBal : -(invCloseBal));
                                obj.put("d_amount", "");
                            }

                            obj.put("openingamount", invCloseBal);
                            obj.put("endingamount", (invCloseBal));

                            if (ytdinvCloseBal > 0) {
                                obj.put("ytd_d_amount_open", ytdinvCloseBal);
                                summaryJobj.put("ytd_d_amount_open", summaryJobj.has("ytd_d_amount_open") ? summaryJobj.getDouble("ytd_d_amount_open") + ytdinvCloseBal : ytdinvCloseBal);
                                obj.put("ytd_c_amount_open", "");
                                obj.put("ytd_d_amount", ytdinvCloseBal);
                                summaryJobj.put("ytd_d_amount", summaryJobj.has("ytd_d_amount") ? summaryJobj.getDouble("ytd_d_amount") + ytdinvCloseBal : ytdinvCloseBal);
                                obj.put("ytd_c_amount", "");
                            } else {
                                obj.put("ytd_c_amount_open", (ytdinvCloseBal == 0.0) ? ytdinvCloseBal : -ytdinvCloseBal);
                                summaryJobj.put("ytd_c_amount_open", summaryJobj.has("ytd_c_amount_open") ? summaryJobj.getDouble("ytd_c_amount_open") - ytdinvCloseBal : (ytdinvCloseBal == 0.0) ? ytdinvCloseBal : -ytdinvCloseBal);
                                obj.put("ytd_d_amount_open", "");
                                obj.put("ytd_c_amount", (ytdinvCloseBal == 0.0) ? ytdinvCloseBal : -ytdinvCloseBal);
                                summaryJobj.put("ytd_c_amount", summaryJobj.has("ytd_c_amount") ? summaryJobj.getDouble("ytd_c_amount") - ytdinvCloseBal : (ytdinvCloseBal == 0.0) ? ytdinvCloseBal : -ytdinvCloseBal);
                                obj.put("ytd_d_amount", "");
                            }
                            obj.put("accountid", "");
                            obj.put("accountname", Constants.OpeningStock); // Stock in hand
                            obj.put("leaf", true);
                            jArr.put(obj);
                        }
                    }
                }
            }

            double balance = -(bals[1] + bals[0]);
            balance=authHandler.round(balance, companyid);
            double ytdbalance = balance; // Calcualte Difference in Opening balance for YTD
            if (balance != 0 || ytdbalance != 0) {
                JSONObject obj = new JSONObject();
                if (balance > 0) {
                    obj.put("d_amount_period", "");
                    obj.put("c_amount_period", "");
                    obj.put("d_period", 0.0);
                    obj.put("c_period", 0.0);
                    obj.put("periodbalance", 0.0);
                    obj.put("d_amount_open", balance);
                    summaryJobj.put("d_amount_open", summaryJobj.has("d_amount_open") ? summaryJobj.getDouble("d_amount_open") + balance : balance);
                    obj.put("c_amount_open", "");
                    obj.put("d_amount", (balance));
                    summaryJobj.put("d_amount", summaryJobj.has("d_amount") ? summaryJobj.getDouble("d_amount") + balance : balance);
                    obj.put("c_amount", "");
                } else {
                    obj.put("c_amount_period", "");
                    obj.put("d_amount_period", "");
                    obj.put("d_period", 0.0);
                    obj.put("c_period", 0.0);
                    obj.put("periodbalance", 0.0);
                    obj.put("c_amount_open", (balance == 0.0) ? balance : -balance);
                    summaryJobj.put("c_amount_open", summaryJobj.has("c_amount_open") ? summaryJobj.getDouble("c_amount_open") - balance : (balance == 0.0) ? balance : -balance);
                    obj.put("d_amount_open", "");
                    obj.put("c_amount", (balance == 0.0) ? balance : -(balance));
                    summaryJobj.put("c_amount", summaryJobj.has("c_amount") ? summaryJobj.getDouble("c_amount") - (balance) : (balance == 0.0) ? balance : -(balance));
                    obj.put("d_amount", "");
                }
                obj.put("openingamount", balance);
                obj.put("endingamount", balance);

                if (ytdbalance > 0) {
                    obj.put("ytd_d_amount_open", ytdbalance);
                    summaryJobj.put("ytd_d_amount_open", summaryJobj.has("ytd_d_amount_open") ? summaryJobj.getDouble("ytd_d_amount_open") + ytdbalance : ytdbalance);
                    obj.put("ytd_c_amount_open", "");
                    obj.put("ytd_d_amount", ytdbalance);
                    summaryJobj.put("ytd_d_amount", summaryJobj.has("ytd_d_amount") ? summaryJobj.getDouble("ytd_d_amount") + ytdbalance : ytdbalance);
                    obj.put("ytd_c_amount", "");
                } else {
                    obj.put("ytd_c_amount_open", (ytdbalance == 0.0) ? ytdbalance : -ytdbalance);
                    summaryJobj.put("ytd_c_amount_open", summaryJobj.has("ytd_c_amount_open") ? summaryJobj.getDouble("ytd_c_amount_open") - ytdbalance : (ytdbalance == 0.0) ? ytdbalance : -ytdbalance);
                    obj.put("ytd_d_amount_open", "");
                    obj.put("ytd_c_amount", (ytdbalance == 0.0) ? ytdbalance : -ytdbalance);
                    summaryJobj.put("ytd_c_amount", summaryJobj.has("ytd_c_amount") ? summaryJobj.getDouble("ytd_c_amount") - ytdbalance : (ytdbalance == 0.0) ? ytdbalance : -ytdbalance);
                    obj.put("ytd_d_amount", "");
                }
                obj.put("accountid", Constants.Difference_in_Opening_balances);
                obj.put("fmt", "A");
                obj.put("accountname", Constants.Difference_in_Opening_balances); // Difference In Opening Balance
                obj.put("leaf", true);
                jArr = StringUtil.addJSONObjectToPosInArray(0, obj, jArr);
//                JSONArray oldArr = jArr.put(0, obj);
            }

            excludedPreviousYearDate = new DateTime(excludedPreviousYearDate).minusDays(1).toDate();
            start = excludedPreviousYearDate;
            JSONObject profitLossobj = new JSONObject();
            requestParamsAccount.remove("groupByDebit");
            extraObjects.put("requestParamsAccount", requestParamsAccount);
            extraObjects.put("isTrialBalance", true);
            extraObjects.put("stockDateMap", stockDateMap);
            double profitloss = calculateProfitLossForTrialBalanceAllAccounts(paramJobj, startDate, endDate, start, true, false, false, extraCompanyPreferences.isStockValuationFlag(), null, extraObjects)[1];
            if (profitloss != 0) {
                netProfitAndLossAmount = profitloss;
                profitLossName = "Accumulated Profit/Loss";
                profitLossId = "Accumulated Profit/Loss";
                profitLossCode = "Accumulated Profit/Loss";

                profitLossobj.put("accountname", profitLossName);  //"Net Loss");
                profitLossobj.put("accountid", profitLossId);
                profitLossobj.put("acccode", profitLossCode);
                profitLossobj.put("level", 0);
                profitLossobj.put("leaf", true);

                if (netProfitAndLossAmount > 0) {
                    profitLossobj.put("d_amount_open", netProfitAndLossAmount);
                    profitLossobj.put("c_amount_open", "");
                    summaryJobj.put("d_amount_open", summaryJobj.has("d_amount_open") ? summaryJobj.getDouble("d_amount_open") + netProfitAndLossAmount : netProfitAndLossAmount);
                } else {
                    profitLossobj.put("c_amount_open", (netProfitAndLossAmount == 0.0) ? netProfitAndLossAmount : -netProfitAndLossAmount);
                    profitLossobj.put("d_amount_open", "");
                    summaryJobj.put("c_amount_open", summaryJobj.has("c_amount_open") ? summaryJobj.getDouble("c_amount_open") - netProfitAndLossAmount : (netProfitAndLossAmount == 0.0) ? netProfitAndLossAmount : -netProfitAndLossAmount);
                }
                profitLossobj.put("openingamount", netProfitAndLossAmount);

                if (netProfitAndLossAmount > 0) {
                    profitLossobj.put("ytd_d_amount_open", netProfitAndLossAmount);
                    profitLossobj.put("ytd_c_amount_open", "");
                    summaryJobj.put("ytd_d_amount_open", summaryJobj.has("ytd_d_amount_open") ? summaryJobj.getDouble("ytd_d_amount_open") + netProfitAndLossAmount : netProfitAndLossAmount);
                } else {
                    profitLossobj.put("ytd_c_amount_open", (netProfitAndLossAmount == 0.0) ? netProfitAndLossAmount : -netProfitAndLossAmount);
                    profitLossobj.put("ytd_d_amount_open", "");
                    summaryJobj.put("ytd_c_amount_open", summaryJobj.has("ytd_c_amount_open") ? summaryJobj.getDouble("ytd_c_amount_open") - netProfitAndLossAmount : (netProfitAndLossAmount == 0.0) ? netProfitAndLossAmount : -netProfitAndLossAmount);
                }
                if (netProfitLossPeriod > 0) {
                    profitLossobj.put("d_amount_period", netProfitLossPeriod);
                    profitLossobj.put("c_amount_period", "");
                    summaryJobj.put("d_amount_period", summaryJobj.has("d_amount_period") ? summaryJobj.getDouble("d_amount_period") + netProfitLossPeriod : +netProfitLossPeriod);
                } else {
                    profitLossobj.put("c_amount_period", (netProfitLossPeriod == 0.0) ? netProfitLossPeriod : -netProfitLossPeriod);
                    profitLossobj.put("d_amount_period", "");
                    summaryJobj.put("c_amount_period", summaryJobj.has("c_amount_period") ? summaryJobj.getDouble("c_amount_period") - netProfitLossPeriod : (netProfitLossPeriod == 0.0) ? netProfitLossPeriod : -netProfitLossPeriod);
                }
                if (netProfitLossPeriod > 0) {
                    profitLossobj.put("ytd_d_amount_period", netProfitLossPeriod);
                    profitLossobj.put("ytd_c_amount_period", "");
                    summaryJobj.put("ytd_d_amount_period", summaryJobj.has("ytd_d_amount_period") ? summaryJobj.getDouble("ytd_d_amount_period") + netProfitLossPeriod : +netProfitLossPeriod);
                } else {
                    profitLossobj.put("ytd_c_amount_period", (netProfitLossPeriod == 0.0) ? netProfitLossPeriod : -netProfitLossPeriod);
                    profitLossobj.put("ytd_d_amount_period", "");
                    summaryJobj.put("ytd_c_amount_period", summaryJobj.has("ytd_c_amount_period") ? summaryJobj.getDouble("ytd_c_amount_period") - netProfitLossPeriod : (netProfitLossPeriod == 0.0) ? netProfitLossPeriod : -netProfitLossPeriod);
                }
                if ((netProfitLossPeriod + netProfitAndLossAmount) > 0) {
                    profitLossobj.put("d_amount", netProfitLossPeriod + netProfitAndLossAmount);
                    profitLossobj.put("c_amount", "");
                    summaryJobj.put("d_amount", summaryJobj.has("d_amount") ? summaryJobj.getDouble("d_amount") + netProfitLossPeriod + netProfitAndLossAmount : netProfitLossPeriod + netProfitAndLossAmount);
                } else {
                    profitLossobj.put("c_amount", ((netProfitLossPeriod + netProfitAndLossAmount) == 0.0) ? (netProfitLossPeriod + netProfitAndLossAmount) : -(netProfitLossPeriod + netProfitAndLossAmount));
                    profitLossobj.put("d_amount", "");
                    summaryJobj.put("c_amount", summaryJobj.has("c_amount") ? summaryJobj.getDouble("c_amount") - (netProfitLossPeriod + netProfitAndLossAmount) : -(netProfitLossPeriod + netProfitAndLossAmount));
                }
                profitLossobj.put("endingamount", netProfitLossPeriod + netProfitAndLossAmount);
                
                if ((netProfitLossPeriod + netProfitAndLossAmount) > 0) {
                    profitLossobj.put("ytd_d_amount", netProfitLossPeriod + netProfitAndLossAmount);
                    profitLossobj.put("ytd_c_amount", "");
                    summaryJobj.put("ytd_d_amount", summaryJobj.has("ytd_d_amount") ? summaryJobj.getDouble("ytd_d_amount") + netProfitLossPeriod + netProfitAndLossAmount : netProfitLossPeriod + netProfitAndLossAmount);
                } else {
                    profitLossobj.put("ytd_c_amount", ((netProfitLossPeriod + netProfitAndLossAmount) == 0.0) ? (netProfitLossPeriod + netProfitAndLossAmount) : -(netProfitLossPeriod + netProfitAndLossAmount));
                    profitLossobj.put("ytd_d_amount", "");
                    summaryJobj.put("ytd_c_amount", summaryJobj.has("ytd_c_amount") ? summaryJobj.getDouble("ytd_c_amount") - (netProfitLossPeriod + netProfitAndLossAmount) : -(netProfitLossPeriod + netProfitAndLossAmount));
                }


                profitLossobj.put("d_period", 0.0);
                profitLossobj.put("c_period", 0.0);
                profitLossobj.put("periodbalance", 0.0);
                jArr.put(profitLossobj);
            }
            double totalOpeningAmount = summaryJobj.optDouble("d_amount_open", 0) - summaryJobj.optDouble("c_amount_open", 0);
            double totalEndingAmount = summaryJobj.optDouble("d_amount", 0) - summaryJobj.optDouble("c_amount", 0);
            summaryJobj.put("openingamount", totalOpeningAmount);
            summaryJobj.put("endingamount", totalEndingAmount);

            summaryJobj.put("accountname", "Total");
            summaryJobj.put("acccode", "Total");
            summaryJobj.put("issummaryvalue", true);
            summaryJobj.put("level", 0);
            summaryJobj.put("leaf", true);
            if (!isExport) {
                jArr.put(summaryJobj);// summaryJobj is used for showing total amount of each column as a last record in the grid.
            }
            jobj.put(Constants.RES_data, jArr);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getTrialBalance : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getTrialBalance : " + ex.getMessage(), ex);
        }
        return jobj;
    }
    
    private class AccountComparator implements Comparator<Account> {

        private boolean sortOnType;
        private boolean directionDesc;

        private AccountComparator(boolean sortOnType1, boolean direction1) {
            sortOnType = sortOnType1;
            directionDesc = direction1;
        }

        @Override
        public int compare(Account o1, Account o2) {
            String o1_Code = (o1.getAcccode() == null) ? "" : o1.getAcccode();
            String o2_Code = (o2.getAcccode() == null) ? "" : o2.getAcccode();

            if (sortOnType) {
                if (StringUtil.equal(o1.getGroup().getName(), o2.getGroup().getName())) {
                    if (StringUtil.equal(o1_Code, o2_Code)) {
                        return directionDesc ? o2.getName().compareTo(o1.getName()) : o1.getName().compareTo(o2.getName());
                    } else {
                        return directionDesc ? o2_Code.compareTo(o1_Code) : o1_Code.compareTo(o2_Code);
                    }
                } else {
                    return directionDesc ? o2.getGroup().getName().compareTo(o1.getGroup().getName()) : o1.getGroup().getName().compareTo(o2.getGroup().getName());
                }
            } else {
                if (StringUtil.equal(o1_Code, o2_Code)) {
                    return directionDesc ? o2.getName().compareTo(o1.getName()) : o1.getName().compareTo(o2.getName());
                } else {
                    return directionDesc ? o2_Code.compareTo(o1_Code) : o1_Code.compareTo(o2_Code);
                }
            }
        }
    }
    
     public JSONObject getLedgerDetails(JSONObject paramJobj) throws ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray dataArr = new JSONArray();

        try {
            String companyid = paramJobj.optString(Constants.companyKey);
            Boolean isFromExpander=paramJobj.optBoolean("isFromExpander");
                paramJobj = companyReportConfigurationServiceObj.pouplateSelectStatementForGL(paramJobj, paramJobj.getString(Constants.userSessionId), companyid);
                String defaultAttr = CompanyReportConfigConstants.GL_SELECT_NON_CONFIG_FIELDS;
                int defaultLength = 0;
                if (!StringUtil.isNullOrEmpty(defaultAttr)) {
                    defaultLength = StringUtils.countMatches(defaultAttr, ",");
                }
                paramJobj.put("defaultattrlength", defaultLength);
            
                // Get column config to show configured columns in expander.(header,title,align)
                Map<String, String> propertiesMap = companyReportConfigurationServiceObj.getPropertiesForExport(companyid,Constants.COMPANY_REPORT_CONFIG_GL, Constants.globalFields, true,!Constants.isexportledgerflag,isFromExpander);

                Map<String, Object> advSearchAttributes = null;
            String searchJSON = paramJobj.optString(Constants.Acc_Search_Json);
            if (!StringUtil.isNullOrEmpty(searchJSON)) {
                CompanyAccountPreferences preferences = null;
                String filterConjuctionCriteria = paramJobj.optString(InvoiceConstants.Filter_Criteria, com.krawler.common.util.Constants.and);
                if (!StringUtil.isNullOrEmpty(companyid)) {
                    KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                    preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
                }
                advSearchAttributes = accJournalEntryobj.getAdvanceSearchAttributes(searchJSON, preferences, companyid, null, filterConjuctionCriteria);
            }
            //Get data for expander
            jobj = getGroupWiseGLReportDetailJson(paramJobj, dataArr, null, advSearchAttributes);
            jobj.put("data", dataArr);
            jobj.put("title", propertiesMap.get("title"));
            jobj.put("header", propertiesMap.get("header"));
            jobj.put("align", propertiesMap.get("align"));
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
    
    public JSONArray getChildAccounts(Account accountObj, int level, AccountComparator accComp,
            HashMap<String, String> usedAccountsMap, boolean hidechildCV, boolean showAllAccounts, Map<String, Double> openPeriod_Ytd_Amounts, Map<String, Double> accAmtMap, Date start, Date endDate, boolean eliminateflag, DateFormat sdf, Map<String, Double> accountOpeningForInBetweenDtInFY, Date startDate) throws SessionExpiredException, ParseException {
        JSONArray jArr = new JSONArray();
        try {
            level = level + 1;
            List<Account> list = new ArrayList(accountObj.getChildren());//Added code for sorting on account code, account name
            Collections.sort(list, accComp);
            for (Account account : list) {
                JSONArray childArray = new JSONArray();

                if (usedAccountsMap.containsKey(account.getID()) || account.getName().equals(Constants.NetProfitLossAccountName)) {
                    continue;
                }
                usedAccountsMap.put(account.getID(), account.getID());
                boolean ytdFlag = false;
                double amount = 0;
                double openingBalance = 0.0;
                Date creationDate1 = account.getCreationDate();
                Date creationDate = authHandler.getDateOnlyFormat().parse(sdf.format(creationDate1));
                if ((creationDate.after(start) || creationDate.equals(start)) && (creationDate.before(endDate) || creationDate.equals(endDate)) && !(eliminateflag && account.isEliminateflag())) {
                    if (openingBalance == 0 && accAmtMap.containsKey("opening--" + account.getID())) {
                        openingBalance += accAmtMap.get("opening--" + account.getID());
                    }
                } else if (account.getAccounttype() == 0 && startDate.after(start)) {
                    if (accountOpeningForInBetweenDtInFY.containsKey(account.getID())) {
                        openingBalance = accountOpeningForInBetweenDtInFY.get(account.getID());
                    }
                }
                double periodBalance = 0.0, c_period = 0.0, d_period = 0.0, ytd_amount = 0.0;

                
                if (accAmtMap.containsKey("c_-"+account.getID())) {
                        c_period = Math.abs(accAmtMap.get("c_-"+account.getID()));                        
                    }
                    if (accAmtMap.containsKey("d_-"+account.getID())) {
                        d_period = accAmtMap.get("d_-"+account.getID());                        
                    }
                    periodBalance=d_period - c_period;
                    amount = openingBalance + periodBalance;
                

                double openingBalanceYtd = 0.0;
                double periodBalanceYtd = 0.0;
                if ((creationDate.after(start) || creationDate.equals(start)) && (creationDate.before(endDate) || creationDate.equals(endDate)) && !(eliminateflag && account.isEliminateflag())) {
                    if (openPeriod_Ytd_Amounts.containsKey("opening--" + account.getID())) {
                        openingBalanceYtd = openPeriod_Ytd_Amounts.get("opening--" + account.getID());
                    }
                }
                if (openPeriod_Ytd_Amounts.containsKey(account.getID())) {
                    periodBalanceYtd = openPeriod_Ytd_Amounts.get(account.getID());
                }
                ytd_amount = openingBalanceYtd + periodBalanceYtd;
                //Recursive function to get child accounts
                childArray = getChildAccounts(account, level, accComp, usedAccountsMap, hidechildCV, showAllAccounts, openPeriod_Ytd_Amounts, accAmtMap, start, endDate, eliminateflag, sdf, accountOpeningForInBetweenDtInFY, startDate);

                if (!showAllAccounts && StringUtil.roundDoubleTo(openingBalance, 2) == 0 && StringUtil.roundDoubleTo(periodBalance, 2) == 0 && StringUtil.roundDoubleTo(openingBalanceYtd, 2) == 0 && StringUtil.roundDoubleTo(periodBalanceYtd, 2) == 0 && StringUtil.roundDoubleTo(amount, 2) == 0 && StringUtil.roundDoubleTo(ytd_amount, 2) == 0 && account.getChildren().isEmpty()) {
                    continue;
                }

                JSONObject obj = new JSONObject();
                obj.put("accountid", account.getID());
                obj.put("accountname", (!StringUtil.isNullOrEmpty(account.getName())) ? account.getName() : (account.getAcccode() != null ? account.getAcccode() : ""));
                String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                obj.put("acccode", acccode);
                obj.put("acctype", account.getGroup().getName());
                obj.put("level", level);
                obj.put("leaf", true);

                if (amount > 0) {
                    obj.put("d_amount", amount);
                    obj.put("c_amount", "");
                } else if (amount < 0) {
                    obj.put("c_amount", (amount == 0.0) ? amount : -amount);
                    obj.put("d_amount", "");
                } else {
                    obj.put("c_amount", "");
                    obj.put("d_amount", "");
                }

                if (openingBalance > 0) {
                    obj.put("d_amount_open", openingBalance);
                    obj.put("c_amount_open", "");
                } else if (openingBalance < 0) {
                    obj.put("c_amount_open", (openingBalance == 0.0) ? openingBalance : -openingBalance);
                    obj.put("d_amount_open", "");
                } else {
                    obj.put("c_amount_open", "");
                    obj.put("d_amount_open", "");
                }
                if (periodBalance > 0) {
                    obj.put("d_amount_period", periodBalance);
                    obj.put("c_amount_period", "");
                } else if (periodBalance < 0) {
                    obj.put("c_amount_period", (periodBalance == 0.0) ? periodBalance : -periodBalance);
                    obj.put("d_amount_period", "");
                } else {
                    obj.put("c_amount_period", "");
                    obj.put("d_amount_period", "");
                }
                obj.put("c_period", c_period);
                obj.put("d_period", d_period);
                obj.put("periodBalance", periodBalance);
                obj.put("openingamount", openingBalance);
                obj.put("endingamount", amount);

                if (amount > 0) {
                    obj.put("d_amount", amount);
                    obj.put("c_amount", "");
                } else if (amount < 0) {
                    obj.put("c_amount", (amount == 0.0) ? amount : -amount);
                    obj.put("d_amount", "");
                } else {
                    obj.put("c_amount", "");
                    obj.put("d_amount", "");
                }

                if (openingBalanceYtd > 0) {
                    obj.put("ytd_d_amount_open", openingBalanceYtd);
                    obj.put("ytd_c_amount_open", "");
                } else if (openingBalanceYtd < 0) {
                    obj.put("ytd_c_amount_open", (openingBalanceYtd == 0.0) ? openingBalanceYtd : -openingBalanceYtd);
                    obj.put("ytd_d_amount_open", "");
                } else {
                    obj.put("ytd_c_amount_open", "");
                    obj.put("ytd_d_amount_open", "");
                }
                if (periodBalanceYtd > 0) {
                    obj.put("ytd_d_amount_period", periodBalanceYtd);
                    obj.put("ytd_c_amount_period", "");
                } else if (periodBalanceYtd < 0) {
                    obj.put("ytd_c_amount_period", (periodBalanceYtd == 0.0) ? periodBalanceYtd : -periodBalanceYtd);
                    obj.put("ytd_d_amount_period", "");
                } else {
                    obj.put("ytd_c_amount_period", "");
                    obj.put("ytd_d_amount_period", "");
                }

                if (ytd_amount > 0) {
                    obj.put("ytd_d_amount", ytd_amount);
                    obj.put("ytd_c_amount", "");
                } else if (ytd_amount < 0) {
                    obj.put("ytd_c_amount", (ytd_amount == 0.0) ? ytd_amount : -ytd_amount);
                    obj.put("ytd_d_amount", "");
                } else {
                    obj.put("ytd_c_amount", "");
                    obj.put("ytd_d_amount", "");
                }

                //Put child account's JSON from group company
                if (childArray.length() == 0) {
                    if (showAllAccounts || (!showAllAccounts && (amount != 0 || ytd_amount != 0 || openingBalanceYtd != 0 || periodBalanceYtd != 0 || openingBalance != 0 || periodBalance != 0))) { //If child not present and account amount > 0 then need to add account as leaf account
                        obj.put("leaf", true);
                        jArr.put(obj);
                    }
                } else {
                    if (hidechildCV) {
                        for (int i = 0; i < childArray.length(); i++) {
                            JSONObject jobjTemp = childArray.getJSONObject(i);
                            if (jobjTemp.has("level") && jobjTemp.get("level") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("level").toString())) {
                                int levelTemp = Integer.parseInt(jobjTemp.get("level").toString());
                                if (levelTemp == level + 1) {//Add only one level down child accounts sum as it already contain sum of their childrens in case of multi level.                                    
                                    if (jobjTemp.has("d_amount") && jobjTemp.get("d_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount").toString())) {
                                        double d_amount = Double.parseDouble(jobjTemp.get("d_amount").toString());
                                        amount += d_amount;
                                    }
                                    if (jobjTemp.has("d_amount_open") && jobjTemp.get("d_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount_open").toString())) {
                                        double d_amount_open = Double.parseDouble(jobjTemp.get("d_amount_open").toString());
                                        openingBalance += d_amount_open;
                                    }
                                    if (jobjTemp.has("d_amount_period") && jobjTemp.get("d_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount_period").toString())) {
                                        double d_amount_period = Double.parseDouble(jobjTemp.get("d_amount_period").toString());
                                        periodBalance += d_amount_period;
                                    }
                                    if (jobjTemp.has("d_period") && jobjTemp.get("d_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_period").toString())) {
                                        double d_amount_period = Double.parseDouble(jobjTemp.get("d_period").toString());
                                        d_period += d_amount_period;
                                    }
                                    if (jobjTemp.has("c_period") && jobjTemp.get("c_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_period").toString())) {
                                        double d_amount_period = Double.parseDouble(jobjTemp.get("c_period").toString());
                                        c_period += d_amount_period;
                                    }
                                    if (jobjTemp.has("ytd_d_amount_open") && jobjTemp.get("ytd_d_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount_open").toString())) {
                                        double ytd_d_amount_open = Double.parseDouble(jobjTemp.get("ytd_d_amount_open").toString());
                                        openingBalanceYtd += ytd_d_amount_open;
                                    }
                                    if (jobjTemp.has("ytd_d_amount_period") && jobjTemp.get("ytd_d_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount_period").toString())) {
                                        double ytd_d_amount_period = Double.parseDouble(jobjTemp.get("ytd_d_amount_period").toString());
                                        periodBalanceYtd += ytd_d_amount_period;
                                    }
                                    if (jobjTemp.has("ytd_d_amount") && jobjTemp.get("ytd_d_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount").toString())) {
                                        double ytd_d_amount = Double.parseDouble(jobjTemp.get("ytd_d_amount").toString());
                                        ytd_amount += ytd_d_amount;
                                    }
                                    if (jobjTemp.has("c_amount") && jobjTemp.get("c_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount").toString())) {
                                        double c_amount = Double.parseDouble(jobjTemp.get("c_amount").toString());
                                        amount -= c_amount;
                                    }
                                    if (jobjTemp.has("c_amount_open") && jobjTemp.get("c_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount_open").toString())) {
                                        double c_amount_open = Double.parseDouble(jobjTemp.get("c_amount_open").toString());
                                        openingBalance -= c_amount_open;
                                    }
                                    if (jobjTemp.has("c_amount_period") && jobjTemp.get("c_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount_period").toString())) {
                                        double c_amount_period = Double.parseDouble(jobjTemp.get("c_amount_period").toString());
                                        periodBalance -= c_amount_period;
                                    }
                                    if (jobjTemp.has("ytd_c_amount_open") && jobjTemp.get("ytd_c_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount_open").toString())) {
                                        double ytd_c_amount_open = Double.parseDouble(jobjTemp.get("ytd_c_amount_open").toString());
                                        openingBalanceYtd -= ytd_c_amount_open;
                                    }
                                    if (jobjTemp.has("ytd_c_amount_period") && jobjTemp.get("ytd_c_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount_period").toString())) {
                                        double ytd_c_amount_period = Double.parseDouble(jobjTemp.get("ytd_c_amount_period").toString());
                                        periodBalanceYtd -= ytd_c_amount_period;
                                    }
                                    if (jobjTemp.has("ytd_c_amount") && jobjTemp.get("ytd_c_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount").toString())) {
                                        double ytd_c_amount = Double.parseDouble(jobjTemp.get("ytd_c_amount").toString());
                                        ytd_amount -= ytd_c_amount;
                                    }
                                }
                            }
                        }
                        if (amount > 0) {
                            obj.put("d_amount", amount);
                            obj.put("c_amount", "");
                        } else if (amount < 0) {
                            obj.put("c_amount", (amount == 0.0) ? amount : -amount);
                            obj.put("d_amount", "");
                        } else {
                            obj.put("c_amount", "");
                            obj.put("d_amount", "");
                        }
                        if (openingBalance > 0) {
                            obj.put("d_amount_open", openingBalance);
                            obj.put("c_amount_open", "");
                        } else if (openingBalance < 0) {
                            obj.put("c_amount_open", (openingBalance == 0.0) ? openingBalance : -openingBalance);
                            obj.put("d_amount_open", "");
                        } else {
                            obj.put("c_amount_open", "");
                            obj.put("d_amount_open", "");
                        }
                        if (periodBalance > 0) {
                            obj.put("d_amount_period", periodBalance);
                            obj.put("c_amount_period", "");
                        } else if (periodBalance < 0) {
                            obj.put("c_amount_period", (periodBalance == 0.0) ? periodBalance : -periodBalance);
                            obj.put("d_amount_period", "");
                        } else {
                            obj.put("c_amount_period", "");
                            obj.put("d_amount_period", "");
                        }
                        obj.put("periodBalance", periodBalance);
                        obj.put("openingamount", openingBalance);
                        obj.put("endingamount", amount);
                        obj.put("c_period", c_period);
                        obj.put("d_period", d_period);

                        if (ytd_amount > 0) {
                            obj.put("ytd_d_amount", ytd_amount);
                            obj.put("ytd_c_amount", "");
                        } else if (ytd_amount < 0) {
                            obj.put("ytd_c_amount", (ytd_amount == 0.0) ? ytd_amount : -ytd_amount);
                            obj.put("ytd_d_amount", "");
                        } else {
                            obj.put("ytd_c_amount", "");
                            obj.put("ytd_d_amount", "");
                        }
                        if (openingBalanceYtd > 0) {
                            obj.put("ytd_d_amount_open", openingBalanceYtd);
                            obj.put("ytd_c_amount_open", "");
                        } else if (openingBalanceYtd < 0) {
                            obj.put("ytd_c_amount_open", (openingBalanceYtd == 0.0) ? openingBalanceYtd : -openingBalanceYtd);
                            obj.put("ytd_d_amount_open", "");
                        } else {
                            obj.put("ytd_c_amount_open", "");
                            obj.put("ytd_d_amount_open", "");
                        }
                        if (periodBalanceYtd > 0) {
                            obj.put("ytd_d_amount_period", periodBalanceYtd);
                            obj.put("ytd_c_amount_period", "");
                        } else if (periodBalanceYtd < 0) {
                            obj.put("ytd_c_amount_period", (periodBalanceYtd == 0.0) ? periodBalanceYtd : -periodBalanceYtd);
                            obj.put("ytd_d_amount_period", "");
                        } else {
                            obj.put("ytd_c_amount_period", "");
                            obj.put("ytd_d_amount_period", "");
                        }
                    }
                    if (amount == 0) {
                        obj.put("c_amount", "");
                    }
                    if (openingBalance == 0) {
                        obj.put("c_amount_open", "");
                    }
                    if (periodBalance == 0) {
                        obj.put("c_amount_period", "");
                    }
                    if (ytd_amount == 0) {
                        obj.put("ytd_c_amount", "");
                    }
                    if (openingBalanceYtd == 0) {
                        obj.put("ytd_c_amount_open", "");
                    }
                    if (periodBalanceYtd == 0) {
                        obj.put("ytd_c_amount_period", "");
                    }
                    if (hidechildCV) {
                        obj.put("leaf", true);
                    } else {
                        obj.put("leaf", false);
                    }
                    jArr.put(obj);
                    if (!hidechildCV) {
                        for (int i = 0; i < childArray.length(); i++) {
                            jArr.put(childArray.getJSONObject(i));
                        }
                    }
                }
            }
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
    
     @Override
    public void addPerpetualInventoryJEGlobalLevelCustomData(HashMap<String, Object> requestParams, JournalEntry journalEntry, JSONObject obj) throws ServiceException {
        try {
            String companyid = journalEntry.getCompany().getCompanyID();
            int transactionModuleId = journalEntry.getTransactionModuleid();
            DateFormat df = requestParams.containsKey("dateformat") ? (DateFormat) requestParams.get("dateformat") : null;



            Map<String, Object> variableMap = new HashMap<>();
            HashMap<String, Object> fieldrequestParams = new HashMap();
            JSONObject params = new JSONObject();
            params.put(Constants.companyKey, companyid);
            params.put(Constants.linkModuleId, Constants.Acc_GENERAL_LEDGER_ModuleId);
            params.put(Constants.isLink, true);
            params.put(Constants.customcolumn, 0);
            params.put(Constants.userdf, df);
            params.put(Constants.isExport, true);
            params.put("isJEReport", true);
            HashMap<String, Object> paramsMap = new HashMap<>();
            if (transactionModuleId == Constants.Acc_Goods_Receipt_ModuleId && !StringUtil.isNullOrEmpty(journalEntry.getTransactionId())) {
                //Goods Receipt
                HashMap<String, String> GRNReplaceFieldMap = new HashMap<>();
                HashMap<String, String> GRNCustomFieldMap = new HashMap<>();
                HashMap<String, String> GRNCustomDateFieldMap = new HashMap<>();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Goods_Receipt_ModuleId, 0));
                HashMap<String, Integer> GRNFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, GRNReplaceFieldMap, GRNCustomFieldMap, GRNCustomDateFieldMap);

                paramsMap.put("ID", journalEntry.getTransactionId());
                GoodsReceiptOrderCustomData goodsReceiptOrderCustomData = (GoodsReceiptOrderCustomData) kwlCommonTablesDAOObj.getRequestedObjectFields(GoodsReceiptOrder.class, new String[]{"goodsReceiptOrderCustomData"}, paramsMap);
                if (goodsReceiptOrderCustomData != null) {
                    AccountingManager.setCustomColumnValues(goodsReceiptOrderCustomData, GRNFieldMap, GRNReplaceFieldMap, variableMap);
                    fieldDataManagercntrl.addCustomData(variableMap, GRNCustomFieldMap, GRNCustomDateFieldMap, obj, params);
                }
            } else if (transactionModuleId == Constants.Acc_Delivery_Order_ModuleId && !StringUtil.isNullOrEmpty(journalEntry.getTransactionId())) {
                //Delivery Order
                HashMap<String, String> DOReplaceFieldMap = new HashMap<>();
                HashMap<String, String> DOCustomFieldMap = new HashMap<>();
                HashMap<String, String> DOCustomDateFieldMap = new HashMap<>();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Delivery_Order_ModuleId, 0));
                HashMap<String, Integer> DOFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, DOReplaceFieldMap, DOCustomFieldMap, DOCustomDateFieldMap);

                paramsMap.put("ID", journalEntry.getTransactionId());
                DeliveryOrderCustomData deliveryOrderCustomData = (DeliveryOrderCustomData) kwlCommonTablesDAOObj.getRequestedObjectFields(DeliveryOrder.class, new String[]{"deliveryOrderCustomData"}, paramsMap);
                if (deliveryOrderCustomData != null) {
                    AccountingManager.setCustomColumnValues(deliveryOrderCustomData, DOFieldMap, DOReplaceFieldMap, variableMap);
                    fieldDataManagercntrl.addCustomData(variableMap, DOCustomFieldMap, DOCustomDateFieldMap, obj, params);
                }
            } else if (transactionModuleId == Constants.Acc_Purchase_Return_ModuleId && !StringUtil.isNullOrEmpty(journalEntry.getTransactionId())) {
                //Purchase Return
                HashMap<String, String> PRReplaceFieldMap = new HashMap<>();
                HashMap<String, String> PRCustomFieldMap = new HashMap<>();
                HashMap<String, String> PRCustomDateFieldMap = new HashMap<>();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Purchase_Return_ModuleId, 0));
                HashMap<String, Integer> PRFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, PRReplaceFieldMap, PRCustomFieldMap, PRCustomDateFieldMap);
                
                paramsMap.put("ID", journalEntry.getTransactionId());
                PurchaseReturnCustomData purchaseReturnCustomData = (PurchaseReturnCustomData) kwlCommonTablesDAOObj.getRequestedObjectFields(PurchaseReturn.class, new String[]{"purchaseReturnCustomData"}, paramsMap);
                if (purchaseReturnCustomData != null) {
                    AccountingManager.setCustomColumnValues(purchaseReturnCustomData, PRFieldMap, PRReplaceFieldMap, variableMap);
                    fieldDataManagercntrl.addCustomData(variableMap, PRCustomFieldMap, PRCustomDateFieldMap, obj, params);
                }
            } else if (transactionModuleId == Constants.Acc_Sales_Return_ModuleId && !StringUtil.isNullOrEmpty(journalEntry.getTransactionId())) {
                //Sales Return
                HashMap<String, String> SRReplaceFieldMap = new HashMap<>();
                HashMap<String, String> SRCustomFieldMap = new HashMap<>();
                HashMap<String, String> SRCustomDateFieldMap = new HashMap<>();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Sales_Return_ModuleId, 0));
                HashMap<String, Integer> SRFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, SRReplaceFieldMap, SRCustomFieldMap, SRCustomDateFieldMap);
                
                paramsMap.put("ID", journalEntry.getTransactionId());
                SalesReturnCustomData salesReturnCustomData = (SalesReturnCustomData) kwlCommonTablesDAOObj.getRequestedObjectFields(SalesReturn.class, new String[]{"salesReturnCustomData"}, paramsMap);
                if (salesReturnCustomData != null) {
                    AccountingManager.setCustomColumnValues(salesReturnCustomData, SRFieldMap, SRReplaceFieldMap, variableMap);
                    fieldDataManagercntrl.addCustomData(variableMap, SRCustomFieldMap, SRCustomDateFieldMap, obj, params);
                }
            } else if (transactionModuleId == Constants.Inventory_Stock_Adjustment_ModuleId && !StringUtil.isNullOrEmpty(journalEntry.getTransactionId())) {
                //Stock Adjustment
                HashMap<String, String> SAReplaceFieldMap = new HashMap<>();
                HashMap<String, String> SACustomFieldMap = new HashMap<>();
                HashMap<String, String> SACustomDateFieldMap = new HashMap<>();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Inventory_Stock_Adjustment_ModuleId, 0));
                HashMap<String, Integer> SAFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, SAReplaceFieldMap, SACustomFieldMap, SACustomDateFieldMap);

                paramsMap.put("id", journalEntry.getTransactionId());
                StockAdjustmentCustomData stockAdjustmentCustomData = (StockAdjustmentCustomData) kwlCommonTablesDAOObj.getRequestedObjectFields(StockAdjustment.class, new String[]{"stockAdjustmentCustomData"}, paramsMap);
                if (stockAdjustmentCustomData != null) {
                    AccountingManager.setCustomColumnValues(stockAdjustmentCustomData, SAFieldMap, SAReplaceFieldMap, variableMap);
                    fieldDataManagercntrl.addCustomData(variableMap, SACustomFieldMap, SACustomDateFieldMap, obj, params);
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AccFinancialReportsServiceImpl.addPerpetualInventoryJEGlobalLevelCustomData" + ex.getMessage(), ex);
        }
    }

     @Override
    public void addPerpetualInventoryJELineLevelCustomData(HashMap<String, Object> requestParams, JournalEntryDetail jed, JSONObject obj) throws ServiceException {
        try {
            String companyid = jed.getCompany().getCompanyID();
            int transactionModuleId = jed.getJournalEntry().getTransactionModuleid();
            DateFormat df = requestParams.containsKey("dateformat") ? (DateFormat) requestParams.get("dateformat") : null;
            Map<String, Object> variableMap = new HashMap<>();

            HashMap<String, Object> fieldrequestParams = new HashMap();

            JSONObject params = new JSONObject();
            params.put(Constants.companyKey, companyid);
            params.put(Constants.linkModuleId, Constants.Acc_GENERAL_LEDGER_ModuleId);
            params.put(Constants.isLink, true);
            params.put(Constants.customcolumn, 0);
            params.put(Constants.userdf, df);
            params.put(Constants.isExport, true);
            params.put("isJEReport", true);
            KwlReturnObject kwlReturnObject = null;
            if (transactionModuleId == Constants.Acc_Goods_Receipt_ModuleId && !StringUtil.isNullOrEmpty(jed.getJournalEntry().getTransactionId())) {
                HashMap<String, String> GRNReplaceFieldLineMap = new HashMap<>();
                HashMap<String, String> GRNCustomFieldLineMap = new HashMap<>();
                HashMap<String, String> GRNCustomDateFieldLineMap = new HashMap<>();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Goods_Receipt_ModuleId, 1));
                HashMap<String, Integer> GRNFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, GRNReplaceFieldLineMap, GRNCustomFieldLineMap, GRNCustomDateFieldLineMap);

                kwlReturnObject = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), jed.getJournalEntry().getTransactionId());
                GoodsReceiptOrder goodsReceiptOrder = (GoodsReceiptOrder) kwlReturnObject.getEntityList().get(0);
                Set<GoodsReceiptOrderDetails> grnRows = goodsReceiptOrder.getRows();
                for (GoodsReceiptOrderDetails row : grnRows) {
                    if (row.getInventoryJEdetail() != null && row.getInventoryJEdetail().getID().equals(jed.getID())) {
                        GoodsReceiptOrderDetailsCustomDate goodsReceiptOrderDetailsCustomDate = (GoodsReceiptOrderDetailsCustomDate) row.getGoodsReceiptOrderDetailsCustomDate();
                        AccountingManager.setCustomColumnValues(goodsReceiptOrderDetailsCustomDate, GRNFieldLineMap, GRNReplaceFieldLineMap, variableMap);
                        fieldDataManagercntrl.addCustomData(variableMap, GRNCustomFieldLineMap, GRNCustomDateFieldLineMap, obj, params);
                    }
                }
            } else if (transactionModuleId == Constants.Acc_Delivery_Order_ModuleId && !StringUtil.isNullOrEmpty(jed.getJournalEntry().getTransactionId())) {
                HashMap<String, String> DOReplaceFieldLineMap = new HashMap<>();
                HashMap<String, String> DOCustomFieldLineMap = new HashMap<>();
                HashMap<String, String> DOCustomDateFieldLineMap = new HashMap<>();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Delivery_Order_ModuleId, 1));
                HashMap<String, Integer> DOFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, DOReplaceFieldLineMap, DOCustomFieldLineMap, DOCustomDateFieldLineMap);

                kwlReturnObject = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), jed.getJournalEntry().getTransactionId());
                DeliveryOrder deliveryOrder = (DeliveryOrder) kwlReturnObject.getEntityList().get(0);
                if (deliveryOrder != null) {
                    Set<DeliveryOrderDetail> doRows = deliveryOrder.getRows();
                    for (DeliveryOrderDetail row : doRows) {
                        if (row.getInventoryJEdetail() != null && row.getInventoryJEdetail().getID().equals(jed.getID())) {
                            DeliveryOrderDetailCustomData deliveryOrderDetailCustomData = row.getDeliveryOrderDetailCustomData();
                            if (deliveryOrderDetailCustomData != null) {
                                AccountingManager.setCustomColumnValues(deliveryOrderDetailCustomData, DOFieldLineMap, DOReplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, DOCustomFieldLineMap, DOCustomDateFieldLineMap, obj, params);
                            }
                        }
                    }
                }
            } else if (transactionModuleId == Constants.Acc_Purchase_Return_ModuleId && !StringUtil.isNullOrEmpty(jed.getJournalEntry().getTransactionId())) {
                HashMap<String, String> PRReplaceFieldLineMap = new HashMap<>();
                HashMap<String, String> PRCustomFieldLineMap = new HashMap<>();
                HashMap<String, String> PRCustomDateFieldLineMap = new HashMap<>();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Purchase_Return_ModuleId, 1));
                HashMap<String, Integer> PRFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, PRReplaceFieldLineMap, PRCustomFieldLineMap, PRCustomDateFieldLineMap);

                kwlReturnObject = accountingHandlerDAOobj.getObject(PurchaseReturn.class.getName(), jed.getJournalEntry().getTransactionId());
                PurchaseReturn purchaseReturn = (PurchaseReturn) kwlReturnObject.getEntityList().get(0);
                if (purchaseReturn != null) {
                    Set<PurchaseReturnDetail> prRows = purchaseReturn.getRows();
                    for (PurchaseReturnDetail row : prRows) {
                        if (row.getInventoryJEdetail() != null && row.getInventoryJEdetail().getID().equals(jed.getID())) {
                            PurchaseReturnDetailCustomDate purchaseReturnDetailCustomData = row.getPurchaseReturnDetailCustomDate();
                            if (purchaseReturnDetailCustomData != null) {
                                AccountingManager.setCustomColumnValues(purchaseReturnDetailCustomData, PRFieldLineMap, PRReplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, PRCustomFieldLineMap, PRCustomDateFieldLineMap, obj, params);
                            }
                        }
                    }
                }
            } else if (transactionModuleId == Constants.Acc_Sales_Return_ModuleId && !StringUtil.isNullOrEmpty(jed.getJournalEntry().getTransactionId())) {
                HashMap<String, String> SRReplaceFieldLineMap = new HashMap<>();
                HashMap<String, String> SRCustomFieldLineMap = new HashMap<>();
                HashMap<String, String> SRCustomDateFieldLineMap = new HashMap<>();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Sales_Return_ModuleId, 1));
                HashMap<String, Integer> SRFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, SRReplaceFieldLineMap, SRCustomFieldLineMap, SRCustomDateFieldLineMap);

                kwlReturnObject = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), jed.getJournalEntry().getTransactionId());
                SalesReturn salesReturn = (SalesReturn) kwlReturnObject.getEntityList().get(0);
                if (salesReturn != null) {
                    Set<SalesReturnDetail> srRows = salesReturn.getRows();
                    for (SalesReturnDetail row : srRows) {
                        if (row.getInventoryJEdetail() != null && row.getInventoryJEdetail().getID().equals(jed.getID())) {
                            SalesReturnDetailCustomData salesReturnDetailCustomData = row.getSalesReturnDetailCustomData();
                            if (salesReturnDetailCustomData != null) {
                                AccountingManager.setCustomColumnValues(salesReturnDetailCustomData, SRFieldLineMap, SRReplaceFieldLineMap, variableMap);
                                fieldDataManagercntrl.addCustomData(variableMap, SRCustomFieldLineMap, SRCustomDateFieldLineMap, obj, params);
                            }
                        }
                    }
                }
            } else if (transactionModuleId == Constants.Inventory_Stock_Adjustment_ModuleId && !StringUtil.isNullOrEmpty(jed.getJournalEntry().getTransactionId())) {
                HashMap<String, String> SAReplaceFieldLineMap = new HashMap<>();
                HashMap<String, String> SACustomFieldLineMap = new HashMap<>();
                HashMap<String, String> SACustomDateFieldLineMap = new HashMap<>();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Inventory_Stock_Adjustment_ModuleId, 1));
                HashMap<String, Integer> SAFieldLineMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, SAReplaceFieldLineMap, SACustomFieldLineMap, SACustomDateFieldLineMap);
                
                kwlReturnObject = accountingHandlerDAOobj.getObject(StockAdjustment.class.getName(), jed.getJournalEntry().getTransactionId());
                StockAdjustment stockAdjustment = (StockAdjustment) kwlReturnObject.getEntityList().get(0);
                if (stockAdjustment != null) {
                    StockAdjustmentCustomData stockAdjustmentCustomData = stockAdjustment.getStockAdjustmentLineLevelCustomData();
                    if (stockAdjustmentCustomData != null) {
                        AccountingManager.setCustomColumnValues(stockAdjustmentCustomData, SAFieldLineMap, SAReplaceFieldLineMap, variableMap);
                        fieldDataManagercntrl.addCustomData(variableMap, SACustomFieldLineMap, SACustomDateFieldLineMap, obj, params);
                    }
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AccFinancialReportsServiceImpl.addPerpetualInventoryJELineLevelCustomData" + ex.getMessage(), ex);
        }
    }
    
    public double[] getSOAVendorAmountFromJEDetail(HashMap<String, Object> requestParams, List<JournalEntryDetail> listJEDetail) throws ServiceException {

        double [] amountArray = {0,0}; // 0 - Amount, 1 - AmountInBase
        
        String companyid = (String) requestParams.get("companyid");
        
        Date startDate = (requestParams.containsKey("startDate") && requestParams.get("startDate") != null) ? (Date) requestParams.get("startDate") : new Date();
        Date asofDate = (requestParams.containsKey("asofDate") && requestParams.get("asofDate") != null) ? (Date) requestParams.get("asofDate") : new Date();

        String invoiceVendorId = (requestParams.containsKey("invoiceVendorId") && requestParams.get("invoiceVendorId") != null) ? requestParams.get("invoiceVendorId").toString() : "";
        String gcurrencyid = requestParams.containsKey(Constants.globalCurrencyKey) && requestParams.get(Constants.globalCurrencyKey) != null ? requestParams.get(Constants.globalCurrencyKey).toString() : "";
        String type = requestParams.containsKey("type") && requestParams.get("type") != null ? requestParams.get("type").toString() : "";
        String invoiceId = requestParams.containsKey("invoiceId") && requestParams.get("invoiceId") != null ? requestParams.get("invoiceId").toString() : "";
        String jeId = requestParams.containsKey("jeId") && requestParams.get("jeId") != null ? requestParams.get("jeId").toString() : "";
        String VendorAccountID = requestParams.containsKey("VendorAccountID") && requestParams.get("VendorAccountID") != null ? requestParams.get("VendorAccountID").toString() : "";

        boolean invoiceAmountDueFilter = true;
        if (requestParams.containsKey("invoiceAmountDueFilter") && (!StringUtil.isNullOrEmpty("invoiceAmountDueFilter"))) {
            invoiceAmountDueFilter = Boolean.parseBoolean(requestParams.get("invoiceAmountDueFilter").toString());
        }

        boolean isAccured = false;
        if (requestParams.containsKey("isAccured") && (!StringUtil.isNullOrEmpty("isAccured"))) {
            /**
             * if accrued is true then consider forex JE before the start date.
             */
            isAccured = Boolean.parseBoolean(requestParams.get("isAccured").toString());
        }

        double amountinbase = requestParams.containsKey("amountinbase") && requestParams.get("amountinbase") != null ? Double.parseDouble(requestParams.get("amountinbase").toString()) : 0.0;
        double amount = requestParams.containsKey("amount") && requestParams.get("amount") != null ? Double.parseDouble(requestParams.get("amount").toString()) : 0.0;
        double tot_amountinbase = 0.0;

        Calendar cal = Calendar.getInstance();
        cal.setTime(startDate);
        cal.add(Calendar.DATE, -1);  // number of days to add
        Date st = cal.getTime();
        Calendar end = Calendar.getInstance();
        end.setTime(asofDate);
        end.add(Calendar.DATE, 1);  // number of days to add
        Date ed = end.getTime();

        if (invoiceAmountDueFilter) {
            Set<String> vendorAccountsSet = new HashSet<>();
            vendorAccountsSet.add(VendorAccountID);

            if (type.equalsIgnoreCase("Payment Made") || type.equalsIgnoreCase(Constants.DISHONOURED_MAKE_PAYMENT)) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), invoiceId);
                Payment payment = (Payment) objItr.getEntityList().get(0);

                Set<LinkDetailPayment> linkDetailPayment = payment.getLinkDetailPayments();
                for (LinkDetailPayment linkdetailpayment : linkDetailPayment) {
                    if (!vendorAccountsSet.contains(linkdetailpayment.getGoodsReceipt().getAccount().getID())) {
                        vendorAccountsSet.add(linkdetailpayment.getGoodsReceipt().getAccount().getID());
                    }
                }

                Set<CreditNotePaymentDetails> creditNotePaymentDetails = payment.getCreditNotePaymentDetails();
                for (CreditNotePaymentDetails creditnotepaymentdetails : creditNotePaymentDetails) {
                    if (!vendorAccountsSet.contains(creditnotepaymentdetails.getCreditnote().getAccount().getID())) {
                        vendorAccountsSet.add(creditnotepaymentdetails.getCreditnote().getAccount().getID());
                    }
                }

                KwlReturnObject kwlJeDetails = accJournalEntryobj.getJournalEntryDetail(jeId, companyid);
                List listJeDetails = kwlJeDetails.getEntityList();
                if (listJeDetails != null) {
                    for (int j = 0; j < listJeDetails.size(); j++) {
                        JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listJeDetails.get(j);
                        if (vendorAccountsSet.contains(journalEntryDetail.getAccount().getID()) && !journalEntryDetail.isIsSeparated()) {
                            tot_amountinbase += journalEntryDetail.getAmountinbase();
                        }
                    }
                }

                for (LinkDetailPayment linkdetailpayment : linkDetailPayment) {
                    if (!StringUtil.isNullOrEmpty(linkdetailpayment.getLinkedGainLossJE())) {
                        KwlReturnObject kwlLinkedJeDetails = accJournalEntryobj.getJournalEntryDetail(linkdetailpayment.getLinkedGainLossJE(), companyid);
                        List listLinkedJeDetails = kwlLinkedJeDetails.getEntityList();
                        if (listLinkedJeDetails != null) {
                            for (int j = 0; j < listLinkedJeDetails.size(); j++) {
                                JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listLinkedJeDetails.get(j);
                                if (isAccured) {
                                    if (!vendorAccountsSet.contains(journalEntryDetail.getAccount().getID()) && (journalEntryDetail.getJournalEntry().getEntryDate().before(startDate))) {
                                        listJEDetail.add(journalEntryDetail);
                                    }
                                } 
                                if (!vendorAccountsSet.contains(journalEntryDetail.getAccount().getID())
                                        && (journalEntryDetail.getJournalEntry().getEntryDate().after(st) && journalEntryDetail.getJournalEntry().getEntryDate().before(ed))) {
                                    listJEDetail.add(journalEntryDetail);
                                }
                            }
                        }
                    }
                }

                Set<LinkDetailPaymentToCreditNote> linkDetailPaymentToCreditNote = payment.getLinkDetailPaymentToCreditNote();
                for (LinkDetailPaymentToCreditNote linkdetailpaymenttocreditnote : linkDetailPaymentToCreditNote) {
                    if (!StringUtil.isNullOrEmpty(linkdetailpaymenttocreditnote.getLinkedGainLossJE())) {
                        KwlReturnObject kwlLinkedJeDetails = accJournalEntryobj.getJournalEntryDetail(linkdetailpaymenttocreditnote.getLinkedGainLossJE(), companyid);
                        List listLinkedJeDetails = kwlLinkedJeDetails.getEntityList();
                        if (listLinkedJeDetails != null) {
                            for (int j = 0; j < listLinkedJeDetails.size(); j++) {
                                JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listLinkedJeDetails.get(j);
                                if (isAccured) {
                                    if (!vendorAccountsSet.contains(journalEntryDetail.getAccount().getID()) && (journalEntryDetail.getJournalEntry().getEntryDate().before(startDate))) {
                                        listJEDetail.add(journalEntryDetail);
                                    }
                                } 
                                if (!vendorAccountsSet.contains(journalEntryDetail.getAccount().getID())
                                        && (journalEntryDetail.getJournalEntry().getEntryDate().after(st) && journalEntryDetail.getJournalEntry().getEntryDate().before(ed))) {
                                    listJEDetail.add(journalEntryDetail);
                                }
                            }
                        }
                    }
                }
                if (tot_amountinbase != 0 && tot_amountinbase != amountinbase) {
                    amountinbase = tot_amountinbase;
                }
            }
            if (type.equalsIgnoreCase("Debit Note")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), invoiceId);
                DebitNote debitNote = (DebitNote) objItr.getEntityList().get(0);

                Set<DebitNoteDetail> debitNoteDetail = debitNote.getRows();
                for (DebitNoteDetail debitnotedetail : debitNoteDetail) {
                    if (!vendorAccountsSet.contains(debitnotedetail.getDebitNote().getAccount().getID())) {
                        vendorAccountsSet.add(debitnotedetail.getDebitNote().getAccount().getID());
                    }
                }

                KwlReturnObject kwlJeDetails = accJournalEntryobj.getJournalEntryDetail(jeId, companyid);
                List listJeDetails = kwlJeDetails.getEntityList();
                if (listJeDetails != null) {
                    for (int j = 0; j < listJeDetails.size(); j++) {
                        JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listJeDetails.get(j);
                        if (vendorAccountsSet.contains(journalEntryDetail.getAccount().getID()) && !journalEntryDetail.isIsSeparated()) {
                            if (journalEntryDetail.getJournalEntry() != null && journalEntryDetail.getJournalEntry().getTypeValue() == Constants.Party_Journal_Entry) {
//                                            if (invoiceVendorId.equalsIgnoreCase(journalEntryDetail.getCustomerVendorId())) {
                                if (invoiceVendorId.equalsIgnoreCase(journalEntryDetail.getCustomerVendorId()) && !journalEntryDetail.isIsSeparated()) {
                                    tot_amountinbase += journalEntryDetail.getAmountinbase();
                                }
                            } else {
                                tot_amountinbase += journalEntryDetail.getAmountinbase();
                            }
                        }
                    }
                }
                for (DebitNoteDetail debitnotedetail : debitNoteDetail) {
                    if (!StringUtil.isNullOrEmpty(debitnotedetail.getLinkedGainLossJE())) {
                        KwlReturnObject kwlLinkedJeDetails = accJournalEntryobj.getJournalEntryDetail(debitnotedetail.getLinkedGainLossJE(), companyid);
                        List listLinkedJeDetails = kwlLinkedJeDetails.getEntityList();
                        if (listLinkedJeDetails != null) {
                            for (int j = 0; j < listLinkedJeDetails.size(); j++) {
                                JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listLinkedJeDetails.get(j);
                                if (isAccured) {
                                    if (!vendorAccountsSet.contains(journalEntryDetail.getAccount().getID()) && (journalEntryDetail.getJournalEntry().getEntryDate().before(startDate))) {
                                        listJEDetail.add(journalEntryDetail);
                                    }
                                }
                                if (!vendorAccountsSet.contains(journalEntryDetail.getAccount().getID())
                                        && (journalEntryDetail.getJournalEntry().getEntryDate().after(st) && journalEntryDetail.getJournalEntry().getEntryDate().before(ed))) {
                                    listJEDetail.add(journalEntryDetail);
                                }
                            }
                        }
                    }
                }
                if (tot_amountinbase != 0 && tot_amountinbase != amountinbase) {
                    amountinbase = tot_amountinbase;

                    if (debitNote.getCurrency().getCurrencyID().equals(gcurrencyid)) {
                        amount = amountinbase;
                    }
                }
            }
        }
        
        amountArray[0] = amount;
        amountArray[1] = amountinbase;
        
        return amountArray;
    }
    
    public double[] getSOACustomerAmountFromJEDetail(HashMap<String, Object> requestParams, List<JournalEntryDetail> listJEDetail) throws ServiceException {

        double[] amountArray = {0, 0}; // 0 - Amount, 1 - AmountInBase

        String companyid = (String) requestParams.get("companyid");

        Date startDate = (requestParams.containsKey("startDate") && requestParams.get("startDate") != null) ? (Date) requestParams.get("startDate") : new Date();
        Date asofDate = (requestParams.containsKey("asofDate") && requestParams.get("asofDate") != null) ? (Date) requestParams.get("asofDate") : new Date();

        String invoiceCustomerId = (requestParams.containsKey("invoiceCustomerId") && requestParams.get("invoiceCustomerId") != null) ? requestParams.get("invoiceCustomerId").toString() : "";
        String gcurrencyid = requestParams.containsKey(Constants.globalCurrencyKey) && requestParams.get(Constants.globalCurrencyKey) != null ? requestParams.get(Constants.globalCurrencyKey).toString() : "";
        String type = requestParams.containsKey("type") && requestParams.get("type") != null ? requestParams.get("type").toString() : "";
        String invoiceId = requestParams.containsKey("invoiceId") && requestParams.get("invoiceId") != null ? requestParams.get("invoiceId").toString() : "";

        String jeId = requestParams.containsKey("jeId") && requestParams.get("jeId") != null ? requestParams.get("jeId").toString() : "";

        String CustomerAccountID = requestParams.containsKey("CustomerAccountID") && requestParams.get("CustomerAccountID") != null ? requestParams.get("CustomerAccountID").toString() : "";

        boolean invoiceAmountDueFilter = true;
        if (requestParams.containsKey("invoiceAmountDueFilter") && (!StringUtil.isNullOrEmpty("invoiceAmountDueFilter"))) {
            invoiceAmountDueFilter = Boolean.parseBoolean(requestParams.get("invoiceAmountDueFilter").toString());
        }

        double amountinbase = requestParams.containsKey("amountinbase") && requestParams.get("amountinbase") != null ? Double.parseDouble(requestParams.get("amountinbase").toString()) : 0.0;
        double amount = requestParams.containsKey("amount") && requestParams.get("amount") != null ? Double.parseDouble(requestParams.get("amount").toString()) : 0.0;
        double tot_amountinbase = 0.0;
        double tot_amount = 0.0;

        Calendar cal = Calendar.getInstance();
        cal.setTime(startDate);
        cal.add(Calendar.DATE, -1);  // number of days to add
        Date st = cal.getTime();
        Calendar end = Calendar.getInstance();
        end.setTime(asofDate);
        end.add(Calendar.DATE, 1);  // number of days to add
        Date ed = end.getTime();
        boolean isAccured = false;
        if (requestParams.containsKey("isAccured") && (!StringUtil.isNullOrEmpty("isAccured"))) {
            /**
             * if accrued is true then consider forex JE before the start date.
             */
            isAccured = Boolean.parseBoolean(requestParams.get("isAccured").toString());
        }

        if (invoiceAmountDueFilter) {
            KwlReturnObject kwlJeDetails = accJournalEntryobj.getJournalEntryDetail(jeId, companyid);
            List listJeDetails = kwlJeDetails.getEntityList();
            if (listJeDetails != null) {
                for (int j = 0; j < listJeDetails.size(); j++) {
                    JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listJeDetails.get(j);
                    if (journalEntryDetail.getAccount().getID().equals(CustomerAccountID) && !journalEntryDetail.isIsSeparated()) {
                        if (journalEntryDetail.getJournalEntry() != null && journalEntryDetail.getJournalEntry().getTypeValue() == Constants.Party_Journal_Entry) {
                            if (invoiceCustomerId.equalsIgnoreCase(journalEntryDetail.getCustomerVendorId())) {
                                tot_amountinbase += journalEntryDetail.getAmountinbase();
                            }
                        } else {
                            tot_amountinbase += journalEntryDetail.getAmountinbase();
                        }
                    }
                }
            }

            if (type.equalsIgnoreCase("Payment Received")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), invoiceId);
                Receipt receipt = (Receipt) objItr.getEntityList().get(0);

                Set<LinkDetailReceipt> linkDetailReceipt = receipt.getLinkDetailReceipts();
                for (LinkDetailReceipt linkdetailreceipt : linkDetailReceipt) {
                    if (!StringUtil.isNullOrEmpty(linkdetailreceipt.getLinkedGainLossJE())) {
                        KwlReturnObject kwlLinkedJeDetails = accJournalEntryobj.getJournalEntryDetail(linkdetailreceipt.getLinkedGainLossJE(), companyid);
                        List listLinkedJeDetails = kwlLinkedJeDetails.getEntityList();
                        if (listLinkedJeDetails != null) {
                            for (int j = 0; j < listLinkedJeDetails.size(); j++) {
                                JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listLinkedJeDetails.get(j);
                                if (isAccured) {
                                    if (!journalEntryDetail.getAccount().getID().equals(CustomerAccountID) && (journalEntryDetail.getJournalEntry().getEntryDate().before(startDate))) {
                                        listJEDetail.add(journalEntryDetail);
                                    }
                                }
                                if (!journalEntryDetail.getAccount().getID().equals(CustomerAccountID)
                                        && (journalEntryDetail.getJournalEntry().getEntryDate().after(st) && journalEntryDetail.getJournalEntry().getEntryDate().before(ed))) {
                                    listJEDetail.add(journalEntryDetail);
                                }
                            }
                        }
                    }
                }

                Set<LinkDetailReceiptToDebitNote> linkDetailReceiptToDebitNote = receipt.getLinkDetailReceiptsToDebitNote();
                for (LinkDetailReceiptToDebitNote linkdetailreceipttodebitNote : linkDetailReceiptToDebitNote) {
                    if (!StringUtil.isNullOrEmpty(linkdetailreceipttodebitNote.getLinkedGainLossJE())) {
                        KwlReturnObject kwlLinkedJeDetails = accJournalEntryobj.getJournalEntryDetail(linkdetailreceipttodebitNote.getLinkedGainLossJE(), companyid);
                        List listLinkedJeDetails = kwlLinkedJeDetails.getEntityList();
                        if (listLinkedJeDetails != null) {
                            for (int j = 0; j < listLinkedJeDetails.size(); j++) {
                                JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listLinkedJeDetails.get(j);
                                if (isAccured) {
                                    if (!journalEntryDetail.getAccount().getID().equals(CustomerAccountID)
                                            && (journalEntryDetail.getJournalEntry().getEntryDate().before(startDate))) {
                                        listJEDetail.add(journalEntryDetail);
                                    }
                                }
                                if (!journalEntryDetail.getAccount().getID().equals(CustomerAccountID)
                                        && (journalEntryDetail.getJournalEntry().getEntryDate().after(st) && journalEntryDetail.getJournalEntry().getEntryDate().before(ed))) {
                                    listJEDetail.add(journalEntryDetail);
                                }
                            }
                        }
                    }
                }

                if (tot_amountinbase != 0 && tot_amountinbase != amountinbase) {
                    amountinbase = tot_amountinbase;
                }
            }
            if (type.equalsIgnoreCase("Credit Note")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), invoiceId);
                CreditNote creditNote = (CreditNote) objItr.getEntityList().get(0);
                Set<CreditNoteDetail> creditNoteDetail = creditNote.getRows();
                for (CreditNoteDetail creditnotedetail : creditNoteDetail) {
                    if (!StringUtil.isNullOrEmpty(creditnotedetail.getLinkedGainLossJE())) {
                        KwlReturnObject kwlLinkedJeDetails = accJournalEntryobj.getJournalEntryDetail(creditnotedetail.getLinkedGainLossJE(), companyid);
                        List listLinkedJeDetails = kwlLinkedJeDetails.getEntityList();
                        if (listLinkedJeDetails != null) {
                            for (int j = 0; j < listLinkedJeDetails.size(); j++) {
                                JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listLinkedJeDetails.get(j);
                                 if (isAccured) {
                                    if (!journalEntryDetail.getAccount().getID().equals(CustomerAccountID) && (journalEntryDetail.getJournalEntry().getEntryDate().before(startDate))) {
                                        listJEDetail.add(journalEntryDetail);
                                    }
                                 }
                                if (!journalEntryDetail.getAccount().getID().equals(CustomerAccountID)
                                        && (journalEntryDetail.getJournalEntry().getEntryDate().after(st) && journalEntryDetail.getJournalEntry().getEntryDate().before(ed))) {
                                    listJEDetail.add(journalEntryDetail);
                                }
                            }
                        }
                    }
                }

                if (tot_amountinbase != 0 && tot_amountinbase != amountinbase) {
                    amountinbase = tot_amountinbase;

                    if (creditNote.getCurrency().getCurrencyID().equals(gcurrencyid)) {
                        amount = amountinbase;
                    }
                }
            }
        }

        amountArray[0] = amount;
        amountArray[1] = amountinbase;

        return amountArray;
    }
    
    public JSONObject getGLRegistryGridInfo(JSONObject paramJobj) throws ServiceException{
        
        JSONObject jobj = new JSONObject();
        JSONObject returnObject = new JSONObject();
        JSONObject tempObj = null;
        String msg = "", companyid = "", reportType = "";
        boolean onlyVisible = true;
        boolean isUIFieldOnly=true;//sending this flag to 'true' get only UI field for the GL report
        try {
            reportType = Constants.COMPANY_REPORT_CONFIG_GL;
            companyid = paramJobj.getString(Constants.companyKey);
            
            /* 
             Get Grid config from back end
            */
            Map params = null;
            jobj = companyReportConfigurationServiceObj.getExportConfigData(companyid, reportType, onlyVisible,isUIFieldOnly,params);
            JSONArray jarrColumns = new JSONArray();
            JSONArray dataArray=jobj.getJSONArray(Constants.data);
            int pdfWidth=150;
            for(int index=0;index<dataArray.length();index++){
                JSONObject configObject=dataArray.getJSONObject(index);
               
                /*
                 Getting only Global field 
                */
                if (configObject.optBoolean("isshowinview") && !configObject.optBoolean("forexpander")) {

                    /*
                     Below if block is used to add 'Opening Balance Type' column 
                     */
//                    if (configObject.optString("header").equals("openingbalanceinaccountcurrency")) {
//                        tempObj = new JSONObject();
//                        tempObj.put("header", "Opening Balance Type");
//                        tempObj.put("dataIndex", "openingBalanceType");
//                        tempObj.put("pdfwidth", pdfWidth);
//                        tempObj.put("align", configObject.optString("align", "left"));
//                        jarrColumns.put(tempObj);
//                    }
                    tempObj = new JSONObject();
                    tempObj.put("header", configObject.optString("title"));
                    tempObj.put("dataIndex", configObject.optString("header"));
                    if (configObject.optString("header").equals("currencyname")) { //For Account currency we are showing currency Code
                        tempObj.put("dataIndex", "currencyCode");
                    }
                    tempObj.put("pdfwidth", pdfWidth);
                    tempObj.put("align", configObject.optString("align", "left"));
                    jarrColumns.put(tempObj);
                }
                }
            returnObject.put(Constants.COLUMN_CONFIGS, jarrColumns);
            
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            throw ServiceException.FAILURE("AccReportsServiceImpl.getGLRegistryGridInfo" + msg, ex);
        }
        return returnObject;
    }

    /**
     * Method is used to save GST Form 5 e-Submission details.
     * @param eSubmissionDetails
     * @param requestParam
     * @return
     * @throws ServiceException 
     */
    public JSONObject saveeSubmissionGSTForm5(String eSubmissionDetails, JSONObject requestParam) throws ServiceException {
        JSONObject responseJobj=new JSONObject();
        try {
            responseJobj.put(Constants.RES_success,false);
            Date startDate = authHandler.getDateOnlyFormat().parse(requestParam.getString("stdate"));
            Date endDate = authHandler.getDateOnlyFormat().parse(requestParam.getString("enddate"));
            String multiEntityName = requestParam.optString("multiEntityName","");
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), requestParam.getString("companyid"));
            Company company = (Company) cpresult.getEntityList().get(0);
            String recordid = UUID.randomUUID().toString();
            GstForm5eSubmissionDetails gstForm5eSubmissionDetails = new GstForm5eSubmissionDetails();
            gstForm5eSubmissionDetails.setID(recordid);
            gstForm5eSubmissionDetails.setDtPeriodEnd(endDate);
            gstForm5eSubmissionDetails.setDtPeriodStart(startDate);
            gstForm5eSubmissionDetails.setStatus(Constants.GSTForm5SubmissionFlag_Pending_For_Authentication);// 0 For Pending Response | 1 For Success Response | 2 For Failure Response
            gstForm5eSubmissionDetails.seteSubmissionDate(new Date());
            gstForm5eSubmissionDetails.seteSubmissionJSON(eSubmissionDetails);
            if (!StringUtil.isNullOrEmpty(multiEntityName)) {
                gstForm5eSubmissionDetails.setEntity(multiEntityName);
            }
            gstForm5eSubmissionDetails.setCompany(company);
            save(gstForm5eSubmissionDetails);
            
            String baseURLFormat = com.krawler.esp.utils.ConfigReader.getinstance().get("accURL") + Constants.IRASGSTForm5CallBackURL;
            String description = "GST Form 5 Submission";
            JSONObject proxyJson=new JSONObject();
            proxyJson.put("chunkids",recordid);
            proxyJson.put(Constants.companyid,company.getCompanyID());
            proxyJson.put("callbackUrl",baseURLFormat);
            proxyJson.put("description",description);
            proxyJson.put("flag",1);
            if(!StringUtil.isNullOrEmpty(recordid) && !StringUtil.isNullOrEmpty(company.getCompanyID()) && !StringUtil.isNullOrEmpty(baseURLFormat)){
            responseJobj.put(Constants.RES_data,proxyJson);
            responseJobj.put(Constants.RES_success,true);
            }
        } catch (JSONException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SessionExpiredException ex) {
             Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return responseJobj;
    }
    public JSONObject saveResponseeSubmissionGSTForm5(String eSubmissionresponse,String recordId) throws ServiceException {
        JSONObject responseJobj = new JSONObject();
        try {
            responseJobj.put("responseStatus",2);
            responseJobj.put("message","Error occurred while feching response");
            JSONObject jobj = new JSONObject(eSubmissionresponse);
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(GstForm5eSubmissionDetails.class.getName(), recordId);
            GstForm5eSubmissionDetails gstForm5eSubmissionDetails = (GstForm5eSubmissionDetails) cpresult.getEntityList().get(0);
            String returnCode = jobj.getString("returnCode");
            gstForm5eSubmissionDetails.setResponseCode(returnCode);
            if (returnCode.equals(Constants.GSTForm5ReturnCode_Success)) {
                gstForm5eSubmissionDetails.setStatus(Constants.GSTForm5SubmissionFlag_Success);// Success
                responseJobj.put("message","Data Submitted successfully");
                responseJobj.put("responseStatus",Constants.GSTForm5SubmissionFlag_Success);
            } else {
                gstForm5eSubmissionDetails.setStatus(Constants.GSTForm5SubmissionFlag_Failure);// Failure
                String messageCode = jobj.getJSONObject("info").getString("messageCode");
                gstForm5eSubmissionDetails.setMessageCode(messageCode);// Failure
                String generalResponseMessage = messageSource.getMessage(messageCode, null, Locale.forLanguageTag(Constants.RES_DEF_LANGUAGE));
                gstForm5eSubmissionDetails.setResponse(eSubmissionresponse);// Failure
                responseJobj.put("message",generalResponseMessage);
                responseJobj.put("responseStatus",Constants.GSTForm5SubmissionFlag_Failure);
            }
            
            saveOrUpdate(gstForm5eSubmissionDetails);
        } catch (JSONException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return responseJobj;
    }

    public JSONObject gstForm5eSubmissionUpdateStatus(JSONObject requestParam) throws ServiceException {
        JSONObject gstDetailJobj = new JSONObject();
        try {
            KwlReturnObject result = accountingHandlerDAOobj.getObject(GstForm5eSubmissionDetails.class.getName(), requestParam.getString("id"));
            GstForm5eSubmissionDetails gstForm5eSubmissionDetails = (GstForm5eSubmissionDetails) result.getEntityList().get(0);
            gstForm5eSubmissionDetails.setStatus(requestParam.getInt("status"));
            if(requestParam.has("messageCode") && !StringUtil.isNullOrEmpty(requestParam.getString("messageCode"))){
                gstForm5eSubmissionDetails.setMessageCode(requestParam.getString("messageCode"));
            }
            saveOrUpdate(gstForm5eSubmissionDetails);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AccReportsServiceImpl.GSTTransactionListingJSON", ex);
        }
        return gstDetailJobj;
    }
    public JSONObject getGSTForm5JSONString(JSONArray jsonArr, JSONObject requestParam) throws ServiceException {
        JSONObject gstDetailJobj = new JSONObject();
        try {
            String preRegistrationClaim = requestParam.getString("preRegistrationClaim");
            String badDeptReliefClaims = requestParam.getString("badDeptReliefClaims");
            String claimGSTrefundedTourist = requestParam.getString("claimGSTrefundedTourist");
            String badDeptReliefClaimsAmount = requestParam.getString("badDeptReliefClaimsAmount");
            String claimGSTrefundedTouristAmount = requestParam.getString("claimGSTrefundedTouristAmount");
            String preRegistrationClaimAmount = requestParam.getString("preRegistrationClaimAmount");
            String defImpPayableAmt = requestParam.getString("defImpPayableAmt");
            String defTotalGoodsImp = requestParam.getString("defTotalGoodsImp");
            Date startDate = authHandler.getDateOnlyFormat().parse(requestParam.getString("stdate"));
            Date endDate = authHandler.getDateOnlyFormat().parse(requestParam.getString("enddate"));
            String multiEntityName = requestParam.optString("multiEntityName","");
            String taxRefNumber = requestParam.optString("taxRefNumber","");
            
            gstDetailJobj.put("alreadySubmitted", false);
            ArrayList params = new ArrayList();
            String whereclouse = "";
            String query = "From GstForm5eSubmissionDetails where responseCode='10' and ((dtPeriodStart >= ?  AND  dtPeriodStart <= ?) OR (dtPeriodEnd >=?  AND dtPeriodEnd<=?) OR (dtPeriodStart <?  AND dtPeriodEnd>?)) ";
            params.add(startDate);
            params.add(endDate);
            params.add(startDate);
            params.add(endDate);
            params.add(startDate);
            params.add(endDate);
            if(!StringUtil.isNullOrEmpty(multiEntityName)){
                whereclouse = " AND entity=?";
                params.add(multiEntityName);
            }
            List list = executeQuery(query+whereclouse, params.toArray());
            if (list.size() > 0) {
                gstDetailJobj.put("alreadySubmitted", true);
                return gstDetailJobj;
            }
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            GstForm5eSubmissionMapping gstForm5eSubmission = new GstForm5eSubmissionMapping();
            for (int i = 0; i < jsonArr.length(); i++) {
                JSONObject jobj = jsonArr.getJSONObject(i);
                if (jobj.has("taxname") && jobj.has("taxamount")) {
                    if (jobj.getString("taxname").equals("Total value of standard rated supplies")) {
                        gstForm5eSubmission.setTotStdSupply(String.valueOf((int) Double.parseDouble(jobj.getString("taxamount"))));
                    } else if (jobj.getString("taxname").equals("Total value of zero rated supplies")) {
                        gstForm5eSubmission.setTotZeroSupply(String.valueOf((int)Double.parseDouble(jobj.getString("taxamount"))));
                    } else if (jobj.getString("taxname").equals("Total value of exempt supplies")) {
                        gstForm5eSubmission.setTotExemptSupply(String.valueOf((int)Double.parseDouble(jobj.getString("taxamount"))));
                    } else if (jobj.getString("taxname").equals("Total value of taxable purchase")) {
                        gstForm5eSubmission.setTotTaxPurchase(String.valueOf((int)Double.parseDouble(jobj.getString("taxamount"))));
                    } else if (jobj.getString("taxname").equals("Output tax due")) {
                        gstForm5eSubmission.setOutputTaxDue(String.valueOf((int)Double.parseDouble(jobj.getString("taxamount"))));
                    } else if (jobj.getString("taxname").equals("Less : input tax and refunds claimed")) {
                        gstForm5eSubmission.setInputTaxRefund(String.valueOf((int)Double.parseDouble(jobj.getString("taxamount"))));
                    } else if (jobj.getString("taxname").equals("Total value of goods imported under this scheme")) {
                        gstForm5eSubmission.setTotValueScheme(String.valueOf((int)Double.parseDouble(jobj.getString("taxamount"))));
                    } else if (jobj.getString("taxname").equals("Revenue for the accounting period")) {
                        gstForm5eSubmission.setRevenue(String.valueOf((int)Double.parseDouble(jobj.getString("taxamount"))));
                    }
                }
            }
            gstForm5eSubmission.setTaxRefNo(taxRefNumber);
            gstForm5eSubmission.setFormType("F5");
            gstForm5eSubmission.setDtPeriodStart(sdf.format(startDate));
            gstForm5eSubmission.setDtPeriodEnd(sdf.format(endDate));

            gstForm5eSubmission.setTouristRefundChk(claimGSTrefundedTourist);
            gstForm5eSubmission.setTouristRefundAmt(claimGSTrefundedTouristAmount);
            gstForm5eSubmission.setBadDebtChk(badDeptReliefClaims);
            gstForm5eSubmission.setBadDebtReliefClaimAmt(badDeptReliefClaimsAmount);
            gstForm5eSubmission.setPreRegistrationChk(preRegistrationClaim);
            gstForm5eSubmission.setPreRegistrationClaimAmt(preRegistrationClaimAmount);

            gstForm5eSubmission.setDefImpPayableAmt(defImpPayableAmt);
            gstForm5eSubmission.setDefTotalGoodsImp(defTotalGoodsImp);

            gstForm5eSubmission.setDeclarantDesgtn(requestParam.getString("designation"));
            gstForm5eSubmission.setContactPerson(requestParam.getString("contactPerson"));
            gstForm5eSubmission.setContactNumber(requestParam.getString("contactNo"));
            gstForm5eSubmission.setContactEmail(requestParam.getString("contactPersonEmailid"));

            if (requestParam.has("grp1BadDebtRecoveryChk")) {
                gstForm5eSubmission.setGrp1BadDebtRecoveryChk("true");
            }
            if (requestParam.has("grp1BadDebtRecoveryChk")) {
                gstForm5eSubmission.setGrp1PriorToRegChk("true");
            }
            if (requestParam.has("grp1OtherReasonChk")) {
                gstForm5eSubmission.setGrp1OtherReasonChk("true");
            }
            if (requestParam.has("grp1OtherReasons")) {
                gstForm5eSubmission.setGrp1OtherReasons(requestParam.getString("grp1OtherReasons"));
            }
            if (requestParam.has("grp2TouristRefundChk")) {
                gstForm5eSubmission.setGrp2TouristRefundChk("true");
            }
            if (requestParam.has("grp2AppvBadDebtReliefChk")) {
                gstForm5eSubmission.setGrp2AppvBadDebtReliefChk("true");
            }
            if (requestParam.has("grp2CreditNotesChk")) {
                gstForm5eSubmission.setGrp2CreditNotesChk("true");
            }
            if (requestParam.has("grp2OtherReasonsChk")) {
                gstForm5eSubmission.setGrp2OtherReasonsChk("true");
            }
            if (requestParam.has("grp2OtherReasons")) {
                gstForm5eSubmission.setGrp2OtherReasons(requestParam.getString("grp2OtherReasons"));
            }
            if (requestParam.has("grp3CreditNotesChk")) {
                gstForm5eSubmission.setGrp3CreditNotesChk("true");
            }
            if (requestParam.has("grp3OtherReasonsChk")) {
                gstForm5eSubmission.setGrp3OtherReasonsChk("true");
            }
            if (requestParam.has("grp3OtherReasons")) {
                gstForm5eSubmission.setGrp3OtherReasons(requestParam.getString("grp3OtherReasons"));
            }
            gstDetailJobj.put("jsonString", gstForm5eSubmission.getJSONForForm5eSubmission());

        } catch (JSONException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return gstDetailJobj;
    }
    
    public JSONObject initiateTransactionListingSubmission(JSONArray purchasejArr, JSONArray salesjArr, JSONObject requestParams) throws ServiceException {
        JSONObject responseJobj = new JSONObject();
        String chunkids ="";
        try {
            responseJobj.put(Constants.RES_success,false);
            String GUID = UUID.randomUUID().toString();
            String gstRegNo = requestParams.getString("gstRegNo");
            String taxRefNo = requestParams.getString("taxRefNo");
            String dtPeriodStart = requestParams.getString("startDate");
            String dtPeriodEnd = requestParams.getString("endDate");
            String dtIAFCreation = requestParams.getString("dtIAFCreation");
            String companyid = requestParams.getString("companyid");
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cpresult.getEntityList().get(0);
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
            int totalRecordCount = 0;
            int totalPurchaseRecordCount = 0;
            int totalSaleRecordCount = 0;
            for (int i = 0; i < purchasejArr.length(); i++) {
                JSONArray grArrayCount = purchasejArr.getJSONObject(i).getJSONArray("details");
                totalPurchaseRecordCount += grArrayCount.length();

            }
            for (int i = 0; i < salesjArr.length(); i++) {
                JSONArray invArrayCount = salesjArr.getJSONObject(i).getJSONArray("details");
                totalSaleRecordCount += invArrayCount.length();
            }
            totalRecordCount = totalPurchaseRecordCount + totalSaleRecordCount;
            int totalChunkCount = (int) Math.ceil(((double) totalRecordCount / Constants.NumberOfRecordsInEachChunk));
            double totalPurchase = 0;
            double totalSales = 0;
            double taxAmountPurchase = 0;
            double taxAmountSales = 0;
            int recordCountPurchase = 0;
            int totalPurchaseCount = 0;
            int recordCountSales = 0;
            int totalCountSales = 0;
            int currentChunkCount = 1;
            JSONObject jobj = null;
            StringBuilder reportPurcahse = new StringBuilder();
            StringBuilder reportSales = new StringBuilder();
            for (int i = 0; i < purchasejArr.length(); i++) {
                JSONArray grArray = purchasejArr.getJSONObject(i).getJSONArray("details");
                for (int j = 0; j < grArray.length(); j++) {
                    double grAmt = grArray.getJSONObject(j).optDouble("gramt");
                    grAmt = (grAmt < 0) ? (-1) * grAmt : grAmt;

                    double grAmtExcludingGst = grArray.getJSONObject(j).optDouble("gramtexcludinggst");
                    grAmtExcludingGst = (grAmtExcludingGst < 0) ? (-1) * grAmtExcludingGst : grAmtExcludingGst;

                    double grTaxAmt = grArray.getJSONObject(j).optDouble("grtaxamount");
                    grTaxAmt = (grTaxAmt < 0) ? (-1) * grTaxAmt : grTaxAmt;


                    double purchasefcy = grArray.getJSONObject(j).optDouble("purchasefcy");
                    purchasefcy = (purchasefcy < 0) ? (-1) * purchasefcy : purchasefcy;

                    /*
                     *Displayed Foreign Currency Code, Supply Foreign Currency Amount & 
                     *Supply Currency GST Amount only if transaction in foreign currency.
                     */
                    String fcycode ="XXX";
                    double gstfcy = 0;        
                    double purchasefcyexcludinggst = 0;        
                    if (!Constants.SGD_CURRENCY_CODE.equalsIgnoreCase(grArray.getJSONObject(j).optString("fcycode"))) {
                        fcycode = grArray.getJSONObject(j).optString("fcycode");
                        gstfcy = grArray.getJSONObject(j).optDouble("gstfcy");
                        gstfcy = (gstfcy < 0) ? (-1) * gstfcy : gstfcy;
                        
                        purchasefcyexcludinggst = grArray.getJSONObject(j).optDouble("purchasefcyexcludinggst");
                        purchasefcyexcludinggst = (purchasefcyexcludinggst < 0) ? (-1) * purchasefcyexcludinggst : purchasefcyexcludinggst;
                    }
                    // Tax code replace 
                    String taxcode = grArray.getJSONObject(j).optString("grtaxcode");
                    if(Constants.GST_TAX_CODE.containsKey(taxcode)){
                        taxcode = Constants.GST_TAX_CODE.get(taxcode);
                    }
                    
                    
                    reportPurcahse.append(grArray.getJSONObject(j).optString("grname") + "|" + grArray.getJSONObject(j).optString("gruen") + "|" + formatter.format(new Date(grArray.getJSONObject(j).getLong("grdate"))) + "|" + grArray.getJSONObject(j).optString("grno") + "|" + grArray.getJSONObject(j).optString("permit") + "|" + grArray.getJSONObject(j).optString("grlineno") + "|" + grArray.getJSONObject(j).optString("grproduct") + "|" + authHandler.formattedAmount(grAmtExcludingGst, companyid) + "|" + authHandler.formattedAmount(grTaxAmt, companyid) + "|" + taxcode + "|" + fcycode + "|" + authHandler.formattedAmount(purchasefcyexcludinggst, companyid) + "|" + authHandler.formattedAmount(gstfcy, companyid) + "|" + "\r\n");
                    totalPurchase += grArray.getJSONObject(j).optDouble("gramtexcludinggst");
                    taxAmountPurchase += grArray.getJSONObject(j).optDouble("grtaxamount");
                    recordCountPurchase++;
                    totalPurchaseCount++;
                    if(recordCountPurchase==Constants.NumberOfRecordsInEachChunk || (totalPurchaseRecordCount == totalPurchaseCount && totalSaleRecordCount==0)){
                        jobj = new JSONObject();
                        jobj.put("recordCountPurchase", recordCountPurchase);
                        jobj.put("totalPurchase", authHandler.formattedAmount(totalPurchase, companyid));
                        jobj.put("totalPurchaseTaxAmount", authHandler.formattedAmount(taxAmountPurchase, companyid));
                        jobj.put("dataPurchase", reportPurcahse);
                        
                        jobj.put("recordCountSales", recordCountSales);
                        jobj.put("totalSales", authHandler.formattedAmount(totalSales, companyid));
                        jobj.put("totalSalesTaxAmount", authHandler.formattedAmount(taxAmountSales, companyid));
                        jobj.put("dataSale", reportSales);
                        
                        jobj.put("GUID", GUID);
                        jobj.put("currentChunk", currentChunkCount);
                        jobj.put("totalChunkCount", totalChunkCount);
                        jobj.put("dtPeriodStart", dtPeriodStart);
                        jobj.put("dtPeriodEnd", dtPeriodEnd);
                        jobj.put("gstRegNo", gstRegNo);
                        jobj.put("taxRefNo", taxRefNo);
                        jobj.put("dtIAFCreation", dtIAFCreation);
                        jobj.put("company", company);
                        
                        //Call Function
                        String id = GSTTransactionListingJSON(jobj);
                        chunkids += id+",";
                        recordCountPurchase=0;totalPurchase = 0;taxAmountPurchase=0;
                        recordCountSales =0; totalSales=0; taxAmountSales=0;
                        reportSales = new StringBuilder();
                        reportPurcahse = new StringBuilder();
                        currentChunkCount++;
                    }
                }
            }

            for (int i = 0; i < salesjArr.length(); i++) {
                JSONArray invArray = salesjArr.getJSONObject(i).getJSONArray("details");
                for (int j = 0; j < invArray.length(); j++) {
                    double invTaxAmt = invArray.getJSONObject(j).getDouble("invtaxamount");
                    invTaxAmt = (invTaxAmt < 0) ? (-1) * invTaxAmt : invTaxAmt;
                    double invAmt = invArray.getJSONObject(j).getDouble("invamt");
                    invAmt = (invAmt < 0) ? (-1) * invAmt : invAmt;

                    double invAmtExcludingGst = invArray.getJSONObject(j).getDouble("invamtexcludinggst");
                    invAmtExcludingGst = (invAmtExcludingGst < 0) ? (-1) * invAmtExcludingGst : invAmtExcludingGst;


                    double salesfcy = invArray.getJSONObject(j).getDouble("salesfcy");
                    salesfcy = (salesfcy < 0) ? (-1) * salesfcy : salesfcy;

                    /*
                     *Displayed Foreign Currency Code, Supply Foreign Currency Amount & 
                     *Supply Currency GST Amount only if transaction in foreign currency.
                     */
                    String fcycode ="XXX";
                    double gstfcy =0;
                    double salesfcyexcludinggst =0;
                    if (!Constants.SGD_CURRENCY_CODE.equalsIgnoreCase(invArray.getJSONObject(j).optString("fcycode"))) {
                        fcycode = invArray.getJSONObject(j).optString("fcycode");
                        gstfcy = invArray.getJSONObject(j).getDouble("gstfcy");
                        gstfcy = (gstfcy < 0) ? (-1) * gstfcy : gstfcy;
                        salesfcyexcludinggst = invArray.getJSONObject(j).getDouble("salesfcyexcludinggst");
                        salesfcyexcludinggst = (salesfcyexcludinggst < 0) ? (-1) * salesfcyexcludinggst : salesfcyexcludinggst;
                    }
                    // Tax code replace 
                    String taxcode = invArray.getJSONObject(j).getString("invtaxcode");
                    if(Constants.GST_TAX_CODE.containsKey(taxcode)){
                        taxcode = Constants.GST_TAX_CODE.get(taxcode);
                    }
                    
                    reportSales.append(invArray.getJSONObject(j).optString("invname", "") + "|" + invArray.getJSONObject(j).optString("invuen", "") + "|" + formatter.format(new Date(invArray.getJSONObject(j).getLong("invdate"))) + "|" + invArray.getJSONObject(j).getString("invno") + "|" + invArray.getJSONObject(j).getString("invlineno") + "|" + invArray.getJSONObject(j).getString("invproduct") + "|" + authHandler.formattedAmount(invAmtExcludingGst, companyid) + "|" + authHandler.formattedAmount(invTaxAmt, companyid) + "|" + taxcode + "|" + invArray.getJSONObject(j).getString("invcountry") + "|" + fcycode+ "|" + authHandler.formattedAmount(salesfcyexcludinggst, companyid) + "|" + authHandler.formattedAmount(gstfcy, companyid) + "|" + "\r\n");
                    totalSales += invArray.getJSONObject(j).getDouble("invamtexcludinggst");
                    taxAmountSales += invArray.getJSONObject(j).getDouble("invtaxamount");
                    recordCountSales++;
                    totalCountSales++;
                    if(recordCountPurchase+recordCountSales==Constants.NumberOfRecordsInEachChunk||totalCountSales==totalSaleRecordCount){
                        jobj = new JSONObject();
                        jobj.put("recordCountPurchase", recordCountPurchase);
                        jobj.put("totalPurchase", authHandler.formattedAmount(totalPurchase, companyid));
                        jobj.put("totalPurchaseTaxAmount", authHandler.formattedAmount(taxAmountPurchase, companyid));
                        jobj.put("dataPurchase", reportPurcahse);
                        
                        jobj.put("recordCountSales", recordCountSales);
                        jobj.put("totalSales", authHandler.formattedAmount(totalSales, companyid));
                        jobj.put("totalSalesTaxAmount", authHandler.formattedAmount(taxAmountSales, companyid));
                        jobj.put("dataSale", reportSales);
                        
                        jobj.put("GUID", GUID);
                        jobj.put("currentChunk", currentChunkCount);
                        jobj.put("totalChunkCount", totalChunkCount);
                        jobj.put("dtPeriodStart", dtPeriodStart);
                        jobj.put("dtPeriodEnd", dtPeriodEnd);
                        jobj.put("gstRegNo", gstRegNo);
                        jobj.put("taxRefNo", taxRefNo);
                        jobj.put("dtIAFCreation", dtIAFCreation);
                        jobj.put("company", company);
                        //Call Function
                        String id = GSTTransactionListingJSON(jobj);
                        chunkids += id+",";
                        recordCountPurchase=0;totalPurchase = 0;taxAmountPurchase=0;
                        recordCountSales =0; totalSales=0; taxAmountSales=0;
                        reportSales = new StringBuilder();
                        reportPurcahse = new StringBuilder();
                        currentChunkCount++;
                    }
                }
            }
            
            chunkids = chunkids.substring(0, chunkids.length()-1);
            if(!StringUtil.isNullOrEmpty(chunkids)){
                String baseURLFormat = com.krawler.esp.utils.ConfigReader.getinstance().get("accURL") + Constants.IRASGSTTransactionListingCallBackURL;
                String description = "GST Transaction Listing Submission";
                JSONObject proxyJson = new JSONObject();
                proxyJson.put("chunkids", chunkids);
                proxyJson.put(Constants.companyid, company.getCompanyID());
                proxyJson.put("callbackUrl", baseURLFormat);
                proxyJson.put("description", description);
                proxyJson.put("flag",2);
                if (!StringUtil.isNullOrEmpty(chunkids) && !StringUtil.isNullOrEmpty(company.getCompanyID()) && !StringUtil.isNullOrEmpty(baseURLFormat)) {
                    responseJobj.put(Constants.RES_data, proxyJson);
                    responseJobj.put(Constants.RES_success, true);
                }
            }
            
        } catch (JSONException ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return responseJobj;
    }
    public String GSTTransactionListingJSON(JSONObject jobj) throws ServiceException {
        String chunkid = "";
        try {
            Company company = (Company)jobj.get("company");
            StringBuilder report = new StringBuilder();
            int currentChunk = jobj.getInt("currentChunk");
            int totalChunkCount = jobj.getInt("totalChunkCount");
            String GUID = jobj.getString("GUID");
            String dtPeriodStart = jobj.getString("dtPeriodStart");
            String dtPeriodEnd = jobj.getString("dtPeriodEnd");
            String taxRefNo = jobj.getString("taxRefNo");
            String gstRegNo = jobj.getString("gstRegNo");
            String dtIAFCreation = jobj.getString("dtIAFCreation");
            
            int recordCountPurchase = jobj.getInt("recordCountPurchase");
            double totalPurchase = jobj.getDouble("totalPurchase");
            double totalPurchaseTaxAmount = jobj.getDouble("totalPurchaseTaxAmount");
            StringBuilder purchaseReport = (StringBuilder) jobj.get("dataPurchase");

            int recordCountSales = jobj.getInt("recordCountSales");
            double totalSales = jobj.getDouble("totalSales");
            double totalSalesTaxAmount = jobj.getDouble("totalSalesTaxAmount");
            StringBuilder salesReport = (StringBuilder) jobj.get("dataSale");

            report.append("PurcDataStart|" + "\r\n");
            report.append("SupplierName|SupplierUEN|InvoiceDate|InvoiceNo|PermitNo|LineNo|ProductDescription|PurchaseValueSGD|GSTValueSGD|TaxCode|FCYCode|PurchaseFCY|GSTFCY|" + "\r\n");
            if (!StringUtil.isNullOrEmpty(purchaseReport.toString())) {
                report.append(purchaseReport);
            }
            report.append("PurcDataEnd|" + totalPurchase + "|" + totalPurchaseTaxAmount + "|" + recordCountPurchase + "|" + "\r\n");

            report.append("SuppDataStart|" + "\r\n");
            report.append("CustomerName|CustomerUEN|InvoiceDate|InvoiceNo|LineNo|ProductDescription|SupplyValueSGD|GSTValueSGD|TaxCode|Country|FCYCode|SupplyFCY|GSTFCY|" + "\r\n");
            if (!StringUtil.isNullOrEmpty(salesReport.toString())) {
                report.append(salesReport);
            }
            report.append("SuppDataEnd|" + totalSales + "|" + totalSalesTaxAmount + "|" + recordCountSales + "|" + "\r\n");
            
            byte[] messageBase64Encoded =  Base64.encodeBase64(report.toString().getBytes());
            GSTTransactionListingMapping gtlm = new GSTTransactionListingMapping();
            gtlm.setCurrentChunk(currentChunk);
            gtlm.setTotalChunk(totalChunkCount);
            gtlm.setIdentifier(GUID);
            gtlm.setTaxRefNo(taxRefNo);
            gtlm.setGstRegNo(gstRegNo);
            gtlm.setDtPeriodStart(dtPeriodStart);
            gtlm.setDtPeriodEnd(dtPeriodEnd);
            gtlm.setMessages(new String(messageBase64Encoded));
            gtlm.setDtIAFCreation(dtIAFCreation);
            gtlm.setIafVersion("IAFv1.0.0");
            String transactionListingJSONString = gtlm.getTransactionListingJSONString();
            //Save Request Data
            GSTTransactionListingSubmissionDetails gstTransactionListingSubmissionDetails = saveTransactionListingChunkRequestdata(transactionListingJSONString,company);
            chunkid = gstTransactionListingSubmissionDetails.getID();

        } catch (JSONException ex) {
            throw ServiceException.FAILURE("AccReportsServiceImpl.GSTTransactionListingJSON", ex);
        }
        return chunkid;
    }
    
    /**
     * Method is used to save Transaction Listing e-Submission Details.
     * @param ids
     * @param companyid
     * @param code
     * @param state
     * @throws ServiceException 
     */
    @Override
    public void gstTransactionListingDataSubmission(String ids, String companyid,String code,String state) throws ServiceException {
        try {
            ArrayList params = new ArrayList();
            params.add(companyid);
            String whereClouse = "";
            if (!StringUtil.isNullOrEmpty(ids)) {
                String idstring[] = ids.split(",");
                ids = "";
                for (int str = 0; str < idstring.length; str++) {
                    if (str < idstring.length - 1) {
                        ids += "'" + idstring[str] + "',";
                    } else {
                        ids += "'" + idstring[str] + "'";
                    }
                }
                /**
                 * First Integration request to get token from IRAS.
                 */
                String access_token = "";

                JSONObject requestParam1 = new JSONObject();
                requestParam1.put(IntegrationConstants.integrationPartyIdKey, IntegrationConstants.integrationPartyId_IRAS);
                requestParam1.put(IntegrationConstants.integrationOperationIdKey, IntegrationConstants.iras_TokenGeneration_Operation);
                requestParam1.put(Constants.companyKey,companyid);
                requestParam1.put("code", code);
                requestParam1.put("state", state);

                JSONObject jsonResponse = integrationCommonService.processIntegrationRequest(requestParam1);
                JSONObject tokenResult = new JSONObject(jsonResponse.optString(Constants.data));
                access_token = tokenResult.optString("token", "");
                if (!StringUtil.isNullOrEmpty(access_token)) {
                    //Update Status from pending Authentication to pending
                    String queryUpdateStatus = " Update GSTTransactionListingSubmissionDetails set status="+Constants.IRASSubmissionFlag_Pending+" where ID IN (" + ids + ")";
                    executeUpdate(queryUpdateStatus);
                    
                    if (!StringUtil.isNullOrEmpty(ids)) {
                        whereClouse = " and ID IN (" + ids + ") ";
                    }
                    String query = " from GSTTransactionListingSubmissionDetails where company.companyID =? " + whereClouse + " ORDER BY currentChunk";
                    List<GSTTransactionListingSubmissionDetails> list = executeQuery(query, params.toArray());
                    if (list != null && !list.isEmpty()) {
                        for (GSTTransactionListingSubmissionDetails gstTransactionListingDetails : list) {
                            //API Call - Start
                            String gstTransactionListingRequestPayload = gstTransactionListingDetails.getRequestPayload();

                            /**
                             * Second Integration request to get actual data for submission.
                             */
                            JSONObject requestParam2 = new JSONObject();
                            requestParam2.put(IntegrationConstants.integrationPartyIdKey, IntegrationConstants.integrationPartyId_IRAS);
                            requestParam2.put(IntegrationConstants.integrationOperationIdKey, IntegrationConstants.iras_TransactionListing_Operation);
                            requestParam2.put(Constants.companyKey,companyid);
                            requestParam2.put("access_token", access_token);
                            if (!StringUtil.isNullOrEmpty(gstTransactionListingRequestPayload)) {
                                requestParam2.put("payload", new JSONObject(gstTransactionListingRequestPayload));
                            }
                            JSONObject TLSubData = integrationCommonService.processIntegrationRequest(requestParam2);

                            String transactionListingResponse = TLSubData.getString(Constants.data);
                            //API Call - End

                            //Save Response Data
                            try {
                                saveTransactionListingChunkResponsedata(gstTransactionListingDetails, transactionListingResponse);
                            } catch (Exception e) {
                                /**
                                 * In case if any exception occour while saving data for Transaction Listing,
                                 * Failure status updated.
                                 */
                                ArrayList paramsFaluire = new ArrayList();
                                paramsFaluire.add(Constants.IRASSubmissionFlag_Failure);
                                paramsFaluire.add(new Date());
                                String queryUpdateStatus_Falure = " Update GSTTransactionListingSubmissionDetails set status=?,chunkResponseDateTime=? where ID IN ('" + gstTransactionListingDetails.getID() + "')";
                                executeUpdate(queryUpdateStatus_Falure,paramsFaluire.toArray());
                            }
                        }
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public GSTTransactionListingSubmissionDetails saveTransactionListingChunkRequestdata(String transactionListingJSONString,Company company) throws ServiceException {
        String id=UUID.randomUUID().toString();
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Vendor_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        GSTTransactionListingSubmissionDetails gstTrasactionListingSubmission = new GSTTransactionListingSubmissionDetails();
        try {
            DateFormat sdf = authHandler.getOnlyDateFormat();
            JSONObject jobj = new JSONObject(transactionListingJSONString);
            gstTrasactionListingSubmission.setID(id);
            gstTrasactionListingSubmission.setStatus(Constants.IRASSubmissionFlag_Pending_For_Authentication);//Pending For Authentication
            gstTrasactionListingSubmission.setCompany(company);//Pending
            if(jobj.has("filingInfo") && jobj.get("filingInfo")!=null && jobj.getJSONObject("filingInfo").length()>0){
                JSONObject filingInfo = jobj.getJSONObject("filingInfo");
                gstTrasactionListingSubmission.setTaxRefNo(filingInfo.getString("taxRefNo"));
                gstTrasactionListingSubmission.setGstRegNo(filingInfo.getString("gstRegNo"));
                gstTrasactionListingSubmission.setDtPeriodStart(sdf.parse(filingInfo.getString("dtPeriodStart")));
                gstTrasactionListingSubmission.setDtPeriodEnd(sdf.parse(filingInfo.getString("dtPeriodEnd")));
            }
            if(jobj.has("data") && jobj.get("data")!=null && jobj.getJSONObject("data").length()>0){
                JSONObject data = jobj.getJSONObject("data");
                gstTrasactionListingSubmission.setIdentifier(data.getString("identifier"));
                gstTrasactionListingSubmission.setTotalChunk(Integer.parseInt(data.getString("totalChunks")));
                gstTrasactionListingSubmission.setCurrentChunk(Integer.parseInt(data.getString("currentChunk")));
                gstTrasactionListingSubmission.setDtIAFCreation(sdf.parse(data.getString("dtIAFCreation")));
                gstTrasactionListingSubmission.setIafVersion(data.getString("iafVersion"));
                gstTrasactionListingSubmission.setRequestPayload(transactionListingJSONString);
            }
            save(gstTrasactionListingSubmission);
            txnManager.commit(status);
        } catch (Exception ex) {
            txnManager.rollback(status);
            throw ServiceException.FAILURE("AccReportsServiceImpl.saveTransactionListingChunkRequestdata", ex);
        }finally{
            return gstTrasactionListingSubmission;
        }
    }
    
    public void saveTransactionListingChunkResponsedata(GSTTransactionListingSubmissionDetails gstTrasactionListingSubmission, String transactionListingResponse) throws ServiceException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Vendor_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            JSONObject jobj = new JSONObject(transactionListingResponse);
            gstTrasactionListingSubmission.setResponsePayload(transactionListingResponse);
            gstTrasactionListingSubmission.setChunkResponseDateTime(new Date());
            if (jobj.has("returnCode")) {
                if (jobj.getString("returnCode").equals(Constants.IRASReturnCode_Success)) {
                    gstTrasactionListingSubmission.setStatus(Constants.IRASSubmissionFlag_Success);//Success
                    gstTrasactionListingSubmission.setResponseCode(jobj.getString("returnCode"));
                    gstTrasactionListingSubmission.setMessageCode("");
                } else {
                    gstTrasactionListingSubmission.setStatus(Constants.IRASSubmissionFlag_Failure);//Failure
                    gstTrasactionListingSubmission.setResponseCode(jobj.getString("returnCode"));
                    if (jobj.has("info")) {
                        JSONObject info = jobj.getJSONObject("info");
                        gstTrasactionListingSubmission.setMessageCode(info.getString("messageCode"));
                    }
                }
            }
            saveOrUpdate(gstTrasactionListingSubmission);
            txnManager.commit(status);
        } catch (Exception ex) {
            txnManager.rollback(status);
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("AccReportsServiceImpl.saveTransactionListingChunkResponsedata", ex);
        }
    }
    @Override
    public JSONObject initiateTransactionListingreSubmission(HashMap<String, Object> requestParam) throws ServiceException {
        JSONObject responseJobj = new JSONObject();
        try {
            responseJobj.put("success",false);
            if (!StringUtil.isNullOrEmpty((String) requestParam.get(Constants.companyid)) && !StringUtil.isNullOrEmpty((String) requestParam.get("ids"))) {
                ArrayList params = new ArrayList();
                String companyid = (String) requestParam.get(Constants.companyid);
                String ids = (String) requestParam.get("ids");
                String idsForQuery="";
                String idstring[] = ids.split(",");
                for (int str = 0; str < idstring.length; str++) {
                    if (str < idstring.length - 1) {
                        idsForQuery += "'" + idstring[str] + "',";
                    } else {
                        idsForQuery += "'" + idstring[str] + "'";
                    }
                }
                params.add(companyid);
                String query = " Update GSTTransactionListingSubmissionDetails set status=0 where ID IN ("+idsForQuery+") and company.companyID=? ";
                int count = executeUpdate(query, params.toArray());
                if (count > 0) {
                    String baseURLFormat = com.krawler.esp.utils.ConfigReader.getinstance().get("accURL") + Constants.IRASGSTTransactionListingCallBackURL;
                    String description = "GST Transaction Listing Submission";
                    JSONObject proxyJson = new JSONObject();
                    proxyJson.put("chunkids", ids);
                    proxyJson.put(Constants.companyid, companyid);
                    proxyJson.put("callbackUrl", baseURLFormat);
                    proxyJson.put("description", description);
                    proxyJson.put("flag", 2);
                    if (!StringUtil.isNullOrEmpty(ids) && !StringUtil.isNullOrEmpty(companyid) && !StringUtil.isNullOrEmpty(baseURLFormat)) {
                        responseJobj.put(Constants.RES_data, proxyJson);
                        responseJobj.put(Constants.RES_success, true);
                    }
//                    responseJobj = proxyServerEntryAPICall(ids, companyid,baseURLFormat,description,2);// 2 for transaction listing
                }
                
            }
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return responseJobj;
    }
    
    /**
     * Method is used for two purpose,
     * 1-> used to save data to proxy server
     * 2-> to get IRAS redirect URL.
     * @param chunkids
     * @param companyid
     * @param callbackURL
     * @param description
     * @param flag
     * @return
     * @throws ServiceException 
     */
    @Override
    public JSONObject proxyServerEntryAPICall(String chunkids , String companyid, String callbackURL, String description,int flag) throws ServiceException {
        JSONObject responseJobj = new JSONObject();
        try {
            responseJobj.put("success", false);
            String requestid = UUID.randomUUID().toString();
            String IRASProxySubmissionURL = com.krawler.esp.utils.ConfigReader.getinstance().get("deskeraProxyURL");
            IRASProxySubmissionURL = URLUtil.buildRestURL("deskeraProxyURL")+"company/deskeraproxydetails";
            JSONObject userData = new JSONObject();
            userData.put("iscommit", true);
            userData.put("remoteapikey", storageHandlerImpl.GetRemoteAPIKey());
            userData.put("companyid", companyid);
            userData.put("requestid", requestid);
            userData.put("description", description);
            userData.put("dataIds", chunkids);
            userData.put("callBackURL", callbackURL);
            
            JSONObject jobj = apiCallHandlerService.restPostMethod(IRASProxySubmissionURL, userData.toString());
            /**
             * SingPassAuth request to IRAS server, We get a IRAS login page URL from IRAS.
             */
            if (!jobj.isNull("success") && jobj.getJSONArray("success").length() > 0 && jobj.getJSONArray("success").getBoolean(0)) {
                JSONObject requestParam = new JSONObject();
                requestParam.put(IntegrationConstants.integrationPartyIdKey, IntegrationConstants.integrationPartyId_IRAS);
                requestParam.put(IntegrationConstants.integrationOperationIdKey, IntegrationConstants.iras_SingPassAuthCodeGeneration_Operation);
                requestParam.put(Constants.companyKey,companyid);
                requestParam.put("state", requestid);
                /**
                 * scope send to IRAS according to user action.
                 * 1 for GST Form 5 e-Submission.
                 * 2 for Transaction Listing e-Submission.
                 */
                if (flag == 1) {
                    requestParam.put("scope", "GSTReturnsSub");
                } else {
                    requestParam.put("scope", "GSTTransListSub");
                }
                JSONObject jsonResponse = integrationCommonService.processIntegrationRequest(requestParam);
//                JSONObject jsonResponse = new JSONObject("{\"responseCode\":\"200\",\"data\":{\"returnCode\":\"30\",\"data\":{\"state\":\"277afe66-c0df-4a18-90eb-137c595f7aa1\"},\"info\":{\"message\":\"Internal server error occured\",\"messageCode\":\"850302\",\"fieldInfoList\":[]}},\"msg\":\"success\",\"success\":true}");
                if (jsonResponse.has(Constants.data)) {
                    String apiResponse = jsonResponse.optString(Constants.data);
                    JSONObject jsonData = new JSONObject(apiResponse);
                    String returnCode = jsonData.optString("returnCode");
                    String urlJsonString = jsonData.optString(Constants.data, "");
                    JSONObject jsonRedirectUrl = new JSONObject(urlJsonString);
                    String redirectUrl = jsonRedirectUrl.optString(Constants.url, "");
                    responseJobj.put("redirectUrl", redirectUrl);
                    responseJobj.put("apiResponse", apiResponse);
                    responseJobj.put("returnCode", returnCode);
                    responseJobj.put("proxyid", requestid);
                    responseJobj.put("success", true);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return responseJobj;
    }
}
