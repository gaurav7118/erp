/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package com.krawler.spring.accounting.reports;

import com.google.visualization.datasource.DataSourceHelper;
import com.google.visualization.datasource.DataTableGenerator;
import com.krawler.accounting.integration.common.IntegrationCommonService;
import com.krawler.accounting.integration.common.IntegrationConstants;
import com.krawler.common.admin.AuditAction;
import com.krawler.common.admin.*;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.FieldConstants;
import com.krawler.common.util.IndiaComplianceConstants;
import com.krawler.common.util.StringUtil;
import com.krawler.common.util.ValuationMethod;
import com.krawler.esp.handlers.*;
import com.krawler.esp.servlets.ProfileImageServlet;
import com.krawler.hql.accounting.*;
import com.krawler.hql.accounting.Customer;
import com.krawler.hql.accounting.Vendor;
import com.krawler.hql.accounting.companypreferenceservice.CompanyReportConfigurationService;
import com.krawler.inventory.model.stock.StockService;
import com.krawler.spring.accounting.account.accAccountController;
import com.krawler.spring.accounting.account.accAccountDAO;
import com.krawler.spring.accounting.account.accAccountHandler;
import com.krawler.spring.accounting.account.accCusVenMapDAO;
import com.krawler.spring.accounting.bankreconciliation.accBankReconciliationController;
import com.krawler.spring.accounting.bankreconciliation.accBankReconciliationDAO;
import com.krawler.spring.accounting.companypreferances.accCompanyPreferencesDAO;
import com.krawler.spring.accounting.costCenter.AccCostCenterDAO;
import com.krawler.spring.accounting.costCenter.CCConstants;
import com.krawler.spring.accounting.creditnote.accCreditNoteDAO;
import com.krawler.spring.accounting.currency.accCurrencyDAO;
import com.krawler.spring.accounting.customDesign.CustomDesignDAO;
import com.krawler.spring.accounting.customDesign.CustomDesignHandler;
import com.krawler.spring.accounting.customDesign.CustomDesignerConstants;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import com.krawler.spring.accounting.debitnote.accDebitNoteDAO;
import com.krawler.spring.accounting.goodsreceipt.AccGoodsReceiptServiceDAO;
import com.krawler.spring.accounting.goodsreceipt.AccGoodsReceiptServiceHandler;
import static com.krawler.spring.accounting.goodsreceipt.AccGoodsReceiptServiceHandler.getTermDetails;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptCMN;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptDAO;
import com.krawler.spring.accounting.handler.AccDashboardServiceImpl;
import com.krawler.spring.accounting.handler.AccountingHandlerDAO;
import com.krawler.spring.accounting.handler.AccountingManager;
import static com.krawler.spring.accounting.handler.AccountingManager.getGlobalCurrencyidFromRequest;
import com.krawler.spring.accounting.handler.CommonEnglishNumberToWords;
import com.krawler.spring.accounting.handler.CommonFunctions;
import com.krawler.spring.accounting.invoice.AccInvoiceServiceDAO;
import com.krawler.spring.accounting.invoice.AccInvoiceServiceHandler;
import com.krawler.spring.accounting.invoice.InvoiceConstants;
import com.krawler.spring.accounting.invoice.accInvoiceCMN;
import com.krawler.spring.accounting.invoice.accInvoiceControllerCMN;
import com.krawler.spring.accounting.invoice.accInvoiceDAO;
import com.krawler.spring.accounting.invoice.dm.InvoiceInfo;
import com.krawler.spring.accounting.jasperreports.*;
import com.krawler.spring.accounting.journalentry.JournalEntryConstants;
import com.krawler.spring.accounting.journalentry.accJournalEntryDAO;
import com.krawler.spring.accounting.payment.accPaymentDAO;
import com.krawler.spring.accounting.product.PriceValuationStack;
import com.krawler.spring.accounting.product.accProductController;
import com.krawler.spring.accounting.product.accProductControllerCMN;
import com.krawler.spring.accounting.product.accProductDAO;
import com.krawler.spring.accounting.product.productHandler;
import com.krawler.spring.accounting.product.service.AccProductService;
import com.krawler.spring.accounting.purchaseorder.accPurchaseOrderDAO;
import com.krawler.spring.accounting.receipt.accReceiptDAO;
import com.krawler.spring.accounting.salesorder.accSalesOrderDAO;
import com.krawler.spring.accounting.tax.TaxConstants;
import com.krawler.spring.accounting.tax.accTaxDAO;
import com.krawler.spring.accounting.vendorpayment.accVendorPaymentControllerCMN;
import com.krawler.spring.accounting.vendorpayment.accVendorPaymentDAO;
import com.krawler.spring.auditTrailModule.auditTrailDAO;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.authHandler.authHandlerDAO;
import com.krawler.spring.common.*;
import com.krawler.spring.exportFuctionality.AccExportReportsServiceDAO;
import com.krawler.spring.exportFuctionality.ExportRecord;
import com.krawler.spring.exportFuctionality.ExportRecordHandler;
import com.krawler.spring.exportFunctionality.exportMPXDAOImpl;
import com.krawler.spring.gst.AccGstService;
import com.krawler.spring.sessionHandler.sessionHandlerImpl;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.pdf.PdfWriter;
import java.io.*;
import java.io.ByteArrayOutputStream;
import java.io.Writer;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.JRPdfExporterParameter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.velocity.app.VelocityEngine;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Period;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.springframework.context.MessageSource;
import org.springframework.context.MessageSourceAware;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;
import org.springframework.web.servlet.support.RequestContextUtils;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import org.apache.commons.lang.time.DateUtils;
import org.springframework.context.NoSuchMessageException;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.w3c.dom.DOMException;

/**
 *
 * @author krawler
 */
public class accReportsController extends MultiActionController implements MessageSourceAware {

    private AccountingHandlerDAO accountingHandlerDAOobj;
    private accCurrencyDAO accCurrencyDAOobj;
    private AccExportReportsServiceDAO accExportReportsServiceDAOobj;
    private accProductDAO accProductObj;
    private accJournalEntryDAO accJournalEntryobj;
    private accAccountDAO accAccountDAOobj;
    private exportMPXDAOImpl exportDaoObj;
    private String successView;
    private accGoodsReceiptDAO accGoodsReceiptDAOObj;
    private accGoodsReceiptCMN accGoodsReceiptCommon;
    private accInvoiceDAO accInvoiceDAOobj;
    private accTaxDAO accTaxObj;
    private accInvoiceCMN accInvoiceCommon;
    private authHandlerDAO authHandlerDAO;
    private ExportRecord ExportrecordObj;
    private AccCostCenterDAO accCostCenterObj;
    private accReceiptDAO accReceiptDao;
    private accVendorPaymentDAO accVendorPaymentDao;
    private MessageSource messageSource;
    private accDebitNoteDAO accDebitNoteobj;
    private accCreditNoteDAO accCreditNoteobj;
    private CommonEnglishNumberToWords EnglishNumberToWordsOjb = new CommonEnglishNumberToWords();
    private accBankReconciliationDAO accBankReconciliationObj;
    private accCompanyPreferencesDAO accCompanyPreferencesObj;
    private DataTableGenerator generator;
    private HibernateTransactionManager txnManager;
    private auditTrailDAO auditTrailObj;
    private accSalesOrderDAO accSalesOrderDAOobj;
    private accPurchaseOrderDAO accPurchaseOrderobj;
    private accPaymentDAO accPaymentDAOobj;
    AccReportsService accReportsService;
    private AccFinancialReportsService accFinancialReportsService;
    private ExportLedger exportLedger;
    private ExportGroupDetailReport exportGroupDetailReport;
    private AccInvoiceServiceDAO accInvoiceServiceDAO;
    private AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAOObj;
    private CustomDesignDAO customDesignDAObj;
    private VelocityEngine velocityEngine;
    private AccGstService accGstService;
    private StockService stockService;
    private AccProductService AccProductService;
    private AccCommonTablesDAO accCommonTablesDAO;    
    private fieldDataManager fieldDataManagercntrl;
    private ExportDimensionReportPL accExportDimensionReportPL;
    private JournalEntryExport journalEntryExport;
    private accCusVenMapDAO accCusVenMapDAOObj;
    private CompanyReportConfigurationService companyReportConfigurationService;
    private fieldManagerDAO fieldManagerDAOobj;
    private AccTemplateReportService accTemplateReportService;
    private ConsolidationReportExportThread consolidationReportExportThread;
    private AccDashboardServiceImpl accDashboardServiceImpl;
    private IntegrationCommonService integrationCommonService;
    private kwlCommonTablesDAO kwlCommonTablesDAOObj;
   
     public void setIntegrationCommonService(IntegrationCommonService integrationCommonService) {
        this.integrationCommonService = integrationCommonService;
    }
    
    public void setConsolidationReportExportThread(ConsolidationReportExportThread consolidationReportExportThread) {
        this.consolidationReportExportThread = consolidationReportExportThread;
    }

    public void setaccTemplateReportService(AccTemplateReportService accTemplateReportService) {
        this.accTemplateReportService = accTemplateReportService;
    }
    
    public void setfieldManagerDAO(fieldManagerDAO fieldManagerDAOobj) {
        this.fieldManagerDAOobj = fieldManagerDAOobj;
    }
    public void setCompanyReportConfigurationService(CompanyReportConfigurationService companyReportConfigurationService) {
        this.companyReportConfigurationService = companyReportConfigurationService;
    }
    
    private static final Logger _logger = Logger.getLogger(accReportsController.class.getName());
    public void setJournalEntryExport(JournalEntryExport journalEntryExport) {
        this.journalEntryExport = journalEntryExport;
    }
    public ExportDimensionReportPL getAccExportDimensionReportPL() {
        return accExportDimensionReportPL;
    }

    public void setAccExportDimensionReportPL(ExportDimensionReportPL accExportDimensionReportPL) {
        this.accExportDimensionReportPL = accExportDimensionReportPL;
    }
    
     public void setaccCommonTablesDAO(AccCommonTablesDAO accCommonTablesDAO) {
        this.accCommonTablesDAO = accCommonTablesDAO;
    }
    public void setAccGoodsReceiptServiceDAOObj(AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAOObj) {
        this.accGoodsReceiptServiceDAOObj = accGoodsReceiptServiceDAOObj;
    }
    
    public void setAccProductService(AccProductService AccProductService) {
        this.AccProductService = AccProductService;
    }
    public void setaccSalesOrderDAO(accSalesOrderDAO accSalesOrderDAOobj) {
        this.accSalesOrderDAOobj = accSalesOrderDAOobj;
    }

    public void setaccExportReportsServiceDAO(AccExportReportsServiceDAO accExportReportsServiceDAOobj) {
        this.accExportReportsServiceDAOobj = accExportReportsServiceDAOobj;
    }

    public void setaccPurchaseOrderDAO(accPurchaseOrderDAO accPurchaseOrderobj) {
        this.accPurchaseOrderobj = accPurchaseOrderobj;
    }

    public void setaccPaymentDAO(accPaymentDAO accPaymentDAOobj) {
        this.accPaymentDAOobj = accPaymentDAOobj;
    }
    public void setGenerator(DataTableGenerator generator) {
        this.generator = generator;
    }

    public void setaccCompanyPreferencesDAO(accCompanyPreferencesDAO accCompanyPreferencesObj) {
        this.accCompanyPreferencesObj = accCompanyPreferencesObj;
    }

    public void setaccBankReconciliationDAO(accBankReconciliationDAO accBankReconciliationObj) {
        this.accBankReconciliationObj = accBankReconciliationObj;
    }

    public void setaccDebitNoteDAO(accDebitNoteDAO accDebitNoteobj) {
        this.accDebitNoteobj = accDebitNoteobj;
    }

    public void setaccCreditNoteDAO(accCreditNoteDAO accCreditNoteobj) {
        this.accCreditNoteobj = accCreditNoteobj;
    }

    public void setExportLedger(ExportLedger exportLedger) {
        this.exportLedger = exportLedger;
    }
    public void setExportGroupDetailReport(ExportGroupDetailReport exportGroupDetailReport) {
        this.exportGroupDetailReport = exportGroupDetailReport;
    }

    public void setaccVendorPaymentDAO(accVendorPaymentDAO accVendorPaymentDao) {
        this.accVendorPaymentDao = accVendorPaymentDao;
    }

    public void setaccReceiptDAO(accReceiptDAO accReceiptDao) {
        this.accReceiptDao = accReceiptDao;
    }

    public void setAuthHandlerDAO(authHandlerDAO authHandlerDAO) {
        this.authHandlerDAO = authHandlerDAO;
    }

    public void setExportRecord(ExportRecord ExportrecordObj) {
        this.ExportrecordObj = ExportrecordObj;
    }

    public void setaccountingHandlerDAO(AccountingHandlerDAO AccountingHandlerDAOobj) {
        this.accountingHandlerDAOobj = AccountingHandlerDAOobj;
    }

    public void setaccCurrencyDAO(accCurrencyDAO accCurrencyDAOobj) {
        this.accCurrencyDAOobj = accCurrencyDAOobj;
    }

    public void setaccJournalEntryDAO(accJournalEntryDAO accJournalEntryobj) {
        this.accJournalEntryobj = accJournalEntryobj;
    }

    public void setaccAccountDAO(accAccountDAO accAccountDAOobj) {
        this.accAccountDAOobj = accAccountDAOobj;
    }

    public String getSuccessView() {
        return successView;
    }

    public void setexportMPXDAOImpl(exportMPXDAOImpl exportDaoObj) {
        this.exportDaoObj = exportDaoObj;
    }

    public void setSuccessView(String successView) {
        this.successView = successView;
    }

    public void setaccCostCenterDAO(AccCostCenterDAO accCostCenterDAOObj) {
        this.accCostCenterObj = accCostCenterDAOObj;
    }

    public void setAccGoodsReceiptDAO(accGoodsReceiptDAO accGoodsReceiptDAOObj) {
        this.accGoodsReceiptDAOObj = accGoodsReceiptDAOObj;
    }

    public void setaccProductDAO(accProductDAO accProductObj) {
        this.accProductObj = accProductObj;
    }

    public void setaccGoodsReceiptCMN(accGoodsReceiptCMN accGoodsReceiptCommon) {
        this.accGoodsReceiptCommon = accGoodsReceiptCommon;
    }

    public void setaccInvoiceDAO(accInvoiceDAO accInvoiceDAOobj) {
        this.accInvoiceDAOobj = accInvoiceDAOobj;
    }

    public void setaccTaxDAO(accTaxDAO accTaxObj) {
        this.accTaxObj = accTaxObj;
    }

    public void setAccInvoiceCommon(accInvoiceCMN accInvoiceCommon) {
        this.accInvoiceCommon = accInvoiceCommon;
    }

    public void setTxnManager(HibernateTransactionManager txManager) {
        this.txnManager = txManager;
    }

    public void setauditTrailDAO(auditTrailDAO auditTrailDAOObj) {
        this.auditTrailObj = auditTrailDAOObj;
    }

    public void setAccReportsService(AccReportsService accReportsService) {
        this.accReportsService = accReportsService;
    }
    
    public void setAccFinancialReportsService(AccFinancialReportsService accFinancialReportsService) {
        this.accFinancialReportsService = accFinancialReportsService;
    }

    public void setaccInvoiceServiceDAO(AccInvoiceServiceDAO accInvoiceServiceDAO) {
        this.accInvoiceServiceDAO = accInvoiceServiceDAO;
    }

    public void setCustomDesignDAObj(CustomDesignDAO customDesignDAObj) {
        this.customDesignDAObj = customDesignDAObj;
    }

    public void setVelocityEngine(VelocityEngine velocityEngine) {
        this.velocityEngine = velocityEngine;
    }
    
    public void setAccGstService(AccGstService accGstService) {
        this.accGstService = accGstService;
    }
     
    public void setStockService(StockService stockService) {
        this.stockService = stockService;
    }
    public void setFieldDataManager(fieldDataManager fieldDataManagercntrl) {
        this.fieldDataManagercntrl = fieldDataManagercntrl;
    }

    public void setAccCusVenMapDAOObj(accCusVenMapDAO accCusVenMapDAOObj) {
        this.accCusVenMapDAOObj = accCusVenMapDAOObj;
    }
    
    public void setKwlCommonTablesDAOObj(kwlCommonTablesDAO kwlCommonTablesDAOObj) {
        this.kwlCommonTablesDAOObj = kwlCommonTablesDAOObj;
    }
    
    public void setAccDashboardServiceImpl(AccDashboardServiceImpl accDashboardServiceImpl) {
        this.accDashboardServiceImpl = accDashboardServiceImpl;
    }

    public ModelAndView findReportChartData(HttpServletRequest request, HttpServletResponse response) {
        try {
            DataSourceHelper.executeDataSourceServletFlow(request, response, generator, false);
        } catch (IOException ex) {
        }
        return null;
    }
    
    @Override
    public void setMessageSource(MessageSource msg) {
        this.messageSource = msg;
    }


 public ModelAndView getAccountOpeningBalance(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        Date startDate=null;
        try {
            Double openingbalance = 0.0;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String stdate=request.getParameter("stdate");
            if (StringUtil.isNullOrEmpty(stdate)) {
                KwlReturnObject companyresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences comppreferences = (CompanyAccountPreferences) companyresult.getEntityList().get(0);
                startDate = comppreferences.getBookBeginningFrom();
                request.setAttribute("stdate", authHandler.getDateOnlyFormat().format(startDate));
            } else {
                startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            }
            
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            openingbalance = accReportsService.getAccountBalance(paramJobj, request.getParameter("accountid"), null, startDate,null);
            
            JSONObject fobj = new JSONObject();
            fobj.put("openingbalance", new JSONArray("[" + openingbalance + "]"));
            jobj.put(Constants.RES_data, fobj);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public double getAccountBalance(HttpServletRequest request, String accountid, Date startDate, Date endDate) throws ServiceException, SessionExpiredException {
        JSONObject params = accReportsService.getRequestParams(request);
        HashMap<String, Object> requestParams = new HashMap<>();
        try {
            JSONObject globalParams = (JSONObject) params.get(Constants.GLOBAL_PARAMS);
            Iterator keys = globalParams.keys();
            while (keys.hasNext()) {
                String key = (String) keys.next();
                requestParams.put(key, globalParams.get(key));
            }
            requestParams.put("costcenter", params.optString("costcenter", ""));
            requestParams.put(Constants.Acc_Search_Json, params.optString(Constants.Acc_Search_Json, ""));
            requestParams.put(Constants.Filter_Criteria, params.optString(InvoiceConstants.Filter_Criteria, ""));
            requestParams.put("templatecode", (StringUtil.isNullOrEmpty(params.optString("templatecode", null))) ? -1 : Integer.parseInt(params.optString("templatecode")));
            String selectedCurrencyIds = params.optString("currencyIds");
            if (!StringUtil.isNullOrEmpty(selectedCurrencyIds)) {
                requestParams.put("currencyFlag", true);
                requestParams.put("selectedCurrencyIds", selectedCurrencyIds);
            }
            if (!StringUtil.isNullOrEmpty(params.optString("isGeneralLedger"))) {
                boolean isGeneralLedger = Boolean.parseBoolean(params.optString("isGeneralLedger"));
                requestParams.put("generalLedgerFlag", isGeneralLedger);
            }
            if (params.optInt("accountTransactionType", Constants.All_Transaction_TypeID) != Constants.All_Transaction_TypeID) {
                requestParams.put("accountTransactionType", params.optInt("accountTransactionType", Constants.All_Transaction_TypeID));
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return accReportsService.getAccountBalance(params, requestParams, accountid, startDate, endDate);
    }

  
    public double[] getOpeningBalancesDateWiseMerged(HttpServletRequest request, HashMap requestMap, String[] companyids, Date startDate, Date endDate, boolean eliminateflag, CompanyAccountPreferences preferences) throws ServiceException, JSONException,SessionExpiredException  {
        double[] balances = {0, 0};
        Date stdate = request.getAttribute("startDate") != null ? (Date) request.getAttribute("startDate") : startDate;
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            Date excludePrecviousYearDate = accReportsService.getDateForExcludePreviousYearBalanceFilter(paramJobj, stdate);
            
            String filterConjuctionCriteria = request.getParameter("filterConjuctionCriteria") != null ? request.getParameter("filterConjuctionCriteria") : "";
            String Searchjson = request.getParameter("searchJson") != null ? request.getParameter("searchJson") : "";
            if (request.getAttribute("DimensionBasedComparisionReport") != null && request.getAttribute("DimensionBasedComparisionReport").equals("DimensionBasedComparisionReport")) {
                Searchjson = request.getAttribute("DimensionBasedSearchJson").toString();
            }
            request.setAttribute("filterConjuctionCriteria", filterConjuctionCriteria);
            request.setAttribute("Searchjson", Searchjson);
            boolean isTrialBalance = request.getAttribute("isTrialBalance") != null ? (Boolean) request.getAttribute("isTrialBalance") : false;
            String companyid = "";
            boolean isOpeningBalanceFlag = false;
            if (request.getAttribute("isOpeningBalanceFlag") != null) {
                isOpeningBalanceFlag = Boolean.parseBoolean(request.getAttribute("isOpeningBalanceFlag").toString());
            }
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                requestMap.put(Constants.companyKey, companyid);

                KwlReturnObject accresult = accAccountDAOobj.getAccountDatewiseMerged(companyid, startDate, endDate, eliminateflag);
                List list = accresult.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    Account account = (Account) itr.next();
                    /* Opening balance should be carry forward to next year*/
//                    if (!isTrialBalance && account.getAccounttype() == 0) {
//                        Date start = excludePrecviousYearDate;
//                        if (!((start.before(account.getCreationDate()) || start.equals(account.getCreationDate())))) {
//                            continue;
//                        }
//                    }
                    double accountOpeningBalance = accInvoiceCommon.getOpeningBalanceOfAccount(request, account, false, null);
                    double bal = accountOpeningBalance;//(Double) crresult.getEntityList().get(0);
                    if (bal > 0) {
                        balances[0] += bal;
                    } else if (bal < 0) {
                        balances[1] += bal;
                    }
                }
                // Below code does not require for TB So commenting it Refer ticketSDP-2374
                if (isOpeningBalanceFlag) {
                    try {
                        boolean isMRPActivated = accCompanyPreferencesObj.isMRPModuleActivated(companyid);
                        KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                        ExtraCompanyPreferences extraPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
                        if (extraPreferences.isStockValuationFlag() && !(isMRPActivated || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {  // Do not calculate opening stock if MRP module is activated
                            double invOpeBal = 0;

                            HashMap<String, Object> requestParam = new HashMap<String, Object>();
                            requestParam.put(Constants.REQ_startdate, authHandler.getDateOnlyFormat().format(startDate));
                            requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(endDate));
                            requestParam.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                            requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                            requestParam.put("isDifferenceInOpeningBalanceFlag", true);
                            requestParam.put(Constants.Acc_Search_Json, Searchjson);
                            double[] valuation = AccProductService.getInventoryValuationDataForFinancialReports(requestParam);
                            invOpeBal = valuation[2];
                            if (invOpeBal > 0) {
                                balances[0] += invOpeBal;
                            } else {
                                balances[1] += invOpeBal;
                            }
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(accReportsController.class.getName()).log(Level.INFO, ex.getMessage());
                    }
                }
            }
            request.removeAttribute("filterConjuctionCriteria");
            request.removeAttribute("Searchjson");
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return balances;
    }

    public ModelAndView getLedger(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter(Constants.limit);
            String accName = request.getParameter("accountid");
            boolean periodView = request.getParameter("periodView") != null ? Boolean.parseBoolean(request.getParameter("periodView")) : false;
            if (Constants.Difference_in_Opening_balances.equals(accName)) {
                DateFormat df = authHandler.getDateOnlyFormat();
                Date endDate = df.parse(request.getParameter("enddate"));
                Date startDate = df.parse(request.getParameter("stdate"));
                request.setAttribute("isOpeningBalanceFlag",true);
                jobj = accReportsService.getOpeningBalancesWithDateLedger(request, sessionHandlerImpl.getCompanyid(request), periodView ? new Date(1970) : startDate, endDate);
            } else {
                jobj = accReportsService.getLedger(request);
            }
            JSONArray jArr = jobj.getJSONArray(Constants.RES_data);
            JSONArray pagedJson = jArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            jobj.put(Constants.RES_data, pagedJson);
            jobj.put(Constants.RES_count, jArr.length());
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public List getChildAccounts(List ll, Account account) {
        Iterator<Account> itr = account.getChildren().iterator();
        while (itr.hasNext()) {
            Account child = itr.next();
            ll.add(child);
            ll = getChildAccounts(ll, child);
        }
        return ll;
    }

    private JSONArray getMonthsJSONArray(String startDateStr, String endDateStr, String datePattern) throws JSONException {
        final DateTimeFormatter dtf = DateTimeFormat.forPattern(datePattern);
        Date startDate = dtf.parseLocalDate(startDateStr).toDate();
        Date endDate = dtf.parseLocalDate(endDateStr).toDate();

        // we need to include the month of the end date as well
        LocalDate localStartDate = new LocalDate(startDate);
        LocalDate localEndDate = new LocalDate(endDate);

        Calendar cal = Calendar.getInstance();
        cal.setTime(localStartDate.toDate());
        int startMonth = cal.get(Calendar.MONTH);
        int startYear = cal.get(Calendar.YEAR);

        cal.setTime(localEndDate.toDate());
        int endMonth = cal.get(Calendar.MONTH);
        int endYear = cal.get(Calendar.YEAR);

        List<String> monthList = new ArrayList();

        // if user selects same month & year for both start & end fields, we get the last date of the month to populate into the endDate
        if (startMonth == endMonth && startYear == endYear) {
            monthList.add(localStartDate.toString("MMM yyyy"));
        } else {
            // just a trick to include the last month as well
            localEndDate = localEndDate.plus(Period.months(1));
            while (localStartDate.isBefore(localEndDate)) {
                monthList.add(localStartDate.toString("MMM yyyy"));
                localStartDate = localStartDate.plus(Period.months(1));
            }
            localStartDate = new LocalDate(startDate);
        }

        // the first object would be the months array
        JSONArray monthArray = new JSONArray();
        for (int i = 0; i < monthList.size(); i++) {
            JSONObject monthObj = new JSONObject();
            monthObj.put("monthname", monthList.get(i));
            monthArray.put(monthObj);
        }
        return monthArray;
    }

    public ModelAndView getMonthlyRevenue(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter(Constants.limit);
            jobj = getMonthlyRevenue(request, false);    	
            JSONArray data = jobj.getJSONArray(Constants.RES_data);
            if (data == null || data.length() == 0) {
                JSONObject monthArrayObject = new JSONObject();
                monthArrayObject.put("months", getMonthsJSONArray(
                        request.getParameter("stdate"), request.getParameter("enddate"), "MMMM, yyyy"));
                data.put(monthArrayObject);
            }
            JSONArray pagedJson = data;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            jobj.put(Constants.RES_data, pagedJson);
            jobj.put(Constants.RES_count, data.length());
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getAccountsExceedingBudget(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getAccountsExceedingBudget(request);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getAccountsExceedingBudget(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        try {
            JSONArray jArr = new JSONArray(request.getParameter("detail"));
            JSONArray jArr1 = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            String CompanyID = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), CompanyID);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) curresult.getEntityList().get(0);

            for (int i = 0; i < jArr.length(); i++) {
                jobjTemp = jArr.getJSONObject(i);
                boolean isExpenseInv = request.getParameter("isExpenseInv") == null ? false : Boolean.valueOf(request.getParameter("isExpenseInv"));
                Product product = null;
                String accountid = "";
                String jobDesc = "";
                if (preferences.isWithoutInventory()) {
                    accountid = jobjTemp.getString("creditoraccount");
                    jobDesc = jobjTemp.getString("productdetail");
                } else {
                    if (!isExpenseInv) {
                        KwlReturnObject prdresult = accountingHandlerDAOobj.getObject(Product.class.getName(), jobjTemp.getString("productid"));
                        product = (Product) prdresult.getEntityList().get(0);
                        accountid = product.getPurchaseAccount().getID();
                    } else {
                        accountid = jobjTemp.getString("accountid");
                    }
                }

                KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountid);
                Account account = (Account) accresult.getEntityList().get(0);
                //in Expense tab, any account can be selected, so check if account nature is "Expense" otherwise ignore that account
                if (isExpenseInv) {
                    if (account.getGroup().getNature() != 2) {
                        continue;
                    }
                }

                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                requestParams.put("accountid", accountid);
                KwlReturnObject result = accAccountDAOobj.getMonthlyBudget(requestParams);
                List list = result.getEntityList();
                DateFormat formatter = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                Date billDate = new Date(request.getParameter("billdate"));
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(billDate);
                calendar.set(Calendar.DAY_OF_MONTH, 1);
                String firstDayString = authHandler.getDateOnlyFormat().format(calendar.getTime());
                Date firstDayDate = authHandler.getDateOnlyFormat().parse(firstDayString);
                Date firstDay = firstDayDate;
                String firstDayStr = formatter.format(firstDay);
                calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH));
                String LastDayString = authHandler.getDateOnlyFormat().format(calendar.getTime());
                Date LastDayDate = authHandler.getDateOnlyFormat().parse(LastDayString);
                Date LastDay = LastDayDate;
                String LastDayStr = formatter.format(LastDay);
                Date endDate = authHandler.getDateOnlyFormat().parse(LastDayStr);
                Date startDate = authHandler.getDateOnlyFormat().parse(firstDayStr);

                double amount = jobjTemp.getDouble("amount");

                //BUG Fixed #16739 : Creation date check
                Date createdOn = AccountingManager.resetTimeField(account.getCreationDate());
                Date toDate = AccountingManager.resetTimeField(endDate);
                if (toDate.compareTo(createdOn) < 0) {
                    continue;
                }
                
                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);    
                double balance = accReportsService.getAccountBalance(paramJobj, accountid, startDate, endDate,null);
                
                double newBalance = balance + amount;
                newBalance = Math.round(newBalance);
                if (!list.isEmpty()) {
                    Iterator itr = list.iterator();
                    AccountBudget accbudget = (AccountBudget) itr.next();
                    double fixedCreditLimit = getMontlyBudgetValue(accbudget, billDate.getMonth());
                    if (fixedCreditLimit >= 0) {
                        if (newBalance > fixedCreditLimit) {
                            JSONObject jTemp = new JSONObject();
                            jTemp.put("accountId", account.getID());
                            jTemp.put("accountName", (!StringUtil.isNullOrEmpty(account.getName())) ? account.getName() : (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : ""));
                            jTemp.put("accountBudget", fixedCreditLimit);
                            jTemp.put("accountBalance", Math.round(balance));
                            if (!preferences.isWithoutInventory()) {
                                jTemp.put("productId", product == null ? "" : product.getID());
                                jTemp.put("productName", product == null ? "" : product.getName());
                            } else {
                                jTemp.put("productName", jobDesc);
                            }
                            jTemp.put("currentAmount", amount);
                            jArr1.put(jTemp);
                        }
                    }
                }
            }
            jobj.put(Constants.RES_data, jArr1);
        } catch (ParseException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAccountsExceedingBudget : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAccountsExceedingBudget : " + ex.getMessage(), ex);
        }
        return jobj;
    }

    public double getMontlyBudgetValue(AccountBudget accbudget, int month) {
        double monthValue = -1;
        switch (month) {
            case 0:
                monthValue = accbudget.getJan();
                break;
            case 1:
                monthValue = accbudget.getFeb();
                break;
            case 2:
                monthValue = accbudget.getMarch();
                break;
            case 3:
                monthValue = accbudget.getApril();
                break;
            case 4:
                monthValue = accbudget.getMay();
                break;
            case 5:
                monthValue = accbudget.getJune();
                break;
            case 6:
                monthValue = accbudget.getJuly();
                break;
            case 7:
                monthValue = accbudget.getAug();
                break;
            case 8:
                monthValue = accbudget.getSept();
                break;
            case 9:
                monthValue = accbudget.getOct();
                break;
            case 10:
                monthValue = accbudget.getNov();
                break;
            case 11:
                monthValue = accbudget.getDecember();
                break;
        }
        return monthValue;
    }

    public double getMontlyForecastValue(AccountForecast accountForecast, int month) {
        double monthValue = -1;
        switch (month) {
            case 0:
                monthValue = accountForecast.getJan();
                break;
            case 1:
                monthValue = accountForecast.getFeb();
                break;
            case 2:
                monthValue = accountForecast.getMarch();
                break;
            case 3:
                monthValue = accountForecast.getApril();
                break;
            case 4:
                monthValue = accountForecast.getMay();
                break;
            case 5:
                monthValue = accountForecast.getJune();
                break;
            case 6:
                monthValue = accountForecast.getJuly();
                break;
            case 7:
                monthValue = accountForecast.getAug();
                break;
            case 8:
                monthValue = accountForecast.getSept();
                break;
            case 9:
                monthValue = accountForecast.getOct();
                break;
            case 10:
                monthValue = accountForecast.getNov();
                break;
            case 11:
                monthValue = accountForecast.getDecember();
                break;
        }
        return monthValue;
    }

    
    public void printSOACustomerDD(HttpServletRequest request, HttpServletResponse response) {  // function to print Customer SOA
        JSONObject jobj = new JSONObject();
        JSONObject tempJobj = new JSONObject();
        String errHTML = "";
        String recordids = "";
        try {
            HashMap<String, Object>otherconfigrequestParams = new HashMap();
            LinkedHashMap<String, JSONArray> lineLevelData = new LinkedHashMap<String, JSONArray>();
            AccCustomData accCustomData = null;
            int reportid = !StringUtil.isNullOrEmpty(request.getParameter("reportid")) ? Integer.parseInt(request.getParameter("reportid")) : -1;
            if(reportid==Constants.SOA_CUSTOMER_ACCOUNT_STATEMENT_REPORTID){
                tempJobj = getCustomerAccountStatement(request,false);
            }else{
                tempJobj = getCustomerLedger(request,true);
            }
            lineLevelData = getLineLevelDataForSOA(tempJobj,request);
            otherconfigrequestParams.put(Constants.moduleid, Constants.Acc_Customer_AccStatement_ModuleId);
            otherconfigrequestParams.put(Constants.isConsignment,false);
            recordids = getDistinctids(lineLevelData);
            recordids = recordids.replace("[", "");
            recordids = recordids.replace("]", "");
            otherconfigrequestParams.put("recordids",recordids);
            ExportRecordHandler.exportSingleGeneric(request, response, lineLevelData, accCustomData, customDesignDAObj,accCommonTablesDAO, accAccountDAOobj, accountingHandlerDAOobj,
                    velocityEngine,"",otherconfigrequestParams,accInvoiceServiceDAO,accGoodsReceiptServiceDAOObj);
            if (StringUtil.isNullOrEmpty(recordids)) {
                errHTML = CustomDesignHandler.getErrorHtmlForDD(request);
            }
            response.setContentType("text/html;charset=UTF-8");
            response.getOutputStream().write(errHTML.getBytes());
            response.getOutputStream().flush();
            response.getOutputStream().close();
        } catch(SessionExpiredException ex) {
            try {
                if (StringUtil.isNullOrEmpty(recordids)) {
                    errHTML = CustomDesignHandler.getErrorHtmlForDD(request);
                }
                response.setContentType("text/html;charset=UTF-8");
                response.getOutputStream().write(errHTML.getBytes());
                response.getOutputStream().flush();
                response.getOutputStream().close();
            }catch (Exception ex2) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex2);
            }
        } catch(Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }   
    }
    public void printSOAVendorDD(HttpServletRequest request, HttpServletResponse response) {  //function to print vendor SOA
        JSONObject jobj = new JSONObject();
        JSONObject tempJobj = new JSONObject();
        String errHTML = "";
        String recordids = "";
        try {
            HashMap<String, Object>otherconfigrequestParams = new HashMap();
            LinkedHashMap<String, JSONArray> lineLevelData = new LinkedHashMap<String, JSONArray>();
            AccCustomData accCustomData = null;
            int reportid = !StringUtil.isNullOrEmpty(request.getParameter("reportid")) ? Integer.parseInt(request.getParameter("reportid")) : -1;
            if(reportid==Constants.SOA_VENDOR_ACCOUNT_STATEMENT_REPORTID){
                tempJobj = getVendorAccountStatement(request,true);
            }else{
                tempJobj = getVendorLedger(request, true);
            }
            lineLevelData = getLineLevelDataForSOA(tempJobj,request);
            otherconfigrequestParams.put(Constants.moduleid, Constants.Acc_Vendor_AccStatement_ModuleId);
            otherconfigrequestParams.put(Constants.isConsignment,false);
            recordids = getDistinctids(lineLevelData);
            recordids = recordids.replace("[", "");
            recordids = recordids.replace("]", "");
            otherconfigrequestParams.put("recordids",recordids);
            ExportRecordHandler.exportSingleGeneric(request, response, lineLevelData, accCustomData, customDesignDAObj,accCommonTablesDAO, accAccountDAOobj, accountingHandlerDAOobj,
                    velocityEngine,"",otherconfigrequestParams,accInvoiceServiceDAO,accGoodsReceiptServiceDAOObj);
            if (StringUtil.isNullOrEmpty(recordids)) {
                errHTML = CustomDesignHandler.getErrorHtmlForDD(request);
            }
            response.setContentType("text/html;charset=UTF-8");
            response.getOutputStream().write(errHTML.getBytes());
            response.getOutputStream().flush();
            response.getOutputStream().close();
        } catch(SessionExpiredException ex) {
            try {
                if (StringUtil.isNullOrEmpty(recordids)) {
                    errHTML = CustomDesignHandler.getErrorHtmlForDD(request);
                }
                response.setContentType("text/html;charset=UTF-8");
                response.getOutputStream().write(errHTML.getBytes());
                response.getOutputStream().flush();
                response.getOutputStream().close();
            }catch (Exception ex2) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex2);
            }
        } catch(Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }   
    }
    public String getDistinctids(HashMap<String, JSONArray> lineLevelData) {
        LinkedHashSet<String> cvSet = new LinkedHashSet<String>();
        try {
            Object[] cvIds = lineLevelData.keySet().toArray();
            for(Object id : cvIds){
                cvSet.add(id.toString());
            }
        } catch(Exception ex ){
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return  cvSet.toString();
    }
    public LinkedHashMap<String, JSONArray> getLineLevelDataForSOA ( JSONObject jobj, HttpServletRequest request ) {
        LinkedHashMap<String, JSONArray> retobj = new LinkedHashMap<String, JSONArray>();
        AccCustomData accCustomData = null;
        KwlReturnObject objItr= null;
        try {
            JSONArray jarr = jobj.getJSONArray(Constants.RES_data);
            int templatesubtype = StringUtil.isNullOrEmpty(request.getParameter("templatesubtype")) ? 0 : Integer.parseInt(request.getParameter("templatesubtype"));
            String companyid = AccountingManager.getCompanyidFromRequest(request);
            int reportid = !StringUtil.isNullOrEmpty(request.getParameter("reportid")) ? Integer.parseInt(request.getParameter("reportid")) : -1;
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);//User Date Formatter
            DateFormat sqlDF = null;
            /**
             * JE Entry date format differ in case of SOA Customer
             */
//            if (reportid == Constants.SOA_CUSTOMER_ACCOUNT_STATEMENT_REPORTID) {
//                sqlDF = new SimpleDateFormat("yyyy-MM-dd");
//            } else {
                sqlDF = authHandler.getDateOnlyFormat();
//            }
            String id = "";
            
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            LinkedHashSet<String> cvSet = new LinkedHashSet<>();
            for (int i = 0; i < jarr.length(); i++) {
                String accId = jarr.getJSONObject(i).getString("accId");
                if (!cvSet.contains(accId)) {
                    cvSet.add(accId);
                }
            }
            //flag for SOA is Outstanding or All
            boolean invoiceAmountDueFilter = true;
            if (request.getParameter("invoiceAmountDueFilter") != null) {
                invoiceAmountDueFilter = Boolean.parseBoolean(request.getParameter("invoiceAmountDueFilter"));
            }
            
            for (int j = 0; j < cvSet.size(); j++) {
                String accIdFromSet = cvSet.toArray()[j].toString();
                JSONArray tempArray = new JSONArray();
                Set<String> currencyCount = new HashSet<String>();
                double totalAmount = 0.0, totalCreditAmount = 0.0, totalDebitAmount = 0.0, totalCreditAmountInBase = 0.0, totalDebitAmountInBase = 0.0,totalInvoiceAmount=0.0;
                int rowcnt = 0;
                double accuredBallance = 0.0;
                double accuredBallanceInBase = 0.0;
                double custCurrBaseAmount = 0;
                // get currency details
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                
                for (int k = 0; k < jarr.length(); k++) {
                    String accId = jarr.getJSONObject(k).getString("accId");
                    if (accIdFromSet.equalsIgnoreCase(accId)) {
                        JSONObject tempJobj = jarr.getJSONObject(k);
                        String type = tempJobj.optString("type", "");
                        String customCurrencySymbol = accCommonTablesDAO.getCustomCurrencySymbol(tempJobj.optString("currencysymbol", ""), companyid); 
                        if (!type.equalsIgnoreCase("Accrued Balance")) {
                            rowcnt++;
                            tempJobj.put(CustomDesignerConstants.SrNO, rowcnt);// Sr No
                            if ((templatesubtype == 0 || templatesubtype == 2) || (templatesubtype == 1 && (type.equalsIgnoreCase("Sales Invoice") || type.equalsIgnoreCase("Purchase Invoice")))) { // Check for template is SOA or SOI, If SOI then check for only Sales or Purchase Invoice
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOABalanceAmountInBase, tempJobj.optString("balanceAmountInBase", ""));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOABillDate, df.format(sqlDF.parse(tempJobj.optString("jeEntryDate", sqlDF.format(new Date())))));
//                                tempJobj.put(CustomDesignerConstants.CustomDesignSOABillDate, !StringUtil.isNullOrEmpty(tempJobj.optString("jeEntryDate")) ? df.format(sqlDF.parse(tempJobj.getString("jeEntryDate"))) : df.format(new Date()));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOACreditAmount, tempJobj.optString("creditAmount", ""));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOACreditAmountInBase, tempJobj.optString("creditAmountInBase", ""));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOACustomerName, tempJobj.optString("accName", ""));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAVendorName, tempJobj.optString("accName", ""));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOADebitAmount, tempJobj.optString("debitAmount", ""));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOADebitAmountInBase, tempJobj.optString("debitAmountInBase", ""));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAJournalEntry, tempJobj.optString("jeEntryNumber", ""));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAMemo, tempJobj.optString("memo", "").replaceAll("\\n", "<br>"));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOATransactionID, tempJobj.optString("invoiceNumber", ""));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOACurrency,  customCurrencySymbol);
                                totalAmount = Double.parseDouble(tempJobj.optString("balanceAmountInBase", ""));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOATransactionType, type);
                                totalCreditAmountInBase += Double.parseDouble((tempJobj.optString("creditAmountInBase", "").length() == 0 || (!StringUtil.isNullOrEmpty(tempJobj.optString("creditAmountInBase", "")))) ? "0" : tempJobj.optString("creditAmountInBase", "0.0"));
                                totalDebitAmountInBase += Double.parseDouble((tempJobj.optString("debitAmountInBase", "").length() == 0 || (!StringUtil.isNullOrEmpty(tempJobj.optString("debitAmountInBase", "")))) ? "0" : tempJobj.optString("debitAmountInBase", "0.0"));
                                tempJobj.put(CustomDesignerConstants.Amount, tempJobj.optDouble("debitAmountInBase", 0) - tempJobj.optDouble("creditAmountInBase", 0));
                            }
                            id = tempJobj.optString(Constants.billid, "");
                            int moduleid = 0;
                            double partialpayment = 0.0, invoiceamount = 0.0, amountDue = 0.0, originalAmount = 0.0,amountDueinBase = 0.0,invoiceamountinBase = 0.0,debitAmountinbase = 0.0,debitAmount=0.0,exchangeRate=0.0d;
                            String poReference = "", chequeNo = "";
                            if (type.equalsIgnoreCase("Sales Invoice")) {
                                moduleid = Constants.Acc_Invoice_ModuleId;
                                objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), id);
                                Invoice invoice = (Invoice) objItr.getEntityList().get(0);
                                String jID = invoice.getJournalEntry() != null ? invoice.getJournalEntry().getID() : "";
                                KwlReturnObject custumObjresult = null;
                                if (!StringUtil.isNullOrEmpty(jID)) {
                                    try {
                                        custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jID);
                                    } catch (Exception ex) {
                                        Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    accCustomData = (AccJECustomData) custumObjresult.getEntityList().get(0);
                                }
                                poReference = invoice.getPoRefNumber() != null ? invoice.getPoRefNumber() : "";
                                exchangeRate = 1 / (invoice.getExternalCurrencyRate() != 0.0 ? invoice.getExternalCurrencyRate() :1);
                                invoiceamount = invoice.getInvoiceamount();
                                invoiceamountinBase = invoice.getInvoiceamountinbase();
                                originalAmount = invoiceamountinBase;
                                totalInvoiceAmount += invoiceamountinBase;
                                amountDue = (tempJobj.optDouble("amountDue",0.0) != 0.0 ) ? tempJobj.optDouble("amountDue",0.0) : invoice.getInvoiceamountdue();
                                amountDueinBase = authHandler.round(amountDue * exchangeRate,companyid);
                                partialpayment = invoiceamount - amountDue;
                                debitAmount = partialpayment;
                                debitAmountinbase = invoiceamountinBase - amountDueinBase;
                                if (invoice.isIsOpeningBalenceInvoice()) {
                                    amountDueinBase = invoice.getOpeningBalanceBaseAmountDue();
                                    amountDue = invoice.getOpeningBalanceAmountDue();
                                }
                                String customerCurrencyId = invoice.getCustomer().getCurrency().getCurrencyID();
                                String baseCurrencyId = currency.getCurrencyID();
                                Map requestParams = new HashMap();
                                requestParams.put("companyid",companyid);
                                requestParams.put("gcurrencyid",baseCurrencyId);
                                Date applyDate = null;
                                applyDate = invoice.getCreationDate();
//                                if (invoice.isIsOpeningBalenceInvoice()) {
//                                    applyDate = invoice.getCreationDate();
//                                } else {
//                                    applyDate = invoice.getJournalEntry() != null ?invoice.getJournalEntry().getEntryDate(): invoice.getCreationDate();
//                                }
                                //If customer currency and transaction currency is same then no need of currency conversion
                                if(invoice.getCurrency().getCurrencyID().equals(customerCurrencyId)){
                                    custCurrBaseAmount = custCurrBaseAmount + tempJobj.optDouble("debitAmount", 0);
                                } else{
                                    KwlReturnObject custbAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, tempJobj.optDouble("debitAmountInBase", 0), customerCurrencyId, applyDate, 0);
                                    custCurrBaseAmount = custCurrBaseAmount + Double.parseDouble(custbAmt.getEntityList().get(0).toString());
                                }
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOACustVendCurrBalanceAmountInBase, custCurrBaseAmount);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOADueDate, df.format(invoice.getDueDate()));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAPartialPayment, partialpayment);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAPoRefrence, poReference);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAOriginalAmount, originalAmount);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOABanalanceAmount, amountDueinBase); // Transactional Balance Amount in Base currency
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAAmountDue, amountDue); //Amount Due
                                tempJobj.put(CustomDesignerConstants.LINEEXCHANGERATE, exchangeRate);//Exchange Rate
                                if (templatesubtype == 1) {//in case of invoice type template
                                    totalDebitAmountInBase += debitAmountinbase; //Total Debit Amount
                                    tempJobj.put(CustomDesignerConstants.CustomDesignSOADebitAmount, debitAmount);//Debit Amount
                                    tempJobj.put(CustomDesignerConstants.CustomDesignSOADebitAmountInBase, debitAmountinbase);//Debit Amount in Base currency
                                }
                                tempJobj.put(CustomDesignerConstants.SUPPLIER_INVOICE_NO, "");
                                // Add currency id to json object
                                tempJobj.put(Constants.currencyKey, invoice.getCurrency().getCurrencyID());
                                tempJobj.put(CustomDesignerConstants.BILLING_ADDRESS, invoice.getBillingShippingAddresses() != null ? invoice.getBillingShippingAddresses().getBillingAddressType() : Constants.NONE);
                                tempJobj.put(CustomDesignerConstants.SHIPPING_ADDRESS, invoice.getBillingShippingAddresses() != null ? invoice.getBillingShippingAddresses().getShippingAddressType() : Constants.NONE);
                                // Add currency id to currencycount set
                                currencyCount.add(invoice.getCurrency().getCurrencyID());
                            } else if (type.equalsIgnoreCase("Credit Note")) {
                                moduleid = Constants.Acc_Credit_Note_ModuleId;
                                KwlReturnObject cap = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), id);
                                CreditNote creditNote = (CreditNote) cap.getEntityList().get(0);
                                String jID = creditNote.getJournalEntry() != null ? creditNote.getJournalEntry().getID() : "";
                                KwlReturnObject custumObjresult = null;
                                if (!StringUtil.isNullOrEmpty(jID)) {
                                    try {
                                        custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jID);
                                    } catch (Exception e) {
                                    }
                                    accCustomData = (AccJECustomData) custumObjresult.getEntityList().get(0);
                                }
                                exchangeRate = 1 / (creditNote.getExternalCurrencyRate() != 0.0 ? creditNote.getExternalCurrencyRate() :1);
                                originalAmount = creditNote.getCnamount();
                                amountDue = (tempJobj.optDouble("amountDue",0.0) != 0.0 ) ? tempJobj.optDouble("amountDue",0.0) : creditNote.getCnamountdue();
                                amountDueinBase = authHandler.round(amountDue * exchangeRate,companyid);
//                                String customerCurrencyId = creditNote.getCustomer().getCurrency().getCurrencyID();
                                String customerCurrencyId = "";
                                if(creditNote.getCustomer() != null){
                                    customerCurrencyId = creditNote.getCustomer().getCurrency().getCurrencyID();
                                } else if(creditNote.getVendor() != null){
                                    customerCurrencyId = creditNote.getVendor().getCurrency().getCurrencyID();
                                }
                                String baseCurrencyId = currency.getCurrencyID();
                                Map requestParams = new HashMap();
                                requestParams.put("companyid",companyid);
                                requestParams.put("gcurrencyid",baseCurrencyId);
                                Date applyDate = null;
                                applyDate = creditNote.getCreationDate();
//                                if (creditNote.isIsOpeningBalenceCN()) {
//                                    applyDate = creditNote.getCreationDate();
//                                } else {
//                                    applyDate = creditNote.getJournalEntry() != null ?creditNote.getJournalEntry().getEntryDate(): creditNote.getCreationDate();
//                                }
                                //If customer currency and transaction currency is same then no need of currency conversion
                                if(creditNote.getCurrency().getCurrencyID().equals(customerCurrencyId)){
                                    custCurrBaseAmount = custCurrBaseAmount - tempJobj.optDouble("creditAmount", 0);
                                } else{
                                    KwlReturnObject custbAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, tempJobj.optDouble("debitAmountInBase", 0), customerCurrencyId, applyDate, 0);
                                    custCurrBaseAmount = custCurrBaseAmount - Double.parseDouble(custbAmt.getEntityList().get(0).toString());
                                }
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOACustVendCurrBalanceAmountInBase, custCurrBaseAmount);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAOriginalAmount, originalAmount);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOABanalanceAmount, amountDueinBase); // Transactional Balance Amount in Base currency
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAAmountDue, amountDue); //Amount Due
                                tempJobj.put(CustomDesignerConstants.LINEEXCHANGERATE, exchangeRate);//Exchange Rate
                                tempJobj.put(CustomDesignerConstants.SUPPLIER_INVOICE_NO, "");
                                // Add currency id to json object
                                tempJobj.put(Constants.currencyKey, creditNote.getCurrency().getCurrencyID());
                                tempJobj.put(CustomDesignerConstants.BILLING_ADDRESS, creditNote.getBillingShippingAddresses() != null ? creditNote.getBillingShippingAddresses().getBillingAddressType() : Constants.NONE);
                                tempJobj.put(CustomDesignerConstants.SHIPPING_ADDRESS, creditNote.getBillingShippingAddresses() != null ? creditNote.getBillingShippingAddresses().getShippingAddressType() : Constants.NONE);
                                // Add currency id to currencycount set
                                currencyCount.add(creditNote.getCurrency().getCurrencyID());
                            } else if (type.equalsIgnoreCase("Payment Received")) {
                                moduleid = Constants.Acc_Receive_Payment_ModuleId;
                                objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), id);
                                Receipt receipt = (Receipt) objItr.getEntityList().get(0);
                                String jID = receipt != null ? receipt.getJournalEntry() != null ? receipt.getJournalEntry().getID() : "" : "";
                                KwlReturnObject custumObjresult = null;
                                if (!StringUtil.isNullOrEmpty(jID)) {
                                    try {
                                        custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jID);
                                    } catch (Exception e) {
                                    }
                                    accCustomData = (AccJECustomData) custumObjresult.getEntityList().get(0);
                                }
                                exchangeRate = 1 / (receipt.getExternalCurrencyRate() != 0.0 ? receipt.getExternalCurrencyRate() :1);
                                // Calculating Amount Due of advance payment
                                if (receipt.getReceiptAdvanceDetails() != null && !receipt.getReceiptAdvanceDetails().isEmpty()) {
                                    for (ReceiptAdvanceDetail advanceDetail : receipt.getReceiptAdvanceDetails()) {
                                        amountDue += advanceDetail.getAmountDue();
                                        amountDueinBase += amountDue*exchangeRate;
                                    }
                                }
                                originalAmount = receipt.getDepositAmount();
                                chequeNo = ((receipt.getPayDetail() == null || receipt.getPayDetail().getCheque() == null) ? "" : receipt.getPayDetail().getCheque().getChequeNo());
                                String baseCurrencyId = currency.getCurrencyID();
                                String customerCurrencyId = receipt.getCustomer() != null ?receipt.getCustomer().getCurrency().getCurrencyID(): "";
                                Map requestParams = new HashMap();
                                requestParams.put("companyid",companyid);
                                requestParams.put("gcurrencyid",baseCurrencyId);
                                Date applyDate = null;
                                applyDate = receipt.getCreationDate();
//                                if (receipt.isIsOpeningBalenceReceipt()) {
//                                    applyDate = receipt.getCreationDate();
//                                } else {
//                                    applyDate = receipt.getJournalEntry() != null ?receipt.getJournalEntry().getEntryDate(): receipt.getCreationDate();
//                                }
                                //If customer currency and transaction currency is same then no need of currency conversion
                                if(receipt.getCurrency().getCurrencyID().equals(customerCurrencyId)){
                                    custCurrBaseAmount = custCurrBaseAmount - tempJobj.optDouble("creditAmount", 0);
                                } else{
                                    KwlReturnObject custbAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, tempJobj.optDouble("debitAmountInBase", 0), customerCurrencyId, applyDate, 0);
                                    custCurrBaseAmount = custCurrBaseAmount - Double.parseDouble(custbAmt.getEntityList().get(0).toString());
                                }
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOACustVendCurrBalanceAmountInBase, custCurrBaseAmount);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAOriginalAmount, originalAmount);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAOchequeNo, chequeNo);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOABanalanceAmount, amountDueinBase);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAAmountDue, amountDue); //Amount Due
                                tempJobj.put(CustomDesignerConstants.LINEEXCHANGERATE, exchangeRate);//Exchange Rate
                                tempJobj.put(CustomDesignerConstants.SUPPLIER_INVOICE_NO, "");
                                // Add currency id to json object
                                tempJobj.put(Constants.currencyKey, receipt.getCurrency().getCurrencyID());
                                
                                String billAddrType = "";
                                String shipAddrType = "";

                                boolean isAddressPresent = false;
                                if(invoiceAmountDueFilter){
                                    Set<ReceiptDetail> receiptDetail = receipt.getRows();
                                    for(ReceiptDetail rd : receiptDetail){
                                        if(rd.getInvoice() != null && !rd.getInvoice().isIsOpeningBalenceInvoice()){
                                            BillingShippingAddresses bsadd = rd.getInvoice().getBillingShippingAddresses();
                                            tempJobj.put(CustomDesignerConstants.BILLING_ADDRESS, bsadd != null ? bsadd.getBillingAddressType() : Constants.NONE);
                                            tempJobj.put(CustomDesignerConstants.SHIPPING_ADDRESS, bsadd != null ? bsadd.getShippingAddressType() : Constants.NONE);
                                            isAddressPresent = true;
                                            break;
                                        } else if(rd.getGoodsReceipt() != null && !rd.getGoodsReceipt().isIsOpeningBalenceInvoice()){
                                            BillingShippingAddresses bsadd = rd.getGoodsReceipt().getBillingShippingAddresses();
                                            tempJobj.put(CustomDesignerConstants.BILLING_ADDRESS, bsadd != null ? bsadd.getBillingAddressType() : Constants.NONE);
                                            tempJobj.put(CustomDesignerConstants.SHIPPING_ADDRESS, bsadd != null ? bsadd.getShippingAddressType() : Constants.NONE);
                                            isAddressPresent = true;
                                            break;
                                        }
                                    }
                                    if(!isAddressPresent){
                                        Set<DebitNotePaymentDetails> dnpDetail = receipt.getDebitNotePaymentDetails();
                                        for(DebitNotePaymentDetails pd : dnpDetail){
                                            if(pd.getDebitnote() != null && !pd.getDebitnote().isIsOpeningBalenceDN()){
                                                BillingShippingAddresses bsadd = pd.getDebitnote().getBillingShippingAddresses();
                                                tempJobj.put(CustomDesignerConstants.BILLING_ADDRESS, bsadd != null ? bsadd.getBillingAddressType() : Constants.NONE);
                                                tempJobj.put(CustomDesignerConstants.SHIPPING_ADDRESS, bsadd != null ? bsadd.getShippingAddressType() : Constants.NONE);
                                                isAddressPresent = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                                if(!isAddressPresent){
                                    if(receipt.getCustomer() != null){
                                        HashMap<String, Object> addressParams = new HashMap<>();
                                        addressParams.put("companyid", companyid);
                                        addressParams.put("customerid", receipt.getCustomer().getID());
                                        addressParams.put("isDefaultAddress", true);
                                        KwlReturnObject returnObject = accountingHandlerDAOobj.getCustomerAddressDetails(addressParams);
                                        List<CustomerAddressDetails> addressList = returnObject.getEntityList();

                                        for(CustomerAddressDetails cad : addressList){
                                            if (cad != null) {
                                                if (cad.isIsBillingAddress()) {
                                                    billAddrType = cad.getAliasName();
                                                } else {
                                                    shipAddrType = cad.getAliasName();
                                                }
                                            }
                                        }
                                    } else if(!StringUtil.isNullOrEmpty(receipt.getVendor())){
                                        HashMap<String, Object> addressParams = new HashMap<>();
                                        addressParams.put("companyid", companyid);
                                        addressParams.put("vendorid", receipt.getVendor());
                                        addressParams.put("isDefaultAddress", true);
                                        KwlReturnObject returnObject = accountingHandlerDAOobj.getVendorAddressDetails(addressParams);
                                        List<VendorAddressDetails> addressList = returnObject.getEntityList();

                                        for(VendorAddressDetails vad : addressList){
                                            if (vad != null) {
                                                if (vad.isIsBillingAddress()) {
                                                    billAddrType = vad.getAliasName();
                                                } else {
                                                    shipAddrType = vad.getAliasName();
                                                }
                                            }
                                        }
                                    }
                                    tempJobj.put(CustomDesignerConstants.BILLING_ADDRESS, !StringUtil.isNullOrEmpty(billAddrType) ? billAddrType : Constants.NONE);
                                    tempJobj.put(CustomDesignerConstants.SHIPPING_ADDRESS, !StringUtil.isNullOrEmpty(shipAddrType) ? shipAddrType : Constants.NONE);
                                }
                                // Add currency id to currencycount set
                                currencyCount.add(receipt.getCurrency().getCurrencyID());
                            } else if (type.equalsIgnoreCase("Purchase Invoice")) {
                                objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), id);
                                GoodsReceipt goodsReceipt = (GoodsReceipt) objItr.getEntityList().get(0);
                                String jID = goodsReceipt.getJournalEntry() != null ? goodsReceipt.getJournalEntry().getID() : "";
                                KwlReturnObject custumObjresult = null;
                                if (!StringUtil.isNullOrEmpty(jID)) {
                                    try {
                                        custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jID);
                                    } catch (Exception e) {
                                    }
                                    accCustomData = (AccJECustomData) custumObjresult.getEntityList().get(0);
                                }
                                exchangeRate = 1 / (goodsReceipt.getExternalCurrencyRate() != 0.0 ? goodsReceipt.getExternalCurrencyRate() :1);
                                invoiceamount = goodsReceipt.getInvoiceAmountInBase();
                                invoiceamountinBase = goodsReceipt.getInvoiceAmountInBase();
                                amountDue = (tempJobj.optDouble("amountDue",0.0) != 0.0 ) ? tempJobj.optDouble("amountDue",0.0) : goodsReceipt.getInvoiceamountdue();
                                amountDueinBase = authHandler.round(amountDue * exchangeRate,companyid);
                                originalAmount = invoiceamount;
                                totalInvoiceAmount += invoiceamountinBase;
                                partialpayment = invoiceamount - amountDueinBase;
                                debitAmount = partialpayment;
                                debitAmountinbase = invoiceamountinBase - amountDueinBase;
                                 if (goodsReceipt.isIsOpeningBalenceInvoice()) {
                                    amountDueinBase = goodsReceipt.getOpeningBalanceBaseAmountDue();
                                    amountDue = goodsReceipt.getOpeningBalanceAmountDue();
                                }
                                String customerCurrencyId = goodsReceipt.getVendor().getCurrency().getCurrencyID();
                                String baseCurrencyId = currency.getCurrencyID();
                                Map requestParams = new HashMap();
                                requestParams.put("companyid",companyid);
                                requestParams.put("gcurrencyid",baseCurrencyId);
                                Date applyDate = null;
                                applyDate = goodsReceipt.getCreationDate();
//                                if (goodsReceipt.isIsOpeningBalenceInvoice()) {
//                                    applyDate = goodsReceipt.getCreationDate();
//                                } else {
//                                    applyDate = goodsReceipt.getJournalEntry() != null ?goodsReceipt.getJournalEntry().getEntryDate(): goodsReceipt.getCreationDate();
//                                }
                                //If customer currency and transaction currency is same then no need of currency conversion
                                if(goodsReceipt.getCurrency().getCurrencyID().equals(customerCurrencyId)){
                                    custCurrBaseAmount = custCurrBaseAmount - tempJobj.optDouble("creditAmount", 0);
                                } else{
                                    KwlReturnObject custbAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, tempJobj.optDouble("debitAmountInBase", 0), customerCurrencyId, applyDate, 0);
                                    custCurrBaseAmount = custCurrBaseAmount - Double.parseDouble(custbAmt.getEntityList().get(0).toString());
                                }
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOACustVendCurrBalanceAmountInBase, custCurrBaseAmount);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOADueDate, df.format(goodsReceipt.getDueDate()));
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAPartialPayment, partialpayment);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAOriginalAmount, originalAmount);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOABanalanceAmount, amountDueinBase);// Transactional Balance Amount in Base currency
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAAmountDue, amountDue); //Amount Due
                                tempJobj.put(CustomDesignerConstants.LINEEXCHANGERATE, exchangeRate);//Exchange Rate
                                if (templatesubtype == 1) {//in case of invoice type template
                                    totalDebitAmountInBase += debitAmountinbase;//Total Debit Amount
                                    tempJobj.put(CustomDesignerConstants.CustomDesignSOADebitAmount, debitAmount);//Debit Amount
                                    tempJobj.put(CustomDesignerConstants.CustomDesignSOADebitAmountInBase, debitAmountinbase);//Debit Amount in Base currency
                                }
                                tempJobj.put(CustomDesignerConstants.SUPPLIER_INVOICE_NO, goodsReceipt.getSupplierInvoiceNo());
                                // Add currency id to json object
                                tempJobj.put(Constants.currencyKey, goodsReceipt.getCurrency().getCurrencyID());
                                tempJobj.put(CustomDesignerConstants.BILLING_ADDRESS, goodsReceipt.getBillingShippingAddresses() != null ? goodsReceipt.getBillingShippingAddresses().getBillingAddressType() : Constants.NONE);
                                tempJobj.put(CustomDesignerConstants.SHIPPING_ADDRESS, goodsReceipt.getBillingShippingAddresses() != null ? goodsReceipt.getBillingShippingAddresses().getShippingAddressType() : Constants.NONE);
                                // Add currency id to currencycount set
                                currencyCount.add(goodsReceipt.getCurrency().getCurrencyID());
                            } else if (type.equalsIgnoreCase("Payment Made")) {
                                objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), id);
                                Payment receipt = (Payment) objItr.getEntityList().get(0);
                                String jID = receipt != null && receipt.getJournalEntry() != null ? receipt.getJournalEntry().getID() : "";
                                KwlReturnObject custumObjresult = null;
                                if (!StringUtil.isNullOrEmpty(jID)) {
                                    try {
                                        custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jID);
                                    } catch (Exception e) {
                                    }
                                    accCustomData = (AccJECustomData) custumObjresult.getEntityList().get(0);
                                }
                                exchangeRate = 1 / (receipt.getExternalCurrencyRate() != 0.0 ? receipt.getExternalCurrencyRate() :1);
                                // Calculating Amount Due of advance payment
                                if (receipt.getAdvanceDetails() != null && !receipt.getAdvanceDetails().isEmpty()) {
                                    for (AdvanceDetail advanceDetail : receipt.getAdvanceDetails()) {
                                        amountDue += advanceDetail.getAmountDue();
                                        amountDueinBase += amountDue*exchangeRate;
                                    }
                                }
                                originalAmount = receipt != null ? receipt.getDepositAmount() : 0.0;
                                chequeNo = ((receipt.getPayDetail() == null || receipt.getPayDetail().getCheque() == null) ? "" : receipt.getPayDetail().getCheque().getChequeNo());
                                String baseCurrencyId = currency.getCurrencyID();
                                String customerCurrencyId = receipt.getVendor() != null ? receipt.getVendor().getCurrency().getCurrencyID():"";
                                Map requestParams = new HashMap();
                                requestParams.put("companyid",companyid);
                                requestParams.put("gcurrencyid",baseCurrencyId);
                                Date applyDate = null;
                                applyDate = receipt.getCreationDate();
//                                if (receipt.isIsOpeningBalencePayment()) {
//                                    applyDate = receipt.getCreationDate();
//                                } else {
//                                    applyDate = receipt.getJournalEntry() != null ?receipt.getJournalEntry().getEntryDate(): receipt.getCreationDate();
//                                }
                                //If customer currency and transaction currency is same then no need of currency conversion
                                if(receipt.getCurrency().getCurrencyID().equals(customerCurrencyId)){
                                    custCurrBaseAmount = custCurrBaseAmount + tempJobj.optDouble("debitAmount", 0);
                                } else{
                                    KwlReturnObject custbAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, tempJobj.optDouble("debitAmountInBase", 0), customerCurrencyId, applyDate, 0);
                                    custCurrBaseAmount = custCurrBaseAmount + Double.parseDouble(custbAmt.getEntityList().get(0).toString());
                                }
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOACustVendCurrBalanceAmountInBase, custCurrBaseAmount);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAOriginalAmount, originalAmount);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAOchequeNo, chequeNo);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOABanalanceAmount, amountDueinBase); // Transactional Balance Amount in Base currency
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAAmountDue, amountDue); //Amount Due
                                tempJobj.put(CustomDesignerConstants.LINEEXCHANGERATE, exchangeRate);
                                tempJobj.put(CustomDesignerConstants.SUPPLIER_INVOICE_NO, "");
                                // Add currency id to json object
                                tempJobj.put(Constants.currencyKey, receipt.getCurrency().getCurrencyID());
                                
                                String billAddrType = "";
                                String shipAddrType = "";

                                boolean isAddressPresent = false;
                                if(invoiceAmountDueFilter){
                                    Set<PaymentDetail> paymentDetail = receipt.getRows();
                                    for(PaymentDetail pd : paymentDetail){
                                        if(pd.getInvoice() != null && !pd.getInvoice().isIsOpeningBalenceInvoice()){
                                            BillingShippingAddresses bsadd = pd.getInvoice().getBillingShippingAddresses();
                                            tempJobj.put(CustomDesignerConstants.BILLING_ADDRESS, bsadd != null ? bsadd.getBillingAddressType() : Constants.NONE);
                                            tempJobj.put(CustomDesignerConstants.SHIPPING_ADDRESS, bsadd != null ? bsadd.getShippingAddressType() : Constants.NONE);
                                            isAddressPresent = true;
                                            break;
                                        } else if(pd.getGoodsReceipt() != null && !pd.getGoodsReceipt().isIsOpeningBalenceInvoice()){
                                            BillingShippingAddresses bsadd = pd.getGoodsReceipt().getBillingShippingAddresses();
                                            tempJobj.put(CustomDesignerConstants.BILLING_ADDRESS, bsadd != null ? bsadd.getBillingAddressType() : Constants.NONE);
                                            tempJobj.put(CustomDesignerConstants.SHIPPING_ADDRESS, bsadd != null ? bsadd.getShippingAddressType() : Constants.NONE);
                                            isAddressPresent = true;
                                            break;
                                        }
                                    }
                                    if(!isAddressPresent){
                                        Set<CreditNotePaymentDetails> cnpDetail = receipt.getCreditNotePaymentDetails();
                                        for(CreditNotePaymentDetails pd : cnpDetail){
                                            if(pd.getCreditnote() != null && !pd.getCreditnote().isIsOpeningBalenceCN()){
                                                BillingShippingAddresses bsadd = pd.getCreditnote().getBillingShippingAddresses();
                                                tempJobj.put(CustomDesignerConstants.BILLING_ADDRESS, bsadd != null ? bsadd.getBillingAddressType() : Constants.NONE);
                                                tempJobj.put(CustomDesignerConstants.SHIPPING_ADDRESS, bsadd != null ? bsadd.getShippingAddressType() : Constants.NONE);
                                                isAddressPresent = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                                if(!isAddressPresent){
                                    if(!StringUtil.isNullOrEmpty(receipt.getCustomer())){
                                        HashMap<String, Object> addressParams = new HashMap<>();
                                        addressParams.put("companyid", companyid);
                                        addressParams.put("customerid", receipt.getCustomer());
                                        addressParams.put("isDefaultAddress", true);
                                        KwlReturnObject returnObject = accountingHandlerDAOobj.getCustomerAddressDetails(addressParams);
                                        List<CustomerAddressDetails> addressList = returnObject.getEntityList();

                                        for(CustomerAddressDetails cad : addressList){
                                            if (cad != null) {
                                                if (cad.isIsBillingAddress()) {
                                                    billAddrType = cad.getAliasName();
                                                } else {
                                                    shipAddrType = cad.getAliasName();
                                                }
                                            }
                                        }
                                    } else if(receipt.getVendor() != null){
                                        HashMap<String, Object> addressParams = new HashMap<>();
                                        addressParams.put("companyid", companyid);
                                        addressParams.put("vendorid", receipt.getVendor().getID());
                                        addressParams.put("isDefaultAddress", true);
                                        KwlReturnObject returnObject = accountingHandlerDAOobj.getVendorAddressDetails(addressParams);
                                        List<VendorAddressDetails> addressList = returnObject.getEntityList();

                                        for(VendorAddressDetails vad : addressList){
                                            if (vad != null) {
                                                if (vad.isIsBillingAddress()) {
                                                    billAddrType = vad.getAliasName();
                                                } else {
                                                    shipAddrType = vad.getAliasName();
                                                }
                                            }
                                        }
                                    }
                                    tempJobj.put(CustomDesignerConstants.BILLING_ADDRESS, !StringUtil.isNullOrEmpty(billAddrType) ? billAddrType : Constants.NONE);
                                    tempJobj.put(CustomDesignerConstants.SHIPPING_ADDRESS, !StringUtil.isNullOrEmpty(shipAddrType) ? shipAddrType : Constants.NONE);
                                }
                                // Add currency id to currencycount set
                                currencyCount.add(receipt.getCurrency().getCurrencyID());
                            } else if (type.equalsIgnoreCase("Debit Note")) {
                                KwlReturnObject cap = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), id);
                                DebitNote debitNote = (DebitNote) cap.getEntityList().get(0);
                                String jID = debitNote.getJournalEntry() != null ? debitNote.getJournalEntry().getID() : "";
                                KwlReturnObject custumObjresult = null;
                                if (!StringUtil.isNullOrEmpty(jID)) {
                                    try {
                                        custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jID);
                                    } catch (Exception e) {
                                    }
                                    accCustomData = (AccJECustomData) custumObjresult.getEntityList().get(0);
                                }
                                exchangeRate = 1 / (debitNote.getExternalCurrencyRate() != 0.0 ? debitNote.getExternalCurrencyRate() :1);
                                originalAmount = debitNote.getDnamount();
                                amountDue = (tempJobj.optDouble("amountDue",0.0) != 0.0 ) ? tempJobj.optDouble("amountDue",0.0) : debitNote.getDnamountdue();
                                amountDueinBase = authHandler.round(amountDue * exchangeRate,companyid);
                                String customerCurrencyId = "";
                                if(debitNote.getVendor() != null){
                                    customerCurrencyId = debitNote.getVendor().getCurrency().getCurrencyID();
                                } else if(debitNote.getCustomer() != null){
                                    customerCurrencyId = debitNote.getCustomer().getCurrency().getCurrencyID();
                                }
                                String baseCurrencyId = currency.getCurrencyID();
                                Map requestParams = new HashMap();
                                requestParams.put("companyid",companyid);
                                requestParams.put("gcurrencyid",baseCurrencyId);
                                Date applyDate = null;
                                applyDate = debitNote.getCreationDate();
//                                if (debitNote.isIsOpeningBalenceDN()) {
//                                    applyDate = debitNote.getCreationDate();
//                                } else {
//                                    applyDate = debitNote.getJournalEntry() != null ?debitNote.getJournalEntry().getEntryDate(): debitNote.getCreationDate();
//                                }
                                 //If customer currency and transaction currency is same then no need of currency conversion
                                if(debitNote.getCurrency().getCurrencyID().equals(customerCurrencyId)){
                                    custCurrBaseAmount = custCurrBaseAmount + tempJobj.optDouble("debitAmount", 0);
                                } else{
                                    KwlReturnObject custbAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, tempJobj.optDouble("debitAmountInBase", 0), customerCurrencyId, applyDate, 0);
                                    custCurrBaseAmount = custCurrBaseAmount + Double.parseDouble(custbAmt.getEntityList().get(0).toString());
                                }
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOACustVendCurrBalanceAmountInBase, custCurrBaseAmount);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAOriginalAmount, originalAmount);
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOABanalanceAmount, amountDueinBase); // Transactional Balance Amount in Base currency
                                tempJobj.put(CustomDesignerConstants.CustomDesignSOAAmountDue, amountDue); //Amount Due
                                tempJobj.put(CustomDesignerConstants.LINEEXCHANGERATE, exchangeRate);//Exchange Rate
                                tempJobj.put(CustomDesignerConstants.SUPPLIER_INVOICE_NO, "");
                                // Add currency id to json object
                                tempJobj.put(Constants.currencyKey, debitNote.getCurrency().getCurrencyID());
                                tempJobj.put(CustomDesignerConstants.BILLING_ADDRESS, debitNote.getBillingShippingAddresses() != null ? debitNote.getBillingShippingAddresses().getBillingAddressType() : Constants.NONE);
                                tempJobj.put(CustomDesignerConstants.SHIPPING_ADDRESS, debitNote.getBillingShippingAddresses() != null ? debitNote.getBillingShippingAddresses().getShippingAddressType() : Constants.NONE);
                                // Add currency id to currencycount set
                                currencyCount.add(debitNote.getCurrency().getCurrencyID());
                            }

                            HashMap<String, Object> CustomRequestParams = new HashMap<String, Object>();
                            HashMap<String, Object> requestParams = new HashMap<String, Object>();
                            requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                            requestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid));
                            KwlReturnObject result = accAccountDAOobj.getFieldParams(requestParams);
                            List lst = result.getEntityList();
                            Iterator ite = lst.iterator();
                            DateFormat defaultDateFormat = new SimpleDateFormat(Constants.MMMMdyyyy);
                            Date dateFromDB = null;
                            while (ite.hasNext()) {
                                String field = "", data = "";
                                FieldParams tmpcontyp = (FieldParams) ite.next();
                                field = tmpcontyp.getFieldlabel();
                                if (accCustomData != null) {
                                    String coldata = accCustomData.getCol(tmpcontyp.getColnum());
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        int fieldType = tmpcontyp.getFieldtype();
                                        switch (fieldType) {
                                            case 3:
                                                if (df != null) {
                                                    try {
                                                        dateFromDB = defaultDateFormat.parse(coldata);
                                                        data = df.format(dateFromDB);
                                                    } catch (ParseException p) {
                                                        data = coldata;
                                                    }
                                                    //If User date format is provided, date is formated in that format
                                                } else {
                                                    data = coldata;
                                                    //If User date format is not provided, date is passed as it is
                                                }

                                                break;
                                            case 4:
                                                CustomRequestParams.clear();
                                                CustomRequestParams.put(Constants.filter_names, Arrays.asList(FieldConstants.Crm_id, FieldConstants.Crm_deleteflag));
                                                CustomRequestParams.put(Constants.filter_values, Arrays.asList(coldata, 0));
                                                KwlReturnObject customresult = accAccountDAOobj.getCustomCombodata(CustomRequestParams);
                                                if (customresult != null) {
                                                    List customDataList = customresult.getEntityList();
                                                    Iterator cite = customDataList.iterator();
                                                    while (cite.hasNext()) {
                                                        Object[] row = (Object[]) cite.next();
                                                        FieldComboData combodata = (FieldComboData) row[0];
                                                        data = combodata.getValue();
                                                    }
                                                }
                                                break;
                                            case 7: //Multiple select drop down
                                                String[] valueData = coldata.split(",");
                                                for (String value : valueData) {
                                                    CustomRequestParams.clear();
                                                    CustomRequestParams.put(Constants.filter_names, Arrays.asList(FieldConstants.Crm_id, FieldConstants.Crm_deleteflag));
                                                    CustomRequestParams.put(Constants.filter_values, Arrays.asList(value, 0));
                                                    KwlReturnObject customresult1 = accAccountDAOobj.getCustomCombodata(CustomRequestParams);
                                                    if (customresult1 != null) {
                                                        List customDataList = customresult1.getEntityList();
                                                        Iterator cite = customDataList.iterator();
                                                        while (cite.hasNext()) {
                                                            Object[] row = (Object[]) cite.next();
                                                            FieldComboData combodata = (FieldComboData) row[0];
                                                            data += combodata.getValue() + ",";
                                                        }
                                                    }
                                                }
                                                data = data.substring(0, data.length() - 1);
                                                break;
                                            case 12:
                                                String fieldid = tmpcontyp.getId();
                                                HashMap<String, Object> checkListRequestParams = new HashMap<String, Object>();
                                                String Colsplit[] = coldata.split(",");
                                                for (int i = 0; i < Colsplit.length; i++) {
                                                    coldata = Colsplit[i];
                                                    checkListRequestParams.put(Constants.filter_names, Arrays.asList(FieldConstants.Crm_id, FieldConstants.Crm_deleteflag));
                                                    checkListRequestParams.put(Constants.filter_values, Arrays.asList(coldata, 0));
                                                    ArrayList order_by = new ArrayList();
                                                    ArrayList order_type = new ArrayList();
                                                    order_by.add("itemsequence");
                                                    order_type.add("asc");
                                                    checkListRequestParams.put("order_by", order_by);
                                                    checkListRequestParams.put("order_type", order_type);
                                                    KwlReturnObject checkListresult = accAccountDAOobj.getCustomCombodata(checkListRequestParams);
                                                    List checklst = checkListresult.getEntityList();
                                                    Iterator checkite = checklst.iterator();
                                                    while (checkite.hasNext()) {
                                                        Object[] row = (Object[]) checkite.next();
                                                        FieldComboData checkfield = (FieldComboData) row[0];
                                                        data += checkfield.getValue() + ",";
                                                    }
                                                }
                                                data = data.substring(0, data.length() - 1);
                                                break;
                                            case 13:
                                                data = coldata.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");
                                                break;
                                            default:
                                                data = coldata;
                                                break;
                                        }
                                    } else {
                                        data = "";
                                    }
                                    tempJobj.put("Custom_" + field.trim(), data);
                                }

                            }
                            if ((templatesubtype == 0 || templatesubtype == 2) || (templatesubtype == 1 && (type.equalsIgnoreCase("Sales Invoice") || type.equalsIgnoreCase("Purchase Invoice")))) { // If template is for SOA then put all otherwise is for SOI then put only Sales and Purchase Invoice data
                                tempArray.put(tempJobj);
                            }
                        } else {
                            if (!StringUtil.isNullOrEmpty(tempJobj.getString("creditAmount"))) {
                                accuredBallance = Double.parseDouble(tempJobj.getString("creditAmount")) * -1;
                            } else if (!StringUtil.isNullOrEmpty(tempJobj.getString("debitAmount"))){
                                accuredBallance = Double.parseDouble(tempJobj.getString("debitAmount"));
                            } 
                            
                            if (!StringUtil.isNullOrEmpty(tempJobj.getString("creditAmountInBase"))) {
                                accuredBallanceInBase = Double.parseDouble(tempJobj.getString("creditAmountInBase")) * -1;
                            } else if (!StringUtil.isNullOrEmpty(tempJobj.getString("debitAmountInBase"))) {
                                accuredBallanceInBase = Double.parseDouble(tempJobj.getString("debitAmountInBase"));
                            }
                            //If only accrued balance available then put it in total amount otherwise it will be calculated automatically
                            if(jarr.length() == 1){
                                totalAmount = accuredBallanceInBase;
                            }
                            
                        }
                    }
                }

//                if (tempArray.length() != 0) { // Check for empty array
                    JSONObject summaryDataJobj = new JSONObject();
                    String amountinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(authHandler.formattedAmount(totalAmount, companyid))), currency, countryLanguageId);
                    summaryDataJobj.put("summarydata", true);
                    summaryDataJobj.put(CustomDesignerConstants.CustomDesignTotalAmount_fieldTypeId, totalAmount); 
                    summaryDataJobj.put(CustomDesignerConstants.CustomDesignAmountinwords_fieldTypeId, amountinword); 
                    summaryDataJobj.put(CustomDesignerConstants.CustomDesignSOATotalCreditAmountInBase, totalCreditAmountInBase);
                    summaryDataJobj.put(CustomDesignerConstants.CustomDesignSOATotalDebitAmountInBase, totalDebitAmountInBase);
                    summaryDataJobj.put(CustomDesignerConstants.CustomDesignSOAAccruedBalance, accuredBallance);
                    summaryDataJobj.put(CustomDesignerConstants.CustomDesignSOAAccruedBalanceInBase, accuredBallanceInBase);
                    summaryDataJobj.put(CustomDesignerConstants.CustomDesignSOATotalInvoiceOriginalAmount, totalInvoiceAmount); // Total Invoice Amount
                    tempArray.put(summaryDataJobj);
//                }

                    // If template subtype is 2 (Subtype 2 is for transaction currency type) then split json on transaction currency basis
                    if(templatesubtype == 2){
                        if(currencyCount.isEmpty()){
                            currencyCount.add(currency.getCurrencyID());
                            retobj = splitSOADetailsWithTransactionCurrencyJson(accIdFromSet, tempArray, currencyCount);
                        } else{
                            retobj = splitSOADetailsWithTransactionCurrencyJson(accIdFromSet, tempArray, currencyCount);
                        }
                    } else{
                        retobj.put(accIdFromSet, tempArray);
                    }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return retobj;
    }
    /**
     * Split SOA Details on the basis of Transaction Currency
     * @param accId
     * @param jArr
     * @param currencyCount
     * @return 
     */
    public LinkedHashMap<String, JSONArray> splitSOADetailsWithTransactionCurrencyJson(String accId, JSONArray jArr, Set<String> currencyCount){
        LinkedHashMap<String, JSONArray> returnJobj = new LinkedHashMap<String, JSONArray>();
        try {
            // Iterate currencies from currencyCount set
            Iterator ite = currencyCount.iterator();
            int ind = 1;
            while(ite.hasNext()){
                // Get currency details
                String currencyId = (String) ite.next();
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyId);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                String currencyName = currency.getName();
                String currencyCode = currency.getCurrencyCode();
                String currencySymbol = currency.getSymbol();
                
                JSONArray tempJarr = new JSONArray();
                int srNo = 1;
                double totalAmount = 0.0, balanceAmount = 0.0, totalDebitAmount = 0.0, totalCreditAmount = 0.0;
                // Iterate json of SOA details
                for(int cnt = 0; cnt < jArr.length(); cnt++){
                    JSONObject jobj = jArr.optJSONObject(cnt);
                    if(!jobj.optBoolean("summarydata", false)){// If not contains summarydata
                        if(jobj.optString(Constants.currencyKey, "").equals(currencyId)){
                            // Calculate amount fields for global and line level
                            balanceAmount = balanceAmount + jobj.optDouble(CustomDesignerConstants.CustomDesignSOADebitAmount, 0.0) - jobj.optDouble(CustomDesignerConstants.CustomDesignSOACreditAmount, 0.0);
                            totalDebitAmount = totalDebitAmount + jobj.optDouble(CustomDesignerConstants.CustomDesignSOADebitAmount, 0.0);
                            totalCreditAmount = totalCreditAmount + jobj.optDouble(CustomDesignerConstants.CustomDesignSOACreditAmount, 0.0);
                            totalAmount = totalAmount + jobj.optDouble(CustomDesignerConstants.CustomDesignSOADebitAmountInBase, 0.0) - jobj.optDouble(CustomDesignerConstants.CustomDesignSOACreditAmountInBase, 0.0);
                            // Update line level fields for SOA
                            jobj.put(CustomDesignerConstants.SrNO, srNo);
                            jobj.put(CustomDesignerConstants.CustomDesignSOABalanceAmount, balanceAmount);
                            jobj.put(CustomDesignerConstants.CustomDesignSOABalanceAmountInBase, totalAmount);
                            tempJarr.put(jobj);
                            srNo++;
                        }
                    } else{// If contains summarydata
                        //Update global fields for SOA
                        jobj.put(CustomDesignerConstants.CustomDesignSOATotalDebitAmountInBase, totalDebitAmount);
                        jobj.put(CustomDesignerConstants.CustomDesignSOATotalCreditAmountInBase, totalCreditAmount);
                        jobj.put(CustomDesignerConstants.CustomDesignTotalAmount_fieldTypeId, balanceAmount);
                        //Update global fields for Customer SOA
                        jobj.put(CustomDesignerConstants.CustomDesignSOACustomerCurrency, currencyName);
                        jobj.put(CustomDesignerConstants.CustomDesignSOACustomerCurrencySymbol, currencySymbol);
                        jobj.put(CustomDesignerConstants.CustomDesignSOACustomerCurrencyCode, currencyCode);
                        //Update global fields for Vendor SOA
                        jobj.put(CustomDesignerConstants.CustomDesignSOAVendorCurrency, currencyName);
                        jobj.put(CustomDesignerConstants.CustomDesignSOAVendorCurrencySymbol, currencySymbol);
                        jobj.put(CustomDesignerConstants.CustomDesignSOAVendorCurrencyCode, currencyCode);
                        //Put currency id in json object
                        jobj.put(Constants.currencyKey, currencyId);
                        tempJarr.put(jobj);
                    }
                }
                // If json array contains json object then put it in return object
                if(tempJarr.length() > 0){
                    String arrStr = tempJarr.toString();
                    returnJobj.put(accId + "_" + ind, new JSONArray(arrStr));
                    ind ++;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return returnJobj;
    }
    
    public ModelAndView getCustomerLedger(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        int count = 0;
        try {
            int reportid = !StringUtil.isNullOrEmpty(request.getParameter("reportid")) ? Integer.parseInt(request.getParameter("reportid")) : -1;
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter(Constants.limit);
            if(reportid==Constants.SOA_CUSTOMER_ACCOUNT_STATEMENT_REPORTID){
                jobj = getCustomerAccountStatement(request,false);
            }else{
                jobj = getCustomerLedger(request,false);
            }
            
            JSONArray jArr = jobj.getJSONArray(Constants.RES_data);
            JSONArray pagedJson = jArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            jobj.put(Constants.RES_data, pagedJson);
            /*
            jArr.length is used for paging count this function depedency handled in customer 
            statement of account,its export and print records
            */
            count = jArr.length();
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_count, count);
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public JSONObject getCustomerLedger(HttpServletRequest request, boolean isExport) throws ServiceException, SessionExpiredException, UnsupportedEncodingException {
        JSONObject jobj = new JSONObject();
        try {
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter(Constants.limit);            
            JSONArray jArr = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            boolean invoiceAmountDueFilter = true;
            if (request.getParameter("invoiceAmountDueFilter") != null) {
                invoiceAmountDueFilter = Boolean.parseBoolean(request.getParameter("invoiceAmountDueFilter"));
            }
            boolean isPostDatedCheque = false;
            if (request.getParameter("isPostDatedCheque") != null) {
                isPostDatedCheque = Boolean.parseBoolean(request.getParameter("isPostDatedCheque"));
            }
            boolean isSortedOnCreationDate = false;
            if (request.getParameter("isSortedOnCreationDate") != null) {
                isSortedOnCreationDate = Boolean.parseBoolean(request.getParameter("isSortedOnCreationDate"));
            }
            DateFormat df = authHandler.getDateOnlyFormat();
            Date startDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) {
                startDate = df.parse(request.getParameter("stdate"));//ERP-32676 - date parse exception
            } else {
                boolean isAged = request.getParameter("isAged") != null ? Boolean.parseBoolean(request.getParameter("isAged")) : false;
                if (isAged) {
                    startDate = df.parse(Constants.opening_Date);
            }
            }
            Date endDate = null;
            if(!StringUtil.isNullOrEmpty(request.getParameter("enddate"))) {
                endDate = df.parse(request.getParameter("enddate"));//ERP-32676 - date parse exception
            }
            Date asofDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("asofdate"))) {
                asofDate = df.parse(request.getParameter("asofdate"));//ERP-32676 - date parse exception
            }
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String customerIds = request.getParameter("customerIds");
            String withoutinventory = request.getParameter("withoutinventory");
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("customerIds", customerIds);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put("startDate", new Date(0));// As we needed opening+period transactions hence new Date(0) as 1970 is putted instead of  startDate
            requestParams.put("endDate", endDate);
            requestParams.put("isPostDatedCheque", isPostDatedCheque);
            requestParams.put("isSortedOnCreationDate", isSortedOnCreationDate);
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
            }
            if (!StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            }

            boolean isAdvanceSearch = false;
            String invoiceSearchJson = "";
            String receiptSearchJson = "";
            String cnSearchJson = "";
            String dnSearchJson = "";
            String makePaymentSearchJson = "";

            if (requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Filter_Criteria) != null) {
                if (requestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                searchJson = requestParams.get(Constants.Acc_Search_Json).toString();
                if (!StringUtil.isNullOrEmpty(searchJson)) {
                    isAdvanceSearch = true;
                    requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    HashMap<String, Object> reqPar1 = new HashMap<>();
                    reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                    reqPar1.put(Constants.Acc_Search_Json, searchJson);
                    reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    invoiceSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.remove(Constants.moduleid);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    receiptSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    dnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    cnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    makePaymentSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                }
            }
            requestParams.put("invoiceSearchJson", invoiceSearchJson);
            requestParams.put("receiptSearchJson", receiptSearchJson);
            requestParams.put("cnSearchJson", cnSearchJson);
            requestParams.put("dnSearchJson", dnSearchJson);
            requestParams.put("makePaymentSearchJson", makePaymentSearchJson);
            requestParams.put("isAdvanceSearch", isAdvanceSearch);
            requestParams.put("showDishonouredPayment", true);

            KwlReturnObject customerLedger = accInvoiceDAOobj.getCustomerLedgerReport(requestParams);
            List customerLedgerList = customerLedger.getEntityList();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
            KwlReturnObject extraCompanyresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyresult.getEntityList().get(0);
            Set<String> custemerSet= new HashSet();
            Set<String> customerDueTransSet= new HashSet();
            double balanceAmtInBase = 0;
            double balanceAmount = 0;
            String prevCustomer = "";
            //params to send to get billing address
            HashMap<String, Object> addressParams = new HashMap<String, Object>();
            addressParams.put(Constants.companyKey, companyid);
            addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
            addressParams.put("isBillingAddress", true); //true to get billing address
            
//            jobj.put(Constants.RES_count,customerLedgerList.size()); //total count for paging purpose
            for (int i = 0; i < customerLedgerList.size(); i++) {
                Object[] tempCustomerLedger = (Object[]) customerLedgerList.get(i);
                String type = (String) tempCustomerLedger[0];
                String invoiceId = (String) tempCustomerLedger[1]; // if(type=='invoice') ==> invoice.id, if(type=='receipt') ==> receipt.id, if(type=='creditnote') ==> creditnote.id
                String invoiceNumber = (String) tempCustomerLedger[2]; // if(type=='invoice') ==> invoice.invoicenumber, if(type=='receipt') ==> receipt.receiptnumber, if(type=='creditnote') ==> creditnote.cnnumber
                String jeId = tempCustomerLedger[3] == null ? "" : (String) tempCustomerLedger[3]; // journalentry.id
                String memo = StringUtil.isNullOrEmpty((String) tempCustomerLedger[4]) ? "" : (String) tempCustomerLedger[4]; // if(type=='invoice') ==> invoice.memo, if(type=='receipt') ==> receipt.memo, if(type=='creditnote') ==> creditnote.memo
                String currencyid = StringUtil.isNullOrEmpty((String) tempCustomerLedger[5]) ? sessionHandlerImpl.getCurrencyID(request) : (String) tempCustomerLedger[5]; // if(type=='invoice') ==> invoice.currency, if(type=='receipt') ==> receipt.currency, if(type=='creditnote') ==> creditnote.currency
                double amount = (Double) tempCustomerLedger[6]; // if(type=='invoice') ==> jedetail.amount, if(type=='receipt') ==> receiptdetails.amount, if(type=='creditnote') ==> jedetail.amount
                String jeEntryNumber = tempCustomerLedger[7] == null ? "" : (String) tempCustomerLedger[7];
                Date jeEntryDate = (Date) tempCustomerLedger[8];
                double jeEntryExternalCurrencyRate = (Double) tempCustomerLedger[9];
                String invoiceCustomerId = (String) tempCustomerLedger[10];
                String invoiceCustomerName = (String) tempCustomerLedger[11];
                String invoiceCustomerCode = (String) tempCustomerLedger[19];
                boolean isLeaseFixedAsset = Integer.parseInt(tempCustomerLedger[20].toString()) == 1;  // isLeaseFixedAsset == 1 ? true :false  //ERP-37875

                int openingtransactionFlag = Integer.parseInt(tempCustomerLedger[16].toString());
                boolean isOpeningBalanceTransaction = false;
                if (openingtransactionFlag == 1) {
                    isOpeningBalanceTransaction = true;
                }

                boolean isConversionRateFromCurrencyToBase = false;
                int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempCustomerLedger[17].toString());
                if (conversionRateFromCurrencyToBaseFlag == 1) {
                    isConversionRateFromCurrencyToBase = true;
                }

                if (!prevCustomer.equals(invoiceCustomerId)) {
                    prevCustomer = invoiceCustomerId;
                    balanceAmtInBase = 0;
                    balanceAmount = 0;
                }
                
                HashMap<String, Object> reqMap = AccountingManager.getGlobalParams(request);
                reqMap.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
                reqMap.put("startDate", startDate);
                reqMap.put("asofDate", asofDate);
                reqMap.put("invoiceCustomerId", invoiceCustomerId);
                
               if (custemerSet.add(invoiceCustomerId)) { // For each customer putting Accurred Balance detail once. 
                    JSONObject opnJSON=accReportsService.calculateCustomerAccuredBalance(customerLedgerList,reqMap);
                    balanceAmtInBase = opnJSON.getDouble("balanceAmountInBase");
                    opnJSON.put("accId", invoiceCustomerId);
                    opnJSON.put("accName", invoiceCustomerName);
                    opnJSON.put("accCode", invoiceCustomerCode);
                    opnJSON.put("categoryName", invoiceCustomerName);
                    jArr.put(opnJSON);
                }
               
                if (!accReportsService.isPeriodWiseOpeningTransaction(jeEntryDate, startDate)) {// this condition will be true for those transaction which falls in selected period. i.e below code is for Period trsactions only
                    reqMap.put("isOpeningBalanceTransaction", isOpeningBalanceTransaction);
                    reqMap.put("transactionAmount", amount);
                    reqMap.put("invoiceId", invoiceId);
                    reqMap.put("type", type);
                    amount = accReportsService.getAmountOfTransactionForCusromerSOA(reqMap);
                    if (amount <= 0) { //if amount is zero then no need to show data in SOA Report so continue with next record
                        continue;
                    }

                    if(!invoiceAmountDueFilter){
                        customerDueTransSet.add(invoiceCustomerId);
                    }
                    KWLCurrency currency = null;
                    if (!StringUtil.isNullOrEmpty(currencyid)) {
                        KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                        currency = (KWLCurrency) curresult1.getEntityList().get(0);
                    }

                    jobjTemp = new JSONObject();
                    jobjTemp.put("type", type);
                    jobjTemp.put("invoiceId", invoiceId);
                    jobjTemp.put(Constants.billid, invoiceId);
                    jobjTemp.put("noteid", invoiceId);
                    jobjTemp.put("referid", UUID.randomUUID().toString());
                    jobjTemp.put("invoiceNumber", invoiceNumber);
                    jobjTemp.put("jeId", jeId);
                    jobjTemp.put("memo", memo);
                    jobjTemp.put(Constants.currencyKey, StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getCurrencyID() : currencyid);
                    jobjTemp.put("currencysymbol", StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getSymbol() : currency.getSymbol());
                    jobjTemp.put("currencycode", StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getCurrencyCode() : currency.getCurrencyCode());
                    jobjTemp.put("jeEntryNumber", jeEntryNumber);
                    jobjTemp.put("jeEntryDate", df.format(jeEntryDate));
                    jobjTemp.put("jeEntryExternalCurrencyRate", jeEntryExternalCurrencyRate);
                    jobjTemp.put("ExternalCurrencyRate","1 "+baseCurrency.getCurrencyCode()+" = "+ ((isConversionRateFromCurrencyToBase && isOpeningBalanceTransaction) ? 1 / jeEntryExternalCurrencyRate : jeEntryExternalCurrencyRate) +" "+currency.getCurrencyCode());
                    jobjTemp.put("accId", invoiceCustomerId);
                    jobjTemp.put("accName", invoiceCustomerName);
                    jobjTemp.put("accCode", invoiceCustomerCode);
                    jobjTemp.put("isLeaseFixedAsset", isLeaseFixedAsset);
                    jobjTemp.put("categoryName", invoiceCustomerName);
                    jobjTemp.put("amountDue", invoiceAmountDueFilter ? "" : amount);
                    addressParams.put("customerid", invoiceCustomerId);
                    CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    String customerEmailId = customerAddressDetails != null ? customerAddressDetails.getEmailID() : "";
                    jobjTemp.put("billingEmail", customerEmailId);
                    KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) curresult1.getEntityList().get(0);
                    if(company!=null && company.getCountry()!=null && Integer.parseInt(company.getCountry().getID()) == Constants.indian_country_id  && extraCompanyPreferences.isTDSapplicable()){
                        KwlReturnObject amountReceiptDetailOtherwise = accInvoiceDAOobj.getAmountFromReceiptDetailOtherwise(invoiceId);
                        List AmountList = amountReceiptDetailOtherwise.getEntityList();
                        if (AmountList != null) {
                            for (int j = 0; j < AmountList.size(); j++) {
                                Object[] row = (Object[]) AmountList.get(j);
                                double rowAmount = (Double) row[0];
                                if(rowAmount>0 && row[2]!=null && (row[2].toString()).equals(IndiaComplianceConstants.TRUE_CHAR_T)){
                                    amount+=rowAmount;
                                }else{
                                    amount-=rowAmount;
                                }
                            }
                        }
                    }
                    KwlReturnObject bAmt = null;
                    if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    }
                    
                    double amountinbase = (Double) bAmt.getEntityList().get(0);
                    amountinbase = authHandler.round(amountinbase, companyid);
                    if (type.equalsIgnoreCase("Cash Sale")) {
                        jobjTemp.put("debitAmountInBase", authHandler.round(amountinbase, companyid));
                        jobjTemp.put("creditAmountInBase", "");
                        jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));
                        jobjTemp.put("debitAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("creditAmount", "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    } else if (type.equalsIgnoreCase("Customer Invoice") || type.equalsIgnoreCase("Sales Invoice")) {
                        balanceAmtInBase = balanceAmtInBase + amountinbase;
                        jobjTemp.put("debitAmountInBase", authHandler.round(amountinbase, companyid));
                        jobjTemp.put("creditAmountInBase", "");
                        jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));

                        balanceAmount = balanceAmount + amount;
                        jobjTemp.put("debitAmount", authHandler.round(amount, companyid));
                        jobjTemp.put("creditAmount", "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    } else if (type.equalsIgnoreCase("Payment Made") || type.equalsIgnoreCase(Constants.DISHONOURED_RECEIVE_PAYMENT)) {//For make payment to customer
                        balanceAmtInBase = balanceAmtInBase + amountinbase;
                        jobjTemp.put("debitAmountInBase", authHandler.round(amountinbase, companyid));
                        jobjTemp.put("creditAmountInBase", "");
                        jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));

                        balanceAmount = balanceAmount + amount;
                        jobjTemp.put("debitAmount", authHandler.round(amount, companyid));
                        jobjTemp.put("creditAmount", "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    } else if (type.equalsIgnoreCase("Debit Note")) {//For Debit note of customer
                        balanceAmtInBase = balanceAmtInBase + amountinbase;
                        jobjTemp.put("debitAmountInBase", authHandler.round(amountinbase, companyid));
                        jobjTemp.put("creditAmountInBase", "");
                        jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));

                        balanceAmount = balanceAmount + amount;
                        jobjTemp.put("debitAmount", authHandler.round(amount, companyid));
                        jobjTemp.put("creditAmount", "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    } else {  //if((type.equalsIgnoreCase("Payment Received")) || (type.equalsIgnoreCase("Credit Note")))
                        balanceAmtInBase = balanceAmtInBase - amountinbase;
                        jobjTemp.put("debitAmountInBase", "");
                        jobjTemp.put("creditAmountInBase", authHandler.round(amountinbase, companyid));
                        jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));

                        balanceAmount = balanceAmount - amount;
                        jobjTemp.put("debitAmount", "");
                        jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    }
                    jArr.put(jobjTemp);
                    /*No need to keep following code pagedjson is already handled in ModelAndView*/
//                    if (!isExport) {
//                        if ((Integer.parseInt(start) + Integer.parseInt(limit)) <= jArr.length()) {
//                            break;
//                }
//            }
                }
            }
            
            if(!invoiceAmountDueFilter){
                removeZeroAmountAccruedBalances(jArr, customerDueTransSet);
            }
            jobj.put(Constants.RES_data, jArr);
        } catch (ParseException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAccountsExceedingBudget : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAccountsExceedingBudget : " + ex.getMessage(), ex);
        }
        return jobj;
    }

    public JSONObject getCustomerAccountStatement(HttpServletRequest request, boolean isExport) throws ServiceException, SessionExpiredException, UnsupportedEncodingException {
        JSONObject jobj = new JSONObject();
        try {  
                       
            if (Constants.isOptimized){  // If case will be remove After completing the testing of SDP-9493 please merge Your code in Both cases.

                String start = request.getParameter(Constants.start);
                String limit = request.getParameter(Constants.limit);
                JSONArray jArr = new JSONArray();
                JSONObject jobjTemp = new JSONObject();
                boolean invoiceAmountDueFilter = true;
                if (request.getParameter("invoiceAmountDueFilter") != null) {
                    invoiceAmountDueFilter = Boolean.parseBoolean(request.getParameter("invoiceAmountDueFilter"));
                }
                boolean isPostDatedCheque = false;
                if (request.getParameter("isPostDatedCheque") != null) {
                    isPostDatedCheque = Boolean.parseBoolean(request.getParameter("isPostDatedCheque"));
                }
                boolean isSortedOnCreationDate = false;
                if (request.getParameter("isSortedOnCreationDate") != null) {
                    isSortedOnCreationDate = Boolean.parseBoolean(request.getParameter("isSortedOnCreationDate"));
                }
                DateFormat df = authHandler.getDateOnlyFormat();
//                DateFormat sqldf = new SimpleDateFormat("yyyy-MM-dd");

                boolean isAged = request.getParameter("isAged") != null ? Boolean.parseBoolean(request.getParameter("isAged")) : false;
                Date startDate = null;
                if (!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) {
                    startDate = df.parse(request.getParameter("stdate"));
                } else {
                    if (isAged) {
                        if (request.getParameterMap().containsKey("stdate") && (request.getParameter("stdate").toString().equals(""))) {
                            startDate = df.parse(Constants.opening_Date);
                        }
                    }
                }
                Date endDate = df.parse(request.getParameter("enddate"));
                Date asofDate = df.parse(request.getParameter("asofdate"));
                String companyid = sessionHandlerImpl.getCompanyid(request);
                KwlReturnObject curresultCompany = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) curresultCompany.getEntityList().get(0);
                String compCountry = company.getCountry()!=null?company.getCountry().getID():null;
            
                String customerIds = request.getParameter("customerIds");
                String withoutinventory = request.getParameter("withoutinventory");

                Calendar cal = Calendar.getInstance();
                cal.setTime(startDate);
                cal.add(Calendar.DATE, -1);  // number of days to add
                Date st = cal.getTime();
                Calendar end = Calendar.getInstance();
                end.setTime(asofDate);
                end.add(Calendar.DATE, 1);  // number of days to add
                Date ed = end.getTime();

                HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                requestParams.put("customerIds", customerIds);
                requestParams.put("withoutinventory", withoutinventory);
                requestParams.put("startDate", new Date(0));// As we needed opening+period transactions hence new Date(0) as 1970 is putted instead of  startDate
                requestParams.put("endDate", endDate);
                requestParams.put("isPostDatedCheque", isPostDatedCheque);
                requestParams.put("isSortedOnCreationDate", isSortedOnCreationDate);
                String dir = "";
                String sort = "";
                if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                    dir = request.getParameter("dir");
                    sort = request.getParameter("sort");
                    requestParams.put("sort", sort);
                    requestParams.put("dir", dir);
                }

                String searchJson = request.getParameter(Constants.Acc_Search_Json);
                String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
                if (!StringUtil.isNullOrEmpty(searchJson)) {
                    requestParams.put(Constants.Acc_Search_Json, searchJson);
                }
                if (!StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                    requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                }

                boolean isAdvanceSearch = false;
                String invoiceSearchJson = "";
                String receiptSearchJson = "";
                String cnSearchJson = "";
                String dnSearchJson = "";
                String makePaymentSearchJson = "";

                if (requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Filter_Criteria) != null) {
                    if (requestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                        filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                    }
                }
                if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                    searchJson = requestParams.get(Constants.Acc_Search_Json).toString();
                    if (!StringUtil.isNullOrEmpty(searchJson)) {
                        isAdvanceSearch = true;
                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                        HashMap<String, Object> reqPar1 = new HashMap<>();
                        reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                        reqPar1.put(Constants.Acc_Search_Json, searchJson);
                        reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                        invoiceSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                        reqPar1.remove(Constants.moduleid);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                        receiptSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                        dnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                        cnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                        makePaymentSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    }
                }
                requestParams.put("invoiceSearchJson", invoiceSearchJson);
                requestParams.put("receiptSearchJson", receiptSearchJson);
                requestParams.put("cnSearchJson", cnSearchJson);
                requestParams.put("dnSearchJson", dnSearchJson);
                requestParams.put("makePaymentSearchJson", makePaymentSearchJson);
                requestParams.put("isAdvanceSearch", isAdvanceSearch);

                KwlReturnObject customerLedger = accInvoiceDAOobj.getCustomerLedgerReport(requestParams);
                List customerLedgerList = customerLedger.getEntityList();
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
                KwlReturnObject extraCompanyresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyresult.getEntityList().get(0);
                Set<String> custemerSet = new HashSet();
                Set<String> customerDueTransSet = new HashSet();
                double balanceAmtInBase = 0;
                double balanceAmount = 0;
                String prevCustomer = "";
                //params to send to get billing address
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put(Constants.companyKey, companyid);
                addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                addressParams.put("isBillingAddress", true); //true to get billing address
                System.out.println("\nStatement of Accounts --> Customer Account Statement.");

                Map<String, Double> amountDueMap = null;
                Map<String, Double> amountDueInBaseMap = null;
                Map<String, Double> accruedBalanceMap = null;
                accruedBalanceMap = new HashMap<String, Double>();
                if (!invoiceAmountDueFilter) {
                    Map<String, Object> requestParams1 = new HashMap<String, Object>();
                    amountDueMap = new HashMap<String, Double>();
                    amountDueInBaseMap = new HashMap<String, Double>();
                    requestParams1.put(Constants.companyKey, companyid);
                    requestParams1.put("isAgedDetailsReport", true);
                    requestParams1.put("datefilter", "1");
                    requestParams1.put("custVendorID", customerIds);
                    DateFormat origdf = authHandler.getDateOnlyFormat();                    
                    requestParams1.put("enddate", origdf.format(endDate));
                    requestParams1.put("asofdate", origdf.format(asofDate));
//                    requestParams1.put("onlyAmountDue", true);
//                    JSONArray allTransaction = accInvoiceServiceDAO.getAllKnockOffJson(requestParams1);
                    List list = accInvoiceDAOobj.getInvoiceKnockOffTransactions(requestParams1);
//   Commented For Optimize Code                        
//                    for (int i = 0; i < allTransaction.length(); i++) {
//                        JSONObject temp = allTransaction.getJSONObject(i);
//                        double amountdueinbase = temp.getDouble(InvoiceConstants.amountdueinbase);
//                        double amountdue = temp.getDouble("amountdue");
//                        if(temp.getString("type").equals(Constants.CREDIT_NOTE) || temp.getString("type").equals(Constants.PAYMENT_RECEIVED)){
//                            amountdue = - amountdue;
//                            amountdueinbase = - amountdueinbase;
//                        }
//                        String creationDate = temp.getString("creationdate");
//                        Date tmpCreationDate = sqldf.parse(creationDate);
//                        if (tmpCreationDate.before(startDate)) {
//                            String personId = temp.getString(InvoiceConstants.personid);
//                            if (accruedBalanceMap.containsKey(personId)) {
//                                accruedBalanceMap.put(personId, accruedBalanceMap.get(personId) + amountdueinbase);
//                            } else {
//                                accruedBalanceMap.put(personId, amountdueinbase);
//                            }
//                        }
//                        else{
//                            amountDueInBaseMap.put(temp.getString(Constants.billid), amountdueinbase);
//                            amountDueMap.put(temp.getString(Constants.billid), amountdue);
//                        }
//                    }
                        for (int i = 0; i < list.size(); i++) {
                            Object[] details = (Object[]) list.get(i);
                            double amountdueinbase = (Double) details[2] - (Double) details[7];
                            amountdueinbase = authHandler.round(amountdueinbase, companyid);
                            double amountdue = (Double) details[1] - (Double) details[6];
                            amountdue = authHandler.round(amountdue, companyid);
                            amountDueInBaseMap.put(details[0].toString(), amountdueinbase);
                            amountDueMap.put(details[0].toString(), amountdue);
                        }
                
                    }
//                }
                
                
//            jobj.put(Constants.RES_count,customerLedgerList.size()); //total count for paging purpose
                for (int i = 0; i < customerLedgerList.size(); i++) {
                    Object[] tempCustomerLedger = (Object[]) customerLedgerList.get(i);
                    String type = (String) tempCustomerLedger[0];
                    String invoiceId = (String) tempCustomerLedger[1]; // if(type=='invoice') ==> invoice.id, if(type=='receipt') ==> receipt.id, if(type=='creditnote') ==> creditnote.id
                    String invoiceNumber = (String) tempCustomerLedger[2]; // if(type=='invoice') ==> invoice.invoicenumber, if(type=='receipt') ==> receipt.receiptnumber, if(type=='creditnote') ==> creditnote.cnnumber
                    String jeId = tempCustomerLedger[3] == null ? "" : (String) tempCustomerLedger[3]; // journalentry.id
                    String memo = StringUtil.isNullOrEmpty((String) tempCustomerLedger[4]) ? "" : (String) tempCustomerLedger[4]; // if(type=='invoice') ==> invoice.memo, if(type=='receipt') ==> receipt.memo, if(type=='creditnote') ==> creditnote.memo
                    String currencyid = StringUtil.isNullOrEmpty((String) tempCustomerLedger[5]) ? sessionHandlerImpl.getCurrencyID(request) : (String) tempCustomerLedger[5]; // if(type=='invoice') ==> invoice.currency, if(type=='receipt') ==> receipt.currency, if(type=='creditnote') ==> creditnote.currency
                    double amount = (Double) tempCustomerLedger[6]; // if(type=='invoice') ==> jedetail.amount, if(type=='receipt') ==> receiptdetails.amount, if(type=='creditnote') ==> jedetail.amount
                    String jeEntryNumber = tempCustomerLedger[7] == null ? "" : (String) tempCustomerLedger[7];
                    Date jeEntryDate = (Date) tempCustomerLedger[8];
                    double jeEntryExternalCurrencyRate = (Double) tempCustomerLedger[9];
                    String invoiceCustomerId = (String) tempCustomerLedger[10];
                    String invoiceCustomerCode = (String) tempCustomerLedger[19];
                    String invoiceCustomerName = (String) tempCustomerLedger[11];

                    int openingtransactionFlag = Integer.parseInt(tempCustomerLedger[16].toString());
                    boolean isOpeningBalanceTransaction = false;
                    if (openingtransactionFlag == 1) {
                        isOpeningBalanceTransaction = true;
                    }

                    boolean isConversionRateFromCurrencyToBase = false;
                    int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempCustomerLedger[17].toString());
                    String CustomerID = tempCustomerLedger[18].toString();
                    String CustomerAccountID = "";
                    Customer customer = null;
                    if (!StringUtil.isNullOrEmpty(CustomerID)) {
                        KwlReturnObject kwlCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), CustomerID);
                        customer = (Customer) kwlCustomer.getEntityList().get(0);
                        CustomerAccountID = customer.getAccount().getID();
                    }

                    if (conversionRateFromCurrencyToBaseFlag == 1) {
                        isConversionRateFromCurrencyToBase = true;
                    }

                    if (!prevCustomer.equals(invoiceCustomerId)) {
                        prevCustomer = invoiceCustomerId;
                        balanceAmtInBase = 0;
                        balanceAmount = 0;
                    }

                    HashMap<String, Object> reqMap = AccountingManager.getGlobalParams(request);
                    reqMap.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
                    reqMap.put("startDate", startDate);
                    reqMap.put("asofDate", asofDate);
                    reqMap.put("invoiceCustomerId", invoiceCustomerId);
                    reqMap.put("jeId", jeId);
                    reqMap.put("CustomerAccountID", CustomerAccountID);

                    if (custemerSet.add(invoiceCustomerId)) { // For each customer putting Accurred Balance detail once. 
                        JSONObject opnJSON = accReportsService.calculateCustomerAccuredBalance(customerLedgerList, reqMap);
                        balanceAmtInBase = opnJSON.getDouble("balanceAmountInBase");
//   Commented For Optimize Code                        
//                        JSONObject opnJSON = new JSONObject();
//                        double accruedBalance = accruedBalanceMap.containsKey(invoiceCustomerId) ? accruedBalanceMap.get(invoiceCustomerId):0;
//                        balanceAmtInBase=accruedBalance;
//                        if(accruedBalance > 0){
//                            opnJSON.put("debitAmountInBase", Math.abs(accruedBalance));
//                            opnJSON.put("creditAmountInBase", "");
//                        }
//                        else{
//                            opnJSON.put("creditAmountInBase", Math.abs(accruedBalance));
//                            opnJSON.put("debitAmountInBase", "");
//                        }
//                        opnJSON.put("debitAmount", "");
//                        opnJSON.put("creditAmount", "");
//                        opnJSON.put("type","Accrued Balance");
//                        opnJSON.put("balanceAmountInBase", accruedBalance);

                        opnJSON.put("accId", invoiceCustomerId);
                        opnJSON.put("accCode", invoiceCustomerCode);
                        opnJSON.put("accName", invoiceCustomerName);
                        opnJSON.put("accCode", invoiceCustomerCode);
                        opnJSON.put("categoryName", invoiceCustomerName);
                        jArr.put(opnJSON);
                    }

                    if (!accReportsService.isPeriodWiseOpeningTransaction(jeEntryDate, startDate)) {// this condition will be true for those transaction which falls in selected period. i.e below code is for Period trsactions only
                        reqMap.put("isOpeningBalanceTransaction", isOpeningBalanceTransaction);
                        reqMap.put("transactionAmount", amount);
                        reqMap.put("invoiceId", invoiceId);
                        reqMap.put("type", type);
                        HashMap requestParams1 = AccountingManager.getGlobalParams(request);
                        requestParams1.put("df", df);
                        requestParams1.put("asofdate", request.getParameter("asofdate"));
                        requestParams1.put(Constants.companyKey, companyid);
                        double amountinbasecalc = 0;
                        boolean others = true;
                        if(!invoiceAmountDueFilter){
//                            amount =  amountDueMap.containsKey(invoiceId) ? amountDueMap.get(invoiceId) : 0;
//                            amountinbasecalc = amountDueInBaseMap.containsKey(invoiceId) ? amountDueInBaseMap.get(invoiceId):0;
                            if (type.equalsIgnoreCase("Sales Invoice")) {
                                others = false;
                                if (!StringUtil.isNullOrEmpty(jeEntryNumber)) {
                                    if (amountDueMap != null && amountDueInBaseMap != null && amountDueMap.containsKey(invoiceId) && amountDueInBaseMap.containsKey(invoiceId)) {
                                        amount = amountDueMap.get(invoiceId);
                                        amountinbasecalc = amountDueInBaseMap.get(invoiceId);
                                    } else {
                                        continue;
                                    }
                                } else {
                                    KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceId);
                                    Invoice invoice = (Invoice) curresult1.getEntityList().get(0);
                                    amount = AccInvoiceServiceHandler.getOpeningInvoiceAmountDue(invoice, requestParams1, accInvoiceCommon);
                                }
                            } else if (type.equalsIgnoreCase("Payment Made")) {
                                others = false;
                                KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(Payment.class.getName(), invoiceId);
                                Payment payment = (Payment) curresult1.getEntityList().get(0);
                                if (payment != null) {
                                    requestParams1.put("paymentid", payment.getID());
                                    if (payment.isNormalPayment()) {
                                        amount = AccGoodsReceiptServiceHandler.getPaymentAmountDue(payment,requestParams1,accVendorPaymentDao);
                                    } else {
                                        amount = AccGoodsReceiptServiceHandler.getOpeningPaymentAmountDue(payment, requestParams1, accVendorPaymentDao, companyid);
                                        amount = -amount;
                                    }
                                }
                            } else if (type.equalsIgnoreCase("Payment Received")) {
                                others = false;
                                KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(Receipt.class.getName(), invoiceId);
                                Receipt receipt = (Receipt) curresult1.getEntityList().get(0);
                                if (receipt != null) {
                                    requestParams1.put("receiptid", receipt.getID());
                                    if (receipt.isNormalReceipt()) {
                                        amount = AccInvoiceServiceHandler.getReceiptAmountDue(receipt, requestParams1, accReceiptDao);                                       
                                        
                                    } else {
                                        amount = AccInvoiceServiceHandler.getOpeningReceiptAmountDue(receipt, requestParams1, accReceiptDao);
                                        amount = -amount;
                                    }
                                }
                            } else if (type.equalsIgnoreCase("Credit Note")) {
                                others = false;
                                KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), invoiceId);
                                CreditNote cn = (CreditNote) curresult1.getEntityList().get(0);
                                if (cn != null) {
                                    requestParams1.put("creditnoteid", cn.getID());
                                    if (cn.isNormalCN()) {
                                        amount = AccInvoiceServiceHandler.getCreditNoteAmountDue(cn, requestParams1, accPaymentDAOobj, accCreditNoteobj, companyid);
//                                        amount= -amount;
                                    } else {
                                        amount = AccInvoiceServiceHandler.getOpeningCreditNoteAmountDue(cn, requestParams1, accPaymentDAOobj, accCreditNoteobj, companyid);
                                        amount = -amount;
                                    }
                                }
                            } else if (type.equalsIgnoreCase("Debit Note")) {
                                others = false;
                                KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), invoiceId);
                                DebitNote dn = (DebitNote) curresult1.getEntityList().get(0);
                                if (dn != null) {
                                    requestParams1.put("debitnoteid", dn.getID());
                                    if (dn.isNormalDN()) {
                                        amount = AccInvoiceServiceHandler.getDebitNoteAmountDue(dn, requestParams1, accReceiptDao, accCreditNoteobj, companyid);
                                    } else {
                                        amount = AccInvoiceServiceHandler.getOpeningDebitNoteAmountDue(dn, requestParams1, accReceiptDao, accCreditNoteobj, companyid);
                                    }
                                }                                
                            }
                        }
                        if(others){
//                        else{
                            amount = accReportsService.getAmountOfTransactionForCusromerSOA(reqMap);
                        }
                        if (amount <= 0) { //if amount is zero then no need to show data in SOA Report so continue with next record
//                        if ((!invoiceAmountDueFilter && !amountDueMap.containsKey(invoiceId)) || amount <= 0) { //if amount is zero then no need to show data in SOA Report so continue with next record
                            continue;
                        }

                        if (!invoiceAmountDueFilter) {
                            customerDueTransSet.add(invoiceCustomerId);
                        }
                        KWLCurrency currency = null;
                        if (!StringUtil.isNullOrEmpty(currencyid)) {
                            KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                            currency = (KWLCurrency) curresult1.getEntityList().get(0);
                        }

                        jobjTemp = new JSONObject();
                        jobjTemp.put("type", type);
                        jobjTemp.put("invoiceId", invoiceId);
                        jobjTemp.put(Constants.billid, invoiceId);
                        jobjTemp.put("noteid", invoiceId);
                        jobjTemp.put("referid", UUID.randomUUID().toString());
                        jobjTemp.put("invoiceNumber", invoiceNumber);
                        jobjTemp.put("jeId", jeId);
                        jobjTemp.put("memo", memo);
                        jobjTemp.put(Constants.currencyKey, StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getCurrencyID() : currencyid);
                        jobjTemp.put("currencysymbol", StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getSymbol() : currency.getSymbol());
                        jobjTemp.put("currencycode", StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getCurrencyCode() : currency.getCurrencyCode());
                        jobjTemp.put("basecurrencysymbol", baseCurrency.getSymbol());
                        jobjTemp.put("basecurrencycode", baseCurrency.getCurrencyCode());
                        jobjTemp.put("jeEntryNumber", jeEntryNumber);
                        jobjTemp.put("jeEntryDate", df.format(jeEntryDate));
                        jobjTemp.put("jeEntryExternalCurrencyRate", jeEntryExternalCurrencyRate);
                        jobjTemp.put("ExternalCurrencyRate", "1 " + baseCurrency.getCurrencyCode() + " = " + ((isConversionRateFromCurrencyToBase && isOpeningBalanceTransaction) ? 1 / jeEntryExternalCurrencyRate : jeEntryExternalCurrencyRate)  + " " + currency.getCurrencyCode());
                        jobjTemp.put("accId", invoiceCustomerId);
                        jobjTemp.put("accCode", invoiceCustomerCode);
                        jobjTemp.put("accName", invoiceCustomerName);
                        jobjTemp.put("accCode", invoiceCustomerCode);
                        jobjTemp.put("categoryName", invoiceCustomerName);
                        jobjTemp.put("amountDue", invoiceAmountDueFilter ? "" : amount);
                        addressParams.put("customerid", invoiceCustomerId);
                        CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                        String customerEmailId = customerAddressDetails != null ? customerAddressDetails.getEmailID() : "";
                        jobjTemp.put("billingEmail", customerEmailId);
                        
                        //Code commented after discussion with Aman Shah, TDS is not related to customer.
//                        if (!StringUtil.isNullOrEmpty(compCountry) && Integer.parseInt(compCountry) == Constants.indian_country_id && extraCompanyPreferences.isTDSapplicable()) {
//                            KwlReturnObject amountReceiptDetailOtherwise = accInvoiceDAOobj.getAmountFromReceiptDetailOtherwise(invoiceId);
//                            List AmountList = amountReceiptDetailOtherwise.getEntityList();
//                            if (AmountList != null) {
//                                for (int j = 0; j < AmountList.size(); j++) {
//                                    Object[] row = (Object[]) AmountList.get(j);
//                                    double rowAmount = (Double) row[0];
//                                    if (rowAmount > 0 && row[2] != null && (row[2].toString()).equals(IndiaComplianceConstants.TRUE_CHAR_T)) {
//                                        amount += rowAmount;
//                                    } else {
//                                        amount -= rowAmount;
//                                    }
//                                }
//                            }
//                        }
                        double amountinbase = 0;
                        if(amountinbasecalc == 0){
                            KwlReturnObject bAmt = null;
                            if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                            } else {
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                            }
                            amountinbase = (Double) bAmt.getEntityList().get(0);
                            amountinbase = authHandler.round(amountinbase, companyid);
                        }
                        else{
                            amountinbase = amountinbasecalc;
                        }
                        double tot_amountinbase = 0;
                        List<JournalEntryDetail> listJEDetail = new ArrayList<>();

                        reqMap.put("type", type);
                        reqMap.put("invoiceId", invoiceId);
                        reqMap.put("amount", amount);
                        reqMap.put("amountinbase", amountinbase);
                        reqMap.put("jeId", jeId);

                        double [] amountArray = accReportsService.getSOACustomerAmountFromJEDetail(reqMap,listJEDetail);

                        amount = amountArray[0];
                        amountinbase = amountArray[1];

                        if (type.equalsIgnoreCase("Cash Sale")) {
                            jobjTemp.put("debitAmountInBase", authHandler.round(amountinbase, companyid));
                            jobjTemp.put("creditAmountInBase", "");
                            jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));
                            jobjTemp.put("debitAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                            jobjTemp.put("creditAmount", "");
                            jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                        } else if (type.equalsIgnoreCase("Customer Invoice") || type.equalsIgnoreCase("Sales Invoice")) {
                            balanceAmtInBase = balanceAmtInBase + amountinbase;
                            jobjTemp.put("debitAmountInBase", authHandler.round(amountinbase, companyid));
                            jobjTemp.put("creditAmountInBase", "");
                            jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));

                            balanceAmount = balanceAmount + amount;
                            jobjTemp.put("debitAmount", authHandler.round(amount, companyid));
                            jobjTemp.put("creditAmount", "");
                            jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                        } else if (type.equalsIgnoreCase("Payment Made")) {//For make payment to customer
                            balanceAmtInBase = balanceAmtInBase + amountinbase;
                            jobjTemp.put("debitAmountInBase", authHandler.round(amountinbase, companyid));
                            jobjTemp.put("creditAmountInBase", "");
                            jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));

                            balanceAmount = balanceAmount + amount;
                            jobjTemp.put("debitAmount", authHandler.round(amount, companyid));
                            jobjTemp.put("creditAmount", "");
                            jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                        } else if (type.equalsIgnoreCase("Debit Note")) {//For Debit note of customer
                            balanceAmtInBase = balanceAmtInBase + amountinbase;
                            jobjTemp.put("debitAmountInBase", authHandler.round(amountinbase, companyid));
                            jobjTemp.put("creditAmountInBase", "");
                            jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));

                            balanceAmount = balanceAmount + amount;
                            jobjTemp.put("debitAmount", authHandler.round(amount, companyid));
                            jobjTemp.put("creditAmount", "");
                            jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                        } else {  //if((type.equalsIgnoreCase("Payment Received")) || (type.equalsIgnoreCase("Credit Note")))
//   Commented For Optimize Code                        
//                            if(!invoiceAmountDueFilter){
//                                amount = - amount;
//                                amountinbase = - amountinbase;
//                            }
                            balanceAmtInBase = balanceAmtInBase - amountinbase;
                            jobjTemp.put("debitAmountInBase", "");
                            jobjTemp.put("creditAmountInBase", authHandler.round(amountinbase, companyid));
                            jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));

                            balanceAmount = balanceAmount - amount;
                            jobjTemp.put("debitAmount", "");
                            jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                            jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                        }
                        jArr.put(jobjTemp);

                        //Add JEs with Foreign Gain/Loss posted separately.
                        for (JournalEntryDetail jeDetail : listJEDetail) {
                            jobjTemp = new JSONObject();
                            jobjTemp.put("type", type);
                            jobjTemp.put("invoiceId", invoiceId);
                            jobjTemp.put(Constants.billid, invoiceId);
                            jobjTemp.put("noteid", invoiceId);
                            jobjTemp.put("referid", UUID.randomUUID().toString());
                            jobjTemp.put("invoiceNumber", invoiceNumber);
                            jobjTemp.put("jeId", jeDetail.getJournalEntry().getID());
                            jobjTemp.put("memo", jeDetail.getAccount().getAccountName());
                            jobjTemp.put(Constants.currencyKey, StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getCurrencyID() : currencyid);
                            jobjTemp.put("currencysymbol", StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getSymbol() : currency.getSymbol());
                            jobjTemp.put("currencycode", StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getCurrencyCode() : currency.getCurrencyCode());
                            jobjTemp.put("jeEntryNumber", jeDetail.getJournalEntry().getEntryNumber());
                            jobjTemp.put("jeEntryDate", df.format(jeDetail.getJournalEntry().getEntryDate()));
                            jobjTemp.put("jeEntryExternalCurrencyRate", jeEntryExternalCurrencyRate);
                            jobjTemp.put("ExternalCurrencyRate", "1 " + baseCurrency.getCurrencyCode() + " = " + jeEntryExternalCurrencyRate + " " + currency.getCurrencyCode());
                            jobjTemp.put("accId", invoiceCustomerId);
                            jobjTemp.put("accCode", invoiceCustomerCode);
                            jobjTemp.put("accName", invoiceCustomerName);
                            jobjTemp.put("categoryName", invoiceCustomerName);
                            jobjTemp.put("amountDue", "");
                            jobjTemp.put("billingEmail", customerEmailId);

                            if (jeDetail.isDebit()) {
                                balanceAmtInBase = balanceAmtInBase - jeDetail.getAmountinbase();
                                jobjTemp.put("debitAmountInBase", "");
                                jobjTemp.put("creditAmountInBase", authHandler.round(jeDetail.getAmountinbase(), companyid));
                                jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));

                                balanceAmount = balanceAmount - jeDetail.getAmount();
                                jobjTemp.put("debitAmount", "");
                                jobjTemp.put("creditAmount", (jeDetail.getAmount() != 0) ? authHandler.round(jeDetail.getAmount(), companyid) : "");
                                jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                            } else {
                                balanceAmtInBase = balanceAmtInBase + jeDetail.getAmountinbase();
                                jobjTemp.put("debitAmountInBase", authHandler.round(jeDetail.getAmountinbase(), companyid));
                                jobjTemp.put("creditAmountInBase", "");
                                jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));

                                balanceAmount = balanceAmount + jeDetail.getAmount();
                                jobjTemp.put("debitAmount", (jeDetail.getAmount() != 0) ? authHandler.round(jeDetail.getAmount(), companyid) : "");
                                jobjTemp.put("creditAmount", "");
                                jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                            }

                            jArr.put(jobjTemp);
                        }

                        /*No need to keep following code pagedjson is already handled in ModelAndView*/
//                    if (!isExport) {
//                        if ((Integer.parseInt(start) + Integer.parseInt(limit)) <= jArr.length()) {
//                            break;
//                }
//            }
                    }
                }
                
                if (!invoiceAmountDueFilter) {
                    removeZeroAmountAccruedBalances(jArr, customerDueTransSet);
                }

                jobj.put(Constants.RES_data, jArr);

            }else{

                JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
                DateFormat df = authHandler.getDateOnlyFormat();
                Date startDate = df.parse(request.getParameter("stdate"));
                Date endDate = df.parse(request.getParameter("enddate"));
                Date asofDate = df.parse(request.getParameter("asofdate"));
                df = new SimpleDateFormat("yyyy-MM-dd");
                requestObj.put("startdateStr", df.format(startDate));
                requestObj.put("enddateStr", df.format(endDate));
                requestObj.put("asofdateStr", df.format(asofDate));

                String dir = "";
                String sort = "";

                if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                    dir = request.getParameter("dir");
                    sort = request.getParameter("sort");
                    requestObj.put("sort", sort);
                    requestObj.put("dir", dir);
                }

                String searchJson = request.getParameter(Constants.Acc_Search_Json);
                String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
                if (!StringUtil.isNullOrEmpty(searchJson)) {
                    requestObj.put(Constants.Acc_Search_Json, searchJson);
                }
                if (!StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                    requestObj.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                }

                boolean isAdvanceSearch = false;
                String invoiceSearchJson = "";
                String receiptSearchJson = "";
                String cnSearchJson = "";
                String dnSearchJson = "";
                String makePaymentSearchJson = "";

                if (requestObj.has(Constants.Acc_Search_Json) && requestObj.opt(Constants.Acc_Search_Json) != null) {
                    searchJson = requestObj.opt(Constants.Acc_Search_Json).toString();
                    if (!StringUtil.isNullOrEmpty(searchJson)) {
                        isAdvanceSearch = true;
                        requestObj.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                        HashMap<String, Object> reqPar1 = new HashMap<>();
                        reqPar1.put(Constants.companyKey, requestObj.get(Constants.companyKey));
                        reqPar1.put(Constants.Acc_Search_Json, searchJson);
                        reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                        invoiceSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                        reqPar1.remove(Constants.moduleid);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                        receiptSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                        dnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                        cnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                        makePaymentSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    }
                }

                requestObj.put("invoiceSearchJson", invoiceSearchJson);
                requestObj.put("receiptSearchJson", receiptSearchJson);
                requestObj.put("cnSearchJson", cnSearchJson);
                requestObj.put("dnSearchJson", dnSearchJson);
                requestObj.put("makePaymentSearchJson", makePaymentSearchJson);
                requestObj.put("isAdvanceSearch", isAdvanceSearch);

                jobj.put("data",accTemplateReportService.getSOAInfo(requestObj));
            }
        } catch (ParseException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerAccountStatement : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerAccountStatement : " + ex.getMessage(), ex);
        }
        return jobj;
    }
    
    
    
    public void removeZeroAmountAccruedBalances(JSONArray jArr, Set<String> dueTransSet){
        try{
            List<String> deleteIDs = new ArrayList();
            for(int j=0 ; j<jArr.length() ; j++){
                boolean isWithTransaction = false;
                JSONObject jobject = jArr.getJSONObject(j);
                String ID = "";
                if(jobject.has("accId") && !StringUtil.isNullOrEmpty(jobject.get("accId").toString())){
                    ID = jobject.get("accId").toString();
                }

                for(String dueTransID : dueTransSet){
                    if(ID.equals(dueTransID)){
                        isWithTransaction = true;
                        break;
                    }
                }
                if(!isWithTransaction){
                    deleteIDs.add(ID);
                }
            }

            for(String custID : deleteIDs){
                for(int k=0 ; k<jArr.length() ; k++){
                    JSONObject tempJobject = jArr.getJSONObject(k);
                    String tempcustomerID = "", type = "";
                    if(tempJobject.has("accId") && !StringUtil.isNullOrEmpty(tempJobject.get("accId").toString())){
                        tempcustomerID = tempJobject.get("accId").toString();
                    }
                    if(tempJobject.has("type") && !StringUtil.isNullOrEmpty(tempJobject.get("type").toString())){
                        type = tempJobject.get("type").toString();
                    }
                    double debitAmountInBase = 0, creditAmountInBase = 0;
                    if(tempJobject.has("debitAmountInBase") && !StringUtil.isNullOrEmpty(tempJobject.get("debitAmountInBase").toString())){
                        debitAmountInBase = Double.parseDouble(tempJobject.get("debitAmountInBase").toString());
                    }
                    if(tempJobject.has("creditAmountInBase") && !StringUtil.isNullOrEmpty(tempJobject.get("creditAmountInBase").toString())){
                        creditAmountInBase = Double.parseDouble(tempJobject.get("creditAmountInBase").toString());
                    }
                    if(custID.equals(tempcustomerID) && type.equals(Constants.Accrued_Balance) && (debitAmountInBase==0 && creditAmountInBase==0)){
                        jArr.remove(k);
                        break;
                    }
                }
            }
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public boolean isPeriodWiseOpeningTransaction(Date transactionDate,Date startDate ) throws SessionExpiredException,ParseException {
        String transDate = authHandler.getDateOnlyFormat().format(transactionDate);
        transactionDate = authHandler.getDateOnlyFormat().parse(transDate);
        return transactionDate.before(startDate);
    }
    
    public double getAmountOfTransactionForCusromerSOA(HashMap<String, Object> requestParams) throws SessionExpiredException, ParseException, ServiceException {
        String companyid = (String) requestParams.get(Constants.companyKey);
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        boolean invoiceAmountDueFilter = (requestParams.containsKey("invoiceAmountDueFilter") && requestParams.get("invoiceAmountDueFilter") != null) ? Boolean.parseBoolean(requestParams.get("invoiceAmountDueFilter").toString()) : false;
        boolean isOpeningBalanceTransaction = (requestParams.containsKey("isOpeningBalanceTransaction") && requestParams.get("isOpeningBalanceTransaction") != null) ? Boolean.parseBoolean(requestParams.get("isOpeningBalanceTransaction").toString()) : false;
        double amount = (requestParams.containsKey("transactionAmount") && requestParams.get("transactionAmount") != null) ? (Double) (requestParams.get("transactionAmount")) : 0;
        String type = (requestParams.containsKey("type") && requestParams.get("type") != null) ? requestParams.get("type").toString() : "";
        String invoiceId = (requestParams.containsKey("invoiceId") && requestParams.get("invoiceId") != null) ? requestParams.get("invoiceId").toString() : "";
        Date startDate = (requestParams.containsKey("startDate") && requestParams.get("startDate") != null) ? (Date) requestParams.get("startDate") : new Date();
        Date asofDate = (requestParams.containsKey("asofDate") && requestParams.get("asofDate") != null) ? (Date) requestParams.get("asofDate") : new Date();

        if (invoiceAmountDueFilter) {
            if (isOpeningBalanceTransaction) {   // if "select transaction" filter in SOA is "all" and transaction is openoing type .In this case on dated amount will be calculated for opening invoices only                                                                
                Calendar startCal = Calendar.getInstance();
                startCal.setTime(startDate);
                String sstart = authHandler.getDateOnlyFormat().format(startCal.getTime());
                Date asOfDate = authHandler.getDateOnlyFormat().parse(sstart);
                //Date asOfDate = startCal.getTime();//this variable used for calculating amount due upto that date
                if (!type.equalsIgnoreCase("Payment Received")) {
                    amount = getAsOnDateAmountDueForTransactions(requestParams, asOfDate, invoiceId, type, amount);
                } 
            } else if (type.equalsIgnoreCase("Payment Received")) { //Removing bank charges from total amount of payment if present
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), invoiceId);
                Receipt receipt = (Receipt) objItr.getEntityList().get(0);
                if (receipt.getBankChargesAmount() > 0 && (receipt.getJournalEntryForBankCharges() == null || StringUtil.isNullOrEmpty(receipt.getJournalEntryForBankCharges().toString()))) {
                    amount -= receipt.getBankChargesAmount();
                }
                if (receipt.getBankInterestAmount() > 0 && (receipt.getJournalEntryForBankInterest() == null || StringUtil.isNullOrEmpty(receipt.getJournalEntryForBankInterest().toString()))) {
                    amount -= receipt.getBankInterestAmount();
                }
            }
        } else { //if "select transaction" filter in SOA is "Outstanding". then only document will come which has amount due 
            double documentAmtDue = 0;
            if (type.equalsIgnoreCase("Cash Sale")) {//Cash Sale against customer amount due is always zero
                documentAmtDue = 0;
            } else if (type.equalsIgnoreCase("Payment Made")) { // payment recived agaisnt customer can be due in case of refudnd
                documentAmtDue = 0;
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), invoiceId);
                Payment payment = (Payment) objItr.getEntityList().get(0);
                if (!StringUtil.isNullOrEmpty(payment.getCustomer()) && (payment.getAdvanceDetails() != null && !payment.getAdvanceDetails().isEmpty())) {// Payment gaistt customer can only be due when it made against Refund 
                    HashMap<String, Object> reqParams1 = new HashMap();
                    reqParams1.put("companyid", companyid);
                    reqParams1.put(Constants.df, df);
                    reqParams1.put("asofdate", df.format(asofDate));
                    documentAmtDue = AccGoodsReceiptServiceHandler.getPaymentAmountDue(payment, reqParams1, accVendorPaymentDao);
                }
            } else if (type.equalsIgnoreCase("Payment Received")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), invoiceId);
                Receipt receipt = (Receipt) objItr.getEntityList().get(0);
                HashMap<String, Object> reqParams1 = new HashMap();
                reqParams1.put("companyid", companyid);
                reqParams1.put(Constants.df, df);
                reqParams1.put("asofdate", df.format(asofDate));
                documentAmtDue = AccInvoiceServiceHandler.getReceiptAmountDue(receipt, reqParams1, accReceiptDao);

            } else { //other types are 1.Sales Invoice, 2.Credit Note, 3.Debit Note which are coming in this lese part
                documentAmtDue = getAsOnDateAmountDueForTransactions(requestParams, asofDate, invoiceId, type, amount);
            }
            amount = documentAmtDue;
        }
        return amount;
    }
    
    public JSONObject calculateCustomerAccuredBalance(List customerLedgerList, HashMap<String, Object> requestParams) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        JSONObject openingJSON = new JSONObject();
        double totalOpeningInBase = 0;
        String gcurrencyid = requestParams.containsKey(Constants.globalCurrencyKey) ? requestParams.get(Constants.globalCurrencyKey).toString() : "";
        String customerId = requestParams.containsKey("invoiceCustomerId") ? requestParams.get("invoiceCustomerId").toString() : "";
        Date startDate = (requestParams.containsKey("startDate") && requestParams.get("startDate") != null) ? (Date) requestParams.get("startDate") : new Date();
        String companyid = (String) requestParams.get("companyid");
        for (int i = 0; i < customerLedgerList.size(); i++) {
            Object[] tempCustomerLedger = (Object[]) customerLedgerList.get(i);
            Date jeEntryDate = (Date) tempCustomerLedger[8];
            String invoiceCustomerId = (String) tempCustomerLedger[10];
            
            if (customerId.equals(invoiceCustomerId) && accReportsService.isPeriodWiseOpeningTransaction(jeEntryDate, startDate)) {
                String type = (String) tempCustomerLedger[0];
                String invoiceId = (String) tempCustomerLedger[1]; 
                String currencyid = StringUtil.isNullOrEmpty((String) tempCustomerLedger[5]) ? gcurrencyid : (String) tempCustomerLedger[5]; // if(type=='invoice') ==> invoice.currency, if(type=='receipt') ==> receipt.currency, if(type=='creditnote') ==> creditnote.currency
                double amount = (Double) tempCustomerLedger[6]; 
                double jeEntryExternalCurrencyRate = (Double) tempCustomerLedger[9];
                int openingtransactionFlag = Integer.parseInt(tempCustomerLedger[16].toString());
                boolean isOpeningBalanceTransaction = false;
                if (openingtransactionFlag == 1) {
                    isOpeningBalanceTransaction = true;
                }

                boolean isConversionRateFromCurrencyToBase = false;
                int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempCustomerLedger[17].toString());
                if (conversionRateFromCurrencyToBaseFlag == 1) {
                    isConversionRateFromCurrencyToBase = true;
                }

                HashMap<String, Object> reqMap = new HashMap();
                reqMap.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                reqMap.put(Constants.globalCurrencyKey, requestParams.get(Constants.globalCurrencyKey));
                reqMap.put(Constants.df, requestParams.get(Constants.df));
                reqMap.put(Constants.userdf, requestParams.get(Constants.userdf));
                reqMap.put("invoiceAmountDueFilter", requestParams.get("invoiceAmountDueFilter"));
                reqMap.put("startDate", startDate);
                reqMap.put("asofDate", requestParams.get("asofDate"));
                reqMap.put("isOpeningBalanceTransaction", isOpeningBalanceTransaction);
                reqMap.put("transactionAmount", amount);
                reqMap.put("invoiceId", invoiceId);
                reqMap.put("type", type);

                amount = accReportsService.getAmountOfTransactionForCusromerSOA(reqMap);
                if (amount <= 0) { //if amount is zero then no need to show data in SOA Report so continue with next record
                    continue;
                }

                KwlReturnObject bAmt = null;
                if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                }

                double amountinbase = (Double) bAmt.getEntityList().get(0);

                if (type.equalsIgnoreCase("Cash Sale") || type.equalsIgnoreCase("Customer Invoice") || type.equalsIgnoreCase("Sales Invoice") || type.equalsIgnoreCase("Payment Made") || type.equalsIgnoreCase("Debit Note")) {
                    //debit type account
                    totalOpeningInBase += amountinbase;
                } else {//Credit type account
                    totalOpeningInBase -= amountinbase;
                }
            }
        }
        openingJSON.put("type", "Accrued Balance");
        openingJSON.put("debitAmount", "");
        openingJSON.put("creditAmount", "");
        openingJSON.put("balanceAmount", "");
        openingJSON.put("balanceAmountInBase", authHandler.round(totalOpeningInBase, companyid));
        if (totalOpeningInBase == 0) {//Nor Debit nor Credit
            openingJSON.put("debitAmountInBase", 0);
            openingJSON.put("creditAmountInBase", 0);
        } else if (totalOpeningInBase > 0) {// Debit
            openingJSON.put("debitAmountInBase", Math.abs(authHandler.round(totalOpeningInBase, companyid)));
            openingJSON.put("creditAmountInBase", "");
        } else { // Credit
            openingJSON.put("debitAmountInBase", "");
            openingJSON.put("creditAmountInBase", Math.abs(authHandler.round(totalOpeningInBase, companyid)));
        }
        return openingJSON;
    }

    public double getAsOnDateAmountDueForTransactions(HashMap<String, Object> reqMap, Date asOfDate, String documentId, String type, double documentAmt) throws ServiceException {
        double amtDue = 0;
        DateFormat df = (DateFormat) reqMap.get(Constants.df);
        String asofDate = df.format(asOfDate);
        String companyid = (String) reqMap.get("companyid");
        if (!StringUtil.isNullOrEmpty(type)) {
            if (type.equalsIgnoreCase("Sales Invoice")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), documentId);
                Invoice invoice = (Invoice) objItr.getEntityList().get(0);
                if (invoice != null) {
                    if (invoice.isIsOpeningBalenceInvoice() && invoice.getOpeningBalanceAmountDue() == invoice.getOriginalOpeningBalanceAmount()) {
                        amtDue = invoice.getOriginalOpeningBalanceAmount();
                    } else if (!invoice.isIsOpeningBalenceInvoice() && invoice.isNormalInvoice() && invoice.getInvoiceamount() == invoice.getInvoiceamountdue()) {
                        amtDue = invoice.getInvoiceamountdue();
                    } else {
                        reqMap.put("invoiceid", documentId);
                        reqMap.put("asofdate", asofDate);
                        List ll = accInvoiceCommon.getAmountDue_Discount(reqMap, invoice);
                        amtDue = (Double) ll.get(0);
                    }
                }
            } else if (type.equalsIgnoreCase("Purchase Invoice")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), documentId);
                GoodsReceipt goodsReceipt = (GoodsReceipt) objItr.getEntityList().get(0);
                if (goodsReceipt != null) {
                    if (goodsReceipt.isIsOpeningBalenceInvoice() && goodsReceipt.getOpeningBalanceAmountDue() == goodsReceipt.getOriginalOpeningBalanceAmount()) {
                        amtDue = goodsReceipt.getOriginalOpeningBalanceAmount();
                    } else if (!goodsReceipt.isIsOpeningBalenceInvoice() && goodsReceipt.isNormalInvoice() && goodsReceipt.getInvoiceAmount() == goodsReceipt.getInvoiceamountdue()) {
                        amtDue = goodsReceipt.getInvoiceamountdue();
                    } else {
                        List ll = Collections.EMPTY_LIST;
                        reqMap.put("grid", documentId);
                        reqMap.put("asofdate", asofDate);
                        if (goodsReceipt.isIsExpenseType()) {
                            ll = accGoodsReceiptCommon.getExpGRAmountDue(reqMap, goodsReceipt);
                        } else {
                            ll = accGoodsReceiptCommon.getGRAmountDue(reqMap, goodsReceipt);
                        }
                        amtDue = (Double) ll.get(1);
                    }
                }
            } else if (type.equalsIgnoreCase("Debit Note")) {
                double dnAmount = 0;
                double invReturnAmt = 0;
                reqMap.put("debitnoteid", documentId);
                reqMap.put("asofdate", asofDate);
                KwlReturnObject dnpResult = accReceiptDao.getDebitNotePaymentDetail(reqMap);
                if (!dnpResult.getEntityList().isEmpty()) {
                    Iterator dnpItr = dnpResult.getEntityList().iterator();
                    while (dnpItr.hasNext()) {
                        Object[] objects = (Object[]) dnpItr.next();
                        double exchangeratefortransaction = objects[0] != null ? (Double) objects[0] : 1.0;
                        double dnPaidAmtInReceiptCurrency = objects[1] != null ? (Double) objects[1] : 0.0;
                        dnAmount += authHandler.round(dnPaidAmtInReceiptCurrency / exchangeratefortransaction, companyid);
                    }
                }
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), documentId);
                DebitNote note = (DebitNote) objItr.getEntityList().get(0);
                if (note != null) {
                    KwlReturnObject dnresult = accDebitNoteobj.getDNRowsFromVendorInvoice(reqMap);
                    List<DebitNoteDetail> rows = dnresult.getEntityList();
                    for (DebitNoteDetail detail : rows) {
                        Discount disc = detail.getDiscount();
                        if (disc != null) {
                            invReturnAmt += disc.getDiscountValue();
                        }
                    }
                }
                double linkAmount = 0;
                KwlReturnObject linkResult = accReceiptDao.getLinkDetailReceiptToDebitNote(reqMap);
                List<LinkDetailReceiptToDebitNote> detail = linkResult.getEntityList();
                for (LinkDetailReceiptToDebitNote ldr : detail) {
                    linkAmount += ldr.getAmountInDNCurrency();
                }
                amtDue = documentAmt - (dnAmount + invReturnAmt + linkAmount);
            } else if (type.equalsIgnoreCase("Credit Note")) {
                double cnAmount = 0;
                double invReturnAmt = 0;
                reqMap.put("creditnoteid", documentId);
                reqMap.put("asofdate", asofDate);
                KwlReturnObject cnpResult = accPaymentDAOobj.getCreditNotePaymentDetails(reqMap);
                if (!cnpResult.getEntityList().isEmpty()) {
                    Iterator cnpItr = cnpResult.getEntityList().iterator();
                    while (cnpItr.hasNext()) {
                        Object[] objects = (Object[]) cnpItr.next();
                        double exchangeratefortransaction = objects[0] != null ? (Double) objects[0] : 1.0;
                        double cnPaidAmtInReceiptCurrency = objects[1] != null ? (Double) objects[1] : 0.0;
                        cnAmount += authHandler.round(cnPaidAmtInReceiptCurrency / exchangeratefortransaction, companyid);
                    }
                }
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), documentId);
                CreditNote note = (CreditNote) objItr.getEntityList().get(0);
                if (note != null) {
                    KwlReturnObject result = accCreditNoteobj.getCNRowsFromInvoice(reqMap);
                    List<CreditNoteDetail> rows = result.getEntityList();
                    for (CreditNoteDetail detail : rows) {
                        Discount disc = detail.getDiscount();
                        if (disc != null) {
                            invReturnAmt += disc.getDiscountValue();
                        }
                    }
                }
                double linkAmount = 0;
                KwlReturnObject cnLinkResult = accVendorPaymentDao.getLinkDetailPaymentToCreditNote(reqMap);
                List<LinkDetailPaymentToCreditNote> linkDetail = cnLinkResult.getEntityList();
                for (LinkDetailPaymentToCreditNote ldr : linkDetail) {
                    linkAmount += ldr.getAmountInCNCurrency();
                }
                amtDue = documentAmt - (cnAmount + invReturnAmt + linkAmount);
            }
        }
        amtDue = authHandler.round(amtDue, companyid);
        return amtDue;
    }

    public double getInvDisountOnAmt(String id, double withoutTAmt, boolean isWithoutInventory) throws ServiceException {
        Discount discountObj = null;
        if (isWithoutInventory) {
            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(BillingInvoice.class.getName(), id);
            BillingInvoice billingInvoice = (BillingInvoice) objItr.getEntityList().get(0);
            if (billingInvoice.getDiscount() == null) {
                return 0;
            }
            discountObj = billingInvoice.getDiscount();
        } else {
            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), id);
            Invoice invoice = (Invoice) objItr.getEntityList().get(0);
            if (invoice.getDiscount() == null) {
                return 0;
            }
            discountObj = invoice.getDiscount();
        }
        double disc = 0;
        if (discountObj != null) {
            if (discountObj.isInPercent() && discountObj.getDiscount() > 0 && discountObj.getDiscount() <= 100.0) {
                disc = withoutTAmt * discountObj.getDiscount() / 100;
            } else {
                disc = discountObj.getDiscount();
            }
        } else {
            return 0;
        }
        return disc;
    }

    public ModelAndView getVendorLedger(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter(Constants.limit);
            int reportid = !StringUtil.isNullOrEmpty(request.getParameter("reportid")) ? Integer.parseInt(request.getParameter("reportid")) : -1;
            if(reportid==Constants.SOA_VENDOR_ACCOUNT_STATEMENT_REPORTID){
                jobj = getVendorAccountStatement(request,false);
            }else{
                jobj = getVendorLedger(request,false);
            }
            JSONArray jArr = jobj.getJSONArray(Constants.RES_data);
            JSONArray pagedJson = jArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            jobj.put(Constants.RES_data, pagedJson);
            jobj.put(Constants.RES_count, jArr.length());
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getVendorLedger(HttpServletRequest request, boolean isExport) throws ServiceException, SessionExpiredException, UnsupportedEncodingException {
        String start = request.getParameter(Constants.start);
        String limit = request.getParameter(Constants.limit);
        JSONObject jobj = new JSONObject();
        try {
            JSONArray jArr = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            boolean invoiceAmountDueFilter = true;
            if (request.getParameter("invoiceAmountDueFilter") != null) {
                invoiceAmountDueFilter = Boolean.parseBoolean(request.getParameter("invoiceAmountDueFilter"));
            }
            boolean isPostDatedCheque = false;
            if (request.getParameter("isPostDatedCheque") != null) {
                isPostDatedCheque = Boolean.parseBoolean(request.getParameter("isPostDatedCheque"));
            }
            boolean isSortedOnCreationDate = false;
            if (request.getParameter("isSortedOnCreationDate") != null) {
                isSortedOnCreationDate = Boolean.parseBoolean(request.getParameter("isSortedOnCreationDate"));
            }
            DateFormat df = authHandler.getDateOnlyFormat();
//            Date startDate = df.parse(request.getParameter("stdate"));
            boolean isAged = request.getParameter("isAged") != null ? Boolean.parseBoolean(request.getParameter("isAged")) : false;
            Date startDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) {
                startDate = df.parse(request.getParameter("stdate"));//ERP-32676 - date parse exception
            } else {
                if (isAged) {
                    startDate = df.parse(Constants.opening_Date);
                }
            }
            Date endDate = df.parse(request.getParameter("enddate"));
            Date asofDate = df.parse(request.getParameter("asofdate"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String vendorIds = isAged ? request.getParameter("custVendorID") : request.getParameter("vendorIds");
            String withoutinventory = request.getParameter("withoutinventory");
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("vendorIds", vendorIds);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put("startDate", new Date(0));// As we needed opening+period transactions hence new Date(0) is putted instead of  startDate
            requestParams.put("endDate", endDate);
            requestParams.put("isPostDatedCheque", isPostDatedCheque);
            requestParams.put("isSortedOnCreationDate", isSortedOnCreationDate);
            String dir = "";
            String sort = "";
            
            KwlReturnObject companyKwlObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company companyObj = (Company) companyKwlObj.getEntityList().get(0);
            int countryid = !StringUtil.isNullOrEmpty(companyObj.getCountry().getID())?Integer.parseInt(companyObj.getCountry().getID()):0;
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }

            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
            }
            if (!StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            }

            boolean isAdvanceSearch = false;
            String invoiceSearchJson = "";
            String receiptSearchJson = "";
            String cnSearchJson = "";
            String dnSearchJson = "";
            String makePaymentSearchJson = "";

            if (requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Filter_Criteria) != null) {
                if (requestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                searchJson = requestParams.get(Constants.Acc_Search_Json).toString();
                if (!StringUtil.isNullOrEmpty(searchJson)) {
                    isAdvanceSearch = true;
                    requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    HashMap<String, Object> reqPar1 = new HashMap<>();
                    reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                    reqPar1.put(Constants.Acc_Search_Json, searchJson);
                    reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    invoiceSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.remove(Constants.moduleid);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    receiptSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    dnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    cnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    makePaymentSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                }
            }
            requestParams.put("invoiceSearchJson", invoiceSearchJson);
            requestParams.put("receiptSearchJson", receiptSearchJson);
            requestParams.put("cnSearchJson", cnSearchJson);
            requestParams.put("dnSearchJson", dnSearchJson);
            requestParams.put("makePaymentSearchJson", makePaymentSearchJson);
            requestParams.put("isAdvanceSearch", isAdvanceSearch);
            requestParams.put("showDishonouredPayment", true);

            KwlReturnObject vendorLedger = accInvoiceDAOobj.getVendorLedgerReport(requestParams);
            List vendorLedgerList = vendorLedger.getEntityList();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);

            Set<String> vendorSet = new HashSet();
            Set<String> vendorDueTransSet = new HashSet();
            double balanceAmtInBase = 0;
            double balanceAmount = 0;
            String prevVendor = "";
            String vendorEmailId = "";
            HashMap<String, Object> addrRequestParams = new HashMap<String, Object>();
            addrRequestParams.put(Constants.companyKey, companyid);
            addrRequestParams.put("isBillingAddress", true);
            addrRequestParams.put("isDefaultAddress", true);

//            jobj.put(Constants.RES_count,vendorLedgerList.size()); //total count for paging purpose
            for (int i = 0; i < vendorLedgerList.size(); i++) {
                Object[] tempVendorLedger = (Object[]) vendorLedgerList.get(i);
                String type = (String) tempVendorLedger[0];
                String invoiceId = (String) tempVendorLedger[1]; // if(type=='goodsreceipt') ==> goodsreceipt.id, if(type=='payment') ==> payment.id, if(type=='debitnote') ==> debitnote.id
                String invoiceNumber = (String) tempVendorLedger[2]; // if(type=='goodsreceipt') ==> goodsreceipt.grnumber, if(type=='payment') ==> payment.paymentnumber, if(type=='debitnote') ==> debitnote.dnnumber
                String jeId = tempVendorLedger[3] == null ? "" : (String) tempVendorLedger[3]; // journalentry.id
                String memo = StringUtil.isNullOrEmpty((String) tempVendorLedger[4]) ? "" : (String) tempVendorLedger[4]; // if(type=='goodsreceipt') ==> goodsreceipt.memo, if(type=='payment') ==> payment.memo, if(type=='debitnote') ==> debitnote.memo
                String currencyid = StringUtil.isNullOrEmpty((String) tempVendorLedger[5]) ? sessionHandlerImpl.getCurrencyID(request) : (String) tempVendorLedger[5]; // if(type=='goodsreceipt') ==> goodsreceipt.currency, if(type=='payment') ==> payment.currency, if(type=='debitnote') ==> debitnote.currency
                double amount = (Double) tempVendorLedger[6]; // if(type=='goodsreceipt') ==> jedetail.amount, if(type=='payment') ==> paymentdetails.amount, if(type=='debitnote') ==> jedetail.amount
                String jeEntryNumber = tempVendorLedger[7] == null ? "" : (String) tempVendorLedger[7];
                Date jeEntryDate = (Date) tempVendorLedger[8];
                double jeEntryExternalCurrencyRate = (Double) tempVendorLedger[9];
                String invoiceVendorId = (String) tempVendorLedger[10];
                String invoiceVendorName = (String) tempVendorLedger[11];
                String invoiceVendorCode = (String) tempVendorLedger[18];
                int openingtransactionFlag = Integer.parseInt(tempVendorLedger[16].toString());
                boolean isOpeningBalanceTransaction = false;
                if (openingtransactionFlag == 1) {
                    isOpeningBalanceTransaction = true;
                }
                
                boolean isConversionRateFromCurrencyToBase = false;
                int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempVendorLedger[17].toString());
                if (conversionRateFromCurrencyToBaseFlag == 1) {
                    isConversionRateFromCurrencyToBase = true;
                }

                if (!prevVendor.equals(invoiceVendorId)) {
                    prevVendor = invoiceVendorId;
                    balanceAmtInBase = 0;
                    balanceAmount = 0;
                }
                
                HashMap<String, Object> reqMap = AccountingManager.getGlobalParams(request);
                reqMap.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
                reqMap.put("startDate", startDate);
                reqMap.put("asofDate", asofDate);
                reqMap.put("invoiceVendorId", invoiceVendorId);

                if (vendorSet.add(invoiceVendorId)) { // For each vendor putting Accurred Balance detail once. 
                    JSONObject opnJSON = accReportsService.calculateVendorAccuredBalance(vendorLedgerList, reqMap);
                    balanceAmtInBase = opnJSON.getDouble("balanceAmountInBase");
                    opnJSON.put("accId", invoiceVendorId);
                    opnJSON.put("accName", invoiceVendorName);
                    opnJSON.put("accCode", invoiceVendorCode);
                    opnJSON.put("categoryName", invoiceVendorName);
                    jArr.put(opnJSON);
                }

                if (!accReportsService.isPeriodWiseOpeningTransaction(jeEntryDate, startDate)) {// this condition will be true for those transaction which falls in selected period. i.e below code is for Period trsactions only
                    reqMap.put("isOpeningBalanceTransaction", isOpeningBalanceTransaction);
                    reqMap.put("transactionAmount", amount);
                    reqMap.put("invoiceId", invoiceId);
                    reqMap.put("type", type);
                    amount = accReportsService.getAmountOfTransactionForVendorSOA(reqMap);
                    if (amount <= 0) { //if amount is zero then no need to show data in SOA Report so continue with next record
                        continue;
                    }

                    KWLCurrency currency = null;
                    if (!StringUtil.isNullOrEmpty(currencyid)) {
                        KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                        currency = (KWLCurrency) curresult1.getEntityList().get(0);
                    }

                    if(!invoiceAmountDueFilter){
                        vendorDueTransSet.add(invoiceVendorId);
                    }
                    
                    jobjTemp = new JSONObject();
                    jobjTemp.put("type", type);
                    jobjTemp.put("invoiceId", invoiceId);
                    jobjTemp.put(Constants.billid, invoiceId);
                    jobjTemp.put("noteid", invoiceId);
                    jobjTemp.put("referid", UUID.randomUUID().toString());
                    jobjTemp.put("invoiceNumber", invoiceNumber);
                    jobjTemp.put("jeId", jeId);
                    jobjTemp.put("memo", memo);
                    jobjTemp.put(Constants.currencyKey, StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getCurrencyID() : currencyid);
                    jobjTemp.put("currencysymbol", StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getSymbol() : currency.getSymbol());
                    jobjTemp.put("currencycode", StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getCurrencyCode() : currency.getCurrencyCode());
                    jobjTemp.put("jeEntryNumber", jeEntryNumber);
                    jobjTemp.put("jeEntryDate", df.format(jeEntryDate));
                    jobjTemp.put("jeEntryExternalCurrencyRate", jeEntryExternalCurrencyRate);
                    jobjTemp.put("ExternalCurrencyRate","1 "+baseCurrency.getCurrencyCode()+" = "+((isConversionRateFromCurrencyToBase && isOpeningBalanceTransaction) ? 1 / jeEntryExternalCurrencyRate : jeEntryExternalCurrencyRate) +" "+currency.getCurrencyCode());
                    jobjTemp.put("accId", invoiceVendorId);
                    jobjTemp.put("accName", invoiceVendorName);
                    jobjTemp.put("accCode", invoiceVendorCode);
                    jobjTemp.put("amountDue", invoiceAmountDueFilter ? "" : amount);
                    addrRequestParams.put("vendorid", invoiceVendorId);
                    VendorAddressDetails vendorAddressDetail = accountingHandlerDAOobj.getVendorAddressObj(addrRequestParams);
                    vendorEmailId = vendorAddressDetail != null ? vendorAddressDetail.getEmailID() : "";
                    jobjTemp.put("billingEmail", vendorEmailId);
                    KwlReturnObject bAmt = null;
                    if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    }

                    double amountinbase = (Double) bAmt.getEntityList().get(0);
                    amountinbase = authHandler.round(amountinbase, companyid);
                    if (type.equalsIgnoreCase("Cash Purchase")) {
                        jobjTemp.put("debitAmountInBase", "");
                        jobjTemp.put("creditAmountInBase", amountinbase);
                        jobjTemp.put("balanceAmountInBase", balanceAmtInBase);
                        jobjTemp.put("debitAmount", "");
                        jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    } else if (type.equalsIgnoreCase("Vendor Invoice") || type.equalsIgnoreCase("Purchase Invoice")) {
                        balanceAmtInBase = balanceAmtInBase - amountinbase;
                        jobjTemp.put("debitAmountInBase", "");
                        jobjTemp.put("creditAmountInBase", amountinbase);
                        jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                        balanceAmount = balanceAmount - amount;
                        jobjTemp.put("debitAmount", "");
                        jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    } else if (type.equalsIgnoreCase("Payment Received") || type.equalsIgnoreCase(Constants.DISHONOURED_MAKE_PAYMENT)) {
                        balanceAmtInBase = balanceAmtInBase - amountinbase;
                        jobjTemp.put("debitAmountInBase", "");
                        jobjTemp.put("creditAmountInBase", amountinbase);
                        jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                        balanceAmount = balanceAmount - amount;
                        jobjTemp.put("debitAmount", "");
                        jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    } else if (type.equalsIgnoreCase("Credit Note")) {
                        balanceAmtInBase = balanceAmtInBase - amountinbase;
                        jobjTemp.put("debitAmountInBase", "");
                        jobjTemp.put("creditAmountInBase", amountinbase);
                        jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                        balanceAmount = balanceAmount - amount;
                        jobjTemp.put("debitAmount", "");
                        jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    } else {  //if((type.equalsIgnoreCase("Payment Made")) || (type.equalsIgnoreCase("Debit Note")))
                        double tdsAmount = 0.0;
                        KwlReturnObject companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                        Company company = (Company) companyResult.getEntityList().get(0);
                        if (company != null && company.getCountry() != null && Constants.indian_country_id == Integer.parseInt(company.getCountry().getID())) {
                            KwlReturnObject advDetailResult = accountingHandlerDAOobj.getAdvancePayDetails(invoiceId);
                            if (advDetailResult.getEntityList().size() > 0) {
                                AdvanceDetail advDetail = (AdvanceDetail) advDetailResult.getEntityList().get(0);
                                if (advDetail != null) {
                                    amountinbase += advDetail.getTdsamount();// +TDS Amount for Advance Payment
                                    amount += advDetail.getTdsamount();// +TDS Amount for Advance Payment
                                    tdsAmount += advDetail.getTdsamount();// TDS Amount for Advance Payment
                                }
                            }
                        }
                        balanceAmtInBase = balanceAmtInBase + amountinbase;
                        jobjTemp.put("tdsAmount", tdsAmount > 0 ? tdsAmount:"");
                        jobjTemp.put("debitAmountInBase", amountinbase);
                        jobjTemp.put("creditAmountInBase", "");
                        jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                        balanceAmount = balanceAmount + amount;
                        jobjTemp.put("debitAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("creditAmount", "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    }
                    if(countryid == Constants.indian_country_id){
                        // TDS column added for Indian country
                        if( type.equalsIgnoreCase(Constants.CASH_PURCHASE) || type.equalsIgnoreCase(Constants.VENDOR_INVOICE)){
                            KwlReturnObject grResult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), invoiceId);
                            if(grResult.getEntityList() != null && grResult.getEntityList().size() > 0){
                                GoodsReceipt gr = (GoodsReceipt) grResult.getEntityList().get(0);
                                jobjTemp.put("tdsAmount",(gr != null && gr.getTdsAmount() > 0)? gr.getTdsAmount():"" );
                                jobjTemp.put(Constants.SUPPLIERINVOICENO, gr.getSupplierInvoiceNo()!=null? gr.getSupplierInvoiceNo():"");
                            }
                            
                        } else if(type.equalsIgnoreCase(Constants.DEBIT_NOTE)){
                            KwlReturnObject debitNoteResult = accountingHandlerDAOobj.loadObject(DebitNote.class.getName(), invoiceId);
                            if(debitNoteResult.getEntityList() != null && debitNoteResult.getEntityList().size() > 0){
                                DebitNote debitNote = (DebitNote) debitNoteResult.getEntityList().get(0);
                                if(debitNote != null && debitNote.getDnTaxEntryDetails() != null){
                                    Set<DebitNoteTaxEntry> rows = debitNote.getDnTaxEntryDetails();
                                    double tdsAmount = 0.0;
                                    for( DebitNoteTaxEntry row : rows ){
                                        if(row.isTDSAmount()){
                                            tdsAmount += row.getAmount();
                                        }
                                    }
                                    jobjTemp.put("tdsAmount", tdsAmount > 0 ? tdsAmount:"");
                                    jobjTemp.put(Constants.SUPPLIERINVOICENO, debitNote.getSupplierInvoiceNo()!=null? debitNote.getSupplierInvoiceNo():"");
                                }
                            }
                        } else if(!type.equalsIgnoreCase(Constants.PAYMENT_MADE)){
                            jobjTemp.put("tdsAmount","");
                        }
                    }
                    jArr.put(jobjTemp);
                    /*No need to keep following code pagedjson is already handled in ModelAndView*/
//                    if (!isExport) {
//                        if ((Integer.parseInt(start) + Integer.parseInt(limit)) <= jArr.length()) {
//                            break;
//                        }
//                    }
                }
            }
            
            if(!invoiceAmountDueFilter){
                removeZeroAmountAccruedBalances(jArr, vendorDueTransSet);
            }
            jobj.put(Constants.RES_data, jArr);
        } catch (ParseException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAccountsExceedingBudget : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAccountsExceedingBudget : " + ex.getMessage(), ex);
        }
        return jobj;
    }
    
    public JSONObject getVendorAccountStatement(HttpServletRequest request, boolean isExport) throws ServiceException, SessionExpiredException, UnsupportedEncodingException {
        String start = request.getParameter(Constants.start);
        String limit = request.getParameter(Constants.limit);
        JSONObject jobj = new JSONObject();
        try {
            JSONArray jArr = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            boolean invoiceAmountDueFilter = true;
            if (request.getParameter("invoiceAmountDueFilter") != null) {
                invoiceAmountDueFilter = Boolean.parseBoolean(request.getParameter("invoiceAmountDueFilter"));
            }
            boolean isPostDatedCheque = false;
            if (request.getParameter("isPostDatedCheque") != null) {
                isPostDatedCheque = Boolean.parseBoolean(request.getParameter("isPostDatedCheque"));
            }
            boolean isSortedOnCreationDate = false;
            if (request.getParameter("isSortedOnCreationDate") != null) {
                isSortedOnCreationDate = Boolean.parseBoolean(request.getParameter("isSortedOnCreationDate"));
            }
            DateFormat df = authHandler.getDateOnlyFormat();
            Date startDate = df.parse(request.getParameter("stdate"));
            Date endDate = df.parse(request.getParameter("enddate"));
            Date asofDate = df.parse(request.getParameter("asofdate"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String vendorIds = request.getParameter("vendorIds");
            String withoutinventory = request.getParameter("withoutinventory");
            
            Calendar cal= Calendar.getInstance();
            cal.setTime(startDate);
            cal.add(Calendar.DATE, -1);  // number of days to add
            Date st = cal.getTime();
            Calendar end= Calendar.getInstance();
            end.setTime(asofDate);
            end.add(Calendar.DATE, 1);  // number of days to add
            Date ed=end.getTime();
                
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("vendorIds", vendorIds);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put("startDate", new Date(0));// As we needed opening+period transactions hence new Date(0) is putted instead of  startDate
            requestParams.put("endDate", endDate);
            requestParams.put("isPostDatedCheque", isPostDatedCheque);
            requestParams.put("isSortedOnCreationDate", isSortedOnCreationDate);
            String dir = "";
            String sort = "";
            
            KwlReturnObject companyKwlObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company companyObj = (Company) companyKwlObj.getEntityList().get(0);
            int countryid = !StringUtil.isNullOrEmpty(companyObj.getCountry().getID())?Integer.parseInt(companyObj.getCountry().getID()):0;
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
            }
            if (!StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            }

            boolean isAdvanceSearch = false;
            String invoiceSearchJson = "";
            String receiptSearchJson = "";
            String cnSearchJson = "";
            String dnSearchJson = "";
            String makePaymentSearchJson = "";

            if (requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Filter_Criteria) != null) {
                if (requestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                searchJson = requestParams.get(Constants.Acc_Search_Json).toString();
                if (!StringUtil.isNullOrEmpty(searchJson)) {
                    isAdvanceSearch = true;
                    requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    HashMap<String, Object> reqPar1 = new HashMap<>();
                    reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                    reqPar1.put(Constants.Acc_Search_Json, searchJson);
                    reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    invoiceSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.remove(Constants.moduleid);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    receiptSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    dnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    cnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    makePaymentSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                }
            }
            requestParams.put("invoiceSearchJson", invoiceSearchJson);
            requestParams.put("receiptSearchJson", receiptSearchJson);
            requestParams.put("cnSearchJson", cnSearchJson);
            requestParams.put("dnSearchJson", dnSearchJson);
            requestParams.put("makePaymentSearchJson", makePaymentSearchJson);
            requestParams.put("isAdvanceSearch", isAdvanceSearch);
            requestParams.put("showDishonouredPayment",true);
            KwlReturnObject vendorLedger = accInvoiceDAOobj.getVendorLedgerReport(requestParams);
            List vendorLedgerList = vendorLedger.getEntityList();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);

            Set<String> vendorSet = new HashSet();
            Set<String> vendorDueTransSet = new HashSet();
            double balanceAmtInBase = 0;
            double balanceAmount = 0;
            String prevVendor = "";
            String vendorEmailId = "";
            HashMap<String, Object> addrRequestParams = new HashMap<String, Object>();
            addrRequestParams.put(Constants.companyKey, companyid);
            addrRequestParams.put("isBillingAddress", true);
            addrRequestParams.put("isDefaultAddress", true);

//            jobj.put(Constants.RES_count,vendorLedgerList.size()); //total count for paging purpose
            for (int i = 0; i < vendorLedgerList.size(); i++) {
                Object[] tempVendorLedger = (Object[]) vendorLedgerList.get(i);
                String type = (String) tempVendorLedger[0];
                String invoiceId = (String) tempVendorLedger[1]; // if(type=='goodsreceipt') ==> goodsreceipt.id, if(type=='payment') ==> payment.id, if(type=='debitnote') ==> debitnote.id
                String invoiceNumber = (String) tempVendorLedger[2]; // if(type=='goodsreceipt') ==> goodsreceipt.grnumber, if(type=='payment') ==> payment.paymentnumber, if(type=='debitnote') ==> debitnote.dnnumber
                String jeId = tempVendorLedger[3] == null ? "" : (String) tempVendorLedger[3]; // journalentry.id
                String memo = StringUtil.isNullOrEmpty((String) tempVendorLedger[4]) ? "" : (String) tempVendorLedger[4]; // if(type=='goodsreceipt') ==> goodsreceipt.memo, if(type=='payment') ==> payment.memo, if(type=='debitnote') ==> debitnote.memo
                String currencyid = StringUtil.isNullOrEmpty((String) tempVendorLedger[5]) ? sessionHandlerImpl.getCurrencyID(request) : (String) tempVendorLedger[5]; // if(type=='goodsreceipt') ==> goodsreceipt.currency, if(type=='payment') ==> payment.currency, if(type=='debitnote') ==> debitnote.currency
                double amount = (Double) tempVendorLedger[6]; // if(type=='goodsreceipt') ==> jedetail.amount, if(type=='payment') ==> paymentdetails.amount, if(type=='debitnote') ==> jedetail.amount
                String jeEntryNumber = tempVendorLedger[7] == null ? "" : (String) tempVendorLedger[7];
                Date jeEntryDate = (Date) tempVendorLedger[8];
                double jeEntryExternalCurrencyRate = (Double) tempVendorLedger[9];
                String invoiceVendorId = (String) tempVendorLedger[10];
                String invoiceVendorName = (String) tempVendorLedger[11];
                int openingtransactionFlag = Integer.parseInt(tempVendorLedger[16].toString());
                boolean isOpeningBalanceTransaction = false;
                if (openingtransactionFlag == 1) {
                    isOpeningBalanceTransaction = true;
                }
                String invoiceVendorCode = (String) tempVendorLedger[18];
                String VendorID = tempVendorLedger[19].toString();
                String VendorAccountID = "";
                Vendor vendor = null;
                if(!StringUtil.isNullOrEmpty(VendorID)){
                    KwlReturnObject kwlVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), VendorID);
                    vendor = (Vendor) kwlVendor.getEntityList().get(0);
                    VendorAccountID = vendor.getAccount().getID();
                }

                boolean isConversionRateFromCurrencyToBase = false;
                int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempVendorLedger[17].toString());
                if (conversionRateFromCurrencyToBaseFlag == 1) {
                    isConversionRateFromCurrencyToBase = true;
                }

                if (!prevVendor.equals(invoiceVendorId)) {
                    prevVendor = invoiceVendorId;
                    balanceAmtInBase = 0;
                    balanceAmount = 0;
                }
                
                HashMap<String, Object> reqMap = AccountingManager.getGlobalParams(request);
                reqMap.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
                reqMap.put("startDate", startDate);
                reqMap.put("asofDate", asofDate);
                reqMap.put("invoiceVendorId", invoiceVendorId);
                reqMap.put("VendorAccountID", VendorAccountID);

                if (vendorSet.add(invoiceVendorId)) { // For each vendor putting Accurred Balance detail once. 
                    JSONObject opnJSON = accReportsService.calculateVendorAccuredBalance(vendorLedgerList, reqMap);
                    balanceAmtInBase = opnJSON.getDouble("balanceAmountInBase");
                    opnJSON.put("accId", invoiceVendorId);
                    opnJSON.put("accName", invoiceVendorName);
                    opnJSON.put("accCode", invoiceVendorCode);
                    opnJSON.put("categoryName", invoiceVendorName);
                    jArr.put(opnJSON);
                }

                if (!accReportsService.isPeriodWiseOpeningTransaction(jeEntryDate, startDate)) {// this condition will be true for those transaction which falls in selected period. i.e below code is for Period trsactions only
                    reqMap.put("isOpeningBalanceTransaction", isOpeningBalanceTransaction);
                    reqMap.put("transactionAmount", amount);
                    reqMap.put("invoiceId", invoiceId);
                    reqMap.put("type", type);
                    amount = accReportsService.getAmountOfTransactionForVendorSOA(reqMap);
                    if (amount <= 0) { //if amount is zero then no need to show data in SOA Report so continue with next record
                        continue;
                    }

                    KWLCurrency currency = null;
                    if (!StringUtil.isNullOrEmpty(currencyid)) {
                        KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                        currency = (KWLCurrency) curresult1.getEntityList().get(0);
                    }

                    if(!invoiceAmountDueFilter){
                        vendorDueTransSet.add(invoiceVendorId);
                    }
                    
                    jobjTemp = new JSONObject();
                    jobjTemp.put("type", type);
                    jobjTemp.put("invoiceId", invoiceId);
                    jobjTemp.put(Constants.billid, invoiceId);
                    jobjTemp.put("noteid", invoiceId);
                    jobjTemp.put("referid", UUID.randomUUID().toString());
                    jobjTemp.put("invoiceNumber", invoiceNumber);
                    jobjTemp.put("jeId", jeId);
                    jobjTemp.put("memo", memo);
                    jobjTemp.put(Constants.currencyKey, StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getCurrencyID() : currencyid);
                    jobjTemp.put("currencysymbol", StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getSymbol() : currency.getSymbol());
                    jobjTemp.put("currencycode", StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getCurrencyCode() : currency.getCurrencyCode());
                    jobjTemp.put("jeEntryNumber", jeEntryNumber);
                    jobjTemp.put("jeEntryDate", df.format(jeEntryDate));
                    jobjTemp.put("jeEntryExternalCurrencyRate", jeEntryExternalCurrencyRate);
                    jobjTemp.put("ExternalCurrencyRate","1 "+baseCurrency.getCurrencyCode()+" = "+((isConversionRateFromCurrencyToBase && isOpeningBalanceTransaction) ? 1 / jeEntryExternalCurrencyRate : jeEntryExternalCurrencyRate) +" "+currency.getCurrencyCode());
                    jobjTemp.put("accId", invoiceVendorId);
                    jobjTemp.put("accName", invoiceVendorName);
                    jobjTemp.put("accCode", invoiceVendorCode);
                    jobjTemp.put("amountDue", invoiceAmountDueFilter ? "" : amount);
                    jobjTemp.put("documentStatus", accReportsService.getDocumentStatusForVendorAccountStatement(reqMap));//get Document Status Based on Amount due as per "as of date"
                    addrRequestParams.put("vendorid", invoiceVendorId);
                    VendorAddressDetails vendorAddressDetail = accountingHandlerDAOobj.getVendorAddressObj(addrRequestParams);
                    vendorEmailId = vendorAddressDetail != null ? vendorAddressDetail.getEmailID() : "";
                    jobjTemp.put("billingEmail", vendorEmailId);
                    KwlReturnObject bAmt = null;
                    if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    }

                    double amountinbase = (Double) bAmt.getEntityList().get(0);
                    amountinbase = authHandler.round(amountinbase, companyid);
                    
                    double tot_amountinbase = 0;
                    List<JournalEntryDetail> listJEDetail = new ArrayList<>();
                        
                    reqMap.put("type", type);
                    reqMap.put("invoiceId", invoiceId);
                    reqMap.put("amount", amount);
                    reqMap.put("amountinbase", amountinbase);
                    reqMap.put("jeId", jeId);
      
                    double[] amountArray = accReportsService.getSOAVendorAmountFromJEDetail(reqMap, listJEDetail);
                            
                    amount = amountArray[0];
                    amountinbase = amountArray[1];
                            
                    if (type.equalsIgnoreCase("Cash Purchase")) {
                        jobjTemp.put("debitAmountInBase", "");
                        jobjTemp.put("creditAmountInBase", amountinbase);
                        jobjTemp.put("balanceAmountInBase", balanceAmtInBase);
                        jobjTemp.put("debitAmount", "");
                        jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    } else if (type.equalsIgnoreCase("Vendor Invoice") || type.equalsIgnoreCase("Purchase Invoice")) {
                        balanceAmtInBase = balanceAmtInBase - amountinbase;
                        jobjTemp.put("debitAmountInBase", "");
                        jobjTemp.put("creditAmountInBase", amountinbase);
                        jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                        balanceAmount = balanceAmount - amount;
                        jobjTemp.put("debitAmount", "");
                        jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    } else if (type.equalsIgnoreCase("Payment Received")) {
                        balanceAmtInBase = balanceAmtInBase - amountinbase;
                        jobjTemp.put("debitAmountInBase", "");
                        jobjTemp.put("creditAmountInBase", amountinbase);
                        jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                        balanceAmount = balanceAmount - amount;
                        jobjTemp.put("debitAmount", "");
                        jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    } else if (type.equalsIgnoreCase("Credit Note")) {
                        balanceAmtInBase = balanceAmtInBase - amountinbase;
                        jobjTemp.put("debitAmountInBase", "");
                        jobjTemp.put("creditAmountInBase", amountinbase);
                        jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                        balanceAmount = balanceAmount - amount;
                        jobjTemp.put("debitAmount", "");
                        jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    } else if (type.equalsIgnoreCase(Constants.DISHONOURED_MAKE_PAYMENT)) {
                        balanceAmtInBase = balanceAmtInBase - amountinbase;
                        jobjTemp.put("debitAmountInBase", "");
                        jobjTemp.put("creditAmountInBase", amountinbase);
                        jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                        balanceAmount = balanceAmount - amount;
                        jobjTemp.put("debitAmount", "");
                        jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    }else if (type.equalsIgnoreCase(Constants.DISHONOURED_RECEIVE_PAYMENT)) {
                        balanceAmtInBase = balanceAmtInBase + amountinbase;
                        jobjTemp.put("debitAmountInBase", amountinbase);
                        jobjTemp.put("creditAmountInBase", "");
                        jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                        balanceAmount = balanceAmount + amount;
                        jobjTemp.put("debitAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("creditAmount", "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    }else {  //if((type.equalsIgnoreCase("Payment Made")) || (type.equalsIgnoreCase("Debit Note")))
                        double tdsAmount = 0.0;
                        KwlReturnObject companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                        Company company = (Company) companyResult.getEntityList().get(0);
                        if (company != null && company.getCountry() != null && Constants.indian_country_id == Integer.parseInt(company.getCountry().getID())) {
                            KwlReturnObject advDetailResult = accountingHandlerDAOobj.getAdvancePayDetails(invoiceId);
                            if (advDetailResult.getEntityList().size() > 0) {
                                AdvanceDetail advDetail = (AdvanceDetail) advDetailResult.getEntityList().get(0);
                                if (advDetail != null) {
                                    /*
                                     * Below tow line hide due to incorrect amount 
                                     * in Vendor SOA Report of Debit and Balance 
                                     * For more details please check SDP-14591
                                     */
//                                    amountinbase += advDetail.getTdsamount();// +TDS Amount for Advance Payment
//                                    amount += advDetail.getTdsamount();// +TDS Amount for Advance Payment
                                    tdsAmount += advDetail.getTdsamount();// TDS Amount for Advance Payment
                                }
                            }
                        }
                        balanceAmtInBase = balanceAmtInBase + amountinbase;
                        jobjTemp.put("tdsAmount", tdsAmount > 0 ? tdsAmount:"");
                        jobjTemp.put("debitAmountInBase", amountinbase);
                        jobjTemp.put("creditAmountInBase", "");
                        jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                        balanceAmount = balanceAmount + amount;
                        jobjTemp.put("debitAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                        jobjTemp.put("creditAmount", "");
                        jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    }
                    if(countryid == Constants.indian_country_id){
                        // TDS column added for Indian country
                        if( type.equalsIgnoreCase(Constants.CASH_PURCHASE) || type.equalsIgnoreCase(Constants.VENDOR_INVOICE)){
                            KwlReturnObject grResult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), invoiceId);
                            if(grResult.getEntityList() != null && grResult.getEntityList().size() > 0){
                                GoodsReceipt gr = (GoodsReceipt) grResult.getEntityList().get(0);
                                jobjTemp.put("tdsAmount",(gr != null && gr.getTdsAmount() > 0)? gr.getTdsAmount():"" );
                                jobjTemp.put(Constants.SUPPLIERINVOICENO, gr.getSupplierInvoiceNo()!=null? gr.getSupplierInvoiceNo():"");
                            }
                            
                        } else if(type.equalsIgnoreCase(Constants.DEBIT_NOTE)){
                            KwlReturnObject debitNoteResult = accountingHandlerDAOobj.loadObject(DebitNote.class.getName(), invoiceId);
                            if(debitNoteResult.getEntityList() != null && debitNoteResult.getEntityList().size() > 0){
                                DebitNote debitNote = (DebitNote) debitNoteResult.getEntityList().get(0);
                                if(debitNote != null && debitNote.getDnTaxEntryDetails() != null){
                                    Set<DebitNoteTaxEntry> rows = debitNote.getDnTaxEntryDetails();
                                    double tdsAmount = 0.0;
                                    for( DebitNoteTaxEntry row : rows ){
                                        if(row.isTDSAmount()){
                                            tdsAmount += row.getAmount();
                                        }
                                    }
                                    jobjTemp.put("tdsAmount", tdsAmount > 0 ? tdsAmount:"");
                                    jobjTemp.put(Constants.SUPPLIERINVOICENO, debitNote.getSupplierInvoiceNo()!=null? debitNote.getSupplierInvoiceNo():"");
                                }
                            }
                        } else if(!type.equalsIgnoreCase(Constants.PAYMENT_MADE)){
                            jobjTemp.put("tdsAmount","");
                        }
                    }
                    jArr.put(jobjTemp);
                    
                    //Add JEs with Foreign Gain/Loss posted separately.
                    for(JournalEntryDetail jeDetail : listJEDetail){
                        jobjTemp = new JSONObject();
                        jobjTemp.put("type", type);
                        jobjTemp.put("invoiceId", invoiceId);
                        jobjTemp.put(Constants.billid, invoiceId);
                        jobjTemp.put("noteid", invoiceId);
                        jobjTemp.put("referid", UUID.randomUUID().toString());
                        jobjTemp.put("invoiceNumber", invoiceNumber);
                        jobjTemp.put("jeId", jeDetail.getJournalEntry().getID());
                        jobjTemp.put("memo", jeDetail.getAccount().getAccountName());
                        jobjTemp.put(Constants.currencyKey, StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getCurrencyID() : currencyid);
                        jobjTemp.put("currencysymbol", StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getSymbol() : currency.getSymbol());
                        jobjTemp.put("currencycode", StringUtil.isNullOrEmpty(currencyid) ? baseCurrency.getCurrencyCode() : currency.getCurrencyCode());
                        jobjTemp.put("jeEntryNumber", jeDetail.getJournalEntry().getEntryNumber());
                        jobjTemp.put("jeEntryDate", df.format(jeDetail.getJournalEntry().getEntryDate()));
                        jobjTemp.put("jeEntryExternalCurrencyRate", jeEntryExternalCurrencyRate);
                        jobjTemp.put("ExternalCurrencyRate","1 "+baseCurrency.getCurrencyCode()+" = "+jeEntryExternalCurrencyRate +" "+currency.getCurrencyCode());
                        jobjTemp.put("accId", invoiceVendorId);
                        jobjTemp.put("accName", invoiceVendorName);
                        jobjTemp.put("accCode", invoiceVendorCode);
                        jobjTemp.put("categoryName", invoiceVendorName);
                        jobjTemp.put("amountDue", "");
                        jobjTemp.put("billingEmail", vendorEmailId);
                        
                        if(jeDetail.isDebit()){
                            balanceAmtInBase = balanceAmtInBase - jeDetail.getAmountinbase();
                            jobjTemp.put("debitAmountInBase", "");
                            jobjTemp.put("creditAmountInBase", authHandler.round(jeDetail.getAmountinbase(), companyid));
                            jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));

                            balanceAmount = balanceAmount - jeDetail.getAmount();
                            jobjTemp.put("debitAmount", "");
                            jobjTemp.put("creditAmount", (jeDetail.getAmount() != 0) ? authHandler.round(jeDetail.getAmount(), companyid) : "");
                            jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                        }else{
                            balanceAmtInBase = balanceAmtInBase + jeDetail.getAmountinbase();
                            jobjTemp.put("debitAmountInBase", authHandler.round(jeDetail.getAmountinbase(), companyid));
                            jobjTemp.put("creditAmountInBase", "");
                            jobjTemp.put("balanceAmountInBase", authHandler.round(balanceAmtInBase, companyid));

                            balanceAmount = balanceAmount + jeDetail.getAmount();
                            jobjTemp.put("debitAmount", (jeDetail.getAmount() != 0) ? authHandler.round(jeDetail.getAmount(), companyid) : "");
                            jobjTemp.put("creditAmount", "");
                            jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                        }
                        
                        jArr.put(jobjTemp);
                    }
                    
                    /*No need to keep following code pagedjson is already handled in ModelAndView*/
//                    if (!isExport) {
//                        if ((Integer.parseInt(start) + Integer.parseInt(limit)) <= jArr.length()) {
//                            break;
//                        }
//                    }
                }
            }
            if(!invoiceAmountDueFilter){
                removeZeroAmountAccruedBalances(jArr, vendorDueTransSet);
            }
            
            jobj.put(Constants.RES_data, jArr);
        } catch (ParseException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAccountsExceedingBudget : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAccountsExceedingBudget : " + ex.getMessage(), ex);
        }
        return jobj;
    }

    public double getAmountOfTransactionForVendorSOA(HashMap<String, Object> requestParams) throws SessionExpiredException, ParseException, ServiceException {
        String companyid = (String) requestParams.get(Constants.companyKey);
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        boolean invoiceAmountDueFilter = (requestParams.containsKey("invoiceAmountDueFilter") && requestParams.get("invoiceAmountDueFilter") != null) ? Boolean.parseBoolean(requestParams.get("invoiceAmountDueFilter").toString()) : false;
        boolean isOpeningBalanceTransaction = (requestParams.containsKey("isOpeningBalanceTransaction") && requestParams.get("isOpeningBalanceTransaction") != null) ? Boolean.parseBoolean(requestParams.get("isOpeningBalanceTransaction").toString()) : false;
        double amount = (requestParams.containsKey("transactionAmount") && requestParams.get("transactionAmount") != null) ? (Double) (requestParams.get("transactionAmount")) : 0;
        String type = (requestParams.containsKey("type") && requestParams.get("type") != null) ? requestParams.get("type").toString() : "";
        String invoiceId = (requestParams.containsKey("invoiceId") && requestParams.get("invoiceId") != null) ? requestParams.get("invoiceId").toString() : "";
        Date startDate = (requestParams.containsKey("startDate") && requestParams.get("startDate") != null) ? (Date) requestParams.get("startDate") : new Date();
        Date asofDate = (requestParams.containsKey("asofDate") && requestParams.get("asofDate") != null) ? (Date) requestParams.get("asofDate") : new Date();

        if (invoiceAmountDueFilter) {
            if (isOpeningBalanceTransaction) {  // if "select transaction" filter in SOA is "all" and transaction is openoing type .In this case amountdue calculated up to one day before of start date. 
                if (!type.equalsIgnoreCase("Payment Made")) {
                    Calendar startCal = Calendar.getInstance();
                    startCal.setTime(startDate);
                    startCal.add(Calendar.DATE, 0);
                    String sstart = authHandler.getDateOnlyFormat().format(startCal.getTime());
                    Date asOfDate = authHandler.getDateOnlyFormat().parse(sstart);
                    amount = getAsOnDateAmountDueForTransactions(requestParams, asOfDate, invoiceId, type, amount);
                }
            } else if (type.equalsIgnoreCase("Payment Made")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), invoiceId);
                Payment payment = (Payment) objItr.getEntityList().get(0);
                if (payment.getBankChargesAmount() > 0 && (payment.getJournalEntryForBankCharges() == null || StringUtil.isNullOrEmpty(payment.getJournalEntryForBankCharges().toString()))) {
                    amount -= payment.getBankChargesAmount();
                }
                if (payment.getBankInterestAmount() > 0 && (payment.getJournalEntryForBankInterest() == null || StringUtil.isNullOrEmpty(payment.getJournalEntryForBankInterest().toString()))) {
                    amount -= payment.getBankInterestAmount();
                }
            }
        } else { //if "select transaction" filter in SOA is "Outstanding". then only document will come which has amount due 
            double documentAmtDue = 0;
            if (type.equalsIgnoreCase("Cash Purchase")) {//Cash Purchse against vendor amount due is always zero.
                documentAmtDue = 0;
            } else if (type.equalsIgnoreCase("Payment Received")) { // For payment recived against vendor can be due only in case of refund
                documentAmtDue = 0;
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), invoiceId);
                Receipt receipt = (Receipt) objItr.getEntityList().get(0);
                if (receipt != null && !StringUtil.isNullOrEmpty(receipt.getVendor()) && receipt.getReceiptAdvanceDetails() != null && !receipt.getReceiptAdvanceDetails().isEmpty()) {//receipt against vendor receipt
                    HashMap<String, Object> reqParams1 = new HashMap();
                    reqParams1.put(Constants.companyKey, companyid);
                    reqParams1.put(Constants.df, df);
                    reqParams1.put("asofdate", df.format(asofDate));
                    documentAmtDue = AccInvoiceServiceHandler.getReceiptAmountDue(receipt, reqParams1, accReceiptDao);
                }
            } else if (type.equalsIgnoreCase("Payment Made")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), invoiceId);
                Payment payment = (Payment) objItr.getEntityList().get(0);
                HashMap<String, Object> reqParams1 = new HashMap();
                reqParams1.put(Constants.companyKey, companyid);
                reqParams1.put(Constants.df, df);
                reqParams1.put("asofdate", df.format(asofDate));
                documentAmtDue = AccGoodsReceiptServiceHandler.getPaymentAmountDue(payment, reqParams1, accVendorPaymentDao);
            } else { //other types are 1.Purchase Invoice, 2.Credit Note, 3.Debit Note which are coming in this lese part
                documentAmtDue = getAsOnDateAmountDueForTransactions(requestParams, asofDate, invoiceId, type, amount);
            }
            amount = documentAmtDue;
        }
        return amount;
    }
    
    public JSONObject calculateVendorAccuredBalance(List vendorLedgerList, HashMap<String, Object> requestParams) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        JSONObject openingJSON = new JSONObject();
        double totalOpeningInBase = 0;
        String gcurrencyid = requestParams.containsKey(Constants.globalCurrencyKey) ? requestParams.get(Constants.globalCurrencyKey).toString() : "";
        String vendorId = requestParams.containsKey("invoiceVendorId") ? requestParams.get("invoiceVendorId").toString() : "";
        Date startDate = (requestParams.containsKey("startDate") && requestParams.get("startDate") != null) ? (Date) requestParams.get("startDate") : new Date();
        String companyid = (String) requestParams.get("companyid");
        for (int i = 0; i < vendorLedgerList.size(); i++) {
            Object[] tempVendorLedger = (Object[]) vendorLedgerList.get(i);
            Date jeEntryDate = (Date) tempVendorLedger[8];
            String invoiceVendorId = (String) tempVendorLedger[10];
            
            if (vendorId.equals(invoiceVendorId) && accReportsService.isPeriodWiseOpeningTransaction(jeEntryDate, startDate)) {
                
                String type = (String) tempVendorLedger[0];
                String invoiceId = (String) tempVendorLedger[1]; 
                String currencyid = StringUtil.isNullOrEmpty((String) tempVendorLedger[5]) ? gcurrencyid : (String) tempVendorLedger[5]; 
                double amount = (Double) tempVendorLedger[6]; 
                double jeEntryExternalCurrencyRate = (Double) tempVendorLedger[9];
                int openingtransactionFlag = Integer.parseInt(tempVendorLedger[16].toString());
                boolean isOpeningBalanceTransaction = false;
                if (openingtransactionFlag == 1) {
                    isOpeningBalanceTransaction = true;
                }
                
                boolean isConversionRateFromCurrencyToBase = false;
                int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempVendorLedger[17].toString());
                if (conversionRateFromCurrencyToBaseFlag == 1) {
                    isConversionRateFromCurrencyToBase = true;
                }

                HashMap<String, Object> reqMap = new HashMap();
                reqMap.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                reqMap.put(Constants.globalCurrencyKey, requestParams.get(Constants.globalCurrencyKey));
                reqMap.put(Constants.df, requestParams.get(Constants.df));
                reqMap.put(Constants.userdf, requestParams.get(Constants.userdf));
                reqMap.put("invoiceAmountDueFilter", requestParams.get("invoiceAmountDueFilter"));
                reqMap.put("startDate", startDate);
                reqMap.put("asofDate", requestParams.get("asofDate"));
                reqMap.put("isOpeningBalanceTransaction", isOpeningBalanceTransaction);
                reqMap.put("transactionAmount", amount);
                reqMap.put("invoiceId", invoiceId);
                reqMap.put("type", type);

                amount = accReportsService.getAmountOfTransactionForVendorSOA(reqMap);
                if (amount <= 0) { //if amount is zero then no need to show data in SOA Report so continue with next record
                    continue;
                }

                KwlReturnObject bAmt = null;
                if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                }

                double amountinbase = (Double) bAmt.getEntityList().get(0);

                if (type.equalsIgnoreCase("Cash Purchase") || type.equalsIgnoreCase("Vendor Invoice") || type.equalsIgnoreCase("Purchase Invoice") || type.equalsIgnoreCase("Payment Received") || type.equalsIgnoreCase("Credit Note")) {
                     //Credit type account   
                    totalOpeningInBase -= amountinbase;
                } else {//Debit type account
                    totalOpeningInBase += amountinbase;
                }
            }
        }
        openingJSON.put("type", "Accrued Balance");
        openingJSON.put("debitAmount", "");
        openingJSON.put("creditAmount", "");
        openingJSON.put("balanceAmount", "");
        openingJSON.put("balanceAmountInBase", authHandler.round(totalOpeningInBase, companyid));
        if (totalOpeningInBase == 0) {//Nor Debit nor Credit
            openingJSON.put("debitAmountInBase", 0);
            openingJSON.put("creditAmountInBase", 0);
        } else if (totalOpeningInBase > 0) {// Debit
            openingJSON.put("debitAmountInBase", Math.abs(authHandler.round(totalOpeningInBase, companyid)));
            openingJSON.put("creditAmountInBase", "");
        } else { // Credit
            openingJSON.put("debitAmountInBase", "");
            openingJSON.put("creditAmountInBase", Math.abs(authHandler.round(totalOpeningInBase, companyid)));
        }
        return openingJSON;
    }

    public ModelAndView getTrialBalance(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            request.setAttribute("isOpeningBalanceFlag", true);
//                    jobj = getTrialBalance(request);
            JSONObject paramJObj = StringUtil.convertRequestToJsonObject(request);
                jobj = accReportsService.getTrialBalance(paramJObj);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView exportTrialBalanceJasper(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = true;
        String msg = "";
        ArrayList<TrialBalance> trialBalanceList = new ArrayList<TrialBalance>();
        ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
        Map<String, Object> financeDetailsMap = new HashMap<String, Object>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            KwlReturnObject compaccresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(),companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compaccresult.getEntityList().get(0);
            compaccresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) compaccresult.getEntityList().get(0);
            financeDetailsMap.put("CompanyName", company.getCompanyName());
            financeDetailsMap.put("CompanyAddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            financeDetailsMap.put("CompanyCurrency", company.getCurrency().getName() != null ? company.getCurrency().getName() : "");
            financeDetailsMap.put("CompanyCurrencySymbol", accCommonTablesDAO.getCustomCurrencyCode((company.getCurrency().getCurrencyCode() != null ? company.getCurrency().getCurrencyCode() : ""),companyid));
            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            Date end_Date = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));	//ERP-8442
            Calendar c = Calendar.getInstance();
            c.setTime(end_Date);
            c.add(Calendar.DATE, 0);
            String endDate1 = userdf.format(c.getTime());
            String startDate1 = userdf.format(authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
            String date1 = "Date Range : " + startDate1 + " to " + endDate1;
            financeDetailsMap.put("BankBookDateRange", date1);
            String fiscalstart = userdf.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(userdf.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);  //Check this line - VP
            String fiscalend = userdf.format(c1.getTime());
            String accPeriod = fiscalstart + " - " + fiscalend;
            financeDetailsMap.put("CompanyAccountingPeriod", accPeriod);
            request.setAttribute("isOpeningBalanceFlag", true);
//            JSONObject trialBalanceObj = getTrialBalance(request);
            JSONObject paramJObj = StringUtil.convertRequestToJsonObject(request);
            JSONObject trialBalanceObj = accReportsService.getTrialBalance(paramJObj);
            JSONArray trialBalanceDataArray = trialBalanceObj.getJSONArray(Constants.RES_data);
            double totalcredit = 0;
            double totaldebit = 0;
            double copening = 0;
            double dopening = 0;
            double cperiod = 0;
            double dperiod = 0;

            OnlyDatePojo datePojo = new OnlyDatePojo();
            Date date = new Date();
            datePojo.setDate(df.format(date));
            datePojoList.add(datePojo);

            for (int i = 0; i < trialBalanceDataArray.length(); i++) {
                JSONObject trialBalanceData = trialBalanceDataArray.getJSONObject(i);
                TrialBalance trialBalance = new TrialBalance();
                trialBalance.setCode(trialBalanceData.optString("acccode"));
                if (!trialBalanceData.optString("description").equals("")) {
                    trialBalance.setDescription(trialBalanceData.optString("description"));
                } else {
                    trialBalance.setDescription(trialBalanceData.optString("accountname"));
                }
                if (trialBalanceData.has("c_amount_open") && !trialBalanceData.get("c_amount_open").toString().equals("")) {
                    trialBalance.setCopening(authHandler.formattedCommaSeparatedAmount(trialBalanceData.optDouble("c_amount_open"), companyid));
                    copening += (trialBalanceData.optDouble("c_amount_open"));
                } else if (!extraCompanyPreferences.isShowZeroAmountAsBlank()) {
                    trialBalance.setCopening(authHandler.formattedCommaSeparatedAmount(0.0, companyid));
                }
                if (trialBalanceData.has("d_amount_open") && !trialBalanceData.get("d_amount_open").toString().equals("")) {
                    trialBalance.setDopening(authHandler.formattedCommaSeparatedAmount(trialBalanceData.optDouble("d_amount_open"), companyid));
                    dopening += (trialBalanceData.optDouble("d_amount_open"));
                } else if (!extraCompanyPreferences.isShowZeroAmountAsBlank()) {
                    trialBalance.setDopening(authHandler.formattedCommaSeparatedAmount(0.0, companyid));
                }
                if (trialBalanceData.has("c_amount_period") && !trialBalanceData.get("c_amount_period").toString().equals("")) {
                    trialBalance.setCredit(authHandler.formattedCommaSeparatedAmount(trialBalanceData.optDouble("c_amount_period"), companyid));
                    cperiod += (trialBalanceData.optDouble("c_amount_period"));
                } else if (!extraCompanyPreferences.isShowZeroAmountAsBlank()) {
                    trialBalance.setCredit(authHandler.formattedCommaSeparatedAmount(0.0, companyid));
                }
                if (trialBalanceData.has("d_amount_period") && !trialBalanceData.get("d_amount_period").toString().equals("")) {
                    trialBalance.setDebit(authHandler.formattedCommaSeparatedAmount(trialBalanceData.optDouble("d_amount_period"), companyid));
                    dperiod += (trialBalanceData.optDouble("d_amount_period"));
                } else if (!extraCompanyPreferences.isShowZeroAmountAsBlank()) {
                    trialBalance.setDebit(authHandler.formattedCommaSeparatedAmount(0.0, companyid));
                }
                if (trialBalanceData.has("c_amount") && !trialBalanceData.get("c_amount").toString().equals("")) {
                    trialBalance.setCending(authHandler.formattedCommaSeparatedAmount(trialBalanceData.optDouble("c_amount"), companyid));
                    totalcredit += (trialBalanceData.optDouble("c_amount"));
                } else if (!extraCompanyPreferences.isShowZeroAmountAsBlank()) {
                    trialBalance.setCending(authHandler.formattedCommaSeparatedAmount(0.0, companyid));
                }
                if (trialBalanceData.has("d_amount") && !trialBalanceData.get("d_amount").toString().equals("")) {
                    trialBalance.setDending(authHandler.formattedCommaSeparatedAmount(trialBalanceData.optDouble("d_amount"), companyid));
                    totaldebit += (trialBalanceData.optDouble("d_amount"));
                } else if (!extraCompanyPreferences.isShowZeroAmountAsBlank()) {
                    trialBalance.setDending(authHandler.formattedCommaSeparatedAmount(0.0, companyid));
                }
                trialBalanceList.add(trialBalance);
            }

            financeDetailsMap.put("debitTotal", authHandler.formattedCommaSeparatedAmount(dperiod, companyid));
            financeDetailsMap.put("creditTotal", authHandler.formattedCommaSeparatedAmount(cperiod, companyid));
            financeDetailsMap.put("dopeningTotal", authHandler.formattedCommaSeparatedAmount(dopening, companyid));
            financeDetailsMap.put("copeningTotal", authHandler.formattedCommaSeparatedAmount(copening, companyid));
            financeDetailsMap.put("dendingTotal", authHandler.formattedCommaSeparatedAmount(totaldebit, companyid));
            financeDetailsMap.put("cendingTotal", authHandler.formattedCommaSeparatedAmount(totalcredit, companyid));
            financeDetailsMap.put("format", "pdf");

            InputStream inputStream = null;
            if ("true".equals(request.getParameter("isPortrait"))) {
                if (extraCompanyPreferences.isShowAccountCodeInFinancialReport()) {
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TrialBalance.jrxml");
                } else {
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TrialBalanceWithoutAccountCode.jrxml");
                }
            } else {
                if (extraCompanyPreferences.isShowAccountCodeInFinancialReport()) {
                     inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TrialBalanceLandscape.jrxml");
                } else {
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TrialBalanceLandscapeWithoutAccountCode.jrxml");
                }
            }

            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(trialBalanceList);
            financeDetailsMap.put("TrialBalanceTableData", beanColDataSource);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, financeDetailsMap, new JRBeanCollectionDataSource(datePojoList));
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            response.setHeader("Content-Disposition", "attachment;filename=" + "TrialBalance_v1.pdf");
            exp.exportReport();
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = "" + ex.getMessage();
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", "");
    }

    private class LayoutAccountComp implements Comparator<GroupAccMap> {

        private boolean sortOnType;
        private boolean directionDesc;

        private LayoutAccountComp(boolean sortOnType1, boolean direction1) {
            sortOnType = sortOnType1;
            directionDesc = direction1;
        }

        @Override
        public int compare(GroupAccMap o1, GroupAccMap o2) {
            String o1_Code = (o1.getAccount().getAcccode() == null) ? "" : o1.getAccount().getAcccode();
            String o2_Code = (o2.getAccount().getAcccode() == null) ? "" : o2.getAccount().getAcccode();

            if (sortOnType) {
                if (StringUtil.equal(o1.getAccount().getGroup().getName(), o2.getAccount().getGroup().getName())) {
                    if (StringUtil.equal(o1_Code, o2_Code)) {
                        return directionDesc ? o2.getAccount().getName().compareTo(o1.getAccount().getName()) : o1.getAccount().getName().compareTo(o2.getAccount().getName());
                    } else {
                        return directionDesc ? o2_Code.compareTo(o1_Code) : o1_Code.compareTo(o2_Code);
                    }
                } else {
                    return directionDesc ? o2.getAccount().getGroup().getName().compareTo(o1.getAccount().getGroup().getName()) : o1.getAccount().getGroup().getName().compareTo(o2.getAccount().getGroup().getName());
                }
            } else {
                if (StringUtil.equal(o1_Code, o2_Code)) {
                    return directionDesc ? o2.getAccount().getName().compareTo(o1.getAccount().getName()) : o1.getAccount().getName().compareTo(o2.getAccount().getName());
                } else {
                    return directionDesc ? o2_Code.compareTo(o1_Code) : o1_Code.compareTo(o2_Code);
                }
            }
        }
    }

    class SubLedgerComparator implements Comparator<GeneralLedger> {

        public int compare(GeneralLedger gl1, GeneralLedger gl2) {
            int sort;
            // Sort on Header first 
            sort = gl1.getHeaderString().compareTo(gl2.getHeaderString());
            if (sort == 0) {
                // If Header is equal, sort on Account
                sort = gl1.getAccname().compareTo(gl2.getAccname());
            }
            if (sort == 0) {
                // If Header and Account is equal, sort on Inner String.
                sort = gl1.getInnerString().compareTo(gl2.getInnerString());
            }
            return sort;
        }
    }

     class GLedgerComparator implements Comparator<GeneralLedger> {
        public int compare(GeneralLedger gl1, GeneralLedger gl2) {
            if(gl1.getTransactionTypePerson()==gl2.getTransactionTypePerson()){
                return gl1.getPersonID().compareTo(gl2.getPersonID());
            }else{
                if(gl1.getTransactionTypePerson()>gl2.getTransactionTypePerson()){
                    return 1;
                }else{
                    return -1;
                }
            }
        }
    }

    private class accountComp implements Comparator<Account> {

        private boolean sortOnType;
        private boolean directionDesc;

        private accountComp(boolean sortOnType1, boolean direction1) {
            sortOnType = sortOnType1;
            directionDesc = direction1;
        }

        @Override
        public int compare(Account o1, Account o2) {
            String o1_Code = (o1.getAcccode() == null) ? "" : o1.getAcccode();
            String o2_Code = (o2.getAcccode() == null) ? "" : o2.getAcccode();

            if (sortOnType) {
                if (StringUtil.equal(o1.getGroup().getName(), o2.getGroup().getName())) {
                    if (StringUtil.equal(o1_Code, o2_Code)) {
                        return directionDesc ? o2.getName().compareTo(o1.getName()) : o1.getName().compareTo(o2.getName());
                    } else {
                        return directionDesc ? o2_Code.compareTo(o1_Code) : o1_Code.compareTo(o2_Code);
                    }
                } else {
                    return directionDesc ? o2.getGroup().getName().compareTo(o1.getGroup().getName()) : o1.getGroup().getName().compareTo(o2.getGroup().getName());
                }
            } else {
                if (StringUtil.equal(o1_Code, o2_Code)) {
                    return directionDesc ? o2.getName().compareTo(o1.getName()) : o1.getName().compareTo(o2.getName());
                } else {
                    return directionDesc ? o2_Code.compareTo(o1_Code) : o1_Code.compareTo(o2_Code);
                }
            }
        }
    }

    public double calculateProfitLossForTrialBalance(HttpServletRequest request, Date startDate, Date endDate, Date start, boolean isOpeningBalanceFlag, boolean perpetualOrMRP) {
        double profitloss = 0;
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            String companyid = paramJobj.getString(Constants.companyKey);
            KwlReturnObject kresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) kresult.getEntityList().get(0);
            paramJobj.put("startDate", preferences.getBookBeginningFrom()); /* Opening transaction made between the FY date and the BB date*/ 
            paramJobj.put("endDate", start);
            paramJobj.put("periodView", true);
            paramJobj.put("isPeriod", true);
            paramJobj.put("isForTradingAndProfitLoss", true);
            
            boolean isMRPActivated = accCompanyPreferencesObj.isMRPModuleActivated(companyid);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            Calendar endFinYearCal = Calendar.getInstance();
            Calendar startFinYearCal = Calendar.getInstance();
            YearLock yearLock = null;
            JSONObject closingJSON = new JSONObject();
            int yearid = start.getYear() + 1900;
            boolean isBookClosed = false; 
            KwlReturnObject maxYearLockDetailResult = accCompanyPreferencesObj.getMaxYearLockDetails(companyid, yearid);
            if (maxYearLockDetailResult != null && maxYearLockDetailResult.getEntityList() != null && !maxYearLockDetailResult.getEntityList().isEmpty()) {
                String yearlockid = (String) maxYearLockDetailResult.getEntityList().get(0);
                if (!StringUtil.isNullOrEmpty(yearlockid)) {
                    KwlReturnObject ylresult = accountingHandlerDAOobj.getObject(YearLock.class.getName(), yearlockid);
                    yearLock = (YearLock) ylresult.getEntityList().get(0);
                    if (yearLock != null && yearLock.isIsLock()) {
                        startFinYearCal.setTime(preferences.getFirstFinancialYearFrom() != null ? preferences.getFirstFinancialYearFrom() : preferences.getFinancialYearFrom());
                        endFinYearCal.set(Calendar.YEAR, yearLock.getYearid() + 1);
                        endFinYearCal.set(Calendar.MONTH, startFinYearCal.get(Calendar.MONTH));
                        endFinYearCal.set(Calendar.DAY_OF_MONTH, startFinYearCal.get(Calendar.DAY_OF_MONTH) - 1);
                        if (DateUtils.isSameDay(authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())), start) || authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())).before(start)) {
                            closingJSON.put("yearlockid", yearlockid);
                            closingJSON.put("yearid", yearLock.getYearid());
                            if (extraPreferences.isStockValuationFlag() && !(isMRPActivated || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                                closingJSON.put("netProfitAndLossWithStock", true);
                            } else {
                                closingJSON.put("netProfitAndLossWithOutStock", true);
                            }
                            List<ClosingAccountBalance> closingAccountBalances = accCompanyPreferencesObj.getClosingAccountBalance(closingJSON);
                            if (closingAccountBalances != null && !closingAccountBalances.isEmpty()) {
                                ClosingAccountBalance netProfitAndLoss = closingAccountBalances.get(0);
                                if (netProfitAndLoss != null) {
                                    profitloss = netProfitAndLoss.getAmount();
                                    Date stDate = authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime()));
                                    Calendar std = Calendar.getInstance();
                                    std.setTime(stDate);
                                    std.add(Calendar.DATE, 1);
                                    paramJobj.put("startDate", std.getTime());
                                    if (preferences.getBookBeginningFrom() != null && stDate.after(preferences.getBookBeginningFrom())) {
                                        isBookClosed = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            double tradingAmount1[] = accReportsService.getTrading(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true,null);
            double tradingAmount2[] = accReportsService.getTrading(paramJobj, Group.NATURE_INCOME, new JSONArray(), true,null);
            double totalIncome = 0.0, totalExpense = 0.0;
            totalIncome = tradingAmount2[0];
            totalExpense = tradingAmount1[0];
            double profitLossAmount1[] = accReportsService.getProfitLoss(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true,null);
            double profitLossAmount2[] = accReportsService.getProfitLoss(paramJobj, Group.NATURE_INCOME, new JSONArray(), true,null);
            totalIncome += profitLossAmount2[0];
            totalExpense += profitLossAmount1[0];
            paramJobj.put("isCostOfGoodsSold", true);
            double goodsSoldAmount[] = accReportsService.getTrading(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true,null);
            double profitLossAmountCoGS[] = accReportsService.getProfitLoss(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), true,null);
            paramJobj.put("isCostOfGoodsSold", true);
            double costofgoodsSoldTotal = 0.0;
            costofgoodsSoldTotal = goodsSoldAmount[0];
            costofgoodsSoldTotal += profitLossAmountCoGS[0];
            double invOpeBal = 0;
            double invCloseBal = 0;
            try {
                if (extraPreferences.isStockValuationFlag() && !(isMRPActivated || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {  // Do not calculate opening stock if MRP module is activated
                    HashMap<String, Object> requestParam = new HashMap<String, Object>();
                    requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(start));
                    requestParam.put(Constants.REQ_startdate, preferences.getBookBeginningFrom() != null ? authHandler.getDateOnlyFormat().format(preferences.getBookBeginningFrom()) : "");
                    requestParam.put(Constants.companyKey, companyid);
                    requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                    if (DateUtils.isSameDay(authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())), start) || authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime())).before(start)) {                                
                        if (yearLock != null) {
                            closingJSON = new JSONObject();
                            closingJSON.put("yearlockid", yearLock.getID());
                            closingJSON.put("yearid", yearLock.getYearid());
                            closingJSON.put("stockInHand", true);
                            List<ClosingAccountBalance> closingAccountBalances = accCompanyPreferencesObj.getClosingAccountBalance(closingJSON);
                            if (closingAccountBalances != null && !closingAccountBalances.isEmpty()) {
                                ClosingAccountBalance stockInHand = closingAccountBalances.get(0);
                                if (stockInHand != null) {
                                    Date stDate = authHandler.getDateOnlyFormat().parse(authHandler.getDateOnlyFormat().format(endFinYearCal.getTime()));
                                    Calendar std = Calendar.getInstance();
                                    std.setTime(stDate);
                                    std.add(Calendar.DATE, 1);
                                    requestParam.put(Constants.REQ_startdate, authHandler.getDateOnlyFormat().format(std.getTime()));
                                }
                            }
                        }
                    }
                    double[] valuation = AccProductService.getInventoryValuationDataForFinancialReports(requestParam);
                    invOpeBal = valuation[2];
                    invCloseBal = valuation[5];
                }
            } catch (Exception ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.INFO, ex.getMessage());
            }
            costofgoodsSoldTotal = authHandler.round((costofgoodsSoldTotal + invOpeBal - invCloseBal), companyid);
            double grossprofit = ((-1 * totalIncome) - costofgoodsSoldTotal) * (-1);
            profitloss = ((grossprofit * (-1)) - totalExpense) * (-1);
            double[] balances = {0, 0};
            if (!isBookClosed) {
                KwlReturnObject accresult = accAccountDAOobj.getAccountDatewise(companyid, new Date(1970), start, true);// "true" as onlyPnLAccounts -> Get Only Accounts
                List<Account> list = accresult.getEntityList();
                int templatecode = (StringUtil.isNullOrEmpty(paramJobj.optString("templatecode", null))) ? -1 : Integer.parseInt(paramJobj.getString("templatecode"));
                for (Account account : list) {
                    if ((templatecode == -1) || (account.getTemplatepermcode() != null && account.getTemplatepermcode() != 0 && ((templatecode & account.getTemplatepermcode()) == templatecode))) {
                        double accountOpeningBalance = accInvoiceCommon.getOpeningBalanceOfAccountJson(paramJobj, account, false, null);
                        double bal = accountOpeningBalance;
                        /* Add Opening Balance of P&L type of accounts in Net Profit/Loss */
                        if (bal > 0) {
                            balances[0] += bal;
                        } else if (bal < 0) {
                            balances[1] += bal;
                        }
                    }
                }
            }
            double openingBalance = balances[0] + balances[1];
            profitloss += openingBalance;
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return profitloss;
    }

    /**
     * return list of month names between 2 given start & end dates. datePattern
     * tells the format of the date strings
     *
     * @param startDate
     * @param endDate
     * @param datePattern
     * @return
     */
    private List getMonthList(String startDateStr, String endDateStr, String datePattern) {
        List<String> monthList = new ArrayList();
        final DateTimeFormatter dtf = DateTimeFormat.forPattern(datePattern);
        Date startDate = dtf.parseLocalDate(startDateStr).toDate();
        Date endDate = dtf.parseLocalDate(endDateStr).toDate();

        // we need to include the month of the end date as well
        LocalDate localStartDate = new LocalDate(startDate);
        LocalDate localEndDate = new LocalDate(endDate);

        Calendar cal = Calendar.getInstance();
        cal.setTime(localStartDate.toDate());
        int startMonth = cal.get(Calendar.MONTH);
        int startYear = cal.get(Calendar.YEAR);

        cal.setTime(localEndDate.toDate());
        int endMonth = cal.get(Calendar.MONTH);
        int endYear = cal.get(Calendar.YEAR);

        // if user selects same month & year for both start & end fields, we get the last date of the month to populate into the endDate
        if (startMonth == endMonth && startYear == endYear) {
            monthList.add(localStartDate.toString("MMM yyyy"));
        } else {
            // just a trick to include the last month as well
            localEndDate = localEndDate.plus(Period.months(1));
            while (localStartDate.isBefore(localEndDate)) {
                monthList.add(localStartDate.toString("MMM yyyy"));
                localStartDate = localStartDate.plus(Period.months(1));
            }
            localStartDate = new LocalDate(startDate);
        }
        return monthList;
    }

    public JSONObject getMonthlyRevenue(HttpServletRequest request, boolean isForExport) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        List accountlist = new ArrayList();
        try {
            String accountid = request.getParameter("accountid");
            final DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
            Date startDate = dtf.parseLocalDate(request.getParameter("stdate")).toDate();
            Date endDate = dtf.parseLocalDate(request.getParameter("enddate")).toDate();
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            // we need to include the month of the end date as well
            LocalDate localStartDate = new LocalDate(startDate);
            LocalDate localEndDate = new LocalDate(endDate);
            List monthList = getMonthList(request.getParameter("stdate"), request.getParameter("enddate"), "MMMM, yyyy");
        
            startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
            endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();

            // the first object would be the months array
            JSONArray monthArray = new JSONArray();
            for (int i = 0; i < monthList.size(); i++) {
                JSONObject monthObj = new JSONObject();
                monthObj.put("monthname", monthList.get(i));
                monthArray.put(monthObj);
            }

            if (accountid.equalsIgnoreCase("All")) {
                HashMap<String, Object> requestParams = accAccountHandler.getRequestMap(request);
                requestParams.put(Constants.start, "");
                requestParams.put("nondeleted", "true");
                String nature = request.getParameter("nature");
                if (nature.equals("3")) {
                    requestParams.put("nature", new String[]{"3"});
                } else if (nature.equals("2")) {
                    requestParams.put("nature", new String[]{"2"});
                } else {
                    requestParams.put("nature", new String[]{"3", "2"});
                }
                KwlReturnObject result = accAccountDAOobj.getAccountsForCombo(requestParams);
                accountlist = result.getEntityList();
            } else {
                KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountid);
                Account account = (Account) accresult.getEntityList().get(0);
                accountlist.add(account);
            }

            String companyid = sessionHandlerImpl.getCompanyid(request);

            Iterator iterator = accountlist.iterator();
            JSONArray jArr = new JSONArray();
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            KwlReturnObject bAmt = null;
            while (iterator.hasNext()) {
                Object listObj = iterator.next();
                Account account = (Account) listObj;
                accountid = account.getID();

                KwlReturnObject lresult = accJournalEntryobj.getMonthlyRevenue(companyid, accountid, startDate, endDate);

                List monthlyJournalEntryList = lresult.getEntityList();
                Map monthlyRevenueAmountHashMap = new HashMap();

                for (Object[] journalEntryRow : (List<Object[]>) monthlyJournalEntryList) {
                    Object month = journalEntryRow[3];
                    Object year = journalEntryRow[2];
                    Object currency = journalEntryRow[4];
                    Object entrydate = journalEntryRow[5];
                    Object externalcurrencyrate = journalEntryRow[6];
                    bAmt = null;
                    if (month != null && year != null) {
                        String monthName = month.toString() + " " + year.toString();
                        double monthlyReveueAmount = Double.parseDouble(journalEntryRow[1].toString());
                        if (currency != null && !currency.toString().equals(currencyid) && entrydate != null && externalcurrencyrate != null) {
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, monthlyReveueAmount, currency.toString(), (Date) entrydate, Double.parseDouble(externalcurrencyrate.toString()));
                            monthlyReveueAmount = (Double) bAmt.getEntityList().get(0);
                        }
                        if (monthlyRevenueAmountHashMap.containsKey(monthName)) {
                            double monthAmount = (Double) monthlyRevenueAmountHashMap.get(monthName);
                            monthlyRevenueAmountHashMap.put(monthName, monthAmount + monthlyReveueAmount);
                        } else {
                            monthlyRevenueAmountHashMap.put(monthName, monthlyReveueAmount);
                        }
                    }
                }
                
                // TODO populate the result into JSON Array     
                JSONObject monthlyJSONObj = new JSONObject();
                String accountname = StringUtil.isNullOrEmpty(account.getName()) ? "" : account.getName();
                String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                String accCodeName = "";
                // this is for displaying on the group header
                if (!acccode.equals("")) {
                    accCodeName = acccode + " - " + accountname;
                } else if (!acccode.equals("") && accountname.equals("")) {
                    accCodeName = acccode;
                } else {
                    accCodeName = accountname;
                }

                // Keep "Account Code" field blank if account code are not provided                   
                monthlyJSONObj.put("accountcode", acccode);
                monthlyJSONObj.put("accCodeName", accCodeName);
                monthlyJSONObj.put("accountname", (!StringUtil.isNullOrEmpty(account.getName())) ? account.getName() : (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : ""));
                monthlyJSONObj.put("accountid", account.getID());

                for (int i = 0; i < monthList.size(); i++) {
                    String monthName = (String) monthList.get(i);
                    double monthlyRevenueAmount = 0.0;
                    if (monthlyRevenueAmountHashMap.get(monthName) != null) {
                        monthlyRevenueAmount = Double.parseDouble(monthlyRevenueAmountHashMap.get(monthName).toString());
                    } else {
                        monthlyRevenueAmount = 0;
                    }
                    if (isForExport) {
                        monthlyJSONObj.put("amount_" + i, authHandler.formattedAmount(authHandler.round(monthlyRevenueAmount, companyid), companyid));
                    } else {
                        monthlyJSONObj.put("amount_" + i, authHandler.round(monthlyRevenueAmount, companyid));
                    }
                }
                jArr.put(monthlyJSONObj);
            }
            if (jArr.length() > 0) {
                JSONObject firstAccount = jArr.getJSONObject(0);
                firstAccount.put("months", monthArray);
            } else {
                JSONObject monthArrayObject = new JSONObject();
                monthArrayObject.put("months", monthArray);
                jArr.put(monthArrayObject);
            }
            jobj.put(Constants.RES_data, jArr);
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getMonthlyRevenue : " + ex.getMessage(), ex);
        }
        return jobj;
    }

    public double[] getMappedAccountsAmount(Account account, Date startDate, Date endDate, int level, accountComp accComp, HttpServletRequest request, boolean eliminateflag, HashMap<String, String> usedAccountsMap, HashMap<String, Double> openPeriodAmounts, HashMap<String, Double> openPeriod_Ytd_Amounts) throws SessionExpiredException {
        double[] mappedAmountArr = {0, 0};
        boolean ytdFlag = false;
        try {
            //Fetched Mapped accounts amount for multi company feature.
            List mapaccresult = accAccountDAOobj.getMappedAccountsForReports(account.getID());
            Iterator<Object[]> itr1 = mapaccresult.iterator();
            String childaccountid = "";
            KwlReturnObject childObj = null;
            Account child = null;
            while (itr1.hasNext()) {
                Object[] row = (Object[]) itr1.next();
                childaccountid = row[0].toString();
                if (usedAccountsMap.containsKey(childaccountid)) {
                    continue;
                }
                usedAccountsMap.put(childaccountid, childaccountid);
                childObj = accountingHandlerDAOobj.getObject(Account.class.getName(), childaccountid);
                child = (Account) childObj.getEntityList().get(0);

                double[] tmpMappedAmountArr = {0, 0};
                double mappedAmount = 0, ytd_mappedAmount = 0;

                ytdFlag = false;
                mappedAmount = accReportsService.getAccountClosingBalanceDateWiseMerged(request, child, startDate, endDate, ytdFlag, eliminateflag, openPeriodAmounts);

                if (StringUtil.roundDoubleTo(mappedAmount, 2) == 0 && child.getChildren().isEmpty()) {
                    continue;
                }
                ytdFlag = true;
                ytd_mappedAmount = accReportsService.getAccountClosingBalanceDateWiseMerged(request, child, null, endDate, ytdFlag, eliminateflag, openPeriod_Ytd_Amounts);

                tmpMappedAmountArr = getMappedChildAccountsAmount(child, startDate, endDate, 0, accComp, request, eliminateflag, usedAccountsMap, openPeriodAmounts, openPeriod_Ytd_Amounts);

                mappedAmountArr[0] += tmpMappedAmountArr[0] + mappedAmount;
                mappedAmountArr[1] += tmpMappedAmountArr[1] + ytd_mappedAmount;
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return mappedAmountArr;
    }

    public double[] getMappedChildAccountsAmount(Account accountObj, Date startDate, Date endDate, int level, accountComp accComp, HttpServletRequest request, boolean eliminateflag, HashMap<String, String> usedAccountsMap, HashMap<String, Double> openPeriodAmounts, HashMap<String, Double> openPeriod_Ytd_Amounts) throws SessionExpiredException {
        double amount = 0, ytd_amount = 0;
        double[] amtArr = {0, 0};
        try {
            level = level + 1;
            List<Account> list = new ArrayList(accountObj.getChildren());//Added code for sorting on account code, account name
            for(Account account : list) {
                if (usedAccountsMap.containsKey(account.getID())) {
                    continue;
                }
                usedAccountsMap.put(account.getID(), account.getID());
                boolean ytdFlag = false;
                amount = accReportsService.getAccountClosingBalanceDateWiseMerged(request, account, startDate, endDate, ytdFlag, eliminateflag, openPeriodAmounts);
                ytdFlag = true;
                ytd_amount = accReportsService.getAccountClosingBalanceDateWiseMerged(request, account, null, endDate, ytdFlag, eliminateflag, openPeriod_Ytd_Amounts);

                //Recursive function to get child accounts
                double[] tmpAmtArr = getMappedChildAccountsAmount(account, startDate, endDate, level, accComp, request, eliminateflag, usedAccountsMap, openPeriodAmounts, openPeriod_Ytd_Amounts);
                amtArr[0] += tmpAmtArr[0] + amount;
                amtArr[1] += tmpAmtArr[1] + ytd_amount;
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return amtArr;
    }

    public JSONArray getChildAccounts(Account accountObj, Date startDate, Date endDate, int level, accountComp accComp, HttpServletRequest request, boolean consolidateFlag,
            boolean eliminateflag, HashMap<String, String> usedAccountsMap, boolean hidechildCV, boolean showAllAccounts) throws SessionExpiredException {
        JSONArray jArr = new JSONArray();
        try {
            level = level + 1;
            Date start = new Date(1970);
            Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();  //end date used to calculate Opening Balance
            List<Account> list = new ArrayList(accountObj.getChildren());//Added code for sorting on account code, account name
            Collections.sort(list, accComp);
            HashMap<String, Double> openPeriodAmounts = new HashMap<String, Double>();
            
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            Date excludedPreviousYearDate = accReportsService.getDateForExcludePreviousYearBalanceFilter(paramJobj, startDate);
            Date excludedPreviousYearDateMinusOne = new DateTime(excludedPreviousYearDate).minusDays(1).toDate();
            HashMap<String, Double> openPeriod_Ytd_Amounts = new HashMap<String, Double>();
            for (Account account : list) {
                JSONArray childArray = new JSONArray();
                if (account.getAccounttype() == 0) {
                    start = excludedPreviousYearDate;
                } else {
                    start = new Date(1970);
                }
                if (usedAccountsMap.containsKey(account.getID()) || account.getName().equals(Constants.NetProfitLossAccountName)) {
                    continue;
                }
                usedAccountsMap.put(account.getID(), account.getID());
                boolean ytdFlag = false;
                double amount = 0;
                double openingBalance = 0.0;
                double periodBalance = 0.0, c_period = 0.0, d_period = 0.0;                
                openPeriodAmounts.clear();
                openingBalance = accReportsService.getAccountClosingBalanceDateWiseMerged(request, account, start, openBalEndDate, ytdFlag, eliminateflag, openPeriodAmounts);

                openPeriodAmounts.clear();
                amount = accReportsService.getAccountClosingBalanceDateWiseMerged(request, account, startDate, endDate, ytdFlag, eliminateflag, openPeriodAmounts);

                ytdFlag = false;
                openPeriod_Ytd_Amounts.clear();
                double openingBalanceYtd = accReportsService.getAccountClosingBalanceDateWiseMerged(request, account, start, excludedPreviousYearDateMinusOne, ytdFlag, eliminateflag, openPeriod_Ytd_Amounts);
                openPeriod_Ytd_Amounts.clear();
                double ytd_amount = accReportsService.getAccountClosingBalanceDateWiseMerged(request, account, excludedPreviousYearDate, endDate, ytdFlag, eliminateflag, openPeriod_Ytd_Amounts);

                if (openingBalance == 0 && openPeriodAmounts.containsKey("openingBalance")) {
                        openingBalance += openPeriodAmounts.get("openingBalance");
                    }
                if (openPeriodAmounts.containsKey("periodBalance")) {
                    periodBalance = openPeriodAmounts.get("periodBalance");
                }
                amount = openingBalance + periodBalance;
                
                if (openPeriodAmounts.containsKey("c_period")) {
                    c_period = openPeriodAmounts.get("c_period");
                }
                if (openPeriodAmounts.containsKey("d_period")) {
                    d_period = openPeriodAmounts.get("d_period");
                }

                
                double periodBalanceYtd = 0.0;
                if (openingBalanceYtd == 0 && openPeriod_Ytd_Amounts.containsKey("openingBalance")) {
                    openingBalanceYtd = openPeriod_Ytd_Amounts.get("openingBalance");
                }
                if (openPeriod_Ytd_Amounts.containsKey("periodBalance")) {
                    periodBalanceYtd = openPeriod_Ytd_Amounts.get("periodBalance");
                }
                ytd_amount = openingBalanceYtd + periodBalanceYtd;
                //Recursive function to get child accounts
                childArray = getChildAccounts(account, startDate, endDate, level, accComp, request, consolidateFlag, eliminateflag, usedAccountsMap, hidechildCV, showAllAccounts);

                if (consolidateFlag) {
                    //Fetched Mapped accounts amount for multi company feature.
                    double[] mappedAmountArr = {0, 0};
                    mappedAmountArr = getMappedAccountsAmount(account, startDate, endDate, 0, accComp, request, eliminateflag, usedAccountsMap, openPeriodAmounts, openPeriod_Ytd_Amounts);

                    amount += mappedAmountArr[0];
                    ytd_amount += mappedAmountArr[1];
                }

                if (!showAllAccounts && StringUtil.roundDoubleTo(openingBalance, 2) == 0 && StringUtil.roundDoubleTo(periodBalance, 2) == 0 && StringUtil.roundDoubleTo(openingBalanceYtd, 2) == 0 && StringUtil.roundDoubleTo(periodBalanceYtd, 2) == 0 && StringUtil.roundDoubleTo(amount, 2) == 0 && StringUtil.roundDoubleTo(ytd_amount, 2) == 0 && account.getChildren().isEmpty()) {
                    continue;
                }

                JSONObject obj = new JSONObject();
                obj.put("accountid", account.getID());
                obj.put("accountname", (!StringUtil.isNullOrEmpty(account.getName())) ? account.getName() : (account.getAcccode() != null ? account.getAcccode() : ""));
                String acccode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                obj.put("acccode", acccode);
                obj.put("acctype", account.getGroup().getName());
                obj.put("level", level);
                obj.put("leaf", true);

                if (amount > 0) {
                    obj.put("d_amount", amount);
                    obj.put("c_amount", "");
                } else if (amount < 0) {
                    obj.put("c_amount", (amount == 0.0) ? amount : -amount);
                    obj.put("d_amount", "");
                } else {
                    obj.put("c_amount", "");
                    obj.put("d_amount", "");
                }

                if (openingBalance > 0) {
                    obj.put("d_amount_open", openingBalance);
                    obj.put("c_amount_open", "");
                } else if (openingBalance < 0) {
                    obj.put("c_amount_open", (openingBalance == 0.0) ? openingBalance : -openingBalance);
                    obj.put("d_amount_open", "");
                } else {
                    obj.put("c_amount_open", "");
                    obj.put("d_amount_open", "");
                }
                if (periodBalance > 0) {
                    obj.put("d_amount_period", periodBalance);
                    obj.put("c_amount_period", "");
                } else if (periodBalance < 0) {
                    obj.put("c_amount_period", (periodBalance == 0.0) ? periodBalance : -periodBalance);
                    obj.put("d_amount_period", "");
                } else {
                    obj.put("c_amount_period", "");
                    obj.put("d_amount_period", "");
                }
                obj.put("c_period", c_period);
                obj.put("d_period", d_period);
                obj.put("periodBalance", periodBalance);
                obj.put("openingamount", openingBalance);
                obj.put("endingamount", amount);
                
                if (amount > 0) {
                    obj.put("d_amount", amount);
                    obj.put("c_amount", "");
                } else if (amount < 0) {
                    obj.put("c_amount", (amount == 0.0) ? amount : -amount);
                    obj.put("d_amount", "");
                } else {
                    obj.put("c_amount", "");
                    obj.put("d_amount", "");
                }

                if (openingBalanceYtd > 0) {
                    obj.put("ytd_d_amount_open", openingBalanceYtd);
                    obj.put("ytd_c_amount_open", "");
                } else if (openingBalanceYtd < 0) {
                    obj.put("ytd_c_amount_open", (openingBalanceYtd == 0.0) ? openingBalanceYtd : -openingBalanceYtd);
                    obj.put("ytd_d_amount_open", "");
                } else {
                    obj.put("ytd_c_amount_open", "");
                    obj.put("ytd_d_amount_open", "");
                }
                if (periodBalanceYtd > 0) {
                    obj.put("ytd_d_amount_period", periodBalanceYtd);
                    obj.put("ytd_c_amount_period", "");
                } else if (periodBalanceYtd < 0) {
                    obj.put("ytd_c_amount_period", (periodBalanceYtd == 0.0) ? periodBalanceYtd : -periodBalanceYtd);
                    obj.put("ytd_d_amount_period", "");
                } else {
                    obj.put("ytd_c_amount_period", "");
                    obj.put("ytd_d_amount_period", "");
                }

                if (ytd_amount > 0) {
                    obj.put("ytd_d_amount", ytd_amount);
                    obj.put("ytd_c_amount", "");
                } else if (ytd_amount < 0) {
                    obj.put("ytd_c_amount", (ytd_amount == 0.0) ? ytd_amount : -ytd_amount);
                    obj.put("ytd_d_amount", "");
                } else {
                    obj.put("ytd_c_amount", "");
                    obj.put("ytd_d_amount", "");
                }

                //Put child account's JSON from group company
                if (childArray.length() == 0) {
                    if (showAllAccounts || (!showAllAccounts && (amount != 0 || ytd_amount != 0 || openingBalanceYtd != 0 || periodBalanceYtd != 0 || openingBalance != 0 || periodBalance != 0))) { //If child not present and account amount > 0 then need to add account as leaf account
                        obj.put("leaf", true);
                        jArr.put(obj);
                    }
                } else {
                    if (hidechildCV) {
                        for (int i = 0; i < childArray.length(); i++) {
                            JSONObject jobjTemp = childArray.getJSONObject(i);
                            if (jobjTemp.has("level") && jobjTemp.get("level") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("level").toString())) {
                                int levelTemp = Integer.parseInt(jobjTemp.get("level").toString());
                                if (levelTemp == level + 1) {//Add only one level down child accounts sum as it already contain sum of their childrens in case of multi level.                                    
                                    if (jobjTemp.has("d_amount") && jobjTemp.get("d_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount").toString())) {
                                        double d_amount = Double.parseDouble(jobjTemp.get("d_amount").toString());
                                        amount += d_amount;
                                    }
                                    if (jobjTemp.has("d_amount_open") && jobjTemp.get("d_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount_open").toString())) {
                                        double d_amount_open = Double.parseDouble(jobjTemp.get("d_amount_open").toString());
                                        openingBalance += d_amount_open;
                                    }
                                    if (jobjTemp.has("d_amount_period") && jobjTemp.get("d_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount_period").toString())) {
                                        double d_amount_period = Double.parseDouble(jobjTemp.get("d_amount_period").toString());
                                        periodBalance += d_amount_period;
                                    }
                                    if (jobjTemp.has("d_period") && jobjTemp.get("d_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_period").toString())) {
                                        double d_amount_period = Double.parseDouble(jobjTemp.get("d_period").toString());
                                        d_period += d_amount_period;
                                    }
                                    if (jobjTemp.has("c_period") && jobjTemp.get("c_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_period").toString())) {
                                        double d_amount_period = Double.parseDouble(jobjTemp.get("c_period").toString());
                                        c_period += d_amount_period;
                                    }
                                    if (jobjTemp.has("ytd_d_amount_open") && jobjTemp.get("ytd_d_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount_open").toString())) {
                                        double ytd_d_amount_open = Double.parseDouble(jobjTemp.get("ytd_d_amount_open").toString());
                                        openingBalanceYtd += ytd_d_amount_open;
                                    }
                                    if (jobjTemp.has("ytd_d_amount_period") && jobjTemp.get("ytd_d_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount_period").toString())) {
                                        double ytd_d_amount_period = Double.parseDouble(jobjTemp.get("ytd_d_amount_period").toString());
                                        periodBalanceYtd += ytd_d_amount_period;
                                    }
                                    if (jobjTemp.has("ytd_d_amount") && jobjTemp.get("ytd_d_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount").toString())) {
                                        double ytd_d_amount = Double.parseDouble(jobjTemp.get("ytd_d_amount").toString());
                                        ytd_amount += ytd_d_amount;
                                    }
                                    if (jobjTemp.has("c_amount") && jobjTemp.get("c_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount").toString())) {
                                        double c_amount = Double.parseDouble(jobjTemp.get("c_amount").toString());
                                        amount -= c_amount;
                                    }
                                    if (jobjTemp.has("c_amount_open") && jobjTemp.get("c_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount_open").toString())) {
                                        double c_amount_open = Double.parseDouble(jobjTemp.get("c_amount_open").toString());
                                        openingBalance -= c_amount_open;
                                    }
                                    if (jobjTemp.has("c_amount_period") && jobjTemp.get("c_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount_period").toString())) {
                                        double c_amount_period = Double.parseDouble(jobjTemp.get("c_amount_period").toString());
                                        periodBalance -= c_amount_period;
                                    }
                                    if (jobjTemp.has("ytd_c_amount_open") && jobjTemp.get("ytd_c_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount_open").toString())) {
                                        double ytd_c_amount_open = Double.parseDouble(jobjTemp.get("ytd_c_amount_open").toString());
                                        openingBalanceYtd -= ytd_c_amount_open;
                                    }
                                    if (jobjTemp.has("ytd_c_amount_period") && jobjTemp.get("ytd_c_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount_period").toString())) {
                                        double ytd_c_amount_period = Double.parseDouble(jobjTemp.get("ytd_c_amount_period").toString());
                                        periodBalanceYtd -= ytd_c_amount_period;
                                    }
                                    if (jobjTemp.has("ytd_c_amount") && jobjTemp.get("ytd_c_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount").toString())) {
                                        double ytd_c_amount = Double.parseDouble(jobjTemp.get("ytd_c_amount").toString());
                                        ytd_amount -= ytd_c_amount;
                                    }
                                }
                            }
                        }
                        if (amount > 0) {
                            obj.put("d_amount", amount);
                            obj.put("c_amount", "");
                        } else if (amount < 0) {
                            obj.put("c_amount", (amount == 0.0) ? amount : -amount);
                            obj.put("d_amount", "");
                        } else {
                            obj.put("c_amount", "");
                            obj.put("d_amount", "");
                        }
                        if (openingBalance > 0) {
                            obj.put("d_amount_open", openingBalance);
                            obj.put("c_amount_open", "");
                        } else if (openingBalance < 0) {
                            obj.put("c_amount_open", (openingBalance == 0.0) ? openingBalance : -openingBalance);
                            obj.put("d_amount_open", "");
                        } else {
                            obj.put("c_amount_open", "");
                            obj.put("d_amount_open", "");
                        }
                        if (periodBalance > 0) {
                            obj.put("d_amount_period", periodBalance);
                            obj.put("c_amount_period", "");
                        } else if (periodBalance < 0) {
                            obj.put("c_amount_period", (periodBalance == 0.0) ? periodBalance : -periodBalance);
                            obj.put("d_amount_period", "");
                        } else {
                            obj.put("c_amount_period", "");
                            obj.put("d_amount_period", "");
                        }
                        obj.put("periodBalance", periodBalance);
                        obj.put("openingamount", openingBalance);
                        obj.put("endingamount", amount);
                        obj.put("c_period", c_period);
                        obj.put("d_period", d_period);

                        if (ytd_amount > 0) {
                            obj.put("ytd_d_amount", ytd_amount);
                            obj.put("ytd_c_amount", "");
                        } else if (ytd_amount < 0) {
                            obj.put("ytd_c_amount", (ytd_amount == 0.0) ? ytd_amount : -ytd_amount);
                            obj.put("ytd_d_amount", "");
                        } else {
                            obj.put("ytd_c_amount", "");
                            obj.put("ytd_d_amount", "");
                        }
                        if (openingBalanceYtd > 0) {
                            obj.put("ytd_d_amount_open", openingBalanceYtd);
                            obj.put("ytd_c_amount_open", "");
                        } else if (openingBalanceYtd < 0) {
                            obj.put("ytd_c_amount_open", (openingBalanceYtd == 0.0) ? openingBalanceYtd : -openingBalanceYtd);
                            obj.put("ytd_d_amount_open", "");
                        } else {
                            obj.put("ytd_c_amount_open", "");
                            obj.put("ytd_d_amount_open", "");
                        }
                        if (periodBalanceYtd > 0) {
                            obj.put("ytd_d_amount_period", periodBalanceYtd);
                            obj.put("ytd_c_amount_period", "");
                        } else if (periodBalanceYtd < 0) {
                            obj.put("ytd_c_amount_period", (periodBalanceYtd == 0.0) ? periodBalanceYtd : -periodBalanceYtd);
                            obj.put("ytd_d_amount_period", "");
                        } else {
                            obj.put("ytd_c_amount_period", "");
                            obj.put("ytd_d_amount_period", "");
                        }
                    }
                    if (amount == 0) {
                        obj.put("c_amount", "");
                    }
                    if (openingBalance == 0) {
                        obj.put("c_amount_open", "");
                    }
                    if (periodBalance == 0) {
                        obj.put("c_amount_period", "");
                    }
                    if (ytd_amount == 0) {
                        obj.put("ytd_c_amount", "");
                    }
                    if (openingBalanceYtd == 0) {
                        obj.put("ytd_c_amount_open", "");
                    }
                    if (periodBalanceYtd == 0) {
                        obj.put("ytd_c_amount_period", "");
                    }
                    if (hidechildCV) {
                        obj.put("leaf", true);
                    } else {
                        obj.put("leaf", false);
                    }
                    jArr.put(obj);
                    if (!hidechildCV) {
                        for (int i = 0; i < childArray.length(); i++) {
                            jArr.put(childArray.getJSONObject(i));
                        }
                    }
                }
            }
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }

    public ModelAndView getReconciliationData(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getReconciliationData(request);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView exporttReconciliationData(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONObject jobjPrint = new JSONObject();
        String view = "jsonView_ex";
        try {
            jobj = getReconciliationData(request);
            JSONObject jobjRoot = new JSONObject();
            jobjRoot = jobj.getJSONObject(Constants.RES_data);
	    double openingBalanceInBaseCurrency = jobjRoot.optDouble("openingbalanceinbase", 0);  //Opening Balance 
            double closingBalanceInBaseCurrency = jobjRoot.optDouble("bankdata", 0);    //Closing Balance            
            JSONArray leftObjArr = jobjRoot.getJSONArray("left");
            JSONArray rightObjArr = jobjRoot.getJSONArray("right");
            JSONArray finlArray = new JSONArray();
            leftObjArr.put(new JSONObject());

	    String fileType = request.getParameter("filetype");
            if(StringUtil.equal(fileType, "print")) {    //SDP-7990 : For Print Purpose
                JSONObject openBalance = new JSONObject();
                openBalance.put("d_date", "Opening Balance in Base Currency");
                openBalance.put("d_amount", openingBalanceInBaseCurrency);
                finlArray.put(openBalance);
            }

            JSONObject headers = new JSONObject();
            headers.put("d_date", "Deposits and Other Credits");
            finlArray.put(headers);
            for (int i = 0; i < leftObjArr.length(); i++) {
                finlArray.put(leftObjArr.getJSONObject(i));
            }
            headers = new JSONObject();
            headers.put("d_date", "Checks and Payments");
            finlArray.put(headers);
            for (int i = 0; i < rightObjArr.length(); i++) {
                finlArray.put(rightObjArr.getJSONObject(i));
            }
            
            if (StringUtil.equal(fileType, "print")) {    //SDP-7990 : For Print Purpose
                JSONObject closingBalance = new JSONObject();
                closingBalance.put("d_date", "Closing Balance in Base Currency");
                closingBalance.put("d_amount", closingBalanceInBaseCurrency);
                finlArray.put(closingBalance);
            }          
            
            jobjPrint.put(Constants.RES_data, finlArray);
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobjPrint.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobjPrint);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobjPrint.toString());
    }

    public void exportBankReconciliation(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        Map<String, Object> voucherMap = new HashMap<String, Object>();
        ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
        InputStream inputStream = null;
        ArrayList<BankReconciliationSubreport> leftArrList = new ArrayList<BankReconciliationSubreport>();
        ArrayList<BankReconciliationSubreport> rightArrList = new ArrayList<BankReconciliationSubreport>();
        try {
            String transCurrSymbol = "";    //Transaction Currency Code
            String baseCurrencyCode = "";
            int templateflag = !StringUtil.isNullOrEmpty(request.getParameter("templateflag")) ? Integer.parseInt(request.getParameter("templateflag")) : 0;    /////
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);   //ERP-33671
            OnlyDatePojo datePojo = new OnlyDatePojo();
            Date date = new Date();

            datePojo.setDate(df.format(date));
            datePojoList.add(datePojo);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            baseCurrencyCode = currency != null ? currency.getCurrencyCode() : "";
            baseCurrencyCode = accCommonTablesDAO.getCustomCurrencyCode(baseCurrencyCode, companyid);
            boolean isConcileReport = StringUtil.isNullOrEmpty(request.getParameter("isConcileReport")) ? false : Boolean.parseBoolean(request.getParameter("isConcileReport"));
            boolean isMemoPDF = StringUtil.isNullOrEmpty(request.getParameter("isMemoPDF")) ? false : Boolean.parseBoolean(request.getParameter("isMemoPDF"));
            boolean isMaintainHistory = StringUtil.isNullOrEmpty(request.getParameter("isMaintainHistory")) ? false : Boolean.parseBoolean(request.getParameter("isMaintainHistory"));
	    String accountid = request.getParameter("accountid");
            KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountid);
            Account account = (Account) accresult.getEntityList().get(0);
            Date startDate=null,endDate=null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) {
                startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("enddate"))) {
                endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            }
            
            request.setAttribute("isExportReportRequest", true);
            jobj = getReconciliationData(request);
            JSONObject jobj1 = (JSONObject) jobj.get(Constants.RES_data);
            String accCurrencySymbol = accCommonTablesDAO.getCustomCurrencySymbol((String) jobj1.get("currencysymbol"),companyid);
            JSONArray leftArr = (JSONArray) jobj1.get("left");
            for (int i = 0; i < leftArr.length(); i++) {
                JSONObject temp = leftArr.getJSONObject(i);
                BankReconciliationSubreport brs = new BankReconciliationSubreport();
                int paymentType = temp.optInt("c_paymentType", 0) !=0 ? temp.optInt("c_paymentType", 0) : temp.optInt("d_paymentType", 0);
                brs.setDate(!StringUtil.isNullOrEmpty(temp.optString("c_dateinuserdf", "")) ? temp.optString("c_dateinuserdf", "") : temp.optString("d_dateinuserdf", ""));
                brs.setCheque(temp.optString("chequeno", ""));
                brs.setChequedate(temp.optString("chequedateinuserdf", ""));
                brs.setName(!StringUtil.isNullOrEmpty(temp.optString("c_accountname", "")) ? temp.optString("c_accountname", "") : temp.optString("d_accountname", ""));
                brs.setConciledate(!StringUtil.isNullOrEmpty(temp.optString("c_reconciledateinuserdf", "")) ? temp.optString("c_reconciledateinuserdf", "") : temp.optString("d_reconciledateinuserdf", ""));
                brs.setNumber(temp.optString("transactionID", ""));
                brs.setMemo(!StringUtil.isNullOrEmpty(temp.optString("c_memo", "")) ? temp.optString("c_memo", "") : temp.optString("d_memo", ""));
		brs.setPayee(!StringUtil.isNullOrEmpty(temp.optString("c_payee", "")) ? temp.optString("c_payee", "") : temp.optString("d_payee", ""));
                if((paymentType==1 || paymentType==2) && templateflag == Constants.Sanxing_templateflag){
                    transCurrSymbol = (!StringUtil.isNullOrEmpty(temp.optString("accountcurrencysymbol", "")) ? temp.optString("accountcurrencysymbol", "") : "");
                    transCurrSymbol = accCommonTablesDAO.getCustomCurrencySymbol(transCurrSymbol, companyid);
                    brs.setPayTo(!StringUtil.isNullOrEmpty(temp.optString("c_accountname", "")) ? temp.optString("c_accountname", "") : temp.optString("d_accountname", ""));
                    brs.setAmount(transCurrSymbol + " " + (!StringUtil.isNullOrEmpty(temp.optString("c_amountinacc", "")) ? authHandler.formattedCommaSeparatedAmount(temp.optDouble("c_amountinacc", 0), companyid) : authHandler.formattedCommaSeparatedAmount(temp.optDouble("d_amountinacc", 0), companyid)));
                } else {
                    transCurrSymbol = (!StringUtil.isNullOrEmpty(temp.optString("c_transCurrSymbol", "")) ? temp.optString("c_transCurrSymbol", "") : temp.optString("d_transCurrSymbol", ""));
                    transCurrSymbol = accCommonTablesDAO.getCustomCurrencySymbol(transCurrSymbol, companyid);
                    brs.setPayTo(temp.optString("paidto", ""));
                    brs.setAmount(transCurrSymbol + " " + (!StringUtil.isNullOrEmpty(temp.optString("c_amountintransactioncurrency", "")) ? authHandler.formattedCommaSeparatedAmount(temp.optDouble("c_amountintransactioncurrency", 0), companyid) : authHandler.formattedCommaSeparatedAmount(temp.optDouble("d_amountintransactioncurrency", 0), companyid)));
                }
                brs.setBaseamount(baseCurrencyCode + " " + (!StringUtil.isNullOrEmpty(temp.optString("c_amount", "")) ? authHandler.formattedCommaSeparatedAmount(temp.optDouble("c_amount", 0), companyid) : authHandler.formattedCommaSeparatedAmount(temp.optDouble("d_amount", 0), companyid)));
                leftArrList.add(brs);
            }
            JSONArray rightArr = (JSONArray) jobj1.get("right");
            for (int i = 0; i < rightArr.length(); i++) {
                JSONObject temp = rightArr.getJSONObject(i);
                BankReconciliationSubreport brs = new BankReconciliationSubreport();
                int paymentType = temp.optInt("c_paymentType", 0) !=0 ? temp.optInt("c_paymentType", 0) : temp.optInt("d_paymentType", 0);
                brs.setDate(!StringUtil.isNullOrEmpty(temp.optString("c_dateinuserdf", "")) ? temp.optString("c_dateinuserdf", "") : temp.optString("d_dateinuserdf", ""));
                brs.setCheque(temp.optString("chequeno", ""));
                brs.setChequedate(temp.optString("chequedateinuserdf", ""));
                brs.setName(!StringUtil.isNullOrEmpty(temp.optString("c_accountname", "")) ? temp.optString("c_accountname", "") : temp.optString("d_accountname", ""));
                brs.setConciledate(!StringUtil.isNullOrEmpty(temp.optString("c_reconciledateinuserdf", "")) ? temp.optString("c_reconciledateinuserdf", "") : temp.optString("d_reconciledateinuserdf", ""));
                brs.setNumber(temp.optString("transactionID", ""));
                brs.setMemo(!StringUtil.isNullOrEmpty(temp.optString("c_memo", "")) ? temp.optString("c_memo", "") : temp.optString("d_memo", ""));
		brs.setPayee(!StringUtil.isNullOrEmpty(temp.optString("c_payee", "")) ? temp.optString("c_payee", "") : temp.optString("d_payee", ""));
                if((paymentType==1 || paymentType==2) && templateflag == Constants.Sanxing_templateflag){
                    transCurrSymbol = (!StringUtil.isNullOrEmpty(temp.optString("accountcurrencysymbol", "")) ? temp.optString("accountcurrencysymbol", "") : "");
                    transCurrSymbol = accCommonTablesDAO.getCustomCurrencySymbol(transCurrSymbol, companyid);
                    brs.setPayTo(!StringUtil.isNullOrEmpty(temp.optString("c_accountname", "")) ? temp.optString("c_accountname", "") : temp.optString("d_accountname", ""));
                    brs.setAmount(transCurrSymbol + " " + (!StringUtil.isNullOrEmpty(temp.optString("c_amountinacc", "")) ? authHandler.formattedCommaSeparatedAmount(temp.optDouble("c_amountinacc", 0), companyid) : authHandler.formattedCommaSeparatedAmount(temp.optDouble("d_amountinacc", 0), companyid)));
                } else {
                    transCurrSymbol = (!StringUtil.isNullOrEmpty(temp.optString("c_transCurrSymbol", "")) ? temp.optString("c_transCurrSymbol", "") : temp.optString("d_transCurrSymbol", ""));
                    transCurrSymbol = accCommonTablesDAO.getCustomCurrencySymbol(transCurrSymbol, companyid);
                    brs.setPayTo(temp.optString("paidto", ""));
                    brs.setAmount(transCurrSymbol + " " + (!StringUtil.isNullOrEmpty(temp.optString("c_amountintransactioncurrency", "")) ? authHandler.formattedCommaSeparatedAmount(temp.optDouble("c_amountintransactioncurrency", 0), companyid) : authHandler.formattedCommaSeparatedAmount(temp.optDouble("d_amountintransactioncurrency", 0), companyid)));
                }
                brs.setBaseamount(baseCurrencyCode + " " + (!StringUtil.isNullOrEmpty(temp.optString("c_amount", "")) ? authHandler.formattedCommaSeparatedAmount(temp.optDouble("c_amount", 0), companyid) : authHandler.formattedCommaSeparatedAmount(temp.optDouble("d_amount", 0), companyid)));
                rightArrList.add(brs);
            }
            JSONArray totarr = jobj1.getJSONArray("totalinacc");
            double balance = jobj1.optDouble("bankdatainacc", 0);
            double chkTotal = totarr.optDouble(1);
            double depTotal = totarr.optDouble(0);
            double total = balance + chkTotal + depTotal;

            JSONArray totalInBase = jobj1.getJSONArray("total");
            double chkTotalInBase = totalInBase.optDouble(1) * -1;
            double depTotalInBase = totalInBase.optDouble(0);

            voucherMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
            voucherMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            voucherMap.put("BalancePerBBook", accCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(balance, companyid));
            if (startDate != null) {
                voucherMap.put("startDate", df.format(startDate));
            }else{
                voucherMap.put("startDate", "-");
            }

            if (endDate != null) {
                voucherMap.put("endDate", df.format(endDate));
            }else{
               voucherMap.put("endDate", "-");
            }
            voucherMap.put("accname", account.getName() + (account.getAcccode() == null ? "" : " " + "(" + account.getAcccode() + ")"));
            voucherMap.put("chkTotal", accCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(chkTotal, companyid));
            voucherMap.put("depTotal", accCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((depTotal * -1), companyid));
            voucherMap.put("chkCount", rightArr.length() + "");
            voucherMap.put("depCount", leftArr.length() + "");
            voucherMap.put("chkTotalInBase", baseCurrencyCode + " " + authHandler.formattedCommaSeparatedAmount(chkTotalInBase, companyid));
            voucherMap.put("depTotalInBase", baseCurrencyCode + " " + authHandler.formattedCommaSeparatedAmount(depTotalInBase, companyid));
            voucherMap.put("CorrectedBalance", accCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(total, companyid));
            voucherMap.put("BalancePerStmt", accCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(total, companyid));
            voucherMap.put("TableTwoData", new JRBeanCollectionDataSource(leftArrList));
            voucherMap.put("TableOneData", new JRBeanCollectionDataSource(rightArrList));

            if (isConcileReport) {    //View Reconcile Report
                response.setHeader("Content-Disposition", "attachment;filename=" + "ViewReconciliationStatement.pdf");
                if(isMemoPDF){
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/ViewReconciliationReport_Memo.jrxml");
                } else {
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/ViewReconciliationReport.jrxml");
                }                
            } else {    //Bank Reconciliation Report
                if (templateflag == Constants.Sanxing_templateflag) { //SDP-3206 : Sanxing specific BR
                    response.setHeader("Content-Disposition", "attachment;filename=" + "BankReconciliationStatement_v1.pdf");
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BankReconciliationReport_Sanxing.jrxml");
                } else if(isMaintainHistory && isMemoPDF){  //Un-reconciled Records with Memo Details (Till TO Date) PDF
                    response.setHeader("Content-Disposition", "attachment;filename=" + "BankReconciliationStatement_v1.pdf");
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BankReconciliationReport_Memo.jrxml");
                } else if(isMaintainHistory && !isMemoPDF){ //Un-reconciled Records without Memo Details (Till TO Date) PDF
                    response.setHeader("Content-Disposition", "attachment;filename=" + "BankReconciliationStatement_v1.pdf");
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BankReconciliationReport.jrxml");
                } else if(isMemoPDF){
                    response.setHeader("Content-Disposition", "attachment;filename=" + "BankReconciliationStatement_v1.pdf");
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BankReconciliationReport_Memo.jrxml");
                } else {    //Common For All
                    response.setHeader("Content-Disposition", "attachment;filename=" + "BankReconciliationStatement_v1.pdf");
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BankReconciliationReport.jrxml");
                }
            }
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
	    if(inputStream !=null) {
                inputStream.close();    //To avoid   ***ExceptionConverter: ClientAbortException:  java.net.SocketException: Broken pipe***
            }
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

public JSONObject getReconciliationData(HttpServletRequest request) throws ServiceException, SessionExpiredException, JSONException {
        JSONObject jobj = new JSONObject();
        try {
            JSONObject diffCurrencyAmount = new JSONObject();
            JSONObject singleCurrency = null;
            String transcurname = "", billid = "", action = "", accountid = "",  vName = "";
            boolean isReconciledHistoryDetails = false;
            Date startDate = null, endDate = null;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            boolean isConcileReport = StringUtil.isNullOrEmpty(request.getParameter("isConcileReport")) ? false : Boolean.parseBoolean(request.getParameter("isConcileReport"));
            boolean isExportReportRequest = request.getAttribute("isExportReportRequest") != null ? (Boolean) request.getAttribute("isExportReportRequest") : false;
            boolean isMaintainHistory = StringUtil.isNullOrEmpty(request.getParameter("isMaintainHistory")) ? false : Boolean.parseBoolean(request.getParameter("isMaintainHistory"));
	    boolean isMemoPDF = StringUtil.isNullOrEmpty(request.getParameter("isMemoPDF")) ? false : Boolean.parseBoolean(request.getParameter("isMemoPDF"));
            int dateFilter = 0;
            try {
                dateFilter = StringUtil.isNullOrEmpty(request.getParameter("dateFilter")) ? 0 : Integer.parseInt(request.getParameter("dateFilter")); // 0 for Payment Date & 1 for Reconcile Date            
            } catch (NumberFormatException nfe) {
                dateFilter = 0;
            }
            String companyid = sessionHandlerImpl.getCompanyid(request);
            if (request.getAttribute("isreconciledhistorydetailsXls") != null && (Boolean) request.getAttribute("isreconciledhistorydetailsXls")) { //For Reconciliation History Detail Report Xls File Generation
                isReconciledHistoryDetails = request.getAttribute("isReconciledHistoryDetails") != null ? (Boolean) request.getAttribute("isReconciledHistoryDetails") : true;
                billid = request.getAttribute("billid") != null ? (String) request.getAttribute("billid") : "";
                action = request.getAttribute("action") != null ? (String) request.getAttribute("action") : "";
                accountid = request.getAttribute("accountid") != null ? (String) request.getAttribute("accountid") : "";
                startDate = request.getAttribute("stdate") != null ? (Date) request.getAttribute("stdate") : null;
                endDate = request.getAttribute("enddate") != null ? (Date) request.getAttribute("enddate") : null;
                dateFilter = 1;     //For History Details Report, this param value will be 1. Because we are fetching the data based on reconcile date. In else case we are fetching data either reconcile date or JE date
            } else {
                isReconciledHistoryDetails = StringUtil.isNullOrEmpty(request.getParameter("isReconciledHistoryDetails")) ? false : Boolean.parseBoolean(request.getParameter("isReconciledHistoryDetails"));
                billid = !StringUtil.isNullOrEmpty(request.getParameter("billid")) ? request.getParameter("billid") : "";
                action = !StringUtil.isNullOrEmpty(request.getParameter("action")) ? request.getParameter("action") : "";
                accountid = !StringUtil.isNullOrEmpty(request.getParameter("accountid")) ? request.getParameter("accountid") : "";
                //Used GlobalDateFormat to avoid change in time as per time zone. ERP-8474
                String stdate = request.getParameter("stdate");

                if (!StringUtil.isNullOrEmpty(stdate)) {
                    startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
                }
                endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            }     
            
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            String entryChar = "c", emptyChar = "d";            
            String ss = StringUtil.isNullOrEmpty(request.getParameter("ss")) ? "" : request.getParameter("ss");            
            
            HashMap<String, Object> params = new HashMap<String, Object>();
            params.put(Constants.companyid, companyid);
            params.put("ss", ss);
            params.put("accountid", accountid);
            params.put(Constants.REQ_startdate, startDate);
            params.put(Constants.REQ_enddate, endDate);
            params.put("isConcileReport", isConcileReport);
            params.put("isExportReportRequest", isExportReportRequest);
            params.put("dateFilter", new Integer(dateFilter));
            params.put("isMaintainHistory", isMaintainHistory);
	    params.put("isMemoPDF", isMemoPDF);
            params.put("billid", billid);
            params.put("isReconciledHistoryDetails", isReconciledHistoryDetails);  //For History Transaction Details
            params.put("isdeleted", action.equals("Reconcile") ? "FALSE": (action.equals("Un-Reconcile") ? "TRUE" : ""));  //To fetch the reconciled & un-reconciled records
            
            KwlReturnObject lresult = accJournalEntryobj.getLedgerForReconciliation(params);
            List list = lresult.getEntityList();
            String currencysymbol = "";
            String transCurrSymbol = "";    //Transaction Currency Symbol.

            Iterator itr = list.iterator();
            JSONArray jArrL = new JSONArray();
            JSONArray jArrR = new JSONArray();
            
            JSONArray clearedDepositsArr = new JSONArray();   //For Cleared Deposit
            JSONArray clearedChecksArr = new JSONArray();   //For Cleared Checks Snapshot
            
            JSONArray unclearedDepositsArr = new JSONArray();   //For Uncleared Deposit
            JSONArray unclearedChecksArr = new JSONArray();   //For Uncleared Checks
            
            double debitbalance = 0;
            double creditbalance = 0;
            double creditbalanceinacc = 0;
            double debitbalanceinacc = 0;
            KwlReturnObject accountResult1 = accountingHandlerDAOobj.getObject("com.krawler.hql.accounting.Account", accountid);
            Account account1 = (Account) accountResult1.getEntityList().get(0);
            String accountcurrencyid = account1.getCurrency() == null ? currency.getCurrencyID() : account1.getCurrency().getCurrencyID();
            String accountCurrSymbol = account1.getCurrency() == null ? currency.getSymbol() : account1.getCurrency().getSymbol();
            String accountCurrCode = account1.getCurrency() == null ? currency.getCurrencyCode() : account1.getCurrency().getCurrencyCode();
            String accountNm = account1.getAccountName();
            
            params.put("ispayment", true);
	    //For Opening Checks & Payments
            KwlReturnObject accpaymentResult = accJournalEntryobj.getReconciliationOfAccountOpeningTransactions(params);
            List accpaymentList = accpaymentResult.getEntityList();
            Iterator accpaymentItr = accpaymentList.iterator();
            while (accpaymentItr.hasNext()) {
                AccountOpeningTransaction payment = null;
                BankReconciliation br = null;
                BankReconciliationDetail brd = null;
                String brdID = "";
                if (isConcileReport) {
                    Object[] row = (Object[]) accpaymentItr.next();
                    payment = (AccountOpeningTransaction) row[0];
                    br = (BankReconciliation) row[1];
                    brd = (BankReconciliationDetail) row[2];
                    brdID = brd.getID();
                } else {
                    payment = (AccountOpeningTransaction) accpaymentItr.next();
                }
                currencyid = (payment.getCurrency() == null ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID());
                transCurrSymbol = (payment.getCurrency() == null ? currency.getSymbol() : payment.getCurrency().getSymbol());
                transcurname = (payment.getCurrency() == null ? currency.getName() : payment.getCurrency().getName());
                double jedAmountInBase = payment.getDepositamountinbase();

                KwlReturnObject amountresult = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, jedAmountInBase, accountcurrencyid, payment.getCreationDate(), 0);
                double amountInAccountCurrency = (Double) amountresult.getEntityList().get(0);

                if (currencyid == accountcurrencyid) {
                    creditbalanceinacc += authHandler.round(payment.getDepositAmount(), companyid);
                } else {
                    creditbalance += jedAmountInBase;   //Debit Balance in Base Currency
                    creditbalanceinacc += authHandler.round(amountInAccountCurrency, companyid);    //Debit Balance in Account Currency
                }
                entryChar = "c";
                emptyChar = "d";
                if (diffCurrencyAmount.has(transCurrSymbol)) {
                    singleCurrency = diffCurrencyAmount.getJSONObject(transCurrSymbol);
                    if (singleCurrency.has("c_amount")) {
                        singleCurrency.put("c_amount", payment.getDepositAmount() + singleCurrency.getDouble("c_amount"));
                    } else {
                        singleCurrency.put("c_amount", payment.getDepositAmount());
                    }
                } else {
                    singleCurrency = new JSONObject();
                    singleCurrency.put("transCurrSymbol", transCurrSymbol);
                    singleCurrency.put("c_amount", payment.getDepositAmount());
                    singleCurrency.put("transcurname", transcurname);
                    diffCurrencyAmount.put(transCurrSymbol, singleCurrency);
                }


                String accountName = payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod() == null ? "" : payment.getPayDetail().getPaymentMethod().getAccount().getAccountName();

                JSONObject obj = new JSONObject();
                if (isConcileReport && br != null) {
                    obj.put(entryChar + "_reconciledate", authHandler.getDateOnlyFormat().format(br.getClearanceDate()));
                    obj.put(entryChar + "_reconciledateinuserdf", userdf.format(br.getClearanceDate()));
                    obj.put("lastreconciledate", authHandler.getDateOnlyFormat().format(br.getClearanceDate())); //ERP-12881
                }
                obj.put("id", brdID);
                obj.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(payment.getCreationDate()));
                obj.put(entryChar + "_dateinuserdf", userdf.format(payment.getCreationDate()));
                obj.put(entryChar + "_accountname", accountName);
                obj.put(entryChar + "_entryno", "");
                obj.put(entryChar + "_journalentryid", "");
                obj.put(entryChar + "_amountintransactioncurrency", authHandler.round(payment.getDepositAmount(), companyid));
                double baseamt = jedAmountInBase;
                obj.put(entryChar + "_amount", authHandler.round(baseamt, companyid));//this is amount in base crrency 
                if (currencyid.equals(accountcurrencyid)) {
                    obj.put(entryChar + "_amountinacc", authHandler.round(payment.getDepositAmount(), companyid));//this is amount in Account crrency for PDF
                } else {
                    double amtinAccCurr = amountInAccountCurrency;   //Amount in Account Currency
                    obj.put(entryChar + "_amountinacc", authHandler.round(amtinAccCurr, companyid));//this is amount in Account crrency for PDF
                }
                obj.put(entryChar + "_memo", payment.getMemo());

                obj.put(entryChar + "_transCurrSymbol", transCurrSymbol);
                obj.put("accountcurrencysymbol", accountCurrSymbol);//Account currency syambol
                obj.put(emptyChar + "_reconciledate", "");
                obj.put(emptyChar + "_reconciledateinuserdf", "");
                obj.put(emptyChar + "_date", "");
                obj.put(emptyChar + "_dateinuserdf", "");
                obj.put(emptyChar + "_accountname", "");
                obj.put(emptyChar + "_entryno", "");
                obj.put(emptyChar + "_journalentryid", "");
                obj.put(emptyChar + "_amountintransactioncurrency", "");
                obj.put(emptyChar + "_amount", "");
                obj.put(emptyChar + "_amountinacc", "");
                obj.put(emptyChar + "_memo", "");

                if (payment != null) {
                    obj.put("transactionID", payment.getTransactionNumber());
                    if (payment.getPayDetail() != null && (payment.getPayDetail().getCheque() != null)) {
                        obj.put("chequeno", payment.getPayDetail().getCheque().getChequeNo());
                        obj.put("chequedate", payment.getPayDetail().getCheque().getDueDate() != null ? authHandler.getDateOnlyFormat().format(payment.getPayDetail().getCheque().getDueDate()) : "");
                        obj.put("chequedateinuserdf", payment.getPayDetail().getCheque().getDueDate() != null ? userdf.format(payment.getPayDetail().getCheque().getDueDate()) : "");
                        String description = payment.getPayDetail().getCheque().getDescription();
                        obj.put("description", description != null ? description : "");
                        obj.put(entryChar + "_accountname", "Opening Transaction of Account : " + payment.getAccount().getAccountName());
                    }
                    obj.put(Constants.billid, payment.getID());
                    obj.put("isOpeningTransaction", true);
                    obj.put(Constants.moduleid, Constants.Account_Opening_Transaction_ModuleId);
                    obj.put("type", Constants.PAYMENT_MADE);
                    obj.put("paidto", "");
                    obj.put("currencysymbol", payment.getCurrency() != null ? payment.getCurrency().getSymbol() : currency.getSymbol());
                }
                jArrR.put(obj);
            }
            params.put("ispayment", false);
	    //For Opening Deposits
            KwlReturnObject accreceiptResult = accJournalEntryobj.getReconciliationOfAccountOpeningTransactions(params);
            List<Receipt> accreceiptList = accreceiptResult.getEntityList();
            Iterator accreceiptItr = accreceiptList.iterator();
            while (accreceiptItr.hasNext()) {
                AccountOpeningTransaction receipt = null;
                BankReconciliation br = null;
                BankReconciliationDetail brd = null;
                String brdID = "";
                if (isConcileReport) {
                    Object[] row = (Object[]) accreceiptItr.next();
                    receipt = (AccountOpeningTransaction) row[0];
                    br = (BankReconciliation) row[1];
                    brd = (BankReconciliationDetail) row[2];
                    brdID = brd.getID();
                } else {
                    receipt = (AccountOpeningTransaction) accreceiptItr.next();
                }
                currencyid = (receipt.getCurrency() == null ? currency.getCurrencyID() : receipt.getCurrency().getCurrencyID());
                transCurrSymbol = (receipt.getCurrency() == null ? currency.getSymbol() : receipt.getCurrency().getSymbol());
                transcurname = (receipt.getCurrency() == null ? currency.getName() : receipt.getCurrency().getName());
                double jedAmountInBase = receipt.getDepositamountinbase();
                KwlReturnObject amountresult = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, jedAmountInBase, accountcurrencyid, receipt.getCreationDate(), 0);
                double amountInAccountCurrency = (Double) amountresult.getEntityList().get(0);


                if (currencyid == accountcurrencyid) {
                    debitbalanceinacc += authHandler.round(receipt.getDepositAmount(), companyid);
                } else {
                    debitbalance += jedAmountInBase;  //Credit Balance in Base Currency
                    debitbalanceinacc += authHandler.round(amountInAccountCurrency, companyid);   //Credit Balance in Account Currency
                }
                entryChar = "d";
                emptyChar = "c";
                if (diffCurrencyAmount.has(transCurrSymbol)) {
                    singleCurrency = diffCurrencyAmount.getJSONObject(transCurrSymbol);
                    if (singleCurrency.has("d_amount")) {
                        singleCurrency.put("d_amount", receipt.getDepositAmount() + singleCurrency.getDouble("d_amount"));
                    } else {
                        singleCurrency.put("d_amount", receipt.getDepositAmount());
                    }
                } else {
                    singleCurrency = new JSONObject();
                    singleCurrency.put("transCurrSymbol", transCurrSymbol);
                    singleCurrency.put("d_amount", receipt.getDepositAmount());
                    singleCurrency.put("transcurname", transcurname);
                    diffCurrencyAmount.put(transCurrSymbol, singleCurrency);
                }

                String accountName = receipt.getPayDetail() == null ? "" : receipt.getPayDetail().getPaymentMethod() == null ? "" : receipt.getPayDetail().getPaymentMethod().getAccount().getAccountName();

                JSONObject obj = new JSONObject();
                if (isConcileReport && br != null) {
                    obj.put(entryChar + "_reconciledate", authHandler.getDateOnlyFormat().format(br.getClearanceDate()));
                    obj.put(entryChar + "_reconciledateinuserdf", userdf.format(br.getClearanceDate()));
                    obj.put("lastreconciledate", authHandler.getDateOnlyFormat().format(br.getClearanceDate())); //ERP-12881
                }
                obj.put("id", brdID);
                obj.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(receipt.getCreationDate()));
                obj.put(entryChar + "_dateinuserdf", userdf.format(receipt.getCreationDate()));
                obj.put(entryChar + "_accountname", accountName);
                obj.put(entryChar + "_entryno", "");
                obj.put(entryChar + "_journalentryid", "");
                obj.put(entryChar + "_amountintransactioncurrency", authHandler.round(receipt.getDepositAmount(), companyid));
                double baseamt = jedAmountInBase;
                obj.put(entryChar + "_amount", authHandler.round(baseamt, companyid));//this is amount in base crrency 
                if (currencyid.equals(accountcurrencyid)) {
                    obj.put(entryChar + "_amountinacc", authHandler.round(receipt.getDepositAmount(), companyid));//this is amount in Account crrency for PDF
                } else {
                    double amtinAccCurr = amountInAccountCurrency;   //Amount in Account Currency
                    obj.put(entryChar + "_amountinacc", authHandler.round(amtinAccCurr, companyid));//this is amount in Account crrency for PDF
                }
                obj.put(entryChar + "_memo", receipt.getMemo());

                obj.put(entryChar + "_transCurrSymbol", transCurrSymbol);
                obj.put("accountcurrencysymbol", accountCurrSymbol);//Account currency syambol
                obj.put(emptyChar + "_reconciledate", "");
                obj.put(emptyChar + "_reconciledateinuserdf", "");
                obj.put(emptyChar + "_date", "");
                obj.put(emptyChar + "_dateinuserdf", "");
                obj.put(emptyChar + "_accountname", "");
                obj.put(emptyChar + "_entryno", "");
                obj.put(emptyChar + "_journalentryid", "");
                obj.put(emptyChar + "_amountintransactioncurrency", "");
                obj.put(emptyChar + "_amount", "");
                obj.put(emptyChar + "_amountinacc", "");
                obj.put(emptyChar + "_memo", "");

                if (receipt != null) {
                    obj.put("transactionID", (receipt).getTransactionNumber());
                    if ((receipt).getPayDetail() != null && ((receipt).getPayDetail().getCheque() != null)) {
                        obj.put("chequeno", (receipt).getPayDetail().getCheque().getChequeNo());
                        obj.put("chequedate", receipt.getPayDetail().getCheque().getDueDate() != null ? authHandler.getDateOnlyFormat().format(receipt.getPayDetail().getCheque().getDueDate()) : "");
                        obj.put("chequedateinuserdf", receipt.getPayDetail().getCheque().getDueDate() != null ? userdf.format(receipt.getPayDetail().getCheque().getDueDate()) : "");
                        String description = (receipt).getPayDetail().getCheque().getDescription();
                        obj.put("description", description != null ? description : "");
                        obj.put(entryChar + "_accountname", "Opening Transaction of Account : " + receipt.getAccount().getAccountName());
                    }
                    obj.put(Constants.billid, (receipt).getID());
                    obj.put("isOpeningTransaction", true);
                    obj.put(Constants.moduleid, Constants.Account_Opening_Transaction_ModuleId);
                    obj.put("paidto", "");
                    obj.put("type", Constants.PAYMENT_RECEIVED);
                    obj.put("currencysymbol", receipt.getCurrency() != null ? receipt.getCurrency().getSymbol() : currency.getSymbol());
                }
                jArrL.put(obj);
            }
            params.put("isreceipt", false);
            KwlReturnObject paymentResult = accJournalEntryobj.getReconciliationOfOpeningTransactions(params);
            List paymentList = paymentResult.getEntityList();
            Iterator paymentItr = paymentList.iterator();
            while (paymentItr.hasNext()) {
                Payment payment = null;
                BankReconciliation br = null;
                BankReconciliationDetail brd = null;
                String brdID = "";
                if (isConcileReport) {
                    Object[] row = (Object[]) paymentItr.next();
                    payment = (Payment) row[0];
                    br = (BankReconciliation) row[1];
                    brd = (BankReconciliationDetail) row[2];
                    brdID = brd.getID();
                } else {
                    payment = (Payment) paymentItr.next();
                }
                currencyid = (payment.getCurrency() == null ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID());
                transCurrSymbol = (payment.getCurrency() == null ? currency.getSymbol() : payment.getCurrency().getSymbol());
                transcurname = (payment.getCurrency() == null ? currency.getName() : payment.getCurrency().getName());
                double jedAmountInBase = payment.getOriginalOpeningBalanceBaseAmount();

                KwlReturnObject amountresult = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, jedAmountInBase, accountcurrencyid, payment.getCreationDate(), 0);
                double amountInAccountCurrency = (Double) amountresult.getEntityList().get(0);

                if (currencyid == accountcurrencyid) {
                    creditbalanceinacc += authHandler.round(payment.getDepositAmount(), companyid);
                } else {
                    creditbalance += jedAmountInBase;   //Debit Balance in Base Currency
                    creditbalanceinacc += authHandler.round(amountInAccountCurrency, companyid);    //Debit Balance in Account Currency
                }
                entryChar = "c";
                emptyChar = "d";
                if (diffCurrencyAmount.has(transCurrSymbol)) {
                    singleCurrency = diffCurrencyAmount.getJSONObject(transCurrSymbol);
                    if (singleCurrency.has("c_amount")) {
                        singleCurrency.put("c_amount", payment.getDepositAmount() + singleCurrency.getDouble("c_amount"));
                    } else {
                        singleCurrency.put("c_amount", payment.getDepositAmount());
                    }
                } else {
                    singleCurrency = new JSONObject();
                    singleCurrency.put("transCurrSymbol", transCurrSymbol);
                    singleCurrency.put("c_amount", payment.getDepositAmount());
                    singleCurrency.put("transcurname", transcurname);
                    diffCurrencyAmount.put(transCurrSymbol, singleCurrency);
                }


                String accountName = payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod() == null ? "" : payment.getPayDetail().getPaymentMethod().getAccount().getAccountName();

                JSONObject obj = new JSONObject();
                if (isConcileReport && br != null) {
                    obj.put(entryChar + "_reconciledate", authHandler.getDateOnlyFormat().format(br.getClearanceDate()));
                    obj.put(entryChar + "_reconciledateinuserdf", userdf.format(br.getClearanceDate()));
                    obj.put("lastreconciledate", authHandler.getDateOnlyFormat().format(br.getClearanceDate())); //ERP-12881
                }
                obj.put("id", brdID);
                obj.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(payment.getCreationDate()));
                obj.put(entryChar + "_dateinuserdf", userdf.format(payment.getCreationDate()));
                obj.put(entryChar + "_accountname", accountName);
                obj.put(entryChar + "_entryno", "");
                obj.put(entryChar + "_journalentryid", "");
                obj.put(entryChar + "_amountintransactioncurrency", authHandler.round(payment.getDepositAmount(), companyid));
                double baseamt = jedAmountInBase;
                obj.put(entryChar + "_amount", authHandler.round(baseamt, companyid));//this is amount in base crrency 
                if (currencyid.equals(accountcurrencyid)) {
                    obj.put(entryChar + "_amountinacc", authHandler.round(payment.getDepositAmount(), companyid));//this is amount in Account crrency for PDF
                } else {
                    double amtinAccCurr = amountInAccountCurrency;   //Amount in Account Currency
                    obj.put(entryChar + "_amountinacc", authHandler.round(amtinAccCurr, companyid));//this is amount in Account crrency for PDF
                }
                obj.put(entryChar + "_memo", payment.getMemo()); //Payment Memo
		obj.put(entryChar + "_payee", payment.getPayee()); //Payee field value in Make Payment
                obj.put(entryChar + "_transCurrSymbol", transCurrSymbol);
                obj.put("accountcurrencysymbol", accountCurrSymbol);//Account currency syambol
                obj.put(emptyChar + "_reconciledate", "");
                obj.put(emptyChar + "_reconciledateinuserdf", "");
                obj.put(emptyChar + "_date", "");
                obj.put(emptyChar + "_dateinuserdf", "");
                obj.put(emptyChar + "_accountname", "");
                obj.put(emptyChar + "_entryno", "");
                obj.put(emptyChar + "_journalentryid", "");
                obj.put(emptyChar + "_amountintransactioncurrency", "");
                obj.put(emptyChar + "_amount", "");
                obj.put(emptyChar + "_amountinacc", "");
                obj.put(emptyChar + "_memo", ""); //Payment Memo
		obj.put(emptyChar + "_payee", ""); //Payment Payee
                if (payment != null) {
                    int paymentType = payment.getPaymentWindowType();
                    obj.put(entryChar + "_paymentType", paymentType);   //Used differentiate between payment types---payment Against Vendor = 1,payment Against Customer = 2,Aginst GL = 3
                    obj.put("transactionID", payment.getPaymentNumber());
                    if (payment.getPayDetail() != null && (payment.getPayDetail().getCheque() != null)) {
                        obj.put("chequeno", payment.getPayDetail().getCheque().getChequeNo());
                        obj.put("chequedate", payment.getPayDetail().getCheque().getDueDate() != null ? authHandler.getDateOnlyFormat().format(payment.getPayDetail().getCheque().getDueDate()) : "");
                        obj.put("chequedateinuserdf", payment.getPayDetail().getCheque().getDueDate() != null ? userdf.format(payment.getPayDetail().getCheque().getDueDate()) : "");
                        String description = payment.getPayDetail().getCheque().getDescription();
                        obj.put("description", description != null ? description : "");
                        Customer customer = null;
                        if (payment.getCustomer() != null) {
                            KwlReturnObject custResult = accountingHandlerDAOobj.getObject(Customer.class.getName(), payment.getCustomer());
                            customer = (Customer) custResult.getEntityList().get(0);
                        }
                        Vendor vendor = payment.getVendor();
                        vName = "";
                        //try {
                            if (vendor != null) {
                                vName = StringUtil.DecodeText(vendor.getName());
                            } else if (customer != null) {
                                vName = StringUtil.DecodeText(customer.getName());
                            } else {
                                KwlReturnObject result = accVendorPaymentDao.getPaymentVendorNames(companyid, payment.getID());
                                List vNameList = result.getEntityList();
                                Iterator vNamesItr = vNameList.iterator();
                                String vendorNames = "";
                                try {
                                    while (vNamesItr.hasNext()) {
                                        String tempName = URLEncoder.encode((String) vNamesItr.next(), "UTF-8");
                                        vendorNames += tempName;
                                        vendorNames += ",";
                                    }
                                    vendorNames = vendorNames.substring(0, Math.max(0, vendorNames.length() - 1));
                                } catch (Exception e) {
                                    throw ServiceException.FAILURE("getReconciliationData : " + e.getMessage(), e);
                                }
                                vName = StringUtil.DecodeText(vendorNames);
                            }
                       /* } catch (UnsupportedEncodingException ex) {
                            Logger.getLogger(accReportsController.class.getName()).log(Level.WARNING, ex.getMessage());
                        }*/
                        obj.put(entryChar + "_accountname", "Opening Balance for : " + vName);
                    }
                    obj.put(Constants.billid, payment.getID());
                    obj.put("isOpeningTransaction", true);
                    obj.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    obj.put("type", Constants.PAYMENT_MADE);
                    obj.put("paidto", payment.getPaidTo() == null ? "" : payment.getPaidTo().getValue() == null ? "" : payment.getPaidTo().getValue());
                    obj.put("currencysymbol", payment.getCurrency() != null ? payment.getCurrency().getSymbol() : currency.getSymbol());
                }
                jArrR.put(obj);
            }
            params.put("isreceipt", true);
            KwlReturnObject receiptResult = accJournalEntryobj.getReconciliationOfOpeningTransactions(params);
            List<Receipt> receiptList = receiptResult.getEntityList();
            Iterator receiptItr = receiptList.iterator();
            while (receiptItr.hasNext()) {
                Receipt receipt = null;
                BankReconciliation br = null;
                BankReconciliationDetail brd = null;
                String brdID = "";
                if (isConcileReport) {
                    Object[] row = (Object[]) receiptItr.next();
                    receipt = (Receipt) row[0];
                    br = (BankReconciliation) row[1];
                    brd = (BankReconciliationDetail) row[2];
                    brdID = brd.getID();
                } else {
                    receipt = (Receipt) receiptItr.next();
                }
                currencyid = (receipt.getCurrency() == null ? currency.getCurrencyID() : receipt.getCurrency().getCurrencyID());
                transCurrSymbol = (receipt.getCurrency() == null ? currency.getSymbol() : receipt.getCurrency().getSymbol());
                transcurname = (receipt.getCurrency() == null ? currency.getName() : receipt.getCurrency().getName());
                double jedAmountInBase = receipt.getOriginalOpeningBalanceBaseAmount();
                KwlReturnObject amountresult = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, jedAmountInBase, accountcurrencyid, receipt.getCreationDate(), 0);
                double amountInAccountCurrency = (Double) amountresult.getEntityList().get(0);


                if (currencyid == accountcurrencyid) {
                    debitbalanceinacc += authHandler.round(receipt.getDepositAmount(), companyid);
                } else {
                    debitbalance += jedAmountInBase;  //Credit Balance in Base Currency
                    debitbalanceinacc += authHandler.round(amountInAccountCurrency, companyid);   //Credit Balance in Account Currency
                }
                entryChar = "d";
                emptyChar = "c";
                if (diffCurrencyAmount.has(transCurrSymbol)) {
                    singleCurrency = diffCurrencyAmount.getJSONObject(transCurrSymbol);
                    if (singleCurrency.has("d_amount")) {
                        singleCurrency.put("d_amount", receipt.getDepositAmount() + singleCurrency.getDouble("d_amount"));
                    } else {
                        singleCurrency.put("d_amount", receipt.getDepositAmount());
                    }
                } else {
                    singleCurrency = new JSONObject();
                    singleCurrency.put("transCurrSymbol", transCurrSymbol);
                    singleCurrency.put("d_amount", receipt.getDepositAmount());
                    singleCurrency.put("transcurname", transcurname);
                    diffCurrencyAmount.put(transCurrSymbol, singleCurrency);
                }

                String accountName = receipt.getPayDetail() == null ? "" : receipt.getPayDetail().getPaymentMethod() == null ? "" : receipt.getPayDetail().getPaymentMethod().getAccount().getAccountName();

                JSONObject obj = new JSONObject();
                if (isConcileReport && br != null) {
                    obj.put(entryChar + "_reconciledate", authHandler.getDateOnlyFormat().format(br.getClearanceDate()));
                    obj.put(entryChar + "_reconciledateinuserdf", userdf.format(br.getClearanceDate()));
                    obj.put("lastreconciledate", authHandler.getDateOnlyFormat().format(br.getClearanceDate())); //ERP-12881
                }
                obj.put("id", brdID);
                obj.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(receipt.getCreationDate()));
                obj.put(entryChar + "_dateinuserdf", userdf.format(receipt.getCreationDate()));
                obj.put(entryChar + "_accountname", accountName);
                obj.put(entryChar + "_entryno", "");
                obj.put(entryChar + "_journalentryid", "");
                obj.put(entryChar + "_amountintransactioncurrency", authHandler.round(receipt.getDepositAmount(), companyid));
                double baseamt = jedAmountInBase;
                obj.put(entryChar + "_amount", authHandler.round(baseamt, companyid));//this is amount in base crrency 
                if (currencyid.equals(accountcurrencyid)) {
                    obj.put(entryChar + "_amountinacc", authHandler.round(receipt.getDepositAmount(), companyid));//this is amount in Account crrency for PDF
                } else {
                    double amtinAccCurr = amountInAccountCurrency;   //Amount in Account Currency
                    obj.put(entryChar + "_amountinacc", authHandler.round(amtinAccCurr, companyid));//this is amount in Account crrency for PDF
                }
                obj.put(entryChar + "_memo", receipt.getMemo()); //Receipt Memo

                obj.put(entryChar + "_transCurrSymbol", transCurrSymbol);
                obj.put("accountcurrencysymbol", accountCurrSymbol);//Account currency syambol
                obj.put(emptyChar + "_reconciledate", "");
                obj.put(emptyChar + "_reconciledateinuserdf", "");
                obj.put(emptyChar + "_date", "");
                obj.put(emptyChar + "_dateinuserdf", "");
                obj.put(emptyChar + "_accountname", "");
                obj.put(emptyChar + "_entryno", "");
                obj.put(emptyChar + "_journalentryid", "");
                obj.put(emptyChar + "_amountintransactioncurrency", "");
                obj.put(emptyChar + "_amount", "");
                obj.put(emptyChar + "_amountinacc", "");
                obj.put(emptyChar + "_memo", ""); //Receipt Memo

                if (receipt != null) {
                    int paymentType = receipt.getPaymentWindowType();
                    obj.put(entryChar + "_paymentType", paymentType);   //Used differentiate between payment types---payment Against Vendor = 1,payment Against Customer = 2,Aginst GL = 3
                    obj.put("transactionID", (receipt).getReceiptNumber());
                    if ((receipt).getPayDetail() != null && ((receipt).getPayDetail().getCheque() != null)) {
                        obj.put("chequeno", (receipt).getPayDetail().getCheque().getChequeNo());
                        obj.put("chequedate", receipt.getPayDetail().getCheque().getDueDate() != null ? authHandler.getDateOnlyFormat().format(receipt.getPayDetail().getCheque().getDueDate()) : "");
                        obj.put("chequedateinuserdf", receipt.getPayDetail().getCheque().getDueDate() != null ? userdf.format(receipt.getPayDetail().getCheque().getDueDate()) : "");
                        String description = (receipt).getPayDetail().getCheque().getDescription();
                        obj.put("description", description != null ? description : "");

                        Vendor vendor = null;
                        if (receipt.getVendor() != null) {
                            KwlReturnObject custResult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), receipt.getVendor());
                            vendor = (Vendor) custResult.getEntityList().get(0);
                        }
                        Customer customer = receipt.getCustomer();
                        vName = "";
                        //try {
                            if (customer != null) {
                                vName = StringUtil.DecodeText(customer.getName());
                            } else if (vendor != null) {
                                vName = StringUtil.DecodeText(vendor.getName());
                            } else {
                                KwlReturnObject result = accReceiptDao.getReceiptCustomerNames(receipt.getCompany().getCompanyID(), receipt.getID());
                                List cNameList = result.getEntityList();
                                Iterator cNamesItr = cNameList.iterator();
                                String customerNames = "";
                                try {
                                    while (cNamesItr.hasNext()) {
                                        String tempName = URLEncoder.encode((String) cNamesItr.next(), "UTF-8");
                                        customerNames += tempName;
                                        customerNames += ",";
                                    }
                                    customerNames = customerNames.substring(0, Math.max(0, customerNames.length() - 1));
                                } catch (Exception e) {
                                    throw ServiceException.FAILURE("getReconciliationData : " + e.getMessage(), e);
                                }
                                vName = StringUtil.DecodeText(customerNames);
                            }
                     // } catch (UnsupportedEncodingException ex) {
                       //     Logger.getLogger(accReportsController.class.getName()).log(Level.WARNING, ex.getMessage());
                        //}
                        obj.put(entryChar + "_accountname", "Opening Balance for : " + vName);
                    }
                    obj.put(Constants.billid, (receipt).getID());
                    obj.put("isOpeningTransaction", true);
                    obj.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    obj.put("paidto", receipt.getReceivedFrom() == null ? "" : (receipt.getReceivedFrom().getValue()) == null ? "" : receipt.getReceivedFrom().getValue());
                    obj.put("type", Constants.PAYMENT_RECEIVED);
                    obj.put("currencysymbol", receipt.getCurrency() != null ? receipt.getCurrency().getSymbol() : currency.getSymbol());
                }
                jArrL.put(obj);
            }
            
            while (itr.hasNext()) {
                Object[] row = (Object[]) itr.next();
                JournalEntryDetail jed = (JournalEntryDetail) row[1];
                boolean exchangeGainLoss = jed.getJournalEntry().getIsReval() == 2 ? true : false;    //ERP-14744
                if (exchangeGainLoss) {
                    continue;
                }
                JournalEntry entry = (JournalEntry) row[0];
                BankReconciliation br = null;
                BankReconciliationDetail brd = null;
                BankReconciliationDetailHistory brdh = null;
                boolean isClearedDetails = false;
                String brdID = "";
                int transactionModuleId=entry.getTransactionModuleid();
                if(isReconciledHistoryDetails){    //For reconciled history detail report, we are fetching the data from BankReconciliationHistory Table
                    br = (BankReconciliation) row[2];
                    brdh = (BankReconciliationDetailHistory) row[3];
                    brdID = brdh.getID();
                    //isClearedDetails = brdh.isIsClearedDetails();
                } else if (isConcileReport) {
                    br = (BankReconciliation) row[2];
                    brd = (BankReconciliationDetail) row[3];
                    brdID = brd.getID();
                }
                boolean withoutinventory = true;
                JSONObject obj = new JSONObject();
                double exchangeRate = 0;
                vName = "";
                
                if (transactionModuleId == Constants.Acc_Receive_Payment_ModuleId && entry.getTransactionId() != null) {
                    KwlReturnObject resultReceipt = accountingHandlerDAOobj.getObject(Receipt.class.getName(), entry.getTransactionId());
                    Receipt receipt = (Receipt) resultReceipt.getEntityList().get(0);
                    if (receipt != null) {
                        int paymentType = receipt.getPaymentWindowType();
                        obj.put(entryChar + "_paymentType", paymentType);   //Used differentiate between payment types---payment Against Vendor = 1,payment Against Customer = 2,Aginst GL = 3
                        obj.put("transactionID", (receipt).getReceiptNumber());
                        if ((receipt).getPayDetail() != null && ((receipt).getPayDetail().getCheque() != null)) {
                            obj.put("chequeno", (receipt).getPayDetail().getCheque().getChequeNo());
                            obj.put("chequedate", receipt.getPayDetail().getCheque().getDueDate() != null ? authHandler.getDateOnlyFormat().format(receipt.getPayDetail().getCheque().getDueDate()) : "");
                            obj.put("chequedateinuserdf", receipt.getPayDetail().getCheque().getDueDate() != null ? userdf.format(receipt.getPayDetail().getCheque().getDueDate()) : "");
                            String description = (receipt).getPayDetail().getCheque().getDescription();
                            obj.put("description", description != null ? description : "");
                            /**
                             * Passing JE date in response for validating date
                             * on JS Side ERM-655.
                             */
                            obj.put("jeDate", entry.getEntryDate() != null ? authHandler.getDateOnlyFormat().format(entry.getEntryDate()) : "");
                            obj.put("jeDateinuserdf", entry.getEntryDate() != null ? userdf.format(entry.getEntryDate()) : "");
                            
                            Vendor vendor = null;
                            if (receipt.getVendor() != null) {
                                KwlReturnObject custResult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), receipt.getVendor());
                                vendor = (Vendor) custResult.getEntityList().get(0);
                            }
                            Customer customer = receipt.getCustomer();
                            //String vName = "";
                            //try {
                                if (customer != null) {
                                    vName =StringUtil.DecodeText(customer.getName());
                                } else if (vendor != null) {
                                    vName =StringUtil.DecodeText(vendor.getName());
                                } else {
                                    KwlReturnObject result = accReceiptDao.getReceiptCustomerNames(receipt.getCompany().getCompanyID(), receipt.getID());
                                    List cNameList = result.getEntityList();
                                    Iterator cNamesItr = cNameList.iterator();
                                    String customerNames = "";
                                    try {
                                        while (cNamesItr.hasNext()) {
                                            String tempName = URLEncoder.encode((String) cNamesItr.next(), "UTF-8");
                                            customerNames += tempName;
                                            customerNames += ",";
                                        }
                                        customerNames = customerNames.substring(0, Math.max(0, customerNames.length() - 1));
                                    } catch (Exception e) {
                                        throw ServiceException.FAILURE("getReconciliationData : " + e.getMessage(), e);
                                    }
                                    vName = StringUtil.DecodeText(customerNames);
                                }
                           /* } catch (UnsupportedEncodingException ex) {
                                Logger.getLogger(accReportsController.class.getName()).log(Level.WARNING, ex.getMessage());
                            }*/
                            obj.put(entryChar + "_accountname", vName);
                        }
                        /*
                         *ERP-32753 Used spot exchange rate 
                         */
                        if (receipt.getPaymentcurrencytopaymentmethodcurrencyrate() != 0) {
                            exchangeRate = receipt.getPaymentcurrencytopaymentmethodcurrencyrate();
                        }
                        obj.put(Constants.billid, (receipt).getID());
                        obj.put("isOpeningTransaction", false);
                        obj.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                        obj.put("paidto", receipt.getReceivedFrom() == null ? "" : (receipt.getReceivedFrom().getValue()) == null ? "" : receipt.getReceivedFrom().getValue());
                        obj.put("type", Constants.PAYMENT_RECEIVED);
                        obj.put("currencysymbol", receipt.getCurrency() != null ? receipt.getCurrency().getSymbol() : currency.getSymbol());
                        withoutinventory = false;
                    }
                } else if (transactionModuleId==Constants.Acc_Make_Payment_ModuleId && entry.getTransactionId()!=null) {
                     KwlReturnObject resultPayment = accountingHandlerDAOobj.getObject(Payment.class.getName(), entry.getTransactionId());
                        Payment payment = (Payment) resultPayment.getEntityList().get(0);
                        if (payment != null) {
                            int paymentType = payment.getPaymentWindowType();
                            obj.put(entryChar + "_paymentType", paymentType);   //Used differentiate between payment types---payment Against Vendor = 1,payment Against Customer = 2,Aginst GL = 3
                            obj.put(entryChar + "_payee", payment.getPayee()); //Payee field value in Make Payment
			    obj.put("transactionID", payment.getPaymentNumber());
                            if (payment.getPayDetail() != null && (payment.getPayDetail().getCheque() != null)) {
                                obj.put("chequeno", payment.getPayDetail().getCheque().getChequeNo());
                                obj.put("chequedate", payment.getPayDetail().getCheque().getDueDate() != null ? authHandler.getDateOnlyFormat().format(payment.getPayDetail().getCheque().getDueDate()) : "");
                                obj.put("chequedateinuserdf", payment.getPayDetail().getCheque().getDueDate() != null ? userdf.format(payment.getPayDetail().getCheque().getDueDate()) : "");
                                String description = payment.getPayDetail().getCheque().getDescription();
                                obj.put("description", description != null ? description : "");
                                /**
                                 * Passing JE date in response for validating
                                 * date on JS Side ERM-655.
                                 */
                                obj.put("jeDate", entry.getEntryDate() != null ? authHandler.getDateOnlyFormat().format(entry.getEntryDate()) : "");
                                obj.put("jeDateinuserdf", entry.getEntryDate() != null ? userdf.format(entry.getEntryDate()) : "");
                                
                                Customer customer = null;
                                if (payment.getCustomer() != null) {
                                    KwlReturnObject custResult = accountingHandlerDAOobj.getObject(Customer.class.getName(), payment.getCustomer());
                                    customer = (Customer) custResult.getEntityList().get(0);
                                }
                                Vendor vendor = payment.getVendor();
                                //String vName = "";
                                //try {
                                    if (vendor != null) {
                                        vName = StringUtil.DecodeText(vendor.getName());
                                    } else if (customer != null) {
                                        vName = StringUtil.DecodeText(customer.getName());
                                    } else {
                                        KwlReturnObject result = accVendorPaymentDao.getPaymentVendorNames(companyid, payment.getID());
                                        List vNameList = result.getEntityList();
                                        Iterator vNamesItr = vNameList.iterator();
                                        String vendorNames = "";
                                        try {
                                            while (vNamesItr.hasNext()) {
                                                String tempName = URLEncoder.encode((String) vNamesItr.next(), "UTF-8");
                                                vendorNames += tempName;
                                                vendorNames += ",";
                                            }
                                            vendorNames = vendorNames.substring(0, Math.max(0, vendorNames.length() - 1));
                                        } catch (Exception e) {
                                            throw ServiceException.FAILURE("getReconciliationData : " + e.getMessage(), e);
                                        }
                                        vName =StringUtil.DecodeText(vendorNames);
                                    }
                                /*} catch (UnsupportedEncodingException ex) {
                                    Logger.getLogger(accReportsController.class.getName()).log(Level.WARNING, ex.getMessage());
                                }*/
                                obj.put(entryChar + "_accountname", vName);
                            }
                            /*
                             *ERP-32753 Used spot exchange rate 
                             */
                            if (payment.getPaymentcurrencytopaymentmethodcurrencyrate() != 0) {
                                exchangeRate = payment.getPaymentcurrencytopaymentmethodcurrencyrate();
                            }
                            obj.put(Constants.billid, payment.getID());
                            obj.put("isOpeningTransaction", false);
                            obj.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                            obj.put("type", Constants.PAYMENT_MADE);
                            obj.put("paidto", payment.getPaidTo() == null ? "" : payment.getPaidTo().getValue() == null ? "" : payment.getPaidTo().getValue());
                            obj.put("currencysymbol", payment.getCurrency() != null ? payment.getCurrency().getSymbol() : currency.getSymbol());
                            withoutinventory = false;
                        }
                } else if (transactionModuleId == Constants.Acc_Cash_Sales_ModuleId) {
                    KwlReturnObject resultPayment = accountingHandlerDAOobj.getObject(Invoice.class.getName(), entry.getTransactionId());
                    Invoice invoice = (Invoice) resultPayment.getEntityList().get(0);
                    if (invoice != null) {
                        try {
                            vName = invoice.getCustomer() != null ? URLDecoder.decode(invoice.getCustomer().getName(), StaticValues.ENCODING) : "";
                        } catch (UnsupportedEncodingException ex) {
                            Logger.getLogger(accReportsController.class.getName()).log(Level.WARNING, ex.getMessage());
                        }
                        obj.put("transactionID", invoice.getInvoiceNumber());
                        if (invoice.getPayDetail() != null && (invoice.getPayDetail().getCheque() != null)) {
                            obj.put("chequeno", invoice.getPayDetail().getCheque().getChequeNo());
                            obj.put("chequedate", invoice.getPayDetail().getCheque().getDueDate() != null ? authHandler.getDateOnlyFormat().format(invoice.getPayDetail().getCheque().getDueDate()) : "");
                            obj.put("chequedateinuserdf", invoice.getPayDetail().getCheque().getDueDate() != null ? userdf.format(invoice.getPayDetail().getCheque().getDueDate()) : "");
                            String description = invoice.getPayDetail().getCheque().getDescription();
                            obj.put("description", description != null ? description : "");
                            obj.put(entryChar + "_accountname", invoice.getCustomer().getName()!=null?invoice.getCustomer().getName():"");
                        }
                        
                        /**
                         * Passing JE date in response for validating date on JS
                         * Side ERM-655.
                         */
                        obj.put("jeDate", entry.getEntryDate() != null ? authHandler.getDateOnlyFormat().format(entry.getEntryDate()) : "");
                        obj.put("jeDateinuserdf", entry.getEntryDate() != null ? userdf.format(entry.getEntryDate()) : ""); 
                        obj.put("currencysymbol", invoice.getCurrency() != null ? invoice.getCurrency().getSymbol() : currency.getSymbol());
                        obj.put(Constants.billid, invoice.getID());
                        obj.put("isOpeningTransaction", false);
                        obj.put(Constants.moduleid, Constants.Acc_Cash_Sales_ModuleId);
                        obj.put("paidto", "");
                        obj.put("type", "Cash Sale");
                    }
                    withoutinventory = false;

                } else if (transactionModuleId == Constants.Acc_Cash_Purchase_ModuleId) {
                    KwlReturnObject resultPayment = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), entry.getTransactionId());
                    GoodsReceipt invoice = (GoodsReceipt) resultPayment.getEntityList().get(0);
                    if (invoice != null) {
                        try {
                            vName = invoice.getVendor() != null ? URLDecoder.decode(invoice.getVendor().getName(), StaticValues.ENCODING) : "";
                        } catch (UnsupportedEncodingException ex) {
                            Logger.getLogger(accReportsController.class.getName()).log(Level.WARNING, ex.getMessage());
                        }
                        obj.put("transactionID", invoice.getGoodsReceiptNumber());
                        if (invoice.getPayDetail() != null && (invoice.getPayDetail().getCheque() != null)) {
                            obj.put("chequeno", invoice.getPayDetail().getCheque().getChequeNo());
                            obj.put("chequedate", invoice.getPayDetail().getCheque().getDueDate() != null ? authHandler.getDateOnlyFormat().format(invoice.getPayDetail().getCheque().getDueDate()) : "");
                            obj.put("chequedateinuserdf", invoice.getPayDetail().getCheque().getDueDate() != null ? userdf.format(invoice.getPayDetail().getCheque().getDueDate()) : "");
                            String description = invoice.getPayDetail().getCheque().getDescription();
                            obj.put("description", description != null ? description : "");
                            obj.put(entryChar + "_accountname", invoice.getVendor().getName()!=null?invoice.getVendor().getName():"");
                        }
                        
                        /**
                         * Passing JE date in response for validating date on JS
                         * Side ERM-655.
                         */
                        obj.put("jeDate", entry.getEntryDate() != null ? authHandler.getDateOnlyFormat().format(entry.getEntryDate()) : "");
                        obj.put("jeDateinuserdf", entry.getEntryDate() != null ? userdf.format(entry.getEntryDate()) : ""); 
                        obj.put("currencysymbol", invoice.getCurrency() != null ? invoice.getCurrency().getSymbol() : currency.getSymbol());
                        obj.put(Constants.billid, invoice.getID());
                        obj.put("isOpeningTransaction", false);
                        obj.put(Constants.moduleid, Constants.Acc_Cash_Purchase_ModuleId);
                        obj.put("paidto", "");
                        obj.put("type", Constants.CASH_PURCHASE);
                    }
                    withoutinventory = false;

                } else {
                    obj.put("chequeno", jed.getJournalEntry().getCheque() != null ? jed.getJournalEntry().getCheque().getChequeNo() : "");
                    obj.put("description", jed.getJournalEntry().getCheque() != null ? jed.getJournalEntry().getCheque().getDescription() : "");
                    obj.put("chequedate", jed.getJournalEntry().getCheque() != null ? (jed.getJournalEntry().getCheque().getDueDate() != null ? authHandler.getDateOnlyFormat().format(jed.getJournalEntry().getCheque().getDueDate()) : "") : "");
                    obj.put("chequedateinuserdf", jed.getJournalEntry().getCheque() != null ? (jed.getJournalEntry().getCheque().getDueDate() != null ? userdf.format(jed.getJournalEntry().getCheque().getDueDate()) : "") : "");
                    obj.put("transactionID", jed.getJournalEntry().getEntryNumber() != null ?(jed.getJournalEntry().getEntryNumber()): "");
                    obj.put("currencysymbol", (jed.getJournalEntry().getCurrency() == null ? currency.getSymbol() : jed.getJournalEntry().getCurrency().getSymbol()));
                    /**
                     * Passing JE date in response for validating date on JS
                     * Side ERM-655.
                     */
                    obj.put("jeDate", jed.getJournalEntry().getEntryDate() != null ? authHandler.getDateOnlyFormat().format(jed.getJournalEntry().getEntryDate()) : "");
                    obj.put("jeDateinuserdf", jed.getJournalEntry().getEntryDate() != null ? userdf.format(jed.getJournalEntry().getEntryDate()) : "");
                }
                obj.put("withoutinventory", withoutinventory);
                
                currencyid = (jed.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : jed.getJournalEntry().getCurrency().getCurrencyID());
                transCurrSymbol = (jed.getJournalEntry().getCurrency() == null ? currency.getSymbol() : jed.getJournalEntry().getCurrency().getSymbol());
                transcurname = (jed.getJournalEntry().getCurrency() == null ? currency.getName() : jed.getJournalEntry().getCurrency().getName());
                KwlReturnObject amountresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, jed.getAmount(), currencyid, jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                double jedAmountInBase = (Double) amountresult.getEntityList().get(0);
                /*
                 * jed.getAmount() used to calculate amountInAccountCurrency instead of jedAmountInBase.
                 */
                double amountInAccountCurrency = 0;
                if (accountcurrencyid.equals(jed.getCompany().getCurrency().getCurrencyID())) {// If Base currency and Acc Currency Same, then need to consider same exchange rate
                    amountInAccountCurrency = jedAmountInBase;
                } else {
                amountresult = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, jed.getAmount(), accountcurrencyid, jed.getJournalEntry().getEntryDate(), exchangeRate);//ERP-32753
                    amountInAccountCurrency = (Double) amountresult.getEntityList().get(0);
                }
                 
                if (jed.isDebit()) {
                    if (currencyid == accountcurrencyid) {
                        debitbalanceinacc += authHandler.round(jed.getAmount(), companyid);
                    } else {
                        debitbalance += jedAmountInBase;   //Debit Balance in Base Currency
                        //IF JE of Fund Transfer & Type & user has provided manual exchange rate for transaction then transaction should be calculate with user provided exchange rate.
                        if (jed.getJournalEntry().getTypeValue() == Constants.FundTransfer_Journal_Entry && jed.getExchangeRateForTransaction() != 0 && jed.getExchangeRateForTransaction() != -1) {
                            amountInAccountCurrency = jed.getAmount() / jed.getExchangeRateForTransaction();
                        }
                        debitbalanceinacc += authHandler.round(amountInAccountCurrency, companyid);    //Debit Balance in Account Currency
                    }
                    entryChar = "d";
                    emptyChar = "c";
                    if (diffCurrencyAmount.has(transCurrSymbol)) {
                        singleCurrency = diffCurrencyAmount.getJSONObject(transCurrSymbol);
                        if (singleCurrency.has("d_amount")) {
                            singleCurrency.put("d_amount", jed.getAmount() + singleCurrency.getDouble("d_amount"));
                        } else {
                            singleCurrency.put("d_amount", jed.getAmount());
                        }
                    } else {
                        singleCurrency = new JSONObject();
                        singleCurrency.put("transCurrSymbol", transCurrSymbol);
                        singleCurrency.put("d_amount", jed.getAmount());
                        singleCurrency.put("transcurname", transcurname);
                        diffCurrencyAmount.put(transCurrSymbol, singleCurrency);
                    }
                } else {
                    if (currencyid == accountcurrencyid) {
                        creditbalanceinacc += authHandler.round(jed.getAmount(), companyid);
                    } else {
                        creditbalance += jedAmountInBase;  //Credit Balance in Base Currency
                        creditbalanceinacc += authHandler.round(amountInAccountCurrency, companyid);   //Credit Balance in Account Currency
                    }
                    entryChar = "c";
                    emptyChar = "d";
                    if (diffCurrencyAmount.has(transCurrSymbol)) {
                        singleCurrency = diffCurrencyAmount.getJSONObject(transCurrSymbol);
                        if (singleCurrency.has("c_amount")) {
                            singleCurrency.put("c_amount", jed.getAmount() + singleCurrency.getDouble("c_amount"));
                        } else {
                            singleCurrency.put("c_amount", jed.getAmount());
                        }
                    } else {
                        singleCurrency = new JSONObject();
                        singleCurrency.put("transCurrSymbol", transCurrSymbol);
                        singleCurrency.put("c_amount", jed.getAmount());
                        singleCurrency.put("transcurname", transcurname);
                        diffCurrencyAmount.put(transCurrSymbol, singleCurrency);
                    }
                }
                Set details = entry.getDetails();
                Iterator iter = details.iterator();
                String accountName = "";
                String accountCode = "";
                while (iter.hasNext()) {
                    JournalEntryDetail d = (JournalEntryDetail) iter.next();
                    if (d.isDebit() == jed.isDebit()) {
                        continue;
                    }
                    accountName += d.getAccount().getName() + ", ";
                    accountCode += d.getAccount().getAcccode() + ", ";
                }
                accountName = accountName.substring(0, Math.max(0, accountName.length() - 2));
                if (StringUtil.isNullOrEmpty(accountName)) {
                    accountName = accountCode.substring(0, Math.max(0, accountCode.length() - 2));
                }
                if (isConcileReport && br != null) {
                    obj.put(entryChar + "_reconciledate", authHandler.getDateOnlyFormat().format(br.getClearanceDate()));
                    obj.put(entryChar + "_reconciledateinuserdf", userdf.format(br.getClearanceDate()));
                    obj.put("lastreconciledate", authHandler.getDateOnlyFormat().format(br.getClearanceDate())); //ERP-12881
                }
                obj.put("id", brdID);
                obj.put("isClearedDetails", isClearedDetails);
                obj.put(entryChar + "_date", authHandler.getDateOnlyFormat().format(entry.getEntryDate()));
                obj.put(entryChar + "_dateinuserdf", userdf.format(entry.getEntryDate()));                
                if(!StringUtil.isNullOrEmpty(vName)){
                    obj.put(entryChar + "_accountname", vName);
                } else {
                    obj.put(entryChar + "_accountname", accountName);
                }
                obj.put(entryChar + "_entryno", entry.getEntryNumber());
                obj.put(entryChar + "_journalentryid", entry.getID());
                obj.put(entryChar + "_amountintransactioncurrency", authHandler.round(jed.getAmount(), companyid));
                double baseamt = jedAmountInBase;
                obj.put(entryChar + "_amount", authHandler.round(baseamt, companyid));//this is amount in base crrency 
                if (currencyid.equals(accountcurrencyid)) {
                    obj.put(entryChar + "_amountinacc", authHandler.round(jed.getAmount(), companyid));//this is amount in Account crrency for PDF
                } else {
                    double amtinAccCurr = amountInAccountCurrency;   //Amount in Account Currency
                    if (jed.getJournalEntry().getTypeValue() == Constants.FundTransfer_Journal_Entry && jed.getExchangeRateForTransaction() != 0 && jed.getExchangeRateForTransaction() != -1) {
                        amtinAccCurr = jed.getAmount() / jed.getExchangeRateForTransaction();
                    }
                    obj.put(entryChar + "_amountinacc", authHandler.round(amtinAccCurr, companyid));//this is amount in Account crrency for PDF
                }
                obj.put(entryChar + "_memo", entry.getMemo());

                obj.put(entryChar + "_transCurrSymbol", transCurrSymbol);
                obj.put("accountcurrencysymbol", accountCurrSymbol);//Account currency syambol
                obj.put(emptyChar + "_reconciledate", "");
                obj.put(emptyChar + "_reconciledateinuserdf", "");
                obj.put(emptyChar + "_date", "");
                obj.put(emptyChar + "_dateinuserdf", "");
                obj.put(emptyChar + "_accountname", "");
                obj.put(emptyChar + "_entryno", "");
                obj.put(emptyChar + "_journalentryid", "");
                obj.put(emptyChar + "_amountintransactioncurrency", "");
                obj.put(emptyChar + "_amount", "");
                obj.put(emptyChar + "_amountinacc", "");
                obj.put(emptyChar + "_memo", "");
                
                if (brdh != null) {    //For History Details Report
                    if (isClearedDetails) {        //Cleared Transactions 
                        if (entryChar.equals("d")) {
                            clearedDepositsArr.put(obj);
                        } else {
                            clearedChecksArr.put(obj);
                        }
                    } else {                    //Uncleared Transactions
                        if (entryChar.equals("d")) {
                            unclearedDepositsArr.put(obj);
                        } else {
                            unclearedChecksArr.put(obj);
                        }
                    }
                } else {
                    if (entryChar.equals("d")) {
                        jArrL.put(obj);
                    } else {
                        jArrR.put(obj);
                    }
                }                
            }
            
            //Following code used to calculate ending balance, opening balance & balance b/d.
            //If you do any change , verify relevant code in exportBankReconciliation()
            double opening_Balance = 0;
            double balanceinBaseCurr = 0;
            double balanceInAccCurr = 0;
            double balanceB_D = 0;  // Balance B/d
            double balanceC_F = 0;  // Balance c/f
            JSONObject bankBookObj = accReportsService.getLedger(request);
            JSONArray bankBookDataArray = bankBookObj.getJSONArray(Constants.RES_data);
            for (int i = 0; i < bankBookDataArray.length(); i++) {
                JSONObject bankBookData = bankBookDataArray.getJSONObject(i);
                if ((bankBookData.optString("d_accountname", "")).equals("Opening Balance") || (bankBookData.optString("c_accountname", "")).equals("Opening Balance")) {   //Opening Balance From Bank Book
                    opening_Balance = bankBookData.getString("balanceAmountAccountCurrency").equals("") ? 0 : Double.parseDouble(bankBookData.getString("balanceAmountAccountCurrency"));
                } else if ((bankBookData.optString("d_accountname", "")).equals("Balance b/d") || (bankBookData.optString("c_accountname", "")).equals("Balance b/d")) {
                    opening_Balance = bankBookData.getString("balanceAmountAccountCurrency").equals("") ? 0 : Double.parseDouble(bankBookData.getString("balanceAmountAccountCurrency"));    //Balance b/d From Bank Book as an Opening Balance when we take Start date greater than Account creation date
                } else if ((bankBookData.optString("d_accountname", "")).equals("Period Balance") || (bankBookData.optString("c_accountname", "")).equals("Period Balance")) {
                    continue;
                } else if ((bankBookData.optString("d_accountname", "")).equals("Balance c/f") || (bankBookData.optString("c_accountname", "")).equals("Balance c/f")) {
                    balanceC_F = bankBookData.getString("balanceAmountAccountCurrency").equals("") ? 0 : Double.parseDouble(bankBookData.getString("balanceAmountAccountCurrency"));    //Future use, if need
                } else {
                    balanceinBaseCurr = bankBookData.optString("balanceAmount", "").equals("") ? 0 : bankBookData.optDouble("balanceAmount", 0);
                    balanceInAccCurr = bankBookData.optString("balanceAmountAccountCurrency", "").equals("") ? 0 : bankBookData.optDouble("balanceAmountAccountCurrency", 0);
                }
            }//for

            currencysymbol = accountCurrSymbol;
            double opening_BalanceinBase=0;
            if (opening_Balance != 0) {
                KwlReturnObject crresult12 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, opening_Balance, currencyid, account1.getCreationDate(), 0);
                opening_BalanceinBase = authHandler.round((Double) crresult12.getEntityList().get(0), companyid);
            }
            opening_BalanceinBase = authHandler.round(opening_BalanceinBase, companyid);    //Opening Balance in Base Currency
            opening_Balance = authHandler.round(opening_Balance, companyid);   //Opening Balance in Account Currency
            debitbalance = authHandler.round(debitbalance, companyid);    //Debit Balance in Base Currency
            debitbalanceinacc = authHandler.round(debitbalanceinacc, companyid);  //Debit Balance in Account Currency
            creditbalance = authHandler.round(creditbalance, companyid);    //Credit Balance in Base Currency
            creditbalanceinacc = authHandler.round(creditbalanceinacc, companyid);    //Credit Balance in Account Currency

            JSONObject fobj = new JSONObject();
            fobj.put("clearedDepositsArr", clearedDepositsArr);  //Cleared Deposits
            fobj.put("clearedChecksArr", clearedChecksArr); //Cleared Checks
            fobj.put("unclearedDepositsArr", unclearedDepositsArr);  //Unleared Deposits
            fobj.put("unclearedChecksArr", unclearedChecksArr); //Unleared Checks
            fobj.put("left", jArrL);
            fobj.put("right", jArrR);
	    fobj.put("openingbalanceinbase", opening_BalanceinBase);    //SDP-7990 : For Print Purpose
            fobj.put("bankdata", balanceinBaseCurr);
            fobj.put("openingbalance", new JSONArray("[" + opening_BalanceinBase + "]"));   //Opening Balance in Base Currency
            fobj.put("total", new JSONArray("[" + debitbalance + "," + -creditbalance + "]"));
            fobj.put("bankdatainacc", balanceC_F);  //Balance as per Bank Book
            fobj.put("openingbankdatainacc", opening_Balance);  //Opening Balance as per Bank Book b/d
            fobj.put("openingbalanceinacc", new JSONArray("[" + opening_Balance + "]"));    //Opening Balance in Account Currency
            fobj.put("totalinacc", new JSONArray("[" + -debitbalanceinacc + "," + creditbalanceinacc + "]"));
            fobj.put("currencysymbol", currencysymbol);//Account currency syambol
            fobj.put("currencycode", accountCurrCode);//Account currency code
            fobj.put("accountname", accountNm);//Account Name
            JSONArray currencyArray = new JSONArray();
            Iterator currencyItr = diffCurrencyAmount.keys();
            while (currencyItr.hasNext()) {
                JSONObject getObj = diffCurrencyAmount.getJSONObject(currencyItr.next().toString());
                JSONObject jObj = new JSONObject();
                jObj.put("currencysymbol", getObj.getString("transCurrSymbol"));
                jObj.put("transcurname", getObj.getString("transcurname"));
                if (getObj.has("c_amount")) {
                    jObj.put("c_amount", getObj.getDouble("c_amount"));
                }
                if (getObj.has("d_amount")) {
                    jObj.put("d_amount", getObj.getDouble("d_amount"));
                }
                currencyArray.put(jObj);
            }
            fobj.put("currencyData", currencyArray);
            fobj.put("currencyCount", currencyArray.length());
            jobj.put(Constants.RES_data, fobj);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getReconciliationData : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getReconciliationData : " + ex.getMessage(), ex);
        }
        return jobj;
    }

    public ModelAndView getTrading(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getTrading(request);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getTrading(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        try {
            double dtotal = 0, ctotal = 0;
            double predtotal = 0, prectotal = 0;
            JSONArray jArrL = new JSONArray();
            JSONArray jArrR = new JSONArray();
            JSONObject objlast = new JSONObject();
            
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            double tempTotal[] = accReportsService.getTrading(paramJobj, Group.NATURE_EXPENSES, jArrL, false,null);
            
            dtotal = tempTotal[0];
            predtotal = tempTotal[1];
            double tempTotal1[] = accReportsService.getTrading(paramJobj, Group.NATURE_INCOME, jArrR, false,null);
            ctotal = tempTotal1[0];
            prectotal = tempTotal1[1];

            double balance = dtotal + ctotal;
            double preBalance = predtotal + prectotal;
            if (balance > 0) {
                objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("accountname", "Gross Loss");
                objlast.put("amount", balance);
                objlast.put("preamount", preBalance);
                objlast.put("fmt", "B");
                jArrR.put(objlast);
                ctotal -= balance;
                prectotal -= preBalance;
            }
            if (balance < 0) {
                objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", true);
                objlast.put("leaf", true);
                objlast.put("accountname", "Gross Profit");
                objlast.put("amount", -balance);
                objlast.put("preamount", -preBalance);
                objlast.put("fmt", "B");
                jArrL.put(objlast);
                dtotal -= balance;
            }

            JSONObject fobj = new JSONObject();
            fobj.put("left", jArrL);
            fobj.put("right", jArrR);
            fobj.put("total", new JSONArray("[" + dtotal + "," + -ctotal + "]"));
            fobj.put("pretotal", new JSONArray("[" + predtotal + "," + -prectotal + "]"));
            jobj.put(Constants.RES_data, fobj);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getTrading : " + ex.getMessage(), ex);
        }
        return jobj;
    }

    public ModelAndView getProfitLoss(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getProfitLoss(request);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getProfitLoss(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        try {
            double dtotal = 0, ctotal = 0;
            double predtotal = 0, prectotal = 0;
            JSONArray jArrL = new JSONArray();
            JSONArray jArrR = new JSONArray();
            JSONObject objlast = new JSONObject();
            
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            double tempBalance[] = accReportsService.getTrading(paramJobj, Group.NATURE_EXPENSES, new JSONArray(), false,null);
            double tempBalance1[] = accReportsService.getTrading(paramJobj, Group.NATURE_INCOME, new JSONArray(), false,null);
            
            double balance = tempBalance[0] + tempBalance1[0];
            double preBalance = tempBalance[1] + tempBalance1[1];

            if (balance > 0) {
                objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", true);
                objlast.put("leaf", true);
                objlast.put("accountname", messageSource.getMessage("acc.report.2", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Gross Loss");
                objlast.put("amount", balance);
                objlast.put("preamount", preBalance);
                objlast.put("fmt", "B");
                jArrL.put(objlast);
                dtotal = balance;
                predtotal = preBalance;
            }
            if (balance < 0) {
                objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("accountname", messageSource.getMessage("acc.report.6", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Gross Profit");
                objlast.put("amount", -balance);
                objlast.put("amount", -preBalance);
                objlast.put("fmt", "B");
                jArrR.put(objlast);
                prectotal = preBalance;
            }

            double tempdTotal[] = accReportsService.getProfitLoss(paramJobj, Group.NATURE_EXPENSES, jArrL, false,null);
            dtotal += tempdTotal[0];
            predtotal += tempdTotal[1];
            double tempcTotal[] = accReportsService.getProfitLoss(paramJobj, Group.NATURE_INCOME, jArrR, false,null);
            prectotal += tempcTotal[1];

            balance = dtotal + ctotal;
            preBalance = predtotal + prectotal;
            if (balance > 0) {
                objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("accountname", messageSource.getMessage("acc.report.9", null, RequestContextUtils.getLocale(request)));  //"Net Loss");
                objlast.put("amount", balance);
                objlast.put("preamount", preBalance);
                objlast.put("fmt", "B");
                jArrR.put(objlast);
                ctotal -= balance;
                prectotal -= preBalance;
            }
            if (balance < 0) {
                objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", true);
                objlast.put("leaf", true);
                objlast.put("accountname", messageSource.getMessage("acc.report.10", null, RequestContextUtils.getLocale(request)));  //"Net Profit");
                objlast.put("amount", -balance);
                objlast.put("preamount", -preBalance);
                objlast.put("fmt", "B");
                jArrL.put(objlast);
                dtotal -= balance;
                predtotal -= preBalance;
            }

            JSONObject fobj = new JSONObject();
            fobj.put("left", jArrL);
            fobj.put("right", jArrR);
            fobj.put("total", new JSONArray("[" + dtotal + "," + -ctotal + "]"));
            fobj.put("pretotal", new JSONArray("[" + predtotal + "," + -prectotal + "]"));
            jobj.put(Constants.RES_data, fobj);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getProfitLoss : " + ex.getMessage(), ex);
        }
        return jobj;
    }

    public ModelAndView getTradingAndProfitLoss(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            if (request.getParameter("singleGrid") != null && Boolean.parseBoolean(request.getParameter("singleGrid").toString())) {
                request.setAttribute("isForTradingAndProfitLoss", true);
                jobj = getTradingAndProfitLossforExport(request);
                jobj = getNewMYOBtradingreport(request, jobj, false);
            } else {
                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                jobj = accFinancialReportsService.getTradingAndProfitLoss(paramJobj);
            }
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getBSorPL_CustomLayout(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        boolean dontshowmsg = false;
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            String companyid = paramJobj.getString(Constants.companyKey);
            ExtraCompanyPreferences extrapref = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            }
            boolean monthlyCustomLayoutFlag = request.getParameter("monthlyCustomLayoutFlag") != null ? Boolean.parseBoolean(request.getParameter("monthlyCustomLayoutFlag")) : false;
            if(monthlyCustomLayoutFlag) {
                jobj = accFinancialReportsService.getMonthlyCustomLayout(paramJobj, extrapref, companyid);
            } else {
                jobj = accFinancialReportsService.getBSorPL_CustomLayout(paramJobj, extrapref, companyid);
            }
            HashMap<String, Object> requestParams = new HashMap();
            String temlateid = paramJobj.optString("templateid",null);
            requestParams.put("templateid", temlateid);
            requestParams.put(Constants.companyKey, companyid);
            JSONObject msgJobj = accAccountDAOobj.getUnMappedAccounts(requestParams);
            msg = msgJobj.getString("msg");
            dontshowmsg = msgJobj.getBoolean("dontshowmsg");
            if (msg.equals("")) {
                msg = "All accounts are mapped in current Template";
            }
//            else {
//                msg = "Account(s) " + msg + " "+messageSource.getMessage("acc.customelayout.arenotmappedincurrentTemplate", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
//            } 
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
                jobj.put("dontshowmsg", dontshowmsg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    public ModelAndView setDontShowFlagCustomLayout(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            String companyid = paramJobj.getString(Constants.companyKey);
            
            HashMap<String, Object> requestParams = new HashMap();
            String temlateid = paramJobj.optString("templateid",null);
            requestParams.put("templateid", temlateid);
            requestParams.put(Constants.companyKey, companyid);
            int rowsUpdated = accAccountDAOobj.setDontShowFlagCustomLayout(requestParams);
            if (rowsUpdated > 0) {
                issuccess = true;
            }
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView exportTradingAndProfitLoss(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            String fileType = request.getParameter("filetype");
            boolean periodView = Boolean.parseBoolean("periodView");
            boolean isJasper = request.getParameter("isJasper") != null ? Boolean.parseBoolean(request.getParameter("isJasper")) : false;
            if (StringUtil.equal(fileType, "print")) {
                if (request.getParameter("singleGrid") != null && Boolean.parseBoolean(request.getParameter("singleGrid").toString())) {
                    request.setAttribute("isForTradingAndProfitLoss", true);
                    jobj = getNewMYOBtradingreport(request, getTradingAndProfitLossforExport(request), true); //getExportBalanceSheetJSON(getTradingAndProfitLossforExport(request),2, 0);
                } else {
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                    jobj = accFinancialReportsService.getExportBalanceSheetJSON(request, accFinancialReportsService.getTradingAndProfitLoss(paramJobj), 2, 0, periodView);
                }
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                jobj.put("isFromToDateRequired", true);
                jobj.put("stdate", request.getParameter("stdate"));
                jobj.put("enddate", request.getParameter("enddate"));
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else if (isJasper) {
                request.setAttribute("isMonthlyOrYearlyPNL", true);// this flag is sending to to do montly and yearly specific changes in common used function.
                request.setAttribute("isForTradingAndProfitLoss", true);
                request.setAttribute("isFromBS", true);
                JSONObject fobj1 = accFinancialReportsService.getMonthlyTradingProfitLossJasperExport(request, false);
                JSONObject fobj = new JSONObject();
                JSONArray jArrL = fobj1.getJSONArray("refleft");
                JSONArray jArrR = fobj1.getJSONArray("refright");
                JSONArray array = fobj1.getJSONArray("months");
                JSONObject monthArrayObject = new JSONObject();
                monthArrayObject.put("months", array);
                jArrL.put(monthArrayObject);
                jArrR.put(monthArrayObject);
                fobj.put("left", jArrL);
                fobj.put("right", jArrR);
                jobj.put(Constants.RES_data, fobj);
                jobj.put("monthCount", array.length());
                
                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(paramJobj, jobj, false);
                
                ExportrecordObj.exportMonthlyTradingJasperPdf(request, response, jobj);
            } else {
                if (fileType.equals("csv") || fileType.equals("xls")) {
                    if (request.getParameter("singleGrid") != null && Boolean.parseBoolean(request.getParameter("singleGrid").toString()) || Boolean.parseBoolean(request.getParameter("csvflag"))) {
                        request.setAttribute("isForTradingAndProfitLoss", true);
                        jobj = getNewMYOBtradingreport(request, getTradingAndProfitLossforExport(request), true); //getExportBalanceSheetJSON(getTradingAndProfitLossforExport(request),2, 0);
                    } else {
                        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                        jobj = accFinancialReportsService.getExportBalanceSheetJSON(request, accFinancialReportsService.getTradingAndProfitLoss(paramJobj), 2, 0, periodView);
                    }
                    exportDaoObj.processRequest(request, response, jobj);
                } else {
                    request.setAttribute("isForTradingAndProfitLoss", true);
                    jobj = getTradingAndProfitLossforExport(request);
                    String currencyid = sessionHandlerImpl.getCurrencyID(request);
                    java.text.DateFormat formatter = authHandler.getDateOnlyFormat();
                    String logoPath = ProfileImageServlet.getProfileImagePath(request, true, null);
                    java.io.ByteArrayOutputStream baos = null;
                    String filename = request.getParameter("filename") + "_v1";
                    String comName = sessionHandlerImpl.getCompanyName(request);
                    Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
                    Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
                    Date endPreDate = null;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("endpredate"))) {
                        endPreDate = authHandler.getDateOnlyFormat().parse(request.getParameter("endpredate"));
                    }                    
                    Calendar cal = Calendar.getInstance();
                    String comAdd = authHandlerDAO.getCompanyAddress(sessionHandlerImpl.getCompanyid(request));
                    if (endPreDate != null) {
                        cal = Calendar.getInstance();
                        cal.set(1900 + endPreDate.getYear(), endPreDate.getMonth(), endPreDate.getDate(), 00, 00, 00);
                        String sstart = authHandler.getDateOnlyFormat().format(cal.getTime());
                        endPreDate = authHandler.getDateOnlyFormat().parse(sstart); //Get actual end date i.e. 1 day before given date                    
                    }
                    baos = ExportrecordObj.exportTradingPdf(request, currencyid, formatter, logoPath, comName, jobj, startDate, endDate, 2, 0, comAdd, endPreDate);
                    if (baos != null) {
                        ExportrecordObj.writeDataToFile(filename + "." + fileType, baos, response);
                    }
                }
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getBalanceSheet(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            request.setAttribute("isForTradingAndProfitLoss", true);
            JSONObject pramObj = StringUtil.convertRequestToJsonObject(request);
            pramObj.put("isFromBalanceSheet", true);  //SDP-13756
//            jobj = accReportsService.getBalanceSheet(request);
            jobj = accReportsService.getBalanceSheetAllAccounts(pramObj, null);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView exportBalanceSheet(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONObject paramObj = StringUtil.convertRequestToJsonObject(request);
            String fileType = request.getParameter("filetype");
            boolean isJasper = request.getParameter("isJasper") != null ? Boolean.parseBoolean(request.getParameter("isJasper")) : false;
            boolean standardCSVflag = request.getParameter("csvflag") != null ? Boolean.parseBoolean(request.getParameter("csvflag")) : false;
            boolean periodView = request.getParameter("periodView") != null ? Boolean.parseBoolean(request.getParameter("periodView")) : false;            
            boolean monthlyBS = request.getParameter("monthlyBS") != null ? Boolean.parseBoolean(request.getParameter("monthlyBS")) : false;
            boolean isFromBalanceSheet = request.getParameter("isFromBalanceSheet") != null ? Boolean.parseBoolean(request.getParameter("isFromBalanceSheet")) : false;
            paramObj.put("isFromBalanceSheet", isFromBalanceSheet); //SDP-13756 : isFromBalanceSheet - Check added to identify export call from Balance Sheet
            paramObj.put(Constants.isForTradingAndProfitLoss, true);
            // This flag was missing while calculating net pnl in case of printing monthly balance sheet.
            request.setAttribute(Constants.isForTradingAndProfitLoss, true);
            
            if (StringUtil.equal(fileType, "print")) {
                if (monthlyBS) {
                    JSONArray rightObjArr = new JSONArray();
                    jobj = getMonthlyBalanceSheet(request);
                    JSONObject jobj1 = jobj.getJSONObject(Constants.RES_data);
                    JSONArray rightObjArr1 = jobj1.getJSONArray("right");
                    JSONArray leftObjArr = jobj1.getJSONArray("left");
                    JSONObject objlast = new JSONObject();
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", false);
                    objlast.put("leaf", true);
                    objlast.put("accountname", "Assets");
                    objlast.put("amount", "");
                    objlast.put("fmt", "B");

                    rightObjArr.put(0, objlast);
                    for (int i = 0; i < rightObjArr1.length(); i++) {
                        rightObjArr.put(rightObjArr1.getJSONObject(i));
                    }

                    objlast = new JSONObject();
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", false);
                    objlast.put("leaf", true);
                    objlast.put("accountname", "Liabilities");
                    objlast.put("amount", "");
                    objlast.put("fmt", "B");

                    rightObjArr.put(objlast);

                    objlast = new JSONObject();
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", false);
                    objlast.put("leaf", true);
                    objlast.put("accountname", "Equity");
                    objlast.put("amount", "");
                    objlast.put("fmt", "B");

                    for (int i = 0; i < leftObjArr.length(); i++) {
                        rightObjArr.put(leftObjArr.getJSONObject(i));
                    }
                    jobj.getJSONObject(Constants.RES_data).remove("left");
                    jobj.put(Constants.RES_data, rightObjArr);
                } else {
                    jobj = accFinancialReportsService.getExportBalanceSheetJSON(request, accReportsService.getBalanceSheetAllAccounts(paramObj, null), 1, Integer.parseInt(request.getParameter("toggle")), periodView);
                }
                
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                String stDate = request.getParameter("stdate");
                String edDate = request.getParameter("enddate");
                
                if (!StringUtil.isNullOrEmpty(stDate) && !StringUtil.isNullOrEmpty(edDate)) {
                    DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
                    Date startDate = dtf.parseLocalDate(request.getParameter("stdate")).toDate();
                    Date endDate = dtf.parseLocalDate(request.getParameter("enddate")).toDate();

                    LocalDate localStartDate = new LocalDate(startDate);
                    LocalDate localEndDate = new LocalDate(endDate);

                    startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
                    endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();
                    startDate.setHours(00);
                    startDate.setMinutes(00);
                    startDate.setSeconds(00);

                    endDate.setHours(00);
                    endDate.setMinutes(00);
                    endDate.setSeconds(00);
                    stDate = authHandler.getDateOnlyFormat().format(startDate);
                    edDate = authHandler.getDateOnlyFormat().format(endDate);
                    jobj.put("stdate", stDate);
                    jobj.put("enddate", edDate);
                } else {
                    jobj.put("stdate", request.getParameter("stdate"));
                    jobj.put("enddate", request.getParameter("enddate"));
                }
                jobj.put("GenerateDate", GenerateDate);
                jobj.put("isFromToDateRequired", true);
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else if (isJasper) {
                request.setAttribute("isFromBS", true);     //Added flag to identify Export Monthly BS call.
                request.setAttribute("isForTradingAndProfitLoss", true);
                jobj = accFinancialReportsService.getMonthlyBalanceSheetforExport(request, false);
                ExportrecordObj.exportMonthlyBalanceSheetJasperPdf(request, response, jobj);
            } else {
                if (StringUtil.equal(fileType, "csv")) {
                    request.setAttribute("isForTradingAndProfitLoss", true);
                    if (standardCSVflag) {
                        jobj = accReportsService.getExportBalanceSheetJSONforStandardCSV(request, accReportsService.getBalanceSheetAllAccounts(paramObj, null), 1, Integer.parseInt(request.getParameter("toggle")), periodView);
                    } else if (monthlyBS) {
                        JSONArray rightObjArr = new JSONArray();
                        jobj = getMonthlyBalanceSheet(request);
                        JSONObject jobj1 = jobj.getJSONObject(Constants.RES_data);
                        JSONArray rightObjArr1 = jobj1.getJSONArray("right");
                        JSONArray leftObjArr = jobj1.getJSONArray("left");
                        JSONObject objlast = new JSONObject();
                        objlast.put("accountid", "");
                        objlast.put("level", 0);
                        objlast.put("isdebit", false);
                        objlast.put("leaf", true);
                        objlast.put("accountname", "Assets");
                        objlast.put("amount", "");
                        objlast.put("fmt", "B");

                        rightObjArr.put(0, objlast);
                        for (int i = 0; i < rightObjArr1.length(); i++) {
                            rightObjArr.put(rightObjArr1.getJSONObject(i));
                        }

                        objlast = new JSONObject();
                        objlast.put("accountid", "");
                        objlast.put("level", 0);
                        objlast.put("isdebit", false);
                        objlast.put("leaf", true);
                        objlast.put("accountname", "Liabilities");
                        objlast.put("amount", "");
                        objlast.put("fmt", "B");

                        rightObjArr.put(objlast);

                        objlast = new JSONObject();
                        objlast.put("accountid", "");
                        objlast.put("level", 0);
                        objlast.put("isdebit", false);
                        objlast.put("leaf", true);
                        objlast.put("accountname", "Equity");
                        objlast.put("amount", "");
                        objlast.put("fmt", "B");

                        for (int i = 0; i < leftObjArr.length(); i++) {
                            rightObjArr.put(leftObjArr.getJSONObject(i));
                        }
                        jobj.getJSONObject(Constants.RES_data).remove("left");
                        jobj.put(Constants.RES_data, rightObjArr);
                    } else {
                        jobj = accFinancialReportsService.getExportBalanceSheetJSON(request, accReportsService.getBalanceSheetAllAccounts(paramObj, null), 1, Integer.parseInt(request.getParameter("toggle")), periodView);
                    }
                    exportDaoObj.processRequest(request, response, jobj);
                } else if (StringUtil.equal(fileType, "xls")) {
                    paramObj.put(Constants.isForTradingAndProfitLoss, true);
                    if (standardCSVflag) {
                        jobj = accReportsService.getExportBalanceSheetJSONforStandardCSV(request, accReportsService.getBalanceSheetAllAccounts(paramObj, null), 1, Integer.parseInt(request.getParameter("toggle")), periodView);
                    } else if(monthlyBS){
                        JSONArray rightObjArr = new JSONArray();
                        jobj = getMonthlyBalanceSheet(request);
                        JSONObject jobj1 = jobj.getJSONObject(Constants.RES_data);
                        JSONArray rightObjArr1 = jobj1.getJSONArray("right");
                        JSONArray leftObjArr = jobj1.getJSONArray("left");
                        JSONObject objlast = new JSONObject();
                        objlast.put("accountid", "");
                        objlast.put("level", 0);
                        objlast.put("isdebit", false);
                        objlast.put("leaf", true);
                        objlast.put("accountname", "Assets");
                        objlast.put("amount", "");
                        objlast.put("fmt", "B");

                        rightObjArr.put(0, objlast);
                        for (int i = 0; i < rightObjArr1.length(); i++) {
                            rightObjArr.put(rightObjArr1.getJSONObject(i));
                        }

                        objlast = new JSONObject();
                        objlast.put("accountid", "");
                        objlast.put("level", 0);
                        objlast.put("isdebit", false);
                        objlast.put("leaf", true);
                        objlast.put("accountname", "Liabilities");
                        objlast.put("amount", "");
                        objlast.put("fmt", "B");

                        rightObjArr.put(objlast);

                        objlast = new JSONObject();
                        objlast.put("accountid", "");
                        objlast.put("level", 0);
                        objlast.put("isdebit", false);
                        objlast.put("leaf", true);
                        objlast.put("accountname", "Equity");
                        objlast.put("amount", "");
                        objlast.put("fmt", "B");

                        for (int i = 0; i < leftObjArr.length(); i++) {
                            rightObjArr.put(leftObjArr.getJSONObject(i));
                        }
                        jobj.getJSONObject(Constants.RES_data).remove("left");
                        jobj.put(Constants.RES_data, rightObjArr);
                    }else {
                        jobj = accFinancialReportsService.getExportBalanceSheetJSON(request, accReportsService.getBalanceSheetAllAccounts(paramObj, null), 1, Integer.parseInt(request.getParameter("toggle")), periodView);
                    }
                    exportDaoObj.processRequest(request, response, jobj);
                } else {
                    request.setAttribute("isForTradingAndProfitLoss", true);
                    jobj = accReportsService.getBalanceSheetAllAccounts(paramObj, null);
                    String currencyid = sessionHandlerImpl.getCurrencyID(request);
                    java.text.DateFormat formatter = authHandler.getDateOnlyFormat();
                    String logoPath = ProfileImageServlet.getProfileImagePath(request, true, null);
                    java.io.ByteArrayOutputStream baos = null;
                    String filename = request.getParameter("filename") + "_v1";
                    String comName = sessionHandlerImpl.getCompanyName(request);
                    String comAdd = authHandlerDAO.getCompanyAddress(sessionHandlerImpl.getCompanyid(request));

                    Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
                    Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
                    Date endPreDate = null;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("endpredate"))) {
                        endPreDate = authHandler.getDateOnlyFormat().parse(request.getParameter("endpredate"));
                    }
                    baos = ExportrecordObj.exportBalanceSheetPdf(request, currencyid, formatter, logoPath, comName, jobj, startDate, endDate, 1, Integer.parseInt(request.getParameter("toggle")), comAdd, endPreDate);
                    if (baos != null) {
                        ExportrecordObj.writeDataToFile(filename + "." + fileType, baos, response);
                    }
                }
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView exportDimensionBasedMonthlyBalanceSheet(HttpServletRequest request, HttpServletResponse response) {
       
        JSONObject finalJObj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            String fileType = paramJobj.optString("filetype", null);
            paramJobj.put("isForTradingAndProfitLoss",true);
//            boolean periodView = Boolean.parseBoolean(paramJobj.optString("periodView"));
//            request.setAttribute("isMonthlyOrYearlyPNL", true);// this flag is sending to to do montly and yearly specific changes in common used function.
            if (fileType.equals("csv") || fileType.equals("xls")) {
                if (paramJobj.optString("singleGrid", null) != null && Boolean.parseBoolean(paramJobj.optString("singleGrid"))) {
                    request.setAttribute("isBalanceSheet", true);
                    paramJobj.put("isBalanceSheet", true);
                    paramJobj.put("isMonthly", true);
                    //flag for monthly balance sheet
                    paramJobj.put("NewBalanceSheetCall", true);
                    
                    finalJObj = accFinancialReportsService.getDimensionBasedMonthlyPeriodAmount(paramJobj);
                    request.setAttribute("header", finalJObj.getString("header"));
                    request.setAttribute("title", finalJObj.getString("title"));
                    request.setAttribute("align", finalJObj.getString("align"));
                    exportDaoObj.processRequestNew(request, response, finalJObj);
                }
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", finalJObj.toString());
    }
    
    public ModelAndView getMonthlyTradingAndProfitLoss(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        String view = "jsonView";
        boolean issuccess = false;
        try {
            //flag for chart
            String chartType = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter(Constants.CHART_TYPE))) {
                chartType = request.getParameter(Constants.CHART_TYPE);
            }
            if (request.getParameter("singleGrid") != null && Boolean.parseBoolean(request.getParameter("singleGrid").toString())) {
                request.setAttribute("isForTradingAndProfitLoss", true);
                 request.setAttribute("isMonthlyOrYearlyPNL", true);// this flag is sending to to do montly and yearly specific changes in common used function.
                JSONObject fobj1 = accFinancialReportsService.getMonthlyTradingProfitLossJasperExport(request, true);
                JSONObject fobj = new JSONObject();
                JSONArray jArrL = fobj1.getJSONArray("refleft");
                JSONArray jArrR = fobj1.getJSONArray("refright");
                JSONArray array = fobj1.getJSONArray("months");
                JSONObject monthArrayObject = new JSONObject();
                monthArrayObject.put("months", array);
                jArrL.put(monthArrayObject);
                jArrR.put(monthArrayObject);
                fobj.put("left", jArrL);
                fobj.put("right", jArrR);
                jobj.put(Constants.RES_data, fobj);
                jobj.put("monthCount", array.length());
                
                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                
                if (StringUtil.equalIgnoreCase(chartType, Constants.LINE_CHART) && paramJobj.optBoolean("isMonthlyOrYearlyPNL", false)) {
                    jobj = accFinancialReportsService.getMonthlyYearlyTradingProfitAndLossChartJSON(paramJobj, jobj);
                } else {
                    jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(paramJobj, jobj, false);
                }
                
                boolean isWidgetRequest = request.getParameter("isWidgetRequest") != null ? Boolean.parseBoolean(request.getParameter("isWidgetRequest")) : false;
                if (isWidgetRequest) {
                    view = "jsonView_ex";
                    JSONObject commData = new JSONObject();
                    JSONObject jMeta = new JSONObject();
                    Map<String, Object> requestParamsForCM = new HashMap<>();
                    requestParamsForCM.put("headers", array);
                    Map<String, JSONArray> returnMap = accInvoiceServiceDAO.getColumnModuleForMonthlyTradingAndProfitLossReport(requestParamsForCM);
                    JSONArray jarrRecords = returnMap.get("record");
                    JSONArray jarrColumns = returnMap.get("columns");
                    commData.put(Constants.RES_success, true);
                    jMeta.put("totalProperty", "totalCount");
                    jMeta.put("root", "coldata");
                    jMeta.put("fields", jarrRecords); //Record Array
                    JSONArray temp = null;
                    if(jobj.getJSONObject(Constants.RES_data)!=null){
                        temp = jobj.getJSONObject(Constants.RES_data).getJSONArray("left");
                    }
                    commData.put("coldata", temp.put(monthArrayObject));  //Actual data
                    commData.put("columns", jarrColumns); //Column Module Array
                    commData.put("totalCount", jobj.length());
                    commData.put("metaData", jMeta);

                    jobj.put("valid", true);
                    jobj.put(Constants.RES_data, commData);
                }
                  
            } else {
                jobj = getMonthlyTradingAndProfitLoss(request);
            }
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                ex.printStackTrace();
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView getMonthlyTradingAndProfitLossGraphical(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONObject convertedJobj = new JSONObject();
        JSONArray convertedArr = new JSONArray();
        String msg = "";
        String view = "jsonView";
        boolean issuccess = false;
        try {
            if (request.getParameter("singleGrid") != null && Boolean.parseBoolean(request.getParameter("singleGrid").toString())) {
                request.setAttribute("isForTradingAndProfitLoss", true);
                 request.setAttribute("isMonthlyOrYearlyPNL", true);// this flag is sending to to do montly and yearly specific changes in common used function.
                JSONObject fobj1 = accFinancialReportsService.getMonthlyTradingProfitLossJasperExport(request, true);
                JSONObject fobj = new JSONObject();
                JSONArray jArrL = fobj1.getJSONArray("refleft");
                JSONArray jArrR = fobj1.getJSONArray("refright");
                JSONArray array = fobj1.getJSONArray("months");
                JSONObject monthArrayObject = new JSONObject();
                monthArrayObject.put("months", array);
                jArrL.put(monthArrayObject);
                jArrR.put(monthArrayObject);
                fobj.put("left", jArrL);
                fobj.put("right", jArrR);
                jobj.put(Constants.RES_data, fobj);
                jobj.put("monthCount", array.length());
                
                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(paramJobj, jobj, false);
                
                boolean isWidgetRequest = request.getParameter("isWidgetRequest") != null ? Boolean.parseBoolean(request.getParameter("isWidgetRequest")) : false;
                if (isWidgetRequest) {
                    view = "jsonView_ex";
                    JSONObject commData = new JSONObject();
                    Map<String, Object> requestParamsForCM = new HashMap<>();
                    requestParamsForCM.put("headers", array);
                    Map<String, JSONArray> returnMap = accInvoiceServiceDAO.getColumnModuleForMonthlyTradingAndProfitLossReport(requestParamsForCM);
                    JSONArray jarrColumns = returnMap.get("columns");
                    commData.put(Constants.RES_success, true);
                    JSONArray temp = null;
                    if(jobj.getJSONObject(Constants.RES_data)!=null){
                        temp = jobj.getJSONObject(Constants.RES_data).getJSONArray("left");
                    }
                    commData.put("coldata", temp.put(monthArrayObject));  //Actual data
                    commData.put("columns", jarrColumns); //Column Module Array
                    commData.put("totalCount", jobj.length());

                    jobj.put("valid", true);
                    jobj.put(Constants.RES_data, commData);
                }
                
            } else {
                jobj = getMonthlyTradingAndProfitLoss(request);
            }
            if(jobj.has("data")){
                JSONObject dataObj = jobj.getJSONObject("data");
                if(dataObj.has("coldata")){
                    JSONArray colDataArr = dataObj.getJSONArray("coldata");
                    boolean lossDone = false;
                    boolean profitDone = false;                    
                    boolean monthDone = false;
                    JSONObject lossObj = new JSONObject();
                    JSONObject profitObj = new JSONObject();
                    JSONObject monthObj = new JSONObject();
                    for (int i = colDataArr.length()-1; i >= 0; i--){
                        JSONObject colDataObj = colDataArr.getJSONObject(i);
                        if(colDataObj.has("months")){
                            monthDone = true;
                            monthObj = colDataObj;
                        }
                        if(colDataObj.has("accountid")){
                           if(colDataObj.getString("accountid").equals("Net Loss")){
                               lossDone = true;
                               lossObj = colDataObj;
                           }
                           if(colDataObj.getString("accountid").equals("Net Profit")){
                               profitDone = true;
                               profitObj = colDataObj;
                           }
                        }
                        if(profitDone && lossDone && monthDone){
                            break;
                        }
                    }
                    JSONArray monthArr = monthObj.getJSONArray("months");
                    for (int i = 0; i < monthArr.length(); i++) {
                        JSONObject temp = new JSONObject();
                        temp.put("monthname", monthArr.getJSONObject(i).get("monthname"));
                        if(profitObj.has("amount_"+i)){
                            temp.put("profit", profitObj.get("amount_"+i));
                        }
                        else if(lossObj.has("amount_"+i)){
                            temp.put("loss", lossObj.get("amount_"+i));
                        }
                        convertedArr.put(temp);
                    }
                }
            }
            convertedJobj.put("data",convertedArr);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                ex.printStackTrace();
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", convertedJobj.toString());
    }

    public ModelAndView getTradingAndProfitLossWithBudget(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            if (paramJobj.optString("singleGrid",null) != null && Boolean.parseBoolean(paramJobj.optString("singleGrid"))) {
                JSONObject fobj1 = accFinancialReportsService.getTradingAndProfitLossWithBudget(request);
                JSONObject fobj = new JSONObject();
                JSONArray jArrL = fobj1.getJSONArray("refleft");
                JSONArray jArrR = fobj1.getJSONArray("refright");
                fobj.put("left", jArrL);
                fobj.put("right", jArrR);
                jobj.put(Constants.RES_data, fobj);
                jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(paramJobj, jobj, false);
            }
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                ex.printStackTrace();
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView exportLedger(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {            
            String accName = request.getParameter("accountid");
            boolean periodView = request.getParameter("periodView") != null ? Boolean.parseBoolean(request.getParameter("periodView")) : false;
            if (Constants.Difference_in_Opening_balances.equals(accName)) {
                DateFormat df = authHandler.getDateOnlyFormat();
                Date endDate = df.parse(request.getParameter("enddate"));
                Date startDate = df.parse(request.getParameter("stdate"));
                request.setAttribute("isOpeningBalanceFlag", true);
                jobj = accReportsService.getOpeningBalancesWithDateLedger(request, sessionHandlerImpl.getCompanyid(request), periodView ? new Date(1970) : startDate, endDate);
            } else {
                jobj = accReportsService.getLedger(request);
            }
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView exportCustomerLedger(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            int reportid = !StringUtil.isNullOrEmpty(request.getParameter("reportid")) ? Integer.parseInt(request.getParameter("reportid")) : -1;
            if(reportid==Constants.SOA_CUSTOMER_ACCOUNT_STATEMENT_REPORTID){
                jobj = getCustomerAccountStatement(request,true);
            }else{
                jobj = getCustomerLedger(request,true);
            }
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView exportVendorLedger(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            int reportid = !StringUtil.isNullOrEmpty(request.getParameter("reportid")) ? Integer.parseInt(request.getParameter("reportid")) : -1;
            if(reportid==Constants.SOA_VENDOR_ACCOUNT_STATEMENT_REPORTID){
                jobj = getVendorAccountStatement(request,true);
            }else{
                jobj = getVendorLedger(request,true);
            }
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView exportTrialBalance(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            request.setAttribute("isExport", true);
            request.setAttribute("isOpeningBalanceFlag", true);
//            jobj = getTrialBalance(request);
            JSONObject paramJObj = StringUtil.convertRequestToJsonObject(request);
            jobj = accReportsService.getTrialBalance(paramJObj);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                jobj.put("isFromToDateRequired", true);
                jobj.put("stdate", request.getParameter("stdate"));
                jobj.put("enddate", request.getParameter("enddate"));
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getProValuation(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String enddate = request.getParameter("enddate");
            Date endDate = null;
            if (enddate != null) {
                endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            }
            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
            companyPriceListParams.put("isPurchase", true);
            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(companyid, companyPriceListParams);
            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
            
            Date inventoryOpeningBalanceDate = null;
            KwlReturnObject rtObj = accProductObj.getInventoryOpeningBalanceDate(companyid);
            List<Date> lst = rtObj.getEntityList();
            for (Date dateObj : lst) {
                inventoryOpeningBalanceDate = dateObj;
            }
            
            String fileType = request.getParameter("filetype");
            String exportInventoryValuation = request.getParameter("exportInventoryValuation");
            boolean isExportInventoryValuation = !StringUtil.isNullOrEmpty(exportInventoryValuation) ? Boolean.parseBoolean(exportInventoryValuation) : false;
            jobj = accReportsService.getInventoryOpeningBalance(request, companyid, endDate, companyMaxDateProductPriceList, inventoryOpeningBalanceDate);
            if (isExportInventoryValuation) {
                JSONObject invObj = new JSONObject();
                invObj.put(Constants.RES_data, jobj.getJSONArray(Constants.RES_data));
                if (StringUtil.equal(fileType, "xls")) {
                    exportDaoObj.processRequest(request, response, invObj);
                } else if (StringUtil.equal(fileType, "pdf")) {
                    exportDaoObj.processRequest(request, response, invObj);
                }
            }
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getStockStatus(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
                      
            requestParams.put(Constants.REQ_startdate, request.getParameter("stdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            requestParams.put(Constants.REPORT_ID, Constants.STOCK_STATUS_REPORT_ID);
            requestParams.put(Constants.ss, request.getParameter(Constants.ss));
            requestParams.put(Constants.companyid, sessionHandlerImpl.getCompanyid(request));
         
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));
            String randomRequestId = UUID.randomUUID().toString();
            requestParams.put(Constants.REQUEST_ID,randomRequestId);
             ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            requestParams.put("isActivateMRPModule", extraCompanyPreferences.isActivateMRPModule());
            
            JSONArray DataJArr = AccProductService.getInventoryValuationData(requestParams);
            JSONArray pagedJson = DataJArr;
            int totalDataCount = DataJArr.length();
            if (request.getParameter(Constants.start) != null && request.getParameter(Constants.limit) != null) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt((String) request.getParameter(Constants.start)), Integer.parseInt((String) request.getParameter(Constants.limit)));
            }
            jobj.put(Constants.RES_data, pagedJson);
            jobj.put(Constants.RES_count, totalDataCount);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getStockStatusBalance(HttpServletRequest request, Date startDate, Date endDate,boolean  isexport) {
        JSONObject jobj = new JSONObject();
        try {
            jobj = getStockStatus(request, startDate, endDate,isexport);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return jobj;
    }

    public JSONObject getStockStatus(HttpServletRequest request, Date stDate, Date endDate, boolean  isexport) throws ServiceException {
        JSONObject jobj = new JSONObject();
        try {
            JSONArray DataJArr = getStockStatusArray(request, stDate, endDate);
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter(Constants.limit);
            JSONArray jArr1 = new JSONArray();
            boolean isExport = (request.getAttribute("isExport") == null) ? false : true;//flag for Jasper
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)&&!isexport) {
                int st = Integer.parseInt(start);
                int ed = Math.min(DataJArr.length(), st + Integer.parseInt(limit));
                for (int i = st; i < ed; i++) {
                    jArr1.put(DataJArr.getJSONObject(i));
                }
            } else {
                jArr1 = DataJArr;
            }
            jobj.put(Constants.RES_data, jArr1);
            jobj.put(Constants.RES_count, DataJArr.length());
        } catch (Exception ex) {
            ex.printStackTrace();
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return jobj;
    }

    public JSONArray getStockStatusArray(HttpServletRequest request, Date stDate, Date endDate) throws ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
            Calendar startcal = Calendar.getInstance();
            Calendar endcal = Calendar.getInstance();
            if (stDate != null) {
                startcal.setTime(stDate);
            }
            if (endDate != null) {
                endcal.setTime(endDate);
            }
            Date beginDate = null;
            KwlReturnObject rtObj = accProductObj.getInventoryOpeningBalanceDate(companyid);
            List lst = rtObj.getEntityList();
            Iterator ite = lst.iterator();
            while (ite.hasNext()) {
                beginDate = (Date) ite.next();
            }
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("beginDate", beginDate);
            requestParam.put("stDate", stDate);
            requestParam.put("endDate", endDate);
            requestParam.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter(Constants.limit);
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                requestParam.put(Constants.start, Integer.parseInt(start));
                requestParam.put(Constants.limit, Integer.parseInt(limit));
            }
            requestParam.put(Constants.ss, request.getParameter(Constants.ss));

            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cpresult.getEntityList().get(0);
            Boolean isTradingFlow = false;
            if (pref != null && pref.isWithInvUpdate()) {
                isTradingFlow = true;
            }
            requestParam.put("isTradingFlow", isTradingFlow);

            KwlReturnObject rtObject = accProductObj.getStockStatus(requestParam);

            List list = rtObject.getEntityList();
            Iterator itr = list.iterator();
            int i = 0;
            while (itr.hasNext()) {
                Object[] row = (Object[]) itr.next();
                JSONObject obj = new JSONObject();
                String productId = row[0].toString();
                KwlReturnObject proobj = accountingHandlerDAOobj.getObject(Product.class.getName(), productId);
                Product product = (Product) proobj.getEntityList().get(0);
                obj.put("uom",product.getUnitOfMeasure()!=null?product.getUnitOfMeasure().getNameEmptyforNA():"");
                obj.put("productid", productId);
                obj.put("productname", row[1]);
                obj.put("pid", row[2]);
                obj.put("productdesc", row[3]);
                obj.put("productType", row[4]);
                obj.put("productTypeID", row[5]);

                double onhand = Double.parseDouble(row[6] == null ? "0" : row[6].toString());

                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put("df", authHandler.getDateOnlyFormat());
                requestParams.put("pendingapproval", false);
                requestParams.put("startdate", stDate);
                requestParams.put("enddate", endDate);
                requestParams.put("productId", productId);
                String productuomId = (row[6] != null) ? row[6].toString() : "";
                
                double poQty = AccProductService.getOutstandingPoSoProductsCount(requestParams, true, productId, accountingHandlerDAOobj, accGoodsReceiptDAOObj, accInvoiceDAOobj, accSalesOrderDAOobj, accPurchaseOrderobj, productuomId);

                double soQty = AccProductService.getOutstandingPoSoProductsCount(requestParams, false, productId, accountingHandlerDAOobj, accGoodsReceiptDAOObj, accInvoiceDAOobj, accSalesOrderDAOobj, accPurchaseOrderobj, productuomId);

                double netQty = (onhand + poQty - soQty);
                obj.put("onhand", authHandler.formattedQuantity(onhand, companyid));
                obj.put("poQty", authHandler.formattedQuantity(poQty, companyid));
                obj.put("soQty", authHandler.formattedQuantity(soQty, companyid));
                obj.put("netQty", authHandler.formattedQuantity(netQty, companyid));

                jArr.put(obj);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return jArr;
    }

    public ModelAndView exportStockStatus(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            
            /**
             * if MRP is Activated, isActivateMRPModule flag will be true to get all MRP related transaction.
             * otherwise isActivateMRPModule flag will be false which will not return MRP related transaction.
             */
            
            boolean isActivateMRPModule = false;
            Map<String, Object> filterMap = new HashMap();
            filterMap.put(Constants.Acc_id, companyid);
            Object extraPrefActivateMRP = kwlCommonTablesDAOObj.getRequestedObjectFields(ExtraCompanyPreferences.class, new String[]{"activateMRPModule"}, filterMap);
            if (extraPrefActivateMRP != null) {
                isActivateMRPModule = (Boolean) extraPrefActivateMRP;
            }
            
            requestParams.put(Constants.REQ_startdate, request.getParameter("stdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            requestParams.put(Constants.REPORT_ID, Constants.STOCK_STATUS_REPORT_ID);
            requestParams.put(Constants.IS_EXPORT_REPORT,"true");
            requestParams.put(Constants.ss, request.getParameter(Constants.ss));
            requestParams.put(Constants.companyid, companyid);
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            String randomRequestId = UUID.randomUUID().toString();
            requestParams.put(Constants.REQUEST_ID, randomRequestId);
            requestParams.put(Constants.isActivateMRPModule, isActivateMRPModule);
            JSONArray DataJArr = AccProductService.getInventoryValuationData(requestParams);
            JSONArray pagedJson = DataJArr;
            if (request.getParameter(Constants.start) != null && request.getParameter(Constants.limit) != null) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt((String) request.getParameter(Constants.start)), Integer.parseInt((String) request.getParameter(Constants.limit)));
            }
            jobj.put(Constants.RES_data, pagedJson);
            jobj.put(Constants.RES_count, DataJArr.length());
            
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    private double formatAccountDetailsForMonthView(HttpServletRequest request, Account account, Date startDate, Date endDate, int level, boolean isDebit, boolean isBalanceSheet, JSONArray jArr, DateFormat sdf) throws ServiceException, SessionExpiredException, ParseException,JSONException {
        boolean isDeleted = false;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        if (account.isDeleted()) { //BUG #16733: Deleted account check for sub Assets/Account
            isDeleted = true;
        }

        //Logic to get new fixed asset group from old fixed asset id
        //To do - Need to test wheteher is working or not
        String fixedAssetgrp = "";
        Group group = accAccountDAOobj.getNewGroupFromOldId(Group.FIXED_ASSETS, account.getCompany().getCompanyID());
        if (group != null) {
            fixedAssetgrp = group.getID();
        }

        if (account.getGroup() != null && account.getGroup().getID().equalsIgnoreCase(fixedAssetgrp)) { //BUG Fixed #16739 : Creation date check for Fixed Assets
            Date createdOn = AccountingManager.resetTimeField(account.getCreationDate());
            Date toDate = AccountingManager.resetTimeField(endDate);
            if (toDate.compareTo(createdOn) <= 0) {
                isDeleted = true;
            }
        }

        startDate = sdf.parse(sdf.format(startDate));

        double amount = 0;
        if (!isDeleted) {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            amount = accReportsService.getAccountBalance(paramJobj, account.getID(), startDate, endDate,null);
            amount = authHandler.round(amount, companyid);
        }
        double totalAmount = amount;
        String accname = StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getName() : "[" + account.getAcccode() + "] " + account.getName();
        Set<Account> list = account.getChildren();
        JSONArray chArr = new JSONArray();
        for (Account child : list) {           
            totalAmount += formatAccountDetailsForMonthView(request, child, startDate, endDate, level + 1, isDebit, isBalanceSheet, chArr, sdf);
        }
        try {
            if (chArr.length() > 0) {
                JSONObject obj = new JSONObject();
                obj.put("accountname", accname);
                obj.put("accountid", account.getID());
                obj.put("level", level);
                obj.put("leaf", false);
                obj.put("amount", "");
                obj.put("isdebit", isDebit);
                obj.put("accountflag", true);
                obj.put("acctype", (account.getGroup().getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                obj.put("group", (account.getGroup().getID().toString().equals("15")) ? "income" : ((account.getGroup().getID().toString().equals("8")) ? "expense" : ""));
                jArr.put(obj);
                for (int i = 0; i < chArr.length(); i++) {
                    jArr.put(chArr.getJSONObject(i));
                }

                if (amount != 0) {
                    obj = new JSONObject();
                    obj.put("accountname", "Other " + accname);
                    obj.put("accountid", account.getID());
                    obj.put("level", level + 1);
                    obj.put("leaf", true);
                    if (!isDebit) {
                        amount = -amount;
                    }
                    if (isBalanceSheet) {
                        amount = -amount;
                    }
                    obj.put("amount", amount);
                    obj.put("isdebit", isDebit);
                    obj.put("accountflag", true);
                    obj.put("acctype", (account.getGroup().getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                    obj.put("group", (account.getGroup().getID().toString().equals("15")) ? "income" : ((account.getGroup().getID().toString().equals("8")) ? "expense" : ""));
                    jArr.put(obj);
                }

                obj = new JSONObject();
                obj.put("accountname", "Total " + accname);
                obj.put("accountid", account.getID());
                obj.put("level", level);
                obj.put("leaf", true);
                obj.put("show", true);
                double ta = totalAmount;
                if (!isDebit) {
                    ta = -ta;
                }
                if (isBalanceSheet) {
                    ta = -ta;
                }
                obj.put("amount", ta);
                obj.put("isdebit", isDebit);
                obj.put("acctype", (account.getGroup().getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                obj.put("group", (account.getGroup().getID().toString().equals("15")) ? "income" : ((account.getGroup().getID().toString().equals("8")) ? "expense" : ""));
                jArr.put(obj);
            } else if (amount != 0) {
                JSONObject obj = new JSONObject();
                obj.put("accountname", accname);
                obj.put("accountid", account.getID());
                obj.put("level", level);
                obj.put("leaf", true);
                if (!isDebit) {
                    amount = -amount;
                }
                if (isBalanceSheet) {
                    amount = -amount;
                }
                obj.put("amount", (amount != 0.0 ? amount : ""));
                obj.put("isdebit", isDebit);
                obj.put("accountflag", true);
                obj.put("acctype", (account.getGroup().getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                obj.put("group", (account.getGroup().getID().toString().equals("15")) ? "income" : ((account.getGroup().getID().toString().equals("8")) ? "expense" : ""));
                jArr.put(obj);
            } else {
                return 0;
            }
        } catch (JSONException e) {
            throw ServiceException.FAILURE("formatAccountDetails : " + e.getMessage(), e);
        }
        return totalAmount;
    }

    private double formatMonthlyGroupDetails(HttpServletRequest request,
            String companyid, Group group, Date startDate, Date endDate, int level,
            boolean isBalanceSheet, JSONArray jArr, Map<String, Map> monthlyAmountList, int monthCount)
            throws ServiceException, SessionExpiredException, ParseException {
        double totalAmount = 0;
        boolean isDebit = false;
        try {
            if (isBalanceSheet) {
                if (group.getNature() == Group.NATURE_LIABILITY) {
                    isDebit = true;
                }
            } else if (group.getNature() == Group.NATURE_EXPENSES) {
                isDebit = true;
            }
            Set children = group.getChildren();
            JSONArray chArr = new JSONArray();

            HashMap<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put(Constants.companyKey, companyid);
            filterParams.put("groupid", group.getID());
            filterParams.put("parent", null);
            KwlReturnObject accresult = accAccountDAOobj.getAccountEntry(filterParams);
            List<Account> list = accresult.getEntityList();
            DateFormat sdf = authHandler.getDateOnlyFormat();
            for (Account account : list) {
                totalAmount += formatAccountDetailsForMonthView(request, account, startDate, endDate, level + 1, isDebit, isBalanceSheet, chArr, sdf);
            }
            if (children != null && !children.isEmpty()) {
                Iterator childItr = children.iterator();
                while (childItr.hasNext()) {
                    Group child = (Group) childItr.next();
                    totalAmount += formatMonthlyGroupDetails(request, companyid, child, startDate, endDate, level + 1, isBalanceSheet, chArr, monthlyAmountList, monthCount);
                }
            }

            if (chArr.length() > 0) {
                JSONObject obj = new JSONObject();
                obj.put("accountname", group.getName());
                obj.put("accountid", group.getID());
                obj.put("level", level);
                obj.put("leaf", false);
                obj.put("amount", "");
                obj.put("isdebit", isDebit);
                obj.put("acctype", (group.getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                if (group.getParent() != null) {
                    obj.put("group", (group.getParent().getID().toString().equals("15")) ? "income" : ((group.getParent().getID().toString().equals("8")) ? "expense" : ""));
                } else {
                    obj.put("group", (group.getID().toString().equals("15")) ? "income" : ((group.getID().toString().equals("8")) ? "expense" : ""));
                }
                jArr.put(obj);

                for (int i = 0; i < chArr.length(); i++) {
                    JSONObject childObj = chArr.getJSONObject(i);
                    jArr.put(childObj);
                    String accountName = (String) childObj.get("accountname");
                    Map monthlyAmount = monthlyAmountList.get(accountName);
                    if (monthlyAmount == null) {
                        monthlyAmount = new HashMap();
                    }
                    monthlyAmount.put("amount_" + monthCount, childObj.get("amount"));
                    monthlyAmountList.put(accountName, monthlyAmount);
                }

                obj = new JSONObject();
                obj.put("accountname", "Total " + group.getName());
                obj.put("accountid", group.getID());
                obj.put("level", level);
                obj.put("leaf", true);
                obj.put("show", true);
                obj.put("acctype", (group.getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                if (group.getParent() != null) {
                    obj.put("group", (group.getParent().getID().toString().equals("15")) ? "income" : ((group.getParent().getID().toString().equals("8")) ? "expense" : ""));
                } else {
                    obj.put("group", (group.getID().toString().equals("15")) ? "income" : ((group.getID().toString().equals("8")) ? "expense" : ""));
                }
                double ta = totalAmount;
                if (!isDebit) {
                    ta = -ta;
                }
                if (isBalanceSheet) {
                    ta = -ta;
                }
                obj.put("amount", ta);
                obj.put("isdebit", isDebit);
                jArr.put(obj);

                Map monthlyAmount = monthlyAmountList.get(group.getName());
                if (monthlyAmount == null) {
                    monthlyAmount = new HashMap();
                }
                monthlyAmount.put("amount_" + monthCount, ta);
                monthlyAmountList.put(group.getName(), monthlyAmount);
            }
        } catch (JSONException ex) {
            ex.printStackTrace();
            throw ServiceException.FAILURE("formatMonthlyGroupDetails : " + ex.getMessage(), ex);
        }
        return totalAmount;
    }

    public ModelAndView exportTradingAndProfitLossWithBudget(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            String fileType = paramJobj.optString("filetype",null);
            if (StringUtil.equal(fileType, "print")) {
                JSONObject fobj1 = accFinancialReportsService.getTradingAndProfitLossWithBudget(request);
                JSONObject fobj = new JSONObject();
                JSONArray jArrL = fobj1.getJSONArray("refleft");
                JSONArray jArrR = fobj1.getJSONArray("refright");
                fobj.put("left", jArrL);
                fobj.put("right", jArrR);
                jobj.put(Constants.RES_data, fobj);
                jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(paramJobj, jobj, true);
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                if (fileType.equals("csv") || fileType.equals("xls")) {
                    if (paramJobj.optString("singleGrid",null) != null && Boolean.parseBoolean(paramJobj.optString("singleGrid"))) {
                        JSONObject fobj1 = accFinancialReportsService.getTradingAndProfitLossWithBudget(request);
                        JSONObject fobj = new JSONObject();
                        JSONArray jArrL = fobj1.getJSONArray("refleft");
                        JSONArray jArrR = fobj1.getJSONArray("refright");
                        fobj.put("left", jArrL);
                        fobj.put("right", jArrR);
                        jobj.put(Constants.RES_data, fobj);
                        jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(paramJobj, jobj, true);
                    }
                    exportDaoObj.processRequest(request, response, jobj);
                } else {
                    JSONObject fobj1 = accFinancialReportsService.getTradingAndProfitLossWithBudget(request);
                    JSONObject fobj = new JSONObject();
                    JSONArray jArrL = fobj1.getJSONArray("refleft");
                    JSONArray jArrR = fobj1.getJSONArray("refright");
                    fobj.put("left", jArrL);
                    fobj.put("right", jArrR);
                    jobj.put(Constants.RES_data, fobj);
                    
                    jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(paramJobj, jobj, false);
                    getexportTradingAndProfitLossWithBudget(request, response, jobj);
                }
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public void getexportTradingAndProfitLossWithBudget(HttpServletRequest request, HttpServletResponse response, JSONObject jobj) throws DocumentException, ServiceException, IOException {
        Map<String, Object> financeDetailsMap = new HashMap<String, Object>();
        FinanceDetails financeDetails = new FinanceDetails();
        ArrayList<FinanceDetails> financeDetailsList = new ArrayList<FinanceDetails>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            financeDetails.setName(company.getCompanyName());
            financeDetails.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            financeDetails.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            financeDetails.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            financeDetails.setCurrencyinword(company.getCurrency() != null ? company.getCurrency().getName() : "");
            Date startDate1 = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            LocalDate stDate = new LocalDate(startDate1);
            String date = "For " + stDate.toString("MMMM yyyy");
            financeDetails.setDateRange(date);
            financeDetails.setMonth_0(stDate.toString("MMMM yyyy") + " (Actual)");
            financeDetails.setMonth_1(stDate.toString("MMMM yyyy") + " (Budget)");
            financeDetails.setMonth_2("YTD (Actual)");
            financeDetails.setMonth_3("YTD (Budget)");
            financeDetails.setMonth_4("Annual Budget");
            financeDetails.setMonth_5("Variance");
            financeDetails.setMonth_6("Variance(%)");//Variance in percent column header
            financeDetailsMap = getTradingAndProfitLossWithBudgetSubReport(request, jobj);
            financeDetailsList.add(financeDetails);
            financeDetailsMap.put("datasource", new JRBeanCollectionDataSource(financeDetailsList));
            financeDetailsMap.put("basecurr", company.getCurrency() != null ? company.getCurrency().getName() : "");
            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TradingAndProfitLossWithBudgetSubReport.jrxml");
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            financeDetailsMap.put("TradingAndProfitLossWithBudgetSubReport", jasperReportSubReport);

            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TradingAndProfitLossWithBudget.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(financeDetailsList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, financeDetailsMap, beanColDataSource);
            response.setHeader("Content-Disposition", "attachment;filename=" + "TradingAndProfitLossWithBudget_v1.pdf");
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception ex) {
            Logger.getLogger(accOtherReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public Map<String, Object> getTradingAndProfitLossWithBudgetSubReport(HttpServletRequest request, JSONObject jobj) throws ServiceException {
        ArrayList<MonthlyTradingProfitLoss> monthlyTradingProfitLossList = new ArrayList<MonthlyTradingProfitLoss>();
        HashMap<String, MonthlyTradingProfitLoss> monthlyTradingProfitLossMap = new HashMap<String, MonthlyTradingProfitLoss>();
        Map<String, Object> monthlyprolossMap = new HashMap<String, Object>();
        try {
            JSONObject tempObj = jobj.getJSONObject(Constants.RES_data);
            JSONArray jArrL = tempObj.getJSONArray("left");
            for (int i = 0; i < jArrL.length(); i++) { // looping thru left array
                JSONObject leftobj = jArrL.getJSONObject(i);
                MonthlyTradingProfitLoss monthlyTradingProfitLoss = getObjectOfTradingProfitLossWithBudget(leftobj);
                monthlyTradingProfitLossList.add(monthlyTradingProfitLoss);
            }
            monthlyprolossMap.put("TradingAndProfitLossWithBudgetSubReportData", new JRBeanCollectionDataSource(monthlyTradingProfitLossList));
        } catch (Exception ex) {
            Logger.getLogger(accOtherReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getTradingAndProfitLossWithBudgetSubReport : " + ex.getMessage(), ex);
        }
        return monthlyprolossMap;
    }

    public MonthlyTradingProfitLoss getObjectOfTradingProfitLossWithBudget(JSONObject leftobj) throws JSONException {
        MonthlyTradingProfitLoss monthlyTradingProfitLoss = new MonthlyTradingProfitLoss();
        int level = Integer.parseInt(leftobj.get("level").toString());
        switch (level) {
            case 0:
                monthlyTradingProfitLoss.setAccName(leftobj.getString("accountname"));
                break;
            case 1:
                monthlyTradingProfitLoss.setAccName1(leftobj.getString("accountname"));
                break;
            case 2:
                monthlyTradingProfitLoss.setAccName2(leftobj.getString("accountname"));
                break;
            case 3:
                monthlyTradingProfitLoss.setAccName3(leftobj.getString("accountname"));
                break;
            case 4:
                monthlyTradingProfitLoss.setAccName3(leftobj.getString("accountname"));
                break;
            case 5:
                monthlyTradingProfitLoss.setAccName3(leftobj.getString("accountname"));
                break;
        }
        //Make rounding of amount fields if available otherwise set blank value
        if (leftobj.has("actualamount")) {
            monthlyTradingProfitLoss.setAmount_0((leftobj.get("actualamount").toString().equals("") || leftobj.get("actualamount").toString().equals("-") || leftobj.get("actualamount").toString().contains("<")) ? "" : authHandler.formattingdecimal(Double.parseDouble(leftobj.get("actualamount").toString()), 2));
        } else{
            monthlyTradingProfitLoss.setAmount_0("");
        }
        if (leftobj.has("actualbudget")) {
            monthlyTradingProfitLoss.setAmount_1((leftobj.get("actualbudget").toString().equals("") || leftobj.get("actualbudget").toString().equals("-") || leftobj.get("actualbudget").toString().contains("<")) ? "" : authHandler.formattingdecimal(Double.parseDouble(leftobj.get("actualbudget").toString()), 2));
        } else{
            monthlyTradingProfitLoss.setAmount_1("");
        }
        if (leftobj.has("ytdamount")) {
            monthlyTradingProfitLoss.setAmount_2((leftobj.get("ytdamount").toString().equals("") || leftobj.get("ytdamount").toString().equals("-") || leftobj.get("ytdamount").toString().contains("<")) ? "" : authHandler.formattingdecimal(Double.parseDouble(leftobj.get("ytdamount").toString()),2));
        } else{
            monthlyTradingProfitLoss.setAmount_2("");
        }
        if (leftobj.has("ytdbudget")) {
            monthlyTradingProfitLoss.setAmount_3((leftobj.get("ytdbudget").toString().equals("") || leftobj.get("ytdbudget").toString().equals("-") || leftobj.get("ytdbudget").toString().contains("<")) ? "" : authHandler.formattingdecimal(Double.parseDouble(leftobj.get("ytdbudget").toString()), 2));
        } else{
            monthlyTradingProfitLoss.setAmount_3("");
        }
        if (leftobj.has("annualbudget")) {
            monthlyTradingProfitLoss.setAmount_4((leftobj.get("annualbudget").toString().equals("") || leftobj.get("annualbudget").toString().equals("-") || leftobj.get("annualbudget").toString().contains("<")) ? "" : authHandler.formattingdecimal(Double.parseDouble(leftobj.get("annualbudget").toString()), 2));
        } else{
            monthlyTradingProfitLoss.setAmount_4("");
        }
        if (leftobj.has("variance")) {
            monthlyTradingProfitLoss.setAmount_5((leftobj.get("variance").toString().equals("") || leftobj.get("variance").toString().equals("-") || leftobj.get("variance").toString().contains("<")) ? "" : authHandler.formattingdecimal(Double.parseDouble(leftobj.get("variance").toString()), 2));
        } else{
            monthlyTradingProfitLoss.setAmount_5("");
        }
        if (leftobj.has("varianceinpercent")) {
            //variance in percent column value
            monthlyTradingProfitLoss.setAmount_6((leftobj.get("varianceinpercent").toString().equals("") || leftobj.get("varianceinpercent").toString().equals("-") || leftobj.get("varianceinpercent").toString().contains("<")) ? "" : leftobj.get("varianceinpercent").toString());
        } else{
            monthlyTradingProfitLoss.setAmount_6("");
        }
        return monthlyTradingProfitLoss;
    }

    public ModelAndView exportMonthlyTradingAndProfitLoss(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            request.setAttribute("isMonthlyOrYearlyPNL", true);// this flag is sending to to do montly and yearly specific changes in common used function.
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            String fileType = paramJobj.optString("filetype",null);
            boolean periodView = Boolean.parseBoolean(paramJobj.optString("periodView"));
            if (StringUtil.equal(fileType, "print")) {
                if (paramJobj.optString("singleGrid",null) != null && Boolean.parseBoolean(paramJobj.optString("singleGrid"))) {
                    paramJobj.put("isForTradingAndProfitLoss", true);
                    request.setAttribute("isForTradingAndProfitLoss", true);
                    
                    JSONObject fobj1 = accFinancialReportsService.getMonthlyTradingProfitLossJasperExport(request, true);
                    JSONObject fobj = new JSONObject();
                    JSONArray jArrL = fobj1.getJSONArray("refleft");
                    JSONArray jArrR = fobj1.getJSONArray("refright");
                    JSONArray array = fobj1.getJSONArray("months");
                    JSONObject monthArrayObject = new JSONObject();
                    monthArrayObject.put("months", array);
                    jArrL.put(monthArrayObject);
                    jArrR.put(monthArrayObject);
                    fobj.put("left", jArrL);
                    fobj.put("right", jArrR);
                    jobj.put(Constants.RES_data, fobj);
                    jobj.put("monthCount", array.length());
                    jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(paramJobj, jobj, true);
                } else {
                    jobj = accFinancialReportsService.getExportBalanceSheetJSON(request, getMonthlyTradingAndProfitLoss(request), 2, 0, periodView);// SON - need to check if we need to modify the getExportBalanceSheetJSON() for the monthly basis
                }
                String GenerateDate = authHandler.getDateFormatter(paramJobj).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                if (fileType.equals("csv") || fileType.equals("xls")) {
                    if (paramJobj.optString("singleGrid",null) != null && Boolean.parseBoolean(paramJobj.optString("singleGrid"))) {
                        request.setAttribute("isForTradingAndProfitLoss", true);
                        paramJobj.put("isForTradingAndProfitLoss", true);
                        
                        JSONObject fobj1 = accFinancialReportsService.getMonthlyTradingProfitLossJasperExport(request, true);
                        JSONObject fobj = new JSONObject();
                        JSONArray jArrL = fobj1.getJSONArray("refleft");
                        JSONArray jArrR = fobj1.getJSONArray("refright");
                        JSONArray array = fobj1.getJSONArray("months");
                        JSONObject monthArrayObject = new JSONObject();
                        monthArrayObject.put("months", array);
                        jArrL.put(monthArrayObject);
                        jArrR.put(monthArrayObject);
                        fobj.put("left", jArrL);
                        fobj.put("right", jArrR);
                        jobj.put(Constants.RES_data, fobj);
                        jobj.put("monthCount", array.length());
                        //                        jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(request, jobj, true);
                        jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(paramJobj, jobj, true);
                    } else {
                        jobj = accFinancialReportsService.getExportBalanceSheetJSON(request, getMonthlyTradingAndProfitLoss(request), 2, 0, periodView);
                    }
                    exportDaoObj.processRequest(request, response, jobj);
                } else {
                    request.setAttribute("isForTradingAndProfitLoss", true);
                    paramJobj.put("isForTradingAndProfitLoss", true);
                    
                    JSONObject fobj1 = accFinancialReportsService.getMonthlyTradingProfitLossJasperExport(request, true);
                    JSONObject fobj = new JSONObject();
                    JSONArray jArrL = fobj1.getJSONArray("refleft");
                    JSONArray jArrR = fobj1.getJSONArray("refright");
                    JSONArray array = fobj1.getJSONArray("months");
                    JSONObject monthArrayObject = new JSONObject();
                    monthArrayObject.put("months", array);
                    jArrL.put(monthArrayObject);
                    jArrR.put(monthArrayObject);
                    fobj.put("left", jArrL);
                    fobj.put("right", jArrR);
                    jobj.put(Constants.RES_data, fobj);
                    jobj.put("monthCount", array.length());
                    jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(paramJobj, jobj, false);
                    ExportrecordObj.exportMonthlyTradingJasperPdf(request, response, jobj);
                }
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView exportDimensionBasedMonthlyTradingAndProfitLoss(HttpServletRequest request, HttpServletResponse response) {
        JSONObject finalJObj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            String fileType = paramJobj.optString("filetype", null);
            boolean periodView = Boolean.parseBoolean(paramJobj.optString("periodView"));
            request.setAttribute("isMonthlyOrYearlyPNL", true);// this flag is sending to to do montly and yearly specific changes in common used function.
            paramJobj.put("isMonthlyOrYearlyPNL", true);
            if (fileType.equals("csv") || fileType.equals("xls")) {
                if (paramJobj.optString("singleGrid", null) != null && Boolean.parseBoolean(paramJobj.optString("singleGrid"))) {
                    request.setAttribute("isForTradingAndProfitLoss", true);
                    paramJobj.put("isForTradingAndProfitLoss", true);
                    paramJobj.put("isMonthly", true);
                    finalJObj = accFinancialReportsService.getDimensionBasedMonthlyPeriodAmount(paramJobj);
                    request.setAttribute("header", finalJObj.getString("header"));
                    request.setAttribute("title", finalJObj.getString("title"));
                    request.setAttribute("align", finalJObj.getString("align"));
                    exportDaoObj.processRequestNew(request, response, finalJObj);
                }
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", finalJObj.toString());
    }
        
    public JSONArray getSearchJSONCustomDimensionBased(JSONObject paramJobj) throws ServiceException, SessionExpiredException {
        JSONArray comparedata = new JSONArray();
        try {
            String Searchjson = null;
            if (paramJobj.optString("dimensionBasedSearchJson", null) != null) {
                Searchjson = paramJobj.optString("dimensionBasedSearchJson");
                JSONObject SearchJsonObj = new JSONObject(Searchjson);
                JSONArray SearchJsonArray = SearchJsonObj.getJSONArray("root");
                for (int cnt = 0; cnt < SearchJsonArray.length(); cnt++) {
                    JSONObject compareObj = SearchJsonArray.optJSONObject(cnt);
                    String column = compareObj.optString("column");
                    String refdbname = compareObj.optString("refdbname");
                    String xfield = compareObj.optString("xfield");
                    String iscustomcolumn = compareObj.optString("iscustomcolumn");
                    String iscustomcolumndata = compareObj.optString("iscustomcolumndata");
                    String isfrmpmproduct = compareObj.optString("isfrmpmproduct");
                    String fieldtype = compareObj.optString("fieldtype");
                    String searchText = compareObj.optString("searchText");
                    String columnheader = compareObj.optString("columnheader");
                    String search = compareObj.optString("search");
                    String xtype = compareObj.optString("xtype");
                    String combosearch = "";
                    try {
                        combosearch =StringUtil.DecodeText(compareObj.optString("combosearch"));
                    } catch (Exception e) {
                        combosearch = compareObj.optString("combosearch");
                    }
                    String isinterval = compareObj.optString("isinterval");
                    String interval = compareObj.optString("interval");
                    String isbefore = compareObj.optString("isbefore");

                    List<String> searchTextItems = Arrays.asList(searchText.split("\\s*,\\s*"));
                    List<String> searchItems = Arrays.asList(search.split("\\s*,\\s*"));
                    List<String> combosearchItems = Arrays.asList(combosearch.split("\\s*,\\s*"));
                    for (int i = 0; i < searchTextItems.size(); i++) {
                        JSONObject cntObj = new JSONObject();
                        cntObj.put("searchText", searchTextItems.get(i));
                        cntObj.put("search", searchItems.get(i));
                        cntObj.put("combosearch", combosearchItems.get(i));
                        cntObj.put("column", column);
                        cntObj.put("refdbname", refdbname);
                        cntObj.put("xfield", xfield);
                        cntObj.put("iscustomcolumn", iscustomcolumn);
                        cntObj.put("iscustomcolumndata", iscustomcolumndata);
                        cntObj.put("isfrmpmproduct", isfrmpmproduct);
                        cntObj.put("fieldtype", fieldtype);
                        cntObj.put("columnheader", columnheader);
                        cntObj.put("xtype", xtype);
                        cntObj.put("isinterval", isinterval);
                        cntObj.put("interval", interval);
                        cntObj.put("isbefore", isbefore);
                        comparedata.put(cntObj);
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return  comparedata;
    }
    
    public ModelAndView exportMonthlyBalanceSheet(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            request.setAttribute("isForTradingAndProfitLoss", true);
            request.setAttribute("NewBalanceSheetCall", true);
            jobj = accFinancialReportsService.getMonthlyBalanceSheetforExport(request, true);
            ExportrecordObj.exportMonthlyBalanceSheetJasperPdf(request, response, jobj);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public double getMonthlyProfitLoss(HttpServletRequest request, int nature, JSONArray jArr) throws ServiceException, SessionExpiredException {
        double total = 0;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject plresult = accAccountDAOobj.getGroupForProfitNloss(companyid, nature, false,false,false);
            List<Group> groupList = plresult.getEntityList();
            final DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");

            LocalDate localStartDate = dtf.parseLocalDate(request.getParameter("stdate"));
            LocalDate localEndDate = dtf.parseLocalDate(request.getParameter("enddate"));

            Date startDate = localStartDate.toDate();
            Date endDate = localEndDate.toDate();

            Calendar cal = Calendar.getInstance();
            cal.setTime(startDate);
            int startMonth = cal.get(Calendar.MONTH);
            int startYear = cal.get(Calendar.YEAR);

            cal.setTime(endDate);
            int endMonth = cal.get(Calendar.MONTH);
            int endYear = cal.get(Calendar.YEAR);

            boolean isOneMonth = false;

            // if user selects same month & year for both start & end fields, we get the last date of the month to populate into the endDate
            if (startMonth == endMonth && startYear == endYear) {
                DateTime date = localEndDate.toDateTimeAtCurrentTime();
                endDate = date.dayOfMonth().withMaximumValue().toDate();
                isOneMonth = true;
            }

            // monthlyAmount might be initiated from outside for this method and passed in as parameter			
            Map<String, Map> monthlyAmountMap = new HashMap<String, Map>();

            // this is to retrieve the account to put into the final array in a sequenced manner
            Map<String, JSONObject> monthlyAccountMap = new LinkedHashMap<String, JSONObject>();
            // object to hold the 'Total xxx' element
            JSONObject totalObj = null;

            // temporary placeholder for list of accounts / groups with data in each month
            JSONArray jArrMonthly;

            for (Group group : groupList) {
                // we need to include the month of the end date as well
                localStartDate = new LocalDate(startDate);
                localEndDate = new LocalDate(endDate);

                int monthCount = 0;
                // just a trick to include the last month as well
                if (!isOneMonth) {
                    localEndDate = localEndDate.plus(Period.months(1));
                }

                while (localStartDate.isBefore(localEndDate)) {

                    DateTime date = localStartDate.toDateTime(LocalTime.MIDNIGHT);
                    DateTime firstDateOfMonth = date.dayOfMonth().withMinimumValue();
                    DateTime lastDateOfMonth = date.dayOfMonth().withMaximumValue();

                    //  including whole last day for calculation
                    lastDateOfMonth = lastDateOfMonth.plusDays(1);

                    jArrMonthly = new JSONArray();

                    total += formatMonthlyGroupDetails(request, companyid, group, firstDateOfMonth.toDate(), lastDateOfMonth.toDate(), 0, false, jArrMonthly, monthlyAmountMap, monthCount);

                    for (int j = 0; j < jArrMonthly.length(); j++) {
                        JSONObject monthObj = jArrMonthly.getJSONObject(j);
                        if (monthObj.has("accountname")) {
                            String accountName = monthObj.getString("accountname");
                            if (accountName.startsWith("Total")) {
                                totalObj = monthObj;
                            }

                            // we by pass if the current element is the 'Total xxx' because we will add it at the end
                            if (!monthlyAccountMap.containsKey(accountName) & !accountName.startsWith("Total")) {
                                monthlyAccountMap.put(accountName, monthObj);
                            }
                        }
                    }
                    localStartDate = localStartDate.plus(Period.months(1));
                    monthCount++;
                    // not sure if 'Total xxx' element needs to be put here?		               
                }//month				

                // add 'Total xxx' element at the end
                if (totalObj != null) {
                    monthlyAccountMap.put(totalObj.getString("accountname"), totalObj);
                }
            }//group			

            Collection<JSONObject> array = monthlyAccountMap.values();
            Iterator iterator = array.iterator();
            while (iterator.hasNext()) {
                JSONObject monthObj = (JSONObject) iterator.next();
                jArr.put(monthObj);
            }

            // we need to include the month of the end date as well
            localStartDate = new LocalDate(startDate);
            localEndDate = new LocalDate(endDate);

            int numberOfMonths = 0;
            // just a trick to include the last month as well
            if (!isOneMonth) {
                localEndDate = localEndDate.plus(Period.months(1));
            }

            while (localStartDate.isBefore(localEndDate)) {
                localStartDate = localStartDate.plus(Period.months(1));
                numberOfMonths++;
            }

            // go thru each element in the array to assign the amount array for each month
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject obj = jArr.getJSONObject(i);

                // need to check if the current JSON object has 'accountname' because some of the elements is an empty JSON object like { }
                if (obj.has("accountname")) {
                    String accountName = (String) obj.get("accountname");
                    Map monthlyAmount = monthlyAmountMap.get(accountName);
                    if (monthlyAmount != null) {
                        //get the amount for each month regardless there is $$$ in that month or not
                        for (int j = 0; j < numberOfMonths; j++) {
                            Double amount = 0.00;
                            if (monthlyAmount.get("amount_" + j) == null) {
                                obj.put("amount_" + j, authHandler.round(0, companyid));
                            } else {
                                if (monthlyAmount.get("amount_" + j) != null && !StringUtil.isNullOrEmpty(monthlyAmount.get("amount_" + j).toString())) {
                                    amount = Double.parseDouble(monthlyAmount.get("amount_" + j).toString());
                                }
                                obj.put("amount_" + j, authHandler.round(amount.doubleValue(), companyid));
                            }
                        }
                    } else if (!obj.has("amount_0")) {// because jArr might be reused again and it would have items which have been already populated with data other function called earlier					 						 
                        for (int j = 0; j < numberOfMonths; j++) {
                            obj.put("amount_" + j, authHandler.round(0, companyid));
                        }
                    }
                    obj.remove("amount");
                }
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getMonthlyProfitLoss : " + ex.getMessage(), ex);
        } catch (JSONException e) {
            // TODO Auto-generated catch block
            throw ServiceException.FAILURE("getMonthlyProfitLoss : " + e.getMessage(), e);
        }
        return total;
    }

    public double getMonthlyTrading(HttpServletRequest request, int nature, JSONArray jArr) throws ServiceException, SessionExpiredException {
        double total = 0;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject plresult = accAccountDAOobj.getGroupForProfitNloss(companyid, nature, true,false,false);
            List <Group> groupList = plresult.getEntityList();

            final DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");

            LocalDate localStartDate = dtf.parseLocalDate(request.getParameter("stdate"));
            LocalDate localEndDate = dtf.parseLocalDate(request.getParameter("enddate"));

            Date startDate = localStartDate.toDate();
            Date endDate = localEndDate.toDate();

            Calendar cal = Calendar.getInstance();
            cal.setTime(startDate);
            int startMonth = cal.get(Calendar.MONTH);
            int startYear = cal.get(Calendar.YEAR);

            cal.setTime(endDate);
            int endMonth = cal.get(Calendar.MONTH);
            int endYear = cal.get(Calendar.YEAR);

            boolean isOneMonth = false;

            // if user selects same month & year for both start & end fields, we get the last date of the month to populate into the endDate
            if (startMonth == endMonth && startYear == endYear) {
                DateTime date = localEndDate.toDateTime(LocalTime.MIDNIGHT);
                date = date.plusSeconds(86399);
                endDate = date.dayOfMonth().withMaximumValue().toDate();
                isOneMonth = true;
            }

            // monthlyAmount might be initiated from outside for this method and passed in as parameter
            Map<String, Map> monthlyAmountMap = new HashMap<String, Map>();

            // this is to retrieve the account to put into the final array in a sequenced manner
            Map<String, JSONObject> monthlyAccountMap = new LinkedHashMap<String, JSONObject>();

            // object to hold the 'Total xxx' element
            JSONObject totalObj = null;

            // temporary placeholder for list of accounts / groups with data in each month
            JSONArray jArrMonthly;

            for (Group group : groupList) {
                // we need to include the month of the end date as well
                localStartDate = new LocalDate(startDate);
                localEndDate = new LocalDate(endDate);

                if (!isOneMonth){ // just a trick to include the last month as well                
                    localEndDate = localEndDate.plus(Period.months(1));
                }

                int monthCount = 0;
                while (localStartDate.isBefore(localEndDate)) {
                    DateTime date = localStartDate.toDateTime(LocalTime.MIDNIGHT);
                    DateTime firstDateOfMonth = date.dayOfMonth().withMinimumValue();
                    DateTime lastDateOfMonth = date.dayOfMonth().withMaximumValue();

                    //  including whole last day for calculation
                    lastDateOfMonth = lastDateOfMonth.plusDays(1);
                    jArrMonthly = new JSONArray();
                    total += formatMonthlyGroupDetails(request, companyid, group, firstDateOfMonth.toDate(), lastDateOfMonth.toDate(), 0, false, jArrMonthly, monthlyAmountMap, monthCount);

                    for (int j = 0; j < jArrMonthly.length(); j++) {
                        JSONObject monthObj = jArrMonthly.getJSONObject(j);
                        if (monthObj.has("accountname")) {
                            String accountName = monthObj.getString("accountname");
                            if (accountName.startsWith("Total")) {
                                totalObj = monthObj;
                            }
                            // we by pass if the current element is the 'Total xxx' because we will add it at the end
                            if (!monthlyAccountMap.containsKey(accountName) & !accountName.startsWith("Total")) {
                                monthlyAccountMap.put(accountName, monthObj);
                            }
                        }
                    }
                    localStartDate = localStartDate.plus(Period.months(1));
                    monthCount++;
                }//month  								
                // add 'Total xxx' element at the end
                if (totalObj != null) {
                    monthlyAccountMap.put(totalObj.getString("accountname"), totalObj);
                }
            }//group			

            Collection<JSONObject> array = monthlyAccountMap.values();
            Iterator iterator = array.iterator();
            while (iterator.hasNext()) {
                JSONObject monthObj = (JSONObject) iterator.next();
                jArr.put(monthObj);
            }

            // we need to include the month of the end date as well
            localStartDate = new LocalDate(startDate);
            localEndDate = new LocalDate(endDate);

            int numberOfMonths = 0;

            // just a trick to include the last month as well
            if (!isOneMonth) {
                localEndDate = localEndDate.plus(Period.months(1));
            }

            while (localStartDate.isBefore(localEndDate)) {
                localStartDate = localStartDate.plus(Period.months(1));
                numberOfMonths++;
            }

            // go thru each element in the array to assign the amount array for each month
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject obj = jArr.getJSONObject(i);
                // need to check if the current JSON object has 'accountname' because some of the elements is an empty JSON object like { }
                if (obj.has("accountname")) {
                    String accountName = (String) obj.get("accountname");
                    Map monthlyAmount = monthlyAmountMap.get(accountName);
                    if (monthlyAmount != null) {
                        //get the amount for each month regardless there is $$$ in that month or not
                        for (int j = 0; j < numberOfMonths; j++) {
                            Double amount = null;
                            if (monthlyAmount.containsKey("amount_" + j) && monthlyAmount.get("amount_" + j) != null && monthlyAmount.get("amount_" + j) != "") {
                                amount = Double.parseDouble(monthlyAmount.get("amount_" + j).toString());
                            }
                            if (amount == null) {
                                obj.put("amount_" + j, authHandler.round(0, companyid));
                            } else {
                                obj.put("amount_" + j, authHandler.round(amount.doubleValue(), companyid));
                            }
                        }
                    } else if (!obj.has("amount_0")) {// because jArr might be reused again and it would have items which have been already populated with data other function called earlier 						 
                        for (int j = 0; j < numberOfMonths; j++) {
                            obj.put("amount_" + j, authHandler.round(0, companyid));
                        }
                    }
                    obj.remove("amount");
                }
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getMonthlyTrading : " + ex.getMessage(), ex);
        } catch (JSONException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return total;
    }

    public JSONObject getMonthlyTradingAndProfitLoss(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        double invOpeBal = 0, invCloseBal = 0, assemblyValuation = 0;
        try {
            boolean stockValuationFlag = true;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            ExtraCompanyPreferences extrapref = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
                stockValuationFlag = extrapref.isStockValuationFlag();
            }
            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
            companyPriceListParams.put("isPurchase", true);
            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(companyid, companyPriceListParams);
            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
            
            Date inventoryOpeningBalanceDate = null;
            KwlReturnObject rtObj = accProductObj.getInventoryOpeningBalanceDate(companyid);
            List<Date> lst = rtObj.getEntityList();
            for (Date dateObj : lst ) {
                inventoryOpeningBalanceDate = dateObj;
            }
            String costCenterId = request.getParameter("costcenter"); //Filter for costcenter
            String reportView = request.getParameter("reportView"); //"TradingAndProfitLoss","CostCenter"
            double dtotal = 0, ctotal = 0;
            JSONArray jArrL = new JSONArray();
            JSONArray jArrR = new JSONArray();
            JSONObject objlast = new JSONObject();

            final DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
            Date startDate = dtf.parseLocalDate(request.getParameter("stdate")).toDate();
            Date endDate = dtf.parseLocalDate(request.getParameter("enddate")).toDate();

            // we need to include the month of the end date as well
            LocalDate localStartDate = new LocalDate(startDate);
            LocalDate localEndDate = new LocalDate(endDate);

            Calendar cal = Calendar.getInstance();
            cal.setTime(startDate);
            int startMonth = cal.get(Calendar.MONTH);
            int startYear = cal.get(Calendar.YEAR);

            cal.setTime(endDate);
            int endMonth = cal.get(Calendar.MONTH);
            int endYear = cal.get(Calendar.YEAR);

            boolean isOneMonth = false;

            // if user selects same month & year for both start & end fields, we get the last date of the month to populate into the endDate
            if (startMonth == endMonth && startYear == endYear) {
                DateTime date = localEndDate.toDateTime(LocalTime.MIDNIGHT);
                date = date.plusSeconds(86399);
                endDate = date.dayOfMonth().withMaximumValue().toDate();
                isOneMonth = true;
            }

            if (!"CostCenter".equalsIgnoreCase(reportView) && StringUtil.isNullOrEmpty(costCenterId)) { //Don't show Opening/Closing Stock for any Cost-Center
                if (stockValuationFlag) {
                    JSONObject jObjX = accReportsService.getInventoryOpeningBalance(request, companyid, startDate, companyMaxDateProductPriceList, inventoryOpeningBalanceDate);
                    JSONArray jarr = jObjX.getJSONArray(Constants.RES_data);
                    for (int i = 0; i < jarr.length(); i++) {
                        invOpeBal += jarr.getJSONObject(i).getDouble("valuation");
                    }
                    jObjX = new JSONObject();
                    
                    jObjX = accReportsService.getInventoryOpeningBalance(request, companyid, endDate, companyMaxDateProductPriceList, inventoryOpeningBalanceDate);
                    jarr = jObjX.getJSONArray(Constants.RES_data);
                    for (int i = 0; i < jarr.length(); i++) {
                        JSONObject productJson = jarr.getJSONObject(i);
                        invCloseBal += productJson.getDouble("valuation");
                        if (productJson.has("productTypeID") && productJson.getString("productTypeID").equals(Producttype.ASSEMBLY)) {
                            assemblyValuation += productJson.getDouble("valuation");
                        }
                    }

                    objlast = new JSONObject();
                    objlast.put("accountname", messageSource.getMessage("acc.report.13", null, RequestContextUtils.getLocale(request)));
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", true);
                    objlast.put("leaf", true);
                    objlast.put("amount", invOpeBal);
                    objlast.put("fmt", "H");
                    jArrL.put(objlast);
                }
            }

            dtotal = getMonthlyTrading(request, Group.NATURE_EXPENSES, jArrL);
            ctotal = getMonthlyTrading(request, Group.NATURE_INCOME, jArrR);

            dtotal += invOpeBal;
            ctotal -= invCloseBal;

            if (!"CostCenter".equalsIgnoreCase(reportView) && StringUtil.isNullOrEmpty(costCenterId)) { //Don't show Opening/Closing Stock for any Cost-Center
                JSONObject obj = new JSONObject();
                if (stockValuationFlag) {
                    if (invCloseBal + assemblyValuation > 0) { //Show details if Closing_Stock > 0
                        obj.put("accountname", messageSource.getMessage("acc.report.17", null, RequestContextUtils.getLocale(request)));  //"Closing Stock");
                        obj.put("accountid", "");
                        obj.put("level", 0);
                        obj.put("isdebit", false);
                        obj.put("leaf", false);
                        obj.put("amount", "");
                        jArrR.put(obj);

                        obj = new JSONObject();
                        obj.put("accountname", messageSource.getMessage("acc.report.14", null, RequestContextUtils.getLocale(request)));  // "Finish Products (Total Value of \"Inventory Assembly\" products)");
                        obj.put("accountid", "");
                        obj.put("level", 1);
                        obj.put("isdebit", false);
                        obj.put("leaf", true);
                        obj.put("amount", assemblyValuation);
                        jArrR.put(obj);

                        obj = new JSONObject();
                        obj.put("accountname", messageSource.getMessage("acc.report.15", null, RequestContextUtils.getLocale(request)));  //"Raw Materials (Total Value of \"Inventory Item\" products)");
                        obj.put("accountid", "");
                        obj.put("level", 1);
                        obj.put("isdebit", false);
                        obj.put("leaf", true);
                        obj.put("amount", invCloseBal - assemblyValuation);
                        jArrR.put(obj);

                        obj = new JSONObject();
                        obj.put("accountname", messageSource.getMessage("acc.report.16", null, RequestContextUtils.getLocale(request)));  //"Total Closing Stock");
                        obj.put("accountid", "");
                        obj.put("level", 0);
                        obj.put("isdebit", false);
                        obj.put("leaf", true);
                        obj.put("amount", invCloseBal);
                        objlast.put("fmt", "H");
                        jArrR.put(obj);
                    } else { // Show single line if Closing_Stock = 0
                        obj = new JSONObject();
                        obj.put("accountname", messageSource.getMessage("acc.report.17", null, RequestContextUtils.getLocale(request)));  // "Closing Stock");
                        obj.put("accountid", "");
                        obj.put("level", 0);
                        obj.put("isdebit", false);
                        obj.put("leaf", true);
                        obj.put("amount", invCloseBal);
                        obj.put("fmt", "H");
                        jArrR.put(obj);
                    }
                }
            }

            if (!"CostCenter".equalsIgnoreCase(reportView)) {//Don't Adjust report layout for cost center report
                int len = jArrL.length() - jArrR.length(); //Adjust report layout by equaling no. of rows
                JSONArray jArr = jArrR;
                if (len < 0) {
                    len = -len;
                    jArr = jArrL;
                }
                for (int i = 0; i < len; i++) {
                    jArr.put(new JSONObject());
                }
            }

            double balance = dtotal + ctotal;
            if (!"CostCenter".equalsIgnoreCase(reportView)) {//Don't show GrossLoss,GrossProfit for cost center report
                if (balance > 0) {
                    objlast = new JSONObject();
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", false);
                    objlast.put("leaf", true);
                    objlast.put("accountname", messageSource.getMessage("acc.report.5", null, RequestContextUtils.getLocale(request)));  //"Gross Loss");
                    objlast.put("amount", balance);
                    objlast.put("fmt", "B");
                    jArrR.put(objlast);
                    jArrL.put(new JSONObject());
                    ctotal -= balance;
                }
                if (balance < 0) {
                    objlast = new JSONObject();
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", true);
                    objlast.put("leaf", true);
                    objlast.put("accountname", messageSource.getMessage("acc.report.6", null, RequestContextUtils.getLocale(request)));  //"Gross Profit");
                    objlast.put("amount", balance == 0 ? balance : -balance);//Remove '-' sign if 0
                    objlast.put("fmt", "B");
                    jArrL.put(objlast);
                    jArrR.put(new JSONObject());
                    dtotal -= balance;
                }
                objlast = new JSONObject();
                objlast.put("accountname", messageSource.getMessage("acc.report.7", null, RequestContextUtils.getLocale(request)));  //"Total Debit");
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", true);
                objlast.put("leaf", true);
                objlast.put("amount", dtotal);
                objlast.put("fmt", "T");
                jArrL.put(objlast);
                objlast = new JSONObject();
                objlast.put("accountname", messageSource.getMessage("acc.report.8", null, RequestContextUtils.getLocale(request)));  //"Total Credit");
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("amount", ctotal == 0 ? ctotal : -ctotal);//Remove '-' sign if 0
                objlast.put("fmt", "T");
                jArrR.put(objlast);

                objlast = new JSONObject();
                objlast.put("accountname", messageSource.getMessage("acc.report.2", null, RequestContextUtils.getLocale(request)));  //"Particulars");
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", true);
                objlast.put("leaf", true);
                objlast.put("amount", "<div align=right>" + messageSource.getMessage("acc.report.3", null, RequestContextUtils.getLocale(request)) + "</div>");   //Amount (Debit)
                objlast.put("fmt", "H");
                jArrL.put(objlast);
                objlast = new JSONObject();
                objlast.put("accountname", messageSource.getMessage("acc.report.2", null, RequestContextUtils.getLocale(request)));  //"Particulars");
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("amount", "<div align=right>" + messageSource.getMessage("acc.report.4", null, RequestContextUtils.getLocale(request)) + "</div>");       //Amount (Credit)
                objlast.put("fmt", "H");
                jArrR.put(objlast);
                dtotal = 0;
                ctotal = 0;
                if (balance > 0) {
                    objlast = new JSONObject();
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", true);
                    objlast.put("leaf", true);
                    objlast.put("accountname", messageSource.getMessage("acc.report.5", null, RequestContextUtils.getLocale(request)));  //"Gross Loss");
                    objlast.put("amount", balance);
                    objlast.put("fmt", "B");
                    jArrL.put(objlast);
                    dtotal = balance;
                }
                if (balance < 0) {
                    objlast = new JSONObject();
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", false);
                    objlast.put("leaf", true);
                    objlast.put("accountname", messageSource.getMessage("acc.report.6", null, RequestContextUtils.getLocale(request)));  //"Gross Profit");
                    objlast.put("amount", balance == 0 ? balance : -balance);//Remove '-' sign if 0
                    objlast.put("fmt", "B");
                    jArrR.put(objlast);
                    ctotal = balance;
                }
            }

            dtotal += getMonthlyProfitLoss(request, Group.NATURE_EXPENSES, jArrL);
            ctotal += getMonthlyProfitLoss(request, Group.NATURE_INCOME, jArrR);

            if (!"CostCenter".equalsIgnoreCase(reportView)) { //Don't show NetLoss,NetProfit for cost center report
                balance = dtotal + ctotal;
                if (balance > 0) {
                    objlast = new JSONObject();
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", false);
                    objlast.put("leaf", true);
                    objlast.put("accountname", messageSource.getMessage("acc.report.9", null, RequestContextUtils.getLocale(request)));  //"Net Loss");
                    objlast.put("amount", balance);
                    objlast.put("fmt", "B");
                    jArrR.put(objlast);
                    ctotal -= balance;
                }
                if (balance < 0) {
                    objlast = new JSONObject();
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", true);
                    objlast.put("leaf", true);
                    objlast.put("accountname", messageSource.getMessage("acc.report.10", null, RequestContextUtils.getLocale(request)));  //"Net Profit");
                    objlast.put("amount", balance == 0 ? balance : -balance);//Remove '-' sign if 0
                    objlast.put("fmt", "B");
                    jArrL.put(objlast);
                    dtotal -= balance;
                }
            }

            if ("CostCenter".equalsIgnoreCase(reportView)) { //Add LIABILITY for cost center report (Tax Amount)

                //Logic to get new OTHER_CURRENT_LIABILITIES group from old OTHER_CURRENT_LIABILITIES
                //To do - Need to test wheteher is working or not
                Group liab_group = accAccountDAOobj.getNewGroupFromOldId(Group.OTHER_CURRENT_LIABILITIES, companyid);
                if (liab_group != null) {
                    ctotal += formatGroupDetailsForMonthView(request, companyid, liab_group, startDate, endDate, 0, true, jArrR); //Bug Fixed #16746
                    liab_group.getName();
                }
                //  }
            }

            List<String> monthList = new ArrayList();

            // just a trick to include the last month as well
            if (!isOneMonth) {
                localEndDate = localEndDate.plus(Period.months(1));
            }

            while (localStartDate.isBefore(localEndDate)) {
                String monthName = localStartDate.toString("MMM yyyy");
                localStartDate = localStartDate.plus(Period.months(1));
                monthList.add(monthName);
            }
            monthList.add("Total");

            JSONObject monthArrayObject = new JSONObject();

            // the first object would be the months array
            JSONArray monthArray = new JSONArray();
            JSONObject monthObj;

            for (int i = 0; i < monthList.size(); i++) {
                monthObj = new JSONObject();
                monthObj.put("monthname", monthList.get(i));
                monthArray.put(monthObj);
            }

            monthArrayObject.put("months", monthArray);
            jArrR.put(monthArrayObject);
            jArrL.put(monthArrayObject);

            // subtotal for each monthly 'Total xxx' element
            double[] monthlyTotalAmountArr = new double[monthList.size()];

            // grand total for the whole period selected for each element with $$$ values
            double[] grandTotalAmountArr = new double[jArrL.length()];
            double[] monthlyNetProfitArr = new double[monthList.size()];

            JSONObject obj = null;
            for (int accountIndex = 0; accountIndex < jArrL.length() - 1; accountIndex++) {
                obj = jArrL.getJSONObject(accountIndex);

                if (obj.has("amount_0")) {
                    if (obj.getInt("level") == 0 && !obj.getString("accountname").startsWith("Total")) { // we don't want to show the amount for the group-level elements
                        for (int monthIndex = 0; monthIndex < monthList.size(); monthIndex++) {
                            obj.remove("amount_" + monthIndex);
                        }
                    } else if (!obj.getString("accountname").startsWith("Total")) {  // for sub-level elements and not the 'Total xxx' elements, we do the sum for each month          			
                        for (int monthIndex = 0; monthIndex < monthList.size() - 1; monthIndex++) {
                            double monthlyAccountAmount = obj.getDouble("amount_" + monthIndex);
                            monthlyTotalAmountArr[monthIndex] += monthlyAccountAmount;
                            grandTotalAmountArr[accountIndex] += monthlyAccountAmount;
                        }
                        obj.put("amount_" + (monthList.size() - 1), grandTotalAmountArr[accountIndex]);
                    } else { // we update the monthly total amount to the 'Total xxx' element

                        // we don't calc the last item which is the 'Total' element
                        for (int monthIndex = 0; monthIndex < monthList.size() - 1; monthIndex++) {
                            obj.put("amount_" + monthIndex, monthlyTotalAmountArr[monthIndex]);
                            grandTotalAmountArr[accountIndex] += monthlyTotalAmountArr[monthIndex];
                            monthlyNetProfitArr[monthIndex] += monthlyTotalAmountArr[monthIndex];
                        }
                        if (!messageSource.getMessage("acc.report.15", null, RequestContextUtils.getLocale(request)).equalsIgnoreCase(obj.getString("accountname")) && // Raw Materials
                                !messageSource.getMessage("acc.report.14", null, RequestContextUtils.getLocale(request)).equalsIgnoreCase(obj.getString("accountname"))) // Finish Products  	
                        {
                            obj.put("amount_" + (monthList.size() - 1), grandTotalAmountArr[accountIndex]);
                        }
                        monthlyNetProfitArr[monthList.size() - 1] += grandTotalAmountArr[accountIndex];
                        monthlyTotalAmountArr = new double[monthList.size()];
                    }
                }
            }

            monthlyTotalAmountArr = new double[monthList.size()];
            grandTotalAmountArr = new double[jArrR.length()];

            for (int accountIndex = 0; accountIndex < jArrR.length() - 1; accountIndex++) {
                obj = jArrR.getJSONObject(accountIndex);
                if (obj.has("amount_0")) {

                    if (obj.getInt("level") == 0 && !obj.getString("accountname").startsWith("Total")) {// we don't want to show the amount for the group-level elements
                        for (int j = 0; j < monthList.size(); j++) {
                            obj.remove("amount_" + j);
                        }
                    } else if (!obj.getString("accountname").startsWith("Total")) {   // for sub-level elements and not the 'Total xxx' elements, we do the sum for each          			
                        for (int monthIndex = 0; monthIndex < monthList.size() - 1; monthIndex++) {
                            double monthlyAccountAmount = obj.getDouble("amount_" + monthIndex);
                            monthlyTotalAmountArr[monthIndex] += monthlyAccountAmount;
                            grandTotalAmountArr[accountIndex] += monthlyAccountAmount;
                        }
                        obj.put("amount_" + (monthList.size() - 1), grandTotalAmountArr[accountIndex]);
                    } else {
                        for (int monthIndex = 0; monthIndex < monthList.size() - 1; monthIndex++) {
                            obj.put("amount_" + monthIndex, monthlyTotalAmountArr[monthIndex]);
                            grandTotalAmountArr[accountIndex] += monthlyTotalAmountArr[monthIndex];

                            monthlyNetProfitArr[monthIndex] += monthlyTotalAmountArr[monthIndex];
                        }
                        if (!messageSource.getMessage("acc.report.15", null, RequestContextUtils.getLocale(request)).equalsIgnoreCase(obj.getString("accountname")) && // Raw Materials
                                !messageSource.getMessage("acc.report.14", null, RequestContextUtils.getLocale(request)).equalsIgnoreCase(obj.getString("accountname"))) // Finish Products               	
                        {
                            obj.put("amount_" + (monthList.size() - 1), grandTotalAmountArr[accountIndex]);
                        }

                        monthlyNetProfitArr[monthList.size() - 1] += grandTotalAmountArr[accountIndex];
                        monthlyTotalAmountArr = new double[monthList.size()];
                    }
                }
            }

            obj = jArrL.getJSONObject(jArrL.length() - 1);
            // update Net Profit element
            for (int monthIndex = 0; monthIndex < monthList.size(); monthIndex++) {
                obj.put("amount_" + monthIndex, monthlyNetProfitArr[monthIndex]);
            }
            obj.remove("amount");

            JSONObject fobj = new JSONObject();
            fobj.put("left", jArrL);
            fobj.put("right", jArrR);
            fobj.put("total", new JSONArray("[" + dtotal + "," + (ctotal == 0 ? ctotal : -ctotal) + "]"));
            JSONArray array = new JSONArray();
            array.put(fobj);
            jobj.put(Constants.RES_data, array);
        } catch (ParseException ex) {
            ex.printStackTrace();
            throw ServiceException.FAILURE("getMonthlyTradingAndProfitLoss : " + ex.getMessage(), ex);
        } catch (JSONException e) {
            e.printStackTrace();
            throw ServiceException.FAILURE("getMonthlyTradingAndProfitLoss : " + e.getMessage(), e);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jobj;
    }

    private double formatGroupDetailsForMonthView(HttpServletRequest request, String companyid, Group group, Date startDate, Date endDate, int level, boolean isBalanceSheet, JSONArray jArr) throws ServiceException, SessionExpiredException, ParseException {
        double totalAmount = 0;
        boolean isDebit = false;
        try {
            if (isBalanceSheet) {
                if (group.getNature() == Group.NATURE_LIABILITY) {
                    isDebit = true;
                }
            } else if (group.getNature() == Group.NATURE_EXPENSES) {
                isDebit = true;
            }
            Set<Group> children = group.getChildren();
            JSONArray chArr = new JSONArray();
            HashMap<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put(Constants.companyKey, companyid);
            filterParams.put("groupid", group.getID());
            filterParams.put("parent", null);
            KwlReturnObject accresult = accAccountDAOobj.getAccountEntry(filterParams);
            List<Account> list = accresult.getEntityList();
            DateFormat sdf = authHandler.getDateOnlyFormat();
            for(Account account : list) {
                totalAmount += formatAccountDetailsForMonthView(request, account, startDate, endDate, level + 1, isDebit, isBalanceSheet, chArr, sdf);
            }

            if (children != null && !children.isEmpty()) {
                for (Group child : children) {
                    totalAmount += formatGroupDetailsForMonthView(request, companyid, child, startDate, endDate, level + 1, isBalanceSheet, chArr);
                }
            }

            if (chArr.length() > 0) {
                JSONObject obj = new JSONObject();
                obj.put("accountname", group.getName());
                obj.put("accountid", group.getID());
                obj.put("level", level);
                obj.put("leaf", false);
                obj.put("amount", "");
                obj.put("isdebit", isDebit);
                obj.put("acctype", (group.getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                obj.put("group", (group.getID().toString().equals("15")) ? "income" : ((group.getID().toString().equals("8")) ? "expense" : ""));
                jArr.put(obj);
                for (int i = 0; i < chArr.length(); i++) {
                    jArr.put(chArr.getJSONObject(i));
                }

                obj = new JSONObject();
                obj.put("accountname", "Total " + group.getName());
                obj.put("accountid", group.getID());
                obj.put("level", level);
                obj.put("leaf", true);
                obj.put("show", true);
                obj.put("acctype", (group.getNature() == Group.NATURE_EXPENSES) ? "expense" : "income");
                obj.put("group", (group.getID().toString().equals("15")) ? "income" : ((group.getID().toString().equals("8")) ? "expense" : ""));
                double ta = totalAmount;
                if (!isDebit) {
                    ta = -ta;
                }
                if (isBalanceSheet) {
                    ta = -ta;
                }
                obj.put("amount", ta);
                obj.put("isdebit", isDebit);
                jArr.put(obj);
            }
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("formatGroupDetails : " + ex.getMessage(), ex);
        }
        return totalAmount;
    }

    public double getLIFO(String productid, Date endDate, double onhand, boolean isLifo) throws ServiceException {
        try {
            double lifo = 0;
            int rateCount = 0;
            double soldQty = 0;
            List<Double> qty = new ArrayList();
            List<Double> rate = new ArrayList();
            KwlReturnObject initialQty, initialPurchasePrice, qtyfrominv, qtyPrice;
            initialQty = accProductObj.getInitialQuantity(productid);
            if (initialQty.getEntityList().get(0) != null) {
                initialPurchasePrice = accProductObj.getInitialCost(productid);
                if (initialPurchasePrice.getEntityList().get(0) != null) {
                    qty.add(Double.parseDouble(initialQty.getEntityList().get(0).toString()));
                    rate.add(Double.parseDouble(initialPurchasePrice.getEntityList().get(0).toString()));
                }
            }
            qtyfrominv = accProductObj.getQtyandUnitCost(productid, endDate);
            Iterator qtyRateIterator = qtyfrominv.getEntityList().iterator();
            while (qtyRateIterator.hasNext()) {
                Object[] row = (Object[]) qtyRateIterator.next();
                qty.add(Double.parseDouble(row[0] == null ? "0" : row[0].toString()));
                qtyPrice = accProductObj.getProductPrice(productid, true, (Date) row[1], "", "");
                if (qtyPrice.getEntityList().get(0) == null) {
                    qtyPrice = accProductObj.getInitialPrice(productid, true);
                }
                rate.add(Double.parseDouble(qtyPrice.getEntityList().get(0).toString()));
            }

            for (int i = 0; i < qty.size(); i++) {
                soldQty = soldQty + qty.get(i);
            }
            soldQty = ((int) (soldQty - onhand));
            if (isLifo) {
                while (soldQty > 0) {
                    soldQty = soldQty - qty.get(rateCount++);
                    if (soldQty <= 0) {
                        qty.set(rateCount - 1, (double) (-soldQty));
                    } else {
                        qty.set(rateCount - 1, 0.0);
                    }
                }
            } else {
                rateCount = qty.size() - 1;
                while (soldQty > 0) {
                    soldQty = soldQty - qty.get(rateCount--);
                    if (soldQty <= 0) {
                        qty.set(rateCount + 1, (double) (-soldQty));
                    } else {
                        qty.set(rateCount + 1, 0.0);
                    }
                }
            }
            for (int i = 0; i < qty.size(); i++) {
                lifo = lifo + (qty.get(i) * rate.get(i));
            }
            return lifo;
        } catch (Exception ex) {
            System.out.print(ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }

    public ModelAndView getRatioAnalysis(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getRatioAnalysis(request);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getRatioAnalysisJSON(JSONObject jobj, String currencyid, String companyid) {
        JSONObject retObj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            jobj = jobj.getJSONObject(Constants.RES_data);
            JSONArray rightObjArr = jobj.getJSONArray("right");
            JSONArray leftObjArr = jobj.getJSONArray("left");
            int length = leftObjArr.length() > rightObjArr.length() ? leftObjArr.length() : rightObjArr.length();
            for (int i = 0; i < length; i++) {
                JSONObject tempObj = new JSONObject();
                if (i < leftObjArr.length() && !leftObjArr.getJSONObject(i).toString().equalsIgnoreCase("{}")) {
                    JSONObject leftObj = leftObjArr.getJSONObject(i);
                    String name = "";
                    String format = leftObj.has("fmt") ? leftObj.get("fmt").toString() : "";
                    String value = formatValue(leftObj.get("value").toString(), format, currencyid, companyid);
                    if (leftObj.has("desc")) {
                        name = leftObj.get("name").toString() + " " + leftObj.get("desc").toString();
                    } else {
                        name = leftObj.get("name").toString();
                    }
                    tempObj.put("lname", name);
                    tempObj.put("lvalue", value);
                    tempObj.put("lfmt", format);
                } else {
                    tempObj.put("lname", "");
                    tempObj.put("lvalue", "");
                    tempObj.put("lfmt", "");
                }
                if (i < rightObjArr.length() && !rightObjArr.getJSONObject(i).toString().equalsIgnoreCase("{}")) {
                    JSONObject rightObj = rightObjArr.getJSONObject(i);
                    String name = "";
                    String format = rightObj.has("fmt") ? rightObj.get("fmt").toString() : "";
                    String value = formatValue(rightObj.get("value").toString(), format, currencyid, companyid);

                    if (rightObj.has("desc")) {
                        name = rightObj.get("name").toString() + rightObj.get("desc").toString();
                    } else {
                        name = rightObj.get("name").toString();
                    }
                    tempObj.put("rname", name);
                    tempObj.put("rvalue", value);
                    tempObj.put("rfmt", format);
                } else {
                    tempObj.put("rname", "");
                    tempObj.put("rvalue", "");
                    tempObj.put("rfmt", "");
                }
                jArr.put(tempObj);
            }
            retObj.put(Constants.RES_data, jArr);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return retObj;
    }

    public ModelAndView exportRatioAnalysis(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            jobj = getRatioAnalysisJSON(getRatioAnalysis(request), currencyid, companyid);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                if (StringUtil.equal(fileType, "csv")) {
                    exportDaoObj.processRequest(request, response, jobj);
                } else if (StringUtil.equal(fileType, "xls")) {
                    exportDaoObj.processRequest(request, response, jobj);
                } else {
                    String logoPath = ProfileImageServlet.getProfileImagePath(request, true, null);
                    java.io.ByteArrayOutputStream baos = null;
                    String filename = request.getParameter("filename") + "_v1";
                    String comName = sessionHandlerImpl.getCompanyName(request);
                    baos = ExportrecordObj.exportRatioAnalysis(request, jobj, logoPath, comName);
                    if (baos != null) {
                        ExportrecordObj.writeDataToFile(filename + "." + fileType, baos, response);
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public String formatValue(String value, String format, String currencyid, String companyid) {
        String result = "";
        try {
            double no = Double.parseDouble(value);
            String val = "";
            if (format.equals("CD") || format.equals("total") || format.equals("cash") || format.equals("export")) {
                if (no > 0) {
                    val = authHandlerDAO.getFormattedCurrency(no, currencyid, companyid);
                    val = val + " Dr";
                } else if (no < 0) {
                    val = authHandlerDAO.getFormattedCurrency((-no), currencyid, companyid);
                    val = val + " Cr";
                } else {
                    val = authHandler.formattedAmount(no, companyid);  //To show zero amount in 0.00## format
                }
            } else if (format.equals("RAT")) {
                java.text.DecimalFormat obj = new java.text.DecimalFormat("#,##0.00");
                val = obj.format(no) + " : 1";
            } else if (format.equals("PER")) {
                java.text.DecimalFormat obj = new java.text.DecimalFormat("#,##0.00");
                val = obj.format(no) + " %";
            } else if (format.equals("DAY")) {
                java.text.DecimalFormat obj = new java.text.DecimalFormat("#,##0.00");
                val = obj.format(no) + " days";
            } else {
                java.text.DecimalFormat obj = new java.text.DecimalFormat("#,##0.00");
                val = obj.format(no) + "";
            }
            result = val;
        } catch (Exception ex) {
        }
        return result;
    }

    public JSONObject getRatioAnalysis(HttpServletRequest request) throws ServiceException {
        JSONObject jobj = new JSONObject();
        try {
            JSONArray jArrL = new JSONArray();
            JSONArray jArrR = new JSONArray();
            JSONObject obj;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            
            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
            companyPriceListParams.put("isPurchase", true);
            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(companyid, companyPriceListParams);
            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
            
            Date inventoryOpeningBalanceDate = null;
            KwlReturnObject rtObj = accProductObj.getInventoryOpeningBalanceDate(companyid);
            List<Date> lst = rtObj.getEntityList();
            for (Date dateObj : lst) {
                inventoryOpeningBalanceDate = dateObj;
            }
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) curresult.getEntityList().get(0);
            JSONObject bobj = accReportsService.getBalanceSheet(request);
            double curAsset = getGroupsAmount(bobj, new String[]{Group.CURRENT_ASSETS, Group.BANK_ACCOUNT, Group.ACCOUNTS_RECEIVABLE, Group.OTHER_ASSETS, Group.OTHER_CURRENT_ASSETS}, "right");
            double curLiability = getGroupsAmount(bobj, new String[]{Group.ACCOUNTS_PAYABLE, Group.CREDIT_CARD, Group.OTHER_CURRENT_LIABILITIES, Group.BILLS_PAYABLE}, "left");
            
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            double cash = accReportsService.getAccountBalance(paramJobj, preferences.getCashAccount().getID(), null, endDate,null);
            
            double bank = getGroupsAmount(bobj, new String[]{Group.BANK_ACCOUNT}, "right");
            double sc = getGroupsAmount(bobj, new String[]{Group.ACCOUNTS_PAYABLE, Group.BILLS_PAYABLE}, "left");
            double sd = getGroupsAmount(bobj, new String[]{Group.ACCOUNTS_RECEIVABLE}, "right");
            double capital = getGroupsAmount(bobj, new String[]{Group.EQUITY}, "left");
            double clStock = 0;
            JSONArray jarr = accReportsService.getInventoryOpeningBalance(request, companyid, endDate, companyMaxDateProductPriceList, inventoryOpeningBalanceDate).getJSONArray(Constants.RES_data);//getProValuation(session, request,startDate,endDate);
            if (jarr.length() > 0) {
                JSONObject jobj1 = jarr.getJSONObject(0);
                clStock = jobj1.has("valuation") ? jobj1.getDouble("valuation") : 0;
            }
            curAsset += clStock;
            double netprofit = getProfit(bobj, "Net", request);
            bobj = accFinancialReportsService.getTradingAndProfitLoss(paramJobj);
            double sale = getGroupsAmount(bobj, new String[]{Group.INCOME}, "right");
            double purchase = getGroupsAmount(bobj, new String[]{Group.COST_OF_GOODS_SOLD}, "left");
            double grossprofit = getProfit(bobj, "Gross", request);
            double wrkCap = curAsset - curLiability;
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.22", null, RequestContextUtils.getLocale(request)));  //"Working Capital");
            obj.put("desc", messageSource.getMessage("acc.report.23", null, RequestContextUtils.getLocale(request)));  //"(Current Assets - Current Liabilities)");
            obj.put("value", wrkCap);
            obj.put("fmt", "CD");
            jArrL.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.24", null, RequestContextUtils.getLocale(request)));  //"Cash-in-hand");
            obj.put("value", cash);
            obj.put("fmt", "CD");
            jArrL.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.25", null, RequestContextUtils.getLocale(request)));  //"Bank Accounts");
            obj.put("value", bank);
            obj.put("fmt", "CD");
            jArrL.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.26", null, RequestContextUtils.getLocale(request)));  //"Sundry Debtors");
            obj.put("desc", messageSource.getMessage("acc.report.27", null, RequestContextUtils.getLocale(request)));  //"(due till today)");
            obj.put("value", sd);
            obj.put("fmt", "CD");
            jArrL.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.28", null, RequestContextUtils.getLocale(request)));  //"Sundry Creditors");
            obj.put("desc", messageSource.getMessage("acc.report.27", null, RequestContextUtils.getLocale(request)));  //"(due till today)");
            obj.put("value", -sc);
            obj.put("fmt", "CD");
            jArrL.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.29", null, RequestContextUtils.getLocale(request)));  //"Sales Accounts");
            obj.put("value", -sale);
            obj.put("fmt", "CD");
            jArrL.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.30", null, RequestContextUtils.getLocale(request)));  //"Purchase Accounts");
            obj.put("value", purchase);
            obj.put("fmt", "CD");
            jArrL.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.31", null, RequestContextUtils.getLocale(request)));  //"Stock-in-hand");
            obj.put("value", clStock);
            obj.put("fmt", "CD");
            jArrL.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.32", null, RequestContextUtils.getLocale(request)));  //"Net Profit/Loss");
            obj.put("value", netprofit);
            obj.put("fmt", "CD");
            jArrL.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.33", null, RequestContextUtils.getLocale(request)));  //"Wkg. Capital Turnover");
            obj.put("desc", messageSource.getMessage("acc.report.34", null, RequestContextUtils.getLocale(request)));  //"(Sales Accounts / Working Capital)");
            obj.put("value", (Math.abs(wrkCap) > 0.001 ? sale / wrkCap : "N/A"));
            jArrL.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.35", null, RequestContextUtils.getLocale(request)));  //"Inventory Turnover");
            obj.put("desc", messageSource.getMessage("acc.report.36", null, RequestContextUtils.getLocale(request)));  //"(Sales Accounts / Closing Stock)");
            obj.put("value", (Math.abs(clStock) > 0.001 ? sale / clStock : "N/A"));
            jArrL.put(obj);

            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.37", null, RequestContextUtils.getLocale(request)));  //"Current Ratio");
            obj.put("desc", messageSource.getMessage("acc.report.38", null, RequestContextUtils.getLocale(request)));  //"(Current Assets : Current Liabilities)");
            obj.put("value", (Math.abs(curLiability) > 0.001 ? curAsset / curLiability : "N/A"));
            obj.put("fmt", "RAT");
            jArrR.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.39", null, RequestContextUtils.getLocale(request)));  //"Quick Ratio");
            obj.put("desc", messageSource.getMessage("acc.report.40", null, RequestContextUtils.getLocale(request)));  //"(Current Assets - Stock-in-hand : Current Liabilities)");
            obj.put("value", (Math.abs(curLiability) > 0.001 ? (curAsset - clStock) / curLiability : "N/A"));
            obj.put("fmt", "RAT");
            jArrR.put(obj);

            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.41", null, RequestContextUtils.getLocale(request)));  //"Gross Profit %");
            obj.put("value", (Math.abs(sale) > 0.001 ? grossprofit * 100 / sale : "N/A"));
            obj.put("fmt", "PER");
            jArrR.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.42", null, RequestContextUtils.getLocale(request)));  //"Net Profit %");
            obj.put("value", (Math.abs(sale) > 0.001 ? netprofit * 100 / sale : "N/A"));
            obj.put("fmt", "PER");
            jArrR.put(obj);

            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.43", null, RequestContextUtils.getLocale(request)));  //"Return on Investment %");
            obj.put("desc", messageSource.getMessage("acc.report.44", null, RequestContextUtils.getLocale(request)));  //"(Net Profit / (Capital Account + Net Profit) ) %");
            obj.put("value", (Math.abs(capital + netprofit) > 0.001 ? netprofit * 100 / (capital + netprofit) : "N/A"));
            obj.put("fmt", "PER");
            jArrR.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.67", null, RequestContextUtils.getLocale(request)));
            obj.put("desc", messageSource.getMessage("acc.report.68", null, RequestContextUtils.getLocale(request)));
            obj.put("value", (Math.abs(wrkCap) > 0.001 ? netprofit * 100 / wrkCap : "N/A"));
            obj.put("fmt", "PER");
            jArrR.put(obj);
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.69", null, RequestContextUtils.getLocale(request)));
            obj.put("desc", messageSource.getMessage("acc.report.70", null, RequestContextUtils.getLocale(request)));
            obj.put("value", (Math.abs(sale) > 0.001 ? wrkCap / sale : "N/A"));
            obj.put("fmt", "RAT");
            jArrR.put(obj);

            JSONObject fobj = new JSONObject();
            fobj.put("left", jArrL);
            fobj.put("right", jArrR);
            jobj.put(Constants.RES_data, fobj);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getRatioAnalysis : " + ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE("getRatioAnalysis : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getRatioAnalysis : " + ex.getMessage(), ex);
        }
        return jobj;
    }

    private double getGroupsAmount(JSONObject jobj, String[] groupids, String side) {
        double val = 0;
        try {
            JSONArray jArr = jobj.getJSONObject(Constants.RES_data).getJSONArray(side);
            JSONObject obj;
            String gids = ":" + StringUtil.join(":", groupids) + ":";
            for (int i = 0; i < jArr.length(); i++) {
                obj = jArr.getJSONObject(i);
                if (obj.getInt("level") == 0 && gids.indexOf(":" + obj.getString("accountid") + ":") >= 0 && obj.getString("accountname").startsWith("Total ")) {
                    val += obj.getDouble("amount");
                }
            }
        } catch (JSONException ex) {
        }
        return val;
    }

    private double getProfit(JSONObject jobj, String type, HttpServletRequest request) {
        double val = 0;
        String profit = messageSource.getMessage("acc.report.10", null, RequestContextUtils.getLocale(request));
        String loss = messageSource.getMessage("acc.report.9", null, RequestContextUtils.getLocale(request));
        if (type.equals("Gross")) {
            profit = messageSource.getMessage("acc.report.6", null, RequestContextUtils.getLocale(request));
            loss = messageSource.getMessage("acc.report.5", null, RequestContextUtils.getLocale(request));
        }
        try {
            JSONArray jArr = jobj.getJSONObject(Constants.RES_data).getJSONArray("left");
            JSONObject obj;
            for (int i = 0; i < jArr.length(); i++) {
                obj = jArr.getJSONObject(i);
                if (obj.has("level")) {
                    if (obj.getInt("level") == 0 && StringUtil.isNullOrEmpty(obj.getString("accountid")) && obj.getString("accountname").startsWith(profit)) {
                        val += obj.getDouble("amount");
                        break;
                    }
                }
            }
            if (val == 0.0) {
                jArr = jobj.getJSONObject(Constants.RES_data).getJSONArray("right");
                for (int i = 0; i < jArr.length(); i++) {
                    obj = jArr.getJSONObject(i);
                    if (obj.has("level")) {
                        if (obj.getInt("level") == 0 && StringUtil.isNullOrEmpty(obj.getString("accountid")) && obj.getString("accountname").startsWith(loss)) {
                            val -= obj.getDouble("amount");
                            break;
                        }
                    }
                }
            }
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return val;
    }


    public ModelAndView exportMonthlyRevenue(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            jobj = getMonthlyRevenue(request, true);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public double getNoteAmount(String invId) throws ServiceException {
        double amount = 0;
        try {
        } catch (Exception ex) {
            ex.printStackTrace();
            throw ServiceException.FAILURE("getNoteAmount : " + ex.getMessage(), ex);
        }
        return amount;
    }



    public ModelAndView getUsersByProducts(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            JSONObject obj1 = getUsersByProducts(request);
            JSONArray jarr = obj1.getJSONArray("jArr");
            jobj.put(Constants.RES_data, jarr);
            jobj.put(Constants.RES_count, obj1.getInt(Constants.RES_count));
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getUsersByProducts(HttpServletRequest request) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        JSONObject jArr1 = new JSONObject();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("productid", request.getParameter("productid"));
            requestParams.put("isTopCustomers", request.getParameter("isTopCustomers"));
            requestParams.put("isCustomer", request.getParameter("isCustomer"));
            requestParams.put("startdate", request.getParameter("startdate"));
            requestParams.put("enddate", request.getParameter("enddate"));
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));
            requestParams.put("nondeleted", "true");
            boolean isCustomer = Boolean.parseBoolean((String) request.getParameter("isCustomer"));
            int type = Integer.parseInt(request.getParameter("type"));
            KwlReturnObject result;
            if (type == 0) {
                result = accInvoiceDAOobj.getUsersByProducts(requestParams);
            } else {
                result = accInvoiceDAOobj.getUsersByProductRevenue(requestParams);
            }
            Iterator itr1 = result.getEntityList().iterator();
            int count1 = result.getRecordTotalCount();
            while (itr1.hasNext()) {
                Object[] oj = (Object[]) itr1.next();
                String custid = oj[0].toString();
                String name = "", id = "";
                if (isCustomer) {
                    String customerName = "", customerId = "";
                    KwlReturnObject customer = accountingHandlerDAOobj.getObject(Customer.class.getName(), custid);
                    if (customer != null && customer.getEntityList() != null && customer.getEntityList().get(0) != null) {
                        List<Customer> cl = customer.getEntityList();
                        customerName = cl.get(0).getName();
                        customerId = cl.get(0).getID();
                    }
                    name = customerName;
                    id = customerId;
                }

                if (!isCustomer) {
                    String vendorName = "", vendorId = "";
                    KwlReturnObject vendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), custid);
                    if (vendor != null && vendor.getEntityList() != null && vendor.getEntityList().get(0) != null) {
                        List<Vendor> vl = vendor.getEntityList();
                        vendorName = vl.get(0).getName();
                        vendorId = vl.get(0).getID();
                    }
                    name = vendorName;
                    id = vendorId;
                }
                JSONObject obj = new JSONObject();
                obj.put("custname", name);
                obj.put("custid", id);
                obj.put("isCustomer", isCustomer);

                if (type == 0) {
                    double count = Double.parseDouble(oj[1].toString());
                    obj.put("quantity", count);
                } else {
                    double amount = Double.parseDouble(oj[2].toString());
                    obj.put("quantity", authHandler.round(amount, companyid));
                }
                jArr.put(obj);
            }
            jArr1.put("jArr", jArr);
            jArr1.put(Constants.RES_count, count1);
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE("getUsersByProducts : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getUsersByProducts : " + ex.getMessage(), ex);
        }
        return jArr1;
    }

    public ModelAndView getReports(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        JSONArray jarr = new JSONArray();
        try {
                jarr = getReports(request);
            if (jarr.length() > 0) {
                jobj.put(Constants.RES_data, jarr);
                jobj.put(Constants.RES_count, jarr.getJSONObject(0).get(Constants.RES_count));
                issuccess = true;
            } else {
                jobj.put(Constants.RES_data, jarr);
                jobj.put(Constants.RES_count, jarr.length());
                issuccess = true;
            }
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
  
    public JSONArray getReports(HttpServletRequest request) throws ServiceException, ParseException, JSONException, SessionExpiredException {
         JSONArray jArr = new JSONArray();
        KwlReturnObject result;
        int check = 0;
        String id = "";
        String name = "";
        String desc = "";
        String methodName = "";
        String groupedunder = "";
        boolean isAddedToWidget = false;
        boolean isWidgetReady = false;
        /*
         * Flag variable sets to true when the report retrived from table 
         * is having favourate property true and vice-versa
        */
        boolean isFavourite = false;
        String companyId = sessionHandlerImpl.getCompanyid(request);
        try {
            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
            Company company = (Company) companyObj.getEntityList().get(0);
            int countryid = !StringUtil.isNullOrEmpty(company.getCountry().getID())?Integer.parseInt(company.getCountry().getID()):0; 
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));
            requestParams.put("userid", request.getParameter("userid"));
            requestParams.put("typeid", request.getParameter("typeid"));
            requestParams.put("isCustomWidgetReport", request.getParameter("isCustomWidgetReport"));
            requestParams.put("ss", request.getParameter("ss"));
            requestParams.put("countryid", countryid);
            requestParams.put(Constants.companyKey, company.getCompanyID());
            String subdomain = company.getSubDomain();
           
            ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyId);
            extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;

            boolean isActivateDeliveryPlanner = extraCompanyPreferences != null ? extraCompanyPreferences.isDeliveryPlanner() : false;
            requestParams.put("isactivatedeliveryplanner", isActivateDeliveryPlanner);
            requestParams.put("countryid", countryid);
            requestParams.put("isactivateprofitmargin", extraCompanyPreferences.isActivateProfitMargin());
            requestParams.put("isactivatecheckincheckout", extraCompanyPreferences.isAllowCustomerCheckInCheckOut());
             if ((storageHandlerImpl.VHQPOSTSubdomains().toString().indexOf(subdomain) == -1)) {// show Cash Flow Statement as per COA Report only for vhqpostmy company
                requestParams.put("isvhqsubdomain", true);
            }
            result = accInvoiceDAOobj.getReports(requestParams);
            Iterator iter = result.getEntityList().iterator();         
            while (iter.hasNext()) {
                Object[] oj = (Object[]) iter.next();
                String productid = oj[0].toString();
                KwlReturnObject reportM = accountingHandlerDAOobj.getObject(ReportMaster.class.getName(), productid);
                List<ReportMaster> prd = reportM.getEntityList();
                id = prd.get(0).getID();
                name = prd.get(0).getName();
                desc = prd.get(0).getDescription();
                methodName = prd.get(0).getMethodName();
                groupedunder = prd.get(0).getGroupedUnder();
                isWidgetReady = prd.get(0).isIsWidgetReady();
                isAddedToWidget = oj[3].equals(1)? true:false;             
                JSONObject obj = new JSONObject();
                if (check == 0) {
                    obj.put(Constants.RES_count, result.getRecordTotalCount());
                    check = 1;
                }
               

                if (id.equalsIgnoreCase("Export IAF Text File") && company.getCountry().getID().equals("137")) {
                    obj.put("id", id);
                    obj.put("name", "Export GAF Text File");
                    obj.put("description", "Export GAF Text File");
                    obj.put("methodName", methodName);
                    obj.put("addtowidget", isAddedToWidget);
                    obj.put("iswidgetready", isWidgetReady);
                } else {
                    obj.put("id", id);
                    obj.put("name", name);
                    obj.put("description", desc);
                    obj.put("methodName", methodName);
                    obj.put("groupedunder", groupedunder);
                    obj.put("addtowidget", isAddedToWidget);
                    obj.put("iswidgetready", isWidgetReady);
                }
                obj.put("isdefault",prd.get(0).isIsdefault());
                obj.put("moduleid",prd.get(0).getModuleid());
                /*
                 * Checks the favourite property of the report and sets accordingly
                 in JSON object
                 */
                 if(oj[4] != null){
                    isFavourite = oj[4].equals('T')? true:false;
                    obj.put("isfavourite", isFavourite);
                }
               
                jArr.put(obj);
            }

            if (storageHandlerImpl.SMSCompanyIds() != null && (storageHandlerImpl.SMSCompanyIds().toString()).indexOf(companyId) != -1) {// show RCNReport Only for SMS
                JSONObject obj = new JSONObject();
                obj.put("id", "RCN Report");
                obj.put("name", "RCN Report");
                obj.put("description", "View RCN Report");
                obj.put("methodName", "callRCNReport()");
                jArr.put(obj);
            }
            
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE("getReports : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getReports : " + ex.getMessage(), ex);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getReports : " + ex.getMessage(), ex);
        }
        return jArr;    
}

    public ModelAndView getReportPerm(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        JSONArray jarr = new JSONArray();
        try {
            jarr = getReportPerm(request);
            jobj.put(Constants.RES_data, jarr);
            jobj.put(Constants.RES_count, jarr.length());
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONArray getReportPerm(HttpServletRequest request) throws ServiceException, ParseException, JSONException {
        JSONArray jArr = new JSONArray();
        KwlReturnObject result;
        int check = 0;
        String Reportid = "";
        String Roleid = "";
        String GroupName = "";
        String UserName = "";
        String companyid = "";
        String userid = "";
        String ReportName = "";
        String fname = "";
        String lname = "";
        try {
            companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("reportid", request.getParameter("reportid"));
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));
            result = accInvoiceDAOobj.getReportPerm(requestParams);

            Iterator iter = result.getEntityList().iterator();
            while (iter.hasNext()) {
                Object[] oj = (Object[]) iter.next();
                String productid = oj[0].toString();
                KwlReturnObject reportM = accountingHandlerDAOobj.getObject(ReportRoleMap.class.getName(), productid);
                List<ReportRoleMap> prd = reportM.getEntityList();
                ReportName = (prd.get(0).getReportid().getName()).toString();
                Reportid = (prd.get(0).getReportid().getID()).toString();
                Roleid = (prd.get(0).getRoleid().getRoleid()).toString();
                GroupName = prd.get(0).getRoleid().getRolename();
                UserName = prd.get(0).getUserid().getUserLogin().getUserName();
                userid = prd.get(0).getUserid().getUserID();
                fname = prd.get(0).getUserid().getFirstName();
                lname = prd.get(0).getUserid().getLastName();
                JSONObject obj = new JSONObject();
                if (check == 0) {
                    obj.put(Constants.RES_count, result.getRecordTotalCount());
                    check = 1;
                }
                obj.put("ReportID", Reportid);
                obj.put("RoleID", Roleid);
                obj.put("GroupName", GroupName);
                obj.put("UserName", UserName);
                obj.put("userID", userid);
                obj.put("ReportName", ReportName);
                obj.put("UseFirst", fname + " " + lname);
                obj.put("UseLast", lname);
                jArr.put(obj);
            }

        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE("getRole : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getRole : " + ex.getMessage(), ex);
        }
        return jArr;
    }
     
    public ModelAndView getUserForCombo(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        JSONArray jarr = new JSONArray();
        try {
            jarr = getUserForCombo(request);
            jobj.put(Constants.RES_data, jarr);
            jobj.put(Constants.RES_count, 3);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONArray getUserForCombo(HttpServletRequest request) throws ServiceException, ParseException, JSONException {
        JSONArray jArr = new JSONArray();
        KwlReturnObject result;
        String Reportid = "";
        String Roleid = "";
        String companyid = "";
        try {
            companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("groupid", request.getParameter("groupid"));
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put("reportid", request.getParameter("reportid"));
            result = accInvoiceDAOobj.getUserForCombo(requestParams);

            Iterator iter = result.getEntityList().iterator();
            while (iter.hasNext()) {
                Object[] oj = (Object[]) iter.next();
                String productid = oj[0].toString();
                KwlReturnObject reportM = accountingHandlerDAOobj.getObject(User.class.getName(), productid);
                List<User> prd = reportM.getEntityList();

                Reportid = (prd.get(0).getUserLogin().getUserID()).toString();
                Roleid = (prd.get(0).getUserLogin().getUserName()).toString();
                JSONObject obj = new JSONObject();
                obj.put("userID", Reportid);
                obj.put("UserName", Roleid);
                jArr.put(obj);
            }
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE("getUserForCombo : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getUserForCombo : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public ModelAndView AssignUserPerm(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        String success;
        try {
            success = AssignUserPerm(request);
            jobj.put(Constants.RES_data, success);
            jobj.put(Constants.RES_count, 3);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    private String AssignUserPerm(HttpServletRequest request) throws ServiceException, ParseException, JSONException {
        KwlReturnObject result;
        String success = "Record save successfully";
        String companyid = "";
        try {
            companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            String userId = request.getParameter("userid");
            if (userId.equalsIgnoreCase("All")) {       //for giving the functionality to select all users
                userId = "";
                JSONArray jSONArray = getUserForCombo(request);
                if (jSONArray.length() == 0){ ///for checkin no user contion
                    return success;
                }

                for (int i = 0; i < jSONArray.length(); i++) {
                    userId += jSONArray.getJSONObject(i).getString("userID");
                    userId += ",";
                }
            }
            requestParams.put("reportid", request.getParameter("reportid"));
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put("roleid", request.getParameter("roleid"));
            requestParams.put("userid", userId);
            requestParams.put("loginid", sessionHandlerImpl.getUserid(request));
            /*
            Check for permission of user if already set for specific report 
            */
            boolean isused=accInvoiceDAOobj.checkUserPermissionForReport(requestParams);            
            String remoteAddress = !StringUtil.isNullOrEmpty(request.getRemoteAddr()) ? request.getRemoteAddr() : Constants.defaultIp;
            String loginid = sessionHandlerImpl.getUserid(request);
            if (!isused) {
            result = accInvoiceDAOobj.AssignUserPerm(requestParams);
            if (!StringUtil.isNullObject(result)) {
                List list = result.getEntityList();
                for (Object list1 : list) {
                    if (list1 instanceof List) {
                        List<JSONObject> auditLogJson = (List<JSONObject>) list1;
                        for (JSONObject jobj : auditLogJson) {
                            Map<String, Object> auditTrailParamMap = new HashMap<String, Object>();
                            auditTrailParamMap.put("remoteAddress", remoteAddress);
                            if (!StringUtil.isNullOrEmpty(loginid)) {
                                auditTrailParamMap.put("userid", loginid);
                            } else {
                                auditTrailParamMap.put("userid", userId);
                            }
                            String str = "User " + jobj.getString("loginUserName") + " have assigned permission to User " + jobj.getString("userName") + " with Role " + jobj.getString("roleName") + " for Report " + jobj.getString("reportName");
                            auditTrailObj.insertAuditLog(AuditAction.SETROLE_PERMISSION, str, auditTrailParamMap, jobj.getString("reportID"));
                        }
                    }
                }
            }
            }
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE("AssignUserPerm : " + ex.getMessage(), ex);
        }
        return success;
    }

    public ModelAndView DeleteUserPerm(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        String success;
        try {
            success = DeleteUserPerm(request);
            jobj.put(Constants.RES_data, success);
            jobj.put(Constants.RES_count, 3);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    private String DeleteUserPerm(HttpServletRequest request) throws ServiceException, ParseException {
        JSONObject response = new JSONObject();
        String success = "Record Delete successfully";
        String companyid = "";
        try {
            companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("reportid", request.getParameter("reportid"));
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put("roleid", request.getParameter("roleid"));
            requestParams.put("userid", request.getParameter("userid"));
            requestParams.put("loginid", sessionHandlerImpl.getUserid(request));
            response = accInvoiceDAOobj.DeleteUserPerm(requestParams);
            
            JSONObject auditLogJson = response.has("auditLogJson") ? (JSONObject)response.get("auditLogJson") : null;
            if(null != auditLogJson){
                Map<String, Object> auditTrailParamMap = new HashMap<String, Object>();
                auditTrailParamMap.put("remoteAddress", !StringUtil.isNullOrEmpty(request.getRemoteAddr()) ? request.getRemoteAddr() : Constants.defaultIp);
                auditTrailParamMap.put("userid", sessionHandlerImpl.getUserid(request));
                String str = "User " + auditLogJson.getString("loginUserName") + " have revoked permission to User " + auditLogJson.getString("userName") + " with Role " + auditLogJson.getString("roleName") + " for Report " + auditLogJson.getString("reportName");
                auditTrailObj.insertAuditLog(AuditAction.SETROLE_PERMISSION, str, auditTrailParamMap, auditLogJson.getString("reportID"));
            }

        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE("DeleteUserPerm : " + ex.getMessage(), ex);
        } catch (JSONException jex){
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, jex);
        }
        return success;
    }

    public ModelAndView AssignAmendingPrice(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        String companyid = "";
        String success = "";
        KwlReturnObject result;
        try {
            companyid = sessionHandlerImpl.getCompanyid(request);
            boolean CInvoice = request.getParameter("CInvoice") != null ? Boolean.parseBoolean(request.getParameter("CInvoice")) : false;
            boolean VInvoice = request.getParameter("VInvoice") != null ? Boolean.parseBoolean(request.getParameter("VInvoice")) : false;
            boolean SalesOrder = request.getParameter("SalesOrder") != null ? Boolean.parseBoolean(request.getParameter("SalesOrder")) : false;
            boolean PurchaseOrder = request.getParameter("PurchaseOrder") != null ? Boolean.parseBoolean(request.getParameter("PurchaseOrder")) : false;
            boolean VendorQuotation = request.getParameter("VendorQuotation") != null ? Boolean.parseBoolean(request.getParameter("VendorQuotation")) : false;
            boolean CustomerQuotation = request.getParameter("CustomerQuotation") != null ? Boolean.parseBoolean(request.getParameter("CustomerQuotation")) : false;
            boolean BlockAmendingPrice = request.getParameter("BlockAmendingPrice") != null ? Boolean.parseBoolean(request.getParameter("BlockAmendingPrice")) : false;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("CInvoice", CInvoice);
            requestParams.put("VInvoice", VInvoice);
            requestParams.put("SalesOrder", SalesOrder);
            requestParams.put("PurchaseOrder", PurchaseOrder);
            requestParams.put("VendorQuotation", VendorQuotation);
            requestParams.put("CustomerQuotation", CustomerQuotation);
            requestParams.put("BlockAmendingPrice", BlockAmendingPrice);
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put("userid", request.getParameter("userid"));

            result = accInvoiceDAOobj.AssignAmendingPrice(requestParams);
            jobj.put(Constants.RES_data, success);
            jobj.put(Constants.RES_count, result.getRecordTotalCount());
            issuccess = true;
            StringBuffer action = new StringBuffer();
            if (CInvoice == true) {
                action.append("CI/CS,");
            }
            if (VInvoice == true) {
                action.append("VI/CP,");
            }
            if (SalesOrder == true) {
                action.append("SO,");
            }
            if (PurchaseOrder == true) {
                action.append("PO,");
            }
            if (VendorQuotation == true) {
                action.append("VQ,");
            }
            if (CustomerQuotation == true) {
                action.append("CQ,");
            }
            action.deleteCharAt(action.length() - 1);
            auditTrailObj.insertAuditLog(AuditAction.AMEND_PRICE_REMOVED, "User " + sessionHandlerImpl.getUserFullName(request) + " has removed Amend price setting for module " + action, request, "12");
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView savePermissionsforFilteringReportsData(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        String companyid = "";
        String success = "";
        KwlReturnObject result;
        try {
            companyid = sessionHandlerImpl.getCompanyid(request);
            boolean customerInvoiceCheck = request.getParameter("customerInvoiceCheck") != null ? Boolean.parseBoolean(request.getParameter("customerInvoiceCheck")) : false;
            boolean salesOrderCheck = request.getParameter("salesOrderCheck") != null ? Boolean.parseBoolean(request.getParameter("salesOrderCheck")) : false;
            boolean customerQuotationCheck = request.getParameter("customerQuotationCheck") != null ? Boolean.parseBoolean(request.getParameter("customerQuotationCheck")) : false;
             boolean deliveryOrderCheck = request.getParameter("deliveryOrderCheck") != null ? Boolean.parseBoolean(request.getParameter("deliveryOrderCheck")) : false;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("customerInvoiceCheck", customerInvoiceCheck);
            requestParams.put("salesOrderCheck", salesOrderCheck);
            requestParams.put("customerQuotationCheck", customerQuotationCheck);
            requestParams.put("deliveryOrderCheck", deliveryOrderCheck);

            requestParams.put(Constants.companyKey, companyid);
            requestParams.put("userid", request.getParameter("userid"));

            result = accInvoiceDAOobj.savePermissionsforFilteringReportsData(requestParams);
            jobj.put(Constants.RES_data, success);
            jobj.put(Constants.RES_count, result.getRecordTotalCount());
            issuccess = true;
          auditTrailObj.insertAuditLog(AuditAction.PERMISSIONS_TO_VIEW_RECORDS, "User " + sessionHandlerImpl.getUserFullName(request) + " has updated Permissions to view Record(s) ",request,"262");
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView GetUserAmendingPrice(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        String companyid = "";
        JSONArray jarr = new JSONArray();
        JSONObject AmendingJSON = new JSONObject();
        try {
            companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put("userid", request.getParameter("userid"));

            AmendingJSON = accInvoiceDAOobj.GetUserAmendingPrice(requestParams);
            jarr.put(AmendingJSON);
            jobj.put(Constants.RES_data, jarr);
            jobj.put(Constants.RES_count, jarr.length());

            issuccess = true;
            if (AmendingJSON.toString().equals("{}")) {
                issuccess = false;
            }
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getPermissionsforFilteringReportsData(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        String companyid = "";
        JSONArray jarr = new JSONArray();
        JSONObject permissionsForFilteringDataJSON = new JSONObject();
        try {
            companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put("userid", request.getParameter("userid"));

            permissionsForFilteringDataJSON = accInvoiceDAOobj.getPermissionsforFilteringReportsData(requestParams);
            jarr.put(permissionsForFilteringDataJSON);
            jobj.put(Constants.RES_data, jarr);
            jobj.put(Constants.RES_count, jarr.length());
            issuccess = true;
            if (permissionsForFilteringDataJSON.toString().equals("{}")) {
                issuccess = false;
            }
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getProductsByUsers(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            JSONObject obj1 = getProductsByUsers(request);
            JSONArray jarr = obj1.getJSONArray("jArr");
            jobj.put(Constants.RES_data, jarr);
            jobj.put(Constants.RES_count, obj1.getInt(Constants.RES_count));
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getProductsByUsers(HttpServletRequest request) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        JSONObject jArr1 = new JSONObject();
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("accid", request.getParameter("accid"));
            requestParams.put("isTopCustomers", request.getParameter("isTopCustomers"));
            requestParams.put("isProduct", request.getParameter("isProduct"));
            requestParams.put("startdate", request.getParameter("startdate"));
            requestParams.put("enddate", request.getParameter("enddate"));

            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            int type = Integer.parseInt(request.getParameter("type"));     
            KwlReturnObject result;
            if (type == 0) {
                result = accInvoiceDAOobj.getProductsByUsers(requestParams);
            } else {
                result = accInvoiceDAOobj.getProductRevenueByUsers(requestParams);
            }

            Iterator itr1 = result.getEntityList().iterator();
            int count1 = result.getRecordTotalCount();
            while (itr1.hasNext()) {
                Object[] oj = (Object[]) itr1.next();
                String productid = oj[0].toString();
                String productName = "", productId = "";
                KwlReturnObject product = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
                if (product != null && product.getEntityList() != null && product.getEntityList().get(0) != null) {
                    List<Product> prd = product.getEntityList();
                    productName = prd.get(0).getName();
                    productId = prd.get(0).getID();
                }
                JSONObject obj = new JSONObject();
                obj.put("productname", productName);
                obj.put("productid", productId);

                if (type == 0) {
                    double count = Double.parseDouble(oj[1].toString());
                    obj.put("quantity", count);
                } else {
                    double amount = Double.parseDouble(oj[2].toString());
                    obj.put("quantity", authHandler.round(amount, companyid));
                }
                jArr.put(obj);
            }
            jArr1.put("jArr", jArr);
            jArr1.put(Constants.RES_count, count1);
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE("getProductsByUsers : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getProductsByUsers : " + ex.getMessage(), ex);
        }
        return jArr1;
    }

    public ModelAndView exportCalculatedTax(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray jArr = getCalculatedTax(request);
            String fileType = request.getParameter("filetype");
            jobj.put(Constants.RES_data, jArr);
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                if (StringUtil.equal(fileType, "csv")) {
                    exportDaoObj.processRequest(request, response, jobj);
                } else {
                    exportDaoObj.processRequest(request, response, jobj);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getCalculatedTax(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        String msg = "";
        boolean issuccess = false;
        try {
            jArr = getCalculatedTax(request);
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter(Constants.limit);
            JSONArray jArr1 = new JSONArray();
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                int st = Integer.parseInt(start);
                int ed = Math.min(jArr.length(), st + Integer.parseInt(limit));
                for (int i = st; i < ed; i++) {
                    jArr1.put(jArr.getJSONObject(i));
                }
            }
            jobj.put(Constants.RES_data, jArr1);
            jobj.put(Constants.RES_count, jArr.length());
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONArray getCalculatedTax(HttpServletRequest request) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            requestParams.put("companyid", companyid);
            requestParams.put("ss", request.getParameter("ss"));
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), (String) requestParams.get(Constants.companyKey));
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            String cashAccount = pref.getCashAccount().getID();
            requestParams.put("cashaccountid", cashAccount);
            boolean isSalesTax = Boolean.parseBoolean(request.getParameter("issales"));
            requestParams.put("isSalesTax", isSalesTax);
            boolean isForTaxReport=!StringUtil.isNullOrEmpty(request.getParameter("isForTaxReport"))?Boolean.parseBoolean(request.getParameter("isForTaxReport")):false;
            requestParams.put(Constants.isForTaxReport,isForTaxReport);
            
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
            }
                
            KwlReturnObject result = accTaxObj.getCalculatedTax((Map) requestParams);
            List list = result.getEntityList();
            if (request.getParameter("enddate") != null && request.getParameter("stdate") != null) {
                Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
                Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
                requestParams.put("startDate", startDate);
                requestParams.put("endDate", endDate);
            }
            String fileType = "pdf";
            if (isSalesTax) {
//                jArr = getCalculatedSalesTax(requestParams, list);
                jArr = getCalculatedSalesTaxMerged(requestParams, list, fileType);
            } else {
//                jArr = getCalculatedPurchaseTax(requestParams, list);
                jArr = getCalculatedPurchaseTaxMerged(requestParams, list, fileType);
            }
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public JSONArray getCalculatedSalesTax(HashMap<String, Object> requestParams, List taxList) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        JSONArray invjArr = new JSONArray();
        JSONObject sales = new JSONObject();
        try {
            Iterator itr = taxList.iterator();
            String searchJson ="";
            String filterConjuctionCriteria ="";
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                requestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                filterConjuctionCriteria = (String) requestParams.get(Constants.Filter_Criteria);
                searchJson = accReportsService.getSearchJsonByModule(requestParams);
            }
            
            while (itr.hasNext()) {
                invjArr = new JSONArray();
                Object[] row = (Object[]) itr.next();
                Tax taxObj = (Tax) row[0];
                TaxList taxListObj = (TaxList) row[1];
                Map<String, Object> filterParams = new HashMap<String, Object>();
                filterParams.put("taxid", taxObj.getID());
                if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
                    filterParams.put("startDate", requestParams.get("startDate"));
                    filterParams.put("endDate", requestParams.get("endDate"));
                }
                if(!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)){
                    filterParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, searchJson);
                    filterParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                }
                KwlReturnObject result = accInvoiceDAOobj.getCalculatedInvTax(filterParams);
                Iterator ite1 = result.getEntityList().iterator();
                double saleAmount = 0;
                double taxableAmount = 0;
                double taxCollected = 0;
                while (ite1.hasNext()) {
                    double taxPercent = 0;
                    double invAmtDue = 0;
                    Invoice temp = (Invoice) ite1.next();
                    double invSalesAmt = (Double) (temp.getCustomerEntry() == null ? 0 : temp.getCustomerEntry().getAmount()); //Calculating total sales in customer currency     [PS]
                    double invTaxAmt = (Double) (temp.getTaxamountinbase());
//                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    invSalesAmt = (Double) bAmt.getEntityList().get(0);
                    if (temp.getTax() != null) {
//                        KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getJournalEntry().getEntryDate(), temp.getTax().getID());
                        KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getCreationDate(), temp.getTax().getID());
                        taxPercent = (Double) perresult.getEntityList().get(0);
                    }
                    saleAmount += invSalesAmt;//505*100=(100+p)x
//                    taxableAmount += (invSalesAmt - (invSalesAmt * 100) / (100 + taxPercent));
                    taxableAmount += invTaxAmt;
                    if (!temp.getCustomerEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
                        invAmtDue = accInvoiceCommon.getAmountDue(requestParams, temp);
                    }
                    if (invAmtDue == 0) {
//                        taxCollected += (invSalesAmt - (invSalesAmt * 100) / (100 + taxPercent));
                        taxCollected += invTaxAmt;
                    }

                    sales = new JSONObject();
//                    sales.put("invdate", temp.getJournalEntry().getEntryDate().getTime());
                    sales.put("invdate", temp.getCreationDate().getTime());
                    sales.put("invname", temp.getCustomer().getName());
                    sales.put("invno", temp.getInvoiceNumber());
                    sales.put("invamt", invSalesAmt);
                    sales.put("invtaxamount", invTaxAmt);
                    invjArr.put(sales);
                }

                result = accInvoiceDAOobj.getCalculatedInvDtlTax(filterParams);
                List<InvoiceDetail> list = result.getEntityList();
                if (list != null) {
                    for (InvoiceDetail temp : list) {
                        double quantity;
                        double rowTaxPercent = 0;
                        double rowTaxAmount = 0;
                        boolean isRowTaxApplicable = false;
                        double invAmtDue = 0;
                        double ramount = 0;
                        quantity = temp.getInventory().getQuantity();
                       // ramount = temp.getRate() * quantity;
                          ramount=temp.getRowExcludingGstAmountInBase();
                        double rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                        //ramount -= rdisc;
                        //Converting row amount in base   [PS]
                        //KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        //ramount = (Double) bAmt.getEntityList().get(0);
                        //Calculating tax on base row amount [PS]
                        if (temp.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getInvoice().getJournalEntry().getEntryDate(), temp.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getInvoice().getCreationDate(), temp.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                            isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                        }
                        if (temp.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                            if (isRowTaxApplicable) {
                                rowTaxAmount = temp.getRowTaxAmount() + temp.getRowTermTaxAmount();
//                                KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());
                                KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getCreationDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());
                                rowTaxAmount = (Double) baseAmt.getEntityList().get(0);
                            }
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmount = ramount * rowTaxPercent / 100;
                        }

                        taxableAmount += rowTaxAmount;//taxableAmount+=ramount*rowTaxPercent/100;
                        if (!temp.getInvoice().getCustomerEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
                            invAmtDue = accInvoiceCommon.getAmountDue(requestParams, temp.getInvoice());
                        }
                        if (invAmtDue == 0) {
                            taxCollected += rowTaxAmount;//taxCollected+=ramount*rowTaxPercent/100;
                        }

                        double invoiceAmount = 0d;
                        if (temp.getInvoice().getTax() == null) {
                            invoiceAmount = ramount + (rowTaxAmount);
                            saleAmount += ramount;
                            saleAmount += rowTaxAmount;
                        } else {
                            invoiceAmount = 0.0;
                        }

                        sales = new JSONObject();
//                        sales.put("invdate", temp.getInvoice().getJournalEntry().getEntryDate().getTime());
                        sales.put("invdate", temp.getInvoice().getCreationDate().getTime());
                        sales.put("invname", temp.getInvoice().getCustomer().getName());
                        sales.put("invno", temp.getInvoice().getInvoiceNumber());
                        sales.put("invamt", invoiceAmount);//sales.put("invamt", ramount + (ramount*rowTaxPercent/100));
                        sales.put("invtaxamount", rowTaxAmount);//sales.put("invtaxamount", (ramount*rowTaxPercent/100));
                        invjArr.put(sales);
                    }
                }
                /**
                 * *******************************Without Inventory
                 * Data*******************************
                 */
                JSONObject obj = new JSONObject();
                obj.put("taxname", taxObj.getName());
                obj.put("taxcode", taxObj.getTaxCode());
                obj.put("totalsale", saleAmount);//sales including tax[PS]
                obj.put("taxrate", taxListObj.getPercent());
                obj.put("taxamount", taxableAmount);
                obj.put("taxcollected", taxCollected);  //taxamount of all thoose invoices whose amount due is 0[PS]
                obj.put("taxpayable", taxableAmount - taxCollected);
                obj.put("details", invjArr);
                jArr.put(obj);
            }
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
        } catch (SessionExpiredException | UnsupportedEncodingException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }

    public JSONArray getCalculatedPurchaseTax(Map<String, Object> requestParams, List taxList) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        JSONArray grjArr = new JSONArray();
        JSONObject purchases = new JSONObject();
        try {
            Iterator itr = taxList.iterator();
            String companyid = (String) requestParams.get("companyid");
            String searchJson = "";
            String filterConjuctionCriteria = "";
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                requestParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                filterConjuctionCriteria = (String) requestParams.get(Constants.Filter_Criteria);
                searchJson = accReportsService.getSearchJsonByModule((HashMap<String, Object>) requestParams);
            }
            while (itr.hasNext()) {
                grjArr = new JSONArray();
                Object[] row = (Object[]) itr.next();
                Tax taxObj = (Tax) row[0];
                TaxList taxListObj = (TaxList) row[1];
                Map<String, Object> filterParams = new HashMap<String, Object>();
                filterParams.put("taxid", taxObj.getID());
                if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
                    filterParams.put("startDate", requestParams.get("startDate"));
                    filterParams.put("endDate", requestParams.get("endDate"));
                }
                if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Vendor_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, searchJson);
                    filterParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                }
                KwlReturnObject result = accGoodsReceiptDAOObj.getCalculatedGRTax(filterParams);
                List<GoodsReceipt> list = result.getEntityList();
                double saleAmount = 0;
                double taxableAmount = 0;
                double taxCollected = 0;

                //Cal Tax for whole GR[PS]
                if (list != null) {
                    for (GoodsReceipt temp : list) {
                        double taxPercent = 0;
                        double invSalesAmt = (Double) (temp.getVendorEntry() == null ? 0 : temp.getVendorEntry().getAmount()); //Calculating total sales in customer currency     [PS]
                        double invTaxAmt = (Double) (temp.getTaxamountinbase());
//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        invSalesAmt = (Double) bAmt.getEntityList().get(0);
                        if (temp.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getJournalEntry().getEntryDate(), temp.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getCreationDate(), temp.getTax().getID());
                            taxPercent = (Double) perresult.getEntityList().get(0);
                        }
                        saleAmount += invSalesAmt;//505*100=(100+p)x
//                        taxableAmount += (invSalesAmt - (invSalesAmt * 100) / (100 + taxPercent));
                        taxableAmount += invTaxAmt;
                        double invAmtDue = 0;
                        if (!temp.getVendorEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
                            List amtList;
                            if (temp.isIsExpenseType()) {
                                amtList = accGoodsReceiptCommon.getExpGRAmountDue(requestParams, temp);
                            } else {
                                if (Constants.InvoiceAmountDueFlag) {
                                    amtList = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(requestParams, temp);
                                } else {
                                    amtList = accGoodsReceiptCommon.getGRAmountDue(requestParams, temp);
                                }
                            }
                            if (!amtList.isEmpty() && amtList != null) {
                                invAmtDue = (Double) amtList.get(1);
                            }
                        }
                        if (invAmtDue == 0) {
//                            taxCollected += (invSalesAmt - (invSalesAmt * 100) / (100 + taxPercent));
                            taxCollected += invTaxAmt;
                        }

                        purchases = new JSONObject();
//                        purchases.put("grdate", temp.getJournalEntry().getEntryDate().getTime());
                        purchases.put("grdate", temp.getCreationDate().getTime());
                        purchases.put("grname", temp.getVendor().getName());
                        purchases.put("grno", temp.getGoodsReceiptNumber());
                        purchases.put("gramt", invSalesAmt);
                        purchases.put("grtaxamount", invTaxAmt);
                        grjArr.put(purchases);
                    }
                }

                //Cal Tax for GR Details[PS]
                result = accGoodsReceiptDAOObj.getCalculatedGRDtlTax(filterParams);
                List<GoodsReceiptDetail> GRList = result.getEntityList();
                if (GRList != null) {
                    for (GoodsReceiptDetail temp : GRList) {
                        double quantity;
                        double rowTaxPercent = 0;
                        double rowTaxAmount = 0;
                        boolean isRowTaxApplicable = false;
                        double ramount = 0;
                        quantity = temp.getInventory().getQuantity();
                        //ramount = authHandler.round(temp.getRate()* quantity, companyid);
                        ramount=temp.getRowExcludingGstAmountInBase();
                        double rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                        //ramount -= rdisc;
                       
//Converting row amount in base   [PS]
//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        ramount = (Double) bAmt.getEntityList().get(0);
//Calculating tax on base row amount [PS]
                        if (temp.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getCreationDate(), temp.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                            isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                        }
                        if (temp.isWasRowTaxFieldEditable() && isRowTaxApplicable) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
//                            if (isRowTaxApplicable) {
                                rowTaxAmount = temp.getRowTaxAmount() + temp.getRowTermTaxAmount();
//                                KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                rowTaxAmount = (Double) baseAmt.getEntityList().get(0);
//                            }
                        } else if(temp.getTax() != null && temp.getGoodsReceipt().isGstIncluded()){
                            rowTaxAmount = temp.getRowTaxAmount();
//                            KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                            rowTaxAmount = (Double) baseAmt.getEntityList().get(0);
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmount = ramount * rowTaxPercent / 100;
                        }

                        taxableAmount += rowTaxAmount;//taxableAmount+=ramount*rowTaxPercent/100;
                        double invAmtDue = 0;
                        if (!temp.getGoodsReceipt().getVendorEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
                            List amtList;
                            if (Constants.InvoiceAmountDueFlag) {
                                amtList = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(requestParams, temp.getGoodsReceipt());
                            } else {
                                amtList = accGoodsReceiptCommon.getGRAmountDue(requestParams, temp.getGoodsReceipt());
                            }
                            if (!amtList.isEmpty() && amtList != null) {
                                invAmtDue = (Double) amtList.get(1);
                            }
                        }
                        if (invAmtDue == 0) {
                            taxCollected += rowTaxAmount;//taxCollected+=ramount*rowTaxPercent/100;
                        }

                        double invoiceAmount = 0d;
                        if (temp.getGoodsReceipt().getTax() == null) {
                            invoiceAmount = ramount + (rowTaxAmount);
                            saleAmount += ramount;
                            saleAmount += rowTaxAmount;
                        } else {
                            invoiceAmount = 0.0;
                        }

                        purchases = new JSONObject();
//                        purchases.put("grdate", temp.getGoodsReceipt().getJournalEntry().getEntryDate().getTime());
                        purchases.put("grdate", temp.getGoodsReceipt().getCreationDate().getTime());
                        purchases.put("grname", temp.getGoodsReceipt().getVendor().getName());
                        purchases.put("grno", temp.getGoodsReceipt().getGoodsReceiptNumber());
                        purchases.put("gramt", invoiceAmount);//purchases.put("gramt", (ramount+ramount*rowTaxPercent/100));
                        purchases.put("grtaxamount", (rowTaxAmount));//purchases.put("grtaxamount", (ramount*rowTaxPercent/100));
                        grjArr.put(purchases);
                    }
                }

                //Cal Tax for Expense GR Details[PS]
                result = accGoodsReceiptDAOObj.getCalculatedExpenseGRDtlTax(filterParams);
                List<ExpenseGRDetail> expList = result.getEntityList();
                if (expList != null) {
                    for (ExpenseGRDetail temp : expList) {
                        double rowTaxPercent = 0;
                        double ramount = 0;
                        double rowTaxAmount = 0;
                        boolean isRowTaxApplicable = false;
                        ramount = temp.getRate();
                        double rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                        ramount -= rdisc;
//Converting row amount in base   [PS]
//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        ramount = (Double) bAmt.getEntityList().get(0);
//Calculating tax on base row amount [PS]
                        if (temp.getGoodsReceipt().getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                            isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                        } else if (temp.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getCreationDate(), temp.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                        }
                        if (temp.isWasRowTaxFieldEditable() && isRowTaxApplicable) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
//                            if (isRowTaxApplicable) {
                                rowTaxAmount = temp.getRowTaxAmount();
//                                KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                rowTaxAmount = (Double) baseAmt.getEntityList().get(0);
//                            }
                        } else if (temp.getTax() != null && temp.getGoodsReceipt().isGstIncluded()) {
                            rowTaxAmount = temp.getRowTaxAmount();
//                            KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                            rowTaxAmount = (Double) baseAmt.getEntityList().get(0);
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmount = ramount * rowTaxPercent / 100;
                        }

                        taxableAmount += rowTaxAmount;//taxableAmount+=ramount*rowTaxPercent/100;
                        double invAmtDue = 0;
                        if (!temp.getGoodsReceipt().getVendorEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
                            List amtList;
                            amtList = accGoodsReceiptCommon.getExpGRAmountDue(requestParams, temp.getGoodsReceipt());
                            if (!amtList.isEmpty() && amtList != null) {
                                invAmtDue = (Double) amtList.get(1);
                            }
                        }
                        if (invAmtDue == 0) {
                            taxCollected += rowTaxAmount;//taxCollected+=ramount*rowTaxPercent/100;
                        }

                        double invoiceAmount = 0d;
                        if (temp.getGoodsReceipt().getTax() == null) {
                            if (temp.getGoodsReceipt().isGstIncluded()) {
                                invoiceAmount = ramount;
                                saleAmount += ramount;
                            } else {
                            invoiceAmount = ramount + (rowTaxAmount);
                            saleAmount += ramount;
                            saleAmount += rowTaxAmount;
                            }                            
                        } else {
                            invoiceAmount = 0.0;
                        }

                        purchases = new JSONObject();
//                        purchases.put("grdate", temp.getGoodsReceipt().getJournalEntry().getEntryDate().getTime());
                        purchases.put("grdate", temp.getGoodsReceipt().getCreationDate().getTime());
                        purchases.put("grname", temp.getGoodsReceipt().getVendor().getName());
                        purchases.put("grno", temp.getGoodsReceipt().getGoodsReceiptNumber());
                        purchases.put("gramt", invoiceAmount);//purchases.put("gramt", (ramount+ramount*rowTaxPercent/100));
                        purchases.put("grtaxamount", (rowTaxAmount));//purchases.put("grtaxamount", (ramount*rowTaxPercent/100));
                        grjArr.put(purchases);
                    }
                }

                JSONObject obj = new JSONObject();
                obj.put("taxname", taxObj.getName());
                obj.put("taxcode", taxObj.getTaxCode());
                obj.put("totalsale", saleAmount);//sales including tax[PS]
                obj.put("taxrate", taxListObj.getPercent());
                obj.put("taxamount", taxableAmount);
                obj.put("taxcollected", taxCollected);  //taxamount of all thoose invoices whose amount due is 0[PS]
                obj.put("taxpayable", taxableAmount - taxCollected);
                obj.put("details", grjArr);
                jArr.put(obj);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public ModelAndView getCostCenterSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        KwlReturnObject result = null;//ERP-13614 [SJ]
        String msg = "";
        boolean issuccess = false;
        try {
            JSONArray DataJArr = new JSONArray();
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter(Constants.REQ_startdate));
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter(Constants.REQ_enddate));
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            boolean eliminateflag = consolidateFlag;
            String start = request.getParameter(Constants.start);//ERP-13614 [SJ]
            String limit = request.getParameter(Constants.limit);
            String companyid = "";
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);

                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(companyid);
                requestParams.put(Constants.filterNamesKey, filter_names);
                requestParams.put(Constants.filterParamsKey, filter_params);

                if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) { //ERP-13614 [SJ]
                    requestParams.put(Constants.start, start);
                    requestParams.put(Constants.limit, limit);
                }

                result = accCostCenterObj.getCostCenter(requestParams);
                List<CostCenter> costCenters = result.getEntityList();

                //Logic to get new OTHER_CURRENT_LIABILITIES group from old OTHER_CURRENT_LIABILITIES
                //To do - Need to test wheteher is working or not
                Group liab_group = accAccountDAOobj.getNewGroupFromOldId(Group.OTHER_CURRENT_LIABILITIES, companyid);

                double debitAmount = 0, creditAmount = 0;
                if (costCenters != null && !costCenters.isEmpty()) {
                    for (CostCenter costCenter : costCenters) {
                        debitAmount = 0;
                        creditAmount = 0;
                        JSONObject obj = new JSONObject();
                        requestParams.put(CCConstants.REQ_costcenter, costCenter.getID());
                        debitAmount = getSummaryAmount(request, requestParams, Group.NATURE_EXPENSES, null, startDate, endDate, eliminateflag);
                        creditAmount = getSummaryAmount(request, requestParams, Group.NATURE_INCOME, null, startDate, endDate, eliminateflag);
                        if (liab_group != null) {//Calculate and Add liablities for credit amount
                            creditAmount += getSummaryAmount(request, requestParams, -1, liab_group.getID(), startDate, endDate, eliminateflag);
                        }
                        obj.put(CCConstants.JSON_costcenterid, costCenter.getID());
                        obj.put(CCConstants.JSON_costcenterName, costCenter.getName());
                        obj.put("debitAmount", debitAmount < 0 ? (debitAmount * -1) : debitAmount);//Show summary amount in positive
                        obj.put("creditAmount", creditAmount < 0 ? (creditAmount * -1) : creditAmount);//Show summary amount in positive
                        DataJArr.put(obj);
                    }
                }
            }
            jobj.put(Constants.RES_data, DataJArr);
            jobj.put(Constants.RES_count, result.getRecordTotalCount());  //ERP-13614 [SJ]         
            issuccess = true;
        } catch (Exception ex) {
            msg += ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, Constants.model, jobj.toString());
    }

    public double getSummaryAmount(HttpServletRequest request, HashMap<String, Object> requestParams, int groupNature, String groupId, Date startDate, Date endDate, boolean eliminateflag) throws ServiceException {
        double amount = 0;
        HashMap<String, Object> filterParams = new HashMap<String, Object>();
        List filter_names = new ArrayList(), filter_params = new ArrayList();
        filter_names.add("company.companyID");
        filter_params.add(requestParams.get(Constants.companyKey));
        filter_names.add("ISdeleted");
        filter_params.add(false);
        if (groupNature != -1) {
            filter_names.add("group.nature");
            filter_params.add(groupNature);
        }
        if (!StringUtil.isNullOrEmpty(groupId)) {
            filter_names.add("group.ID");
            filter_params.add(groupId);
        }
        filterParams.put("filter_names", filter_names);
        filterParams.put("filter_params", filter_params);
        KwlReturnObject result = accAccountDAOobj.getAccount(filterParams);
        List<Account> resultList = result.getEntityList();
        if (resultList != null && !resultList.isEmpty()) {
            for (Account account : resultList) {
                amount += accReportsService.getAccountBalanceMerged(request, requestParams, account.getID(), startDate, endDate, eliminateflag);
            }
        }
        return amount;
    }

    /**
     * @author Neeraj
     * @param request
     * @param response
     * @return
     */
    public ModelAndView getCashFlow(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String weeklyCashflow = request.getParameter("weeklyCashFlowReport");
            boolean weeklyCashFlow = !StringUtil.isNullOrEmpty(weeklyCashflow) ? Boolean.parseBoolean(weeklyCashflow) : false;
            if (weeklyCashFlow) {
                jobj = getWeeklyCashFlow(request);
            } else {
                jobj = getCashFlow(request);
            }
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getWeeklyCashFlow(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        try {
            JSONObject cash1Obj = null;
            JSONObject cash2Obj = null;
            JSONObject cash3Obj = null;
            JSONObject cash4Obj = null;

            JSONArray jarr = new JSONArray();
            JSONArray columnNames = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jMeta = new JSONObject();

            double cash1 = 0, cash2 = 0, cash3 = 0, cash4 = 0, cash5 = 0;
            boolean isfixedAsset = false, isreceiptPayment = false;
            String currencyid = request.getParameter(Constants.globalCurrencyKey) != null ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            KwlReturnObject currencyObj = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) currencyObj.getEntityList().get(0);

            String paymentType = request.getParameter("paymentType");
            String accountID = request.getParameter("accountID");
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat());

            DateFormat df = authHandler.getDateOnlyFormat();
            int intervals = request.getParameter("intervals") != null ? Integer.parseInt(request.getParameter("intervals")) : 4;
            int duration = 7;
            String curDateString = "";
            Date curDate = null;
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            curDateString = (String) request.getParameter(Constants.REQ_startdate);
            curDate = df.parse(curDateString);

            //first blank column 
            JSONObject firstBlankColumn = new JSONObject();
            firstBlankColumn.put("header", "sp");
            firstBlankColumn.put("dataindex", "sp");
            firstBlankColumn.put("width", 0);
            firstBlankColumn.put("pdfwidth", 0);
            firstBlankColumn.put("title", "sp");
            firstBlankColumn.put("align", "none");
            firstBlankColumn.put("value", "");
            firstBlankColumn.put("hidden", true);
            columnNames.put(firstBlankColumn);

            JSONObject firstBlankColumnrec = new JSONObject();
            firstBlankColumnrec.put("name", "sp");
            jarrRecords.put(firstBlankColumnrec);

            JSONObject particularsCol = new JSONObject();
            particularsCol.put("header", messageSource.getMessage("acc.report.2", null, RequestContextUtils.getLocale(request)));
            particularsCol.put("dataindex", "name");
            particularsCol.put("width", 330);
            particularsCol.put("pdfwidth", 120);
            particularsCol.put("title", "name");
            particularsCol.put("align", "none");
            columnNames.put(particularsCol);

            JSONObject jobjTemprec1 = new JSONObject();
            jobjTemprec1.put("name", "name");
            jarrRecords.put(jobjTemprec1);

            //"Operating Activities"
            JSONObject obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.45", null, RequestContextUtils.getLocale(request)));  //"Operating Activities");
            obj.put("desc", messageSource.getMessage("acc.report.46", null, RequestContextUtils.getLocale(request)));  //"Cash Flow from sale & purchase of Products & Services");
            obj.put("fmt", "title");
            jarr.put(obj);

            //cash sales
            if (paymentType.equalsIgnoreCase(Constants.CASH)) {
                cash1Obj = cashPurchaseOrSaleTotalAmount(request, false, paymentType, accountID, requestParams);
                cash1Obj.put("name", messageSource.getMessage("acc.report.47", null, RequestContextUtils.getLocale(request)));  //"Cash Sales");
                cash1Obj.put("desc", messageSource.getMessage("acc.report.48", null, RequestContextUtils.getLocale(request)));  //"Direct Cash Sales");
                cash1 = cash1Obj.getDouble("total");
                cash1Obj.put("value", cash1);
                jarr.put(cash1Obj);
            }

            //cash payment received from customer
            isfixedAsset = false;
            isreceiptPayment = true;
            cash2Obj = ReceiptOrPaymentTotalAmount(request, isreceiptPayment, paymentType, accountID, isfixedAsset, requestParams); //Normal receipt amount without Asset payment
            if (paymentType.equalsIgnoreCase(Constants.CASH)) {
                cash2Obj.put("name", messageSource.getMessage("acc.report.49", null, RequestContextUtils.getLocale(request)));  //"Cash Payment Received from Customers");
                cash2Obj.put("desc", messageSource.getMessage("acc.report.50", null, RequestContextUtils.getLocale(request)));  //"Customer Invoice Cash Payments");
            } else if (paymentType.equalsIgnoreCase(Constants.BANK)) {
                cash2Obj.put("name", messageSource.getMessage("acc.report.491", null, RequestContextUtils.getLocale(request)));  //"Payment Received from Customers");
                cash2Obj.put("desc", messageSource.getMessage("acc.report.501", null, RequestContextUtils.getLocale(request)));  //"Customer Invoice Bank Payments");
            }
            cash2 = cash2Obj.getDouble("total");
            cash2Obj.put("value", cash2);
            jarr.put(cash2Obj);

            //cash purchase
            if (paymentType.equalsIgnoreCase(Constants.CASH)) {
                cash3Obj = cashPurchaseOrSaleTotalAmount(request, true, paymentType, accountID, requestParams);
                cash3Obj.put("name", messageSource.getMessage("acc.report.51", null, RequestContextUtils.getLocale(request)));  //"Cash Purchases");
                cash3Obj.put("desc", messageSource.getMessage("acc.report.52", null, RequestContextUtils.getLocale(request)));  //"(Less) Direct Cash Purchases");
                cash3 = cash3Obj.getDouble("total");
                cash3Obj.put("value", cash3);
                jarr.put(cash3Obj);
            }

            //cash payment made to vendors.
            isfixedAsset = false;
            isreceiptPayment = false;
            cash4Obj = ReceiptOrPaymentTotalAmount(request, isreceiptPayment, paymentType, accountID, isfixedAsset, requestParams);//Normal payment amount without Asset receipt
            if (paymentType.equalsIgnoreCase(Constants.CASH)) {
                cash4Obj.put("name", messageSource.getMessage("acc.report.53", null, RequestContextUtils.getLocale(request)));  //"Cash Payment made to Vendors");
                cash4Obj.put("desc", messageSource.getMessage("acc.report.54", null, RequestContextUtils.getLocale(request)));  //"(Less) Vendor Invoice Cash Payments");
            } else if (paymentType.equalsIgnoreCase(Constants.BANK)) {
                cash4Obj.put("name", messageSource.getMessage("acc.report.531", null, RequestContextUtils.getLocale(request)));  //"Payment maid to Vendors");
                cash4Obj.put("desc", messageSource.getMessage("acc.report.541", null, RequestContextUtils.getLocale(request)));  //"(Less) Vendor Invoice Bank Payments");
            }
            cash4 = cash4Obj.getDouble("total");
            cash4Obj.put("value", cash4);
            jarr.put(cash4Obj);

            //cash flow from operating activites
            if (paymentType.equalsIgnoreCase(Constants.CASH)) {
                obj = new JSONObject();
                obj.put("name", messageSource.getMessage("acc.report.55", null, RequestContextUtils.getLocale(request)));  //"Cash Flow from Operating Activities");
                obj.put("fmt", "total");
                obj.put("desc", messageSource.getMessage("acc.report.56", null, RequestContextUtils.getLocale(request)));  //"Difference (Total Received - Total Paid)");
                obj.put("value", ((cash1 + cash2) - (cash3 + cash4)));
                jarr.put(obj);

                cash5 = ((cash1 + cash2) - (cash3 + cash4));
            } else {
                obj = new JSONObject();
                obj.put("name", messageSource.getMessage("acc.report.55", null, RequestContextUtils.getLocale(request)));  //"Cash Flow from Operating Activities");
                obj.put("fmt", "total");
                obj.put("desc", messageSource.getMessage("acc.report.56", null, RequestContextUtils.getLocale(request)));  //"Difference (Total Received - Total Paid)");
                obj.put("value", (cash2 - cash4));
                jarr.put(obj);
                cash5 = (cash2 - cash4);
            }

            //blank record for space between operating activities and investing activites
            obj = new JSONObject();
            jarr.put(obj);

            //Investing Activities
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.57", null, RequestContextUtils.getLocale(request)));  //"Investing Activities");
            obj.put("desc", messageSource.getMessage("acc.report.58", null, RequestContextUtils.getLocale(request)));  //"Cash Flow from sale & purchase of Fixed Assets");
            obj.put("fmt", "title");
            jarr.put(obj);

            //Payment received from sale of assets
            isfixedAsset = true;
            isreceiptPayment = true;
            cash2Obj = ReceiptOrPaymentTotalAmount(request, isreceiptPayment, paymentType, accountID, isfixedAsset, requestParams);
            cash2Obj.put("name", messageSource.getMessage("acc.report.59", null, RequestContextUtils.getLocale(request)));  //"Payment received from Sale of Fixed Asset");
            cash2Obj.put("desc", messageSource.getMessage("acc.report.60", null, RequestContextUtils.getLocale(request)));  //"Sale of Fixed Asset");
            cash2 = cash2Obj.getDouble("total");
            cash2Obj.put("value", cash2);
            jarr.put(cash2Obj);

            //payment made for purchase  of asset
            isfixedAsset = true;
            isreceiptPayment = false;
            cash1Obj = ReceiptOrPaymentTotalAmount(request, false, paymentType, accountID, true, requestParams);
            cash1Obj.put("name", messageSource.getMessage("acc.report.61", null, RequestContextUtils.getLocale(request)));  //Payment Made for Purchase of Fixed Asset;
            cash1Obj.put("desc", messageSource.getMessage("acc.report.62", null, RequestContextUtils.getLocale(request)));  //"(Less) Purchase of Fixed Asset");
            cash1 = cash1Obj.getDouble("total");
            cash1Obj.put("value", cash1);
            jarr.put(cash1Obj);

            //Cash Flow from Investing Activities
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.63", null, RequestContextUtils.getLocale(request)));  //"Cash Flow from Investing Activities");
            obj.put("fmt", "total");
            obj.put("desc", messageSource.getMessage("acc.report.64", null, RequestContextUtils.getLocale(request)));  //"Difference (Total Received - Total Paid)");
            obj.put("value", (cash2 - cash1));
            jarr.put(obj);

            //Net Increase or Decrease in Cash
            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.65", null, RequestContextUtils.getLocale(request))); //"Net Increase or Decrease in Cash");
            obj.put("fmt", "total");
            obj.put("desc", messageSource.getMessage("acc.report.66", null, RequestContextUtils.getLocale(request)));  //"Total Cash Flow");
            obj.put("value", ((cash2 - cash1) + cash5));
            jarr.put(obj);

            //columns
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            sdf.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getTimeZoneDifference(request)));
            for (int interVal = 0; interVal < intervals; interVal++) {
                cal1.setTime(curDate);
                cal1.add(Calendar.DAY_OF_YEAR, duration * interVal);

                cal2.setTime(curDate);
                cal2.add(Calendar.DAY_OF_YEAR, duration * (interVal + 1) - 1);
                JSONObject columnName = new JSONObject();
                columnName.put("header", "Week (" + sdf.format(cal1.getTime()) + " - " + sdf.format(cal2.getTime()) + ")(" + currency.getSymbol() + ")");
                columnName.put("dataindex", "amountdue" + interVal);
                columnName.put("width", 250);
                columnName.put("pdfwidth", 120);
                columnName.put("title", "amountdue" + interVal);
                columnName.put("align", "currency");
                columnName.put("hidecurrency", false);
                columnNames.put(columnName);

                //code for creating reader 
                JSONObject jobjTemprec = new JSONObject();
                jobjTemprec.put("name", "amountdue" + interVal);
                jarrRecords.put(jobjTemprec);
            }

            JSONObject totalamtCol = new JSONObject();
            totalamtCol.put("header", messageSource.getMessage("acc.ra.value", null, RequestContextUtils.getLocale(request)) + "(" + currency.getSymbol() + ")");
            totalamtCol.put("dataindex", "value");
            totalamtCol.put("width", 250);
            totalamtCol.put("pdfwidth", 120);
            totalamtCol.put("title", "value");
            totalamtCol.put("align", "currency");
            totalamtCol.put("hidecurrency", false);
            columnNames.put(totalamtCol);

            JSONObject totalamtColrec = new JSONObject();
            totalamtColrec.put("name", "value");
            jarrRecords.put(totalamtColrec);
            JSONObject descRec = new JSONObject();
            descRec.put("name", "desc");
            jarrRecords.put(descRec);
            JSONObject fmtRec = new JSONObject();
            fmtRec.put("name", "fmt");
            jarrRecords.put(fmtRec);
            //end columns
            jobj.put("columns", columnNames);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", Constants.RES_data);
            jMeta.put("fields", jarrRecords);
            jobj.put("metaData", jMeta);
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_data, jarr);
            jobj.put("totalCount", jarr.length());
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getWeeklyCashFlow : " + ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getWeeklyCashFlow : " + ex.getMessage(), ex);
        }
        return jobj;
    }

    public JSONObject getWeekWiseCashFlowData(HttpServletRequest request, JSONObject obj, Date duedate, double amountdue, int intervals, Calendar cal1, Calendar cal2, Date curDate, DateFormat df, int duration) throws ServiceException, SessionExpiredException {
        try {
            Date dueDate = null;
            dueDate = df.parse(df.format(duedate));
            for (int interVal = 0; interVal < intervals; interVal++) {
                cal1.setTime(curDate);
                cal1.add(Calendar.DAY_OF_YEAR, duration * interVal);
                cal2.setTime(curDate);
                cal2.add(Calendar.DAY_OF_YEAR, duration * (interVal + 1));
                String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
                Date cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

                String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
                Date cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);
                if ((dueDate.after(cal1Date) && dueDate.before(cal2Date)) || dueDate.equals(cal1Date)) {
                    if (obj.has("amountdue" + interVal)) {
                        obj.put("amountdue" + interVal, obj.getDouble("amountdue" + interVal) + amountdue);
                    } else {
                        obj.put("amountdue" + interVal, amountdue);
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getWeekWiseCashFlowData : " + ex.getMessage(), ex);
        }
        return obj;
    }

    /**
     * @author Neeraj
     * @param request
     * @return jobj
     * @throws ServiceException
     * @throws SessionExpiredException
     */
    public JSONObject getCashFlow(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        try {
            double cash1 = 0, cash2 = 0, cash3 = 0, cash4 = 0, cash5 = 0;
            boolean isfixedAsset = false, isreceiptPayment = false;

            JSONObject cash1Obj = null;
            JSONObject cash2Obj = null;
            JSONObject cash3Obj = null;
            JSONObject cash4Obj = null;

            JSONArray jArr = new JSONArray();
            String paymentType = request.getParameter("paymentType");
            String accountID = request.getParameter("accountID");
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat());

            JSONObject obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.45", null, RequestContextUtils.getLocale(request)));  //"Operating Activities");
            obj.put("desc", messageSource.getMessage("acc.report.46", null, RequestContextUtils.getLocale(request)));  //"Cash Flow from sale & purchase of Products & Services");
            obj.put("fmt", "title");
            jArr.put(obj);

            if (paymentType.equalsIgnoreCase(Constants.CASH)) {
                obj = new JSONObject();
                obj.put("name", messageSource.getMessage("acc.report.47", null, RequestContextUtils.getLocale(request)));  //"Cash Sales");
                obj.put("desc", messageSource.getMessage("acc.report.48", null, RequestContextUtils.getLocale(request)));  //"Direct Cash Sales");
                cash1Obj = cashPurchaseOrSaleTotalAmount(request, false, paymentType, accountID, requestParams);
                cash1 = cash1Obj.getDouble("total");
                obj.put("value", cash1);
                obj.put("fmt", "export");
                jArr.put(obj);
            }

            obj = new JSONObject();
            if (paymentType.equalsIgnoreCase(Constants.CASH)) {
                obj.put("name", messageSource.getMessage("acc.report.49", null, RequestContextUtils.getLocale(request)));  //"Cash Payment Received from Customers");
                obj.put("desc", messageSource.getMessage("acc.report.50", null, RequestContextUtils.getLocale(request)));  //"Customer Invoice Cash Payments");
            } else if (paymentType.equalsIgnoreCase(Constants.BANK)) {
                obj.put("name", messageSource.getMessage("acc.report.491", null, RequestContextUtils.getLocale(request)));  //"Payment Received from Customers");
                obj.put("desc", messageSource.getMessage("acc.report.501", null, RequestContextUtils.getLocale(request)));  //"Customer Invoice Bank Payments");
            }
            isfixedAsset = false;
            isreceiptPayment = true;
            cash2Obj = ReceiptOrPaymentTotalAmount(request, isreceiptPayment, paymentType, accountID, isfixedAsset, requestParams); //Normal receipt amount without Asset payment
            cash2 = cash2Obj.getDouble("total");
            obj.put("value", cash2);
            obj.put("fmt", "export");
            jArr.put(obj);

            if (paymentType.equalsIgnoreCase(Constants.CASH)) {
                obj = new JSONObject();
                obj.put("name", messageSource.getMessage("acc.report.51", null, RequestContextUtils.getLocale(request)));  //"Cash Purchases");
                obj.put("desc", messageSource.getMessage("acc.report.52", null, RequestContextUtils.getLocale(request)));  //"(Less) Direct Cash Purchases");
//                cash3 = cashPurchaseOrSaleTotalAmount(request, true,paymentType,accountID);
                cash3Obj = cashPurchaseOrSaleTotalAmount(request, true, paymentType, accountID, requestParams);
                cash3 = cash3Obj.getDouble("total");
                obj.put("value", cash3);
                obj.put("fmt", "export");
                jArr.put(obj);
            }

            obj = new JSONObject();
            if (paymentType.equalsIgnoreCase(Constants.CASH)) {
                obj.put("name", messageSource.getMessage("acc.report.53", null, RequestContextUtils.getLocale(request)));  //"Cash Payment made to Vendors");
                obj.put("desc", messageSource.getMessage("acc.report.54", null, RequestContextUtils.getLocale(request)));  //"(Less) Vendor Invoice Cash Payments");
            } else if (paymentType.equalsIgnoreCase(Constants.BANK)) {
                obj.put("name", messageSource.getMessage("acc.report.531", null, RequestContextUtils.getLocale(request)));  //"Payment maid to Vendors");
                obj.put("desc", messageSource.getMessage("acc.report.541", null, RequestContextUtils.getLocale(request)));  //"(Less) Vendor Invoice Bank Payments");
            }
            isfixedAsset = false;
            isreceiptPayment = false;
            cash4Obj = ReceiptOrPaymentTotalAmount(request, isreceiptPayment, paymentType, accountID, isfixedAsset, requestParams);//Normal payment amount without Asset receipt
            cash4 = cash4Obj.getDouble("total");
            obj.put("value", cash4);
            obj.put("fmt", "export");
            jArr.put(obj);

            if (paymentType.equalsIgnoreCase(Constants.CASH)) {
                obj = new JSONObject();
                obj.put("name", messageSource.getMessage("acc.report.55", null, RequestContextUtils.getLocale(request)));  //"Cash Flow from Operating Activities");
                obj.put("fmt", "total");
                obj.put("desc", messageSource.getMessage("acc.report.56", null, RequestContextUtils.getLocale(request)));  //"Difference (Total Received - Total Paid)");
                obj.put("value", ((cash1 + cash2) - (cash3 + cash4)));
                jArr.put(obj);

                cash5 = ((cash1 + cash2) - (cash3 + cash4));
            } else {
                obj = new JSONObject();
                obj.put("name", messageSource.getMessage("acc.report.55", null, RequestContextUtils.getLocale(request)));  //"Cash Flow from Operating Activities");
                obj.put("fmt", "total");
                obj.put("desc", messageSource.getMessage("acc.report.56", null, RequestContextUtils.getLocale(request)));  //"Difference (Total Received - Total Paid)");
                obj.put("value", (cash2 - cash4));
                jArr.put(obj);

                cash5 = (cash2 - cash4);
            }

            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.57", null, RequestContextUtils.getLocale(request)));  //"Investing Activities");
            obj.put("desc", messageSource.getMessage("acc.report.58", null, RequestContextUtils.getLocale(request)));  //"Cash Flow from sale & purchase of Fixed Assets");
            obj.put("fmt", "title");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.59", null, RequestContextUtils.getLocale(request)));  //"Payment received from Sale of Fixed Asset");
            obj.put("desc", messageSource.getMessage("acc.report.60", null, RequestContextUtils.getLocale(request)));  //"Sale of Fixed Asset");

            isfixedAsset = true;
            isreceiptPayment = true;
            cash2Obj = ReceiptOrPaymentTotalAmount(request, isreceiptPayment, paymentType, accountID, isfixedAsset, requestParams);
            cash2 = cash2Obj.getDouble("total");
            obj.put("value", cash2);
            obj.put("fmt", "export");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.61", null, RequestContextUtils.getLocale(request)));  //Payment Made for Purchase of Fixed Asset;
            obj.put("desc", messageSource.getMessage("acc.report.62", null, RequestContextUtils.getLocale(request)));  //"(Less) Purchase of Fixed Asset");

            isfixedAsset = true;
            isreceiptPayment = false;
            cash1Obj = ReceiptOrPaymentTotalAmount(request, false, paymentType, accountID, true, requestParams);
            cash1 = cash1Obj.getDouble("total");
            obj.put("value", cash1);
            obj.put("fmt", "export");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.63", null, RequestContextUtils.getLocale(request)));  //"Cash Flow from Investing Activities");
            obj.put("fmt", "total");
            obj.put("desc", messageSource.getMessage("acc.report.64", null, RequestContextUtils.getLocale(request)));  //"Difference (Total Received - Total Paid)");
            obj.put("value", (cash2 - cash1));
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("name", messageSource.getMessage("acc.report.65", null, RequestContextUtils.getLocale(request))); //"Net Increase or Decrease in Cash");
            obj.put("fmt", "total");
            obj.put("desc", messageSource.getMessage("acc.report.66", null, RequestContextUtils.getLocale(request)));  //"Total Cash Flow");
            obj.put("value", ((cash2 - cash1) + cash5));
            jArr.put(obj);
            jobj.put(Constants.RES_data, jArr);
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCashFlow : " + ex.getMessage(), ex);
        }
        return jobj;
    }

    public ModelAndView getCashFlowStatementAsPerCOA(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getCashFlowStatementAsPerCOA(request);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getCashFlowStatementAsPerCOA(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        try {
            JSONArray jArr = new JSONArray();
            JSONObject objAmt = accFinancialReportsService.getAmountsForCashFlowStatementAsPerCOA(request);
            JSONObject obj = new JSONObject();

            obj.put("no", "");
            obj.put("desc", "OPERATING CASH FLOW");  //OPERATING CASH FLOW
            obj.put("value", "");
            obj.put("format", "maintitle");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "A");  //A
            obj.put("desc", "Pre-Tax Profit");  //Pre-Tax Profit
            double pretaxprofit = objAmt.getDouble("pretaxprofit");
            obj.put("value", pretaxprofit);
            obj.put("format", "title");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "");
            obj.put("desc", "Non-Cash Adjustments");  //Non-Cash Adjustments
            obj.put("value", "");
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "1");
            obj.put("desc", "1. Provision(Writable) of Doubtful Debits");  //1. Provision(Writable) of Doubtful Debits
            double provision = objAmt.getDouble("provision");
            obj.put("value", provision);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "2");
            obj.put("desc", "2. Depreciation");  //2. Depreciation
            double depreciation = objAmt.getDouble("depreciation");
            obj.put("value", depreciation);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "3");
            obj.put("desc", "3. Loss on disposal of Fixed Assets");  //3. Loss on disposal of Fixed Assets
            double lossondisp = objAmt.getDouble("lossondisp");
            obj.put("value", lossondisp);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "");
            obj.put("desc", "Non-Operating Adjustments");  //Non-Operating Adjustments
            obj.put("value", "");
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "4");
            obj.put("desc", "1. Gain on Disposal of Fixed Assets");  //1. Gain on Disposal of Fixed Assets
            double gainondisp = objAmt.getDouble("gainondisp");
            obj.put("value", gainondisp);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "5");
            obj.put("desc", "2. Divided Income");  //2. Divided Income
            double divincome = objAmt.getDouble("divincome");
            obj.put("value", divincome);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "");
            obj.put("desc", "Changes in Working Capital");  //Non-Operating Adjustments
            obj.put("value", "");
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "6");
            obj.put("desc", "1. Consumables Stock");  //1. Consumables Stock
            double consume = objAmt.getDouble("consume");
            obj.put("value", consume);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "7");
            obj.put("desc", "2. Trade Debtors");  //2. Trade Debtors
            double tradedebtors = objAmt.getDouble("tradedebtors");
            obj.put("value", tradedebtors);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "8");
            obj.put("desc", "3. Other Debtors");  //3. Other Debtors
            double otherdebtors = objAmt.getDouble("otherdebtors");
            obj.put("value", otherdebtors);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "9");
            obj.put("desc", "4. Trade Creditors");  //4. Trade Creditors
            double tradecreditors = objAmt.getDouble("tradecreditors");
            obj.put("value", tradecreditors);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "10");
            obj.put("desc", "5. Other Creditors");  //5. Other Creditors
            double othercreditors = objAmt.getDouble("othercreditors");
            obj.put("value", othercreditors);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "");
            obj.put("desc", "Sub total 1");  //Sub total 1
            double subtotal1 = pretaxprofit + provision + depreciation + lossondisp + gainondisp + divincome + consume + tradedebtors + otherdebtors + tradecreditors + othercreditors;
            obj.put("value", subtotal1);
            obj.put("format", "total");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "");
            obj.put("desc", "INVESTING CASH FLOW");  //INVESTING CASH FLOW
            obj.put("value", "");
            obj.put("format", "maintitle");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "11");
            obj.put("desc", "Purchase of Fixed Assets");  //Purchase of Fixed Assets
            double perchasefixass = objAmt.getDouble("perchasefixass");
            obj.put("value", perchasefixass);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "12");
            obj.put("desc", "Acquisition Of Investments");  //Aquisition Of Investments
            double acqofinvest = objAmt.getDouble("acqofinvest");
            obj.put("value", acqofinvest);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "");
            obj.put("desc", "Sub total 2");  //Sub total 2
            double subtotal2 = perchasefixass + acqofinvest;
            obj.put("value", subtotal2);
            obj.put("format", "total");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "");
            obj.put("desc", "FINANCING CASH FLOW");  //FINANCING CASH FLOW
            obj.put("value", "");
            obj.put("format", "maintitle");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "13");
            obj.put("desc", "Procceed from Inssurance of Shares");  //Procceed from Inssurance of Shares
            double proinsssha = objAmt.getDouble("proinsssha");
            obj.put("value", proinsssha);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "14");
            obj.put("desc", "HP Financing/(Repayment)");  //HP Financing/(Repayment)
            double hpfinance = objAmt.getDouble("hpfinance");
            obj.put("value", hpfinance);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "15");
            obj.put("desc", "Term Loan Financing/(Repayment)");  //Team Loan Financing/(Repayment)
            double termloan = objAmt.getDouble("termloan");
            obj.put("value", termloan);
            obj.put("format", "");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "");
            obj.put("desc", "Sub Total 3");  //Sub Total 3
            double subtotal3 = proinsssha + hpfinance + termloan;
            obj.put("value", subtotal3);
            obj.put("format", "total");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "");
            obj.put("desc", "NET CASH FLOW");  //NET CASH FLOW
            double netcashflow = subtotal1 + subtotal2 + subtotal3;
            obj.put("value", netcashflow);
            obj.put("format", "total");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "");
            obj.put("desc", "Cash Balance, Beginning");  //Cash Balance, Beginning
            double cashbalbegin = objAmt.getDouble("cashbalbegin");
            obj.put("value", cashbalbegin);
            obj.put("format", "total");
            jArr.put(obj);

            obj = new JSONObject();
            obj.put("no", "");
            obj.put("desc", "Cash Balance, Net Available");  //Cash Balance, Net Available
            double cashbalnet = objAmt.getDouble("cashbalnet");
            obj.put("value", cashbalnet);
            obj.put("format", "total");
            jArr.put(obj);

            jobj.put(Constants.RES_data, jArr);
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCashFlow : " + ex.getMessage(), ex);
        }
        return jobj;
    }

    /**
     * @author Neeraj
     * @param request
     * @param isCashPurchase
     * @return cashTotal
     * @throws ServiceException
     * @throws SessionExpiredException
     */
    public JSONObject cashPurchaseOrSaleTotalAmount(HttpServletRequest request, boolean isCashPurchase, String paymentType, String accountID, HashMap<String, Object> requestParams) throws ServiceException, SessionExpiredException {
        try {
            double cashTotal = 0, cashTotalAmt = 0;
            List ll = null;
            JSONObject obj = new JSONObject();
            KwlReturnObject cashPurchase, bAmt;
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String currencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            String companyid = "";

            DateFormat df = authHandler.getDateOnlyFormat();
            int intervals = request.getParameter("intervals") != null ? Integer.parseInt(request.getParameter("intervals")) : 4;
            int duration = 7;
            String curDateString = "";
            Date curDate = null;
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();

            String weeklyCashflowString = request.getParameter("weeklyCashFlowReport");
            boolean weeklyCashFlow = !StringUtil.isNullOrEmpty(weeklyCashflowString) ? Boolean.parseBoolean(weeklyCashflowString) : false;
            if (weeklyCashFlow) {
                if (requestParams.containsKey(Constants.REQ_startdate)) {
                    curDateString = (String) requestParams.get(Constants.REQ_startdate);
                    curDate = df.parse(curDateString);
                }
            }
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, currencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, currencyid);
                requestParams.put("dateformat", authHandler.getDateOnlyFormat());
                requestParams.put("nondeleted", "true");
                requestParams.put("cashonly", "true");
                requestParams.put("creditonly", "false");

                cashTotal = 0;

                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

                KwlReturnObject prefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences preferences = (CompanyAccountPreferences) prefResult.getEntityList().get(0);

                String cashAccount = preferences.getCashAccount().getID();

                if (!(accountID.equalsIgnoreCase(cashAccount) || accountID.equalsIgnoreCase("ALL"))) {
                    return obj.put("total", cashTotal);
                }

                if (isCashPurchase) {
                    cashPurchase = accGoodsReceiptDAOObj.getGoodsReceipts(requestParams);
                    List<GoodsReceipt> list = cashPurchase.getEntityList();
                    if (list != null && !list.isEmpty()) {
                        for (GoodsReceipt gReceipt : list) {
                            JournalEntry je = gReceipt.getJournalEntry();
                            JournalEntryDetail d = gReceipt.getVendorEntry();
                            currencyid = (gReceipt.getCurrency() == null ? currency.getCurrencyID() : gReceipt.getCurrency().getCurrencyID());
                            Date entryDate = null;
                            if (weeklyCashFlow) {
                                if (!gReceipt.isIsOpeningBalenceInvoice() && je != null && je.getEntryDate() != null) {
                                    entryDate = je.getEntryDate();
                                } else {
                                    continue;
                                }
                            }
                            if (gReceipt.isIsExpenseType()) {
                                ll = accGoodsReceiptCommon.getExpGRAmountDue(requestParams, gReceipt);
//                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (Double) ll.get(0), currencyid, je.getEntryDate(), je.getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (Double) ll.get(0), currencyid, gReceipt.getCreationDate(), je.getExternalCurrencyRate());
                                cashTotal = cashTotal + (Double) bAmt.getEntityList().get(0);
                            } else {
                                ll = accGoodsReceiptCommon.getGRAmountDue(requestParams, gReceipt);
//                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, d.getAmount(), currencyid, je.getEntryDate(), je.getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, d.getAmount(), currencyid, gReceipt.getCreationDate(), je.getExternalCurrencyRate());
                                cashTotal = cashTotal + (Double) bAmt.getEntityList().get(0);
                            }
                            if (weeklyCashFlow) {
                                getWeekWiseCashFlowData(request, obj, entryDate, (Double) bAmt.getEntityList().get(0), intervals, cal1, cal2, curDate, df, duration);
                            }
                        }
                    }
                } else {
                    cashPurchase = accInvoiceDAOobj.getInvoices(requestParams);
                    List<Invoice> list = cashPurchase.getEntityList();

                    if (list != null && !list.isEmpty()) {
                        for (Invoice invoice : list) {
                            JournalEntry je = invoice.getJournalEntry();
                            JournalEntryDetail d = invoice.getCustomerEntry();
                            currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                            Date entryDate = null;
                            if (weeklyCashFlow) {
                                if (!invoice.isIsOpeningBalenceInvoice() && je != null && je.getEntryDate() != null) {
                                    entryDate = je.getEntryDate();
                                } else {
                                    continue;
                                }
                            }
//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, d.getAmount(), currencyid, je.getEntryDate(), je.getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, d.getAmount(), currencyid, invoice.getCreationDate(), je.getExternalCurrencyRate());
                            cashTotal = cashTotal + (Double) bAmt.getEntityList().get(0);
                            if (weeklyCashFlow) {
                                getWeekWiseCashFlowData(request, obj, entryDate, (Double) bAmt.getEntityList().get(0), intervals, cal1, cal2, curDate, df, duration);
                            }
                        }
                    }
                }
                cashTotalAmt += cashTotal;
            }
            obj.put("total", cashTotalAmt);
            return obj;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("cashPurchaseOrSaleTotalAmount : " + ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("cashPurchaseOrSaleTotalAmount : " + ex.getMessage(), ex);
        }
    }

    /**
     * @author Neeraj
     * @param request
     * @param iscashReceipt
     * @return cashTotal
     * @throws ServiceException
     * @throws SessionExpiredException
     */
    public JSONObject ReceiptOrPaymentTotalAmount(HttpServletRequest request, boolean iscashReceipt, String paymentType, String accountID, boolean isfixedAsset, HashMap<String, Object> requestParams) throws ServiceException, SessionExpiredException {
        try {
            double cashTotal = 0, cashTotalAmt = 0, amount = 0;
            List ll = null;
            JSONObject obj = new JSONObject();
            KwlReturnObject cashReceipt, bAmt = null;
            boolean contraentryflag = request.getParameter("contraentryflag") != null;//false in this case.
            requestParams.put("contraentryflag", contraentryflag);
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String currencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            String companyid = "";

            DateFormat df = authHandler.getDateOnlyFormat();
            int intervals = request.getParameter("intervals") != null ? Integer.parseInt(request.getParameter("intervals")) : 4;
            int duration = 7;
            String curDateString = "";
            Date curDate = null;
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();

            String weeklyCashflowString = request.getParameter("weeklyCashFlowReport");
            boolean weeklyCashFlow = !StringUtil.isNullOrEmpty(weeklyCashflowString) ? Boolean.parseBoolean(weeklyCashflowString) : false;
            if (weeklyCashFlow) {
                if (requestParams.containsKey(Constants.REQ_startdate)) {
                    curDateString = (String) requestParams.get(Constants.REQ_startdate);
                    curDate = df.parse(curDateString);
                }
            }

            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, currencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, currencyid);
                requestParams.put("dateformat", authHandler.getDateOnlyFormat());
                requestParams.put("nondeleted", "true");

                cashTotal = 0;

                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                if (iscashReceipt) {
                    cashReceipt = accReceiptDao.getReceipts(requestParams);
                    if (cashReceipt != null && cashReceipt.getEntityList() != null) {
                        Iterator itr = cashReceipt.getEntityList().iterator();
                        while (itr.hasNext()) {
                            Object[] row = (Object[]) itr.next();
                            Receipt receipt = (Receipt) row[0];
                            amount = 0;
                            Date paymentDate = null;
                            if (weeklyCashFlow) {
                                if (!receipt.isIsOpeningBalenceReceipt() && receipt.getJournalEntry() != null && receipt.getCreationDate() != null) {
//                                    paymentDate = df.parse(df.format(receipt.getJournalEntry().getEntryDate()));
                                    paymentDate = df.parse(df.format(receipt.getCreationDate()));
                                } else {
                                    continue;
                                }
                            }
                            if (accountID.equalsIgnoreCase("ALL")) {
                                if (paymentType.equalsIgnoreCase(Constants.CASH) && paymentType.equalsIgnoreCase((receipt.getPayDetail() == null ? "" : String.valueOf(receipt.getPayDetail().getPaymentMethod().getAccount().getMastertypevalue())))) {
                                    amount = getReceiptTotalAmount(currencyid, receipt, currency, requestParams, isfixedAsset);
                                    cashTotal += amount;
                                } else if (paymentType.equalsIgnoreCase(Constants.BANK) && paymentType.equalsIgnoreCase((receipt.getPayDetail() == null ? "" : String.valueOf(receipt.getPayDetail().getPaymentMethod().getAccount().getMastertypevalue())))) {
                                    amount = getReceiptTotalAmount(currencyid, receipt, currency, requestParams, isfixedAsset);
                                    cashTotal += amount;
                                }
                            } else {
                                if (accountID.equals((receipt.getPayDetail() == null ? "" : receipt.getPayDetail().getPaymentMethod().getAccount().getID()))) {
                                    amount = getReceiptTotalAmount(currencyid, receipt, currency, requestParams, isfixedAsset);
                                    cashTotal += amount;
                                }
                            }
                            if (weeklyCashFlow) {
                                getWeekWiseCashFlowData(request, obj, paymentDate, amount, intervals, cal1, cal2, curDate, df, duration);
                            }
                        }
                    }
                } else {
                    cashReceipt = accVendorPaymentDao.getPayments(requestParams);
                    if (cashReceipt != null) {
                        Iterator itr = cashReceipt.getEntityList().iterator();
                        while (itr.hasNext()) {
                            Object[] row = (Object[]) itr.next();
                            Payment payment = (Payment) row[0];
                            amount = 0;
                            Date paymentDate = null;
                            if (weeklyCashFlow) {
                                if (!payment.isIsOpeningBalencePayment() && payment.getJournalEntry() != null && payment.getCreationDate() != null) {
//                                    paymentDate = df.parse(df.format(payment.getJournalEntry().getEntryDate()));
                                    paymentDate = df.parse(df.format(payment.getCreationDate()));
                                } else {
                                    continue;
                                }
                            }
                            if (accountID.equalsIgnoreCase("ALL")) {
                                if (paymentType.equalsIgnoreCase(Constants.CASH) && paymentType.equalsIgnoreCase((payment.getPayDetail() == null ? "" : String.valueOf(payment.getPayDetail().getPaymentMethod().getAccount().getMastertypevalue())))) {
                                    amount = getPaymentTotalAmount(currencyid, payment, currency, requestParams, isfixedAsset);
                                    cashTotal += amount;
                                } else if (paymentType.equalsIgnoreCase(Constants.BANK) && paymentType.equalsIgnoreCase((payment.getPayDetail() == null ? "" : String.valueOf(payment.getPayDetail().getPaymentMethod().getAccount().getMastertypevalue())))) {
                                    amount = getPaymentTotalAmount(currencyid, payment, currency, requestParams, isfixedAsset);
                                    cashTotal += amount;
                                }
                            } else {
                                if (accountID.equals((payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getAccount().getID()))) {
                                    amount = getPaymentTotalAmount(currencyid, payment, currency, requestParams, isfixedAsset);
                                    cashTotal += amount;
                                }
                            }
                            if (weeklyCashFlow) {
                                getWeekWiseCashFlowData(request, obj, paymentDate, amount, intervals, cal1, cal2, curDate, df, duration);
                            }
                        }
                    }
                }
                cashTotalAmt += cashTotal;
            }
            obj.put("total", cashTotalAmt);
            return obj;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("ReceiptOrPaymentTotalAmount : " + ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("ReceiptOrPaymentTotalAmount : " + ex.getMessage(), ex);
        }
    }

    public List<String> listOfPaymentAccounts(HashMap<String, Object> requestParams) {
        List<String> paymentAccounts = new ArrayList<String>();
        HashMap<String, Object> accountRequestParams = new HashMap<String, Object>();
        try {
            String paymentType = requestParams.get("paymentType").toString();
            if (paymentType.equalsIgnoreCase(Constants.CASH)) {
                accountRequestParams.put("ignoreGLAccounts", true);
                accountRequestParams.put("ignoreBankAccounts", true);
                accountRequestParams.put("ignoreGSTAccounts", true);
            } else if (paymentType.equalsIgnoreCase(Constants.BANK)) {
                accountRequestParams.put("ignoreGLAccounts", true);
                accountRequestParams.put("ignoreCashAccounts", true);
                accountRequestParams.put("ignoreGSTAccounts", true);
            }

            accountRequestParams.put(Constants.companyKey, requestParams.get(Constants.companyKey));
            accountRequestParams.put("deleted", "false");
            accountRequestParams.put("nondeleted", "true");
            KwlReturnObject accountsResult = accAccountDAOobj.getAccountsForCombo(accountRequestParams);
            if (accountsResult != null) {
                List list = accountsResult.getEntityList();
                if (list != null) {
                    Iterator itr = list.iterator();
                    while (itr.hasNext()) {
                        Account account = (Account) itr.next();
                        if (account != null) {
                            paymentAccounts.add(account.getID());
                        }
                    }
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            return paymentAccounts;
        }
    }

    public ModelAndView exportCashFlow(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String weeklyCashflowString = request.getParameter("weeklyCashFlowReport");
            boolean weeklyCashFlow = !StringUtil.isNullOrEmpty(weeklyCashflowString) ? Boolean.parseBoolean(weeklyCashflowString) : false;
            if (weeklyCashFlow) {
                JSONObject weeklyObj = getWeeklyCashFlow(request);
                jobj.put(Constants.RES_data, weeklyObj.getJSONArray(Constants.RES_data));
            } else {
                jobj = getCashFlowJSON(getCashFlow(request), currencyid, companyid);
            }
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                if (StringUtil.equal(fileType, "csv") || StringUtil.equal(fileType, "xls")) {
                    exportDaoObj.processRequest(request, response, jobj);
                } else if (weeklyCashFlow && StringUtil.equal(fileType, "pdf")) {
                    exportDaoObj.processRequest(request, response, jobj);
                } else {
                    String logoPath = ProfileImageServlet.getProfileImagePath(request, true, null);
                    java.io.ByteArrayOutputStream baos = null;
                    String filename = request.getParameter("filename");
                    String comName = sessionHandlerImpl.getCompanyName(request);
                    baos = ExportrecordObj.exportCashFlow(jobj, logoPath, comName, request);
                    if (baos != null) {
                        ExportrecordObj.writeDataToFile(filename + "_v1." + fileType, baos, response);
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public JSONObject getCashFlowJSON(JSONObject jobj, String currencyid, String companyid) {
        JSONObject retObj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            JSONArray leftObjArr = jobj.getJSONArray(Constants.RES_data);
            int length = leftObjArr.length();
            for (int i = 0; i < length; i++) {
                JSONObject tempObj = new JSONObject();
                if (i < leftObjArr.length() && !leftObjArr.getJSONObject(i).toString().equalsIgnoreCase("{}")) {
                    JSONObject leftObj = leftObjArr.getJSONObject(i);
                    String name = "";
                    String format = leftObj.has("fmt") ? leftObj.get("fmt").toString() : "";
                    String value = leftObj.has("value") ? formatValue(leftObj.get("value").toString(), format, currencyid, companyid) : "";
                    if (leftObj.has("desc")) {
                        name = leftObj.get("name").toString() + " (" + leftObj.get("desc").toString() + ")";
                    } else {
                        name = leftObj.get("name").toString();
                    }
                    tempObj.put("lname", name);
                    tempObj.put("lvalue", value);
                    tempObj.put("lfmt", format);
                } else {
                    tempObj.put("lname", "");
                    tempObj.put("lvalue", "");
                    tempObj.put("lfmt", "");
                }
                jArr.put(tempObj);
            }
            retObj.put(Constants.RES_data, jArr);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return retObj;
    }

    public ModelAndView exportCashFlowStatementAsPerCOA(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            jobj = getCashFlowStatementAsPerCOAJSON(getCashFlowStatementAsPerCOA(request), currencyid, companyid);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                if (StringUtil.equal(fileType, "csv")) {
                    exportDaoObj.processRequest(request, response, jobj);
                } else {
                    String logoPath = ProfileImageServlet.getProfileImagePath(request, true, null);
                    java.io.ByteArrayOutputStream baos = null;
                    String filename = request.getParameter("filename");
                    String comName = sessionHandlerImpl.getCompanyName(request);
                    baos = ExportrecordObj.exportCashFlowStatementAsPerCOA(jobj, logoPath, comName, request);
                    if (baos != null) {
                        ExportrecordObj.writeDataToFile(filename + "." + fileType, baos, response);
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public JSONObject getCashFlowStatementAsPerCOAJSON(JSONObject jobj, String currencyid, String companyid) {
        JSONObject retObj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            JSONArray leftObjArr = jobj.getJSONArray(Constants.RES_data);
            int length = leftObjArr.length();
            for (int i = 0; i < length; i++) {
                JSONObject tempObj = new JSONObject();
                if (i < leftObjArr.length() && !leftObjArr.getJSONObject(i).toString().equalsIgnoreCase("{}")) {
                    JSONObject leftObj = leftObjArr.getJSONObject(i);
                    String number = leftObj.has("no") ? leftObj.get("no").toString() : "";
                    String name = leftObj.has("desc") ? leftObj.get("desc").toString() : "";
                    String format = leftObj.has("format") ? leftObj.get("format").toString() : "";
                    String value = leftObj.has("value") ? formatValue(leftObj.get("value").toString(), format, currencyid, companyid) : "";

                    tempObj.put("lno", number);
                    tempObj.put("lname", name);
                    tempObj.put("lvalue", value);
                    tempObj.put("lformat", format);
                } else {
                    tempObj.put("lno", "");
                    tempObj.put("lname", "");
                    tempObj.put("lvalue", "");
                    tempObj.put("lformat", "");
                }
                jArr.put(tempObj);
            }
            retObj.put(Constants.RES_data, jArr);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return retObj;
    }

    public ModelAndView exportCostCenterSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            JSONArray DataJArr = new JSONArray();
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter(Constants.REQ_startdate));
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter(Constants.REQ_enddate));
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            boolean eliminateflag = consolidateFlag;
            String companyid = "";
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);

                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(companyid);
                requestParams.put(Constants.filterNamesKey, filter_names);
                requestParams.put(Constants.filterParamsKey, filter_params);
                KwlReturnObject result = accCostCenterObj.getCostCenter(requestParams);
                List<CostCenter> costCenters = result.getEntityList();

                //Logic to get new OTHER_CURRENT_LIABILITIES group from old OTHER_CURRENT_LIABILITIES
                Group liab_group = accAccountDAOobj.getNewGroupFromOldId(Group.OTHER_CURRENT_LIABILITIES, companyid);

                double debitAmount = 0, creditAmount = 0;
                if (costCenters != null && !costCenters.isEmpty()) {
                    for (CostCenter costCenter : costCenters) {
                        debitAmount = 0;
                        creditAmount = 0;
                        JSONObject obj = new JSONObject();
                        requestParams.put(CCConstants.REQ_costcenter, costCenter.getID());
                        debitAmount = getSummaryAmount(request, requestParams, Group.NATURE_EXPENSES, null, startDate, endDate, eliminateflag);
                        creditAmount = getSummaryAmount(request, requestParams, Group.NATURE_INCOME, null, startDate, endDate, eliminateflag);
                        if (liab_group != null) {//Calculate and Add liablities for credit amount
                            creditAmount += getSummaryAmount(request, requestParams, -1, liab_group.getID(), startDate, endDate, eliminateflag);
                        }
                        obj.put(CCConstants.JSON_costcenterid, costCenter.getID());
                        obj.put(CCConstants.JSON_costcenterName, costCenter.getName());
                        obj.put("debitAmount", debitAmount < 0 ? (debitAmount * -1) : debitAmount);//Show summary amount in positive
                        obj.put("creditAmount", creditAmount < 0 ? (creditAmount * -1) : creditAmount);//Show summary amount in positive
                        DataJArr.put(obj);
                    }
                }
            }
            jobj.put(Constants.RES_data, DataJArr);
            jobj.put(Constants.RES_count, DataJArr.length());
            issuccess = true;
            String view = "jsonView_ex";
            String fileType = request.getParameter("fileType");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                if (StringUtil.equal(fileType, "csv")) {
                    exportDaoObj.processRequest(request, response, jobj);
                } else {
                    String logoPath = ProfileImageServlet.getProfileImagePath(request, true, null);
                    String filename = request.getParameter("name");
                    String comName = sessionHandlerImpl.getCompanyName(request);
                    exportDaoObj.processRequest(request, response, jobj);
                }
            }
        } catch (Exception ex) {
            msg += ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView-empty", "model", jobj.toString());
    }

    public ModelAndView exportGSTReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            String fileType = "pdf";
            if (StringUtil.equal(fileType, "pdf")) {
                String currencyid = sessionHandlerImpl.getCurrencyID(request);
                java.text.DateFormat formatter = authHandler.getUserDateFormatterWithoutTimeZone(request);
                String logoPath = ProfileImageServlet.getProfileImagePath(request, true, null);
                java.io.ByteArrayOutputStream baos = null;
	        KwlReturnObject extraCompanyPref = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), (String) sessionHandlerImpl.getCompanyid(request));
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyPref.getEntityList().get(0);
                String filename = "GST Report";
                String comName = sessionHandlerImpl.getCompanyName(request);
                Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
                Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
                String taxYearName=request.getParameter("taxYearName");
                String taxPeriodName=request.getParameter("taxPeriodName");
                request.setAttribute("issales", true);
                String withoutinventory = request.getParameter("withoutinventory");

                HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                requestParams.put("endDate", endDate);
                requestParams.put("startDate", startDate);
                requestParams.put("issales", true);
                requestParams.put("isSalesTax", true);
                requestParams.put("withoutinventory", withoutinventory);
                requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                requestParams.put(Constants.currencyKey, sessionHandlerImpl.getCurrencyID(request));
                requestParams.put("locale", RequestContextUtils.getLocale(request));
                requestParams.put("userdf", formatter);
                requestParams.put("isRequireSortByDate",(request.getParameter("reportType").equals("1") || request.getParameter("reportType").equals("11")));
                requestParams.put(Constants.isForGSTReport, true);//Add ImportedServicesInvoice Payment entry in GST Report for MalasianCompany when TAX "GST(DS) & GST(TX)"

                KwlReturnObject cap = accountingHandlerDAOobj.getObject(Company.class.getName(), (String) sessionHandlerImpl.getCompanyid(request));
                Company company = (Company) cap.getEntityList().get(0);
                if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                    currencyid = Constants.SGDID;
                    requestParams.put("gstFlag", true);
                }
                
                String searchJson = request.getParameter(Constants.Acc_Search_Json);
                String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
                if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                    requestParams.put(Constants.Acc_Search_Json, searchJson);
                    requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
 
                    //GET COMPANY NAME FOR ENTITY IN CASE OF ADVANCE SERARCH WITH ENTITY
                    if (extraCompanyPreferences.isIsMultiEntity()) {
                        comName = exportDaoObj.getEntityDimensionNameforExport(searchJson, company);
                    }
                }
            
                JSONArray salesjArr = getCalculatedTaxGST(requestParams, fileType);
                requestParams.put("issales", false);
                requestParams.put("isSalesTax", false);
                JSONArray purchasejArr = getCalculatedTaxGST(requestParams, fileType);

                if (request.getParameter("reportType").equals("1") || request.getParameter("reportType").equals("11")) {
                    filename = "GST Report (Detailed view)";
                    HashMap<String, Object> assignedvariables = AccountingManager.getGlobalParams(request);
                    assignedvariables.put("taxYearName", taxYearName);
                    assignedvariables.put("taxPeriodName", taxPeriodName);
                    baos = ExportrecordObj.generateGSTReportPdfDetailed(request , salesjArr, purchasejArr );
                } else if (request.getParameter("reportType").equals("2")) {
                    filename = "GST Report (Summarised view)";
                    HashMap<String, Object> assignedvariables = AccountingManager.getGlobalParams(request);
                    assignedvariables.put("taxYearName", taxYearName);
                    assignedvariables.put("taxPeriodName", taxPeriodName);
                    baos = ExportrecordObj.generateGSTReportPdf(request, currencyid, logoPath, comName, comName, formatter.format(startDate), formatter.format(endDate), salesjArr, purchasejArr, company,assignedvariables);
                } else if (request.getParameter("reportType").equals("3")) {
                    filename = "GST Form 5 (Detailed View)";
                    JSONArray jArr = getGSTForm5DetailedJSONArray(request, false);
                    baos = ExportrecordObj.generateGSTForm5DetailedReportPdf(request, currencyid, logoPath, comName, comName, formatter.format(startDate), formatter.format(endDate), jArr, company);
                } else {
                    filename = "GST Form 5";
                    JSONArray jArr = getGSTForm5JSONArray(request, false);
                    baos = ExportrecordObj.generateGSTForm5ReportPdf(request, currencyid, logoPath, comName, comName, formatter.format(startDate), formatter.format(endDate), jArr, company);
                }
                if (baos != null) {
                    ExportrecordObj.writeDataToFile(filename + "." + fileType, baos, response);
                }
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    private JSONArray getGSTForm5BreakDown(HttpServletRequest request, boolean isForExport) throws JSONException {
        JSONArray jArr = new JSONArray();
        JSONObject jObj = new JSONObject();

        jObj.put("code", "00000");
        jObj.put("outputtax", 0);
        jObj.put("percentage", 0);
        jObj.put("mergedCategoryData", "BREAKDOWN VALUE OF OUTPUT TAX IN ACCORDANCE WITH MAJOR INDUSTRY CODES");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("code", "00000");
        jObj.put("outputtax", 0);
        jObj.put("percentage", 0);
        jObj.put("mergedCategoryData", "BREAKDOWN VALUE OF OUTPUT TAX IN ACCORDANCE WITH MAJOR INDUSTRY CODES");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("code", "00000");
        jObj.put("outputtax", 0);
        jObj.put("percentage", 0);
        jObj.put("mergedCategoryData", "BREAKDOWN VALUE OF OUTPUT TAX IN ACCORDANCE WITH MAJOR INDUSTRY CODES");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("code", "00000");
        jObj.put("outputtax", 0);
        jObj.put("percentage", 0);
        jObj.put("mergedCategoryData", "BREAKDOWN VALUE OF OUTPUT TAX IN ACCORDANCE WITH MAJOR INDUSTRY CODES");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("code", "00000");
        jObj.put("outputtax", 0);
        jObj.put("percentage", 0);
        jObj.put("mergedCategoryData", "BREAKDOWN VALUE OF OUTPUT TAX IN ACCORDANCE WITH MAJOR INDUSTRY CODES");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("code", "00000");
        jObj.put("outputtax", 0);
        jObj.put("recordtype", "textfieldValue");
        jObj.put("recordVal", "Others");
        jObj.put("percentage", 0);
        jObj.put("mergedCategoryData", "BREAKDOWN VALUE OF OUTPUT TAX IN ACCORDANCE WITH MAJOR INDUSTRY CODES");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("code", "00000");
        jObj.put("outputtax", 0);
        jObj.put("recordtype", "textfieldValue");
        jObj.put("recordVal", "Total");
        jObj.put("percentage", 0);
        jObj.put("mergedCategoryData", "BREAKDOWN VALUE OF OUTPUT TAX IN ACCORDANCE WITH MAJOR INDUSTRY CODES");

        jArr.put(jObj);
        return jArr;
    }

    private JSONArray getGSTForm5JSONArray(HttpServletRequest request, boolean isForExport) throws JSONException, SessionExpiredException, ParseException, ServiceException {
        String fileType = "";
        String companyid = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
        Company company = (Company) cpresult.getEntityList().get(0);
        java.io.ByteArrayOutputStream baos = null;
        String name="";
        String id="";
        String desg="";
        String per="";
        String contact="";
        List valueTextField=new ArrayList();
                
        CompanyAccountPreferences pref = null;
        KwlReturnObject returnObject = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        pref = (CompanyAccountPreferences) returnObject.getEntityList().get(0);
        Account forexAccount = pref.getForeignexchange();

        Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
        Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));

        request.setAttribute("issales", true);
        String withoutinventory = request.getParameter("withoutinventory");

        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put("endDate", endDate);
        requestParams.put("startDate", startDate);

        requestParams.put("withoutinventory", withoutinventory);
        //Declarant name
        if (!StringUtil.isNullOrEmpty(request.getParameter("nameDe"))) {
            name = request.getParameter("nameDe");
            valueTextField.add(name);
        } else {
            valueTextField.add("");
        }
        //Id
        if (!StringUtil.isNullOrEmpty(request.getParameter("id"))) {
            id = request.getParameter("id");
            valueTextField.add(id);
        } else {
            valueTextField.add("");
        }
        //Designation
        if (!StringUtil.isNullOrEmpty(request.getParameter("desg"))) {
            desg = request.getParameter("desg");
            valueTextField.add(desg);
        } else {
            valueTextField.add("");
        }
        //Person
        if (!StringUtil.isNullOrEmpty(request.getParameter("per"))) {
            per = request.getParameter("per");
            valueTextField.add(per);
        }else{
            valueTextField.add("");
        }
        //Contact No
        if (!StringUtil.isNullOrEmpty(request.getParameter("contact"))) {
            contact = request.getParameter("contact");
            valueTextField.add(contact);
        } else {
            valueTextField.add("");
        }
        
        if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
            requestParams.put("gstFlag", true);
            request.setAttribute("filterCurrency", Constants.SGDID);
        }

        requestParams.put("issales", false);
        requestParams.put("isSalesTax", false);
        requestParams.put("locale", RequestContextUtils.getLocale(request));
        
        String searchJson = request.getParameter(Constants.Acc_Search_Json);
        String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
        if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
            requestParams.put(Constants.Acc_Search_Json, searchJson);
            requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
        }
        JSONArray purchasejArr = getCalculatedTaxGST(requestParams, fileType);

        Set purchaseTaxSet = new HashSet();
        purchaseTaxSet.add("GST(IM)@7.00%");
        purchaseTaxSet.add("GST(ME)@0.00%");
        purchaseTaxSet.add("GST(TX7)@7.00%");
        purchaseTaxSet.add("GST(ZP)@0.00%");
        // Below tax codes are added as demanded in SDP-3295/ERP-25942
        purchaseTaxSet.add("GST(TX-E33)@7.00%");
        purchaseTaxSet.add("GST(TX-N33)@7.00%");
        purchaseTaxSet.add("GST(TX-RE)@7.00%");

        Set importedTaxSet = new HashSet();
        importedTaxSet.add("GST(ME)@0.00%");

        double totalTaxablePurchase = 0.00; // item #5
        double totalInputTaxClaimed = 0.00; // item #7

        double totalGoodsImported = 0.00; // item #9

        for (int jsonVal = 0; jsonVal < purchasejArr.length(); jsonVal++) {
            JSONObject purchaseObj = purchasejArr.getJSONObject(jsonVal);
            String taxCode = purchaseObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
            boolean addAmountFlag = purchaseObj.optBoolean("addAmountFlag", true);//Erp-2696 & Erp-2696
            double invamt = purchaseObj.getDouble("invamt");
            double invtaxamount = purchaseObj.getDouble("invtaxamount");

            if (purchaseTaxSet.contains(taxCode)) {
                if (!addAmountFlag) {
                    totalTaxablePurchase -= invamt - invtaxamount;
                        totalInputTaxClaimed -= invtaxamount;
                } else {
                    totalTaxablePurchase += invamt - invtaxamount;
                        totalInputTaxClaimed += invtaxamount;
                }
            }
            if (importedTaxSet.contains(taxCode)) {
                if (addAmountFlag) {
                    totalGoodsImported += invamt;
                } else {
                    totalGoodsImported -= invamt;
                }
            }
        }

        requestParams.put("issales", true);
        requestParams.put("isSalesTax", true);
        JSONArray salesjArr = getCalculatedTaxGST(requestParams, fileType);
       
        

        double totalSR7PercentSupplies = 0.00; // item #1
        String taxCodeSR7PercentSupplies = "GST(SR)@7.00%";
        double totalDS7PercentSupplies = 0.00;
        String taxCodeDS7PercentSupplies = "GST(DS)@7.00%";
        double totalZR0PercentSupplies = 0.00; // item #2
        String taxCodeZR0PercentSupplies = "GST(ZR)@0.00%";

        double totalExempt0PercentSupplies = 0.00; // item #3
        String taxCodeExempt0PercentSupplies1 = "GST(ES33)@0.00%";
        String taxCodeExempt0PercentSupplies2 = "GST(ESN33)@0.00%";

        Set salesTaxSet = new HashSet();
        salesTaxSet.add("GST(DS)@7.00%"); //Changed for ERP-7339
        salesTaxSet.add("GST(SR)@7.00%");

        double totalTaxDue = 0.00; // item #6
        for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
            JSONObject salesObj = salesjArr.getJSONObject(jsonVal);
            String taxCode = salesObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
            double invamt = salesObj.getDouble("invamt");
            boolean addAmountFlag = salesObj.optBoolean("addAmountFlag", true);//Erp-2696
            double invtaxamount = salesObj.getDouble("invtaxamount");

            if (taxCodeSR7PercentSupplies.equalsIgnoreCase(taxCode)) {
                if (addAmountFlag) {
                    totalSR7PercentSupplies += (invamt - invtaxamount);
                } else {
                    totalSR7PercentSupplies -= (invamt - invtaxamount);
                }
            }
            if (taxCodeDS7PercentSupplies.equalsIgnoreCase(taxCode)) {
                if (addAmountFlag) {
                    totalDS7PercentSupplies += (invamt - invtaxamount);
                } else {
                    totalDS7PercentSupplies -= (invamt - invtaxamount);
                }
            }
            if (taxCodeZR0PercentSupplies.equalsIgnoreCase(taxCode)) {
                if (addAmountFlag) {
                    totalZR0PercentSupplies += (invamt - invtaxamount);
                } else {
                    totalZR0PercentSupplies -= (invamt - invtaxamount);
                }
            }

            if (taxCodeExempt0PercentSupplies1.equalsIgnoreCase(taxCode) || taxCodeExempt0PercentSupplies2.equalsIgnoreCase(taxCode)) {
                if (addAmountFlag) {
                    totalExempt0PercentSupplies += (invamt - invtaxamount);
                } else {
                    totalExempt0PercentSupplies -= (invamt - invtaxamount);
                }
            }
            if (salesTaxSet.contains(taxCode)) {
                if (!addAmountFlag) {
                    totalTaxDue -= invtaxamount;
                } else {
                    totalTaxDue += invtaxamount;
                }
            }
        }

        double forexAmt = 0; //calculating foreign exchange gain/loss accoutn amount
        if (forexAccount != null) {
            if (!forexAccount.isDeleted()) {
                if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                    request.setAttribute("gstForm5Flag", "true");
                    request.setAttribute("forexAccID", forexAccount.getID());
                }
                List childlist = new ArrayList(forexAccount.getChildren());
                
                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                if (childlist.isEmpty()) {
                    forexAmt = forexAmt + accReportsService.getAccountBalance(paramJobj, forexAccount.getID(), startDate, endDate,null);
                } else {
                    double accountbalance = accReportsService.getAccountBalance(paramJobj, forexAccount.getID(), startDate, endDate,null);
                    forexAmt = accReportsService.getTotalAccountBalance(forexAccount, accountbalance, paramJobj);
                }
            }
        }

        forexAmt = (Double) Math.abs(forexAmt);
        totalExempt0PercentSupplies += forexAmt; //item#3

        double totalPartOne = totalSR7PercentSupplies + totalZR0PercentSupplies + totalExempt0PercentSupplies + totalDS7PercentSupplies; // item #4

        double netGSTPaidToIRAS = totalTaxDue - totalInputTaxClaimed; // item #8

        JSONArray jArr = new JSONArray();
        JSONObject jObj = new JSONObject();
        
        int headerLevel = 0;
        int contentLevel = 1;

        jObj.put("taxname", "Supplies");
        jObj.put("taxamount", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put("box", "");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Total value of standard rated supplies");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalSR7PercentSupplies + totalDS7PercentSupplies, companyid), companyid));
            jObj.put("box", "[1]");
        } else {
            jObj.put("taxamount", totalSR7PercentSupplies + totalDS7PercentSupplies);
            jObj.put("box", "[1]");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");

        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Total value of zero rated supplies");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalZR0PercentSupplies, companyid), companyid));
            jObj.put("box", "[2]");
        } else {
            jObj.put("taxamount", totalZR0PercentSupplies);
            jObj.put("box", "[2]");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");

        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Total value of exempt supplies");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalExempt0PercentSupplies, companyid), companyid));
            jObj.put("box", "[3]");
        } else {
            jObj.put("taxamount", totalExempt0PercentSupplies);
            jObj.put("box", "[3]");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Total value of [1]+[2]+[3]");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalPartOne, companyid), companyid));
            jObj.put("box", "[4]");
        } else {
            jObj.put("taxamount", totalPartOne);
            jObj.put("box", "[4]");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Purchases");
        jObj.put("taxamount", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Purchases");
        jObj.put("box", "");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Total value of taxable purchase");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalTaxablePurchase, companyid), companyid));
            jObj.put("box", "[5]");
        } else {
            jObj.put("taxamount", totalTaxablePurchase);
            jObj.put("box", "[5]");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Purchases");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Taxes");
        jObj.put("taxamount", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Taxes");
        jObj.put("box", "");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Output tax due");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalTaxDue, companyid), companyid));
            jObj.put("box", "[6]");
        } else {
            jObj.put("taxamount", totalTaxDue);
            jObj.put("box", "[6]");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Taxes");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Less : input tax and refunds claimed");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalInputTaxClaimed, companyid), companyid));
            jObj.put("box", "[7]");
        } else {
            jObj.put("taxamount", totalInputTaxClaimed);
            jObj.put("box", "[7]");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Taxes");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Equal : Net GST to be paid to IRAS");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(netGSTPaidToIRAS, companyid), companyid));
            jObj.put("box", "[8]");
        } else {
            jObj.put("taxamount", netGSTPaidToIRAS);
            jObj.put("box", "[8]");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Taxes");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Applicable to Taxable Persons under Major Exporter Scheme / Approved 3rd Party Logistics Company / Other Approved Schemes Only");
        jObj.put("taxamount", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Applicable to Taxable Persons under Major Exporter Scheme / Approved 3rd Party Logistics Company / Other Approved Schemes Only");
        jObj.put("box", "");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Total value of goods imported under this scheme");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalGoodsImported, companyid), companyid));
            jObj.put("box", "[9]");
        } else {
            jObj.put("taxamount", totalGoodsImported);
            jObj.put("box", "[9]");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Applicable to Taxable Persons under Major Exporter Scheme / Approved 3rd Party Logistics Company / Other Approved Schemes Only");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Did you make the following claims in Box 7?");
        jObj.put("taxamount", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Did you make the following claims in Box 7?");
        jObj.put("box", "");
        jArr.put(jObj);

        String[] didYouMake = {"Did you claim for GST you had refunded to tourists?", "Yes No",
            "Did you make any bad debt relief claims?", "Yes No",
            "Did you make any pre-registration claims?", "Yes No"};
        int boxNum = 10;
        for (int i = 0; i < didYouMake.length; i++) {
            jObj = new JSONObject();
            jObj.put("taxname", didYouMake[i]);
            jObj.put("taxamount", "");
            jObj.put("level", headerLevel);
            if (didYouMake[i].equalsIgnoreCase("Yes No")) {
                jObj.put("fmt", "radio");
            } else {
                if (isForExport) {
                    jObj.put("box", "[" + boxNum + "]");
                } else {
                    jObj.put("box", "[" + boxNum + "]");
                }

                boxNum++;
            }
            jObj.put("mergedCategoryData", "Did you make the following claims in Box 7?");
            jArr.put(jObj);
        }

        jObj = new JSONObject();
        jObj.put("taxname", "Revenue");
        jObj.put("taxamount", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Revenue");
        jObj.put("box", "");
        jArr.put(jObj);
        
        
        request.setAttribute("revenueonly", true);    
        double totalRevenue = 0.00;
        JSONArray jArrR = new JSONArray();
        KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
        ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);
        if (!extraCompanyPreferences.isGstIncomeGroup()) {
            JSONObject tradingAndPLObject = getTradingAndProfitLossforExport(request);
            JSONObject tradingAndPLData = tradingAndPLObject.getJSONObject(Constants.RES_data);
            JSONArray leftArr = tradingAndPLData.getJSONArray("left");
            JSONArray rightArr = tradingAndPLData.getJSONArray("right");
            
            for (int i = 0; i < leftArr.length(); i++) {
                JSONObject obj = leftArr.getJSONObject(i);
                if (obj.has("accountname")) {
                    String accountName = obj.getString("accountname");
                    if (accountName.equalsIgnoreCase("Total for Income")) {
                        if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                            double amount = obj.optDouble("amountInSelectedCurrency",0.0);
                            totalRevenue += amount;
                        } else {
                            double amount = obj.optDouble("amount",0.0);
                            totalRevenue += amount;
                        }
                    }
                }
            }

            for (int i = 0; i < rightArr.length(); i++) {
                JSONObject obj = rightArr.getJSONObject(i);
                if (obj.has("accountname")) {
                    String accountName = obj.getString("accountname");
                    if (accountName.equalsIgnoreCase("Total for Income")) {
                        if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                            double amount = obj.optDouble("amountInSelectedCurrency",0.0);
                            totalRevenue += amount;
                        } else {
                            double amount = obj.optDouble("amount",0.0);
                            totalRevenue += amount;
                        }
                    }
                }
            }
        }else{
            /* ERP-26135 (SDP-3417)
             * If Total Revenue based on account Nature flag is true from companypreferance then total revenue amount is addition of used 
             * account map with nature as income type .
             */
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);        
            double tradingAmount[] = accReportsService.getTrading(paramJobj, Group.NATURE_INCOME, jArrR, false,null);
            double tradingAmount1[] = accReportsService.getProfitLoss(paramJobj, Group.NATURE_INCOME, jArrR, false,null);
            totalRevenue = tradingAmount[0];
            totalRevenue += tradingAmount1[0];
            totalRevenue = totalRevenue * (-1);
        }

        jObj = new JSONObject();
        jObj.put("taxname", "Revenue for the accounting period");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalRevenue, companyid), companyid));
        } else {
            jObj.put("taxamount", totalRevenue);
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Revenue");
        if (isForExport) {
            jObj.put("box", "[13]");
        } else {
            jObj.put("box", "[13]");
        }
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Declaration");
        jObj.put("taxamount", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Declaration");
        jObj.put("box", "");
        jArr.put(jObj);

        String[] declarationsForExport = {"I declare that the information given above is true and complete."};

        String[] declarationsForExportFilledIn = {"Name of Declarant :", "Declarant Id :          ", "Designation :          ", "Contact Person :    ","Contact Tel. No :     "};

        String[] declarations = {"I declare that the information given above is true and complete."};

        String[] declarationsFilledIn = {"Name of Declarant:<span style='margin-left:0px;padding-left:40px;'></span>",
            "Declarant Id:<span style='margin-left:0px;padding-left:81px;'></span>",
            "Designation:<span style='margin-left:0px;padding-left:83px;'></span>",
            "Contact Person:<span style='margin-left:0px;padding-left:62px;'></span>",
//            "Contact Tel. No:<span style='margin-left:0px;padding-left:62px;'></span>"};
            "Contact Tel. No:<span style='margin-left:0px;padding-left:62px;'></span>",
            "Contact Person Email Id:<span style='margin-left:0px;padding-left:7px;'></span>"};

        if (isForExport) {
            for (int i = 0; i < declarationsForExport.length; i++) {
                jObj = new JSONObject();
                jObj.put("taxname", declarationsForExport[i]);
                jObj.put("taxamount", "");
                jObj.put("level", headerLevel);
                jObj.put("mergedCategoryData", "Declaration");
                jObj.put("box", "");
                jArr.put(jObj);
            }
            for (int i = 0; i < declarationsForExportFilledIn.length; i++) {
                jObj = new JSONObject();
                jObj.put("taxname", declarationsForExportFilledIn[i] + valueTextField.get(i));
                jObj.put("taxamount", "");
                jObj.put("level", headerLevel);
                jObj.put("mergedCategoryData", "Declaration");
                jObj.put("box", "");
                jArr.put(jObj);
            }
        } else {
            for (int i = 0; i < declarations.length; i++) {
                jObj = new JSONObject();
                jObj.put("taxname", declarations[i]);
                jObj.put("taxamount", "");
                jObj.put("level", headerLevel);
                jObj.put("mergedCategoryData", "Declaration");
                jObj.put("box", "");
                jArr.put(jObj);
            }
            for (int i = 0; i < declarationsFilledIn.length; i++) {
                jObj = new JSONObject();
                jObj.put("taxname", declarationsFilledIn[i]);
                jObj.put("taxamount", "");
                jObj.put("level", headerLevel);
                jObj.put("mergedCategoryData", "Declaration");
                jObj.put("fmt", "textbox");
                jObj.put("id", "id" + i);
                jObj.put("box", "");
                jArr.put(jObj);
            }
        }
        return jArr;
    }

 private JSONArray getMalasianGSTForm5DetailedJSONArray(HttpServletRequest request, boolean isForExport) throws JSONException, SessionExpiredException, ParseException, ServiceException, Exception {
        String fileType = "";
        java.io.ByteArrayOutputStream baos = null;

        String companyid = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
        Company company = (Company) cpresult.getEntityList().get(0);

        Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
        Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));

        // isProperPeriodSelectedForDmRIRR will be true only if start date is 1st date and end date is last date of month
        boolean isProperPeriodSelectedForDmRIRR = false;
        Calendar cal = Calendar.getInstance();
        cal.setTime(startDate);
        if (cal.getActualMinimum(Calendar.DAY_OF_MONTH) == cal.get(Calendar.DAY_OF_MONTH)) {
            cal.setTime(endDate);
            if (cal.getActualMaximum(Calendar.DAY_OF_MONTH) == cal.get(Calendar.DAY_OF_MONTH)) {
                isProperPeriodSelectedForDmRIRR = true;
            }
        }
        request.setAttribute("issales", true);
        String withoutinventory = request.getParameter("withoutinventory");

        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put("endDate", endDate);
        requestParams.put("startDate", startDate);
        requestParams.put("excludeRetailPurchaseInvoice", true);//in case of Malaysian Company Retail Purchase invoice will not be included at here as we will deal with it seperately

        String rmcurrencyid = "", rmcurrencysymbol = "", rmcurrencyname = "", rmcurrencycode = "";
        if (company.getCountry().getID().equals(Constants.malaysian_country_id)) {
            requestParams.put("gstFlag", true);
            request.setAttribute("filterCurrency", Constants.RMID);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), Constants.RMID);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            rmcurrencyid = currency.getCurrencyID();
            rmcurrencysymbol = currency.getSymbol();
            rmcurrencyname = currency.getName();
            rmcurrencycode = currency.getCurrencyCode();
        }

        requestParams.put("withoutinventory", withoutinventory);
        requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));


        requestParams.put("locale", RequestContextUtils.getLocale(request));
        requestParams.put(Constants.onlydateformat, authHandler.getOnlyDateFormat(request));

        String searchJson = request.getParameter(Constants.Acc_Search_Json);
        String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
        if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
            requestParams.put(Constants.Acc_Search_Json, searchJson);
            requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
        }
        boolean isAdvanceSearch = requestParams.containsKey(Constants.isAdvanceSearch) ? (Boolean) requestParams.get(Constants.isAdvanceSearch) : false;
        int gstGuideVersion = accGstService.getGSTGuideVersion(requestParams);

        

//        Set purchaseTaxSet = new HashSet();
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_TX_TAX_CODE);
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_IM_TAX_CODE);
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_IS_TAX_CODE);
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_BL_TAX_CODE);
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_NR_TAX_CODE);
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_ZP_TAX_CODE);
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_EP_TAX_CODE);
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_OP_TAX_CODE);
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_TX_E43_TAX_CODE);
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_TX_N43_TAX_CODE);
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_TX_RE_TAX_CODE);
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_GP_N43_TAX_CODE);
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_AJP_TAX_CODE);
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_TX_CG_TAX_CODE);
        
        String TXTaxCode = Constants.MALAYSIAN_GST_TX_TAX_CODE;
        String TXCGTaxCode = Constants.MALAYSIAN_GST_TX_CG_TAX_CODE;
        String IMTaxCode = Constants.MALAYSIAN_GST_IM_TAX_CODE;
//        String TXE43TaxCode = Constants.MALAYSIAN_GST_TX_E43_TAX_CODE;    //TX-E43 Renamed as TX-IES
        String TXIESTaxCode = Constants.MALAYSIAN_GST_TX_IES_TAX_CODE;
        String TXRETaxCode = Constants.MALAYSIAN_GST_TX_RE_TAX_CODE;
        String AJPTaxCode = Constants.MALAYSIAN_GST_AJP_TAX_CODE;
        String ISTaxCode = Constants.MALAYSIAN_GST_IS_TAX_CODE;
        String GSTaxCode = Constants.MALAYSIAN_GST_GS_TAX_CODE;
        String OSTaxCode = Constants.MALAYSIAN_GST_OS_TAX_CODE;
        String TXFRSTaxCode = Constants.MALAYSIAN_GST_TX_FRS_TAX_CODE;
        String OSTXMTaxCode = Constants.MALAYSIAN_GST_OS_TXM_TAX_CODE;
        String TXESTaxCode = Constants.MALAYSIAN_GST_TX_ES_TAX_CODE;

        String IMCGTaxCode = Constants.MALAYSIAN_GST_IM_CG_CODE;
        double totalIMCGAmountExcludingGST = 0;
        double totalISAmountExcludingGST = 0.00;

        double gstSuspendedTax = 0;

//        Set importedTaxSet = new HashSet();
//        importedTaxSet.add("GST(IM)");
//        importedTaxSet.add("ME");

        int innerContentLevel = 2;

        JSONArray jObj2ndLevelBox6aArr = new JSONArray();
        JSONArray jObj2ndLevelBox6bJArr = new JSONArray();
        JSONArray jObj2ndLevelGoodsImportedJArr = new JSONArray();
        JSONArray jObj2ndLevelGSTSuspendedJArr = new JSONArray();

        double totalPurchaseAmountExcludingTax = 0;
        double totalPurchaseTax = 0;
        boolean isExport = (request.getAttribute("isExport") == null) ? false : true;//flag for Jasper

//        Set salesTaxSet = new HashSet();
//        salesTaxSet.add(Constants.MALAYSIAN_GST_DS_TAX_CODE);
//        salesTaxSet.add(Constants.MALAYSIAN_GST_SR_TAX_CODE);
//        salesTaxSet.add(Constants.MALAYSIAN_GST_ZRL_TAX_CODE);
//        salesTaxSet.add(Constants.MALAYSIAN_GST_ZRE_TAX_CODE);
//        salesTaxSet.add(Constants.MALAYSIAN_GST_ES43_TAX_CODE);
//        salesTaxSet.add(Constants.MALAYSIAN_GST_OS_TAX_CODE);
//        salesTaxSet.add(Constants.MALAYSIAN_GST_ES_TAX_CODE);
//        salesTaxSet.add(Constants.MALAYSIAN_GST_RS_TAX_CODE);
//        salesTaxSet.add(Constants.MALAYSIAN_GST_GS_TAX_CODE);
//        salesTaxSet.add(Constants.MALAYSIAN_GST_AJS_TAX_CODE);

        JSONArray jObj2ndLevelBox6JArr = new JSONArray();
        JSONArray jObj2ndLevelBox61JArr = new JSONArray();
        JSONArray jObj2ndLevelZRLJArr = new JSONArray();
        JSONArray jObj2ndLevelZREJArr = new JSONArray();
        JSONArray jObj2ndLevelExemptJArr = new JSONArray();
        JSONArray jObj2ndLevelGSTGrantedReliefJArr = new JSONArray();
        JSONArray jObj2ndLevelRSJArr = new JSONArray();
        JSONArray jObj2ndLevelOtherSuppliesJArr = new JSONArray();

        double totalSalesAmountExcludingTax = 0;
        double totalSalesTax = 0;
        String taxCodeSR7PercentSupplies = Constants.MALAYSIAN_GST_SR_TAX_CODE;
        String taxCodeDSPercentSupplies = Constants.MALAYSIAN_GST_DS_TAX_CODE;
        String AJSTaxCode = Constants.MALAYSIAN_GST_AJS_TAX_CODE;
        String SRMSTaxCode = Constants.MALAYSIAN_GST_SR_MS_TAX_CODE;
        String SRJWSTaxCode = Constants.MALAYSIAN_GST_SR_JWS_TAX_CODE;

        double totalZeroRateSupplyAmount = 0.00;     //Total value of Local Zero-Rated supplies = totalZRLAmount + totalNTXAmount
        double totalValueofOtherSupplies = 0;
//        double totalZRLAmount = 0.00; // item #1
        String ZRLTaxCode = Constants.MALAYSIAN_GST_ZRL_TAX_CODE;
        String NTXTaxCode = Constants.MALAYSIAN_GST_NTX_TAX_CODE;
        
        double totalExportSupplyAmount = 0.00;//Total Value of exported supplies = totalZREAmount + totalZDAAmount
//        double totalZREAmount = 0.00; // item #1
        String ZRETaxCode = Constants.MALAYSIAN_GST_ZRE_TAX_CODE;
        String ZDATaxCode = Constants.MALAYSIAN_GST_ZDA_TAX_CODE;
//        String ES43TaxCode = Constants.MALAYSIAN_GST_ES43_TAX_CODE;   //ES43 renamed as IES.
        
        String IESTaxCode = Constants.MALAYSIAN_GST_IES_TAX_CODE;
        String ESTaxCode = Constants.MALAYSIAN_GST_ES_TAX_CODE;

        double totalRSAmount = 0.00; // item #1
        String RSTaxCode = Constants.MALAYSIAN_GST_RS_TAX_CODE;
        double totalESSupplyAmountWithoutTax = 0.00;
        double totalExemptSupplyAmount = 0.00;

        double DmR_Variable_T = 0.0d;   // T = SR + ZRL + ZDA + ZRE + DS + RS + GS + OS-TXM + NTX (amount without tax)...... Definition given by IRAS
        double DmR_Variable_E = 0.0d;   // E = ES (amount without tax)...... Definition given by IRAS
        double DmR_Variable_O = 0.0d;
        double DmR_figure = 0.0d;
        double DmR_figureInPercentage = 0.0d;
        double IRR_figureInPercentage = 0.0d;
        boolean DmRQualify = false;

        requestParams.put("issales", true);
        requestParams.put("isSalesTax", true);
        JSONObject msicsJosn = new JSONObject();
        /**
         * isForExport true used in getCalculatedTaxGST to calculated MSIC tax
         */
        requestParams.put("isForExport", true);
        JSONArray salesjArr = getCalculatedTaxGST(requestParams, fileType);
        requestParams.remove("isForExport");
        for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
            boolean isOutputTax = false;
            JSONObject salesObj = salesjArr.getJSONObject(jsonVal);
            String taxCode = salesObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
            String name = salesObj.getString("invname"); // should refer to taxcode or mergedResourceData?
            String journalEntryNo = salesObj.getString("journalEntryNo"); // should refer to taxcode or mergedResourceData?
            String invno = salesObj.getString("invno"); // should refer to taxcode or mergedResourceData?
            String billid = salesObj.has(Constants.billid) ? salesObj.getString(Constants.billid) : "";
            String noteid = salesObj.has("noteid") ? salesObj.getString("noteid") : "";
            String type = salesObj.has("type") ? salesObj.getString("type") : "";
            String jeid = salesObj.has("jeid") ? salesObj.getString("jeid") : "";
            String jedate = salesObj.has("jedate") ? salesObj.getString("jedate") : "";
            double invamt = salesObj.getDouble("invamt");
            double invtaxamount = salesObj.getDouble("invtaxamount");
            String memo = salesObj.has("memo")?salesObj.optString("memo",""):"";
            
            JSONObject jObj2ndLevelBox1 = new JSONObject();
            jObj2ndLevelBox1.put("taxname", taxCode);
            jObj2ndLevelBox1.put("transactionid", invno);
            jObj2ndLevelBox1.put("journalentry", journalEntryNo);
            jObj2ndLevelBox1.put(Constants.billid, billid);
            jObj2ndLevelBox1.put("noteid", noteid);
            jObj2ndLevelBox1.put("type", type);
            jObj2ndLevelBox1.put("jeid", jeid);
            jObj2ndLevelBox1.put("jedate", jedate);
            jObj2ndLevelBox1.put("name", name);
            jObj2ndLevelBox1.put("memo", memo);
            jObj2ndLevelBox1.put("box", "");
            jObj2ndLevelBox1.put("level", innerContentLevel);

            if (taxCodeSR7PercentSupplies.equalsIgnoreCase(taxCode) || taxCodeDSPercentSupplies.equalsIgnoreCase(taxCode) || SRMSTaxCode.equalsIgnoreCase(taxCode)) {
                isOutputTax = true;
                double salesValue = invamt - invtaxamount;
                double taxClaimed = invtaxamount;

                totalSalesAmountExcludingTax += salesValue;
                totalSalesTax += taxClaimed;

                if(!SRMSTaxCode.equalsIgnoreCase(taxCode)){
                    DmR_Variable_T += invamt - invtaxamount;      //SR-MS tax is included in De minimis rule and in IIR.
                }
                    
                // maintaining sub data
                JSONObject jObj2ndLevelBox6 = new JSONObject();
                jObj2ndLevelBox6.put("taxname", taxCode);
                jObj2ndLevelBox6.put("transactionid", invno);
                jObj2ndLevelBox6.put("journalentry", journalEntryNo);
                jObj2ndLevelBox6.put(Constants.billid, billid);
                jObj2ndLevelBox6.put("noteid", noteid);
                jObj2ndLevelBox6.put("type", type);
                jObj2ndLevelBox6.put("jeid", jeid);
                jObj2ndLevelBox6.put("jedate", jedate);
                jObj2ndLevelBox6.put("name", name);
                jObj2ndLevelBox6.put("level", innerContentLevel);
                jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(salesValue, companyid) : salesValue);
                jObj2ndLevelBox6.put("memo", memo);
                jObj2ndLevelBox6.put("box", "");
                jObj2ndLevelBox6.put("mergedCategoryData", "Total value of standard rated supply");
                jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
                jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
                jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
                jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
                jObj2ndLevelBox6.put("GroupType", "Output Tax");
                jObj2ndLevelBox6JArr.put(jObj2ndLevelBox6);

                JSONObject jObj2ndLevelBox61 = new JSONObject();
                jObj2ndLevelBox61.put("taxname", taxCode);
                jObj2ndLevelBox61.put("transactionid", invno);
                jObj2ndLevelBox61.put("journalentry", journalEntryNo);
                jObj2ndLevelBox61.put(Constants.billid, billid);
                jObj2ndLevelBox61.put("noteid", noteid);
                jObj2ndLevelBox61.put("type", type);
                jObj2ndLevelBox61.put("jeid", jeid);
                jObj2ndLevelBox61.put("jedate", jedate);
                jObj2ndLevelBox61.put("name", name);
                jObj2ndLevelBox61.put("level", innerContentLevel);

                jObj2ndLevelBox61.put("taxamount", taxClaimed);
                jObj2ndLevelBox61.put("memo", memo);
                jObj2ndLevelBox61.put("box", "");
                jObj2ndLevelBox61.put("mergedCategoryData", "Total Output Tax (Supply * GST Rate)");
                jObj2ndLevelBox61.put(Constants.currencyKey, rmcurrencyid);
                jObj2ndLevelBox61.put("currencysymbol", rmcurrencysymbol);
                jObj2ndLevelBox61.put("currencyname", rmcurrencyname);
                jObj2ndLevelBox61.put("currencycode", rmcurrencycode);
                jObj2ndLevelBox61.put("GroupType", "Output Tax");
                jObj2ndLevelBox61JArr.put(jObj2ndLevelBox61);
            }

            if (AJSTaxCode.equalsIgnoreCase(taxCode)) {
                isOutputTax = true;
                double taxClaimed = invtaxamount;

                totalSalesTax += taxClaimed;

                JSONObject jObj2ndLevelBox61 = new JSONObject();
                jObj2ndLevelBox61.put("taxname", taxCode);
                jObj2ndLevelBox61.put("transactionid", invno);
                jObj2ndLevelBox61.put("journalentry", journalEntryNo);
                jObj2ndLevelBox61.put(Constants.billid, billid);
                jObj2ndLevelBox61.put("type", type);
                jObj2ndLevelBox61.put("jeid", jeid);
                jObj2ndLevelBox61.put("jedate", jedate);
                jObj2ndLevelBox61.put("noteid", noteid);
                jObj2ndLevelBox61.put("name", name);
                jObj2ndLevelBox61.put("level", innerContentLevel);
                jObj2ndLevelBox61.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(taxClaimed, companyid) : taxClaimed);
                jObj2ndLevelBox61.put("memo", memo);
                jObj2ndLevelBox61.put("box", "");
                jObj2ndLevelBox61.put("mergedCategoryData", "Total Output Tax (Supply * GST Rate)");
                jObj2ndLevelBox61.put(Constants.currencyKey, rmcurrencyid);
                jObj2ndLevelBox61.put("currencysymbol", rmcurrencysymbol);
                jObj2ndLevelBox61.put("currencyname", rmcurrencyname);
                jObj2ndLevelBox61.put("currencycode", rmcurrencycode);
                jObj2ndLevelBox61.put("GroupType", "Output Tax");
                jObj2ndLevelBox61JArr.put(jObj2ndLevelBox61);
            }
            
            if (gstGuideVersion == Constants.GSTGuideDec2017_Version) {
                if (SRJWSTaxCode.equalsIgnoreCase(taxCode)) {
                    isOutputTax = true;
                    /*
                     * Total amount included in 5a for tax SR-JWS as per GUIDE_ON_ACCOUNTING_SOFTWARE_02MAC2017.pdf under Question Q11. Guide attached in ERP-34007.
                     */
                    double salesValue = invamt;
                    totalSalesAmountExcludingTax += salesValue;

                JSONObject jObj2ndLevelBox6 = new JSONObject();
                jObj2ndLevelBox6.put("taxname", taxCode);
                jObj2ndLevelBox6.put("transactionid", invno);
                jObj2ndLevelBox6.put("journalentry", journalEntryNo);
                jObj2ndLevelBox6.put(Constants.billid, billid);
                jObj2ndLevelBox6.put("noteid", noteid);
                jObj2ndLevelBox6.put("type", type);
                jObj2ndLevelBox6.put("jeid", jeid);
                jObj2ndLevelBox6.put("jedate", jedate);
                jObj2ndLevelBox6.put("name", name);
                jObj2ndLevelBox6.put("memo", memo);
                jObj2ndLevelBox6.put("level", innerContentLevel);
                jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(salesValue, companyid) : salesValue);
                jObj2ndLevelBox6.put("box", "");
                jObj2ndLevelBox6.put("mergedCategoryData", "Total value of standard rated supply");
                jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
                jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
                jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
                jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
                jObj2ndLevelBox6.put("GroupType", "Output Tax");
                jObj2ndLevelBox6JArr.put(jObj2ndLevelBox6);

                }

                if (NTXTaxCode.equalsIgnoreCase(taxCode)) {
                    double salesValue = invamt;
                    totalZeroRateSupplyAmount += salesValue;//Total value of Local Zero-Rated supplies = totalZRLAmount + totalNTXAmount

//                    DmR_Variable_T += invamt - invtaxamount;
                    // maintaining sub data
                    JSONObject jObj2ndLevelBox6 = new JSONObject();
                    jObj2ndLevelBox6.put("taxname", taxCode);
                    jObj2ndLevelBox6.put("transactionid", invno);
                    jObj2ndLevelBox6.put("journalentry", journalEntryNo);
                    jObj2ndLevelBox6.put(Constants.billid, billid);
                    jObj2ndLevelBox6.put("noteid", noteid);
                    jObj2ndLevelBox6.put("type", type);
                    jObj2ndLevelBox6.put("jeid", jeid);
                    jObj2ndLevelBox6.put("jedate", jedate);
                    jObj2ndLevelBox6.put("name", name);
                    jObj2ndLevelBox6.put("level", innerContentLevel);
                    jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(salesValue, companyid) : salesValue);
                    jObj2ndLevelBox6.put("box", "");
                    jObj2ndLevelBox6.put("mergedCategoryData", "Total value of Local Zero-Rated supplies");
                    jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
                    jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
                    jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
                    jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
                    jObj2ndLevelBox6.put("GroupType", "Additional Information");
                    jObj2ndLevelZRLJArr.put(jObj2ndLevelBox6);
                }
            }
            if (NTXTaxCode.equalsIgnoreCase(taxCode)) {
                DmR_Variable_T += invamt - invtaxamount;
            }

            if (ZRLTaxCode.equalsIgnoreCase(taxCode)) {
                double salesValue = invamt;
                totalZeroRateSupplyAmount += salesValue;//Total value of Local Zero-Rated supplies = totalZRLAmount + totalNTXAmount

                DmR_Variable_T += invamt - invtaxamount;

                // maintaining sub data
                JSONObject jObj2ndLevelBox6 = new JSONObject();
                jObj2ndLevelBox6.put("taxname", taxCode);
                jObj2ndLevelBox6.put("transactionid", invno);
                jObj2ndLevelBox6.put("journalentry", journalEntryNo);
                jObj2ndLevelBox6.put(Constants.billid, billid);
                jObj2ndLevelBox6.put("noteid", noteid);
                jObj2ndLevelBox6.put("type", type);
                jObj2ndLevelBox6.put("jeid", jeid);
                jObj2ndLevelBox6.put("jedate", jedate);
                jObj2ndLevelBox6.put("name", name);
                jObj2ndLevelBox6.put("level", innerContentLevel);
                jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(salesValue, companyid) : salesValue);
                jObj2ndLevelBox6.put("memo", memo);
                jObj2ndLevelBox6.put("box", "");
                jObj2ndLevelBox6.put("mergedCategoryData", "Total value of Local Zero-Rated supplies");
                jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
                jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
                jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
                jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
                jObj2ndLevelBox6.put("GroupType", "Additional Information");
                jObj2ndLevelZRLJArr.put(jObj2ndLevelBox6);
            }

            if (ZRETaxCode.equalsIgnoreCase(taxCode) || ZDATaxCode.equalsIgnoreCase(taxCode)) {
                totalExportSupplyAmount += invamt;//Total Value of exported supplies = totalZREAmount + totalZDAAmount

                DmR_Variable_T += invamt - invtaxamount;

                // maintaining sub data
                JSONObject jObj2ndLevelBox6 = new JSONObject();
                jObj2ndLevelBox6.put("taxname", taxCode);
                jObj2ndLevelBox6.put("transactionid", invno);
                jObj2ndLevelBox6.put("journalentry", journalEntryNo);
                jObj2ndLevelBox6.put(Constants.billid, billid);
                jObj2ndLevelBox6.put("noteid", noteid);
                jObj2ndLevelBox6.put("type", type);
                jObj2ndLevelBox6.put("jeid", jeid);
                jObj2ndLevelBox6.put("jedate", jedate);
                jObj2ndLevelBox6.put("name", name);
                jObj2ndLevelBox6.put("level", innerContentLevel);
                jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invamt, companyid) : invamt);
                jObj2ndLevelBox6.put("memo", memo);
                jObj2ndLevelBox6.put("box", "");
                jObj2ndLevelBox6.put("mergedCategoryData", "Total value of Exported supplies");
                jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
                jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
                jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
                jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
                jObj2ndLevelBox6.put("GroupType", "Additional Information");
                jObj2ndLevelZREJArr.put(jObj2ndLevelBox6);
            }

            //ES43 renamed as IES.
            if (IESTaxCode.equalsIgnoreCase(taxCode) || ESTaxCode.equalsIgnoreCase(taxCode)) {
                totalExemptSupplyAmount += invamt;

                // maintaining sub data
                JSONObject jObj2ndLevelBox6 = new JSONObject();
                jObj2ndLevelBox6.put("taxname", taxCode);
                jObj2ndLevelBox6.put("transactionid", invno);
                jObj2ndLevelBox6.put("journalentry", journalEntryNo);
                jObj2ndLevelBox6.put(Constants.billid, billid);
                jObj2ndLevelBox6.put("noteid", noteid);
                jObj2ndLevelBox6.put("jeid", jeid);
                jObj2ndLevelBox6.put("jedate", jedate);
                jObj2ndLevelBox6.put("type", type);
                jObj2ndLevelBox6.put("name", name);
                jObj2ndLevelBox6.put("level", innerContentLevel);
                jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invamt, companyid) : invamt);
                jObj2ndLevelBox6.put("memo", memo);
                jObj2ndLevelBox6.put("box", "");
                jObj2ndLevelBox6.put("mergedCategoryData", "Total value of exempt supplies");
                jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
                jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
                jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
                jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
                jObj2ndLevelBox6.put("GroupType", "Additional Information");
                jObj2ndLevelGSTGrantedReliefJArr.put(jObj2ndLevelBox6);
                jObj2ndLevelExemptJArr.put(jObj2ndLevelBox6);
            }

            if (RSTaxCode.equalsIgnoreCase(taxCode)) {
                totalRSAmount += invamt;

                // maintaining sub data
                DmR_Variable_T += invamt - invtaxamount;
                JSONObject jObj2ndLevelBox6 = new JSONObject();
                jObj2ndLevelBox6.put("taxname", taxCode);
                jObj2ndLevelBox6.put("transactionid", invno);
                jObj2ndLevelBox6.put("journalentry", journalEntryNo);
                jObj2ndLevelBox6.put(Constants.billid, billid);
                jObj2ndLevelBox6.put("noteid", noteid);
                jObj2ndLevelBox6.put("type", type);
                jObj2ndLevelBox6.put("jeid", jeid);
                jObj2ndLevelBox6.put("jedate", jedate);
                jObj2ndLevelBox6.put("name", name);
                jObj2ndLevelBox6.put("level", innerContentLevel);
                jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invamt, companyid) : invamt);
                jObj2ndLevelBox6.put("memo", memo);
                jObj2ndLevelBox6.put("box", "");
                jObj2ndLevelBox6.put("mergedCategoryData", "Total value supplies Granted GST supplies");
                jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
                jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
                jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
                jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
                jObj2ndLevelBox6.put("GroupType", "Additional Information");
                jObj2ndLevelRSJArr.put(jObj2ndLevelBox6);
            }

            if (gstGuideVersion == Constants.GSTGuideMarch2018_Version) {
                if (OSTaxCode.equalsIgnoreCase(taxCode) || GSTaxCode.equalsIgnoreCase(taxCode) || OSTXMTaxCode.equalsIgnoreCase(taxCode) || NTXTaxCode.equalsIgnoreCase(taxCode) || SRJWSTaxCode.equalsIgnoreCase(taxCode)) {
                    double salesValue = invamt;
                    totalValueofOtherSupplies += salesValue;//Total Value of Other Supplies.

                    JSONObject jObj2ndLevelBox15 = new JSONObject();
                    jObj2ndLevelBox15.put("taxname", taxCode);
                    jObj2ndLevelBox15.put("transactionid", invno);
                    jObj2ndLevelBox15.put("journalentry", journalEntryNo);
                    jObj2ndLevelBox15.put(Constants.billid, billid);
                    jObj2ndLevelBox15.put("noteid", noteid);
                    jObj2ndLevelBox15.put("type", type);
                    jObj2ndLevelBox15.put("jeid", jeid);
                    jObj2ndLevelBox15.put("jedate", jedate);
                    jObj2ndLevelBox15.put("name", name);
                    jObj2ndLevelBox15.put("level", innerContentLevel);
                    jObj2ndLevelBox15.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(salesValue, companyid) : salesValue);
                    jObj2ndLevelBox15.put("memo", memo);
                    jObj2ndLevelBox15.put("box", "");
                    jObj2ndLevelBox15.put("mergedCategoryData", "Total Value of Other Supplies");
                    jObj2ndLevelBox15.put(Constants.currencyKey, rmcurrencyid);
                    jObj2ndLevelBox15.put("currencysymbol", rmcurrencysymbol);
                    jObj2ndLevelBox15.put("currencyname", rmcurrencyname);
                    jObj2ndLevelBox15.put("currencycode", rmcurrencycode);
                    jObj2ndLevelBox15.put("GroupType", "Additional Information");
                    jObj2ndLevelOtherSuppliesJArr.put(jObj2ndLevelBox15);
                }
            }
            
            if (ESTaxCode.equalsIgnoreCase(taxCode)) {
                DmR_Variable_E += invamt - invtaxamount;
                totalESSupplyAmountWithoutTax += invamt - invtaxamount;
            }
            if (GSTaxCode.equals(taxCode)) {
                DmR_Variable_T += invamt - invtaxamount;
            }
//            if (OSTaxCode.equals(taxCode)) {
//                DmR_Variable_T += invamt - invtaxamount; //Commented this block due to OS tax is not included in De minimis rule and in IIR.
//            }
            if (OSTXMTaxCode.equalsIgnoreCase(taxCode)) {
                DmR_Variable_T += invamt - invtaxamount;
            }
            
            /**
             * MSIC tax calculated only for those Taxes which marked as isOutputTax true
             */
            if (isOutputTax && salesObj.has(Constants.MSIC_DETAIS_JSON)) {
                JSONArray jarray = salesObj.getJSONArray(Constants.MSIC_DETAIS_JSON);
                if (jarray != null) {
                    for (int i = 0; i < jarray.length(); i++) {
                        JSONObject jobj = jarray.getJSONObject(i);
                        String msiccode = jobj.optString(Constants.MSIC_CODE, "");
                        double industrytax = jobj.optDouble(Constants.MSIC_INVTAXAMT, 0);
                        if (msicsJosn.has(msiccode)) {
                            double industrytaxprsent = msicsJosn.optDouble(msiccode, 0); // Current total plus added amount entry
                            msicsJosn.put(msiccode, industrytax + industrytaxprsent);
                        } else {
                            msicsJosn.put(msiccode, industrytax);
                        }
                    }
                }
            }
        }
        
        // Capital Goods Acquired         
        JSONArray jObj2ndLevelCapitalJArr = new JSONArray();

        JSONArray capitalArr = getCapitalGoodsAcquiredJsonArray(request);
        double capitalGoodsAcquireAmt = 0;

        for (int i = 0; i < capitalArr.length(); i++) {

            JSONObject jobj = capitalArr.getJSONObject(i);
            String taxCode = jobj.getString("taxcode");
            String invno = jobj.getString("invno");
            String billid = jobj.has(Constants.billid) ? jobj.getString(Constants.billid) : "";
            String jeid = jobj.has("jeid") ? jobj.getString("jeid") : "";
            String jedate = jobj.has("jedate") ? jobj.getString("jedate") : "";
            String type = jobj.has("type") ? jobj.getString("type") : "";
            String journalEntryNo = jobj.getString("journalEntryNo");
            String name = jobj.getString("invname");
            String memo = jobj.has("memo")?jobj.optString("memo",""):"";
            double invtaxamount = jobj.optDouble("invtaxamount", 0);
            double invamt = jobj.optDouble("invamt", 0);

            double invamtExcludingTax = invamt - invtaxamount;

            capitalGoodsAcquireAmt += invamtExcludingTax;

            JSONObject jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCode);
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invamtExcludingTax, companyid) : invamtExcludingTax);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total value of Capital Goods Acquired");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("GroupType", "Additional Information");
            jObj2ndLevelCapitalJArr.put(jObj2ndLevelBox6);
        }

        // Bad Debt Claimed
        JSONArray jObj2ndLevelBadClaimedJArr = new JSONArray();

        JSONArray badClaimedArr = getBadDebtClaimedInvoicesJSON(request);
        double badDebtClaimedAmt = 0;

        for (int i = 0; i < badClaimedArr.length(); i++) {
            JSONObject jobj = badClaimedArr.getJSONObject(i);
            String taxCode = jobj.getString("taxcode");
            String invno = jobj.getString("invno");
            String billid = jobj.has(Constants.billid) ? jobj.getString(Constants.billid) : "";
            String jeid = jobj.has("jeid") ? jobj.getString("jeid") : "";
            String jedate = jobj.has("jedate") ? jobj.getString("jedate") : "";
            String type = jobj.has("type") ? jobj.getString("type") : "";
            String journalEntryNo = jobj.getString("journalEntryNo");
            String name = jobj.getString("invname");
            String memo = jobj.has("memo")?jobj.optString("memo",""):"";
            double invtaxamount = jobj.optDouble("invtaxamount", 0);
            double invamt = jobj.optDouble("invamt", 0);

            /*
             * Previously, invoice amount excluding GST was been put in Json. As
             * per told by Paritosh sir, amount including GST is shown now.
             * Refer ERP-9720
             */
            badDebtClaimedAmt += invamt;
            totalPurchaseTax += invtaxamount;

            JSONObject jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCode);
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invamt, companyid) : invamt);                    // ERP-9720
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Bad Debt Relief");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("GroupType", "Additional Information");
            jObj2ndLevelBadClaimedJArr.put(jObj2ndLevelBox6);

            jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCode);
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invtaxamount, companyid) : invtaxamount);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total Input Tax (Acquisition * GST Rate)");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("GroupType", "Input Tax");
            jObj2ndLevelBox6bJArr.put(jObj2ndLevelBox6);
        }

        //Purchase Bad Debt Claimed  
        JSONArray badPurchaseClaimedArr = getBadDebtClaimedPurchaseInvoicesJson(request);

        for (int i = 0; i < badPurchaseClaimedArr.length(); i++) {

            JSONObject jobj = badPurchaseClaimedArr.getJSONObject(i);
            String taxCode = jobj.getString("taxcode");
            String invno = jobj.getString("invno");
            String journalEntryNo = jobj.getString("journalEntryNo");
            String name = jobj.getString("invname");
            String noteid = jobj.has("noteid") ? jobj.getString("noteid") : "";
            String billid = jobj.has(Constants.billid) ? jobj.getString(Constants.billid) : "";
            String jeid = jobj.has("jeid") ? jobj.getString("jeid") : "";
            String jedate = jobj.has("jedate") ? jobj.getString("jedate") : "";
            String type = jobj.has("type") ? jobj.getString("type") : "";
            double invtaxamount = jobj.optDouble("invtaxamount", 0);
            double invamt = jobj.optDouble("invamt", 0);
            String memo = jobj.has("memo")?jobj.optString("memo",""):"";

            totalSalesTax += invtaxamount;

            JSONObject jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCode);
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("noteid", noteid);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invtaxamount, companyid) : invtaxamount);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total Output Tax (Supply * GST Rate)");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("GroupType", "Output Tax");
            jObj2ndLevelBox61JArr.put(jObj2ndLevelBox6);
        }

        // Bad Debt Recovered
        JSONArray jObj2ndLevelBadRecoverJArr = new JSONArray();

        JSONArray badRecoverArr = getBadDebtRecoveredInvoicesJson(request);
        double badDebtRecoverdAmt = 0;

        for (int i = 0; i < badRecoverArr.length(); i++) {

            JSONObject jobj = badRecoverArr.getJSONObject(i);
            String taxCode = jobj.getString("taxcode");
            String invno = jobj.optString("invno");
            String journalEntryNo = jobj.optString("journalEntryNo");
            String name = jobj.getString("invname");
            String noteid = jobj.has("noteid") ? jobj.getString("noteid") : "";
            String billid = jobj.has(Constants.billid) ? jobj.getString(Constants.billid) : "";
            String jeid = jobj.has("jeid") ? jobj.getString("jeid") : "";
            String jedate = jobj.has("jedate") ? jobj.getString("jedate") : "";
            String type = jobj.has("type") ? jobj.getString("type") : "";
            double invtaxamount = jobj.optDouble("invtaxamount", 0);
            double invamt = jobj.optDouble("invamt", 0);
            String memo = jobj.has("memo")?jobj.optString("memo",""):"";
            /*
             * Previously, invoice amount excluding GST was been put in Json. As
             * per told by Paritosh sir, amount including GST is shown now.
             * Refer ERP-9720
             */
            badDebtRecoverdAmt += invamt + invtaxamount;

            totalSalesTax += invtaxamount;

            JSONObject jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCode);
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("noteid", noteid);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount((invamt + invtaxamount), companyid) : invamt + invtaxamount);                                   //ERP-9720
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Bad Debt Recovered");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("GroupType", "Additional Information");
            jObj2ndLevelBadRecoverJArr.put(jObj2ndLevelBox6);

            jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCode);
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("noteid", noteid);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invtaxamount, companyid) : invtaxamount);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total Output Tax (Supply * GST Rate)");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("GroupType", "Output Tax");
            jObj2ndLevelBox61JArr.put(jObj2ndLevelBox6);
        }

        JSONArray badPurchaseRecoverArr = getBadDebtPurchaseRecoveredInvoicesJson(request);

        for (int i = 0; i < badPurchaseRecoverArr.length(); i++) {

            JSONObject jobj = badPurchaseRecoverArr.getJSONObject(i);
            String taxCode = jobj.getString("taxcode");
            String invno = jobj.optString("invno");
            String journalEntryNo = jobj.optString("journalEntryNo");
            String name = jobj.getString("invname");
            String noteid = jobj.has("noteid") ? jobj.getString("noteid") : "";
            String billid = jobj.has(Constants.billid) ? jobj.getString(Constants.billid) : "";
            String jeid = jobj.has("jeid") ? jobj.getString("jeid") : "";
            String jedate = jobj.has("jedate") ? jobj.getString("jedate") : "";
            String type = jobj.has("type") ? jobj.getString("type") : "";
            double invtaxamount = jobj.optDouble("invtaxamount", 0);
            double invamt = jobj.optDouble("invamt", 0);
            String memo = jobj.has("memo")?jobj.optString("memo",""):"";
             
            totalPurchaseTax += invtaxamount;

            JSONObject jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCode);
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("noteid", noteid);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invtaxamount, companyid) : invtaxamount);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total Input Tax (Acquisition * GST Rate)");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("GroupType", "Input Tax");

            jObj2ndLevelBox6bJArr.put(jObj2ndLevelBox6);
        }

        /*
         * ERP-9782 : getting Free Gift JsonArray for including into the form 03 and detailed view.
         */ 
        Map<String, Object> freeGiftJERequestMap = getRequestParamsForAppliedDeliveryOrders(request);
        JSONArray freeGiftJEArray = getFreeGiftJEJsonArray(freeGiftJERequestMap);
        for(int i=0 ;i<freeGiftJEArray.length();i++){
            JSONObject jobj = freeGiftJEArray.getJSONObject(i);
            String taxCode = jobj.getString("taxcode");
            String invno = jobj.getString("invno");
            String billid = jobj.has(Constants.billid) ? jobj.getString(Constants.billid) : "";
            String jeid = jobj.has("jeid") ? jobj.getString("jeid") : "";
            String noteid = jobj.has("noteid") ? jobj.getString("noteid") : "";
            String jedate = jobj.has("jedate") ? jobj.getString("jedate") : "";
            String type = jobj.has("type") ? jobj.getString("type") : "";
            String journalEntryNo = jobj.getString("journalEntryNo");
            String name = jobj.getString("invname");
            double invtaxamount = jobj.optDouble("invtaxamount", 0);
            double invamt = jobj.optDouble("invamt", 0);
            double invamtExcludingTax = invamt - invtaxamount;
            String memo = jobj.has("memo")?jobj.optString("memo",""):"";
            
            totalSalesTax += invtaxamount;
            totalSalesAmountExcludingTax += invamtExcludingTax;
            
            JSONObject jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCode); // Changed the tax code as mentioned in ERP-25513
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("noteid", noteid);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invamtExcludingTax, companyid) : invamtExcludingTax);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total value of standard rated supply");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("GroupType", "Output Tax");

            jObj2ndLevelBox6JArr.put(jObj2ndLevelBox6);

            jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCodeDSPercentSupplies);  // Changed the tax code as mentioned in ERP-25513
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("noteid", noteid);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invtaxamount, companyid) : invtaxamount);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total Output Tax (Supply * GST Rate)");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("GroupType", "Output Tax");
            jObj2ndLevelBox61JArr.put(jObj2ndLevelBox6);
            
        }
        
        Map<String,Object> importedServicesRequestMap = getRequestParamsForImportedServices(request);
        JSONArray importedServicesJArr = getImportedServicesInvoicesJSON(importedServicesRequestMap);

        for (int i = 0; i < importedServicesJArr.length(); i++) {

            JSONObject jobj = importedServicesJArr.getJSONObject(i);
            String taxCode = TXTaxCode;// Changed the tax code as mentioned in ERP-25513
            String invno = jobj.getString("invno");
            String journalEntryNo = jobj.getString("journalEntryNo");
            String name = jobj.getString("invname");
            String noteid = jobj.has("noteid") ? jobj.getString("noteid") : "";
            String billid = jobj.has(Constants.billid) ? jobj.getString(Constants.billid) : "";
            String jeid = jobj.has("jeid") ? jobj.getString("jeid") : "";
            String jedate = jobj.has("jedate") ? jobj.getString("jedate") : "";
            String type = jobj.has("type") ? jobj.getString("type") : "";
            double invtaxamount = jobj.optDouble("invtaxamount", 0);
            double invamt = jobj.optDouble("invamt", 0);
            String memo = jobj.has("memo")?jobj.optString("memo",""):"";
            
            double invamtExcludingTax = invamt - invtaxamount;

            totalSalesTax += invtaxamount;

            totalSalesAmountExcludingTax += (invamt - invtaxamount);

            totalPurchaseTax += invtaxamount;

            totalPurchaseAmountExcludingTax += (invamt - invtaxamount);

            JSONObject jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCodeDSPercentSupplies); // Changed the tax code as mentioned in ERP-25513
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("noteid", noteid);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invamtExcludingTax, companyid) : invamtExcludingTax);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total value of standard rated supply");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("remark", "RCM");
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("GroupType", "Output Tax");

            jObj2ndLevelBox6JArr.put(jObj2ndLevelBox6);

            jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCodeDSPercentSupplies);  // Changed the tax code as mentioned in ERP-25513
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("noteid", noteid);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invtaxamount, companyid) : invtaxamount);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total Output Tax (Supply * GST Rate)");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("remark", "RCM");
            jObj2ndLevelBox6.put("GroupType", "Output Tax");
            jObj2ndLevelBox61JArr.put(jObj2ndLevelBox6);

            jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCode);
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("noteid", noteid);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invamtExcludingTax, companyid) : invamtExcludingTax);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total value of Standard Rated Acquisition");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("remark", "RCM");
            jObj2ndLevelBox6.put("GroupType", "Input Tax");
            jObj2ndLevelBox6aArr.put(jObj2ndLevelBox6);

            jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCode);
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("noteid", noteid);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invtaxamount, companyid) : invtaxamount);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total Input Tax (Acquisition * GST Rate)");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("remark", "RCM");
            jObj2ndLevelBox6.put("GroupType", "Input Tax");
            jObj2ndLevelBox6bJArr.put(jObj2ndLevelBox6);
        }
        /**
         * Removed Request dependency of getAppliedDeliveryOrdersJson(request) .
         */
        Map<String, Object> appliedDeliveryOrdersMap = getRequestParamsForAppliedDeliveryOrders(request);
        JSONArray doAdjsMentArray = getAppliedDeliveryOrdersJson(appliedDeliveryOrdersMap);

        for (int i = 0; i < doAdjsMentArray.length(); i++) {

            JSONObject jobj = doAdjsMentArray.getJSONObject(i);
            String taxCode = jobj.getString("taxcode");
            String invno = jobj.getString("invno");
            String journalEntryNo = jobj.getString("journalEntryNo");
            String name = jobj.getString("invname");
            String noteid = jobj.has("noteid") ? jobj.getString("noteid") : "";
            String billid = jobj.has(Constants.billid) ? jobj.getString(Constants.billid) : "";
            String jeid = jobj.has("jeid") ? jobj.getString("jeid") : "";
            String type = jobj.has("type") ? jobj.getString("type") : "";
            double invtaxamount = jobj.optDouble("invtaxamount", 0);
            double invamt = jobj.optDouble("invamt", 0);
            double invamtExcludingTax = invamt - invtaxamount;
            String memo = jobj.has("memo")?jobj.optString("memo",""):"";
            
            totalSalesTax += invtaxamount;

            totalSalesAmountExcludingTax += (invamt - invtaxamount);
            if (taxCode.equals(taxCodeDSPercentSupplies) || taxCode.equals(taxCodeSR7PercentSupplies) || taxCode.equals(ZRETaxCode) || taxCode.equals(ZRLTaxCode) || taxCode.equals(OSTaxCode) || taxCode.equals(RSTaxCode) || taxCode.equals(GSTaxCode)) {
                DmR_Variable_T += invamt - invtaxamount;
            }
            // maintaining sub data
            JSONObject jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCode);
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("noteid", noteid);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invamtExcludingTax, companyid) : invamtExcludingTax);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total value of standard rated supply");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("GroupType", "Output Tax");
            jObj2ndLevelBox6JArr.put(jObj2ndLevelBox6);

            JSONObject jObj2ndLevelBox61 = new JSONObject();
            jObj2ndLevelBox61.put("taxname", taxCode);
            jObj2ndLevelBox61.put("transactionid", invno);
            jObj2ndLevelBox61.put("journalentry", journalEntryNo);
            jObj2ndLevelBox61.put(Constants.billid, billid);
            jObj2ndLevelBox61.put("jeid", jeid);
            jObj2ndLevelBox61.put("type", type);
            jObj2ndLevelBox61.put("noteid", noteid);
            jObj2ndLevelBox61.put("name", name);
            jObj2ndLevelBox61.put("level", innerContentLevel);
            jObj2ndLevelBox61.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invtaxamount, companyid) : invtaxamount);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox61.put("box", "");
            jObj2ndLevelBox61.put("mergedCategoryData", "Total Output Tax (Supply * GST Rate)");
            jObj2ndLevelBox61.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox61.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox61.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox61.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox61.put("GroupType", "Output Tax");
            jObj2ndLevelBox61JArr.put(jObj2ndLevelBox61);
        }


        if (isProperPeriodSelectedForDmRIRR) {
            int monthMultiplyFactor = 1;
            Calendar startDateCal = Calendar.getInstance();
            Calendar endDateCal = Calendar.getInstance();
            startDateCal.setTime(startDate);
            endDateCal.setTime(endDate);
            int differenceInYears = endDateCal.get(Calendar.YEAR) - startDateCal.get(Calendar.YEAR);
            int actualDiiferenceInYears = differenceInYears;
            int startDateMonth = startDateCal.get(Calendar.MONTH);
            int endDateMonth = endDateCal.get(Calendar.MONTH);
            /*
             * ERP-21589 Calculation of monthMultiplyFactor it is for
             * calculating the period of months user has selected. DmR and IRR
             * will be calculated according to period of months selected.
             * Example of for counting the period in months - Suppose start date
             * = 1st April and end date is 30th Sept. Here difference in years
             * will be calculated as (8)-(3) = 5 but we are including april and
             * september in date period. So total months will be 6 . Therefore
             * we are adding 1 to calculated value. Example 2 - Start date = 1st
             * april 2015, end date = 30th Sept 2017 Here year difference = 2.
             * We are taking actual year diff = 2-1= 1. we will calculate the
             * total month period as following- 1st April 2015 to 31st Dec 2015
             * = 9 months 12 months of year 2016 1st jan 2017 to 30th sept 2017
             * = 10 total months = 9+12+10 = 28
             */
            if (differenceInYears == 0) {
                monthMultiplyFactor = (endDateMonth - startDateMonth + 1);  // +1 is for calculating period with including start and end date months
            } else {
                // calculating the months period when start date and end dates lies between different calendar years.
                actualDiiferenceInYears = actualDiiferenceInYears - 1;
                monthMultiplyFactor = ((11 - startDateMonth + 1) + (actualDiiferenceInYears * 12) + (endDateMonth + 1));
            }
            // Check whether DmR is qualified or not as per standard given by IRAS
            DmR_figure = (DmR_Variable_E) / (DmR_Variable_E + DmR_Variable_T);
            DmR_figureInPercentage = DmR_figure * 100;
            DmR_figureInPercentage = authHandler.round(DmR_figureInPercentage, companyid);

            if (totalESSupplyAmountWithoutTax > (monthMultiplyFactor * Constants.DmR_totalESPercentSupplies_Limit)) {
                DmRQualify = false;
            } else {
                if (DmR_figureInPercentage > Constants.DmR_figureInPercentage_Limit || DmR_figureInPercentage == 0) {
                    DmRQualify = false;
                } else {
                    DmRQualify = true;
                }
            }
            if (DmRQualify) {
                IRR_figureInPercentage = 100;
            } else {
                IRR_figureInPercentage = ((DmR_Variable_T - DmR_Variable_O) * 100) / (DmR_Variable_T + DmR_Variable_E - DmR_Variable_O);
                IRR_figureInPercentage = authHandler.round(IRR_figureInPercentage, companyid);
            }
        }
        requestParams.put("issales", false);
        requestParams.put("isSalesTax", false);
        JSONArray purchasejArr = getCalculatedTaxGST(requestParams, fileType);
        for (int jsonVal = 0; jsonVal < purchasejArr.length(); jsonVal++) {
            JSONObject purchaseObj = purchasejArr.getJSONObject(jsonVal);
            String taxCode = purchaseObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
            String journalEntryNo = purchaseObj.getString("journalEntryNo");
            String invno = purchaseObj.getString("invno");
            String billid = purchaseObj.has(Constants.billid) ? purchaseObj.getString(Constants.billid) : "";
            String type = purchaseObj.has("type") ? purchaseObj.getString("type") : "";
            String jeid = purchaseObj.has("jeid") ? purchaseObj.getString("jeid") : "";
            String jedate = purchaseObj.has("jedate") ? purchaseObj.getString("jedate") : "";
            String noteid = purchaseObj.has("noteid") ? purchaseObj.getString("noteid") : "";
            String name = purchaseObj.getString("invname");
            double invamt = purchaseObj.getDouble("invamt");
            double invtaxamount = purchaseObj.getDouble("invtaxamount");
            String memo = purchaseObj.has("memo")?purchaseObj.optString("memo",""):"";
            if (TXTaxCode.equalsIgnoreCase(taxCode) || IMTaxCode.equalsIgnoreCase(taxCode) || TXIESTaxCode.equalsIgnoreCase(taxCode) || TXRETaxCode.equalsIgnoreCase(taxCode) || TXCGTaxCode.equalsIgnoreCase(taxCode) || TXFRSTaxCode.equalsIgnoreCase(taxCode) || TXESTaxCode.equalsIgnoreCase(taxCode) || (IMCGTaxCode.equalsIgnoreCase(taxCode) && gstGuideVersion == Constants.GSTGuideMarch2018_Version)) {
                double purchaseValue = invamt - invtaxamount;
                double taxClaimed = invtaxamount;
                
                if (!DmRQualify && TXESTaxCode.equalsIgnoreCase(taxCode)) {//TX-ES tax Only include once de minimis Rule is fulfilled
                    continue;
                }
                if (TXRETaxCode.equalsIgnoreCase(taxCode)) {
                    taxClaimed = (taxClaimed * IRR_figureInPercentage) / 100;
                }
                totalPurchaseAmountExcludingTax += purchaseValue;
                totalPurchaseTax += taxClaimed;

                // maintaining sub data
                JSONObject jObj2ndLevelBox5 = new JSONObject();
                jObj2ndLevelBox5.put("taxname", taxCode);
                jObj2ndLevelBox5.put("transactionid", invno);
                jObj2ndLevelBox5.put("journalentry", journalEntryNo);
                jObj2ndLevelBox5.put(Constants.billid, billid);
                jObj2ndLevelBox5.put("jeid", jeid);
                jObj2ndLevelBox5.put("jedate", jedate);
                jObj2ndLevelBox5.put("type", type);
                jObj2ndLevelBox5.put("noteid", noteid);
                jObj2ndLevelBox5.put("name", name);
                jObj2ndLevelBox5.put("level", innerContentLevel);
                jObj2ndLevelBox5.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(purchaseValue, companyid) : purchaseValue);
                jObj2ndLevelBox5.put("memo", memo);
                jObj2ndLevelBox5.put("box", "");
                jObj2ndLevelBox5.put("mergedCategoryData", "Total value of Standard Rated Acquisition");
                jObj2ndLevelBox5.put(Constants.currencyKey, rmcurrencyid);
                jObj2ndLevelBox5.put("currencysymbol", rmcurrencysymbol);
                jObj2ndLevelBox5.put("currencyname", rmcurrencyname);
                jObj2ndLevelBox5.put("currencycode", rmcurrencycode);
                jObj2ndLevelBox5.put("GroupType", "Input Tax");

                jObj2ndLevelBox6aArr.put(jObj2ndLevelBox5);

                // maintain sub data for tax claimed
                JSONObject jObj2ndLevelBox7 = new JSONObject();
                jObj2ndLevelBox7.put("taxname", taxCode);
                jObj2ndLevelBox7.put("transactionid", invno);
                jObj2ndLevelBox7.put("journalentry", journalEntryNo);
                jObj2ndLevelBox7.put(Constants.billid, billid);
                jObj2ndLevelBox7.put("jeid", jeid);
                jObj2ndLevelBox7.put("jedate", jedate);
                jObj2ndLevelBox7.put("type", type);
                jObj2ndLevelBox7.put("noteid", noteid);
                jObj2ndLevelBox7.put("name", name);
                jObj2ndLevelBox7.put("level", innerContentLevel);
                jObj2ndLevelBox7.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(taxClaimed, companyid) : taxClaimed);
                jObj2ndLevelBox7.put("memo", memo);
                jObj2ndLevelBox7.put("box", "");
                jObj2ndLevelBox7.put("mergedCategoryData", "Total Input Tax (Acquisition * GST Rate)");
                jObj2ndLevelBox7.put(Constants.currencyKey, rmcurrencyid);
                jObj2ndLevelBox7.put("currencysymbol", rmcurrencysymbol);
                jObj2ndLevelBox7.put("currencyname", rmcurrencyname);
                jObj2ndLevelBox7.put("currencycode", rmcurrencycode);
                jObj2ndLevelBox7.put("GroupType", "Input Tax");

                jObj2ndLevelBox6bJArr.put(jObj2ndLevelBox7);
            }

            if (AJPTaxCode.equalsIgnoreCase(taxCode)) {
                double taxClaimed = invtaxamount;
                totalPurchaseTax += taxClaimed;

                JSONObject jObj2ndLevelBox7 = new JSONObject();
                jObj2ndLevelBox7.put("taxname", taxCode);
                jObj2ndLevelBox7.put("transactionid", invno);
                jObj2ndLevelBox7.put("journalentry", journalEntryNo);
                jObj2ndLevelBox7.put(Constants.billid, billid);
                jObj2ndLevelBox7.put("type", type);
                jObj2ndLevelBox7.put("jeid", jeid);
                jObj2ndLevelBox7.put("jedate", jedate);
                jObj2ndLevelBox7.put("noteid", noteid);
                jObj2ndLevelBox7.put("name", name);
                jObj2ndLevelBox7.put("level", innerContentLevel);
                jObj2ndLevelBox7.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(taxClaimed, companyid) : taxClaimed);
                jObj2ndLevelBox7.put("memo", memo);
                jObj2ndLevelBox7.put("box", "");
                jObj2ndLevelBox7.put("mergedCategoryData", "Total Input Tax (Acquisition * GST Rate)");
                jObj2ndLevelBox7.put(Constants.currencyKey, rmcurrencyid);
                jObj2ndLevelBox7.put("currencysymbol", rmcurrencysymbol);
                jObj2ndLevelBox7.put("currencyname", rmcurrencyname);
                jObj2ndLevelBox7.put("currencycode", rmcurrencycode);
                jObj2ndLevelBox7.put("GroupType", "Input Tax");
                jObj2ndLevelBox6bJArr.put(jObj2ndLevelBox7);
            }

            if (ISTaxCode.contains(taxCode)) {
                double amtExcludingTax = invamt - invtaxamount;
                totalISAmountExcludingGST += amtExcludingTax;
                double gstSusTax = (invamt * 6 / 100);
                gstSuspendedTax += gstSusTax;

                JSONObject jObj2ndLevelBox7 = new JSONObject();
                jObj2ndLevelBox7.put("taxname", taxCode);
                jObj2ndLevelBox7.put("transactionid", invno);
                jObj2ndLevelBox7.put("journalentry", journalEntryNo);
                jObj2ndLevelBox7.put("noteid", noteid);
                jObj2ndLevelBox7.put(Constants.billid, billid);
                jObj2ndLevelBox7.put("type", type);
                jObj2ndLevelBox7.put("jeid", jeid);
                jObj2ndLevelBox7.put("jedate", jedate);
                jObj2ndLevelBox7.put("name", name);
                jObj2ndLevelBox7.put("memo", memo);
                jObj2ndLevelBox7.put("level", innerContentLevel);
                jObj2ndLevelBox7.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(amtExcludingTax, companyid) : amtExcludingTax);
                jObj2ndLevelBox7.put("box", "");
                jObj2ndLevelBox7.put("mergedCategoryData", "Total Value of Goods Imported Under Approved Trader Scheme");
                jObj2ndLevelBox7.put(Constants.currencyKey, rmcurrencyid);
                jObj2ndLevelBox7.put("currencysymbol", rmcurrencysymbol);
                jObj2ndLevelBox7.put("currencyname", rmcurrencyname);
                jObj2ndLevelBox7.put("currencycode", rmcurrencycode);
                jObj2ndLevelBox7.put("GroupType", "Additional Information");
                jObj2ndLevelGoodsImportedJArr.put(jObj2ndLevelBox7);

                if (gstGuideVersion == Constants.GSTGuideDec2017_Version) {
                        /**
                         * As per revised March 2018 GST guide - Mapping of IS is
                         * removed from box[15].
                         */
                    jObj2ndLevelBox7 = new JSONObject();
                    jObj2ndLevelBox7.put("taxname", taxCode);
                    jObj2ndLevelBox7.put("transactionid", invno);
                    jObj2ndLevelBox7.put("journalentry", journalEntryNo);
                    jObj2ndLevelBox7.put(Constants.billid, billid);
                    jObj2ndLevelBox7.put("noteid", noteid);
                    jObj2ndLevelBox7.put("type", type);
                    jObj2ndLevelBox7.put("jeid", jeid);
                    jObj2ndLevelBox7.put("jedate", jedate);
                    jObj2ndLevelBox7.put("name", name);
                    jObj2ndLevelBox7.put("memo", memo);
                    jObj2ndLevelBox7.put("level", innerContentLevel);
                    jObj2ndLevelBox7.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(gstSusTax, companyid) : gstSusTax);
                    jObj2ndLevelBox7.put("box", "");
                    jObj2ndLevelBox7.put("mergedCategoryData", "Total Value of GST Suspended Under Approved Trader Scheme");
                    jObj2ndLevelBox7.put(Constants.currencyKey, rmcurrencyid);
                    jObj2ndLevelBox7.put("currencysymbol", rmcurrencysymbol);
                    jObj2ndLevelBox7.put("currencyname", rmcurrencyname);
                    jObj2ndLevelBox7.put("currencycode", rmcurrencycode);
                    jObj2ndLevelBox7.put("GroupType", "Additional Information");
                    jObj2ndLevelGSTSuspendedJArr.put(jObj2ndLevelBox7);
                }
            }

            if (gstGuideVersion == Constants.GSTGuideMarch2018_Version && IMCGTaxCode.equalsIgnoreCase(taxCode)) {
                /**
                 * As per revised March 2018 GST guide - Added new tax code
                 * IM-CG & mapped with box[16].
                 */
                double invamtExcludingTax = invamt - invtaxamount;

                totalIMCGAmountExcludingGST += invamtExcludingTax;

                JSONObject jObj2ndLevelBox6 = new JSONObject();
                jObj2ndLevelBox6.put("taxname", taxCode);
                jObj2ndLevelBox6.put("transactionid", invno);
                jObj2ndLevelBox6.put("journalentry", journalEntryNo);
                jObj2ndLevelBox6.put(Constants.billid, billid);
                jObj2ndLevelBox6.put("jeid", jeid);
                jObj2ndLevelBox6.put("jedate", jedate);
                jObj2ndLevelBox6.put("type", type);
                jObj2ndLevelBox6.put("name", name);
                jObj2ndLevelBox6.put("memo", memo);
                jObj2ndLevelBox6.put("level", innerContentLevel);
                jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invamtExcludingTax, companyid) : invamtExcludingTax);
                jObj2ndLevelBox6.put("box", "");
                jObj2ndLevelBox6.put("mergedCategoryData", "Total value of Capital Goods Acquired");
                jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
                jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
                jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
                jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
                jObj2ndLevelBox6.put("GroupType", "Additional Information");
                jObj2ndLevelCapitalJArr.put(jObj2ndLevelBox6);//Added IM-CG entry in Box[16]
            }
        }

//        if (isAdvanceSearch) {
//            requestParams.put(Constants.moduleid, Constants.Acc_Delivery_Order_ModuleId);
//            requestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.journalEntrySearchJson));
//            requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
//        }
//        JSONArray taxAdjsMentArray = getAdjustmentTaxesJsonArray(requestParams);
//
//        for (int i = 0; i < taxAdjsMentArray.length(); i++) {
//
//            JSONObject jobj = taxAdjsMentArray.getJSONObject(i);
//            String taxCode = jobj.getString("taxcode");
//            String invno = jobj.getString("invno");
//            String journalEntryNo = jobj.getString("journalEntryNo");
//            String name = jobj.getString("invname");
//            String billid = jobj.has(Constants.billid) ? jobj.getString(Constants.billid) : "";
//            String noteid = jobj.has("noteid") ? jobj.getString("noteid") : "";
//            String jeid = jobj.has("jeid") ? jobj.getString("jeid") : "";
//            String jedate = jobj.has("jedate") ? jobj.getString("jedate") : "";
//            String type = jobj.has("type") ? jobj.getString("type") : "";
//            boolean isInputTaxAdjustment = jobj.getBoolean("isInputTaxAdjustment");
//
//            double invtaxamount = jobj.optDouble("invtaxamount", 0);
//
//            if (isInputTaxAdjustment) {
//                totalPurchaseTax += invtaxamount;
//                JSONObject jObj2ndLevelBox6 = new JSONObject();
//                jObj2ndLevelBox6.put("taxname", taxCode);
//                jObj2ndLevelBox6.put("transactionid", invno);
//                jObj2ndLevelBox6.put("journalentry", journalEntryNo);
//                jObj2ndLevelBox6.put(Constants.billid, billid);
//                jObj2ndLevelBox6.put("jeid", jeid);
//                jObj2ndLevelBox6.put("jedate", jedate);
//                jObj2ndLevelBox6.put("type", type);
//                jObj2ndLevelBox6.put("noteid", noteid);
//                jObj2ndLevelBox6.put("name", name);
//                jObj2ndLevelBox6.put("level", innerContentLevel);
//                jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invtaxamount, companyid) : invtaxamount);
//                jObj2ndLevelBox6.put("box", "");
//                jObj2ndLevelBox6.put("mergedCategoryData", "Total Input Tax (Acquisition * GST Rate)");
//                jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
//                jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
//                jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
//                jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
//                jObj2ndLevelBox6.put("GroupType", "Input Tax");
//                jObj2ndLevelBox6bJArr.put(jObj2ndLevelBox6);
//            } else {
//                totalSalesTax += invtaxamount;
//                JSONObject jObj2ndLevelBox61 = new JSONObject();
//                jObj2ndLevelBox61.put("taxname", taxCode);
//                jObj2ndLevelBox61.put("transactionid", invno);
//                jObj2ndLevelBox61.put("journalentry", journalEntryNo);
//                jObj2ndLevelBox61.put(Constants.billid, billid);
//                jObj2ndLevelBox61.put("jeid", jeid);
//                jObj2ndLevelBox61.put("jedate", jedate);
//                jObj2ndLevelBox61.put("type", type);
//                jObj2ndLevelBox61.put("noteid", noteid);
//                jObj2ndLevelBox61.put("name", name);
//                jObj2ndLevelBox61.put("level", innerContentLevel);
//                jObj2ndLevelBox61.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invtaxamount, companyid) : invtaxamount);
//                jObj2ndLevelBox61.put("box", "");
//                jObj2ndLevelBox61.put("mergedCategoryData", "Total Output Tax (Supply * GST Rate)");
//                jObj2ndLevelBox61.put(Constants.currencyKey, rmcurrencyid);
//                jObj2ndLevelBox61.put("currencysymbol", rmcurrencysymbol);
//                jObj2ndLevelBox61.put("currencyname", rmcurrencyname);
//                jObj2ndLevelBox61.put("currencycode", rmcurrencycode);
//                jObj2ndLevelBox61.put("GroupType", "Output Tax");
//                jObj2ndLevelBox61JArr.put(jObj2ndLevelBox61);
//            }
//        }

        JSONArray retailPurchases = getRetailPurchasesJsonArray(request);

        for (int i = 0; i < retailPurchases.length(); i++) {
            
            JSONObject jobj = retailPurchases.getJSONObject(i);
            String taxCode = jobj.getString("taxcode");
            String invno = jobj.getString("invno");
            String billid = jobj.has(Constants.billid) ? jobj.getString(Constants.billid) : "";
            String type = jobj.has("type") ? jobj.getString("type") : "";
            String jeid = jobj.has("jeid") ? jobj.getString("jeid") : "";
            String jedate = jobj.has("jedate") ? jobj.getString("jedate") : "";
            String noteid = jobj.has("noteid") ? jobj.getString("noteid") : "";
            String journalEntryNo = jobj.getString("journalEntryNo");
            String name = jobj.getString("invname");
            double invtaxamount = jobj.optDouble("invtaxamount", 0);
            double invamt = jobj.optDouble("invamt", 0);
            double invamtExcludingTax = invamt - invtaxamount;
            String memo = jobj.has("memo")?jobj.optString("memo",""):"";
            
            totalPurchaseTax += invtaxamount;
            totalPurchaseAmountExcludingTax += (invamt - invtaxamount);

            JSONObject jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCode);
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("noteid", noteid);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invamtExcludingTax, companyid) : invamtExcludingTax);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total value of Standard Rated Acquisition");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("GroupType", "Input Tax");
            jObj2ndLevelBox6aArr.put(jObj2ndLevelBox6);

            jObj2ndLevelBox6 = new JSONObject();
            jObj2ndLevelBox6.put("taxname", taxCode);
            jObj2ndLevelBox6.put("transactionid", invno);
            jObj2ndLevelBox6.put(Constants.billid, billid);
            jObj2ndLevelBox6.put("jeid", jeid);
            jObj2ndLevelBox6.put("jedate", jedate);
            jObj2ndLevelBox6.put("type", type);
            jObj2ndLevelBox6.put("noteid", noteid);
            jObj2ndLevelBox6.put("journalentry", journalEntryNo);
            jObj2ndLevelBox6.put("name", name);
            jObj2ndLevelBox6.put("level", innerContentLevel);
            jObj2ndLevelBox6.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(invtaxamount, companyid) : invtaxamount);
            jObj2ndLevelBox6.put("memo", memo);
            jObj2ndLevelBox6.put("box", "");
            jObj2ndLevelBox6.put("mergedCategoryData", "Total Input Tax (Acquisition * GST Rate)");
            jObj2ndLevelBox6.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox6.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox6.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox6.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox6.put("GroupType", "Input Tax");

            jObj2ndLevelBox6bJArr.put(jObj2ndLevelBox6);
        }

        JSONArray jArr = new JSONArray();
        JSONObject jObj = new JSONObject();

        int headerLevel = 0;
        int contentLevel = 1;
        if (!isExport) {
            jObj.put("taxname", "Output Tax");
            jObj.put("transactionid", "");
            jObj.put("journalentry", "");
            jObj.put("isGroupHeader", true);  
            jObj.put("name", "");
            jObj.put("taxamount", " ");// Empty space for showing empty in export for subheading otherwise it showing 0 be default baceuse of column type is amount
            jObj.put("fmt", "B");
            jObj.put("level", headerLevel);
            jObj.put("mergedCategoryData", "Supplies");
            jObj.put(Constants.currencyKey, rmcurrencyid);
            jObj.put("currencysymbol", rmcurrencysymbol);
            jObj.put("currencyname", rmcurrencyname);
            jObj.put("currencycode", rmcurrencycode);
            jObj.put("box", "");
            jObj.put("memo", "");
            jArr.put(jObj);
        }
        //Level 1 for -- Total value of standard rated supplies
        jObj = new JSONObject();
        jObj.put("taxname", "Total value of standard rated supply");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(totalSalesAmountExcludingTax, companyid), companyid));
            jObj.put("box", "[5a]");
        } else {
            jObj.put("taxamount", totalSalesAmountExcludingTax);
            jObj.put("box", "[5a]");
        }
        
        jObj.put("memo", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("isGroupHeader", true);  
            jObj.put("mergedCategoryData", "Total value of standard rated supply");
            jObj.put("taxamount", "");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Output Tax");
        }
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelBox6JArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBox6JArr.getJSONObject(jsonVal));
        }

        //Level 2 for -- Total value of standard rated supplies
        jObj = new JSONObject();
        jObj.put("taxname", "Total Output Tax (Supply * GST Rate)");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(totalSalesTax, companyid), companyid));
            jObj.put("box", "[5b]");
        } else {
            jObj.put("taxamount", totalSalesTax);
            jObj.put("box", "[5b]");
        }
        jObj.put("memo", "");
        jObj.put("isGroupHeader", true);  
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "Total Output Tax (Supply * GST Rate)");
            jObj.put("taxamount", "");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Output Tax");
        }
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelBox61JArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBox61JArr.getJSONObject(jsonVal));
        }
        if (!isExport) {
            jObj = new JSONObject();
            jObj.put("taxname", "Input Tax");
            jObj.put("isGroupHeader", true);  
            jObj.put("transactionid", "");
            jObj.put("journalentry", "");
            jObj.put("name", "");
            jObj.put("taxamount", " ");// Empty space for showing empty in export for subheading otherwise it showing 0 be default baceuse of column type is amount
            jObj.put("fmt", "B");
            jObj.put("level", headerLevel);
            jObj.put("mergedCategoryData", "Supplies");
            jObj.put(Constants.currencyKey, rmcurrencyid);
            jObj.put("currencysymbol", rmcurrencysymbol);
            jObj.put("currencyname", rmcurrencyname);
            jObj.put("currencycode", rmcurrencycode);
            jObj.put("box", "");
            jObj.put("memo", "");
            jArr.put(jObj);
        }
        //Level 1 for -- Total value of standard rated supplies
        jObj = new JSONObject();
        jObj.put("taxname", "Total value of Standard Rated Acquisition");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(totalPurchaseAmountExcludingTax, companyid), companyid));
            jObj.put("box", "[6a]");
        } else {
            jObj.put("taxamount", totalPurchaseAmountExcludingTax);
            jObj.put("box", "[6a]");
        }
        
        jObj.put("memo", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "Total value of Standard Rated Acquisition");
            jObj.put("taxamount", "");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Input Tax");
        }
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelBox6aArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBox6aArr.getJSONObject(jsonVal));
        }

        //Level 2 for -- Total value of standard rated supplies
        jObj = new JSONObject();
        jObj.put("taxname", "Total Input Tax (Acquisition * GST Rate)");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(totalPurchaseTax, companyid), companyid));
            jObj.put("box", "[6b]");
        } else {
            jObj.put("taxamount", totalPurchaseTax);
            jObj.put("box", "[6b]");
        }
        
        jObj.put("memo", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "Total Input Tax (Acquisition * GST Rate)");
            jObj.put("taxamount", "");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Input Tax");
        }
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelBox6bJArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBox6bJArr.getJSONObject(jsonVal));
        }

        double totalGstPayble1 = totalPurchaseTax - totalSalesTax;
        double totalGstPayble2 = totalSalesTax - totalPurchaseTax;

        jObj = new JSONObject();
        jObj.put("taxname", "GST Amount Payable");
        if (isForExport) {
            jObj.put("taxamount", (totalGstPayble2 > 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(totalGstPayble2, companyid), companyid) : 0);
            jObj.put("box", "[7]");
        } else {
            jObj.put("taxamount", (totalGstPayble2 > 0) ? authHandler.formattedAmount(authHandler.round(totalGstPayble2, companyid), companyid) : 0);
            jObj.put("box", "[7]");
        }
        
        jObj.put("memo", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "GST Amount Payable");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Input Tax");
        }
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "GST Amount Claimable");
        if (isForExport) {
            jObj.put("taxamount", (totalGstPayble1 > 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(totalGstPayble1, companyid), companyid) : 0);
            jObj.put("box", "[8]");
        } else {
            jObj.put("taxamount", (totalGstPayble1 > 0) ? authHandler.formattedAmount(authHandler.round(totalGstPayble1, companyid), companyid) : 0);
            jObj.put("box", "[8]");
        }
        
        jObj.put("memo", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "GST Amount Claimable");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Input Tax");
        }
        jArr.put(jObj);
        if (!isExport) {
            jObj = new JSONObject();
            jObj.put("taxname", "Additional Information");
            jObj.put("transactionid", "");
            jObj.put("journalentry", "");
            jObj.put("isGroupHeader", true);  
            jObj.put("name", "");
            jObj.put("taxamount", " ");// Empty space for showing empty in export for subheading otherwise it showing 0 be default baceuse of column type is amount
            jObj.put("fmt", "B");
            jObj.put("level", headerLevel);
            jObj.put("mergedCategoryData", "Supplies");
            jObj.put(Constants.currencyKey, rmcurrencyid);
            jObj.put("currencysymbol", rmcurrencysymbol);
            jObj.put("currencyname", rmcurrencyname);
            jObj.put("currencycode", rmcurrencycode);
            jObj.put("box", "");
            jObj.put("memo", "");
            jArr.put(jObj);
        }
        //Level 2 for -- Total value of standard rated supplies
        jObj = new JSONObject();
        jObj.put("taxname", "Total value of Local Zero-Rated supplies");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(totalZeroRateSupplyAmount, companyid), companyid));// totalZeroRateSupplyAmount = totalZRLAmount + totalNTXAmount
            jObj.put("box", "[10]");
        } else {
            jObj.put("taxamount", totalZeroRateSupplyAmount);// totalZeroRateSupplyAmount = totalZRLAmount + totalNTXAmount
            jObj.put("box", "[10]");
        }
        
        jObj.put("memo", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "Total value of Local Zero-Rated supplies");
            jObj.put("taxamount", "");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Additional Information");
        }
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelZRLJArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelZRLJArr.getJSONObject(jsonVal));
        }

        //Level 2 for -- Total value of standard rated supplies
        jObj = new JSONObject();
        jObj.put("taxname", "Total value of Exported supplies");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(totalExportSupplyAmount, companyid), companyid));//totalExportSupplyAmount = totalZREAmount + totalZDAAmount
            jObj.put("box", "[11]");
        } else {
            jObj.put("taxamount", totalExportSupplyAmount);//totalExportSupplyAmount = totalZREAmount + totalZDAAmount
            jObj.put("box", "[11]");
        }
        
        jObj.put("memo", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "Total value of Exported supplies");
            jObj.put("taxamount", "");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Additional Information");
        }
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelZREJArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelZREJArr.getJSONObject(jsonVal));
        }

        //Level 2 for -- Total value of standard rated supplies
        jObj = new JSONObject();
        jObj.put("taxname", "Total value of exempt supplies");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(totalExemptSupplyAmount, companyid), companyid));
            jObj.put("box", "[12]");
        } else {
            jObj.put("taxamount", totalExemptSupplyAmount);
            jObj.put("box", "[12]");
        }
        
        jObj.put("memo", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "Total value of exempt supplies");
            jObj.put("taxamount", "");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Additional Information");
        }
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelExemptJArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelExemptJArr.getJSONObject(jsonVal));
        }

        //Level 2 for -- Total value of standard rated supplies
        jObj = new JSONObject();
        jObj.put("taxname", "Total value supplies Granted GST supplies");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(totalRSAmount, companyid), companyid));
            jObj.put("box", "[13]");
        } else {
            jObj.put("taxamount", totalRSAmount);
            jObj.put("box", "[13]");
        }
        
        jObj.put("memo", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "Total value supplies Granted GST supplies");
            jObj.put("taxamount", "");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Additional Information");
        }
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelRSJArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelRSJArr.getJSONObject(jsonVal));
        }

        //Level 2 for -- Total value of standard rated supplies
        jObj = new JSONObject();
        jObj.put("taxname", "Total Value of Goods Imported Under Approved Trader Scheme");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(totalISAmountExcludingGST, companyid), companyid));
            jObj.put("box", "[14]");
        } else {
            jObj.put("taxamount", totalISAmountExcludingGST);
            jObj.put("box", "[14]");
        }
        
        jObj.put("memo", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "Total Value of Goods Imported Under Approved Trader Scheme");
            jObj.put("taxamount", "");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Additional Information");
        }
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelGoodsImportedJArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelGoodsImportedJArr.getJSONObject(jsonVal));
        }

        if (gstGuideVersion == Constants.GSTGuideMarch2018_Version) {
            /**
             * As per revised 8th March 2018 GST guide box[15] description has
             * been changed as "Total Value of Other Supplies"
             * Refer - ERM-315/ERP-39799.
             */
            jObj = new JSONObject();
            jObj.put("taxname", "Total Value of Other Supplies");
            if (isForExport) {
                jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(totalValueofOtherSupplies, companyid), companyid));
                jObj.put("box", "[15]");
            } else {
                jObj.put("taxamount", totalValueofOtherSupplies);
                jObj.put("box", "[15]");
            }

            jObj.put("transactionid", "");
            jObj.put("journalentry", "");
            jObj.put("name", "");
            jObj.put("level", contentLevel);
            jObj.put("mergedCategoryData", "Supplies");
            jObj.put(Constants.currencyKey, rmcurrencyid);
            jObj.put("currencysymbol", rmcurrencysymbol);
            jObj.put("currencyname", rmcurrencyname);
            jObj.put("currencycode", rmcurrencycode);
            if (isExport) {
                jObj.put("mergedCategoryData", "Total Value of Other Supplies");
                jObj.put("taxamount", "");
                jObj.put("taxname", "");
                jObj.put("GroupType", "Additional Information");
            }
            jArr.put(jObj);

            for (int jsonVal = 0; jsonVal < jObj2ndLevelOtherSuppliesJArr.length(); jsonVal++) {
                jArr.put(jObj2ndLevelOtherSuppliesJArr.getJSONObject(jsonVal));
            }
        } else {
            //Level 2 for -- Total value of standard rated supplies
            jObj = new JSONObject();
            jObj.put("taxname", "Total Value of GST Suspended Under Approved Trader Scheme");
            if (isForExport) {
                jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(gstSuspendedTax, companyid), companyid));
                jObj.put("box", "[15]");
            } else {
                jObj.put("taxamount", gstSuspendedTax);
                jObj.put("box", "[15]");
            }
        
        jObj.put("memo", "");
            jObj.put("transactionid", "");
            jObj.put("journalentry", "");
            jObj.put("name", "");
            jObj.put("level", contentLevel);
            jObj.put("mergedCategoryData", "Supplies");
            jObj.put(Constants.currencyKey, rmcurrencyid);
            jObj.put("currencysymbol", rmcurrencysymbol);
            jObj.put("currencyname", rmcurrencyname);
            jObj.put("currencycode", rmcurrencycode);
            if (isExport) {
                jObj.put("mergedCategoryData", "Total Value of GST Suspended Under Approved Trader Scheme");
                jObj.put("taxamount", "");
                jObj.put("taxname", "");
                jObj.put("GroupType", "Additional Information");
            }
            jArr.put(jObj);

            for (int jsonVal = 0; jsonVal < jObj2ndLevelGSTSuspendedJArr.length(); jsonVal++) {
                jArr.put(jObj2ndLevelGSTSuspendedJArr.getJSONObject(jsonVal));
            }
        }

        //Level 2 for -- Total value of standard rated supplies
        jObj = new JSONObject();
        jObj.put("taxname", "Total value of Capital Goods Acquired");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(capitalGoodsAcquireAmt + totalIMCGAmountExcludingGST, companyid), companyid));
            jObj.put("box", "[16]");
        } else {
            jObj.put("taxamount", capitalGoodsAcquireAmt + totalIMCGAmountExcludingGST);
            jObj.put("box", "[16]");
        }
        
        jObj.put("memo", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "Total value of Capital Goods Acquired");
            jObj.put("taxamount", "");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Additional Information");
        }
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelCapitalJArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelCapitalJArr.getJSONObject(jsonVal));
        }

        //Level 2 for -- Total value of standard rated supplies
        jObj = new JSONObject();
        jObj.put("taxname", "Bad Debt Relief");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(badDebtClaimedAmt, companyid),companyid));
            jObj.put("box", "[17]");
        } else {
            jObj.put("taxamount", badDebtClaimedAmt);
            jObj.put("box", "[17]");
        }
        
        jObj.put("memo", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "Bad Debt Relief");
            jObj.put("taxamount", "");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Additional Information");
        }
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelBadClaimedJArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBadClaimedJArr.getJSONObject(jsonVal));
        }

        //Level 2 for -- Total value of standard rated supplies
        jObj = new JSONObject();
        jObj.put("taxname", "Bad Debt Recovered");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedCommaSeparatedAmount(authHandler.round(badDebtRecoverdAmt, companyid), companyid));
            jObj.put("box", "[18]");
        } else {
            jObj.put("taxamount", badDebtRecoverdAmt);
            jObj.put("box", "[18]");
        }
        
        jObj.put("memo", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "Bad Debt Recovered");
            jObj.put("taxamount", "");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Additional Information");
        }
        jArr.put(jObj);
        
        for (int jsonVal = 0; jsonVal < jObj2ndLevelBadRecoverJArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBadRecoverJArr.getJSONObject(jsonVal));
        }
        
        /**
         * Following unused calls to methods update industryCodeJsonArr, So don't remove them
         */
        JSONArray industryCodeJsonArr = new JSONArray();
        request.setAttribute("isForExport", true);
        double salesInvoiceRecoveredAmt = 0;
        double purchaseInvoiceClaimedAmt = 0;
        
        List<Double> doAdjsMent = getAppliedDeliveryOrders(request, industryCodeJsonArr);//
        double totalAppliedTaxAmount = doAdjsMent.get(1);
        List<Double> ciAdjpMent = getBadDebtRecoveredInvoices(request, industryCodeJsonArr); //
          salesInvoiceRecoveredAmt += ciAdjpMent.get(1);
        List<Double> ciAdjs1Ment = getBadDebtClaimedPurchaseInvoices(request, industryCodeJsonArr);//
        purchaseInvoiceClaimedAmt += ciAdjs1Ment.get(1);
        List<Double> importServiceTaxList = getImportedServicesInvoices(request, industryCodeJsonArr);
        List<Double> freeGiftJEList = getFreeGiftJEList(request, industryCodeJsonArr);
        
        for (int i = 0; i < industryCodeJsonArr.length(); i++) {
            JSONObject jobj = industryCodeJsonArr.getJSONObject(i);
            String msiccode = jobj.optString(Constants.MSIC_CODE, "");
            double industrytax = jobj.optDouble(Constants.MSIC_INVTAXAMT, 0);
            if (msicsJosn.has(msiccode)) {
                double industrytaxprsent = msicsJosn.optDouble(msiccode, 0); // Current total plus added amount entry
                msicsJosn.put(msiccode, industrytax + industrytaxprsent);
            } else {
                msicsJosn.put(msiccode, industrytax);
            }
        }
        
        msicsJosn.put(Constants.MSIC_OTHRES, totalAppliedTaxAmount + salesInvoiceRecoveredAmt + purchaseInvoiceClaimedAmt);
        msicsJosn.put(Constants.MSIC_TOTAL, totalSalesTax);
        
        JSONArray breakDownArry = accReportsService.getGSTForm5BreakDown(company, msicsJosn);
        JSONArray jObj2ndLevelBox19Arr = new JSONArray();
        double totalBreakdownAmt = 0.0;
        for (int i = 0; i < breakDownArry.length(); i++) {
            JSONObject msicsObj = breakDownArry.getJSONObject(i);
            JSONObject jObj2ndLevelBox19 = null;
            double taxAmount = msicsObj.optDouble("outputtax", 0.0);
            if (msicsObj.optString("code").equalsIgnoreCase("Total")) {
                totalBreakdownAmt = taxAmount;
                continue;
            }
            jObj2ndLevelBox19 = new JSONObject();
            jObj2ndLevelBox19.put("taxname", msicsObj.optString("code"));
            jObj2ndLevelBox19.put("level", innerContentLevel);
            jObj2ndLevelBox19.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(taxAmount, companyid) : authHandler.round(taxAmount, companyid));
            jObj2ndLevelBox19.put("mergedCategoryData", "BREAKDOWN VALUE OF OUTPUT TAX IN ACCORDANCE WITH MAJOR INDUSTRY CODES");
            jObj2ndLevelBox19.put(Constants.currencyKey, rmcurrencyid);
            jObj2ndLevelBox19.put("currencysymbol", rmcurrencysymbol);
            jObj2ndLevelBox19.put("currencyname", rmcurrencyname);
            jObj2ndLevelBox19.put("currencycode", rmcurrencycode);
            jObj2ndLevelBox19.put("GroupType", "Additional Information");
            jObj2ndLevelBox19Arr.put(jObj2ndLevelBox19);
        }
        
        jObj = new JSONObject();
        jObj.put("box", "[19]");
        jObj.put("memo", "");
        jObj.put("taxname", "BREAKDOWN VALUE OF OUTPUT TAX IN ACCORDANCE WITH MAJOR INDUSTRY CODES");
        jObj.put("taxamount", isForExport ? authHandler.formattedCommaSeparatedAmount(totalBreakdownAmt, companyid) : authHandler.round(totalBreakdownAmt, companyid));
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, rmcurrencyid);
        jObj.put("currencysymbol", rmcurrencysymbol);
        jObj.put("currencyname", rmcurrencyname);
        jObj.put("currencycode", rmcurrencycode);
        if (isExport) {
            jObj.put("mergedCategoryData", "BREAKDOWN VALUE OF OUTPUT TAX IN ACCORDANCE WITH MAJOR INDUSTRY CODES");
            jObj.put("taxamount", "");
            jObj.put("taxname", "");
            jObj.put("GroupType", "Additional Information");
        }
        jArr.put(jObj);
        
        for (int msicsVal = 0; msicsVal < jObj2ndLevelBox19Arr.length(); msicsVal++) {
            jArr.put(jObj2ndLevelBox19Arr.getJSONObject(msicsVal));
        }
        
        if (isProperPeriodSelectedForDmRIRR && !isExport) { //We are not showing DmR and IIR in export
            jObj = new JSONObject();
            jObj.put("DmR", authHandler.formattingDecimalForAmount(DmR_figureInPercentage, companyid) + "%" + (DmRQualify ? "<b> (Qualified)</b>" : "<b> (Not Qualified)</b>"));
            jObj.put("DmRQualify", DmRQualify);
            jObj.put("IRR", authHandler.formattingDecimalForAmount(IRR_figureInPercentage, companyid) + "%");
            jArr.put(jObj);
        }
        return jArr;
    }

    private JSONArray getMalasianGSTForm5(HttpServletRequest request, boolean isForExport) throws JSONException, SessionExpiredException, ParseException, ServiceException {
        String fileType = "";
        KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
        Company company = (Company) cpresult.getEntityList().get(0);
        java.io.ByteArrayOutputStream baos = null;
        JSONObject msicsJosn = new JSONObject();
        Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
        Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
        String companyid = sessionHandlerImpl.getCompanyid(request);
        // isProperPeriodSelectedForDmRIRR will be true only if start date is 1st date and end date is last date of month
        boolean isProperPeriodSelectedForDmRIRR = false;
        Calendar cal = Calendar.getInstance();
        cal.setTime(startDate);
        if (cal.getActualMinimum(Calendar.DAY_OF_MONTH) == cal.get(Calendar.DAY_OF_MONTH)) {
            cal.setTime(endDate);
            if (cal.getActualMaximum(Calendar.DAY_OF_MONTH) == cal.get(Calendar.DAY_OF_MONTH)) {
                isProperPeriodSelectedForDmRIRR = true;
            }
        }
        request.setAttribute("issales", true);
        request.setAttribute("isSalesTax", true);
        String withoutinventory = request.getParameter("withoutinventory");

        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put("endDate", endDate);
        requestParams.put("startDate", startDate);

        requestParams.put("withoutinventory", withoutinventory);
        requestParams.put("excludeRetailPurchaseInvoice", true);//in case of Malaysian Company Retail Purchase invoice will not be included at here as we will deal with it seperately
        if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
            requestParams.put("gstFlag", true);
            request.setAttribute("filterCurrency", Constants.SGDID);
        }


        requestParams.put("locale", RequestContextUtils.getLocale(request));

        String searchJson = request.getParameter(Constants.Acc_Search_Json);
        String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
        if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
            requestParams.put(Constants.Acc_Search_Json, searchJson);
            requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
        }
        boolean isAdvanceSearch = requestParams.containsKey(Constants.isAdvanceSearch) ? (Boolean) requestParams.get(Constants.isAdvanceSearch) : false;
        int gstGuideReviseConfig = accGstService.getGSTGuideVersion(requestParams);

        requestParams.put("issales", true);
        requestParams.put("isSalesTax", true);
        requestParams.put("isForExport", isForExport);
        JSONArray salesjArr = getCalculatedTaxGST(requestParams, fileType);

        double totalSR7PercentSupplies = 0.00; // item #1
        double totalSRTaxAmount = 0.00; // item #1
        String taxCodeSR7PercentSupplies = "GST(SR)";

        double totalDSPercentSupplies = 0.00; // item #1
        double totalDSTaxAmount = 0.00; // item #1
        String taxCodeDSPercentSupplies = "GST(DS)";

        double totalAJSTaxAmount = 0.00; // item #1
        String AJSTaxCode = "GST(AJS)";
        
        double totalSRMSPercentSupplies = 0.00;
        double totalSRMSTaxAmount = 0.00;
        String SRMSTaxCode = Constants.MALAYSIAN_GST_SR_MS_TAX_CODE;
        
        double totalSRJWSPercentSupplies = 0.00;
        String SRJWSTaxCode = Constants.MALAYSIAN_GST_SR_JWS_TAX_CODE;

        double totalESPercentSupplies = 0.0d;
        String taxCodeZREPercentSupplies = "GST(ZRE)";
        String taxCodeZRLPercentSupplies = "GST(ZRL)";
        String taxCodeRSPercentSupplies = "GST(RS)";
//        String taxCodeOSPercentSupplies = "GST(OS)";
        String taxCodeGSPercentSupplies = "GST(GS)";
        String taxCodeESPercentSupplies = "GST(ES)";
        String taxCodeZDAPercentSupplies = Constants.MALAYSIAN_GST_ZDA_TAX_CODE;
        String taxCodeOSTXMTaxCodePercentSupplies = Constants.MALAYSIAN_GST_OS_TXM_TAX_CODE;
        String taxCodeNTXTaxCodePercentSupplies = Constants.MALAYSIAN_GST_NTX_TAX_CODE;
        
//        Set salesTaxSet = new HashSet();
//        salesTaxSet.add("GST(DS)");
//        salesTaxSet.add("GST(SR)");
//        salesTaxSet.add("GST(ZRL)");
//        salesTaxSet.add("GST(ZRE)");
//        salesTaxSet.add("GST(ES43)");
//        salesTaxSet.add("GST(OS)");
//        salesTaxSet.add("GST(ES)");
//        salesTaxSet.add("GST(RS)");
//        salesTaxSet.add("GST(GS)");
//        salesTaxSet.add("GST(AJS)");
//
//        double totalTaxDue = 0.00; // item #6

        double DmR_Variable_T = 0.0d;   // T = SR + ZRL + ZDA + ZRE + DS + RS + GS + OS-TXM + NTX
        double DmR_Variable_E = 0.0d;   // E = ES
        double DmR_Variable_O = 0.0d;
        double DmR_figure = 0.0d;
        double DmR_figureInPercentage = 0.0d;
        double IRR_figureInPercentage = 0.0d;
        boolean DmRQualify = false;
        for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
            JSONObject salesObj = salesjArr.getJSONObject(jsonVal);
            String taxCode = salesObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
            double invamt = salesObj.getDouble("invamt");
            double invtaxamount = salesObj.getDouble("invtaxamount");
            boolean isOutputTax = false;

            if (taxCodeSR7PercentSupplies.equalsIgnoreCase(taxCode)) {
                isOutputTax = true;
                totalSR7PercentSupplies += invamt - invtaxamount;
                totalSRTaxAmount += invtaxamount;
                DmR_Variable_T += invamt - invtaxamount;
            }
            if (taxCodeDSPercentSupplies.equalsIgnoreCase(taxCode)) {
                isOutputTax = true;
                totalDSPercentSupplies += invamt - invtaxamount;
                totalDSTaxAmount += invtaxamount;
                DmR_Variable_T += invamt - invtaxamount;
            }

            if (AJSTaxCode.equalsIgnoreCase(taxCode)) {
                isOutputTax = true;
                totalAJSTaxAmount += invtaxamount;
            }
            if (SRMSTaxCode.equalsIgnoreCase(taxCode)) {
                isOutputTax = true;
                totalSRMSPercentSupplies += invamt - invtaxamount;
                totalSRMSTaxAmount += invtaxamount;
            }
            if (gstGuideReviseConfig == Constants.GSTGuideDec2017_Version && SRJWSTaxCode.equalsIgnoreCase(taxCode)) {
                isOutputTax = true;
                totalSRJWSPercentSupplies += invamt;        // Total amount included in 5a for tax SR-JWS.
            }
            if (taxCodeRSPercentSupplies.equalsIgnoreCase(taxCode)) {
                DmR_Variable_T += invamt - invtaxamount;
            }
//            if (taxCodeOSPercentSupplies.equalsIgnoreCase(taxCode)) {
//                DmR_Variable_T += invamt - invtaxamount;      //OS tax is not included in De minimis rule and IIR.
//            }
            if (taxCodeGSPercentSupplies.equalsIgnoreCase(taxCode)) {
                DmR_Variable_T += invamt - invtaxamount;
            }
            if (taxCodeZRLPercentSupplies.equalsIgnoreCase(taxCode)) {
                DmR_Variable_T += invamt - invtaxamount;
            }
            if (taxCodeZREPercentSupplies.equalsIgnoreCase(taxCode)) {
                DmR_Variable_T += invamt - invtaxamount;
            }
            if (taxCodeZDAPercentSupplies.equalsIgnoreCase(taxCode)) {
                DmR_Variable_T += invamt - invtaxamount;
            }
            if (taxCodeOSTXMTaxCodePercentSupplies.equalsIgnoreCase(taxCode)) {
                DmR_Variable_T += invamt - invtaxamount;
            }
            if (taxCodeNTXTaxCodePercentSupplies.equalsIgnoreCase(taxCode)) {
                DmR_Variable_T += invamt - invtaxamount;
            }
            if (taxCodeESPercentSupplies.equalsIgnoreCase(taxCode)) {
                totalESPercentSupplies += invamt - invtaxamount;
                DmR_Variable_E += invamt - invtaxamount;
            }
            
            
            
            // If the Output tax include in MSIC json for export
            if (isForExport && isOutputTax && salesObj.has(Constants.MSIC_DETAIS_JSON)) {
                JSONArray jarray = salesObj.getJSONArray(Constants.MSIC_DETAIS_JSON);
                if (jarray != null) {
                    for (int i = 0; i < jarray.length(); i++) {
                        JSONObject jobj = jarray.getJSONObject(i);
                        String msiccode = jobj.optString(Constants.MSIC_CODE, "");
                        double industrytax = jobj.optDouble(Constants.MSIC_INVTAXAMT, 0);
                        if (msicsJosn.has(msiccode)) {
                            double industrytaxprsent = msicsJosn.optDouble(msiccode, 0); // Current total plus added amount entry
                            msicsJosn.put(msiccode, industrytax + industrytaxprsent);
                        } else {
                            msicsJosn.put(msiccode, industrytax);
                        }
                    }
                }
            }
        }

        double totalTXAmountExcludingGST = 0.00; // item #1
        double totalTXTaxAmount = 0.00; // item #1

        double salesInvoiceClaimedAmt = 0;
        double purchaseInvoiceClaimedAmt = 0;
        double salesInvoiceRecoveredAmt = 0;
        double purchaseInvoiceRecoveredAmt = 0;

        // get Bad Debt Invoices
        // Calculating Customer Invoices Adjustment Amount
        JSONArray industryCodeJsonArr = new JSONArray();
        request.setAttribute("isForExport", isForExport); // Check for Export form 3 Jasper Template
        List<Double> doAdjsMent = getAppliedDeliveryOrders(request,industryCodeJsonArr);//

        double totalAppliedAmountExcludingGST = doAdjsMent.get(0);
        double totalAppliedTaxAmount = doAdjsMent.get(1);
        DmR_Variable_T += doAdjsMent.get(2);

//        if (isAdvanceSearch) {
//            requestParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//            requestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.journalEntrySearchJson));
//        }
//        List<Double> adjsMentTaxes = getAdjustmentTaxes(requestParams);
//
//        double inputTaxAdjustment = adjsMentTaxes.get(0);
//        double outputTaxAdjustment = adjsMentTaxes.get(1);

        List<Double> ciAdjsMent = getBadDebtClaimedInvoices(request);

        salesInvoiceClaimedAmt += ciAdjsMent.get(1);

        // Calculating P Invoices Adjustment Amount
        List<Double> ciAdjpMent = getBadDebtRecoveredInvoices(request , industryCodeJsonArr); //

        salesInvoiceRecoveredAmt += ciAdjpMent.get(1);

        // Calculating Customer Invoices Adjustment Amount
        List<Double> ciAdjs1Ment = getBadDebtClaimedPurchaseInvoices(request ,  industryCodeJsonArr);//

        purchaseInvoiceClaimedAmt += ciAdjs1Ment.get(1);

        // Calculating P Invoices Adjustment Amount
        List<Double> ciAdjp1Ment = getBadDebtPurchaseRecoveredInvoices(request);
        purchaseInvoiceRecoveredAmt += ciAdjp1Ment.get(1);

        List<Double> importServiceTaxList = getImportedServicesInvoices(request , industryCodeJsonArr); 

        totalDSPercentSupplies += importServiceTaxList.get(0);
        totalDSTaxAmount += importServiceTaxList.get(1);

        totalTXAmountExcludingGST += importServiceTaxList.get(0);
        totalTXTaxAmount += importServiceTaxList.get(1);
        
        /*
         * ERP-9782 : getting Free Gift JsonArray for including into the form 03 and detailed view.
         */ 
        List<Double> freeGiftJEList = getFreeGiftJEList(request,industryCodeJsonArr);
        if(!freeGiftJEList.isEmpty()){
            totalDSPercentSupplies += freeGiftJEList.get(0);
            totalDSTaxAmount += freeGiftJEList.get(1);
        }
/* Add the MSIC */
          if (industryCodeJsonArr != null) {
            for (int i = 0; i < industryCodeJsonArr.length(); i++) {
                JSONObject jobj = industryCodeJsonArr.getJSONObject(i);
                String msiccode = jobj.optString(Constants.MSIC_CODE, "");
                double industrytax = jobj.optDouble(Constants.MSIC_INVTAXAMT, 0);
                if (msicsJosn.has(msiccode)) {
                    double industrytaxprsent = msicsJosn.optDouble(msiccode, 0); // Current total plus added amount entry
                    msicsJosn.put(msiccode, industrytax + industrytaxprsent);
                } else {
                    msicsJosn.put(msiccode, industrytax);
                }
            }
        }
        HashMap<String, Object> retailPurchases = getRetailPurchases(request);
        double retailPurchaseAmountExcludingTax = (Double) retailPurchases.get("retailPurchaseAmountExcludingTax");
        double retailPurchaseTaxAmount = (Double) retailPurchases.get("retailPurchaseTaxAmount");

        if (isProperPeriodSelectedForDmRIRR) {
            int monthMultiplyFactor = 1;
            Calendar startDateCal = Calendar.getInstance();
            Calendar endDateCal = Calendar.getInstance();
            startDateCal.setTime(startDate);
            endDateCal.setTime(endDate);
            int differenceInYears = endDateCal.get(Calendar.YEAR) - startDateCal.get(Calendar.YEAR);
            int actualDifferenceInYears = differenceInYears;
            int startDateMonth = startDateCal.get(Calendar.MONTH);
            int endDateMonth = endDateCal.get(Calendar.MONTH);
            /*
             * ERP-21589 Calculation of monthMultiplyFactor it is for
             * calculating the period of months user has selected. DmR and IRR
             * will be calculated according to period of months selected.
             * Example of for counting the period in months - Suppose start date
             * = 1st April and end date is 30th Sept. Here difference in years
             * will be calculated as (8)-(3) = 5 but we are including april and
             * september in date period. So total months will be 6 . Therefore
             * we are adding 1 to calculated value. Example 2 - Start date = 1st
             * april 2015, end date = 30th Sept 2017 Here year difference = 2.
             * We are taking actual year diff = 2-1= 1. we will calculate the
             * total month period as following- 1st April 2015 to 31st Dec 2015
             * = 9 months 12 months of year 2016 1st jan 2017 to 30th sept 2017
             * = 10 total months = 9+12+10 = 28
             */
            if (differenceInYears == 0) {
                monthMultiplyFactor = (endDateMonth - startDateMonth + 1); // +1 is for calculating period with including start and end date months
            } else {
                // calculating the months period when start date and end dates lies between different calendar years.
                actualDifferenceInYears = actualDifferenceInYears - 1;
                monthMultiplyFactor = ((11 - startDateMonth + 1) + (actualDifferenceInYears * 12) + (endDateMonth + 1));
            }
            // Check whether DmR is qualified or not as per standard given by IRAS

            DmR_figure = (DmR_Variable_E) / (DmR_Variable_E + DmR_Variable_T);
            DmR_figureInPercentage = DmR_figure * 100;
            DmR_figureInPercentage = authHandler.round(DmR_figureInPercentage, companyid);
            if (totalESPercentSupplies > (monthMultiplyFactor * Constants.DmR_totalESPercentSupplies_Limit)) {
                DmRQualify = false;
            } else {
                if (DmR_figureInPercentage > Constants.DmR_figureInPercentage_Limit || DmR_figureInPercentage == 0) {
                    DmRQualify = false;
                } else {
                    DmRQualify = true;
                }
            }
            if (DmRQualify) {
                IRR_figureInPercentage = 100;
            } else {
                IRR_figureInPercentage = ((DmR_Variable_T - DmR_Variable_O) * 100) / (DmR_Variable_T + DmR_Variable_E - DmR_Variable_O);
                IRR_figureInPercentage = authHandler.round(IRR_figureInPercentage, companyid);
            }
        }

        requestParams.put("issales", false);
        requestParams.put("isSalesTax", false);
        JSONArray purchasejArr = getCalculatedTaxGST(requestParams, fileType);

//        Set purchaseTaxSet = new HashSet();
//        purchaseTaxSet.add("GST(TX)");
//        purchaseTaxSet.add("GST(IM)");
//        purchaseTaxSet.add("GST(IS)");
//        purchaseTaxSet.add("GST(BL)");
//        purchaseTaxSet.add("GST(NR)");
//        purchaseTaxSet.add("GST(ZP)");
//        purchaseTaxSet.add("GST(EP)");
//        purchaseTaxSet.add("GST(OP)");
//        purchaseTaxSet.add("GST(TX-E43)");
//        purchaseTaxSet.add("GST(TX-N43)");
//        purchaseTaxSet.add("GST(TX-RE)");
//        purchaseTaxSet.add("GST(GP)");
//        purchaseTaxSet.add("GST(AJP)");
//        purchaseTaxSet.add(Constants.MALAYSIAN_GST_TX_CG_TAX_CODE);

        String TXTaxCode = "GST(TX)";

        double totalIMAmountExcludingGST = 0.00; // item #1
        double totalIMTaxAmount = 0.00; // item #1
        String IMTaxCode = "GST(IM)";

        double totalTXCGAmountExcludingGST = 0.00; // item #1
        double totalTXCGTaxAmount = 0.00; // item #1
        String TXCGTaxCode = Constants.MALAYSIAN_GST_TX_CG_TAX_CODE;
        
        double totalIMCGAmountExcludingGST = 0.00;
        double totalIMCGTaxAmount = 0.00;
        String IMCGTaxCode = Constants.MALAYSIAN_GST_IM_CG_CODE;
        
//        double totalTXE43AmountExcludingGST = 0.00; // item #1
//        double totalTXE43TaxAmount = 0.00; // item #1
//        String TXE43TaxCode = "GST(TX-E43)";
        
        //TXE43 renamed as TX-IES.
        double totalTXIESAmountExcludingGST = 0.00;
        double totalTXIESTaxAmount = 0.00;
        String TXIESTaxCode = Constants.MALAYSIAN_GST_TX_IES_TAX_CODE;
        
        double totalTXESAmountExcludingGST = 0.00;
        double totalTXESTaxAmount = 0.00;
        String TXESTaxCode = Constants.MALAYSIAN_GST_TX_ES_TAX_CODE;
        
        double totalTXFRSAmountExcludingGST = 0.00;
        double totalTXFRSTaxAmount = 0.00;
        String TXFRSTaxCode = Constants.MALAYSIAN_GST_TX_FRS_TAX_CODE;

        double totalTXREAmountExcludingGST = 0.00; // item #1
        double totalTXRETaxAmount = 0.00; // item #1
        String TXRETaxCode = "GST(TX-RE)";

        double totalAJPTaxAmount = 0.00; // item #1
        String AJPTaxCode = "GST(AJP)";

        Set importedTaxSet = new HashSet();
        importedTaxSet.add("GST(IM)");
        importedTaxSet.add("ME");
        double totalInputTaxClaimed = 0.00; // item #7

        for (int jsonVal = 0; jsonVal < purchasejArr.length(); jsonVal++) {
            JSONObject purchaseObj = purchasejArr.getJSONObject(jsonVal);
            String taxCode = purchaseObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
//        	String taxName = purchaseObj.getString("taxname");
            double invamt = purchaseObj.getDouble("invamt");
            double invtaxamount = purchaseObj.getDouble("invtaxamount");

            if (TXTaxCode.equalsIgnoreCase(taxCode)) {
                totalTXAmountExcludingGST += invamt - invtaxamount;
                totalTXTaxAmount += invtaxamount;
            }

            if (IMTaxCode.equalsIgnoreCase(taxCode)) {
                totalIMAmountExcludingGST += invamt - invtaxamount;
                totalIMTaxAmount += invtaxamount;
            }

            if (TXCGTaxCode.equalsIgnoreCase(taxCode)) {
                totalTXCGAmountExcludingGST += invamt - invtaxamount;
                totalTXCGTaxAmount += invtaxamount;
            }
            //TXE43 renamed as TX-IES.
            if (TXIESTaxCode.equalsIgnoreCase(taxCode)) {
                totalTXIESAmountExcludingGST += invamt - invtaxamount;
                totalTXIESTaxAmount += invtaxamount;
            }

            if (TXRETaxCode.equalsIgnoreCase(taxCode)) {
                totalTXREAmountExcludingGST += invamt - invtaxamount;
                totalTXRETaxAmount += (invtaxamount * IRR_figureInPercentage) / 100;
            }

            if (AJPTaxCode.equalsIgnoreCase(taxCode)) {
                totalAJPTaxAmount += invtaxamount;
            }
            if (TXFRSTaxCode.equalsIgnoreCase(taxCode)) {
                totalTXFRSAmountExcludingGST += invamt - invtaxamount;
                totalTXFRSTaxAmount += invtaxamount;
            }
            if (DmRQualify && TXESTaxCode.equalsIgnoreCase(taxCode)) {//TX-ES tax Only include once de minimis Rule is fulfilled
                totalTXESAmountExcludingGST += invamt - invtaxamount;
                totalTXESTaxAmount += invtaxamount;
            }
            if ((gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version) && IMCGTaxCode.equalsIgnoreCase(taxCode)) {
                totalIMCGAmountExcludingGST += invamt - invtaxamount;
                totalIMCGTaxAmount += invtaxamount;
            }
        }

        double totalStandardRatedSupplyAmountExcludingGST = totalSR7PercentSupplies + totalDSPercentSupplies + totalAppliedAmountExcludingGST + totalSRMSPercentSupplies + totalSRJWSPercentSupplies;
        
        double totalOutPutTax = totalSRTaxAmount + totalDSTaxAmount + totalAJSTaxAmount + totalAppliedTaxAmount + salesInvoiceRecoveredAmt + purchaseInvoiceClaimedAmt + totalSRMSTaxAmount;
        /*
         * MLAYASIAN GST TAX BREAKUP OTHRES ENTRY
         */
        if (isForExport ) {
            msicsJosn.put(Constants.MSIC_OTHRES, totalAppliedTaxAmount + salesInvoiceRecoveredAmt + purchaseInvoiceClaimedAmt);
            msicsJosn.put(Constants.MSIC_TOTAL, totalOutPutTax);
        }

        double totalStandardRatedAcquisitionAmountExcludingGST = totalTXAmountExcludingGST + totalIMAmountExcludingGST + totalTXIESAmountExcludingGST + totalTXCGAmountExcludingGST + totalTXREAmountExcludingGST + retailPurchaseAmountExcludingTax + totalTXFRSAmountExcludingGST + totalTXESAmountExcludingGST + totalIMCGAmountExcludingGST;

        double totalInputTax = totalTXTaxAmount + totalIMTaxAmount + totalTXIESTaxAmount + totalTXRETaxAmount + totalAJPTaxAmount + totalTXCGTaxAmount + retailPurchaseTaxAmount + salesInvoiceClaimedAmt + purchaseInvoiceRecoveredAmt + totalTXFRSTaxAmount + totalTXESTaxAmount + totalIMCGTaxAmount;

        double totalGSTAmountPayable = totalOutPutTax - totalInputTax;
        double totalGSTAmountClaimable = totalInputTax - totalOutPutTax;

        // in following both which one will be (-)ve will be make zero
        if (totalGSTAmountPayable < 0) {
            totalGSTAmountPayable = 0.00;
        } else if (totalGSTAmountClaimable < 0) {
            totalGSTAmountClaimable = 0.00;
        }
        JSONArray jArr = new JSONArray();
        JSONObject jObj = new JSONObject();
        int contentLevel = 1;

        jObj = new JSONObject();
        jObj.put("taxname", "Total value of standard rated supply");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalStandardRatedSupplyAmountExcludingGST, companyid), companyid));
            jObj.put("box", "'(1)");
            jObj.put(Constants.taxkeyJasper, "Tax_5A");
        } else {
            jObj.put("taxamount", totalStandardRatedSupplyAmountExcludingGST);
            jObj.put("box", "(1)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "OUTPUT TAX");

        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Total Output Tax (Supply * GST Rate)");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalOutPutTax, companyid), companyid));
            jObj.put("box", "'(4)");
            jObj.put(Constants.taxkeyJasper, "Tax_5B");
        } else {
            jObj.put("taxamount", totalOutPutTax);
            jObj.put("box", "(4)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "OUTPUT TAX");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Total value of Standard Rated Acquisition");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalStandardRatedAcquisitionAmountExcludingGST, companyid), companyid));
            jObj.put("box", "'(5)");
            jObj.put(Constants.taxkeyJasper, "Tax_6A");
        } else {
            jObj.put("taxamount", totalStandardRatedAcquisitionAmountExcludingGST);
            jObj.put("box", "(5)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "INPUT TAX");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Total Input Tax(Acquisition * GST Rate)");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalInputTax, companyid), companyid));
            jObj.put("box", "'(5)");
            jObj.put(Constants.taxkeyJasper, "Tax_6B");
        } else {
            jObj.put("taxamount", totalInputTax);
            jObj.put("box", "(5)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "INPUT TAX");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "GST Amount Payable");// Output tax due
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalGSTAmountPayable, companyid), companyid));
            jObj.put("box", "'(6)");
            jObj.put(Constants.taxkeyJasper, "Tax_7");
        } else {
            jObj.put("taxamount", totalGSTAmountPayable);
            jObj.put("box", "(6)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "INPUT TAX");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "GST Amount Claimable");//Less : input tax and refunds claimed
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalGSTAmountClaimable, companyid), companyid));
            jObj.put("box", "'(7)");
            jObj.put(Constants.taxkeyJasper, "Tax_8");
        } else {
            jObj.put("taxamount", totalGSTAmountClaimable);
            jObj.put("box", "(7)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "INPUT TAX");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Do you choose to carry forward Refund?");//Less : input tax and refunds claimed
        if (isForExport) {
            jObj.put("taxamount", "chkboxval");
            jObj.put("box", "'(7)");
            jObj.put(Constants.taxkeyJasper, "Tax_9");
        } else {
            jObj.put("taxamount", "chkboxval");
            jObj.put("box", "(7)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "INPUT TAX");
        jArr.put(jObj);
        if (isProperPeriodSelectedForDmRIRR) {
            jObj = new JSONObject();
            jObj.put("DmR", authHandler.formattingDecimalForAmount(DmR_figureInPercentage, companyid) + "%" + (DmRQualify ? "<b> (Qualified)</b>" : "<b> (Not Qualified)</b>"));
            jObj.put("DmRQualify", DmRQualify);
            jObj.put("IRR", authHandler.formattingDecimalForAmount(IRR_figureInPercentage, companyid) + "%");
            jArr.put(jObj);
        }
        /*
         * BREAKUP JSON ENTRY
         */
        if (isForExport) {
            jArr.put(msicsJosn);
        }
        return jArr;
    }

    private JSONArray getGSTForm5Additional(HttpServletRequest request, boolean isForExport) throws JSONException, SessionExpiredException, ParseException, ServiceException {
        String fileType = "";
        KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
        Company company = (Company) cpresult.getEntityList().get(0);
        Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
        Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
        String companyid = sessionHandlerImpl.getCompanyid(request);
        request.setAttribute("issales", true);
        String withoutinventory = request.getParameter("withoutinventory");

        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put("endDate", endDate);
        requestParams.put("startDate", startDate);

        requestParams.put("withoutinventory", withoutinventory);
        if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
            requestParams.put("gstFlag", true);
            request.setAttribute("filterCurrency", Constants.SGDID);
        }

        requestParams.put("issales", false);
        requestParams.put("isSalesTax", false);
        requestParams.put("locale", RequestContextUtils.getLocale(request));
        String searchJson = request.getParameter(Constants.Acc_Search_Json);
        
        String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
        if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
            requestParams.put(Constants.Acc_Search_Json, searchJson);
            requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
        }
        int gstGuideReviseConfig = accGstService.getGSTGuideVersion(requestParams);
        
        JSONArray purchasejArr = getCalculatedTaxGST(requestParams, fileType);

//        Set purchaseTaxSet = new HashSet();
//        purchaseTaxSet.add("GST(TX)");
//        purchaseTaxSet.add("GST(IM)");
//        purchaseTaxSet.add("GST(IS)");
//        purchaseTaxSet.add("GST(BL)");
//        purchaseTaxSet.add("GST(NR)");
//        purchaseTaxSet.add("GST(ZP)");
//        purchaseTaxSet.add("GST(EP)");
//        purchaseTaxSet.add("GST(OP)");
//        purchaseTaxSet.add("GST(TX-E43)");
//        purchaseTaxSet.add("GST(TX-N43)");
//        purchaseTaxSet.add("GST(TX-RE)");
//        purchaseTaxSet.add("GST(GP)");
//        purchaseTaxSet.add("GST(AJP)");

        double totalISAmountExcludingGST = 0.00; // item #1
        String ISTaxCode = "GST(IS)";
//        String TXTaxCode = "GST(TX)";
        double gstSuspendedTax = 0;

//        Set importedTaxSet = new HashSet();
//        importedTaxSet.add("GST(IM)");
//        importedTaxSet.add("ME");

        double totalIMCGAmountExcludingGST = 0.00;
        String IMCGTaxCode = Constants.MALAYSIAN_GST_IM_CG_CODE;
        for (int jsonVal = 0; jsonVal < purchasejArr.length(); jsonVal++) {
            JSONObject purchaseObj = purchasejArr.getJSONObject(jsonVal);
            String taxCode = purchaseObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
//        	String taxName = purchaseObj.getString("taxname");
            double invamt = purchaseObj.getDouble("invamt");
            double invtaxamount = purchaseObj.getDouble("invtaxamount");

            if (ISTaxCode.contains(taxCode)) {
                totalISAmountExcludingGST += invamt - invtaxamount;
                gstSuspendedTax += (invamt * 6 / 100);
            }
            if ((gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version) && IMCGTaxCode.equalsIgnoreCase(taxCode)) {
                totalIMCGAmountExcludingGST += invamt - invtaxamount;
            }
        }

        requestParams.put("issales", true);
        requestParams.put("isSalesTax", true);
        JSONArray salesjArr = getCalculatedTaxGST(requestParams, fileType);

//        String taxCodeSR7PercentSupplies = "GST(SR)";
        double totalZRLAmount = 0.00; // item #1
        String ZRLTaxCode = "GST(ZRL)";
        
        double totalZREAmount = 0.00; // item #1
        String ZRETaxCode = "GST(ZRE)";
        
//        double totalES43Amount = 0.00; // item #1
//        String ES43TaxCode = "GST(ES43)";

        //ES43 renamed as IES.
        double totalIESAmount = 0.00;
        String IESTaxCode = Constants.MALAYSIAN_GST_IES_TAX_CODE;

        double totalNTXAmount = 0.00;
        String NTXTaxCode = Constants.MALAYSIAN_GST_NTX_TAX_CODE;
        
        double totalZDAAmount = 0.00;
        String ZDATaxCode = Constants.MALAYSIAN_GST_ZDA_TAX_CODE;
        
        double totalESAmount = 0.00; // item #1
        String ESTaxCode = "GST(ES)";

        double totalRSAmount = 0.00; // item #1
        String RSTaxCode = "GST(RS)";
        
        double totalValueofOtherSupplies = 0;
        String OSTaxCode = Constants.MALAYSIAN_GST_OS_TAX_CODE;
        String GSTaxCode = Constants.MALAYSIAN_GST_GS_TAX_CODE;
        String OSTXMTaxCode = Constants.MALAYSIAN_GST_OS_TXM_TAX_CODE;
        String SRJWSTaxCode = Constants.MALAYSIAN_GST_SR_JWS_TAX_CODE;
        
//        String AJSTaxCode = "GST(AJS)";

//        Set salesTaxSet = new HashSet();
//        salesTaxSet.add("GST(DS)");
//        salesTaxSet.add("GST(SR)");
//        salesTaxSet.add("GST(ZRL)");
//        salesTaxSet.add("GST(ZRE)");
//        salesTaxSet.add("GST(ES43)");
//        salesTaxSet.add("GST(OS)");
//        salesTaxSet.add("GST(ES)");
//        salesTaxSet.add("GST(RS)");
//        salesTaxSet.add("GST(GS)");
//        salesTaxSet.add("GST(AJS)");

        for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
            JSONObject salesObj = salesjArr.getJSONObject(jsonVal);
            String taxCode = salesObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
            double invamt = salesObj.getDouble("invamt");
//            double invtaxamount = salesObj.getDouble("invtaxamount");

            if (ZRLTaxCode.equalsIgnoreCase(taxCode)) {
                totalZRLAmount += invamt;
            }
            if (ZRETaxCode.equalsIgnoreCase(taxCode)) {
                totalZREAmount += invamt;
            }
            //ES43 renamed as IES.
            if (IESTaxCode.equalsIgnoreCase(taxCode)) {
                totalIESAmount += invamt;
            }
            if (ESTaxCode.equalsIgnoreCase(taxCode)) {
                totalESAmount += invamt;
            }
            if (RSTaxCode.equalsIgnoreCase(taxCode)) {
                totalRSAmount += invamt;
            }
            if (ZDATaxCode.equalsIgnoreCase(taxCode)) {
                totalZDAAmount += invamt;
            }
            if ((gstGuideReviseConfig == Constants.GSTGuideDec2017_Version) && NTXTaxCode.equalsIgnoreCase(taxCode)) {
                totalNTXAmount += invamt;
            }
            if ((gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version) && (OSTaxCode.equalsIgnoreCase(taxCode) || GSTaxCode.equalsIgnoreCase(taxCode) || OSTXMTaxCode.equalsIgnoreCase(taxCode) || NTXTaxCode.equalsIgnoreCase(taxCode) || SRJWSTaxCode.equalsIgnoreCase(taxCode))) {
                totalValueofOtherSupplies += invamt;//Total Value of Other Supplies.
            }
        }

        double salesInvoiceClaimedAmt = 0;
        double salesInvoiceRecoveredAmt = 0;

        // Calculating Customer Invoices Adjustment Amount
        List<Double> ciAdjsMent = getBadDebtClaimedInvoices(request);

        salesInvoiceClaimedAmt += ciAdjsMent.get(0);

        // Calculating P Invoices Adjustment Amount
        List<Double> ciAdjpMent = getBadDebtRecoveredInvoices(request , new JSONArray());

        salesInvoiceRecoveredAmt += ciAdjpMent.get(0);

        double totalValueOfCapitalGoodsAcquiredExcludingGST = getCapitalGoodsAcquired(request);

        double totalExemptedSupplies = totalIESAmount + totalESAmount;

        JSONArray jArr = new JSONArray();
        JSONObject jObj = new JSONObject();
        int contentLevel = 1;

        jObj = new JSONObject();
        jObj.put("taxname", "Total value of Local Zero-Rated supplies");// Total value of Local Zero-Rated supplies = totalZRLAmount + totalNTXAmount
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalZRLAmount + totalNTXAmount, companyid), companyid));
            jObj.put("box", "'(2)");
            jObj.put(Constants.taxkeyJasper, "Tax_10");
        } else {
            jObj.put("taxamount", totalZRLAmount + totalNTXAmount);
            jObj.put("box", "(2)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "ADDITIONAL INFORMATION");

        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Total value of Exported supplies");// Total value of Exported supplies = totalZREAmount + totalZDAAmount
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalZREAmount + totalZDAAmount, companyid), companyid));
            jObj.put("box", "'(2)");
            jObj.put(Constants.taxkeyJasper, "Tax_11");
        } else {
            jObj.put("taxamount", totalZREAmount + totalZDAAmount);
            jObj.put("box", "(2)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "ADDITIONAL INFORMATION");

        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Total value of exempt supplies");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalExemptedSupplies, companyid), companyid));
            jObj.put("box", "'(3)");
            jObj.put(Constants.taxkeyJasper, "Tax_12");
        } else {
            jObj.put("taxamount", totalExemptedSupplies);
            jObj.put("box", "(3)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "ADDITIONAL INFORMATION");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Total value supplies Granted GST Relief");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalRSAmount, companyid), companyid));
            jObj.put("box", "'(3)");
            jObj.put(Constants.taxkeyJasper, "Tax_13");
        } else {
            jObj.put("taxamount", totalRSAmount);
            jObj.put("box", "(3)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "ADDITIONAL INFORMATION");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Total Value of Goods Imported Under Approved Trader Scheme");//Total value of goods imported under this scheme
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalISAmountExcludingGST, companyid), companyid));
            jObj.put("box", "'(9)");
            jObj.put(Constants.taxkeyJasper, "Tax_14");
        } else {
            jObj.put("taxamount", totalISAmountExcludingGST);
            jObj.put("box", "(9)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "ADDITIONAL INFORMATION");//Applicable to Taxable Persons under Major Exporter Scheme / Approved 3rd Party Logistics Company / Other Approved Schemes Only	        
        jArr.put(jObj);

        if (gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version) {
            jObj = new JSONObject();
            jObj.put("taxname", "Total Value of Other Supplies");
            if (isForExport) {
                jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalValueofOtherSupplies, companyid), companyid));
                jObj.put("box", "'(9)");
                jObj.put(Constants.taxkeyJasper, "Tax_15");
            } else {
                jObj.put("taxamount", totalValueofOtherSupplies);
                jObj.put("box", "(9)");
            }
            jObj.put("level", contentLevel);
            jObj.put("mergedCategoryData", "ADDITIONAL INFORMATION");
            jArr.put(jObj);
        } else {
            jObj = new JSONObject();
            jObj.put("taxname", "Total Value of GST Suspended Under Approved Trader Scheme");
            if (isForExport) {
                jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(gstSuspendedTax, companyid), companyid));
                jObj.put("box", "'(9)");
                jObj.put(Constants.taxkeyJasper, "Tax_15");
            } else {
                jObj.put("taxamount", gstSuspendedTax);
                jObj.put("box", "(9)");
            }
            jObj.put("level", contentLevel);
            jObj.put("mergedCategoryData", "ADDITIONAL INFORMATION");
            jArr.put(jObj);

        }
        jObj = new JSONObject();
        jObj.put("taxname", "Total Value of Capital Goods Acquired");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalValueOfCapitalGoodsAcquiredExcludingGST + totalIMCGAmountExcludingGST, companyid), companyid));
            jObj.put("box", "'(9)");
            jObj.put(Constants.taxkeyJasper, "Tax_16");
        } else {
            jObj.put("taxamount", totalValueOfCapitalGoodsAcquiredExcludingGST + totalIMCGAmountExcludingGST);
            jObj.put("box", "(9)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "ADDITIONAL INFORMATION");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Bad Debt Relief");
        if (isForExport) {
                jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(salesInvoiceClaimedAmt, companyid), companyid));
            jObj.put("box", "'(9)");
            jObj.put(Constants.taxkeyJasper, "Tax_17");
        } else {
                jObj.put("taxamount", salesInvoiceClaimedAmt);
            jObj.put("box", "(9)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "ADDITIONAL INFORMATION");
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Bad Debt Recovered");
        if (isForExport) {
                jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(salesInvoiceRecoveredAmt, companyid), companyid));
            jObj.put("box", "'(9)");
            jObj.put(Constants.taxkeyJasper, "Tax_18");
        } else {
                jObj.put("taxamount", salesInvoiceRecoveredAmt);
            jObj.put("box", "(9)");
        }
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "ADDITIONAL INFORMATION");
        jArr.put(jObj);

        return jArr;
    }

    public HashMap<String, Object> getRetailPurchases(HttpServletRequest request) throws SessionExpiredException, ServiceException {
        HashMap<String, Object> returnMap = new HashMap<String, Object>();

        String companyid = sessionHandlerImpl.getCompanyid(request);
        HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
        reqParams.put(Constants.REQ_startdate, request.getParameter("stdate"));
        reqParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
        reqParams.put("dateformat", authHandler.getDateOnlyFormat());
        reqParams.put(Constants.companyKey, companyid);
        reqParams.put("nondeleted", "true");
        reqParams.put("isRetailPurchase", true);
        reqParams.put("includeFixedAssetInvoicesFlag", true);

        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);

        double retailPurchaseAmountExcludingTax = 0d;
        double retailPurchaseTaxAmount = 0d;
        try {
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId);
                reqParams.put(Constants.fixedAssetsPurchaseInvoiceSearchJson, accReportsService.getSearchJsonByModule(reqParams));
                reqParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            KwlReturnObject result = accGoodsReceiptDAOObj.getGoodsReceipts(reqParams);

            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                List<GoodsReceipt> goodsReceiptsList = result.getEntityList();
                for (GoodsReceipt gr : goodsReceiptsList) {
                    JournalEntryDetail d = gr.getVendorEntry();
                    double invoiceOriginalAmt = d.getAmount();

//                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmt, gr.getJournalEntry().getCurrency().getCurrencyID(), gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmt, gr.getJournalEntry().getCurrency().getCurrencyID(), gr.getCreationDate(), gr.getJournalEntry().getExternalCurrencyRate());

                    invoiceOriginalAmt = (Double) bAmt.getEntityList().get(0);

                    double invoiceLevelTaxAmount = 0;

                    if (gr.getTaxEntry() != null) {
                        invoiceLevelTaxAmount = gr.getTaxEntry().getAmount();
                    }

                    double rowTaxAmount = 0d;
                    if (gr.getRows() != null && !gr.getRows().isEmpty()) {
                        Set<GoodsReceiptDetail> details = gr.getRows();
                        for (GoodsReceiptDetail grd : details) {
                            rowTaxAmount += grd.getRowTaxAmount() + grd.getRowTermTaxAmount();
                        }
                    }

                    double rpTaxAmount = (invoiceLevelTaxAmount + rowTaxAmount);

//                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rpTaxAmount, gr.getJournalEntry().getCurrency().getCurrencyID(), gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rpTaxAmount, gr.getJournalEntry().getCurrency().getCurrencyID(), gr.getCreationDate(), gr.getJournalEntry().getExternalCurrencyRate());

                    rpTaxAmount = (Double) bAmt.getEntityList().get(0);

                    double rpAmountExcludingTax = (invoiceOriginalAmt - rpTaxAmount);

                    if (rpAmountExcludingTax < Constants.MALAYSIAN_RETAIL_PURCHASE_INVOICE_AMOUNT_LIMIT) {//500 RM
                        retailPurchaseAmountExcludingTax += rpAmountExcludingTax;
                    } else {
                        retailPurchaseAmountExcludingTax += Constants.MALAYSIAN_RETAIL_PURCHASE_INVOICE_AMOUNT_LIMIT;
                    }

                    if (rpTaxAmount < Constants.MALAYSIAN_RETAIL_PURCHASE_TAX_AMOUNT_LIMIT) {//30 RM
                        retailPurchaseTaxAmount += rpTaxAmount;
                    } else {
                        retailPurchaseTaxAmount += Constants.MALAYSIAN_RETAIL_PURCHASE_TAX_AMOUNT_LIMIT;
                    }
                }
            }
            returnMap.put("retailPurchaseAmountExcludingTax", authHandler.round(retailPurchaseAmountExcludingTax, companyid));
            returnMap.put("retailPurchaseTaxAmount", authHandler.round(retailPurchaseTaxAmount, companyid));
        } catch (SessionExpiredException | UnsupportedEncodingException | ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getRetailPurchases : " + ex.getMessage(), ex);
        }
        return returnMap;
    }

    public JSONArray getRetailPurchasesJsonArray(HttpServletRequest request) throws SessionExpiredException, ServiceException, JSONException {
        JSONArray returnArray = new JSONArray();
        String companyid = sessionHandlerImpl.getCompanyid(request);
        HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
        reqParams.put(Constants.REQ_startdate, request.getParameter("stdate"));
        reqParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
        reqParams.put("dateformat", authHandler.getDateOnlyFormat());
        reqParams.put(Constants.companyKey, companyid);
        reqParams.put("nondeleted", "true");
        reqParams.put("isRetailPurchase", true);
        reqParams.put("includeFixedAssetInvoicesFlag", true);

        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        try {
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId);
                reqParams.put(Constants.fixedAssetsPurchaseInvoiceSearchJson, accReportsService.getSearchJsonByModule(reqParams));
                reqParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            KwlReturnObject result = accGoodsReceiptDAOObj.getGoodsReceipts(reqParams);
            DateFormat odf = authHandler.getOnlyDateFormat(request);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                List<GoodsReceipt> goodsReceiptsList = result.getEntityList();

                for (GoodsReceipt gr : goodsReceiptsList) {
                    JournalEntryDetail d = gr.getVendorEntry();
                    double invoiceOriginalAmt = d.getAmount();

                    String taxCode = "";

//                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmt, gr.getJournalEntry().getCurrency().getCurrencyID(), gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmt, gr.getJournalEntry().getCurrency().getCurrencyID(), gr.getCreationDate(), gr.getJournalEntry().getExternalCurrencyRate());

                    invoiceOriginalAmt = (Double) bAmt.getEntityList().get(0);

                    JournalEntry je = gr.getJournalEntry();

                    double invoiceLevelTaxAmount = 0;

                    if (gr.getTaxEntry() != null) {
                        invoiceLevelTaxAmount = gr.getTaxEntry().getAmount();
                    }

                    taxCode = (gr.getTax() != null) ? gr.getTax().getTaxCode() : "";

                    double rowTaxAmount = 0d;

                    if (gr.getRows() != null && !gr.getRows().isEmpty()) {
                        Set<GoodsReceiptDetail> details = gr.getRows();
                        for (GoodsReceiptDetail grd : details) {
                            rowTaxAmount += grd.getRowTaxAmount() + grd.getRowTermTaxAmount();
                            taxCode = (grd.getTax() != null) ? grd.getTax().getTaxCode() : taxCode;// we can take only on tax code if multiple taes are selected in each line. because we here deal with whole invoice amount not with single line amount. so its user responsbility to select same tax code  in all line level products.
                        }
                    }

                    double rpTaxAmount = (invoiceLevelTaxAmount + rowTaxAmount);

//                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rpTaxAmount, gr.getJournalEntry().getCurrency().getCurrencyID(), gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rpTaxAmount, gr.getJournalEntry().getCurrency().getCurrencyID(), gr.getCreationDate(), gr.getJournalEntry().getExternalCurrencyRate());
                    rpTaxAmount = (Double) bAmt.getEntityList().get(0);

                    double rpAmountExcludingTax = (invoiceOriginalAmt - rpTaxAmount);
                    double invamtExTax = 0;
                    double invTax = 0;

                    if (rpAmountExcludingTax < Constants.MALAYSIAN_RETAIL_PURCHASE_INVOICE_AMOUNT_LIMIT) {//500 RM
                        invamtExTax = rpAmountExcludingTax;
                    } else {
                        invamtExTax = Constants.MALAYSIAN_RETAIL_PURCHASE_INVOICE_AMOUNT_LIMIT;
                    }

                    if (rpTaxAmount < Constants.MALAYSIAN_RETAIL_PURCHASE_TAX_AMOUNT_LIMIT) {//30 RM
                        invTax = rpTaxAmount;
                    } else {
                        invTax = Constants.MALAYSIAN_RETAIL_PURCHASE_TAX_AMOUNT_LIMIT;
                    }

                    JSONObject jobj = new JSONObject();
                    jobj.put("taxcode", taxCode);
                    jobj.put("journalEntryNo", je.getEntryNumber());
                    jobj.put("invno", gr.getGoodsReceiptNumber());
                    jobj.put(Constants.billid, gr.getID());
                    jobj.put("type", "Purchase Invoice");
                    jobj.put("jeid", gr.getJournalEntry().getID());
                    jobj.put("jedate", odf.format(gr.getJournalEntry().getEntryDate()));
                    jobj.put("invname", (gr.getVendor() != null) ? gr.getVendor().getName() : "");
                    jobj.put("invamt", invamtExTax + invTax);
                    jobj.put("invtaxamount", invTax);
                    jobj.put(Constants.memo, gr.getMemo()!=null?gr.getMemo():"");
                    returnArray.put(jobj);
                }
            }
        } catch (SessionExpiredException | UnsupportedEncodingException | ServiceException | JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getRetailPurchases : " + ex.getMessage(), ex);
        }
        return returnArray;
    }

    public JSONArray getCapitalGoodsAcquiredJsonArray(HttpServletRequest request) throws SessionExpiredException, JSONException {
        HashMap<String, Object> reqParams = getCapitalGoodsAcquiredRequestMap(request);
        JSONArray returnArray = new JSONArray();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId);
                reqParams.put(Constants.fixedAssetsPurchaseInvoiceSearchJson, accReportsService.getSearchJsonByModule(reqParams));
                reqParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            
            KwlReturnObject result = accGoodsReceiptDAOObj.getGoodsReceipts(reqParams);
            DateFormat odf = authHandler.getOnlyDateFormat(request);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                List<GoodsReceipt> goodsReceiptsList = result.getEntityList();

                for (GoodsReceipt gr : goodsReceiptsList) {
                    JournalEntryDetail d = gr.getVendorEntry();
                    double invoiceOriginalAmt = d.getAmount();
                    JournalEntry je = gr.getJournalEntry();

                    double invoiceLevelTaxAmount = 0;
                    double rowTaxAmount = 0d;

                    if (gr.getTax() != null) {// if Invoice level tax is present
                        invoiceLevelTaxAmount = (gr.getTaxEntry() != null) ? gr.getTaxEntry().getAmount() : 0;

                        double invamt = invoiceOriginalAmt;
                        if (companyid.equalsIgnoreCase(Constants.COMPANYID_CHKL)) {
                            double termAmount = 0;
                            double termTaxAmount = 0;
                            HashMap<String, Object> requestParam = new HashMap();
                            requestParam.put("invoiceid", gr.getID());
                            KwlReturnObject receiptTermsMapresult = accGoodsReceiptDAOObj.getInvoiceTermMap(requestParam);
                            List<ReceiptTermsMap> termMap = receiptTermsMapresult.getEntityList();
                            for (ReceiptTermsMap receiptTermMap : termMap) {
                                termAmount += receiptTermMap.getTermamount();
                                termTaxAmount += receiptTermMap.getTermtaxamount();
                            }
                            invamt -= (termAmount + termTaxAmount);
                        } else {
                            // SDP-5307 -  Term amount is subtracted
                            double termAmount = CommonFunctions.getTotalTermsAmount(getTermDetails(gr.getID(), accGoodsReceiptDAOObj));
                            invamt -= termAmount;
                        }
                        KwlReturnObject bAmt = null;
                        KwlReturnObject bAmtTax = null;
                        if (!gr.getCurrency().getCurrencyID().equalsIgnoreCase(Constants.RMID)) {
//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, invamt, gr.getCurrency().getCurrencyID(), gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
//                            bAmtTax = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, invoiceLevelTaxAmount, gr.getCurrency().getCurrencyID(), gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, invamt, gr.getCurrency().getCurrencyID(), gr.getCreationDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            bAmtTax = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, invoiceLevelTaxAmount, gr.getCurrency().getCurrencyID(), gr.getCreationDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        }
                        if (bAmt != null) {
                            invamt = (Double) bAmt.getEntityList().get(0);
                        }
                        if (bAmtTax != null) {
                            invoiceLevelTaxAmount = (Double) bAmtTax.getEntityList().get(0);
                        }
                        invamt = authHandler.round(invamt, companyid);
                        invoiceLevelTaxAmount = authHandler.round(invoiceLevelTaxAmount, companyid);
                        JSONObject jobj = new JSONObject();
                        jobj.put("taxcode", gr.getTax().getTaxCode());
                        jobj.put("journalEntryNo", je.getEntryNumber());
                        jobj.put(Constants.billid, gr.getID());
                        jobj.put("jeid", gr.getJournalEntry().getID());
                        jobj.put("jedate", odf.format(gr.getJournalEntry().getEntryDate()));
                        jobj.put("type", "Purchase Invoice");
                        jobj.put("invno", gr.getGoodsReceiptNumber());
                        jobj.put("invname", (gr.getVendor() != null) ? gr.getVendor().getName() : "");
                        jobj.put("invamt", invamt);
                        jobj.put(Constants.memo, gr.getMemo() != null ? gr.getMemo() : "");
                        jobj.put("invtaxamount", invoiceLevelTaxAmount);
                        returnArray.put(jobj);
                    } else {
                        Set<GoodsReceiptDetail> details = gr.getRows();
                        for (GoodsReceiptDetail grd : details) {
                            rowTaxAmount = grd.getRowTaxAmount() + grd.getRowTermTaxAmount();

                            double rdisc = (grd.getDiscount() == null ? 0 : grd.getDiscount().getDiscountValue());

                            double quantity = grd.getInventory().isInvrecord() ? grd.getInventory().getQuantity() : grd.getInventory().getActquantity();
                            double ramount = authHandler.round(grd.getRate() * quantity, companyid);
                            ramount = ramount - rdisc;
                            KwlReturnObject bAmt = null;
                            KwlReturnObject bAmtTax = null;
                            if (!gr.getCurrency().getCurrencyID().equalsIgnoreCase(Constants.RMID)) {
//                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, ramount, gr.getCurrency().getCurrencyID(), gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
//                                bAmtTax = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, rowTaxAmount, gr.getCurrency().getCurrencyID(), gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, ramount, gr.getCurrency().getCurrencyID(), gr.getCreationDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                bAmtTax = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, rowTaxAmount, gr.getCurrency().getCurrencyID(), gr.getCreationDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            }
                            if (bAmt != null) {
                                ramount = (Double) bAmt.getEntityList().get(0);
                            }
                            if (bAmtTax != null) {
                                rowTaxAmount = (Double) bAmtTax.getEntityList().get(0);
                            }
                            ramount = authHandler.round(ramount, companyid);
                            rowTaxAmount = authHandler.round(rowTaxAmount, companyid);
                            JSONObject jobj = new JSONObject();
                            jobj.put("taxcode", (grd.getTax() != null) ? grd.getTax().getTaxCode() : "");
                            jobj.put("journalEntryNo", je.getEntryNumber());
                            jobj.put("invno", gr.getGoodsReceiptNumber());
                            jobj.put("type", "Purchase Invoice");
                            jobj.put(Constants.billid, gr.getID());
                            jobj.put("jeid", gr.getJournalEntry().getID());
                            jobj.put("jedate", odf.format(gr.getJournalEntry().getEntryDate()));
                            jobj.put("invname", (gr.getVendor() != null) ? gr.getVendor().getName() : "");
                            jobj.put("invamt", ramount + rowTaxAmount);
                            jobj.put(Constants.memo, gr.getMemo() != null ? gr.getMemo() : "");
                            jobj.put("invtaxamount", rowTaxAmount);
                            returnArray.put(jobj);
                        }
                    }
                }
            }
        } catch (SessionExpiredException | UnsupportedEncodingException | ServiceException | JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnArray;
    }

    public double getCapitalGoodsAcquired(HttpServletRequest request) throws SessionExpiredException {
        HashMap<String, Object> reqParams = getCapitalGoodsAcquiredRequestMap(request);
        double capitalGoodsAcquired = 0d;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId);
                reqParams.put(Constants.fixedAssetsPurchaseInvoiceSearchJson, accReportsService.getSearchJsonByModule(reqParams));
                reqParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            KwlReturnObject result = accGoodsReceiptDAOObj.getGoodsReceipts(reqParams);

            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                List<GoodsReceipt> goodsReceiptsList = result.getEntityList();

                for (GoodsReceipt gr : goodsReceiptsList) {
                    JournalEntryDetail d = gr.getVendorEntry();
                    double invoiceOriginalAmt = d.getAmount();
                    if (companyid.equalsIgnoreCase(Constants.COMPANYID_CHKL)) {
                        HashMap<String, Object> requestParam = new HashMap();
                        requestParam.put("invoiceid", gr.getID());
                        KwlReturnObject receiptTermsMapresult = accGoodsReceiptDAOObj.getInvoiceTermMap(requestParam);
                        List<ReceiptTermsMap> termMap = receiptTermsMapresult.getEntityList();
                        double termTaxAmount = 0;
                        double termAmount = 0;
                        for (ReceiptTermsMap receiptTermMap : termMap) {
                            termAmount += receiptTermMap.getTermamount();
                            termTaxAmount += receiptTermMap.getTermtaxamount();
                        }
                        invoiceOriginalAmt -= (termAmount + termTaxAmount);
                    } else {
                        // SDP-5307 -  Term amount is subtracted
                        double termAmount = CommonFunctions.getTotalTermsAmount(getTermDetails(gr.getID(), accGoodsReceiptDAOObj));
                        invoiceOriginalAmt -= termAmount;
                    }
                    double invoiceLevelTaxAmount = 0;

                    if (gr.getTaxEntry() != null) {
                        invoiceLevelTaxAmount = gr.getTaxEntry().getAmount();
                    }

                    double rowTaxAmount = 0d;
                    if (gr.getRows() != null && !gr.getRows().isEmpty()) {
                        Set<GoodsReceiptDetail> details = gr.getRows();
                        for (GoodsReceiptDetail grd : details) {
                            if (companyid.equalsIgnoreCase(Constants.COMPANYID_CHKL)) {
                                rowTaxAmount += grd.getRowTaxAmount();
                            } else {
                                rowTaxAmount += grd.getRowTaxAmount() + grd.getRowTermTaxAmount();
                            }
                        }
                    }
                    KwlReturnObject bAmt = null;
                    KwlReturnObject bAmtTax = null;
                    KwlReturnObject bAmtRowTax = null;
                    if (!gr.getCurrency().getCurrencyID().equalsIgnoreCase(Constants.RMID)) {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, invoiceOriginalAmt, gr.getCurrency().getCurrencyID(), gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
//                        bAmtTax = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, invoiceLevelTaxAmount, gr.getCurrency().getCurrencyID(), gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
//                        bAmtRowTax = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, rowTaxAmount, gr.getCurrency().getCurrencyID(), gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, invoiceOriginalAmt, gr.getCurrency().getCurrencyID(), gr.getCreationDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        bAmtTax = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, invoiceLevelTaxAmount, gr.getCurrency().getCurrencyID(), gr.getCreationDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        bAmtRowTax = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) reqParams, rowTaxAmount, gr.getCurrency().getCurrencyID(), gr.getCreationDate(), gr.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    }
                    if (bAmt != null) {
                        invoiceOriginalAmt = (double) bAmt.getEntityList().get(0);
                    }
                    if (bAmtTax != null) {
                        invoiceLevelTaxAmount = (double) bAmtTax.getEntityList().get(0);
                    }
                    if (bAmtRowTax != null) {
                        rowTaxAmount = (double) bAmtRowTax.getEntityList().get(0);
                    }
                    capitalGoodsAcquired += (invoiceOriginalAmt - invoiceLevelTaxAmount - rowTaxAmount);
                }
            }
        } catch (SessionExpiredException | UnsupportedEncodingException | ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return capitalGoodsAcquired;
    }

    public HashMap<String, Object> getCapitalGoodsAcquiredRequestMap(HttpServletRequest request) throws SessionExpiredException {
        String companyid = sessionHandlerImpl.getCompanyid(request);
        HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
        reqParams.put(Constants.REQ_startdate, request.getParameter("stdate"));
        reqParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
        reqParams.put("dateformat", authHandler.getDateOnlyFormat());
        reqParams.put(Constants.companyKey, companyid);
        reqParams.put("nondeleted", "true");
        reqParams.put("isCapitalGoodsAcquired", true);
        reqParams.put("includeFixedAssetInvoicesFlag", true);

        return reqParams;
    }

    public List<Double> getImportedServicesInvoices(HttpServletRequest request, JSONArray industryCodeJsonArr) throws SessionExpiredException, ServiceException {
        List<Double> returnList = new ArrayList<Double>();
        String companyid = sessionHandlerImpl.getCompanyid(request);
        boolean isForExport = request.getAttribute("isForExport") == null ? false : true;
        HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
        reqParams.put("dateformat", authHandler.getDateOnlyFormat());
        reqParams.put(Constants.companyKey, companyid);
        reqParams.put("nondeleted", "true");
        reqParams.put("pendingapproval", false);
        reqParams.put("importServiceFlag", true);
        double totalPaidAmtExcludingTax = 0;
        double totalPaidTax = 0;

        boolean isMultiEntity = false;
        String primaryIndustryCode = "";
        Map<String, String> invoiceEntityMap = Collections.EMPTY_MAP;
        Map<String, String> entityIndustryCodeMap = Collections.EMPTY_MAP;
        if (isForExport) { // GST form3 Custom report
            try {
                KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);
                extracap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) extracap.getEntityList().get(0);
                isMultiEntity = extraCompanyPreferences.isIsMultiEntity();
                primaryIndustryCode = companyAccountPreferences.getIndustryCode() != null ? companyAccountPreferences.getIndustryCode().getValue() : "";
                Map<String, Object> requestparms = new HashMap<>();
                requestparms.put(Constants.companyid, sessionHandlerImpl.getCompanyid(request));
                entityIndustryCodeMap = accGstService.getEntityMSICCode(requestparms);
                requestparms.put(Constants.REQ_startdate, authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
                requestparms.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
                requestparms.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                requestparms.put("isimportservice", true);
                invoiceEntityMap = accReportsService.getTransactionIndustryCodeMap(requestparms);
            } catch (Exception e) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, e);
}
        }
        try {

            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }

            KwlReturnObject result = accGoodsReceiptDAOObj.getGoodsReceiptsMerged(reqParams);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                List invoiceList = result.getEntityList();
                Iterator it = invoiceList.iterator();

                while (it.hasNext()) {
                    Object[] oj = (Object[]) it.next();
                    String invid = oj[0].toString();

                    KwlReturnObject invresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), invid);
                    GoodsReceipt invoice = (GoodsReceipt) invresult.getEntityList().get(0);

                    HashMap<String, Object> payMap = new HashMap<String, Object>();

                    payMap.put("invoiceid", invoice.getID());
                    payMap.put(Constants.companyKey, companyid);
                    payMap.put("startDate", authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
                    payMap.put("endDate", authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));

                    KwlReturnObject invoicePaidAmtObj = accPaymentDAOobj.getPaymentDetailsLinkedWithGoodsReceipt(payMap);
                    double paidAmt = 0;
                    double paidAmtInBase = 0;
                    double paidTaxAmount = 0;
                    double paidTaxAmountInBase = 0;

                    List<PaymentDetail> paymentDetails = invoicePaidAmtObj.getEntityList();
                    Payment payment = null;

                    for (PaymentDetail paymentDetail : paymentDetails) {
                        paidAmt += paymentDetail.getAmount();
                        payment = paymentDetail.getPayment();
                    }

                    if (payment == null) {// if payment is not maid for an goods receipt then no need to include it for GST Tap Report
                        continue;
                    }
                    
                    SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                    Date ZeroRatedTaxAppliedDateForMalasia = dateFormat.parse(Constants.ZeroRatedTaxAppliedDateForMalasia);
                    if (payment.getCreationDate().after(ZeroRatedTaxAppliedDateForMalasia) || payment.getCreationDate().equals(ZeroRatedTaxAppliedDateForMalasia)) {
                        /**
                         * If Payment date is after 1st June 2018 or equal then
                         * Tax amount should be zero From 1st June 2018
                         * Malaysian GST is zero.
                         */
                        paidTaxAmount = 0;
                    } else {
                        paidTaxAmount = paidAmt * 6 / 100;
                    }
                    paidTaxAmount = authHandler.round(paidTaxAmount, companyid);

                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);

//                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidAmt, payment.getCurrency().getCurrencyID(), payment.getJournalEntry().getEntryDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidAmt, payment.getCurrency().getCurrencyID(), payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    paidAmtInBase = (Double) bAmt.getEntityList().get(0);
                    paidAmtInBase = authHandler.round(paidAmtInBase, companyid);

//                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidTaxAmount, payment.getCurrency().getCurrencyID(), payment.getJournalEntry().getEntryDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidTaxAmount, payment.getCurrency().getCurrencyID(), payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    paidTaxAmountInBase = (Double) bAmt.getEntityList().get(0);
                    paidTaxAmountInBase = authHandler.round(paidTaxAmountInBase, companyid);

                    totalPaidAmtExcludingTax += paidAmtInBase;
                    totalPaidTax += paidTaxAmountInBase;
                    if (isForExport) {
                        try {
                            String industryCode = "";
                            if (isMultiEntity) {
                                String entity = invoiceEntityMap.get(invid);
                                industryCode = entityIndustryCodeMap.get(entity);
                            } else {
                                industryCode = primaryIndustryCode;
                            }
                            JSONObject msicdetails = new JSONObject();
                            msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.round(paidTaxAmount, companyid));
                            msicdetails.put(Constants.MSIC_CODE, industryCode);
                            industryCodeJsonArr.put(msicdetails);
                        } catch (JSONException e) {
                            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, e);
                        }
                    }
                }
            }
        } catch (SessionExpiredException | UnsupportedEncodingException | ServiceException | ParseException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }

        returnList.add(totalPaidAmtExcludingTax);
        returnList.add(totalPaidTax);
        return returnList;
    }

    public JSONArray getImportedServicesInvoicesJSON(Map<String, Object> requestParams) throws SessionExpiredException, JSONException, ParseException {
        JSONArray returnArray = new JSONArray();
        try {

            String companyid = (String) requestParams.get(Constants.companyKey);
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            DateFormat odf = new SimpleDateFormat("dd-MM-yyyy");
            if (requestParams.containsKey(Constants.userdf)) {
                sdf = (SimpleDateFormat) requestParams.get(Constants.userdf);
            }
            if (requestParams.containsKey(Constants.onlydateformat)) {
                odf = (DateFormat) requestParams.get(Constants.onlydateformat);
            }
            Date startDate = (Date) requestParams.get("startDate");
            Date endDate = (Date) requestParams.get("endDate");
            
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Acc_Search_Json) != null && requestParams.get(Constants.Filter_Criteria) != null) {
                requestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.Acc_Search_Json));
                requestParams.put(Constants.Filter_Criteria, requestParams.get(Constants.Filter_Criteria));
                requestParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                requestParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule((HashMap<String, Object>) requestParams));
            }
            requestParams.put("dateformat", authHandler.getDateOnlyFormat());
            requestParams.put("nondeleted", "true");
            requestParams.put("pendingapproval", false);
            requestParams.put("importServiceFlag", true);
            
            Map<String,Object> grParamsMap = new HashMap(requestParams);
            /*
             * Removed startDate and endDate to fetch all invoices
             */
            grParamsMap.remove("startDate");
            grParamsMap.remove("endDate");
            
            KwlReturnObject result = accGoodsReceiptDAOObj.getGoodsReceiptsMerged(grParamsMap);

            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                List invoiceList = result.getEntityList();
                Iterator it = invoiceList.iterator();

                while (it.hasNext()) {
                    Object[] oj = (Object[]) it.next();
                    String invid = oj[0].toString();

                    KwlReturnObject invresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), invid);
                    GoodsReceipt invoice = (GoodsReceipt) invresult.getEntityList().get(0);

                    HashMap<String, Object> payMap = new HashMap<>();

                    payMap.put("invoiceid", invoice.getID());
                    payMap.put(Constants.companyKey, companyid);
                    payMap.put("startDate", startDate);
                    payMap.put("endDate", endDate);
                    
                    KwlReturnObject invoicePaidAmtObj = accPaymentDAOobj.getPaymentDetailsLinkedWithGoodsReceipt(payMap);
                    double paidAmt = 0;
                    double paidAmtInBase = 0;
                    double paidTaxAmount = 0;
                    double paidTaxAmountInBase = 0;

                    List<PaymentDetail> paymentDetails = invoicePaidAmtObj.getEntityList();

                    Payment payment = null;
                    /*
                     * Added ImportedServicesInvoice Payment entry instead of invoices in GST Report and GST Tap Detailed View
                     * for MalasianCompany when TAX "GST(DS) & GST(TX)"
                     */
                    JournalEntry importServiceJE=null;
                    for (PaymentDetail paymentDetail : paymentDetails) {
                        paidAmt = paymentDetail.getAmount();
                        payment = paymentDetail.getPayment();
                        if (payment != null) {// if payment is not made for an goods receipt then no need to include it for GST Tap Report
                            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                            Date ZeroRatedTaxAppliedDateForMalasia = dateFormat.parse(Constants.ZeroRatedTaxAppliedDateForMalasia);
                            if (payment.getCreationDate().after(ZeroRatedTaxAppliedDateForMalasia) || payment.getCreationDate().equals(ZeroRatedTaxAppliedDateForMalasia)) {
                                /**
                                 * If Payment date is after 1st June 2018 or equal then Tax amount should be zero
                                 * From 1st June 2018 Malaysian GST is zero.
                                 */
                                paidTaxAmount = 0;
                            } else {
                                paidTaxAmount = paidAmt * 6 / 100;
                            }
                            
                            paidTaxAmount = authHandler.round(paidTaxAmount, companyid);

//                            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidAmt, payment.getCurrency().getCurrencyID(), payment.getJournalEntry().getEntryDate(), payment.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidAmt, payment.getCurrency().getCurrencyID(), payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
                            paidAmtInBase = (Double) bAmt.getEntityList().get(0);
                            paidAmtInBase = authHandler.round(paidAmtInBase, companyid);

//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidTaxAmount, payment.getCurrency().getCurrencyID(), payment.getJournalEntry().getEntryDate(), payment.getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidTaxAmount, payment.getCurrency().getCurrencyID(), payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
                            paidTaxAmountInBase = (Double) bAmt.getEntityList().get(0);
                            paidTaxAmountInBase = authHandler.round(paidTaxAmountInBase, companyid);

                            double amtWithTax = paidAmtInBase + paidTaxAmountInBase;
                            
                            importServiceJE = payment.getImportServiceJE();
                            /*
                            * Old payment against ImportedServicesInvoices having no ImportServiceJE
                            * To handle this, payment JE are showed in GST Report and GST Tab Return Detailed View
                            */
                            
                            double transactionExchangeRate = 1;
                            if (importServiceJE != null) {
                                transactionExchangeRate = payment.getImportServiceJE().getExternalCurrencyRate() == 0 ? 1 : payment.getImportServiceJE().getExternalCurrencyRate();
                            } else {
                                transactionExchangeRate = payment.getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : payment.getJournalEntry().getExternalCurrencyRate();
                            }
                            
                            JSONObject jobj = new JSONObject();
                            jobj.put("type", "Payment Made");
                            jobj.put(Constants.billid, payment.getID());
                            jobj.put("jeid", importServiceJE != null ? payment.getImportServiceJE().getID() : payment.getJournalEntry().getID());
                            jobj.put("jedate", importServiceJE != null ? odf.format(payment.getImportServiceJE().getEntryDate()) : odf.format(payment.getJournalEntry().getEntryDate()));
                            jobj.put("invdate", importServiceJE != null ? sdf.format(payment.getImportServiceJE().getEntryDate()) : sdf.format(payment.getJournalEntry().getEntryDate()));
                            jobj.put("addAmountFlag", true);
                            jobj.put("invname", payment.getVendor().getName());
                            jobj.put("invno", payment.getPaymentNumber());
                            jobj.put("invamt", amtWithTax);
                            jobj.put("gramtexcludingtax", paidAmtInBase);
                            jobj.put("journalEntryNo", importServiceJE != null ? payment.getImportServiceJE().getEntryNumber() : payment.getJournalEntry().getEntryNumber());
                            jobj.put("invtaxamount", paidTaxAmountInBase);
                            jobj.put("originaltaxamount", paidTaxAmount);
                            jobj.put("originalamountincludingtax", paidAmt);
                            jobj.put("transactionexchangerate", transactionExchangeRate);
                            jobj.put("transactioncurrencysymbol", payment.getCurrency().getSymbol());
                            jobj.put("transactioncurrencyid", payment.getCurrency().getCurrencyID());
                            jobj.put(Constants.memo, payment.getMemo() != null ? payment.getMemo() : "");
                            /*
                             *following key used in export
                             */
                            jobj.put("grname", payment.getVendor().getName());
                            jobj.put("grno", payment.getPaymentNumber());  
                            jobj.put("gramt", amtWithTax);
                            jobj.put("grtaxamount", paidTaxAmountInBase);
                            jobj.put("grdate", importServiceJE != null ? sdf.format(payment.getImportServiceJE().getEntryDate()) : sdf.format(payment.getJournalEntry().getEntryDate()));
                            
                            returnArray.put(jobj);
                        }
                    }
                }
            }
        } catch (SessionExpiredException | UnsupportedEncodingException | ServiceException | JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnArray;
    }
    
    public Map<String, Object> getRequestParamsForImportedServices(HttpServletRequest request) throws SessionExpiredException, ParseException {
        Map<String, Object> requestParams = new HashMap<>();
        try {
            requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            requestParams.put("sdf", authHandler.getOnlyDateFormat(request));
            requestParams.put("startDate", authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
            requestParams.put("endDate", authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
            requestParams.put(Constants.onlydateformat, authHandler.getOnlyDateFormat(request));

            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);

            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return requestParams;
    }
    
    public Map<String, Object> getRequestParamsForAppliedDeliveryOrders(HttpServletRequest request) throws SessionExpiredException, ParseException {
        Map<String, Object> requestParams = new HashMap<>();
        try {
            requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put(Constants.companyKey,sessionHandlerImpl.getCompanyid(request));
            requestParams.put(Constants.REQ_startdate,  request.getParameter("stdate"));
            requestParams.put(Constants.REQ_enddate,request.getParameter("enddate"));
            requestParams.put(Constants.onlydateformat, authHandler.getOnlyDateFormat(request));
           
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);

            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                requestParams.put(Constants.moduleid, Constants.Acc_Delivery_Order_ModuleId);
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return requestParams;
    }
    public JSONArray getFreeGiftJEJsonArray(Map<String, Object> requestParams) throws ServiceException {
        JSONArray returnArray = new JSONArray();
        try {
            HashMap<String, Object> reqParams = new HashMap<>(requestParams);
            String companyid = (String) reqParams.get(Constants.companyKey);
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            DateFormat odf = new SimpleDateFormat("dd-MM-yyyy");
            
            if (requestParams.containsKey(Constants.userdf)) {
                sdf = (SimpleDateFormat) requestParams.get(Constants.userdf);
            }
            if (requestParams.containsKey(Constants.onlydateformat)) {
                odf = (DateFormat) requestParams.get(Constants.onlydateformat);
            }
            reqParams.put("isFreeGift", "true");
            reqParams.put("nondeleted", "true");
            reqParams.remove("isTaxAppliedDOs");//"isTaxAppliedDOs" return only applied DO so removed "isTaxAppliedDOs" from requestparams to fetch Free Gift DO.
            
            String searchJson = (String) reqParams.get(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = (String) reqParams.get(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_Delivery_Order_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            
            
            KwlReturnObject result = accInvoiceDAOobj.getDeliveryOrdersMerged(reqParams);
            JournalEntry freeGiftJe = null;
            DeliveryOrder DO = null;
            KwlReturnObject DOObjResult = null;
            Set<JournalEntryDetail> jedSet = null;
//            JournalEntryDetail jed1 = null;
            double amount = 0.0;
            List doList = result.getEntityList();
            Iterator itr = doList.iterator();
            
            
            while (itr.hasNext()) {
                Object[] oj = (Object[]) itr.next();
                String orderid = oj[0].toString();
                DOObjResult = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), orderid);
                DO = (DeliveryOrder)DOObjResult.getEntityList().get(0);
                amount = 0.0;
                JSONObject jobj = new JSONObject();
                freeGiftJe = DO.getFreeGiftJE();
                /*
                 * Delivery orders with Free Gift JE will be included into GST form 03 and it's detailed view.
                 */
                if (freeGiftJe != null) {
                    jedSet = freeGiftJe.getDetails();
                    for (JournalEntryDetail jed : jedSet) {
                        if (jed.isDebit()) {
                            amount += jed.getAmountinbase();
                        }
                    }
                    amount = authHandler.round(amount, companyid);
                    jobj.put("taxcode", Constants.MALAYSIAN_GST_DS_TAX_CODE);
                    jobj.put("journalEntryNo", DO.getFreeGiftJE().getEntryNumber());
                    jobj.put("invno", DO.getDeliveryOrderNumber());
                    jobj.put(Constants.billid, DO.getID());
                    jobj.put("type", "Delivery Order");
                    jobj.put("invname", DO.getCustomer().getName());
                    jobj.put("invamt", amount);
                    jobj.put("jedate", odf.format(freeGiftJe.getEntryDate()));
                    jobj.put("jeid", freeGiftJe.getID());
                    jobj.put("invtaxamount", amount);
                    jobj.put(Constants.memo, DO.getMemo() != null ? DO.getMemo() : "");
                    jobj.put("invdate", sdf.format(new Date(DO.getOrderDate().getTime())));
                    jobj.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    returnArray.put(jobj);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnArray;
    }
    public List<Double> getFreeGiftJEList(HttpServletRequest request, JSONArray industryCodeArry) throws SessionExpiredException {
        List<Double> returnList = new ArrayList<Double>();
        double totalTaxAmount = 0.0;
        double taxAmountForDo = 0.0;
        double principalAmount = 0.0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        boolean isForExport = request.getAttribute("isForExport") == null ? false : true;
        boolean isMultiEntity = false;
        String primaryIndustryCode = "";
        Map<String, String> doEntityMap = Collections.EMPTY_MAP;
        Map<String, String> entityIndustryCodeMap = Collections.EMPTY_MAP;
        if (isForExport) { // GST form3 Custom report
            try {
                KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);
                extracap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) extracap.getEntityList().get(0);
                isMultiEntity = extraCompanyPreferences.isIsMultiEntity();
                primaryIndustryCode = companyAccountPreferences.getIndustryCode() != null ? companyAccountPreferences.getIndustryCode().getValue() : "";
                Map<String, Object> requestparms = new HashMap<>();
                requestparms.put(Constants.companyid, companyid);
                requestparms.put("isFreeGift", "true");
                entityIndustryCodeMap = accGstService.getEntityMSICCode(requestparms);
                requestparms.put(Constants.REQ_startdate, authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
                requestparms.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
                requestparms.put(Constants.moduleid, Constants.Acc_Delivery_Order_ModuleId);
                doEntityMap = accReportsService.getTransactionIndustryCodeMapForDeliveryOrder(requestparms);
            } catch (Exception e) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, e);
            }
        }

        try {
            DateFormat odf = authHandler.getOnlyDateFormat(request);
            HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
            reqParams.put("startdate", request.getParameter("stdate"));
            reqParams.put("enddate", request.getParameter("enddate"));
            reqParams.put(Constants.companyKey, companyid);
            reqParams.put("isFreeGift", "true");
            reqParams.put("nondeleted", "true");
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_Delivery_Order_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            KwlReturnObject result = accInvoiceDAOobj.getDeliveryOrdersMerged(reqParams);
            List doList = result.getEntityList();
            Iterator itr = doList.iterator();
            JournalEntry freeGiftJe = null;
            DeliveryOrder DO = null;
            KwlReturnObject DOObjResult = null;
            Set<JournalEntryDetail> jedSet = null;
            JournalEntryDetail jed1 = null;
            while (itr.hasNext()) {
                Object[] oj = (Object[]) itr.next();
                String orderid = oj[0].toString();
                DOObjResult = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), orderid);
                DO = (DeliveryOrder) DOObjResult.getEntityList().get(0);
                freeGiftJe = DO.getFreeGiftJE();
                if (freeGiftJe != null) {
                    jedSet = freeGiftJe.getDetails();
                    for (JournalEntryDetail jed : jedSet) {
                        if (jed.isDebit()) {
                            taxAmountForDo = jed.getAmountinbase();
                        }
                    }
                    totalTaxAmount += taxAmountForDo;
                    totalTaxAmount = authHandler.round(totalTaxAmount, companyid);
                    
                    if (isForExport) {
                        try {
                            String industryCode = "";
                            if (isMultiEntity) {
                                String entity = doEntityMap.get(DO.getID());
                                industryCode = entityIndustryCodeMap.get(entity);
                            } else {
                                industryCode = primaryIndustryCode;
                            }
                            JSONObject msicdetails = new JSONObject();
                            msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.round(taxAmountForDo, companyid));
                            msicdetails.put(Constants.MSIC_CODE, industryCode);
                            industryCodeArry.put(msicdetails);
                        } catch (JSONException e) {
                            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, e);
                        }
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        returnList.add(principalAmount);
        returnList.add(totalTaxAmount);
        return returnList;
    }
    
    public List<Double> getAppliedDeliveryOrders(HttpServletRequest request, JSONArray industryCodeArry) throws SessionExpiredException, ParseException {
        List<Double> taxAppliedList = new ArrayList<Double>();
        double appliedAmtExcludingTax = 0d;
        double appliedTax = 0d;
        double DmR_Variable_T = 0d;
        HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
        reqParams.put("isTaxAppliedDOs", true);
        reqParams.put("startdate", request.getParameter("stdate"));
        reqParams.put("enddate", request.getParameter("enddate"));
        boolean isForExport = request.getAttribute("isForExport") == null ?false:true;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String taxCodeSR7PercentSupplies = Constants.MALAYSIAN_GST_SR_TAX_CODE;
        String taxCodeDSPercentSupplies = Constants.MALAYSIAN_GST_DS_TAX_CODE;
        String ZRLTaxCode = Constants.MALAYSIAN_GST_ZRL_TAX_CODE;
        String ZRETaxCode = Constants.MALAYSIAN_GST_ZRE_TAX_CODE;
        String RSTaxCode = Constants.MALAYSIAN_GST_RS_TAX_CODE;
        String GSTaxCode = Constants.MALAYSIAN_GST_GS_TAX_CODE;
//        String OSTaxCode = Constants.MALAYSIAN_GST_OS_TAX_CODE;
        String ZDATaxCode = Constants.MALAYSIAN_GST_ZDA_TAX_CODE;
        String OSTXMTaxCode = Constants.MALAYSIAN_GST_OS_TXM_TAX_CODE;
        String NTXTaxCode = Constants.MALAYSIAN_GST_NTX_TAX_CODE;

        boolean isMultiEntity =  false;
        String primaryIndustryCode ="";
        Map<String, String> doEntityMap = Collections.EMPTY_MAP;
        Map<String, String> entityIndustryCodeMap = Collections.EMPTY_MAP;
        if (isForExport) { // GST form3 Custom report
            try {
                KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);
                extracap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) extracap.getEntityList().get(0);
                isMultiEntity = extraCompanyPreferences.isIsMultiEntity();
                primaryIndustryCode = companyAccountPreferences.getIndustryCode()!=null?companyAccountPreferences.getIndustryCode().getValue():"";
                Map<String, Object> requestparms = new HashMap<>();
                requestparms.put(Constants.companyid, companyid);
                entityIndustryCodeMap = accGstService.getEntityMSICCode(requestparms);
                requestparms.put(Constants.REQ_startdate,  authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
                requestparms.put(Constants.REQ_enddate,  authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
                requestparms.put(Constants.moduleid, Constants.Acc_Delivery_Order_ModuleId);
                doEntityMap = accReportsService.getTransactionIndustryCodeMapForDeliveryOrder(requestparms);
            } catch (Exception e) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, e);
            }
        }
        try {
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_Delivery_Order_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            KwlReturnObject result = accInvoiceDAOobj.getDeliveryOrdersMerged(reqParams);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                List doList = result.getEntityList();
                Iterator itr = doList.iterator();
                while (itr.hasNext()) {
                    Object[] oj = (Object[]) itr.next();
                    String orderid = oj[0].toString();
                    double taxappliedForTransaction = 0d;

                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), orderid);
                    DeliveryOrder deliveryOrder = (DeliveryOrder) objItr.getEntityList().get(0);
                    Set<DeliveryOrderDetail> doRows = deliveryOrder.getRows();
                    double totalAmtOfDOExcludingGSTInBase = 0.0;
                    if (doRows != null && !doRows.isEmpty()) {
                        String taxCode = "";
                        for (DeliveryOrderDetail temp : doRows) {
                            double quantity = temp.getInventory().getQuantity();
                            double appliedAmtExcludingTaxInDoCurr = temp.getRate() * quantity;

                            // calculating in base
                            KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, appliedAmtExcludingTaxInDoCurr, temp.getDeliveryOrder().getCurrency().getCurrencyID(), temp.getDeliveryOrder().getOrderDate(), 0);
                            appliedAmtExcludingTax += authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                            totalAmtOfDOExcludingGSTInBase += appliedAmtExcludingTax;
                            if (temp.getTax() == null) {
                                continue;
                            } else {
                                taxCode = temp.getTax().getTaxCode();
                                if (taxCode.equals(taxCodeDSPercentSupplies) || taxCode.equals(taxCodeSR7PercentSupplies) || taxCode.equals(ZRETaxCode) || taxCode.equals(ZRLTaxCode) || taxCode.equals(RSTaxCode) || taxCode.equals(GSTaxCode) || taxCode.equals(ZDATaxCode) || taxCode.equals(OSTXMTaxCode) || taxCode.equals(NTXTaxCode)) {
                                    DmR_Variable_T += totalAmtOfDOExcludingGSTInBase;
                                }
                            }
                            // getting tax also
                            double taxAmt = temp.getRowTaxAmount();

                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, taxAmt, temp.getDeliveryOrder().getCurrency().getCurrencyID(), temp.getDeliveryOrder().getOrderDate(), 0);
                            taxappliedForTransaction += authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                        }
                    }
                    if (deliveryOrder.getTax() != null) {
                        double totalDOAmountInBase = deliveryOrder.getTotalamountinbase();
                        double taxAmtOfDOInBase = totalDOAmountInBase - totalAmtOfDOExcludingGSTInBase;
                        taxappliedForTransaction += taxAmtOfDOInBase;
                        Tax tax = deliveryOrder.getTax();
                        String taxCode = tax.getTaxCode();
                        if (taxCode.equals(taxCodeDSPercentSupplies) || taxCode.equals(taxCodeSR7PercentSupplies) || taxCode.equals(ZRETaxCode) || taxCode.equals(ZRLTaxCode) || taxCode.equals(RSTaxCode) || taxCode.equals(GSTaxCode) || taxCode.equals(ZDATaxCode) || taxCode.equals(OSTXMTaxCode) || taxCode.equals(NTXTaxCode)) {
                            DmR_Variable_T += totalAmtOfDOExcludingGSTInBase;
                        }
                    }
                    if (isForExport) {
                        try {
                            String industryCode = "";
                            if (isMultiEntity) {
                                String entity = doEntityMap.get(deliveryOrder.getID());
                                industryCode = entityIndustryCodeMap.get(entity);
                            } else {
                                industryCode = primaryIndustryCode;
                            }
                            JSONObject msicdetails = new JSONObject();
//                            msicdetails.put(Constants.MSIC_INVAMT, authHandler.round(totalAmountwithTax, 2));
                            msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.round(taxappliedForTransaction, companyid));
                            msicdetails.put(Constants.MSIC_CODE, industryCode);
                            industryCodeArry.put(msicdetails);
                        } catch (JSONException e) {
                            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, e);
                        }
                    }
                    appliedTax +=taxappliedForTransaction;
                }
            }
        } catch (ServiceException | UnsupportedEncodingException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        taxAppliedList.add(appliedAmtExcludingTax);
        taxAppliedList.add(appliedTax);
        taxAppliedList.add(DmR_Variable_T);
        return taxAppliedList;
    }

    public JSONArray getAppliedDeliveryOrdersJson(Map<String, Object> requestParams) throws SessionExpiredException, ParseException, JSONException {
        JSONArray returnArray = new JSONArray();
        /**
         *  in case of Malasian company if DO is applied for tax.
         */
        requestParams.put("isTaxAppliedDOs", true);
        try {
            String companyid = !StringUtil.isNullOrEmpty((String)requestParams.get(Constants.companyKey))?(String)requestParams.get(Constants.companyKey):"";
            String companyCurrencyId = !StringUtil.isNullOrEmpty((String)requestParams.get("companyCurrencyId")) ? (String) requestParams.get("companyCurrencyId") :"";
            boolean isForGSTReport = requestParams.containsKey(Constants.isForGSTReport) ? (boolean) requestParams.get(Constants.isForGSTReport) : false;
            boolean isForTaxReport = requestParams.containsKey(Constants.isForTaxReport) ? (boolean) requestParams.get(Constants.isForTaxReport) : false;
            boolean isMalasianCompany = requestParams.containsKey("isMalasianCompany") ? (boolean) requestParams.get("isMalasianCompany") : false;
            DateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");
            if (requestParams.containsKey(Constants.userdf) && requestParams.get(Constants.userdf) != null) {
                sdf = (DateFormat) requestParams.get(Constants.userdf);
            }
           if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Acc_Search_Json) != null && requestParams.get(Constants.Filter_Criteria) != null) {
               requestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.Acc_Search_Json));
               requestParams.put(Constants.Filter_Criteria, requestParams.get(Constants.Filter_Criteria));
               requestParams.put(Constants.moduleid, Constants.Acc_Delivery_Order_ModuleId);
               requestParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule((HashMap<String, Object>)requestParams));
            }
            KwlReturnObject result = accInvoiceDAOobj.getDeliveryOrdersMerged((HashMap<String, Object>)requestParams);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                List doList = result.getEntityList();

                Iterator itr = doList.iterator();

                while (itr.hasNext()) {
                    Object[] oj = (Object[]) itr.next();
                    String orderid = oj[0].toString();

                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), orderid);
                    DeliveryOrder deliveryOrder = (DeliveryOrder) objItr.getEntityList().get(0);

                    Set<DeliveryOrderDetail> doRows = deliveryOrder.getRows();
                    double totalAmtOfDOExcludingGSTInBase = 0.0;
                    double gramtexcludingtax = 0.0;
                    if (doRows != null && !doRows.isEmpty()) {
                        for (DeliveryOrderDetail temp : doRows) {
                            double quantity = temp.getInventory().getQuantity();
                            double appliedAmtExcludingTaxInDoCurr = temp.getRate() * quantity;

                            // calculating in base
                            KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, appliedAmtExcludingTaxInDoCurr, temp.getDeliveryOrder().getCurrency().getCurrencyID(), temp.getDeliveryOrder().getOrderDate(), 0);
                            double amt = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                            totalAmtOfDOExcludingGSTInBase += amt;
                            gramtexcludingtax = amt;
                            // getting tax also
                            double taxAmt = temp.getRowTaxAmount();

                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmt, temp.getDeliveryOrder().getCurrency().getCurrencyID(), temp.getDeliveryOrder().getOrderDate(), 0);
                            double tAmt = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                            
                            String taxCode = "";

                            if (temp.getTax() != null) {
                                taxCode = temp.getTax().getTaxCode();
                            } else {
                                continue;
                            }

                            JSONObject jobj = new JSONObject();
                           
                            jobj.put("taxcode", taxCode);
                            jobj.put("journalEntryNo", "");
                            jobj.put("invno", temp.getDeliveryOrder().getDeliveryOrderNumber());
                            jobj.put("invdate",sdf.format(new Date(temp.getDeliveryOrder().getOrderDate().getTime())));
                            jobj.put("addAmountFlag", true);
                            jobj.put(Constants.billid, temp.getDeliveryOrder().getID());
                            jobj.put("type", "Delivery Order");
                            jobj.put("invname", temp.getDeliveryOrder().getCustomer().getName());
                            jobj.put("invamt", amt + tAmt);
                            jobj.put("invtaxamount", tAmt);
                            jobj.put("gramtexcludingtax", authHandler.round(gramtexcludingtax, companyid));
                            jobj.put("originaltaxamount", authHandler.round(tAmt, companyid));
                            jobj.put("originalamountincludingtax", authHandler.round((amt + tAmt), companyid));
                            jobj.put("transactionexchangerate", temp.getDeliveryOrder().getExternalCurrencyRate() == 0 ? 1 : temp.getDeliveryOrder().getExternalCurrencyRate());
                            jobj.put("transactioncurrencysymbol", temp.getDeliveryOrder().getCurrency() != null ? temp.getDeliveryOrder().getCurrency().getSymbol() : "");
                            jobj.put("transactioncurrencyid", temp.getDeliveryOrder().getCurrency() != null ? temp.getDeliveryOrder().getCurrency().getCurrencyID() : "");
                            jobj.put(Constants.memo, temp.getDeliveryOrder()!=null && temp.getDeliveryOrder().getMemo()!=null?temp.getDeliveryOrder().getMemo():"");
                            returnArray.put(jobj);
                        }
                    }
                    if (deliveryOrder.getTax() != null) {
                        double totalDOAmountInBase = deliveryOrder.getTotalamountinbase();
                        double taxAmtOfDOInBase = totalDOAmountInBase - totalAmtOfDOExcludingGSTInBase;
                        Tax tax = deliveryOrder.getTax(); 
                        JSONObject jobj = new JSONObject();
                        jobj.put("taxcode", tax.getTaxCode());
                        jobj.put("journalEntryNo", "");
                        jobj.put("invno", deliveryOrder.getDeliveryOrderNumber());
                        jobj.put("invdate",sdf.format(new Date(deliveryOrder.getOrderDate().getTime())));
                        jobj.put("billid", deliveryOrder.getID());
                        jobj.put("addAmountFlag", true);
                        jobj.put("type", "Delivery Order");
                        jobj.put("invname", deliveryOrder.getCustomer().getName());
                        jobj.put("invamt", totalDOAmountInBase);
                        jobj.put("invtaxamount", taxAmtOfDOInBase);
                        jobj.put("gramtexcludingtax", authHandler.round((totalDOAmountInBase - taxAmtOfDOInBase), companyid));
                        jobj.put("originaltaxamount", authHandler.round(taxAmtOfDOInBase, companyid));
                        jobj.put("originalamountincludingtax", authHandler.round(totalDOAmountInBase, companyid));
                        jobj.put("transactionexchangerate", deliveryOrder.getExternalCurrencyRate() == 0 ? 1 : deliveryOrder.getExternalCurrencyRate());
                        jobj.put("transactioncurrencysymbol", deliveryOrder.getCurrency() != null ? deliveryOrder.getCurrency().getSymbol() : "");
                        jobj.put("transactioncurrencyid", deliveryOrder.getCurrency() != null ? deliveryOrder.getCurrency().getCurrencyID() : "");
                        jobj.put(Constants.memo, deliveryOrder.getMemo()!=null?deliveryOrder.getMemo():"");
                        returnArray.put(jobj);
                    }
                }
            }
            /**
             * In case of Malaysian company and isGSTReport or isTAXReport.
             * Get deliver order detail for specified tax code.
             */
            if (isMalasianCompany && (isForGSTReport || isForTaxReport)) {
                KwlReturnObject doresult = null;
                doresult = accInvoiceDAOobj.getCalculatedDODtlTax(requestParams);
                List<DeliveryOrderDetail> dorows = doresult.getEntityList();
                double gramtexcludingtax = 0.0;
                if (dorows != null && !dorows.isEmpty()) {
                    
                    for (DeliveryOrderDetail row : dorows) {
                        double quantity = row.getInventory().getQuantity();
                        double appliedAmtExcludingTaxInDoCurr = row.getRate() * quantity;
                        double taxAmt = row.getRowTaxAmount();
                        String documentCurrencyId = row.getDeliveryOrder().getCurrency().getCurrencyID();
                        
                        double doAmtInBaseWithoutTax = appliedAmtExcludingTaxInDoCurr;
                        double taxAmtInBase = taxAmt;
                        gramtexcludingtax = doAmtInBaseWithoutTax;
                        
                        if (!documentCurrencyId.equalsIgnoreCase(companyCurrencyId)) {
                            KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, appliedAmtExcludingTaxInDoCurr, row.getDeliveryOrder().getCurrency().getCurrencyID(), row.getDeliveryOrder().getOrderDate(), 0);
                            doAmtInBaseWithoutTax = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                            gramtexcludingtax = doAmtInBaseWithoutTax;

                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmt, row.getDeliveryOrder().getCurrency().getCurrencyID(), row.getDeliveryOrder().getOrderDate(), 0);
                            taxAmtInBase = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                        }
                        String taxCode = "";
                        if (row.getTax() != null) {
                            taxCode = row.getTax().getTaxCode();
                        } else {
                            continue;
                        }
                        JSONObject jobj = new JSONObject();

                        jobj.put("taxcode", taxCode);
                        jobj.put("journalEntryNo", "");
                        jobj.put("invno", row.getDeliveryOrder().getDeliveryOrderNumber());
                        jobj.put("invdate", sdf.format(new Date(row.getDeliveryOrder().getOrderDate().getTime())));
                        jobj.put("addAmountFlag", true);
                        jobj.put(Constants.billid, row.getDeliveryOrder().getID());
                        jobj.put("type", "Delivery Order");
                        jobj.put("invname", row.getDeliveryOrder().getCustomer().getName());
                        jobj.put("invamt", doAmtInBaseWithoutTax + taxAmtInBase);
                        jobj.put("invtaxamount", taxAmtInBase);
                        jobj.put("gramtexcludingtax", authHandler.round(gramtexcludingtax, companyid));
                        jobj.put("originaltaxamount", authHandler.round(taxAmtInBase, companyid));
                        jobj.put("originalamountincludingtax", authHandler.round((doAmtInBaseWithoutTax + taxAmtInBase), companyid));
                        jobj.put("transactionexchangerate", row.getDeliveryOrder().getExternalCurrencyRate() == 0 ? 1 : row.getDeliveryOrder().getExternalCurrencyRate());
                        jobj.put("transactioncurrencysymbol", row.getDeliveryOrder().getCurrency() != null ? row.getDeliveryOrder().getCurrency().getSymbol() : "");
                        jobj.put("transactioncurrencyid", documentCurrencyId);
                        jobj.put(Constants.memo, row.getDeliveryOrder() != null && row.getDeliveryOrder().getMemo() != null ? row.getDeliveryOrder().getMemo() : "");
                        returnArray.put(jobj);
                    }
                }
            }
        } catch (SessionExpiredException | UnsupportedEncodingException | ServiceException | JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnArray;
    }

    public JSONArray getAdjustmentTaxesJsonArray(HashMap<String, Object> requestParams) throws JSONException {
        JSONArray returnArray = new JSONArray();
        double inputTaxAdjustment = 0d;
        double outputTaxAdjustment = 0d;
        try {
            KwlReturnObject result = accInvoiceDAOobj.getTaxAdjustments(requestParams);
            DateFormat odf = new SimpleDateFormat("dd-MM-yyyy");
            if (requestParams.containsKey(Constants.onlydateformat)) {
                odf = (DateFormat) requestParams.get(Constants.onlydateformat);
            }
            List list = result.getEntityList();
            Iterator it = list.iterator();
            while (it.hasNext()) {
                TaxAdjustment taxAdjustment = (TaxAdjustment) it.next();
                if (taxAdjustment.isInputAdjustment()) {
                    inputTaxAdjustment += taxAdjustment.getTaxAmount();

                } else {
                    outputTaxAdjustment += taxAdjustment.getTaxAmount();
                }

                JSONObject jobj = new JSONObject();
                jobj.put("taxcode", (taxAdjustment.getTax() != null) ? taxAdjustment.getTax().getTaxCode() : "");
                jobj.put("journalEntryNo", (taxAdjustment.getJournalEntry() != null) ? taxAdjustment.getJournalEntry().getEntryNumber() : "");
                jobj.put("invno", taxAdjustment.getDocumentNo());
                jobj.put("jeid", taxAdjustment.getJournalEntry().getID());
                jobj.put("jedate", odf.format(taxAdjustment.getJournalEntry().getEntryDate()));
                jobj.put("invname", "");
                jobj.put("invamt", taxAdjustment.getTaxAmount());
                jobj.put("invtaxamount", taxAdjustment.getTaxAmount());
                jobj.put("isInputTaxAdjustment", taxAdjustment.isInputAdjustment());
                returnArray.put(jobj);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnArray;
    }

    public List<Double> getAdjustmentTaxes(HashMap<String, Object> requestParams) {
        List<Double> taxAppliedList = new ArrayList<Double>();
        double inputTaxAdjustment = 0d;
        double outputTaxAdjustment = 0d;
        try {
            KwlReturnObject result = accInvoiceDAOobj.getTaxAdjustments(requestParams);
            List list = result.getEntityList();
            Iterator it = list.iterator();
            while (it.hasNext()) {
                TaxAdjustment taxAdjustment = (TaxAdjustment) it.next();
                if (taxAdjustment.isInputAdjustment()) {
                    inputTaxAdjustment += taxAdjustment.getTaxAmount();
                } else {
                    outputTaxAdjustment += taxAdjustment.getTaxAmount();
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        taxAppliedList.add(inputTaxAdjustment);
        taxAppliedList.add(outputTaxAdjustment);
        return taxAppliedList;
    }

    public List<Double> getBadDebtClaimedPurchaseInvoices(HttpServletRequest request , JSONArray industryCodeJsonArr) throws SessionExpiredException {
        List<Double> badDebtList = new ArrayList<Double>();
        double adjustmentAmtExcludingTax = 0d;
        double adjustmentTax = 0d;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        boolean isForExport = request.getAttribute("isForExport") == null ?false:true;
        HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
        reqParams.put("badDebtCalculationFromDate", request.getParameter("stdate"));
        reqParams.put("badDebtCalculationToDate", request.getParameter("enddate"));
        reqParams.put("dateformat", authHandler.getDateOnlyFormat());
        reqParams.put(Constants.companyKey, companyid);
        reqParams.put("nondeleted", "true");
        reqParams.put("isBadDebtInvoices", true);
        reqParams.put("forBadDebtClaim", true);
        reqParams.put("pendingapproval", false);
        reqParams.put("baddebttype", 1);
        
        boolean isMultiEntity =  false;
        String primaryIndustryCode ="";
        Map<String, String> invoiceEntityMap = Collections.EMPTY_MAP;
        Map<String, String> entityIndustryCodeMap = Collections.EMPTY_MAP;
        if (isForExport) { // GST form3 Custom report
            try {
                KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);
                extracap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) extracap.getEntityList().get(0);
                isMultiEntity = extraCompanyPreferences.isIsMultiEntity();
                primaryIndustryCode = companyAccountPreferences.getIndustryCode()!=null?companyAccountPreferences.getIndustryCode().getValue():"";
                Map<String, Object> requestparms = new HashMap<>();
                requestparms.put(Constants.companyid, sessionHandlerImpl.getCompanyid(request));
                entityIndustryCodeMap = accGstService.getEntityMSICCode(requestparms);
                requestparms.put(Constants.REQ_startdate,  authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
                requestparms.put(Constants.REQ_enddate,  authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
                requestparms.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                requestparms.put("baddebttype", 1);
                invoiceEntityMap = accReportsService.getTransactionIndustryCodeMap(requestparms);
            } catch (Exception e) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, e);
            }
        }
        try {

            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            /*
             * Combining Normal and opening invoices
             */
            List normalInvoiceList = new ArrayList();
            List openingInvoiceList = new ArrayList();
            Iterator it = null;
            KwlReturnObject result = accGoodsReceiptDAOObj.getGoodsReceiptsMerged(reqParams);

            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                normalInvoiceList = result.getEntityList();
            }
            reqParams.put("isOpeningBalanceInvoices", "true");
            result = accGoodsReceiptDAOObj.getGoodsReceiptsMerged(reqParams);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                openingInvoiceList = result.getEntityList();
                normalInvoiceList.addAll(openingInvoiceList);
            }
            it = normalInvoiceList.iterator();

            while (it.hasNext()) {
                Object[] oj = (Object[]) it.next();

                String invid = oj[0].toString();
                HashMap<String, Object> badMaps = new HashMap<String, Object>();
                badMaps.put(Constants.companyKey, companyid);
                badMaps.put("invoiceid", invid);

                KwlReturnObject badDebtMappingResult = accGoodsReceiptDAOObj.getBadDebtPurchaseInvoiceMappingForGoodsReceipt(badMaps);
                List badDebtMapping = badDebtMappingResult.getEntityList();
                double claimedGST = 0;
                double claimedAmtExcludingTax = 0;
                if (!badDebtMapping.isEmpty()) {
                    Iterator badIt = badDebtMapping.iterator();
                    while (badIt.hasNext()) {

                        BadDebtPurchaseInvoiceMapping debtInvoiceMapping = (BadDebtPurchaseInvoiceMapping) badIt.next();
                        if (debtInvoiceMapping.getBadDebtType() == 0) {// there will be only one row entry for claim in this table for an invoice
                            claimedGST = debtInvoiceMapping.getBadDebtGSTAmtClaimed();
                            claimedAmtExcludingTax = (debtInvoiceMapping.getBadDebtAmtClaimed() - claimedGST);

                            // Converting claimed GST in base currency
                            GoodsReceipt goodsReceipt = debtInvoiceMapping.getGoodsReceipt();
                            boolean isOpeningBalanceInvoice = debtInvoiceMapping.getGoodsReceipt().isIsOpeningBalenceInvoice();
                            if(isOpeningBalanceInvoice){
                                claimedGST = (goodsReceipt.isConversionRateFromCurrencyToBase()) ? (claimedGST * goodsReceipt.getExchangeRateForOpeningTransaction()) : (claimedGST / goodsReceipt.getExchangeRateForOpeningTransaction());
                                claimedAmtExcludingTax = (goodsReceipt.isConversionRateFromCurrencyToBase()) ? (claimedAmtExcludingTax * goodsReceipt.getExchangeRateForOpeningTransaction()) : (claimedAmtExcludingTax / goodsReceipt.getExchangeRateForOpeningTransaction());
                            } else {
//                                KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, claimedGST, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getJournalEntry().getEntryDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, claimedGST, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getCreationDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                claimedGST = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
//                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, claimedAmtExcludingTax, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getJournalEntry().getEntryDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, claimedAmtExcludingTax, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getCreationDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                claimedAmtExcludingTax = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                            }
                            
                        }
                    }
                }
                if (isForExport) {
                    try {
                        String industryCode = "";
                        if (isMultiEntity) {
                            String entity = invoiceEntityMap.get(invid);
                            industryCode = entityIndustryCodeMap.get(entity);
                        } else {
                            industryCode = primaryIndustryCode;
                        }
                        JSONObject msicdetails = new JSONObject();
                        msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.round(claimedGST, companyid));
                        msicdetails.put(Constants.MSIC_CODE, industryCode);
                        industryCodeJsonArr.put(msicdetails);
                    } catch (JSONException e) {
                        Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, e);
                    }
                }
                adjustmentTax += claimedGST;//(invoiceLevelTaxAmount + rowTaxAmount);
                adjustmentAmtExcludingTax += claimedAmtExcludingTax;//(invoiceAmtDue - invoiceLevelTaxAmount - rowTaxAmount);
            }
        } catch (SessionExpiredException | UnsupportedEncodingException | ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        badDebtList.add(adjustmentAmtExcludingTax);
        badDebtList.add(adjustmentTax);
        return badDebtList;
    }

    public JSONArray getBadDebtClaimedPurchaseInvoicesJson(HttpServletRequest request) throws SessionExpiredException, JSONException {
        JSONArray returnArray = new JSONArray();
        String companyid = sessionHandlerImpl.getCompanyid(request);
        HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
        reqParams.put("badDebtCalculationFromDate", request.getParameter("stdate"));
        reqParams.put("badDebtCalculationToDate", request.getParameter("enddate"));
        reqParams.put("dateformat", authHandler.getDateOnlyFormat());
        reqParams.put(Constants.companyKey, companyid);
        reqParams.put("nondeleted", "true");
        reqParams.put("isBadDebtInvoices", true);
        reqParams.put("forBadDebtClaim", true);
        reqParams.put("pendingapproval", false);
        reqParams.put("baddebttype", 1);
        try {
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            /*
             * Combining Normal and opening invoices
             */
            List normalInvoiceList = new ArrayList();
            List openingInvoiceList = new ArrayList();
            Iterator it = null;
            KwlReturnObject result = accGoodsReceiptDAOObj.getGoodsReceiptsMerged(reqParams);
            DateFormat odf = authHandler.getOnlyDateFormat(request);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                normalInvoiceList = result.getEntityList();
            }
            reqParams.put("isOpeningBalanceInvoices", "true");
            result = accGoodsReceiptDAOObj.getGoodsReceiptsMerged(reqParams);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                openingInvoiceList = result.getEntityList();
                normalInvoiceList.addAll(openingInvoiceList);
            }
            it = normalInvoiceList.iterator();
            while (it.hasNext()) {
                Object[] oj = (Object[]) it.next();
                String invid = oj[0].toString();
                HashMap<String, Object> badMaps = new HashMap<String, Object>();
                badMaps.put(Constants.companyKey, companyid);
                badMaps.put("invoiceid", invid);

                KwlReturnObject badDebtMappingResult = accGoodsReceiptDAOObj.getBadDebtPurchaseInvoiceMappingForGoodsReceipt(badMaps);
                List badDebtMapping = badDebtMappingResult.getEntityList();
                double claimedGST = 0;
                double claimedAmtExcludingTax = 0;
                if (!badDebtMapping.isEmpty()) {
                    Iterator badIt = badDebtMapping.iterator();
                    while (badIt.hasNext()) {

                        BadDebtPurchaseInvoiceMapping debtInvoiceMapping = (BadDebtPurchaseInvoiceMapping) badIt.next();
                        if (debtInvoiceMapping.getBadDebtType() == 0) {// there will be only one row entry for claim in this table for an invoice
                            claimedGST = debtInvoiceMapping.getBadDebtGSTAmtClaimed();
                            claimedAmtExcludingTax = (debtInvoiceMapping.getBadDebtAmtClaimed() - claimedGST);

                            // Converting claimed GST in base currency
                            GoodsReceipt goodsReceipt = debtInvoiceMapping.getGoodsReceipt();
                            boolean isOpeningBalanceInvoice = debtInvoiceMapping.getGoodsReceipt().isIsOpeningBalenceInvoice();
                            if (isOpeningBalanceInvoice) {
                                claimedGST = (goodsReceipt.isConversionRateFromCurrencyToBase()) ? (claimedGST * goodsReceipt.getExchangeRateForOpeningTransaction()) : (claimedGST / goodsReceipt.getExchangeRateForOpeningTransaction());
                                claimedAmtExcludingTax = (goodsReceipt.isConversionRateFromCurrencyToBase()) ? (claimedAmtExcludingTax * goodsReceipt.getExchangeRateForOpeningTransaction()) : (claimedAmtExcludingTax / goodsReceipt.getExchangeRateForOpeningTransaction());
                            } else {
//                                KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, claimedGST, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getJournalEntry().getEntryDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, claimedGST, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getCreationDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                claimedGST = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);

//                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, claimedAmtExcludingTax, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getJournalEntry().getEntryDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, claimedAmtExcludingTax, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getCreationDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                claimedAmtExcludingTax = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                            }
                            double amtWithTax = claimedAmtExcludingTax + claimedGST;

                            JSONObject jobj = new JSONObject();

                            jobj.put("taxcode", Constants.MALAYSIAN_GST_AJS_TAX_CODE);
                            jobj.put("journalEntryNo", (debtInvoiceMapping.getJournalEntry() != null) ? debtInvoiceMapping.getJournalEntry().getEntryNumber() : "");
                            jobj.put("invno", debtInvoiceMapping.getBadDebtSeqNumber());
                            jobj.put(Constants.billid, goodsReceipt.getID());
                            jobj.put("jeid", (debtInvoiceMapping.getJournalEntry() != null) ? debtInvoiceMapping.getJournalEntry().getID() : "");
                            jobj.put("jedate", (debtInvoiceMapping.getJournalEntry() != null) ? odf.format(debtInvoiceMapping.getJournalEntry().getEntryDate()) : "");
                            jobj.put("type", "Purchase Invoice");
                            jobj.put("invname", "");
                            jobj.put("invamt", amtWithTax);
                            jobj.put("invtaxamount", claimedGST);
                            jobj.put(Constants.memo, goodsReceipt.getMemo() != null ? goodsReceipt.getMemo() : "");
                            returnArray.put(jobj);
                        }
                    }
                }
            }
        } catch (SessionExpiredException | UnsupportedEncodingException | ServiceException | JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnArray;
    }

    public List<Double> getBadDebtPurchaseRecoveredInvoices(HttpServletRequest request) throws SessionExpiredException {
        List<Double> badDebtList = new ArrayList<Double>();
        double adjustmentAmtExcludingTax = 0d;
        double adjustmentTax = 0d;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
        try {
            reqParams.put(Constants.companyKey, companyid);
            reqParams.put("recoveredFromDate", authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
            reqParams.put("recoveredToDate", authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
            reqParams.put("baddebttype", 1);

            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            
            KwlReturnObject badDebtMappingResult = accGoodsReceiptDAOObj.getBadDebtPurchaseInvoiceMappingForGoodsReceipt(reqParams);
            List badDebtMapping = badDebtMappingResult.getEntityList();
            double recoveredGST = 0;
            double recoveredAmt = 0;
            KwlReturnObject bAmt1=null;
            if (!badDebtMapping.isEmpty()) {
                Iterator badIt = badDebtMapping.iterator();
                while (badIt.hasNext()) {
                    BadDebtPurchaseInvoiceMapping debtInvoiceMapping = (BadDebtPurchaseInvoiceMapping) badIt.next();
                    double recoveredAmtInInvoiceCurr = debtInvoiceMapping.getBadDebtAmtRecovered();
                    double recoveredGSTInInvoiceCurr = debtInvoiceMapping.getBadAmtDebtGSTAmtRecovered();

                    // convert recovered amount in base currency
                    GoodsReceipt goodsReceipt = debtInvoiceMapping.getGoodsReceipt();
                    boolean isOpeningBalanceInvoice = debtInvoiceMapping.getGoodsReceipt().isIsOpeningBalenceInvoice();
                    if(isOpeningBalanceInvoice){
                        recoveredAmt += (goodsReceipt.isConversionRateFromCurrencyToBase())?(recoveredAmtInInvoiceCurr*goodsReceipt.getExchangeRateForOpeningTransaction()):(recoveredAmtInInvoiceCurr/goodsReceipt.getExchangeRateForOpeningTransaction());
                        recoveredGST += (goodsReceipt.isConversionRateFromCurrencyToBase())?(recoveredGSTInInvoiceCurr*goodsReceipt.getExchangeRateForOpeningTransaction()):(recoveredGSTInInvoiceCurr/goodsReceipt.getExchangeRateForOpeningTransaction());
                    } else{
//                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredAmtInInvoiceCurr, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getJournalEntry().getEntryDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredAmtInInvoiceCurr, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getCreationDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                    recoveredAmt += authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);

//                    bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredGSTInInvoiceCurr, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getJournalEntry().getEntryDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                    bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredGSTInInvoiceCurr, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getCreationDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                    recoveredGST += authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                    }
                }
            }
            adjustmentTax += recoveredGST;//(invoiceLevelTaxAmount + rowTaxAmount);
            adjustmentAmtExcludingTax += (recoveredAmt - recoveredGST);
        } catch (SessionExpiredException | ParseException | UnsupportedEncodingException | ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        badDebtList.add(adjustmentAmtExcludingTax);
        badDebtList.add(adjustmentTax);
        return badDebtList;
    }

    public JSONArray getBadDebtPurchaseRecoveredInvoicesJson(HttpServletRequest request) throws SessionExpiredException, JSONException {
        JSONArray returnArray = new JSONArray();
        String companyid = sessionHandlerImpl.getCompanyid(request);
        HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
        try {
            reqParams.put(Constants.companyKey, companyid);
            reqParams.put("recoveredFromDate", authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
            reqParams.put("recoveredToDate", authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
            reqParams.put("baddebttype", 1);
            DateFormat odf = authHandler.getOnlyDateFormat(request);
            
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            
            KwlReturnObject badDebtMappingResult = accGoodsReceiptDAOObj.getBadDebtPurchaseInvoiceMappingForGoodsReceipt(reqParams);
            List badDebtMapping = badDebtMappingResult.getEntityList();
            double recoveredGST = 0;
            double recoveredAmt = 0;
            if (!badDebtMapping.isEmpty()) {
                Iterator badIt = badDebtMapping.iterator();
                while (badIt.hasNext()) {
                    BadDebtPurchaseInvoiceMapping debtInvoiceMapping = (BadDebtPurchaseInvoiceMapping) badIt.next();
                    double recoveredAmtInInvoiceCurr = debtInvoiceMapping.getBadDebtAmtRecovered();
                    double recoveredGSTInInvoiceCurr = debtInvoiceMapping.getBadAmtDebtGSTAmtRecovered();

                    // convert recovered amount in base currency
                    GoodsReceipt goodsReceipt = debtInvoiceMapping.getGoodsReceipt();
                    boolean isOpeningBalanceInvoice = debtInvoiceMapping.getGoodsReceipt().isIsOpeningBalenceInvoice();
                    KwlReturnObject bAmt1=null;
                    double rGst=0.0d;
                    double rAmt=0.0d;
                    if (isOpeningBalanceInvoice) {
                        rAmt = (goodsReceipt.isConversionRateFromCurrencyToBase()) ? (recoveredAmtInInvoiceCurr * goodsReceipt.getExchangeRateForOpeningTransaction()) : (recoveredAmtInInvoiceCurr / goodsReceipt.getExchangeRateForOpeningTransaction());
                        recoveredAmt += rAmt;
                        rGst = (goodsReceipt.isConversionRateFromCurrencyToBase()) ? (recoveredGSTInInvoiceCurr * goodsReceipt.getExchangeRateForOpeningTransaction()) : (recoveredGSTInInvoiceCurr / goodsReceipt.getExchangeRateForOpeningTransaction());
                        recoveredGST += rGst;
                    } else {
//                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredAmtInInvoiceCurr, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getJournalEntry().getEntryDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredAmtInInvoiceCurr, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getCreationDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                        rAmt = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                        recoveredAmt += rAmt;
//                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredGSTInInvoiceCurr, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getJournalEntry().getEntryDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredGSTInInvoiceCurr, goodsReceipt.getCurrency().getCurrencyID(), goodsReceipt.getCreationDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                        rGst = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                        recoveredGST += rGst;
                    }
                    JSONObject jobj = new JSONObject();
                    jobj.put("taxcode", Constants.MALAYSIAN_GST_AJP_TAX_CODE);
                    if (!StringUtil.isNullOrEmpty(debtInvoiceMapping.getPaymentId())) {
                        KwlReturnObject paymentResult = accountingHandlerDAOobj.getObject(Payment.class.getName(),debtInvoiceMapping.getPaymentId());
                        Payment payment = (Payment) paymentResult.getEntityList().get(0);
                        jobj.put("invno", payment.getPaymentNumber());
                        jobj.put("journalEntryNo", payment.getJournalEntry().getEntryNumber());
                        jobj.put("jeid", payment.getJournalEntry().getID());
                        jobj.put("type", "Payment Made");
                        jobj.put(Constants.billid, payment.getID());    
                        jobj.put("jedate", odf.format(payment.getJournalEntry().getEntryDate()));
                        jobj.put(Constants.memo, payment.getMemo() != null ? payment.getMemo() : "");
                    }
                    jobj.put("invname", "");
                    jobj.put("invamt", rAmt);
                    jobj.put("invtaxamount", rGst);
                    returnArray.put(jobj);
                }
            }
        } catch (SessionExpiredException | ParseException | UnsupportedEncodingException | ServiceException | JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } 
        return returnArray;
    }

    public List<Double> getBadDebtClaimedInvoices(HttpServletRequest request) throws SessionExpiredException {
        List<Double> badDebtList = new ArrayList<Double>();
        double adjustmentAmtExcludingTax = 0d;
        double adjustmentTax = 0d;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
        reqParams.put("badDebtCalculationFromDate", request.getParameter("stdate"));
        reqParams.put("badDebtCalculationToDate", request.getParameter("enddate"));
        reqParams.put("dateformat", authHandler.getDateOnlyFormat());
        reqParams.put(Constants.companyKey, companyid);
        reqParams.put("nondeleted", "true");
        reqParams.put("isBadDebtInvoices", true);
        reqParams.put("forBadDebtClaim", true);
        reqParams.put("pendingapproval", false);
        reqParams.put("baddebttype", 1);

        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        try {

            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            /*
             * Combining Normal and opening invoices
             */
            List normalInvoiceList = new ArrayList();
            List openingInvoiceList = new ArrayList();
            Iterator it = null;
            KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(reqParams);

            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                normalInvoiceList = result.getEntityList();
            }
            reqParams.put("isOpeningBalanceInvoices", "true");
            result = accInvoiceDAOobj.getInvoicesMerged(reqParams);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                openingInvoiceList = result.getEntityList();
                normalInvoiceList.addAll(openingInvoiceList);
            }
            it = normalInvoiceList.iterator();
            while (it.hasNext()) {

                Object[] oj = (Object[]) it.next();

                String invid = oj[0].toString();

                HashMap<String, Object> badMaps = new HashMap<String, Object>();
                badMaps.put(Constants.companyKey, companyid);
                badMaps.put("invoiceid", invid);

                KwlReturnObject badDebtMappingResult = accInvoiceDAOobj.getBadDebtInvoiceMappingForInvoice(badMaps);
                List badDebtMapping = badDebtMappingResult.getEntityList();
                double claimedGST = 0;
                double claimedAmtExcludingTax = 0;
                double claimedAmtWithtax = 0;
                KwlReturnObject bAmt1 = null;
                if (!badDebtMapping.isEmpty()) {
                    Iterator badIt = badDebtMapping.iterator();
                    while (badIt.hasNext()) {
                        BadDebtInvoiceMapping debtInvoiceMapping = (BadDebtInvoiceMapping) badIt.next();
                        if (debtInvoiceMapping.getBadDebtType() == 0) {// there will be only one row entry for claim in this table for an invoice
                            claimedGST = debtInvoiceMapping.getBadDebtGSTAmtClaimed();

                            claimedAmtExcludingTax = (debtInvoiceMapping.getBadDebtAmtClaimed() - claimedGST);
                            claimedAmtWithtax = debtInvoiceMapping.getBadDebtAmtClaimed();
                            // Converting claimed GST in base currency

                            Invoice invoice = debtInvoiceMapping.getInvoice();
                            boolean isOpeningBalanceInvoice = debtInvoiceMapping.getInvoice().isIsOpeningBalenceInvoice();
                            if (isOpeningBalanceInvoice) {
                                claimedGST = invoice.isConversionRateFromCurrencyToBase() ? (claimedGST * invoice.getExchangeRateForOpeningTransaction()) : (claimedGST / invoice.getExchangeRateForOpeningTransaction());
                                claimedAmtExcludingTax = invoice.isConversionRateFromCurrencyToBase() ? (claimedAmtExcludingTax * invoice.getExchangeRateForOpeningTransaction()) : (claimedAmtExcludingTax / invoice.getExchangeRateForOpeningTransaction());
                                claimedAmtWithtax = invoice.isConversionRateFromCurrencyToBase() ? (claimedAmtWithtax * invoice.getExchangeRateForOpeningTransaction()) : (claimedAmtWithtax / invoice.getExchangeRateForOpeningTransaction());
                            } else {
//                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, claimedGST, invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, claimedGST, invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                                claimedGST = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);

//                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, claimedAmtExcludingTax, invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, claimedAmtExcludingTax, invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                                claimedAmtExcludingTax = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);

//                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, claimedAmtWithtax, invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, claimedAmtWithtax, invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                                claimedAmtWithtax = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                            }
                        }
                    }
                }
                adjustmentTax += claimedGST;//(invoiceLevelTaxAmount + rowTaxAmount);
                adjustmentAmtExcludingTax += claimedAmtWithtax;//(invoiceAmtDue - invoiceLevelTaxAmount - rowTaxAmount);
            }

        } catch (SessionExpiredException | UnsupportedEncodingException | ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        badDebtList.add(adjustmentAmtExcludingTax);
        badDebtList.add(adjustmentTax);
        return badDebtList;
    }

    public JSONArray getBadDebtClaimedInvoicesJSON(HttpServletRequest request) throws SessionExpiredException, JSONException {
        JSONArray returnArray = new JSONArray();
        String companyid = sessionHandlerImpl.getCompanyid(request);
        HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
        reqParams.put("badDebtCalculationFromDate", request.getParameter("stdate"));
        reqParams.put("badDebtCalculationToDate", request.getParameter("enddate"));
        reqParams.put("dateformat", authHandler.getDateOnlyFormat());
        reqParams.put(Constants.companyKey, companyid);
        reqParams.put("nondeleted", "true");
        reqParams.put("isBadDebtInvoices", true);
        reqParams.put("forBadDebtClaim", true);
        reqParams.put("pendingapproval", false);
        reqParams.put("baddebttype", 1);

        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        try {
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            /*
             * Combining Normal and opening invoices
             */
            List normalInvoiceList = new ArrayList();
            List openingInvoiceList = new ArrayList();
            Iterator it = null;
            KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(reqParams);
            DateFormat odf = authHandler.getOnlyDateFormat(request);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                normalInvoiceList = result.getEntityList();
            }
            reqParams.put("isOpeningBalanceInvoices", "true");
            result = accInvoiceDAOobj.getInvoicesMerged(reqParams);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                openingInvoiceList = result.getEntityList();
                normalInvoiceList.addAll(openingInvoiceList);
            }
            
            it = normalInvoiceList.iterator();
            while (it.hasNext()) {
                Object[] oj = (Object[]) it.next();
                String invid = oj[0].toString();

                HashMap<String, Object> badMaps = new HashMap<String, Object>();
                badMaps.put(Constants.companyKey, companyid);
                badMaps.put("invoiceid", invid);

                KwlReturnObject badDebtMappingResult = accInvoiceDAOobj.getBadDebtInvoiceMappingForInvoice(badMaps);
                List badDebtMapping = badDebtMappingResult.getEntityList();
                double claimedGST = 0;
                double claimedAmtExcludingTax = 0;
                KwlReturnObject bAmt1 = null;
                if (!badDebtMapping.isEmpty()) {
                    Iterator badIt = badDebtMapping.iterator();
                    while (badIt.hasNext()) {
                        BadDebtInvoiceMapping debtInvoiceMapping = (BadDebtInvoiceMapping) badIt.next();
                        if (debtInvoiceMapping.getBadDebtType() == 0) {// there will be only one row entry for claim in this table for an invoice
                            claimedGST = debtInvoiceMapping.getBadDebtGSTAmtClaimed();
                            claimedAmtExcludingTax = (debtInvoiceMapping.getBadDebtAmtClaimed() - claimedGST);
                            // Converting claimed GST in base currency

                            Invoice invoice = debtInvoiceMapping.getInvoice();
                            boolean isOpeningBalanceInvoice = debtInvoiceMapping.getInvoice().isIsOpeningBalenceInvoice();
                            if (isOpeningBalanceInvoice) {
                                claimedGST = (invoice.isConversionRateFromCurrencyToBase()) ? (claimedGST * invoice.getExchangeRateForOpeningTransaction()) : (claimedGST / invoice.getExchangeRateForOpeningTransaction());
                                claimedAmtExcludingTax = (invoice.isConversionRateFromCurrencyToBase()) ? (claimedAmtExcludingTax * invoice.getExchangeRateForOpeningTransaction()) : (claimedAmtExcludingTax / invoice.getExchangeRateForOpeningTransaction());
                            } else {
//                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, claimedGST, invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, claimedGST, invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                                claimedGST = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);

//                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, claimedAmtExcludingTax, invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, claimedAmtExcludingTax, invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                                claimedAmtExcludingTax = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                            }

                            double amtWithTax = claimedAmtExcludingTax + claimedGST;

                            JSONObject jobj = new JSONObject();
                            jobj.put("taxcode", Constants.MALAYSIAN_GST_AJP_TAX_CODE);
                            jobj.put("journalEntryNo", (debtInvoiceMapping.getJournalEntry() != null) ? debtInvoiceMapping.getJournalEntry().getEntryNumber() : "");
                            jobj.put("invno", debtInvoiceMapping.getBadDebtSeqNumber());
                            jobj.put("type", "Sales Invoice");
                            jobj.put(Constants.billid, invoice.getID());
                            jobj.put("jeid", (debtInvoiceMapping.getJournalEntry() != null) ? debtInvoiceMapping.getJournalEntry().getID() : "");
                            jobj.put("jedate", (debtInvoiceMapping.getJournalEntry() != null) ? odf.format(debtInvoiceMapping.getJournalEntry().getEntryDate()) : "");
                            jobj.put("invname", "");
                            jobj.put("invamt", amtWithTax);
                            jobj.put("invtaxamount", claimedGST);
                            jobj.put(Constants.memo, invoice.getMemo() != null ? invoice.getMemo() : "");
                            returnArray.put(jobj);
                        }
                    }
                }
            }

        } catch (SessionExpiredException | UnsupportedEncodingException | ServiceException | JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnArray;
    }

    public List<Double> getBadDebtRecoveredInvoices(HttpServletRequest request , JSONArray industryCodeJsonArr) throws SessionExpiredException {
        List<Double> badDebtList = new ArrayList<Double>();
        double adjustmentAmtExcludingTax = 0d;
        double adjustmentTax = 0d;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
        boolean isForExport = request.getAttribute("isForExport") == null ?false:true;
        
        boolean isMultiEntity =  false;
        String primaryIndustryCode ="";
        Map<String, String> invoiceEntityMap = Collections.EMPTY_MAP;
        Map<String, String> entityIndustryCodeMap = Collections.EMPTY_MAP;
        if (isForExport) { // GST form3 Custom report
            try {
                KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);
                extracap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) extracap.getEntityList().get(0);
                isMultiEntity = extraCompanyPreferences.isIsMultiEntity();
                primaryIndustryCode = companyAccountPreferences.getIndustryCode()!=null?companyAccountPreferences.getIndustryCode().getValue():"";
                Map<String, Object> requestparms = new HashMap<>();
                requestparms.put(Constants.companyid, sessionHandlerImpl.getCompanyid(request));
                entityIndustryCodeMap = accGstService.getEntityMSICCode(requestparms);
                requestparms.put(Constants.REQ_startdate,  authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
                requestparms.put(Constants.REQ_enddate,  authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
                requestparms.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                requestparms.put("baddebttype", 1);
                invoiceEntityMap = accReportsService.getTransactionIndustryCodeMap(requestparms);
            } catch (Exception e) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, e);
            }
        }

        try {
            reqParams.put("recoveredFromDate", authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
            reqParams.put("recoveredToDate", authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
            reqParams.put(Constants.companyKey, companyid);
            reqParams.put("badDebtType", 1);
            
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }

            KwlReturnObject badDebtMappingResult = accInvoiceDAOobj.getBadDebtInvoiceMappingForInvoice(reqParams);
            List badDebtMapping = badDebtMappingResult.getEntityList();
            double recoveredGST = 0;
            double recoveredAmt = 0;
            KwlReturnObject bAmt1=null;
            if (!badDebtMapping.isEmpty()) {
                Iterator badIt = badDebtMapping.iterator();
                while (badIt.hasNext()) {
                    BadDebtInvoiceMapping debtInvoiceMapping = (BadDebtInvoiceMapping) badIt.next();
                    double recoveredAmtInInvoiceCurr = debtInvoiceMapping.getBadDebtAmtRecovered();
                    double recoveredGSTInInvoiceCurr = debtInvoiceMapping.getBadAmtDebtGSTAmtRecovered();
                    double recoverdtaxForExport = 0d;
                    // convert recovered amount in base currency
                    Invoice invoice = debtInvoiceMapping.getInvoice();
                    boolean isOpeningBalanceInvoice = debtInvoiceMapping.getInvoice().isIsOpeningBalenceInvoice();
                    if(isOpeningBalanceInvoice){
                        recoveredAmt += (invoice.isConversionRateFromCurrencyToBase())?(recoveredAmtInInvoiceCurr*invoice.getExchangeRateForOpeningTransaction()):(recoveredAmtInInvoiceCurr/invoice.getExchangeRateForOpeningTransaction());
                        recoveredGST += (invoice.isConversionRateFromCurrencyToBase())?(recoveredGSTInInvoiceCurr*invoice.getExchangeRateForOpeningTransaction()):(recoveredGSTInInvoiceCurr/invoice.getExchangeRateForOpeningTransaction());
                        recoverdtaxForExport = (invoice.isConversionRateFromCurrencyToBase())?(recoveredGSTInInvoiceCurr*invoice.getExchangeRateForOpeningTransaction()):(recoveredGSTInInvoiceCurr/invoice.getExchangeRateForOpeningTransaction());
                    } else {
//                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredAmtInInvoiceCurr, invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredAmtInInvoiceCurr, invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                        recoveredAmt += authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);

//                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredGSTInInvoiceCurr, invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredGSTInInvoiceCurr, invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                        recoveredGST += authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                        recoverdtaxForExport = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                    }
                     if (isForExport) {
                        try {
                            String industryCode = "";
                            if (isMultiEntity) {
                                String entity = invoiceEntityMap.get(invoice.getID());
                                industryCode = entityIndustryCodeMap.get(entity);
                            } else {
                                industryCode = primaryIndustryCode;
                            }
                            JSONObject msicdetails = new JSONObject();
                            msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.round(recoverdtaxForExport, companyid));
                            msicdetails.put(Constants.MSIC_CODE, industryCode);
                            industryCodeJsonArr.put(msicdetails);
                        } catch (JSONException e) {
                            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, e);
                        }
                    }
                }
            }
            adjustmentTax += recoveredGST;//(invoiceLevelTaxAmount + rowTaxAmount);
            adjustmentAmtExcludingTax += (recoveredAmt);//(invoiceAmtDue - invoiceLevelTaxAmount - rowTaxAmount);//(invoiceOriginalAmt - invoiceLevelTaxAmount - rowTaxAmount);
        } catch (SessionExpiredException | ParseException | UnsupportedEncodingException | ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        badDebtList.add(adjustmentAmtExcludingTax+adjustmentTax);
        badDebtList.add(adjustmentTax);
        return badDebtList;
    }

    public JSONArray getBadDebtRecoveredInvoicesJson(HttpServletRequest request) throws SessionExpiredException, JSONException {
        JSONArray returnArray = new JSONArray();
        String companyid = sessionHandlerImpl.getCompanyid(request);
        HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);

        try {
            reqParams.put("recoveredFromDate", authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
            reqParams.put("recoveredToDate", authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
            reqParams.put(Constants.companyKey, companyid);
            reqParams.put("badDebtType", 1);
            DateFormat odf = authHandler.getOnlyDateFormat(request);
            
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                reqParams.put(Constants.Acc_Search_Json, searchJson);
                reqParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                reqParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                reqParams.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(reqParams));
            }
            
            KwlReturnObject badDebtMappingResult = accInvoiceDAOobj.getBadDebtInvoiceMappingForInvoice(reqParams);
            List badDebtMapping = badDebtMappingResult.getEntityList();
            double recoveredGST = 0;
            double recoveredAmt = 0;
            if (!badDebtMapping.isEmpty()) {
                Iterator badIt = badDebtMapping.iterator();
                while (badIt.hasNext()) {
                    BadDebtInvoiceMapping debtInvoiceMapping = (BadDebtInvoiceMapping) badIt.next();
                    double recoveredAmtInInvoiceCurr = debtInvoiceMapping.getBadDebtAmtRecovered();
                    double recoveredGSTInInvoiceCurr = debtInvoiceMapping.getBadAmtDebtGSTAmtRecovered();

                    // convert recovered amount in base currency
                    Invoice invoice = debtInvoiceMapping.getInvoice();
                    boolean isOpeningBalanceInvoice = debtInvoiceMapping.getInvoice().isIsOpeningBalenceInvoice();
                    KwlReturnObject bAmt1=null;
                    double rGst=0.0d;
                    double rAmt=0.0d;
                    if(isOpeningBalanceInvoice){
                        rAmt = (invoice.isConversionRateFromCurrencyToBase())?(recoveredAmtInInvoiceCurr*invoice.getExchangeRateForOpeningTransaction()):(recoveredAmtInInvoiceCurr/invoice.getExchangeRateForOpeningTransaction());
                        recoveredAmt += rAmt;
                        rGst = (invoice.isConversionRateFromCurrencyToBase())?(recoveredGSTInInvoiceCurr*invoice.getExchangeRateForOpeningTransaction()):(recoveredGSTInInvoiceCurr/invoice.getExchangeRateForOpeningTransaction());
                        recoveredGST += rGst;
                    } else{
//                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredAmtInInvoiceCurr, invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredAmtInInvoiceCurr, invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                        rAmt = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                        recoveredAmt += rAmt;
//                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredGSTInInvoiceCurr, invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(reqParams, recoveredGSTInInvoiceCurr, invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                        rGst = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);;
                        recoveredGST += rGst;
                    }
                    

                    JSONObject jobj = new JSONObject();

                    jobj.put("taxcode", Constants.MALAYSIAN_GST_AJS_TAX_CODE);
                    if (!StringUtil.isNullOrEmpty(debtInvoiceMapping.getReceiptId())) {
                        KwlReturnObject paymentResult = accountingHandlerDAOobj.getObject(Receipt.class.getName(),debtInvoiceMapping.getReceiptId());
                        Receipt receipt = (Receipt) paymentResult.getEntityList().get(0);
                        jobj.put("invno", receipt.getReceiptNumber());
                        jobj.put("journalEntryNo", receipt.getJournalEntry().getEntryNumber());
                        jobj.put("jeid", receipt.getJournalEntry().getID());
                        jobj.put("jedate", odf.format(receipt.getJournalEntry().getEntryDate()));
                        jobj.put(Constants.billid, receipt.getID());
                        jobj.put("type", "Payment Received");
                        jobj.put(Constants.memo, receipt.getMemo() != null ? receipt.getMemo() : "");
                    }
                    jobj.put("invname", "");
                    jobj.put("invamt", rAmt);
                    jobj.put("invtaxamount", rGst);
                    returnArray.put(jobj);
                }
            }
        } catch (SessionExpiredException | ParseException | UnsupportedEncodingException | ServiceException | JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnArray;
    }

    private JSONArray getGSTForm5DetailedJSONArray(HttpServletRequest request, boolean isForExport) throws JSONException, SessionExpiredException, ParseException, ServiceException {
        String fileType = "";
        java.io.ByteArrayOutputStream baos = null;
         
        String nameDe="";
        String id="";
        String desg="";
        String per="";
        String contact="";
        // to add  delarant name,id,designation,person,contact
        List valueTextField=new ArrayList();
        String companyid = sessionHandlerImpl.getCompanyid(request);
        CompanyAccountPreferences pref = null;
        KwlReturnObject returnObject = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        pref = (CompanyAccountPreferences) returnObject.getEntityList().get(0);
        Account forexAccount = pref.getForeignexchange();

        KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
        Company company = (Company) cpresult.getEntityList().get(0);

        Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
        Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));

        request.setAttribute("issales", true);
        String withoutinventory = request.getParameter("withoutinventory");

        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put("endDate", endDate);
        requestParams.put("startDate", startDate);
        // Declarant Name
        if (!StringUtil.isNullOrEmpty(request.getParameter("nameDe"))) {
            nameDe = request.getParameter("nameDe");
            valueTextField.add(nameDe);
        } else {
            valueTextField.add("");
        }
        //Id
        if (!StringUtil.isNullOrEmpty(request.getParameter("id"))) {
            id = request.getParameter("id");
            valueTextField.add(id);
        } else {
            valueTextField.add("");
        }
        // Designation 
        if (!StringUtil.isNullOrEmpty(request.getParameter("desg"))) {
            desg = request.getParameter("desg");
            valueTextField.add(desg);
        } else {
            valueTextField.add("");
        }
        // person
        if (!StringUtil.isNullOrEmpty(request.getParameter("per"))) {
            per = request.getParameter("per");
            valueTextField.add(per);
        } else {
            valueTextField.add("");
        }
        // contact no
        if (!StringUtil.isNullOrEmpty(request.getParameter("contact"))) {
            contact = request.getParameter("contact");
            valueTextField.add(contact);
        } else {
            valueTextField.add("");
        }
        String sngcurrencyid = "", sngcurrencysymbol = "", sngcurrencyname = "", sngcurrencycode = "";
        if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
            requestParams.put("gstFlag", true);
            request.setAttribute("filterCurrency", Constants.SGDID);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), Constants.SGDID);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            sngcurrencyid = currency.getCurrencyID();
            sngcurrencysymbol = currency.getSymbol();
            sngcurrencyname = currency.getName();
            sngcurrencycode = currency.getCurrencyCode();
        }

        requestParams.put("withoutinventory", withoutinventory);
        requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));

        requestParams.put("issales", false);
        requestParams.put("isSalesTax", false);
        requestParams.put("locale", RequestContextUtils.getLocale(request));
        requestParams.put(Constants.onlydateformat, authHandler.getOnlyDateFormat(request));

        String searchJson = request.getParameter(Constants.Acc_Search_Json);
        String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
        if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
            requestParams.put(Constants.Acc_Search_Json, searchJson);
            requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
        }
        boolean isAdvanceSearch = requestParams.containsKey(Constants.isAdvanceSearch) ? (Boolean) requestParams.get(Constants.isAdvanceSearch) : false;
        
        JSONArray purchasejArr = getCalculatedTaxGST(requestParams, fileType);

        Set purchaseTaxSet = new HashSet();
        purchaseTaxSet.add("GST(IM)@7.00%");
        purchaseTaxSet.add("GST(ME)@0.00%");
        purchaseTaxSet.add("GST(TX7)@7.00%");
        purchaseTaxSet.add("GST(ZP)@0.00%");
        // Below tax codes are added as demanded in SDP-3295/ERP-25942
        purchaseTaxSet.add("GST(TX-E33)@7.00%");
        purchaseTaxSet.add("GST(TX-N33)@7.00%");
        purchaseTaxSet.add("GST(TX-RE)@7.00%");

        Set importedTaxSet = new HashSet();
        importedTaxSet.add("GST(ME)@0.00%");

        double totalTaxablePurchase = 0.00; // item #5
        double totalInputTaxClaimed = 0.00; // item #7

        double totalGoodsImported = 0.00; // item #9

        int innerContentLevel = 2;

        JSONArray jObj2ndLevelBox5JArr = new JSONArray();
        JSONArray jObj2ndLevelBox7JArr = new JSONArray();
        JSONArray jObj2ndLevelBox9JArr = new JSONArray();

        for (int jsonVal = 0; jsonVal < purchasejArr.length(); jsonVal++) {
            JSONObject purchaseObj = purchasejArr.getJSONObject(jsonVal);
            String taxCode = purchaseObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
            String journalEntryNo = purchaseObj.getString("journalEntryNo");
            String invno = purchaseObj.getString("invno");
            String name = purchaseObj.getString("invname");
            boolean addAmountFlag = purchaseObj.optBoolean("addAmountFlag", true);//Erp-2696 && Erp-2696
            double invamt = purchaseObj.getDouble("invamt");
            double invtaxamount = purchaseObj.getDouble("invtaxamount");
            String billid = purchaseObj.has(Constants.billid) ? purchaseObj.getString(Constants.billid) : "";
            String type = purchaseObj.has("type") ? purchaseObj.getString("type") : "";
            String jeid = purchaseObj.has("jeid") ? purchaseObj.getString("jeid") : "";
            String jedate = purchaseObj.has("jedate") ? purchaseObj.getString("jedate") : "";
            String noteid = purchaseObj.has("noteid") ? purchaseObj.getString("noteid") : "";
            double originalamountincludingtax = purchaseObj.has("originalamountincludingtax") ? purchaseObj.getDouble("originalamountincludingtax") : 0.0;
            double transactionexchangerate = purchaseObj.has("transactionexchangerate") ? purchaseObj.getDouble("transactionexchangerate") : 0.0;
            double originaltaxamount = purchaseObj.has("originaltaxamount") ? purchaseObj.getDouble("originaltaxamount") : 0.0;
            boolean isDebit=purchaseObj.has("isDebit") ? purchaseObj.getBoolean("isDebit") : true;
            String transactioncurrencysymbol = purchaseObj.has("transactioncurrencysymbol") ? purchaseObj.getString("transactioncurrencysymbol") : "";
            String transactioncurrencyid = purchaseObj.has("transactioncurrencyid") ? purchaseObj.getString("transactioncurrencyid") : "";
            if (purchaseTaxSet.contains(taxCode)) {
                if (!addAmountFlag) {
                    totalTaxablePurchase -= invamt - invtaxamount;
                        totalInputTaxClaimed -= invtaxamount;
                } else {
                    totalTaxablePurchase += invamt - invtaxamount;
                        totalInputTaxClaimed += invtaxamount;
                }
                double purchaseValue = invamt - invtaxamount;
                double taxClaimed = invtaxamount;

                // maintaining sub data
                JSONObject jObj2ndLevelBox5 = new JSONObject();
                jObj2ndLevelBox5.put("taxname", taxCode);
                jObj2ndLevelBox5.put("transactionid", invno);
                jObj2ndLevelBox5.put("journalentry", journalEntryNo);
                jObj2ndLevelBox5.put("name", name);
                jObj2ndLevelBox5.put("level", innerContentLevel);
                jObj2ndLevelBox5.put("taxamount", purchaseValue);
                jObj2ndLevelBox5.put("box", "");
                jObj2ndLevelBox5.put("mergedCategoryData", "Total value of taxable purchase");
                jObj2ndLevelBox5.put(Constants.currencyKey, sngcurrencyid);
                jObj2ndLevelBox5.put("currencysymbol", sngcurrencysymbol);
                jObj2ndLevelBox5.put("currencyname", sngcurrencyname);
                jObj2ndLevelBox5.put("currencycode", sngcurrencycode);
                jObj2ndLevelBox5.put(Constants.billid, billid);
                jObj2ndLevelBox5.put("type", type);
                jObj2ndLevelBox5.put("jeid", jeid);
                jObj2ndLevelBox5.put("jedate", jedate);
                jObj2ndLevelBox5.put("noteid", noteid);
                /*
                 * If debit is true
                 */
                if(isDebit){
                    jObj2ndLevelBox5.put("originalamount", originalamountincludingtax - originaltaxamount);
                }else{
                    jObj2ndLevelBox5.put("originalamount", originalamountincludingtax + originaltaxamount);
                }
                
                jObj2ndLevelBox5.put("transactionexchangerate", transactionexchangerate);
                jObj2ndLevelBox5.put("transactioncurrencysymbol", transactioncurrencysymbol);
                jObj2ndLevelBox5.put("transactioncurrencyid", transactioncurrencyid);
                jObj2ndLevelBox5JArr.put(jObj2ndLevelBox5);

                // maintain sub data for tax claimed
                    JSONObject jObj2ndLevelBox7 = new JSONObject();
                    jObj2ndLevelBox7.put("taxname", taxCode);
                    jObj2ndLevelBox7.put("transactionid", invno);
                    jObj2ndLevelBox7.put("journalentry", journalEntryNo);
                    jObj2ndLevelBox7.put("name", name);
                    jObj2ndLevelBox7.put("level", innerContentLevel);
                    if (!addAmountFlag) {
                        jObj2ndLevelBox7.put("taxamount", taxClaimed * (-1));
                    } else {
                        jObj2ndLevelBox7.put("taxamount", taxClaimed);
                    }
                    jObj2ndLevelBox7.put("box", "");
                    jObj2ndLevelBox7.put("mergedCategoryData", "Less : input tax and refunds claimed");
                    jObj2ndLevelBox7.put(Constants.currencyKey, sngcurrencyid);
                    jObj2ndLevelBox7.put("currencysymbol", sngcurrencysymbol);
                    jObj2ndLevelBox7.put("currencyname", sngcurrencyname);
                    jObj2ndLevelBox7.put("currencycode", sngcurrencycode);
                    jObj2ndLevelBox7.put(Constants.billid, billid);
                    jObj2ndLevelBox7.put("type", type);
                    jObj2ndLevelBox7.put("jeid", jeid);
                    jObj2ndLevelBox7.put("jedate", jedate);
                    jObj2ndLevelBox7.put("noteid", noteid);
                    /*
                     * If debit is true taxamount is possitive otherwise negative
                     */
                     if (isDebit) {
                        jObj2ndLevelBox7.put("originalamount", originaltaxamount);
                    } else {
                        jObj2ndLevelBox7.put("originalamount", -originaltaxamount);
                    }
                    jObj2ndLevelBox7.put("transactionexchangerate", transactionexchangerate);
                    jObj2ndLevelBox7.put("transactioncurrencysymbol", transactioncurrencysymbol);
                    jObj2ndLevelBox7.put("transactioncurrencyid", transactioncurrencyid);
                    jObj2ndLevelBox7JArr.put(jObj2ndLevelBox7);
//                }
            }
            if (importedTaxSet.contains(taxCode)) {
                if (addAmountFlag) {
                    totalGoodsImported += invamt;
                } else {
                    totalGoodsImported -= invamt;
                }
                // maintaining sub data
                JSONObject jObj2ndLevelBox9 = new JSONObject();
                jObj2ndLevelBox9.put("taxname", taxCode);
                jObj2ndLevelBox9.put("transactionid", invno);
                jObj2ndLevelBox9.put("journalentry", journalEntryNo);
                jObj2ndLevelBox9.put("name", name);
                jObj2ndLevelBox9.put("level", innerContentLevel);
                jObj2ndLevelBox9.put("taxamount", (addAmountFlag) ? invamt : -invamt);
                jObj2ndLevelBox9.put("box", "");
                jObj2ndLevelBox9.put("mergedCategoryData", "Total value of goods imported under this scheme");
                jObj2ndLevelBox9.put(Constants.currencyKey, sngcurrencyid);
                jObj2ndLevelBox9.put("currencysymbol", sngcurrencysymbol);
                jObj2ndLevelBox9.put("currencyname", sngcurrencyname);
                jObj2ndLevelBox9.put("currencycode", sngcurrencycode);
                jObj2ndLevelBox9.put(Constants.billid, billid);
                jObj2ndLevelBox9.put("type", type);
                jObj2ndLevelBox9.put("jeid", jeid);
                jObj2ndLevelBox9.put("jedate", jedate);
                jObj2ndLevelBox9.put("noteid", noteid);
                jObj2ndLevelBox9.put("originalamount", originalamountincludingtax - originaltaxamount);
                jObj2ndLevelBox9.put("transactionexchangerate", transactionexchangerate);
                jObj2ndLevelBox9.put("transactioncurrencysymbol", transactioncurrencysymbol);
                jObj2ndLevelBox9.put("transactioncurrencyid", transactioncurrencyid);
                jObj2ndLevelBox9JArr.put(jObj2ndLevelBox9);
            }
        }

        requestParams.put("issales", true);
        requestParams.put("isSalesTax", true);
        JSONArray salesjArr = getCalculatedTaxGST(requestParams, fileType);

        double totalSR7PercentSupplies = 0.00; // item #1
        String taxCodeSR7PercentSupplies = "GST(SR)@7.00%";

        double totalZR0PercentSupplies = 0.00; // item #2
        String taxCodeZR0PercentSupplies = "GST(ZR)@0.00%";

        double totalExempt0PercentSupplies = 0.00; // item #3
        String taxCodeExempt0PercentSupplies1 = "GST(ES33)@0.00%";
        String taxCodeExempt0PercentSupplies2 = "GST(ESN33)@0.00%";

        double totalDS7PercentSupplies = 0.00;
        String taxCodeDS7PercentSupplies = "GST(DS)@7.00%";

        Set salesTaxSet = new HashSet();
        salesTaxSet.add("GST(DS)@7.00%");
        salesTaxSet.add("GST(SR)@7.00%");
        double totalTaxDue = 0.00; // item #6

        JSONArray jObj2ndLevelBox1JArrSR = new JSONArray();
        JSONArray jObj2ndLevelBox1JArrDS = new JSONArray();
        JSONArray jObj2ndLevelBox1JArrZR = new JSONArray();
        JSONArray jObj2ndLevelBox1JArrES = new JSONArray();
        JSONArray jObj3rdLevelBox3JArrES = new JSONArray();
        JSONArray jObj2ndLevelBox6JArr = new JSONArray();

        for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
            JSONObject salesObj = salesjArr.getJSONObject(jsonVal);
            String taxCode = salesObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
            String name = salesObj.getString("invname"); // should refer to taxcode or mergedResourceData?
            String journalEntryNo = salesObj.getString("journalEntryNo"); // should refer to taxcode or mergedResourceData?
            String invno = salesObj.getString("invno"); // should refer to taxcode or mergedResourceData?
            double invamt = salesObj.getDouble("invamt");
            boolean addAmountFlag = salesObj.optBoolean("addAmountFlag", true);//Erp-2696 
            double invtaxamount = salesObj.getDouble("invtaxamount");
            String billid = salesObj.has(Constants.billid) ? salesObj.getString(Constants.billid) : "";
            String type = salesObj.has("type") ? salesObj.getString("type") : "";
            String jeid = salesObj.has("jeid") ? salesObj.getString("jeid") : "";
            String jedate = salesObj.has("jedate") ? salesObj.getString("jedate") : "";
            String noteid = salesObj.has("noteid") ? salesObj.getString("noteid") : "";
            double originalamountincludingtax = salesObj.has("originalamountincludingtax") ? salesObj.getDouble("originalamountincludingtax") : 0.0;
            double transactionexchangerate = salesObj.has("transactionexchangerate") ? salesObj.getDouble("transactionexchangerate") : 0.0;
            double originaltaxamount = salesObj.has("originaltaxamount") ? salesObj.getDouble("originaltaxamount") : 0.0;
            String transactioncurrencysymbol = salesObj.has("transactioncurrencysymbol") ? salesObj.getString("transactioncurrencysymbol") : "";
            String transactioncurrencyid = salesObj.has("transactioncurrencyid") ? salesObj.getString("transactioncurrencyid") : "";
            boolean isLeaseFixedAsset = salesObj.optBoolean("isLeaseFixedAsset",false);

            JSONObject jObj2ndLevelBox1 = new JSONObject();
            jObj2ndLevelBox1.put("taxname", taxCode);
            jObj2ndLevelBox1.put("transactionid", invno);
            jObj2ndLevelBox1.put("journalentry", journalEntryNo);
            jObj2ndLevelBox1.put("name", name);
            jObj2ndLevelBox1.put("box", "");
            jObj2ndLevelBox1.put("level", innerContentLevel);
            jObj2ndLevelBox1.put(Constants.billid, billid);
            jObj2ndLevelBox1.put("type", type);
            jObj2ndLevelBox1.put("jeid", jeid);
            jObj2ndLevelBox1.put("jedate", jedate);
            jObj2ndLevelBox1.put("noteid", noteid);
            jObj2ndLevelBox1.put("isLeaseFixedAsset", isLeaseFixedAsset);
            if (taxCodeSR7PercentSupplies.equalsIgnoreCase(taxCode)) {
                if (addAmountFlag) {
                    totalSR7PercentSupplies += (invamt - invtaxamount);
                } else {
                    totalSR7PercentSupplies -= (invamt - invtaxamount);
                }
                // maintaining sub data
                double supplyAmount = addAmountFlag ? (invamt - invtaxamount) : -(invamt - invtaxamount);
                jObj2ndLevelBox1.put("taxamount", supplyAmount);
                jObj2ndLevelBox1.put("mergedCategoryData", "Total value of standard rated supplies");
                jObj2ndLevelBox1.put(Constants.currencyKey, sngcurrencyid);
                jObj2ndLevelBox1.put("currencysymbol", sngcurrencysymbol);
                jObj2ndLevelBox1.put("currencyname", sngcurrencyname);
                jObj2ndLevelBox1.put("currencycode", sngcurrencycode);
                jObj2ndLevelBox1.put("originalamount", addAmountFlag ? (originalamountincludingtax - originaltaxamount) : -(originalamountincludingtax - originaltaxamount));
                jObj2ndLevelBox1.put("transactionexchangerate", transactionexchangerate);
                jObj2ndLevelBox1.put("transactioncurrencysymbol", transactioncurrencysymbol);
                jObj2ndLevelBox1.put("transactioncurrencyid", transactioncurrencyid);
                jObj2ndLevelBox1JArrSR.put(jObj2ndLevelBox1);
            }
            if (taxCodeDS7PercentSupplies.equalsIgnoreCase(taxCode)) {
                if (addAmountFlag) {
                    totalDS7PercentSupplies += (invamt - invtaxamount);
                } else {
                    totalDS7PercentSupplies -= (invamt - invtaxamount);
                }
                // maintaining sub data
                double supplyAmount = addAmountFlag ? (invamt - invtaxamount) : -(invamt - invtaxamount);
                jObj2ndLevelBox1.put("taxamount", supplyAmount);
                jObj2ndLevelBox1.put("mergedCategoryData", "Total value of standard rated supplies");
                jObj2ndLevelBox1.put(Constants.currencyKey, sngcurrencyid);
                jObj2ndLevelBox1.put("currencysymbol", sngcurrencysymbol);
                jObj2ndLevelBox1.put("currencyname", sngcurrencyname);
                jObj2ndLevelBox1.put("currencycode", sngcurrencycode);
                jObj2ndLevelBox1.put("originalamount", addAmountFlag ? (originalamountincludingtax - originaltaxamount) : -(originalamountincludingtax - originaltaxamount));
                jObj2ndLevelBox1.put("transactionexchangerate", transactionexchangerate);
                jObj2ndLevelBox1.put("transactioncurrencysymbol", transactioncurrencysymbol);
                jObj2ndLevelBox1.put("transactioncurrencyid", transactioncurrencyid);
                jObj2ndLevelBox1JArrDS.put(jObj2ndLevelBox1);
            }

            if (taxCodeZR0PercentSupplies.equalsIgnoreCase(taxCode)) {
                if (addAmountFlag) {
                    totalZR0PercentSupplies += (invamt - invtaxamount);
                } else {
                    totalZR0PercentSupplies -= (invamt - invtaxamount);
                }
                // maintaining sub data
                jObj2ndLevelBox1.put("taxamount", addAmountFlag ? (invamt - invtaxamount) : -(invamt - invtaxamount));
                jObj2ndLevelBox1.put("mergedCategoryData", "Total value of zero rated supplies");
                jObj2ndLevelBox1.put(Constants.currencyKey, sngcurrencyid);
                jObj2ndLevelBox1.put("currencysymbol", sngcurrencysymbol);
                jObj2ndLevelBox1.put("currencyname", sngcurrencyname);
                jObj2ndLevelBox1.put("currencycode", sngcurrencycode);
                jObj2ndLevelBox1.put("originalamount", addAmountFlag ? (originalamountincludingtax - originaltaxamount) : -(originalamountincludingtax - originaltaxamount));
                jObj2ndLevelBox1.put("transactionexchangerate", transactionexchangerate);
                jObj2ndLevelBox1.put("transactioncurrencysymbol", transactioncurrencysymbol);
                jObj2ndLevelBox1.put("transactioncurrencyid", transactioncurrencyid);
                jObj2ndLevelBox1JArrZR.put(jObj2ndLevelBox1);

            }
            if (taxCodeExempt0PercentSupplies1.equalsIgnoreCase(taxCode) || taxCodeExempt0PercentSupplies2.equalsIgnoreCase(taxCode)) {
                if (addAmountFlag) {
                    totalExempt0PercentSupplies += (invamt - invtaxamount);
                } else {
                    totalExempt0PercentSupplies -= (invamt - invtaxamount);
                }
                // maintaining sub data
                jObj2ndLevelBox1.put("taxamount", addAmountFlag ? (invamt - invtaxamount) : -(invamt - invtaxamount));
                jObj2ndLevelBox1.put("mergedCategoryData", "Total value of exempt supplies");
                jObj2ndLevelBox1.put(Constants.currencyKey, sngcurrencyid);
                jObj2ndLevelBox1.put("currencysymbol", sngcurrencysymbol);
                jObj2ndLevelBox1.put("currencyname", sngcurrencyname);
                jObj2ndLevelBox1.put("currencycode", sngcurrencycode);
                jObj2ndLevelBox1.put("originalamount", addAmountFlag ? (originalamountincludingtax - originaltaxamount) : -(originalamountincludingtax - originaltaxamount));
                jObj2ndLevelBox1.put("transactionexchangerate", transactionexchangerate);
                jObj2ndLevelBox1.put("transactioncurrencysymbol", transactioncurrencysymbol);
                jObj2ndLevelBox1.put("transactioncurrencyid", transactioncurrencyid);
                jObj2ndLevelBox1JArrES.put(jObj2ndLevelBox1);
            }
            if (salesTaxSet.contains(taxCode)) {
                if (!addAmountFlag) {
                    totalTaxDue -= invtaxamount;
                } else {
                    totalTaxDue += invtaxamount;
                }
                // maintaining sub data
                JSONObject jObj2ndLevelBox6 = new JSONObject();
                jObj2ndLevelBox6.put("taxname", taxCode);
                jObj2ndLevelBox6.put("transactionid", invno);
                jObj2ndLevelBox6.put("journalentry", journalEntryNo);
                jObj2ndLevelBox6.put("name", name);
                jObj2ndLevelBox6.put("level", innerContentLevel);
                if (!addAmountFlag) {
                    jObj2ndLevelBox6.put("taxamount", (-1) * invtaxamount);
                } else {
                    jObj2ndLevelBox6.put("taxamount", invtaxamount);
                }
                jObj2ndLevelBox6.put("box", "");
                jObj2ndLevelBox6.put("mergedCategoryData", "Output tax due");
                jObj2ndLevelBox6.put(Constants.currencyKey, sngcurrencyid);
                jObj2ndLevelBox6.put("currencysymbol", sngcurrencysymbol);
                jObj2ndLevelBox6.put("currencyname", sngcurrencyname);
                jObj2ndLevelBox6.put("currencycode", sngcurrencycode);
                jObj2ndLevelBox6.put(Constants.billid, billid);
                jObj2ndLevelBox6.put("type", type);
                jObj2ndLevelBox6.put("jeid", jeid);
                jObj2ndLevelBox6.put("jedate", jedate);
                jObj2ndLevelBox6.put("noteid", noteid);
                jObj2ndLevelBox6.put("originalamount", addAmountFlag ? originaltaxamount : (-1) * originaltaxamount);
                jObj2ndLevelBox6.put("transactionexchangerate", transactionexchangerate);
                jObj2ndLevelBox6.put("transactioncurrencysymbol", transactioncurrencysymbol);
                jObj2ndLevelBox6.put("transactioncurrencyid", transactioncurrencyid);
                jObj2ndLevelBox6.put("isLeaseFixedAsset", isLeaseFixedAsset);
                jObj2ndLevelBox6JArr.put(jObj2ndLevelBox6);
            }
        }
        double forexAmt = 0; //calculating foreign exchange gain/loss account amount
        if (forexAccount != null) {
            if (!forexAccount.isDeleted()) {
                HashMap<String, Object> forexRequestParams = AccountingManager.getGlobalParams(request);
                forexRequestParams.put(Constants.REQ_startdate, request.getParameter("stdate"));
                forexRequestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
                forexRequestParams.put("forexAccount", forexAccount);
                
                if (isAdvanceSearch) {
                    forexRequestParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                    forexRequestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    forexRequestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.journalEntrySearchJson));
                }
                
                Map<String,Object> map= accReportsService.getForexEnrtyDetailData(forexRequestParams);
                forexAmt =map.containsKey("forexAmount")? (Double)map.get("forexAmount"):0;
                jObj3rdLevelBox3JArrES = map.containsKey("dataArray")?(JSONArray)map.get("dataArray"):new JSONArray();
                
                forexAmt = (Double) Math.abs(forexAmt);

                JSONObject jObj2ndLevelBox3 = new JSONObject();
                jObj2ndLevelBox3.put("taxname", forexAccount.getName() + " (Absolute value)");
                jObj2ndLevelBox3.put("transactionid", "");
                jObj2ndLevelBox3.put("journalentry", "");
                jObj2ndLevelBox3.put("name", "");
                jObj2ndLevelBox3.put("level", innerContentLevel);
                jObj2ndLevelBox3.put("taxamount", forexAmt);
                jObj2ndLevelBox3.put("box", "");
                jObj2ndLevelBox3.put("mergedCategoryData", "Total value of exempt supplies");
                jObj2ndLevelBox3.put(Constants.currencyKey, sngcurrencyid);
                jObj2ndLevelBox3.put("currencysymbol", sngcurrencysymbol);
                jObj2ndLevelBox3.put("currencyname", sngcurrencyname);
                jObj2ndLevelBox3.put("currencycode", sngcurrencycode);

                jObj2ndLevelBox1JArrES.put(jObj2ndLevelBox3);
            }
        }

        totalExempt0PercentSupplies += forexAmt; //item#3

        double totalPartOne = totalSR7PercentSupplies + totalZR0PercentSupplies + totalExempt0PercentSupplies + totalDS7PercentSupplies; // item #4

        double netGSTPaidToIRAS = totalTaxDue - totalInputTaxClaimed; // item #8

        JSONArray jArr = new JSONArray();
        JSONObject jObj = new JSONObject();

        int headerLevel = 0;
        int contentLevel = 1;

        jObj.put("taxname", "Supplies");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("taxamount", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jObj.put("box", "");
        jArr.put(jObj);
        //Level 1 for -- Total value of standard rated supplies
        jObj = new JSONObject();
        jObj.put("taxname", "Total value of standard rated supplies");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalSR7PercentSupplies + totalDS7PercentSupplies, companyid), companyid));
            jObj.put("box", "[1]");
        } else {
            jObj.put("taxamount", totalSR7PercentSupplies + totalDS7PercentSupplies);
            jObj.put("box", "[1]");
        }
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);

        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelBox1JArrSR.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBox1JArrSR.getJSONObject(jsonVal));
        }

        for (int jsonVal = 0; jsonVal < jObj2ndLevelBox1JArrDS.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBox1JArrDS.getJSONObject(jsonVal));
        }
        //Level 2                   
        jObj = new JSONObject();
        jObj.put("taxname", "Total value of zero rated supplies");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalZR0PercentSupplies, companyid), companyid));
            jObj.put("box", "[2]");
        } else {
            jObj.put("taxamount", totalZR0PercentSupplies);
            jObj.put("box", "[2]");
        }
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);

        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelBox1JArrZR.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBox1JArrZR.getJSONObject(jsonVal));
        }
        // LEVEL 3	        
        jObj = new JSONObject();
        jObj.put("taxname", "Total value of exempt supplies");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalExempt0PercentSupplies, companyid), companyid));
            jObj.put("box", "[3]");
        } else {
            jObj.put("taxamount", totalExempt0PercentSupplies);
            jObj.put("box", "[3]");
        }
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelBox1JArrES.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBox1JArrES.getJSONObject(jsonVal));
        }
        
        for (int jsonVal = 0; jsonVal < jObj3rdLevelBox3JArrES.length(); jsonVal++) {
            jArr.put(jObj3rdLevelBox3JArrES.getJSONObject(jsonVal));
        }
        
        // Level 4 		        
        jObj = new JSONObject();
        jObj.put("taxname", "Total value of (1)+(2)+(3)");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalPartOne, companyid), companyid));
            jObj.put("box", "[4]");
        } else {
            jObj.put("taxamount", totalPartOne);
            jObj.put("box", "[4]");
        }
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Supplies");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Purchases");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("taxamount", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Purchases");
        jObj.put("box", "");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jArr.put(jObj);

        //Level 5
        jObj = new JSONObject();
        jObj.put("taxname", "Total value of taxable purchase");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalTaxablePurchase, companyid), companyid));
            jObj.put("box", "[5]");
        } else {
            jObj.put("taxamount", totalTaxablePurchase);
            jObj.put("box", "[5]");
        }
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Purchases");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelBox5JArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBox5JArr.getJSONObject(jsonVal));
        }

        jObj = new JSONObject();
        jObj.put("taxname", "Taxes");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("taxamount", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Taxes");
        jObj.put("box", "");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jArr.put(jObj);

        // Level 6
        jObj = new JSONObject();
        jObj.put("taxname", "Output tax due");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalTaxDue, companyid), companyid));
            jObj.put("box", "[6]");
        } else {
            jObj.put("taxamount", totalTaxDue);
            jObj.put("box", "[6]");
        }
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Taxes");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelBox6JArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBox6JArr.getJSONObject(jsonVal));
        }
        // Level 7
        jObj = new JSONObject();
        jObj.put("taxname", "Less : input tax and refunds claimed");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalInputTaxClaimed, companyid), companyid));
            jObj.put("box", "[7]");
        } else {
            jObj.put("taxamount", totalInputTaxClaimed);
            jObj.put("box", "[7]");
        }
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Taxes");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelBox7JArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBox7JArr.getJSONObject(jsonVal));
        }
        // Level 8       
        jObj = new JSONObject();
        jObj.put("taxname", "Equal : Net GST to be paid to IRAS");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(netGSTPaidToIRAS, companyid), companyid));
            jObj.put("box", "[8]");
        } else {
            jObj.put("taxamount", netGSTPaidToIRAS);
            jObj.put("box", "[8]");
        }
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Taxes");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Applicable to Taxable Persons under Major Exporter Scheme / Approved 3rd Party Logistics Company / Other Approved Schemes Only");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("taxamount", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Applicable to Taxable Persons under Major Exporter Scheme / Approved 3rd Party Logistics Company / Other Approved Schemes Only");
        jObj.put("box", "");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jArr.put(jObj);

        // Level 9  
        jObj = new JSONObject();
        jObj.put("taxname", "Total value of goods imported under this scheme");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalGoodsImported, companyid), companyid));
            jObj.put("box", "[9]");
        } else {
            jObj.put("taxamount", totalGoodsImported);
            jObj.put("box", "[9]");
        }
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Applicable to Taxable Persons under Major Exporter Scheme / Approved 3rd Party Logistics Company / Other Approved Schemes Only");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jArr.put(jObj);

        for (int jsonVal = 0; jsonVal < jObj2ndLevelBox9JArr.length(); jsonVal++) {
            jArr.put(jObj2ndLevelBox9JArr.getJSONObject(jsonVal));
        }

        jObj = new JSONObject();
        jObj.put("taxname", "Did you make the following claims in Box 7?");
        jObj.put("taxamount", "");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Did you make the following claims in Box 7?");
        jObj.put("box", "");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jArr.put(jObj);

        String[] didYouMake = {"Did you claim for GST you had refunded to tourists?", "Yes No",
            "Did you make any bad debt relief claims?", "Yes No",
            "Did you make any pre-registration claims?", "Yes No"};
        int boxNum = 10;
        for (int i = 0; i < didYouMake.length; i++) {
            jObj = new JSONObject();
            jObj.put("taxname", didYouMake[i]);
            jObj.put("transactionid", "");
            jObj.put("journalentry", "");
            jObj.put("name", "");
            jObj.put("taxamount", "");
            jObj.put("level", headerLevel);
            if (didYouMake[i].equalsIgnoreCase("Yes No")) {
                jObj.put("fmt", "radio");
            } else {
                if (isForExport) {
                    jObj.put("box", "[" + boxNum + "]");
                } else {
                    jObj.put("box", "[" + boxNum + "]");
                }

                boxNum++;
            }
            jObj.put("mergedCategoryData", "Did you make the following claims in Box 7?");
            jObj.put(Constants.currencyKey, sngcurrencyid);
            jObj.put("currencysymbol", sngcurrencysymbol);
            jObj.put("currencyname", sngcurrencyname);
            jObj.put("currencycode", sngcurrencycode);
            jArr.put(jObj);
        }

        jObj = new JSONObject();
        jObj.put("taxname", "Revenue");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("taxamount", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Revenue");
        jObj.put("box", "");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jArr.put(jObj);

        request.setAttribute("revenueonly", true);
        request.setAttribute("gstForm5Flag", true);
        double totalRevenue = 0.00;
        JSONArray jArrR = new JSONArray();
        KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
        ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);
        if (!extraCompanyPreferences.isGstIncomeGroup()) {
            JSONObject tradingAndPLObject = getTradingAndProfitLossforExport(request);
            JSONObject tradingAndPLData = tradingAndPLObject.getJSONObject(Constants.RES_data);
            JSONArray leftArr = tradingAndPLData.getJSONArray("left");
            JSONArray rightArr = tradingAndPLData.getJSONArray("right");
            
            for (int i = 0; i < leftArr.length(); i++) {
                JSONObject obj = leftArr.getJSONObject(i);

                if (obj.has("accountname")) {
                    String accountName = obj.getString("accountname");
                    if (accountName.equalsIgnoreCase("Total for Income")) {
                        double amount = obj.optDouble("amount",0.0);
                        totalRevenue += amount;
                    }
                }
            }

            for (int i = 0; i < rightArr.length(); i++) {
                JSONObject obj = rightArr.getJSONObject(i);
                if (obj.has("accountname")) {
                    String accountName = obj.getString("accountname");
                    if (accountName.equalsIgnoreCase("Total for Income")) {
                        double amount = obj.optDouble("amount",0.0);
                        totalRevenue += amount;
                    }
                }
            }
        }else{
             /* ERP-26135 (SDP-3417)
             * If Total Revenue based on account Nature flag is true from companypreferance then total revenue amount is addition of used 
             * account map with nature as income type .
             */
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            double tradingAmount[] = accReportsService.getTrading(paramJobj, Group.NATURE_INCOME, jArrR, false,null);
            double tradingAmount1[] = accReportsService.getProfitLoss(paramJobj, Group.NATURE_INCOME, jArrR, false,null);
            totalRevenue = tradingAmount[0];
            totalRevenue += tradingAmount1[0];
            totalRevenue = totalRevenue * (-1);
        }
        // Level 13	        
        jObj = new JSONObject();
        jObj.put("taxname", "Revenue for the accounting period");
        if (isForExport) {
            jObj.put("taxamount", authHandler.formattedAmount(authHandler.round(totalRevenue, companyid), companyid));
        } else {
            jObj.put("taxamount", totalRevenue);
        }
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("level", contentLevel);
        jObj.put("mergedCategoryData", "Revenue");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        if (isForExport) {
            jObj.put("box", "[13]");
        } else {
            jObj.put("box", "[13]");
        }
        jArr.put(jObj);

        jObj = new JSONObject();
        jObj.put("taxname", "Declaration");
        jObj.put("transactionid", "");
        jObj.put("journalentry", "");
        jObj.put("name", "");
        jObj.put("taxamount", "");
        jObj.put("fmt", "B");
        jObj.put("level", headerLevel);
        jObj.put("mergedCategoryData", "Declaration");
        jObj.put("box", "");
        jObj.put(Constants.currencyKey, sngcurrencyid);
        jObj.put("currencysymbol", sngcurrencysymbol);
        jObj.put("currencyname", sngcurrencyname);
        jObj.put("currencycode", sngcurrencycode);
        jArr.put(jObj);

        String[] declarationsForExport = {"I declare that the information given above is true and complete."};

        String[] declarationsForExportFilledIn = {"Name of Declarant :", "Declarant Id :          ", "Designation :          ", "Contact Person :    ","Contact Tel. No :     "};

        String[] declarations = {"I declare that the information given above is true and complete."};
        String[] declarationsFilledIn = {"Name of Declarant:<span style='margin-left:0px;padding-left:40px;'></span>",
            "Declarant Id:<span style='margin-left:0px;padding-left:81px;'></span>",
            "Designation:<span style='margin-left:0px;padding-left:83px;'></span>",
            "Contact Person:<span style='margin-left:0px;padding-left:62px;'></span>",
            "Contact Tel. No:<span style='margin-left:0px;padding-left:62px;'></span>"};

        if (isForExport) {
            for (int i = 0; i < declarationsForExport.length; i++) {
                jObj = new JSONObject();
                jObj.put("taxname", declarationsForExport[i]);
                jObj.put("transactionid", "");
                jObj.put("journalentry", "");
                jObj.put("name", "");
                jObj.put("taxamount", "");
                jObj.put("level", headerLevel);
                jObj.put("mergedCategoryData", "Declaration");
                jObj.put("box", "");
                jObj.put(Constants.currencyKey, sngcurrencyid);
                jObj.put("currencysymbol", sngcurrencysymbol);
                jObj.put("currencyname", sngcurrencyname);
                jObj.put("currencycode", sngcurrencycode);
                jArr.put(jObj);
            }
            for (int i = 0; i < declarationsForExportFilledIn.length; i++) {
                jObj = new JSONObject();
                jObj.put("taxname", declarationsForExportFilledIn[i]+ valueTextField.get(i));
                jObj.put("transactionid", "");
                jObj.put("journalentry", "");
                jObj.put("name", "");
                jObj.put("taxamount", "");
                jObj.put("level", headerLevel);
                jObj.put("mergedCategoryData", "Declaration");
                jObj.put("box", "");
                jObj.put(Constants.currencyKey, sngcurrencyid);
                jObj.put("currencysymbol", sngcurrencysymbol);
                jObj.put("currencyname", sngcurrencyname);
                jObj.put("currencycode", sngcurrencycode);
                jArr.put(jObj);
            }
        } else {
            for (int i = 0; i < declarations.length; i++) {
                jObj = new JSONObject();
                jObj.put("taxname", declarations[i]);
                jObj.put("transactionid", "");
                jObj.put("journalentry", "");
                jObj.put("name", "");
                jObj.put("taxamount", "");
                jObj.put("level", headerLevel);
                jObj.put("mergedCategoryData", "Declaration");
                jObj.put("box", "");
                jObj.put(Constants.currencyKey, sngcurrencyid);
                jObj.put("currencysymbol", sngcurrencysymbol);
                jObj.put("currencyname", sngcurrencyname);
                jObj.put("currencycode", sngcurrencycode);
                jArr.put(jObj);
            }
            for (int i = 0; i < declarationsFilledIn.length; i++) {
                jObj = new JSONObject();
                jObj.put("taxname", declarationsFilledIn[i]+valueTextField.get(i));
                jObj.put("transactionid", "");
                jObj.put("journalentry", "");
                jObj.put("name", "");
                jObj.put("taxamount", "");
                jObj.put("level", headerLevel);
                jObj.put("mergedCategoryData", "Declaration");
                jObj.put("fmt", "textbox");
                jObj.put("box", "");
                jObj.put("id",  i);
                jObj.put(Constants.currencyKey, sngcurrencyid);
                jObj.put("currencysymbol", sngcurrencysymbol);
                jObj.put("currencyname", sngcurrencyname);
                jObj.put("currencycode", sngcurrencycode);
                jArr.put(jObj);
            }
        }
        return jArr;
    }

    public ModelAndView getGSTForm5(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            JSONArray jArr = getGSTForm5JSONArray(request, false);
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cpresult.getEntityList().get(0);
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), Constants.SGDID);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                for (int jsonVal = 0; jsonVal < jArr.length(); jsonVal++) {
                    JSONObject jSONObject = (JSONObject) jArr.get(jsonVal);
                    jSONObject.put(Constants.currencyKey, currency.getCurrencyID());
                    jSONObject.put("currencysymbol", currency.getSymbol());
                    jSONObject.put("currencyname", currency.getName());
                    jSONObject.put("currencycode", currency.getCurrencyCode());

                }
            }
            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    public ModelAndView gstForm5eSubmission(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            DefaultTransactionDefinition def = new DefaultTransactionDefinition();
            def.setName("eForm5SubmissionSave_Tx");
            def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            JSONObject requestParam = StringUtil.convertRequestToJsonObject(request);
            requestParam.put(Constants.companyid, sessionHandlerImpl.getCompanyid(request));
            JSONArray jArr = getGSTForm5JSONArray(request, false);

            JSONObject jsonString = accReportsService.getGSTForm5JSONString(jArr, requestParam);
            if (jsonString.getBoolean("alreadySubmitted")) {
                jobj.put(Constants.RES_success, true);
                jobj.put(Constants.RES_msg, "Data is already submitted for selected dates.");
                jobj.put("responseStatus", 3);//Warning 
                return new ModelAndView("jsonView", "model", jobj.toString());
            }
            String eSubmissionDetails = jsonString.getString("jsonString");
            // Save Request Data Before request to API
            TransactionStatus status = txnManager.getTransaction(def);
            jobj = accReportsService.saveeSubmissionGSTForm5(eSubmissionDetails, requestParam);
            txnManager.commit(status);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
  
    public ModelAndView irascallback (HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        try {
            String scope = request.getParameter("scope");
            String state = request.getParameter("state");
            String code = request.getParameter("code");
            String callBackUrl = accReportsService.getIRASCallbackUrl(state, scope, code);
            if (!StringUtil.isNullOrEmpty(callBackUrl)) {
                /**
                 * After authentication redirecting User to Form5 or Transaction Listing Jsp page.
                 */
                response.sendRedirect(callBackUrl);
            } else {
                msg = "Requested page not found";
                jobj.put(Constants.RES_success, false);
                jobj.put(Constants.RES_msg, msg);
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    /**
     * Method is used update GST Form 5 Submission Status 
     * status 1 for GST Form 5 e-Submission JSP Page.
     * flag 2 for Transaction Listing e-Submission JSP Page.
     * @param request
     * @param response
     * @return ModelAndView - jsonView
     */
    public ModelAndView gstForm5eSubmissionUpdateStatus(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jsonResponse = new JSONObject();
        try{
            jsonResponse.put("success", false);
            JSONObject requestParam = new JSONObject();
            if (!StringUtil.isNullOrEmpty(request.getParameter("id")) && !StringUtil.isNullOrEmpty(request.getParameter("status"))) {
                requestParam.put("id", request.getParameter("id"));
                requestParam.put("status", Integer.parseInt(request.getParameter("status")));
                accReportsService.gstForm5eSubmissionUpdateStatus(requestParam);
                jsonResponse.put("success", true);
            }
        }catch(Exception ex){
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jsonResponse.toString());
    }
    /**
     * Method is used to get URL for 
     * 1-> irasgstform5esubmissioncallback.jsp ,
     * 2-> irastransactionlistingcallback.jsp 
     * page by using flag.
     * flag 1 for GST Form 5 e-Submission JSP Page.
     * flag 2 for Transaction Listing e-Submission JSP Page.
     * @param request
     * @param response
     * @return 
     */
    public ModelAndView getIRASRedirectingUrl(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jsonResponse = new JSONObject();
        boolean isSuccess = false;
        try {
            jsonResponse.put(Constants.RES_success, isSuccess);
            String chunkids = request.getParameter("chunkids");
            String companyid = request.getParameter(Constants.companyid);
            String callbackURL = request.getParameter("callbackURL");
            String description = request.getParameter("description");
            int flag = Integer.parseInt(request.getParameter("flag"));
            JSONObject proxyResult = accReportsService.proxyServerEntryAPICall(chunkids, companyid, callbackURL, description, flag);
            
                String returnCode = proxyResult.optString("returnCode", "");
                if (StringUtil.equal(returnCode, Constants.GSTForm5ReturnCode_Success)) {
                    String redirectUrl = proxyResult.optString("redirectUrl", "");
                    jsonResponse.put(Constants.data, redirectUrl);
                    jsonResponse.put("isRedirectUrl", true);
                    jsonResponse.put(Constants.RES_success, true);

                } else {
                    if (flag == 1) {
                        String apiResponse = proxyResult.optString("apiResponse");
                        jsonResponse.put(Constants.RES_success, true);
                        jsonResponse.put("responseStatus", Constants.GSTForm5SubmissionFlag_Failure);
                        JSONObject responseData = new JSONObject(apiResponse);
                        if (responseData != null && responseData.has("info")) {
                            JSONObject info = new JSONObject(apiResponse).getJSONObject("info");
                            JSONObject requestParam = new JSONObject();
                            requestParam.put("id", chunkids);
                            requestParam.put("status", Constants.GSTForm5SubmissionFlag_Failure);
                            requestParam.put("messageCode", info.getString("messageCode"));
                            accReportsService.gstForm5eSubmissionUpdateStatus(requestParam);
                            jsonResponse.put(Constants.RES_msg, messageSource.getMessage(info.getString("messageCode"), null, Locale.forLanguageTag(Constants.RES_DEF_LANGUAGE)));
                        }
                    }
                }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jsonResponse.toString());
    }
    
    /**
     * Controller method used to providing Filing information to 
     * irastransactionlistingcallback.jsp page.
     * @param request
     * @param response
     * @return 
     */
    public ModelAndView getTransactionListingDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean isSuccess = false;
        String msg = "";
        try {
            jobj.put(Constants.RES_success, false);
            String transListid = request.getParameter("ids");
            StringTokenizer tokenizer = new StringTokenizer(transListid, ",");
            String id = tokenizer.nextToken();
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(GSTTransactionListingSubmissionDetails.class.getName(), id);
            if (cpresult != null && cpresult.getEntityList() != null && !cpresult.getEntityList().isEmpty() && cpresult.getEntityList().get(0) != null) {
                GSTTransactionListingSubmissionDetails gsttls = (GSTTransactionListingSubmissionDetails) cpresult.getEntityList().get(0);
                if (!StringUtil.isNullObject(gsttls)) {
                    String requestpayload = gsttls.getRequestPayload();
                    JSONObject filingInfo = new JSONObject(requestpayload);
                    String companyName = gsttls.getCompany().getCompanyName();
                    String companyid = gsttls.getCompany().getCompanyID();
                    filingInfo.put("companyName", companyName);
                    jobj.put("data", filingInfo);
                    jobj.put("companyid", companyid);
                    jobj.put("cdomain", gsttls.getCompany().getSubDomain());
                }
            }
            jobj.put(Constants.RES_msg, msg);
            jobj.put(Constants.RES_success, true);
        } catch (Exception ex) {
            msg = "Internal server error";
            try {
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException e) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, e);
            }
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView saveForm5SubmissinonDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean isSuccess = false;
        try {
            String state = request.getParameter("state");
            String ids = request.getParameter("ids");
            String code = request.getParameter("code");
            String companyid=request.getParameter(Constants.companyKey);
            JSONObject requestParam = StringUtil.convertRequestToJsonObject(request);
            requestParam.put(IntegrationConstants.integrationPartyIdKey, IntegrationConstants.integrationPartyId_IRAS);
            requestParam.put("integrationOperationId", IntegrationConstants.iras_GSTForm5Submission_Operation);
            requestParam.put("state", state);
            requestParam.put("code", code);
            requestParam.put(Constants.companyKey,companyid);
            
            //Update Status to pending before submitting data - Start
            DefaultTransactionDefinition def = new DefaultTransactionDefinition();
            def.setName("eSubmission_Tx");
            def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus status = txnManager.getTransaction(def);
            JSONObject jobjUpdateStatus = new JSONObject();
            jobjUpdateStatus.put("id", ids);
            jobjUpdateStatus.put("status", Constants.GSTForm5SubmissionFlag_Pending);
            accReportsService.gstForm5eSubmissionUpdateStatus(jobjUpdateStatus);
            txnManager.commit(status);
            //Update Status to pending before submitting data - End
            
            
            String gstform5id = ids;
            String esubmissionjson="";
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(GstForm5eSubmissionDetails.class.getName(), gstform5id);
            if (cpresult != null && cpresult.getEntityList() != null && !cpresult.getEntityList().isEmpty() && cpresult.getEntityList().get(0) != null) {
            GstForm5eSubmissionDetails gf5s = (GstForm5eSubmissionDetails) cpresult.getEntityList().get(0);
            esubmissionjson = gf5s.geteSubmissionJSON();
            requestParam.put("payload", new JSONObject(esubmissionjson));
            }
            JSONObject jsonResponse = integrationCommonService.processIntegrationRequest(requestParam);
            String apiResponse = jsonResponse.getString("data");

            
            status = txnManager.getTransaction(def);
            JSONObject responseData = accReportsService.saveResponseeSubmissionGSTForm5(apiResponse, gstform5id);
            txnManager.commit(status);
            isSuccess=true;
        } catch (Exception ex) {
            isSuccess=false;
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, isSuccess);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    /**
     * Method is used to provide Form 5 Filing information to 
     * irasgstform5submissioncallback.jsp page.
     * @param request
     * @param response
     * @return 
     */
    public ModelAndView getForm5SubmissinonDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject responseJson = new JSONObject();
        boolean isSuccess = false;
        String msg = "";
        try {
            String gstForm5id = request.getParameter("ids");
            
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(GstForm5eSubmissionDetails.class.getName(), gstForm5id);
            if (cpresult != null && cpresult.getEntityList() != null && !cpresult.getEntityList().isEmpty()) {
                GstForm5eSubmissionDetails gf5s = (GstForm5eSubmissionDetails) cpresult.getEntityList().get(0);
                if (!StringUtil.isNullObject(gf5s)) {
                    String esubmissionjson = gf5s.geteSubmissionJSON();
                    Company company = gf5s.getCompany();
                    String companyName = company.getCompanyName();
                    JSONObject jObj = new JSONObject(esubmissionjson);
                    jObj.put("companyName", companyName);
                    jObj.put("cdomain", company.getSubDomain());
                    jObj.put(Constants.companyKey,company.getCompanyID());
                    responseJson.put("data", jObj);
                }
            }
            isSuccess = true;
        } catch (Exception ex) {
            msg = "Internal server error occour";
            isSuccess = false;
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                responseJson.put(Constants.RES_msg, msg);
                responseJson.put(Constants.RES_success, isSuccess);
            } catch (JSONException e) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, e);
            }
        }
        return new ModelAndView("jsonView", "model", responseJson.toString());
    }
    
    
    public ModelAndView gstForm5eSubmissionDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            HashMap<String, Object> requestParam = AccountingManager.getGlobalParams(request);
            requestParam.put(Constants.companyid, sessionHandlerImpl.getCompanyid(request));
            JSONObject jobjData = accGstService.getGSTForm5SubmissionData(requestParam);
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_data, jobjData.getJSONArray("data"));
            jobj.put(Constants.RES_count, jobjData.getJSONArray("count"));
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    public ModelAndView getMalasianGSTForm5(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            JSONArray jArr = getMalasianGSTForm5(request, true);
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cpresult.getEntityList().get(0);
            // GET MSIC CODE BREAKDOWN JSON WITH PERCENTAGE AND OUTPUT TAX
            JSONObject industryCodes = jArr.getJSONObject(jArr.length()-1);
            JSONArray breakDownArry = accReportsService.getGSTForm5BreakDown(company, industryCodes);
            jArr.put(jArr.length()-1,breakDownArry);
            
            
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), Constants.SGDID);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                for (int jsonVal = 0; jsonVal < jArr.length(); jsonVal++) {
                    JSONObject jSONObject = (JSONObject) jArr.get(jsonVal);
                    jSONObject.put(Constants.currencyKey, currency.getCurrencyID());
                    jSONObject.put("currencysymbol", currency.getSymbol());
                    jSONObject.put("currencyname", currency.getName());
                    jSONObject.put("currencycode", currency.getCurrencyCode());
                }
            }
            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getGSTForm5BreakDown(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            JSONArray jArr = getGSTForm5BreakDown(request, false);
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cpresult.getEntityList().get(0);
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), Constants.SGDID);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                for (int jsonVal = 0; jsonVal < jArr.length(); jsonVal++) {
                    JSONObject jSONObject = (JSONObject) jArr.get(jsonVal);
                    jSONObject.put(Constants.currencyKey, currency.getCurrencyID());
                    jSONObject.put("currencysymbol", currency.getSymbol());
                    jSONObject.put("currencyname", currency.getName());
                    jSONObject.put("currencycode", currency.getCurrencyCode());
                }
            }
            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getGSTForm5Additional(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            JSONArray jArr = getGSTForm5Additional(request, false);
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cpresult.getEntityList().get(0);
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), Constants.SGDID);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                for (int jsonVal = 0; jsonVal < jArr.length(); jsonVal++) {
                    JSONObject jSONObject = (JSONObject) jArr.get(jsonVal);
                    jSONObject.put(Constants.currencyKey, currency.getCurrencyID());
                    jSONObject.put("currencysymbol", currency.getSymbol());
                    jSONObject.put("currencyname", currency.getName());
                    jSONObject.put("currencycode", currency.getCurrencyCode());
                }
            }
            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getGSTForm5DetailedView(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            JSONArray jArr = getGSTForm5DetailedJSONArray(request, false);
            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getMalasianGSTForm5DetailedView(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            JSONArray jArr = getMalasianGSTForm5DetailedJSONArray(request, false);
            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public void getMalasianGSTForm5DetailedViewExport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            List<Object> list = new ArrayList<Object>();
            request.setAttribute("isExport", true);
            JSONArray jArr = getMalasianGSTForm5DetailedJSONArray(request, false);
            Locale localObj = RequestContextUtils.getLocale(request);
            ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();
            Map<String, Object> rows = new HashMap<String, Object>();
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            SimpleDateFormat dateFormatForTapReturn = new SimpleDateFormat("yyyy-MM-dd");
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
            OnlyDatePojo dobj = new OnlyDatePojo();
            dobj.setDate("");
            datePojoList.add(dobj);
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cpresult.getEntityList().get(0);
            KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
            
            comAccPrefResult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) comAccPrefResult.getEntityList().get(0);
            DateFormat udf = authHandler.getUserDateFormatter(request);
   	    Map<String, Object> invoiceMap = new HashMap<String, Object>();
            for (int i = 0; i < jArr.length(); i++) {
//                jobj = new JSONObject();
                jobj = jArr.getJSONObject(i);
                rows = new HashMap<String, Object>();
                rows.put("taxamount", jobj.optDouble("taxamount", 0.0));
                rows.put("mergedCategoryData", jobj.optString("mergedCategoryData", ""));
                rows.put("taxname", jobj.optString("taxname", ""));
                rows.put("journalentry", jobj.optString("journalentry", ""));
                rows.put("transactionid", jobj.optString("transactionid", ""));
                rows.put("name", jobj.optString("name", ""));
                rows.put("GroupType", jobj.optString("GroupType", ""));
                rows.put("box", jobj.optString("box", ""));
//                rows.put("remark", jobj.optString("remark", ""));
                rows.put("memo", jobj.optString("memo", ""));
                if (jobj.optString("jedate") == null || jobj.optString("jedate").equals("")) {
                    rows.put("jedate", jobj.optString("jedate", ""));
                } else {
                    rows.put("jedate", udf.format(dateFormatForTapReturn.parse(jobj.optString("jedate"))));
                }
                invDetailsList.add(rows);
            }
            //////jasper Files
           String searchJson = request.getParameter(Constants.Acc_Search_Json);
            invoiceMap.put("CompanyName", extraCompanyPreferences.isIsMultiEntity() ? exportDaoObj.getEntityDimensionNameforExport(searchJson, company) : company.getCompanyName() != null ? company.getCompanyName() : "");
            invoiceMap.put("CompanyAddress", AccountingAddressManager.getCompanyDefaultBillingAddress(company.getCompanyID(), accountingHandlerDAOobj));
            invoiceMap.put("datasource", new JRBeanCollectionDataSource(invDetailsList));
            invoiceMap.put("date", "From Date: " + udf.format(startDate) + ",To Date: " + udf.format(endDate));
            SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
            String pdfFileName = messageSource.getMessage("acc.field.GSTTapReturnDetailedView", null, localObj)+" "+sdf.format(endDate) + ".pdf";
         
            InputStream inputStream = null;
            InputStream inputStreamSubreport = null;

            inputStreamSubreport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GSTTapDetailReport_subreport.jrxml");
            invoiceMap.put("TITLE", "GST TAP RETURN DETAIL VIEW");
            JasperDesign jasperDesignSubreport = JRXmlLoader.load(inputStreamSubreport);
            JasperReport jasperReportSubreport = JasperCompileManager.compileReport(jasperDesignSubreport);
            invoiceMap.put("SubReport", jasperReportSubreport);

            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GSTTapDetailReport.jrxml");
            response.setHeader("Content-Disposition", "attachment;filename=\"" + pdfFileName + "\"");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);

            list.add((jasperPrint));
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, list);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public ModelAndView getGSTForm5Export(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray jArr = new JSONArray();
            if (StringUtil.getBoolean(request.getParameter("gstF5DetailReport"))) {
                jArr = getGSTForm5DetailedJSONArray(request, true);
            } else {
                jArr = getGSTForm5JSONArray(request, true);
            }
            String fileType = request.getParameter("filetype");

            if (StringUtil.isNullOrEmpty(fileType)) {
                fileType = "csv";
            }

            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }

            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());

            exportDaoObj.processRequest(request, response, jobj);

            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getMalaysianGSTForm5Export(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray jArr = new JSONArray();
            String fileType = request.getParameter("filetype");
            boolean isForExport = false;
            if (!StringUtil.isNullOrEmpty(fileType) && fileType.equalsIgnoreCase("print")) {
                isForExport = true;//Formatted comma separated amount in print case only.//ERP-36142
            }
            if (StringUtil.getBoolean(request.getParameter("gstF5DetailReport"))) {
                jArr = getMalasianGSTForm5DetailedJSONArray(request, isForExport);//ERP-36142
            } else {
                jArr = getGSTForm5JSONArray(request, true);
            }

            if (StringUtil.isNullOrEmpty(fileType)) {
                fileType = "csv";
            }

            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }

            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());

            exportDaoObj.processRequest(request, response, jobj);

            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");

        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getGSTReportForGrid(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            String fileType = "";
            DateFormat dateFormat = authHandler.getUserDateFormatter(request);
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cpresult.getEntityList().get(0);
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            request.setAttribute("issales", true);
            String withoutinventory = request.getParameter("withoutinventory");

            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            if (!StringUtil.isNullOrEmpty(request.getParameter("ss"))) {
                requestParams.put("gstss", request.getParameter("ss"));
            }
            requestParams.put("endDate", endDate);
            requestParams.put("startDate", startDate);
            requestParams.put(Constants.onlydateformat, authHandler.getOnlyDateFormat(request));
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            sdf.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getTimeZoneDifference(request)));
            requestParams.put("sdf", sdf);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                requestParams.put("gstFlag", true);
            }
            requestParams.put("dateFormat", dateFormat);
            requestParams.put("issales", false);
            requestParams.put("isSalesTax", false);
            requestParams.put("locale", RequestContextUtils.getLocale(request));
            requestParams.put(Constants.isForGSTReport, true);//Add ImportedServicesInvoice Payment entry in GST Report for MalasianCompany when TAX "GST(DS) & GST(TX)"
            
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria  = request.getParameter(Constants.Filter_Criteria);
            if(!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)){
                requestParams.put(Constants.Acc_Search_Json, searchJson);
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
            }
            
            JSONArray purchasejArr = getCalculatedTaxGST(requestParams, fileType);
            purchasejArr= AccReportsHandler.sortJsonArrayByGSTDate(purchasejArr,dateFormat);
            purchasejArr= AccReportsHandler.sortJsonArrayByGSTType(purchasejArr);
            requestParams.put("issales", true);
            requestParams.put("isSalesTax", true);
            JSONArray salesjArr = getCalculatedTaxGST(requestParams, fileType);
            salesjArr= AccReportsHandler.sortJsonArrayByGSTDate(salesjArr,dateFormat);
            salesjArr= AccReportsHandler.sortJsonArrayByGSTType(salesjArr);
            for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
                purchasejArr.put(salesjArr.getJSONObject(jsonVal));
            }
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter(Constants.limit);
            JSONArray pagedJson = purchasejArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            jobj.put(Constants.RES_data, pagedJson);
            jobj.put(Constants.RES_count, purchasejArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView getGSTReportForGridExport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex"; 
        try {
            String fileType = "csv";
            DateFormat dateFormat = authHandler.getUserDateFormatter(request);
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cpresult.getEntityList().get(0);
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            request.setAttribute("issales", true);
            String withoutinventory = request.getParameter("withoutinventory");
            boolean isInOut = StringUtil.isNullOrEmpty(request.getParameter("isInOut")) ? false : Boolean.parseBoolean(request.getParameter("isInOut"));

            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("endDate", endDate);
            requestParams.put("startDate", startDate);

            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(Constants.currencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put("issales", false);
            requestParams.put("isSalesTax", false);
            requestParams.put("locale", RequestContextUtils.getLocale(request));
            requestParams.put(Constants.isForGSTReport, true);//Add ImportedServicesInvoice Payment entry in GST Report for MalasianCompany when TAX "GST(DS) & GST(TX)"
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            sdf.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getTimeZoneDifference(request)));
            requestParams.put("sdf", sdf);
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                requestParams.put("gstFlag", true);
            }
            
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
            }
            
            JSONArray purchasejArr = getCalculatedTaxGST(requestParams, fileType);
            purchasejArr= AccReportsHandler.sortJsonArrayByGSTDate(purchasejArr,dateFormat);
            purchasejArr= AccReportsHandler.sortJsonArrayByGSTType(purchasejArr);
            purchasejArr = AccReportsHandler.calculateTotalForGSTReport(purchasejArr, isInOut, false); //Calculated Purchases Total
            requestParams.put("issales", true);
            requestParams.put("isSalesTax", true);
            JSONArray salesjArr = getCalculatedTaxGST(requestParams, fileType);
            salesjArr= AccReportsHandler.sortJsonArrayByGSTDate(salesjArr,dateFormat);
            salesjArr= AccReportsHandler.sortJsonArrayByGSTType(salesjArr);
            salesjArr = AccReportsHandler.calculateTotalForGSTReport(salesjArr, isInOut, true); //Calculated Sales Total
            for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
                purchasejArr.put(salesjArr.getJSONObject(jsonVal));
            }
//            purchasejArr =AccReportsHandler.calculatetotal(request, purchasejArr); //calculate Grant total
            jobj.put(Constants.RES_data, purchasejArr);
            jobj.put(Constants.RES_count, purchasejArr.length());

            if (StringUtil.equal(fileType, "csv")) {
                exportDaoObj.processRequest(request, response, jobj);
            }
            jobj.put(Constants.RES_data, purchasejArr);
            jobj.put(Constants.RES_count, purchasejArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }


    public ModelAndView getVATReportForGrid(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            String fileType = "";
            DateFormat dateFormat = authHandler.getUserDateFormatter(request);
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cpresult.getEntityList().get(0);
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            String start = request.getParameter(Constants.start);   //ERP-13640 [SJ]
            String limit = request.getParameter(Constants.limit);
            request.setAttribute("issales", true);
            String withoutinventory = request.getParameter("withoutinventory");
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            if (!StringUtil.isNullOrEmpty(request.getParameter("ss"))) {
                requestParams.put("gstss", request.getParameter("ss"));
            }
            requestParams.put("endDate", endDate);
            requestParams.put("startDate", startDate);
            requestParams.put("isVHT", request.getParameter("isVHT"));
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                requestParams.put("gstFlag", true);
            }
            requestParams.put("issales", false);
            requestParams.put("isSalesTax", false);
            requestParams.put("dateFormat", dateFormat);
            requestParams.put("locale", RequestContextUtils.getLocale(request));
            JSONArray purchasejArr = getCalculatedTaxVAT(requestParams, fileType);
            requestParams.put("issales", true);
            requestParams.put("isSalesTax", true);
            JSONArray salesjArr = getCalculatedTaxVAT(requestParams, fileType);

            for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
                purchasejArr.put(salesjArr.getJSONObject(jsonVal));
            }

            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), Constants.SGDID);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                for (int jsonVal = 0; jsonVal < purchasejArr.length(); jsonVal++) {
                    JSONObject jSONObject = (JSONObject) purchasejArr.get(jsonVal);
                    jSONObject.put(Constants.currencyKey, currency.getCurrencyID());
                    jSONObject.put("currencysymbol", currency.getSymbol());
                    jSONObject.put("currencyname", currency.getName());
                    jSONObject.put("currencycode", currency.getHtmlcode());

                }
            }

            JSONArray pagedJson = purchasejArr;//ERP-13640 [SJ]
            int cunt = pagedJson.length();
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(purchasejArr, Integer.parseInt(start), Integer.parseInt(limit));
            }
            jobj.put(Constants.RES_data, pagedJson);
            jobj.put(Constants.RES_count, purchasejArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");

        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getVATReportForGridExport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            String fileType = "csv";
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cpresult.getEntityList().get(0);
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            request.setAttribute("issales", true);
            String withoutinventory = request.getParameter("withoutinventory");
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("endDate", endDate);
            requestParams.put("startDate", startDate);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(Constants.currencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put("issales", false);
            requestParams.put("isSalesTax", false);
            requestParams.put("isexport", true);
            requestParams.put("locale", RequestContextUtils.getLocale(request));
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                requestParams.put("gstFlag", true);
            }
            JSONArray purchasejArr = getCalculatedTaxVAT(requestParams, fileType);
            requestParams.put("issales", true);
            requestParams.put("isSalesTax", true);
            JSONArray salesjArr = getCalculatedTaxVAT(requestParams, fileType);
            for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
                purchasejArr.put(salesjArr.getJSONObject(jsonVal));
            }
            jobj.put(Constants.RES_data, purchasejArr);
            jobj.put(Constants.RES_count, purchasejArr.length());
            if (StringUtil.equal(fileType, "csv")) {
                exportDaoObj.processRequest(request, response, jobj);
            }
            jobj.put(Constants.RES_data, purchasejArr);
            jobj.put(Constants.RES_count, purchasejArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getWHTReportForGridExport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            String fileType = "csv";
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cpresult.getEntityList().get(0);
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            request.setAttribute("issales", true);
            String withoutinventory = request.getParameter("withoutinventory");
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("endDate", endDate);
            requestParams.put("startDate", startDate);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(Constants.currencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put("issales", false);
            requestParams.put("isSalesTax", false);
            requestParams.put("isexport", true);
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                requestParams.put("gstFlag", true);
            }
            JSONArray purchasejArr = getCalculatedTaxVHT(requestParams, fileType);
            requestParams.put("issales", true);
            requestParams.put("isSalesTax", true);
            JSONArray salesjArr = getCalculatedTaxVHT(requestParams, fileType);
            for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
                purchasejArr.put(salesjArr.getJSONObject(jsonVal));
            }
            jobj.put(Constants.RES_data, purchasejArr);
            jobj.put(Constants.RES_count, purchasejArr.length());
            if (StringUtil.equal(fileType, "csv")) {
                exportDaoObj.processRequest(request, response, jobj);
            }
            jobj.put(Constants.RES_data, purchasejArr);
            jobj.put(Constants.RES_count, purchasejArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONArray getCalculatedTaxVAT(HashMap<String, Object> requestParams, String fileType) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        try {
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), (String) requestParams.get(Constants.companyKey));
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            String cashAccount = pref.getCashAccount().getID();
            requestParams.put("cashaccountid", cashAccount);
            KwlReturnObject result = accTaxObj.getCalculatedTax((Map) requestParams);
            List list = result.getEntityList();
            boolean isSalesTax = (Boolean) (requestParams.get("isSalesTax"));
            if (isSalesTax) {
                jArr = getCalculatedSalesVATMerged(requestParams, list, fileType);
            } else {
                jArr = getCalculatedPurchaseVATMerged(requestParams, list, fileType);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getCalculatedTaxGST : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public JSONArray getCalculatedSalesVATMerged(HashMap<String, Object> requestParams, List taxList, String fileType) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        double totalAmount = 0;
        double totalcategorycost = 0;
        double totalgramtexcludingtax = 0;
        DateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        JSONArray invSalesTaxjArr = new JSONArray();
        JSONObject salesTax = new JSONObject();
        boolean isexport = false;
        if (requestParams.containsKey("isexport")) {
            isexport = Boolean.parseBoolean(requestParams.get("isexport").toString());
        }
        boolean isVHT = false;
        String terms = "";
        try {
            String companyid = (String) requestParams.get(Constants.companyKey);
            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyObj.getEntityList().get(0);
            Locale localeObj = (Locale) requestParams.get("locale");
            if (requestParams.containsKey("userdf")) {
                sdf = (DateFormat) requestParams.get("userdf");
            }
            Iterator itr = taxList.iterator();
            if (isexport) {
                JSONObject obj = new JSONObject();
                obj = new JSONObject();
                obj.put("taxcode", "Sales Invoice");
                jArr.put(obj);
            }
            while (itr.hasNext()) {
                invSalesTaxjArr = new JSONArray();
                Object[] row = (Object[]) itr.next();
                Tax taxObj = (Tax) row[0];
                TaxList taxListObj = (TaxList) row[1];
                Map<String, Object> filterParams = new HashMap<String, Object>();
                filterParams.put("taxid", taxObj.getID());
                if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
                    filterParams.put("startDate", requestParams.get("startDate"));
                    filterParams.put("endDate", requestParams.get("endDate"));
                }

                if (requestParams.containsKey(Constants.companyKey) && requestParams.containsKey(Constants.companyKey)) {
                    filterParams.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                }
                if (requestParams.containsKey("gstss")) {
                    filterParams.put("ss", requestParams.get("gstss"));
                }
                String gcurrencyid = (String) requestParams.get(Constants.globalCurrencyKey);
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                /**
                 * *******************************With Inventory
                 * Data*******************************
                 */
                KwlReturnObject result = accInvoiceDAOobj.getCalculatedInvTax(filterParams);
                Iterator ite1 = result.getEntityList().iterator();
                double saleAmount = 0;
                double saleAmountExcludingTax = 0;
                double saleAmountExcludingTaxB = 0;
                double taxableAmount = 0;
                double taxCollected = 0;
                while (ite1.hasNext()) {
                    double taxPercent = 0;
                    boolean isTaxApplicable = false;
                    double invAmtDue = 0;
                    double amtindocCurrency = 0d;
                    Invoice temp = (Invoice) ite1.next();
                    double invSalesAmt = (Double) (temp.getCustomerEntry() == null ? 0 : temp.getCustomerEntry().getAmount()); //Calculating total sales in customer currency     [PS]
                    double invTaxAmt = 0d;

                    if (temp.getTax() != null) {
//                        KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getJournalEntry().getEntryDate(), temp.getTax().getID());
                        KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getCreationDate(), temp.getTax().getID());
                        taxPercent = (Double) perresult.getEntityList().get(0);
                        isTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                    }

                    double taxAmtInInvoiceCurrency = 0d;

                    if (isTaxApplicable) {  //temp.getTaxEntry() will contain null value if tax amount of selected Tax is zero
                        taxAmtInInvoiceCurrency = (temp.getTaxEntry() != null) ? temp.getTaxEntry().getAmount() : 0;
                    }

                    KwlReturnObject bAmt;
                    KwlReturnObject bTaxAmt = null;
                    KwlReturnObject bTermAmt = null;
                    if (requestParams.containsKey("gstFlag")) {
                        String fromcurrencyid = temp.getCurrency().getCurrencyID();
                        //(ERP-8222) && check is for if country is Singapore then no need to convert it again in SGD. 
                        if (temp.getGstCurrencyRate() != 0 && (!fromcurrencyid.equalsIgnoreCase(Constants.SGDID))) {//to check if the invoice has external GST rate when country is Singapore                                       
//                            bAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                            bAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                            if (isTaxApplicable) {
//                                bTaxAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, taxAmtInInvoiceCurrenc/y, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                                bTaxAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                            }
                        } else {
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invSalesAmt, fromcurrencyid, Constants.SGDID, temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invSalesAmt, fromcurrencyid, Constants.SGDID, temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());
                            if (isTaxApplicable) {
//                                bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmtInInvoiceCurrency, fromcurrencyid, Constants.SGDID, temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());
                                bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmtInInvoiceCurrency, fromcurrencyid, Constants.SGDID, temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());
                            }
                        }
                    } else {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        if (isTaxApplicable) {
//                            bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        }
                    }
                    amtindocCurrency = invSalesAmt;
                    invSalesAmt = (Double) bAmt.getEntityList().get(0);
                    invSalesAmt = authHandler.round(invSalesAmt, companyid);

                    if (isTaxApplicable) {
                        invTaxAmt = (Double) bTaxAmt.getEntityList().get(0);
                        invTaxAmt = authHandler.round(invTaxAmt, companyid);
                    }

                    JSONArray termdetails = accInvoiceServiceDAO.getTermDetails(temp.getID());
                    for (int i = 0; i < termdetails.length(); i++) {
                        JSONObject jSONObject = termdetails.getJSONObject(i);
                        terms += jSONObject.getString("term");
                    }

                    double termamount = CommonFunctions.getTotalTermsAmount(accInvoiceServiceDAO.getTermDetails(temp.getID()));
                    amtindocCurrency = amtindocCurrency - termamount;
//                    bTermAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, termamount, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    bTermAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, termamount, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    termamount = (Double) bTermAmt.getEntityList().get(0);
                    termamount = authHandler.round(termamount, companyid);
                    invSalesAmt = invSalesAmt - termamount;
                    double invAmtExcludingTax = invSalesAmt - invTaxAmt;
                    saleAmount += authHandler.round(invSalesAmt, companyid);//505*100=(100+p)x
                    saleAmountExcludingTax += invAmtExcludingTax;//authHandler.round((invSalesAmt*100)/(100+taxPercent),2);
                    taxableAmount += invTaxAmt;//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),2);
                    if (!temp.getCustomerEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
                        invAmtDue = accInvoiceCommon.getAmountDue(requestParams, temp);
                    }
                    if (invAmtDue == 0) {
                        taxCollected += invTaxAmt;//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),2);
                    }

                    salesTax = new JSONObject();
                    salesTax.put("amtindocCurrency", amtindocCurrency);
                    salesTax.put("terms", terms);
                    salesTax.put("invsymbol", temp.getCurrency().getSymbol());
//                    salesTax.put("invdate", sdf.format(new Date(temp.getJournalEntry().getEntryDate().getTime())));
                    salesTax.put("invdate", sdf.format(new Date(temp.getCreationDate().getTime())));
                    salesTax.put("invname", temp.getCustomer().getName());
                    salesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    salesTax.put("invno", temp.getInvoiceNumber());
                    salesTax.put("invamt", authHandler.formattedAmount(invSalesAmt, companyid));
                    salesTax.put("gramtexcludingtax", invAmtExcludingTax);//authHandler.round(((invSalesAmt*100)/(100+taxPercent)),2));                    
                    salesTax.put("journalEntryNo", temp.getJournalEntry().getEntryNumber());
                    salesTax.put("invtaxamount", invTaxAmt);//authHandler.formattedAmount(authHandler.round(invSalesAmt-(invSalesAmt*100)/(100+taxPercent),2)));
                    totalcategorycost += invTaxAmt;//authHandler.round(invSalesAmt-(invSalesAmt*100)/(100+taxPercent),2);
                    totalgramtexcludingtax += invAmtExcludingTax;//authHandler.round((invSalesAmt*100)/(100+taxPercent),2);
                    totalAmount += invSalesAmt;
                    invSalesTaxjArr.put(salesTax);
                }

//*********************************  Getting data for invoice details (included tax in row level) *****************//
                result = accInvoiceDAOobj.getCalculatedInvDtlTax(filterParams);
                List<InvoiceDetail> list = result.getEntityList();
                if (list != null) {
                    Set<String> invoiceIdSet = new HashSet<String>();
                    for (InvoiceDetail temp : list) {
                        double quantity;
                        double rowTaxPercent = 0;
                        double rowTaxAmount = 0;
                        boolean isRowTaxApplicable = false;
                        double invAmtDue = 0;
                        double gramtexcludingtax = 0;
                        double ramount = 0;
                        quantity = temp.getInventory().isInvrecord() ? temp.getInventory().getQuantity() : temp.getInventory().getActquantity();
                        ramount = temp.getRate() * quantity;
                        double rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                        ramount -= rdisc;
                        //Converting row amount in base   [PS]
                        KwlReturnObject bAmt;
                        if (requestParams.containsKey("gstFlag")) {
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, ramount, temp.getInvoice().getCurrency().getCurrencyID(), Constants.SGDID, temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, ramount, temp.getInvoice().getCurrency().getCurrencyID(), Constants.SGDID, temp.getInvoice().getCreationDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        } else {
//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getCreationDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        }
                        double amtindocCurrency = ramount;
                        ramount = (Double) bAmt.getEntityList().get(0);
                        //Calculating tax on base row amount [PS]
                        if (temp.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getInvoice().getJournalEntry().getEntryDate(), temp.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getInvoice().getCreationDate(), temp.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                            isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                        }
                        if (temp.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                            if (isRowTaxApplicable) {
                                rowTaxAmount = temp.getRowTaxAmount() + temp.getRowTermTaxAmount();
                                KwlReturnObject baseAmt;
                                if (requestParams.containsKey("gstFlag")) {
//                                    baseAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rowTaxAmount, temp.getInvoice().getCurrency().getCurrencyID(), Constants.SGDID, temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());
                                    baseAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rowTaxAmount, temp.getInvoice().getCurrency().getCurrencyID(), Constants.SGDID, temp.getInvoice().getCreationDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());
                                } else {
//                                    baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());
                                    baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getCreationDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());
                                }
                                amtindocCurrency = amtindocCurrency + rowTaxAmount;
                                rowTaxAmount = (Double) baseAmt.getEntityList().get(0);
                            }
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmount = ramount * rowTaxPercent / 100;
                            amtindocCurrency = amtindocCurrency + rowTaxAmount;
                        }
                        if (isVHT) {
                            rowTaxAmount = 0;
                        }
                        taxableAmount += authHandler.round((rowTaxAmount), companyid);//taxableAmount += authHandler.round((ramount * rowTaxPercent / 100), 2);
                        if (!temp.getInvoice().getCustomerEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
                            invAmtDue = accInvoiceCommon.getAmountDue(requestParams, temp.getInvoice());
                        }
                        if (invAmtDue == 0) {
                            taxCollected += authHandler.round((rowTaxAmount), companyid);//taxCollected += authHandler.round((ramount * rowTaxPercent / 100), 2);
                        }

                        double invoiceAmount = 0d;
                        if (temp.getInvoice().getTax() == null) {
                            ramount = authHandler.round(ramount, companyid);
                            rowTaxAmount = authHandler.round(rowTaxAmount, companyid);
                            invoiceAmount = ramount + (rowTaxAmount);//ramount + (ramount * rowTaxPercent / 100);
                            invoiceAmount = authHandler.round(invoiceAmount, companyid);
                            saleAmount += authHandler.round(ramount, companyid);
                            gramtexcludingtax += authHandler.round(ramount, companyid);
                            saleAmountExcludingTax += authHandler.round(ramount, companyid);
                            saleAmount += authHandler.round((rowTaxAmount), companyid);
                        } else {
                            invoiceAmount = 0;//if tax has been included in invoice level then the invoice amount for row level will be show zero.
                        }

                        salesTax = new JSONObject();
                        salesTax.put("invsymbol", temp.getInvoice().getCurrency().getSymbol());
                        salesTax.put("amtindocCurrency", amtindocCurrency);
                        salesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
//                        salesTax.put("invdate", sdf.format(new Date(temp.getInvoice().getJournalEntry().getEntryDate().getTime())));
                        salesTax.put("invdate", sdf.format(new Date(temp.getInvoice().getCreationDate().getTime())));
                        salesTax.put("invname", temp.getInvoice().getCustomer().getName());
                        salesTax.put("invno", temp.getInvoice().getInvoiceNumber());
                        salesTax.put("invamt", invoiceAmount);
                        salesTax.put("gramtexcludingtax", gramtexcludingtax);
                        salesTax.put("journalEntryNo", temp.getInvoice().getJournalEntry().getEntryNumber());
                        salesTax.put("invtaxamount", authHandler.round((rowTaxAmount), companyid));//salesTax.put("invtaxamount", (ramount * rowTaxPercent / 100));
                        totalcategorycost += authHandler.round((rowTaxAmount), companyid);//totalcategorycost += (ramount * rowTaxPercent / 100);
                        totalgramtexcludingtax += gramtexcludingtax;
                        totalAmount += (invoiceAmount);
                        invSalesTaxjArr.put(salesTax);

                        invoiceIdSet.add(temp.getInvoice().getID());
                    }
                }

                double saleAmountB = 0;
                double taxableAmountB = 0;
                double taxCollectedB = 0;
                double taxableAmountC = 0;
                if (fileType.equals("pdf")) {
                    JSONObject obj = new JSONObject();
                    obj.put("taxname", taxObj.getName());
                    obj.put("taxtype", taxObj.getTaxtype());
                    obj.put("taxcode", taxObj.getTaxCode());
                    obj.put("totalsale", authHandler.round(saleAmount + saleAmountB, companyid));//sales including tax[PS]
                    obj.put("taxrate", taxListObj.getPercent());
                    obj.put("taxamount", authHandler.round(taxableAmount + taxableAmountB + taxableAmountC, companyid));
                    obj.put("taxcollected", taxCollected + taxCollectedB);  //taxamount of all thoose invoices whose amount due is 0[PS]
                    obj.put("taxpayable", (taxableAmount - taxCollected) + (taxableAmountB - taxCollectedB));
                    obj.put("totalsaleexcludingtax", authHandler.round(saleAmountExcludingTax + saleAmountExcludingTaxB, companyid));//sales including tax[PS]
                    obj.put("details", invSalesTaxjArr);
                    jArr.put(obj);

                } else {
                    String mergedCategoryData = messageSource.getMessage("acc.reports.salesandincomegst", null, localeObj);
                    for (int jsonVal = 0; jsonVal < invSalesTaxjArr.length(); jsonVal++) {
                        JSONObject obj = new JSONObject();
                        JSONObject oldObject = (JSONObject) invSalesTaxjArr.get(jsonVal);
                        obj.put("taxname", taxObj.getName());
                        obj.put("taxcode", taxObj.getTaxCode());
                        obj.put("mergedResourceData", "Customer Invoice");
                        obj.put("mergedCategoryData", mergedCategoryData);
                        obj.put("categoryName", "Grand");
                        obj.put("totalcategorycost", totalcategorycost);
                        obj.put("totalgramtexcludingtax", totalgramtexcludingtax);
                        obj.put("totalsale", authHandler.round(saleAmount + saleAmountB, companyid));//sales including tax[PS]
                        obj.put("totalsaleexcludingtax", authHandler.round(saleAmountExcludingTax + saleAmountExcludingTaxB, companyid));//sales including tax[PS]
                        obj.put("taxrate", taxListObj.getPercent());
                        obj.put("taxamount", authHandler.round(taxableAmount + taxableAmountB + taxableAmountC, companyid));
                        obj.put("taxcollected", taxCollected + taxCollectedB);  //taxamount of all thoose invoices whose amount due is 0[PS]
                        obj.put("taxpayable", (taxableAmount - taxCollected) + (taxableAmountB - taxCollectedB));
                        obj.put("invdate", oldObject.getString("invdate"));
                        obj.put("invname", oldObject.getString("invname"));
                        obj.put("journalEntryNo", oldObject.getString("journalEntryNo"));
                        obj.put("invno", oldObject.getString("invno"));
                        obj.put("invamt", oldObject.getDouble("invamt"));
                        obj.put("addAmountFlag", oldObject.getBoolean("addAmountFlag"));
                        obj.put("gramtexcludingtax", oldObject.optDouble("gramtexcludingtax", 0.0));
                        obj.put("totalinvamt", totalAmount);
                        obj.put("invtaxamount", oldObject.getDouble("invtaxamount"));
                        obj.put("amtindocCurrency", oldObject.getDouble("amtindocCurrency"));
                        obj.put("invsymbol", oldObject.getString("invsymbol"));
                        jArr.put(obj);
                    }
                }
            }

        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public JSONArray getCalculatedPurchaseVATMerged(Map<String, Object> requestParams, List taxList, String fileType) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        JSONArray grPurchaseTaxjArr = new JSONArray();
        JSONObject purchasesTax = new JSONObject();
        JSONArray grPurchaseTaxBillingjArr = new JSONArray();
        JSONObject obj = new JSONObject();
        double totalAmount = 0;
        double totalcategorycost = 0;
        double totalgramtexcludingtax = 0;
        boolean isVHT = false;
        boolean isexport = false;
        if (requestParams.containsKey("isexport")) {
            isexport = Boolean.parseBoolean(requestParams.get("isexport").toString());
        }

        String terms = "";
        DateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        try {
            String companyid = (String) requestParams.get(Constants.companyKey);
            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyObj.getEntityList().get(0);
            if (requestParams.containsKey("userdf")) {
                sdf = (DateFormat) requestParams.get("userdf");
            }
            if (isexport) {
                obj = new JSONObject();
                obj.put("taxcode", "Purchase Invoice");
                jArr.put(obj);
            }
            Iterator itr = taxList.iterator();
            while (itr.hasNext()) {
                grPurchaseTaxjArr = new JSONArray();
                grPurchaseTaxBillingjArr = new JSONArray();
                Object[] row = (Object[]) itr.next();
                Tax taxObj = (Tax) row[0];
                TaxList taxListObj = (TaxList) row[1];
                Map<String, Object> filterParams = new HashMap<String, Object>();
                filterParams.put("taxid", taxObj.getID());
                if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
                    filterParams.put("startDate", requestParams.get("startDate"));
                    filterParams.put("endDate", requestParams.get("endDate"));
                }

                if (requestParams.containsKey(Constants.companyKey) && requestParams.containsKey(Constants.companyKey)) {
                    filterParams.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                }
                if (requestParams.containsKey("gstss")) {
                    filterParams.put("ss", requestParams.get("gstss"));
                }
                if (requestParams.containsKey("excludeRetailPurchaseInvoice")) {
                    filterParams.put("excludeRetailPurchaseInvoice", requestParams.get("excludeRetailPurchaseInvoice"));
                }
                String gcurrencyid = (String) requestParams.get(Constants.globalCurrencyKey);
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                /**
                 * *******************************With Inventory
                 * Data*******************************
                 */
                //VI with GST on Total Amounts
                KwlReturnObject result = accGoodsReceiptDAOObj.getCalculatedGRTax(filterParams);
                List<GoodsReceipt> list = result.getEntityList();
                double saleAmount = 0;
                double saleAmountExcludingTax = 0;
                double saleAmountExcludingTaxB = 0;
                double taxableAmount = 0;
                double taxCollected = 0;

//Cal Tax for whole GR[PS]
                if (list != null) {
                    for (GoodsReceipt temp : list) {
                        boolean isTaxApplicable = false;
                        double invTaxAmt = 0d;
                        double amtindocCurrency = 0d;
                        double invSalesAmt = (Double) (temp.getVendorEntry() == null ? 0 : temp.getVendorEntry().getAmount()); //Calculating total sales in customer currency     [PS]
                        if (temp.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getJournalEntry().getEntryDate(), temp.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getCreationDate(), temp.getTax().getID());
                            isTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                        }
                        // get wether tax is applicable or not
                        double taxAmtInInvoiceCurrency = 0d;

                        if (isTaxApplicable) { //temp.getTaxEntry() will contain null value if tax amount of selected Tax is zero
                            taxAmtInInvoiceCurrency = (temp.getTaxEntry() != null) ? temp.getTaxEntry().getAmount() : 0;
                        }
                        KwlReturnObject bAmt;
                        KwlReturnObject bTaxAmt = null;
                        KwlReturnObject bTermAmt = null;
                        if (requestParams.containsKey("gstFlag")) {
                            String fromcurrencyid = temp.getCurrency().getCurrencyID();
                            //(ERP-8222) && check is for if country is Singapore then no need to convert it again in SGD.
                            if (temp.getGstCurrencyRate() != 0 && (!fromcurrencyid.equalsIgnoreCase(Constants.SGDID))) {//to check if the GoodsReceipt has external GST rate when country is Singapore
//                                bAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                                bAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                                if (isTaxApplicable) {
//                                    bTaxAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                                    bTaxAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                                }
                            } else {
//                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invSalesAmt, fromcurrencyid, Constants.SGDID, temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invSalesAmt, fromcurrencyid, Constants.SGDID, temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());
                                if (isTaxApplicable) {
//                                    bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmtInInvoiceCurrency, fromcurrencyid, Constants.SGDID, temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());
                                    bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmtInInvoiceCurrency, fromcurrencyid, Constants.SGDID, temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());
                                }
                            }
                        } else {
//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            if (isTaxApplicable) {
//                                bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            }
                        }
                        amtindocCurrency = invSalesAmt;
                        invSalesAmt = (Double) bAmt.getEntityList().get(0);
                        invSalesAmt = authHandler.round(invSalesAmt, companyid);
                        if (isTaxApplicable) {
                            invTaxAmt = (Double) bTaxAmt.getEntityList().get(0);
                            invTaxAmt = authHandler.round(invTaxAmt, companyid);
                        }

                        saleAmount += authHandler.round(invSalesAmt, companyid);//505*100=(100+p)x
                        JSONArray termdetails = getTermDetails(temp.getID(), accGoodsReceiptDAOObj);
                        for (int i = 0; i < termdetails.length(); i++) {
                            JSONObject jSONObject = termdetails.getJSONObject(i);
                            terms += jSONObject.getString("term");
                        }
                        double termamount = CommonFunctions.getTotalTermsAmount(getTermDetails(temp.getID(), accGoodsReceiptDAOObj));
                        amtindocCurrency = amtindocCurrency - termamount;
//                        bTermAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, termamount, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        bTermAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, termamount, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        termamount = (Double) bTermAmt.getEntityList().get(0);
                        termamount = authHandler.round(termamount, companyid);
                        invSalesAmt = invSalesAmt - termamount;
                        double invAmtExcludingTax = invSalesAmt - invTaxAmt;
                        saleAmountExcludingTax += invAmtExcludingTax;//authHandler.round(((invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                        taxableAmount += invTaxAmt;//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                        double invAmtDue = 0;
                        if (!temp.getVendorEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
                            List amtList;
                            if (temp.isIsExpenseType()) {
                                amtList = accGoodsReceiptCommon.getExpGRAmountDue(requestParams, temp);
                            } else {
                                if (Constants.InvoiceAmountDueFlag) {
                                    amtList = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(requestParams, temp);
                                } else {
                                    amtList = accGoodsReceiptCommon.getGRAmountDue(requestParams, temp);
                                }
                            }
                            if (!amtList.isEmpty() && amtList != null) {
                                invAmtDue = (Double) amtList.get(1);
                            }
                        }
                        if (invAmtDue == 0) {
                            taxCollected += invTaxAmt;//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                        }
                        purchasesTax = new JSONObject();
                        purchasesTax.put("amtindocCurrency", amtindocCurrency);
                        purchasesTax.put("invsymbol", temp.getCurrency().getSymbol());
                        purchasesTax.put("terms", terms);
//                        purchasesTax.put("grdate", sdf.format(new Date(temp.getJournalEntry().getEntryDate().getTime())));
                        purchasesTax.put("grdate", sdf.format(new Date(temp.getCreationDate().getTime())));
                        purchasesTax.put("grname", temp.getVendor().getName());
                        purchasesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                        purchasesTax.put("grno", temp.getGoodsReceiptNumber());
                        purchasesTax.put("gramt", invSalesAmt);
                        purchasesTax.put("gramtexcludingtax", invAmtExcludingTax);//authHandler.round(((invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL));
                        purchasesTax.put("journalEntryNo", temp.getJournalEntry().getEntryNumber());
                        purchasesTax.put("grtaxamount", invTaxAmt);//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL));
                        totalcategorycost += invTaxAmt;//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                        totalgramtexcludingtax += invAmtExcludingTax;//authHandler.round((invSalesAmt*100)/(100+taxPercent),Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                        totalAmount += invSalesAmt;
                        grPurchaseTaxjArr.put(purchasesTax);
                    }
                }

                //Cal Tax for VI Details[PS]
                result = accGoodsReceiptDAOObj.getCalculatedGRDtlTax(filterParams);
                List<GoodsReceiptDetail> GRList = result.getEntityList();
                if (GRList != null) {
                    for (GoodsReceiptDetail temp : GRList) {
                        double quantity;

                        double rowTaxPercent = 0;
                        double rowTaxAmount = 0;
                        boolean isRowTaxApplicable = false;
                        double ramount = 0;
                        double gramtexcludingtax = 0;
                        quantity = temp.getInventory().isInvrecord() ? temp.getInventory().getQuantity() : temp.getInventory().getActquantity();
                        ramount = authHandler.round(temp.getRate() * quantity, companyid);
                        double rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                        ramount -= rdisc;
//Converting row amount in base   [PS]
                        KwlReturnObject bAmt;
                        if (requestParams.containsKey("gstFlag")) {
                            String fromcurrencyid = temp.getGoodsReceipt().getCurrency().getCurrencyID();
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, ramount, fromcurrencyid, Constants.SGDID, temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, ramount, fromcurrencyid, Constants.SGDID, temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                        } else {
//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        }
                        double amtindocCurrency = ramount;
                        ramount = (Double) bAmt.getEntityList().get(0);
//Calculating tax on base row amount [PS]
                        if (temp.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getCreationDate(), temp.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                            isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                        }
                        if (temp.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                            if (isRowTaxApplicable) {
                                rowTaxAmount = temp.getRowTaxAmount() + temp.getRowTermTaxAmount();
                                KwlReturnObject baseAmt;
                                if (requestParams.containsKey("gstFlag")) {
                                    String fromcurrencyid = temp.getGoodsReceipt().getCurrency().getCurrencyID();
//                                    baseAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, rowTaxAmount, fromcurrencyid, Constants.SGDID, temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                    baseAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, rowTaxAmount, fromcurrencyid, Constants.SGDID, temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                } else {
//                                    baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                    baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                }
                                amtindocCurrency = amtindocCurrency + rowTaxAmount;
                                rowTaxAmount = (Double) baseAmt.getEntityList().get(0);
                            }
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmount = ramount * rowTaxPercent / 100;
                            amtindocCurrency = amtindocCurrency + rowTaxAmount;
                        }
                        if (isVHT) {
                            rowTaxAmount = 0;
                        }
                        taxableAmount += authHandler.round((rowTaxAmount), companyid);//taxableAmount+=authHandler.round((ramount*rowTaxPercent/100),2);
                        double invAmtDue = 0;
                        if (!temp.getGoodsReceipt().getVendorEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
                            List amtList;
                            amtList = accGoodsReceiptCommon.getGRAmountDue(requestParams, temp.getGoodsReceipt());
                            if (!amtList.isEmpty() && amtList != null) {
                                invAmtDue = (Double) amtList.get(1);
                            }
                        }
                        if (invAmtDue == 0) {
                            taxCollected += authHandler.round((rowTaxAmount), companyid);//taxCollected+=authHandler.round((ramount*rowTaxPercent/100),2);
                        }

                        double grAmount = 0d;
                        if (temp.getGoodsReceipt().getTax() == null) {
                            ramount = authHandler.round(ramount, companyid);
                            rowTaxAmount = authHandler.round(rowTaxAmount, companyid);
                            grAmount = ramount + (rowTaxAmount);//ramount + (ramount * rowTaxPercent / 100);
                            saleAmount += authHandler.round(ramount, companyid);
                            saleAmountExcludingTax += authHandler.round(ramount, companyid);
                            saleAmount += authHandler.round((rowTaxAmount), companyid);
                            gramtexcludingtax += authHandler.round(ramount, companyid);
                        } else {
                            grAmount = 0;//if tax has been included in invoice level then the invoice amount for row level will be show zero.
                        }

                        purchasesTax = new JSONObject();
                        purchasesTax.put("invsymbol", temp.getGoodsReceipt().getCurrency().getSymbol());
                        purchasesTax.put("amtindocCurrency", amtindocCurrency);
//                        purchasesTax.put("grdate", sdf.format(new Date(temp.getGoodsReceipt().getJournalEntry().getEntryDate().getTime())));
                        purchasesTax.put("grdate", sdf.format(new Date(temp.getGoodsReceipt().getCreationDate().getTime())));
                        purchasesTax.put("grname", temp.getGoodsReceipt().getVendor().getName());
                        purchasesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                        purchasesTax.put("grno", temp.getGoodsReceipt().getGoodsReceiptNumber());
                        purchasesTax.put("gramt", (grAmount));
                        purchasesTax.put("gramtexcludingtax", gramtexcludingtax);
                        purchasesTax.put("journalEntryNo", temp.getGoodsReceipt().getJournalEntry().getEntryNumber());
                        purchasesTax.put("grtaxamount", (rowTaxAmount));//purchasesTax.put("grtaxamount", (ramount*rowTaxPercent/100));
                        totalcategorycost += (rowTaxAmount);//totalcategorycost+=(ramount*rowTaxPercent/100);
                        totalgramtexcludingtax += gramtexcludingtax;
                        totalAmount += (grAmount);
                        grPurchaseTaxjArr.put(purchasesTax);
                    }
                }

                //Cal Tax for Expense GR Details[PS]
                result = accGoodsReceiptDAOObj.getCalculatedExpenseGRDtlTax(filterParams);
                List<ExpenseGRDetail> expList = result.getEntityList();
                if (expList != null) {
                    for (ExpenseGRDetail temp : expList) {
                        double rowTaxPercent = 0;
                        double rowTaxAmount = 0;
                        boolean isRowTaxApplicable = false;
                        double gramtexcludingtax = 0;
                        double amtindocCurrency = 0d;
                        double ramount = 0;
                        ramount = temp.getRate();
                        double rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                        ramount -= rdisc;
//Converting row amount in base   [PS]
                        KwlReturnObject bAmt;
                        if (requestParams.containsKey("gstFlag")) {
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        } else {
//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        }
                        amtindocCurrency = ramount;
                        ramount = (Double) bAmt.getEntityList().get(0);
//Calculating tax on base row amount [PS]
                        if (temp.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getCreationDate(), temp.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                            isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                        }
                        if (temp.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                            if (isRowTaxApplicable) {
                                rowTaxAmount = temp.getRowTaxAmount();
                                KwlReturnObject baseAmt;
                                if (requestParams.containsKey("gstFlag")) {
//                                    baseAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                    baseAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                } else {
//                                    baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                    baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                }
                                rowTaxAmount = (Double) baseAmt.getEntityList().get(0);
                            }
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmount = ramount * rowTaxPercent / 100;
                        }
                        JSONArray termdetails = getTermDetails(temp.getID(), accGoodsReceiptDAOObj);
                        for (int i = 0; i < termdetails.length(); i++) {
                            JSONObject jSONObject = termdetails.getJSONObject(i);
                            terms += jSONObject.getString("term");
                        }
                        double termamount = CommonFunctions.getTotalTermsAmount(getTermDetails(temp.getID(), accGoodsReceiptDAOObj));
                        ramount = ramount - termamount;
                        taxableAmount += authHandler.round((rowTaxAmount), companyid);//taxableAmount+=authHandler.round((ramount*rowTaxPercent/100),2);
                        double invAmtDue = 0;
                        if (!temp.getGoodsReceipt().getVendorEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
                            List amtList;
                            amtList = accGoodsReceiptCommon.getExpGRAmountDue(requestParams, temp.getGoodsReceipt());
                            if (!amtList.isEmpty() && amtList != null) {
                                invAmtDue = (Double) amtList.get(1);
                            }
                        }
                        if (invAmtDue == 0) {
                            taxCollected += authHandler.round((rowTaxAmount), companyid);//taxCollected+=authHandler.round((ramount*rowTaxPercent/100),2);
                        }

                        double expgrAmount = 0d;
                        if (temp.getGoodsReceipt().getTax() == null) {
                            ramount = authHandler.round(ramount, companyid);
                            rowTaxAmount = authHandler.round(rowTaxAmount, companyid);
                            expgrAmount = ramount + authHandler.round(rowTaxAmount, companyid);//expgrAmount = ramount + (ramount * rowTaxPercent / 100);
                            saleAmount += authHandler.round(ramount, companyid);
                            saleAmountExcludingTax += authHandler.round(ramount, companyid);
                            gramtexcludingtax += authHandler.round(ramount, companyid);
                            saleAmount += authHandler.round((rowTaxAmount), companyid);
                        } else {
                            expgrAmount = 0;//if tax has been included in invoice level then the invoice amount for row level will be show zero.
                        }

                        purchasesTax = new JSONObject();
                        purchasesTax.put("invsymbol", temp.getGoodsReceipt().getCurrency().getSymbol());
                        purchasesTax.put("amtindocCurrency", amtindocCurrency);
                        purchasesTax.put("terms", terms);
//                        purchasesTax.put("grdate", sdf.format(new Date(temp.getGoodsReceipt().getJournalEntry().getEntryDate().getTime())));
                        purchasesTax.put("grdate", sdf.format(new Date(temp.getGoodsReceipt().getCreationDate().getTime())));
                        purchasesTax.put("grname", temp.getGoodsReceipt().getVendor().getName());
                        purchasesTax.put("grno", temp.getGoodsReceipt().getGoodsReceiptNumber());
                        purchasesTax.put("gramt", (expgrAmount));
                        purchasesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                        purchasesTax.put("gramtexcludingtax", gramtexcludingtax);
                        purchasesTax.put("journalEntryNo", temp.getGoodsReceipt().getJournalEntry().getEntryNumber());
                        purchasesTax.put("grtaxamount", authHandler.round((rowTaxAmount), companyid));//purchasesTax.put("grtaxamount", (ramount*rowTaxPercent/100));
                        totalcategorycost += authHandler.round((rowTaxAmount), companyid);;//totalcategorycost+=(ramount*rowTaxPercent/100);
                        totalgramtexcludingtax += authHandler.round(gramtexcludingtax, companyid);
                        totalAmount += (expgrAmount);

                        grPurchaseTaxjArr.put(purchasesTax);
                    }
                }

                for (int i = 0; i < grPurchaseTaxBillingjArr.length(); i++) {
                    grPurchaseTaxjArr.put(grPurchaseTaxBillingjArr.getJSONObject(i));
                }
                if (fileType.equals("pdf")) {
                    obj = new JSONObject();
                    obj.put("taxname", taxObj.getName());
                    obj.put("taxcode", taxObj.getTaxCode());
                    obj.put("totalsale", authHandler.round(saleAmount, companyid));//sales including tax[PS]
                    obj.put("taxrate", taxListObj.getPercent());
                    obj.put("taxamount", authHandler.round(taxableAmount, companyid));
                    obj.put("taxcollected", taxCollected);  //taxamount of all thoose invoices whose amount due is 0[PS]
                    obj.put("taxpayable", (taxableAmount - taxCollected));
                    obj.put("totalsaleexcludingtax", authHandler.round(saleAmountExcludingTax + saleAmountExcludingTaxB, companyid));//sales including tax[PS]
                    obj.put("details", grPurchaseTaxjArr);
                    jArr.put(obj);

                } else {
                    for (int jsonVal = 0; jsonVal < grPurchaseTaxjArr.length(); jsonVal++) {
                        obj = new JSONObject();
                        JSONObject oldObject = (JSONObject) grPurchaseTaxjArr.get(jsonVal);
                        obj.put("taxname", taxObj.getName());
                        obj.put("taxcode", taxObj.getTaxCode());
                        obj.put("mergedResourceData", "Vendor Invoice");
                        obj.put("mergedCategoryData", "Purchase and Expenses with GST Paid");
                        obj.put("categoryName", "Grand");
                        obj.put("totalsale", authHandler.round(saleAmount, companyid));//sales including tax[PS]
                        obj.put("totalsaleexcludingtax", authHandler.round(saleAmountExcludingTax + saleAmountExcludingTaxB, companyid));//sales including tax[PS]
                        obj.put("taxrate", taxListObj.getPercent());
                        obj.put("totalcategorycost", totalcategorycost);
                        obj.put("totalgramtexcludingtax", totalgramtexcludingtax);
                        obj.put("taxamount", authHandler.round(taxableAmount, companyid));
                        obj.put("taxcollected", taxCollected);  //taxamount of all thoose invoices whose amount due is 0[PS]
                        obj.put("taxpayable", (taxableAmount - taxCollected));
//                    obj.put("invdate", sdf.format(oldObject.getLong("grdate")));
                        obj.put("invdate", oldObject.getString("grdate"));
                        obj.put("invname", oldObject.getString("grname"));
                        obj.put("invno", oldObject.getString("grno"));
                        obj.put("journalEntryNo", oldObject.getString("journalEntryNo"));
                        obj.put("totalinvamt", totalAmount);
                        obj.put("invamt", oldObject.getDouble("gramt"));
                        obj.put("addAmountFlag", oldObject.getBoolean("addAmountFlag"));
                        obj.put("gramtexcludingtax", oldObject.optDouble("gramtexcludingtax", 0.0));
                        obj.put("invtaxamount", oldObject.getDouble("grtaxamount"));
                        obj.put("amtindocCurrency", oldObject.getDouble("amtindocCurrency"));
                        obj.put("invsymbol", oldObject.getString("invsymbol"));
                        jArr.put(obj);
                    }
                }
            }

        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public JSONArray getCalculatedTaxGST(HashMap<String, Object> requestParams, String fileType) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        try {
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), (String) requestParams.get(Constants.companyKey));
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            String cashAccount = pref.getCashAccount().getID();
            requestParams.put("cashaccountid", cashAccount);
            KwlReturnObject result = accTaxObj.getCalculatedTax((Map) requestParams);
            List list = result.getEntityList();
            boolean isSalesTax = (Boolean) (requestParams.get("isSalesTax"));
            //String withoutinventory = (String)requestParams.get("withoutinventory");
            if (isSalesTax) {
                jArr = getCalculatedSalesTaxMerged(requestParams, list, fileType);
                //jArr=getCalculatedSalesTaxBilling(requestParams,list);
            } else {
                jArr = getCalculatedPurchaseTaxMerged(requestParams, list, fileType);
                //jArr=getCalculatedPurchaseTaxBilling(requestParams,list);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getCalculatedTaxGST : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public ModelAndView exportMalasianGSTForm5(HttpServletRequest request, HttpServletResponse response) {

        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";

        try {
             StringBuilder report = new StringBuilder();
            KwlReturnObject result = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) result.getEntityList().get(0);
            java.io.ByteArrayOutputStream baos = new ByteArrayOutputStream();

            String companyid = sessionHandlerImpl.getCompanyid(request);
//            result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
//            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
//
//            report.append("c1|c2|c3|c4|b5|c6|c7|c8|c9|c10|c11|c12|c13|i14|c15|i16|c17|i18|c19|i20|c21|i22|c23|c24" + "\r\n");
            String fileType = "";
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
            String date = sdf.format(endDate);
            String fileName = "TAP return " + date + ".txt"; //file name like TAP return 20180531.txt ERP-40245. 
            request.setAttribute("issales", true);
            String withoutinventory = request.getParameter("withoutinventory");

            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("endDate", endDate);
            requestParams.put("startDate", startDate);

            requestParams.put("excludeRetailPurchaseInvoice", true);//in case of Malaysian Company Retail Purchase invoice will not be included at here as we will deal with it seperately
            requestParams.put("withoutinventory", withoutinventory);
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                requestParams.put("gstFlag", true);
                request.setAttribute("filterCurrency", Constants.SGDID);
            }

            requestParams.put("issales", false);
            requestParams.put("isSalesTax", false);
            requestParams.put("locale", RequestContextUtils.getLocale(request));

            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
            }
            boolean isAdvanceSearch = requestParams.containsKey(Constants.isAdvanceSearch) ? (Boolean) requestParams.get(Constants.isAdvanceSearch) : false;
            int gstGuideReviseConfig = accGstService.getGSTGuideVersion(requestParams);
//            if (gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version) { Commenting this code for ERP-40245
//                report.append("c1|c2|c3|c4|b5|c6|c7|c8|c9|c10|c11|c12|c13|c14|i15|c16|i17|c18|i19|c20|i21|c22|i23|c24|c25" + "\r\n");
//            } else {
//                report.append("c1|c2|c3|c4|b5|c6|c7|c8|c9|c10|c11|c12|c13|i14|c15|i16|c17|i18|c19|i20|c21|i22|c23|c24" + "\r\n");
//            }

            boolean carryForward = StringUtil.isNullOrEmpty(request.getParameter("carryForward"))?false:Boolean.parseBoolean(request.getParameter("carryForward")); //carryForwardRefund default value should be false. Refer - ERP-40245
            
            JSONArray purchasejArr = getCalculatedTaxGST(requestParams, fileType);
            
            double totalTXAmountExcludingGST = 0.00;
            double totalTXTaxAmount = 0.00;
            String TXTaxCode = "GST(TX)";

            double totalIMAmountExcludingGST = 0.00;
            double totalIMTaxAmount = 0.00;
            String IMTaxCode = "GST(IM)";

            double totalISAmountExcludingGST = 0.00;
            String ISTaxCode = "GST(IS)";

//            double totalTXE43AmountExcludingGST = 0.00;
//            double totalTXE43TaxAmount = 0.00;
//            String TXE43TaxCode = "GST(TX-E43)";
            
            //TX-E43 renamed as TX-IES
            double totalTXIESAmountExcludingGST = 0.00;
            double totalTXIESTaxAmount = 0.00;
            String TXIESTaxCode = Constants.MALAYSIAN_GST_TX_IES_TAX_CODE;
            
            double totalTXFRSAmountExcludingGST = 0.00;
            double totalTXFRSTaxAmount = 0.00;
            String TXFRSTaxCode = Constants.MALAYSIAN_GST_TX_FRS_TAX_CODE;

            double totalTXREAmountExcludingGST = 0.00;
            double totalTXRETaxAmount = 0.00;
            String TXRETaxCode = "GST(TX-RE)";

            double totalAJPTaxAmount = 0.00;
            double totalAJPAmountExcludingGST = 0.00;
            String AJPTaxCode = "GST(AJP)";
            
            double totalTXCGTaxAmount = 0.00;
            double totalTXCGAmountExcludingGST = 0.00;
            String TXCGTaxCode = Constants.MALAYSIAN_GST_TX_CG_TAX_CODE;

            double totalIMCGAmountExcludingGST = 0;
            double totalIMCGTaxAmount = 0.00;
            String IMCGTaxCode = Constants.MALAYSIAN_GST_IM_CG_CODE;

//            Set purchaseTaxSet = new HashSet();
//            purchaseTaxSet.add("GST(TX)");
//            purchaseTaxSet.add("GST(IM)");
//            purchaseTaxSet.add("GST(IS)");
//            purchaseTaxSet.add("GST(BL)");
//            purchaseTaxSet.add("GST(NR)");
//            purchaseTaxSet.add("GST(ZP)");
//            purchaseTaxSet.add("GST(EP)");
//            purchaseTaxSet.add("GST(OP)");
//            purchaseTaxSet.add("GST(TX-E43)");
//            purchaseTaxSet.add("GST(TX-N43)");
//            purchaseTaxSet.add("GST(TX-RE)");
//            purchaseTaxSet.add("GST(GP)");
//            purchaseTaxSet.add("GST(AJP)");

//            Set importedTaxSet = new HashSet();
//            importedTaxSet.add("GST(IM)");
//            importedTaxSet.add("ME");

            for (int jsonVal = 0; jsonVal < purchasejArr.length(); jsonVal++) {
                JSONObject purchaseObj = purchasejArr.getJSONObject(jsonVal);
                String taxCode = purchaseObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
                double invamt = purchaseObj.getDouble("invamt");
                double invtaxamount = purchaseObj.getDouble("invtaxamount");

                if (TXTaxCode.equalsIgnoreCase(taxCode)) {
                    totalTXAmountExcludingGST += invamt - invtaxamount;
                    totalTXTaxAmount += invtaxamount;
                }

                if (IMTaxCode.equalsIgnoreCase(taxCode)) {
                    totalIMAmountExcludingGST += invamt - invtaxamount;
                    totalIMTaxAmount += invtaxamount;
                }

                if (ISTaxCode.contains(taxCode)) {
                    totalISAmountExcludingGST += invamt - invtaxamount;
                }

                //TX-E43 renamed as TX-IES
                if (TXIESTaxCode.equalsIgnoreCase(taxCode)) {
                    totalTXIESAmountExcludingGST += invamt - invtaxamount;
                    totalTXIESTaxAmount += invtaxamount;
                }

                if (TXRETaxCode.equalsIgnoreCase(taxCode)) {
                    totalTXREAmountExcludingGST += invamt - invtaxamount;
                    totalTXRETaxAmount += invtaxamount;
                }

                if (AJPTaxCode.equalsIgnoreCase(taxCode)) {
                    totalAJPAmountExcludingGST += invamt - invtaxamount;
                    totalAJPTaxAmount += invtaxamount;
                }
                if(TXFRSTaxCode.equalsIgnoreCase(taxCode)){
                    totalTXFRSAmountExcludingGST += invamt - invtaxamount;
                    totalTXFRSTaxAmount +=invtaxamount;
                }
                if (TXCGTaxCode.equalsIgnoreCase(taxCode)) {
                    totalTXCGAmountExcludingGST += invamt - invtaxamount;
                    totalTXCGTaxAmount += invtaxamount;
                }
                if (gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version && IMCGTaxCode.equalsIgnoreCase(taxCode)) {
                    totalIMCGAmountExcludingGST += invamt - invtaxamount;
                    totalIMCGTaxAmount += invtaxamount;
                }
            }

            requestParams.put("issales", true);
            requestParams.put("isSalesTax", true);
            JSONArray salesjArr = getCalculatedTaxGST(requestParams, fileType);

            double totalSRAmountExcludingGST = 0.00; // item #1
            double totalSRTaxAmount = 0.00;
            String SRTaxCode = "GST(SR)";

            double totalDSAmountExcludingGST = 0.00; // item #1
            double totalDSTaxAmount = 0.00;
            String DSTaxCode = "GST(DS)";

            double totalZRLAmount = 0.00; // item #1
            String ZRLTaxCode = "GST(ZRL)";

            double totalZREAmount = 0.00; // item #1
            String ZRETaxCode = "GST(ZRE)";

//            double totalES43Amount = 0.00; // item #1
//            String ES43TaxCode = "GST(ES43)";

            //ES43 renamed as IES
            double totalIESAmount = 0.00;
            String IESTaxCode = Constants.MALAYSIAN_GST_IES_TAX_CODE;
            
            double totalZDAAmount = 0.00;
            String ZDATaxCode = Constants.MALAYSIAN_GST_ZDA_TAX_CODE;
            
            double totalSRMSTaxAmount = 0.00;
            double totalSRMSAmountExcludingGST = 0.00;
            String SRMSTaxCode = Constants.MALAYSIAN_GST_SR_MS_TAX_CODE;

            double totalSRJWSAmount = 0.00;
            String SRJWSTaxCode = Constants.MALAYSIAN_GST_SR_JWS_TAX_CODE;
            
            double totalNTXAmount = 0.00;
            String NTXTaxCode = Constants.MALAYSIAN_GST_NTX_TAX_CODE;

            double totalESAmount = 0.00; // item #1
            String ESTaxCode = "GST(ES)";

            double totalRSAmount = 0.00; // item #1
            String RSTaxCode = "GST(RS)";

            double totalAJSTaxAmount = 0.00; // item #1
            double totalAJSAmountExcludingGST = 0.00; // item #1
            String AJSTaxCode = "GST(AJS)";

            double totalValueofOtherSupplies = 0.00;
            String OSTaxCode = Constants.MALAYSIAN_GST_OS_TAX_CODE;
            String GSTaxCode = Constants.MALAYSIAN_GST_GS_TAX_CODE;
            String OSTXMTaxCode = Constants.MALAYSIAN_GST_OS_TXM_TAX_CODE;

//            Set salesTaxSet = new HashSet();
//            salesTaxSet.add("GST(DS)");
//            salesTaxSet.add("GST(SR)");
//            salesTaxSet.add("GST(ZRL)");
//            salesTaxSet.add("GST(ZRE)");
//            salesTaxSet.add("GST(ES43)");
//            salesTaxSet.add("GST(OS)");
//            salesTaxSet.add("GST(ES)");
//            salesTaxSet.add("GST(RS)");
//            salesTaxSet.add("GST(GS)");
//            salesTaxSet.add("GST(AJS)");

            for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
                JSONObject salesObj = salesjArr.getJSONObject(jsonVal);
                String taxCode = salesObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
                double invamt = salesObj.getDouble("invamt");
                double invtaxamount = salesObj.getDouble("invtaxamount");

                if (SRTaxCode.equalsIgnoreCase(taxCode)) {
                    totalSRAmountExcludingGST += invamt - invtaxamount;
                    totalSRTaxAmount += invtaxamount;
                }
                if (DSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalDSAmountExcludingGST += invamt - invtaxamount;
                    totalDSTaxAmount += invtaxamount;
                }
                if (ZRLTaxCode.equalsIgnoreCase(taxCode)) {
                    totalZRLAmount += invamt;
                }
                if (ZRETaxCode.equalsIgnoreCase(taxCode)) {
                    totalZREAmount += invamt;
                }
                //ES43 renamed as IES
                if (IESTaxCode.equalsIgnoreCase(taxCode)) {
                    totalIESAmount += invamt;
                }
                if (ESTaxCode.equalsIgnoreCase(taxCode)) {
                    totalESAmount += invamt;
                }
                if (RSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalRSAmount += invamt;
                }
                if (AJSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalAJSAmountExcludingGST += invamt - invtaxamount;
                    totalAJSTaxAmount += invtaxamount;
                }
                if (ZDATaxCode.equalsIgnoreCase(taxCode)) {
                    totalZDAAmount += invamt;
                }
                if (SRMSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalSRMSAmountExcludingGST += invamt - invtaxamount;
                    totalSRMSTaxAmount += invtaxamount;
                }
                if ((gstGuideReviseConfig == Constants.GSTGuideDec2017_Version) && SRJWSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalSRJWSAmount += invamt;        // Total amount included in 5a for tax SR-JWS.
                }
                if ((gstGuideReviseConfig == Constants.GSTGuideDec2017_Version) && NTXTaxCode.equalsIgnoreCase(taxCode)) {
                    totalNTXAmount += invamt;
                }
                if ((gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version) && (OSTaxCode.equalsIgnoreCase(taxCode) || GSTaxCode.equalsIgnoreCase(taxCode) || OSTXMTaxCode.equalsIgnoreCase(taxCode) || NTXTaxCode.equalsIgnoreCase(taxCode) || SRJWSTaxCode.equalsIgnoreCase(taxCode))) {
                    totalValueofOtherSupplies += invamt;//Total Value of Other Supplies.
                }
            }

            // Calculating Customer Invoices Adjustment Amount
            double salesInvoiceClaimedGST = 0;
            double salesInvoiceClaimedAmtExcludingGST = 0;
            double salesInvoiceRecoveredAmtExcludingGST = 0;
            double salesInvoiceRecoveredGST = 0;
            JSONArray industryCodeJsonArray = new JSONArray(); // Jsut Temp parameter for function
            List<Double> doAdjsMent = getAppliedDeliveryOrders(request , industryCodeJsonArray);

            double totalAppliedAmountExcludingGST = doAdjsMent.get(0);
            double totalAppliedTaxAmount = doAdjsMent.get(1);

//            if (isAdvanceSearch) {
//                requestParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                requestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.journalEntrySearchJson));
//                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
//            }
//            List<Double> adjsMentTaxes = getAdjustmentTaxes(requestParams);
//
//            double inputTaxAdjustment = adjsMentTaxes.get(0);
//            double outputTaxAdjustment = adjsMentTaxes.get(1);
            
            List<Double> ciAdjsMent = getBadDebtClaimedInvoices(request);

            salesInvoiceClaimedAmtExcludingGST += ciAdjsMent.get(0);
            salesInvoiceClaimedGST += ciAdjsMent.get(1);

            totalAJPAmountExcludingGST += salesInvoiceClaimedAmtExcludingGST;
            totalAJPTaxAmount += salesInvoiceClaimedGST;

            // Calculating P Invoices Adjustment Amount
            List<Double> ciAdjpMent = getBadDebtRecoveredInvoices(request , industryCodeJsonArray);

            salesInvoiceRecoveredAmtExcludingGST += ciAdjpMent.get(0);
            salesInvoiceRecoveredGST += ciAdjpMent.get(1);

            totalAJSAmountExcludingGST += salesInvoiceRecoveredAmtExcludingGST;
            totalAJSTaxAmount += salesInvoiceRecoveredGST;

            // Calculating Customer Invoices Adjustment Amount
            List<Double> ciAdjs1Ment = getBadDebtClaimedPurchaseInvoices(request,industryCodeJsonArray);

            totalAJSTaxAmount += ciAdjs1Ment.get(1);

            // Calculating P Invoices Adjustment Amount
            List<Double> ciAdjp1Ment = getBadDebtPurchaseRecoveredInvoices(request);

            totalAJPTaxAmount += ciAdjp1Ment.get(1);

            List<Double> importServiceTaxList = getImportedServicesInvoices(request , industryCodeJsonArray);

            totalDSAmountExcludingGST += importServiceTaxList.get(0);
            totalDSTaxAmount += importServiceTaxList.get(1);

            totalTXAmountExcludingGST += importServiceTaxList.get(0);
            totalTXTaxAmount += importServiceTaxList.get(1);

            HashMap<String, Object> retailPurchases = getRetailPurchases(request);
            double retailPurchaseAmountExcludingTax = (Double) retailPurchases.get("retailPurchaseAmountExcludingTax");
            double retailPurchaseTaxAmount = (Double) retailPurchases.get("retailPurchaseTaxAmount");

            // 5a-c1
            String totalStandardRatedSupply = authHandler.formattedAmount(authHandler.round((totalSRAmountExcludingGST + totalDSAmountExcludingGST + totalAppliedAmountExcludingGST + totalSRMSAmountExcludingGST + totalSRJWSAmount), companyid), companyid);

            //5b-c2
            String totalStandardRatedSupplyTax = authHandler.formattedAmount(authHandler.round((totalSRTaxAmount + totalDSTaxAmount + totalAJSTaxAmount + totalAppliedTaxAmount + totalSRMSTaxAmount), companyid), companyid);

            // 6a-c3
            double totalStandardRatedAcquisitionAmountExcludingGST = totalTXAmountExcludingGST + totalIMAmountExcludingGST + totalTXIESAmountExcludingGST + totalTXREAmountExcludingGST + retailPurchaseAmountExcludingTax + totalTXFRSAmountExcludingGST + totalTXCGAmountExcludingGST + totalIMCGAmountExcludingGST;
            String totalStandardRatedAcquisitionAmountExcludingGSTStr = authHandler.formattedAmount(authHandler.round((totalStandardRatedAcquisitionAmountExcludingGST), companyid), companyid);

            // 6b-c4
            double totalStandardRatedAcquisitionTaxAmount = totalTXTaxAmount + totalIMTaxAmount + totalTXIESTaxAmount + totalTXRETaxAmount + totalAJPTaxAmount + retailPurchaseTaxAmount + totalTXFRSTaxAmount + totalTXCGTaxAmount + totalIMCGTaxAmount;
            String totalStandardRatedAcquisitionTaxAmountStr = authHandler.formattedAmount(authHandler.round((totalStandardRatedAcquisitionTaxAmount), companyid), companyid);

            //b5
            int carryForwardRefund = carryForward ? 1 : 0; //If carryForward is true then value in TAP file should be 1 else 0 ERP-40245. Please refer TAP file format GST guide.

            double totalExemptedSupplies = totalIESAmount + totalESAmount;
            String totalExemptedSuppliesStr = authHandler.formattedAmount(authHandler.round((totalExemptedSupplies), companyid), companyid);

            //Total Value of Zero-rated Supplies = totalZRLAmount + totalNTXAmount
            String totalZeroRateSupplyAmountStr = authHandler.formattedAmount(authHandler.round((totalZRLAmount + totalNTXAmount), companyid), companyid);

            //Total Value of Export Supplies = totalZREAmount + totalZDAAmount
            String totalExportSupplyAmountStr = authHandler.formattedAmount(authHandler.round((totalZREAmount + totalZDAAmount), companyid), companyid);

            String totalRSAmountStr = authHandler.formattedAmount(authHandler.round((totalRSAmount), companyid), companyid);

            String totalISAmountExcludingGSTStr = authHandler.formattedAmount(authHandler.round((totalISAmountExcludingGST), companyid), companyid);

            double totalValueOfCapitalGoodsAcquiredExcludingGST = getCapitalGoodsAcquired(request);

            String totalValueOfCapitalGoodsAcquiredExcludingGSTStr = authHandler.formattedAmount(authHandler.round((totalValueOfCapitalGoodsAcquiredExcludingGST + totalIMCGAmountExcludingGST), companyid), companyid);

            String totalBadDebtClaimedExcludingGST = authHandler.formattedAmount(authHandler.round((salesInvoiceClaimedAmtExcludingGST), companyid), companyid);

            String totalBadDebtRecoveredExcludingGST = authHandler.formattedAmount(authHandler.round((salesInvoiceRecoveredAmtExcludingGST), companyid), companyid);

            String totalValueofOtherSuppliesStr = authHandler.formattedAmount(authHandler.round((totalValueofOtherSupplies), companyid), companyid);

//            String st = "c1|c2|c3|c4|b5|c6|c7|c8|c9|c10|c11|c12|c13|i14|c15|i16|c17|i18|c19|i20|c21|i22|c23|c24";
            /*
            *Handle MSIC Code In GST TAP return File.ERP-40361
            */
            double MSIC1Value = 0.00;
            double MSIC2Value = 0.00;
            double MSIC3Value = 0.00;
            double MSIC4Value = 0.00;
            double MSIC5Value = 0.00;
            double MSICOtherValue = 0.00;

            String MSIC1ValueStr = authHandler.formattedAmount(authHandler.round(MSIC1Value, companyid), companyid);
            String MSIC2ValueStr = authHandler.formattedAmount(authHandler.round(MSIC2Value, companyid), companyid);
            String MSIC3ValueStr = authHandler.formattedAmount(authHandler.round(MSIC3Value, companyid), companyid);
            String MSIC4ValueStr = authHandler.formattedAmount(authHandler.round(MSIC4Value, companyid), companyid);
            String MSIC5ValueStr = authHandler.formattedAmount(authHandler.round(MSIC5Value, companyid), companyid);
            String MSICOtherValueStr = authHandler.formattedAmount(authHandler.round(MSICOtherValue, companyid), companyid);
            
            String reportString = totalStandardRatedSupply + "|"//c1
                    + totalStandardRatedSupplyTax + "|"//c2
                    + totalStandardRatedAcquisitionAmountExcludingGSTStr + "|"//c3
                    + totalStandardRatedAcquisitionTaxAmountStr + "|"//c4
                    + carryForwardRefund + "|"//b5
                    + totalZeroRateSupplyAmountStr + "|"//c6
                    + totalExportSupplyAmountStr + "|"//c7
                    + totalExemptedSuppliesStr + "|"//c8
                    + totalRSAmountStr + "|"//c9
                    + totalISAmountExcludingGSTStr + "|"//c10
                    + ((gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version) ? totalValueofOtherSuppliesStr + "|" : "")
                    + totalValueOfCapitalGoodsAcquiredExcludingGSTStr + "|"//c11
                    + totalBadDebtClaimedExcludingGST + "|"//c12
                    + totalBadDebtRecoveredExcludingGST + "|"//c13
                    + "00000" + "|"//i14
                    + MSIC1ValueStr + "|"//c15
                    + "00000" + "|"//i16
                    + MSIC2ValueStr + "|"//c17
                    + "00000" + "|"//i18
                    + MSIC3ValueStr + "|"//c19
                    + "00000" + "|"//i20
                    + MSIC4ValueStr + "|"//c21
                    + "00000" + "|"//i22
                    + MSIC5ValueStr + "|"//c23
                    + MSICOtherValueStr;//c24

            report.append(reportString + "\r\n");

            baos.write(report.toString().getBytes());
            response.setHeader("Content-Disposition", "attachment; filename=\"" + fileName + "\"");
            response.setContentType("application/octet-stream");
            response.setContentLength(baos.size());
            response.getOutputStream().write(baos.toByteArray());
            response.getOutputStream().flush();
            response.getOutputStream().close();

        } catch (ParseException | JSONException | IOException | SessionExpiredException | ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView exportMalasianGSTForm3CSV(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        ByteArrayOutputStream os = null;
        try {
            
            String filetype = !StringUtil.isNullOrEmpty(request.getParameter("FileType")) ? (String) request.getParameter("FileType") : "";
            boolean isTapreturn = !StringUtil.isNullOrEmpty(request.getParameter("tapReturnFile")) ? Boolean.parseBoolean(request.getParameter("tapReturnFile")) : false;
            boolean carryForward = !StringUtil.isNullOrEmpty(request.getParameter("carryForward"))?Boolean.parseBoolean(request.getParameter("carryForward")):false; //carryForwardRefund default value should be false. Refer - ERP-40245
            StringBuilder failedRecords = new StringBuilder();
            JSONObject msicsJosn = new JSONObject();

            String companyid = sessionHandlerImpl.getCompanyid(request);
            String rec = "";

            rec += "\"Item\"," + "\"Amount\"";

            KwlReturnObject result = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) result.getEntityList().get(0);

            result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);

            String fileType = "";
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            request.setAttribute("issales", true);
            String withoutinventory = request.getParameter("withoutinventory");
           
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("endDate", endDate);
            requestParams.put("startDate", startDate);

            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put("excludeRetailPurchaseInvoice", true);//in case of Malaysian Company Retail Purchase invoice will not be included at here as we will deal with it seperately
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                requestParams.put("gstFlag", true);
                request.setAttribute("filterCurrency", Constants.SGDID);
            }

            requestParams.put("issales", false);
            requestParams.put("isSalesTax", false);
            requestParams.put("locale", RequestContextUtils.getLocale(request));
            
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
            }
//            boolean isAdvanceSearch = requestParams.containsKey(Constants.isAdvanceSearch) ? (Boolean) requestParams.get(Constants.isAdvanceSearch) : false;
            
            int gstGuideReviseConfig = accGstService.getGSTGuideVersion(requestParams);
            ExtraCompanyPreferences extrapref = null;
            String companyName = company.getCompanyName();
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
                if (extrapref != null && extrapref.isIsMultiEntity() && !StringUtil.isNullOrEmpty(searchJson)) {
                    String searchjson = request.getParameter(Constants.Acc_Search_Json);
                    companyName = exportDaoObj.getEntityDimensionNameforExport(searchjson, company);
                }
            }
            
            double gstSuspendedTax = 0;
            double DmR_Variable_T = 0.0d;   // T = SR + ZRL + ZDA + ZRE + DS + RS + GS + OS-TXM + NTX
            double DmR_Variable_E = 0.0d;   // E = ES
            double DmR_Variable_O = 0.0d;
            double DmR_figure = 0.0d;
            double DmR_figureInPercentage = 0.0d;
            double IRR_figureInPercentage = 0.0d;
            boolean DmRQualify = false;

            requestParams.put("issales", true);
            requestParams.put("isSalesTax", true);
            requestParams.put("isForExport", true);
            JSONArray salesjArr = getCalculatedTaxGST(requestParams, fileType);

            double totalSRAmountExcludingGST = 0.00; // item #1
            double totalSRTaxAmount = 0.00;
            String SRTaxCode = "GST(SR)";

            double totalDSAmountExcludingGST = 0.00; // item #1
            double totalDSTaxAmount = 0.00;
            String DSTaxCode = "GST(DS)";
            
            double totalZRLAmount = 0.00; // item #1
            String ZRLTaxCode = "GST(ZRL)";

            double totalZREAmount = 0.00; // item #1
            String ZRETaxCode = "GST(ZRE)";

            //ES43 renamed as IES.
            double totalIESAmount = 0.00;
            String IESTaxCode = Constants.MALAYSIAN_GST_IES_TAX_CODE;

            double totalSRMSAmountExcludingGST = 0.00;
            double totalSRMSTaxAmount = 0.00;
            String SRMSTaxCode = Constants.MALAYSIAN_GST_SR_MS_TAX_CODE;

            double totalSRJWSAmount = 0.00;
            String SRJWSTaxCode = Constants.MALAYSIAN_GST_SR_JWS_TAX_CODE;
            
            double totalZDAAmount = 0.00;
            String ZDATaxCode = Constants.MALAYSIAN_GST_ZDA_TAX_CODE;
            
            double totalNTXAmount = 0.00;
            double totalValueofOtherSupplies = 0.00;
            
            String NTXTaxCode = Constants.MALAYSIAN_GST_NTX_TAX_CODE;
            String OSTaxCode = Constants.MALAYSIAN_GST_OS_TAX_CODE;
            String GSTaxCode = Constants.MALAYSIAN_GST_GS_TAX_CODE;
            String OSTXMTaxCode = Constants.MALAYSIAN_GST_OS_TXM_TAX_CODE;
            
            double totalESAmount = 0.00; // item #1
            String ESTaxCode = "GST(ES)";

            double totalRSAmount = 0.00; // item #1
            String RSTaxCode = "GST(RS)";

            double totalAJSTaxAmount = 0.00; // item #1
            double totalAJSAmountExcludingGST = 0.00; // item #1
            String AJSTaxCode = "GST(AJS)";
            
            for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
                JSONObject salesObj = salesjArr.getJSONObject(jsonVal);
                String taxCode = salesObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
                double invamt = salesObj.getDouble("invamt");
                double invtaxamount = salesObj.getDouble("invtaxamount");

                if (SRTaxCode.equalsIgnoreCase(taxCode)) {
                    totalSRAmountExcludingGST += invamt - invtaxamount;
                    totalSRTaxAmount += invtaxamount;
                     DmR_Variable_T += invamt - invtaxamount;
                }
                if (DSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalDSAmountExcludingGST += invamt - invtaxamount;
                    totalDSTaxAmount += invtaxamount;
                     DmR_Variable_T += invamt - invtaxamount;
                }
                if (ZRLTaxCode.equalsIgnoreCase(taxCode)) {
                    totalZRLAmount += invamt;
                     DmR_Variable_T += invamt - invtaxamount;
                }
                if (ZRETaxCode.equalsIgnoreCase(taxCode)) {
                    totalZREAmount += invamt;
                     DmR_Variable_T += invamt - invtaxamount;
                }
                //ES43 renamed as IES.
                if (IESTaxCode.equalsIgnoreCase(taxCode)) {
                    totalIESAmount += invamt;
                }
                if (ESTaxCode.equalsIgnoreCase(taxCode)) {
                    totalESAmount += invamt;
                     DmR_Variable_E += invamt - invtaxamount;
                }
                if (RSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalRSAmount += invamt;
                     DmR_Variable_T += invamt - invtaxamount;
                }
                if (AJSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalAJSAmountExcludingGST += invamt - invtaxamount;
                    totalAJSTaxAmount += invtaxamount;
                }
                if (SRMSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalSRMSAmountExcludingGST += invamt - invtaxamount;
                    totalSRMSTaxAmount += invtaxamount;
                }
                if ((gstGuideReviseConfig == Constants.GSTGuideDec2017_Version) && SRJWSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalSRJWSAmount += invamt;        // Total amount included in 5a for tax SR-JWS.
                }
                if (ZDATaxCode.equalsIgnoreCase(taxCode)) {
                    totalZDAAmount += invamt;
                     DmR_Variable_T += invamt - invtaxamount;
                }
                if (NTXTaxCode.equalsIgnoreCase(taxCode)) {
                    if (gstGuideReviseConfig == Constants.GSTGuideDec2017_Version) {
                    totalNTXAmount += invamt;
                    }
                     DmR_Variable_T += invamt - invtaxamount;
                }
                if (GSTaxCode.equalsIgnoreCase(taxCode)) {
                    DmR_Variable_T += invamt - invtaxamount;
                }
                if (OSTXMTaxCode.equalsIgnoreCase(taxCode)) {
                    DmR_Variable_T += invamt - invtaxamount;
                }
            
                if ((gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version) && (OSTaxCode.equalsIgnoreCase(taxCode) || GSTaxCode.equalsIgnoreCase(taxCode) || OSTXMTaxCode.equalsIgnoreCase(taxCode) || NTXTaxCode.equalsIgnoreCase(taxCode) || SRJWSTaxCode.equalsIgnoreCase(taxCode))) {
                    totalValueofOtherSupplies += invamt;//Total Value of Other Supplies.
                }
                if (salesObj.has(Constants.MSIC_DETAIS_JSON)) {
                    JSONArray jarray = salesObj.getJSONArray(Constants.MSIC_DETAIS_JSON);
                    if (jarray != null) {
                        for (int i = 0; i < jarray.length(); i++) {
                            JSONObject jobject = jarray.getJSONObject(i);
                            String msiccode = jobject.optString(Constants.MSIC_CODE, "");
                            double industrytax = jobject.optDouble(Constants.MSIC_INVTAXAMT, 0);
                            if (msicsJosn.has(msiccode)) {
                                double industrytaxprsent = msicsJosn.optDouble(msiccode, 0); // Current total plus added amount entry
                                msicsJosn.put(msiccode, industrytax + industrytaxprsent);
                            } else {
                                msicsJosn.put(msiccode, industrytax);
                            }
                        }
                    }
                }
           }

            // Calculating Customer Invoices Adjustment Amount
            double salesInvoiceClaimedGST = 0;
            double salesInvoiceClaimedAmtExcludingGST = 0;
            double salesInvoiceRecoveredAmtExcludingGST = 0;
            double salesInvoiceRecoveredGST = 0;
            JSONArray industryCodeJsonArray = new JSONArray();
            List<Double> doAdjsMent = getAppliedDeliveryOrders(request ,industryCodeJsonArray);

            double totalAppliedAmountExcludingGST = doAdjsMent.get(0);
            double totalAppliedTaxAmount = doAdjsMent.get(1);
            DmR_Variable_T += doAdjsMent.get(2);
            
            boolean isProperPeriodSelectedForDmRIRR = false;
            Calendar cal = Calendar.getInstance();
            cal.setTime(startDate);
            if (cal.getActualMinimum(Calendar.DAY_OF_MONTH) == cal.get(Calendar.DAY_OF_MONTH)) {
                cal.setTime(endDate);
                if (cal.getActualMaximum(Calendar.DAY_OF_MONTH) == cal.get(Calendar.DAY_OF_MONTH)) {
                    isProperPeriodSelectedForDmRIRR = true;
                }
            }
            if (isProperPeriodSelectedForDmRIRR) {
                int monthMultiplyFactor = 1;
                Calendar startDateCal = Calendar.getInstance();
                Calendar endDateCal = Calendar.getInstance();
                startDateCal.setTime(startDate);
                endDateCal.setTime(endDate);
                int differenceInYears = endDateCal.get(Calendar.YEAR) - startDateCal.get(Calendar.YEAR);
                int actualDifferenceInYears = differenceInYears;
                int startDateMonth = startDateCal.get(Calendar.MONTH);
                int endDateMonth = endDateCal.get(Calendar.MONTH);
                /*
                 * ERP-21589 Calculation of monthMultiplyFactor it is for
                 * calculating the period of months user has selected. DmR and IRR
                 * will be calculated according to period of months selected.
                 * Example of for counting the period in months - Suppose start date
                 * = 1st April and end date is 30th Sept. Here difference in years
                 * will be calculated as (8)-(3) = 5 but we are including april and
                 * september in date period. So total months will be 6 . Therefore
                 * we are adding 1 to calculated value. Example 2 - Start date = 1st
                 * april 2015, end date = 30th Sept 2017 Here year difference = 2.
                 * We are taking actual year diff = 2-1= 1. we will calculate the
                 * total month period as following- 1st April 2015 to 31st Dec 2015
                 * = 9 months 12 months of year 2016 1st jan 2017 to 30th sept 2017
                 * = 10 total months = 9+12+10 = 28
                 */
                if (differenceInYears == 0) {
                    monthMultiplyFactor = (endDateMonth - startDateMonth + 1); // +1 is for calculating period with including start and end date months
                } else {
                    // calculating the months period when start date and end dates lies between different calendar years.
                    actualDifferenceInYears = actualDifferenceInYears - 1;
                    monthMultiplyFactor = ((11 - startDateMonth + 1) + (actualDifferenceInYears * 12) + (endDateMonth + 1));
                }
                DmR_figure = (DmR_Variable_E) / (DmR_Variable_E + DmR_Variable_T);
                DmR_figureInPercentage = DmR_figure * 100;
                DmR_figureInPercentage = authHandler.round(DmR_figureInPercentage, companyid);
                if (totalESAmount > (monthMultiplyFactor * Constants.DmR_totalESPercentSupplies_Limit)) {
                    DmRQualify = false;
                } else {
                    if (DmR_figureInPercentage > Constants.DmR_figureInPercentage_Limit || DmR_figureInPercentage == 0) {
                        DmRQualify = false;
                    } else {
                        DmRQualify = true;
                    }
                }
                if (DmRQualify) {
                    IRR_figureInPercentage = 100;
                } else {
                    IRR_figureInPercentage = ((DmR_Variable_T - DmR_Variable_O) * 100) / (DmR_Variable_T + DmR_Variable_E - DmR_Variable_O);
                    IRR_figureInPercentage = authHandler.round(IRR_figureInPercentage, companyid);
                }
            }

            requestParams.put("issales", false);
            requestParams.put("isSalesTax", false);
            JSONArray purchasejArr = getCalculatedTaxGST(requestParams, fileType);

            double totalTXAmountExcludingGST = 0.00;
            double totalTXTaxAmount = 0.00;
            String TXTaxCode = "GST(TX)";

            double totalIMAmountExcludingGST = 0.00;
            double totalIMTaxAmount = 0.00;
            String IMTaxCode = "GST(IM)";
            
            double totalISAmountExcludingGST = 0.00;
            String ISTaxCode = "GST(IS)";

            //TX-E43 renamed as TX-IES.
            double totalTXIESAmountExcludingGST = 0.00;
            double totalTXIESTaxAmount = 0.00;
            String TXIESTaxCode = Constants.MALAYSIAN_GST_TX_IES_TAX_CODE;
            
            //TX-N43 renamed as TX-ES.
            double totalTXESAmountExcludingGST = 0.00;
            double totalTXESTaxAmount = 0.00;
            String TXESTaxCode = Constants.MALAYSIAN_GST_TX_ES_TAX_CODE;

            double totalTXFRSAmountExcludingGST = 0.00;
            double totalTXFRSTaxAmount = 0.00;
            String TXFRSTaxCode = Constants.MALAYSIAN_GST_TX_FRS_TAX_CODE;
            
            double totalTXREAmountExcludingGST = 0.00;
            double totalTXRETaxAmount = 0.00;
            String TXRETaxCode = "GST(TX-RE)";

            double totalAJPTaxAmount = 0.00;
            double totalAJPAmountExcludingGST = 0.00;
            String AJPTaxCode = "GST(AJP)";

            double totalTXCGAmountExcludingGST = 0.00;
            double totalTXCGTaxAmount = 0.00;
            String TXCGTaxCode = Constants.MALAYSIAN_GST_TX_CG_TAX_CODE;

            double totalIMCGAmountExcludingGST = 0;
            double totalIMCGTaxAmount = 0.00;
            String IMCGTaxCode = Constants.MALAYSIAN_GST_IM_CG_CODE;

            for (int jsonVal = 0; jsonVal < purchasejArr.length(); jsonVal++) {
                JSONObject purchaseObj = purchasejArr.getJSONObject(jsonVal);
                String taxCode = purchaseObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
                double invamt = purchaseObj.getDouble("invamt");
                double invtaxamount = purchaseObj.getDouble("invtaxamount");

                if (TXTaxCode.equalsIgnoreCase(taxCode)) {
                    totalTXAmountExcludingGST += invamt - invtaxamount;
                    totalTXTaxAmount += invtaxamount;
                }
                if (IMTaxCode.equalsIgnoreCase(taxCode)) {
                    totalIMAmountExcludingGST += invamt - invtaxamount;
                    totalIMTaxAmount += invtaxamount;
                }
                if (ISTaxCode.contains(taxCode)) {
                    totalISAmountExcludingGST += invamt - invtaxamount;
                    gstSuspendedTax += (invamt * 6 / 100);
                }
                //TX-E43 renamed as TX-IES.
                if (TXIESTaxCode.equalsIgnoreCase(taxCode)) {
                    totalTXIESAmountExcludingGST += invamt - invtaxamount;
                    totalTXIESTaxAmount += invtaxamount;
                }
                if (TXRETaxCode.equalsIgnoreCase(taxCode)) {
                    totalTXREAmountExcludingGST += invamt - invtaxamount;
//                    totalTXRETaxAmount += invtaxamount;
                    totalTXRETaxAmount += (invtaxamount * IRR_figureInPercentage) / 100;
                }
                if (AJPTaxCode.equalsIgnoreCase(taxCode)) {
                    totalAJPAmountExcludingGST += invamt - invtaxamount;
                    totalAJPTaxAmount += invtaxamount;
                }
                if (TXFRSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalTXFRSAmountExcludingGST += invamt - invtaxamount;
                    totalTXFRSTaxAmount += invtaxamount;
                }
                if (DmRQualify && TXESTaxCode.equalsIgnoreCase(taxCode)) {//TX-ES tax Only include once de minimis Rule is fulfilled
                    totalTXESAmountExcludingGST += invamt - invtaxamount;
                    totalTXESTaxAmount += invtaxamount;
                }
                if (TXCGTaxCode.equalsIgnoreCase(taxCode)) {
                    totalTXCGAmountExcludingGST += invamt - invtaxamount;
                    totalTXCGTaxAmount += invtaxamount;
                }
                if (gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version && IMCGTaxCode.equalsIgnoreCase(taxCode)) {
                    totalIMCGAmountExcludingGST += invamt - invtaxamount;
                    totalIMCGTaxAmount += invtaxamount;
                }
            }
//            if (isAdvanceSearch) {
//                requestParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                requestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.journalEntrySearchJson));
//            }
//            List<Double> adjsMentTaxes = getAdjustmentTaxes(requestParams);
//
//            double inputTaxAdjustment = adjsMentTaxes.get(0);
//            double outputTaxAdjustment = adjsMentTaxes.get(1);

            List<Double> ciAdjsMent = getBadDebtClaimedInvoices(request);

            salesInvoiceClaimedAmtExcludingGST += ciAdjsMent.get(0);
            salesInvoiceClaimedGST += ciAdjsMent.get(1);

            totalAJPAmountExcludingGST += salesInvoiceClaimedAmtExcludingGST;
            totalAJPTaxAmount += salesInvoiceClaimedGST;

            // Calculating P Invoices Adjustment Amount
            List<Double> ciAdjpMent = getBadDebtRecoveredInvoices(request , industryCodeJsonArray);

            salesInvoiceRecoveredAmtExcludingGST += ciAdjpMent.get(0);
            salesInvoiceRecoveredGST += ciAdjpMent.get(1);

            totalAJSAmountExcludingGST += salesInvoiceRecoveredAmtExcludingGST;
            totalAJSTaxAmount += salesInvoiceRecoveredGST;

            // Calculating Customer Invoices Adjustment Amount
            List<Double> ciAdjs1Ment = getBadDebtClaimedPurchaseInvoices(request,industryCodeJsonArray);

            totalAJSTaxAmount += ciAdjs1Ment.get(1);

            // Calculating P Invoices Adjustment Amount
            List<Double> ciAdjp1Ment = getBadDebtPurchaseRecoveredInvoices(request);

            totalAJPTaxAmount += ciAdjp1Ment.get(1);

            List<Double> importServiceTaxList = getImportedServicesInvoices(request,industryCodeJsonArray);

            totalDSAmountExcludingGST += importServiceTaxList.get(0);
            totalDSTaxAmount += importServiceTaxList.get(1);

            totalTXAmountExcludingGST += importServiceTaxList.get(0);
            totalTXTaxAmount += importServiceTaxList.get(1);

            /*
             * ERP-9782 : getting Free Gift JsonArray for including into the form 03 and detailed view.
             */ 
            List<Double> freeGiftJEList = getFreeGiftJEList(request,industryCodeJsonArray);
            if (!freeGiftJEList.isEmpty()) {
                totalDSAmountExcludingGST += freeGiftJEList.get(0);
                totalDSTaxAmount += freeGiftJEList.get(1);
            }
            HashMap<String, Object> retailPurchases = getRetailPurchases(request);
            double retailPurchaseAmountExcludingTax = (Double) retailPurchases.get("retailPurchaseAmountExcludingTax");
            double retailPurchaseTaxAmount = (Double) retailPurchases.get("retailPurchaseTaxAmount");

            // 5a-c1
            String totalStandardRatedSupply = authHandler.formattedAmount(authHandler.round((totalSRAmountExcludingGST + totalDSAmountExcludingGST + totalAppliedAmountExcludingGST + totalSRMSAmountExcludingGST + totalSRJWSAmount), companyid), companyid);

            //5b-c2
            String totalStandardRatedSupplyTax = authHandler.formattedAmount(authHandler.round((totalSRTaxAmount + totalDSTaxAmount + totalAJSTaxAmount + totalAppliedTaxAmount + totalSRMSTaxAmount), companyid), companyid);

            // 6a-c3
            double totalStandardRatedAcquisitionAmountExcludingGST = totalTXAmountExcludingGST + totalIMAmountExcludingGST + totalTXIESAmountExcludingGST + totalTXREAmountExcludingGST + retailPurchaseAmountExcludingTax + totalTXFRSAmountExcludingGST + totalTXESAmountExcludingGST + totalTXCGAmountExcludingGST + totalIMCGAmountExcludingGST;
            String totalStandardRatedAcquisitionAmountExcludingGSTStr = authHandler.formattedAmount(authHandler.round((totalStandardRatedAcquisitionAmountExcludingGST), companyid), companyid);

            // 6b-c4
            double totalStandardRatedAcquisitionTaxAmount = totalTXTaxAmount + totalIMTaxAmount + totalTXIESTaxAmount + totalTXRETaxAmount + totalAJPTaxAmount + retailPurchaseTaxAmount + totalTXFRSTaxAmount + totalTXESTaxAmount + totalTXCGTaxAmount + totalIMCGTaxAmount;
            String totalStandardRatedAcquisitionTaxAmountStr = authHandler.formattedAmount(authHandler.round((totalStandardRatedAcquisitionTaxAmount), companyid), companyid);
            
             //b5
            int carryForwardRefund = carryForward ? 1 : 0; //If carryForward is true then value in TAP file should be 1 else 0 ERP-40245. Please refer TAP file format GST guide.

            double totalExemptedSupplies = totalIESAmount + totalESAmount;
            String totalExemptedSuppliesStr = authHandler.formattedAmount(authHandler.round((totalExemptedSupplies), companyid), companyid);
            
             //Total Value of Zero-rated Supplies = totalZRLAmount + totalNTXAmount
            String totalZeroRateSupplyAmountStr = authHandler.formattedAmount(authHandler.round((totalZRLAmount + totalNTXAmount), companyid), companyid);
            
            //Total Value of Export Supplies = totalZREAmount + totalZDAAmount
            String totalExportSupplyAmountStr = authHandler.formattedAmount(authHandler.round((totalZREAmount + totalZDAAmount), companyid), companyid);
            
            
            String totalRSAmountStr = authHandler.formattedAmount(authHandler.round((totalRSAmount), companyid), companyid);
            
            //Goods Imported Under Approved Trade Scheme
            String totalISAmountExcludingGSTStr = authHandler.formattedAmount(authHandler.round((totalISAmountExcludingGST), companyid), companyid);

            
            double totalValueOfCapitalGoodsAcquiredExcludingGST = getCapitalGoodsAcquired(request);
            String totalValueOfCapitalGoodsAcquiredExcludingGSTStr = authHandler.formattedAmount(authHandler.round((totalValueOfCapitalGoodsAcquiredExcludingGST + totalIMCGAmountExcludingGST), companyid), companyid);
            
            String totalBadDebtClaimedExcludingGST = authHandler.formattedAmount(authHandler.round((salesInvoiceClaimedAmtExcludingGST), companyid), companyid);
            
            String totalBadDebtRecoveredExcludingGST = authHandler.formattedAmount(authHandler.round((salesInvoiceRecoveredAmtExcludingGST), companyid), companyid);
            
            String totalValueofOtherSuppliesStr = authHandler.formattedAmount(authHandler.round((totalValueofOtherSupplies), companyid), companyid);

            double totalOutPutTax = totalSRTaxAmount + totalDSTaxAmount + totalAJSTaxAmount + totalAppliedTaxAmount + totalSRMSTaxAmount;//totalSRTaxAmount + totalDSTaxAmount + totalAJSTaxAmount + totalSRMSTaxAmount;

            double totalInputTax = totalStandardRatedAcquisitionTaxAmount;//totalTXTaxAmount + totalIMTaxAmount + totalTXE43TaxAmount + totalTXRETaxAmount + totalAJPTaxAmount;

            double totalGSTAmountPayable = authHandler.round((totalOutPutTax - totalInputTax), companyid);
            double totalGSTAmountClaimable = authHandler.round((totalInputTax - totalOutPutTax), companyid);

            // in following both which one will be (-)ve will be make zero
            if (totalGSTAmountPayable < 0) {
                totalGSTAmountPayable = 0.00;
            } else if (totalGSTAmountClaimable < 0) {
                totalGSTAmountClaimable = 0.00;
            }

            if ((boolean) requestParams.get("isForExport") == true) {
                msicsJosn.put(Constants.MSIC_OTHRES, totalAppliedTaxAmount + salesInvoiceRecoveredAmtExcludingGST);
                msicsJosn.put(Constants.MSIC_TOTAL, totalOutPutTax);
            }

            String IRR = authHandler.formattingDecimalForAmount(IRR_figureInPercentage, companyid) + "%";
            JSONArray FormOtherdetails = new JSONArray();
            FormOtherdetails.put(msicsJosn);
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            JSONObject industryCodes = FormOtherdetails.getJSONObject(FormOtherdetails.length() - 1);
            List<Map<String, Object>> breakDownList = accReportsService.getMalaysiangstMSICCodes(paramJobj, industryCodes);
            double box15_amount = (gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version) ? totalValueofOtherSupplies : gstSuspendedTax;
            
            if(filetype.equalsIgnoreCase("csv")){
                rec += "\n" + "\"Item 5a-Total Value Of Standard Rated Supply\"," + totalStandardRatedSupply;

                rec += "\n" + "\"Item 5b-Total Output Tax (Inclusive of Tax Value on Bad Debt Recovered & other Adjustment)\"," + totalStandardRatedSupplyTax;

                rec += "\n" + "," + "";

                rec += "\n" + "\"Item 6a-Total Value Of Standard Rate and Flat Rate Acquisitions\"," + totalStandardRatedAcquisitionAmountExcludingGSTStr;

                rec += "\n" + "\"Item 6b-Total Input Tax( Inclusive of Tax Value On Bad Debt Relief\"," + totalStandardRatedAcquisitionTaxAmountStr;

                rec += "\n" + "," + "";

                rec += "\n" + "\"Item 7-GST Amount Payable (Item 5b - Item 6b)\"," + authHandler.formattedAmount(totalGSTAmountPayable, companyid);

                rec += "\n" + "\"Item 8-GST Amount Claimable (Item 6b - Item 5b)\"," + authHandler.formattedAmount(totalGSTAmountClaimable, companyid);

                rec += "\n" + "," + "";

                rec += "\n" + "\"Item 10-Total Value of Local Zero-Rated Supplies\"," + authHandler.formattedAmount(authHandler.round((totalZRLAmount + totalNTXAmount), companyid), companyid);

                rec += "\n" + "\"Item 11-Total Value of Export Supplies\"," + authHandler.formattedAmount(authHandler.round((totalZREAmount + totalZDAAmount), companyid), companyid);

                rec += "\n" + "\"Item 12-Total Value of Exempt Supplies\"," + authHandler.formattedAmount(authHandler.round((totalExemptedSupplies), companyid), companyid);

                rec += "\n" + "\"Item 13-Total Value of Supplies Granted GST Relief\"," + authHandler.formattedAmount(authHandler.round((totalRSAmount), companyid), companyid);

                rec += "\n" + "\"Item 14-Total Value of Goods Imported Under Approved Trader Scheme\"," + authHandler.formattedAmount(authHandler.round((totalISAmountExcludingGST), companyid), companyid);                

                if (gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version) {
                    rec += "\n" + "\"Item 15-Total Value of Other Supplies\"," + authHandler.formattedAmount(authHandler.round(totalValueofOtherSupplies, companyid), companyid);
                } else {
                    rec += "\n" + "\"Item 15-Total Value of GST Suspended under Item 14\"," + authHandler.formattedAmount(authHandler.round((gstSuspendedTax), companyid), companyid);
                }
                rec += "\n" + "\"Item 16-Total Value of Capital Goods Acquired\"," + authHandler.formattedAmount(authHandler.round((totalValueOfCapitalGoodsAcquiredExcludingGST + totalIMCGAmountExcludingGST), companyid), companyid);


                rec += "\n" + "\"Item 17-Total Value of Bad Debt Relief inclusive Tax\"," + authHandler.formattedAmount(authHandler.round((salesInvoiceClaimedAmtExcludingGST), companyid), companyid);

                rec += "\n" + "\"Item 18-Total Value of Bad Debt Recovered Inclusive Tax\"," + authHandler.formattedAmount(authHandler.round((salesInvoiceRecoveredAmtExcludingGST), companyid), companyid);
                 if(breakDownList.get(0)!=null){
                     for (Map<String, Object> breakDownList1 : breakDownList) {
                         double amt = 0.0;
                         if (breakDownList1.get("outputtax") != null) {
                             amt = Double.parseDouble(String.valueOf(breakDownList1.get("outputtax")));
                             breakDownList1.put("outputtax", String.valueOf(authHandler.formattedAmount(amt, companyid)));
                         }
                         if (breakDownList1.get("code") != null && breakDownList1.get("code").equals(Constants.GSTFORM03_OTHERS_KEY)) {
                             breakDownList1.put("code", "Others");
                         } else if (breakDownList1.get("code") != null && breakDownList1.get("code").equals(Constants.GSTFORM03_TOTAL_KEY)) {
                             breakDownList1.put("code", "Total");
                         }
                         if (breakDownList1.get("code") != null) {
                             rec += "\n" + "\"" + breakDownList1.get("code") + "\"," + breakDownList1.get("outputtax");
                         }
                     }
                }
                 rec += "\n" + "\"IRR\"," + IRR;
                failedRecords.append(rec);

                os = new ByteArrayOutputStream();
                os.write(failedRecords.toString().getBytes());
                response.setHeader("Content-Disposition", "attachment; filename=\"" + "GST-03" + ".csv\"");
                response.setContentType("application/octet-stream");
                response.setContentLength(os.size());
                response.getOutputStream().write(os.toByteArray());
                response.getOutputStream().flush();
                response.getOutputStream().close();
            } else if (filetype.equalsIgnoreCase("pdf")) {
//                double breakDownValue= totalAppliedTaxAmount+outputTaxAdjustment+ salesInvoiceRecoveredAmtExcludingGST;
                Map globalJasperMap = new HashMap();
                globalJasperMap.put("companyName", String.valueOf(companyName));
                globalJasperMap.put("companyAddress", company.getAddress());
                globalJasperMap.put("standardRatedSupply", authHandler.formattedCommaSeparatedAmount(Double.valueOf(totalStandardRatedSupply), companyid));
                globalJasperMap.put("totalOutputTax", authHandler.formattedCommaSeparatedAmount(Double.valueOf(totalStandardRatedSupplyTax), companyid));
                globalJasperMap.put("standardRatedAcquisition", authHandler.formattedCommaSeparatedAmount(totalStandardRatedAcquisitionAmountExcludingGST, companyid));
                globalJasperMap.put("totalInputTax", authHandler.formattedCommaSeparatedAmount(totalStandardRatedAcquisitionTaxAmount, companyid));
                globalJasperMap.put("gstAmountPayble", authHandler.formattedCommaSeparatedAmount(totalGSTAmountPayable, companyid));
                globalJasperMap.put("gstAmountClaimable", authHandler.formattedCommaSeparatedAmount(totalGSTAmountClaimable, companyid));
                globalJasperMap.put("localZeroRatedSupplies", authHandler.formattedCommaSeparatedAmount(authHandler.round((totalZRLAmount + totalNTXAmount), companyid), companyid));
                globalJasperMap.put("exportSupplies", authHandler.formattedCommaSeparatedAmount(authHandler.round((totalZREAmount + totalZDAAmount), companyid), companyid));
                globalJasperMap.put("exemptSupplies", authHandler.formattedCommaSeparatedAmount(authHandler.round((totalExemptedSupplies), companyid), companyid));
                globalJasperMap.put("suppliesGrantedGSTRelief", authHandler.formattedCommaSeparatedAmount(authHandler.round((totalRSAmount), companyid), companyid));
                globalJasperMap.put("goodsImported", authHandler.formattedCommaSeparatedAmount(authHandler.round((totalISAmountExcludingGST), companyid), companyid));
                if (gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version) {
                    globalJasperMap.put("gstSuspended", authHandler.formattedCommaSeparatedAmount(authHandler.round((totalValueofOtherSupplies), companyid), companyid));
                } else {
                    globalJasperMap.put("gstSuspended", authHandler.formattedCommaSeparatedAmount(authHandler.round((gstSuspendedTax), companyid), companyid));
                }
                globalJasperMap.put("capitalGoodsAcquired", authHandler.formattedCommaSeparatedAmount(authHandler.round((totalValueOfCapitalGoodsAcquiredExcludingGST + totalIMCGAmountExcludingGST), companyid), companyid));
                globalJasperMap.put("badDebtRelief", authHandler.formattedCommaSeparatedAmount(authHandler.round((salesInvoiceClaimedAmtExcludingGST), companyid), companyid));
                globalJasperMap.put("badDebtRecovered", authHandler.formattedCommaSeparatedAmount(authHandler.round((salesInvoiceRecoveredAmtExcludingGST), companyid), companyid));
              if(breakDownList.get(0)!=null){
                    for (Map<String, Object> breakDownList1 : breakDownList) {
                        if (breakDownList1.get("outputtax") != null) {
                            double amt = Double.parseDouble(String.valueOf(breakDownList1.get("outputtax")));
                            breakDownList1.put("outputtax", String.valueOf(authHandler.formattedCommaSeparatedAmount(amt, companyid)));
                        }
                        if (breakDownList1.get("code") != null && breakDownList1.get("code").equals(Constants.GSTFORM03_OTHERS_KEY)) {
                            breakDownList1.put("code", "Others");
                        } else if (breakDownList1.get("code") != null && breakDownList1.get("code").equals(Constants.GSTFORM03_TOTAL_KEY)) {
                            breakDownList1.put("code", "Total");
                        }
                    }
                }
                globalJasperMap.put("MSIC_CODES", new JRBeanCollectionDataSource(breakDownList));
                globalJasperMap.put("carryForward","No");
                globalJasperMap.put("IRR", IRR);
                globalJasperMap.put("box15desc", (gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version) ? "Total Value of Other Supplies" : "Total Value of GST Suspended under Item 14");
                SimpleDateFormat sdf = new SimpleDateFormat("MMMM yyyy");
                String formattedStartDate = sdf.format(startDate);
                String formattedEndDate = sdf.format(endDate);
                String period = "For The Period " + formattedStartDate + " To " + formattedEndDate;
                globalJasperMap.put("period", period);
                JasperReport jasperReport = null;
                JasperPrint jasperPrint;
                List MR = new ArrayList();
                OnlyDatePojo odp = new OnlyDatePojo();
                MR.add(odp);
                InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MalasianReport.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);
                JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(MR);
                jasperPrint = JasperFillManager.fillReport(jasperReport, globalJasperMap, beanColDataSource);
                response.setHeader("Content-Disposition", "attachment;filename=" + "GST-03.pdf");
                JRPdfExporter exp = new JRPdfExporter();
                exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
                exp.exportReport();
            }else if(filetype.equalsIgnoreCase("txt") && isTapreturn){
                StringBuilder report = new StringBuilder();
                SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
                String date = sdf.format(endDate);
                String fileName = "TAP return " + date + ".txt"; //file name like TAP return 20180531.txt ERP-40245.
                   /*
                 *Handle MSIC Code In GST TAP return File.ERP-40361
                 */
                String MSIC1Code="00000";
                
                double MSIC1Value = 0.00;
                double MSIC2Value = 0.00;
                double MSIC3Value = 0.00;
                double MSIC4Value = 0.00;
                double MSIC5Value = 0.00;
                double MSICOtherValue = 0.00;
                
                JSONArray msicDetails = new JSONArray();
                msicDetails.put(msicsJosn);
                JSONObject paramObj = StringUtil.convertRequestToJsonObject(request);
                JSONObject IndustryCodes = msicDetails.getJSONObject(msicDetails.length() - 1);
                List<Map<String, Object>> msicbreakDownList = accReportsService.getMalaysiangstMSICCodes(paramObj, IndustryCodes);

                if (msicbreakDownList.get(0) != null) {
                    for (Map<String, Object> msicbreakDownList1 : msicbreakDownList) {
                        double amt = 0.0;
                        if (msicbreakDownList1.get("outputtax") != null) {
                            amt = Double.parseDouble(String.valueOf(msicbreakDownList1.get("outputtax")));
                            msicbreakDownList1.put("outputtax", String.valueOf(authHandler.formattedAmount(amt, companyid)));
                        }
                        /**
                         * if code is equal to msic and code is not equal to other and not equal to  total entry.
                         */
                        if (!StringUtil.isNullOrEmpty((String)msicbreakDownList1.get("code"))&& !msicbreakDownList1.get("code").equals(Constants.GSTFORM03_OTHERS_KEY) && !msicbreakDownList1.get("code").equals(Constants.GSTFORM03_TOTAL_KEY)) {
                            MSIC1Code = (String) msicbreakDownList1.get("code");
                            MSIC1Value = Double.parseDouble((String)msicbreakDownList1.get("outputtax"));
                        }
                        /**
                         * in system control, MSIC code is set to none then output tax is assigned to  MSIC Other Value.
                         */
                        if (!StringUtil.isNullOrEmpty((String)msicbreakDownList1.get("code")) && msicbreakDownList1.get("code").equals(Constants.GSTFORM03_OTHERS_KEY)) {
                            MSICOtherValue = Double.parseDouble((String)msicbreakDownList1.get("outputtax"));
                        }
                    }
                }
                String MSIC1ValueStr = authHandler.formattedAmount(authHandler.round(MSIC1Value, companyid), companyid);
                String MSIC2ValueStr = authHandler.formattedAmount(authHandler.round(MSIC2Value, companyid), companyid);
                String MSIC3ValueStr = authHandler.formattedAmount(authHandler.round(MSIC3Value, companyid), companyid);
                String MSIC4ValueStr = authHandler.formattedAmount(authHandler.round(MSIC4Value, companyid), companyid);
                String MSIC5ValueStr = authHandler.formattedAmount(authHandler.round(MSIC5Value, companyid), companyid);
                String MSICOtherValueStr = authHandler.formattedAmount(authHandler.round(MSICOtherValue, companyid), companyid);

                String reportString = totalStandardRatedSupply + "|"//c1
                        + totalStandardRatedSupplyTax + "|"//c2
                        + totalStandardRatedAcquisitionAmountExcludingGSTStr + "|"//c3
                        + totalStandardRatedAcquisitionTaxAmountStr + "|"//c4
                        + carryForwardRefund + "|"//b5
                        + totalZeroRateSupplyAmountStr + "|"//c6
                        + totalExportSupplyAmountStr + "|"//c7
                        + totalExemptedSuppliesStr + "|"//c8
                        + totalRSAmountStr + "|"//c9
                        + totalISAmountExcludingGSTStr + "|"//c10
                        + ((gstGuideReviseConfig == Constants.GSTGuideMarch2018_Version) ? totalValueofOtherSuppliesStr + "|" : "")
                        + totalValueOfCapitalGoodsAcquiredExcludingGSTStr + "|"//c11
                        + totalBadDebtClaimedExcludingGST + "|"//c12
                        + totalBadDebtRecoveredExcludingGST + "|"//c13
                        + MSIC1Code + "|"//i14
                        + MSIC1ValueStr + "|"//c15
                        + "00000" + "|"//i16
                        + MSIC2ValueStr + "|"//c17
                        + "00000" + "|"//i18
                        + MSIC3ValueStr + "|"//c19
                        + "00000" + "|"//i20
                        + MSIC4ValueStr + "|"//c21
                        + "00000" + "|"//i22
                        + MSIC5ValueStr + "|"//c23
                        + MSICOtherValueStr;//c24

                report.append(reportString + "\r\n");
                os = new ByteArrayOutputStream();
                os.write(report.toString().getBytes());
                response.setHeader("Content-Disposition", "attachment; filename=\"" + fileName + "\"");
                response.setContentType("application/octet-stream");
                response.setContentLength(os.size());
                response.getOutputStream().write(os.toByteArray());
                response.getOutputStream().flush();
                response.getOutputStream().close();
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (os != null) {
                try {
                    os.close();
                } catch (IOException ex) {
                    Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView exportMalasianGSTForm3PDF(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        ByteArrayOutputStream os = null;
        Document document = null;
        PdfWriter writer = null;
        try {

            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) result.getEntityList().get(0);

            result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            String fileType = "";
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));

            request.setAttribute("issales", true);
            String withoutinventory = request.getParameter("withoutinventory");

            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("endDate", endDate);
            requestParams.put("startDate", startDate);

            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put("excludeRetailPurchaseInvoice", true);//in case of Malaysian Company Retail Purchase invoice will not be included at here as we will deal with it seperately
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                requestParams.put("gstFlag", true);
                request.setAttribute("filterCurrency", Constants.SGDID);
            }

            requestParams.put("issales", false);
            requestParams.put("isSalesTax", false);
            requestParams.put("locale", RequestContextUtils.getLocale(request));
            
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
            }
            boolean isAdvanceSearch = requestParams.containsKey(Constants.isAdvanceSearch) ? (Boolean) requestParams.get(Constants.isAdvanceSearch) : false;
        
            JSONArray purchasejArr = getCalculatedTaxGST(requestParams, fileType);

            double totalTXAmountExcludingGST = 0.00;
            double totalTXTaxAmount = 0.00;
            String TXTaxCode = "GST(TX)";

            double totalIMAmountExcludingGST = 0.00;
            double totalIMTaxAmount = 0.00;
            String IMTaxCode = "GST(IM)";

            double totalISAmountExcludingGST = 0.00;
            double totalISTaxAmount = 0.00;
            String ISTaxCode = "GST(IS)";

            double totalTXE43AmountExcludingGST = 0.00;
            double totalTXE43TaxAmount = 0.00;
            String TXE43TaxCode = "GST(TX-E43)";

            double totalTXREAmountExcludingGST = 0.00;
            double totalTXRETaxAmount = 0.00;
            String TXRETaxCode = "GST(TX-RE)";

            double totalAJPTaxAmount = 0.00;
            double totalAJPAmountExcludingGST = 0.00;
            String AJPTaxCode = "GST(AJP)";

            double gstSuspendedTax = 0;

            Set purchaseTaxSet = new HashSet();
            purchaseTaxSet.add("GST(TX)");
            purchaseTaxSet.add("GST(IM)");
            purchaseTaxSet.add("GST(IS)");
            purchaseTaxSet.add("GST(BL)");
            purchaseTaxSet.add("GST(NR)");
            purchaseTaxSet.add("GST(ZP)");
            purchaseTaxSet.add("GST(EP)");
            purchaseTaxSet.add("GST(OP)");
            purchaseTaxSet.add("GST(TX-E43)");
            purchaseTaxSet.add("GST(TX-N43)");
            purchaseTaxSet.add("GST(TX-RE)");
            purchaseTaxSet.add("GST(GP)");
            purchaseTaxSet.add("GST(AJP)");

            Set importedTaxSet = new HashSet();
            importedTaxSet.add("GST(IM)");
            importedTaxSet.add("ME");

            for (int jsonVal = 0; jsonVal < purchasejArr.length(); jsonVal++) {
                JSONObject purchaseObj = purchasejArr.getJSONObject(jsonVal);
                String taxCode = purchaseObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
                double invamt = purchaseObj.getDouble("invamt");
                double invtaxamount = purchaseObj.getDouble("invtaxamount");

                if (TXTaxCode.equalsIgnoreCase(taxCode)) {
                    totalTXAmountExcludingGST += invamt - invtaxamount;
                    totalTXTaxAmount += invtaxamount;
                }

                if (IMTaxCode.equalsIgnoreCase(taxCode)) {
                    totalIMAmountExcludingGST += invamt - invtaxamount;
                    totalIMTaxAmount += invtaxamount;
                }

                if (ISTaxCode.contains(taxCode)) {
                    totalISAmountExcludingGST += invamt - invtaxamount;
                    gstSuspendedTax += (invamt * 6 / 100);
                }

                if (TXE43TaxCode.equalsIgnoreCase(taxCode)) {
                    totalTXE43AmountExcludingGST += invamt - invtaxamount;
                    totalTXE43TaxAmount += invtaxamount;
                }

                if (TXRETaxCode.equalsIgnoreCase(taxCode)) {
                    totalTXREAmountExcludingGST += invamt - invtaxamount;
                    totalTXRETaxAmount += invtaxamount;
                }

                if (AJPTaxCode.equalsIgnoreCase(taxCode)) {
                    totalAJPAmountExcludingGST += invamt - invtaxamount;
                    totalAJPTaxAmount += invtaxamount;
                }

            }

            requestParams.put("issales", true);
            requestParams.put("isSalesTax", true);
            JSONArray salesjArr = getCalculatedTaxGST(requestParams, fileType);

            double totalSRAmountExcludingGST = 0.00; // item #1
            double totalSRTaxAmount = 0.00;
            String SRTaxCode = "GST(SR)";

            double totalDSAmountExcludingGST = 0.00; // item #1
            double totalDSTaxAmount = 0.00;
            String DSTaxCode = "GST(DS)";

            double totalZRLAmount = 0.00; // item #1
            String ZRLTaxCode = "GST(ZRL)";

            double totalZREAmount = 0.00; // item #1
            String ZRETaxCode = "GST(ZRE)";

            double totalES43Amount = 0.00; // item #1
            String ES43TaxCode = "GST(ES43)";

            double totalESAmount = 0.00; // item #1
            String ESTaxCode = "GST(ES)";

            double totalRSAmount = 0.00; // item #1
            String RSTaxCode = "GST(RS)";

            double totalAJSTaxAmount = 0.00; // item #1
            double totalAJSAmountExcludingGST = 0.00; // item #1
            String AJSTaxCode = "GST(AJS)";

            Set salesTaxSet = new HashSet();
            salesTaxSet.add("GST(DS)");
            salesTaxSet.add("GST(SR)");
            salesTaxSet.add("GST(ZRL)");
            salesTaxSet.add("GST(ZRE)");
            salesTaxSet.add("GST(ES43)");
            salesTaxSet.add("GST(OS)");
            salesTaxSet.add("GST(ES)");
            salesTaxSet.add("GST(RS)");
            salesTaxSet.add("GST(GS)");
            salesTaxSet.add("GST(AJS)");

            for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
                JSONObject salesObj = salesjArr.getJSONObject(jsonVal);
                String taxCode = salesObj.getString("taxcode"); // should refer to taxcode or mergedResourceData?
                double invamt = salesObj.getDouble("invamt");
                double invtaxamount = salesObj.getDouble("invtaxamount");

                if (SRTaxCode.equalsIgnoreCase(taxCode)) {
                    totalSRAmountExcludingGST += invamt - invtaxamount;
                    totalSRTaxAmount += invtaxamount;
                }
                if (DSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalDSAmountExcludingGST += invamt - invtaxamount;
                    totalDSTaxAmount += invtaxamount;
                }
                if (ZRLTaxCode.equalsIgnoreCase(taxCode)) {
                    totalZRLAmount += invamt;
                }
                if (ZRETaxCode.equalsIgnoreCase(taxCode)) {
                    totalZREAmount += invamt;
                }
                if (ES43TaxCode.equalsIgnoreCase(taxCode)) {
                    totalES43Amount += invamt;
                }
                if (ESTaxCode.equalsIgnoreCase(taxCode)) {
                    totalESAmount += invamt;
                }
                if (RSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalRSAmount += invamt;
                }
                if (AJSTaxCode.equalsIgnoreCase(taxCode)) {
                    totalAJSAmountExcludingGST += invamt - invtaxamount;
                    totalAJSTaxAmount += invtaxamount;
                }
            }

            // Calculating Customer Invoices Adjustment Amount
            double salesInvoiceClaimedGST = 0;
            double salesInvoiceClaimedAmtExcludingGST = 0;
            double salesInvoiceRecoveredAmtExcludingGST = 0;
            double salesInvoiceRecoveredGST = 0;
            
            JSONArray IndustryCodeJsonArray = new JSONArray(); // Just to pass as parameter
            List<Double> doAdjsMent = getAppliedDeliveryOrders(request, IndustryCodeJsonArray);

            double totalAppliedAmountExcludingGST = doAdjsMent.get(0);
            double totalAppliedTaxAmount = doAdjsMent.get(1);
//            if (isAdvanceSearch) {
//                requestParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
//                requestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.journalEntrySearchJson));
//            }
//            
//            List<Double> adjsMentTaxes = getAdjustmentTaxes(requestParams);
//
//            double inputTaxAdjustment = adjsMentTaxes.get(0);
//            double outputTaxAdjustment = adjsMentTaxes.get(1);

            List<Double> ciAdjsMent = getBadDebtClaimedInvoices(request);

            salesInvoiceClaimedAmtExcludingGST += ciAdjsMent.get(0);
            salesInvoiceClaimedGST += ciAdjsMent.get(1);

            totalAJPAmountExcludingGST += salesInvoiceClaimedAmtExcludingGST;
            totalAJPTaxAmount += salesInvoiceClaimedGST;

            // Calculating P Invoices Adjustment Amount
            List<Double> ciAdjpMent = getBadDebtRecoveredInvoices(request, IndustryCodeJsonArray);

            salesInvoiceRecoveredAmtExcludingGST += ciAdjpMent.get(0);
            salesInvoiceRecoveredGST += ciAdjpMent.get(1);

            totalAJSAmountExcludingGST += salesInvoiceRecoveredAmtExcludingGST;
            totalAJSTaxAmount += salesInvoiceRecoveredGST;

            // Calculating Customer Invoices Adjustment Amount
            List<Double> ciAdjs1Ment = getBadDebtClaimedPurchaseInvoices(request,IndustryCodeJsonArray);

            totalAJSTaxAmount += ciAdjs1Ment.get(1);

            // Calculating P Invoices Adjustment Amount
            List<Double> ciAdjp1Ment = getBadDebtPurchaseRecoveredInvoices(request);

            totalAJPTaxAmount += ciAdjp1Ment.get(1);

            List<Double> importServiceTaxList = getImportedServicesInvoices(request,IndustryCodeJsonArray);

            totalDSAmountExcludingGST += importServiceTaxList.get(0);
            totalDSTaxAmount += importServiceTaxList.get(1);

            totalTXAmountExcludingGST += importServiceTaxList.get(0);
            totalTXTaxAmount += importServiceTaxList.get(1);

            /*
             * ERP-9782 : getting Free Gift JsonArray for including into the form 03 and detailed view.
             */ 
            List<Double> freeGiftJEList = getFreeGiftJEList(request,IndustryCodeJsonArray);
            if (!freeGiftJEList.isEmpty()) {
                totalDSAmountExcludingGST += freeGiftJEList.get(0);
                totalDSTaxAmount += freeGiftJEList.get(1);
            }
            HashMap<String, Object> retailPurchases = getRetailPurchases(request);
            double retailPurchaseAmountExcludingTax = (Double) retailPurchases.get("retailPurchaseAmountExcludingTax");
            double retailPurchaseTaxAmount = (Double) retailPurchases.get("retailPurchaseTaxAmount");

            double totalStandardRatedSupplyAmount = totalSRAmountExcludingGST + totalDSAmountExcludingGST + totalAppliedAmountExcludingGST;

            double totalStandardRatedSupplyTaxAmount = totalSRTaxAmount + totalDSTaxAmount + totalAJSTaxAmount + totalAppliedTaxAmount;

            // 6a-c3
            double totalStandardRatedAcquisitionAmountExcludingGST = totalTXAmountExcludingGST + totalIMAmountExcludingGST + totalTXE43AmountExcludingGST + totalTXREAmountExcludingGST + retailPurchaseAmountExcludingTax;

            // 6b-c4
            double totalStandardRatedAcquisitionTaxAmount = totalTXTaxAmount + totalIMTaxAmount + totalTXE43TaxAmount + totalTXRETaxAmount + totalAJPTaxAmount + retailPurchaseTaxAmount;

            //b5
            double totalExemptedSupplies = totalES43Amount + totalESAmount;
            double totalValueOfCapitalGoodsAcquiredExcludingGST = getCapitalGoodsAcquired(request);
            double totalOutPutTax = totalStandardRatedSupplyTaxAmount;//totalSRTaxAmount + totalDSTaxAmount + totalAJSTaxAmount;

            double totalInputTax = totalStandardRatedAcquisitionTaxAmount;//totalTXTaxAmount + totalIMTaxAmount + totalTXE43TaxAmount + totalTXRETaxAmount + totalAJPTaxAmount;

            double totalGSTAmountPayable = authHandler.round((totalOutPutTax - totalInputTax), companyid);
            double totalGSTAmountClaimable = authHandler.round((totalInputTax - totalOutPutTax), companyid);

            // in following both which one will be (-)ve will be make zero
            if (totalGSTAmountPayable < 0) {
                totalGSTAmountPayable = 0.00;
            } else if (totalGSTAmountClaimable < 0) {
                totalGSTAmountClaimable = 0.00;
            }

            HashMap<String, Object> jasperHashMap = new HashMap<String, Object>();
            List<MalasianGST> malasianGSTsList = new ArrayList<MalasianGST>();
            List<MalasianGST> malasianGSTsMainList = new ArrayList<MalasianGST>();

            MalasianGST malasianGST = new MalasianGST();
            malasianGST.setItem("Item 5a - Total Value Of Standard Rated Supply");
            malasianGST.setAmount(totalStandardRatedSupplyAmount);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 5b - Total Output Tax (Inclusive of Tax Value on Bad Debt Recovered & other Adjustment)");
            malasianGST.setAmount(totalStandardRatedSupplyTaxAmount);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 6a - Total Value Of Standard Rate and Flat Rate Acquisitions");
            malasianGST.setAmount(totalStandardRatedAcquisitionAmountExcludingGST);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 6b - Total Input Tax( Inclusive of Tax Value On Bad Debt Relief");
            malasianGST.setAmount(totalStandardRatedAcquisitionTaxAmount);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 7   - GST Amount Payable (Item 5b - Item 6b)");
            malasianGST.setAmount(totalGSTAmountPayable);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 8   - GST Amount Claimable (Item 6b – Item 5b)");
            malasianGST.setAmount(totalGSTAmountClaimable);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 10 - Total Value of Local Zero-Rated Supplies");
            malasianGST.setAmount(totalZRLAmount);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 11 - Total Value of Export Supplies");
            malasianGST.setAmount(totalZREAmount);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 12 - Total Value of Exempt Supplies");
            malasianGST.setAmount(totalExemptedSupplies);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 13 - Total Value of Supplies Granted GST Relief");
            malasianGST.setAmount(totalRSAmount);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 14 - Total Value of Goods Imported Under Approved Trader Scheme");
            malasianGST.setAmount(totalISAmountExcludingGST);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 15 - Total Value of GST Suspended under Item 14");
            malasianGST.setAmount(gstSuspendedTax);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 16 - Total Value of Capital Goods Acquired ");
            malasianGST.setAmount(totalValueOfCapitalGoodsAcquiredExcludingGST);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 17 - Total Value of Bad Debt Relief inclusive Tax");
                malasianGST.setAmount(salesInvoiceClaimedAmtExcludingGST);

            malasianGSTsList.add(malasianGST);

            malasianGST = new MalasianGST();
            malasianGST.setItem("Item 18 - Total Value of Bad Debt Recovered Inclusive Tax");
                malasianGST.setAmount(salesInvoiceRecoveredAmtExcludingGST);

            malasianGSTsList.add(malasianGST);

            malasianGSTsMainList.add(malasianGST);

            jasperHashMap.put("format", "pdf");
            jasperHashMap.put("GST03SubReport", new JRBeanCollectionDataSource(malasianGSTsList));

            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GST03.jrxml");
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(malasianGSTsMainList);
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, jasperHashMap, beanColDataSource);
            response.setHeader("Content-Disposition", "attachment;filename=" + "GST-03.pdf");
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();

        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsCombineController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accReportsCombineController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (document != null) {
                document.close();
            }
            if (writer != null) {
                writer.close();
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException ex) {
                    Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView exportIAFfile(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        Writer writer = null;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            double totalPurchase = 0, taxAmount = 0;
            int length = 0;
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            java.text.DateFormat formatter = authHandler.getUserDateFormatterWithoutTimeZone(request);
            java.io.ByteArrayOutputStream baos = new ByteArrayOutputStream();
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            StringBuilder report = new StringBuilder();
            KwlReturnObject result = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) result.getEntityList().get(0);

            result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
            }
            boolean isAdvanceSearch = requestParams.containsKey(Constants.isAdvanceSearch) ? (Boolean) requestParams.get(Constants.isAdvanceSearch) : false;
            String companyname=company.getCompanyName() != null ? company.getCompanyName() : "";
            
            ExtraCompanyPreferences extrapref = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
                if (extrapref != null && extrapref.isIsMultiEntity() && !StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_Search_Json))) {
                    String searchjson = request.getParameter(Constants.Acc_Search_Json);
                    companyname = exportDaoObj.getEntityDimensionNameforExport(searchjson, company);
                }
            }
            
            String companyBRN = companyAccountPreferences.getCompanyUEN();
            String companyGSTNo = companyAccountPreferences.getGstNumber();
            String entityName = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.multiEntityValue))) {
                entityName = request.getParameter(Constants.multiEntityValue);
                Map entityParamsMap = new HashMap<>();
                JSONObject entityObj = null;
                entityParamsMap.put(Constants.companyid, companyid);
                entityParamsMap.put(Constants.multiEntityValue, request.getParameter(Constants.multiEntityValue));
                entityObj = accGstService.getEntityDetails(entityParamsMap);
                if (entityObj.getJSONArray("data").length() > 0) {
                    JSONObject entityDetailsObj = entityObj.getJSONArray("data").getJSONObject(0);
                    companyBRN = entityDetailsObj.optString("multiEntitycompanybrn");
                    companyGSTNo = entityDetailsObj.optString("multiEntitygstno");
                }
            }
            if (company.getCountry().getID().equalsIgnoreCase("137")) {//For Malaysia Country.
                String gafVersion = companyAccountPreferences.getIafVersion();
                if (gafVersion.equals(Constants.GAFFileVersion_1)) {
                    int totalPCount = 0, totalSCount = 0, totalLCount = 0;
                    double totalPurchaseAmount = 0, purchaseTaxAmount = 0, totalSalesAmount = 0, salesTaxAmount = 0;
//                    report.append("C|CompanyName|CompanyBRN|GSTNo|PeriodStart|PeriodEnd|IAFCreationDate|ProductVersion|GAF Version|" + "\r\n");
                    report.append("C|" + companyname + "|" + companyBRN + "|" + companyGSTNo + "|" + sdf.format(startDate) + "|" + sdf.format(endDate) + "|" + sdf.format(new Date()) + "|" + Constants.DeskeraERPVersion + "|" + Constants.MASTER_CONFIGURATION_GAFFILEVERSION + "|" + "\r\n");

    //                HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    String cashAccount = companyAccountPreferences.getCashAccount().getID();
                    requestParams.put("cashaccountid", cashAccount);
                    result = accTaxObj.getCalculatedTax((Map) requestParams);
                    List list = result.getEntityList();

                    requestParams.put("endDate", endDate);
                    requestParams.put("startDate", startDate);
                    requestParams.put("issales", true);
                    requestParams.put(Constants.companyKey, companyid);
                    JSONArray purchasejArr = getCalculatedPurchaseTaxforIAFfile(requestParams, list);

//                    report.append("P|SupplierName|SupplierBRN|InvoiceDate|InvoiceNo|PermitNo|LineNo|ProductDescription|PurchaseValueMYR|GSTValueMYR|TaxCode|FCYCode|PurchaseFCY|GSTFCY|" + "\r\n");
                    for (int i = 0; i < purchasejArr.length(); i++) {
                        JSONArray grArray = purchasejArr.getJSONObject(i).getJSONArray("details");
                        for (int j = 0; j < grArray.length(); j++) {
                            double grAmt = grArray.getJSONObject(j).optDouble("gramt");
                            grAmt = (grAmt < 0) ? (-1) * grAmt : grAmt;
                            double grTaxAmt = grArray.getJSONObject(j).optDouble("grtaxamount");
                            grTaxAmt = (grTaxAmt < 0) ? (-1) * grTaxAmt : grTaxAmt;

                            double gstfcy = grArray.getJSONObject(j).optDouble("gstfcy");
                            gstfcy = (gstfcy < 0) ? (-1) * gstfcy : gstfcy;

                            double purchasefcy = grArray.getJSONObject(j).optDouble("purchasefcy");
                            purchasefcy = (purchasefcy < 0) ? (-1) * purchasefcy : purchasefcy;

                            report.append("P|" + grArray.getJSONObject(j).optString("grname") + "|" + grArray.getJSONObject(j).optString("gruen") + "|" + sdf.format(new Date(grArray.getJSONObject(j).getLong("grdate"))) + "|" + grArray.getJSONObject(j).optString("grno") + "|" + grArray.getJSONObject(j).optString("permit") + "|" + grArray.getJSONObject(j).optString("grlineno") + "|" + grArray.getJSONObject(j).optString("grproduct") + "|" + authHandler.formattedAmount(grAmt, companyid) + "|" + authHandler.formattedAmount(grTaxAmt, companyid) + "|" + grArray.getJSONObject(j).optString("grtaxcode") + "|" + grArray.getJSONObject(j).optString("fcycode") + "|" + authHandler.formattedAmount(purchasefcy, companyid) + "|" + authHandler.formattedAmount(gstfcy, companyid) + "|" + "\r\n");
                            totalPurchaseAmount += grArray.getJSONObject(j).optDouble("gramt");
                            purchaseTaxAmount += grArray.getJSONObject(j).optDouble("grtaxamount");
                        }
                        totalPCount += grArray.length();
                    }

                    JSONArray salesjArr = getCalculatedSalesTaxforIAFfile(requestParams, list);
                    totalPurchase = taxAmount = length = 0;
//                    report.append("S|CustomerName|CustomerBRN|InvoiceDate|InvoiceNo|LineNo|ProductDescription|SupplyValueMYR|GSTValueMYR|TaxCode|Country|FCYCode|SupplyFCY|GSTFCY|" + "\r\n");
                    for (int i = 0; i < salesjArr.length(); i++) {
                        JSONArray invArray = salesjArr.getJSONObject(i).getJSONArray("details");
                        for (int j = 0; j < invArray.length(); j++) {
                            double invTaxAmt = invArray.getJSONObject(j).getDouble("invtaxamount");
                            invTaxAmt = (invTaxAmt < 0) ? (-1) * invTaxAmt : invTaxAmt;
                            double invAmt = invArray.getJSONObject(j).getDouble("invamt");
                            invAmt = (invAmt < 0) ? (-1) * invAmt : invAmt;

                            double gstfcy = invArray.getJSONObject(j).getDouble("gstfcy");
                            gstfcy = (gstfcy < 0) ? (-1) * gstfcy : gstfcy;

                            double salesfcy = invArray.getJSONObject(j).getDouble("salesfcy");
                            salesfcy = (salesfcy < 0) ? (-1) * salesfcy : salesfcy;

                            report.append("S|" + invArray.getJSONObject(j).optString("invname", "") + "|" + invArray.getJSONObject(j).optString("invuen", "") + "|" + sdf.format(new Date(invArray.getJSONObject(j).getLong("invdate"))) + "|" + invArray.getJSONObject(j).getString("invno") + "|" + invArray.getJSONObject(j).getString("invlineno") + "|" + invArray.getJSONObject(j).getString("invproduct") + "|" + authHandler.formattedAmount(invAmt, companyid) + "|" + authHandler.formattedAmount(invTaxAmt, companyid) + "|" + invArray.getJSONObject(j).getString("invtaxcode") + "|" + invArray.getJSONObject(j).optString(Constants.SHIPPING_COUNTRY) + "|" + invArray.getJSONObject(j).getString("fcycode") + "|" + authHandler.formattedAmount(salesfcy, companyid) + "|" + authHandler.formattedAmount(gstfcy, companyid) + "|" + "\r\n");
                            totalSalesAmount += invArray.getJSONObject(j).getDouble("invamt");
                            salesTaxAmount += invArray.getJSONObject(j).getDouble("invtaxamount");
                        }
                        totalSCount += invArray.length();
                    }

                    double credit = 0, debit = 0, total = 0;
                    length = 0;
                    //            JSONArray JEjArr = getGLdataforIAFfile(requestParams, list);
                    if (isAdvanceSearch) {
                        requestParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        requestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.journalEntrySearchJson));
                    }
                    JSONArray JEjArr = getGLdataforIAFfileNEW(request, requestParams);//<-- This method is use less for calculation of GL DATA For IAF File

                    HashMap<String, JSONArray> accountwiseJEDetails = new HashMap<String, JSONArray>();
                    for (int i = 0; i < JEjArr.length(); i++) {
                        JSONArray jeArray = JEjArr.getJSONObject(i).getJSONArray("details");
                        for (int j = 0; j < jeArray.length(); j++) {
                            JSONArray accountJEDetailsArr = new JSONArray();
                            String accountName = jeArray.getJSONObject(j).getString("jeaccountname");
                            if (accountwiseJEDetails.containsKey(accountName)) {
                                accountJEDetailsArr = accountwiseJEDetails.get(accountName);
                                accountJEDetailsArr.put(jeArray.getJSONObject(j));
                                accountwiseJEDetails.put(accountName, accountJEDetailsArr);
                            } else {
                                accountJEDetailsArr.put(jeArray.getJSONObject(j));
                                accountwiseJEDetails.put(accountName, accountJEDetailsArr);
                            }
                        }
                        totalLCount += jeArray.length();
                    }
//                    report.append("L|TransactionDate|AccountID|AccountName|TransactionDescription|Name|TransactionID|SourceDocumentID|SourceType|Debit|Credit|Balance|" + "\r\n");

                    for (Map.Entry<String, JSONArray> entry : accountwiseJEDetails.entrySet()) {
                        JSONArray jeArray = entry.getValue();

                        for (int j = 0; j < jeArray.length(); j++) {
                            if (j == 0) {
                                totalLCount = totalLCount + 1;
                                report.append("L|" + sdf.format(new Date(jeArray.getJSONObject(j).getLong("creationdate"))) + "|" + jeArray.getJSONObject(j).optString("jeaccountid", "") + "|" + jeArray.getJSONObject(j).getString("jeaccountname") + "|OPENING BALANCE|||||0.00|0.00|" + authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("openingbalnace"), companyid) + "|" + "\r\n");
                            }
                            total += -(jeArray.getJSONObject(j).getDouble("credit")) + jeArray.getJSONObject(j).getDouble("debit");
                            report.append("L|" + sdf.format(new Date(jeArray.getJSONObject(j).getLong("jedate"))) + "|" + jeArray.getJSONObject(j).optString("jeaccountid", "") + "|" + jeArray.getJSONObject(j).getString("jeaccountname") + "|" + jeArray.getJSONObject(j).optString("jedesc", "") + "|" + companyname + "|" + jeArray.getJSONObject(j).getString("sourcedocid") + "|" + jeArray.getJSONObject(j).getString("jeid") + "|" + jeArray.getJSONObject(j).getString("sourcetype") + "|" + authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("debit"), companyid) + "|" + authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("credit"), companyid) + "|" + authHandler.formattedAmount(total, companyid) + "|" + "\r\n");
                            debit += (jeArray.getJSONObject(j).getDouble("debit"));
                            credit += (jeArray.getJSONObject(j).getDouble("credit"));
                        }
                    }
                    report.append("F|" + totalPCount + "|" + authHandler.formattedAmount(totalPurchaseAmount, companyid) + "|" + authHandler.formattedAmount(purchaseTaxAmount, companyid) + "|" + totalSCount + "|" + authHandler.formattedAmount(totalSalesAmount, companyid) + "|" + authHandler.formattedAmount(salesTaxAmount, companyid) + "|" + totalLCount + "|" + authHandler.formattedAmount(debit, companyid) + "|" + authHandler.formattedAmount(credit, companyid) + "|" + authHandler.formattedAmount(total, companyid) + "|" + "\r\n");
                    baos.write(report.toString().getBytes());
                    response.setHeader("Content-Disposition", "attachment; filename=\"" + Constants.GAFFileName + gafVersion + ".txt\"");
                    response.setContentType("application/octet-stream");
                    response.setContentLength(baos.size());
                    response.getOutputStream().write(baos.toByteArray());
                    response.getOutputStream().flush();
                    response.getOutputStream().close();
                } else if (gafVersion.equals(Constants.GAFFileVersion_2)) {
                    int totalPCount = 0, totalSCount = 0, totalLCount = 0;
                    double totalPurchaseAmount = 0, purchaseTaxAmount = 0, totalSalesAmount = 0, salesTaxAmount = 0;
                    report.append("C|C2_CompanyName|C3_CompanyBRN|C4_CompanyGSTNo|C5_PeriodStart|C6_PeriodEnd|C7_GAFCreationDate|C8_SoftwareVersion|C9_GAFVersion|" + "\r\n");
                    report.append("C|" + companyname + "|" + companyBRN + "|" + companyGSTNo + "|" + sdf.format(startDate) + "|" + sdf.format(endDate) + "|" + sdf.format(new Date()) + "|" + Constants.DeskeraERPVersion + "|" + Constants.GAFFileVersion_2 + "|" + "\r\n");
                    String cashAccount = companyAccountPreferences.getCashAccount().getID();
                    requestParams.put("cashaccountid", cashAccount);
                    result = accTaxObj.getCalculatedTax((Map) requestParams);

                    List list = result.getEntityList();
                    requestParams.put("endDate", endDate);
                    requestParams.put("startDate", startDate);
                    requestParams.put("issales", true);
                    requestParams.put(Constants.companyKey, companyid);
                    JSONArray purchasejArr = getCalculatedPurchaseTaxforIAFfile(requestParams, list);

                    report.append("P|P2_SupplierName|P3_SupplierBRN|P4_SupplierGSTNo|P5_InvoiceDate|P6_PostingDate|P7_InvoiceNo|P8_ImportK1No|P9_LineNo|P10_ProductDescription|P11_PValueMYR|P12_PGSTValueMYR|P13_TaxCode|P14_FCYCode|P15_PValueFCY|P16_PGSTValueFCY|" + "\r\n");
                    for (int i = 0; i < purchasejArr.length(); i++) {
                        JSONArray grArray = purchasejArr.getJSONObject(i).getJSONArray("details");
                        for (int j = 0; j < grArray.length(); j++) {
                            double grAmt = grArray.getJSONObject(j).optDouble("gramt");
                            grAmt = (grAmt < 0) ? (-1) * grAmt : grAmt;
                            double grTaxAmt = grArray.getJSONObject(j).optDouble("grtaxamount");
                            grTaxAmt = (grTaxAmt < 0) ? (-1) * grTaxAmt : grTaxAmt;

                            double gstfcy = grArray.getJSONObject(j).optDouble("gstfcy");
                            gstfcy = (gstfcy < 0) ? (-1) * gstfcy : gstfcy;

                            double purchasefcy = grArray.getJSONObject(j).optDouble("purchasefcy");
                            purchasefcy = (purchasefcy < 0) ? (-1) * purchasefcy : purchasefcy;

                            report.append("P|" + grArray.getJSONObject(j).optString("grname") + "|" + grArray.getJSONObject(j).optString("gruen") + "|" + grArray.getJSONObject(j).optString("suppliergstno") + "|" + sdf.format(new Date(grArray.getJSONObject(j).getLong("grdate"))) + "|" + sdf.format(new Date(grArray.getJSONObject(j).getLong("postingdate"))) + "|" + grArray.getJSONObject(j).optString("grno") + "|" + grArray.getJSONObject(j).optString(Constants.importExportDeclarationNo) + "|" + grArray.getJSONObject(j).optString("grlineno") + "|" + grArray.getJSONObject(j).optString("grproduct") + "|" + authHandler.formattedAmount(grAmt, companyid) + "|" + authHandler.formattedAmount(grTaxAmt, companyid) + "|" + grArray.getJSONObject(j).optString("grtaxcode") + "|" + grArray.getJSONObject(j).optString("fcycode") + "|" + authHandler.formattedAmount(purchasefcy, companyid) + "|" + authHandler.formattedAmount(gstfcy, companyid) + "|" + "\r\n");
                            totalPurchaseAmount += grArray.getJSONObject(j).optDouble("gramt");
                            purchaseTaxAmount += grArray.getJSONObject(j).optDouble("grtaxamount");
                        }
                        totalPCount += grArray.length();
                    }

                    JSONArray salesjArr = getCalculatedSalesTaxforIAFfile(requestParams, list);
                    totalPurchase = taxAmount = length = 0;
                    report.append("S|S2_CustomerName|S3_CustomerBRN|S4_CustomerGSTNo|S5_InvoiceDate|S6_InvoiceNo|S7_ExportK2No|S8_LineNo|S9_ProductDescription|S10_SValueMYR|S11_SGSTValueMYR|S12_TaxCode|S13_Country|S14_FCYCode|S15_SValueFCY|S16_SGSTValueFCY|" + "\r\n");
                    for (int i = 0; i < salesjArr.length(); i++) {
                        JSONArray invArray = salesjArr.getJSONObject(i).getJSONArray("details");
                        for (int j = 0; j < invArray.length(); j++) {
                            double invTaxAmt = invArray.getJSONObject(j).getDouble("invtaxamount");
                            invTaxAmt = (invTaxAmt < 0) ? (-1) * invTaxAmt : invTaxAmt;
                            double invAmt = invArray.getJSONObject(j).getDouble("invamt");
                            invAmt = (invAmt < 0) ? (-1) * invAmt : invAmt;

                            double gstfcy = invArray.getJSONObject(j).getDouble("gstfcy");
                            gstfcy = (gstfcy < 0) ? (-1) * gstfcy : gstfcy;

                            double salesfcy = invArray.getJSONObject(j).getDouble("salesfcy");
                            salesfcy = (salesfcy < 0) ? (-1) * salesfcy : salesfcy;

                            report.append("S|" + invArray.getJSONObject(j).optString("invname") + "|" + invArray.getJSONObject(j).optString("invuen") + "|" + invArray.getJSONObject(j).optString("customergstno") + "|" + sdf.format(new Date(invArray.getJSONObject(j).getLong("invdate"))) + "|" + invArray.getJSONObject(j).getString("invno") + "|" + invArray.getJSONObject(j).optString(Constants.importExportDeclarationNo) + "|" + invArray.getJSONObject(j).getString("invlineno") + "|" + invArray.getJSONObject(j).getString("invproduct") + "|" + authHandler.formattedAmount(invAmt, companyid) + "|" + authHandler.formattedAmount(invTaxAmt, companyid) + "|" + invArray.getJSONObject(j).getString("invtaxcode") + "|" + invArray.getJSONObject(j).optString(Constants.SHIPPING_COUNTRY) + "|" + invArray.getJSONObject(j).getString("fcycode") + "|" + authHandler.formattedAmount(salesfcy, companyid) + "|" + authHandler.formattedAmount(gstfcy, companyid) + "|" + "\r\n");
                            totalSalesAmount += invArray.getJSONObject(j).getDouble("invamt");
                            salesTaxAmount += invArray.getJSONObject(j).getDouble("invtaxamount");
                        }
                        totalSCount += invArray.length();
                    }

                    double credit = 0, debit = 0, total = 0;
                    length = 0;
                    if (isAdvanceSearch) {
                        requestParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                        requestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.journalEntrySearchJson));
                    }
                    JSONArray JEjArr = getGLdataforIAFfileNEW(request, requestParams);//<-- This method is use less for calculation of GL DATA For IAF File

                    HashMap<String, JSONArray> accountwiseJEDetails = new HashMap<>();
                    for (int i = 0; i < JEjArr.length(); i++) {
                        JSONArray jeArray = JEjArr.getJSONObject(i).getJSONArray("details");
                        for (int j = 0; j < jeArray.length(); j++) {
                            JSONArray accountJEDetailsArr = new JSONArray();
                            String accountName = jeArray.getJSONObject(j).getString("jeaccountname");
                            if (accountwiseJEDetails.containsKey(accountName)) {
                                accountJEDetailsArr = accountwiseJEDetails.get(accountName);
                                accountJEDetailsArr.put(jeArray.getJSONObject(j));
                                accountwiseJEDetails.put(accountName, accountJEDetailsArr);
                            } else {
                                accountJEDetailsArr.put(jeArray.getJSONObject(j));
                                accountwiseJEDetails.put(accountName, accountJEDetailsArr);
                            }
                        }
                        totalLCount += jeArray.length();
                    }
                    report.append("L|L2_TransactionDate|L3_AccountID|L4_AccountType|L5_AccountName|L6_TransactionDescription|L7_EntityName|L8_TransactionID|L9_SourceDocID|L10_SourceType|L11_Debit|L12_Credit|L13_RunningBalance|" + "\r\n");

                    for (Map.Entry<String, JSONArray> entry : accountwiseJEDetails.entrySet()) {
                        JSONArray jeArray = entry.getValue();

                        for (int j = 0; j < jeArray.length(); j++) {
                            if (j == 0) {
                                totalLCount = totalLCount + 1;
                                report.append("L|" + sdf.format(new Date(jeArray.getJSONObject(j).getLong("creationdate"))) + "|" + jeArray.getJSONObject(j).optString("jeaccountid", "") + "|" + jeArray.getJSONObject(j).getString("jeaccountname") + "|OPENING BALANCE|||||0.00|0.00|" + authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("openingbalnace"), companyid) + "|" + "\r\n");
                            }
                            total += -(jeArray.getJSONObject(j).getDouble("credit")) + jeArray.getJSONObject(j).getDouble("debit");
                            report.append("L|" + sdf.format(new Date(jeArray.getJSONObject(j).getLong("jedate"))) + "|" + jeArray.getJSONObject(j).optString("jeaccountid") + "|" + jeArray.getJSONObject(j).optString("accounttype") + "|" + jeArray.getJSONObject(j).getString("jeaccountname") + "|" + jeArray.getJSONObject(j).optString("jedesc") + "|" + companyname + "|" + jeArray.getJSONObject(j).getString("sourcedocid") + "|" + jeArray.getJSONObject(j).getString("jeid") + "|" + jeArray.getJSONObject(j).getString("sourcetype") + "|" + authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("debit"), companyid) + "|" + authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("credit"), companyid) + "|" + authHandler.formattedAmount(total, companyid) + "|" + "\r\n");
                            debit += (jeArray.getJSONObject(j).getDouble("debit"));
                            credit += (jeArray.getJSONObject(j).getDouble("credit"));
                        }
                    }
                    report.append("F|F2_CountPRecord|F3_SumPValueMYR|F4_SumPGSTValueMYR|F5_CountSRecord|F6_SumSValueMYR|F7_SumSGSTValueMYR|F8_CountLRecord|F9_SumLDebit|F10_SumLCredit|F11_SumLCloseBalance|" + "\r\n");
                    report.append("F|").append(totalPCount).append("|").append(authHandler.formattedAmount(totalPurchaseAmount, companyid)).append("|").append(authHandler.formattedAmount(purchaseTaxAmount, companyid)).append("|").append(totalSCount).append("|").append(authHandler.formattedAmount(totalSalesAmount, companyid)).append("|").append(authHandler.formattedAmount(salesTaxAmount, companyid)).append("|").append(totalLCount).append("|").append(authHandler.formattedAmount(debit, companyid)).append("|").append(authHandler.formattedAmount(credit, companyid)).append("|").append(authHandler.formattedAmount(total, companyid)).append("|" + "\r\n");

                    baos.write(report.toString().getBytes());
                    response.setHeader("Content-Disposition", "attachment; filename=\"" + Constants.GAFFileName + gafVersion + ".txt\"");
                    response.setContentType("application/octet-stream");
                    response.setContentLength(baos.size());
                    response.getOutputStream().write(baos.toByteArray());
                    response.getOutputStream().flush();
                    response.getOutputStream().close();
                }
            } else {
                formatter = new SimpleDateFormat("yyyy-MM-dd");
                report.append("CompInfoStart|" + "\r\n");
                report.append("CompanyName|CompanyUEN|GSTNo|PeriodStart|PeriodEnd|IAFCreationDate|ProductVersion|IAFVersion|" + "\r\n");
                report.append(companyname + "|" + companyAccountPreferences.getCompanyUEN() + "|" + companyAccountPreferences.getGstNumber() + "|" + formatter.format(startDate) + "|" + formatter.format(endDate) + "|" + formatter.format(new Date()) + "|" + "Deskera Accounting v1.0.0" + "|" + companyAccountPreferences.getIafVersion() + "|" + "\r\n");
                report.append("CompInfoEnd|" + "\r\n");

//                HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                String cashAccount = companyAccountPreferences.getCashAccount().getID();
                requestParams.put("cashaccountid", cashAccount);
                requestParams.put("isSalesTax", false);
                result = accTaxObj.getCalculatedTax((Map) requestParams);
                List list = result.getEntityList();

                requestParams.put("endDate", endDate);
                requestParams.put("startDate", startDate);
//                requestParams.put("issales", true);
                requestParams.put(Constants.companyKey, companyid);
                if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                    requestParams.put(Constants.gstFlag, true);
                }
//                JSONArray purchasejArr = getCalculatedPurchaseTaxforIAFfile(requestParams, list);
                JSONArray purchasejArr = getCalculatedPurchaseTaxMerged(requestParams, list,Constants.isGSTAuditFile);

                report.append("PurcDataStart|" + "\r\n");
                report.append("SupplierName|SupplierUEN|InvoiceDate|InvoiceNo|PermitNo|LineNo|ProductDescription|PurchaseValueSGD|GSTValueSGD|TaxCode|FCYCode|PurchaseFCY|GSTFCY|" + "\r\n");
                for (int i = 0; i < purchasejArr.length(); i++) {
                    JSONArray grArray = purchasejArr.getJSONObject(i).getJSONArray("details");
                    for (int j = 0; j < grArray.length(); j++) {
                        double grAmtExcludingGst = grArray.getJSONObject(j).optDouble("gramtexcludinggst");
                        grAmtExcludingGst = (grAmtExcludingGst < 0) ? (-1) * grAmtExcludingGst : grAmtExcludingGst;
                        
                        double grTaxAmt = grArray.getJSONObject(j).optDouble("grtaxamount");
                        grTaxAmt = (grTaxAmt < 0) ? (-1) * grTaxAmt : grTaxAmt;

                        /**
                         * Displayed Foreign Currency Code, Supply Foreign
                         * Currency Amount & Supply Currency GST Amount only if
                         * transaction in foreign currency.
                         */
                        String fcycode = "XXX";
                        double gstfcy = 0;
                        double purchasefcyexcludinggst = 0;
                        if (!Constants.SGD_CURRENCY_CODE.equalsIgnoreCase(grArray.getJSONObject(j).optString("fcycode"))) {
                            fcycode = grArray.getJSONObject(j).optString("fcycode");
                            gstfcy = grArray.getJSONObject(j).optDouble("gstfcy",0.0);
                            gstfcy = (gstfcy < 0) ? (-1) * gstfcy : gstfcy;

                            purchasefcyexcludinggst = grArray.getJSONObject(j).optDouble("purchasefcyexcludinggst");
                            purchasefcyexcludinggst = (purchasefcyexcludinggst < 0) ? (-1) * purchasefcyexcludinggst : purchasefcyexcludinggst;
                        }
                        
                        report.append(grArray.getJSONObject(j).optString("grname") + "|" + grArray.getJSONObject(j).optString("gruen") + "|" + formatter.format(new Date(grArray.getJSONObject(j).getLong("grdate"))) + "|" + grArray.getJSONObject(j).optString("grno") + "|" + grArray.getJSONObject(j).optString("permit") + "|" + grArray.getJSONObject(j).optString("grlineno") + "|" + grArray.getJSONObject(j).optString("grproduct") + "|" + authHandler.formattedAmount(grAmtExcludingGst, companyid) + "|" + authHandler.formattedAmount(grTaxAmt, companyid) + "|" + grArray.getJSONObject(j).optString("grtaxcode") + "|" + fcycode + "|" + authHandler.formattedAmount(purchasefcyexcludinggst, companyid) + "|" + authHandler.formattedAmount(gstfcy, companyid) + "|" + "\r\n");
                        totalPurchase += grAmtExcludingGst;
                        taxAmount += grTaxAmt;
                    }
                    length += grArray.length();
                }
                report.append("PurcDataEnd|" + authHandler.formattedAmount(totalPurchase, companyid) + "|" + authHandler.formattedAmount(taxAmount, companyid) + "|" + length + "|" + "\r\n");

//                JSONArray salesjArr = getCalculatedSalesTaxforIAFfile(requestParams, list);
                
                //Supplies Data
                requestParams.put("isSalesTax", true);
                result = accTaxObj.getCalculatedTax((Map) requestParams);
                list = result.getEntityList();
                JSONArray salesjArr = getCalculatedSalesTaxMerged(requestParams, list, Constants.isGSTAuditFile);
                totalPurchase = taxAmount = length = 0;
                report.append("SuppDataStart|" + "\r\n");
                report.append("CustomerName|CustomerUEN|InvoiceDate|InvoiceNo|LineNo|ProductDescription|SupplyValueSGD|GSTValueSGD|TaxCode|Country|FCYCode|SupplyFCY|GSTFCY|" + "\r\n");
                for (int i = 0; i < salesjArr.length(); i++) {
                    JSONArray invArray = salesjArr.getJSONObject(i).getJSONArray("details");
                    for (int j = 0; j < invArray.length(); j++) {
                        double invTaxAmt = invArray.getJSONObject(j).getDouble("invtaxamount");
                        invTaxAmt = (invTaxAmt < 0) ? (-1) * invTaxAmt : invTaxAmt;

                        double invAmtExcludingGst = invArray.getJSONObject(j).getDouble("invamtexcludinggst");
                        invAmtExcludingGst = (invAmtExcludingGst < 0) ? (-1) * invAmtExcludingGst : invAmtExcludingGst;
                        
                        String fcycode = "XXX";
                        double gstfcy = 0;
                        double salesfcyexcludinggst = 0;
                        if (!Constants.SGD_CURRENCY_CODE.equalsIgnoreCase(invArray.getJSONObject(j).optString("fcycode"))) {
                            fcycode = invArray.getJSONObject(j).optString("fcycode");
                            
                            gstfcy = invArray.getJSONObject(j).getDouble("gstfcy");
                            gstfcy = (gstfcy < 0) ? (-1) * gstfcy : gstfcy;
                            
                            salesfcyexcludinggst = invArray.getJSONObject(j).getDouble("salesfcyexcludinggst");
                            salesfcyexcludinggst = (salesfcyexcludinggst < 0) ? (-1) * salesfcyexcludinggst : salesfcyexcludinggst;
                        }
                        
                        report.append(invArray.getJSONObject(j).optString("invname", "") + "|" + invArray.getJSONObject(j).optString("invuen", "") + "|" + formatter.format(new Date(invArray.getJSONObject(j).getLong("invdate"))) + "|" + invArray.getJSONObject(j).getString("invno") + "|" + invArray.getJSONObject(j).getString("invlineno") + "|" + invArray.getJSONObject(j).getString("invproduct") + "|" + authHandler.formattedAmount(invAmtExcludingGst, companyid) + "|" + authHandler.formattedAmount(invTaxAmt, companyid) + "|" + invArray.getJSONObject(j).getString("invtaxcode") + "|" + invArray.getJSONObject(j).getString("invcountry") + "|" + fcycode + "|" + authHandler.formattedAmount(salesfcyexcludinggst, companyid) + "|" + authHandler.formattedAmount(gstfcy, companyid) + "|" + "\r\n");
                        totalPurchase += invAmtExcludingGst;
                        taxAmount += invTaxAmt;
                    }
                    length += invArray.length();
                }
                report.append("SuppDataEnd|" + authHandler.formattedAmount(totalPurchase, companyid) + "|" + authHandler.formattedAmount(taxAmount, companyid) + "|" + length + "|" + "\r\n");

                double credit = 0, debit = 0, total = 0;
                length = 0;
                //            JSONArray JEjArr = getGLdataforIAFfile(requestParams, list);
                JSONArray JEjArr = getGLdataforIAFfileNEW(request, requestParams);//<-- This method is use less for calculation of GL DATA For IAF File

                HashMap<String, JSONArray> accountwiseJEDetails = new HashMap<String, JSONArray>();
                for (int i = 0; i < JEjArr.length(); i++) {
                    JSONArray jeArray = JEjArr.getJSONObject(i).getJSONArray("details");
                    for (int j = 0; j < jeArray.length(); j++) {
                        JSONArray accountJEDetailsArr = new JSONArray();
                        String accountName = jeArray.getJSONObject(j).getString("jeaccountname");
                        if (accountwiseJEDetails.containsKey(accountName)) {
                            accountJEDetailsArr = accountwiseJEDetails.get(accountName);
                            accountJEDetailsArr.put(jeArray.getJSONObject(j));
                            accountwiseJEDetails.put(accountName, accountJEDetailsArr);
                        } else {
                            accountJEDetailsArr.put(jeArray.getJSONObject(j));
                            accountwiseJEDetails.put(accountName, accountJEDetailsArr);
                        }
                    }
                    length += jeArray.length();
                }
                report.append("GLDataStart|" + "\r\n");
                report.append("TransactionDate|AccountID|AccountName|TransactionDescription|Name|TransactionID|SourceDocumentID|SourceType|Debit|Credit|Balance|" + "\r\n");

                for (Map.Entry<String, JSONArray> entry : accountwiseJEDetails.entrySet()) {
                    JSONArray jeArray = entry.getValue();

                    for (int j = 0; j < jeArray.length(); j++) {
                        if (j == 0) {
                            report.append(formatter.format(new Date(jeArray.getJSONObject(j).getLong("creationdate"))) + "|" + jeArray.getJSONObject(j).optString("jeaccountid", "") + "|" + jeArray.getJSONObject(j).getString("jeaccountname") + "|OPENING BALANCE|||||0.00|0.00|" + authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("openingbalnace"), companyid) + "|" + "\r\n");
                        }
                        total += -(jeArray.getJSONObject(j).getDouble("credit")) + jeArray.getJSONObject(j).getDouble("debit");
                        report.append(formatter.format(new Date(jeArray.getJSONObject(j).getLong("jedate"))) + "|" + jeArray.getJSONObject(j).optString("jeaccountid", "") + "|" + jeArray.getJSONObject(j).getString("jeaccountname") + "|" + jeArray.getJSONObject(j).optString("jedesc", "") + "||" + jeArray.getJSONObject(j).getString("sourcedocid") + "|" + jeArray.getJSONObject(j).getString("jeid") + "|" + jeArray.getJSONObject(j).getString("sourcetype") + "|" + authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("debit"), companyid) + "|" + authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("credit"), companyid) + "|" + authHandler.formattedAmount(total, companyid) + "|" + "\r\n");
                        debit += (jeArray.getJSONObject(j).getDouble("debit"));
                        credit += (jeArray.getJSONObject(j).getDouble("credit"));
                    }
                }
                report.append("GLDataEnd|" + authHandler.formattedAmount(debit, companyid) + "|" + authHandler.formattedAmount(credit, companyid) + "|" + length + "|" + "SGD|" + "\r\n");
                baos.write(report.toString().getBytes());
                response.setHeader("Content-Disposition", "attachment; filename=\"" + "IAFv1.0.0.txt" + "\"");
                response.setContentType("application/octet-stream");
                response.setContentLength(baos.size());
                response.getOutputStream().write(baos.toByteArray());
                response.getOutputStream().flush();
                response.getOutputStream().close();
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView gstTransactionListingSubmission(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView";
        String message = "";
        int status = 1;
        try {
            jobj.put(Constants.RES_success, false);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String subdomain = sessionHandlerImpl.getCompanySessionObj(request).getCdomain();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            Company company = companyAccountPreferences.getCompany();
            String cashAccount = companyAccountPreferences.getCashAccount().getID();
            requestParams.put("endDate", endDate);
            requestParams.put("startDate", startDate);
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put(Constants.COMPANY_SUBDOMAIN, subdomain);
            JSONObject jobjData = accGstService.gstTransactionListingSubmissioncheck(requestParams);
            if (jobjData.has("flag") && jobjData.getInt("flag") == 1) {
                if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                    requestParams.put("gstFlag", true);
                }
                requestParams.put("cashaccountid", cashAccount);
                
                // P
                requestParams.put("isSalesTax", false);
                result = accTaxObj.getCalculatedTax((Map) requestParams);
                List list = result.getEntityList();
                JSONArray purchasejArr = getCalculatedPurchaseTaxMerged(requestParams, list,Constants.isGSTAuditFile);
                
                // S
                requestParams.put("isSalesTax", true);
                result = accTaxObj.getCalculatedTax((Map) requestParams);
                list = result.getEntityList();
                JSONArray salesjArr = getCalculatedSalesTaxMerged(requestParams, list,Constants.isGSTAuditFile);
                
                
                JSONObject jobjparams = new JSONObject();
                jobjparams.put("gstRegNo", request.getParameter("gstRegNo"));
                jobjparams.put("taxRefNo", request.getParameter("taxRefNo"));
                jobjparams.put("endDate", sdf.format(endDate));
                jobjparams.put("startDate", sdf.format(startDate));
                jobjparams.put("dtIAFCreation", sdf.format(new Date()));
                jobjparams.put(Constants.companyKey, companyid);
                jobjparams.put(Constants.COMPANY_SUBDOMAIN, subdomain);
                jobj  = accReportsService.initiateTransactionListingSubmission(purchasejArr, salesjArr, jobjparams);
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, "gstTransactionListingSubmission", ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    
    public ModelAndView gstTransactionListingSubmissionDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            HashMap<String, Object> requestParam = AccountingManager.getGlobalParams(request);
            requestParam.put(Constants.companyid, sessionHandlerImpl.getCompanyid(request));
            if (!StringUtil.isNullOrEmpty(request.getParameter("startDate")) && !StringUtil.isNullOrEmpty(request.getParameter("endDate")) ) {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                requestParam.put("startDate", sdf.parse(request.getParameter("startDate")));
                requestParam.put("endDate", sdf.parse(request.getParameter("endDate")));
            }
            JSONObject jobjData = accGstService.gstTransactionListingSubmissionDetails(requestParam);
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_data, jobjData.getJSONArray("data"));
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView gstTransactionListingreSubmission(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            jobj.put(Constants.RES_success, false);
            HashMap<String, Object> requestParam = AccountingManager.getGlobalParams(request);
            requestParam.put(Constants.companyid, sessionHandlerImpl.getCompanyid(request));
            requestParam.put("ids", request.getParameter("ids"));
            jobj = accReportsService.initiateTransactionListingreSubmission(requestParam);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView gstTLAfterIRASAuthentication(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            jobj.put(Constants.RES_success, false);
            accReportsService.gstTransactionListingDataSubmission(request.getParameter("ids"),request.getParameter("companyid"),request.getParameter("code"),request.getParameter("state"));
            jobj.put("success", true);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    /**
     * Function for export chunk data which is in message part 
     * @request : chunk id
     * @response : export as text file(GSTTrancationListing_Chunk_{chunkNumber}) containing | separated chunk data
     */
    public ModelAndView downloadTransactionListingChunkData(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();

            jobj.put(Constants.RES_success, false);
            jobj.put("id",request.getParameter("id"));
            JSONObject jobjData = accGstService.gstTransactionListingChunkData(jobj);
            String message = jobjData.getString("message").replace(",", " ");
            message = message.replace("|", ",");
            os.write(message.getBytes());
            response.setHeader("Content-Disposition", "attachment; filename=\"GSTTrancationListing_Chunk_"+jobjData.getString("chunknumber")+".csv\"");
            response.setContentType("application/octet-stream");
            response.setContentLength(os.size());
            response.getOutputStream().write(os.toByteArray());
            response.getOutputStream().flush();
            response.getOutputStream().close();
            jobj.put("success", true);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
    
    private static Node getElements(org.w3c.dom.Document doc, Element element, String name, String value) {
        Element node = doc.createElement(name);
        node.appendChild(doc.createTextNode(value));
        return node;
    }

    public ModelAndView exportXMLIAFfile(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyObj.getEntityList().get(0);
            boolean isMalasianCompany = company.getCountry().getID().equalsIgnoreCase("137");
            double totalPurchase = 0, taxAmount = 0;
            int length = 0;
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            int totalPCount = 0, totalSCount = 0, totalLCount = 0;
            double totalPurchaseAmount = 0, purchaseTaxAmount = 0, totalSalesAmount = 0, salesTaxAmount = 0;
            String companyName = company.getCompanyName();
            String businessRN = companyAccountPreferences.getCompanyUEN();
            String gstNumber = companyAccountPreferences.getGstNumber();
            
            ExtraCompanyPreferences extrapref = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
                if (extrapref != null && extrapref.isIsMultiEntity() && !StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_Search_Json))) {
                    String searchjson = request.getParameter(Constants.Acc_Search_Json);
                    companyName = exportDaoObj.getEntityDimensionNameforExport(searchjson, company);
                }
            }
            String entityName = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.multiEntityValue))) {
                entityName = request.getParameter(Constants.multiEntityValue);
                Map entityParamsMap = new HashMap<>();
                JSONObject entityObj = null;
                entityParamsMap.put(Constants.companyid, companyid);
                entityParamsMap.put(Constants.multiEntityValue, request.getParameter(Constants.multiEntityValue));
                entityObj = accGstService.getEntityDetails(entityParamsMap);
                if (entityObj.getJSONArray("data").length() > 0) {
                    JSONObject entityDetailsObj = entityObj.getJSONArray("data").getJSONObject(0);
                    businessRN = entityDetailsObj.optString("multiEntitycompanybrn");
                    gstNumber = entityDetailsObj.optString("multiEntitygstno");
                }
            }

            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");
            String periodStart = sdf1.format(companyAccountPreferences.getBookBeginningFrom());
            String periodEnd = sdf1.format(new Date());
            String gafCreationDate = sdf.format(new Date());
            String gafVersion = companyAccountPreferences.getIafVersion();
            
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                accFinancialReportsService.getAdvanceSearchModuleFieldParams(requestParams);
            }

            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            org.w3c.dom.Document doc = documentBuilder.newDocument();
            if (gafVersion.equals(Constants.GAFFileVersion_1)) {
                Element gstRootElement = doc.createElement("GSTAuditFile");
                doc.appendChild(gstRootElement);

                Element companiesRootElement = doc.createElement("Companies");
                gstRootElement.appendChild(companiesRootElement);
                Element companyRootElement = doc.createElement("Company");
                companiesRootElement.appendChild(companyRootElement);
                // append child elements to root element

                companyRootElement.appendChild(getElements(doc, companyRootElement, "BusinessName", companyName));
                companyRootElement.appendChild(getElements(doc, companyRootElement, "BusinessRN", businessRN));
                companyRootElement.appendChild(getElements(doc, companyRootElement, "GSTNumber", gstNumber));
                companyRootElement.appendChild(getElements(doc, companyRootElement, "PeriodStart", sdf.format(startDate)));
                companyRootElement.appendChild(getElements(doc, companyRootElement, "PeriodEnd", sdf.format(endDate)));
                companyRootElement.appendChild(getElements(doc, companyRootElement, "GAFCreationDate", gafCreationDate));
                companyRootElement.appendChild(getElements(doc, companyRootElement, "ProductVersion", Constants.DeskeraERPVersion));
                companyRootElement.appendChild(getElements(doc, companyRootElement, "GAFVersion", gafVersion));

//                HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                String cashAccount = companyAccountPreferences.getCashAccount().getID();
                requestParams.put("cashaccountid", cashAccount);
                result = accTaxObj.getCalculatedTax((Map) requestParams);
                List list = result.getEntityList();

                requestParams.put("endDate", endDate);
                requestParams.put("startDate", startDate);
                requestParams.put("issales", true);
                requestParams.put(Constants.companyKey, companyid);
                JSONArray purchasejArr = getCalculatedPurchaseTaxforIAFfile(requestParams, list);

                //purchases
                Element purchasesRootElement = doc.createElement("Purchases");
                gstRootElement.appendChild(purchasesRootElement);
                for (int i = 0; i < purchasejArr.length(); i++) {
                    JSONArray grArray = purchasejArr.getJSONObject(i).getJSONArray("details");
                    for (int j = 0; j < grArray.length(); j++) {
                        double grAmt = grArray.getJSONObject(j).optDouble("gramt");
                        grAmt = (grAmt < 0) ? (-1) * grAmt : grAmt;
                        double grTaxAmt = grArray.getJSONObject(j).optDouble("grtaxamount");
                        grTaxAmt = (grTaxAmt < 0) ? (-1) * grTaxAmt : grTaxAmt;

                        double gstfcy = grArray.getJSONObject(j).optDouble("gstfcy");
                        gstfcy = (gstfcy < 0) ? (-1) * gstfcy : gstfcy;

                        double purchasefcy = grArray.getJSONObject(j).optDouble("purchasefcy");
                        purchasefcy = (purchasefcy < 0) ? (-1) * purchasefcy : purchasefcy;

                        Element purchaseSubRootElement = doc.createElement("Purchase");
                        purchasesRootElement.appendChild(purchaseSubRootElement);

                        purchaseSubRootElement.appendChild(getElements(doc, purchaseSubRootElement, "SupplierName", grArray.getJSONObject(j).optString("grname")));
                        purchaseSubRootElement.appendChild(getElements(doc, purchaseSubRootElement, "SupplierBRN", grArray.getJSONObject(j).optString("gruen")));
                        purchaseSubRootElement.appendChild(getElements(doc, purchaseSubRootElement, "InvoiceDate", sdf.format(new Date(new Long(grArray.getJSONObject(j).getString("grdate"))))));
                        purchaseSubRootElement.appendChild(getElements(doc, purchaseSubRootElement, "InvoiceNumber", grArray.getJSONObject(j).optString("grno")));
                        purchaseSubRootElement.appendChild(getElements(doc, purchaseSubRootElement, "ImportDeclarationNo", grArray.getJSONObject(j).optString("permit")));
                        purchaseSubRootElement.appendChild(getElements(doc, purchaseSubRootElement, "LineNumber", grArray.getJSONObject(j).optString("grlineno")));
                        purchaseSubRootElement.appendChild(getElements(doc, purchaseSubRootElement, "ProductDescription", grArray.getJSONObject(j).optString("grproduct")));
                        purchaseSubRootElement.appendChild(getElements(doc, purchaseSubRootElement, "PurchaseValueMYR", authHandler.formattedAmount(grAmt, companyid)));
                        purchaseSubRootElement.appendChild(getElements(doc, purchaseSubRootElement, "GSTValueMYR", authHandler.formattedAmount(grTaxAmt, companyid)));
                        purchaseSubRootElement.appendChild(getElements(doc, purchaseSubRootElement, "TaxCode", grArray.getJSONObject(j).optString("grtaxcode")));
                        purchaseSubRootElement.appendChild(getElements(doc, purchaseSubRootElement, "FCYCode", grArray.getJSONObject(j).optString("fcycode")));
                        purchaseSubRootElement.appendChild(getElements(doc, purchaseSubRootElement, "PurchaseFCY", authHandler.formattedAmount(purchasefcy, companyid)));
                        purchaseSubRootElement.appendChild(getElements(doc, purchaseSubRootElement, "GSTFCY", authHandler.formattedAmount(gstfcy, companyid)));
                        totalPurchaseAmount += grArray.getJSONObject(j).optDouble("gramt");
                        purchaseTaxAmount += grArray.getJSONObject(j).optDouble("grtaxamount");
                    }
                    totalPCount += grArray.length();
                }

                //report.append("PurcDataEnd|" + authHandler.formattedAmount(totalPurchase) + "|" + authHandler.formattedAmount(taxAmount) + "|" + length + "|" + "\r\n");
                //Supplies
                Element suppliesRootElement = doc.createElement("Supplies");
                gstRootElement.appendChild(suppliesRootElement);

                JSONArray salesjArr = getCalculatedSalesTaxforIAFfile(requestParams, list);
                totalPurchase = taxAmount = length = 0;
                // report.append("SuppDataStart|" + "\r\n");
                for (int i = 0; i < salesjArr.length(); i++) {
                    JSONArray invArray = salesjArr.getJSONObject(i).getJSONArray("details");
                    for (int j = 0; j < invArray.length(); j++) {
                        double invTaxAmt = invArray.getJSONObject(j).getDouble("invtaxamount");
                        invTaxAmt = (invTaxAmt < 0) ? (-1) * invTaxAmt : invTaxAmt;
                        double invAmt = invArray.getJSONObject(j).getDouble("invamt");
                        invAmt = (invAmt < 0) ? (-1) * invAmt : invAmt;

                        double gstfcy = invArray.getJSONObject(j).getDouble("gstfcy");
                        gstfcy = (gstfcy < 0) ? (-1) * gstfcy : gstfcy;

                        double salesfcy = invArray.getJSONObject(j).getDouble("salesfcy");
                        salesfcy = (salesfcy < 0) ? (-1) * salesfcy : salesfcy;

                        Element suppliseSubRootElement = doc.createElement("Supply");
                        suppliesRootElement.appendChild(suppliseSubRootElement);

                        suppliseSubRootElement.appendChild(getElements(doc, suppliseSubRootElement, "CustomerName", invArray.getJSONObject(j).optString("invname", "")));
                        suppliseSubRootElement.appendChild(getElements(doc, suppliseSubRootElement, "CustomerBRN", invArray.getJSONObject(j).optString("invuen", "")));
                        suppliseSubRootElement.appendChild(getElements(doc, suppliseSubRootElement, "InvoiceDate", sdf.format(new Date(new Long(invArray.getJSONObject(j).getString("invdate"))))));
                        suppliseSubRootElement.appendChild(getElements(doc, suppliseSubRootElement, "InvoiceNumber", invArray.getJSONObject(j).getString("invno")));
                        suppliseSubRootElement.appendChild(getElements(doc, suppliseSubRootElement, "LineNumber", invArray.getJSONObject(j).getString("invlineno")));
                        suppliseSubRootElement.appendChild(getElements(doc, suppliseSubRootElement, "ProductDescription", invArray.getJSONObject(j).getString("invproduct")));
                        suppliseSubRootElement.appendChild(getElements(doc, suppliseSubRootElement, "SupplyValueMYR", authHandler.formattedAmount(invAmt, companyid)));
                        suppliseSubRootElement.appendChild(getElements(doc, suppliseSubRootElement, "GSTValueMYR", authHandler.formattedAmount(invTaxAmt, companyid)));
                        suppliseSubRootElement.appendChild(getElements(doc, suppliseSubRootElement, "TaxCode", invArray.getJSONObject(j).getString("invtaxcode")));
                        suppliseSubRootElement.appendChild(getElements(doc, suppliseSubRootElement, "Country", invArray.getJSONObject(j).optString(Constants.SHIPPING_COUNTRY)));
                        suppliseSubRootElement.appendChild(getElements(doc, suppliseSubRootElement, "FCYCode", invArray.getJSONObject(j).getString("fcycode")));
                        suppliseSubRootElement.appendChild(getElements(doc, suppliseSubRootElement, "SupplyFCY", authHandler.formattedAmount(salesfcy, companyid)));
                        suppliseSubRootElement.appendChild(getElements(doc, suppliseSubRootElement, "GSTFCY", authHandler.formattedAmount(gstfcy, companyid)));

                        totalSalesAmount += invArray.getJSONObject(j).getDouble("invamt");
                        salesTaxAmount += invArray.getJSONObject(j).getDouble("invtaxamount");
                    }
                    totalSCount += invArray.length();
                }

                //Ledger
                double credit = 0, debit = 0, total = 0;
                length = 0;
                //            JSONArray JEjArr = getGLdataforIAFfile(requestParams, list);
                JSONArray JEjArr = getGLdataforIAFfileNEW(request, requestParams);//<-- This method is use less for calculation of GL DATA For IAF File

                HashMap<String, JSONArray> accountwiseJEDetails = new HashMap<String, JSONArray>();
                for (int i = 0; i < JEjArr.length(); i++) {
                    JSONArray jeArray = JEjArr.getJSONObject(i).getJSONArray("details");
                    for (int j = 0; j < jeArray.length(); j++) {
                        JSONArray accountJEDetailsArr = new JSONArray();
                        String accountName = jeArray.getJSONObject(j).getString("jeaccountname");
                        if (accountwiseJEDetails.containsKey(accountName)) {
                            accountJEDetailsArr = accountwiseJEDetails.get(accountName);
                            accountJEDetailsArr.put(jeArray.getJSONObject(j));
                            accountwiseJEDetails.put(accountName, accountJEDetailsArr);
                        } else {
                            accountJEDetailsArr.put(jeArray.getJSONObject(j));
                            accountwiseJEDetails.put(accountName, accountJEDetailsArr);
                        }
                    }
                    totalLCount += jeArray.length();
                }
                Element ledgerRootElement = doc.createElement("Ledger");
                gstRootElement.appendChild(ledgerRootElement);
                // report.append("GLDataStart|" + "\r\n");
//                report.append("L|TransactionDate|AccountID|AccountName|TransactionDescription|Name|TransactionID|SourceDocumentID|SourceType|Debit|Credit|Balance|" + "\r\n");

                for (Map.Entry<String, JSONArray> entry : accountwiseJEDetails.entrySet()) {
                    JSONArray jeArray = entry.getValue();

                    for (int j = 0; j < jeArray.length(); j++) {
                        if (j == 0) {
                            totalLCount = totalLCount + 1;
//                            report.append("L|"+sdf.format(new Date(new Long(jeArray.getJSONObject(j).getString("creationdate")))) + "|" + jeArray.getJSONObject(j).optString("jeaccountid", "") + "|" + jeArray.getJSONObject(j).getString("jeaccountname") + "|OPENING BALANCE|||||0.00|0.00|" + authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("openingbalnace")) + "\r\n");
                            Element ledgerSubRootElement = doc.createElement("LedgerEntry");
                            ledgerRootElement.appendChild(ledgerSubRootElement);
                            
                            ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "TransactionDate", sdf.format(new Date(new Long(jeArray.getJSONObject(j).getString("creationdate"))))));
                            ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "AccountID", jeArray.getJSONObject(j).optString("jeaccountid", "")));
                            ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "AccountName", jeArray.getJSONObject(j).getString("jeaccountname")));
                            ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "TransactionDescription", "OPENING BALANCE"));
                            ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "Name", ""));
                            ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "TransactionID", ""));
                            ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "SourceDocumentID", ""));
                            ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "SourceType", ""));
                            ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "Debit", "0.00"));
                            ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "Credit", "0.00"));
                            ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "Balance", authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("openingbalnace"), companyid)));
                        }
                        total += -(jeArray.getJSONObject(j).getDouble("credit")) + jeArray.getJSONObject(j).getDouble("debit");

                        Element ledgerSubRootElement = doc.createElement("LedgerEntry");
                        ledgerRootElement.appendChild(ledgerSubRootElement);

                        ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "TransactionDate", sdf.format(new Date(new Long(jeArray.getJSONObject(j).getString("jedate"))))));
                        ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "AccountID", jeArray.getJSONObject(j).optString("jeaccountid", "")));
                        ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "AccountName", jeArray.getJSONObject(j).getString("jeaccountname")));
                        ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "TransactionDescription", jeArray.getJSONObject(j).optString("jedesc", "")));
                        ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "Name", companyName));
                        ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "TransactionID", jeArray.getJSONObject(j).getString("jeid")));
                        ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "SourceDocumentID", jeArray.getJSONObject(j).getString("sourcedocid")));
                        ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "SourceType", jeArray.getJSONObject(j).getString("sourcetype")));
                        ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "Debit", authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("debit"), companyid)));
                        ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "Credit", authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("credit"), companyid)));
                        ledgerSubRootElement.appendChild(getElements(doc, ledgerSubRootElement, "Balance", authHandler.formattedAmount(total, companyid)));

                        debit += (jeArray.getJSONObject(j).getDouble("debit"));
                        credit += (jeArray.getJSONObject(j).getDouble("credit"));
                    }
                }
                Element footerRootElement = doc.createElement("Footer");
                gstRootElement.appendChild(footerRootElement);

                footerRootElement.appendChild(getElements(doc, footerRootElement, "TotalPurchaseCount", totalPCount + ""));
                footerRootElement.appendChild(getElements(doc, footerRootElement, "TotalPurchaseAmount", authHandler.formattedAmount(totalPurchaseAmount, companyid)));
                footerRootElement.appendChild(getElements(doc, footerRootElement, "TotalPurchaseAmountGST", authHandler.formattedAmount(purchaseTaxAmount, companyid)));
                footerRootElement.appendChild(getElements(doc, footerRootElement, "TotalSupplyCount", totalSCount + ""));
                footerRootElement.appendChild(getElements(doc, footerRootElement, "TotalSupplyAmount", authHandler.formattedAmount(totalSalesAmount, companyid)));
                footerRootElement.appendChild(getElements(doc, footerRootElement, "TotalSupplyAmountGST", authHandler.formattedAmount(salesTaxAmount, companyid)));
                footerRootElement.appendChild(getElements(doc, footerRootElement, "TotalLedgerCount", totalLCount + ""));
                footerRootElement.appendChild(getElements(doc, footerRootElement, "TotalLedgerDebit", authHandler.formattedAmount(debit, companyid)));
                footerRootElement.appendChild(getElements(doc, footerRootElement, "TotalLedgerCredit", authHandler.formattedAmount(credit, companyid)));
                footerRootElement.appendChild(getElements(doc, footerRootElement, "TotalLedgerBalance", total + ""));

                    // report.append("GLDataEnd|" + authHandler.formattedAmount(debit) + "|" + authHandler.formattedAmount(credit) + "|" + length + "|" + "SGD|" + "\r\n");
    //                report.append("F|" +totalPCount +"|"+authHandler.formattedAmount(totalPurchaseAmount) +"|"+authHandler.formattedAmount(purchaseTaxAmount) +"|"+ totalSCount +"|"+ authHandler.formattedAmount(totalSalesAmount) +"|"+ authHandler.formattedAmount(salesTaxAmount) +"|"+ totalLCount+"|"+  authHandler.formattedAmount(debit) + "|" + authHandler.formattedAmount(credit) + "|" + total + "|"+ "\r\n");
            } else if (gafVersion.equals(Constants.GAFFileVersion_2)) {
                Element companyRootElement = doc.createElement("Company");
                doc.appendChild(companyRootElement);

                Element CompanyInfoRootElement = doc.createElement("CompanyInfo");
                companyRootElement.appendChild(CompanyInfoRootElement);
                CompanyInfoRootElement.appendChild(getElements(doc, CompanyInfoRootElement, "CompanyName", companyName));
                CompanyInfoRootElement.appendChild(getElements(doc, CompanyInfoRootElement, "CompanyBRN", businessRN));
                CompanyInfoRootElement.appendChild(getElements(doc, CompanyInfoRootElement, "CompanyGSTNo", gstNumber));
                CompanyInfoRootElement.appendChild(getElements(doc, CompanyInfoRootElement, "PeriodStart", sdf.format(startDate)));
                CompanyInfoRootElement.appendChild(getElements(doc, CompanyInfoRootElement, "PeriodEnd", sdf.format(endDate)));
                CompanyInfoRootElement.appendChild(getElements(doc, CompanyInfoRootElement, "GAFCreationDate", gafCreationDate));
                CompanyInfoRootElement.appendChild(getElements(doc, CompanyInfoRootElement, "SoftwareVersion", Constants.DeskeraERPVersion));
                CompanyInfoRootElement.appendChild(getElements(doc, CompanyInfoRootElement, "GAFVersion", Constants.GAFFileVersion_2));

                String cashAccount = companyAccountPreferences.getCashAccount().getID();
                requestParams.put("cashaccountid", cashAccount);
                result = accTaxObj.getCalculatedTax((Map) requestParams);
                List list = result.getEntityList();
                requestParams.put("endDate", endDate);
                requestParams.put("startDate", startDate);
                requestParams.put("issales", true);
                requestParams.put(Constants.companyKey, companyid);
                //Purchases
                JSONArray purchasejArr = getCalculatedPurchaseTaxforIAFfile(requestParams, list);

                Element purchaseRootElement = doc.createElement("Purchase");
                companyRootElement.appendChild(purchaseRootElement);
                for (int i = 0; i < purchasejArr.length(); i++) {
                    JSONArray grArray = purchasejArr.getJSONObject(i).getJSONArray("details");
                    for (int j = 0; j < grArray.length(); j++) {
                        double grAmt = grArray.getJSONObject(j).optDouble("gramt");
                        grAmt = (grAmt < 0) ? (-1) * grAmt : grAmt;
                        double grTaxAmt = grArray.getJSONObject(j).optDouble("grtaxamount");
                        grTaxAmt = (grTaxAmt < 0) ? (-1) * grTaxAmt : grTaxAmt;

                        double gstfcy = grArray.getJSONObject(j).optDouble("gstfcy");
                        gstfcy = (gstfcy < 0) ? (-1) * gstfcy : gstfcy;

                        double purchasefcy = grArray.getJSONObject(j).optDouble("purchasefcy");
                        purchasefcy = (purchasefcy < 0) ? (-1) * purchasefcy : purchasefcy;

                        Element purchaseLinesRootElement = doc.createElement("PurchaseLines");
                        purchaseRootElement.appendChild(purchaseLinesRootElement);

                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "SupplierName", grArray.getJSONObject(j).optString("grname")));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "SupplierBRN", grArray.getJSONObject(j).optString("gruen")));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "SupplierGSTNo", grArray.getJSONObject(j).optString("suppliergstno")));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "InvoiceDate", sdf.format(new Date(new Long(grArray.getJSONObject(j).getString("grdate"))))));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "PostingDate", sdf.format(new Date(new Long(grArray.getJSONObject(j).getString("grdate"))))));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "InvoiceNo", grArray.getJSONObject(j).optString("grno")));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "ImportK1Number", grArray.getJSONObject(j).optString(Constants.importExportDeclarationNo)));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "LineNo", grArray.getJSONObject(j).optString("grlineno")));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "ProductDescription", grArray.getJSONObject(j).optString("grproduct")));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "PurchaseValueMYR", authHandler.formattedAmount(grAmt, companyid)));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "PurchaseGSTValueMYR", authHandler.formattedAmount(grTaxAmt, companyid)));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "TaxCode", grArray.getJSONObject(j).optString("grtaxcode")));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "FCYCode", grArray.getJSONObject(j).optString("fcycode")));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "PurchaseFCY", authHandler.formattedAmount(purchasefcy, companyid)));
                        purchaseLinesRootElement.appendChild(getElements(doc, purchaseLinesRootElement, "PurchaseGSTValueFCY", authHandler.formattedAmount(gstfcy, companyid)));
                        totalPurchaseAmount += grArray.getJSONObject(j).optDouble("gramt");
                        purchaseTaxAmount += grArray.getJSONObject(j).optDouble("grtaxamount");
                    }
                    totalPCount += grArray.length();
                }
                org.w3c.dom.Attr SumPurchaseValueMYR = doc.createAttribute("SumPurchaseValueMYR");
                SumPurchaseValueMYR.setValue(authHandler.formattedAmount(totalPurchaseAmount, companyid));
                purchaseRootElement.setAttributeNode(SumPurchaseValueMYR);

                org.w3c.dom.Attr SumPurchaseGSTValueMYR = doc.createAttribute("SumPurchaseGSTValueMYR");
                SumPurchaseGSTValueMYR.setValue(authHandler.formattedAmount(purchaseTaxAmount, companyid));
                purchaseRootElement.setAttributeNode(SumPurchaseGSTValueMYR);

                org.w3c.dom.Attr CountPurchaseRecord = doc.createAttribute("CountPurchaseRecord");
                CountPurchaseRecord.setValue("" + totalPCount);
                purchaseRootElement.setAttributeNode(CountPurchaseRecord);

                //Supplies
                JSONArray salesjArr = getCalculatedSalesTaxforIAFfile(requestParams, list);

                Element supplyRootElement = doc.createElement("Supply");
                companyRootElement.appendChild(supplyRootElement);

                totalPurchase = taxAmount = length = 0;
                for (int i = 0; i < salesjArr.length(); i++) {
                    JSONArray invArray = salesjArr.getJSONObject(i).getJSONArray("details");
                    for (int j = 0; j < invArray.length(); j++) {
                        double invTaxAmt = invArray.getJSONObject(j).getDouble("invtaxamount");
                        invTaxAmt = (invTaxAmt < 0) ? (-1) * invTaxAmt : invTaxAmt;
                        double invAmt = invArray.getJSONObject(j).getDouble("invamt");
                        invAmt = (invAmt < 0) ? (-1) * invAmt : invAmt;

                        double gstfcy = invArray.getJSONObject(j).getDouble("gstfcy");
                        gstfcy = (gstfcy < 0) ? (-1) * gstfcy : gstfcy;

                        double salesfcy = invArray.getJSONObject(j).getDouble("salesfcy");
                        salesfcy = (salesfcy < 0) ? (-1) * salesfcy : salesfcy;

                        Element supplyLinesRootElement = doc.createElement("SupplyLines");
                        supplyRootElement.appendChild(supplyLinesRootElement);

                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "CustomerName", invArray.getJSONObject(j).optString("invname", "")));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "CustomerBRN", invArray.getJSONObject(j).optString("invuen", "")));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "CustomerGSTNo", invArray.getJSONObject(j).optString("customergstno", "")));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "InvoiceDate", sdf.format(new Date(new Long(invArray.getJSONObject(j).getString("invdate"))))));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "InvoiceNo", invArray.getJSONObject(j).getString("invno")));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "ExportK2Number", invArray.getJSONObject(j).getString(Constants.importExportDeclarationNo)));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "LineNumber", invArray.getJSONObject(j).getString("invlineno")));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "ProductDescription", invArray.getJSONObject(j).getString("invproduct")));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "SupplyValueMYR", authHandler.formattedAmount(invAmt, companyid)));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "SupplyGSTValueMYR", authHandler.formattedAmount(invTaxAmt, companyid)));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "TaxCode", invArray.getJSONObject(j).getString("invtaxcode")));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "Country", invArray.getJSONObject(j).optString(Constants.SHIPPING_COUNTRY)));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "FCYCode", invArray.getJSONObject(j).getString("fcycode")));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "SupplyValueFCY", authHandler.formattedAmount(salesfcy, companyid)));
                        supplyLinesRootElement.appendChild(getElements(doc, supplyLinesRootElement, "SupplyGSTValueFCY", authHandler.formattedAmount(gstfcy, companyid)));

                        totalSalesAmount += invArray.getJSONObject(j).getDouble("invamt");
                        salesTaxAmount += invArray.getJSONObject(j).getDouble("invtaxamount");
                    }
                    totalSCount += invArray.length();
                }
                org.w3c.dom.Attr SumSupplyValueMYR = doc.createAttribute("SumSupplyValueMYR");
                SumSupplyValueMYR.setValue(authHandler.formattedAmount(totalSalesAmount, companyid));
                supplyRootElement.setAttributeNode(SumSupplyValueMYR);

                org.w3c.dom.Attr SumSupplyGSTValueMYR = doc.createAttribute("SumSupplyGSTValueMYR");
                SumSupplyGSTValueMYR.setValue(authHandler.formattedAmount(salesTaxAmount, companyid));
                supplyRootElement.setAttributeNode(SumSupplyGSTValueMYR);

                org.w3c.dom.Attr CountSupplyRecord = doc.createAttribute("CountSupplyRecord");
                CountSupplyRecord.setValue("" + totalSCount);
                supplyRootElement.setAttributeNode(CountSupplyRecord);

                //Ledger
                double credit = 0, debit = 0, total = 0;
                length = 0;
                JSONArray JEjArr = getGLdataforIAFfileNEW(request, requestParams);//<-- This method is use less for calculation of GL DATA For IAF File

                HashMap<String, JSONArray> accountwiseJEDetails = new HashMap<>();
                for (int i = 0; i < JEjArr.length(); i++) {
                    JSONArray jeArray = JEjArr.getJSONObject(i).getJSONArray("details");
                    for (int j = 0; j < jeArray.length(); j++) {
                        JSONArray accountJEDetailsArr = new JSONArray();
                        String accountName = jeArray.getJSONObject(j).getString("jeaccountname");
                        if (accountwiseJEDetails.containsKey(accountName)) {
                            accountJEDetailsArr = accountwiseJEDetails.get(accountName);
                            accountJEDetailsArr.put(jeArray.getJSONObject(j));
                            accountwiseJEDetails.put(accountName, accountJEDetailsArr);
                        } else {
                            accountJEDetailsArr.put(jeArray.getJSONObject(j));
                            accountwiseJEDetails.put(accountName, accountJEDetailsArr);
                        }
                    }
                    totalLCount += jeArray.length();
                }
                Element GLDataRootElement = doc.createElement("GLData");
                companyRootElement.appendChild(GLDataRootElement);

                for (Map.Entry<String, JSONArray> entry : accountwiseJEDetails.entrySet()) {
                    JSONArray jeArray = entry.getValue();

                    for (int j = 0; j < jeArray.length(); j++) {
                        if (j == 0) {
                            totalLCount = totalLCount + 1;
                            
                            Element GLDataLinesRootElement = doc.createElement("GLDataLines");
                            GLDataRootElement.appendChild(GLDataLinesRootElement);
                            
                            GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "TransactionDate", sdf.format(new Date(new Long(jeArray.getJSONObject(j).getString("creationdate"))))));
                            GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "AccountID", jeArray.getJSONObject(j).optString("jeaccountid", "")));
                            GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "AccountType", jeArray.getJSONObject(j).optString("accounttype", "")));
                            GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "AccountName", jeArray.getJSONObject(j).getString("jeaccountname")));
                            GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "TransactionDescription", "OPENING BALANCE"));
                            GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "EntityName", ""));
                            GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "TransactionID", "0"));
                            GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "SourceDocumentID", "0"));
                            GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "SourceType", "0"));
                            GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "Debit", "0"));
                            GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "Credit", "0"));
                            GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "RunningBalance", authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("openingbalnace"), companyid)));
                        }
                        total += -(jeArray.getJSONObject(j).getDouble("credit")) + jeArray.getJSONObject(j).getDouble("debit");

                        Element GLDataLinesRootElement = doc.createElement("GLDataLines");
                        GLDataRootElement.appendChild(GLDataLinesRootElement);

                        GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "TransactionDate", sdf.format(new Date(new Long(jeArray.getJSONObject(j).getString("jedate"))))));
                        GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "AccountID", jeArray.getJSONObject(j).optString("jeaccountid", "")));
                        GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "AccountType", jeArray.getJSONObject(j).optString("accounttype", "")));
                        GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "AccountName", jeArray.getJSONObject(j).getString("jeaccountname")));
                        GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "TransactionDescription", jeArray.getJSONObject(j).optString("jedesc", "")));
                        GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "EntityName", companyName));
                        GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "TransactionID", jeArray.getJSONObject(j).getString("jeid")));
                        GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "SourceDocumentID", jeArray.getJSONObject(j).getString("sourcedocid")));
                        GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "SourceType", jeArray.getJSONObject(j).getString("sourcetype")));
                        GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "Debit", authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("debit"), companyid)));
                        GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "Credit", authHandler.formattedAmount(jeArray.getJSONObject(j).getDouble("credit"), companyid)));
                        GLDataLinesRootElement.appendChild(getElements(doc, GLDataLinesRootElement, "RunningBalance", authHandler.formattedAmount(total, companyid)));

                        debit += (jeArray.getJSONObject(j).getDouble("debit"));
                        credit += (jeArray.getJSONObject(j).getDouble("credit"));
                    }
                }
                org.w3c.dom.Attr SumLedgerDebit = doc.createAttribute("SumLedgerDebit");
                SumLedgerDebit.setValue(authHandler.formattedAmount(debit, companyid));
                GLDataRootElement.setAttributeNode(SumLedgerDebit);

                org.w3c.dom.Attr SumLedgerCredit = doc.createAttribute("SumLedgerCredit");
                SumLedgerCredit.setValue(authHandler.formattedAmount(credit, companyid));
                GLDataRootElement.setAttributeNode(SumLedgerCredit);

                org.w3c.dom.Attr CountLedgerRecord = doc.createAttribute("CountLedgerRecord");
                CountLedgerRecord.setValue("" + totalLCount);
                GLDataRootElement.setAttributeNode(CountLedgerRecord);

                org.w3c.dom.Attr SumLedgerClosingBalance = doc.createAttribute("SumLedgerClosingBalance");
                SumLedgerClosingBalance.setValue(authHandler.formattedAmount(total, companyid));
                GLDataRootElement.setAttributeNode(SumLedgerClosingBalance);
            }
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource dOMSource = new DOMSource(doc);
            StreamResult file = new StreamResult(new File(storageHandlerImpl.GetDocStorePath() + "maleshian.xml"));
            transformer.transform(dOMSource, file);

            response.setHeader("Content-Disposition", "attachment; filename=\"" + Constants.GAFFileName + gafVersion + ".xml\"");
            response.setContentType("application/octet-stream");
            File outFile = new File(storageHandlerImpl.GetDocStorePath() + "maleshian.xml");
            FileInputStream fin = new FileInputStream(outFile);
            byte fileContent[] = new byte[(int) outFile.length()];
            fin.read(fileContent);
            response.getOutputStream().write(fileContent);
            response.getOutputStream().flush();
            response.getOutputStream().close();
        } catch (ParserConfigurationException | DOMException | SessionExpiredException | ServiceException | JSONException | ParseException | IllegalArgumentException | TransformerException | IOException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public JSONArray getCalculatedSalesTaxforIAFfile(HashMap<String, Object> requestParams, List taxList) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        JSONArray invjArr = new JSONArray();
        JSONObject sales = new JSONObject();
        KwlReturnObject result;
        KwlReturnObject billingresult;
        try {
            String companyid = (String) requestParams.get(Constants.companyKey);
            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyObj.getEntityList().get(0);
            boolean isMalasianCompany = company.getCountry().getID().equalsIgnoreCase("137");
            boolean isAdvanceSearch = requestParams.containsKey(Constants.isAdvanceSearch) ? (Boolean) requestParams.get(Constants.isAdvanceSearch) : false;
            String countryName = company.getCountry().getCountryName();

            double saleAmount = 0;
            double taxableAmount = 0;
            double taxCollected = 0;
            Iterator itr = taxList.iterator();
            while (itr.hasNext()) {
                invjArr = new JSONArray();
                Object[] row = (Object[]) itr.next();
                Tax taxObj = (Tax) row[0];
                TaxList taxListObj = (TaxList) row[1];
                Map<String, Object> filterParams = new HashMap<String, Object>();
                filterParams.put("taxid", taxObj.getID());
                if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
                    filterParams.put("startDate", requestParams.get("startDate"));
                    filterParams.put("endDate", requestParams.get("endDate"));
                }

                // Calculating Tax For Invoice
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.invoiceSearchJson));
                    filterParams.put(Constants.Filter_Criteria, requestParams.get(Constants.Filter_Criteria));
                    filterParams.put(Constants.fixedAssetsDisposalInvoiceSearchJson, requestParams.get(Constants.fixedAssetsDisposalInvoiceSearchJson));
                }
                result = accInvoiceDAOobj.getCalculatedInvTax(filterParams);
                Iterator ite1 = result.getEntityList().iterator();
                while (ite1.hasNext()) {
                    double taxPercent = 0;
                    double invAmtDue = 0;
                    Invoice temp = (Invoice) ite1.next();
                    double invSalesAmtInOriginalCurrency = (Double) (temp.getCustomerEntry() == null ? 0 : temp.getCustomerEntry().getAmount()); //Calculating total sales in customer currency     [PS]
                    double invSalesAmt = (Double) (temp.getCustomerEntry() == null ? 0 : temp.getCustomerEntry().getAmount()); //Calculating total sales in customer currency     [PS]
//                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    invSalesAmt = (Double) bAmt.getEntityList().get(0);
                    if (temp.getTax() != null) {
//                        KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getJournalEntry().getEntryDate(), temp.getTax().getID());
                        KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getCreationDate(), temp.getTax().getID());
                        taxPercent = (Double) perresult.getEntityList().get(0);
                    }
                    saleAmount += authHandler.round(invSalesAmt, companyid);//505*100=(100+p)x
                    taxableAmount += authHandler.round((invSalesAmt - (invSalesAmt * 100) / (100 + taxPercent)), companyid);
//                     if(!temp.getCustomerEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))){
//                        invAmtDue=accInvoiceCommon.getAmountDue(requestParams,temp);
//                    }
//                     if(invAmtDue==0){
//                         taxCollected+=authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),2);}

                    sales = new JSONObject();
//                    sales.put("invdate", temp.getJournalEntry().getEntryDate().getTime());
                    sales.put("invdate", temp.getCreationDate().getTime());
                    sales.put("invname", temp.getCustomer().getName());
                    sales.put("invno", temp.getInvoiceNumber());
                    sales.put("invamt", invSalesAmt);
                    sales.put("invamtexcludinggst", (invSalesAmt * 100) / (100 + taxPercent));
                    sales.put("invtaxamount", (invSalesAmt - (invSalesAmt * 100) / (100 + taxPercent)));
                    sales.put("invnamegst", temp.getCustomer().getOther());
                    sales.put("invlineno", 1);
                    sales.put("invproduct", "");
                    sales.put("invtaxcode", temp.getTax().getTaxCode());
                    sales.put("invuen", (isMalasianCompany) ? temp.getCustomer().getCompanyRegistrationNumber() : temp.getCustomer().getAltContactNumber());
                    sales.put("invcountry", temp.getCustomer().getCountry() != null ? temp.getCustomer().getCountry().getCountryName() : "");
                    sales.put("fcycode", temp.getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : temp.getCurrency().getCurrencyCode());
                    sales.put("salesfcy", invSalesAmtInOriginalCurrency);
                    sales.put("salesfcyexcludinggst", (invSalesAmtInOriginalCurrency * 100) / (100 + taxPercent));
                    sales.put("gstfcy", (invSalesAmtInOriginalCurrency - (invSalesAmtInOriginalCurrency * 100) / (100 + taxPercent)));
                    sales.put("customergstno", (temp.getCustomer() != null && temp.getCustomer().getGstRegistrationNumber() != null) ? temp.getCustomer().getGstRegistrationNumber() : "");
                    
                    String country ="";//Please refer - ERM-315
                    if (temp.getBillingShippingAddresses() != null) {
                        if (!StringUtil.isNullOrEmpty(temp.getBillingShippingAddresses().getShippingCountry()) && !temp.getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                            country = temp.getBillingShippingAddresses().getShippingCountry();
                        } else if (StringUtil.isNullOrEmpty(temp.getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(temp.getBillingShippingAddresses().getBillingCountry()) && !temp.getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                            country = temp.getBillingShippingAddresses().getBillingCountry();
                        }
                    }
                    sales.put(Constants.SHIPPING_COUNTRY, country);
                    sales.put(Constants.importExportDeclarationNo, temp.getExportDeclarationNo() != null ? temp.getExportDeclarationNo() : "");
                    invjArr.put(sales);
                }

                result = accInvoiceDAOobj.getCalculatedInvDtlTax(filterParams);
                List<InvoiceDetail> list = result.getEntityList();
                if (list != null) {
                    for (InvoiceDetail temp : list) {
                        double quantity;
                        double rowTaxPercent = 0;
                        double rowTaxAmount = 0;
                        double rowTaxAmountInOriginalCurrency = 0;
                        boolean isRowTaxApplicable = false;
                        double invAmtDue = 0;
                        double ramount = 0;
                        quantity = temp.getInventory().getQuantity();
                        //ramount = temp.getRate() * quantity;
                        ramount = temp.getRowExcludingGstAmountInBase();
                        double rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                        //ramount -= rdisc;
                        //Converting row amount in base   [PS]
                       // KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        //ramount = (Double) bAmt.getEntityList().get(0);
                        //Calculating tax on base row amount [PS]
                        if (temp.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getInvoice().getJournalEntry().getEntryDate(), temp.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getInvoice().getCreationDate(), temp.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                            isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                        }
                        saleAmount += ramount;//row wise sales[PS]
                        if (temp.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                            if (isRowTaxApplicable) {
                                rowTaxAmount = temp.getRowTaxAmount()+temp.getRowTermTaxAmount();
//                                KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());
                                KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getCreationDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());
                                rowTaxAmount = (Double) baseAmt.getEntityList().get(0);
                            }
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmount = ramount * rowTaxPercent / 100;
                        }

                        saleAmount += rowTaxAmount;//saleAmount +=ramount*rowTaxPercent/100;
                        taxableAmount += rowTaxAmount;//taxableAmount+=ramount*rowTaxPercent/100;
//                        if(!temp.getInvoice().getCustomerEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))){
//                            invAmtDue=accInvoiceCommon.getAmountDue(requestParams,temp.getInvoice());
//                        }
//                        if(invAmtDue==0){
//                             taxCollected+=ramount*rowTaxPercent/100;
//                        }

                        // calculating invoice amount -- if tax has been included in invoice level then the invoice amount for row level will be show zero.
                        double invoiceAmount = 0d;
                        if (temp.getInvoice().getTax() == null) {
                            invoiceAmount = ramount + (rowTaxAmount);//ramount + (ramount * rowTaxPercent / 100);
                        } else {
                            invoiceAmount = 0;//if tax has been included in invoice level then the invoice amount for row level will be show zero.
                        }

                        //double rowamount = temp.getRate() * quantity;
                        //rowamount -= rdisc;
                        double rowamount=temp.getRowExcludingGstAmount();

                        if (temp.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                            if (isRowTaxApplicable) {
                                rowTaxAmountInOriginalCurrency = temp.getRowTaxAmount() + temp.getRowTermTaxAmount();
                            }
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmountInOriginalCurrency = rowamount * rowTaxPercent / 100;
                        }

                        double invoiceAmountInOriginalCurrency = 0d;
                        if (temp.getInvoice().getTax() == null) {
                            invoiceAmountInOriginalCurrency = rowamount + (rowTaxAmountInOriginalCurrency);//rowamount + (rowamount * rowTaxPercent / 100);
                        } else {
                            invoiceAmountInOriginalCurrency = 0;//if tax has been included in invoice level then the invoice amount for row level will be show zero.
                        }

                        sales = new JSONObject();
//                        sales.put("invdate", temp.getInvoice().getJournalEntry().getEntryDate().getTime());
                        sales.put("invdate", temp.getInvoice().getCreationDate().getTime());
                        sales.put("invname", temp.getInvoice().getCustomer().getName());
                        sales.put("invno", temp.getInvoice().getInvoiceNumber());
                        sales.put("invamt", invoiceAmount);
                        sales.put("invamtexcludinggst", invoiceAmount-rowTaxAmount);
                        sales.put("invtaxamount", (rowTaxAmount));//sales.put("invtaxamount", (ramount*rowTaxPercent/100));
                        sales.put("invnamegst", temp.getInvoice().getCustomer().getOther());
                        sales.put("invlineno", temp.getSrno());
                        /*
                         * ERP-18693
                         * If description is provided in product master, description will be shown otherwise, product name will be displayed.
                         */
                        sales.put("invproduct", temp.getInventory().getProduct()!=null?(!StringUtil.isNullOrEmpty(temp.getInventory().getProduct().getDescription())?temp.getInventory().getProduct().getDescription():temp.getInventory().getProduct().getName()):"");
                        sales.put("invtaxcode", temp.getTax().getTaxCode());
                        sales.put("invuen", (isMalasianCompany) ? temp.getInvoice().getCustomer().getCompanyRegistrationNumber() : temp.getInvoice().getCustomer().getAltContactNumber());
                        sales.put("invcountry", temp.getInvoice().getCustomer().getCountry() != null ? temp.getInvoice().getCustomer().getCountry().getCountryName() : "");
                        sales.put("fcycode", temp.getInvoice().getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : temp.getInvoice().getCurrency().getCurrencyCode());
                        sales.put("salesfcy", invoiceAmountInOriginalCurrency);//rowamount + (rowamount * rowTaxPercent/100)
                        sales.put("salesfcyexcludinggst", invoiceAmountInOriginalCurrency-rowTaxAmountInOriginalCurrency);//rowamount + (rowamount * rowTaxPercent/100)
                        sales.put("gstfcy", (rowTaxAmountInOriginalCurrency));//sales.put("gstfcy", (rowamount * rowTaxPercent/100));
                        sales.put("customergstno", (temp.getInvoice().getCustomer() != null && temp.getInvoice().getCustomer().getGstRegistrationNumber() != null) ? temp.getInvoice().getCustomer().getGstRegistrationNumber() : "");
                        
                        String country = "";
                        if (temp.getInvoice().getBillingShippingAddresses() != null) {
                            if (!StringUtil.isNullOrEmpty(temp.getInvoice().getBillingShippingAddresses().getShippingCountry()) && !temp.getInvoice().getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                country = temp.getInvoice().getBillingShippingAddresses().getShippingCountry();
                            } else if (StringUtil.isNullOrEmpty(temp.getInvoice().getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(temp.getInvoice().getBillingShippingAddresses().getBillingCountry()) && !temp.getInvoice().getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                country = temp.getInvoice().getBillingShippingAddresses().getBillingCountry();
                            }
                        }
                        sales.put(Constants.SHIPPING_COUNTRY,country);
                        sales.put(Constants.importExportDeclarationNo, temp.getInvoice().getExportDeclarationNo() != null ? temp.getInvoice().getExportDeclarationNo() : "");
                        invjArr.put(sales);
                    }
                }
                // Tax Calculation for Billing Invoices

               
                /**
                 * *******************************Make Payment For Otherwise
                 * Tax Calculation And For Against GL
                 * Code*******************************
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.receivePaymentSearchJson));
                }
                KwlReturnObject rpResult = accReceiptDao.getCalculatedReceivePaymentOtherwiseTax(filterParams);
                List<ReceiptDetailOtherwise> rdoList = rpResult.getEntityList();
                if (rdoList != null) {
                    for (ReceiptDetailOtherwise temp : rdoList) {
                        double taxAmount = 0;
                        double ramount = 0, tranCurrencyAmount;
                        tranCurrencyAmount = temp.getAmount();
//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, tranCurrencyAmount, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, tranCurrencyAmount, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        ramount = (Double) bAmt.getEntityList().get(0);
//                            
                        taxAmount = temp.getTaxamount();
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        taxAmount = (Double) bAmt.getEntityList().get(0);

                        saleAmount += ramount;
                        saleAmount += taxAmount;
                        taxableAmount += taxAmount;

                        double rowamount = temp.getAmount();

                        sales = new JSONObject();
//                        sales.put("invdate", temp.getReceipt().getJournalEntry().getEntryDate().getTime());
                        sales.put("invdate", temp.getReceipt().getCreationDate().getTime());
                        sales.put("invname", temp.getAccount().getName());
                        sales.put("invno", temp.getReceipt().getReceiptNumber());
                        sales.put("invamt", (ramount + taxAmount));
                        sales.put("invamtexcludinggst", ramount);
                        sales.put("invtaxamount", (taxAmount));
                        sales.put("invnamegst", "");
                        sales.put("invlineno", 1);
                        sales.put("invproduct", "");
                        sales.put("invtaxcode", (temp.getTax() != null) ? temp.getTax().getTaxCode() : temp.getAccount().getName());
                        sales.put("invuen", "");
                        sales.put("invcountry", "");
                        sales.put("fcycode", temp.getReceipt().getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : temp.getReceipt().getCurrency().getCurrencyCode());
                        sales.put("salesfcy", tranCurrencyAmount + temp.getTaxamount());//rowamount + (rowamount * rowTaxPercent/100)
                        sales.put("salesfcyexcludinggst", tranCurrencyAmount );//rowamount + (rowamount * rowTaxPercent/100)
                        sales.put("gstfcy", temp.getTaxamount());
                        sales.put("customergstno", (temp.getReceipt().getCustomer() != null && temp.getReceipt().getCustomer().getGstRegistrationNumber() != null) ? temp.getReceipt().getCustomer().getGstRegistrationNumber() : "");
                        sales.put(Constants.importExportDeclarationNo, "");
                        invjArr.put(sales);
                    }
                }
                /**
                 ********************************Credit Note Otherwise Tax
                 * Calculation *******************************
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.creditNoteSearchJson));
                }
                KwlReturnObject cnResult = accReceiptDao.getCalculatedCreditNoteOtherwiseTax(filterParams);
                Iterator cnIt = cnResult.getEntityList().iterator();
                double cnoAmount = 0;
                double cnTaxableAmount = 0;
                double taxableAmountD = 0;
                double cnTaxCollected = 0;
                while (cnIt.hasNext()) {
                    double taxPercent = 0;
                    double cnAmtDue = 0;
                    double taxAmount = 0;
                    double taxAmountInOriginalCurrency = 0;
                    CreditNoteTaxEntry temp = (CreditNoteTaxEntry) cnIt.next();
                    double cnSalesAmt = (Double) temp.getAmount();
                    double cnSalesAmtInOriginalCurrency = (Double) temp.getAmount();
                    KwlReturnObject bAmt;
//                        if (requestParams.containsKey("gstFlag")) {
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOther((Map) requestParams, cnSalesAmt, temp.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getExternalCurrencyRate());
//                        } else {
//                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
//                        }
                    cnSalesAmt = (Double) bAmt.getEntityList().get(0);

                    if (temp.getTax() != null) {

                        taxAmount = temp.getTaxamount();
                        taxAmountInOriginalCurrency = taxAmount;

                        KwlReturnObject bTaxAmt;
//                            if (requestParams.containsKey("gstFlag")) {
//                                bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOther((Map) requestParams, taxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getExternalCurrencyRate());
//                            } else {
//                        bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                        bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
//                            }
                        taxAmount = (Double) bTaxAmt.getEntityList().get(0);
                    }
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        taxAmount += cnSalesAmt;
                        taxAmountInOriginalCurrency += cnSalesAmtInOriginalCurrency;
                        cnSalesAmt = 0;
                        cnSalesAmtInOriginalCurrency = 0;
                    }
                    cnoAmount += authHandler.round(cnSalesAmt, companyid);//505*100=(100+p)x
                    cnTaxableAmount += authHandler.round((cnSalesAmt - taxAmount), companyid);

                    if (cnAmtDue == 0) {
                        cnTaxCollected += authHandler.round((cnSalesAmt - taxAmount), companyid);
                    }

                    taxableAmountD += authHandler.round((taxAmount), companyid);
                    saleAmount += cnSalesAmt + (taxAmount);

                    sales = new JSONObject();
//                    sales.put("invdate", temp.getCreditNote().getJournalEntry().getEntryDate().getTime());
                    sales.put("invdate", temp.getCreditNote().getCreationDate().getTime());
                    sales.put("invname", temp.getAccount().getName());
                    sales.put("invno", temp.getCreditNote().getCreditNoteNumber());
                    sales.put("invamt", cnSalesAmt + (taxAmount));
                    sales.put("invamtexcludinggst", cnSalesAmt );
                    sales.put("invtaxamount", taxAmount);
                    sales.put("invnamegst", "");
                    sales.put("invlineno", 1);
                    sales.put("invproduct", "");
                    sales.put("invtaxcode", (temp.getTax() != null) ? temp.getTax().getTaxCode() : temp.getAccount().getName());
                    sales.put("invuen", "");
                    sales.put("invcountry", "");
                    sales.put("fcycode", temp.getCreditNote().getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : temp.getCreditNote().getCurrency().getCurrencyCode());
                    sales.put("salesfcy", cnSalesAmtInOriginalCurrency + (taxAmountInOriginalCurrency));
                    sales.put("salesfcyexcludinggst", cnSalesAmtInOriginalCurrency);
                    sales.put("gstfcy", taxAmountInOriginalCurrency);
                    sales.put("customergstno", (temp.getCreditNote().getCustomer() != null && temp.getCreditNote().getCustomer().getGstRegistrationNumber() != null) ? temp.getCreditNote().getCustomer().getGstRegistrationNumber() : "");
                    
                    String country = "";
                    if (temp.getCreditNote().getBillingShippingAddresses() != null) {
                        if (!StringUtil.isNullOrEmpty(temp.getCreditNote().getBillingShippingAddresses().getShippingCountry()) && !temp.getCreditNote().getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                            country = temp.getCreditNote().getBillingShippingAddresses().getShippingCountry();
                        } else if (StringUtil.isNullOrEmpty(temp.getCreditNote().getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(temp.getCreditNote().getBillingShippingAddresses().getBillingCountry()) && !temp.getCreditNote().getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                            country = temp.getCreditNote().getBillingShippingAddresses().getBillingCountry();
                        }
                    }
                    sales.put(Constants.SHIPPING_COUNTRY, country);
                    sales.put(Constants.importExportDeclarationNo, "");
                    invjArr.put(sales);

                }

                /**
                 * ************************* Calculation of Tax For Credit Note
                 * **************************************
                 */
                result = accInvoiceDAOobj.getCalculatedCNTax(filterParams);
                List<CreditNote> list11 = result.getEntityList();
                if (list11 != null) {
                    for (CreditNote crNote : list11) {
                        double cnAmount = 0;
                        double taxAmount = 0;
                        KwlReturnObject result1 = accJournalEntryobj.getJournalEntryDetail(crNote.getJournalEntry().getID(), crNote.getJournalEntry().getCompany().getCompanyID());
                        Iterator iterator = result1.getEntityList().iterator();
                        boolean taxflag = false;
                        while (iterator.hasNext()) {
                            JournalEntryDetail jed = (JournalEntryDetail) iterator.next();
                            Account account = null;
                            account = jed.getAccount();
                            //Logic to get new OTHER_CURRENT_LIABILITIES group from old OTHER_CURRENT_LIABILITIES
                            //To do - Need to test wheteher is working or not
                            String currLibgrp = "";
                            Group group = accAccountDAOobj.getNewGroupFromOldId(Group.OTHER_CURRENT_LIABILITIES, account.getCompany().getCompanyID());
                            if (group != null) {
                                currLibgrp = group.getID();
                            }
                            if (account.getGroup().getID().equals(currLibgrp)) {
                                if (jed.isDebit() && account.getID().equals(taxObj.getAccount().getID())) {
                                    taxAmount = jed.getAmount();
                                    taxflag = true;
                                }
                            }
                            if (!jed.isDebit()) {
                                cnAmount += jed.getAmount();
                            }
                        }
                        if (taxflag) {
                            String currencyid = crNote.getJournalEntry().getCurrency().getCurrencyID();
                            double cnAmountInOriginalCurrency = cnAmount;
//                            KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, cnAmount, currencyid, crNote.getJournalEntry().getEntryDate(), crNote.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, cnAmount, currencyid, crNote.getCreationDate(), crNote.getJournalEntry().getExternalCurrencyRate());
                            cnAmount = (Double) bAmt1.getEntityList().get(0);
                            double taxAmountInOriginalCurrency = taxAmount;
//                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, crNote.getJournalEntry().getEntryDate(), crNote.getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, crNote.getCreationDate(), crNote.getJournalEntry().getExternalCurrencyRate());
                            taxAmount = (Double) bAmt1.getEntityList().get(0);

                            saleAmount -= cnAmount;//row wise sales[PS]
                            taxableAmount -= taxAmount;

                            sales = new JSONObject();
//                            sales.put("invdate", crNote.getJournalEntry().getEntryDate().getTime());
                            sales.put("invdate", crNote.getCreationDate().getTime());
                            sales.put("invname", crNote.getCustomer().getName());
                            sales.put("invno", crNote.getCreditNoteNumber());
                            sales.put("invamt", -cnAmount);
                            sales.put("invamtexcludinggst", -(cnAmount-taxAmount));
                            sales.put("invtaxamount", -taxAmount);
                            sales.put("invnamegst", "");
                            sales.put("invlineno", 1);
                            sales.put("invproduct", "");
                            sales.put("invtaxcode", taxObj.getTaxCode());
                            sales.put("invuen", (isMalasianCompany) ? (crNote.getCustomer() != null ? crNote.getCustomer().getCompanyRegistrationNumber() : "") : "");
                            sales.put("invcountry", "");
                            sales.put("fcycode", crNote.getJournalEntry().getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : crNote.getJournalEntry().getCurrency().getCurrencyCode());
                            sales.put("salesfcy", -cnAmount); //rowamount + (rowamount * rowTaxPercent/100)
                            sales.put("salesfcyexcludinggst", -(cnAmount-taxAmount)); 
                            sales.put("gstfcy", -taxAmount);//(rowamount * rowTaxPercent/100)
//                            sales.put("permit", "");
                            sales.put("customergstno", (crNote.getCustomer() != null && crNote.getCustomer().getGstRegistrationNumber() != null) ? crNote.getCustomer().getGstRegistrationNumber() : "");
                            
                            String country = "";
                            if (crNote.getBillingShippingAddresses() != null) {
                                if (!StringUtil.isNullOrEmpty(crNote.getBillingShippingAddresses().getShippingCountry()) && !crNote.getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                    country = crNote.getBillingShippingAddresses().getShippingCountry();
                                } else if (StringUtil.isNullOrEmpty(crNote.getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(crNote.getBillingShippingAddresses().getBillingCountry()) && !crNote.getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                    country = crNote.getBillingShippingAddresses().getBillingCountry();
                                }
                            }
                            sales.put(Constants.SHIPPING_COUNTRY, country);
                            sales.put(Constants.importExportDeclarationNo, "");
                            invjArr.put(sales);
                        }
                    }
                }
                if (isMalasianCompany) {
                    if (isAdvanceSearch) {
                        filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.receivePaymentSearchJson));
                        filterParams.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    }
                    
                    /*
                     *Advance receipt Tax calculation.
                     *
                     */
                    result = accReceiptDao.getAdvanceReceiptTax(filterParams);
                    List<ReceiptAdvanceDetail> receiptAdvDtlList = result.getEntityList();
                    for (ReceiptAdvanceDetail temp : receiptAdvDtlList) {
                        double originalSalesAmountWithTax = temp.getAmount();
                        double originalTaxAmount = temp.getTaxamount();
                        double originalSalesAmountWithoutTax = originalSalesAmountWithTax - originalTaxAmount;
                        double totalAmtWithTaxInBase = 0;
                        double salesAmountInBaseWithoutTax = 0;
                        double taxAmountInBase = 0;

//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, originalSalesAmountWithoutTax, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, originalSalesAmountWithoutTax, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        salesAmountInBaseWithoutTax = (Double) bAmt.getEntityList().get(0);

//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, originalTaxAmount, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, originalTaxAmount, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        taxAmountInBase = (Double) bAmt.getEntityList().get(0);

                        totalAmtWithTaxInBase = salesAmountInBaseWithoutTax + taxAmountInBase;
                        saleAmount += totalAmtWithTaxInBase;
                        taxableAmount += taxAmountInBase;

                        sales = new JSONObject();
//                        sales.put("invdate", temp.getReceipt().getJournalEntry().getEntryDate().getTime());
                        sales.put("invdate", temp.getReceipt().getCreationDate().getTime());
                        sales.put("invname", temp.getReceipt().getCustomer().getAccount().getName());
                        sales.put("invno", temp.getReceipt().getReceiptNumber());
                        sales.put("invamt", totalAmtWithTaxInBase);
                        sales.put("gramtexcludingtax", salesAmountInBaseWithoutTax);
                        sales.put("invtaxamount", taxAmountInBase);
                        sales.put("invnamegst", "");
                        sales.put("invlineno", 1);
                        sales.put("invproduct", "");
                        sales.put("invtaxcode", temp.getTax().getTaxCode());
                        sales.put("invuen", (temp.getReceipt().getCustomer() != null && temp.getReceipt().getCustomer().getCompanyRegistrationNumber() != null) ? temp.getReceipt().getCustomer().getCompanyRegistrationNumber() : "");
                        sales.put("invcountry", "");
                        sales.put("fcycode", temp.getReceipt().getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : temp.getReceipt().getCurrency().getCurrencyCode());
                        sales.put("salesfcy", originalSalesAmountWithTax);
                        sales.put("salesfcyexcludinggst", originalSalesAmountWithoutTax);//Value of supply excluding GST in Foreign Currency
                        sales.put("gstfcy", originalTaxAmount);//Value of GST on supply in Foreign Currency
                        sales.put("customergstno", (temp.getReceipt().getCustomer() != null && temp.getReceipt().getCustomer().getGstRegistrationNumber() != null) ? temp.getReceipt().getCustomer().getGstRegistrationNumber() : "");
                        sales.put(Constants.importExportDeclarationNo, "");
                        invjArr.put(sales);
                    }

                    /*
                     *Debit Note against Customer Tax calculation.
                     *
                     */
                    if (isAdvanceSearch) {
                        filterParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                        filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.debitNoteSearchJson));
                    }
                    result = accGoodsReceiptDAOObj.getCalculatedDebitNoteTax(filterParams);
                    List<DebitNote> calculateDNTaxList = result.getEntityList();
                    for (DebitNote debitMemo : calculateDNTaxList) {
                        double originalDNAmountWithTax = 0;
                        double originalDNAmountWithoutTax = 0;
                        double originalTaxAmount = 0;
                        double dnAmtWithoutTaxInBase = 0;
                        double taxAmountInBase = 0;
                        double totalAmtWithTaxInBase = 0;

                        KwlReturnObject result1 = accJournalEntryobj.getJournalEntryDetail(debitMemo.getJournalEntry().getID(), debitMemo.getJournalEntry().getCompany().getCompanyID());
                        Iterator iterator = result1.getEntityList().iterator();
                        boolean taxflag = false;
                        while (iterator.hasNext()) {
                            JournalEntryDetail jed = (JournalEntryDetail) iterator.next();
                            Account account = null;
                            account = jed.getAccount();

                            if (!jed.isDebit() && account.getID().equals(taxObj.getAccount().getID())) {
                                originalTaxAmount += jed.getAmount();
                                taxflag = true;
                            }
                            if (jed.isDebit()) {
                                originalDNAmountWithTax += jed.getAmount();
                            }
                        }
                        originalDNAmountWithoutTax += originalDNAmountWithTax - originalTaxAmount;

                        if (taxflag) {
//                            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, originalDNAmountWithoutTax, debitMemo.getCurrency().getCurrencyID(), debitMemo.getJournalEntry().getEntryDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, originalDNAmountWithoutTax, debitMemo.getCurrency().getCurrencyID(), debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            if (bAmt != null) {
                                dnAmtWithoutTaxInBase = (Double) bAmt.getEntityList().get(0);
                            }

//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, originalTaxAmount, debitMemo.getCurrency().getCurrencyID(), debitMemo.getJournalEntry().getEntryDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, originalTaxAmount, debitMemo.getCurrency().getCurrencyID(), debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            if (bAmt != null) {
                                taxAmountInBase = (Double) bAmt.getEntityList().get(0);
                            }

                            totalAmtWithTaxInBase = dnAmtWithoutTaxInBase + taxAmountInBase;
                            saleAmount += totalAmtWithTaxInBase;
                            taxableAmount += taxAmountInBase;

                            sales = new JSONObject();
//                            sales.put("invdate", debitMemo.getJournalEntry().getEntryDate().getTime());
                            sales.put("invdate", debitMemo.getCreationDate().getTime());
                            sales.put("invname", debitMemo.getCustomer().getName());
                            sales.put("invno", debitMemo.getDebitNoteNumber());
                            sales.put("invamt", totalAmtWithTaxInBase);
                            sales.put("gramtexcludingtax", dnAmtWithoutTaxInBase);
                            sales.put("invtaxamount", taxAmountInBase);
                            sales.put("invnamegst", "");
                            sales.put("invlineno", 1);
                            sales.put("invproduct", "");
                            sales.put("invtaxcode", debitMemo.getTax().getTaxCode());
                            sales.put("invuen", (debitMemo.getCustomer() != null && debitMemo.getCustomer().getCompanyRegistrationNumber() != null) ? debitMemo.getCustomer().getCompanyRegistrationNumber() : "");
                            sales.put("invcountry", "");
                            sales.put("fcycode", debitMemo.getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : debitMemo.getCurrency().getCurrencyCode());
                            sales.put("salesfcy", originalDNAmountWithTax);
                            sales.put("salesfcyexcludinggst", originalDNAmountWithoutTax);//Value of supply excluding GST in Foreign Currency
                            sales.put("gstfcy", originalTaxAmount);//Value of GST on supply in Foreign Currency
                            sales.put("customergstno", (debitMemo.getCustomer() != null && debitMemo.getCustomer().getGstRegistrationNumber() != null) ? debitMemo.getCustomer().getGstRegistrationNumber() : "");
                            
                            String country = "";
                            if (debitMemo.getBillingShippingAddresses() != null) {
                                if (!StringUtil.isNullOrEmpty(debitMemo.getBillingShippingAddresses().getShippingCountry()) && !debitMemo.getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                    country = debitMemo.getBillingShippingAddresses().getShippingCountry();
                                } else if (StringUtil.isNullOrEmpty(debitMemo.getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(debitMemo.getBillingShippingAddresses().getBillingCountry()) && !debitMemo.getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                    country = debitMemo.getBillingShippingAddresses().getBillingCountry();
                                }
                            }
                            sales.put(Constants.SHIPPING_COUNTRY, country);
                            sales.put(Constants.importExportDeclarationNo, "");
                            invjArr.put(sales);
                        }
                    }
                    result = accGoodsReceiptDAOObj.getCalculatedDNTaxGst(filterParams);
                    List<DebitNoteAgainstCustomerGst> list12 = result.getEntityList();

                    for (DebitNoteAgainstCustomerGst temp : list12) {
                        double originalSalesAmount = (temp.getRate() * temp.getReturnQuantity());
                        double originalTaxAmount = temp.getRowTaxAmount();
                        double salesAmountInBase = 0;
                        double taxAmountInBase = 0;
                        double totalAmountwithTax = 0;

//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, originalSalesAmount, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getJournalEntry().getEntryDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, originalSalesAmount, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                        salesAmountInBase = (Double) bAmt.getEntityList().get(0);

//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, originalTaxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getJournalEntry().getEntryDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, originalTaxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                        taxAmountInBase = (Double) bAmt.getEntityList().get(0);

                        totalAmountwithTax = salesAmountInBase + taxAmountInBase;
                        saleAmount += totalAmountwithTax;
                        taxableAmount = taxAmountInBase;

                        sales = new JSONObject();
//                        sales.put("invdate", temp.getDebitNote().getJournalEntry().getEntryDate().getTime());
                        sales.put("invdate", temp.getDebitNote().getCreationDate().getTime());
                        sales.put("invname", temp.getDebitNote().getCustomer().getName());
                        sales.put("invno", temp.getDebitNote().getDebitNoteNumber());
                        sales.put("invamt", totalAmountwithTax);
                        sales.put("gramtexcludingtax", salesAmountInBase);
                        sales.put("invtaxamount", taxAmountInBase);
                        sales.put("invnamegst", "");
                        sales.put("invlineno", temp.getSrno());
                        sales.put("invproduct", temp.getProduct() != null ? (!StringUtil.isNullOrEmpty(temp.getProduct().getDescription()) ? temp.getProduct().getDescription() : temp.getProduct().getName()) : "");
                        sales.put("invtaxcode", temp.getTax().getTaxCode());
                        sales.put("invuen", (temp.getDebitNote().getCustomer() != null && temp.getDebitNote().getCustomer().getCompanyRegistrationNumber() != null) ? temp.getDebitNote().getCustomer().getCompanyRegistrationNumber() : "");
                        sales.put("invcountry", "");
                        sales.put("fcycode", temp.getDebitNote().getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : temp.getDebitNote().getCurrency().getCurrencyCode());
                        sales.put("salesfcy", originalSalesAmount + originalTaxAmount);
                        sales.put("salesfcyexcludinggst", originalSalesAmount);//Value of supply excluding GST in Foreign Currency
                        sales.put("gstfcy", originalTaxAmount);//Value of GST on supply in Foreign Currency
                        sales.put("customergstno", (temp.getDebitNote().getCustomer() != null && temp.getDebitNote().getCustomer().getGstRegistrationNumber() != null) ? temp.getDebitNote().getCustomer().getGstRegistrationNumber() : "");
                        
                        String country = "";
                        if (temp.getDebitNote().getBillingShippingAddresses() != null) {
                            if (!StringUtil.isNullOrEmpty(temp.getDebitNote().getBillingShippingAddresses().getShippingCountry()) && !temp.getDebitNote().getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                country = temp.getDebitNote().getBillingShippingAddresses().getShippingCountry();
                            } else if (StringUtil.isNullOrEmpty(temp.getDebitNote().getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(temp.getDebitNote().getBillingShippingAddresses().getBillingCountry()) && !temp.getDebitNote().getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                country = temp.getDebitNote().getBillingShippingAddresses().getBillingCountry();
                            }
                        }
                        sales.put(Constants.SHIPPING_COUNTRY, country);
                        sales.put(Constants.importExportDeclarationNo, "");
                        invjArr.put(sales);
                    }
                }

                JSONObject obj = new JSONObject();
                obj.put("taxname", taxObj.getName());
                obj.put("taxcode", taxObj.getTaxCode());
                obj.put("totalsale", saleAmount);//sales including tax[PS]
                obj.put("taxrate", taxListObj.getPercent());
                obj.put("taxamount", taxableAmount);
                obj.put("taxcollected", taxCollected);  //taxamount of all thoose invoices whose amount due is 0[PS]
                obj.put("taxpayable", taxableAmount - taxCollected);
                obj.put("details", invjArr);
                jArr.put(obj);
            }

        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public JSONArray getCalculatedPurchaseTaxforIAFfile(Map<String, Object> requestParams, List taxList) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        JSONArray grjArr = new JSONArray();
        JSONObject purchases = new JSONObject();
        try {

            String companyid = (String) requestParams.get(Constants.companyKey);
            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyObj.getEntityList().get(0);
            boolean isMalasianCompany = company.getCountry().getID().equalsIgnoreCase("137");
            boolean isAdvanceSearch = requestParams.containsKey(Constants.isAdvanceSearch) ? (Boolean) requestParams.get(Constants.isAdvanceSearch) : false;

            Iterator itr = taxList.iterator();
            while (itr.hasNext()) {
                grjArr = new JSONArray();
                Object[] row = (Object[]) itr.next();
                Tax taxObj = (Tax) row[0];
                TaxList taxListObj = (TaxList) row[1];
                Map<String, Object> filterParams = new HashMap<String, Object>();
                filterParams.put("taxid", taxObj.getID());
                if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
                    filterParams.put("startDate", requestParams.get("startDate"));
                    filterParams.put("endDate", requestParams.get("endDate"));
                }
                if (requestParams.containsKey("excludeRetailPurchaseInvoice")) {
                    filterParams.put("excludeRetailPurchaseInvoice", requestParams.get("excludeRetailPurchaseInvoice"));
                }
                double saleAmount = 0;
                double taxableAmount = 0;
                double taxCollected = 0;

                //VI with GST on Total Amounts
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.purchaseInvoiceSearchJson));
                    filterParams.put(Constants.Filter_Criteria, requestParams.get(Constants.Filter_Criteria));
                    filterParams.put(Constants.fixedAssetsPurchaseInvoiceSearchJson,requestParams.get(Constants.fixedAssetsPurchaseInvoiceSearchJson));
                }
                KwlReturnObject grResult = accGoodsReceiptDAOObj.getCalculatedGRTax(filterParams);
                List<GoodsReceipt> list = grResult.getEntityList();

                //Cal Tax for whole GR
                if (list != null) {
                    for (GoodsReceipt temp : list) {
                        double taxPercent = 0;
                        double invSalesAmtInForeignCurrency = (Double) (temp.getVendorEntry() == null ? 0 : temp.getVendorEntry().getAmount()); //Calculating total sales in customer currency     [PS]
                        double invSalesAmt = (Double) (temp.getVendorEntry() == null ? 0 : temp.getVendorEntry().getAmount()); //Calculating total sales in customer currency     [PS]
//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        invSalesAmt = (Double) bAmt.getEntityList().get(0);
                        if (temp.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getJournalEntry().getEntryDate(), temp.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getCreationDate(), temp.getTax().getID());
                            taxPercent = (Double) perresult.getEntityList().get(0);
                        }
                        saleAmount += authHandler.round(invSalesAmt, companyid);//505*100=(100+p)x
                        taxableAmount += authHandler.round((invSalesAmt - (invSalesAmt * 100) / (100 + taxPercent)), companyid);
//                         double invAmtDue=0;
//                         if(!temp.getVendorEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))){
//                            List amtList;
//                            if(temp.isIsExpenseType()){
//                                 amtList  =accGoodsReceiptCommon.getExpGRAmountDue(requestParams,temp);
//                            }else{
//                                 amtList =accGoodsReceiptCommon.getGRAmountDue(requestParams,temp);
//                            }
//                            if(!amtList.isEmpty()&&amtList!=null){
//                                invAmtDue=(Double)amtList.get(1);
//                            }
//                        }
//                        if(invAmtDue==0){
//                             taxCollected+=authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),2);
//                        }
                        
                        purchases = new JSONObject();
//                        purchases.put("grdate", temp.getJournalEntry().getEntryDate().getTime());
                        purchases.put("grdate", temp.getCreationDate().getTime());
                        purchases.put("grname", temp.getVendor().getName());
                        purchases.put("grno", temp.getGoodsReceiptNumber());
                        purchases.put("gramt", invSalesAmt);
                        purchases.put("gramtexcludinggst", (invSalesAmt * 100) / (100 + taxPercent));
                        purchases.put("grtaxamount", (invSalesAmt - (invSalesAmt * 100) / (100 + taxPercent)));
                        purchases.put("grnamegst", temp.getVendor().getOther());
                        purchases.put("grlineno", 1);
                        purchases.put("grproduct", "");
                        purchases.put("grtaxcode", temp.getTax().getTaxCode());
                        purchases.put("gruen", (isMalasianCompany) ? temp.getVendor().getCompanyRegistrationNumber() : temp.getVendor().getAltContactNumber());
                        purchases.put("fcycode", temp.getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : temp.getCurrency().getCurrencyCode());
                        purchases.put("purchasefcy", invSalesAmtInForeignCurrency);
                        purchases.put("purchasefcyexcludinggst", (invSalesAmtInForeignCurrency * 100) / (100 + taxPercent));
                        purchases.put("gstfcy", (invSalesAmtInForeignCurrency - (invSalesAmtInForeignCurrency * 100) / (100 + taxPercent)));//(rowamount * rowTaxPercent/100)
                        purchases.put("permit", "");
                        purchases.put("suppliergstno", (temp.getVendor() != null && temp.getVendor().getGstRegistrationNumber() != null) ? temp.getVendor().getGstRegistrationNumber() : "");
                        purchases.put("postingdate", temp.getJournalEntry().getEntryDate().getTime());//Posting date same as invoice data.
                        purchases.put(Constants.importExportDeclarationNo, temp.getImportDeclarationNo() != null ? temp.getImportDeclarationNo() : "");
                        grjArr.put(purchases);
                    }
                }

                //Cal Tax for GR Details[PS]
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.purchaseInvoiceSearchJson));
                    filterParams.put(Constants.fixedAssetsPurchaseInvoiceSearchJson, requestParams.get(Constants.fixedAssetsPurchaseInvoiceSearchJson));
                }
                KwlReturnObject result = accGoodsReceiptDAOObj.getCalculatedGRDtlTax(filterParams);
                List<GoodsReceiptDetail> GRList = result.getEntityList();
                if (GRList != null) {
                    for (GoodsReceiptDetail temp : GRList) {
                        double quantity;
                        double rowTaxPercent = 0;
                        double rowTaxAmount = 0;
                        double rowTaxAmountInOriginalCurrency = 0;
                        boolean isRowTaxApplicable = false;
                        double ramount = 0;
                        quantity = temp.getInventory().getQuantity();
                        //ramount = authHandler.round(temp.getRate() * quantity, companyid);
                        ramount=temp.getRowExcludingGstAmountInBase();
                        double rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                        //ramount -= rdisc;
                        //Converting row amount in base   [PS]
//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
//                        ramount = (Double) bAmt.getEntityList().get(0);
                        //Calculating tax on base row amount [PS]
                        if (temp.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getCreationDate(), temp.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                            isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                        }
                        saleAmount += ramount;//row wise sales[PS]
                        if (temp.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                            if (isRowTaxApplicable) {
                                rowTaxAmount = temp.getRowTaxAmount() + temp.getRowTermTaxAmount();
//                                KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                rowTaxAmount = (Double) baseAmt.getEntityList().get(0);
                            }
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmount = ramount * rowTaxPercent / 100;
                        }

                        saleAmount += rowTaxAmount;//saleAmount +=ramount*rowTaxPercent/100;
                        taxableAmount += rowTaxAmount;//taxableAmount+=ramount*rowTaxPercent/100;
                        double invAmtDue = 0;
//                        if(!temp.getGoodsReceipt().getVendorEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))){
//                            List amtList;
//                            amtList =accGoodsReceiptCommon.getGRAmountDue(requestParams,temp.getGoodsReceipt());
//                            if(!amtList.isEmpty()&&amtList!=null){
//                                invAmtDue=(Double)amtList.get(1);
//                            }
//                        }
//                         if(invAmtDue==0){
//                             taxCollected+=ramount*rowTaxPercent/100;
//                         }

                        double grAmount = 0d;
                        if (temp.getGoodsReceipt().getTax() == null) {
                            grAmount = ramount + (rowTaxAmount);//ramount + (ramount * rowTaxPercent / 100);
                        } else {
                            grAmount = 0;//if tax has been included in invoice level then the invoice amount for row level will be show zero.
                        }

                        double rowamount = temp.getRowExcludingGstAmount();
//                        rowamount -= rdisc;

                        if (temp.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                            if (isRowTaxApplicable) {
                                rowTaxAmountInOriginalCurrency = temp.getRowTaxAmount() + temp.getRowTermTaxAmount();
                            }
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmountInOriginalCurrency = rowamount * rowTaxPercent / 100;
                        }

                        double grAmountInOriginalCurrency = 0d;
                        if (temp.getGoodsReceipt().getTax() == null) {
                            grAmountInOriginalCurrency = rowamount + (rowTaxAmountInOriginalCurrency);//rowamount + (rowamount * rowTaxPercent / 100);
                        } else {
                            grAmountInOriginalCurrency = 0;//if tax has been included in invoice level then the invoice amount for row level will be show zero.
                        }

                        purchases = new JSONObject();
//                        purchases.put("grdate", temp.getGoodsReceipt().getJournalEntry().getEntryDate().getTime());
                        purchases.put("grdate", temp.getGoodsReceipt().getCreationDate().getTime());
                        purchases.put("grname", temp.getGoodsReceipt().getVendor().getName());
                        purchases.put("grno", temp.getGoodsReceipt().getGoodsReceiptNumber());
                        purchases.put("gramt", (grAmount));
                        purchases.put("gramtexcludinggst", (grAmount-rowTaxAmount));
                        purchases.put("grtaxamount", (rowTaxAmount));//purchases.put("grtaxamount", (ramount*rowTaxPercent/100));
                        purchases.put("grnamegst", temp.getGoodsReceipt().getVendor().getOther());
                        purchases.put("grlineno", temp.getSrno());
                        /*
                         * ERP-18693
                         * If description is provided in product master, description will be shown otherwise, product name will be displayed.
                         */
                        purchases.put("grproduct", temp.getInventory().getProduct()!=null?(!StringUtil.isNullOrEmpty(temp.getInventory().getProduct().getDescription())?temp.getInventory().getProduct().getDescription():temp.getInventory().getProduct().getName()):"");
                        purchases.put("grtaxcode", temp.getTax().getTaxCode());
                        purchases.put("gruen", (isMalasianCompany) ? temp.getGoodsReceipt().getVendor().getCompanyRegistrationNumber() : temp.getGoodsReceipt().getVendor().getAltContactNumber());
                        purchases.put("fcycode", temp.getGoodsReceipt().getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : temp.getGoodsReceipt().getCurrency().getCurrencyCode());
                        purchases.put("purchasefcy", grAmountInOriginalCurrency); //rowamount + (rowamount * rowTaxPercent/100)
                        purchases.put("purchasefcyexcludinggst", grAmountInOriginalCurrency-rowTaxAmountInOriginalCurrency); //rowamount + (rowamount * rowTaxPercent/100)
                        purchases.put("gstfcy", (rowTaxAmountInOriginalCurrency));//(rowamount * rowTaxPercent/100)
                        purchases.put("permit", temp.getPermit() != null ? temp.getPermit() : "");
                        purchases.put("suppliergstno", (temp.getGoodsReceipt().getVendor() != null && temp.getGoodsReceipt().getVendor().getGstRegistrationNumber() != null) ? temp.getGoodsReceipt().getVendor().getGstRegistrationNumber() : "");
                        purchases.put("postingdate", temp.getGoodsReceipt().getJournalEntry().getEntryDate().getTime());//Posting date same as invoice data.
                        purchases.put(Constants.importExportDeclarationNo, temp.getGoodsReceipt().getImportDeclarationNo() != null ? temp.getGoodsReceipt().getImportDeclarationNo() : "");
                        grjArr.put(purchases);
                    }
                }

                //Cal Tax for Expense GR Details[PS]
                result = accGoodsReceiptDAOObj.getCalculatedExpenseGRDtlTax(filterParams);
                List<ExpenseGRDetail> expList = result.getEntityList();
                if (expList != null) {
                    for (ExpenseGRDetail temp : expList) {
                        double rowTaxPercent = 0;
                        double ramount = 0;
                        double rowTaxAmount = 0;
                        double rowTaxAmountInOriginalCurrency = 0;
                        boolean isRowTaxApplicable = false;
                        ramount = temp.getRate();
                        double rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                        ramount -= rdisc;
//Converting row amount in base   [PS]
//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        ramount = (Double) bAmt.getEntityList().get(0);
//Calculating tax on base row amount [PS]
                        if (temp.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getGoodsReceipt().getCreationDate(), temp.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                            isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                        }
                        saleAmount += ramount;//row wise sales[PS]
                        if (temp.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                            if (isRowTaxApplicable) {
                                rowTaxAmount = temp.getRowTaxAmount();
//                                KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                rowTaxAmount = (Double) baseAmt.getEntityList().get(0);
                            }
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmount = ramount * rowTaxPercent / 100;
                        }

                        saleAmount += rowTaxAmount;//saleAmount +=ramount*rowTaxPercent/100;
                        taxableAmount += rowTaxAmount;//taxableAmount+=ramount*rowTaxPercent/100;
                        double invAmtDue = 0;
                        if (!temp.getGoodsReceipt().getVendorEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
                            List amtList;
                            amtList = accGoodsReceiptCommon.getExpGRAmountDue(requestParams, temp.getGoodsReceipt());
                            if (!amtList.isEmpty() && amtList != null) {
                                invAmtDue = (Double) amtList.get(1);
                            }
                        }

                        double grAmount = 0d;
                        if (temp.getGoodsReceipt().getTax() == null) {
                            if (temp.getGoodsReceipt().isGstIncluded()) {
                                grAmount = ramount;
                            } else {
                            grAmount = ramount + (rowTaxAmount);//grAmount = ramount + (ramount * rowTaxPercent / 100);
                            }
                        } else {
                            grAmount = 0;//if tax has been included in invoice level then the invoice amount for row level will be show zero.
                        }

                        double rowAmount = 0d;
                        rowAmount = temp.getRate();

                        if (temp.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                            if (isRowTaxApplicable) {
                                rowTaxAmountInOriginalCurrency = temp.getRowTaxAmount();
                            }
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmountInOriginalCurrency = rowAmount * rowTaxPercent / 100;
                        }

                        double grAmountInOriginalCurrency = 0d;
                        if (temp.getGoodsReceipt().getTax() == null) {
                            if(temp.getGoodsReceipt().isGstIncluded()){
                                grAmountInOriginalCurrency=rowAmount;
                            }else{
                            grAmountInOriginalCurrency = rowAmount + (rowTaxAmountInOriginalCurrency);//grAmountInOriginalCurrency = rowAmount + (rowAmount * rowTaxPercent / 100);
                            }
                        } else {
                            grAmountInOriginalCurrency = 0;//if tax has been included in invoice level then the invoice amount for row level will be show zero.
                        }
                        grAmountInOriginalCurrency -= rdisc;
//                        if(invAmtDue==0){
//                            taxCollected+=ramount*rowTaxPercent/100;
//                        }

//                        purchases = new JSONObject();
//                        purchases.put("grdate", temp.getGoodsReceipt().getShipDate().getTime());
//                        purchases.put("grname", temp.getGoodsReceipt().getVendor().getName());
//                        purchases.put("grno", temp.getGoodsReceipt().getGoodsReceiptNumber());
//                        purchases.put("gramt", (ramount+ramount*rowTaxPercent/100));
//                        purchases.put("grtaxamount", (ramount*rowTaxPercent/100));
//                        grjArr.put(purchases);
//                        
                        purchases = new JSONObject();
//                        purchases.put("grdate", temp.getGoodsReceipt().getJournalEntry().getEntryDate().getTime());
                        purchases.put("grdate", temp.getGoodsReceipt().getCreationDate().getTime());
                        purchases.put("grname", temp.getGoodsReceipt().getVendor().getName());
                        purchases.put("grno", temp.getGoodsReceipt().getGoodsReceiptNumber());
                        purchases.put("gramt", (grAmount));
                        purchases.put("gramtexcludinggst", (grAmount-rowTaxAmount));
                        purchases.put("grtaxamount", (rowTaxAmount));//purchases.put("grtaxamount", (ramount*rowTaxPercent/100));
                        purchases.put("grnamegst", temp.getGoodsReceipt().getVendor().getOther());
                        purchases.put("grlineno", temp.getSrno());
                        purchases.put("grproduct", temp.getAccount().getName());
                        purchases.put("grtaxcode", temp.getTax().getTaxCode());
                        purchases.put("gruen", (isMalasianCompany) ? temp.getGoodsReceipt().getVendor().getCompanyRegistrationNumber() : temp.getGoodsReceipt().getVendor().getAltContactNumber());
                        purchases.put("fcycode", temp.getGoodsReceipt().getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : temp.getGoodsReceipt().getCurrency().getCurrencyCode());
                        purchases.put("purchasefcy", grAmountInOriginalCurrency); //rowamount + (rowamount * rowTaxPercent/100)
                        purchases.put("purchasefcyexcludinggst", grAmountInOriginalCurrency-rowTaxAmountInOriginalCurrency); //rowamount + (rowamount * rowTaxPercent/100)
                        purchases.put("gstfcy", (rowTaxAmountInOriginalCurrency));//(rowamount * rowTaxPercent/100)
                        purchases.put("permit", "");
                        grjArr.put(purchases);
                    }
                }
                
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.debitNoteSearchJson));
                }
                result = accGoodsReceiptDAOObj.getCalculatedDNTax(filterParams);
                List<DebitNote> list11 = result.getEntityList();
                if (list11 != null) {
                    for (DebitNote debitMemo : list11) {
                        double dnAmount = 0;
                        double taxAmount = 0;
                        KwlReturnObject result1 = accJournalEntryobj.getJournalEntryDetail(debitMemo.getJournalEntry().getID(), debitMemo.getJournalEntry().getCompany().getCompanyID());
                        Iterator iterator = result1.getEntityList().iterator();
                        boolean taxflag = false;
                        while (iterator.hasNext()) {
                            JournalEntryDetail jed = (JournalEntryDetail) iterator.next();
                            Account account = null;
                            account = jed.getAccount();
                            if (account.getGroup().getID().equals(Group.OTHER_CURRENT_LIABILITIES)) {
                                if (!jed.isDebit() && account.getID().equals(taxObj.getAccount().getID())) {
                                    taxAmount = jed.getAmount();
                                    taxflag = true;
                                }
                            }
                            if (jed.isDebit()) {
                                dnAmount += jed.getAmount();
                            }
                        }
                        if (taxflag) {
                            String currencyid = debitMemo.getJournalEntry().getCurrency().getCurrencyID();
                            double dnAmountInOriginalCurrency = dnAmount;
//                            KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, dnAmount, currencyid, debitMemo.getJournalEntry().getEntryDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, dnAmount, currencyid, debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            dnAmount = (Double) bAmt1.getEntityList().get(0);
                            double taxAmountInOriginalCurrency = taxAmount;
//                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, debitMemo.getJournalEntry().getEntryDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            taxAmount = (Double) bAmt1.getEntityList().get(0);

                            saleAmount -= dnAmount;//row wise sales[PS]
                            taxableAmount -= taxAmount;

                            purchases = new JSONObject();
//                            purchases.put("grdate", debitMemo.getJournalEntry().getEntryDate().getTime());
                            purchases.put("grdate", debitMemo.getCreationDate().getTime());
                            purchases.put("grname", debitMemo.getVendor().getName());
                            purchases.put("grno", debitMemo.getDebitNoteNumber());
                            purchases.put("gramt", -dnAmount);
                            purchases.put("gramtexcludinggst", -(dnAmount-taxAmount));
                            purchases.put("grtaxamount", -taxAmount);
                            purchases.put("grnamegst", "");
                            purchases.put("grlineno", 1);
                            purchases.put("grproduct", "");
                            purchases.put("grtaxcode", taxObj.getTaxCode());
                            purchases.put("gruen", (isMalasianCompany) ? ((debitMemo.getVendor() != null) ? debitMemo.getVendor().getCompanyRegistrationNumber() : "") : "");
                            purchases.put("fcycode", debitMemo.getJournalEntry().getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : debitMemo.getJournalEntry().getCurrency().getCurrencyCode());
                            purchases.put("purchasefcy", -dnAmount); //rowamount + (rowamount * rowTaxPercent/100)
                            purchases.put("purchasefcyexcludinggst", -(dnAmount-taxAmount)); //rowamount + (rowamount * rowTaxPercent/100)
                            purchases.put("gstfcy", -taxAmount);//(rowamount * rowTaxPercent/100)
                            purchases.put("permit", "");
                            purchases.put("suppliergstno", (debitMemo.getVendor() != null && debitMemo.getVendor().getGstRegistrationNumber() != null) ? debitMemo.getVendor().getGstRegistrationNumber() : "");
                            purchases.put("postingdate", debitMemo.getJournalEntry().getEntryDate().getTime());//Posting date same as document date.
                            purchases.put(Constants.importExportDeclarationNo, "");
                            grjArr.put(purchases);
                        }
                    }
                }

                /**
                 * *******************************Make Payment For Otherwise
                 * Tax Calculation And For Against GL
                 * Code*******************************
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.makePaymentSearchJson));
                }
                KwlReturnObject rpResult = accVendorPaymentDao.getCalculatedMakePaymentOtherwiseTax(filterParams);
                List<PaymentDetailOtherwise> podList = rpResult.getEntityList();
                if (podList != null) {
                    for (PaymentDetailOtherwise temp : podList) {
                        double taxAmount = 0;
                        double ramount = 0, tranCurrencyAmount = 0;
                        tranCurrencyAmount = temp.getAmount();
//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, tranCurrencyAmount, temp.getPayment().getCurrency().getCurrencyID(), temp.getPayment().getJournalEntry().getEntryDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, tranCurrencyAmount, temp.getPayment().getCurrency().getCurrencyID(), temp.getPayment().getCreationDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        ramount = (Double) bAmt.getEntityList().get(0);
                        taxAmount = temp.getTaxamount();
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getPayment().getCurrency().getCurrencyID(), temp.getPayment().getJournalEntry().getEntryDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getPayment().getCurrency().getCurrencyID(), temp.getPayment().getCreationDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                        taxAmount = (Double) bAmt.getEntityList().get(0);
                        saleAmount += ramount;
                        saleAmount += taxAmount;
                        taxableAmount += taxAmount;

                        double rowamount = temp.getAmount();

                        purchases = new JSONObject();
//                        purchases.put("grdate", temp.getPayment().getJournalEntry().getEntryDate().getTime());
                        purchases.put("grdate", temp.getPayment().getCreationDate().getTime());
                        purchases.put("grname", temp.getAccount().getName());
                        purchases.put("grno", temp.getPayment().getPaymentNumber());
                        purchases.put("gramt", (ramount + taxAmount));
                        purchases.put("gramtexcludinggst", ramount);
                        purchases.put("grtaxamount", (taxAmount));
                        purchases.put("grnamegst", "");
                        purchases.put("grlineno", 1);
                        purchases.put("grproduct", "");
                        purchases.put("grtaxcode", (temp.getTax() != null) ? temp.getTax().getTaxCode() : temp.getAccount().getName());
                        purchases.put("gruen", "");
                        purchases.put("fcycode", temp.getPayment().getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : temp.getPayment().getCurrency().getCurrencyCode());
                        purchases.put("purchasefcy", tranCurrencyAmount + temp.getTaxamount());
                        purchases.put("purchasefcyexcludinggst", tranCurrencyAmount);
                        purchases.put("gstfcy", (temp.getTaxamount()));
                        purchases.put("permit", "");
                        purchases.put("suppliergstno", (temp.getPayment().getVendor() != null && temp.getPayment().getVendor().getGstRegistrationNumber() != null) ? temp.getPayment().getVendor().getGstRegistrationNumber() : "");
                        purchases.put("postingdate", temp.getPayment().getJournalEntry().getEntryDate().getTime());//Posting date same as document date.
                        purchases.put(Constants.importExportDeclarationNo, "");
                        grjArr.put(purchases);
                    }
                }

                /**
                 * *******************************Debit Note Otherwise Tax
                 * Calculation *******************************
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.debitNoteSearchJson));
                }
                KwlReturnObject cnResult = accVendorPaymentDao.getCalculatedDebitNoteOtherwiseTax(filterParams);
                Iterator dnIt = cnResult.getEntityList().iterator();
                double dnAmount = 0;
                double dnTaxableAmount = 0;
                double taxableAmountD = 0;
                double dnTaxCollected = 0;
                while (dnIt.hasNext()) {
                    double taxPercent = 0;
                    double dnAmtDue = 0;
                    double taxAmount = 0;
                    double taxAmountInOriginalCurrency = 0;
                    DebitNoteTaxEntry temp = (DebitNoteTaxEntry) dnIt.next();
                    double cnSalesAmt=0.0;
                    if(!temp.getDebitNote().isIncludingGST()){
                        cnSalesAmt = (Double) temp.getAmount();
                    }else{
                        cnSalesAmt = (Double) temp.getRateIncludingGst();
                    }
                    double cnSalesAmtInOriginalCurrency = cnSalesAmt;
                    KwlReturnObject bAmt;
//                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getJournalEntry().getEntryDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                    cnSalesAmt = (Double) bAmt.getEntityList().get(0);

                    if (temp.getTax() != null) {

                        taxAmount = temp.getTaxamount();
                        taxAmountInOriginalCurrency = taxAmount;

                        KwlReturnObject bTaxAmt;
//                        bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getJournalEntry().getEntryDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                        bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                        taxAmount = (Double) bTaxAmt.getEntityList().get(0);
                    }
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        taxAmount += cnSalesAmt;
                        taxAmountInOriginalCurrency += cnSalesAmtInOriginalCurrency;
                        cnSalesAmt = 0;
                        cnSalesAmtInOriginalCurrency = 0;
                    }
                    dnAmount += authHandler.round(cnSalesAmt, companyid);//505*100=(100+p)x
                    dnTaxableAmount += authHandler.round((cnSalesAmt - taxAmount), companyid);

                    if (dnAmtDue == 0) {
                        dnTaxCollected += authHandler.round((cnSalesAmt - taxAmount), companyid);
                    }

                    taxableAmount += authHandler.round((taxAmount), companyid);
                    saleAmount += cnSalesAmt + (taxAmount);

                    purchases = new JSONObject();
//                    purchases.put("grdate", temp.getDebitNote().getJournalEntry().getEntryDate().getTime());
                    purchases.put("grdate", temp.getDebitNote().getCreationDate().getTime());
                    purchases.put("grname", temp.getAccount().getName());
                    purchases.put("grno", temp.getDebitNote().getDebitNoteNumber());
                    purchases.put("gramt", cnSalesAmt + (taxAmount));
                    purchases.put("gramtexcludinggst", cnSalesAmt);
                    purchases.put("grtaxamount", (taxAmount));
                    purchases.put("grnamegst", "");
                    purchases.put("grlineno", 1);
                    purchases.put("grproduct", "");
                    purchases.put("grtaxcode", (temp.getTax() != null) ? temp.getTax().getTaxCode() : temp.getAccount().getName());
                    purchases.put("gruen", "");
                    purchases.put("fcycode", temp.getDebitNote().getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : temp.getDebitNote().getCurrency().getCurrencyCode());
                    purchases.put("purchasefcy", cnSalesAmtInOriginalCurrency + (taxAmountInOriginalCurrency));
                    purchases.put("purchasefcyexcludinggst", cnSalesAmtInOriginalCurrency);
                    purchases.put("gstfcy", (taxAmountInOriginalCurrency));
                    purchases.put("permit", "");
                    purchases.put("suppliergstno", (temp.getDebitNote().getVendor() != null && temp.getDebitNote().getVendor().getGstRegistrationNumber() != null) ? temp.getDebitNote().getVendor().getGstRegistrationNumber() : "");
                    purchases.put("postingdate", temp.getDebitNote().getJournalEntry().getEntryDate().getTime());//Posting date same as document date.
                    purchases.put(Constants.importExportDeclarationNo, "");
                    grjArr.put(purchases);
                }
                
                if (isMalasianCompany) {
                    /*
                     *Credit Note against Vendor Tax calculation.
                     */    
                    if (isAdvanceSearch) {
                        filterParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                        filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.creditNoteSearchJson));
                    }
                    result = accInvoiceDAOobj.getCalculatedCreditNoteTax(filterParams);
                    List<CreditNote> calculatedCNTaxList = result.getEntityList();
                    for (CreditNote creditMemo : calculatedCNTaxList) {
                        double originalCNAmountWithTax = 0;
                        double originalCNAmountWithoutTax = 0;
                        double originalTaxAmount = 0;
                        double cnAmtWithoutTaxInBase = 0;
                        double taxAmountInBase = 0;
                        double totalAmtWithTaxInBase = 0;
                        
                        KwlReturnObject result1 = accJournalEntryobj.getJournalEntryDetail(creditMemo.getJournalEntry().getID(), creditMemo.getJournalEntry().getCompany().getCompanyID());
                        Iterator iterator = result1.getEntityList().iterator();
                        boolean taxflag = false;
                        while (iterator.hasNext()) {
                            JournalEntryDetail jed = (JournalEntryDetail) iterator.next();
                            Account account = null;
                            account = jed.getAccount();

                            if (jed.isDebit() && account.getID().equals(taxObj.getAccount().getID())) {
                                originalTaxAmount += jed.getAmount();
                                taxflag = true;
                            }
                            if (jed.isDebit()) {
                                originalCNAmountWithTax += jed.getAmount();
                            }
                        }
                        originalCNAmountWithoutTax = originalCNAmountWithTax - originalTaxAmount;

                        if (taxflag) {
                            KwlReturnObject bAmt1 = null;
//                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, originalCNAmountWithoutTax, creditMemo.getCurrency().getCurrencyID(), creditMemo.getJournalEntry().getEntryDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, originalCNAmountWithoutTax, creditMemo.getCurrency().getCurrencyID(), creditMemo.getCreationDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                            if (bAmt1 != null) {
                                cnAmtWithoutTaxInBase = (Double) bAmt1.getEntityList().get(0);
                            }
                            cnAmtWithoutTaxInBase = authHandler.round(cnAmtWithoutTaxInBase, companyid);
//                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, originalTaxAmount, creditMemo.getCurrency().getCurrencyID(), creditMemo.getJournalEntry().getEntryDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, originalTaxAmount, creditMemo.getCurrency().getCurrencyID(), creditMemo.getCreationDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                            taxAmountInBase = (Double) bAmt1.getEntityList().get(0);

                            totalAmtWithTaxInBase = cnAmtWithoutTaxInBase + taxAmountInBase;
                            taxableAmount += taxAmountInBase;
                            saleAmount += -(cnAmtWithoutTaxInBase + taxAmountInBase);
                            
                            purchases = new JSONObject();
//                            purchases.put("grdate", creditMemo.getJournalEntry().getEntryDate().getTime());
                            purchases.put("grdate", creditMemo.getCreationDate().getTime());
                            purchases.put("grname", creditMemo.getVendor().getName());
                            purchases.put("grno", creditMemo.getCreditNoteNumber());
                            purchases.put("gramt", totalAmtWithTaxInBase);
                            purchases.put("gramtexcludingtax", cnAmtWithoutTaxInBase);
                            purchases.put("grtaxamount", taxAmountInBase);
                            purchases.put("grnamegst", "");
                            purchases.put("grlineno", 1);
                            purchases.put("grproduct", "");
                            purchases.put("grtaxcode", creditMemo.getTax().getTaxCode());
                            purchases.put("gruen", creditMemo.getVendor().getCompanyRegistrationNumber());
                            purchases.put("fcycode", creditMemo.getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : creditMemo.getCurrency().getCurrencyCode());
                            purchases.put("purchasefcy", originalCNAmountWithTax);
                            purchases.put("purchasefcyexcludinggst", originalCNAmountWithoutTax);
                            purchases.put("gstfcy", originalTaxAmount);
                            purchases.put("permit", "");
                            purchases.put("suppliergstno", (creditMemo.getVendor() != null && creditMemo.getVendor().getGstRegistrationNumber() != null) ? creditMemo.getVendor().getGstRegistrationNumber() : "");
                            purchases.put("postingdate", creditMemo.getJournalEntry().getEntryDate().getTime());//Posting date same as document date.
                            purchases.put(Constants.importExportDeclarationNo, "");
                            grjArr.put(purchases);
                        }
                    }

                    result = accGoodsReceiptDAOObj.getCalculatedCNTaxGst(filterParams);
                    List<CreditNoteAgainstVendorGst> list12 = result.getEntityList();
                    for (CreditNoteAgainstVendorGst temp : list12) {
                        double originalCNAmtWithoutTax = (temp.getRate() * temp.getReturnQuantity());
                        double originalTaxAmount = temp.getRowTaxAmount();
                        double cnAmtWithoutTaxInBase = 0;
                        double taxAmountInBase = 0;
                        double totalAmtWithTaxInBase = 0;
//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, originalCNAmtWithoutTax, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, originalCNAmtWithoutTax, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                        cnAmtWithoutTaxInBase = (Double) bAmt.getEntityList().get(0);

//                        KwlReturnObject bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, originalTaxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, originalTaxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                        taxAmountInBase = (Double) bTaxAmt.getEntityList().get(0);

                        totalAmtWithTaxInBase = authHandler.round(cnAmtWithoutTaxInBase + taxAmountInBase, companyid);
                        taxableAmount += taxAmountInBase;
                        saleAmount += totalAmtWithTaxInBase;

                        purchases = new JSONObject();
//                        purchases.put("grdate", temp.getCreditNote().getJournalEntry().getEntryDate().getTime());
                        purchases.put("grdate", temp.getCreditNote().getCreationDate().getTime());
                        purchases.put("grname", temp.getCreditNote().getVendor().getName());
                        purchases.put("grno", temp.getCreditNote().getCreditNoteNumber());
                        purchases.put("gramt", cnAmtWithoutTaxInBase);
                        purchases.put("gramtexcludingtax", cnAmtWithoutTaxInBase);
                        purchases.put("grtaxamount", taxAmountInBase);
                        purchases.put("grnamegst", "");
                        purchases.put("grlineno", temp.getSrno());
                        purchases.put("grproduct", temp.getProduct() != null ? (!StringUtil.isNullOrEmpty(temp.getProduct().getDescription()) ? temp.getProduct().getDescription() : temp.getProduct().getName()) : "");
                        purchases.put("grtaxcode", (temp.getTax() != null) ? temp.getTax().getTaxCode() : "");
                        purchases.put("gruen", temp.getCreditNote().getVendor().getCompanyRegistrationNumber());
                        purchases.put("fcycode", temp.getCreditNote().getCurrency().getCurrencyCode().equals("SGD") ? "XXX" : temp.getCreditNote().getCurrency().getCurrencyCode());
                        purchases.put("purchasefcy", (originalCNAmtWithoutTax + originalTaxAmount));
                        purchases.put("purchasefcyexcludinggst", originalCNAmtWithoutTax);
                        purchases.put("gstfcy", originalTaxAmount);
                        purchases.put("permit", "");
                        purchases.put("suppliergstno", (temp.getCreditNote().getVendor() != null && temp.getCreditNote().getVendor().getGstRegistrationNumber() != null) ? temp.getCreditNote().getVendor().getGstRegistrationNumber() : "");
                        purchases.put("postingdate", temp.getCreditNote().getJournalEntry().getEntryDate().getTime());//Posting date same as document date.
                        purchases.put(Constants.importExportDeclarationNo, "");
                        grjArr.put(purchases);
                    }
                }   
                JSONObject obj = new JSONObject();
                obj.put("taxname", taxObj.getName());
                obj.put("taxcode", taxObj.getTaxCode());
                obj.put("totalsale", saleAmount);//sales including tax[PS]
                //            obj.put("nontaxablesale",saleAmount-taxableAmount);
                //              obj.put("taxablesale",(saleAmount-taxableAmount));
                obj.put("taxrate", taxListObj.getPercent());
                obj.put("taxamount", taxableAmount);
                obj.put("taxcollected", taxCollected);  //taxamount of all thoose invoices whose amount due is 0[PS]
                obj.put("taxpayable", taxableAmount - taxCollected);
                obj.put("details", grjArr);
                jArr.put(obj);
            }
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public JSONArray getGLdataforIAFfileNEW(HttpServletRequest request, Map<String, Object> requestParams) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        JSONArray grjArr = new JSONArray();
        JSONObject purchases = new JSONObject();
        try {
            grjArr = new JSONArray();
            Map<String, Object> filterParams = new HashMap<String, Object>();
//                 filterParams.put("taxid", taxObj.getID());
            String startDate = null;
            String endDate = null;
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
                startDate = df.format((Date) requestParams.get("startDate"));
                endDate = df.format((Date) requestParams.get("endDate"));
            }

            requestParams.put(JournalEntryConstants.DELETED, "false");
            requestParams.put(JournalEntryConstants.NONDELETED, "true");
            requestParams.put(Constants.REQ_startdate, startDate);
            requestParams.put(Constants.REQ_enddate, endDate);
            requestParams.put("onlyPendingApprovalJesFlag", true);
            boolean isAdvanceSearch = requestParams.containsKey(Constants.isAdvanceSearch) ? (Boolean) requestParams.get(Constants.isAdvanceSearch) : false;
            String invoiceSearchJson = "";
            String purchaseInvoiceSearchJson = "";
            String creditNoteSearchJson = "";
            String debitNoteSearchJson = "";
            String receivePaymentSearchJson = "";
            String makePaymentSearchJson = "";
            String journalEntrySearchJson = "";

            if (isAdvanceSearch) {
                invoiceSearchJson = (String) requestParams.get(Constants.invoiceSearchJson);
                purchaseInvoiceSearchJson = (String) requestParams.get(Constants.purchaseInvoiceSearchJson);
                creditNoteSearchJson = (String) requestParams.get(Constants.creditNoteSearchJson);
                debitNoteSearchJson = (String) requestParams.get(Constants.debitNoteSearchJson);
                receivePaymentSearchJson = (String) requestParams.get(Constants.receivePaymentSearchJson);
                makePaymentSearchJson = (String) requestParams.get(Constants.makePaymentSearchJson);
                journalEntrySearchJson = (String) requestParams.get(Constants.journalEntrySearchJson);
                requestParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                requestParams.put(Constants.Acc_Search_Json, journalEntrySearchJson);
                requestParams.put(Constants.isGSTAuditFile, true);//Addded isGSTAuditFile flag to handle advance search in GAF export case for Multi Entity flow.
            }

            HashMap<String, Object> jeRequestParams = new HashMap<String, Object>(requestParams);
//            HashMap<String, Object> jeRequestParams = getJournalEntryMap(request);

            Map<String, JSONArray> jeDetails = accReportsService.getJournalEntryDetailsMap(jeRequestParams);
            Set<String> jeIdsSet = jeDetails.keySet();
            Iterator jeIdsSetItr = jeIdsSet.iterator();
            while (jeIdsSetItr.hasNext()) {
                String jeId = jeIdsSetItr.next().toString();

                List<String> jeIdList = new ArrayList();
                jeIdList.add(jeId);

                String inParam = accReportsService.getInParamFromList(jeIdList);

                HashMap<String, Object> reqParams = new HashMap<String, Object>();
                HashMap<String, Object> reqParamsForCashTransactions = new HashMap<String, Object>();
                reqParams.put(Constants.companyKey, (String) requestParams.get(Constants.companyKey));
                reqParams.put("jeIds", inParam);
                reqParams.put("isIAF", true);

                Map<String, BillingInvoice> billingInvoiceMap = Collections.emptyMap();
                Map<String, BillingGoodsReceipt> billingGrMap = Collections.emptyMap();
                Map<String, Object[]> billingCreditNoteMap = Collections.emptyMap();
                Map<String, Object[]> billingDebitNoteMap = Collections.emptyMap();
                Map<String, Object[]> billingPaymentReceivedMap = Collections.emptyMap();
                Map<String, Object[]> billingPaymentMadeMap = Collections.emptyMap();
                Map<String, Invoice> invoiceMap = Collections.emptyMap();
                Map<String, Invoice> cashSalesMap = Collections.emptyMap();
                Map<String, GoodsReceipt> grMap = Collections.emptyMap();
                Map<String, GoodsReceipt> cashPurchaseMap = Collections.emptyMap();
                Map<String, Invoice> consignmentInvoiceMap = Collections.emptyMap();
                Map<String, GoodsReceipt> consignmentGrMap = Collections.emptyMap();
                Map<String, Object[]> creditNoteMap = Collections.emptyMap();
                Map<String, Object[]> creditNoteMapVendor = Collections.emptyMap();
                Map<String, Object[]> debitNoteMap = Collections.emptyMap();
                Map<String, Object[]> debitNoteMapCustomer = Collections.emptyMap();
                Map<String, Object[]> paymentReceivedMap = Collections.emptyMap();
                Map<String, Object[]> paymentMadeMap = Collections.emptyMap();

                billingGrMap = accReportsService.getBillingGoodsReceiptMap(reqParams);
                billingCreditNoteMap = accReportsService.getBillingCreditNoteMap(reqParams);
                billingDebitNoteMap = accReportsService.getBillingDebitNoteMap(reqParams);
                billingPaymentReceivedMap = accReportsService.getBillingPaymentReceivedMap(reqParams);
                billingPaymentMadeMap = accReportsService.getBillingPaymentMadeMap(reqParams);

                if (isAdvanceSearch) {
                    reqParams.put(Constants.Filter_Criteria, requestParams.get(Constants.Filter_Criteria));
                    reqParams.put(Constants.Acc_Search_Json, invoiceSearchJson);
                    invoiceMap = accReportsService.getInvoiceMap(reqParams);

                    reqParams.put(Constants.Acc_Search_Json, purchaseInvoiceSearchJson);
                    grMap = accReportsService.getGoodsReceiptMap(reqParams);
                    
                    reqParams.put(Constants.Acc_Search_Json, creditNoteSearchJson);
                    creditNoteMap = accReportsService.getCreditNoteMap(reqParams);
                    creditNoteMapVendor = accReportsService.creditNoteMapVendor(reqParams);

                    reqParams.put(Constants.Acc_Search_Json, debitNoteSearchJson);
                    debitNoteMap = accReportsService.getDebitNoteMap(reqParams);
                    debitNoteMapCustomer = accReportsService.debitNoteMapCustomer(reqParams);

                    reqParams.put(Constants.Acc_Search_Json, receivePaymentSearchJson);
                    paymentReceivedMap = accReportsService.getPaymentReceivedMap(reqParams);

                    reqParams.put(Constants.Acc_Search_Json, makePaymentSearchJson);
                    paymentMadeMap = accReportsService.getPaymentMadeMap(reqParams);

                    reqParamsForCashTransactions.putAll(reqParams);
                    reqParamsForCashTransactions.put("cashonly", "true");
                    
                    reqParams.put(Constants.Acc_Search_Json, purchaseInvoiceSearchJson);
                    cashPurchaseMap = accReportsService.getGoodsReceiptMap(reqParamsForCashTransactions);
                    reqParamsForCashTransactions.clear();
                    
                    reqParamsForCashTransactions.putAll(reqParams);
                    reqParamsForCashTransactions.put("cashonly", "true");
                    reqParams.put(Constants.Acc_Search_Json, invoiceSearchJson);
                    cashSalesMap = accReportsService.getInvoiceMap(reqParamsForCashTransactions);
                } else {
                    invoiceMap = accReportsService.getInvoiceMap(reqParams);
                    grMap = accReportsService.getGoodsReceiptMap(reqParams);
                    reqParams.put("isConsignment", false);
                    creditNoteMap = accReportsService.getCreditNoteMap(reqParams);
                    creditNoteMapVendor = accReportsService.creditNoteMapVendor(reqParams);
                    debitNoteMap = accReportsService.getDebitNoteMap(reqParams);
                    debitNoteMapCustomer = accReportsService.debitNoteMapCustomer(reqParams);
                    paymentReceivedMap = accReportsService.getPaymentReceivedMap(reqParams);
                    paymentMadeMap = accReportsService.getPaymentMadeMap(reqParams);

                    reqParamsForCashTransactions.putAll(reqParams);
                    reqParamsForCashTransactions.put("cashonly", "true");
                    cashPurchaseMap = accReportsService.getGoodsReceiptMap(reqParamsForCashTransactions);

                    reqParamsForCashTransactions.clear();

                    reqParamsForCashTransactions.putAll(reqParams);
                    reqParamsForCashTransactions.put("cashonly", "true");
                    cashSalesMap = accReportsService.getInvoiceMap(reqParamsForCashTransactions);
                }
                
                reqParams.remove(Constants.Acc_Search_Json);    //Consignment related data not considered for Multi Entity GST export
                reqParams.remove(Constants.Filter_Criteria);
                reqParams.put("isConsignment", true);
                consignmentInvoiceMap = accReportsService.getInvoiceMap(reqParams);
                consignmentGrMap = accReportsService.getGoodsReceiptMap(reqParams);
                
                String sourcedocid = "";
                String sourceType = "";

                if (billingGrMap.containsKey(jeId)) {
                    if (billingGrMap.get(jeId).getVendorEntry() != null) {
                        sourcedocid = billingGrMap.get(jeId).getBillingGoodsReceiptNumber();
                        sourceType = "Purchase";
                    }
                } else if (billingCreditNoteMap.containsKey(jeId)) {
                    sourcedocid = ((BillingCreditNote) billingCreditNoteMap.get(jeId)[0]).getCreditNoteNumber();
                    sourceType = "Credit Note";
                } else if (billingDebitNoteMap.containsKey(jeId)) {
                    sourcedocid = ((BillingDebitNote) billingDebitNoteMap.get(jeId)[0]).getDebitNoteNumber();
                    sourceType = "Debit Note";
                } else if (billingPaymentReceivedMap.containsKey(jeId)) {
                    BillingReceipt receipt = (BillingReceipt) billingPaymentReceivedMap.get(jeId)[0];
                    sourcedocid = receipt.getBillingReceiptNumber();
                    sourceType = receipt.getPayDetail() != null ? receipt.getPayDetail().getPaymentMethod().getMethodName() : "Receipt";
                } else if (billingPaymentMadeMap.containsKey(jeId)) {
                    BillingPayment payment = ((BillingPayment) billingPaymentMadeMap.get(jeId)[0]);
                    sourcedocid = payment.getBillingPaymentNumber();
                    sourceType = payment.getPayDetail() != null ? payment.getPayDetail().getPaymentMethod().getMethodName() : "Payment";
                } else if (invoiceMap.containsKey(jeId)) {
                    if (invoiceMap.get(jeId).getCustomerEntry() != null) {
                        sourcedocid = invoiceMap.get(jeId).getInvoiceNumber();
                        sourceType = "Sales";
                    }
                } else if (grMap.containsKey(jeId)) {
                    if (grMap.get(jeId).getVendorEntry() != null) {
                        sourcedocid = grMap.get(jeId).getGoodsReceiptNumber();
                        sourceType = "Purchase";
                    }
                } else if (consignmentInvoiceMap.containsKey(jeId)) {
                    if (consignmentInvoiceMap.get(jeId).getCustomerEntry() != null) {
                        sourcedocid = consignmentInvoiceMap.get(jeId).getInvoiceNumber();
                        sourceType = "Consignment Sales";
                    }
                } else if (consignmentGrMap.containsKey(jeId)) {
                    if (consignmentGrMap.get(jeId).getVendorEntry() != null) {
                        sourcedocid = consignmentGrMap.get(jeId).getGoodsReceiptNumber();
                        sourceType = "Consignment Purchase";
                    }
                } else if (creditNoteMap.containsKey(jeId)) {
                    sourcedocid = ((CreditNote) creditNoteMap.get(jeId)[0]).getCreditNoteNumber();
                    sourceType = "Credit Note";
                } else if (creditNoteMapVendor.containsKey(jeId)) {
                    sourcedocid = ((CreditNote) creditNoteMapVendor.get(jeId)[0]).getCreditNoteNumber();
                    sourceType = "Credit Note";
                } else if (debitNoteMap.containsKey(jeId)) {
                    sourcedocid = ((DebitNote) debitNoteMap.get(jeId)[0]).getDebitNoteNumber();
                    sourceType = "Debit Note";
                } else if (debitNoteMapCustomer.containsKey(jeId)) {
                    sourcedocid = ((DebitNote) debitNoteMapCustomer.get(jeId)[0]).getDebitNoteNumber();
                    sourceType = "Debit Note";
                }else if (paymentReceivedMap.containsKey(jeId)) {
                    Receipt receipt = ((Receipt) paymentReceivedMap.get(jeId)[0]);
                    sourcedocid = receipt.getReceiptNumber();
                    sourceType = receipt.getPayDetail() != null ? receipt.getPayDetail().getPaymentMethod().getMethodName() : "Receipt";
                } else if (paymentMadeMap.containsKey(jeId)) {
                    Payment payment = (Payment) paymentMadeMap.get(jeId)[0];
                    sourcedocid = payment.getPaymentNumber();
                    sourceType = payment.getPayDetail() != null ? payment.getPayDetail().getPaymentMethod().getMethodName() : "Payment";
                } else if(cashPurchaseMap.containsKey(jeId)){
                     if (cashPurchaseMap.get(jeId).getVendorEntry() != null) {
                        sourcedocid = cashPurchaseMap.get(jeId).getGoodsReceiptNumber();
                        sourceType = "Purchase";
                    }
                } else if(cashSalesMap.containsKey(jeId)){
                    if (cashSalesMap.get(jeId).getCustomerEntry() != null) {
                        sourcedocid = cashSalesMap.get(jeId).getInvoiceNumber();
                        sourceType = "Sales";
                    }
                }else {
                    sourcedocid = "";
                }

                KwlReturnObject jeResult = accountingHandlerDAOobj.getObject(JournalEntry.class.getName(), jeId);
                JournalEntry je = (JournalEntry) jeResult.getEntityList().get(0);
                JSONArray accountsInJE = jeDetails.get(jeId);
                for (int i = 0; i < accountsInJE.length(); i++) {
                    JSONObject obj = accountsInJE.getJSONObject(i);
                    purchases = new JSONObject();
                    KwlReturnObject accountResult = accountingHandlerDAOobj.getObject(Account.class.getName(), obj.optString("accountid", ""));
                    Account account = (Account) accountResult.getEntityList().get(0);

                    String accid = "";
                    KwlReturnObject vendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), obj.optString("accountid", ""));
                    if (vendor != null && vendor.getEntityList() != null && vendor.getEntityList().get(0) != null) {
                        List<Vendor> vl = vendor.getEntityList();
                        accid = vl.get(0).getAltContactNumber();
                    }

                    KwlReturnObject customer = accountingHandlerDAOobj.getObject(Customer.class.getName(), obj.optString("accountid", ""));
                    if (customer != null && customer.getEntityList() != null && customer.getEntityList().get(0) != null) {
                        List<Customer> cl = customer.getEntityList();
                        accid = cl.get(0).getAltContactNumber();
                    }

                    double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccount(request, account, false, null);

                    purchases.put("jedate", je.getEntryDate().getTime());
                    purchases.put("jeaccountid", account.getAcccode() != null ? account.getAcccode() : "");
                    purchases.put("jeaccountname", account.getName() != null ? account.getName() : "");
                    purchases.put("openingbalnace", account != null ? accountOpeningBalanceInBase : 0.0);
                    purchases.put("creationdate", account.getCreationDate().getTime());
                    purchases.put("jedesc", je.getMemo() != null ? je.getMemo().replace("|", "").replace("\n", " ") : "");
                    purchases.put("jename", obj.optString("accountname", ""));
                    purchases.put("jeid", je.getEntryNumber());
                    purchases.put("sourcedocid", sourcedocid);
                    purchases.put("accid", accid);
                    purchases.put("accounttype", account.getAccounttype() == 1 ? "Balance Sheet" : "Profit & Loss");
                    purchases.put("entityname", "");

                    double balance = 0d;
                    if (obj.has("c_amount")) {
//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, obj.optDouble("c_amount", 0.0), je.getCurrency().getCurrencyID(), je.getEntryDate(), je.getExternalCurrencyRate());                        //Converting into base [PS]
//                        balance = (Double) bAmt.getEntityList().get(0);
                        purchases.put("credit", obj.optDouble("c_amount", 0.0));
                        purchases.put("debit", "0.00");
                    } else {
//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, obj.optDouble("d_amount", 0.0), je.getCurrency().getCurrencyID(), je.getEntryDate(), je.getExternalCurrencyRate());                        //Converting into base [PS]
//                        balance = (Double) bAmt.getEntityList().get(0);
                        purchases.put("debit", obj.optDouble("d_amount", 0.0));
                        purchases.put("credit", "0.00");
                    }
                    purchases.put("sourcetype", sourceType);
                    grjArr.put(purchases);
                }
            }

            JSONObject obj = new JSONObject();
            obj.put("details", grjArr);
            jArr.put(obj);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public JSONArray getGLdataforIAFfile(HttpServletRequest request, Map<String, Object> requestParams, List taxList) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        JSONArray grjArr = new JSONArray();
        JSONObject purchases = new JSONObject();
        try {
            Iterator itr = taxList.iterator();
            while (itr.hasNext()) {
                grjArr = new JSONArray();
                Object[] row = (Object[]) itr.next();
                Tax taxObj = (Tax) row[0];
                Map<String, Object> filterParams = new HashMap<String, Object>();
                filterParams.put("taxid", taxObj.getID());
                if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
                    filterParams.put("startDate", requestParams.get("startDate"));
                    filterParams.put("endDate", requestParams.get("endDate"));
                }

                KwlReturnObject result = accGoodsReceiptDAOObj.getCalculatedGRDtlTaxDistinct(filterParams);
                List<Object[]> GRList = result.getEntityList();
                if (GRList != null) {
                    for (Object[] temp : GRList) {

                        KwlReturnObject jeDetail = accJournalEntryobj.getJournalEntryDetail(temp[0].toString(), requestParams.get(Constants.companyKey).toString());
                        List<JournalEntryDetail> JEList = jeDetail.getEntityList();
                        if (JEList != null) {
                            for (JournalEntryDetail JEtemp : JEList) {
                                String accid = "";
                                KwlReturnObject vendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), (String) JEtemp.getAccount().getID());
                                if (vendor != null && vendor.getEntityList() != null && vendor.getEntityList().get(0) != null) {
                                    List<Vendor> vl = vendor.getEntityList();
                                    accid = vl.get(0).getAltContactNumber();
                                }

                                double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccount(request, JEtemp.getAccount(), false, null);

                                double balance = accountOpeningBalanceInBase;//(Double) retObj.getEntityList().get(0);    
                                purchases = new JSONObject();
                                purchases.put("jedate", JEtemp.getJournalEntry().getEntryDate().getTime());
                                purchases.put("jeaccountid", JEtemp.getAccount().getAcccode());
                                purchases.put("jeaccountname", JEtemp.getAccount().getName());
                                purchases.put("openingbalnace", balance);
                                purchases.put("creationdate", JEtemp.getAccount().getCreationDate().getTime());
                                purchases.put("jedesc", JEtemp.getJournalEntry().getMemo());
                                purchases.put("jename", JEtemp.getAccount().getName());
                                purchases.put("jeid", JEtemp.getJournalEntry().getEntryNumber());
                                purchases.put("sourcedocid", temp[1].toString());
                                purchases.put("accid", accid);
                                if (!JEtemp.isDebit()) {
                                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, JEtemp.getAmount(), JEtemp.getJournalEntry().getCurrency().getCurrencyID(), JEtemp.getJournalEntry().getEntryDate(), JEtemp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                    balance = (Double) bAmt.getEntityList().get(0);
                                    purchases.put("credit", balance);
                                    purchases.put("debit", "0.00");
                                } else {
                                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, JEtemp.getAmount(), JEtemp.getJournalEntry().getCurrency().getCurrencyID(), JEtemp.getJournalEntry().getEntryDate(), JEtemp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                    balance = (Double) bAmt.getEntityList().get(0);
                                    purchases.put("debit", balance);
                                    purchases.put("credit", "0.00");
                                }
                                purchases.put("sourcetype", "Purchase");
                                grjArr.put(purchases);
                            }
                        }
                    }
                }

                result = accGoodsReceiptDAOObj.getCalculatedGRDtlTaxDistinctBilling(filterParams);
                List<Object[]> GRListBilling = result.getEntityList();
                if (GRListBilling != null) {
                    for (Object[] temp : GRListBilling) {

                        KwlReturnObject jeDetail = accJournalEntryobj.getJournalEntryDetail(temp[0].toString(), requestParams.get(Constants.companyKey).toString());
                        List<JournalEntryDetail> JEList = jeDetail.getEntityList();
                        if (JEList != null) {
                            for (JournalEntryDetail JEtemp : JEList) {
                                String accid = "";
                                KwlReturnObject vendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), (String) JEtemp.getAccount().getID());
                                if (vendor != null && vendor.getEntityList() != null && vendor.getEntityList().get(0) != null) {
                                    List<Vendor> vl = vendor.getEntityList();
                                    accid = vl.get(0).getAltContactNumber();
                                }

                                double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccount(request, JEtemp.getAccount(), false, null);
                                double balance = accountOpeningBalanceInBase;//(Double) retObj.getEntityList().get(0);  
                                purchases = new JSONObject();
                                purchases.put("jedate", JEtemp.getJournalEntry().getEntryDate().getTime());
                                purchases.put("jeaccountid", JEtemp.getAccount().getAcccode());
                                purchases.put("jeaccountname", JEtemp.getAccount().getName());
                                purchases.put("openingbalnace", balance);
                                purchases.put("creationdate", JEtemp.getAccount().getCreationDate().getTime());
                                purchases.put("jedesc", JEtemp.getJournalEntry().getMemo());
                                purchases.put("jename", JEtemp.getAccount().getName());
                                purchases.put("jeid", JEtemp.getJournalEntry().getEntryNumber());
                                purchases.put("sourcedocid", temp[1].toString());
                                purchases.put("accid", accid);
                                if (!JEtemp.isDebit()) {
                                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, JEtemp.getAmount(), JEtemp.getJournalEntry().getCurrency().getCurrencyID(), JEtemp.getJournalEntry().getEntryDate(), JEtemp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                    balance = (Double) bAmt.getEntityList().get(0);
                                    purchases.put("credit", balance);
                                    purchases.put("debit", "0.00");
                                } else {
                                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, JEtemp.getAmount(), JEtemp.getJournalEntry().getCurrency().getCurrencyID(), JEtemp.getJournalEntry().getEntryDate(), JEtemp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                    balance = (Double) bAmt.getEntityList().get(0);
                                    purchases.put("debit", balance);
                                    purchases.put("credit", "0.00");
                                }
                                purchases.put("sourcetype", "Purchase");
                                grjArr.put(purchases);
                            }
                        }
                    }
                }

                result = accInvoiceDAOobj.getCalculatedInvDtlTaxDistinct(filterParams);
                List<Object[]> invList = result.getEntityList();
                if (invList != null) {
                    for (Object[] temp : invList) {

                        KwlReturnObject jeDetail = accJournalEntryobj.getJournalEntryDetail(temp[0].toString(), requestParams.get(Constants.companyKey).toString());
                        List<JournalEntryDetail> JEList = jeDetail.getEntityList();
                        if (JEList != null) {
                            for (JournalEntryDetail JEtemp : JEList) {
                                String accid = "";
                                KwlReturnObject customer = accountingHandlerDAOobj.getObject(Customer.class.getName(), (String) JEtemp.getAccount().getID());
                                if (customer != null && customer.getEntityList() != null && customer.getEntityList().get(0) != null) {
                                    List<Customer> cl = customer.getEntityList();
                                    accid = cl.get(0).getAltContactNumber();
                                }

                                double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccount(request, JEtemp.getAccount(), false, null);
                                double balance = accountOpeningBalanceInBase;//(Double) retObj.getEntityList().get(0);
                                purchases = new JSONObject();
                                purchases.put("jedate", JEtemp.getJournalEntry().getEntryDate().getTime());
                                purchases.put("jeaccountid", JEtemp.getAccount().getAcccode());
                                purchases.put("jeaccountname", JEtemp.getAccount().getName());
                                purchases.put("openingbalnace", balance);
                                purchases.put("creationdate", JEtemp.getAccount().getCreationDate().getTime());
                                purchases.put("jedesc", JEtemp.getJournalEntry().getMemo());
                                purchases.put("jename", JEtemp.getAccount().getName());
                                purchases.put("jeid", JEtemp.getJournalEntry().getEntryNumber());
                                purchases.put("sourcedocid", temp[1].toString());
                                purchases.put("accid", accid);
                                if (!JEtemp.isDebit()) {
                                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, JEtemp.getAmount(), JEtemp.getJournalEntry().getCurrency().getCurrencyID(), JEtemp.getJournalEntry().getEntryDate(), JEtemp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                    balance = (Double) bAmt.getEntityList().get(0);
                                    purchases.put("credit", balance);
                                    purchases.put("debit", "0.00");
                                } else {
                                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, JEtemp.getAmount(), JEtemp.getJournalEntry().getCurrency().getCurrencyID(), JEtemp.getJournalEntry().getEntryDate(), JEtemp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                    balance = (Double) bAmt.getEntityList().get(0);
                                    purchases.put("debit", balance);
                                    purchases.put("credit", "0.00");
                                }
                                purchases.put("sourcetype", "Sales");
                                grjArr.put(purchases);
                            }
                        }
                    }
                }

                result = accInvoiceDAOobj.getCalculatedInvDtlTaxDistinctBilling(filterParams);
                List<Object[]> invBillingList = result.getEntityList();
                if (invBillingList != null) {
                    for (Object[] temp : invBillingList) {

                        KwlReturnObject jeDetail = accJournalEntryobj.getJournalEntryDetail(temp[0].toString(), requestParams.get(Constants.companyKey).toString());
                        List<JournalEntryDetail> JEList = jeDetail.getEntityList();
                        if (JEList != null) {
                            for (JournalEntryDetail JEtemp : JEList) {
                                String accid = "";
                                KwlReturnObject customer = accountingHandlerDAOobj.getObject(Customer.class.getName(), (String) JEtemp.getAccount().getID());
                                if (customer != null && customer.getEntityList() != null && customer.getEntityList().get(0) != null) {
                                    List<Customer> cl = customer.getEntityList();
                                    accid = cl.get(0).getAltContactNumber();
                                }
                                double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccount(request, JEtemp.getAccount(), false, null);
                                double balance = accountOpeningBalanceInBase;//(Double) retObj.getEntityList().get(0);
                                purchases = new JSONObject();
                                purchases.put("jedate", JEtemp.getJournalEntry().getEntryDate().getTime());
                                purchases.put("jeaccountid", JEtemp.getAccount().getAcccode());
                                purchases.put("jeaccountname", JEtemp.getAccount().getName());
                                purchases.put("openingbalnace", balance);
                                purchases.put("creationdate", JEtemp.getAccount().getCreationDate().getTime());
                                purchases.put("jedesc", JEtemp.getJournalEntry().getMemo());
                                purchases.put("jename", JEtemp.getAccount().getName());
                                purchases.put("jeid", JEtemp.getJournalEntry().getEntryNumber());
                                purchases.put("sourcedocid", temp[1].toString());
                                purchases.put("accid", accid);
                                if (!JEtemp.isDebit()) {
                                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, JEtemp.getAmount(), JEtemp.getJournalEntry().getCurrency().getCurrencyID(), JEtemp.getJournalEntry().getEntryDate(), JEtemp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                    balance = (Double) bAmt.getEntityList().get(0);
                                    purchases.put("credit", balance);
                                    purchases.put("debit", "0.00");
                                } else {
                                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, JEtemp.getAmount(), JEtemp.getJournalEntry().getCurrency().getCurrencyID(), JEtemp.getJournalEntry().getEntryDate(), JEtemp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                    balance = (Double) bAmt.getEntityList().get(0);
                                    purchases.put("debit", balance);
                                    purchases.put("credit", "0.00");
                                }
                                purchases.put("sourcetype", "Sales");
                                grjArr.put(purchases);
                            }
                        }
                    }
                }

                result = accGoodsReceiptDAOObj.getCalculatedExpenseGRDtlTax(filterParams);
                List<ExpenseGRDetail> expList = result.getEntityList();
                if (expList != null) {
                    for (ExpenseGRDetail temp : expList) {
                        KwlReturnObject jeDetail = accJournalEntryobj.getJournalEntryDetail(temp.getGoodsReceipt().getJournalEntry().getID(), requestParams.get(Constants.companyKey).toString());
                        List<JournalEntryDetail> JEList = jeDetail.getEntityList();
                        if (JEList != null) {
                            for (JournalEntryDetail JEtemp : JEList) {
                                String accid = "";
                                KwlReturnObject customer = accountingHandlerDAOobj.getObject(Customer.class.getName(), (String) JEtemp.getAccount().getID());
                                if (customer != null && customer.getEntityList() != null && customer.getEntityList().get(0) != null) {
                                    List<Customer> cl = customer.getEntityList();
                                    accid = cl.get(0).getAltContactNumber();
                                }

                                double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccount(request, JEtemp.getAccount(), false, null);
                                double balance = accountOpeningBalanceInBase;//(Double) retObj.getEntityList().get(0);
                                purchases = new JSONObject();
                                purchases.put("jedate", JEtemp.getJournalEntry().getEntryDate().getTime());
                                purchases.put("jeaccountid", JEtemp.getAccount().getAcccode());
                                purchases.put("jeaccountname", JEtemp.getAccount().getName());
                                purchases.put("openingbalnace", balance);
                                purchases.put("creationdate", JEtemp.getAccount().getCreationDate().getTime());
                                purchases.put("jedesc", JEtemp.getJournalEntry().getMemo());
                                purchases.put("jename", JEtemp.getAccount().getName());
                                purchases.put("jeid", JEtemp.getJournalEntry().getEntryNumber());
                                purchases.put("sourcedocid", temp.getGoodsReceipt().getGoodsReceiptNumber());
                                purchases.put("accid", accid);
                                if (!JEtemp.isDebit()) {
                                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, JEtemp.getAmount(), JEtemp.getJournalEntry().getCurrency().getCurrencyID(), JEtemp.getJournalEntry().getEntryDate(), JEtemp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                    balance = (Double) bAmt.getEntityList().get(0);
                                    purchases.put("credit", balance);
                                    purchases.put("debit", "0.00");
                                } else {
                                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, JEtemp.getAmount(), JEtemp.getJournalEntry().getCurrency().getCurrencyID(), JEtemp.getJournalEntry().getEntryDate(), JEtemp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                    balance = (Double) bAmt.getEntityList().get(0);
                                    purchases.put("debit", balance);
                                    purchases.put("credit", "0.00");
                                }
                                purchases.put("sourcetype", "General Ledger");
                                grjArr.put(purchases);
                            }
                        }
                    }
                }

                result = accGoodsReceiptDAOObj.getCalculatedDNTax(filterParams);
                List<DebitNote> list11 = result.getEntityList();
                if (list11 != null) {
                    for (DebitNote debitMemo : list11) {
                        double dnAmount = 0;
                        double taxAmount = 0;
                        JournalEntryDetail JEtemp = null;
                        KwlReturnObject result1 = accJournalEntryobj.getJournalEntryDetail(debitMemo.getJournalEntry().getID(), debitMemo.getJournalEntry().getCompany().getCompanyID());
                        Iterator iterator = result1.getEntityList().iterator();
                        boolean taxflag = false;
                        while (iterator.hasNext()) {
                            JournalEntryDetail jed = (JournalEntryDetail) iterator.next();
                            Account account = null;
                            account = jed.getAccount();
                            //Logic to get new OTHER_CURRENT_LIABILITIES group from old OTHER_CURRENT_LIABILITIES
                            //To do - Need to test wheteher is working or not
                            String currLibgrp = "";
                            Group group = accAccountDAOobj.getNewGroupFromOldId(Group.OTHER_CURRENT_LIABILITIES, account.getCompany().getCompanyID());
                            if (group != null) {
                                currLibgrp = group.getID();
                            }
                            if (account.getGroup().getID().equals(currLibgrp)) {
                                if (!jed.isDebit() && account.getID().equals(taxObj.getAccount().getID())) {
                                    taxAmount = jed.getAmount();
                                    taxflag = true;

                                }
                            }
                            if (jed.isDebit()) {
                                JEtemp = jed;
                                dnAmount += jed.getAmount();
                            }
                        }
                        if (taxflag) {
                            String currencyid = debitMemo.getJournalEntry().getCurrency().getCurrencyID();
//                            KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, dnAmount, currencyid, debitMemo.getJournalEntry().getEntryDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, dnAmount, currencyid, debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            dnAmount = (Double) bAmt1.getEntityList().get(0);
//                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, debitMemo.getJournalEntry().getEntryDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            taxAmount = (Double) bAmt1.getEntityList().get(0);

                            double accountOpeningBalanceInBase = accInvoiceCommon.getOpeningBalanceOfAccount(request, JEtemp.getAccount(), false, null);
                            double balance = accountOpeningBalanceInBase;
                            purchases = new JSONObject();
                            purchases.put("jedate", JEtemp.getJournalEntry().getEntryDate().getTime());
                            purchases.put("jeaccountid", JEtemp.getAccount().getAcccode());
                            purchases.put("jeaccountname", JEtemp.getAccount().getName());
                            purchases.put("openingbalnace", balance);
                            purchases.put("creationdate", JEtemp.getAccount().getCreationDate().getTime());
                            purchases.put("jedesc", JEtemp.getJournalEntry().getMemo());
                            purchases.put("jename", JEtemp.getAccount().getName());
                            purchases.put("jeid", JEtemp.getJournalEntry().getEntryNumber());
                            purchases.put("sourcedocid", debitMemo.getDebitNoteNumber());
                            purchases.put("accid", "");
                            if (!JEtemp.isDebit()) {
                                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, JEtemp.getAmount(), JEtemp.getJournalEntry().getCurrency().getCurrencyID(), JEtemp.getJournalEntry().getEntryDate(), JEtemp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                balance = (Double) bAmt.getEntityList().get(0);
                                purchases.put("credit", balance);
                                purchases.put("debit", "0.00");
                            } else {
                                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, JEtemp.getAmount(), JEtemp.getJournalEntry().getCurrency().getCurrencyID(), JEtemp.getJournalEntry().getEntryDate(), JEtemp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                                balance = (Double) bAmt.getEntityList().get(0);
                                purchases.put("debit", balance);
                                purchases.put("credit", "0.00");
                            }
                            purchases.put("sourcetype", "Debit Note");
                            grjArr.put(purchases);
                        }
                    }
                }

                JSONObject obj = new JSONObject();
                obj.put("details", grjArr);
                jArr.put(obj);
            }
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public ModelAndView getJournalEntry(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = getJournalEntryMap(request);
            if (request.getParameter("groupid") != null && Boolean.parseBoolean(request.getParameter("groupid"))) {
                requestParams.put("groupid", true);
            }

            KwlReturnObject result = null;
            KwlReturnObject result1 = null;
            KwlReturnObject result2 = null;
            KwlReturnObject resultForTotalAmount = null;
            List resultListForTotalAmount = null;
            double grandtotalAmount = 0;

            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            boolean pendingFlag = (request.getParameter("pendingApproval") != null) ? Boolean.parseBoolean(request.getParameter("pendingApproval")) : false;
            requestParams.put("pendingFlag", pendingFlag);
            String companyid = "";
            if (consolidateFlag) {
                requestParams.put(Constants.start, "");
                requestParams.put(Constants.limit, "");
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.billid))) {
                requestParams.put(Constants.billid, request.getParameter(Constants.billid));
            }
            KwlReturnObject userResult = accountingHandlerDAOobj.getObject(User.class.getName(), sessionHandlerImpl.getUserid(request));
            User user = (User) userResult.getEntityList().get(0);
            if (!StringUtil.isNullOrEmpty(user.getDepartment())) {
                requestParams.put("userDepartment", user.getDepartment());
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("linknumber"))) {
                requestParams.put("linknumber", request.getParameter("linknumber"));
            }

            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            boolean isCustomerReport = !StringUtil.isNullOrEmpty(request.getParameter("isCustomerReport")) ? (Boolean.parseBoolean(request.getParameter("isCustomerReport"))) : false;
            if (isCustomerReport) {
                String customer = !StringUtil.isNullOrEmpty(request.getParameter("customer")) ? ((request.getParameter("customer"))) : "All";
                requestParams.put("isCustomerReport", isCustomerReport);
                requestParams.put("customer", customer);
            }
            requestParams.put("isJEReport", true);
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);
            requestParams.put("dateformat", df);
            
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);

                if (request.getParameter("cashtype") != null) {
                    String reporttype = request.getParameter("cashtype").toString();
                    if (StringUtil.equal(JournalEntryConstants.CashReceiptJournal, reporttype)) {
                        requestParams.put(JournalEntryConstants.ReportClass, JournalEntryConstants.Receipt);
                        result1 = accJournalEntryobj.getJournalEntryForReports(requestParams);
                        requestParams.put(JournalEntryConstants.ReportClass, JournalEntryConstants.ASSET);
                        requestParams.put(JournalEntryConstants.ReportType, reporttype);
                        result2 = accJournalEntryobj.getJournalEntryForReports(requestParams);
                        List<JournalEntry> jeList1 = result1.getEntityList();
                        List<JournalEntry> jeList2 = result2.getEntityList();
                        List<JournalEntry> jeList3 = new ArrayList<JournalEntry>();
                        jeList3.addAll(jeList1);
                        jeList3.addAll(jeList2);
                        // Collections.sort(jeList3);  SDP-13073 Sort not wotking
                        result = new KwlReturnObject(true, "", null, jeList3, result1.getRecordTotalCount() + result2.getRecordTotalCount());
                    } else if (StringUtil.equal(JournalEntryConstants.CashDisbursementJournal, reporttype)) {
                        requestParams.put(JournalEntryConstants.ReportClass, JournalEntryConstants.Payment);
                        result1 = accJournalEntryobj.getJournalEntryForReports(requestParams);
                        requestParams.put(JournalEntryConstants.ReportClass, JournalEntryConstants.ASSET);
                        requestParams.put(JournalEntryConstants.ReportType, reporttype);
                        result2 = accJournalEntryobj.getJournalEntryForReports(requestParams);
                        List<JournalEntry> jeList1 = result1.getEntityList();
                        List<JournalEntry> jeList2 = result2.getEntityList();
                        List<JournalEntry> jeList3 = new ArrayList<JournalEntry>();
                        jeList3.addAll(jeList1);
                        jeList3.addAll(jeList2);
                        //Collections.sort(jeList3); SDP-13073 Sort not wotking
                        result = new KwlReturnObject(true, "", null, jeList3, result1.getRecordTotalCount() + result2.getRecordTotalCount());
                    } else if (StringUtil.equal(JournalEntryConstants.SalesReceivableJournal, reporttype)) {
                        requestParams.put(JournalEntryConstants.ReportClass, JournalEntryConstants.Invoice);
                        result = accJournalEntryobj.getJournalEntryForReports(requestParams);
                    } else if (StringUtil.equal(JournalEntryConstants.PurchasePayableJournal, reporttype)) {
                        requestParams.put(JournalEntryConstants.ReportClass, JournalEntryConstants.GoodsReceipt);
                        result = accJournalEntryobj.getJournalEntryForReports(requestParams);
                    } else if (StringUtil.equal(JournalEntryConstants.PartyJournal, reporttype)) {
                        requestParams.put(CCConstants.isPartyJE, CCConstants.isPartyJE);
                        result = accJournalEntryobj.getJournalEntry(requestParams);
                    } else if (StringUtil.equal(JournalEntryConstants.fundTransfer, reporttype)) {
                        requestParams.put(Constants.Journal_Entry_Type,3);
                        result = accJournalEntryobj.getJournalEntry(requestParams);
                    } else if (StringUtil.equalIgnoreCase(JournalEntryConstants.NormalJournal, reporttype)) {
                        requestParams.put(Constants.Journal_Entry_Type,1);
                        result = accJournalEntryobj.getJournalEntry(requestParams);
                    } else {
                        if (reporttype.equalsIgnoreCase("" + Constants.GSTRJETYPE.get(Constants.JETYPE_TDS))
                                || reporttype.equalsIgnoreCase("" + Constants.GSTRJETYPE.get(Constants.JETYPE_TCS))
                                || reporttype.equalsIgnoreCase("" + Constants.GSTRJETYPE.get(Constants.JETYPE_ITC))) {
                            requestParams.put("GSTRType", reporttype);
                        }
                        result = accJournalEntryobj.getJournalEntry(requestParams);
                    }
                } else {
                    result = accJournalEntryobj.getJournalEntry(requestParams);
                }
                if (result.getEntityList().size() > 0) {
                    jobj = accReportsService.getJournalEntryJsonMerged(requestParams, result.getEntityList(), DataJArr);
                }
                
                if ((Boolean)requestParams.get("isUserSummaryReportFlag")) {
                    resultForTotalAmount = accJournalEntryobj.getJournalEntryTotalAmountSum(requestParams);
                    resultListForTotalAmount = resultForTotalAmount.getEntityList();
                    if ((resultListForTotalAmount.get(0) != null)) {
                        grandtotalAmount = Double.valueOf((resultListForTotalAmount.get(0).toString()));
            }
                }

            }
            int cnt = consolidateFlag ? DataJArr.length() : result.getRecordTotalCount();
            JSONArray pagedJson = DataJArr;
            if (consolidateFlag) {
                String start = request.getParameter(Constants.start);
                String limit = request.getParameter(Constants.limit);
                if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                    pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
                }
            }
            jobj.put(Constants.RES_data, pagedJson);
            jobj.put(Constants.RES_count, pagedJson.length() == 0 ? 0 : cnt);
            if ((Boolean)requestParams.get("isUserSummaryReportFlag")) {
                jobj.put("grandTotal", grandtotalAmount);
            }
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public static HashMap<String, Object> getJournalEntryMap(HttpServletRequest request) throws SessionExpiredException {
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put(Constants.start, request.getParameter(Constants.start));
        requestParams.put(Constants.limit, request.getParameter(Constants.limit));
        requestParams.put(Constants.ss, request.getParameter(Constants.ss));
        requestParams.put(JournalEntryConstants.LINKID, request.getParameter(JournalEntryConstants.LINKID));
        requestParams.put(JournalEntryConstants.DELETED, request.getParameter(JournalEntryConstants.DELETED));
        requestParams.put(JournalEntryConstants.NONDELETED, request.getParameter(JournalEntryConstants.NONDELETED));
        requestParams.put(CCConstants.REQ_costCenterId, request.getParameter(CCConstants.REQ_costCenterId));
        requestParams.put("userid", (request.getParameter("userid") == null) ? "" :request.getParameter("userid").trim());
        requestParams.put("isUserSummaryReportFlag", (request.getParameter("isUserSummaryReportFlag") == null)? false : true);
        requestParams.put(Constants.isRepeatedFlag, request.getParameter(Constants.isRepeatedFlag));
        requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
        requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
        requestParams.put(Constants.Acc_Search_Json, request.getParameter(Constants.Acc_Search_Json));
        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
        requestParams.put(Constants.moduleid, request.getParameter(Constants.moduleid));
        requestParams.put("isForReport", "report".equals(request.getParameter("dtype")) ? true : false);
        requestParams.put("CashAndInvoice", Boolean.FALSE.parseBoolean(String.valueOf(request.getParameter("CashAndInvoice"))));
        requestParams.put("pendingFlag", request.getParameter("pendingApproval"));
        requestParams.put("browsertz", !StringUtil.isNullOrEmpty(sessionHandlerImpl.getBrowserTZ(request)) ? sessionHandlerImpl.getBrowserTZ(request) : "");  //Browser Specific Timezone For Custom Date
        return requestParams;
    }

    

    public Map<String, Object> exportJournalEntryMap(HttpServletRequest request, HttpServletResponse response, JSONObject jobj) {
        Map<String, Object> parameterMap = new HashMap<String, Object>();
        try {
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject compresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) compresult.getEntityList().get(0);
            KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
            List<JournalEntryReportDTO> jeRptList = new ArrayList<JournalEntryReportDTO>();
            System.out.println("\n\n Export Journal Entry : Map Exception line \n\n");
            int templateflag = (Integer) jobj.get("templateflag"), typeValue = 0;
            System.out.println("\n\n Export Journal Entry : Map Exception line Done \n\n");
            JSONArray store = jobj.getJSONArray(Constants.RES_data);
            boolean isLetterHead = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isLetterHead"))) {
                isLetterHead = Boolean.parseBoolean((String) request.getParameter("isLetterHead"));
            }

            String refno = "", entryDate = "", journalEntryId = "";
            double total = 0, debitTotal = 0, creditTotal = 0;
            for (int i = 0; i < store.length(); i++) {
                JSONObject temp = store.getJSONObject(i);
                typeValue = temp.optInt("journalentrytype", 0);
                journalEntryId = temp.optString("journalentryid");
                JournalEntryReportDTO jeRpt = new JournalEntryReportDTO();
                jeRpt.setEntryNumber(temp.optString("entryno", ""));
                refno = temp.optString("entryno", "");
                System.out.println(temp.optString("entryno", ""));
                jeRpt.setEntryDate(temp.optString("entrydateinuserformat", ""));
                entryDate = temp.optString("entrydate", "");
                jeRpt.setTransactionID(temp.optString("transactionID", ""));
                jeRpt.setTransactionDetails(temp.optString("transactionDetails", ""));
                jeRpt.setMemo(temp.optString("memo", ""));
                jeRpt.setAccountName(temp.optString("accountName", ""));
                jeRpt.setAccountCode(temp.optString("accountCode", ""));
                jeRpt.setProject(temp.optString("project", ""));
                jeRpt.setReference(temp.optString("reference", ""));
                jeRpt.setCreatedby(temp.optString("createdby", ""));
                jeRpt.setJeapprover(temp.optString("jeapprover", ""));
                jeRpt.setCreditAmount(temp.optDouble("creditamountintransactioncurrency", 0.0));
                jeRpt.setCurrencyCode(accCommonTablesDAO.getCustomCurrencyCode(temp.optString("currencycode", ""),companyid));
                jeRpt.setExchangeRate(temp.optString("exchangerate", ""));
                jeRpt.setDebitAmountInBase(temp.optDouble("debitAmount", 0.0));
                jeRpt.setCreditAmountInBase(temp.optDouble("creditAmount", 0.0));
                creditTotal += temp.optDouble("creditAmount", 0.0);
                jeRpt.setDebitAmount(temp.optDouble("debitamountintransactioncurrency", 0.0));
                debitTotal += temp.optDouble("debitAmount", 0.0);
                jeRpt.setDescription(temp.optString("description", ""));
                jeRpt.setClass_field(temp.optString("class_field", ""));
                jeRpt.setCustomField(temp.optString("optionalfield", ""));
                jeRpt.setBank(temp.optString("bank", ""));
                jeRpt.setCheque(temp.optString("cheque", ""));
                 
                if (templateflag == Constants.Monzone_templateflag) {
                    jeRpt.setClass_field(temp.optString("Custom_Class", ""));
                } else if (templateflag == Constants.PrimePartners_templateflag) {
                    jeRpt.setCustomFiled1(temp.optString("Custom_CS Or CF", ""));
                    jeRpt.setCustomFiled2(temp.optString("Custom_Onshore / Offshore", ""));
                    jeRpt.setCustomFiled3(temp.optString("Custom_Project", ""));
                }

                jeRptList.add(jeRpt);
            }

            KwlReturnObject objResults = accountingHandlerDAOobj.getObject(JournalEntry.class.getName(), journalEntryId);
            JournalEntry jE = (JournalEntry) objResults.getEntityList().get(0);
            String acc_code = jE.getPaymentMethod() != null ? jE.getPaymentMethod().getAccount().getAcccode() : "";
            acc_code += "        ";
            String acc_name = jE.getPaymentMethod() != null ? jE.getPaymentMethod().getAccount().getName() : "";
            int account = jE.getPaymentMethod() != null ? jE.getPaymentMethod().getAccount().getAccounttype() : 0;
            String acc_type = "";
            if (account == PaymentMethod.TYPE_BANK) {
                acc_type = "Bank";
            } else if (account == PaymentMethod.TYPE_CASH) {
                acc_type = "Cash";
            } else {
                acc_type = "Card";
            }
           
            if (typeValue == 3) {
                total = creditTotal >= debitTotal ? creditTotal - debitTotal : debitTotal - creditTotal;
            } else {
                total = creditTotal;
            }
            String totalStr = authHandler.formattedCommaSeparatedAmount(total, companyid);

            JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(jeRptList);
            parameterMap.put("datasource", jrBeanCollectionDataSource);
            String symbol = "";
            try {
                symbol = new Character((char) Integer.parseInt(currency.getHtmlcode(), 16)).toString();
            } catch (Exception e) {
                symbol = currency.getHtmlcode();
            }
            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            parameterMap.put("imagePath", fileName1);
            String custmSurrSymbol = accCommonTablesDAO.getCustomCurrencySymbol(currency.getSymbol(), companyid);
            parameterMap.put("CURRENCY_NAME",custmSurrSymbol.equals(currency.getSymbol())?symbol:custmSurrSymbol);
            File f = new File(fileName1);
            if (f.exists() && !f.isDirectory()) {    //-----------------------(Ref:ERP-10106)If the logo is Uploded Show Company Template logo else Show default Deskera Logo
                parameterMap.put("COMPANY_LOGO_IMAGE_PATH", fileName1);
                parameterMap.put("isLetterHead", isLetterHead);
            } else {
                parameterMap.put("COMPANY_LOGO_IMAGE_PATH", ProfileImageServlet.getProfileImagePath(request, true, null));
                parameterMap.put("isLetterHead", false);
            }

            String rDate = authHandler.getDateFormatter(request).format(new Date()); //This formatter used to show User's timezone date for Report Generation Date.
            String reportDate = df.format(authHandler.getDateOnlyFormat().parse(rDate));
            parameterMap.put("reportDate", reportDate);//refer ERP-13273
            parameterMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            parameterMap.put("COMPANY_NAME", company.getCompanyName());
            parameterMap.put("COMPANY_PHONE", company.getPhoneNumber() == null ? "" : company.getPhoneNumber());
            parameterMap.put("COMPANY_FAX", company.getFaxNumber() == null ? "" : company.getFaxNumber());
            parameterMap.put("COMPANY_EMAIL", company.getEmailID() == null ? "" : company.getEmailID());
            parameterMap.put("no", refno);
            parameterMap.put("date", entryDate);
            parameterMap.put("total", totalStr);
            parameterMap.put("typeValue", typeValue);
            parameterMap.put("cashBankAccount", acc_code + acc_type + " - " + acc_name);
            int type = request.getParameter("typeforPrime") != null ? Integer.parseInt(request.getParameter("typeforPrime")) : 0;
            String title = "GL Voucher";
            if (type == 1) {
                title = "GL Payment Voucher";
            } else if (type == 2) {
                title = "GL Receipt Voucher";
            }
            parameterMap.put("title", title);

        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }catch (ParseException px) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, px);
        }

        return parameterMap;
    }

    public Map<String, Object> exportJournalEntryForRightSpace(HttpServletRequest request, HttpServletResponse response, JSONObject jobj) {
        Map<String, Object> parameterMap = new HashMap<String, Object>();
        try {

            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject compresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) compresult.getEntityList().get(0);
            List<JournalEntryReportDTO> jeRptList = new ArrayList<JournalEntryReportDTO>();
            int templateflag = (Integer) jobj.get("templateflag");
            JSONArray store = jobj.getJSONArray(Constants.RES_data);

            String refno = "", entryDate = "", remark = "", approvedBy = "", postedBy = "";

            for (int i = 0; i < store.length(); i++) {
                JSONObject temp = store.getJSONObject(i);
                JournalEntryReportDTO jeRpt = new JournalEntryReportDTO();
                refno = temp.optString("entryno", "");
                jeRpt.setEntryNumber((i + 1) + "");
                jeRpt.setEntryDate(temp.optString("entrydate", ""));
                entryDate = temp.optString("entrydate", "");
                jeRpt.setTransactionID(temp.optString("transactionID", ""));
                jeRpt.setTransactionDetails(temp.optString("transactionDetails", ""));
                jeRpt.setMemo(temp.optString("memo", ""));
                remark = temp.optString("memo", "");
                jeRpt.setAccountName(temp.optString("accountName", ""));
                jeRpt.setAccountCode(temp.optString("accountCode", ""));
                jeRpt.setProject(temp.optString("project", ""));
                jeRpt.setReference(temp.optString("reference", ""));
                jeRpt.setCreatedby(temp.optString("createdby", ""));
                postedBy = temp.optString("createdby", "");
                jeRpt.setJeapprover(temp.optString("jeapprover", ""));
                approvedBy = temp.optString("jeapprover", "");
                jeRpt.setCreditAmount(temp.optDouble("creditAmount", 0));
                jeRpt.setDebitAmount(temp.optDouble("debitAmount", 0));
                jeRpt.setDescription(temp.optString("description", ""));
                jeRpt.setClass_field(temp.optString("class_field", ""));
                jeRptList.add(jeRpt);
            }

            JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(jeRptList);
            parameterMap.put("datasource", jrBeanCollectionDataSource);
            String symbol = "";
            try {
                symbol = new Character((char) Integer.parseInt(currency.getHtmlcode(), 16)).toString();
            } catch (Exception e) {
                symbol = currency.getHtmlcode();
            }
            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            parameterMap.put("imagePath", fileName1);
            parameterMap.put("CURRENCY_NAME", symbol);
            if (templateflag == Constants.vhqpost_tempalteflag) {
                parameterMap.put("COMPANY_LOGO_IMAGE_PATH", fileName1);
            } else {
                parameterMap.put("COMPANY_LOGO_IMAGE_PATH", ProfileImageServlet.getProfileImagePath(request, true, null));
            }
            parameterMap.put("COMPANY_ADDRESS", company.getAddress() != null ? StringUtil.serverHTMLStripper(company.getAddress()) : "");
            parameterMap.put("COMPANY_NAME", company.getCompanyName());
            parameterMap.put("COMPANY_PHONE", company.getPhoneNumber() == null ? "" : company.getPhoneNumber());
            parameterMap.put("COMPANY_FAX", company.getFaxNumber() == null ? "" : company.getFaxNumber());
            parameterMap.put("COMPANY_EMAIL", company.getEmailID() == null ? "" : company.getEmailID());
            parameterMap.put("refNo", refno);
            parameterMap.put("entryDate", entryDate);
            parameterMap.put("remark", remark);
            parameterMap.put("postedBy", postedBy);
            parameterMap.put("approvedBy", approvedBy);

            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);
            ArrayList datePojoList = new ArrayList();
            OnlyDatePojo datePojo = new OnlyDatePojo();
            datePojo.setDate(entryDate);
            datePojoList.add(datePojo);

            response.setHeader("Content-Disposition", "attachment;filename=" + "Journal_Entry_Report.pdf");

            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/RightSpaceJournalVoucher.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameterMap, beanColDataSource);

            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();

        } catch (ServiceException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }

        return parameterMap;
    }
 public void exportSingleJournalEntry(HttpServletRequest request, HttpServletResponse response, Map<String, Object> parameterMap) {
         
        try {

            JRBeanCollectionDataSource jrBeanCollectionDataSource =  (JRBeanCollectionDataSource) parameterMap.get("datasource");
            response.setHeader("Content-Disposition", "attachment;filename=" + "Journal_Entry_Report.pdf");
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BuildmateJournalVoucher.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
          
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameterMap, jrBeanCollectionDataSource);

            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
      
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }

         
    }
    public Map<String, Object> exportJournalEntryForMonzone(HttpServletRequest request, HttpServletResponse response, Map<String, Object> parameterMap) {
        try {
            ArrayList datePojoList = new ArrayList();
            OnlyDatePojo datePojo = new OnlyDatePojo();
            datePojo.setDate("dummyDate");
            datePojoList.add(datePojo);

            response.setHeader("Content-Disposition", "attachment;filename=" + "Journal_Entry_Report.pdf");

            InputStream inputStreamSubReport = null;
            InputStream inputStream = null;
            if ((Integer) parameterMap.get("typeValue") != 3) {
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneJournalVoucher_subreport.jrxml");
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneJournalVoucher.jrxml");
            } else {
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneContraVoucher_subreport.jrxml");
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneContraVoucher.jrxml");
            }
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            parameterMap.put("SubReport", jasperReportSubReport);

            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameterMap, beanColDataSource);

            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();

        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }

        return parameterMap;
    }

    public Map<String, Object> exportJournalEntryForBestSafety(HttpServletRequest request, HttpServletResponse response, JSONObject jobj) {
        Map<String, Object> parameterMap = new HashMap<String, Object>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            List<JournalEntryReportDTO> jeRptList = new ArrayList<JournalEntryReportDTO>();
            JSONArray store = jobj.getJSONArray(Constants.RES_data);

            String jfolio = "";
            String no = "";
            String being = "";
            String authorisedby = "";
            String accountserdby = "";
            String entrydate = "";

            for (int i = 0; i < store.length(); i++) {
                JSONObject temp = store.getJSONObject(i);
                JournalEntryReportDTO jeRpt = new JournalEntryReportDTO();

                no = temp.optString("Custom_No", "");
                authorisedby = temp.optString("Custom_Authorised by", "");
                jfolio = temp.optString("entryno", "");
                being = temp.optString("memo", "");
                accountserdby = temp.optString("createdby", "");
                entrydate = temp.optString("entrydate", "");

                jeRpt.setAccountName(temp.optString("accountName", ""));
                jeRpt.setCreditAmount(temp.optDouble("creditAmount", 0.0));
                jeRpt.setDebitAmount(temp.optDouble("debitAmount", 0.0));
                jeRptList.add(jeRpt);
            }

            JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(jeRptList);
            parameterMap.put("JournalEntryReportDTO", jrBeanCollectionDataSource);

            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            parameterMap.put("Logo_Path", fileName1);

            parameterMap.put("jfolio", jfolio);
            parameterMap.put("authorisedby", authorisedby);
            parameterMap.put("no", no);
            parameterMap.put("being", being);
            parameterMap.put("accountserdby", accountserdby);
            parameterMap.put("date", entrydate);

            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);
            ArrayList datePojoList = new ArrayList();
            OnlyDatePojo datePojo = new OnlyDatePojo();
            Date date = new Date();
            datePojo.setDate(df.format(date));
            datePojoList.add(datePojo);

            response.setHeader("Content-Disposition", "attachment;filename=" + "Journal_Entry_Report.pdf");

            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BestSafetyJournalVoucher.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameterMap, beanColDataSource);

            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }

        return parameterMap;
    }

    public ModelAndView exportJournalEntry(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONObject reqparams=new JSONObject();
        JSONArray DataJArr = new JSONArray();
        String view = "jsonView_ex";
        ModelAndView mav = null;
        try {            
            JSONObject jsonObject = StringUtil.convertRequestToJsonObject(request);
            String fileType = request.getParameter("filetype");
            System.out.println("\n\n Export Journal Entry : Start \n\n");
            int templateflag = StringUtil.isNullOrEmpty(request.getParameter("templateflag")) ? 0 : Integer.parseInt(request.getParameter("templateflag"));
            HashMap<String, Object> requestParams = getJournalEntryMap(request);
            requestParams.put("exportQuery", true);
            if (request.getParameter("groupid") != null && Boolean.parseBoolean(request.getParameter("groupid"))) {
                requestParams.put("groupid", true);
            }
            if (!StringUtil.isNullOrEmpty(sessionHandlerImpl.getBrowserTZ(request))) {
                requestParams.put("browsertz", sessionHandlerImpl.getBrowserTZ(request));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("ss"))) {
                requestParams.put("ss", StringUtil.DecodeText(request.getParameter("ss").replaceAll("%", "%25").replaceAll("\\+", "%2B").trim()));
            }
            KwlReturnObject result = null;
            KwlReturnObject result1 = null;
            KwlReturnObject result2 = null;
            boolean isCustomerReport = !StringUtil.isNullOrEmpty(request.getParameter("isCustomerReport")) ? (Boolean.parseBoolean(request.getParameter("isCustomerReport"))) : false;
            if (isCustomerReport) {
                String customer = !StringUtil.isNullOrEmpty(request.getParameter("customer")) ? ((request.getParameter("customer"))) : "All";
                requestParams.put("isCustomerReport", isCustomerReport);
                requestParams.put("customer", customer);
            }
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            boolean Landscape_Orientation = request.getParameter("Landscape_Orientation") != null ? Boolean.parseBoolean(request.getParameter("Landscape_Orientation")) : false;
            boolean pendingFlag = request.getParameter("pendingFlag") != null ? Boolean.parseBoolean(request.getParameter("pendingFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            String selectedIds = request.getParameter("selectedIds") != null ? request.getParameter("selectedIds") : "";
            boolean ExportAllflag = request.getParameter("ExportAll") != null ? Boolean.parseBoolean(request.getParameter("ExportAll")) : false;
            requestParams.put("selectedIds", selectedIds);
            requestParams.put("pendingFlag", pendingFlag);// to export Pending records from pending Journal entry Tab  ERP-4859
            if(fileType.equals("xls")){
             request.setAttribute("isSummaryXls", true);
            }
            
            String companyid = "";
            if (consolidateFlag) {
                requestParams.put(Constants.start, "");
                requestParams.put(Constants.limit, "");
            }
            boolean threadflag = request.getParameter("threadflag") != null ? Boolean.parseBoolean(request.getParameter("threadflag")) : false;
            String type = request.getParameter("type");
            String cashtype = request.getParameter("cashtype");
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            requestParams.put("dateformat", df);
            requestParams.put("userdateformat", userdf);
            requestParams.put("type", type);
            requestParams.put("companyids", companyids);
            requestParams.put("gcurrencyid", gcurrencyid);
            requestParams.put("cashtype", cashtype);
            requestParams.put("templateflag", templateflag);
            requestParams.put("isJEReport", true);
            if (threadflag ) {
                /*
                Export Xls file in Thread
                */
                journalEntryExport.add(jsonObject);
                journalEntryExport.add(requestParams);
                Thread t = new Thread(journalEntryExport);
                t.setPriority(8);
                t.start();
                mav = new ModelAndView(view, "model", jobj.toString());
            } else {
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);

                //boolean withoutinventory = request.getParameter("withoutinventory").equals("true")?true:false;
                //requestParams.put("withoutinventory", withoutinventory);
                if (request.getParameter("cashtype") != null) {
                    String reporttype = request.getParameter("cashtype").toString();
                    if (StringUtil.equal(JournalEntryConstants.CashReceiptJournal, reporttype)) {
                        requestParams.put(JournalEntryConstants.ReportClass, JournalEntryConstants.Receipt);
                        result1 = accJournalEntryobj.getJournalEntryForReports(requestParams);
                        requestParams.put(JournalEntryConstants.ReportClass, JournalEntryConstants.ASSET);
                        requestParams.put(JournalEntryConstants.ReportType, reporttype);
                        result2 = accJournalEntryobj.getJournalEntryForReports(requestParams);
                        List jeList1 = result1.getEntityList();
                        List jeList2 = result2.getEntityList();
                        List jeList3 = new ArrayList();
                        jeList3.addAll(jeList1);
                        jeList3.addAll(jeList2);
                        Collections.sort(jeList3, new ExportJEComparator());
                        result = new KwlReturnObject(true, "", null, jeList3, result1.getRecordTotalCount() + result2.getRecordTotalCount());
                    } else if (StringUtil.equal(JournalEntryConstants.CashDisbursementJournal, reporttype)) {
                        requestParams.put(JournalEntryConstants.ReportClass, JournalEntryConstants.Payment);
                        result1 = accJournalEntryobj.getJournalEntryForReports(requestParams);
                        requestParams.put(JournalEntryConstants.ReportClass, JournalEntryConstants.ASSET);
                        requestParams.put(JournalEntryConstants.ReportType, reporttype);
                        result2 = accJournalEntryobj.getJournalEntryForReports(requestParams);
                        List jeList1 = result1.getEntityList();
                        List jeList2 = result2.getEntityList();
                        List jeList3 = new ArrayList();
                        jeList3.addAll(jeList1);
                        jeList3.addAll(jeList2);
                        Collections.sort(jeList3, new ExportJEComparator());
                        result = new KwlReturnObject(true, "", null, jeList3, result1.getRecordTotalCount() + result2.getRecordTotalCount());
                    } else if (StringUtil.equal(JournalEntryConstants.SalesReceivableJournal, reporttype)) {
                        requestParams.put(JournalEntryConstants.ReportClass, JournalEntryConstants.Invoice);
                        result = accJournalEntryobj.getJournalEntryForReports(requestParams);
                    } else if (StringUtil.equal(JournalEntryConstants.PurchasePayableJournal, reporttype)) {
                        requestParams.put(JournalEntryConstants.ReportClass, JournalEntryConstants.GoodsReceipt);
                        result = accJournalEntryobj.getJournalEntryForReports(requestParams);
                    } else if (StringUtil.equal(JournalEntryConstants.PartyJournal, reporttype)) {
                        requestParams.put(CCConstants.isPartyJE, CCConstants.isPartyJE);
                        requestParams.put(Constants.Journal_Entry_Type, Constants.Party_Journal_Entry); //ERP-40793 type filter not working in export case
                        result = accJournalEntryobj.getJournalEntry(requestParams);
                    } else if (StringUtil.equal(JournalEntryConstants.fundTransfer, reporttype)) {
                        requestParams.put(Constants.Journal_Entry_Type,Constants.FundTransfer_Journal_Entry);   //ERP-40793 type filter not working in export case
                        result = accJournalEntryobj.getJournalEntry(requestParams);
                    } else if(StringUtil.equal(JournalEntryConstants.NormalJournal, reporttype)){       //ERP-40793 type filter not working in export case
                        requestParams.put(JournalEntryConstants.ReportClass, JournalEntryConstants.NormalJournal);
                        requestParams.put(Constants.Journal_Entry_Type, Constants.Normal_Journal_Entry);
                        result = accJournalEntryobj.getJournalEntry(requestParams);
                    }else {
                        result = accJournalEntryobj.getJournalEntry(requestParams);
                    }
                } else {
                    result = accJournalEntryobj.getJournalEntry(requestParams);
                }
                if (!ExportAllflag) {
                    jobj = accFinancialReportsService.getJournalEntryJsonForExportMerged(requestParams, result.getEntityList(), DataJArr, templateflag);
                }
            }

            if (ExportAllflag) {
                ExportAllRecordCsvAndXls(request, response, requestParams, result, fileType);
            } else {
                jobj.put(Constants.RES_data, DataJArr);
                jobj.put("templateflag", templateflag);
            }

            if (StringUtil.equal(fileType, "pdf") && !isCustomerReport) {
                Map<String, Object> paramMap = null;
                if (templateflag == Constants.BestSafety_templateflag) {
                    paramMap = exportJournalEntryForBestSafety(request, response, jobj);
                    return new ModelAndView("", "model", new JSONObject().toString());    //empty json object to return
                } else {
                    System.out.println("\n\n Export Journal Entry : Map \n\n");
                    paramMap = exportJournalEntryMap(request, response, jobj);
                }

                if (templateflag == Constants.RightSpace_templateflag || templateflag == Constants.RightWork_templateflag) {
                    paramMap = exportJournalEntryForRightSpace(request, response, jobj);
                    return new ModelAndView("", "model", new JSONObject().toString());    //empty json object to return
                } else if (templateflag == Constants.Monzone_templateflag) {
                    paramMap = exportJournalEntryForMonzone(request, response, paramMap);
                    return new ModelAndView("", "model", new JSONObject().toString());    //empty json object to return
                } else if (templateflag == Constants.BIT_templateflag) {
                    mav = new ModelAndView("BITpdfJournalEntry", paramMap);
                } else if ((templateflag == Constants.TID_Subdomain_templateflag || templateflag == Constants.TIDR_Subdomain_templateflag || templateflag == Constants.CUSCADEN_Subdomain_templateflag || templateflag == Constants.TCD_Subdomain_templateflag || templateflag == Constants.CAMBORNE_Subdomain_templateflag || templateflag == Constants.MITSUI_Subdomain_templateflag) && !Landscape_Orientation) {
                    mav = new ModelAndView("TIDJournalEntry", paramMap);
                } else if ((templateflag == Constants.vhqpost_tempalteflag)) {
                    if (Landscape_Orientation) {
                        mav = new ModelAndView("VHQJE_Landscape", paramMap);
                    } else {
                        mav = new ModelAndView("VHQJournalEntry", paramMap);
                    }
                } else if (templateflag == Constants.Guan_Chong_templateflag && !Landscape_Orientation) {
                    mav = new ModelAndView("GCJournalEntry", paramMap);
//                    exportGuanChongReport(request, response, jobj);   //Commented as per the discussion with refer to ticket ERP-4153
//                    return new ModelAndView("", "model", new JSONObject().toString());    //empty json object to return
                } else if (templateflag == Constants.BuildMate_templateflag && !Landscape_Orientation) {
                     paramMap.put("title", "Journal Voucher");
                     exportSingleJournalEntry(request, response, paramMap);// Use instead of Bean creaton for Views
                     return new ModelAndView("", "model", new JSONObject().toString());    
                }else if (Landscape_Orientation) {
                    if (templateflag >= Constants.LandPlus_templateflag && templateflag <= Constants.LandPlus_Mobility_templateflag) {
                        mav = new ModelAndView("landPlusPdfJournalEntryLandscape", paramMap);
                    } else if (templateflag == Constants.sats_templateflag) {
                        mav = new ModelAndView("satsPdfJournalEntryLandscape", paramMap);
                    } else if (templateflag == Constants.PrimePartners_templateflag) {
                        mav = new ModelAndView("primePartnersJournalEntryLandscape", paramMap);
                    } else {
                        mav = new ModelAndView("pdfJournalEntryLandscape", paramMap);
                    }
                } else {
                    if (templateflag >= Constants.LandPlus_templateflag && templateflag <=Constants.LandPlus_Mobility_templateflag) {
                        mav = new ModelAndView("landPlusPdfJournalEntry", paramMap);
                    } else if (templateflag == Constants.sats_templateflag) {
                        mav = new ModelAndView("satsPdfJournalEntry", paramMap);
                    } else {
                        mav = new ModelAndView("pdfJournalEntry", paramMap);
                    }
                }
            } else {
                if (StringUtil.equal(fileType, "print")) {
                    String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                    jobj.put("GenerateDate", GenerateDate);
                    view = "jsonView-empty";
                }

                System.out.println("\n\n Export Journal Entry : Process Request \n\n");
                if (!ExportAllflag) {
                    exportDaoObj.processRequestNew(request, response, jobj);
                }
                mav = new ModelAndView(view, "model", jobj.toString()); 

            }
        }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }

        return mav;
    }

    public void ExportAllRecordCsvAndXls(HttpServletRequest request, HttpServletResponse response, HashMap<String, Object> requestParams, KwlReturnObject result, String fileType) throws IOException {
        FileOutputStream outputStream = null;
        FileInputStream inputStream = null;
        ByteArrayOutputStream os = null;
        Workbook wrb = null;
        Sheet sht = null;
        ByteArrayOutputStream bos = null;

        File file = null;
        try {
            SimpleDateFormat sdfTemp = new SimpleDateFormat("ddMMyyyy_hhmmssaa");
            int templateflag = StringUtil.isNullOrEmpty(request.getParameter("templateflag")) ? 0 : Integer.parseInt(request.getParameter("templateflag"));
            Date requestTime = new Date();
            String filename = "Journal_Entry_Report" + (sdfTemp.format(requestTime)).toString() + "_v1." + fileType;
            outputStream = new FileOutputStream(filename, true);
            boolean headerflag = true;
            if (StringUtil.equal(fileType, "xls")) {
                wrb = new HSSFWorkbook();
                sht = wrb.createSheet("Sheet-1");
            }
            for (int i = 0; i < result.getRecordTotalCount(); i = i + Constants.Limitrecordforcsv) {
                JSONArray DataJArr1 = new JSONArray();
                JSONObject jobj1 = new JSONObject();
                requestParams.put(Constants.start, Integer.toString(i));
                int count = i + Constants.Limitrecordforcsv < result.getRecordTotalCount() ? i + Constants.Limitrecordforcsv : result.getRecordTotalCount();
                List list = result.getEntityList().subList(i, count);
                jobj1 = accFinancialReportsService.getJournalEntryJsonForExportMerged(requestParams, list, DataJArr1, templateflag);
                jobj1.put(Constants.RES_data, DataJArr1);
                if (StringUtil.equal(fileType, "csv")) {
                    StringBuilder reportSB = JECsvFile(request, response, jobj1, headerflag);
                    headerflag = false;
                    outputStream.write(reportSB.toString().getBytes());
                    reportSB.setLength(0);
                } else if (StringUtil.equal(fileType, "xls") || StringUtil.equal(fileType, "xlsx")) {
                    JEExcelFile(request, response, jobj1, sht, wrb, headerflag ? i : i + 1, headerflag);
                    headerflag = false;
                }

            }
            if (StringUtil.equal(fileType, "xls")) {
//                outputStream.write(wb.getBytes());
                bos = new ByteArrayOutputStream();
                wrb.write(bos);
                outputStream.write(bos.toByteArray());
            }

            os = new ByteArrayOutputStream();
            file = new File(filename);
            inputStream = new FileInputStream(file);
            byte[] bytes = new byte[(int) file.length()];
            int readCount = 0;
            while ((readCount = inputStream.read(bytes)) > 0) {
                os.write(bytes);
            }
            if (StringUtil.equal(fileType, "csv")) {
                response.setHeader("Content-Disposition", "attachment; filename=\"Journal_Entry_Report_v1.csv\"");
            } else {
                response.setHeader("Content-Disposition", "attachment; filename=\"Journal_Entry_Report(Summary)_v1.xls\"");
            }
            response.setContentType("application/octet-stream");
            //response.setContentType("application/vnd.ms-excel");
            //response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");  //For Excel-2007 & above
            response.setContentLength(os.size());
            response.getOutputStream().write(os.toByteArray());
            response.getOutputStream().flush();
            response.getOutputStream().close();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (inputStream != null) {
                inputStream.close();
            }
            if (outputStream != null) {
                outputStream.flush();
                outputStream.close();
            }
            if (os != null) {
                os.flush();
                os.close();
            }

            if (file != null) {
                file.delete();
            }

        }
    }

    public StringBuilder JECsvFile(HttpServletRequest request, HttpServletResponse response, JSONObject jobj, boolean hflag) throws ServiceException, SessionExpiredException, JSONException {
        StringBuilder reportSB = new StringBuilder();
        try {

            JSONArray repArr = jobj.getJSONArray(Constants.RES_data);
            if (hflag) {
                String currencyid = sessionHandlerImpl.getCurrencyID(request);
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                String symbol = "";
                try {
                    symbol = new Character((char) Integer.parseInt(currency.getHtmlcode(), 16)).toString();
                } catch (Exception e) {
                    symbol = currency.getHtmlcode();
                }
                reportSB.append("\"Entry Date\",\"Entry Number\",\"Transaction ID\",\"Transaction Details\",\"Memo\",\"Account Name\",\"Currency\",\"Debit Amount\",\"Credit Amount\",\"Debit Amount("+symbol+")\",\"Credit Amount("+symbol+")\",\"Description\"\n");
            }
            if (request.getParameter("filetype").equals("csv")) {
                for (int t = 0; t < repArr.length(); t++) {
                    JSONObject temp = repArr.getJSONObject(t);

                    reportSB.append(StringUtil.isNullOrEmpty(temp.getString("entrydate")) ? "," : "\"" + temp.getString("entrydate") + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(temp.getString("entryno")) ? "," : "\"" + temp.getString("entryno") + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(temp.optString("transactionID", "")) ? "," : "\"" + temp.getString("transactionID") + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(temp.optString("transactionDetails", "")) ? "," : "\"" + temp.getString("transactionDetails") + "\",");
                    if (temp.has("memo")) {
                        reportSB.append(StringUtil.isNullOrEmpty(temp.getString("memo")) ? "," : "\"" + temp.getString("memo") + "\",");
                    }
                    reportSB.append(StringUtil.isNullOrEmpty(temp.getString("accountName")) ? "," : "\"" + temp.getString("accountName") + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(temp.getString("currencycode")) ? "," : "\"" + temp.getString("currencycode") + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(temp.getString("debitamountintransactioncurrency")) ? "," : "\"" + temp.getString("debitamountintransactioncurrency") + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(temp.getString("creditamountintransactioncurrency")) ? "," : "\"" + temp.getString("creditamountintransactioncurrency") + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(temp.getString("debitAmount")) ? "," : "\"" + temp.getString("debitAmount") + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(temp.getString("creditAmount")) ? "," : "\"" + temp.getString("creditAmount") + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(temp.getString("description")) ?"\"\"\n" : "\"" + temp.getString("description") + "\"\n");
                }

            }
        } catch (Exception ex) {
            ex.printStackTrace();

        }
        return reportSB;
    }

    public Workbook JEExcelFile(HttpServletRequest request, HttpServletResponse response, JSONObject jobj, Sheet sheet, Workbook wrb, int rownum, boolean hflag) throws ServiceException, SessionExpiredException, JSONException {
        Cell cell = null;
        try {
            int cellnum = 0;    //Cell count
            //Create new cell for Company Name
            String companyName = sessionHandlerImpl.getCompanyName(request);
            Row compnayHeaderRow = sheet.createRow(rownum++);
            cell = compnayHeaderRow.createCell(cellnum++);
            cell.setCellValue("Company Name");
            cell = compnayHeaderRow.createCell(cellnum++);
            ExtraCompanyPreferences extrapref = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
                if (extrapref != null && extrapref.isIsMultiEntity()) {
                    String searchjson = request.getParameter(Constants.Acc_Search_Json);
                    boolean ismultientity=false;
                    boolean ismultientityfieldpresent=false;
                    StringBuilder appendimensionString = new StringBuilder();
                    if (!StringUtil.isNullOrEmpty(searchjson) && !StringUtil.equal(searchjson, "undefined")) {
                       
                            searchjson=StringUtil.DecodeText(request.getParameter(Constants.Acc_Search_Json));
                        
                        JSONObject json = new JSONObject(searchjson);
                        if (json.has("root")) {
                            JSONArray advSearch = json.getJSONArray("root");
//                            if(advSearch.length()==1){
                            for (int i = 0; i < advSearch.length(); i++) {
                                JSONObject dimensionjson = advSearch.getJSONObject(i);
                                ismultientity= dimensionjson.optBoolean(Constants.isMultiEntity, false);
                                    String searchTextArray[] = dimensionjson.optString("searchText").split(",");
                                    if (searchTextArray.length > 0 && dimensionjson.optInt(Constants.fieldtype,0) == 4 && dimensionjson.optBoolean("iscustomfield",true)==false && ismultientity) {//for dimension only
                                        ismultientityfieldpresent=true;
                                        for (String searchTextvalue : searchTextArray) {
                                            FieldComboData fieldcombodata=null;
                                            KwlReturnObject fieldcombodataObj = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(),searchTextvalue);
                                             if (fieldcombodataObj != null && !fieldcombodataObj.getEntityList().isEmpty() && fieldcombodataObj.getEntityList().get(0) != null) {
                                                  fieldcombodata = (FieldComboData) fieldcombodataObj.getEntityList().get(0);
                                                  if(!StringUtil.isNullOrEmpty(fieldcombodata.getItemdescription())){
                                                      appendimensionString.append(fieldcombodata.getItemdescription().concat(","));
                                                   }else{
                                                      appendimensionString.append(fieldcombodata.getValue().concat(","));  
                                                  }
                                             }
                                        }//end of for of SearchTextValue
                                        break;
                                    }//end of searchTextArray
                            }//end of for loop of advSearch
//                        }
                        }//end of root
                    }               
                    if (ismultientityfieldpresent) {//this will only be applicable for multientity
                            String dimensionvalue = appendimensionString.toString();
                            companyName = dimensionvalue.substring(0, dimensionvalue.length() - 1);
                    }
                }
            }// end of extrapreferences
            cell.setCellValue(companyName);

            //Create new cell for Report Title
            cellnum = 0;
            String reporttitle = request.getParameter("filename");
            Row reportTitleHeaderRow = sheet.createRow(rownum++);
            cell = reportTitleHeaderRow.createCell(cellnum++);
            cell.setCellValue("Report Title");
            cell = reportTitleHeaderRow.createCell(cellnum++);
            cell.setCellValue(reporttitle);

            //Create new cell for Export Date
            cellnum = 0;
            String exportdate = authHandler.getDateFormatter(request).format(new Date());
            Row exportDateHeaderRow = sheet.createRow(rownum++);
            cell = exportDateHeaderRow.createCell(cellnum++);
            cell.setCellValue("Export Date");
            cell = exportDateHeaderRow.createCell(cellnum++);
            cell.setCellValue(exportdate);

            //Create new cell for From Date
            cellnum = 0;
            String startdate = "";
            startdate = request.getParameter("startdate");
            Row fromDateHeaderRow = sheet.createRow(rownum++);
            cell = fromDateHeaderRow.createCell(cellnum++);
            cell.setCellValue("From Date");
            cell = fromDateHeaderRow.createCell(cellnum++);
            cell.setCellValue(startdate);

            //Create new cell for To Date
            cellnum = 0;
            String enddate = "";
            enddate = request.getParameter("enddate");
            Row toDateHeaderRow = sheet.createRow(rownum++);
            cell = toDateHeaderRow.createCell(cellnum++);
            cell.setCellValue("To Date");
            cell = toDateHeaderRow.createCell(cellnum++);
            cell.setCellValue(enddate);

            
        /*
         After Appending all rows for filter append search fields rows
         */
        String searchjson = request.getParameter(Constants.Acc_Search_Json);
        if (!StringUtil.isNullOrEmpty(searchjson) && !StringUtil.equal(searchjson, "undefined")) {
          //  try {
                searchjson=StringUtil.DecodeText(request.getParameter(Constants.Acc_Search_Json));
                JSONObject json = new JSONObject(searchjson);
                if (json.has("root")) {
                    JSONArray advSearch = json.getJSONArray("root");
                    for (int i = 0; i < advSearch.length(); i++) {
                        JSONObject dimensionjson = advSearch.getJSONObject(i);
                        String value = null;
                        String header = "";
                        String fieldtype = "";
                        String ModuleName="";
                        fieldtype =StringUtil.DecodeText(dimensionjson.optString("fieldtype", ""));
                        header = StringUtil.DecodeText(dimensionjson.optString("columnheader", ""));
                        ModuleName = StringUtil.DecodeText(dimensionjson.optString("modulename", ""));
                        if (!StringUtil.isNullOrEmpty(ModuleName)) {
                            header += " [" + ModuleName + "]";
                        }
                        if (fieldtype.equalsIgnoreCase("2") || fieldtype.equalsIgnoreCase("3")) {
                            value = StringUtil.DecodeText(dimensionjson.optString("search", ""));
                        } else {
                            value =StringUtil.DecodeText(dimensionjson.optString("combosearch", ""));
                        }
                        if (!StringUtil.isNullOrEmpty(header)) {
                            cellnum = 0;
                             toDateHeaderRow = sheet.createRow(rownum++);
                            cell = toDateHeaderRow.createCell(cellnum++);
                            cell.setCellValue(header);
                            cell = toDateHeaderRow.createCell(cellnum++);
                            cell.setCellValue(value);
                        }
                    }

                }//end of root
            //} catch (UnsupportedEncodingException ex) {
             //   Logger.getLogger(exportMPXDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
            //}
        }
            //Create new cell for BlankRow
            cellnum = 0;
            Row BlankRow = sheet.createRow(rownum++);
            cell = BlankRow.createCell(cellnum++);
            cell.setCellValue("");

            cellnum = 0;
            if(hflag) {
                String symbol = "";
                String currencyid = sessionHandlerImpl.getCurrencyID(request);
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                try {
                    symbol = new Character((char) Integer.parseInt(currency.getHtmlcode(), 16)).toString();
                } catch (Exception e) {
                    symbol = currency.getHtmlcode();
                }
            
                String JEheader[] = {"Entry Date", "Entry Number", "Transaction ID", "Transaction Details", "Memo", "Account Name", "Currency", "Debit Amount", "Credit Amount", "Debit Amount("+symbol+")", "Credit Amount("+symbol+")","Description"};
                Row headerRow = sheet.createRow(rownum++);
                for (int header = 0; header < JEheader.length; header++) {
                    cell = headerRow.createCell(cellnum++);  //Create new cell
                    cell.setCellValue(JEheader[header]);
                }
            }
            JSONArray repArr = jobj.getJSONArray(Constants.RES_data);
            for (int t = 0; t < repArr.length(); t++) {
                JSONObject temp = repArr.getJSONObject(t);
                cellnum = 0;
                Row row = sheet.createRow(rownum++);
                cell = row.createCell(cellnum++);  //Create new cell
                cell.setCellValue(StringUtil.isNullOrEmpty(temp.getString("entrydate")) ? " " : temp.getString("entrydate"));
                cell = row.createCell(cellnum++);
                cell.setCellValue(StringUtil.isNullOrEmpty(temp.getString("entryno")) ? " " : temp.getString("entryno"));
                cell = row.createCell(cellnum++);
                cell.setCellValue(StringUtil.isNullOrEmpty(temp.getString("transactionID")) ? " " : temp.getString("transactionID"));
                cell = row.createCell(cellnum++);
                cell.setCellValue(StringUtil.isNullOrEmpty(temp.getString("transactionDetails")) ? " " : temp.getString("transactionDetails"));
                cell = row.createCell(cellnum++);
                if (temp.has("memo")) {
                    cell.setCellValue(StringUtil.isNullOrEmpty(temp.getString("memo")) ? " " : temp.getString("memo"));
                }
                cell = row.createCell(cellnum++);
                cell.setCellValue(StringUtil.isNullOrEmpty(temp.getString("accountName")) ? " " : temp.getString("accountName"));
                cell = row.createCell(cellnum++);
                cell.setCellValue(StringUtil.isNullOrEmpty(temp.getString("currencycode")) ? " " : temp.getString("currencycode"));
                cell = row.createCell(cellnum++);
                cell.setCellValue(StringUtil.isNullOrEmpty(temp.getString("debitamountintransactioncurrency")) ? " " : temp.getString("debitamountintransactioncurrency"));
                cell = row.createCell(cellnum++);
                cell.setCellValue(StringUtil.isNullOrEmpty(temp.getString("creditamountintransactioncurrency")) ? " " : temp.getString("creditamountintransactioncurrency"));
                cell = row.createCell(cellnum++);
                cell.setCellValue(StringUtil.isNullOrEmpty(temp.getString("debitAmount")) ? " " : temp.getString("debitAmount"));
                cell = row.createCell(cellnum++);
                cell.setCellValue(StringUtil.isNullOrEmpty(temp.getString("creditAmount")) ? " " : temp.getString("creditAmount"));
                cell = row.createCell(cellnum++);
                cell.setCellValue(StringUtil.isNullOrEmpty(temp.getString("description")) ? " " : temp.getString("description"));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return wrb;
    }

    public Map<String, Object> exportGuanChongReport(HttpServletRequest request, HttpServletResponse response, JSONObject jobj) {
        Map<String, Object> parameterMap = new HashMap<String, Object>();
        try {
            List jasperList = new ArrayList();
            String selectedIds = request.getParameter("selectedIds") != null ? request.getParameter("selectedIds") : "";
            String[] ids = selectedIds.split(",");
            Map<String, Object> collection = new HashMap<String, Object>();
            for (int counter = 0; counter < ids.length; counter++) {
                collection.put(ids[counter], new ArrayList<JournalEntryReportDTO>());
            }

            JasperPrint jasperPrint = null;
            JasperReport jasperReport = null;
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject compresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) compresult.getEntityList().get(0);
//            List<JournalEntryReportDTO> jeRptList = new ArrayList<JournalEntryReportDTO>();

            String symbol = "";
            try {
                symbol = new Character((char) Integer.parseInt(currency.getHtmlcode(), 16)).toString();
            } catch (Exception e) {
                symbol = currency.getHtmlcode();
            }

            int templateflag = (Integer) jobj.get("templateflag");
            JSONArray store = jobj.getJSONArray(Constants.RES_data);

            for (int i = 0; i < store.length(); i++) {
                JSONObject temp = store.getJSONObject(i);
                JournalEntryReportDTO jeRpt = new JournalEntryReportDTO();
                jeRpt.setEntryNumber(temp.optString("entryno", ""));
//                System.out.println(temp.optString("entryno",""));
                jeRpt.setEntryDate(temp.optString("entrydate", ""));
                jeRpt.setTransactionID(temp.optString("transactionID", ""));
                jeRpt.setTransactionDetails(temp.optString("transactionDetails", ""));
                jeRpt.setMemo(temp.optString("memo", ""));
                jeRpt.setAccountName(temp.optString("accountName", ""));
                jeRpt.setAccountCode(temp.optString("accountCode", ""));
                jeRpt.setProject(temp.optString("project", ""));
                jeRpt.setReference(temp.optString("reference", ""));
                jeRpt.setCreatedby(temp.optString("createdby", ""));
                jeRpt.setJeapprover(temp.optString("jeapprover", ""));
                jeRpt.setCreditAmount(temp.optDouble("creditAmount", 0.0));
                jeRpt.setDebitAmount(temp.optDouble("debitAmount", 0.0));
                jeRpt.setDescription(temp.optString("description", ""));
                jeRpt.setClass_field(temp.optString("class_field", ""));
                jeRpt.setCurrencyCode(symbol);
//                jeRptList.add(jeRpt);
                ((ArrayList<JournalEntryReportDTO>) collection.get(temp.optString("journalentryid"))).add(jeRpt);
            }

            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            parameterMap.put("imagePath", fileName1);
            parameterMap.put("CURRENCY_NAME", symbol);
            if (templateflag == Constants.vhqpost_tempalteflag) {
                parameterMap.put("COMPANY_LOGO_IMAGE_PATH", fileName1);
            } else {
                parameterMap.put("COMPANY_LOGO_IMAGE_PATH", ProfileImageServlet.getProfileImagePath(request, true, null));
            }
            parameterMap.put("COMPANY_ADDRESS", company.getAddress() != null ? StringUtil.serverHTMLStripper(company.getAddress()) : "");
            parameterMap.put("COMPANY_NAME", company.getCompanyName());
            parameterMap.put("COMPANY_PHONE", company.getPhoneNumber() == null ? "" : company.getPhoneNumber());
            parameterMap.put("COMPANY_FAX", company.getFaxNumber() == null ? "" : company.getFaxNumber());
            parameterMap.put("COMPANY_EMAIL", company.getEmailID() == null ? "" : company.getEmailID());

            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);
            ArrayList datePojoList = new ArrayList();
            OnlyDatePojo datePojo = new OnlyDatePojo();
            Date date = new Date();
            datePojo.setDate(df.format(date));
            datePojoList.add(datePojo);

            response.setHeader("Content-Disposition", "attachment;filename=" + "Journal_Entry_Report_v1.pdf");

            JasperReport jasperReportSubReport = null;
            for (int counter = 1; counter <= ids.length; counter++) {
                ArrayList<JournalEntryReportDTO> list1 = null;
                JRBeanCollectionDataSource jrBeanCollectionDataSource = null;
                if (counter % 2 == 1) {
                    list1 = (ArrayList<JournalEntryReportDTO>) collection.get(ids[counter - 1]);
                    jrBeanCollectionDataSource = new JRBeanCollectionDataSource(list1);
                    parameterMap.put("JournalEntryReportDTO1", jrBeanCollectionDataSource);

                    InputStream inputStream1 = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GuanChongJournalVoucherMainReport.jrxml");
                    JasperDesign jasperDesign1 = JRXmlLoader.load(inputStream1);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign1);
                } else {
                    list1 = (ArrayList<JournalEntryReportDTO>) collection.get(ids[counter - 1]);
                    jrBeanCollectionDataSource = new JRBeanCollectionDataSource(list1);
                    parameterMap.put("JournalEntryReportDTO2", jrBeanCollectionDataSource);

                    InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GuanChongJournalVoucherSubreport.jrxml");
                    JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                    jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                }

                if (counter % 2 == 0 || counter == ids.length) {
                    if (counter % 2 == 1) {
                        parameterMap.put("JournalEntryReportDTO2", null);

                        InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GuanChongJournalVoucherSubreport.jrxml");
                        JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                        jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                    }
                    parameterMap.put("SubReport", jasperReportSubReport);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, parameterMap, beanColDataSource);

                    jasperList.add(jasperPrint);
                }
            }

            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperList);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }

        return parameterMap;
    }

    private class ExportJEComparator implements Comparator {

        @Override
        public int compare(Object o1, Object o2) {

            int result = 0;
            Object[] row1 = (Object[]) o1;
            JournalEntry entry1 = (JournalEntry) row1[0];
            Object[] row2 = (Object[]) o2;
            JournalEntry entry2 = (JournalEntry) row2[0];

            if (entry1.getEntryDate().getTime() > entry2.getEntryDate().getTime()) {
                result = 1;
            } else if (entry1.getEntryDate().getTime() < entry2.getEntryDate().getTime()) {
                result = -1;
            } else {
                result = 0;
            }

            return result;
        }
    }

    public JSONObject getNewMYOBtradingreport(HttpServletRequest request, JSONObject tradingjobj, boolean isPrint) throws ServiceException, SessionExpiredException {
        try {
            boolean isForTradingAndProfitLoss = false;
            if ((request.getAttribute("isForTradingAndProfitLoss") != null)) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(request.getAttribute("isForTradingAndProfitLoss").toString());
            }
            JSONObject jobj = tradingjobj.getJSONObject(Constants.RES_data);
            JSONArray rightObjArr = jobj.getJSONArray("right");
            JSONArray leftObjArr = jobj.getJSONArray("left");

            JSONArray tradingArray = new JSONArray();

            JSONObject objlast = new JSONObject();
            objlast.put("accountid", "");
            objlast.put("level", 0);
            objlast.put("isdebit", false);
            objlast.put("leaf", true);
            objlast.put("accountname", "Income");
            objlast.put("amount", "");
            objlast.put("amountInSelectedCurrency", "");
            objlast.put("preamount", "");
            objlast.put("fmt", "B");

            for (int i = 0; i < rightObjArr.length(); i++) {
                leftObjArr.put(rightObjArr.getJSONObject(i));
            }

            int j = 0;
            for (int i = 0; i < leftObjArr.length(); i++) {
                JSONObject leftobj = leftObjArr.getJSONObject(i);
                if (leftobj.has("acctype") && leftobj.get("acctype").toString().equals("income")) {
                    if (!leftobj.has("group") || (leftobj.has("group") && !leftobj.get("group").toString().equals("income"))) {
                        if (j == 0) {
                            tradingArray.put(objlast);
                            j++;
                        }
                        tradingArray.put(leftobj);
                    }
                }
            }
            if(isForTradingAndProfitLoss){ // show CoGS group seperately
                j = 0;
                objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("amount", "");
                objlast.put("amountInSelectedCurrency", "");
                objlast.put("preamount", "");
                objlast.put("fmt", "B");
                objlast.put("accountname", "Cost of Goods Sold");
                for (int i = 0; i < leftObjArr.length(); i++) {
                    JSONObject leftobj = leftObjArr.getJSONObject(i);
                    if (leftobj.has("acctype") && leftobj.get("acctype").toString().equals("costofgoodssold")) {
                        if (!leftobj.has("group") || (leftobj.has("group") && leftobj.get("group").toString().equals("costofgoodssold"))) {
                            if (j == 0) {
                                tradingArray.put(objlast);
                                j++;
                            }
                            tradingArray.put(leftobj);
                        }
                    }
                }
                j = 0;
                objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("amountInSelectedCurrency", "");
                objlast.put("preamount", "");
                objlast.put("fmt", "B");
                objlast.put("accountname", "Total Cost of Goods Sold");
                for (int i = 0; i < leftObjArr.length(); i++) {
                    JSONObject leftobj = leftObjArr.getJSONObject(i);
                    if (leftobj.has("acctype") && leftobj.get("acctype").toString().equals("totalcogs")) {
                        tradingArray.put(leftobj);
                    }
                }
                for (int i = 0; i < leftObjArr.length(); i++) {

                    JSONObject leftobj = leftObjArr.getJSONObject(i);

                    if (leftobj.has("acctype") && leftobj.get("acctype").toString().equals("grossprofit")) {
                        tradingArray.put(leftobj);
                    } else if (leftobj.has("acctype") && leftobj.get("acctype").toString().equals("grossloss")) {
                        tradingArray.put(leftobj);
                    }
                }
            }
            j = 0;
            objlast = new JSONObject();
            objlast.put("accountid", "");
            objlast.put("level", 0);
            objlast.put("isdebit", false);
            objlast.put("leaf", true);
            objlast.put("amount", "");
            objlast.put("amountInSelectedCurrency", "");
            objlast.put("preamount", "");
            objlast.put("fmt", "B");
            objlast.put("accountname", "Expense");
            for (int i = 0; i < leftObjArr.length(); i++) {
                JSONObject leftobj = leftObjArr.getJSONObject(i);
                if (leftobj.has("acctype") && leftobj.get("acctype").toString().equals("expense")) {
                    if (!leftobj.has("group") || (leftobj.has("group") && !leftobj.get("group").toString().equals("expense"))) {
                        if (j == 0) {
                            tradingArray.put(objlast);
                            j++;
                        }
                        tradingArray.put(leftobj);
                    }
                }
            }
            if(!isForTradingAndProfitLoss){
                for (int i = 0; i < leftObjArr.length(); i++) {

                    JSONObject leftobj = leftObjArr.getJSONObject(i);

                    if (leftobj.has("acctype") && leftobj.get("acctype").toString().equals("grossprofit")) {
                        tradingArray.put(leftobj);
                    } else if (leftobj.has("acctype") && leftobj.get("acctype").toString().equals("grossloss")) {
                        tradingArray.put(leftobj);
                    }
                }
            }
            
            j = 0;
            objlast = new JSONObject();
            objlast.put("accountid", "");
            objlast.put("level", 0);
            objlast.put("isdebit", false);
            objlast.put("leaf", true);
            objlast.put("amount", "");
            objlast.put("amountInSelectedCurrency", "");
            objlast.put("preamount", "");
            objlast.put("fmt", "B");
            objlast.put("accountname", "Other Income");
            for (int i = 0; i < leftObjArr.length(); i++) {
                JSONObject leftobj = leftObjArr.getJSONObject(i);
                if (leftobj.has("group") && leftobj.get("group").toString().equals("income")) {
                        if (j == 0) {
                            tradingArray.put(objlast);
                            j++;
                        }
                        tradingArray.put(leftobj);
                    }
                }

            j = 0;
            objlast = new JSONObject();
            objlast.put("accountid", "");
            objlast.put("level", 0);
            objlast.put("isdebit", false);
            objlast.put("leaf", true);
            objlast.put("amount", "");
            objlast.put("amountInSelectedCurrency", "");
            objlast.put("preamount", "");
            objlast.put("fmt", "B");
            objlast.put("accountname", "Other Expense");
            for (int i = 0; i < leftObjArr.length(); i++) {
                JSONObject leftobj = leftObjArr.getJSONObject(i);
                if (leftobj.has("group") && leftobj.get("group").toString().equals("expense")) {
                    if (j == 0) {
                        tradingArray.put(objlast);
                        j++;
                    }
                    tradingArray.put(leftobj);
                }
            }

            for (int i = 0; i < leftObjArr.length(); i++) {
                JSONObject leftobj = leftObjArr.getJSONObject(i);

                if (leftobj.has("acctype") && leftobj.get("acctype").toString().equals("netprofit")) {
                    tradingArray.put(leftobj);
                } else if (leftobj.has("acctype") && leftobj.get("acctype").toString().equals("netloss")) {
                    tradingArray.put(leftobj);
                }
            }
            
            jobj.put("left", tradingArray);
            tradingjobj.getJSONObject(Constants.RES_data).remove("left");
            tradingjobj.getJSONObject(Constants.RES_data).put("left", tradingArray);

            if (isPrint) {
                tradingjobj.remove(Constants.RES_data);
                tradingjobj.put(Constants.RES_data, tradingArray);
            }

        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
        return tradingjobj;
    }

    public JSONObject getTradingAndProfitLossforExport(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        double invOpeBal = 0, invCloseBal = 0, assemblyValuation = 0, openassemblyValuation = 0, preassemblyValuation = 0;
        double predtotal = 0, prectotal = 0, preinvCloseBal = 0, preinvOpeBal = 0;
        boolean revenueOnly = false;
        if(request.getAttribute("revenueonly") != null){
            revenueOnly = (Boolean)request.getAttribute("revenueonly");
        }
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            boolean isForTradingAndProfitLoss = false;
            if ((paramJobj.optString("isForTradingAndProfitLoss",null) != null)) {
                isForTradingAndProfitLoss = Boolean.parseBoolean(paramJobj.optString("isForTradingAndProfitLoss"));
            }
            String costCenterId = paramJobj.optString("costcenter",null); //Filter for costcenter
            String reportView = paramJobj.optString("reportView",null); //"TradingAndProfitLoss","CostCenter"
            Date startDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString("stdate"));
            Date endDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString("enddate"));
            boolean stockValuationFlag = true;
            CompanyAccountPreferences pref = null;
            ExtraCompanyPreferences extrapref = null;
            String companyid = paramJobj.getString(Constants.companyKey);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
                stockValuationFlag = extrapref.isStockValuationFlag();
            }
            if (extrapref != null && extrapref.isShowAllAccountsInPnl()) {//Check to show all accounts.
                request.setAttribute("monthlyreport", "MonthlyReport");
                paramJobj.put("monthlyreport", "MonthlyReport");
            }
            boolean isShowZeroAmountAsBlank=extrapref.isShowZeroAmountAsBlank();
//            Date inventoryOpeningBalanceDate = null;
//            KwlReturnObject rtObj = accProductObj.getInventoryOpeningBalanceDate(companyid);
//            List<Date> lst = rtObj.getEntityList();
//            for (Date dateObj : lst) {
//                inventoryOpeningBalanceDate = dateObj;
//            }

            double rate = 0.0;
            String filterCurrency = "";
            if (paramJobj.optString("filterCurrency",null) != null) {
                filterCurrency = paramJobj.optString("filterCurrency");
            } else if (paramJobj.optString("filterCurrency",null) != null) {
                filterCurrency = paramJobj.optString("filterCurrency");
            }
            Map<String, Object> requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
            double externalCurrencyRate = StringUtil.getDouble(paramJobj.optString("externalcurrencyrate",null) != null ? paramJobj.getString("externalcurrencyrate") : "1.0");
            KwlReturnObject result = accCurrencyDAOobj.getExcDetailID(requestParams, filterCurrency, endDate, null);
            List li = result.getEntityList();
            if (!li.isEmpty()) {
                Iterator itr = li.iterator();
                ExchangeRateDetails erd = (ExchangeRateDetails) itr.next();
                rate = erd != null ? erd.getExchangeRate() : 1.0;
            }
            externalCurrencyRate = rate;
//            paramJobj.put("externalCurrencyRate", externalCurrencyRate);
            
            double dtotal = 0, ctotal = 0, dopentotal = 0, copentotal = 0, dendtotal = 0, cendtotal = 0, dperiodtotal = 0, cperiodtotal = 0;
            double openInvOpeBal = 0, openInvCloseBal = 0, endInvOpeBal = 0, endInvCloseBal = 0;
            JSONArray jArrL = new JSONArray();
            JSONArray jArrR = new JSONArray();
            JSONObject objlast = new JSONObject();
            objlast.put("accountname", messageSource.getMessage("acc.report.2", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Particulars");
            objlast.put("accountid", "");
            objlast.put("level", 0);
            objlast.put("isdebit", true);
            objlast.put("leaf", true);
            objlast.put("amount", "<div align=right>" + messageSource.getMessage("acc.report.3", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "</div>");    // Amount (Debit)
            objlast.put("amountInSelectedCurrency", "<div align=right>" + messageSource.getMessage("acc.report.3", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "</div>");    // Amount (Debit)
            objlast.put("preamount", "<div align=right>" + messageSource.getMessage("acc.report.3", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "</div>");    // Amount (Debit)
            objlast.put("fmt", "H");
            objlast = new JSONObject();
            objlast.put("accountname", messageSource.getMessage("acc.report.2", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Particulars");
            objlast.put("accountid", "");
            objlast.put("level", 0);
            objlast.put("isdebit", false);
            objlast.put("leaf", true);
            objlast.put("amount", "<div align=right>" + messageSource.getMessage("acc.report.4", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "</div>");      //Amount (Credit)
            objlast.put("amountInSelectedCurrency", "<div align=right>" + messageSource.getMessage("acc.report.4", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "</div>");      //Amount (Credit)
            objlast.put("preamount", "<div align=right>" + messageSource.getMessage("acc.report.4", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "</div>");      //Amount (Credit)
            objlast.put("fmt", "H");

            Date startPreDate = null;
            Date endPreDate = null;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("stpredate",null)) && !StringUtil.isNullOrEmpty(paramJobj.optString("endpredate",null))) {
                startPreDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString("stpredate"));
                endPreDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString("endpredate"));
            }

            Calendar calendar = Calendar.getInstance();
            if (startDate != null) {
                calendar.setTime(startDate);
            } else {
                calendar.setTime(endDate);
            }

            String Searchjson = paramJobj.optString("searchJson",null) != null ? paramJobj.optString("searchJson") : "";
            if (paramJobj.optString("DimensionBasedComparisionReport",null) != null && paramJobj.optString("DimensionBasedComparisionReport").equals("DimensionBasedComparisionReport")) {
                Searchjson = paramJobj.optString("DimensionBasedSearchJson");
            }
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            if(!revenueOnly){
                if (!"CostCenter".equalsIgnoreCase(reportView) && StringUtil.isNullOrEmpty(costCenterId) && extrapref != null && !(extrapref.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) { //Don't show Opening/Closing Stock for any Cost-Center
                    System.out.println("Valuation Start - " + new Date());
                if (stockValuationFlag) {
                        boolean periodView = paramJobj.optString("periodView",null) != null ? Boolean.parseBoolean(paramJobj.optString("periodView")) : false;
                        if (periodView) {
    //                        double stock[] = accReportsService.calculateOpenigAndClosingStock(request, companyid, startDate, endDate);
                            double stock[] = accReportsService.calculateOpeningAndClosingStock(paramJobj, pref, extrapref, companyid, startDate, endDate, null,null,null);
                            openInvOpeBal = stock[0];
                            invOpeBal = stock[1];
                            endInvOpeBal = stock[2];
                            openInvCloseBal = stock[3];
                            invCloseBal = stock[4];
                            endInvCloseBal = stock[5];
                            openassemblyValuation = stock[6];
                            assemblyValuation = stock[7];
                        } else {
                            HashMap<String, Object> requestParam = new HashMap<String, Object>();
                            paramJobj.put("isForPeriodTransactions", true);
                            requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                            requestParam.put(Constants.REQ_startdate, paramJobj.optString("stdate"));
                            requestParam.put(Constants.REQ_enddate, paramJobj.optString("enddate"));
                            requestParam.put(Constants.companyKey, companyid);
                            requestParam.put("searchJson", Searchjson);
                            requestParam.put(Constants.Filter_Criteria, paramJobj.optString(Constants.Filter_Criteria));
                            double[] valuation = AccProductService.getInventoryValuationDataForFinancialReports(new HashMap<String, Object>(requestParam));
                            if (isForTradingAndProfitLoss) {
                                invOpeBal = valuation[2];
                            }
                            String name = extrapref.getOpeningStockAccountId();//Only Profit and Loss Account
                            Account openingStock = null;
                            double openingstockaccountbal = 0;
                            if (!StringUtil.isNullOrEmpty(name)) {
                                HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
                                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                                if (!StringUtil.isNullOrEmpty(extrapref.getProfitLossAccountId())) {
                                    filter_names.add("ID");
                                    filter_params.add(name);
                                }
                                requestParams1.put("filter_names", filter_names);
                                requestParams1.put("filter_params", filter_params);
                                KwlReturnObject venresult = accAccountDAOobj.getAccount(requestParams1);
                                if (!venresult.getEntityList().isEmpty()) {
                                    openingStock = (Account) venresult.getEntityList().get(0);
                                    KwlReturnObject closingAccountBalanceResult = accJournalEntryobj.getClosingAccountBalance(openingStock.getID(), companyid, (calendar.get(Calendar.YEAR) - 1));
                                    List closingAccountBalanceList = closingAccountBalanceResult.getEntityList();
                                    if (!closingAccountBalanceList.isEmpty()) {
                                        ClosingAccountBalance closingAccountBalance = (ClosingAccountBalance) closingAccountBalanceList.get(0);
                                        openingstockaccountbal += closingAccountBalance.getAmount();
                                    }
                                    openingstockaccountbal += accReportsService.getAccountBalanceWithOutClosing(paramJobj, openingStock.getID(), startDate, endDate,null);
                                    invOpeBal = invOpeBal + openingstockaccountbal;
                                }
                            }

                            paramJobj.put("assemblyValuation", true);
                            invCloseBal = valuation[5];
                            assemblyValuation = valuation[8];
                            String stockInHandname = extrapref.getClosingStockAccountId();
                            Account stockInHand = null;
                            double closingstockaccountbal = 0;
                            if (!StringUtil.isNullOrEmpty(stockInHandname)) {

                                HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
                                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                                if (!StringUtil.isNullOrEmpty(extrapref.getProfitLossAccountId())) {
                                    filter_names.add("ID");
                                    filter_params.add(stockInHandname);
                                }
                                requestParams1.put("filter_names", filter_names);
                                requestParams1.put("filter_params", filter_params);
                                KwlReturnObject venresult = accAccountDAOobj.getAccount(requestParams1);
                                if (!venresult.getEntityList().isEmpty()) {
                                    stockInHand = (Account) venresult.getEntityList().get(0);
                                    KwlReturnObject closingAccountBalanceResult = accJournalEntryobj.getClosingAccountBalance(stockInHand.getID(), companyid, (calendar.get(Calendar.YEAR) - 1));
                                    List closingAccountBalanceList = closingAccountBalanceResult.getEntityList();
                                    if (!closingAccountBalanceList.isEmpty()) {
                                        ClosingAccountBalance closingAccountBalance = (ClosingAccountBalance) closingAccountBalanceList.get(0);
                                        closingstockaccountbal += closingAccountBalance.getAmount();
                                    }
                                    closingstockaccountbal += accReportsService.getAccountBalanceWithOutClosing(paramJobj, stockInHand.getID(), startDate, endDate,null);
                                    invCloseBal = invCloseBal + closingstockaccountbal;
                                }
                            }

                            if (startPreDate != null && endPreDate != null) {
                                requestParam.put(Constants.REQ_startdate, paramJobj.optString("stpredate"));
                                requestParam.put(Constants.REQ_enddate, paramJobj.optString("endpredate").toString());
                                valuation = AccProductService.getInventoryValuationDataForFinancialReports(new HashMap<String, Object>(requestParam));
                                
                                preinvOpeBal = valuation[2];
                                preinvCloseBal = valuation[5];
                                preassemblyValuation = valuation[8];
                            }
                        }
                        objlast = new JSONObject();
                        objlast.put("accountname", messageSource.getMessage("acc.report.13", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                        objlast.put("accountid", "");
                        objlast.put("level", 0);
                        objlast.put("isdebit", true);
                        objlast.put("leaf", true);
                        objlast.put("openingamount", isShowZeroAmountAsBlank && openInvOpeBal==0.0?"":openInvOpeBal);
                        objlast.put("periodamount", isShowZeroAmountAsBlank && invOpeBal==0.0?"":invOpeBal);
                        objlast.put("endingamount", isShowZeroAmountAsBlank && endInvOpeBal==0.0?"":endInvOpeBal);
                        objlast.put("amount", isShowZeroAmountAsBlank && invOpeBal==0.0?"":invOpeBal);
                        objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank && invOpeBal==0.0?"":invOpeBal * externalCurrencyRate);
                        objlast.put("preamount", preinvOpeBal);
                        if (isForTradingAndProfitLoss) { // include opening stock in CoGS group
                            objlast.put("acctype", "costofgoodssold");
                        } else {
                            objlast.put("acctype", "expense");
                        }
                        objlast.put("fmt", "H");
                        jArrL.put(objlast);
                    }
                }
            }

            double costofgoodsSoldTotal = 0, preCostOfGoodsSold = 0, openCostOfGoodsSold = 0, endCostOfGoodsSold = 0, periodCostOfGoodsSold = 0;
            double tradingAmount[]= {0, 0, 0, 0, 0, 0};
            if(!revenueOnly){
                tradingAmount = accReportsService.getTrading(paramJobj, Group.NATURE_EXPENSES, jArrL, false,null);            
                dtotal = tradingAmount[0];
                predtotal = tradingAmount[1];
                dopentotal = tradingAmount[2];
                dperiodtotal = tradingAmount[3];
                dendtotal = tradingAmount[4];
            }
            tradingAmount = accReportsService.getTrading(paramJobj, Group.NATURE_INCOME, jArrR, false,null);
            ctotal = tradingAmount[0];
            prectotal = tradingAmount[1];
            copentotal = tradingAmount[2];
            cperiodtotal = tradingAmount[3];
            cendtotal = tradingAmount[4];
            if (!isForTradingAndProfitLoss) { // is call for Profit and Loss Statement
                dtotal += invOpeBal;
                dperiodtotal += invOpeBal;
                dopentotal += openInvOpeBal;
                dendtotal += endInvOpeBal;
                predtotal += preinvOpeBal;
                ctotal -= invCloseBal;
                cperiodtotal -= invCloseBal;
                copentotal -= openInvCloseBal;
                cendtotal -= endInvCloseBal;
                prectotal -= preinvCloseBal;
            }
            /*Do not show opening/closing stock for "Cost Center" report & Perpetual Inventory Valuation*/
            if (!"CostCenter".equalsIgnoreCase(reportView) && StringUtil.isNullOrEmpty(costCenterId) && extrapref != null && !(extrapref.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {//Don't show Opening/Closing Stock for any Cost-Center
                JSONObject obj = new JSONObject();
                if (stockValuationFlag) {
                        obj.put("accountname", messageSource.getMessage("acc.report.17", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Closing Stock");
                        obj.put("accountid", "");
                        obj.put("level", 0);
                        obj.put("isdebit", false);
                        obj.put("leaf", false);
                        if (isForTradingAndProfitLoss) {// include closing stock in CoGS group
                            obj.put("acctype", "costofgoodssold");
                        } else {
                            obj.put("acctype", "income");
                        }
//                        if(extrapref.isShowZeroAmountAsBlank()){
                        obj.put("amount", "");
                        obj.put("openingamount", "");
                        obj.put("periodamount", "");
                        obj.put("endingamount", "");
                        obj.put("amountInSelectedCurrency", "");
                        obj.put("preamount", "");
                        obj.put("isaccountgroup", true);
//                        }else{
//                            obj.put("amount", 0.0);
//                            obj.put("openingamount", 0.0);
//                            obj.put("periodamount", 0.0);
//                            obj.put("endingamount", 0.0);
//                            obj.put("amountInSelectedCurrency", 0.0);
//                            obj.put("preamount", 0.0);
//                        }
                        jArrR.put(obj);

                        obj = new JSONObject();
                        obj.put("accountname", messageSource.getMessage("acc.report.14", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  // "Finish Products (Total Value of \"Inventory Assembly\" products)");
                        obj.put("accountid", "");
                        obj.put("level", 1);
                        obj.put("isdebit", false);
                        obj.put("leaf", true);
                        obj.put("amount", isShowZeroAmountAsBlank && assemblyValuation==0.0?"":assemblyValuation);
                        obj.put("openingamount", isShowZeroAmountAsBlank && openassemblyValuation==0.0?"":openassemblyValuation);
                        obj.put("periodamount", isShowZeroAmountAsBlank && assemblyValuation==0.0?"":assemblyValuation);
                        obj.put("endingamount", isShowZeroAmountAsBlank && (assemblyValuation + openassemblyValuation)==0.0?"":assemblyValuation + openassemblyValuation);
                        obj.put("amountInSelectedCurrency", isShowZeroAmountAsBlank && assemblyValuation==0.0?"":assemblyValuation * externalCurrencyRate);
                        obj.put("preamount", preassemblyValuation);
                        if (isForTradingAndProfitLoss) { // include "Finish Products" in CoGS group as it comes under Closing Stock
                            obj.put("acctype", "costofgoodssold");
                        } else {
                            obj.put("acctype", "income");
                        }
                        jArrR.put(obj);

                        obj = new JSONObject();
                        obj.put("accountname", messageSource.getMessage("acc.report.15", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Raw Materials (Total Value of \"Inventory Item\" products)");
                        obj.put("accountid", "");
                        obj.put("level", 1);
                        obj.put("isdebit", false);
                        obj.put("leaf", true);
                        obj.put("amount", isShowZeroAmountAsBlank && (invCloseBal - assemblyValuation)==0.0?"":(invCloseBal - assemblyValuation));
                        obj.put("openingamount", isShowZeroAmountAsBlank && (openInvCloseBal - openassemblyValuation)==0.0?"":(openInvCloseBal - openassemblyValuation));
                        obj.put("periodamount", isShowZeroAmountAsBlank && (invCloseBal - assemblyValuation)==0.0?"":(invCloseBal - assemblyValuation));
                        double endingAmount=(openInvCloseBal - openassemblyValuation) + (invCloseBal - assemblyValuation);
                        obj.put("endingamount", isShowZeroAmountAsBlank && endingAmount==0.0?"":endingAmount);
                        double amountInSelectedCurrency=(invCloseBal - assemblyValuation) * externalCurrencyRate;
                        obj.put("amountInSelectedCurrency", isShowZeroAmountAsBlank && amountInSelectedCurrency==0.0?"":amountInSelectedCurrency);
                        obj.put("preamount", preinvCloseBal - preassemblyValuation);
                        if (isForTradingAndProfitLoss) { // include "Raw Materials" in CoGS group as it comes under Closing Stock
                            obj.put("acctype", "costofgoodssold");
                        } else {
                            obj.put("acctype", "income");
                        }
                        jArrR.put(obj);

                        obj = new JSONObject();
                        obj.put("accountname", messageSource.getMessage("acc.report.16", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Total Closing Stock");
                        obj.put("accountid", "");
                        obj.put("level", 0);
                        obj.put("isdebit", false);
                        obj.put("leaf", true);
                        obj.put("amount", isShowZeroAmountAsBlank && invCloseBal==0.0?"":invCloseBal);
                        obj.put("openingamount", isShowZeroAmountAsBlank && openInvCloseBal==0.0?"":openInvCloseBal);
                        obj.put("periodamount", isShowZeroAmountAsBlank && invCloseBal==0.0?"":invCloseBal);
                        obj.put("endingamount", isShowZeroAmountAsBlank && endInvCloseBal==0.0?"":endInvCloseBal);
                        obj.put("amountInSelectedCurrency", isShowZeroAmountAsBlank && invCloseBal==0.0?"":invCloseBal * externalCurrencyRate);
                        obj.put("preamount", preinvCloseBal);
                        obj.put("fmt", "H");
                        if (isForTradingAndProfitLoss) {// include "Total Closing Stock" under CoGS group
                            obj.put("acctype", "costofgoodssold");
                        } else {
                            obj.put("acctype", "income");
                        }
                        jArrR.put(obj);

                }
            }

            double profitLossAmountExpense[]= {0, 0, 0, 0, 0, 0};
            if(!revenueOnly){
                profitLossAmountExpense= accReportsService.getProfitLoss(paramJobj, Group.NATURE_EXPENSES, jArrL, false,null);
            }
            double[] profitLossAmount = accReportsService.getProfitLoss(paramJobj, Group.NATURE_INCOME, jArrR, false,null);
            
            double c_incometotal = ctotal, c_incomeperiod = cperiodtotal, c_incomeopentotal = copentotal, c_incomeendtotal = cendtotal, cincomeprectotal = prectotal;
            c_incometotal += profitLossAmount[0];
            c_incomeopentotal += profitLossAmount[2];
            c_incomeendtotal += profitLossAmount[4];
            c_incomeperiod += profitLossAmount[3];
            cincomeprectotal += profitLossAmount[1];
            if (isForTradingAndProfitLoss) { // If "Profit and Loss Report" then calculate CoGS accounts seperately
                paramJobj.put("isCostOfGoodsSold", true);
                if(!revenueOnly){
                    double goodsSoldAmount[] = accReportsService.getTrading(paramJobj, Group.NATURE_EXPENSES, jArrL, false,null);
                    costofgoodsSoldTotal = goodsSoldAmount[0];
                    preCostOfGoodsSold = goodsSoldAmount[1];
                    openCostOfGoodsSold = goodsSoldAmount[2];
                    periodCostOfGoodsSold = goodsSoldAmount[3];
                    endCostOfGoodsSold = goodsSoldAmount[4];
                    double profitLossAmountCoGS[] = accReportsService.getProfitLoss(paramJobj, Group.NATURE_EXPENSES, jArrL, false,null);
                    costofgoodsSoldTotal += profitLossAmountCoGS[0];
                    preCostOfGoodsSold += profitLossAmountCoGS[1];
                    openCostOfGoodsSold += profitLossAmountCoGS[2];
                    periodCostOfGoodsSold += profitLossAmountCoGS[3];
                    endCostOfGoodsSold += profitLossAmountCoGS[4];
                    paramJobj.remove("isCostOfGoodsSold");
                    costofgoodsSoldTotal = authHandler.round((costofgoodsSoldTotal + invOpeBal - invCloseBal), companyid);
                    
                    preCostOfGoodsSold = authHandler.round((preCostOfGoodsSold + preinvOpeBal - preinvCloseBal), 2);
                    openCostOfGoodsSold = authHandler.round((openCostOfGoodsSold + openInvOpeBal - openInvCloseBal), companyid);
                    
                    periodCostOfGoodsSold = authHandler.round((periodCostOfGoodsSold + invOpeBal - invCloseBal), companyid);
                    endCostOfGoodsSold = authHandler.round((endCostOfGoodsSold + endInvOpeBal - endInvCloseBal), companyid);
                }
            }
            double balance = 0, periodbalance = 0, openbalance = 0, endbalance = 0, preBalance = 0;
            double grossprofit = 0, periodgrossprofit = 0, opengrossprofit = 0, endgrossprofit = 0, pregrossprofit = 0;
            if (isForTradingAndProfitLoss) { // If "Profit and Loss Report" then calculate Gross Profit as "Total for Income - Cost of Goods Sold"
                balance = grossprofit = ((-1 * c_incometotal) - costofgoodsSoldTotal) * (-1);
                periodbalance = periodgrossprofit = ((-1 * c_incomeperiod) - periodCostOfGoodsSold) * (-1);
                openbalance = opengrossprofit = ((-1 * c_incomeopentotal) - openCostOfGoodsSold) * (-1);
                endbalance = endgrossprofit = ((-1 * c_incomeendtotal) - endCostOfGoodsSold) * (-1);
                preBalance = pregrossprofit = ((-1 * cincomeprectotal) - preCostOfGoodsSold) * (-1);
            } else {
                balance = dtotal + ctotal;
                periodbalance = dperiodtotal + cperiodtotal;
                openbalance = dopentotal + copentotal;
                endbalance = dendtotal + cendtotal;
                preBalance = predtotal + prectotal;
            }
            if (!"CostCenter".equalsIgnoreCase(reportView)) {//Don't show GrossLoss,GrossProfit for cost center report
                boolean lossflag = false;
                if (balance > 0 || (balance == 0 && openbalance > 0)) {
                    objlast = new JSONObject();
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", false);
                    objlast.put("leaf", true);
                    objlast.put("accountname", messageSource.getMessage("acc.report.5", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Gross Loss");
                    objlast.put("amount", isShowZeroAmountAsBlank && balance==0.0?"":balance);
                    objlast.put("openingamount", isShowZeroAmountAsBlank && openbalance==0.0?"":openbalance);
                    objlast.put("periodamount", isShowZeroAmountAsBlank && periodbalance==0.0?"":periodbalance);
                    objlast.put("endingamount", isShowZeroAmountAsBlank && endbalance==0.0?"":endbalance);
                    objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank && balance==0.0?"":balance * externalCurrencyRate);
                    objlast.put("preamount", 0);
                    objlast.put("fmt", "B");
                    objlast.put("acctype", "grossloss");
                    jArrL.put(new JSONObject());
                    ctotal -= balance;
                    copentotal -= openbalance;
                    cperiodtotal -= periodbalance;
                    cendtotal -= endbalance;
                    lossflag = true;
                }

                if (preBalance > 0) {
                    if (!lossflag) {
                        objlast = new JSONObject();
                        objlast.put("accountname", messageSource.getMessage("acc.report.5", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Gross Loss");
                        objlast.put("accountid", "");
                        objlast.put("level", 0);
                        objlast.put("leaf", true);
                        objlast.put("amount", isShowZeroAmountAsBlank?"":0.0);
                        objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank?"":0.0);
                        objlast.put("isdebit", false);
                        objlast.put("fmt", "B");
                        objlast.put("acctype", "grossloss");
                    }
                    objlast.put("preamount", preBalance);
                    if (!isForTradingAndProfitLoss) {
                        prectotal -= preBalance;
                    }
                    jArrR.put(objlast);
                } else if (balance > 0 || (balance == 0 && openbalance > 0)) {
                    jArrR.put(objlast);
                }

                boolean profitflag = false;

                if (balance < 0 || (balance == 0 && openbalance < 0)) {
                    objlast = new JSONObject();
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", true);
                    objlast.put("leaf", true);
                    objlast.put("accountname", messageSource.getMessage("acc.report.6", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Gross Profit");
                    objlast.put("amount", balance == 0 ? (isShowZeroAmountAsBlank?"":balance) : -balance);//Remove '-' sign if 0
                    objlast.put("openingamount", openbalance == 0 ? (isShowZeroAmountAsBlank?"":openbalance) : -openbalance);
                    objlast.put("periodamount", periodbalance == 0 ? (isShowZeroAmountAsBlank?"":periodbalance) : -periodbalance);
                    objlast.put("endingamount", endbalance == 0 ? (isShowZeroAmountAsBlank?"":endbalance) : -endbalance);
                    objlast.put("amountInSelectedCurrency", (balance == 0 ? (isShowZeroAmountAsBlank?"":balance * externalCurrencyRate) : -balance * externalCurrencyRate));//Remove '-' sign if 0
                    objlast.put("preamount", 0);
                    objlast.put("fmt", "B");
                    objlast.put("acctype", "grossprofit");
//                    jArrL.put(objlast);
                    jArrR.put(new JSONObject());
                    profitflag = true;
                    if(!isForTradingAndProfitLoss){
                        dtotal -= balance;
                        dopentotal -= openbalance;
                        dperiodtotal -= periodbalance;
                        dendtotal -= endbalance;
                    }
                }

                if (preBalance < 0) {
                    if (!profitflag) {
                        objlast = new JSONObject();
                        objlast.put("accountname", messageSource.getMessage("acc.report.6", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Gross Profit");
                        objlast.put("accountid", "");
                        objlast.put("level", 0);
                        objlast.put("leaf", true);
                        objlast.put("amount", isShowZeroAmountAsBlank?"":0.0);
                        objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank?"":0.0);
                        objlast.put("isdebit", true);
                        objlast.put("fmt", "B");
                        objlast.put("acctype", "grossprofit");
//                    dtotal -= balance; 
                    }
                    objlast.put("preamount", preBalance == 0 ? preBalance : -preBalance);//Remove '-' sign if 0
                    if (!isForTradingAndProfitLoss) {
                        predtotal -= preBalance;
                    }
                    jArrL.put(objlast);
                } else if (balance < 0 || (balance == 0 && openbalance < 0)) {
                    jArrL.put(objlast);
                }

                objlast = new JSONObject();
                objlast.put("accountname", messageSource.getMessage("acc.report.7", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Total Debit");
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", true);
                objlast.put("leaf", true);
                objlast.put("amount", isShowZeroAmountAsBlank && dtotal==0.0?"":dtotal);
                objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank && dtotal==0.0?"":dtotal * externalCurrencyRate);
                objlast.put("preamount", predtotal);
                objlast.put("fmt", "T");
                jArrL.put(objlast);
                objlast = new JSONObject();
                objlast.put("accountname", messageSource.getMessage("acc.report.8", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Total Credit");
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("amount", ctotal == 0 ? (isShowZeroAmountAsBlank?"":ctotal) : -ctotal);//Remove '-' sign if 0
                objlast.put("amountInSelectedCurrency", (ctotal == 0 ? (isShowZeroAmountAsBlank?"":ctotal * externalCurrencyRate) : -ctotal * externalCurrencyRate));//Remove '-' sign if 0
                objlast.put("preamount", prectotal == 0 ? prectotal : -prectotal);//Remove '-' sign if 0
                objlast.put("fmt", "T");
                jArrR.put(objlast);

                objlast = new JSONObject();
                objlast.put("accountname", messageSource.getMessage("acc.report.2", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Particulars");
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", true);
                objlast.put("leaf", true);
                objlast.put("amount", "<div align=right>" + messageSource.getMessage("acc.report.3", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "</div>");   //Amount (Debit)
                objlast.put("amountInSelectedCurrency", "<div align=right>" + messageSource.getMessage("acc.report.3", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "</div>");   //Amount (Debit)
                objlast.put("preamount", "<div align=right>" + messageSource.getMessage("acc.report.3", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "</div>");   //Amount (Debit)
                objlast.put("fmt", "H");
                jArrL.put(objlast);
                objlast = new JSONObject();
                objlast.put("accountname", messageSource.getMessage("acc.report.2", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Particulars");
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("amount", "<div align=right>" + messageSource.getMessage("acc.report.4", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "</div>");       //Amount (Credit)
                objlast.put("amountInSelectedCurrency", "<div align=right>" + messageSource.getMessage("acc.report.4", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "</div>");       //Amount (Credit)
                objlast.put("preamount", "<div align=right>" + messageSource.getMessage("acc.report.4", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "</div>");       //Amount (Credit)
                objlast.put("fmt", "H");
                jArrR.put(objlast);
                if(!isForTradingAndProfitLoss){
                    dtotal = 0;
                    dopentotal = 0;
                    dperiodtotal = 0;
                    cperiodtotal = 0;
                    copentotal = 0;
                    dendtotal = 0;
                    cendtotal = 0;
                    ctotal = 0;
                    predtotal = 0;
                    prectotal = 0;
                }
                if (balance > 0 || (balance == 0 && openbalance > 0)) {
                    objlast = new JSONObject();
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", true);
                    objlast.put("leaf", true);
                    objlast.put("accountname", messageSource.getMessage("acc.report.5", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Gross Loss");
                    objlast.put("amount", isShowZeroAmountAsBlank && balance==0.0?"":balance);
                    objlast.put("openingamount", isShowZeroAmountAsBlank && openbalance==0.0?"":openbalance);
                    objlast.put("periodamount", isShowZeroAmountAsBlank && periodbalance==0.0?"":periodbalance);
                    objlast.put("endingamount", isShowZeroAmountAsBlank && endbalance==0.0?"":endbalance);
                    objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank && balance==0.0?"":balance * externalCurrencyRate);
                    objlast.put("preamount", 0);
                    objlast.put("fmt", "B");
                    objlast.put("acctype", "grossloss1");
                    if(!isForTradingAndProfitLoss){
                        dtotal = balance;
                        dperiodtotal = periodbalance;
                        dopentotal = openbalance;
                        dendtotal = endbalance;
                    }
                    lossflag = true;
                }

                if (preBalance > 0) {
                    if (!lossflag) {
                        objlast = new JSONObject();
                        objlast.put("accountname", messageSource.getMessage("acc.report.5", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Gross Loss");
                        objlast.put("accountid", "");
                        objlast.put("level", 0);
                        objlast.put("leaf", true);
                        objlast.put("amount", isShowZeroAmountAsBlank?"":0.0);
                        objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank?"":0.0);
                        objlast.put("isdebit", true);
                        objlast.put("acctype", "grossloss1");
                        objlast.put("fmt", "B");
                    }
                    objlast.put("preamount", preBalance);
                    if (!isForTradingAndProfitLoss) {
                        predtotal = preBalance;
                    }
                    jArrL.put(objlast);
                } else if (balance > 0 || (balance == 0 && openbalance > 0)) {
                    jArrL.put(objlast);
                }

                if (balance < 0 || (balance == 0 && openbalance < 0)) {
                    objlast = new JSONObject();
                    objlast.put("accountid", "");
                    objlast.put("level", 0);
                    objlast.put("isdebit", false);
                    objlast.put("leaf", true);
                    objlast.put("accountname", messageSource.getMessage("acc.report.6", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Gross Profit");
                    objlast.put("amount", balance == 0 ?  (isShowZeroAmountAsBlank?"":balance) : -balance);//Remove '-' sign if 0
                    objlast.put("openingamount", openbalance == 0 ? (isShowZeroAmountAsBlank?"":openbalance) : -openbalance);
                    objlast.put("periodamount", periodbalance == 0 ? (isShowZeroAmountAsBlank?"":periodbalance) : -periodbalance);
                    objlast.put("endingamount", endbalance == 0 ? (isShowZeroAmountAsBlank?"":endbalance) : -endbalance);
                    objlast.put("amountInSelectedCurrency", (balance == 0 ? (isShowZeroAmountAsBlank?"":balance* externalCurrencyRate) : -balance* externalCurrencyRate));//Remove '-' sign if 0
                    objlast.put("preamount", 0);
                    objlast.put("fmt", "B");
                    objlast.put("acctype", "grossprofit1");
                    profitflag = true;
                    ctotal = balance;
                    cperiodtotal = periodbalance;
                    copentotal = openbalance;
                    cendtotal = endbalance;
                }

                if (preBalance < 0) {
                    if (!profitflag) {
                        objlast = new JSONObject();
                        objlast.put("accountname", messageSource.getMessage("acc.report.6", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Gross Profit");
                        objlast.put("accountid", "");
                        objlast.put("level", 0);
                        objlast.put("leaf", true);
                        objlast.put("amount", isShowZeroAmountAsBlank?"":0.0);
                        objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank?"":0.0);
                        objlast.put("isdebit", false);
                        objlast.put("acctype", "grossprofit1");
                        objlast.put("fmt", "B");
                    }
                    objlast.put("preamount", preBalance == 0 ? preBalance : -preBalance);//Remove '-' sign if 0
                    if (!isForTradingAndProfitLoss) {
                        prectotal = preBalance;
                    }
                    jArrR.put(objlast);
                } else if (balance < 0 || (balance == 0 && openbalance < 0)) {
                    jArrR.put(objlast);
                }

            }
            dtotal += profitLossAmountExpense[0];
            dopentotal += profitLossAmountExpense[2];
            dendtotal += profitLossAmountExpense[4];
            dperiodtotal += profitLossAmountExpense[3];
            predtotal += profitLossAmountExpense[1];
            
            ctotal += profitLossAmount[0];
            copentotal += profitLossAmount[2];
            cendtotal += profitLossAmount[4];
            cperiodtotal += profitLossAmount[3];
            prectotal += profitLossAmount[1];
            if (isForTradingAndProfitLoss && (costofgoodsSoldTotal != 0 || openCostOfGoodsSold != 0 || periodCostOfGoodsSold != 0 || endCostOfGoodsSold != 0 || preCostOfGoodsSold != 0)) { // If "Profit And Loss Report" add "Total Cost of Goods Sold"
                // Total CoGS = Opening + Puchases - Closing
                objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("accountname", "Total Cost of Goods Sold");
                objlast.put("amount", isShowZeroAmountAsBlank && costofgoodsSoldTotal==0.0?"":costofgoodsSoldTotal);
                objlast.put("openingamount", isShowZeroAmountAsBlank && openCostOfGoodsSold==0.0?"":openCostOfGoodsSold);
                objlast.put("periodamount", isShowZeroAmountAsBlank && periodCostOfGoodsSold==0.0?"":periodCostOfGoodsSold);
                objlast.put("endingamount", isShowZeroAmountAsBlank && endCostOfGoodsSold==0.0?"":endCostOfGoodsSold);
                objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank && costofgoodsSoldTotal==0.0?"":authHandler.round((costofgoodsSoldTotal * externalCurrencyRate), companyid));
                objlast.put("preamount", preCostOfGoodsSold);
                objlast.put("fmt", "B");
                objlast.put("acctype", "totalcogs");
                jArrL.put(objlast);
            }
            if (!"CostCenter".equalsIgnoreCase(reportView)) { //Don't show NetLoss,NetProfit for cost center report
                if (isForTradingAndProfitLoss) { // calculate Net Profit as "Gross Profit" - "Total Expenses"
                    balance = ((grossprofit * (-1)) - dtotal) * (-1);
                    openbalance = ((opengrossprofit * (-1)) - dopentotal) * (-1);
                    periodbalance = ((periodgrossprofit * (-1)) - dperiodtotal) * (-1);
                    endbalance = ((endgrossprofit * (-1)) - dendtotal) * (-1);
                    preBalance = ((pregrossprofit * (-1)) - predtotal) * (-1);
                } else {
                    balance = dtotal + ctotal;
                    openbalance = dopentotal + copentotal;
                    periodbalance = dperiodtotal + cperiodtotal;
                    endbalance = dendtotal + cendtotal;
                    preBalance = predtotal + prectotal;
                }
//                boolean lossflag = false;
//                if (balance > 0 || (balance == 0 && openbalance > 0)) {
//                    objlast = new JSONObject();
//                    objlast.put("accountid", "");
//                    objlast.put("level", 0);
//                    objlast.put("isdebit", false);
//                    objlast.put("leaf", true);
//                    if(isForTradingAndProfitLoss){  //Show Label name "Current Year Earnings" only in T&PL Report.
//                        objlast.put("accountname", messageSource.getMessage("acc.report.netprofit.netloss.currentyrearnings", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //SDP-13756 : Current Year Earnings.
//                        objlast.put("amount", isShowZeroAmountAsBlank && balance == 0.0 ? "" : -balance);
//                        objlast.put("openingamount", isShowZeroAmountAsBlank && openbalance == 0.0 ? "" : -openbalance);
//                        objlast.put("periodamount", isShowZeroAmountAsBlank && periodbalance == 0.0 ? "" : -periodbalance);
//                        objlast.put("endingamount", isShowZeroAmountAsBlank && endbalance == 0.0 ? "" : -endbalance);
//                        objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank && balance == 0.0 ? "" : -(balance * externalCurrencyRate));
//                        objlast.put("preamount", isShowZeroAmountAsBlank ? "" : 0);
//                    } else {
//                        objlast.put("accountname", messageSource.getMessage("acc.report.9", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Net Loss");                                            
//                        objlast.put("amount", isShowZeroAmountAsBlank && balance == 0.0 ? "" : balance);
//                        objlast.put("openingamount", isShowZeroAmountAsBlank && openbalance == 0.0 ? "" : openbalance);
//                        objlast.put("periodamount", isShowZeroAmountAsBlank && periodbalance == 0.0 ? "" : periodbalance);
//                        objlast.put("endingamount", isShowZeroAmountAsBlank && endbalance == 0.0 ? "" : endbalance);
//                        objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank && balance == 0.0 ? "" : balance * externalCurrencyRate);
//                        objlast.put("preamount", isShowZeroAmountAsBlank ? "" : 0);
//                    }
//                    objlast.put("fmt", "B");
//                    objlast.put("acctype", "netloss");
//                    lossflag = true;
//                    ctotal -= balance;
//                    cperiodtotal -= periodbalance;
//                    copentotal -= openbalance;
//                    cendtotal -= endbalance;
//                }
//
//                if (preBalance > 0) {
//                    if (!lossflag) {
//                        objlast = new JSONObject();
//                        if (isForTradingAndProfitLoss) {   //Show Label name "Current Year Earnings" only in T&PL Report.
//                            objlast.put("accountname", messageSource.getMessage("acc.report.netprofit.netloss.currentyrearnings", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //SDP-13756 : Current Year Earnings.                        
//                        } else {
//                            objlast.put("accountname", messageSource.getMessage("acc.report.9", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Net Loss");
//                        }
//                        objlast.put("accountid", "");
//                        objlast.put("level", 0);
//                        objlast.put("leaf", true);
//                        objlast.put("amount", isShowZeroAmountAsBlank?"":0.0);
//                        objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank?"":0.0);
//                        objlast.put("acctype", "netloss");
//                        objlast.put("isdebit", false);
//                        objlast.put("fmt", "B");
//                    }
//                    if (isForTradingAndProfitLoss) {
//                        objlast.put("preamount", -preBalance);
//                    } else {
//                        objlast.put("preamount", preBalance);
//                    }
//                    if (!isForTradingAndProfitLoss) {
//                        prectotal -= preBalance;
//                    }
//                    jArrR.put(objlast);
//                } else if (balance > 0 || (balance == 0 && openbalance > 0)) {
//                    jArrR.put(objlast);
//                }

                boolean profitflag = false;
                boolean netDebitFlag = false;
                if ((balance > 0 || (balance == 0 && openbalance > 0)) || (balance < 0 || (balance == 0 && openbalance < 0))) {
                    if (balance < 0 || (balance == 0 && openbalance < 0)) {
                        netDebitFlag = true;
                    }
                    objlast = new JSONObject();
                    objlast.put("accountid", "Net Profit");
                    objlast.put("level", 0);
                    objlast.put("isdebit", netDebitFlag);
                    objlast.put("leaf", true);
//                    if (isForTradingAndProfitLoss) {  //Show Label name "Current Year Earnings" only in T&PL Report.
                        objlast.put("accountname", messageSource.getMessage("acc.report.netprofit.netloss.currentyrearnings", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //SDP-13756 : Current Year Earnings.
//                    } else {
//                        objlast.put("accountname", messageSource.getMessage("acc.report.10", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Net Profit");
//                    }
                    objlast.put("amount", balance == 0 ? (isShowZeroAmountAsBlank?"":balance) : -balance);//Remove '-' sign if 0
                    objlast.put("openingamount", openbalance == 0 ? (isShowZeroAmountAsBlank?"":openbalance) : -openbalance);
                    objlast.put("periodamount", periodbalance == 0 ? (isShowZeroAmountAsBlank?"":periodbalance) : -periodbalance);
                    objlast.put("endingamount", endbalance == 0 ? (isShowZeroAmountAsBlank?"":endbalance) : -endbalance);
                    objlast.put("amountInSelectedCurrency", (balance == 0 ? (isShowZeroAmountAsBlank?"":balance* externalCurrencyRate) : -balance* externalCurrencyRate) );//Remove '-' sign if 0
                    objlast.put("preamount", isShowZeroAmountAsBlank ? "": 0);//Remove '-' sign if 0
                    objlast.put("fmt", "B");
                    objlast.put("acctype", "netprofit");
                    profitflag = true;
                    dtotal -= balance;
                    dopentotal -= openbalance;
                    dperiodtotal -= periodbalance;
                    dendtotal -= endbalance;
                }

                if (preBalance != 0) {
                    if (!profitflag) {
                        objlast = new JSONObject();
//                        if (isForTradingAndProfitLoss) {   //Show Label name "Current Year Earnings" only in T&PL Report.
                            objlast.put("accountname", messageSource.getMessage("acc.report.netprofit.netloss.currentyrearnings", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //SDP-13756 : Current Year Earnings.
//                        } else {
//                            objlast.put("accountname", messageSource.getMessage("acc.report.10", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Net Profit");
//                        }
                        objlast.put("accountid", "");
                        objlast.put("level", 0);
                        objlast.put("leaf", true);
                        objlast.put("amount", isShowZeroAmountAsBlank?"":0.0);
                        objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank?"":0.0);
                        objlast.put("acctype", "netprofit");
                        objlast.put("isdebit", preBalance < 0);
                        objlast.put("fmt", "B");
                    }
                    objlast.put("preamount", -preBalance);
                    if (!isForTradingAndProfitLoss) {
                        predtotal -= preBalance;
                    }
                    jArrL.put(objlast);
                } else if (profitflag) {
                    jArrL.put(objlast);
                }
            }

            if ("CostCenter".equalsIgnoreCase(reportView)) { //Add LIABILITY for cost center report (Tax Amount)
                Group liab_group = accAccountDAOobj.getNewGroupFromOldId(Group.OTHER_CURRENT_LIABILITIES, companyid);
                double tempTotal[] = accReportsService.formatGroupDetails(paramJobj, companyid, liab_group, startDate, endDate, 0, true, jArrR, startPreDate, endPreDate,null); //Bug Fixed #16746
                ctotal += tempTotal[0]; //Bug Fixed #16746
                copentotal += tempTotal[2];
                cendtotal += tempTotal[4];
                cperiodtotal += tempTotal[3];
                prectotal += tempTotal[1]; //Bug Fixed #16746
                liab_group.getName();
            }

            objlast = new JSONObject();
            objlast.put("accountname", messageSource.getMessage("acc.report.7", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Total Debit");
            objlast.put("accountid", "");
            objlast.put("level", 0);
            objlast.put("isdebit", true);
            objlast.put("leaf", true);
            objlast.put("amount", isShowZeroAmountAsBlank && dtotal==0.0?"":dtotal);
            objlast.put("amountInSelectedCurrency", isShowZeroAmountAsBlank && dtotal==0.0?"":dtotal * externalCurrencyRate);
            objlast.put("preamount", predtotal);
            objlast.put("fmt", "T");
            objlast = new JSONObject();
            objlast.put("accountname", messageSource.getMessage("acc.report.8", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));  //"Total Credit");
            objlast.put("accountid", "");
            objlast.put("level", 0);
            objlast.put("isdebit", false);
            objlast.put("leaf", true);
            objlast.put("amount", ctotal == 0 ? (isShowZeroAmountAsBlank?"":ctotal) : -ctotal);//Remove '-' sign if 0
            objlast.put("amountInSelectedCurrency", (ctotal == 0 ? (isShowZeroAmountAsBlank?"":ctotal* externalCurrencyRate) : -ctotal* externalCurrencyRate));//Remove '-' sign if 0
            objlast.put("preamount", prectotal == 0 ? prectotal : -prectotal);//Remove '-' sign if 0
            objlast.put("fmt", "T");
            JSONObject fobj = new JSONObject();
            fobj.put("left", jArrL);
            fobj.put("right", jArrR);
            fobj.put("opentotal", new JSONArray("[" + dopentotal + "," + (copentotal == 0 ? copentotal : -copentotal) + "]"));
            fobj.put("endtotal", new JSONArray("[" + dendtotal + "," + (cendtotal == 0 ? cendtotal : -cendtotal) + "]"));
            fobj.put("total", new JSONArray("[" + dtotal + "," + (ctotal == 0 ? ctotal : -ctotal) + "]"));
            fobj.put("pretotal", new JSONArray("[" + predtotal + "," + (prectotal == 0 ? prectotal : -prectotal) + "]"));
            jobj.put(Constants.RES_data, fobj);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getTradingAndProfitLoss : " + ex.getMessage(), ex);
        } catch (JSONException e) {
            throw ServiceException.FAILURE("getTradingAndProfitLoss : " + e.getMessage(), e);
        }
        return jobj;
    }

    public ModelAndView exportTrailBalanceJasper(HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> trailBalanceMap = new HashMap<String, Object>();
        String mainReport = "TrailBalance.jrxml";
        String subReport = "TrailBalanceSubReport.jrxml";
        java.util.Locale currentLocale = java.util.Locale.US;
        NumberFormat nf = NumberFormat.getNumberInstance(currentLocale);
        nf.setMinimumFractionDigits(2);
        nf.setMaximumFractionDigits(2);
        nf.setGroupingUsed(true);
        TrailBalanceJasper trailBalance = new TrailBalanceJasper();
        ArrayList<TrailBalanceJasper> trailBalanceList = new ArrayList<TrailBalanceJasper>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            trailBalance.setName(company.getCompanyName());
            trailBalance.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            trailBalance.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            trailBalance.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");

            KWLCurrency currency = company.getCurrency();
            trailBalance.setCurrencyinword(currency.getName().toString());

            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            String endDate = df.format(authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
            Calendar c = Calendar.getInstance();
            c.setTime(df.parse(endDate)); // number of days to substract
            c.add(Calendar.DATE, 0);
            endDate = df.format(c.getTime());
            String startDate = df.format(authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
            String date = "From Date : " + startDate + ",To Date : " + endDate;
            trailBalance.setDateRange(date);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            String fiscalstart = df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(df.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            String fiscalend = df.format(c.getTime());
            String period = fiscalstart + " - " + fiscalend;
            trailBalance.setPeriod(period);
            trailBalanceMap = getTrailBalanceJasper(request);

            double debitTotal1 = Double.parseDouble(trailBalanceMap.get("debitTotal1").toString());
            trailBalanceMap.remove("debitTotal1");
            double debitTotal2 = Double.parseDouble(trailBalanceMap.get("debitTotal2").toString());
            trailBalanceMap.remove("debitTotal2");
            double debitTotal3 = Double.parseDouble(trailBalanceMap.get("debitTotal3").toString());
            trailBalanceMap.remove("debitTotal3");
            double creditTotal1 = Double.parseDouble(trailBalanceMap.get("creditTotal1").toString());
            trailBalanceMap.remove("creditTotal1");
            double creditTotal2 = Double.parseDouble(trailBalanceMap.get("creditTotal2").toString());
            trailBalanceMap.remove("creditTotal2");
            double creditTotal3 = Double.parseDouble(trailBalanceMap.get("creditTotal3").toString());
            trailBalanceMap.remove("creditTotal3");

            trailBalance.setDebitTotal1(nf.format(debitTotal1));
            trailBalance.setDebitTotal2(nf.format(debitTotal2));
            trailBalance.setDebitTotal3(nf.format(debitTotal3));
            trailBalance.setCreditTotal1(nf.format(creditTotal1));
            trailBalance.setCreditTotal2(nf.format(creditTotal2));
            trailBalance.setCreditTotal3(nf.format(creditTotal3));
            trailBalanceList.add(trailBalance);
            trailBalanceMap.put("format", "pdf");
            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            trailBalanceMap.put("imagePath", fileName1);

            trailBalanceMap.put("datasource", new JRBeanCollectionDataSource(trailBalanceList));
            
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + mainReport);
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
           
            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + subReport);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            
            trailBalanceMap.put("TrailBalanceSubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(trailBalanceList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, trailBalanceMap, beanColDataSource);
            response.setHeader("Content-Disposition", "attachment;filename=" + "TrailBalance_v1.pdf");
           
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("", trailBalanceMap);
    }

    public Map<String, Object> getTrailBalanceJasper(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONArray jArrL = new JSONArray();
        ArrayList<TrailBalanceSubReportJasper> trailBalanceSubReportList = new ArrayList< TrailBalanceSubReportJasper>();
        HashMap<String, TrailBalanceSubReportJasper> tbSubReportListMap = new HashMap<String, TrailBalanceSubReportJasper>();
        Map<String, Object> trailBalanceMap = new HashMap<String, Object>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            ExtraCompanyPreferences extrapref = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            }
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            JSONObject obj = accFinancialReportsService.getBSorPL_CustomLayout(paramJobj, extrapref, companyid);
            JSONObject jArrR = obj.getJSONObject(Constants.RES_data);
            jArrL = jArrR.getJSONArray("left");

            java.util.Locale currentLocale = java.util.Locale.US;
            NumberFormat df = NumberFormat.getNumberInstance(currentLocale);
            df.setMinimumFractionDigits(2);
            df.setMaximumFractionDigits(2);
            df.setGroupingUsed(true);

            double totalC1 = 0;
            double totalC2 = 0;
            double totalC3 = 0;
            double totalD1 = 0;
            double totalD2 = 0;
            double totalD3 = 0;

            for (int i = 0; i < jArrL.length(); i++) {
                JSONObject jobj = jArrL.getJSONObject(i);
                TrailBalanceSubReportJasper trailBalanceSubReport = new TrailBalanceSubReportJasper();
                int level = Integer.parseInt(jobj.getString("level"));
                String accId = jobj.getString("accountid");

                if (level == 1) {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(Account.class.getName(), jobj.getString("accountid"));
                    Account account = (Account) result.getEntityList().get(0);
                    String accCode = StringUtil.isNullOrEmpty(account.getAcccode()) ? "" : account.getAcccode();
                    trailBalanceSubReport.setCode(accCode != null ? accCode : "");
                    trailBalanceSubReport.setAccountDesc(jobj.optString("accountname", ""));

                    String openingamount = jobj.optString("openingamount", "");
                    if (openingamount != "") {
                        double c1 = Double.parseDouble(jobj.getString("openingamount"));
                        totalC1 = totalC1 + (c1 * (-1));
                        trailBalanceSubReport.setCredit1(df.format(c1 * (-1)));
                    } else {
                        trailBalanceSubReport.setCredit1("");
                    }

                    String periodamount = jobj.optString("periodamount", "");
                    if (periodamount != "") {
                        double c2 = Double.parseDouble(jobj.getString("periodamount"));
                        totalC2 = totalC2 + (c2 * (-1));
                        trailBalanceSubReport.setCredit2(df.format(c2 * (-1)));
                    } else {
                        trailBalanceSubReport.setCredit2("");
                    }

                    String amount = jobj.optString("amount", "");
                    if (amount != "") {
                        double c3 = Double.parseDouble(jobj.getString("amount"));
                        totalC3 = totalC3 + (c3 * (-1));
                        trailBalanceSubReport.setCredit3(df.format(c3 * (-1)));
                    } else {
                        trailBalanceSubReport.setCredit3("");
                    }

                    String openingamountd = jobj.optString("openingamountd", "");
                    if (openingamountd != "") {
                        double d1 = Double.parseDouble(jobj.getString("openingamountd"));
                        totalD1 = totalD1 + d1;
                        trailBalanceSubReport.setDebit1(df.format(d1));
                    } else {
                        trailBalanceSubReport.setDebit1("");
                    }

                    String periodamountd = jobj.optString("periodamountd", "");
                    if (periodamountd != "") {
                        double d2 = Double.parseDouble(jobj.getString("periodamountd"));
                        totalD2 = totalD2 + d2;
                        trailBalanceSubReport.setDebit2(df.format(d2));
                    } else {
                        trailBalanceSubReport.setDebit2("");
                    }

                    String amountd = jobj.optString("amountd", "");
                    if (amountd != "") {
                        double d3 = Double.parseDouble(jobj.getString("amountd"));
                        totalD3 = totalD3 + d3;
                        trailBalanceSubReport.setDebit3(df.format(d3));
                    } else {
                        trailBalanceSubReport.setDebit3("");
                    }

                    trailBalanceSubReportList.add(trailBalanceSubReport);
                }
                tbSubReportListMap.put(accId, trailBalanceSubReport);
            }

            trailBalanceMap.put("TrailBalanceSubReportData", new JRBeanCollectionDataSource(trailBalanceSubReportList));
            trailBalanceMap.put("debitTotal1", totalD1);
            trailBalanceMap.put("debitTotal2", totalD2);
            trailBalanceMap.put("debitTotal3", totalD3);
            trailBalanceMap.put("creditTotal1", totalC1);
            trailBalanceMap.put("creditTotal2", totalC2);
            trailBalanceMap.put("creditTotal3", totalC3);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getTrailBalanceJasper : " + ex.getMessage(), ex);
        }
        return trailBalanceMap;
    }

    public ModelAndView exportLayoutPnLAndBalancesheet(HttpServletRequest request, HttpServletResponse response) {
       
        JSONObject jobj = new JSONObject();
        JSONArray jArrL = new JSONArray();
        JSONArray jArrR = new JSONArray();
        String reportView = request.getParameter("reportView") != null ? request.getParameter("reportView") : "";
        String view = "jsonView_ex";
        String fileType = request.getParameter("filetype");
        boolean isTrialBalance = request.getParameter("isTrialBalance") != null ? Boolean.parseBoolean(request.getParameter("isTrialBalance")) : false;
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            boolean isBalanceSheet = paramJobj.optString("isBalanceSheet",null) != null ? Boolean.parseBoolean(paramJobj.optString("isBalanceSheet")) : false;
            
            String companyid =paramJobj.getString(Constants.companyKey);
            ExtraCompanyPreferences extrapref = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            }
            if (reportView.equals("TradingAndProfitLoss")) {
                if (extrapref != null && extrapref.isShowAllAccountsInPnl()) {//Check to show all accounts.
                    request.setAttribute("monthlyreport", "MonthlyReport");
                    paramJobj.put("monthlyreport", "MonthlyReport");
                }
            }else if (reportView.equals("BalanceSheet")) {
                if (extrapref != null && extrapref.isShowallaccountsinbs()) {//Check to show all accounts.
                    request.setAttribute("monthlyreport", "MonthlyReport");
                    paramJobj.put("monthlyreport", "MonthlyReport");
                }
            }
            paramJobj.put(Constants.extraCompanyPreferences, extrapref);
            paramJobj = accFinancialReportsService.getCommonParametersForCustomLayout(paramJobj, request);
            if (StringUtil.equal(fileType, "print")) {
                double tradingAmount[] = accFinancialReportsService.getBSorPL_CustomLayout(paramJobj, jArrL, companyid, extrapref);
                jobj.put(Constants.RES_data, jArrL);
                String GenerateDate = authHandler.getDateFormatter(paramJobj).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                if (fileType.equals("csv") || fileType.equals("xls")) {
                    double tradingAmount[] = accFinancialReportsService.getBSorPL_CustomLayout(paramJobj, jArrL, companyid, extrapref);

                    if (reportView.equals("TrialBalance")) {
                        for (int cnt = 0; cnt < jArrL.length(); cnt++) {
                            JSONObject tempObj = jArrL.getJSONObject(cnt);
                            double openingAmt = tempObj.optDouble("openingamount", 0.0);
                            if (openingAmt > 0) {
                                tempObj.put("openingamount", "");
                                tempObj.put("openingamountd", openingAmt);
                            }
                            double periodamount = tempObj.optDouble("periodamount", 0.0);
                            if (periodamount > 0) {
                                tempObj.put("periodamount", "");
                                tempObj.put("periodamountd", periodamount);
                            }
                            double amount = tempObj.optDouble("amount", 0.0);
                            if (amount > 0) {
                                tempObj.put("amount", "");
                                tempObj.put("amountd", amount);
                            }
                        }
                    }
                    jobj.put(Constants.RES_data, jArrL);
                    exportDaoObj.processRequest(request, response, jobj);
                } else {
                    double tradingAmount[] = accFinancialReportsService.getBSorPL_CustomLayout(paramJobj, jArrL, companyid, extrapref);
                    JSONObject fobj = new JSONObject();
                    fobj.put("left", jArrL);
                    fobj.put("right", jArrR);
                    fobj.put("total", new JSONArray("[" + 0 + "," + 0 + "]"));
                    fobj.put("pretotal", new JSONArray("[" + 0 + "," + 0 + "]"));
                    jobj.put(Constants.RES_data, fobj);

                    String currencyid =paramJobj.getString(Constants.globalCurrencyKey);
                    java.text.DateFormat formatter = authHandler.getDateOnlyFormat();
                    String logoPath = ProfileImageServlet.getProfileImagePath(request, true, null);
                    java.io.ByteArrayOutputStream baos = null;
                    String filename = paramJobj.optString("filename",null);
                    String comName = sessionHandlerImpl.getCompanyName(request);
                    Date endDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString("enddate"));
                    Date startDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString("stdate"));
                    Date endPreDate = null;
                    if (!StringUtil.isNullOrEmpty(paramJobj.optString("endpredate",null))) {
                        endPreDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString("endpredate"));
                    }
                    Calendar cal = Calendar.getInstance();
                    String comAdd = authHandlerDAO.getCompanyAddress(paramJobj.getString(Constants.companyKey));
                    cal.set(1900 + endDate.getYear(), endDate.getMonth(), endDate.getDate());           
                    if (endPreDate != null) {
                        cal = Calendar.getInstance();
                        cal.set(1900 + endPreDate.getYear(), endPreDate.getMonth(), endPreDate.getDate(), 00, 00, 00);                 
                    }
                    if ((fileType.equals("pdf"))) {
                        baos = ExportrecordObj.exportLayoutPnLAndBalancesheetPDF(request, currencyid, formatter, logoPath, comName, jobj, startDate, endDate, 2, isBalanceSheet, comAdd, endPreDate, extrapref);
                    }
                    if (baos != null) {
                        ExportrecordObj.writeDataToFile(filename + "." + fileType, baos, response);
                    }
                }
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView exportMonthlyCustomLayout(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        String view = "jsonView_ex";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            String companyid = paramJobj.getString(Constants.companyKey);
            ExtraCompanyPreferences extrapref = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            }
            paramJobj.put("stdate", paramJobj.optString(Constants.REQ_startdate));
            if (paramJobj.has(Constants.REQ_startdate)) {
                paramJobj.remove(Constants.REQ_startdate);
            }
            jobj = accFinancialReportsService.getMonthlyCustomLayout(paramJobj, extrapref, companyid);
            JSONObject dataJobj = jobj.optJSONObject(Constants.RES_data);
            JSONArray jArrL = dataJobj.optJSONArray("left");
            JSONObject exportDataJobj = new JSONObject();
            exportDataJobj.put(Constants.RES_data, jArrL);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getOnlyDateFormat().format(new Date());
                exportDataJobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, exportDataJobj);
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public JSONArray sortJsonArrayOnOpeningBalance(JSONArray array, String Order_Dir) throws JSONException {
        List<JSONObject> jsons = new ArrayList<JSONObject>();
        try {
            for (int i = 0; i < array.length(); i++) {
                jsons.add(array.getJSONObject(i));
            }
            if (Order_Dir.equals("ASC")) {
                Collections.sort(jsons, new Comparator<JSONObject>() {

                    @Override
                    public int compare(JSONObject ja, JSONObject jb) {
                        double opnBalA = 0, opnBalB = 0;
                        try {
                            opnBalA = Double.parseDouble(ja.optString("openbalanceinbase", "0"));
                            opnBalB = Double.parseDouble(jb.optString("openbalanceinbase", "0"));
                        } catch (Exception ex) {
                            Logger.getLogger(accAccountController.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        if (opnBalA > opnBalB) {
                            return 1;
                        } else {
                            return -1;
                        }
                    }
                });
            } else {
                Collections.sort(jsons, new Comparator<JSONObject>() {

                    @Override
                    public int compare(JSONObject ja, JSONObject jb) {
                        double opnBalA = 0, opnBalB = 0;
                        try {
                            opnBalA = Double.parseDouble(ja.optString("openbalanceinbase", "0"));
                            opnBalB = Double.parseDouble(jb.optString("openbalanceinbase", "0"));
                        } catch (Exception ex) {
                            Logger.getLogger(accAccountController.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        if (opnBalA > opnBalB) {
                            return -1;
                        } else {
                            return 1;
                        }
                    }
                });
            }

        } catch (JSONException ex) {
            Logger.getLogger(accAccountController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accAccountController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new JSONArray(jsons);
    }

    public JSONArray sortJsonArrayOnMasterType(JSONArray array, String Order_Dir) throws JSONException {
        List<JSONObject> jsons = new ArrayList<JSONObject>();
        try {
            for (int i = 0; i < array.length(); i++) {
                jsons.add(array.getJSONObject(i));
            }
            if (Order_Dir.equals("ASC")) {
                Collections.sort(jsons, new Comparator<JSONObject>() {

                    @Override
                    public int compare(JSONObject ja, JSONObject jb) {
                        String opnBalA = "", opnBalB = "";
                        try {
                            opnBalA = ja.optString("mastertypevaluestring", "");
                            opnBalB = jb.optString("mastertypevaluestring", "");
                        } catch (Exception ex) {
                            Logger.getLogger(accAccountController.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        return opnBalA.compareTo(opnBalB);
                    }
                });
            } else {
                Collections.sort(jsons, new Comparator<JSONObject>() {

                    @Override
                    public int compare(JSONObject ja, JSONObject jb) {
                        String opnBalA = "", opnBalB = "";
                        try {
                            opnBalA = ja.optString("mastertypevaluestring", "");
                            opnBalB = jb.optString("mastertypevaluestring", "");
                        } catch (Exception ex) {
                            Logger.getLogger(accAccountController.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        return -opnBalA.compareTo(opnBalB);
                    }
                });
            }

        } catch (JSONException ex) {
            Logger.getLogger(accAccountController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accAccountController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new JSONArray(jsons);
    }

    public ModelAndView getAccounts(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = true;
        boolean noactivity = false;
        String msg = "";
        double endingBalanceSummary = 0;
        boolean accMapFlag = false;
        try {
            HashMap<String, Object> requestParams = accAccountHandler.getRequestMap(request);

            if (requestParams.containsKey("acctypes") && requestParams.get("acctypes") != null && StringUtil.equal(requestParams.get("acctypes").toString(), "3")) {
                noactivity = true;
            }
            accMapFlag = request.getParameter("accMapFlag") != null ? Boolean.parseBoolean(request.getParameter("accMapFlag").toString()) : false;
            if (accMapFlag) {
                requestParams.put(Constants.companyKey, request.getParameter("childcompanyid"));
            }
            String companyid = sessionHandlerImpl.getCompanyid(request);
            boolean isCustomColumnExport = true;
            boolean isSplitOpeningBalanceAmount = accInvoiceCommon.isSplitOpeningBalanceAmount(companyid);
            boolean isSplitOpeningBalanceSearch = false;
            if(isSplitOpeningBalanceAmount){
                isSplitOpeningBalanceSearch = accInvoiceCommon.isSplitOpeningBalanceSearch(request.getParameter(Constants.Acc_Search_Json), sessionHandlerImpl.getCompanyid(request));
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter(Constants.moduleid)) && Integer.parseInt(request.getParameter(Constants.moduleid))== Constants.Account_Statement_ModuleId){
                isSplitOpeningBalanceSearch=false;
            }
            boolean includeExcludeChildBalances = request.getParameter("includeExcludeChildBalances") != null ? Boolean.parseBoolean(request.getParameter("includeExcludeChildBalances")) : true;
            requestParams.put("isSplitOpeningBalanceSearch", isSplitOpeningBalanceSearch);
            requestParams.put("isSplitOpeningBalanceAmount", isSplitOpeningBalanceAmount);
            requestParams.put(Constants.companyKey, companyid);
            boolean isExciseApplicable = accCompanyPreferencesObj.isExciseApplicable(companyid);
            requestParams.put("isExciseApplicable", isExciseApplicable);
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            requestParams.put("userid", sessionHandlerImpl.getUserid(request));            
             /**
             * This Function will use when Users Visibility Feature is Enable
             * Append user condition while querying data
             */
            String customdatajoin = ""; 
            String usercondition = "";
            ExtraCompanyPreferences extraPref = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extraPref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            }
            if (extraPref != null && extraPref.isUsersVisibilityFlow()) {
                KwlReturnObject object = accountingHandlerDAOobj.getObject(User.class.getName(),requestParams.get("userid").toString());
                User user = object.getEntityList().size() > 0 ? (User) object.getEntityList().get(0) : null;
                if (!AccountingManager.isCompanyAdmin(user)) {
                    /**
                     * if Users visibility enable and current user is not admin
                     */
                    Map<String, Object> reqMap = new HashMap();
                    requestParams.put("isUserVisibilityFlow", true);
                    reqMap.put("companyid",requestParams.get("companyid").toString());
                    reqMap.put("userid",requestParams.get("userid").toString());
                    reqMap.put("jointable", "acd");
                    reqMap.put("moduleid", Constants.Account_Statement_ModuleId);
                    String custcondition = fieldManagerDAOobj.appendUsersCondition(reqMap);
                    if (!StringUtil.isNullOrEmpty(custcondition)) {
                        /**
                         * If mapping found with dimension
                         */
                         usercondition = " and (" + custcondition + ")";
                      requestParams.put("appendusercondtion", usercondition);
                    } else {
                        /**
                         * If no Mapping found for current ser then return
                         * function call
                         */
                         jobj.put("totalCount", 0);
                         jobj.put("endingBalanceSummary", endingBalanceSummary);
                         jobj.put(Constants.RES_success, issuccess);
                         jobj.put(Constants.RES_msg, msg);
                        
                        return new ModelAndView("jsonView", "model", jobj.toString());
                    }
                }
            }
            /**
             * this is used for COA Report only.
             */
            boolean isFromCOA = request.getParameter("isFromCOA") != null ? Boolean.parseBoolean(request.getParameter("isFromCOA")) : false;
            requestParams.put("isFromCOA", isFromCOA);
            KwlReturnObject result = accAccountDAOobj.getAccounts(requestParams);
            List list = result.getEntityList();
            if (isSplitOpeningBalanceAmount && isSplitOpeningBalanceSearch && !StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_Search_Json))) {
                request.setAttribute("filterConjuctionCriteria", request.getParameter(InvoiceConstants.Filter_Criteria));
                request.setAttribute("Searchjson", request.getParameter(Constants.Acc_Search_Json));
                request.setAttribute("isSplitOpeningBalanceAmount", true);
                request.setAttribute("isSplitOpeningBalanceSearch", true);
            }
            Map<String, Object> accountJsonparamMap = new HashMap<>();
            accountJsonparamMap.put("noactivity", noactivity);
            accountJsonparamMap.put("isCustomColumnExport", isCustomColumnExport);
            accountJsonparamMap.put("isCOA", true);
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("isSplitOpeningBalanceAmount",isSplitOpeningBalanceAmount);
            jobj = accFinancialReportsService.getAccountJson(paramJobj, list, accCurrencyDAOobj, accountJsonparamMap);
            JSONArray jSONArray = jobj.getJSONArray(Constants.RES_data);

            HashMap<String, Object> balancerequestParams = AccountingManager.getGlobalParams(request);
            balancerequestParams.put("costcenter", request.getParameter("costcenter"));
            balancerequestParams.put(Constants.Acc_Search_Json, request.getParameter(Constants.Acc_Search_Json));
            balancerequestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
            balancerequestParams.put("templatecode", (StringUtil.isNullOrEmpty(request.getParameter("templatecode"))) ? -1 : Integer.parseInt(request.getParameter("templatecode")));
            String selectedCurrencyIds = request.getParameter("currencyIds");
            if (!StringUtil.isNullOrEmpty(selectedCurrencyIds)) {
                balancerequestParams.put("currencyFlag", true);
                balancerequestParams.put("selectedCurrencyIds", selectedCurrencyIds);
            }
            for (int count = 0; count < jSONArray.length(); count++) {
                double balance = 0;
                if (jSONArray.getJSONObject(count).has("accid")) {
                    String accId = jSONArray.getJSONObject(count).getString("accid");
                    KwlReturnObject accountResult = accountingHandlerDAOobj.getObject("com.krawler.hql.accounting.Account", accId);
                    if (accMapFlag) {
                        if (accountResult.getEntityList().get(0) != null) {
                            boolean autoMap = request.getParameter("autoMap") != null ? Boolean.parseBoolean(request.getParameter("autoMap").toString()) : false;
                            Account account = (Account) accountResult.getEntityList().get(0);
                            String parentcompanyid = sessionHandlerImpl.getCompanyid(request);
                            jSONArray = getMappedParentAccount(account, jSONArray, count, parentcompanyid, autoMap);
                        }
                    } else {
                        jSONArray.getJSONObject(count).put("isOnlyAccount", "true");
                        if (!noactivity) {
                            if (accountResult.getEntityList().get(0) != null) {
                                Date stDate = new Date(0);
                                Date endDate = new Date();
                                Account account = (Account) accountResult.getEntityList().get(0);
                                if (!account.isDeleted()) {
                                    List childlist = new ArrayList(account.getChildren());
                                   
                                    if (childlist.isEmpty()) {
                                        balance = accReportsService.getAccountClosingBalance(paramJobj, balancerequestParams, account.getID(), stDate, endDate, jSONArray.getJSONObject(count).optDouble("accountopenbalance", 0), true,null);
                                    } else {
                                        double accountbalance = accReportsService.getAccountClosingBalance(paramJobj, balancerequestParams, account.getID(), stDate, endDate, jSONArray.getJSONObject(count).optDouble("accountopenbalance", 0), true,null);
                                        if (includeExcludeChildBalances) {
                                            balance = accReportsService.getTotalAccountBalance(account, accountbalance, paramJobj);
                                        } else {
                                            balance = accountbalance;
                                        }
                                    }
                                    if ((account.getParent() == null && includeExcludeChildBalances) || !includeExcludeChildBalances) {
                                        endingBalanceSummary += balance;
                                    }
                                }
                            }
                        }
                        jSONArray.getJSONObject(count).put("endingBalance", balance);
                    }
                }
            }
            jobj.put("endingBalanceSummary", endingBalanceSummary);
            jobj.put("totalCount", result.getRecordTotalCount());
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = "" + ex.getMessage();
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getAccountBalanceInSelectedCurrency(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = true;
        String msg = "";
        double endingBalance = 0;
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            String accountid = paramJobj.optString("accountid",null);
            KwlReturnObject accountResult = accountingHandlerDAOobj.getObject("com.krawler.hql.accounting.Account", accountid);
            if (accountResult.getEntityList().get(0) != null) {
                Date stDate = new Date(0);
                Date endDate = new Date();
                Account account = (Account) accountResult.getEntityList().get(0);
                if (!account.isDeleted()) {
                    List childlist = new ArrayList(account.getChildren());
                    if (childlist.isEmpty()) {
                        endingBalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(paramJobj, account.getID(), stDate, endDate);
                    } else {
                        double accountbalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(paramJobj, account.getID(), stDate, endDate);
                        endingBalance = accFinancialReportsService.getTotalAccountBalanceInSelectedCurrency(account, accountbalance, paramJobj);
                    }
                }
            }
            jobj.put("endingBalance", endingBalance);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = "" + ex.getMessage();
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    /*
     * Following getGeneralLedger method logic is similar to above getAccounts
     * method but some changes are for General legder report.
     */
    public ModelAndView getGeneralLedger(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = true;
        boolean noactivity = false;
        String msg = "";
        String selectedBalPLId = "";
        double endingBalanceSummary = 0, openbalanceSummary = 0;
        try {
            boolean isFirstTimeLoad = !StringUtil.isNullOrEmpty(request.getParameter("isFirstTimeLoad")) ? Boolean.parseBoolean(request.getParameter("isFirstTimeLoad")) : false;
            if(!isFirstTimeLoad){
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object> requestParams = accAccountHandler.getRequestMap(request);
            boolean isGeneralLedger = false;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("isGeneralLedger",null))) {
                isGeneralLedger = Boolean.parseBoolean(paramJobj.optString("isGeneralLedger",null));
                requestParams.put("generalLedgerFlag", isGeneralLedger);
            }
            String selectedAccountIds = paramJobj.optString("accountIds");
            if (!StringUtil.isNullOrEmpty(selectedAccountIds)) {
                requestParams.put("selectedAccountIds", selectedAccountIds);
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("balPLId",null))) {
                selectedBalPLId = paramJobj.optString("balPLId");
                requestParams.put("selectedBalPLId", selectedBalPLId);
            }
            if (requestParams.containsKey("acctypes") && requestParams.get("acctypes") != null && StringUtil.equal(requestParams.get("acctypes").toString(), "3")) {
                    noactivity = true;
                }

            String fileType = paramJobj.optString("filetype",null);

            Date startDate = new Date(0);
            Date endDate = new Date();
            String sDate = paramJobj.optString("startDate",null);
            String eDate = paramJobj.optString("endDate",null);
            double openingBalance = 0d, calculateOpeningBalance = 0, calculateOpenbalanceInbase = 0d, openbalanceInbase = 0d, endingBalance = 0d, calculatePeriodBalance = 0d, periodBalance = 0d;
            if (!StringUtil.isNullOrEmpty(sDate)) {
                startDate = authHandler.getDateOnlyFormat().parse(sDate);
            }
            if (!StringUtil.isNullOrEmpty(eDate)) {
                endDate = authHandler.getDateOnlyFormat().parse(eDate);
            }
            Calendar startCal = Calendar.getInstance();
            startCal.setTime(startDate);
            startCal.add(Calendar.DATE, -1);

            boolean includeExcludeChildBalances = paramJobj.optString("includeExcludeChildBalances",null) != null ? Boolean.parseBoolean(paramJobj.optString("includeExcludeChildBalances")) : true;
            boolean excludePreviousYear = paramJobj.optString("excludePreviousYear",null) != null ? Boolean.parseBoolean(paramJobj.optString("excludePreviousYear")) : false;
            Date start = new Date(1970);
            
//            Date startDateByexcludingPreYear = accReportsService.getDateForExcludePreviousYearBalanceFilter(request, startDate);
            Date startDateByexcludingPreYear = accReportsService.getDateForExcludePreviousYearBalanceFilter(paramJobj, startDate);
            Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();  //end date used to calculate Opening Balance

            boolean isForBS_PL_to_GL = false;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("isForBS_PL_to_GL",null))) {
                isForBS_PL_to_GL = Boolean.parseBoolean(paramJobj.optString("isForBS_PL_to_GL"));
                requestParams.put("isForBSPLtoGL", isForBS_PL_to_GL);
            }
            ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), paramJobj.getString(Constants.companyKey));
            extraCompanyPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            boolean showAllAccountsInGl = false;
            if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAllAccountInGl()) {//Check to show all accounts.
                showAllAccountsInGl = extraCompanyPreferences.isShowAllAccountInGl();
            }
            boolean isCustomColumnExport = false;
            boolean showChildAccountsInGl = false;
            if (extraCompanyPreferences != null && extraCompanyPreferences.isShowChildAccountsInGl()) {//Check to show Child accounts.
                showChildAccountsInGl = extraCompanyPreferences.isShowChildAccountsInGl();
            }
            int startlim = Integer.parseInt(paramJobj.optString(Constants.start,"0"));
            int limit = Integer.parseInt(paramJobj.optString(Constants.limit,"30"));
            requestParams.put("showAllAccountsInGl", false);
            requestParams.put("startDate", startDate);
            requestParams.put("endDate", endDate);
            boolean isSplitOpeningBalanceAmount = accInvoiceCommon.isSplitOpeningBalanceAmount(paramJobj.getString(Constants.companyKey));
            boolean isSplitOpeningBalanceSearch = accInvoiceCommon.isSplitOpeningBalanceSearch(paramJobj.optString(Constants.Acc_Search_Json),paramJobj.getString(Constants.companyKey));
            HashMap<String,Object> hashMap=new HashMap();
            hashMap.put("searchJson", paramJobj.optString(Constants.Acc_Search_Json));
            hashMap.put(Constants.companyKey, paramJobj.getString(Constants.companyKey));
            boolean isSearchFieldForAsset = accInvoiceCommon.isSearchFieldForAsset(hashMap);
            requestParams.put("isSplitOpeningBalanceSearch", isSplitOpeningBalanceSearch);
            requestParams.put("isSplitOpeningBalanceAmount", isSplitOpeningBalanceAmount);
            requestParams.put("isSearchFieldForAsset", isSearchFieldForAsset);
            requestParams.put("showChildAccountsInGl", showChildAccountsInGl);
            requestParams.put("includeExcludeChildBalances", includeExcludeChildBalances);
            String tempSearchjson = "";
            if (isSearchFieldForAsset && requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                tempSearchjson = requestParams.get("searchJson").toString();
                tempSearchjson = accInvoiceCommon.getJsonStringForSearch(tempSearchjson, paramJobj.getString(Constants.companyKey));
                requestParams.put("tempSearchjson", tempSearchjson);
            }
            KwlReturnObject result = accAccountDAOobj.getAccounts(requestParams);
            List list = result.getEntityList();
            paramJobj.put("showChildAccountsInGl", showChildAccountsInGl);
            String filterConjuctionCriteria = paramJobj.optString("filterConjuctionCriteria",null) != null ? paramJobj.optString("filterConjuctionCriteria") : "";
            String Searchjson = paramJobj.optString("searchJson",null) != null ? paramJobj.optString("searchJson") : "";
            request.setAttribute("filterConjuctionCriteria", filterConjuctionCriteria);
            request.setAttribute("Searchjson", Searchjson);
            paramJobj.put("filterConjuctionCriteria", filterConjuctionCriteria);
            paramJobj.put("Searchjson", Searchjson);
            Map<String, Object> accountJsonparamMap = new HashMap<String, Object>();
            accountJsonparamMap.put("noactivity", noactivity);
            accountJsonparamMap.put("isCustomColumnExport", isCustomColumnExport);
            accountJsonparamMap.put("isGeneralLedger", isGeneralLedger);
            accountJsonparamMap.put("showChildAccountsInGl", showChildAccountsInGl);
            accountJsonparamMap.put("includeExcludeChildBalances", includeExcludeChildBalances);
            jobj = accFinancialReportsService.getAccountJson(paramJobj, list, accCurrencyDAOobj, accountJsonparamMap);
            paramJobj.remove("showChildAccountsInGl");
            request.removeAttribute("showChildAccountsInGl");
            JSONArray nonZerojSONArray = new JSONArray();
            JSONArray parentChildArray = new JSONArray();
            JSONArray jSONArray = jobj.getJSONArray(Constants.RES_data);
            
            // collect all selected currencies from UI here only 
            String selectedCurrencyIds = paramJobj.optString("currencyIds",null) != null ? paramJobj.optString("currencyIds") : "";
            String[] selectedCurrencyIdsArray = null;
            if (!StringUtil.isNullOrEmpty(selectedCurrencyIds)) {
                selectedCurrencyIdsArray = selectedCurrencyIds.split(",");
            }
            /**
             * Need to put advance search parameter to calculate period balance
             */
            paramJobj.put(InvoiceConstants.Filter_Criteria, filterConjuctionCriteria);
            paramJobj.put(Constants.Acc_Search_Json, Searchjson);
            for (int count = 0; count < jSONArray.length(); count++) {
                if (jSONArray.getJSONObject(count).has("accid")) {
                    boolean isParent = false;
                    String accId = jSONArray.getJSONObject(count).getString("accid");
                    String accounttypestring = jSONArray.getJSONObject(count).getString("accounttypestring");
                    KwlReturnObject accountResult = accountingHandlerDAOobj.getObject("com.krawler.hql.accounting.Account", accId);

                    if (!isGeneralLedger) {
                        KwlReturnObject custResult = accountingHandlerDAOobj.getObject("com.krawler.hql.accounting.Customer", accId);
                        KwlReturnObject venResult = accountingHandlerDAOobj.getObject("com.krawler.hql.accounting.Vendor", accId);
                        if (custResult.getEntityList().get(0) != null || venResult.getEntityList().get(0) != null) {
                            jSONArray.getJSONObject(count).put("isOnlyAccount", "false");
                        } else {
                            jSONArray.getJSONObject(count).put("isOnlyAccount", "true");
                        }
                    }
                    if (!noactivity) {
                        if (isGeneralLedger) {
                            if (excludePreviousYear && accounttypestring.equals(Group.ACC_TYPE_PROFITLOSSSTR)) {
                                start = startDateByexcludingPreYear;
                            } else {
                                start = new Date(1970);
                            }

                            if (accountResult.getEntityList().get(0) != null) {
                                Account account = (Account) accountResult.getEntityList().get(0);
                                List childlist = new ArrayList(account.getChildren());
                                if (!account.isDeleted()) {
                                    openingBalance = jSONArray.getJSONObject(count).getDouble("openbalance");
                                    openbalanceInbase = jSONArray.getJSONObject(count).getDouble("openbalanceinbase");
                                    boolean currencyFlag = false;
                                    if (selectedCurrencyIdsArray != null) {
                                        for (String obj : selectedCurrencyIdsArray) {
                                            if (account.getCurrency().getCurrencyID().equals(obj)) {
                                                currencyFlag = false;
                                                break;
                                            } else {
                                                currencyFlag = true;
                                            }
                                        }
                                    }
                                    if (childlist.isEmpty()) {
                                        request.setAttribute("isPeriod", true);
                                        paramJobj.put("isPeriod", true);
                                        periodBalance = accReportsService.getAccountBalanceWithOutClosing(paramJobj, account.getID(), startDate, endDate,null);
                                        request.removeAttribute("isPeriod");
                                        paramJobj.remove("isPeriod");
//                                        calculateOpeningBalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openingBalance; //ERP-15020 : Subtracted 1 day to handle opening balance when Start & End date is same from report
                                        calculateOpeningBalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(paramJobj, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openingBalance; //ERP-15020 : Subtracted 1 day to handle opening balance when Start & End date is same from report
//                                        calculateOpenbalanceInbase = accReportsService.getAccountBalanceWithOutClosing(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openbalanceInbase;
                                        calculateOpenbalanceInbase = accReportsService.getAccountBalanceWithOutClosing(paramJobj, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate,null) + openbalanceInbase;
                                        
                                        calculatePeriodBalance = periodBalance;
                                        if (account.getCreationDate().compareTo(startDate) < 0) {
                                            calculateOpeningBalance -= openingBalance;
                                            calculateOpenbalanceInbase -= openbalanceInbase;
                                        } else if (account.getCreationDate().compareTo(startDate) == 0) {
                                            calculateOpeningBalance -= openingBalance;
                                            calculateOpenbalanceInbase -= openbalanceInbase;
                                            if (currencyFlag) {
                                                calculatePeriodBalance = periodBalance;
                                            } else {
                                                calculatePeriodBalance = periodBalance - openbalanceInbase;
                                            }
                                        } else if (account.getCreationDate().compareTo(startDate) > 0 && (account.getCreationDate().compareTo(endDate) < 0 || account.getCreationDate().compareTo(endDate) == 0)) {  // Added "account.getCreationDate().compareTo(endDate)==0" to match GL Report when A/c Creation Date & Report end date is same.
                                            if (currencyFlag) {
                                                calculateOpeningBalance -= openingBalance;
                                                calculateOpenbalanceInbase -= openbalanceInbase;
                                                calculatePeriodBalance = periodBalance;
                                            } else {
                                                calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                calculateOpenbalanceInbase -= openbalanceInbase;
                                            }
                                        }
                                        endingBalance = calculateOpenbalanceInbase + calculatePeriodBalance;
                                    } else {
                                        if (showChildAccountsInGl) {
                                            if (includeExcludeChildBalances) {
                                                request.setAttribute("isPeriod", true);
                                                //Calculate parent period balance
                                                periodBalance = getAccountBalance(request, account.getID(), startDate, endDate);
                                                //Calculate child period balance
                                                periodBalance = accReportsService.getParentOpeningBalance(account, periodBalance, request, startDate, endDate);
                                                calculateOpeningBalance = openingBalance;//getOpeningBalance+openingBalance;
                                                request.setAttribute("isPeriod", false);
                                                calculateOpenbalanceInbase = getAccountBalance(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate);
                                                calculateOpenbalanceInbase = accReportsService.getParentOpeningBalance(account, calculateOpenbalanceInbase, request, excludePreviousYear ? start : new Date(0), openBalEndDate);
                                            } else {
                                                request.setAttribute("isPeriod", true);
                                                paramJobj = StringUtil.convertRequestToJsonObject(request);
                                                periodBalance = accReportsService.getAccountBalanceWithOutClosing(paramJobj, account.getID(), startDate, endDate,null);
                                                request.setAttribute("isPeriod", false);
                                                paramJobj.put("isPeriod",false);
//                                                calculateOpeningBalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openingBalance;
                                                calculateOpeningBalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(paramJobj, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openingBalance;
                                                calculateOpenbalanceInbase = accReportsService.getAccountBalanceWithOutClosing(paramJobj, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate,null) + openbalanceInbase;
                                                calculatePeriodBalance = periodBalance;

                                                if (account.getCreationDate().compareTo(startDate) < 0) {
                                                    calculateOpeningBalance -= openingBalance;
                                                    calculateOpenbalanceInbase -= openbalanceInbase;
                                                } else if (account.getCreationDate().compareTo(startDate) == 0) {
                                                    calculateOpeningBalance -= openingBalance;
                                                    calculateOpenbalanceInbase -= openbalanceInbase;
                                                    if (currencyFlag) {
                                                        calculatePeriodBalance = periodBalance;
                                                    } else {
                                                        calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                    }
                                                } else if (account.getCreationDate().compareTo(startDate) > 0 && account.getCreationDate().compareTo(endDate) < 0) {
                                                    if (currencyFlag) {
                                                        calculateOpeningBalance -= openingBalance;
                                                        calculateOpenbalanceInbase -= openbalanceInbase;
                                                        calculatePeriodBalance = periodBalance;
                                                    } else {
                                                        calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                        calculateOpenbalanceInbase -= openbalanceInbase;
                                                    }
                                                }
                                            }
                                        } else {
                                            if (includeExcludeChildBalances) {
                                                request.setAttribute("isPeriod", true);
                                                //Calculate parent period balance
                                                periodBalance = getAccountBalance(request, account.getID(), startDate, endDate);
                                                //Calculate child period balance
                                                periodBalance = accReportsService.getParentOpeningBalance(account, periodBalance, request, startDate, endDate);
                                                calculateOpeningBalance = openingBalance;//getOpeningBalance+openingBalance;
                                                request.setAttribute("isPeriod", false);
                                                calculateOpenbalanceInbase = getAccountBalance(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate);
                                                calculateOpenbalanceInbase = accReportsService.getParentOpeningBalance(account, calculateOpenbalanceInbase, request, excludePreviousYear ? start : new Date(0), openBalEndDate);
                                            } else {
                                                request.setAttribute("isPeriod", true);
                                                paramJobj = StringUtil.convertRequestToJsonObject(request);
//                                                periodBalance = accReportsService.getAccountBalanceWithOutClosing(request, account.getID(), startDate, endDate);
                                                periodBalance = accReportsService.getAccountBalanceWithOutClosing(paramJobj, account.getID(), startDate, endDate,null);
                                                paramJobj.put("isPeriod",false);
//                                                calculateOpeningBalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openingBalance;
                                                calculateOpeningBalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(paramJobj, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openingBalance;
//                                                calculateOpenbalanceInbase = accReportsService.getAccountBalanceWithOutClosing(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openbalanceInbase;
                                                calculateOpenbalanceInbase = accReportsService.getAccountBalanceWithOutClosing(paramJobj, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate,null) + openbalanceInbase;
                                                calculatePeriodBalance = periodBalance;

                                                if (account.getCreationDate().compareTo(startDate) < 0) {
                                                    calculateOpeningBalance -= openingBalance;
                                                    calculateOpenbalanceInbase -= openbalanceInbase;
                                                } else if (account.getCreationDate().compareTo(startDate) == 0) {
                                                    calculateOpeningBalance -= openingBalance;
                                                    calculateOpenbalanceInbase -= openbalanceInbase;
                                                    if (currencyFlag) {
                                                        calculatePeriodBalance = periodBalance;
                                                    } else {
                                                        calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                    }
                                                } else if (account.getCreationDate().compareTo(startDate) > 0 && account.getCreationDate().compareTo(endDate) < 0) {
                                                    if (currencyFlag) {
                                                        calculateOpeningBalance -= openingBalance;
                                                        calculateOpenbalanceInbase -= openbalanceInbase;
                                                        calculatePeriodBalance = periodBalance;
                                                    } else {
                                                        calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                        calculateOpenbalanceInbase -= openbalanceInbase;
                                                    }
                                                }
                                            }
                                        }
                                        calculatePeriodBalance = periodBalance;
                                        endingBalance = calculateOpenbalanceInbase + calculatePeriodBalance;
                                    }
                                    if (account.getParent() == null && !showChildAccountsInGl) {
                                        isParent = true;
//                                        openbalanceSummary += calculateOpenbalanceInbase;
//                                        endingBalanceSummary += endingBalance;
//                                    } else if (showChildAccountsInGl) {
//                                        openbalanceSummary += calculateOpenbalanceInbase;
//                                        endingBalanceSummary += endingBalance;
                                    }
                                    
                                    /*
                                     * If filter is set to "Exclude Child Account Balances" 
                                     * then include the balance of Parent as well as Child accounts respectively 
                                     * else if filter is set to "Include Child Account Balances" then 
                                     * only include the parent account balances as child balance is already included in Parent Account
                                     */
                                    if ((includeExcludeChildBalances && account.getParent() == null) || !includeExcludeChildBalances){
                                        openbalanceSummary += calculateOpenbalanceInbase;
                                        endingBalanceSummary += endingBalance;
                                    }
                                }
                            }
                            jSONArray.getJSONObject(count).remove("openbalance");
                            jSONArray.getJSONObject(count).put("openbalance", calculateOpeningBalance);
                            jSONArray.getJSONObject(count).remove("openbalanceinbase");
                            jSONArray.getJSONObject(count).put("openbalanceinbase", calculateOpenbalanceInbase);
                            jSONArray.getJSONObject(count).put("endingBalance", endingBalance);
                            jSONArray.getJSONObject(count).put("periodBalance", calculatePeriodBalance);
                            if (!showAllAccountsInGl) {
                                if (showChildAccountsInGl) {
                                    if (calculateOpenbalanceInbase != 0 || endingBalance != 0 || calculatePeriodBalance != 0) {
                                        nonZerojSONArray.put(jSONArray.getJSONObject(count));
                                    }
                                } else {
                                    /*
                                     * In order to show the parent account and child account 
                                     * seperately we have added the OR condition 
                                     * when "showChildAccountsInGl" is set to false.
                                     */
                                    if (isParent || !showChildAccountsInGl) {
                                        if (calculateOpenbalanceInbase != 0 || endingBalance != 0 || calculatePeriodBalance != 0) {
                                            nonZerojSONArray.put(jSONArray.getJSONObject(count));
                                        }
                                    }
                                }
                            } else {
                                if (showChildAccountsInGl) {
                                    parentChildArray.put(jSONArray.getJSONObject(count));
                                } else {
                                    /*
                                     * In order to show the parent account and child account 
                                     * seperately we have added the OR condition 
                                     * when "showChildAccountsInGl" is set to false.
                                     */
                                    if (isParent || !showChildAccountsInGl) {
                                        parentChildArray.put(jSONArray.getJSONObject(count));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            JSONArray finalArray = new JSONArray();
            if (!showAllAccountsInGl) {
                jobj.remove(Constants.RES_data);
                for (int i = startlim; i <= (startlim + limit); i++) {
                    if (!nonZerojSONArray.isNull(i)) {
                        finalArray.put(nonZerojSONArray.getJSONObject(i));
                    }
                }
                if (StringUtil.equal(fileType, "print")) {
                    if (!showAllAccountsInGl) {
                        jobj.put(Constants.RES_data, nonZerojSONArray);
                    } else {
                        jobj.put(Constants.RES_data, parentChildArray);
                    }
                } else {
                    jobj.put(Constants.RES_data, finalArray);
                }
            } else {
                jobj.remove(Constants.RES_data);
                for (int i = startlim; i <= (startlim + limit); i++) {
                    if (!parentChildArray.isNull(i)) {
                        finalArray.put(parentChildArray.getJSONObject(i));
                    }
                }
                if (StringUtil.equal(fileType, "print")) {
                    if (!showAllAccountsInGl) {
                        jobj.put(Constants.RES_data, nonZerojSONArray);
                    } else {
                        jobj.put(Constants.RES_data, parentChildArray);
                    }
                } else {
                    jobj.put(Constants.RES_data, finalArray);
                }
            }
            int totalCount = 0;
            if (!showAllAccountsInGl) {
                totalCount = nonZerojSONArray.length();
            } else {
                totalCount = parentChildArray.length();
            }
            jobj.put("endingBalanceSummary", endingBalanceSummary);
            jobj.remove("openbalanceSummary");
            jobj.put("openbalanceSummary", openbalanceSummary);
            jobj.put("totalCount", totalCount);
        } else{
                jobj.put(Constants.RES_data, new JSONObject());
                jobj.put("totalCount", 0);
         }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = "" + ex.getMessage();
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView exportBankBookSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            HashMap<String, Object> requestParams = accAccountHandler.getRequestMap(request);
            if (request.getParameter("bankBookSumarryReport") != null && Boolean.parseBoolean(request.getParameter("bankBookSumarryReport"))) {
                requestParams.put("bankBookSumarryReport", request.getParameter("bankBookSumarryReport"));
            }
            KwlReturnObject result = accAccountDAOobj.getAccountsForCombo(requestParams);
            List list = result.getEntityList();
            JSONArray DataJArr = accReportsService.getBankBookSummay(request, list);
            jobj.put(Constants.RES_data, DataJArr);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getBankBookSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = true;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = accAccountHandler.getRequestMap(request);
            if (request.getParameter("bankBookSumarryReport") != null && Boolean.parseBoolean(request.getParameter("bankBookSumarryReport"))) {
                requestParams.put("bankBookSumarryReport", request.getParameter("bankBookSumarryReport"));
            }
            requestParams.remove(Constants.start);
            requestParams.remove(Constants.limit);
            KwlReturnObject result = accAccountDAOobj.getAccountsForCombo(requestParams);
            List list = result.getEntityList();
            JSONArray DataJArr = accReportsService.getBankBookSummay(request, list);
            
            JSONArray pagedJson = DataJArr;
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                pagedJson = StringUtil.getPagedJSON(DataJArr, Integer.parseInt(request.getParameter(Constants.start)), Integer.parseInt(request.getParameter(Constants.limit)));
            }
            jobj.put(Constants.RES_data, pagedJson);
            jobj.put(Constants.RES_count, DataJArr.length());
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = "" + ex.getMessage();
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (Exception ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getIBGEntryReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = true;
        String msg = "";
        try {
            String start = (String) request.getParameter(Constants.start);
            String limit = (String) request.getParameter(Constants.limit);
            String startDate = (String) request.getParameter("startdate");
            String endDate = (String) request.getParameter("enddate");
            String bankId = (String) request.getParameter("bankid");
            String ibgCode = (String) request.getParameter("ibgCode");
            int ibgBank = !StringUtil.isNullOrEmpty(request.getParameter("ibgBank"))?Integer.parseInt(request.getParameter("ibgBank")) :1;

            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put(Constants.start, start);
            requestParams.put(Constants.limit, limit);
            requestParams.put(Constants.REQ_startdate, startDate);
            requestParams.put(Constants.REQ_enddate, endDate);
            requestParams.put("paymentaccid", bankId);
            requestParams.put("ibgCode", ibgCode);
            requestParams.put("ibgBank", ibgBank);
            requestParams.put("nondeleted", "true");

            KwlReturnObject result = accVendorPaymentDao.getPayments(requestParams);
            List list = result.getEntityList();
            int totalCount = result.getRecordTotalCount();
            JSONObject dataObject = getIBGEntryJson(request, list);
            JSONArray DataJArr = dataObject.getJSONArray(Constants.RES_data);
            int invalidRecord = dataObject.getInt("invalidRecord");
            jobj.put(Constants.RES_data, DataJArr);
            jobj.put(Constants.RES_count, (totalCount-invalidRecord));
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = "" + ex.getMessage();
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (Exception ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getIBGEntryJson(HttpServletRequest request, List list) {
        JSONObject jobj = new JSONObject();
        
        try {
            JSONArray array = new JSONArray();
            int invalidRecord = 0;
            HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            String companyid = (String) requestParams.get(Constants.companyKey);
            String currencyid = (String) requestParams.get(Constants.globalCurrencyKey);
            DateFormat df = (DateFormat) requestParams.get("df");
            Date today = new Date();

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            if (list != null) {
                /*
                 * If you are modifying in this method then you will need to
                 * modify on accVendorPaymentController.java - getPaymentsJson()
                 * method
                 */
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    JSONObject obj = new JSONObject();
                    Object[] row = (Object[]) itr.next();
                    Payment payment = (Payment) row[0];
                    /*
                     * Following type of Payments will be excluded from the IBG entry report-
                     * 1. Payment against customer
                     * 2. Payment which are not of IBG type
                     * 3. Cheque status is cleared. i.e. Payment is already reconciled.
                     */
                    if (payment.getPayDetail() != null) {
                        KwlReturnObject clearanceDate = accBankReconciliationObj.getBRfromJE(payment.getJournalEntry().getID(), payment.getCompany().getCompanyID(), false);
                        if (clearanceDate != null && clearanceDate.getEntityList() != null && clearanceDate.getEntityList().size() > 0) {
                            BankReconciliationDetail brd = (BankReconciliationDetail) clearanceDate.getEntityList().get(0);
                            if (brd.getBankReconciliation().getClearanceDate() != null) {
                                invalidRecord++;
                                continue;
                            }
                        }
                    }
                    if(payment.getPaymentWindowType()==2 || !payment.isIBGTypeTransaction()){    // payment.getPaymentWindowType()==2  means paymenr against customer.
                        invalidRecord++;
                        continue;
                    }
                    obj.put(Constants.billid, payment.getID());
                    obj.put("billno", payment.getPaymentNumber());
//                    obj.put("billdate", df.format(payment.getJournalEntry().getEntryDate()));//receiptdate
                    obj.put("billdate", df.format(payment.getCreationDate()));//receiptdate
                    obj.put("valuedate", df.format(today));
                    obj.put("isGIROFileGenerated", payment.isGIROFileGenerated());
                    obj.put("paidto", payment.getVendor() != null ? payment.getVendor().getName() : (payment.getPaidTo() != null ? payment.getPaidTo().getValue() : ""));
                    double paymentAmount = payment.getDepositAmount();
                    if (payment.getBankChargesAmount() > 0 && payment.getJournalEntryForBankCharges() == null) {
                        paymentAmount -= payment.getBankChargesAmount();
                    }
                    if (payment.getBankInterestAmount() > 0 && payment.getJournalEntryForBankInterest() == null) {
                        paymentAmount -= payment.getBankInterestAmount();
                    }
                    obj.put("amount", authHandler.formattedAmount(paymentAmount, companyid));
                    obj.put("currencysymbol", payment.getCurrency().getSymbol());
                    String paycurrencyid = (payment.getCurrency() == null ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID());
//                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paymentAmount, paycurrencyid, payment.getJournalEntry().getEntryDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paymentAmount, paycurrencyid, payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    double amountinbase = (Double) bAmt.getEntityList().get(0);
                    obj.put("amountinbase", authHandler.formattedAmount(amountinbase, companyid));
                    array.put(obj);
                }
            }
            jobj.put(Constants.RES_data, array);
            jobj.put("invalidRecord", invalidRecord);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }

    public double calculateRevenue(HttpServletRequest request, String accountID, Date startDate, Date endDate) {
        double calculateOpenbalanceInbase = 0d, openbalanceInbase = 0d, endingBalance = 0d, calculatePeriodBalance = 0d, periodBalance = 0d;
        try {
            KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountID);
            Account account = (Account) accresult.getEntityList().get(0);
            List childlist = new ArrayList(account.getChildren());
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            if (childlist.isEmpty()) {
//                periodBalance = accReportsService.getAccountBalance(request, account.getID(), startDate, endDate);
                periodBalance = accReportsService.getAccountBalance(paramJobj, account.getID(), startDate, endDate,null);
//                calculateOpenbalanceInbase = accReportsService.getAccountBalance(request, account.getID(), new Date(0), startDate) + openbalanceInbase;
                calculateOpenbalanceInbase = accReportsService.getAccountBalance(paramJobj, account.getID(), new Date(0), startDate,null) + openbalanceInbase;
                calculatePeriodBalance = periodBalance;
                if (account.getCreationDate().compareTo(startDate) < 0) {
                    calculateOpenbalanceInbase -= openbalanceInbase;
                } else if (account.getCreationDate().compareTo(startDate) == 0) {

                    calculateOpenbalanceInbase -= openbalanceInbase;
                    calculatePeriodBalance = periodBalance - openbalanceInbase;

                } else if (account.getCreationDate().compareTo(startDate) > 0 && account.getCreationDate().compareTo(endDate) < 0) {
                    calculatePeriodBalance = periodBalance - openbalanceInbase;
                }
                endingBalance = calculateOpenbalanceInbase + calculatePeriodBalance;
            } else {
//                double periodAccountBalance = accReportsService.getAccountBalance(request, account.getID(), startDate, endDate);
                double periodAccountBalance = accReportsService.getAccountBalance(paramJobj, account.getID(), startDate, endDate,null);
//                periodBalance = accReportsService.getTotalAccountBalance(account, periodAccountBalance, request);
                periodBalance = accReportsService.getTotalAccountBalance(account, periodAccountBalance, paramJobj);
//                double accountbalance = accReportsService.getAccountBalance(request, account.getID(), new Date(0), startDate);
                double accountbalance = accReportsService.getAccountBalance(paramJobj, account.getID(), new Date(0), startDate,null);
//                double getOpenbalanceInbase = accReportsService.getTotalAccountBalance(account, accountbalance, request);
                double getOpenbalanceInbase = accReportsService.getTotalAccountBalance(account, accountbalance, paramJobj);
                calculateOpenbalanceInbase = getOpenbalanceInbase + openbalanceInbase;
                if (account.getCreationDate().compareTo(startDate) < 0) {

                    calculatePeriodBalance = periodBalance;

                    calculateOpenbalanceInbase -= openbalanceInbase;
                } else if (account.getCreationDate().compareTo(startDate) == 0) {
                    calculateOpenbalanceInbase -= openbalanceInbase;
                    calculatePeriodBalance = periodBalance - openbalanceInbase;
                } else if (account.getCreationDate().compareTo(startDate) > 0 && account.getCreationDate().compareTo(endDate) < 0) {
                    calculatePeriodBalance = periodBalance - openbalanceInbase;

                }
                endingBalance = calculateOpenbalanceInbase + calculatePeriodBalance;
            }
        } catch (Exception ex) {
            endingBalance = 0;
        }
        return endingBalance;
    }

    public ModelAndView RevenueRecognitionReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String Revenue = "";
        String msg = "";
        try {
            Date startDate = new Date(0);
            Date endDate = new Date();
            String sDate = request.getParameter("startDate");
            String eDate = request.getParameter("endDate");
            String[] accountid = request.getParameter("accountIds").split(",");
            double endingBalance = 0d;
            if (!StringUtil.isNullOrEmpty(sDate)) {
                startDate = authHandler.getDateOnlyFormat().parse(sDate);
            }
            if (!StringUtil.isNullOrEmpty(eDate)) {
                endDate = authHandler.getDateOnlyFormat().parse(eDate);
            }
            try {
                for (int i = 0; i < accountid.length; i++) {
                    endingBalance = calculateRevenue(request, accountid[i], startDate, endDate);
                    JSONObject RevenueJSONObj = new JSONObject();
                    if (i == 1) {
                        Revenue = "<b> " + messageSource.getMessage("acc.RevenueRecognitionReport.RecognizedRevenue", null, RequestContextUtils.getLocale(request)) + "</b>";
                    } else {
                        Revenue = "<b>" + messageSource.getMessage("acc.RevenueRecognitionReport.DifferedRevenue", null, RequestContextUtils.getLocale(request)) + "</b>";
                    }
                    RevenueJSONObj.put("Revenue", Revenue);
                    RevenueJSONObj.put("Balance", endingBalance);
                    DataJArr.put(RevenueJSONObj);
                }
                for (int i = 0; i < accountid.length; i++) {
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
//                    endingBalance = accReportsService.getAccountBalance(request, accountid[i], null, endDate);
                    endingBalance = accReportsService.getAccountBalance(paramJobj, accountid[i], null, endDate,null);
                    JSONObject CumulativeRevenueJSONObj = new JSONObject();
                    if (i == 1) {
                        Revenue = "<b>" + messageSource.getMessage("acc.RevenueRecognitionReport.CumulativeRecognizedRevenue", null, RequestContextUtils.getLocale(request)) + "</b>";
                    } else {
                        Revenue = "<b>" + messageSource.getMessage("acc.RevenueRecognitionReport.CumulativeDifferedRevenue", null, RequestContextUtils.getLocale(request)) + "</b>";
                    }
                    CumulativeRevenueJSONObj.put("Revenue", Revenue);
                    CumulativeRevenueJSONObj.put("Balance", endingBalance);
                    DataJArr.put(CumulativeRevenueJSONObj);
                }
            } catch (Exception ex) {
                msg = messageSource.getMessage("acc.common.norec.RevenueReport", null, RequestContextUtils.getLocale(request));
            }
            jobj.put(Constants.RES_data, DataJArr);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accOtherReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getMappedCompanies(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = true;
        boolean noactivity = false;
        String msg = "";
        try {
            JSONArray jArr = new JSONArray();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            boolean includeParentCompany = request.getParameter("includeParentCompany")!=null?Boolean.FALSE.parseBoolean(request.getParameter("includeParentCompany")):false;
            
            if (includeParentCompany) {
                KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) companyObj.getEntityList().get(0);
                
                JSONObject obj = new JSONObject();
                obj.put(Constants.companyKey, companyid);
                obj.put("companyname", company.getCompanyName());
                obj.put("subdomain", company.getSubDomain());
                jArr.put(obj);
            }
            
            List list = accCompanyPreferencesObj.getMappedCompanies(companyid);
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                Object[] row = (Object[]) itr.next();
                JSONObject obj = new JSONObject();
                obj.put(Constants.companyKey, row[0].toString());
                obj.put("companyname", row[1].toString());
                obj.put("subdomain", row[2].toString());
                jArr.put(obj);
            }
            jobj.put(Constants.RES_data, jArr);
            jobj.put("totalCount", jArr.length());
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = "" + ex.getMessage();
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONArray getMappedParentAccount(Account childAccObj, JSONArray jSONArray, int count, String parentcompanyid, boolean autoMap) {
        String parentaccid = "";
        String parentaccname = "";
        String parentacccode = "";
        String parentgroupid = "";
        String parentgroupname = "";
        String mappingId = "0";
        int mappedFlag = 0;
        try {
            Account parentAccObj = null;
            List mapaccresult = accAccountDAOobj.getMappedAccounts(childAccObj, parentcompanyid, autoMap);
            Iterator<Object[]> itr1 = mapaccresult.iterator();
            if (itr1.hasNext()) {
                Object[] row = (Object[]) itr1.next();
                parentaccid = row[0].toString();
                if (!StringUtil.isNullOrEmpty(parentaccid)) {
                    KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), parentaccid);
                    parentAccObj = (Account) accresult.getEntityList().get(0);
                }
                parentaccname = row[1] != null ? row[1].toString() : "";
                parentacccode = row[2] != null ? row[2].toString() : "";
                if (parentAccObj != null) {
                    parentgroupid = parentAccObj.getGroup().getID();
                    parentgroupname = parentAccObj.getGroup().getName();
                }
                mappedFlag = Integer.parseInt(row[4].toString());
                mappingId = row[5].toString();
            }
            jSONArray.getJSONObject(count).put("parentaccid", parentaccid);
            jSONArray.getJSONObject(count).put("id", mappingId);
            jSONArray.getJSONObject(count).put("parentaccname", parentaccname);
            jSONArray.getJSONObject(count).put("parentacccode", parentacccode);
            jSONArray.getJSONObject(count).put("parentaccnamecode", (!StringUtil.isNullOrEmpty(parentacccode)) ? ("[" + parentacccode + "] " + parentaccname) : parentaccname);
            jSONArray.getJSONObject(count).put("parentgroupid", parentgroupid);
            jSONArray.getJSONObject(count).put("parentgroupname", parentgroupname);
            jSONArray.getJSONObject(count).put("mappedFlag", mappedFlag);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jSONArray;
    }

    public ModelAndView exportAccounts(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        boolean noactivity = false;
        double endingBalanceSummary = 0;
        try {
            boolean isCustomColumnExport = true;
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object> requestParams = accAccountHandler.getRequestMap(request);
//            HashMap<String, Object> requestParams = accAccountHandler.getJsonMap(paramJobj);
            requestParams.put(Constants.start, "");
            requestParams.put(Constants.limit, "");
            
            paramJobj.put("isExport", true);
            boolean isSplitOpeningBalanceAmount = accInvoiceCommon.isSplitOpeningBalanceAmount(sessionHandlerImpl.getCompanyid(request));
            boolean isSplitOpeningBalanceSearch = false;
            if (isSplitOpeningBalanceAmount) {
                isSplitOpeningBalanceSearch = accInvoiceCommon.isSplitOpeningBalanceSearch(request.getParameter(Constants.Acc_Search_Json), sessionHandlerImpl.getCompanyid(request));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.moduleid)) && Integer.parseInt(request.getParameter(Constants.moduleid)) == Constants.Account_Statement_ModuleId) {
                isSplitOpeningBalanceSearch = false;
            }
            // Need to send 'isSplitOpeningBalanceSearch' to apply advance search
            requestParams.put("isSplitOpeningBalanceSearch", isSplitOpeningBalanceSearch);
            requestParams.put("isSplitOpeningBalanceAmount", isSplitOpeningBalanceAmount);
            paramJobj.put("isSplitOpeningBalanceAmount",isSplitOpeningBalanceAmount);
            request.setAttribute("isExport", true);
            
            if (requestParams.containsKey("acctypes") && requestParams.get("acctypes") != null && StringUtil.equal(requestParams.get("acctypes").toString(), "3")) {
                noactivity = true;
            }
            boolean includeExcludeChildBalances = request.getParameter("includeExcludeChildBalances") != null ? Boolean.parseBoolean(request.getParameter("includeExcludeChildBalances")) : true;
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            requestParams.put("userid", sessionHandlerImpl.getUserid(request));             
             /**
             * This Function will use when Users Visibility Feature is Enable
             * Append user condition while querying data
             */
            String customdatajoin = ""; 
            String usercondition = "";
            ExtraCompanyPreferences extraPref = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), requestParams.get("companyid").toString());
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extraPref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            }
            if (extraPref != null && extraPref.isUsersVisibilityFlow()) {
                KwlReturnObject object = accountingHandlerDAOobj.getObject(User.class.getName(),requestParams.get("userid").toString());
                User user = object.getEntityList().size() > 0 ? (User) object.getEntityList().get(0) : null;
                if (!AccountingManager.isCompanyAdmin(user)) {
                   /**
                     * if Users visibility enable and current user is not admin
                     */
                    Map<String, Object> reqMap = new HashMap();
                    requestParams.put("isUserVisibilityFlow", true);
                    reqMap.put("companyid",requestParams.get("companyid").toString());
                    reqMap.put("userid",requestParams.get("userid").toString());
                   reqMap.put("jointable", "acd");
                    reqMap.put("moduleid", Constants.Account_Statement_ModuleId);
                    String custcondition = fieldManagerDAOobj.appendUsersCondition(reqMap);
                    if (!StringUtil.isNullOrEmpty(custcondition)) {
                        /**
                        * If mapping found with dimension
                         */
                         usercondition = " and (" + custcondition + ")";
                      requestParams.put("appendusercondtion", usercondition);
                    } else {
                        /**
                         * If no Mapping found for current ser then return
                         * function call
                         */
                        
                        
                        return new ModelAndView("jsonView", "model", jobj.toString());
                    }
                }
            }
            KwlReturnObject result = accAccountDAOobj.getAccounts(requestParams);
            Map<String, Object> accountJsonparamMap = new HashMap<String, Object>();
            accountJsonparamMap.put("noactivity", noactivity);
            accountJsonparamMap.put("isCustomColumnExport", isCustomColumnExport);
            accountJsonparamMap.put("isCOA", true);
//            jobj = accFinancialReportsService.getAccountJson(request, result.getEntityList(), accCurrencyDAOobj, accountJsonparamMap);
            jobj = accFinancialReportsService.getAccountJson(paramJobj, result.getEntityList(), accCurrencyDAOobj, accountJsonparamMap);
            JSONArray jSONArray = jobj.getJSONArray(Constants.RES_data);
            for (int count = 0; count < jSONArray.length(); count++) {
                double balance = 0;
                if (!noactivity) {
                    if (jSONArray.getJSONObject(count).has("accid")) {
                        String accId = jSONArray.getJSONObject(count).getString("accid");
                        KwlReturnObject accountResult = accountingHandlerDAOobj.getObject("com.krawler.hql.accounting.Account", accId);
                        if (accountResult.getEntityList().get(0) != null) {
                            Account account = (Account) accountResult.getEntityList().get(0);
                            if (!account.isDeleted()) {
                                Date stDate = new Date(0);
                                Date endDate = new Date();
                                List childlist = new ArrayList(account.getChildren());
                                
                                if (childlist.isEmpty()) {
//                                    balance = accReportsService.getAccountBalance(request, account.getID(), stDate, endDate);
                                    balance = accReportsService.getAccountBalance(paramJobj, account.getID(), stDate, endDate,null);
                                } else {
//                                    double accountbalance = accReportsService.getAccountBalance(request, account.getID(), stDate, endDate);
                                    double accountbalance = accReportsService.getAccountBalance(paramJobj, account.getID(), stDate, endDate,null);
                                    if (includeExcludeChildBalances) {
                                        balance = accReportsService.getTotalAccountBalance(account, accountbalance, paramJobj);
                                    } else {
                                        balance = accountbalance;
                                    }
                                }
                                if ((account.getParent() == null && includeExcludeChildBalances) || !includeExcludeChildBalances) {
                                    endingBalanceSummary += balance;
                                }
                                if (account.isHeaderaccountflag()) {
                                    jSONArray.getJSONObject(count).put("openbalance", "-");
                                }
                            }
                        }
                    }
                }
                jSONArray.getJSONObject(count).put("endingBalance", balance);
            }
            jobj.put("endingBalanceSummary", endingBalanceSummary);
            String fileType = paramJobj.optString("filetype",null);
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(paramJobj).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getBankReconciliation(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("accountid", request.getParameter("accid"));
            KwlReturnObject result = accBankReconciliationObj.getBankReconciliation(requestParams);
            List list = result.getEntityList();

            JSONArray jArr = getBankReconciliationJson(request, list);
            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, result.getRecordTotalCount());
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accBankReconciliationController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accBankReconciliationController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accBankReconciliationController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONArray getBankReconciliationJson(HttpServletRequest request, List list) throws ServiceException, SessionExpiredException {
        JSONArray jArr = new JSONArray();
        try {
            DateFormat df = authHandler.getDateOnlyFormat();
            Iterator itr = list.iterator();
            List<String> jeIdList = new ArrayList();
            while (itr.hasNext()) {
                BankReconciliationDetail brd = (BankReconciliationDetail) itr.next();
                JournalEntry entry = (JournalEntry) brd.getJournalEntry();
                jeIdList.add(entry.getID());
            }

            String inParam = accReportsService.getInParamFromList(jeIdList);

            HashMap<String, Object> reqParams = new HashMap<String, Object>();
            reqParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            reqParams.put("jeIds", inParam);

            Map<String, Object[]> paymentReceivedMap = Collections.emptyMap();
            Map<String, Object[]> paymentMadeMap = Collections.emptyMap();

            paymentReceivedMap = accReportsService.getPaymentReceivedMap(reqParams);
            paymentMadeMap = accReportsService.getPaymentMadeMap(reqParams);

            itr = list.iterator();
            while (itr.hasNext()) {
                BankReconciliationDetail brd = (BankReconciliationDetail) itr.next();
                BankReconciliation entry = (BankReconciliation) brd.getBankReconciliation();
                JSONObject obj = new JSONObject();
                boolean withoutinventory = true;
                obj.put("id", entry.getID());
                obj.put("startdate", df.format(entry.getStartDate()));
                obj.put("enddate", df.format(entry.getEndDate()));
                obj.put("clearanceDate", entry.getClearanceDate() == null ? "" : df.format(entry.getClearanceDate()));
                obj.put("clearingbalance", entry.getClearingAmount());
                obj.put("accountname", entry.getAccount().getName());
                obj.put("d_entryno", brd.getJournalEntry().getEntryNumber());
                obj.put("jeid", brd.getJournalEntry().getID());
           
                if (paymentReceivedMap.containsKey(brd.getJournalEntry().getID())) {
                    obj.put("transactionID", ((Receipt) paymentReceivedMap.get(brd.getJournalEntry().getID())[0]).getReceiptNumber());
                    obj.put(Constants.billid, ((Receipt) paymentReceivedMap.get(brd.getJournalEntry().getID())[0]).getID());
                    obj.put("type", Constants.PAYMENT_RECEIVED);
                    withoutinventory = false;
                } else if (paymentMadeMap.containsKey(brd.getJournalEntry().getID())) {
                    obj.put("transactionID", ((Payment) paymentMadeMap.get(brd.getJournalEntry().getID())[0]).getPaymentNumber());
                    obj.put(Constants.billid, ((Payment) paymentMadeMap.get(brd.getJournalEntry().getID())[0]).getID());
                    obj.put("type", Constants.PAYMENT_MADE);
                    withoutinventory = false;
                } else {
                    obj.put("transactionID", "");
                }
                obj.put("withoutinventory", withoutinventory);
                jArr.put(obj);
            }
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getBankReconciliationJson : " + ex.getMessage(), ex);
        }
        return jArr;
    }
   
    public ModelAndView getNewBalanceSheet(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            JSONArray rightObjArr = new JSONArray();
            JSONObject objlast = new JSONObject();
            objlast.put("accountid", "");
            objlast.put("level", 0);
            objlast.put("isdebit", false);
            objlast.put("leaf", true);
            objlast.put("accountname", "Assets");
            objlast.put("amount", "");
            objlast.put("fmt", "B");
            request.setAttribute("isForTradingAndProfitLoss",true);
            jobj = getMonthlyBalanceSheet(request);
            JSONObject jobj1 = jobj.getJSONObject(Constants.RES_data);
            JSONArray rightObjArr1 = jobj1.getJSONArray("right");
            JSONArray leftObjArr = jobj1.getJSONArray("left");

            rightObjArr.put(0, objlast);
            for (int i = 0; i < rightObjArr1.length(); i++) {
                rightObjArr.put(rightObjArr1.getJSONObject(i));
            }

            objlast = new JSONObject();
            objlast.put("accountid", "");
            objlast.put("level", 0);
            objlast.put("isdebit", false);
            objlast.put("leaf", true);
            objlast.put("accountname", "Liabilities");
            objlast.put("amount", "");
            objlast.put("fmt", "B");

            rightObjArr.put(objlast);

            objlast = new JSONObject();
            objlast.put("accountid", "");
            objlast.put("level", 0);
            objlast.put("isdebit", false);
            objlast.put("leaf", true);
            objlast.put("accountname", "Equity");
            objlast.put("amount", "");
            objlast.put("fmt", "B");

            for (int i = 0; i < leftObjArr.length(); i++) {
                rightObjArr.put(leftObjArr.getJSONObject(i));
            }
            jobj.getJSONObject(Constants.RES_data).remove("left");
            jobj.getJSONObject(Constants.RES_data).put("left", rightObjArr);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getMonthlyBalanceSheet(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj3 = new JSONObject();
        try {
            JSONArray temprightObjArr1 = new JSONArray();
            JSONArray templeftObjArr = new JSONArray();
            double dtotal = 0, ctotal = 0;
            JSONObject jArrL = new JSONObject();
            JSONObject jArrR = new JSONObject();
            ExtraCompanyPreferences extrapref = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            }
            final DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");

            LocalDate localStartDate = dtf.parseLocalDate(request.getParameter("stdate"));
            LocalDate localEndDate = dtf.parseLocalDate(request.getParameter("enddate"));
            boolean dimensionBasedMonthlyBS=StringUtil.isNullOrEmpty(request.getParameter("dimensionBasedMonthlyBS")) ? false : Boolean.parseBoolean(request.getParameter("dimensionBasedMonthlyBS"));
            request.setAttribute("NewBalanceSheetCall", true);
            Date startDate = localStartDate.toDate();
            Date endDate = localEndDate.toDate();

            Calendar cal = Calendar.getInstance();
            cal.setTime(startDate);
            int startMonth = cal.get(Calendar.MONTH);
            int startYear = cal.get(Calendar.YEAR);

            cal.setTime(endDate);
            int endMonth = cal.get(Calendar.MONTH);
            int endYear = cal.get(Calendar.YEAR);

            boolean isOneMonth = false;

            int monthCount = 0;
            // if user selects same month & year for both start & end fields, we get the last date of the month to populate into the endDate
            if (startMonth == endMonth && startYear == endYear) {
                DateTime date = localEndDate.toDateTime(LocalTime.MIDNIGHT);
//                DateTime date = localEndDate.toDateTimeAtCurrentTime();
                // including whole day 24*60*60-1
                date = date.plusSeconds(86399);
                endDate = date.dayOfMonth().withMaximumValue().toDate();
                isOneMonth = true;
                localEndDate = new LocalDate(endDate);
                monthCount = 1;
            }

            if (!isOneMonth) {// just a trick to include the last month as well            
                localEndDate = localEndDate.plus(Period.months(1));
            }

            while (localStartDate.isBefore(localEndDate)) {
                localStartDate = localStartDate.plus(Period.months(1));
                monthCount++;
            }

            localStartDate = dtf.parseLocalDate(request.getParameter("stdate"));
            localEndDate = dtf.parseLocalDate(request.getParameter("enddate"));

            int monthIndex = 0;

            if (!isOneMonth){ // just a trick to include the last month as well   
                localEndDate = localEndDate.plus(Period.months(1));
            } else {
                localEndDate = new LocalDate(endDate);
            }

            while (localStartDate.isBefore(localEndDate)) {
                DateTime date = localStartDate.toDateTime(LocalTime.MIDNIGHT);
                DateTime firstDateOfMonth = date.dayOfMonth().withMinimumValue();
                DateTime lastDateOfMonth = date.dayOfMonth().withMaximumValue();
                request.setAttribute("jasperreport", "JasperReport");
                request.setAttribute("monthlyreport", "MonthlyReport");
                Date tempDate = new Date();
                if (monthIndex == 0) {
                    Date startDate1 = localStartDate.toDate();
                    Calendar cal1 = Calendar.getInstance();
                    SimpleDateFormat df = new SimpleDateFormat();
                    df.applyPattern(Constants.DATEFORMATINGPATTERN);
                    cal1.setTime(df.parse(df.format(startDate1)));
                    String sstart = authHandler.getDateOnlyFormat().format(cal1.getTime());
                    tempDate = authHandler.getDateOnlyFormat().parse(sstart);
                    //tempDate = cal1.getTime();
                } else {
                    Date startDate1 = firstDateOfMonth.toDate();
                    Calendar cal1 = Calendar.getInstance();
                    SimpleDateFormat df = new SimpleDateFormat();
                    df.applyPattern(Constants.DATEFORMATINGPATTERN);
                    cal1.setTime(df.parse(df.format(startDate1)));
                    String sstart = authHandler.getDateOnlyFormat().format(cal1.getTime());
                    tempDate = authHandler.getDateOnlyFormat().parse(sstart);
                    // tempDate = cal1.getTime();
                }
                request.setAttribute("jaspersdate", tempDate);
                lastDateOfMonth = lastDateOfMonth.plusDays(0);  //Vaibhav - Do not add 1 day to match Balance Sheet & Monthly balance Sheet
                Date endDate1 = lastDateOfMonth.toDate();
                Calendar endcal = Calendar.getInstance();
                SimpleDateFormat df = new SimpleDateFormat();
                df.applyPattern(Constants.DATEFORMATINGPATTERN);
                endcal.setTime(df.parse(df.format(endDate1)));
                String sstart = authHandler.getDateOnlyFormat().format(endcal.getTime());
                request.setAttribute("jasperenddate",  authHandler.getDateOnlyFormat().parse(sstart));
                JSONObject jobj = accReportsService.getBalanceSheet(request);
                JSONObject jobj2 = jobj.getJSONObject(Constants.RES_data);
                JSONArray rightObjArr1 = jobj2.getJSONArray("right");
                JSONArray leftObjArr = jobj2.getJSONArray("left");
                if (monthIndex == 0) {
                    temprightObjArr1 = jobj2.getJSONArray("right");
                    templeftObjArr = jobj2.getJSONArray("left");
                }
                for (int i = 0; i < leftObjArr.length(); i++) {
                    JSONObject getObj = leftObjArr.getJSONObject(i);
                    String accId = "";
                    if (getObj.has("accountid")) {
                        accId = getObj.getString("accountid");
                    }
                    if (!accId.equals("")) {
                        if (monthIndex == 0) {
                            JSONObject putObj = new JSONObject();
                            if (getObj.has("accountname")) {
                                putObj.put("accountname", getObj.get("accountname"));
                            }
                            if (getObj.has("accountcode")) {
                                putObj.put("accountcode", getObj.optString("accountcode"));
                            }
                            if (getObj.has("haschild")) {
                                putObj.put("haschild", getObj.optString("haschild"));
                            }
                            if (getObj.has("acctype")) {
                                putObj.put("acctype", getObj.getString("acctype"));
                            }
                            if (getObj.has("level")) {
                                putObj.put("level", getObj.get("level"));
                            }
                            if (getObj.has("fmt")) {
                                putObj.put("fmt", getObj.get("fmt"));
                            }
                            if (getObj.has("accountflag")) {
                                putObj.put("accountflag", getObj.get("accountflag"));
                            }
                            if (getObj.has("leaf")) {
                                putObj.put("leaf", getObj.getBoolean("leaf"));
                            }
                            if (getObj.has("isparent")) {
                                putObj.put("isparent", getObj.get("isparent"));
                            }
                            if (getObj.has("totalFlagAccountsWithchild")) {
                                putObj.put("totalFlagAccountsWithchild", getObj.get("totalFlagAccountsWithchild"));
                            }
                            if (getObj.has("amount")) {
                                putObj.put("amount_0", getObj.get("amount"));
                                putObj.put("totalamount", getObj.get("amount"));
                            }
                            putObj.put("accountid", accId);
                            jArrL.put(accId, putObj);
                        } else {
                            JSONObject putObj1 = new JSONObject();
                            if (jArrL.has(accId)) {
                                putObj1 = jArrL.getJSONObject(accId);
                            } else {
                                if (getObj.has("accountname")) {
                                    putObj1.put("accountname", getObj.get("accountname"));
                                }
                                if (getObj.has("accountcode")) {
                                    putObj1.put("accountcode", getObj.optString("accountcode"));
                                }
                                if (getObj.has("haschild")) {
                                    putObj1.put("haschild", getObj.optString("haschild"));
                                }
                                if (getObj.has("acctype")) {
                                    putObj1.put("acctype", getObj.getString("acctype"));
                                }
                                if (getObj.has("level")) {
                                    putObj1.put("level", getObj.get("level"));
                                }
                                if (getObj.has("isparent")) {
                                    putObj1.put("isparent", getObj.get("isparent"));
                                }
                                if (getObj.has("totalFlagAccountsWithchild")) {
                                    putObj1.put("totalFlagAccountsWithchild", getObj.get("totalFlagAccountsWithchild"));
                                }
                                if (getObj.has("fmt")) {
                                    putObj1.put("fmt", getObj.get("fmt"));
                                }
                                if (getObj.has("accountflag")) {
                                    putObj1.put("accountflag", getObj.get("accountflag"));
                                }
                                if (getObj.has("leaf")) {
                                    putObj1.put("leaf", getObj.getBoolean("leaf"));
                                }
                                putObj1.put("accountid", accId);
                                if (getObj.get("accountid").toString().equals("Net Loss")) {
                                    JSONObject check = templeftObjArr.getJSONObject(templeftObjArr.length() - 1);
                                    JSONObject check1 = templeftObjArr.getJSONObject(templeftObjArr.length() - 2);
                                    if (check.has("accountname") && check1.has("accountname")) {
                                        if (!check.get("accountname").toString().equals("Net Loss") && !check1.get("accountname").toString().equals("Net Loss")) {
                                            templeftObjArr.put(getObj);
                                        }
                                    }
                                }
                                if (getObj.get("accountid").toString().equals("Net Profit")) {
                                    JSONObject check = templeftObjArr.getJSONObject(templeftObjArr.length() - 1);
                                    JSONObject check1 = templeftObjArr.getJSONObject(templeftObjArr.length() - 2);
                                    if (check.has("accountname") && check1.has("accountname")) {
                                        if (!check.get("accountname").toString().equals("Net Profit") && !check1.get("accountname").toString().equals("Net Profit")) {
                                            templeftObjArr.put(getObj);
                                        }
                                    }
                                }
                                if (getObj.get("accountname").toString().equals("Gross Loss")) {
                                    JSONObject check = templeftObjArr.getJSONObject(templeftObjArr.length() - 1);
                                    JSONObject check1 = templeftObjArr.getJSONObject(templeftObjArr.length() - 2);
                                    if (check.has("accountname") && check1.has("accountname")) {
                                        if (!check.get("accountname").toString().equals("Gross Loss") && !check1.get("accountname").toString().equals("Gross Loss")) {
                                            templeftObjArr.put(getObj);
                                        }
                                    }
                                }
                                if (getObj.get("accountname").toString().equals("Gross Profit")) {
                                    JSONObject check = templeftObjArr.getJSONObject(templeftObjArr.length() - 1);
                                    JSONObject check1 = templeftObjArr.getJSONObject(templeftObjArr.length() - 2);
                                    if (check.has("accountname") && check1.has("accountname")) {
                                        if (!check.get("accountname").toString().equals("Gross Profit") && !check1.get("accountname").toString().equals("Gross Profit")) {
                                            templeftObjArr.put(getObj);
                                        }
                                    }
                                }
                            }
                            if (getObj.has("amount")) {
                                putObj1.put("amount_" + monthIndex, getObj.get("amount"));
                                if (putObj1.has("totalamount")) {
                                    double temptotal = Double.parseDouble((putObj1.get("totalamount").toString().equals("") || putObj1.get("totalamount").toString().equals("-") || putObj1.get("totalamount").toString().contains("<")) ? "0.0" : (putObj1.get("totalamount").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("amount").toString().equals("") || getObj.get("amount").toString().equals("-") || getObj.get("amount").toString().contains("<")) ? "0.0" : (getObj.get("amount").toString()));
                                    putObj1.put("totalamount", temptotal);
                                } else {
                                    putObj1.put("totalamount", getObj.get("amount"));
                                }
                            }
                            jArrL.put(accId, putObj1);
                        }
                    }
                }

                for (int i = 0; i < rightObjArr1.length(); i++) {
                    JSONObject getObj = rightObjArr1.getJSONObject(i);
                    String accId = "";
                    if (getObj.has("accountid")) {
                        accId = getObj.getString("accountid");
                    }
                    if (!accId.equals("")) {
                        if (monthIndex == 0) {
                            JSONObject putObj = new JSONObject();
                            if (getObj.has("accountname")) {
                                putObj.put("accountname", getObj.get("accountname"));
                            }
                            if (getObj.has("accountcode")) {
                                putObj.put("accountcode", getObj.optString("accountcode"));
                            }
                            if (getObj.has("haschild")) {
                                putObj.put("haschild", getObj.optString("haschild"));
                            }
                            if (getObj.has("acctype")) {
                                putObj.put("acctype", getObj.getString("acctype"));
                            }
                            if (getObj.has("level")) {
                                putObj.put("level", getObj.get("level"));
                            }
                            if (getObj.has("fmt")) {
                                putObj.put("fmt", getObj.get("fmt"));
                            }
                            if (getObj.has("accountflag")) {
                                putObj.put("accountflag", getObj.get("accountflag"));
                            }
                            if (getObj.has("leaf")) {
                                putObj.put("leaf", getObj.getBoolean("leaf"));
                            }
                            if (getObj.has("isparent")) {
                                putObj.put("isparent", getObj.get("isparent"));
                            }
                            if (getObj.has("totalFlagAccountsWithchild")) {
                                putObj.put("totalFlagAccountsWithchild", getObj.get("totalFlagAccountsWithchild"));
                            }
                            if (getObj.has("amount")) {
                                putObj.put("amount_0", getObj.get("amount"));
                                putObj.put("totalamount", getObj.get("amount"));
                            }
                            putObj.put("accountid", accId);
                            jArrR.put(accId, putObj);
                        } else {
                            JSONObject putObj1 = new JSONObject();
                            if (jArrR.has(accId)) {
                                putObj1 = jArrR.getJSONObject(accId);
                            } else {
                                if (getObj.has("accountname")) {
                                    putObj1.put("accountname", getObj.get("accountname"));
                                }
                                if (getObj.has("accountcode")) {
                                    putObj1.put("accountcode", getObj.optString("accountcode"));
                                }
                                if (getObj.has("haschild")) {
                                    putObj1.put("haschild", getObj.optString("haschild"));
                                }
                                if (getObj.has("acctype")) {
                                    putObj1.put("acctype", getObj.getString("acctype"));
                                }
                                if (getObj.has("level")) {
                                    putObj1.put("level", getObj.get("level"));
                                }
                                if (getObj.has("fmt")) {
                                    putObj1.put("fmt", getObj.get("fmt"));
                                }
                                if (getObj.has("accountflag")) {
                                    putObj1.put("accountflag", getObj.get("accountflag"));
                                }
                                if (getObj.has("isparent")) {
                                    putObj1.put("isparent", getObj.get("isparent"));
                                }
                                if (getObj.has("totalFlagAccountsWithchild")) {
                                    putObj1.put("totalFlagAccountsWithchild", getObj.get("totalFlagAccountsWithchild"));
                                }
                                if (getObj.has("leaf")) {
                                    putObj1.put("leaf", getObj.getBoolean("leaf"));
                                }
                                putObj1.put("accountid", accId);
                                if (getObj.get("accountname").equals("Net Loss")) {
                                    JSONObject check = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 1);
                                    JSONObject check1 = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 2);
                                    if (check.has("accountname") && check1.has("accountname")) {
                                        if (!check.get("accountname").toString().equals("Net Loss") && !check1.get("accountname").toString().equals("Net Loss")) {
                                            temprightObjArr1.put(getObj);
                                        }
                                    }
                                }
                                if (getObj.get("accountname").equals("Net Profit")) {
                                    JSONObject check = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 1);
                                    JSONObject check1 = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 2);
                                    if (check.has("accountname") && check1.has("accountname")) {
                                        if (!check.get("accountname").toString().equals("Net Profit") && !check1.get("accountname").toString().equals("Net Profit")) {
                                            temprightObjArr1.put(getObj);
                                        }
                                    }
                                }
                                if (getObj.get("accountname").equals("Gross Loss")) {
                                    JSONObject check = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 1);
                                    JSONObject check1 = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 2);
                                    if (check.has("accountname") && check1.has("accountname")) {
                                        if (!check.get("accountname").toString().equals("Gross Loss") && !check1.get("accountname").toString().equals("Gross Loss")) {
                                            temprightObjArr1.put(getObj);
                                        }
                                    }
                                }
                                if (getObj.get("accountname").equals("Gross Profit")) {
                                    JSONObject check = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 1);
                                    JSONObject check1 = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 2);
                                    if (check.has("accountname") && check1.has("accountname")) {
                                        if (!check.get("accountname").toString().equals("Gross Profit") && !check1.get("accountname").toString().equals("Gross Profit")) {
                                            temprightObjArr1.put(getObj);
                                        }
                                    }
                                }

                            }
                            if (getObj.has("amount")) {
                                putObj1.put("amount_" + monthIndex, getObj.get("amount"));
                                if (putObj1.has("totalamount")) {
                                    double temptotal = Double.parseDouble((putObj1.get("totalamount").toString().equals("") || putObj1.get("totalamount").toString().equals("-") || putObj1.get("totalamount").toString().contains("<")) ? "0.0" : (putObj1.get("totalamount").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("amount").toString().equals("") || getObj.get("amount").toString().equals("-") || getObj.get("amount").toString().contains("<")) ? "0.0" : (getObj.get("amount").toString()));
                                    putObj1.put("totalamount", temptotal);
                                } else {
                                    putObj1.put("totalamount", getObj.get("amount"));
                                }
                            }
                            jArrR.put(accId, putObj1);
                        }
                    }
                }
                localStartDate = localStartDate.plus(Period.months(1));
                monthIndex++;

            }// end looping thru the months                     

            //put the total values into the respective objects as the last amount
//            for (int i = 0; i < temprightObjArr1.length(); i++) {
//                JSONObject getObj1 = temprightObjArr1.getJSONObject(i);
//                if (getObj1.has("accountid")) {
//                    String accId = getObj1.getString("accountid");
//                    if (jArrR.has(accId)) {
//                        JSONObject getObj = jArrR.getJSONObject(accId);
//                        if (getObj.has("totalamount")) {
//                            if (!extrapref.isShowallaccountsinbs()) {
//                                //To remove 0 amount account and which should not be at level 0.
//                                double totalAmt = Double.parseDouble((getObj.get("totalamount").toString().equals("") || getObj.get("totalamount").toString().equals("-") || getObj.get("totalamount").toString().contains("<"))? "0.0" : getObj.get("totalamount").toString());
//                                double level = Double.parseDouble(getObj.get("level").toString());
//                                if (totalAmt == 0.0 && level != 0.0) {
//                                    jArrR.remove(accId);
//                                } else {
//                                    getObj.put("amount_" + (monthCount), getObj.get("totalamount"));
//                                }
//                            } else {
//                                getObj.put("amount_" + (monthCount), getObj.get("totalamount"));
//                            }
//                        }
//                    }
//                }
//            }

//            for (int i = 0; i < templeftObjArr.length(); i++) {
//                JSONObject getObj1 = templeftObjArr.getJSONObject(i);
//                if (getObj1.has("accountid")) {
//                    String accId = getObj1.getString("accountid");
//                    if (jArrL.has(accId)) {
//                        JSONObject getObj = jArrL.getJSONObject(accId);
//                        if (getObj.has("totalamount")) {
//                            if (!extrapref.isShowallaccountsinbs()) {
//                                //To remove 0 amount account and which should not be at level 0.
//                                double totalAmt = Double.parseDouble((getObj.get("totalamount").toString().equals("") || getObj.get("totalamount").toString().equals("-") || getObj.get("totalamount").toString().contains("<"))? "0.0" : getObj.get("totalamount").toString());
//                                double level = Double.parseDouble(getObj.get("level").toString());
//                                if (totalAmt == 0.0 && level != 0.0) {
//                                    jArrL.remove(accId);
//                                } else {
//                                    getObj.put("amount_" + (monthCount), getObj.get("totalamount"));
//                                }
//                            } else {
//                                getObj.put("amount_" + (monthCount), getObj.get("totalamount"));
//                            }
//                        }
//                    }
//                }
//            }
            JSONObject paramJobj = new JSONObject();
            paramJobj.put("monthCount",monthCount);

            JSONObject monthArrayObject = new JSONObject();

            // the first object would be the months array
            localStartDate = new LocalDate(startDate);
            localEndDate = new LocalDate(endDate);
            JSONArray monthArray = new JSONArray();
            JSONObject monthObj;
            JSONArray jArrR1 = AccReportsHandler.getAccountsConvertedJSONArray(paramJobj,jArrR, temprightObjArr1,extrapref.isShowallaccountsinbs(),"totalamount");
            JSONArray jArrL1 = AccReportsHandler.getAccountsConvertedJSONArray(paramJobj,jArrL, templeftObjArr,extrapref.isShowallaccountsinbs(),"totalamount");
            ArrayList monthList = new ArrayList();
            if (!isOneMonth) {
                localEndDate = localEndDate.plus(Period.months(1));
            } else {
                localEndDate = new LocalDate(endDate);
            }

            while (localStartDate.isBefore(localEndDate)) {
                String monthName = localStartDate.toString("MMM yyyy");
                localStartDate = localStartDate.plus(Period.months(1));
                monthList.add(monthName);
            }
            if(monthList.size()>1){     //For Single Month Filter do not show Total Column
                monthList.add("Total");
            }
            for (int i = 0; i < monthList.size(); i++) {
                monthObj = new JSONObject();
                monthObj.put("monthname", monthList.get(i));
                monthArray.put(monthObj);
            }

            monthArrayObject.put("months", monthArray);
            jArrR1.put(monthArrayObject);
            jArrL1.put(monthArrayObject);

            // Add title and header
            Map<String, String> headerTitleMap = accFinancialReportsService.getColumnHeaderAndTitlesFromMonthList(monthArray,extrapref.isShowAccountCodeInFinancialReport());
            String titles = headerTitleMap.get("titles");
            String headers = headerTitleMap.get("headers");
            String aligns = headerTitleMap.get("aligns");
            if (request.getAttribute("header") != null) {
                request.removeAttribute("header");
            }
            if (request.getAttribute("title") != null) {
                request.removeAttribute("title");
            }
            if (request.getAttribute("align") != null) {
                request.removeAttribute("align");
            }
            request.setAttribute("header", headers);
            request.setAttribute("title", titles);
            request.setAttribute("align", aligns);
            
            JSONObject fobj = new JSONObject();
            fobj.put("left", jArrL1);
            fobj.put("right", jArrR1);
            fobj.put("total", new JSONArray("[" + dtotal + "," + (ctotal == 0 ? ctotal : -ctotal) + "]"));
            if(dimensionBasedMonthlyBS){
                String customDimensionName = request.getAttribute("customDimensionName")==null? "" : request.getAttribute("customDimensionName").toString();
                jobj3.put("customDimensionName", customDimensionName);
                jobj3.put("dimBasedSearchJson", request.getAttribute(Constants.Acc_Search_Json).toString());
            }
            jobj3.put(Constants.RES_data, fobj);

        } catch (JSONException e) {
            e.printStackTrace();
            throw ServiceException.FAILURE("getMonthlyBalanceSheetforExport : " + e.getMessage(), e);
        } catch (Exception e) {
            System.out.println(e);
            e.printStackTrace();
        }
        return jobj3;
    }

    public JSONArray getCalculatedSalesTaxMerged(HashMap<String, Object> requestParams, List taxList, String fileType) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        double totalAmount = 0;
        double totalcategorycost = 0;
        double totalgramtexcludingtax = 0;
        DateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        DateFormat odf = new SimpleDateFormat("dd-MM-yyyy");
        JSONArray invSalesTaxjArr = new JSONArray();
        JSONObject salesTax = new JSONObject();
//        JSONArray invSalesTaxBillingjArr = new JSONArray();
        JSONObject SalesTaxBilling = new JSONObject();
        boolean isRequireSortByDate = false;
        boolean isForExport = false;// For Malaysian custom jasper template
        try {
            if (requestParams.containsKey("sdf")) {
                sdf = (SimpleDateFormat) requestParams.get("sdf");
            }
            if (requestParams.containsKey(Constants.onlydateformat)) {
                odf = (DateFormat) requestParams.get(Constants.onlydateformat);
            }
            if (requestParams.containsKey("userdf")) {
                sdf = (SimpleDateFormat) requestParams.get("userdf");
            }
//	    if (requestParams.containsKey("userdf")) {	//SDP-9187
//                odf = (SimpleDateFormat) requestParams.get("userdf");//ERP-36142
//            }
            if (requestParams.containsKey("isRequireSortByDate")) {
                isRequireSortByDate = (boolean) requestParams.get("isRequireSortByDate");
            }
            if (requestParams.containsKey("isForExport")) {
                isForExport = (boolean) requestParams.get("isForExport");
            }
            
            Map<String, Object> advanceLocalTaxLinkedToInvoice = new HashMap<String, Object>();
            String companyid = (String) requestParams.get(Constants.companyKey);
            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyObj.getEntityList().get(0);
            companyObj = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) companyObj.getEntityList().get(0);
            companyObj = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) companyObj.getEntityList().get(0);
            boolean isMalasianCompany = company.getCountry().getID().equalsIgnoreCase("137");
            Locale localeObj = (Locale) requestParams.get("locale");
            boolean isForGSTReport = requestParams.containsKey(Constants.isForGSTReport) ? (boolean) requestParams.get(Constants.isForGSTReport) : false;
            boolean isForTaxReport = requestParams.containsKey(Constants.isForTaxReport) ? (boolean) requestParams.get(Constants.isForTaxReport) : false;
            boolean isAdvanceSearch = requestParams.containsKey(Constants.isAdvanceSearch) ? (Boolean) requestParams.get(Constants.isAdvanceSearch) : false;
            String filterConjuctionCriteria = requestParams.containsKey(Constants.Filter_Criteria) ? requestParams.get(Constants.Filter_Criteria).toString() : Constants.and;
            String countryName = company.getCountry().getCountryName();
            
            boolean isMultiEntity = extraCompanyPreferences.isIsMultiEntity();
            Map<String,String> entityIndustryCodeMap = Collections.EMPTY_MAP;
            Map<String,String> invoiceEntityMap = Collections.EMPTY_MAP;
            Map<String,String> creditNoteEntityMap = Collections.EMPTY_MAP;
            Map<String,String> debitNoteEntityMap = Collections.EMPTY_MAP;
            Map<String,String> receivePaymanetEntityMap = Collections.EMPTY_MAP;
            Map<String,String> makePaymanetEntityMap = Collections.EMPTY_MAP;
            Map<String,String> jeEntityMap = Collections.EMPTY_MAP;
            String  primaryIndustryCode = companyAccountPreferences.getIndustryCode()!=null?companyAccountPreferences.getIndustryCode().getValue():"";
            /*
             * Get Entity MSIC code Mapping
             */
            if (isMalasianCompany && isForExport) {
                 try {
                     
                entityIndustryCodeMap = new HashMap<>();
                invoiceEntityMap = new HashMap<>();
                creditNoteEntityMap = new HashMap<>();
                debitNoteEntityMap = new HashMap<>();
                receivePaymanetEntityMap = new HashMap<>();
                makePaymanetEntityMap = new HashMap<>();
                jeEntityMap = new HashMap<>();
                
                Map<String, Object> requestParams0 = new HashMap<>();
                requestParams0.put(Constants.companyid, companyid);
                entityIndustryCodeMap = accGstService.getEntityMSICCode(requestParams0);
               
                if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
                     requestParams0.put(Constants.REQ_startdate,requestParams.get("startDate"));
                     requestParams0.put(Constants.REQ_startdate, requestParams.get("endDate"));
                }
                 /*
                 * GET TRANSACTION MAP's FOR ENTITY DIMENSION
                 */
                    requestParams0.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    invoiceEntityMap = accReportsService.getTransactionIndustryCodeMap(requestParams0);
                   
                    requestParams0.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    creditNoteEntityMap = accReportsService.getTransactionIndustryCodeMap(requestParams0); // Credit Note 
                    
                    requestParams0.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    debitNoteEntityMap = accReportsService.getTransactionIndustryCodeMap(requestParams0); // Debit Note 
                    
                    requestParams0.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    receivePaymanetEntityMap = accReportsService.getTransactionIndustryCodeMap(requestParams0); // Receive Payment
                    
                    requestParams0.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    makePaymanetEntityMap = accReportsService.getTransactionIndustryCodeMap(requestParams0); // Make Payment
                    
                    requestParams0.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                    jeEntityMap = accReportsService.getTransactionIndustryCodeMap(requestParams0); // Journal Entry 
                } catch (Exception ex) {
                    Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            Iterator itr = taxList.iterator();
            while (itr.hasNext()) {
                invSalesTaxjArr = new JSONArray();
//                invSalesTaxBillingjArr = new JSONArray();
                Object[] row = (Object[]) itr.next();
                Tax taxObj = (Tax) row[0];
                TaxList taxListObj = (TaxList) row[1];
                Map<String, Object> filterParams = new HashMap<String, Object>();
                filterParams.put("taxid", taxObj.getID());
                requestParams.put(TaxConstants.PERCENT, taxListObj.getPercent());//http://jira.deskera.com/browse/ERP-42115
                if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
                    filterParams.put("startDate", requestParams.get("startDate"));
                    filterParams.put("endDate", requestParams.get("endDate"));
                }

                if (requestParams.containsKey(Constants.companyKey) && requestParams.containsKey(Constants.companyKey)) {
                    filterParams.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                }
                if (requestParams.containsKey("gstss")) {
                    filterParams.put("ss", requestParams.get("gstss"));
                }
                String gcurrencyid = (String) requestParams.get(Constants.globalCurrencyKey);
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                /**
                 * *******************************With Inventory
                 * Data*******************************
                 */
                if(isAdvanceSearch){
                    filterParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.invoiceSearchJson));
                    filterParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    filterParams.put(Constants.fixedAssetsDisposalInvoiceSearchJson, requestParams.get(Constants.fixedAssetsDisposalInvoiceSearchJson));
                }
                double saleAmount = 0;//Sub Total of Principle Amount & Tax Amount.
                double saleAmountExcludingTax = 0;//Sub Total of Principle Amount.
                double taxableAmount = 0;//Sub Total of Tax Amount.
//                double totalTaxableAmount = 0;//Sub Total of Tax Amount.
                double taxCollected = 0;
                /**
                * -----------------Rules For Transaction with Sales Tax as per ERM-263---------
                * If Debit/Credit type = Debit && Tax Type = Sales Tax then  Amount Sign = Negative
                * If Debit/Credit type = Credit && Tax Type = Sales Tax then  Amount Sign = Positive.
                */

                /**
                * Block for sales invoice.
                */
                
                
                filterParams.put("onlyCount", true);
                KwlReturnObject result = accInvoiceDAOobj.getCalculatedInvTaxNew(filterParams);
                long totalInvoices = (Long)result.getEntityList().get(0);                
                
                filterParams.remove("onlyCount");
                int start = 0;
                int limit = 5000;
                while (start <=(totalInvoices-1)){
                    filterParams.put("start", start);
                    filterParams.put("limit", limit);
                    result = accInvoiceDAOobj.getCalculatedInvTaxNew(filterParams);
                    if (fileType.equals(Constants.isGSTAuditFile)) {
                        accGstService.getInvoiceRowsForAuditFile(requestParams, result.getEntityList(), invSalesTaxjArr);
                    } else {
                        Map<String, Object[]> termAmountMap = new HashMap<String, Object[]>();

                        Invoice temp = null;
                        StringBuffer invList = new StringBuffer();

                        for (Object entity : result.getEntityList()) {
                            Object[] objects = (Object[])entity;
                            temp = (Invoice)objects[0];
                            invList.append(temp.getID()).append(",");
                        }
                        String invListValue = invList.toString().substring(0, invList.length()-1);
                        termAmountMap = kwlCommonTablesDAOObj.getSummationOfTermAmtAndTermTaxAmtList(Constants.invoicetermsmap, invListValue);

                        Iterator ite1 = result.getEntityList().iterator();
                        while (ite1.hasNext()) {
                            Object[] objects = (Object[])ite1.next();
                            temp = (Invoice)objects[0];
                            JournalEntry je = (JournalEntry)objects[1];
    //                        Invoice temp = (Invoice) ite1.next();

                            double invTaxAmt = temp.getTaxamountinbase();
                            double invSalesAmt = temp.getInvoiceamount();
                            double termAmount = 0, termAmountInBase = 0;
                            double termTaxAmount = 0, termTaxAmountInBase = 0;

                            HashMap<String, Object> invTermMap = new HashMap();
                            invTermMap.put("invoiceid", temp.getID());

                            if(termAmountMap.containsKey(temp.getID())){
                                Object[] termAmounts = termAmountMap.get(temp.getID());
                                termAmount = (Double)termAmounts[1];
                                termAmountInBase = (Double)termAmounts[2];
                                termTaxAmount = (Double)termAmounts[3];
                                termTaxAmountInBase = (Double)termAmounts[4];
                            }
    //                        KwlReturnObject invoiceTermsMapresult = accInvoiceDAOobj.getInvoiceTermMap(invTermMap);
    //                        List<InvoiceTermsMap> termMap = invoiceTermsMapresult.getEntityList();
    //
    //                        for (InvoiceTermsMap invoiceTermMap : termMap) {
    //                            termAmount += invoiceTermMap.getTermamount();
    //                            termAmountInBase += invoiceTermMap.getTermamountinbase();
    //                            termTaxAmount += invoiceTermMap.getTermtaxamount();
    //                            termTaxAmountInBase += invoiceTermMap.getTermtaxamountinbase();
    //                        }
                            invTaxAmt -= termTaxAmountInBase;
                            KwlReturnObject invSalesAmountResult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), je.getExternalCurrencyRate());
                            invSalesAmt = authHandler.round((Double) invSalesAmountResult.getEntityList().get(0), companyid);

                            double amountReceivedWhileLinking = 0.0;
                            double taxReceivedWhileLinking = 0.0;
                            if (isMalasianCompany) {     // (ERP-10928)This if block executes only for MalasianCompany - SDP-1746  // Deduction of receipt amount from invoice amount.
                            HashMap<String, Object> linkReceiptDetailMap = new HashMap<String, Object>();
                            linkReceiptDetailMap.put("invoiceid", temp.getID());
                            linkReceiptDetailMap.put(Constants.companyKey, temp.getCompany().getCompanyID());
        //                    linkReceiptDetailMap.put("endDate", requestParams.get("endDate") != null ? requestParams.get("endDate") : null);
        //                    linkReceiptDetailMap.put("startDate", requestParams.get("startDate") != null ? requestParams.get("startDate") : null);
                            linkReceiptDetailMap.put("upperLimitDate", requestParams.get("endDate") != null ? requestParams.get("endDate") : null);
                            linkReceiptDetailMap.put("taxId", taxObj.getID());
                            KwlReturnObject linkedReceiptDetailResult = accReceiptDao.getLinkDetailReceipt(linkReceiptDetailMap);
                            List<LinkDetailReceipt> LinkedreceiptDetailList = linkedReceiptDetailResult.getEntityList();
                                for (LinkDetailReceipt ldr : LinkedreceiptDetailList) {
                                    // Tax amount applied in advance receipt is converted in Invoice currency
                                    Set<ReceiptAdvanceDetail> rad = ldr.getReceipt().getReceiptAdvanceDetails();
                                    double totalAdvAmount = 0;
                                    for (ReceiptAdvanceDetail receiptAdv : rad) {
                                        totalAdvAmount += receiptAdv.getAmount();
                                    }
                                    KwlReturnObject bTotalAdvAmount = null;
                                    Date date = ldr.getReceiptLinkDate();
                                    bTotalAdvAmount = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, totalAdvAmount, ldr.getReceipt().getCurrency().getCurrencyID(), temp.getCurrency().getCurrencyID(), date, 0);
                                    if (bTotalAdvAmount != null) {
                                        totalAdvAmount = (Double) bTotalAdvAmount.getEntityList().get(0);
                                    }
                                    double taxAmountInInvoiceCurrency = ldr.getReceipt().getTaxAmount() / ldr.getExchangeRateForTransaction(); // Tax amount applied in advance receipt is converted in Invoice currency
                                    amountReceivedWhileLinking += (ldr.getAmountInInvoiceCurrency());//-taxAmountInInvoiceCurrency);
                                    taxAmountInInvoiceCurrency = (taxAmountInInvoiceCurrency * (ldr.getAmountInInvoiceCurrency())) / totalAdvAmount;
                                    taxReceivedWhileLinking += taxAmountInInvoiceCurrency;
                                }

                                invSalesAmt -= amountReceivedWhileLinking;
                                if(invSalesAmt<=0){ // If the Invoice is tax is 0 after appling linked receive payment skip entry
                                    continue;
                                }
                            }

                            invTaxAmt -= taxReceivedWhileLinking;


                                KwlReturnObject invAmtConverted = null;
                                KwlReturnObject taxAmtConverted = null;
                                /*
                                 * gstFlag = Country is Singapore
                                 */ 
                                if (requestParams.containsKey("gstFlag")) {
                                    /*
                                     * Company currency is not SGD
                                     */ 
                                    if (!gcurrencyid.equals(Constants.SGDID)) {
                                        if (!temp.getCurrency().getCurrencyID().equals(Constants.SGDID)) {
                                            if (temp.getGstCurrencyRate() != 0) {
                                                  invSalesAmt = (temp.getInvoiceamount()-termAmount-termTaxAmount)*temp.getGstCurrencyRate();
                                                  invSalesAmt = authHandler.round(invSalesAmt, companyid);
                                                if (invTaxAmt != 0) {
                                                    invTaxAmt = (temp.getTaxamount()-termTaxAmount)*temp.getGstCurrencyRate();
                                                    invTaxAmt = authHandler.round(invTaxAmt, companyid);
                                                }
                                            } else {
        //                                        invAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invSalesAmt, gcurrencyid, Constants.SGDID, je.getEntryDate(), temp.getGstCurrencyRate());
                                                invAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invSalesAmt, gcurrencyid, Constants.SGDID, temp.getCreationDate(), temp.getGstCurrencyRate());
                                                invSalesAmt = (Double) invAmtConverted.getEntityList().get(0);
                                                if (invTaxAmt != 0) {
        //                                            taxAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invTaxAmt, gcurrencyid, Constants.SGDID, je.getEntryDate(), temp.getGstCurrencyRate());
                                                    taxAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invTaxAmt, gcurrencyid, Constants.SGDID, temp.getCreationDate(), temp.getGstCurrencyRate());
                                                    invTaxAmt = (Double) taxAmtConverted.getEntityList().get(0);
                                                }
                                            }
                                        } else {
                                            invSalesAmt = temp.getInvoiceamount()-termAmount-termTaxAmount;
                                            invTaxAmt = temp.getTaxamount()-termTaxAmount;
                                        }
                                    }
                                }
                            double transactionExchangeRate = 0;
                            if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                                transactionExchangeRate = (authHandler.round((temp.getInvoiceamount()-termAmount-termTaxAmount), companyid)) / (invSalesAmt);
                            } else {
                                transactionExchangeRate = je.getExternalCurrencyRate() == 0 ? 1 : je.getExternalCurrencyRate();
                            }
                            transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);

                            /**
                             * To calculate sub total.
                             */
                            saleAmount += authHandler.round(invSalesAmt, companyid);//For Sales invoice sub total was showing zero
                            saleAmountExcludingTax += authHandler.round((invSalesAmt - invTaxAmt), companyid);//For Sales invoice sub total was showing zero
                            taxableAmount += authHandler.round(invTaxAmt, companyid);
        //                    totalTaxableAmount += authHandler.round(invTaxAmt, companyid);

                            salesTax = new JSONObject();
                            salesTax.put("billid", temp.getID());
                            salesTax.put("type", "Sales Invoice");
        //                    salesTax.put("invdate", sdf.format(new Date(je.getEntryDate().getTime())));
                            salesTax.put("invdate", sdf.format(new Date(temp.getCreationDate().getTime())));
        //                     salesTax.put("invdate", temp.getShipDate().getTime());
                            salesTax.put("invname", temp.getCustomer().getName());
                            salesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                            salesTax.put("invno", temp.getInvoiceNumber());
                            salesTax.put("isLeaseFixedAsset", temp.isFixedAssetLeaseInvoice());
                            salesTax.put("invamt", authHandler.formattedAmount(invSalesAmt, companyid));
                            salesTax.put("gramtexcludingtax", authHandler.formattedAmount((invSalesAmt - invTaxAmt), companyid));//authHandler.round(((invSalesAmt*100)/(100+taxPercent)),2));                 
                            salesTax.put("journalEntryNo", je.getEntryNumber());
                            salesTax.put("jeid", je.getID());
                            salesTax.put("jedate", odf.format(je.getEntryDate()));
                            salesTax.put("invtaxamount", authHandler.formattedAmount(invTaxAmt, companyid));//authHandler.formattedAmount(authHandler.round(invSalesAmt-(invSalesAmt*100)/(100+taxPercent),2)));
                            salesTax.put("originaltaxamount", authHandler.formattedAmount(temp.getTaxamount(), companyid));
                            salesTax.put("originalamountincludingtax", authHandler.formattedAmount((temp.getInvoiceamount() - termAmount - termTaxAmount), companyid));
                            salesTax.put("transactionexchangerate", transactionExchangeRate);
                            salesTax.put("transactioncurrencysymbol", temp.getCurrency().getSymbol());
                            salesTax.put("transactioncurrencyid", temp.getCurrency().getCurrencyID());
                            salesTax.put(Constants.memo, temp.getMemo() != null ? temp.getMemo() : "");

                            /**
                             * To calculate grand total.
                             */
                            totalcategorycost += authHandler.round(invTaxAmt, companyid);//authHandler.round(invSalesAmt-(invSalesAmt*100)/(100+taxPercent),2);
                            totalgramtexcludingtax += authHandler.round(invSalesAmt - invTaxAmt, companyid);//authHandler.round((invSalesAmt*100)/(100+taxPercent),2);
                            totalAmount += authHandler.round(invSalesAmt, companyid);

                            if(isMalasianCompany && isForExport){
                                try {
                                    /*
                                     * Commented old flow for product >> Industry Code Mapping (Insert the Industry Code Detais here for  Gloabal Tax Invoice.)
                                     * //salesTax.put(Constants.MSIC_DETAIS_JSON,  accReportsService.getMsicLineBreakUp(requestParams, temp, isMalasianCompany));
                                     */
                                    String entity = "", industryCode = "";
                                    if (isMultiEntity) { // From Transaction Level
                                        entity = invoiceEntityMap.get(temp.getID());
                                        industryCode = entityIndustryCodeMap.get(entity);
                                    } else {            // From Company level
                                        industryCode = primaryIndustryCode;
                                    }
                                    JSONObject msicdetails = new JSONObject();
                                    msicdetails.put(Constants.MSIC_INVAMT, authHandler.formattedAmount(invSalesAmt, companyid));
                                    msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.formattedAmount(invTaxAmt, companyid));
                                    msicdetails.put(Constants.MSIC_CODE, industryCode);
                                    salesTax.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                                   } catch (Exception ex) {
                                            throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
                                   }
                            }

                            if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                                String country = "";
                                if (temp.getBillingShippingAddresses() != null) {
                                    if (!StringUtil.isNullOrEmpty(temp.getBillingShippingAddresses().getShippingCountry()) && !temp.getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                        country = temp.getBillingShippingAddresses().getShippingCountry();
                                    } else if (StringUtil.isNullOrEmpty(temp.getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(temp.getBillingShippingAddresses().getBillingCountry()) && !temp.getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                        country = temp.getBillingShippingAddresses().getBillingCountry();
                                    }
                                }
                                salesTax.put("invlineno", 1);
                                salesTax.put("invproduct", "");
                                salesTax.put("invuen", temp.getCustomer() != null ? (isMalasianCompany ? temp.getCustomer().getCompanyRegistrationNumber() : temp.getCustomer().getUENNumber()) : "");
                                salesTax.put("invcountry", country);
                                salesTax.put("transactioncurrencycode", temp.getCurrency().getCurrencyCode());
                            }

                            invSalesTaxjArr.put(salesTax);


                            if (isMalasianCompany) {
                                // check invoice linked with an advance payment or not if linked get paid amount
                                KwlReturnObject invoicePaidAmtObj = accReceiptDao.getReceiptAmountFromInvoiceNewUI(temp.getID());
                                double paidAmt = (Double) invoicePaidAmtObj.getEntityList().get(0);
                                if (paidAmt > 0) {
                                    KwlReturnObject receiptObj = accReceiptDao.getReceiptFromInvoiceNewUI(temp.getID());
                                    LinkDetailReceipt receiptDetail = (LinkDetailReceipt) receiptObj.getEntityList().get(0);
                                    Set<ReceiptAdvanceDetail> receiptAdvanceDetails = receiptDetail.getReceipt().getReceiptAdvanceDetails();
                                    boolean isAdvanceLocal = false;
                                    for (ReceiptAdvanceDetail advanceDetail : receiptAdvanceDetails) {
                                        if (advanceDetail.getAdvanceType() == Constants.LocalAdvanceTypePayment) {
                                            isAdvanceLocal = true;
                                        }
                                    }
                                    if (isAdvanceLocal) {
        //                                 paidAmt = paidAmt*6/106;
                                        advanceLocalTaxLinkedToInvoice.put(temp.getID(), paidAmt);
                                    }
                                }
                            }
        //                }
                        }
                        termAmountMap.clear();
                    }
                    start +=limit;
                }
                
                
                /*
                 *Calculate tax for Debit Note for Undercharged Sales Invoice (If tax used at line level)
                 *
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.debitNoteSearchJson));
                }
                result = accGoodsReceiptDAOObj.getCalculatedDNTaxGst(filterParams);
                List<DebitNoteAgainstCustomerGst> list12 = result.getEntityList();
                
                if (list12 != null) {
                    for (DebitNoteAgainstCustomerGst debitMemo : list12) {
                        double taxAmount = 0;
                        double cnSalesAmt = 0.0;
                        double dnAmountInTransactionCurrency = 0;
                        double dnTaxAmountInTransactionCurrency = 0;
                        double totalAmountwithTax = 0.0;
                        String discountType = String.valueOf(debitMemo.getDiscountispercent());
                        double discountValue = debitMemo.getDiscount();
                        //get tax amount in transaction currency
                        taxAmount = debitMemo.getRowTaxAmount();
                        
                        cnSalesAmt = (Double) debitMemo.getRate()*debitMemo.getReturnQuantity();
                        if (discountType.equalsIgnoreCase(Constants.DISCOUNT_MASTER_TYPE_PERCENTAGE)) {
                            cnSalesAmt -= (cnSalesAmt * discountValue / 100);
                        } else {
                            cnSalesAmt -= discountValue;//flat discount
                        }
                        KwlReturnObject bAmt;
                        //dnTxCurrAmt and dnTxCurrTaxAmt to use amount in tranaction currency as cnSalesAmt and taxAmount can change in below operations
                        dnAmountInTransactionCurrency = cnSalesAmt; 
                        dnTaxAmountInTransactionCurrency = taxAmount;
                        /*
                        *ERP-39555 : GST Currency Rate in DN Overcharge/Undercharge when Country currency is SGD and base currency is other than SGD 
                        *If GST Currency rate not given then consider consider external currency rate on the basis of date.
                        */
                        String currencyid = debitMemo.getDebitNote().getCurrency().getCurrencyID();
                        double gstCurrencyRate = debitMemo.getDebitNote().getGstCurrencyRate();
                        if (!gcurrencyid.equals(Constants.SGDID) && requestParams.containsKey("gstFlag")) {
                            if (!currencyid.equals(Constants.SGDID)) { //If transaction id is SGD then value for dnSalesAmt and taxAmount are in SGD 
                                //If transaction currency is not SGD, then convert in SGD
                                if (gstCurrencyRate != 0) {
                                    cnSalesAmt = cnSalesAmt * gstCurrencyRate;
                                    taxAmount = taxAmount * gstCurrencyRate;

                                } else {
                                    //If gstCurrencyRate is not given by user, then convert transaction currency to base currency and base currency to SGD
                                    KwlReturnObject DNAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, cnSalesAmt, currencyid, Constants.SGDID, debitMemo.getDebitNote().getJournalEntry().getEntryDate(), 0);
                                    if (DNAmt != null) {
                                        cnSalesAmt = (Double) DNAmt.getEntityList().get(0);
                                    }
                                    KwlReturnObject DNTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmount, currencyid, Constants.SGDID, debitMemo.getDebitNote().getJournalEntry().getEntryDate(), 0);
                                    if (DNTaxAmt != null) {
                                        taxAmount = (Double) DNTaxAmt.getEntityList().get(0);
                                    }
                                }
                            }
                        } else {
                            if (requestParams.containsKey("gstFlag")) {
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, cnSalesAmt, debitMemo.getDebitNote().getCurrency().getCurrencyID(), Constants.SGDID, debitMemo.getDebitNote().getJournalEntry().getEntryDate(), debitMemo.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, cnSalesAmt, debitMemo.getDebitNote().getCurrency().getCurrencyID(), Constants.SGDID, debitMemo.getDebitNote().getCreationDate(), debitMemo.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                            } else {
//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, debitMemo.getDebitNote().getCurrency().getCurrencyID(), debitMemo.getDebitNote().getJournalEntry().getEntryDate(), debitMemo.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, debitMemo.getDebitNote().getCurrency().getCurrencyID(), debitMemo.getDebitNote().getCreationDate(), debitMemo.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                            }
                            cnSalesAmt = (Double) bAmt.getEntityList().get(0);
                            
                            if (debitMemo.getTax() != null) {
                                KwlReturnObject bTaxAmt;
                                if (requestParams.containsKey("gstFlag")) {
//                                bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, debitMemo.getDebitNote().getCurrency().getCurrencyID(), Constants.SGDID, debitMemo.getDebitNote().getJournalEntry().getEntryDate(), debitMemo.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                                    bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, debitMemo.getDebitNote().getCurrency().getCurrencyID(), Constants.SGDID, debitMemo.getDebitNote().getCreationDate(), debitMemo.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                                } else {
//                                bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, debitMemo.getDebitNote().getCurrency().getCurrencyID(), debitMemo.getDebitNote().getJournalEntry().getEntryDate(), debitMemo.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                                    bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, debitMemo.getDebitNote().getCurrency().getCurrencyID(), debitMemo.getDebitNote().getCreationDate(), debitMemo.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                                }
                                taxAmount = (Double) bTaxAmt.getEntityList().get(0);                                
                            }
                        }
                        
                        cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                        taxAmount = authHandler.round(taxAmount, companyid);
                        totalAmountwithTax = authHandler.round(cnSalesAmt + (taxAmount), companyid);
                        
                        /*
                        * If base currency is not SGD and country currency is SGD, then calculated transaction rate else considered external currency rate from journal entry.
                        */
                        double transactionExchangeRate = 0;
                        if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                            transactionExchangeRate = dnAmountInTransactionCurrency / cnSalesAmt;
                        } else {
                            transactionExchangeRate = debitMemo.getDebitNote().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : debitMemo.getDebitNote().getJournalEntry().getExternalCurrencyRate();
                         }
                        transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                        
                        /**
                         * To calculate sub total.
                         */
                        saleAmount += authHandler.round(totalAmountwithTax, companyid);
                        saleAmountExcludingTax += authHandler.round(cnSalesAmt, companyid);
                        taxableAmount += authHandler.round(taxAmount, companyid);
//                        totalTaxableAmount += authHandler.round(taxAmount, companyid);
                        
                        
                        salesTax = new JSONObject();
                        salesTax.put("type", "Debit Note");
                        salesTax.put("noteid", debitMemo.getDebitNote().getID());
                        salesTax.put("jeid", debitMemo.getDebitNote().getJournalEntry().getID());
                        salesTax.put("jedate", odf.format(debitMemo.getDebitNote().getJournalEntry().getEntryDate()));
//                            salesTax.put("invdate", sdf.format(new Date(debitMemo.getDebitNote().getJournalEntry().getEntryDate().getTime())));
                        salesTax.put("invdate", sdf.format(new Date(debitMemo.getDebitNote().getCreationDate().getTime())));
                        salesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                        salesTax.put("invname", debitMemo.getDebitNote().getCustomer().getName());
                        salesTax.put("invno", debitMemo.getDebitNote().getDebitNoteNumber());
                        salesTax.put("invamt", authHandler.round(totalAmountwithTax, companyid));
                        salesTax.put("gramtexcludingtax", authHandler.round(cnSalesAmt, companyid));
                        salesTax.put("journalEntryNo", debitMemo.getDebitNote().getJournalEntry().getEntryNumber());
                        salesTax.put("invtaxamount", authHandler.round(taxAmount, companyid));
                        salesTax.put("billid", debitMemo.getDebitNote().getID());
                        salesTax.put("noteno", debitMemo.getDebitNote().getDebitNoteNumber());
                        salesTax.put("currencyid", debitMemo.getDebitNote().getCurrency().getCurrencyID());
//                            salesTax.put("date", odf.format(debitMemo.getDebitNote().getJournalEntry().getEntryDate()));
                        salesTax.put("date", odf.format(debitMemo.getDebitNote().getCreationDate()));
                        salesTax.put("costcenterid", debitMemo.getDebitNote().getCostcenter() == null ? "" : debitMemo.getDebitNote().getCostcenter().getID());
                        salesTax.put("lasteditedby", debitMemo.getDebitNote().getModifiedby() == null ? "" : (debitMemo.getDebitNote().getModifiedby().getFirstName() + " " + debitMemo.getDebitNote().getModifiedby().getLastName()));
                        salesTax.put(Constants.SEQUENCEFORMATID, debitMemo.getDebitNote().getSeqformat() != null ? debitMemo.getDebitNote().getSeqformat().getID() : "");
                        salesTax.put("includeprotax", debitMemo.getTax() != null ? true : false);
                        salesTax.put("personid", debitMemo.getDebitNote().getCustomer().getID());
                        salesTax.put("personname", debitMemo.getDebitNote().getCustomer().getName());
                        salesTax.put(Constants.memo, debitMemo.getDebitNote().getMemo() != null ? debitMemo.getDebitNote().getMemo() : "");
                        salesTax.put("inputType", debitMemo.getDebitNote().getDntype());
                        //originaltaxamount and originalamountincludingtax to show amount in transaction currency in report
                        salesTax.put("originaltaxamount", authHandler.round(dnTaxAmountInTransactionCurrency, companyid));
                        salesTax.put("originalamountincludingtax", authHandler.round((dnAmountInTransactionCurrency+dnTaxAmountInTransactionCurrency), companyid));
                        salesTax.put("transactionexchangerate", transactionExchangeRate);
                        salesTax.put("transactioncurrencysymbol", debitMemo.getDebitNote().getCurrency().getSymbol());
                        salesTax.put("transactioncurrencyid", debitMemo.getDebitNote().getCurrency().getCurrencyID());
                            
                        /**
                         * To calculate grand total.
                         */
                        totalcategorycost += authHandler.round(taxAmount, companyid);
                        totalgramtexcludingtax += authHandler.round(cnSalesAmt, companyid);
                        totalAmount += authHandler.round(totalAmountwithTax, companyid);

                        if (isMalasianCompany && isForExport) {
                            try {
                                String entity = "", industryCode = "";
                                if (isMultiEntity) { // From Transaction Level
                                    entity = debitNoteEntityMap.get(debitMemo.getID());
                                    industryCode = entityIndustryCodeMap.get(entity);
                                } else {            // From Company level
                                    industryCode = primaryIndustryCode;
                                }
                                JSONObject msicdetails = new JSONObject();
                                msicdetails.put(Constants.MSIC_INVAMT, authHandler.formattedAmount(totalAmountwithTax, companyid));
                                msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.formattedAmount(taxAmount, companyid));
                                msicdetails.put(Constants.MSIC_CODE, industryCode);
                                salesTax.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                            } catch (Exception ex) {
                                throw ServiceException.FAILURE("getCalculatedSalesTaxMerged : " + ex.getMessage(), ex);
                            }
                        }
                        if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                            String country = "";
                            if (debitMemo.getDebitNote().getBillingShippingAddresses() != null) {
                                if (!StringUtil.isNullOrEmpty(debitMemo.getDebitNote().getBillingShippingAddresses().getShippingCountry()) && !debitMemo.getDebitNote().getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                    country = debitMemo.getDebitNote().getBillingShippingAddresses().getShippingCountry();
                                } else if (StringUtil.isNullOrEmpty(debitMemo.getDebitNote().getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(debitMemo.getDebitNote().getBillingShippingAddresses().getBillingCountry()) && !debitMemo.getDebitNote().getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                    country = debitMemo.getDebitNote().getBillingShippingAddresses().getBillingCountry();
                                }
                            }
                            salesTax.put("invlineno", debitMemo.getSrno());
                            salesTax.put("grproduct", !StringUtil.isNullOrEmpty(debitMemo.getDescription()) ? debitMemo.getDescription() : debitMemo.getProduct() != null ? (!StringUtil.isNullOrEmpty(debitMemo.getProduct().getDescription()) ? debitMemo.getProduct().getDescription() : debitMemo.getProduct().getName()) : "");
                            salesTax.put("invuen", debitMemo.getDebitNote().getCustomer() != null ? (isMalasianCompany ? debitMemo.getDebitNote().getCustomer().getCompanyRegistrationNumber() : debitMemo.getDebitNote().getCustomer().getUENNumber()) : "");
                            salesTax.put("invcountry", country);
                            salesTax.put("transactioncurrencycode", debitMemo.getDebitNote().getCurrency().getCurrencyCode());
                        }
                        invSalesTaxjArr.put(salesTax);
                    }
                 }
                
//*********************************  Getting data for invoice details (included tax in row level) *****************//
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.invoiceSearchJson));
                    filterParams.put(Constants.fixedAssetsDisposalInvoiceSearchJson, requestParams.get(Constants.fixedAssetsDisposalInvoiceSearchJson));
                }
                result = accInvoiceDAOobj.getCalculatedInvDtlTax(filterParams);
                List<InvoiceDetail> list = result.getEntityList();
                if (list != null) {
                    Set<String> invoiceIdSet = new HashSet<String>();
                    for (InvoiceDetail temp : list) {
                        double quantity;
                        double rowTaxPercent = 0;
                        double rowTaxAmount = 0;
                        boolean isRowTaxApplicable = false;
                        double invAmtDue = 0;
                        double gramtexcludingtax = 0;
                        double ramount = 0;
                        quantity = temp.getInventory().getQuantity();
                        double rdisc = 0;
                        double amountReceivedWhileLinking = 0.0;
                        double taxReceivedWhileLinking = 0.0;
                        ramount = temp.getRowExcludingGstAmount();//authHandler.round(temp.getRate() * quantity, Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                        rowTaxAmount = temp.getRowTaxAmountInBase();
                        double lineLevelTermAmount = 0;
                        lineLevelTermAmount = temp.getLineLevelTermAmount();
                        
                        
                        rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                                                
                        if (isMalasianCompany) {    // (ERP-10928)This if block executes only for MalasianCompany - SDP-1746  // Deduction of receipt amount from invoice amount.
                        HashMap<String, Object> linkReceiptDetailMap = new HashMap<String, Object>();
                        linkReceiptDetailMap.put("invoiceid", temp.getInvoice().getID());
                        linkReceiptDetailMap.put(Constants.companyKey, temp.getInvoice().getCompany().getCompanyID());
//                        linkReceiptDetailMap.put("endDate", requestParams.get("endDate") != null ? requestParams.get("endDate") : null);
//                        linkReceiptDetailMap.put("startDate", requestParams.get("startDate") != null ? requestParams.get("startDate") : null);
                        linkReceiptDetailMap.put("upperLimitDate", requestParams.get("endDate") != null ? requestParams.get("endDate") : null);
                        linkReceiptDetailMap.put("taxId", taxObj.getID());
                        KwlReturnObject linkedReceiptDetailResult = accReceiptDao.getLinkDetailReceipt(linkReceiptDetailMap);
                        List LinkedreceiptDetailList = linkedReceiptDetailResult.getEntityList();
                        Iterator iterator = LinkedreceiptDetailList.iterator();
                            while (iterator.hasNext()) {
                                LinkDetailReceipt ldr = (LinkDetailReceipt) iterator.next();
                                // Tax amount applied in advance receipt is converted in Invoice currency
                                Set<ReceiptAdvanceDetail> rad = ldr.getReceipt().getReceiptAdvanceDetails();
                                double totalAdvAmount = 0;
                                for (ReceiptAdvanceDetail receiptAdv : rad) {
                                    totalAdvAmount += receiptAdv.getAmount();
                                }
                                KwlReturnObject bTotalAdvAmount = null;
                                Date date = ldr.getReceiptLinkDate();
                                bTotalAdvAmount = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, totalAdvAmount, ldr.getReceipt().getCurrency().getCurrencyID(), temp.getInvoice().getCurrency().getCurrencyID(), date, 0);
                                if (bTotalAdvAmount != null) {
                                    totalAdvAmount = (Double) bTotalAdvAmount.getEntityList().get(0);
                                }
                                double taxAmountInInvoiceCurrency = ldr.getReceipt().getTaxAmount() / ldr.getExchangeRateForTransaction(); // Tax amount applied in advance receipt is converted in Invoice currency
                                taxAmountInInvoiceCurrency = (taxAmountInInvoiceCurrency*ldr.getAmountInInvoiceCurrency())/totalAdvAmount;
                                amountReceivedWhileLinking += (ldr.getAmountInInvoiceCurrency() - taxAmountInInvoiceCurrency);
                                taxReceivedWhileLinking += taxAmountInInvoiceCurrency;
                            }
                            //CALCULATE PROPORTION OF AMOUNT TO BE DEDUCTED FROM LINE LEVEL
                            double principalAmtForLineDetailWithSameTax=0.0d;
                            double tempVariableForPrincipal=0.0d;
                            double tempVariableForTax=0.0d;
                            for (InvoiceDetail invDetail : temp.getInvoice().getRows()) {
                                if (invDetail.getTax()!=null&&invDetail.getTax().getID().equals(taxObj.getID())) {
                                    tempVariableForPrincipal = (invDetail.getRate() * invDetail.getInventory().getQuantity());
                                    tempVariableForPrincipal -= (invDetail.getDiscount() != null ? invDetail.getDiscount().getDiscountValue() : 0);
                                    tempVariableForPrincipal += (invDetail.getLineLevelTermAmount());
                                    tempVariableForPrincipal = authHandler.round(tempVariableForPrincipal, companyid);
                                    principalAmtForLineDetailWithSameTax += tempVariableForPrincipal;
                                    tempVariableForTax += authHandler.round((invDetail.getRowTaxAmount()), companyid);
                                }
                            }
                            if (principalAmtForLineDetailWithSameTax != 0.0) {
                                amountReceivedWhileLinking = (ramount / principalAmtForLineDetailWithSameTax) * amountReceivedWhileLinking;
                            }
                            if (tempVariableForTax != 0.0) {
                                taxReceivedWhileLinking = (rowTaxAmount / tempVariableForTax) * taxReceivedWhileLinking;
                            }
                            
                            ramount = ramount - amountReceivedWhileLinking;
                            if(ramount<=0){
                                continue;
                            }
                        }
                        rowTaxAmount = rowTaxAmount - taxReceivedWhileLinking;

                        ramount = temp.getRowExcludingGstAmountInBase();

                        KwlReturnObject invAmtConverted = null;
                        KwlReturnObject taxAmtConverted = null;
                            
                         if (requestParams.containsKey("gstFlag")) {
                             /*
                              * Company currency is not SGD
                              */ 
                            if (!gcurrencyid.equals(Constants.SGDID)) {
                                if (!temp.getInvoice().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
                                    if (temp.getGstCurrencyRate() != 0) {
                                          ramount = temp.getRowExcludingGstAmount()*temp.getGstCurrencyRate();
                                          ramount = authHandler.round(ramount, companyid);
                                        if (rowTaxAmount != 0) {
                                            rowTaxAmount = (temp.getRowTaxAmount())*temp.getGstCurrencyRate();
                                            rowTaxAmount = authHandler.round(rowTaxAmount, companyid);
                                        }
                                    } else {
//                                        invAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, ramount, gcurrencyid, Constants.SGDID, temp.getInvoice().getJournalEntry().getEntryDate(), temp.getGstCurrencyRate());
                                        invAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, ramount, gcurrencyid, Constants.SGDID, temp.getInvoice().getCreationDate(), temp.getGstCurrencyRate());
                                        ramount = (Double) invAmtConverted.getEntityList().get(0);
                                        if (rowTaxAmount != 0) {
//                                            taxAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, rowTaxAmount, gcurrencyid, Constants.SGDID, temp.getInvoice().getJournalEntry().getEntryDate(), temp.getGstCurrencyRate());
                                            taxAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, rowTaxAmount, gcurrencyid, Constants.SGDID, temp.getInvoice().getCreationDate(), temp.getGstCurrencyRate());
                                            rowTaxAmount = (Double) taxAmtConverted.getEntityList().get(0);
                                        }
                                    }
                                } else {
                                    /*
                                    * This block excute only for Singapore country.
                                    * If transaction currency is SGD , then no need to convert amount.
                                    */
                                    ramount = temp.getRowExcludingGstAmount();
                                    rowTaxAmount = temp.getRowTaxAmount(); 
                                }
                            } 
                        }
                            
//                        KwlReturnObject bAmt = null;
//                        if (requestParams.containsKey("gstFlag")) {
//                            if (!temp.getInvoice().getCurrency().getCurrencyID().equals(Constants.SGDID)) {   // Will not convert amount to SGD if transactio is allready in SGD - ERP-10409
//                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, ramount, temp.getInvoice().getCurrency().getCurrencyID(), Constants.SGDID, temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
//                            }
//                        } else {
//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getInvoice().getCurrency().getCurrencyID(), temp.getInvoice().getJournalEntry().getEntryDate(), temp.getInvoice().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
//                        }
//                        if (bAmt != null) {
//                            ramount = temp.getRowExcludingGstAmountInBase();
//                        }
                        
//                            saleAmount += authHandler.round((rowTaxAmount), 2);//saleAmount += authHandler.round((ramount * rowTaxPercent / 100), 2);
                            
                            
//                        taxableAmount += authHandler.round((rowTaxAmount), 2);//taxableAmount += authHandler.round((ramount * rowTaxPercent / 100), 2);
//                        if (!temp.getInvoice().getCustomerEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
//                            invAmtDue = accInvoiceCommon.getAmountDue(requestParams, temp.getInvoice());
//                        }
//                        if (invAmtDue == 0) {
//                            taxCollected += authHandler.round((rowTaxAmount), 2);//taxCollected += authHandler.round((ramount * rowTaxPercent / 100), 2);
//                        }
//                        System.out.println("Inv no: "+temp.getInvoice().getInvoiceNumber());
//                        System.out.println("Calculated inv amount due -> "+invAmtDue);
//                        System.out.println("Inv amount due -> "+temp.getInvoice().getInvoiceamountdue());
//                        System.out.println("Inv amount due in base -> "+temp.getInvoice().getInvoiceAmountDueInBase());

                        // calculating invoice amount -- if tax has been included in invoice level then the invoice amount for row level will be show zero.
                        
                        //ramount += termAmountInBase;//
                        //rowTaxAmount += termTaxAmountInBase;//
                         
                        double invoiceAmount = 0d;
                        if (temp.getInvoice().getTax() == null) {
                            ramount = authHandler.round(ramount, companyid);
                            rowTaxAmount = authHandler.round(rowTaxAmount, companyid);
                            invoiceAmount = ramount + (rowTaxAmount);//ramount + (ramount * rowTaxPercent / 100);
                            invoiceAmount = authHandler.round(invoiceAmount, companyid);
                            gramtexcludingtax += authHandler.round(ramount, companyid);
                            /**
                             * To calculate sub total.
                             */
                            saleAmount += authHandler.round(ramount + rowTaxAmount, companyid);
                            saleAmountExcludingTax += authHandler.round(ramount, companyid);
                            taxableAmount += authHandler.round(rowTaxAmount, companyid);
//                            totalTaxableAmount += authHandler.round(rowTaxAmount, companyid);
                            
                        } else {
                            invoiceAmount = 0;//if tax has been included in invoice level then the invoice amount for row level will be show zero.
                        }
                        double transactionExchangeRate = 0;
                        if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                            transactionExchangeRate = (temp.getRowExcludingGstAmount())/(ramount);
                        } else {
                            transactionExchangeRate = temp.getInvoice().getJournalEntry().getExternalCurrencyRate()  == 0 ? 1 : temp.getInvoice().getJournalEntry().getExternalCurrencyRate() ;
                        }
                        transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                        salesTax = new JSONObject();
                        salesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
//                        salesTax.put("invdate", sdf.format(new Date(temp.getInvoice().getJournalEntry().getEntryDate().getTime())));
                        salesTax.put("invdate", sdf.format(new Date(temp.getInvoice().getCreationDate().getTime())));
                        salesTax.put("invname", temp.getInvoice().getCustomer().getName());
                        salesTax.put("invno", temp.getInvoice().getInvoiceNumber());
                        salesTax.put("isLeaseFixedAsset", temp.getInvoice().isFixedAssetLeaseInvoice());
                        salesTax.put(Constants.billid, temp.getInvoice().getID());
                        salesTax.put("invamt", authHandler.formattedAmount(invoiceAmount, companyid));
                        salesTax.put("type", "Sales Invoice");
                        salesTax.put("gramtexcludingtax", authHandler.formattedAmount(gramtexcludingtax, companyid));
                        salesTax.put("jeid", temp.getInvoice().getJournalEntry().getID());
                        salesTax.put("jedate", odf.format(temp.getInvoice().getJournalEntry().getEntryDate()));
                        salesTax.put("journalEntryNo", temp.getInvoice().getJournalEntry().getEntryNumber());
                        
                        salesTax.put("invtaxamount", authHandler.round((rowTaxAmount), companyid));//salesTax.put("invtaxamount", (ramount * rowTaxPercent / 100));
                        salesTax.put("originaltaxamount", authHandler.round((temp.getRowTaxAmount()), companyid));
                        salesTax.put("originalamountincludingtax", authHandler.formattedAmount((temp.getRowExcludingGstAmount()+temp.getRowTaxAmount()), companyid));
                        salesTax.put("transactionexchangerate", transactionExchangeRate);
                        salesTax.put("transactioncurrencysymbol", temp.getInvoice().getCurrency().getSymbol());
                        salesTax.put("transactioncurrencyid", temp.getInvoice().getCurrency().getCurrencyID());
                        salesTax.put(Constants.memo, temp.getInvoice().getMemo() != null ? temp.getInvoice().getMemo() : "");
                        
                        /**
                         * To calculate grand total.
                         */
                        totalcategorycost += authHandler.round((rowTaxAmount), companyid);//totalcategorycost += (ramount * rowTaxPercent / 100);
                        totalgramtexcludingtax += authHandler.round(gramtexcludingtax, companyid);
                        totalAmount += authHandler.round(invoiceAmount, companyid);
                        
                        // Insert the Industry Code Detais here for Line Level Tax Invoice
                        
//                        if(isMalasianCompany && isForExport && (temp.getInventory() != null && temp.getInventory().getProduct() != null && temp.getInventory().getProduct().getIndustryCodeId() != null)) {
                        if (isMalasianCompany && isForExport ) {
                            try {
                                String entity = "", industryCode = "";
                                if (isMultiEntity) { // From Transaction Level
                                    entity = invoiceEntityMap.get(temp.getInvoice().getID());
                                    industryCode = entityIndustryCodeMap.get(entity);
                                } else {            // From Company Level
                                    industryCode = primaryIndustryCode;
                                }
                                JSONObject msicdetails = new JSONObject();
                                msicdetails.put(Constants.MSIC_INVAMT, invoiceAmount);
                                msicdetails.put(Constants.MSIC_INVTAXAMT, rowTaxAmount);
                                msicdetails.put(Constants.MSIC_CODE, industryCode);
                                salesTax.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                                } catch (Exception ex) {
                                    throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
                                }
                        }
                        
                        if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                            String country = "";
                            if (temp.getInvoice().getBillingShippingAddresses() != null) {
                                if (!StringUtil.isNullOrEmpty(temp.getInvoice().getBillingShippingAddresses().getShippingCountry()) && !temp.getInvoice().getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                    country = temp.getInvoice().getBillingShippingAddresses().getShippingCountry();
                                } else if (StringUtil.isNullOrEmpty(temp.getInvoice().getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(temp.getInvoice().getBillingShippingAddresses().getBillingCountry()) && !temp.getInvoice().getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                    country = temp.getInvoice().getBillingShippingAddresses().getBillingCountry();
                                }
                            }
                            salesTax.put("invlineno", temp.getSrno());
                            salesTax.put("invproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : temp.getInventory().getProduct() != null ? temp.getInventory().getProduct().getName() : "");
                            salesTax.put("invuen", temp.getInvoice().getCustomer() != null ? (isMalasianCompany ? temp.getInvoice().getCustomer().getCompanyRegistrationNumber() : temp.getInvoice().getCustomer().getUENNumber()) : "");
                            salesTax.put("invcountry", country);
                            salesTax.put("transactioncurrencycode", temp.getInvoice().getCurrency().getCurrencyCode());
                        }
                        invSalesTaxjArr.put(salesTax);

                        invoiceIdSet.add(temp.getInvoice().getID());
                        

                    }
                    
                    if (isMalasianCompany) {
                        for (String invIds : invoiceIdSet) {
                            // check invoice linked with an advance payment or not if linked get paid amount

                            KwlReturnObject invoicePaidAmtObj = accReceiptDao.getReceiptAmountFromInvoiceNewUI(invIds);
                            double paidAmt = (Double) invoicePaidAmtObj.getEntityList().get(0);
                            if (paidAmt > 0) {
                                KwlReturnObject receiptObj = accReceiptDao.getReceiptFromInvoiceNewUI(invIds);
                                LinkDetailReceipt receiptDetail = (LinkDetailReceipt) receiptObj.getEntityList().get(0);
                                Set<ReceiptAdvanceDetail> receiptAdvanceDetails = receiptDetail.getReceipt().getReceiptAdvanceDetails();
                                boolean isAdvanceLocal = false;
                                for (ReceiptAdvanceDetail advanceDetail : receiptAdvanceDetails) {
                                    if (advanceDetail.getAdvanceType() == Constants.LocalAdvanceTypePayment) {
                                        isAdvanceLocal = true;
                                    }
                                }
                                if (isAdvanceLocal) {
//                                 paidAmt = paidAmt*6/106;
                                    advanceLocalTaxLinkedToInvoice.put(invIds, paidAmt);
                                }
                            }
                        }
                    }
                }
                
                /*Code started for Invoice Terms. We are showing it in separate line.*/
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.invoiceSearchJson));
                    filterParams.put(Constants.fixedAssetsDisposalInvoiceSearchJson, requestParams.get(Constants.fixedAssetsDisposalInvoiceSearchJson));
                }
                KwlReturnObject salesTermMapResult = accInvoiceDAOobj.getSalesInvoiceTermsMapList(filterParams);
                List<InvoiceTermsMap> salesTermMapList = salesTermMapResult.getEntityList();
                for (InvoiceTermsMap temp : salesTermMapList) {
                    double termAmount = 0;
                    double termAmountInBase = 0;
                    if (temp.getInvoice().isGstIncluded()) {
                        termAmount = temp.getTermAmountExcludingTax();
                        termAmountInBase = temp.getTermAmountExcludingTaxInBase();
                    } else {
                        termAmount = temp.getTermamount();
                        termAmountInBase = temp.getTermamountinbase();
                    }
                    double termTaxAmount = temp.getTermtaxamount();
                    double termTaxAmountInBase = temp.getTermtaxamountinbase();


                    KwlReturnObject invAmtConverted = null;
                    KwlReturnObject taxAmtConverted = null;
                    /*
                    * gstFlag = Country is Singapore
                    */ 
                    if (requestParams.containsKey("gstFlag")) {
                        /*
                        * Company currency is not SGD
                        */ 
                        if (!gcurrencyid.equals(Constants.SGDID)) {
                            if (!temp.getInvoice().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
                                if (temp.getInvoice().getGstCurrencyRate() != 0) {
                                    termAmountInBase = (termAmount) * temp.getInvoice().getGstCurrencyRate();
                                    termAmountInBase = authHandler.round(termAmountInBase, companyid);
                                    if (termTaxAmount != 0) {
                                        termTaxAmountInBase = (termTaxAmount)*temp.getInvoice().getGstCurrencyRate();
                                        termTaxAmountInBase = authHandler.round(termTaxAmountInBase, companyid);
                                    }
                                } else {
                                invAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, termAmountInBase, gcurrencyid, Constants.SGDID, temp.getInvoice().getCreationDate(), temp.getInvoice().getGstCurrencyRate());
                                    termAmountInBase = (Double) invAmtConverted.getEntityList().get(0);
                                    if (termTaxAmount != 0) {
                                        taxAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, termTaxAmountInBase, gcurrencyid, Constants.SGDID, temp.getInvoice().getCreationDate(), temp.getInvoice().getGstCurrencyRate());
                                        termTaxAmountInBase = (Double) taxAmtConverted.getEntityList().get(0);
                                    }
                                }
                            } else {
                                /*
                                 * If transaction currency is SGD , then no need to convert amount.
                                 */
                                termAmount = termAmountInBase = temp.getTermamount();
                                termTaxAmount = termTaxAmountInBase = temp.getTermtaxamount();
                            }
                        }
                    }
                    double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = (authHandler.round((temp.getTermamount()), companyid)) / (termAmountInBase);
                    } else {
                        transactionExchangeRate = temp.getInvoice().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getInvoice().getJournalEntry().getExternalCurrencyRate();
                    }

                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);

                    /**
                    * To calculate sub total.
                    */

                    taxableAmount += authHandler.round(termTaxAmountInBase, companyid);
                    saleAmountExcludingTax += authHandler.round(termAmountInBase, companyid);
                    saleAmount += authHandler.round(termAmountInBase+termTaxAmountInBase, companyid);

//                            totalTaxableAmount += authHandler.round(rowTaxAmountInBase, companyid);

                    salesTax = new JSONObject();
                    salesTax.put(Constants.billid, temp.getInvoice().getID());
                    salesTax.put("type", "Sales Invoice");
                    salesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    salesTax.put("jeid", temp.getInvoice().getJournalEntry().getID());
                    salesTax.put("jedate", odf.format(temp.getInvoice().getJournalEntry().getEntryDate()));
                    salesTax.put("journalEntryNo", temp.getInvoice().getJournalEntry().getEntryNumber());
                    salesTax.put("invno", temp.getInvoice().getInvoiceNumber());
                    salesTax.put("isLeaseFixedAsset", temp.getInvoice().isFixedAssetLeaseInvoice());
                    salesTax.put("invname", temp.getInvoice().getCustomer().getName());
                    salesTax.put("invdate", sdf.format(new Date(temp.getInvoice().getCreationDate().getTime())));

                    salesTax.put("invamt", authHandler.formattedAmount(termAmountInBase+termTaxAmountInBase, companyid));
                    salesTax.put("gramtexcludingtax", authHandler.formattedAmount(termAmountInBase, companyid));
                    salesTax.put("invtaxamount", authHandler.round(termTaxAmountInBase, companyid));

                    salesTax.put("originaltaxamount", authHandler.round(termTaxAmount, companyid));
                    salesTax.put("originalamountincludingtax", authHandler.round(termAmount+termTaxAmount, companyid));

                    salesTax.put("transactionexchangerate", transactionExchangeRate);
                    salesTax.put("transactioncurrencysymbol", temp.getInvoice().getCurrency().getSymbol());
                    salesTax.put("transactioncurrencyid", temp.getInvoice().getCurrency().getCurrencyID());
                    salesTax.put(Constants.memo, temp.getInvoice().getMemo() != null ? temp.getInvoice().getMemo() : "");

                    /**
                        * To calculate grand total.
                        */

                    totalcategorycost += authHandler.round((termTaxAmountInBase), companyid);//totalcategorycost += (ramount * rowTaxPercent / 100);
                    totalgramtexcludingtax += authHandler.round(termAmountInBase, companyid);
                    totalAmount += authHandler.round(termAmountInBase+termTaxAmountInBase, companyid);
                    
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        String country = "";
                        if (temp.getInvoice().getBillingShippingAddresses() != null) {
                            if (!StringUtil.isNullOrEmpty(temp.getInvoice().getBillingShippingAddresses().getShippingCountry()) && !temp.getInvoice().getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                country = temp.getInvoice().getBillingShippingAddresses().getShippingCountry();
                            } else if (StringUtil.isNullOrEmpty(temp.getInvoice().getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(temp.getInvoice().getBillingShippingAddresses().getBillingCountry()) && !temp.getInvoice().getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                country = temp.getInvoice().getBillingShippingAddresses().getBillingCountry();
                            }
                        }
                        salesTax.put("invlineno", 1);
                        salesTax.put("invproduct", "");
                        salesTax.put("invuen", temp.getInvoice().getCustomer() != null ? (isMalasianCompany ? temp.getInvoice().getCustomer().getCompanyRegistrationNumber() : temp.getInvoice().getCustomer().getUENNumber()) : "");
                        salesTax.put("invcountry", country);
                        salesTax.put("transactioncurrencycode", temp.getInvoice().getCurrency().getCurrencyCode());
                    }
                    invSalesTaxjArr.put(salesTax);

                }
                /*Code end for Invoice Terms.*/                
                        
                /*
                 * 
                 * Calculate tax for Debit Note for Undercharged Sales Invoice(If tax used at global level)
                 * ERP-28249
                 *
                 */
//                if (isMalasianCompany) {
                    if (isAdvanceSearch) {
                        filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.debitNoteSearchJson));
                        filterParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    }
                    result = accGoodsReceiptDAOObj.getCalculatedDebitNoteTax(filterParams);
                    List<DebitNote> calculateDNTaxList = result.getEntityList();
                    if (calculateDNTaxList != null) {
                        if (fileType.equals(Constants.isGSTAuditFile)) {
                            /**
                             * http://jira.deskera.com/browse/ERP-42115 - To show
                             * each product as separate row in audit file even when
                             * global level tax is applied.
                             */
                            accGstService.getDNUnderchargeRowsForAuditFile(requestParams, calculateDNTaxList, invSalesTaxjArr);
                        } else {
                            for (DebitNote debitMemo : calculateDNTaxList) {
                                double dnAmount = 0;
                                double taxAmount = 0;
                                double dnAmountExcludingTax = 0;
                                double dnAmountInTransactionCurrency = 0;
                                double dnTaxAmountInTransactionCurrency = 0;
                                double dnDiscountAmt=0;
                                KwlReturnObject result1 = accJournalEntryobj.getJournalEntryDetail(debitMemo.getJournalEntry().getID(), debitMemo.getJournalEntry().getCompany().getCompanyID());
                                Iterator iterator = result1.getEntityList().iterator();
                                boolean taxflag = false;
                                while (iterator.hasNext()) {
                                    JournalEntryDetail jed = (JournalEntryDetail) iterator.next();
                                    Account account = null;
                                    account = jed.getAccount();

                                    if (!jed.isDebit() && account.getID().equals(taxObj.getAccount().getID())) {
                                        taxAmount += jed.getAmount();
                                        taxflag = true;
                                    }
                                    if (jed.isDebit()) {
                                        dnAmount += jed.getAmount();
                                    }
                                }                                                                
                                /*
                                 * ERP-38665 - debit note for undercharged sales invoice(If tax used at global level)
                                 * In GST reports principal amount should be excluding Discount 
                                 */
                                Set<DebitNoteAgainstCustomerGst> rowGstDetail = debitMemo.getRowsGst();
                                if (rowGstDetail != null) {
                                    for (DebitNoteAgainstCustomerGst rowGst : rowGstDetail) {
                                        double dnSaleAmt = rowGst.getRate() * rowGst.getReturnQuantity();
                                        double discountValue = rowGst.getDiscount();
                                        String discountType = String.valueOf(rowGst.getDiscountispercent());
                                        if (discountType.equalsIgnoreCase(Constants.DISCOUNT_MASTER_TYPE_PERCENTAGE)) {
                                            dnDiscountAmt += (dnSaleAmt * discountValue / 100);// amount excluding discount.ERP-38665
                                        } else {
                                            dnDiscountAmt += discountValue; //flat discount 
                                        }
                                    }
                                }
                                dnAmount = dnAmount - dnDiscountAmt;
                               //dnTxCurrAmt and dnTxCurrTaxAmt to use amount in tranaction currency as dnAmount and taxAmount can change in below operations
                                dnAmountInTransactionCurrency = dnAmount;
                                dnTaxAmountInTransactionCurrency = taxAmount;

                                String currencyid = debitMemo.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : debitMemo.getJournalEntry().getCurrency().getCurrencyID();
                                if (taxflag) {
                                    /*
                                     *ERP-39555 : GST Currency Rate in CN Overcharge/Undercharge when Country currency is SGD and base currency is other than SGD 
                                     *If GST Currency rate not given then consider consider external currency rate on the basis of date.
                                     */
                                    if (!gcurrencyid.equals(Constants.SGDID) && requestParams.containsKey("gstFlag")) {
                                        if (!currencyid.equals(Constants.SGDID)) { //If transaction id is SGD then value for dnAmount and taxAmount are in SGD
                                            //If transaction Currency is not SGD, then convert in SGD
                                            if (debitMemo.getGstCurrencyRate() != 0) {
                                                dnAmount = dnAmount * debitMemo.getGstCurrencyRate();
                                                taxAmount = taxAmount * debitMemo.getGstCurrencyRate();

                                            } else {
                                                //If gstCurrencyRate is not given by user, then convert transaction currency to base currency and base currency to SGD
                                                KwlReturnObject DNAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, dnAmount, currencyid, Constants.SGDID, debitMemo.getJournalEntry().getEntryDate(), 0);
                                                if (DNAmt != null) {
                                                    dnAmount = (Double) DNAmt.getEntityList().get(0);
                                                }
                                                KwlReturnObject DNTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmount, currencyid, Constants.SGDID, debitMemo.getJournalEntry().getEntryDate(), 0);
                                                if (DNTaxAmt != null) {
                                                    taxAmount = (Double) DNTaxAmt.getEntityList().get(0);
                                                }
                                            }

                                        }

                                    } else {
                                        KwlReturnObject bAmt1 = null;
    //                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, dnAmount, currencyid, debitMemo.getJournalEntry().getEntryDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, dnAmount, currencyid, debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                                        if (bAmt1 != null) {
                                            dnAmount = (Double) bAmt1.getEntityList().get(0);
                                        }
                                        KwlReturnObject bAmt2 = null;

    //                                bAmt2 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, debitMemo.getJournalEntry().getEntryDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                                        bAmt2 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                                        if (bAmt2 != null) {
                                            taxAmount = (Double) bAmt2.getEntityList().get(0);
                                        }
                                    }
                                    dnAmountExcludingTax += dnAmount-taxAmount;
                                    /*
                                     * If base currency is not SGD and country currency is SGD, then calculated transaction rate else considered external currency rate from journal entry.
                                     */
                                    double transactionExchangeRate = 0;
                                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                                        transactionExchangeRate = dnAmountInTransactionCurrency / dnAmount;
                                    } else {
                                        transactionExchangeRate = debitMemo.getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : debitMemo.getJournalEntry().getExternalCurrencyRate();
                                    }
                                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);

                                    /**
                                     * To calculate sub total.
                                     */
                                    saleAmount += (authHandler.round(dnAmountExcludingTax, companyid) + authHandler.round(taxAmount, companyid));
                                    saleAmountExcludingTax += (authHandler.round(dnAmountExcludingTax, companyid));
                                    taxableAmount += (authHandler.round(taxAmount, companyid));
    //                                totalTaxableAmount += authHandler.round(taxAmount, companyid);


                                    salesTax = new JSONObject();
                                    salesTax.put("type", "Debit Note");
                                    salesTax.put("noteid", debitMemo.getID());
                                    salesTax.put("jeid", debitMemo.getJournalEntry().getID());
                                    salesTax.put("jedate", odf.format(debitMemo.getJournalEntry().getEntryDate()));
    //                                salesTax.put("invdate", sdf.format(new Date(debitMemo.getJournalEntry().getEntryDate().getTime())));
                                    salesTax.put("invdate", sdf.format(new Date(debitMemo.getCreationDate().getTime())));
                                    salesTax.put("invname", debitMemo.getCustomer().getName());
                                    salesTax.put("invno", debitMemo.getDebitNoteNumber());
                                    salesTax.put("invamt", authHandler.round(dnAmount, companyid));
                                    //originalamountincludingtax to show amount in transaction currency in report
                                    salesTax.put("originalamountincludingtax", authHandler.round(dnAmountInTransactionCurrency, companyid));
                                    salesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be substract.
                                    salesTax.put("gramtexcludingtax", authHandler.round(dnAmountExcludingTax, companyid));
                                    salesTax.put("journalEntryNo", debitMemo.getJournalEntry().getEntryNumber());
                                    salesTax.put("invtaxamount", authHandler.round(taxAmount, companyid));
                                    //originaltaxamount to show amount in transaction currency in report
                                    salesTax.put("originaltaxamount", authHandler.round(dnTaxAmountInTransactionCurrency, companyid));
                                    salesTax.put("transactionexchangerate", transactionExchangeRate);
                                    salesTax.put("transactioncurrencysymbol", debitMemo.getCurrency().getSymbol());
                                    salesTax.put("transactioncurrencyid", debitMemo.getCurrency().getCurrencyID());
                                    salesTax.put(Constants.memo, debitMemo.getMemo() != null ? debitMemo.getMemo() : "");

                                    /**
                                     * To calculate grand total.
                                     */
                                    totalcategorycost += authHandler.round(taxAmount, companyid);
                                    totalgramtexcludingtax += authHandler.round(dnAmountExcludingTax, companyid);
                                    totalAmount += authHandler.round(dnAmount, companyid);

                                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                                        String country = "";
                                        if (debitMemo.getBillingShippingAddresses() != null) {
                                            if (!StringUtil.isNullOrEmpty(debitMemo.getBillingShippingAddresses().getShippingCountry()) && !debitMemo.getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                                country = debitMemo.getBillingShippingAddresses().getShippingCountry();
                                            } else if (StringUtil.isNullOrEmpty(debitMemo.getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(debitMemo.getBillingShippingAddresses().getBillingCountry()) && !debitMemo.getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                                country = debitMemo.getBillingShippingAddresses().getBillingCountry();
                                            }
                                        }
                                        salesTax.put("invlineno", 1);
                                        salesTax.put("invproduct", "");
                                        salesTax.put("invuen", debitMemo.getCustomer() != null ? (isMalasianCompany ? debitMemo.getCustomer().getCompanyRegistrationNumber() : debitMemo.getCustomer().getUENNumber()) : "");
                                        salesTax.put("invcountry", country);
                                        salesTax.put("transactioncurrencycode", debitMemo.getCurrency().getCurrencyCode());
                                    }

                                    invSalesTaxjArr.put(salesTax);
                                }
                            }
                        }
                    }
//                }
           
//******************************CN with GST on Total Amounts*****************************************************//                
                if(isAdvanceSearch){
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.creditNoteSearchJson));
                    filterParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                }
                result = accInvoiceDAOobj.getCalculatedCNTax(filterParams);
                List<CreditNote> list11 = result.getEntityList();
                if (list11 != null) {
                    for (CreditNote creditMemo : list11) {
                        double dnAmount = 0;
                        double taxAmount = 0;
                        double dnAmountExcludingTax = 0;
                        KwlReturnObject result1 = accJournalEntryobj.getJournalEntryDetail(creditMemo.getJournalEntry().getID(), creditMemo.getJournalEntry().getCompany().getCompanyID());
                        Iterator iterator = result1.getEntityList().iterator();
                        boolean taxflag = false;
                        while (iterator.hasNext()) {
                            JournalEntryDetail jed = (JournalEntryDetail) iterator.next();
                            Account account = null;
                            account = jed.getAccount();

                            //Logic to get new OTHER_CURRENT_LIABILITIES group from old OTHER_CURRENT_LIABILITIES
                            //To do - Need to test wheteher is working or not
                            String currLibName = "";
                            Group liab_group = accAccountDAOobj.getNewGroupFromOldId(Group.OTHER_CURRENT_LIABILITIES, account.getCompany().getCompanyID());
                            if (liab_group != null) {
                                currLibName = liab_group.getID();
                            }

                            if (account.getGroup().getID().equals(currLibName)) {
                                if (jed.isDebit() && account.getID().equals(taxObj.getAccount().getID())) {
                                    taxAmount = jed.getAmount();
                                    taxflag = true;
                                }
                            } else if (jed.isDebit()) {
                                dnAmountExcludingTax += jed.getAmount();
                            }
                            if (!jed.isDebit()) {
                                dnAmount += jed.getAmount();
                            }
                        }
                        if (taxflag) {
                            String currencyid = creditMemo.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : creditMemo.getJournalEntry().getCurrency().getCurrencyID();
                            KwlReturnObject bAmt1 = null;
                            if (requestParams.containsKey("gstFlag")) {
                                if (!creditMemo.getCurrency().getCurrencyID().equals(Constants.SGDID)) {
//                                    bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, dnAmount, currencyid, Constants.SGDID, creditMemo.getJournalEntry().getEntryDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                                    bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, dnAmount, currencyid, Constants.SGDID, creditMemo.getCreationDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                                }
                            } else {
//                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, dnAmount, currencyid, creditMemo.getJournalEntry().getEntryDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, dnAmount, currencyid, creditMemo.getCreationDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                            }
                            if (bAmt1 != null) {
                                dnAmount = (Double) bAmt1.getEntityList().get(0);
                            }
                            dnAmount = authHandler.round(dnAmount, companyid);
//                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, creditMemo.getJournalEntry().getEntryDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, creditMemo.getCreationDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                            taxAmount = (Double) bAmt1.getEntityList().get(0);
                            taxAmount = authHandler.round(taxAmount, companyid);
                            
                            /**
                             * By default type of tax account is debit for CreditNote
                             * If type of tax account is debit & sales tax then
                             * amount should be negative Refer - ERM-263.
                             */
                            dnAmount = -dnAmount;
                            dnAmountExcludingTax = -dnAmountExcludingTax;
                            taxAmount = -taxAmount;
                            
                            /**
                             * To calculate sub total.
                             */
                            saleAmount += authHandler.round(dnAmountExcludingTax + taxAmount, companyid);
                            saleAmountExcludingTax += authHandler.round(dnAmountExcludingTax, companyid);
                            taxableAmount += authHandler.round(taxAmount, companyid);
//                            totalTaxableAmount += authHandler.round(taxAmount, companyid);
                            
                            double transactionExchangeRate = creditMemo.getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : creditMemo.getJournalEntry().getExternalCurrencyRate();
                            salesTax = new JSONObject();
                            salesTax.put("type", "Credit Note");
                            salesTax.put("noteid", creditMemo.getID());
                            salesTax.put("jeid", creditMemo.getJournalEntry().getID());
                            salesTax.put("jedate", odf.format(creditMemo.getJournalEntry().getEntryDate()));
//                            salesTax.put("invdate", sdf.format(new Date(creditMemo.getJournalEntry().getEntryDate().getTime())));
                            salesTax.put("invdate", sdf.format(new Date(creditMemo.getCreationDate().getTime())));
                            salesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                            salesTax.put("invname", creditMemo.getCustomer().getName());
                            salesTax.put("invno", creditMemo.getCreditNoteNumber());
                            salesTax.put("invamt", authHandler.round(dnAmount, companyid));
                            salesTax.put("gramtexcludingtax", authHandler.round(dnAmountExcludingTax, companyid));
                            salesTax.put("journalEntryNo", creditMemo.getJournalEntry().getEntryNumber());
                            salesTax.put("invtaxamount", authHandler.round(taxAmount, companyid));
                            salesTax.put("originaltaxamount", authHandler.round(taxAmount * transactionExchangeRate, companyid));
                            salesTax.put("originalamountincludingtax", authHandler.round(dnAmount * transactionExchangeRate, companyid));
                            salesTax.put("transactionexchangerate", transactionExchangeRate);
                            salesTax.put("transactioncurrencysymbol", creditMemo.getCurrency().getSymbol());
                            salesTax.put("transactioncurrencyid", creditMemo.getCurrency().getCurrencyID());
                            salesTax.put(Constants.memo, creditMemo.getMemo() != null ? creditMemo.getMemo() : "");
                            
                            /**
                             * To calculate sub total.
                             */
                            totalcategorycost += authHandler.round(taxAmount, companyid);
                            totalgramtexcludingtax += authHandler.round(dnAmountExcludingTax, companyid);
                            totalAmount += authHandler.round(dnAmount, companyid);
                            
                            if (isMalasianCompany && isForExport) { // Code For Credit Note OutPut Tax Jasper
                                try {
                                    String entity = "", industryCode = "";
                                    if (isMultiEntity) { // From Transaction Level
                                        entity = creditNoteEntityMap.get(creditMemo.getID());
                                        industryCode = entityIndustryCodeMap.get(entity);
                                    } else {            // From Company level
                                        industryCode = primaryIndustryCode;
                                    }
                                    JSONObject msicdetails = new JSONObject();
                                    msicdetails.put(Constants.MSIC_INVAMT, authHandler.formattedAmount(dnAmount, companyid));
                                    msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.formattedAmount(taxAmount, companyid));
                                    msicdetails.put(Constants.MSIC_CODE, industryCode);
                                    salesTax.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                                } catch (Exception ex) {
                                    throw ServiceException.FAILURE("getCalculatedSalesTaxMerged : " + ex.getMessage(), ex);
                                }
                            }
                            if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                                String country = "";
                                if (creditMemo.getBillingShippingAddresses() != null) {
                                    if (!StringUtil.isNullOrEmpty(creditMemo.getBillingShippingAddresses().getShippingCountry()) && !creditMemo.getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                        country = creditMemo.getBillingShippingAddresses().getShippingCountry();
                                    } else if (StringUtil.isNullOrEmpty(creditMemo.getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(creditMemo.getBillingShippingAddresses().getBillingCountry()) && !creditMemo.getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                        country = creditMemo.getBillingShippingAddresses().getBillingCountry();
                                    }
                                }
                                salesTax.put("invlineno", 1);
                                salesTax.put("invproduct", "");
                                salesTax.put("invuen", creditMemo.getCustomer() != null ? (isMalasianCompany ? creditMemo.getCustomer().getCompanyRegistrationNumber() : creditMemo.getCustomer().getUENNumber()) : "");
                                salesTax.put("invcountry", country);
                                salesTax.put("transactioncurrencycode", creditMemo.getCurrency().getCurrencyCode());
                            }
                            
                            invSalesTaxjArr.put(salesTax);
                        }
                    }
                }
                
                
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.creditNoteSearchJson));
                }
                /*
                *Credit Note for Overcharged Sales Invoice(Tax applied at Global Level)
                */
                result = accInvoiceDAOobj.getCalculatedCreditNoteTax(filterParams);
                List<CreditNote> calculatedCNTaxList = result.getEntityList();
                if (fileType.equals(Constants.isGSTAuditFile)) {
                    /**
                     * http://jira.deskera.com/browse/ERP-42115 - To show each
                     * product as separate row in audit file even when global
                     * level tax is applied.
                     */
                    accGstService.getCNOverchargeRowsForAuditFile(requestParams, calculatedCNTaxList, invSalesTaxjArr);
                } else {
                    for (CreditNote creditMemo : calculatedCNTaxList) {
                        double cnAmount = 0;
                        double taxAmount = 0;
                        double cnAmountExcludingTax = 0;
                        double cnAmountInTransactionCurrency = 0;
                        double cnTaxAmountInTransactionCurrency = 0;
                        double cnDiscountAmt=0;
                        KwlReturnObject result1 = accJournalEntryobj.getJournalEntryDetail(creditMemo.getJournalEntry().getID(), creditMemo.getJournalEntry().getCompany().getCompanyID());
                        List<JournalEntryDetail> jeDetailList = result1.getEntityList();
                        boolean taxflag = false;
                        for (JournalEntryDetail jed : jeDetailList) {
                            Account account = jed.getAccount();
                            if (jed.isDebit() && account.getID().equals(taxObj.getAccount().getID())) {
                                taxAmount += jed.getAmount();
                                taxflag = true;
                            }
                            if (jed.isDebit()) {
                                cnAmount += jed.getAmount();
                            }
                        }
                        /*
                         * ERP-38665 -credit note for overcharged  sales invoice(If tax used at global level)
                         * In GST reports principal amount should be excluding Discount 
                         */
                        Set<CreditNoteAgainstVendorGst> rowGstDetail = creditMemo.getRowsGst();
                        if (rowGstDetail != null) {
                            for (CreditNoteAgainstVendorGst rowGst : rowGstDetail) {
                                double cnSaleAmt = rowGst.getRate() * rowGst.getReturnQuantity();
                                double discountValue = rowGst.getDiscount();
                                String discountType = String.valueOf(rowGst.getDiscountispercent());
                                if (discountType.equalsIgnoreCase(Constants.DISCOUNT_MASTER_TYPE_PERCENTAGE)) {
                                    cnDiscountAmt += (cnSaleAmt * discountValue / 100);// amount excluding discount.ERP-38665
                                } else {
                                    cnDiscountAmt += discountValue; //flat discount 
                                }
                            }
                        }
                        cnAmount = cnAmount - cnDiscountAmt;
                        //The cnSalesAmt and taxAmount is in transaction currency
                        cnAmountInTransactionCurrency = cnAmount;
                        cnTaxAmountInTransactionCurrency = taxAmount;

                        String currencyid = creditMemo.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : creditMemo.getJournalEntry().getCurrency().getCurrencyID();
                        if (taxflag) {
                            /*
                            *ERP-39555 : GST Currency Rate in CN Overcharge/Undercharge when Country currency is SGD and base currency is other than SGD 
                            *If GST Currency rate not given then consider consider external currency rate on the basis of date.
                            */
                            if (!gcurrencyid.equals(Constants.SGDID) && requestParams.containsKey("gstFlag")) {
                                if (!currencyid.equals(Constants.SGDID)) { //If transaction id is SGD then value from jedetails are in SGD
                                    //If transaction Currency is not SGD, then convert in SGD
                                    if (creditMemo.getGstCurrencyRate() != 0) {
                                        cnAmount = cnAmount * creditMemo.getGstCurrencyRate();
                                        taxAmount = taxAmount * creditMemo.getGstCurrencyRate();

                                    } else {
                                        //If gstCurrencyRate is not given by user, then convert transaction currency to base currency and base currency to SGD
                                        KwlReturnObject CNAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, cnAmount, currencyid, Constants.SGDID, creditMemo.getJournalEntry().getEntryDate(), 0);
                                        if (CNAmt != null) {
                                            cnAmount = (Double) CNAmt.getEntityList().get(0);
                                        }
                                        KwlReturnObject CNTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmount, currencyid, Constants.SGDID, creditMemo.getJournalEntry().getEntryDate(), 0);
                                        if (CNTaxAmt != null) {
                                            taxAmount = (Double) CNTaxAmt.getEntityList().get(0);
                                        }
                                    }

                                }

                            } else {

                                KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, cnAmount, currencyid, creditMemo.getCreationDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                                if (bAmt1 != null) {
                                    cnAmount = (Double) bAmt1.getEntityList().get(0);
                                }                            
                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, creditMemo.getCreationDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                                taxAmount = (Double) bAmt1.getEntityList().get(0);                            
                            }
                            cnAmountExcludingTax = cnAmount - taxAmount;
                            cnAmount = authHandler.round(cnAmount, companyid);
                            taxAmount = authHandler.round(taxAmount, companyid);

                            /*
                            * If base currency is not SGD and country currency is SGD, then calculated transaction rate else considered external currency rate from journal entry.
                            */
                            double transactionExchangeRate = 0;
                            if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                                transactionExchangeRate = cnAmountInTransactionCurrency / cnAmount;
                            } else {
                                transactionExchangeRate = creditMemo.getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : creditMemo.getJournalEntry().getExternalCurrencyRate();
                            }
                            transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);

                            /**
                             * Customer Credit Note with Sales Tax to be shown as negative in GST
                             * Report.
                             */
                            /**
                             * By default type of tax account is debit for CreditNote
                             * If type of tax account is debit & sales tax then
                             * amount should be negative Refer - ERM-263.
                             */
                            cnAmount = -cnAmount;
                            cnAmountExcludingTax = -cnAmountExcludingTax;
                            taxAmount = -taxAmount;
                            cnAmountInTransactionCurrency = -cnAmountInTransactionCurrency;
                            cnTaxAmountInTransactionCurrency = -cnTaxAmountInTransactionCurrency;

                            /**
                             * To calculate sub total.
                             */
                            saleAmount += authHandler.round(cnAmount, companyid);
                            saleAmountExcludingTax += authHandler.round(cnAmountExcludingTax, companyid);
                            taxableAmount += authHandler.round(taxAmount, companyid);
    //                        totalTaxableAmount += authHandler.round(taxAmount, companyid);


                            salesTax = new JSONObject();
                            salesTax.put("type", "Credit Note");
                            salesTax.put("noteid", creditMemo.getID());
                            salesTax.put("jeid", creditMemo.getJournalEntry().getID());
                            salesTax.put("jedate", odf.format(creditMemo.getJournalEntry().getEntryDate()));
                            salesTax.put("invdate", sdf.format(new Date(creditMemo.getCreationDate().getTime())));
                            salesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                            salesTax.put("invname", creditMemo.getCustomer().getName());
                            salesTax.put("invno", creditMemo.getCreditNoteNumber());
                            salesTax.put("invamt", authHandler.round(cnAmount, companyid));
                            salesTax.put("gramtexcludingtax", authHandler.round(cnAmountExcludingTax, companyid));
                            salesTax.put("journalEntryNo", creditMemo.getJournalEntry().getEntryNumber());
                            salesTax.put("invtaxamount", authHandler.round(taxAmount, companyid));
                            //originaltaxamount and originalamountincludingtax to show amount in transaction currency in report
                            salesTax.put("originaltaxamount", authHandler.round(cnTaxAmountInTransactionCurrency, companyid));
                            salesTax.put("originalamountincludingtax", authHandler.round(cnAmountInTransactionCurrency, companyid));
                            salesTax.put("transactionexchangerate", transactionExchangeRate);
                            salesTax.put("transactioncurrencysymbol", creditMemo.getCurrency().getSymbol());
                            salesTax.put("transactioncurrencyid", creditMemo.getCurrency().getCurrencyID());
                            salesTax.put(Constants.memo, creditMemo.getMemo() != null ? creditMemo.getMemo() : "");

                            /**
                             * To calculate grand total.
                             */
                            totalcategorycost += authHandler.round(taxAmount, companyid);
                            totalgramtexcludingtax += authHandler.round(cnAmountExcludingTax, companyid);
                            totalAmount += authHandler.round(cnAmount, companyid);

                            if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                                String country = "";
                                if (creditMemo.getBillingShippingAddresses() != null) {
                                    if (!StringUtil.isNullOrEmpty(creditMemo.getBillingShippingAddresses().getShippingCountry()) && !creditMemo.getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                        country = creditMemo.getBillingShippingAddresses().getShippingCountry();
                                    } else if (StringUtil.isNullOrEmpty(creditMemo.getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(creditMemo.getBillingShippingAddresses().getBillingCountry()) && !creditMemo.getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                        country = creditMemo.getBillingShippingAddresses().getBillingCountry();
                                    }
                                }
                                salesTax.put("invlineno", 1);
                                salesTax.put("invproduct", "");
                                salesTax.put("invuen", creditMemo.getCustomer() != null ? (isMalasianCompany ? creditMemo.getCustomer().getCompanyRegistrationNumber() : creditMemo.getCustomer().getUENNumber()) : "");
                                salesTax.put("invcountry", country);
                                salesTax.put("transactioncurrencycode", creditMemo.getCurrency().getCurrencyCode());
                            }
                            invSalesTaxjArr.put(salesTax);
                        }
                    }
                    
                }
                
                /**
                 * Calculate tax for Credit Note For Overcharge Sales Invoice(Tax applied at line level).
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.creditNoteSearchJson));
                    filterParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                }
                result = accGoodsReceiptDAOObj.getCalculatedCNTaxGst(filterParams);
                List<CreditNoteAgainstVendorGst> cnGSTDetails = result.getEntityList();
                for (CreditNoteAgainstVendorGst temp : cnGSTDetails) {
                    double cnSalesAmt = (temp.getRate() * temp.getReturnQuantity());
                    double taxAmount = temp.getRowTaxAmount();
                    double cnAmountInTransactionCurrency = 0;
                    double cnTaxAmountInTransactionCurrency = 0;
                    String discountType =String.valueOf(temp.getDiscountispercent());
                    double discountValue=temp.getDiscount();
                    if (discountType.equalsIgnoreCase(Constants.DISCOUNT_MASTER_TYPE_PERCENTAGE)) {
                        cnSalesAmt -= (cnSalesAmt * discountValue / 100); //Amount excluding discount.
                    } else {
                        cnSalesAmt -= discountValue;//flat discount.
                    }
                    
                    //cnTxCurrAmt and cnTxCurrTaxAmt to use amount in tranaction currency as cnSalesAmt and taxAmount cam change in below operations
                    cnAmountInTransactionCurrency = cnSalesAmt;
                    cnTaxAmountInTransactionCurrency = taxAmount;
                    
                    String currencyid = temp.getCreditNote().getCurrency().getCurrencyID();
                    double gstCurrencyRate = temp.getCreditNote().getGstCurrencyRate();
                    /*
                     *ERP-39555 : GST Currency Rate in CN Overcharge/Undercharge when Country currency is SGD and base currency is other than SGD 
                     *If GST Currency rate not given then consider consider external currency rate on the basis of date.
                     */
                    if (!gcurrencyid.equals(Constants.SGDID) && requestParams.containsKey("gstFlag")) {
                        if (!currencyid.equals(Constants.SGDID)) { //If transaction id is SGD then value for cnSalesAmt and taxAmount is in SGD are in SGD
                            //If transaction Currency is not SGD, then convert in SGD
                            if (gstCurrencyRate != 0) {
                                cnSalesAmt = cnSalesAmt * gstCurrencyRate;
                                taxAmount = taxAmount * gstCurrencyRate;

                            } else {
                                //If gstCurrencyRate is not given by user, then convert transaction currency to base currency and base currency to SGD
                                KwlReturnObject CNAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, cnSalesAmt, currencyid, Constants.SGDID, temp.getCreditNote().getJournalEntry().getEntryDate(), 0);
                                if (CNAmt != null) {
                                    cnSalesAmt = (Double) CNAmt.getEntityList().get(0);
                                }
                                KwlReturnObject CNTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmount, currencyid, Constants.SGDID, temp.getCreditNote().getJournalEntry().getEntryDate(), 0);
                                if (CNTaxAmt != null) {
                                    taxAmount = (Double) CNTaxAmt.getEntityList().get(0);
                                }
                            }

                        }

                    } else {
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                        cnSalesAmt = (Double) bAmt.getEntityList().get(0);

                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                        taxAmount = (Double) bAmt.getEntityList().get(0);

                    }
                    cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                    taxAmount = authHandler.round(taxAmount, companyid);
                    double totalAmountwithTax = authHandler.round(cnSalesAmt + taxAmount, companyid);
                    
                    /*
                     * If base currency is not SGD and country currency is SGD, then calculated transaction rate else considered external currency rate from journal entry.
                     */               
                    double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = cnAmountInTransactionCurrency / cnSalesAmt;
                    } else {
                        transactionExchangeRate = temp.getCreditNote().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getCreditNote().getJournalEntry().getExternalCurrencyRate();
                    }
                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                    
                    /**
                     * Customer Credit Note with Sales Tax to be shown as negative in GST Report.
                     */
                    /**
                     * By default type of tax account is debit for CreditNote
                     * If type of tax account is debit & sales tax then
                     * amount should be negative Refer - ERM-263.
                     */
                    cnSalesAmt = -cnSalesAmt;
                    taxAmount = -taxAmount;
                    totalAmountwithTax = -totalAmountwithTax;
                    cnAmountInTransactionCurrency = -cnAmountInTransactionCurrency;
                    cnTaxAmountInTransactionCurrency = -cnTaxAmountInTransactionCurrency;
                    
                    /**
                     * To calculate sub total.
                     */
                    saleAmount += authHandler.round(totalAmountwithTax, companyid);
                    saleAmountExcludingTax += authHandler.round(cnSalesAmt, companyid);
                    taxableAmount += authHandler.round(taxAmount, companyid);
//                    totalTaxableAmount += authHandler.round(taxAmount, companyid);
                    
                    
                    salesTax = new JSONObject();
                    salesTax.put("type", "Credit Note");
                    salesTax.put(Constants.billid, temp.getCreditNote().getID());
                    salesTax.put("jeid", temp.getCreditNote().getJournalEntry().getID());
                    salesTax.put("jedate", odf.format(temp.getCreditNote().getJournalEntry().getEntryDate()));
                    salesTax.put("invdate", sdf.format(new Date(temp.getCreditNote().getCreationDate().getTime())));
                    salesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    salesTax.put("invname", temp.getCreditNote().getCustomer().getName());
                    salesTax.put("invno", temp.getCreditNote().getCreditNoteNumber());
                    salesTax.put("invamt", authHandler.round(totalAmountwithTax, companyid));
                    salesTax.put("gramtexcludingtax", authHandler.round(cnSalesAmt, companyid));
                    salesTax.put("journalEntryNo", temp.getCreditNote().getJournalEntry().getEntryNumber());
                    salesTax.put("invtaxamount", authHandler.round(taxAmount, companyid));
                    //originaltaxamount and originalamountincludingtax to show amount in transaction currency in report
                    salesTax.put("originaltaxamount", authHandler.round(cnTaxAmountInTransactionCurrency, companyid));
                    salesTax.put("originalamountincludingtax", authHandler.round((cnAmountInTransactionCurrency+cnTaxAmountInTransactionCurrency), companyid));
                    salesTax.put("transactionexchangerate", transactionExchangeRate);
                    salesTax.put("transactioncurrencysymbol", temp.getCreditNote().getCurrency().getSymbol());
                    salesTax.put("transactioncurrencyid", temp.getCreditNote().getCurrency().getCurrencyID());
                    salesTax.put(Constants.memo, temp.getCreditNote().getMemo() != null ? temp.getCreditNote().getMemo() : "");
                    
                    salesTax.put("noteid", temp.getCreditNote().getID());
                    salesTax.put("noteno", temp.getCreditNote().getCreditNoteNumber());
                    salesTax.put("currencyid", temp.getCreditNote().getCurrency().getCurrencyID());
                    salesTax.put("date", odf.format(temp.getCreditNote().getCreationDate()));
                    salesTax.put("personname", temp.getCreditNote().getCustomer().getName());
                    salesTax.put("includeprotax", true);
                    salesTax.put("costcenterid", temp.getCreditNote().getCostcenter() == null ? "" : temp.getCreditNote().getCostcenter().getID());
                    salesTax.put("lasteditedby", temp.getCreditNote().getModifiedby() == null ? "" : (temp.getCreditNote().getModifiedby().getFirstName() + " " + temp.getCreditNote().getModifiedby().getLastName()));
                    salesTax.put(Constants.SEQUENCEFORMATID, temp.getCreditNote().getSeqformat() != null ? temp.getCreditNote().getSeqformat().getID() : "");
                    salesTax.put("personid", temp.getCreditNote().getCustomer().getID());
                    salesTax.put("personname", temp.getCreditNote().getCustomer().getName());
                    salesTax.put("inputType", temp.getCreditNote().getCntype());
                    
                    /**
                     * To calculate sub total.
                     */
                    totalgramtexcludingtax += authHandler.round(cnSalesAmt, companyid);
                    totalcategorycost += authHandler.round(taxAmount, companyid);
                    totalAmount += authHandler.round(totalAmountwithTax, companyid);
                    
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        String country = "";
                        if (temp.getCreditNote().getBillingShippingAddresses() != null) {
                            if (!StringUtil.isNullOrEmpty(temp.getCreditNote().getBillingShippingAddresses().getShippingCountry()) && !temp.getCreditNote().getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                country = temp.getCreditNote().getBillingShippingAddresses().getShippingCountry();
                            } else if (StringUtil.isNullOrEmpty(temp.getCreditNote().getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(temp.getCreditNote().getBillingShippingAddresses().getBillingCountry()) && !temp.getCreditNote().getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                country = temp.getCreditNote().getBillingShippingAddresses().getBillingCountry();
                            }
                        }
                        salesTax.put("invlineno", temp.getSrno());
                        salesTax.put("invproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : temp.getProduct() != null ? temp.getProduct().getName() : "");
                        salesTax.put("invuen", temp.getCreditNote().getCustomer() != null ? (isMalasianCompany ? temp.getCreditNote().getCustomer().getCompanyRegistrationNumber() : temp.getCreditNote().getCustomer().getUENNumber()) : "");
                        salesTax.put("transactioncurrencycode", temp.getCreditNote().getCurrency().getCurrencyCode());
                        salesTax.put("invcountry", country);
                    }
                    invSalesTaxjArr.put(salesTax);
                }

                /**
                 * Sales Tax
                 * Calculating Advance Receive Payment(Code Block For Malaysia Company as Tax enabled for Advance Receive Payment for only Malaysia company).
                 */
                if (isMalasianCompany) {
                    if (isAdvanceSearch) {
                        filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.receivePaymentSearchJson));
                        filterParams.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    }
                                    
                    filterParams.put("showDishonouredPayment",true);
                    KwlReturnObject rpResult = accReceiptDao.getAdvanceReceiptTax(filterParams);
                    Iterator rpIt = rpResult.getEntityList().iterator();
                    double receiveAmount = 0;
                    double receivedTaxableAmount = 0;
                    double receivedTaxCollected = 0;
                    while (rpIt.hasNext()) {
                        double rptAmtDue = 0;
                        double taxAmount = 0;

                        ReceiptAdvanceDetail temp = (ReceiptAdvanceDetail) rpIt.next();

                        double amountReceivedIncludingGST = (Double) temp.getAmount();
                        if (temp.getTax() != null) {
                            taxAmount = temp.getTaxamount();
                        }
                        double rptSalesAmt = amountReceivedIncludingGST - taxAmount;
                        KwlReturnObject bAmt;
                        if (requestParams.containsKey("gstFlag")) {
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rptSalesAmt, temp.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rptSalesAmt, temp.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        } else {
//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rptSalesAmt, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rptSalesAmt, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        }

                        rptSalesAmt = (Double) bAmt.getEntityList().get(0);
                        rptSalesAmt = authHandler.round(rptSalesAmt, companyid);

                        if (requestParams.containsKey("gstFlag")) {
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            taxAmount = (Double) bAmt.getEntityList().get(0);
                        } else {
//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            taxAmount = (Double) bAmt.getEntityList().get(0);
                        }

                        amountReceivedIncludingGST = rptSalesAmt + taxAmount;
                        amountReceivedIncludingGST = authHandler.round(amountReceivedIncludingGST, companyid);

                        receiveAmount += authHandler.round(rptSalesAmt, companyid);//505*100=(100+p)x
                        receivedTaxableAmount += authHandler.round(amountReceivedIncludingGST, companyid);
//                    if (!temp.getCustomerEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
//                        rptAmtDue = accInvoiceCommon.getBillingAmountDue(requestParams, temp);
//                    }
                        if (rptAmtDue == 0) {
                            receivedTaxCollected += authHandler.round(amountReceivedIncludingGST, companyid);
                        }

                        /**
                         * To Calculate sub total.
                         */
                        saleAmount += authHandler.round((rptSalesAmt + taxAmount), companyid);
                        saleAmountExcludingTax += authHandler.round(rptSalesAmt, companyid);
                        taxableAmount += authHandler.round(taxAmount, companyid);
//                        totalTaxableAmount += authHandler.round(taxAmount, companyid);
                        
                        double transactionExchangeRate = temp.getReceipt().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getReceipt().getJournalEntry().getExternalCurrencyRate();
                        SalesTaxBilling = new JSONObject();
                        SalesTaxBilling.put("type", "Payment Received");
                        SalesTaxBilling.put(Constants.billid, temp.getReceipt().getID());
                        SalesTaxBilling.put("jeid", temp.getReceipt().getJournalEntry().getID());
                        SalesTaxBilling.put("jedate", odf.format(temp.getReceipt().getJournalEntry().getEntryDate()));
//                        SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getReceipt().getJournalEntry().getEntryDate().getTime())));
                        SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getReceipt().getCreationDate().getTime())));
                        SalesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                        SalesTaxBilling.put("invname", temp.getReceipt().getCustomer().getAccount().getName());
                        SalesTaxBilling.put("invno", temp.getReceipt().getReceiptNumber());
                        SalesTaxBilling.put("invamt", authHandler.round(amountReceivedIncludingGST, companyid));
                        SalesTaxBilling.put("gramtexcludingtax", authHandler.round(rptSalesAmt, companyid));
                        SalesTaxBilling.put("journalEntryNo", temp.getReceipt().getJournalEntry().getEntryNumber());
                        SalesTaxBilling.put("invtaxamount", authHandler.round(taxAmount, companyid));
                        SalesTaxBilling.put("originaltaxamount", authHandler.round((taxAmount * transactionExchangeRate), companyid));
                        SalesTaxBilling.put("originalamountincludingtax", authHandler.round(amountReceivedIncludingGST * transactionExchangeRate, companyid));
                        SalesTaxBilling.put("transactionexchangerate", authHandler.round(transactionExchangeRate, companyid));
                        SalesTaxBilling.put("transactioncurrencysymbol", temp.getReceipt().getCurrency().getSymbol());
                        SalesTaxBilling.put("transactioncurrencyid", temp.getReceipt().getCurrency().getCurrencyID());
                        SalesTaxBilling.put(Constants.memo, temp.getReceipt().getMemo() != null ? temp.getReceipt().getMemo() : "");
                        /**
                         * To Calculate grant total.
                         */
                        totalcategorycost += authHandler.round(taxAmount, companyid);//(rptSalesAmt*taxPercent/100);
                        totalgramtexcludingtax += authHandler.round(rptSalesAmt, companyid);
                        totalAmount += authHandler.round(amountReceivedIncludingGST, companyid);
                        
                        if (isMalasianCompany && isForExport) {
                            try {
                                String entity = "", industryCode = "";
                                if (isMultiEntity) { // From Transaction Level
                                    entity = receivePaymanetEntityMap.get(temp.getReceipt().getID());
                                    industryCode = entityIndustryCodeMap.get(entity);
                                } else {            // From Company level
                                    industryCode = primaryIndustryCode;
                                }
                                JSONObject msicdetails = new JSONObject();
                                msicdetails.put(Constants.MSIC_INVAMT, authHandler.formattedAmount(amountReceivedIncludingGST, companyid));
                                msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.formattedAmount(taxAmount, companyid));
                                msicdetails.put(Constants.MSIC_CODE, industryCode);
                                SalesTaxBilling.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                             } catch (Exception ex) {
                                throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
                            }
                        }
                        
                        if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                            SalesTaxBilling.put("invlineno", temp.getSrNoForRow());
                            SalesTaxBilling.put("invproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : "");
                            SalesTaxBilling.put("invuen", temp.getReceipt().getCustomer() != null ? (isMalasianCompany ? temp.getReceipt().getCustomer().getCompanyRegistrationNumber() : temp.getReceipt().getCustomer().getUENNumber()) : "");
                            SalesTaxBilling.put("transactioncurrencycode", temp.getReceipt().getCurrency().getCurrencyCode());
                            SalesTaxBilling.put("invcountry", "");
                        }
                        invSalesTaxjArr.put(SalesTaxBilling);
                        
                        if (temp.getReceipt().isIsDishonouredCheque()) {
                            /**
                             * To calculate sub total.
                             */
//                            taxableAmountC -= authHandler.round((taxAmount), companyid);
                            saleAmount -= authHandler.round((rptSalesAmt + taxAmount), companyid);
                            saleAmountExcludingTax -= authHandler.round(rptSalesAmt, companyid);
                            taxableAmount -= authHandler.round(taxAmount, companyid);
//                            totalTaxableAmount -= authHandler.round(taxAmount, companyid);
                            
                            SalesTaxBilling = new JSONObject();
                            SalesTaxBilling.put("type", "Payment Received");
                            SalesTaxBilling.put(Constants.billid, temp.getReceipt().getID());
                            SalesTaxBilling.put("jeid", temp.getReceipt().getDisHonouredChequeJe().getID());
                            SalesTaxBilling.put("jedate", odf.format(temp.getReceipt().getDisHonouredChequeJe().getEntryDate()));
//                        SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getReceipt().getJournalEntry().getEntryDate().getTime())));
                            SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getReceipt().getCreationDate().getTime())));
                            SalesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                            SalesTaxBilling.put("invname", temp.getReceipt().getCustomer().getAccount().getName());
                            SalesTaxBilling.put("invno", temp.getReceipt().getReceiptNumber());
                            SalesTaxBilling.put("invamt", -authHandler.round(amountReceivedIncludingGST, companyid));
                            SalesTaxBilling.put("gramtexcludingtax", -authHandler.round(rptSalesAmt, companyid));
                            SalesTaxBilling.put("journalEntryNo", temp.getReceipt().getDisHonouredChequeJe().getEntryNumber());
                            SalesTaxBilling.put("invtaxamount", -authHandler.round(taxAmount, companyid));
                            SalesTaxBilling.put("originaltaxamount", -authHandler.round((taxAmount * transactionExchangeRate), companyid));
                            SalesTaxBilling.put("originalamountincludingtax", -authHandler.round(amountReceivedIncludingGST * transactionExchangeRate, companyid));
                            SalesTaxBilling.put("transactionexchangerate", transactionExchangeRate);
                            SalesTaxBilling.put("transactioncurrencysymbol", temp.getReceipt().getCurrency().getSymbol());
                            SalesTaxBilling.put("transactioncurrencyid", temp.getReceipt().getCurrency().getCurrencyID());
                            SalesTaxBilling.put(Constants.memo, temp.getReceipt().getDisHonouredChequeJe().getMemo() != null ? temp.getReceipt().getDisHonouredChequeJe().getMemo() : "");

                            /**
                             * To calculate grand total.
                             */
                            totalcategorycost -= authHandler.round(taxAmount, companyid);//(rptSalesAmt*taxPercent/100);
                            totalgramtexcludingtax -= authHandler.round(rptSalesAmt, companyid);
                            totalAmount -= authHandler.round(amountReceivedIncludingGST, companyid);
                            
                            /**
                             * To add reverse entry of MSIC Code for dishonoured
                             * cheque payment.
                             */
                            if (isMalasianCompany && isForExport) {
                                try {
                                    String entity = "", industryCode = "";
                                    if (isMultiEntity) { // From Transaction Level
                                        entity = receivePaymanetEntityMap.get(temp.getReceipt().getID());
                                        industryCode = entityIndustryCodeMap.get(entity);
                                    } else {            // From Company level
                                        industryCode = primaryIndustryCode;
                                    }
                                    JSONObject msicdetails = new JSONObject();
                                    msicdetails.put(Constants.MSIC_INVAMT, authHandler.formattedAmount(amountReceivedIncludingGST, companyid));
                                    msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.formattedAmount(taxAmount, companyid));
                                    msicdetails.put(Constants.MSIC_CODE, industryCode);
                                    SalesTaxBilling.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                                } catch (Exception ex) {
                                    throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
                                }
                            }
                            if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                                SalesTaxBilling.put("invlineno", temp.getSrNoForRow());
                                SalesTaxBilling.put("invproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : "");
                                SalesTaxBilling.put("invuen", temp.getReceipt().getCustomer() != null ? (isMalasianCompany ? temp.getReceipt().getCustomer().getCompanyRegistrationNumber() : temp.getReceipt().getCustomer().getUENNumber()) : "");
                                SalesTaxBilling.put("transactioncurrencycode", temp.getReceipt().getCurrency().getCurrencyCode());
                                SalesTaxBilling.put("invcountry", "");
                            }
                            invSalesTaxjArr.put(SalesTaxBilling);
                        }
                    }
                }
                if (isMalasianCompany) {
                    HashMap<String, Object> linkReceiptDetailMap = new HashMap<String, Object>();
                    linkReceiptDetailMap.put(Constants.companyKey, companyid);
                    linkReceiptDetailMap.put("endDate", requestParams.get("endDate") != null ? requestParams.get("endDate") : null);
                    linkReceiptDetailMap.put("startDate", requestParams.get("startDate") != null ? requestParams.get("startDate") : null);
                    KwlReturnObject linkedReceiptDetailResult = accReceiptDao.getLinkDetailReceipt(linkReceiptDetailMap);
                    List<LinkDetailReceipt> LinkedreceiptDetailList = linkedReceiptDetailResult.getEntityList();
                    for (LinkDetailReceipt ldr : LinkedreceiptDetailList) {
                        Receipt tempReceipt = ldr.getReceipt();
                        Invoice tempInvoice = ldr.getInvoice();
                        boolean invoiceInSelectedDateRange = false;
                        boolean receiptInSelectedDateRange = false;
                        /*
                         * ERP-11509 - Checking whether any receipt or invoice
                         * is made in selected dae range.. If invoice or receipt
                         * is created in selected range, link details will not
                         * be considered , otherwise, linked amount will be
                         * displayed as negative
                         */
                        if (tempReceipt.isIsOpeningBalenceReceipt()) {
                            if ((tempReceipt.getCreationDate().after((Date) requestParams.get("startDate")) || tempReceipt.getCreationDate().equals((Date) requestParams.get("startDate"))) && (tempReceipt.getCreationDate().before((Date) requestParams.get("endDate")) || tempReceipt.getCreationDate().equals((Date) requestParams.get("endDate")))) {
                                receiptInSelectedDateRange = true;
                            }
                        } else {
                            if ((tempReceipt.getJournalEntry().getEntryDate().after((Date) requestParams.get("startDate")) || tempReceipt.getJournalEntry().getEntryDate().equals((Date) requestParams.get("startDate"))) && (tempReceipt.getJournalEntry().getEntryDate().before((Date) requestParams.get("endDate")) || tempReceipt.getJournalEntry().getEntryDate().equals((Date) requestParams.get("endDate")))) {
                                receiptInSelectedDateRange = true;
                            }
                        }

                        if (tempInvoice.isIsOpeningBalenceInvoice()) {
                            if ((tempInvoice.getCreationDate().after((Date) requestParams.get("startDate")) || tempInvoice.getCreationDate().equals((Date) requestParams.get("startDate"))) && (tempInvoice.getCreationDate().before((Date) requestParams.get("endDate")) || tempInvoice.getCreationDate().equals((Date) requestParams.get("endDate")))) {
                                invoiceInSelectedDateRange = true;
                            }
                        } else {
                            if ((tempInvoice.getJournalEntry().getEntryDate().after((Date) requestParams.get("startDate")) || tempInvoice.getJournalEntry().getEntryDate().equals((Date) requestParams.get("startDate"))) && (tempInvoice.getJournalEntry().getEntryDate().before((Date) requestParams.get("endDate")) || tempInvoice.getJournalEntry().getEntryDate().equals((Date) requestParams.get("endDate")))) {
                                invoiceInSelectedDateRange = true;
                            }
                        }

                        if (invoiceInSelectedDateRange || receiptInSelectedDateRange) {
                            continue;
                        } else {
                            Set<ReceiptAdvanceDetail> rad = ldr.getReceipt().getReceiptAdvanceDetails();
                            double totalAdvAmount = 0;
                            for (ReceiptAdvanceDetail receiptAdvDetail : rad) {
                                if (receiptAdvDetail.getTax() == null || receiptAdvDetail.getTax() != taxObj) {
                                    continue;
                                } else {
                                    totalAdvAmount += receiptAdvDetail.getAmount();
                                }
                            }
                            if (totalAdvAmount == 0) {
                                continue;
                            }
                            double taxAmount = 0;
                            double amountLinked = 0;
                            KwlReturnObject bTotalAdvAmount = null;
                            Date date = ldr.getReceiptLinkDate();
                            bTotalAdvAmount = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, totalAdvAmount, ldr.getReceipt().getCurrency().getCurrencyID(), ldr.getInvoice().getCurrency().getCurrencyID(), date, 0);
                            if (bTotalAdvAmount != null) {
                                totalAdvAmount = (Double) bTotalAdvAmount.getEntityList().get(0);
                            }
                            taxAmount = ldr.getReceipt().getTaxAmount() / ldr.getExchangeRateForTransaction(); // Tax amount applied in advance receipt is converted in Invoice currency
                            amountLinked += (ldr.getAmountInInvoiceCurrency() - taxAmount);
                            taxAmount = (taxAmount * (ldr.getAmountInInvoiceCurrency())) / totalAdvAmount;
                            double amountReceivedIncludingGST = amountLinked + taxAmount;
                            double rptSalesAmt = amountLinked;
                            KwlReturnObject bAmt;
                            if (requestParams.containsKey("gstFlag")) {
//                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rptSalesAmt, ldr.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, ldr.getReceipt().getJournalEntry().getEntryDate(), ldr.getReceipt().getJournalEntry().getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rptSalesAmt, ldr.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, ldr.getReceipt().getCreationDate(), ldr.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            } else {
//                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rptSalesAmt, ldr.getReceipt().getCurrency().getCurrencyID(), ldr.getReceipt().getJournalEntry().getEntryDate(), ldr.getReceipt().getJournalEntry().getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rptSalesAmt, ldr.getReceipt().getCurrency().getCurrencyID(), ldr.getReceipt().getCreationDate(), ldr.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            }

                            rptSalesAmt = (Double) bAmt.getEntityList().get(0);
                            rptSalesAmt = authHandler.round(rptSalesAmt, companyid);

                            if (requestParams.containsKey("gstFlag")) {
//                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, ldr.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, ldr.getReceipt().getJournalEntry().getEntryDate(), ldr.getReceipt().getJournalEntry().getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, ldr.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, ldr.getReceipt().getCreationDate(), ldr.getReceipt().getJournalEntry().getExternalCurrencyRate());
                                taxAmount = (Double) bAmt.getEntityList().get(0);
                            } else {
//                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, ldr.getReceipt().getCurrency().getCurrencyID(), ldr.getReceipt().getJournalEntry().getEntryDate(), ldr.getReceipt().getJournalEntry().getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, ldr.getReceipt().getCurrency().getCurrencyID(), ldr.getReceipt().getCreationDate(), ldr.getReceipt().getJournalEntry().getExternalCurrencyRate());
                                taxAmount = (Double) bAmt.getEntityList().get(0);
                            }

                            amountReceivedIncludingGST = authHandler.round(rptSalesAmt + taxAmount, companyid);

                            /**
                             * To calculate sub total. Please refer - ERP-11509
                             */
                            saleAmount -= authHandler.round(amountReceivedIncludingGST, companyid);
                            saleAmountExcludingTax -= authHandler.round(rptSalesAmt, companyid);
                            taxableAmount -= authHandler.round(taxAmount, companyid);
//                            totalTaxableAmount -= authHandler.round(taxAmount, companyid);
                            
                            double transactionExchangeRate = ldr.getReceipt().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : ldr.getReceipt().getJournalEntry().getExternalCurrencyRate();
                            SalesTaxBilling = new JSONObject();
                            SalesTaxBilling.put("type", "Payment Received");
                            SalesTaxBilling.put(Constants.billid, ldr.getReceipt().getID());
                            SalesTaxBilling.put("jeid", ldr.getReceipt().getJournalEntry().getID());
                            SalesTaxBilling.put("jedate", odf.format(ldr.getReceipt().getJournalEntry().getEntryDate()));
//                            SalesTaxBilling.put("invdate", sdf.format(new Date(ldr.getReceipt().getJournalEntry().getEntryDate().getTime())));
                            SalesTaxBilling.put("invdate", sdf.format(new Date(ldr.getReceipt().getCreationDate().getTime())));
                            SalesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                            SalesTaxBilling.put("invname", ldr.getReceipt().getCustomer().getAccount().getName());
                            SalesTaxBilling.put("invno", ldr.getReceipt().getReceiptNumber());
                            SalesTaxBilling.put("invamt", -authHandler.round(amountReceivedIncludingGST, companyid));
                            SalesTaxBilling.put("gramtexcludingtax", -authHandler.round(rptSalesAmt, companyid));
                            SalesTaxBilling.put("journalEntryNo", ldr.getReceipt().getJournalEntry().getEntryNumber());
                            SalesTaxBilling.put("invtaxamount", -authHandler.round(taxAmount, companyid));
                            SalesTaxBilling.put("originaltaxamount", -authHandler.round(taxAmount * transactionExchangeRate, companyid));
                            SalesTaxBilling.put("originalamountincludingtax", -authHandler.round(amountReceivedIncludingGST * transactionExchangeRate, companyid));
                            SalesTaxBilling.put("transactionexchangerate", authHandler.round(transactionExchangeRate, companyid));
                            SalesTaxBilling.put("transactioncurrencysymbol", ldr.getReceipt().getCurrency().getSymbol());
                            SalesTaxBilling.put("transactioncurrencyid", ldr.getReceipt().getCurrency().getCurrencyID());
                            SalesTaxBilling.put(Constants.memo, ldr.getReceipt().getMemo() != null ? ldr.getReceipt().getMemo() : "");
                            
                            /**
                             * To calculate grand total.
                             */
                            totalcategorycost -= authHandler.round(taxAmount, companyid);//(rptSalesAmt*taxPercent/100);
                            totalgramtexcludingtax -= authHandler.round(rptSalesAmt, companyid);
                            totalAmount -= authHandler.round(amountReceivedIncludingGST, companyid);
                            
                            if (isMalasianCompany && isForExport) {
                            try {
                                String entity = "", industryCode = "";
                                if (isMultiEntity) { // From Transaction Level
                                    entity = receivePaymanetEntityMap.get(ldr.getReceipt().getID());
                                    industryCode = entityIndustryCodeMap.get(entity);
                                } else {            // From Company level
                                    industryCode = primaryIndustryCode;
                                }
                                JSONObject msicdetails = new JSONObject();
                                msicdetails.put(Constants.MSIC_INVAMT, -authHandler.round(amountReceivedIncludingGST, companyid));
                                msicdetails.put(Constants.MSIC_INVTAXAMT,-authHandler.round(taxAmount, companyid));
                                msicdetails.put(Constants.MSIC_CODE, industryCode);
                                SalesTaxBilling.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                            } catch (Exception ex) {
                                throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
                            }
                          }
                            
                            if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                                SalesTaxBilling.put("invlineno", 1);
                                SalesTaxBilling.put("invproduct", "");
                                SalesTaxBilling.put("invuen", ldr.getReceipt().getCustomer() != null ? (isMalasianCompany ? ldr.getReceipt().getCustomer().getCompanyRegistrationNumber() : ldr.getReceipt().getCustomer().getUENNumber()) : "");
                                SalesTaxBilling.put("transactioncurrencycode", ldr.getReceipt().getCurrency().getCurrencyCode());
                                SalesTaxBilling.put("invcountry", "");
                            }
                            invSalesTaxjArr.put(SalesTaxBilling);
                        }
                    }
                }
                /**
                 * Sales Tax.
                 * *******************************Receive Payment For Otherwise
                 * Tax Calculation And For Against GL
                 * Code*******************************
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.receivePaymentSearchJson));
                    filterParams.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                }
                filterParams.put("showDishonouredPayment",true);
                KwlReturnObject rpResult = accReceiptDao.getCalculatedReceivePaymentOtherwiseTax(filterParams);
                Iterator rpIt = rpResult.getEntityList().iterator();
                double receiveAmount = 0;
                double receivedTaxableAmount = 0;
                double receivedTaxCollected = 0;
                while (rpIt.hasNext()) {
                    double rptAmtDue = 0;
                    double taxAmount = 0;
                    double originalTaxAmount = 0;
                    ReceiptDetailOtherwise temp = (ReceiptDetailOtherwise) rpIt.next();
                    double rptSalesAmt = (Double) temp.getAmount();
                    double originalRptSalesAmt = rptSalesAmt;
                    
                    
                    if (temp.getTax() != null) {
                        taxAmount = authHandler.round((temp.getTaxamount()), companyid);
                        originalTaxAmount = taxAmount;                        
                    }
                    KwlReturnObject bAmt = null;
                    if (requestParams.containsKey("gstFlag")) {
                        if (!temp.getReceipt().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rptSalesAmt, temp.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rptSalesAmt, temp.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        }
                    } else {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rptSalesAmt, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rptSalesAmt, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                    }
                    if (bAmt != null) {
                        rptSalesAmt = (Double) bAmt.getEntityList().get(0);
                    }
                    rptSalesAmt = authHandler.round(rptSalesAmt, companyid);

                    KwlReturnObject bAmt1 = null;
                    if (requestParams.containsKey("gstFlag")) {
                        if (!temp.getReceipt().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
//                            bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        }
                    } else {
//                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                    }
                    if (bAmt1 != null) {
                        taxAmount = (Double) bAmt1.getEntityList().get(0);
                    }

                    /*
                     * If base currency is not SGD and country currency is SGD, then calculated transaction rate else considered external currency rate from journal entry.
                     */
                    double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = originalRptSalesAmt / rptSalesAmt;
                    } else {
                        transactionExchangeRate = temp.getReceipt().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getReceipt().getJournalEntry().getExternalCurrencyRate();
                    }
                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);

                    /*
                    * If account is tax account then do not show principal amount, only show tax amount.Principal amount in this case is 0.
                    */
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        taxAmount += rptSalesAmt;
                        originalTaxAmount += originalRptSalesAmt;
                        originalRptSalesAmt = 0;
                        rptSalesAmt = 0;
                    }

                    double totalAmountwithTax = 0.0;
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        totalAmountwithTax = authHandler.round((taxAmount), companyid);
                    } else {
                        totalAmountwithTax = authHandler.round((rptSalesAmt + (taxAmount)), companyid);
                    }
                    receiveAmount += authHandler.round(rptSalesAmt, companyid);//505*100=(100+p)x
                    receivedTaxableAmount += authHandler.round((rptSalesAmt - (authHandler.round(taxAmount, companyid))), companyid);
//                    if (!temp.getCustomerEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
//                        rptAmtDue = accInvoiceCommon.getBillingAmountDue(requestParams, temp);
//                    }
                    if (rptAmtDue == 0) {
                        receivedTaxCollected += authHandler.round((rptSalesAmt - (authHandler.round(taxAmount, companyid))), companyid);
                    }

                    if (temp.isIsdebit()) {
                        /**
                         * If type of tax account is debit & sales tax then
                         * amount should be negative Refer - ERM-263.
                         */
                        taxAmount = -taxAmount;
                        rptSalesAmt = -rptSalesAmt;
                        totalAmountwithTax = -totalAmountwithTax;

                    }
                    /**
                     * To calculate subtotal.
                     */
                    saleAmount += authHandler.round((rptSalesAmt + taxAmount), companyid);
                    saleAmountExcludingTax += authHandler.round(rptSalesAmt, companyid);
                    taxableAmount += authHandler.round(taxAmount, companyid);
//                    totalTaxableAmount += authHandler.round(taxAmount, companyid);
                    
                    SalesTaxBilling = new JSONObject();
                    SalesTaxBilling.put(Constants.billid, temp.getReceipt().getID());
                    SalesTaxBilling.put("type", "Payment Received");
                    SalesTaxBilling.put("jeid", temp.getReceipt().getJournalEntry().getID());
                    SalesTaxBilling.put("jedate", odf.format(temp.getReceipt().getJournalEntry().getEntryDate()));
//                    SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getReceipt().getJournalEntry().getEntryDate().getTime())));
                    SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getReceipt().getCreationDate().getTime())));
                    SalesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    SalesTaxBilling.put("invname", temp.getAccount().getName());
                    SalesTaxBilling.put("invno", temp.getReceipt().getReceiptNumber());
                    SalesTaxBilling.put("invamt", authHandler.round(totalAmountwithTax, companyid));
                    SalesTaxBilling.put("gramtexcludingtax", authHandler.round(rptSalesAmt, companyid));
                    SalesTaxBilling.put("journalEntryNo", temp.getReceipt().getJournalEntry().getEntryNumber());
                    SalesTaxBilling.put("invtaxamount", authHandler.round(taxAmount, companyid));
                    SalesTaxBilling.put("originaltaxamount", authHandler.round(originalTaxAmount, companyid));
                    SalesTaxBilling.put("originalamountincludingtax", authHandler.round(originalRptSalesAmt + originalTaxAmount, companyid));
                    SalesTaxBilling.put("transactionexchangerate", transactionExchangeRate);
                    SalesTaxBilling.put("transactioncurrencysymbol", temp.getReceipt().getCurrency().getSymbol());
                    SalesTaxBilling.put("transactioncurrencyid", temp.getReceipt().getCurrency().getCurrencyID());
                    SalesTaxBilling.put(Constants.memo, temp.getReceipt().getMemo() != null ? temp.getReceipt().getMemo() : "");
                    
                    /**
                     * To calculate grand total.
                     */
                    totalcategorycost += authHandler.round(taxAmount, companyid);
                    totalgramtexcludingtax += authHandler.round(rptSalesAmt, companyid);
                    totalAmount += authHandler.round(totalAmountwithTax, companyid);
                    
                    if (isMalasianCompany && isForExport) {
                        try {
                            String entity = "", industryCode = "";
                            if (isMultiEntity) { // From Transaction Level
                                entity = receivePaymanetEntityMap.get(temp.getReceipt().getID());
                                industryCode = entityIndustryCodeMap.get(entity);
                            } else {            // From Company level
                                industryCode = primaryIndustryCode;
                            }
                            JSONObject msicdetails = new JSONObject();
                            msicdetails.put(Constants.MSIC_INVAMT, authHandler.round(totalAmountwithTax, companyid));
                            msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.round(taxAmount, companyid));
                            msicdetails.put(Constants.MSIC_CODE, industryCode);
                            SalesTaxBilling.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                        } catch (Exception ex) {
                            throw ServiceException.FAILURE("getCalculatedSalesTaxMerged : " + ex.getMessage(), ex);
                        }
                    }
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        SalesTaxBilling.put("invlineno", temp.getSrNoForRow());
                        SalesTaxBilling.put("invproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : (temp.getAccount() != null ? temp.getAccount().getName() : ""));
                        SalesTaxBilling.put("invuen", temp.getReceipt().getCustomer() != null ? (isMalasianCompany ? temp.getReceipt().getCustomer().getCompanyRegistrationNumber() : temp.getReceipt().getCustomer().getUENNumber()) : "");
                        SalesTaxBilling.put("transactioncurrencycode", temp.getReceipt().getCurrency().getCurrencyCode());
                        SalesTaxBilling.put("invcountry", "");
                    }
                    
                    invSalesTaxjArr.put(SalesTaxBilling);
                    if (temp.getReceipt().isIsDishonouredCheque()) {
                        /**
                         * This block return the reverse entry of payment if Cheque is Dishonoured
                         * Case 1 - If type of tax account is debit & sales tax then amount should be positive only for dishonoured payment
                         * Case 2 - If type of tax account is credit & sales tax then amount should be negative only for dishonoured payment
                         * Please Refer - ERM-263.
                         */
                        taxAmount = -taxAmount;
                        rptSalesAmt = -rptSalesAmt;
                        totalAmountwithTax = -totalAmountwithTax;
                        originalRptSalesAmt = -originalRptSalesAmt;
                        originalTaxAmount = -originalTaxAmount;

                        /**
                         * To calculate subtotal.
                         */
                        saleAmount += authHandler.round((rptSalesAmt + taxAmount), companyid);
                        saleAmountExcludingTax += authHandler.round(rptSalesAmt, companyid);
                        taxableAmount += authHandler.round(taxAmount, companyid);
//                        totalTaxableAmount += authHandler.round(taxAmount, companyid);

                        SalesTaxBilling = new JSONObject();
                        SalesTaxBilling.put(Constants.billid, temp.getReceipt().getID());
                        SalesTaxBilling.put("type", "Payment Received");
                        SalesTaxBilling.put("jeid", temp.getReceipt().getDisHonouredChequeJe().getID());
                        SalesTaxBilling.put("jedate", odf.format(temp.getReceipt().getDisHonouredChequeJe().getEntryDate()));
                        SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getReceipt().getCreationDate().getTime())));
                        SalesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                        SalesTaxBilling.put("invname", temp.getAccount().getName());
                        SalesTaxBilling.put("invno", temp.getReceipt().getReceiptNumber());
                        SalesTaxBilling.put("invamt", authHandler.round(totalAmountwithTax, companyid));
                        SalesTaxBilling.put("gramtexcludingtax", authHandler.round(rptSalesAmt, companyid));
                        SalesTaxBilling.put("journalEntryNo", temp.getReceipt().getDisHonouredChequeJe().getEntryNumber());
                        SalesTaxBilling.put("invtaxamount", authHandler.round(taxAmount, companyid));
                        SalesTaxBilling.put("originaltaxamount", authHandler.round(originalTaxAmount, companyid));
                        SalesTaxBilling.put("originalamountincludingtax", authHandler.round(originalRptSalesAmt+originalTaxAmount, companyid));
                        SalesTaxBilling.put("transactionexchangerate", transactionExchangeRate);
                        SalesTaxBilling.put("transactioncurrencysymbol", temp.getReceipt().getCurrency().getSymbol());
                        SalesTaxBilling.put("transactioncurrencyid", temp.getReceipt().getCurrency().getCurrencyID());
                        SalesTaxBilling.put(Constants.memo, temp.getReceipt().getDisHonouredChequeJe().getMemo() != null ? temp.getReceipt().getDisHonouredChequeJe().getMemo() : "");
                        
                        
                        /**
                         * To calculate grant total.
                         */
                        totalcategorycost += authHandler.round(taxAmount, companyid);
                        totalgramtexcludingtax += authHandler.round(rptSalesAmt, companyid);
                        totalAmount += authHandler.round(totalAmountwithTax, companyid);

                        /**
                         * Need to validate MSIC code logic for Dishonoured
                         * Cheque.
                         */
                        if (isMalasianCompany && isForExport) {
                            try {
                                String entity = "", industryCode = "";
                                if (isMultiEntity) { // From Transaction Level
                                    entity = receivePaymanetEntityMap.get(temp.getReceipt().getID());
                                    industryCode = entityIndustryCodeMap.get(entity);
                                } else {            // From Company level
                                    industryCode = primaryIndustryCode;
                                }
                                JSONObject msicdetails = new JSONObject();
                                msicdetails.put(Constants.MSIC_INVAMT, authHandler.round(totalAmountwithTax, companyid));
                                msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.round(taxAmount, companyid));
                                msicdetails.put(Constants.MSIC_CODE, industryCode);
                                SalesTaxBilling.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                            } catch (Exception ex) {
                                throw ServiceException.FAILURE("getCalculatedSalesTaxMerged : " + ex.getMessage(), ex);
                            }
                        }
                        
                        if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                            SalesTaxBilling.put("invlineno", temp.getSrNoForRow());
                            SalesTaxBilling.put("invproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : (temp.getAccount() != null ? temp.getAccount().getName() : ""));
                            SalesTaxBilling.put("invuen", temp.getReceipt().getCustomer() != null ? (isMalasianCompany ? temp.getReceipt().getCustomer().getCompanyRegistrationNumber() : temp.getReceipt().getCustomer().getUENNumber()) : "");
                            SalesTaxBilling.put("transactioncurrencycode", temp.getReceipt().getCurrency().getCurrencyCode());
                            SalesTaxBilling.put("invcountry", "");
                        }
                        invSalesTaxjArr.put(SalesTaxBilling);
                    }
                }

                /**
                 * Sales Tax
                 * Make Payment For Otherwise
                 * Tax Calculation And For Against GL.                  
                 */
                
                if (isAdvanceSearch) {
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.makePaymentSearchJson));
                    filterParams.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                }
                filterParams.put("showDishonouredPayment",true);
                rpResult = accVendorPaymentDao.getCalculatedMakePaymentOtherwiseTax(filterParams);
                rpIt = rpResult.getEntityList().iterator();
                double madeAmount = 0;
                double madeTaxableAmount = 0;
                double madeTaxCollected = 0;
                while (rpIt.hasNext()) {
                    double rptAmtDue = 0;
                    double taxAmount = 0;
                    double originalTaxAmount = 0;
                    PaymentDetailOtherwise temp = (PaymentDetailOtherwise) rpIt.next();
                    //double rptSalesAmt = temp.isIsdebit() ? (Double) temp.getAmount() : -(Double) temp.getAmount();
                    double rptSalesAmt = temp.getAmount();
                    double originalRptSalesAmt = temp.getAmount();
                    
                    if (temp.getTax() != null) {
                        taxAmount = temp.getTaxamount();
                        originalTaxAmount = taxAmount;
                    }
                    KwlReturnObject bAmt = null;
                    if (requestParams.containsKey("gstFlag")) {
                        if (!temp.getPayment().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rptSalesAmt, temp.getPayment().getCurrency().getCurrencyID(), Constants.SGDID, temp.getPayment().getJournalEntry().getEntryDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rptSalesAmt, temp.getPayment().getCurrency().getCurrencyID(), Constants.SGDID, temp.getPayment().getCreationDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                        }
                    } else {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rptSalesAmt, temp.getPayment().getCurrency().getCurrencyID(), temp.getPayment().getJournalEntry().getEntryDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rptSalesAmt, temp.getPayment().getCurrency().getCurrencyID(), temp.getPayment().getCreationDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                    }
                    if (bAmt != null) {
                        rptSalesAmt = (Double) bAmt.getEntityList().get(0);
                    }
                    rptSalesAmt = authHandler.round(rptSalesAmt, companyid);

                    KwlReturnObject bAmt1 = null;
                    if (requestParams.containsKey("gstFlag")) {
                        if (!temp.getPayment().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
//                            bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getPayment().getCurrency().getCurrencyID(), Constants.SGDID, temp.getPayment().getJournalEntry().getEntryDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getPayment().getCurrency().getCurrencyID(), Constants.SGDID, temp.getPayment().getCreationDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                        }
                    } else {
//                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getPayment().getCurrency().getCurrencyID(), temp.getPayment().getJournalEntry().getEntryDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getPayment().getCurrency().getCurrencyID(), temp.getPayment().getCreationDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                    }
                    if (bAmt1 != null) {
                        taxAmount = (Double) bAmt1.getEntityList().get(0);
                    }
                    madeAmount += authHandler.round(rptSalesAmt, companyid);//505*100=(100+p)x
                    madeTaxableAmount += authHandler.round((rptSalesAmt - (taxAmount)), companyid);
//                    if (!temp.getCustomerEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
//                        rptAmtDue = accInvoiceCommon.getBillingAmountDue(requestParams, temp);
//                    }
                    if (rptAmtDue == 0) {
                        madeTaxCollected += authHandler.round((rptSalesAmt - (taxAmount)), companyid);
                    }

                    
                    /*
                     * If base currency is not SGD and country currency is SGD, then calculated transaction rate else considered external currency rate from journal entry.
                     */
                    double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = originalRptSalesAmt / rptSalesAmt;
                    } else {
                        transactionExchangeRate = temp.getPayment().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getPayment().getJournalEntry().getExternalCurrencyRate();
                    }
                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                    
                    /*
                    * If account is tax account then do not show principal amount, only show tax amount.Principal amount in this case is 0.
                    */
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        taxAmount += rptSalesAmt;
                        originalTaxAmount += originalRptSalesAmt;
                        originalRptSalesAmt = 0;
                        rptSalesAmt = 0;

                    }
                    
                    double totalAmountwithTax = 0.0;
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        totalAmountwithTax = taxAmount;
                    } else {
                        totalAmountwithTax = rptSalesAmt + authHandler.round((taxAmount), companyid);
                    }
                    
                    if (temp.isIsdebit()) {
                        /**
                         * If type of tax account is debit & sales tax then
                         * amount should be negative Refer - ERM-263.
                         */
                        taxAmount = -taxAmount;
                        rptSalesAmt = -rptSalesAmt;
                        totalAmountwithTax = -totalAmountwithTax;
                        originalRptSalesAmt = -originalRptSalesAmt;
                        originalTaxAmount = -originalTaxAmount;
                    }
                    /**
                     * To calculate subtotal.
                     */
                    saleAmount += authHandler.round((rptSalesAmt + taxAmount), companyid);
                    saleAmountExcludingTax += authHandler.round(rptSalesAmt, companyid);
                    taxableAmount += authHandler.round(taxAmount, companyid);
//                    totalTaxableAmount += authHandler.round(taxAmount, companyid);
                    
                    SalesTaxBilling = new JSONObject();
                    SalesTaxBilling.put("type", "Payment Made");
                    SalesTaxBilling.put(Constants.billid, temp.getPayment().getID());
                    SalesTaxBilling.put("jeid", temp.getPayment().getJournalEntry().getID());
                    SalesTaxBilling.put("jedate", odf.format(temp.getPayment().getJournalEntry().getEntryDate()));
//                    SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getPayment().getJournalEntry().getEntryDate().getTime())));
                    SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getPayment().getCreationDate().getTime())));
                    SalesTaxBilling.put("invname", temp.getAccount().getName());
                    SalesTaxBilling.put("invno", temp.getPayment().getPaymentNumber());
                    SalesTaxBilling.put("gramtexcludingtax", rptSalesAmt);
                    SalesTaxBilling.put("invamt", authHandler.round(totalAmountwithTax, companyid));
                    SalesTaxBilling.put("originalamountincludingtax", authHandler.round(originalRptSalesAmt + originalTaxAmount, companyid));
                    SalesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    SalesTaxBilling.put("journalEntryNo", temp.getPayment().getJournalEntry().getEntryNumber());
                    SalesTaxBilling.put("invtaxamount", authHandler.round(taxAmount, companyid));
                    SalesTaxBilling.put("originaltaxamount", authHandler.round(originalTaxAmount, companyid));
                    SalesTaxBilling.put("transactionexchangerate", transactionExchangeRate);
                    SalesTaxBilling.put("transactioncurrencysymbol", temp.getPayment().getCurrency().getSymbol());
                    SalesTaxBilling.put("transactioncurrencyid", temp.getPayment().getCurrency().getCurrencyID());
                    SalesTaxBilling.put(Constants.memo, temp.getPayment().getMemo() != null ? temp.getPayment().getMemo() : "");
                    /**
                     * To calculate grand total.
                     */
                    totalcategorycost += authHandler.round(taxAmount, companyid);
                    totalgramtexcludingtax += authHandler.round(rptSalesAmt, companyid);
                    totalAmount += authHandler.round(totalAmountwithTax, companyid);
                    
                     if (isMalasianCompany && isForExport) {
                        try {
                            String entity = "", industryCode = "";
                            if (isMultiEntity) { // From Transaction Level
                                entity = makePaymanetEntityMap.get(temp.getPayment().getID());
                                industryCode = entityIndustryCodeMap.get(entity);
                            } else {            // From Company level
                                industryCode = primaryIndustryCode;
                            }
                            JSONObject msicdetails = new JSONObject();
                            msicdetails.put(Constants.MSIC_INVAMT, authHandler.round(totalAmountwithTax, companyid));
                            msicdetails.put(Constants.MSIC_INVTAXAMT,  authHandler.round(taxAmount, companyid));
                            msicdetails.put(Constants.MSIC_CODE, industryCode);
                            SalesTaxBilling.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                        } catch (Exception ex) {
                            throw ServiceException.FAILURE("getCalculatedSalesTaxMerged : " + ex.getMessage(), ex);
                        }
                    }
                     
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        SalesTaxBilling.put("invlineno", temp.getSrNoForRow());
                        SalesTaxBilling.put("invproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : (temp.getAccount() != null ? temp.getAccount().getName() : ""));
                        SalesTaxBilling.put("invuen", temp.getPayment().getVendor()!= null ? (isMalasianCompany ? temp.getPayment().getVendor().getCompanyRegistrationNumber() : temp.getPayment().getVendor().getUENNumber()) : "");
                        SalesTaxBilling.put("transactioncurrencycode", temp.getPayment().getCurrency().getCurrencyCode());
                        SalesTaxBilling.put("invcountry", "");
                    }
                    invSalesTaxjArr.put(SalesTaxBilling);
                    
                    if (temp.getPayment().isIsDishonouredCheque()) {
                        /**
                         * This block return the reverse entry of payment if Cheque is Dishonoured
                         * Case 1 - If type of tax account is debit & sales tax then amount should be positive only for dishonoured cheque payment
                         * Case 2 - If type of tax account is credit & sales tax then amount should be negative only for dishonoured cheque payment
                         * Please Refer - ERM-263.
                         */
                        taxAmount = -taxAmount;
                        rptSalesAmt = -rptSalesAmt;
                        totalAmountwithTax = -totalAmountwithTax;
                        originalRptSalesAmt = -originalRptSalesAmt;
                        originalTaxAmount = -originalTaxAmount;

                        /**
                         * To calculate subtotal.
                         */
                        saleAmount += authHandler.round((rptSalesAmt + taxAmount), companyid);
                        saleAmountExcludingTax += authHandler.round(rptSalesAmt, companyid);
                        taxableAmount += authHandler.round(taxAmount, companyid);
//                        totalTaxableAmount += authHandler.round(taxAmount, companyid);
                        
//                        double transactionExchangeRate = temp.getPayment().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getPayment().getJournalEntry().getExternalCurrencyRate();
                        SalesTaxBilling = new JSONObject();
                        SalesTaxBilling.put("type", "Payment Made");
                        SalesTaxBilling.put(Constants.billid, temp.getPayment().getID());
                        SalesTaxBilling.put("jeid", temp.getPayment().getDisHonouredChequeJe().getID());
                        SalesTaxBilling.put("jedate", odf.format(temp.getPayment().getDisHonouredChequeJe().getEntryDate()));
                        SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getPayment().getCreationDate().getTime())));
                        SalesTaxBilling.put("invname", temp.getAccount().getName());
                        SalesTaxBilling.put("invno", temp.getPayment().getPaymentNumber());
                        SalesTaxBilling.put("gramtexcludingtax", temp.isIsdebit() ? rptSalesAmt : -rptSalesAmt);
                        SalesTaxBilling.put("invamt", authHandler.round(totalAmountwithTax, companyid));
                        SalesTaxBilling.put("originalamountincludingtax", authHandler.round(originalRptSalesAmt + originalTaxAmount, companyid));
                        SalesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                        SalesTaxBilling.put("journalEntryNo", temp.getPayment().getDisHonouredChequeJe().getEntryNumber());
                        SalesTaxBilling.put("invtaxamount", authHandler.round(taxAmount, companyid));
                        SalesTaxBilling.put("originaltaxamount", authHandler.round(originalTaxAmount, companyid));
                        SalesTaxBilling.put("transactionexchangerate", transactionExchangeRate);
                        SalesTaxBilling.put("transactioncurrencysymbol", temp.getPayment().getCurrency().getSymbol());
                        SalesTaxBilling.put("transactioncurrencyid", temp.getPayment().getCurrency().getCurrencyID());
                        SalesTaxBilling.put(Constants.memo, temp.getPayment().getDisHonouredChequeJe().getMemo() != null ? temp.getPayment().getDisHonouredChequeJe().getMemo() : "");

                        /**
                         * To calculate grand total.
                         */
                        totalcategorycost += authHandler.round(taxAmount, companyid);
                        totalgramtexcludingtax += authHandler.round(rptSalesAmt, companyid);
                        totalAmount += authHandler.round(totalAmountwithTax, companyid);

                        /**
                         * To add reverse entry of MSIC Code for dishonoured
                         * cheque payment.
                         */
                        if (isMalasianCompany && isForExport) {
                            try {
                                String entity = "", industryCode = "";
                                if (isMultiEntity) { // From Transaction Level
                                    entity = makePaymanetEntityMap.get(temp.getPayment().getID());
                                    industryCode = entityIndustryCodeMap.get(entity);
                                } else {            // From Company level
                                    industryCode = primaryIndustryCode;
                                }
                                JSONObject msicdetails = new JSONObject();
                                msicdetails.put(Constants.MSIC_INVAMT, authHandler.round(totalAmountwithTax, companyid));
                                msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.round(taxAmount, companyid));
                                msicdetails.put(Constants.MSIC_CODE, industryCode);
                                SalesTaxBilling.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                            } catch (Exception ex) {
                                throw ServiceException.FAILURE("getCalculatedSalesTaxMerged : " + ex.getMessage(), ex);
                            }
                        }
                        if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                            SalesTaxBilling.put("invlineno", temp.getSrNoForRow());
                            SalesTaxBilling.put("invproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : (temp.getAccount() != null ? temp.getAccount().getName() : ""));
                            SalesTaxBilling.put("invuen", temp.getPayment().getVendor() != null ? (isMalasianCompany ? temp.getPayment().getVendor().getCompanyRegistrationNumber() : temp.getPayment().getVendor().getUENNumber()) : "");
                            SalesTaxBilling.put("transactioncurrencycode", temp.getPayment().getCurrency().getCurrencyCode());
                            SalesTaxBilling.put("invcountry", "");
                        }
                        invSalesTaxjArr.put(SalesTaxBilling);
                    }
                    
                }
                /**
                 * *******************************Credit Note Otherwise Tax
                 * Calculation *******************************
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.creditNoteSearchJson));
                    filterParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                }
                
                KwlReturnObject cnResult = accReceiptDao.getCalculatedCreditNoteOtherwiseTax(filterParams);
                Iterator cnIt = cnResult.getEntityList().iterator();
                double cnAmount = 0;
                double cnTaxableAmount = 0;
                double cnTaxCollected = 0;
                while (cnIt.hasNext()) {
                    double cnAmtDue = 0;
                    double taxAmount = 0;
                    double originalTaxAmount = 0;
                    CreditNoteTaxEntry temp = (CreditNoteTaxEntry) cnIt.next();
                   double cnSalesAmt=0.0;
                   double originalCnSalesAmt=0.0;
                    if(!temp.getCreditNote().isIncludingGST()){
                        cnSalesAmt = (Double) temp.getAmount();
                    }else{
                        cnSalesAmt = (Double) temp.getRateIncludingGst();
                    }
                    originalCnSalesAmt = cnSalesAmt;
                    KwlReturnObject bAmt = null;
                    /*
                     * gstFlag = Country is Singapore
                     */ 
                    if (requestParams.containsKey("gstFlag")) {
                        //(ERP-8222) && check is for if country is Singapore then no need to convert it again in SGD.
                        if (temp.getGstCurrencyRate() != 0 && (!temp.getCreditNote().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID))) {//to check if the invoice has external GST rate when country is Singapore                                       
                            cnSalesAmt = originalCnSalesAmt*temp.getGstCurrencyRate();
                            cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                        } else {
                            if (!temp.getCreditNote().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
//                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, cnSalesAmt, temp.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, cnSalesAmt, temp.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                                if (bAmt != null) {
                                    cnSalesAmt = (Double) bAmt.getEntityList().get(0);
                                    cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                                }
                            }
                        }
                    } else {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                        if (bAmt != null) {
                            cnSalesAmt = (Double) bAmt.getEntityList().get(0);
                            cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                        }
                    }
                    
                    
                    if (temp.getTax() != null) {

                        taxAmount = temp.getTaxamount();
                        originalTaxAmount = taxAmount;
                        KwlReturnObject bTaxAmt = null;
                        /*
                         * gstFlag = Country is Singapore
                         */ 
                        if (requestParams.containsKey("gstFlag")) {
                            //(ERP-8222) && check is for if country is Singapore then no need to convert it again in SGD.
                            if (temp.getGstCurrencyRate() != 0 && (!temp.getCreditNote().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID))) {//to check if the invoice has external GST rate when country is Singapore                                       
//                                bTaxAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, taxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                                    taxAmount = originalTaxAmount*temp.getGstCurrencyRate();
                                    taxAmount = authHandler.round(taxAmount, companyid);
                            } else {
                                if (!temp.getCreditNote().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
//                                    bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                                    bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                                    if (bTaxAmt != null) {
                                        taxAmount = (Double) bTaxAmt.getEntityList().get(0);
                                    }
                                    taxAmount = authHandler.round(taxAmount, companyid);
                                }
                            }
                        } else {
//                            bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                            bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                            if (bTaxAmt != null) {
                                taxAmount = (Double) bTaxAmt.getEntityList().get(0);
                            }
                            taxAmount = authHandler.round(taxAmount, companyid);
                        }
                        
                    }
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        taxAmount += cnSalesAmt;
                        cnSalesAmt = 0;
                    }

                    double totalAmountwithTax = 0.0;
                    double originalTotalAmountwithTax = 0.0;
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        totalAmountwithTax = authHandler.round(taxAmount, companyid);
                        originalTotalAmountwithTax = originalTaxAmount;
                    } else {
                        totalAmountwithTax = authHandler.round((cnSalesAmt + taxAmount), companyid);
                        originalTotalAmountwithTax = authHandler.round(originalCnSalesAmt + (originalTaxAmount), companyid);
                    }
                    cnAmount += authHandler.round(cnSalesAmt, companyid);//505*100=(100+p)x
                    cnTaxableAmount += authHandler.round((cnSalesAmt - taxAmount), companyid);;

                    if (cnAmtDue == 0) {
                        cnTaxCollected += authHandler.round((cnSalesAmt - taxAmount), companyid);
                    }

                    double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = (originalCnSalesAmt) / (cnSalesAmt);
                    } else {
                        transactionExchangeRate = temp.getCreditNote().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getCreditNote().getJournalEntry().getExternalCurrencyRate();
                    }
                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                    
                    if (temp.isDebitForMultiCNDN()) {
                        /**
                         * If type of account is debit & sales tax then amount
                         * should be negative Refer - ERM-263.
                         */
                        cnSalesAmt = -cnSalesAmt;
                        originalCnSalesAmt = -originalCnSalesAmt;
                        taxAmount = -taxAmount;
                        originalTaxAmount = -originalTaxAmount;
                        totalAmountwithTax = -totalAmountwithTax;
                        originalTotalAmountwithTax = -originalTotalAmountwithTax;//Amount with tax in transaction currency.
                    }

                    /**
                     * To Calculate subtotal.
                     */
                    saleAmount += authHandler.round(totalAmountwithTax, companyid);
                    saleAmountExcludingTax += authHandler.round(cnSalesAmt, companyid);
                    taxableAmount += authHandler.round(taxAmount, companyid);
//                    totalTaxableAmount += authHandler.round(taxAmount, companyid);
                    
                    SalesTaxBilling = new JSONObject();
//                    SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getCreditNote().getJournalEntry().getEntryDate().getTime())));
                    SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getCreditNote().getCreationDate().getTime())));
                    if (temp.getCreditNote().getVendor() != null) {// if CN is created against vendor then values will be add
                        SalesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    } else {
                        SalesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be substract.
                    }

                    if (temp.getCreditNote().getCntype() == 4) {
                        SalesTaxBilling.put("invname", temp.getCreditNote().getVendor().getName());
                    } else {
                        SalesTaxBilling.put("invname", temp.getCreditNote().getCustomer().getName());
                    }
                    SalesTaxBilling.put("type", "Credit Note");
                    SalesTaxBilling.put("noteid", temp.getCreditNote().getID());
                    SalesTaxBilling.put("jeid", temp.getCreditNote().getJournalEntry().getID());
                    SalesTaxBilling.put("jedate", odf.format(temp.getCreditNote().getJournalEntry().getEntryDate()));
                    SalesTaxBilling.put("invno", temp.getCreditNote().getCreditNoteNumber());
                    SalesTaxBilling.put("journalEntryNo", temp.getCreditNote().getJournalEntry().getEntryNumber());
                    SalesTaxBilling.put("invamt", authHandler.round(totalAmountwithTax, companyid));
                    SalesTaxBilling.put("originalamountincludingtax", authHandler.round(originalTotalAmountwithTax, companyid));
                    SalesTaxBilling.put("gramtexcludingtax", authHandler.round(cnSalesAmt, companyid));
                    SalesTaxBilling.put("invtaxamount", authHandler.round(taxAmount, companyid));
                    SalesTaxBilling.put("originaltaxamount", authHandler.round(originalTaxAmount, companyid));
                    SalesTaxBilling.put("transactionexchangerate", transactionExchangeRate);
                    SalesTaxBilling.put("transactioncurrencysymbol", temp.getCreditNote().getCurrency().getSymbol());
                    SalesTaxBilling.put("transactioncurrencyid", temp.getCreditNote().getCurrency().getCurrencyID());
                    SalesTaxBilling.put(Constants.memo, temp.getCreditNote().getMemo() != null ? temp.getCreditNote().getMemo() : "");
                    
                    /**
                     * To Calculate Grand Total.
                     */
                    totalcategorycost += authHandler.round(taxAmount, companyid);
                    totalgramtexcludingtax += authHandler.round(cnSalesAmt, companyid);
                    totalAmount += authHandler.round(totalAmountwithTax, companyid);
                    
                      if (isMalasianCompany && isForExport) {
                        try {
                            String entity = "", industryCode = "";
                            if (isMultiEntity) { // From Transaction Level
                                entity = creditNoteEntityMap.get(temp.getCreditNote().getID());
                                industryCode = entityIndustryCodeMap.get(entity);
                            } else {            // From Company level
                                industryCode = primaryIndustryCode;
                            }
                            JSONObject msicdetails = new JSONObject();
                            msicdetails.put(Constants.MSIC_INVAMT, authHandler.round(totalAmountwithTax, companyid));
                            msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.round(taxAmount, companyid));
                            msicdetails.put(Constants.MSIC_CODE, industryCode);
                            SalesTaxBilling.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                        } catch (Exception ex) {
                            throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
                        }
                    }
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        String country = "";
                        if (temp.getCreditNote().getBillingShippingAddresses() != null) {
                            if (!StringUtil.isNullOrEmpty(temp.getCreditNote().getBillingShippingAddresses().getShippingCountry()) && !temp.getCreditNote().getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                country = temp.getCreditNote().getBillingShippingAddresses().getShippingCountry();
                            } else if (StringUtil.isNullOrEmpty(temp.getCreditNote().getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(temp.getCreditNote().getBillingShippingAddresses().getBillingCountry()) && !temp.getCreditNote().getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                country = temp.getCreditNote().getBillingShippingAddresses().getBillingCountry();
                            }
                        }
                        SalesTaxBilling.put("invlineno", temp.getSrNoForRow());
                        SalesTaxBilling.put("invproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : (temp.getAccount() != null ? temp.getAccount().getName() : ""));
                        if (temp.getCreditNote().getCntype() == 4) {
                            SalesTaxBilling.put("invuen", temp.getCreditNote().getVendor() != null ? (isMalasianCompany ? temp.getCreditNote().getVendor().getCompanyRegistrationNumber() : temp.getCreditNote().getVendor().getUENNumber()) : "");
                        } else {
                            SalesTaxBilling.put("invuen", temp.getCreditNote().getCustomer() != null ? (isMalasianCompany ? temp.getCreditNote().getCustomer().getCompanyRegistrationNumber() : temp.getCreditNote().getCustomer().getUENNumber()) : "");
                        }
                        SalesTaxBilling.put("transactioncurrencycode", temp.getCreditNote().getCurrency().getCurrencyCode());
                        SalesTaxBilling.put("invcountry", country);
                    }

                    invSalesTaxjArr.put(SalesTaxBilling);
                }

                /**
                 * *******************************Debit Note Otherwise Tax
                 * Calculation *******************************
                 */
                // Customer Debit Note 
                // Company Specif check has been removed for ERP-16173
//                if(isMalasianCompany){
                if (isAdvanceSearch) {
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.debitNoteSearchJson));
                    filterParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                }
                cnResult = accVendorPaymentDao.getCalculatedDebitNoteOtherwiseTax(filterParams);
                cnIt = cnResult.getEntityList().iterator();
                while (cnIt.hasNext()) {
                    double cnAmtDue = 0;
                    double taxAmount = 0;
                    double originalTaxAmount = 0;
                    double originalCnSalesAmt=0.0;
                    DebitNoteTaxEntry temp = (DebitNoteTaxEntry) cnIt.next();
                    double cnSalesAmt = 0.0;
                    if(temp.getDebitNote().isIncludingGST()){
                        cnSalesAmt = (Double) temp.getRateIncludingGst();
                    }else{
                        cnSalesAmt = (Double) temp.getAmount();
                    }
                    originalCnSalesAmt = cnSalesAmt;
                    KwlReturnObject bAmt = null;
                    /*
                     * gstFlag = Country is Singapore
                     */ 
                    if (requestParams.containsKey("gstFlag")) {
                        //(ERP-8222) && check is for if country is Singapore then no need to convert it again in SGD.
                        if (temp.getGstCurrencyRate() != 0 && (!temp.getDebitNote().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID))) {//to check if the invoice has external GST rate when country is Singapore                                       
                            cnSalesAmt = originalCnSalesAmt*temp.getGstCurrencyRate();
                            cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                        } else {
                            if (!temp.getDebitNote().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
//                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, cnSalesAmt, temp.getDebitNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getDebitNote().getJournalEntry().getEntryDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, cnSalesAmt, temp.getDebitNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                                if (bAmt != null) {
                                    cnSalesAmt = (Double) bAmt.getEntityList().get(0);
                                    cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                                }
                            }
                        }
                    } else {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getJournalEntry().getEntryDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                        if (bAmt != null) {
                            cnSalesAmt = (Double) bAmt.getEntityList().get(0);
                            cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                        }
                    }
                    
                    
                    if (temp.getTax() != null) {
                        taxAmount = temp.getTaxamount();
                        originalTaxAmount = taxAmount;

                        KwlReturnObject bTaxAmt = null;
                        /*
                         * gstFlag = Country is Singapore
                         */ 
                        if (requestParams.containsKey("gstFlag")) {
                            //(ERP-8222) && check is for if country is Singapore then no need to convert it again in SGD.
                            if (temp.getGstCurrencyRate() != 0 && (!temp.getDebitNote().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID))) {//to check if the invoice has external GST rate when country is Singapore                                                                       
                                    taxAmount = originalTaxAmount*temp.getGstCurrencyRate();
                                    taxAmount = authHandler.round(taxAmount, companyid);
                            } else {
                                if (!temp.getDebitNote().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
//                                    bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getDebitNote().getJournalEntry().getEntryDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                                    bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                                    if (bTaxAmt != null) {
                                        taxAmount = (Double) bTaxAmt.getEntityList().get(0);
                                    }
                                    taxAmount = authHandler.round(taxAmount, companyid);
                                }
                            }
                        } else {
//                            bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getJournalEntry().getEntryDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                            bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                            if (bTaxAmt != null) {
                                taxAmount = (Double) bTaxAmt.getEntityList().get(0);
                            }
                            taxAmount = authHandler.round(taxAmount, companyid);
                        }
                        
                    }
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        taxAmount += cnSalesAmt;
                        cnSalesAmt = 0;
                    }

                    double totalAmountwithTax = 0.0;
                    double originalTotalAmountwithTax = 0.0;
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        totalAmountwithTax = authHandler.round(taxAmount, companyid);
                        originalTotalAmountwithTax = originalTaxAmount;
                    } else {
                        totalAmountwithTax = authHandler.round((cnSalesAmt + taxAmount), companyid);
                        originalTotalAmountwithTax = authHandler.round(originalCnSalesAmt + (originalTaxAmount), companyid);
                    }
                    cnAmount += authHandler.round(cnSalesAmt, companyid);//505*100=(100+p)x
                    cnTaxableAmount += authHandler.round((cnSalesAmt - taxAmount), companyid);;

                    if (cnAmtDue == 0) {
                        cnTaxCollected += authHandler.round((cnSalesAmt - taxAmount), companyid);
                    }
                    double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = (originalCnSalesAmt) / (cnSalesAmt);
                    } else {
                        transactionExchangeRate = temp.getDebitNote().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getDebitNote().getJournalEntry().getExternalCurrencyRate();
                    }
                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                    
                    if (temp.isDebitForMultiCNDN()) {
                        /**
                         * If type of account is debit & sales tax then
                         * amount should be negative Refer - ERM-263.
                         */
                        cnSalesAmt = -cnSalesAmt;//Principal amount in base.
                        taxAmount = -taxAmount;//Tax amount in base.
                        totalAmountwithTax = -totalAmountwithTax;//Total in base. 

                        originalTaxAmount = -originalTaxAmount;//Tax amount trasaction currency.
                        originalTotalAmountwithTax = -originalTotalAmountwithTax;//Amount with tax in transaction currency.
                    }
                    /**
                     * To Calculate subtotal.
                     */
                    saleAmount += authHandler.round(totalAmountwithTax, companyid);
                    saleAmountExcludingTax += authHandler.round(cnSalesAmt, companyid);
                    taxableAmount += authHandler.round(taxAmount, companyid);
//                    totalTaxableAmount += authHandler.round(taxAmount, companyid);
                    
                    SalesTaxBilling = new JSONObject();
//                    SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getDebitNote().getJournalEntry().getEntryDate().getTime())));
                    SalesTaxBilling.put("invdate", sdf.format(new Date(temp.getDebitNote().getCreationDate().getTime())));
                    //                    if (temp.getCreditNote().getVendor() != null) {// if CN is created against vendor then values will be add
                    SalesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    //                    }else{
                    //                        SalesTaxBilling.put("addAmountFlag", false);// For Calculating Total Amount in JS Side this amount will be substract.
                    //                    }

                    if (temp.getDebitNote().getDntype() == 4) {
                        SalesTaxBilling.put("invname", temp.getDebitNote().getCustomer().getName());
                    } else {
                        SalesTaxBilling.put("invname", temp.getDebitNote().getVendor().getName());
                    }
                    SalesTaxBilling.put("type", "Debit Note");
                    SalesTaxBilling.put("noteid", temp.getDebitNote().getID());
                    SalesTaxBilling.put("jeid", temp.getDebitNote().getJournalEntry().getID());
                    SalesTaxBilling.put("jedate", odf.format(temp.getDebitNote().getJournalEntry().getEntryDate()));
                    SalesTaxBilling.put("invno", temp.getDebitNote().getDebitNoteNumber());
                    SalesTaxBilling.put("journalEntryNo", temp.getDebitNote().getJournalEntry().getEntryNumber());
                    SalesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be subtract.
                    SalesTaxBilling.put("invamt", authHandler.round(totalAmountwithTax, companyid));
                    SalesTaxBilling.put("gramtexcludingtax", authHandler.round(cnSalesAmt, companyid));
                    SalesTaxBilling.put("invtaxamount", authHandler.round(taxAmount, companyid));
                    SalesTaxBilling.put("originaltaxamount", authHandler.round(originalTaxAmount, companyid));
                    SalesTaxBilling.put("originalamountincludingtax", authHandler.round(originalTotalAmountwithTax, companyid));
                    SalesTaxBilling.put("transactionexchangerate", transactionExchangeRate);
                    SalesTaxBilling.put("transactioncurrencysymbol", temp.getDebitNote().getCurrency().getSymbol());
                    SalesTaxBilling.put("transactioncurrencyid", temp.getDebitNote().getCurrency().getCurrencyID());
                    SalesTaxBilling.put(Constants.memo, temp.getDebitNote().getMemo() != null ? temp.getDebitNote().getMemo() : "");

                    /**
                     * To Calculate Grand Total.
                     */
                    totalcategorycost += authHandler.round(taxAmount, companyid);
                    totalgramtexcludingtax += authHandler.round(cnSalesAmt, companyid);
                    totalAmount += authHandler.round(totalAmountwithTax, companyid);
                    
                    if (isMalasianCompany && isForExport) {
                        try {
                            String entity = "", industryCode = "";
                            if (isMultiEntity) { // From Transaction Level
                                entity = debitNoteEntityMap.get(temp.getDebitNote().getID());
                                industryCode = entityIndustryCodeMap.get(entity);
                            } else {            // From Company level
                                industryCode = primaryIndustryCode;
                            }
                            JSONObject msicdetails = new JSONObject();
                            msicdetails.put(Constants.MSIC_INVAMT, authHandler.round(totalAmountwithTax, companyid));
                            msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.round(taxAmount, companyid));
                            msicdetails.put(Constants.MSIC_CODE, industryCode);
                            SalesTaxBilling.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                        } catch (Exception ex) {
                            throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
                        }
                    }
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        String country = "";
                        if (temp.getDebitNote().getBillingShippingAddresses() != null) {
                            if (!StringUtil.isNullOrEmpty(temp.getDebitNote().getBillingShippingAddresses().getShippingCountry()) && !temp.getDebitNote().getBillingShippingAddresses().getShippingCountry().equalsIgnoreCase(countryName)) {
                                country = temp.getDebitNote().getBillingShippingAddresses().getShippingCountry();
                            } else if (StringUtil.isNullOrEmpty(temp.getDebitNote().getBillingShippingAddresses().getShippingCountry()) && !StringUtil.isNullOrEmpty(temp.getDebitNote().getBillingShippingAddresses().getBillingCountry()) && !temp.getDebitNote().getBillingShippingAddresses().getBillingCountry().equalsIgnoreCase(countryName)) {
                                country = temp.getDebitNote().getBillingShippingAddresses().getBillingCountry();
                            }
                        }
                        SalesTaxBilling.put("invlineno", temp.getSrNoForRow());
                        SalesTaxBilling.put("invproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : (temp.getAccount() != null ? temp.getAccount().getName() : ""));
                        if (temp.getDebitNote().getDntype() == 4) {
                            SalesTaxBilling.put("invuen", temp.getDebitNote().getCustomer() != null ? (isMalasianCompany ? temp.getDebitNote().getCustomer().getCompanyRegistrationNumber() : temp.getDebitNote().getCustomer().getUENNumber()) : "");
                        } else {
                            SalesTaxBilling.put("invuen", temp.getDebitNote().getVendor() != null ? (isMalasianCompany ? temp.getDebitNote().getVendor().getCompanyRegistrationNumber() : temp.getDebitNote().getVendor().getUENNumber()) : "");
                        }
                        SalesTaxBilling.put("transactioncurrencycode", temp.getDebitNote().getCurrency().getCurrencyCode());
                        SalesTaxBilling.put("invcountry", country);
                    }
                    invSalesTaxjArr.put(SalesTaxBilling);
                }
//                }

                /**
                 * Sales Tax.
                 * *********************************** Get taxes used in
                 * Journal Entry***************************
                 */
                // ERP-17298
                if (isAdvanceSearch) {
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.journalEntrySearchJson));
                    filterParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                }
                KwlReturnObject jeDetailWithGstResult = accJournalEntryobj.getJEDetailsToIncludeInGSTReport(filterParams);
                List<JournalEntryDetail> JED = (List<JournalEntryDetail>) jeDetailWithGstResult.getEntityList();
                for (JournalEntryDetail jed : JED) {
                    JournalEntry JE = jed.getJournalEntry();
                    boolean isDebit = jed.isDebit();
                    double amount = jed.getAmount();
                    double eClaimJEPrincipleAmount = 0.0;
                    double taxAmount = 0;
                    amount = authHandler.round(amount, companyid);
                    amount = isDebit ? (-amount) : amount;
                    double originalAmount = amount;                    
                    KwlReturnObject bAmt = null;
                    if (requestParams.containsKey("gstFlag")) {
                        if (!JE.getCurrency().getCurrencyID().equals(Constants.SGDID)) {
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, amount, JE.getCurrency().getCurrencyID(), Constants.SGDID, JE.getEntryDate(), JE.getExternalCurrencyRate());
                        }
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, amount, JE.getCurrency().getCurrencyID(), JE.getEntryDate(), JE.getExternalCurrencyRate());
                    }
                    if (bAmt != null) {
                        amount = (Double) bAmt.getEntityList().get(0);
                    }
                    
                    /*
                     * If base currency is not SGD and country currency is SGD, then calculated transaction rate else considered external currency rate from journal entry.
                     */
                    double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = originalAmount / amount;
                    } else {
                        transactionExchangeRate = JE.getExternalCurrencyRate() == 0 ? 1 : JE.getExternalCurrencyRate();
                    }
                    if (jed.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        taxAmount += amount;
                        amount = 0;
                    }
                    double totalAmountwithTax = 0.0;
                    if (jed.getAccount().getID().equals(taxObj.getAccount().getID())) {                        
                        totalAmountwithTax = taxAmount;
                    }
                    
                    if (JE.isIsFromEclaim()) {
                        requestParams.put(Constants.Acc_JEid, JE.getID());
                        eClaimJEPrincipleAmount = accFinancialReportsService.getTotalPricipleAmountForEClaimJE((Map) requestParams);
                        amount = isDebit ? -eClaimJEPrincipleAmount : eClaimJEPrincipleAmount;
                        totalAmountwithTax += amount;
                    }
                    receiveAmount += authHandler.round(amount, companyid);
                    receivedTaxableAmount += authHandler.round(amount, companyid);
                    
                    /**
                     * To calculate subtotal.
                     */
                    saleAmount += authHandler.round(amount + taxAmount, companyid);
                    saleAmountExcludingTax += authHandler.round(amount, companyid);
                    taxableAmount += authHandler.round(taxAmount, companyid);
//                    totalTaxableAmount += authHandler.round(taxAmount, companyid);
                    
                    
                    /*
                     *When JE from eClaim then amount is total of principle amount+tax amount
                     */
                    double jeDetailAmount = JE.isIsFromEclaim() ? totalAmountwithTax :jed.getAmount();
                    KwlReturnObject bAmtOfJE = accCurrencyDAOobj.getCurrencyToBaseAmountRoundOff(requestParams, jeDetailAmount, JE.getCurrency().getCurrencyID(), JE.getEntryDate(), JE.getExternalCurrencyRate());
                    double amountInBase = (Double) bAmtOfJE.getEntityList().get(0);
                    amountInBase = authHandler.round(amountInBase, companyid);
                    transactionExchangeRate = JE.isIsFromEclaim() ?jeDetailAmount / amountInBase : transactionExchangeRate;
                    
                    SalesTaxBilling = new JSONObject();
                    SalesTaxBilling.put(Constants.billid, JE.getID());
                    SalesTaxBilling.put("type", "Journal Entry");
                    SalesTaxBilling.put("typeValue", JE.getTypeValue());
                    SalesTaxBilling.put("jeid", JE.getID());
                    SalesTaxBilling.put("jedate", odf.format(JE.getEntryDate()));
                    SalesTaxBilling.put("invdate", sdf.format(new Date(JE.getEntryDate().getTime())));
                    SalesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    SalesTaxBilling.put("invname", jed.getAccount().getName());
                    SalesTaxBilling.put("invno", JE.getEntryNumber());
                    SalesTaxBilling.put("invamt", authHandler.round(totalAmountwithTax, companyid));
                    SalesTaxBilling.put("gramtexcludingtax", authHandler.round(amount, companyid));
                    SalesTaxBilling.put("journalEntryNo", JE.getEntryNumber());
                    SalesTaxBilling.put("invtaxamount", authHandler.round(taxAmount, companyid));
                    SalesTaxBilling.put("originaltaxamount", authHandler.round(taxAmount * transactionExchangeRate, companyid));
                    SalesTaxBilling.put("originalamountincludingtax", authHandler.round(totalAmountwithTax * transactionExchangeRate, companyid));
                    SalesTaxBilling.put("transactionexchangerate", authHandler.round(transactionExchangeRate, companyid));
                    SalesTaxBilling.put("transactioncurrencysymbol", JE.getCurrency().getSymbol());
                    SalesTaxBilling.put("transactioncurrencyid", JE.getCurrency().getCurrencyID());
                    SalesTaxBilling.put(Constants.memo, JE.getMemo() != null ? JE.getMemo() : "");
                    
                    
                    /**
                     * To calculate grand total.
                     */
                    totalcategorycost += authHandler.round(taxAmount, companyid);//(rptSalesAmt*taxPercent/100);
                    totalgramtexcludingtax += authHandler.round(amount, companyid);
                    totalAmount += authHandler.round(totalAmountwithTax, companyid);
                    
                    // Handle for the JE inclusing 
                    if (isMalasianCompany && isForExport) {
                        try {
                            String entity = "", industryCode = "";
                            if (isMultiEntity) { // From Transaction Level
                                entity = jeEntityMap.get(JE.getID());
                                industryCode = entityIndustryCodeMap.get(entity);
                            } else {            // From Company level
                                industryCode = primaryIndustryCode;
                            }
                            JSONObject msicdetails = new JSONObject();
                            msicdetails.put(Constants.MSIC_INVAMT, authHandler.round(totalAmountwithTax, companyid));
                            msicdetails.put(Constants.MSIC_INVTAXAMT, authHandler.round(taxAmount, companyid));
                            msicdetails.put(Constants.MSIC_CODE, industryCode);
                            SalesTaxBilling.put(Constants.MSIC_DETAIS_JSON, new JSONArray().put(msicdetails));
                        } catch (Exception ex) {
                            throw ServiceException.FAILURE("getCalculatedTax : " + ex.getMessage(), ex);
                        }
                    }
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        SalesTaxBilling.put("invlineno", jed.getSrno());
                        SalesTaxBilling.put("invproduct", !StringUtil.isNullOrEmpty(jed.getDescription()) ? jed.getDescription() : (jed.getAccount() != null ? jed.getAccount().getName() : ""));
                        SalesTaxBilling.put("invuen", "");
                        SalesTaxBilling.put("transactioncurrencycode", JE.getCurrency().getCurrencyCode());
                        SalesTaxBilling.put("invcountry", "");
                    }

                    invSalesTaxjArr.put(SalesTaxBilling);
                }

                /**
                 * *******************************Without Inventory
                 * Data*******************************
                 */
                /**
                 * Commented code to avoid unnecessary looping & used
                 * invSalesTaxjArr instead of invSalesTaxBillingjArr.
                 */
//                for (int i = 0; i < invSalesTaxBillingjArr.length(); i++) {
//                    invSalesTaxjArr.put(invSalesTaxBillingjArr.getJSONObject(i));
//                }
                /*
                 * Add ImportedServicesInvoices Payment entry in GST Report for MalasianCompany when TAX "GST(DS)"
                 */
                if (isMalasianCompany && (isForGSTReport || isForTaxReport) && taxObj.getName().equals(Constants.MALAYSIAN_GST_DS_TAX_CODE)) {
                    JSONArray importedServicesJArr = getImportedServicesInvoicesJSON(requestParams);
                    for (int i = 0; i < importedServicesJArr.length(); i++) {
                        JSONObject jobj = importedServicesJArr.getJSONObject(i);
                        /**
                         * To calculate sub total.
                         */
                        saleAmount += jobj.optDouble("invamt", 0.0);
                        saleAmountExcludingTax += jobj.optDouble("gramtexcludingtax", 0.0);
                        taxableAmount += (jobj.optDouble("invtaxamount", 0.0));
//                        totalTaxableAmount += (jobj.optDouble("invtaxamount", 0.0));
                        /**
                         * To calculate grand total.
                         */
                        totalcategorycost += (jobj.optDouble("invtaxamount", 0.0));//totalcategorycost+= (ramount*rowTaxPercent/100);
                        totalgramtexcludingtax += jobj.optDouble("gramtexcludingtax", 0.0);
                        totalAmount += jobj.optDouble("invamt", 0);
                        invSalesTaxjArr.put(importedServicesJArr.getJSONObject(i));
                    }
                    
                    JSONArray freeGiftJEArray = getFreeGiftJEJsonArray(requestParams);
                    for (int i = 0; i < freeGiftJEArray.length(); i++) {
                        JSONObject jobj = freeGiftJEArray.getJSONObject(i);
                        /**
                         * To calculate sub total.
                         */
                        saleAmount += jobj.optDouble("invamt", 0.0);
                        saleAmountExcludingTax += jobj.optDouble("gramtexcludingtax", 0.0);
                        taxableAmount += (jobj.optDouble("invtaxamount", 0.0));
                        /**
                         * To calculate grand total.
                         */
                        totalcategorycost += (jobj.optDouble("invtaxamount", 0.0));
                        totalgramtexcludingtax += jobj.optDouble("gramtexcludingtax", 0.0);
                        totalAmount += jobj.optDouble("invamt", 0);
                        invSalesTaxjArr.put(jobj);
                    }
                }
                /**
                 * In case of Malaysian company and isForGSTReport and isForTAXReport.
                 * Add Applied DO in GST Report and TAX Report
                */
                if(isMalasianCompany && (isForGSTReport || isForTaxReport)){
                     requestParams.put(Constants.TAXID,taxObj.getID());
                     requestParams.put("companyCurrencyId",company!=null?company.getCurrency().getCurrencyID():"");
                     requestParams.put("isMalasianCompany",isMalasianCompany);
                     requestParams.put(Constants.isForGSTReport,isForGSTReport);
                     requestParams.put(Constants.isForTaxReport,isForTaxReport);
                    if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate") && requestParams.get("startDate")!=null && requestParams.get("endDate")!=null) {
                        requestParams.put(Constants.REQ_startdate,authHandler.getDateOnlyFormat().format(requestParams.get("startDate")));
                        requestParams.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat().format(requestParams.get("endDate")));
                    }
                     JSONArray doAdjsMentArray = getAppliedDeliveryOrdersJson(requestParams);
                     for(int i=0;i<doAdjsMentArray.length();i++){
                         JSONObject jobj = doAdjsMentArray.getJSONObject(i);
                         /**
                          * To calculate sub total.
                          */
                         saleAmount += jobj.optDouble("invamt", 0.0);
                         saleAmountExcludingTax += jobj.optDouble("gramtexcludingtax", 0.0);
                         taxableAmount += (jobj.optDouble("invtaxamount", 0.0));
                         /**
                          * To calculate grand total.
                          */
                         totalcategorycost += (jobj.optDouble("invtaxamount", 0.0));//totalcategorycost+= (ramount*rowTaxPercent/100);
                         totalgramtexcludingtax += jobj.optDouble("gramtexcludingtax", 0.0);
                         totalAmount += jobj.optDouble("invamt", 0);
                         invSalesTaxjArr.put(doAdjsMentArray.getJSONObject(i));

                     }
                     
                }
                if (isMalasianCompany) {
                    // Putting Adjustment Taxes
                    filterParams.put("isInputTax", false);
                    result = accInvoiceDAOobj.getTaxAdjustments((HashMap<String, Object>) filterParams);
                    List<TaxAdjustment> taxAdjustmentList = result.getEntityList();

                    for (TaxAdjustment taxAdjustment : taxAdjustmentList) {
                    JSONObject obj = new JSONObject();
                        obj.put("taxname", taxAdjustment.getTax().getName());
                        obj.put("taxcode", taxAdjustment.getTax().getTaxCodeWithoutPercentage());
                        obj.put("mergedResourceData", taxAdjustment.getTax().getTaxCodeWithoutPercentage());
                        obj.put("mergedCategoryData", "Sales and Income with GST Received");
                        obj.put("categoryName", "Grand");
                        obj.put("totalcategorycost", totalcategorycost + taxAdjustment.getTaxAmount());
                        obj.put("totalgramtexcludingtax", totalgramtexcludingtax + taxAdjustment.getAmount());
                        obj.put("totalsale", authHandler.round(taxAdjustment.getAmount() + taxAdjustment.getTaxAmount(), companyid));//sales including tax[PS]
                        obj.put("totalsaleexcludingtax", authHandler.round(taxAdjustment.getAmount(), companyid));//sales including tax[PS]
                        obj.put("taxrate", "6");
                        obj.put("taxamount", authHandler.round(taxAdjustment.getTaxAmount(), companyid));
                        obj.put("taxcollected", 0);  //taxamount of all thoose invoices whose amount due is 0[PS]
                        obj.put("taxpayable", taxAdjustment.getTaxAmount());
                        obj.put("invdate", sdf.format(taxAdjustment.getCreationDate()));
                        obj.put("invname", "");
                        obj.put("journalEntryNo", taxAdjustment.getJournalEntry().getEntryNumber());
                        obj.put("jeid", taxAdjustment.getJournalEntry().getID());
                        obj.put("jedate", odf.format(taxAdjustment.getJournalEntry().getEntryDate()));
                        obj.put("invno", taxAdjustment.getDocumentNo());
                        obj.put("invamt", taxAdjustment.getAmount() + taxAdjustment.getTaxAmount());
                        obj.put("addAmountFlag", true);
                        obj.put("gramtexcludingtax", taxAdjustment.getAmount());
                        obj.put("totalinvamt", totalAmount + taxAdjustment.getAmount() + taxAdjustment.getTaxAmount());
                        obj.put("invtaxamount", taxAdjustment.getTaxAmount());
                        obj.put("type", "Tax Adjustment");
                        obj.put(Constants.memo, "");
                        invSalesTaxjArr.put(obj);
                        
                        /**
                         * To calculate sub total.
                         */
                        saleAmount += (taxAdjustment.getAmount() + taxAdjustment.getTaxAmount());
                        saleAmountExcludingTax += taxAdjustment.getAmount();
                        taxableAmount += taxAdjustment.getTaxAmount();
//                        totalTaxableAmount += taxAdjustment.getTaxAmount();
                        
                        /**
                         * To calculate grand total.
                         */
                        totalcategorycost += taxAdjustment.getTaxAmount();
                        totalgramtexcludingtax += taxAdjustment.getAmount();
                        totalAmount += taxAdjustment.getAmount() + taxAdjustment.getTaxAmount();
                    }

                    Set<String> advanceKeys = advanceLocalTaxLinkedToInvoice.keySet();
                    for (String key : advanceKeys) {
                        JSONObject obj = new JSONObject();
                        double invoicePaidAmountIncludingTax = (Double) advanceLocalTaxLinkedToInvoice.get(key);
                        if (invoicePaidAmountIncludingTax > 0) {
                            double taxAmt = invoicePaidAmountIncludingTax * 6 / 106;
                            obj.put("taxcode", Constants.MALAYSIAN_GST_SR_TAX_CODE);
                            obj.put("invamt", -invoicePaidAmountIncludingTax);
                            obj.put("invtaxamount", -taxAmt);
                            invSalesTaxjArr.put(obj);
                        }
                    }
                }
                if (fileType.equals("pdf")) {
                    JSONObject obj = new JSONObject();
                    obj.put("taxname", taxObj.getName());
                    obj.put("taxcode", taxObj.getTaxCodeWithoutPercentage());
                    obj.put("totalsale", authHandler.round(saleAmount, companyid));//sales including tax[PS]
                    obj.put("taxrate", taxListObj.getPercent());
//                    obj.put("taxamount", authHandler.round(taxableAmount  + taxableAmountC + taxableAmountD, companyid));
//                    obj.put("taxamount", totalTaxableAmount);
                    obj.put("taxamount", taxableAmount);
                    obj.put("taxcollected", taxCollected);  //taxamount of all thoose invoices whose amount due is 0[PS]
                    obj.put("taxpayable", (taxableAmount - taxCollected));
                    obj.put("totalsaleexcludingtax", authHandler.round(saleAmountExcludingTax, companyid));//sales including tax[PS]
                    if (isRequireSortByDate) {
                        invSalesTaxjArr = AccReportsHandler.sortJsonArrayByGSTDate(invSalesTaxjArr, sdf);
                    }
                    obj.put("details", invSalesTaxjArr);
                    jArr.put(obj);

                } else if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                    JSONObject fileDataJObj = new JSONObject();
                    JSONArray fileDataJArr = new JSONArray();
                    for (int jsonVal = 0; jsonVal < invSalesTaxjArr.length(); jsonVal++) {
                        JSONObject obj = new JSONObject();
                        JSONObject oldObject = (JSONObject) invSalesTaxjArr.get(jsonVal);
                        obj.put("invdate", sdf.parse(oldObject.optString("invdate")).getTime());
                        obj.put("invname", oldObject.optString("invname"));
                        obj.put("invno", oldObject.optString("invno"));
                        obj.put("invamt", oldObject.optDouble("invamt", 0.0));
                        obj.put("invamtexcludinggst", oldObject.optDouble("gramtexcludingtax", 0.0));
                        obj.put("invtaxamount", oldObject.optDouble("invtaxamount", 0.0));
                        obj.put("invlineno", oldObject.optInt("invlineno", 0));
                        obj.put("invproduct", StringUtil.replaceFullHTML(oldObject.optString("invproduct")));
                        obj.put("invtaxcode", taxObj.getTaxCodeWithoutPercentage());
                        obj.put("invuen", oldObject.optString("invuen"));
                        obj.put("invcountry", oldObject.optString("invcountry"));
                        obj.put("fcycode", oldObject.optString("transactioncurrencycode", ""));
                        obj.put("salesfcy", oldObject.optDouble("originalamountincludingtax", 0.0));
                        obj.put("salesfcyexcludinggst", oldObject.optDouble("originalamountincludingtax", 0.0) - oldObject.optDouble("originaltaxamount", 0.0));
                        obj.put("gstfcy", oldObject.optDouble("originaltaxamount", 0.0));
                        fileDataJArr.put(obj);
                    }
                    fileDataJObj.put("details", fileDataJArr);
                    jArr.put(fileDataJObj);
                } else {
                    String mergedCategoryData = messageSource.getMessage("acc.reports.salesandincomegst", null, localeObj);
                    for (int jsonVal = 0; jsonVal < invSalesTaxjArr.length(); jsonVal++) {
                        JSONObject obj = new JSONObject();
                        JSONObject oldObject = (JSONObject) invSalesTaxjArr.get(jsonVal);
                        obj.put("taxname", taxObj.getName());
                        obj.put("taxtype", taxObj.getTaxtype());
                        obj.put("taxcode", taxObj.getTaxCodeWithoutPercentage());
                        obj.put("mergedResourceData", isMalasianCompany ? taxObj.getTaxCodeWithoutPercentage() : taxObj.getName());//
                        obj.put("mergedCategoryData", mergedCategoryData);
                        obj.put("categoryName", "Grand");
                        obj.put("totalcategorycost", totalcategorycost);
                        obj.put("totalgramtexcludingtax", totalgramtexcludingtax);
                        obj.put("totalsale", authHandler.round(saleAmount, companyid));//sales including tax[PS]
                        obj.put("totalsaleexcludingtax", authHandler.round(saleAmountExcludingTax, companyid));//sales including tax[PS]
                        obj.put("taxrate", taxListObj.getPercent());
//                        obj.put("taxamount", authHandler.round(taxableAmount+ taxableAmountC, companyid));
                        obj.put("taxamount", authHandler.round(taxableAmount, companyid));
                        obj.put("taxcollected", taxCollected);  //taxamount of all thoose invoices whose amount due is 0[PS]
                        obj.put("taxpayable", (taxableAmount - taxCollected));
                        obj.put("invdate", oldObject.getString("invdate"));
                        obj.put("billid", oldObject.has("billid") ? oldObject.getString("billid") : "");
                        if(oldObject.has("inputType")){
                            obj.put("inputType", oldObject.getString("inputType"));
                        }
                        obj.put("noteno", oldObject.has("noteno") ? oldObject.getString("noteno") : "");
                        obj.put("date", oldObject.has("date") ? oldObject.getString("date") : "");
                        obj.put(Constants.memo, oldObject.optString(Constants.memo));
                        obj.put("costcenterid", oldObject.has("costcenterid") ? oldObject.getString("costcenterid") : "");
                        obj.put("lasteditedby", oldObject.has("lasteditedby") ? oldObject.getString("lasteditedby") : "");
                        obj.put("includeprotax", oldObject.has("includeprotax") ? oldObject.getString("includeprotax") : "");
                        obj.put("sequenceformatid", oldObject.has("sequenceformatid") ? oldObject.getString("sequenceformatid") : "");
                        obj.put("agentid", oldObject.has("agentid") ? oldObject.getString("agentid") : "");
                        obj.put("personid", oldObject.has("personid") ? oldObject.getString("personid") : "");
                        obj.put("personname", oldObject.has("personname") ? oldObject.getString("personname") : "");
                        obj.put("currencyid", oldObject.has("currencyid") ? oldObject.getString("currencyid") : "");
                        obj.put("invname", oldObject.getString("invname"));
                        obj.put("journalEntryNo", oldObject.getString("journalEntryNo"));
                        obj.put("invno", oldObject.getString("invno"));
                        obj.put("isLeaseFixedAsset", oldObject.optBoolean("isLeaseFixedAsset",false));
                        obj.put(Constants.billid, oldObject.has(Constants.billid) ? oldObject.getString(Constants.billid) : "");
                        obj.put("type", oldObject.has("type") ? oldObject.getString("type") : " ");
                        obj.put("noteid", oldObject.has("noteid") ? oldObject.getString("noteid") : "");
                        obj.put("jeid", oldObject.has("jeid") ? oldObject.getString("jeid") : "");
                        obj.put("jedate", oldObject.has("jedate") ? oldObject.getString("jedate") : "");
                        obj.put("invamt", oldObject.getDouble("invamt"));
                        obj.put("addAmountFlag", oldObject.getBoolean("addAmountFlag"));
                        obj.put("gramtexcludingtax", oldObject.optDouble("gramtexcludingtax", 0.0));
                        obj.put("totalinvamt", totalAmount);
                        obj.put("invtaxamount", oldObject.getDouble("invtaxamount"));
                        obj.put("originalamountincludingtax", oldObject.optDouble("originalamountincludingtax", 0.0));
                        obj.put("originaltaxamount", oldObject.optDouble("originaltaxamount", 0.0));
                        obj.put("transactionexchangerate", oldObject.optDouble("transactionexchangerate", 1.0));
                        obj.put("transactioncurrencysymbol", oldObject.optString("transactioncurrencysymbol", ""));
                        obj.put("transactioncurrencyid", oldObject.optString("transactioncurrencyid", ""));
                        if (isForExport && isMalasianCompany) {
                            obj.put(Constants.MSIC_DETAIS_JSON, oldObject.optJSONArray(Constants.MSIC_DETAIS_JSON));
                        }
                        jArr.put(obj);
                    }
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getCalculatedSalesTaxMerged : " + ex.getMessage(), ex);
                }
        return jArr;
    }

    public JSONArray getCalculatedPurchaseTaxMerged(Map<String, Object> requestParams, List taxList, String fileType) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        JSONArray grPurchaseTaxjArr = new JSONArray();
        JSONObject purchasesTax = new JSONObject();
//        JSONArray grPurchaseTaxBillingjArr = new JSONArray();
        JSONObject purchasesTaxBilling = new JSONObject();
        JSONObject obj = new JSONObject();
        double totalAmount = 0;
        double totalcategorycost = 0;
        double totalgramtexcludingtax = 0;
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        DateFormat odf = new SimpleDateFormat("dd-MM-yyyy");
        boolean isRequireSortByDate = false;
        boolean isForExport = false;// For Malaysian custom jasper template
        try {
            if (requestParams.containsKey("userdf")) {
                sdf = (SimpleDateFormat) requestParams.get("userdf");
            }
            if (requestParams.containsKey(Constants.onlydateformat)) {
                odf = (DateFormat) requestParams.get(Constants.onlydateformat);
            }
            if (requestParams.containsKey("isRequireSortByDate")) {
                isRequireSortByDate = (boolean) requestParams.get("isRequireSortByDate");
            }
            if (requestParams.containsKey("isForExport")) {
                isForExport = (boolean) requestParams.get("isForExport");
            }
            String companyid = (String) requestParams.get(Constants.companyKey);
            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyObj.getEntityList().get(0);
            boolean isMalasianCompany = company.getCountry().getID().equals("137");
            boolean isSingaporeCompany = company.getCountry().getID().equals(Constants.SINGAPOREID);
            boolean isForGSTReport = requestParams.containsKey(Constants.isForGSTReport) ? (boolean) requestParams.get(Constants.isForGSTReport) : false;
            boolean isAdvanceSearch = requestParams.containsKey(Constants.isAdvanceSearch) ? (boolean) requestParams.get(Constants.isAdvanceSearch) : false;
            boolean isForTaxReport = requestParams.containsKey(Constants.isForTaxReport) ? (boolean) requestParams.get(Constants.isForTaxReport) : false;
            String filterConjuctionCriteria = requestParams.containsKey(Constants.Filter_Criteria) ? (String) requestParams.get(Constants.Filter_Criteria) : Constants.and;
            
            Iterator itr = taxList.iterator();
            
            while (itr.hasNext()) {
                grPurchaseTaxjArr = new JSONArray();
//                grPurchaseTaxBillingjArr = new JSONArray();
                Object[] row = (Object[]) itr.next();
                Tax taxObj = (Tax) row[0];
//                 System.out.println(taxObj.getName());
                TaxList taxListObj = (TaxList) row[1];
                Map<String, Object> filterParams = new HashMap<String, Object>();
                filterParams.put("taxid", taxObj.getID());
                requestParams.put(TaxConstants.PERCENT, taxListObj.getPercent());//http://jira.deskera.com/browse/ERP-42115
                if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
                    filterParams.put("startDate", requestParams.get("startDate"));
                    filterParams.put("endDate", requestParams.get("endDate"));
                }

                if (requestParams.containsKey(Constants.companyKey) && requestParams.containsKey(Constants.companyKey)) {
                    filterParams.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                }
                if (requestParams.containsKey("gstss")) {
                    filterParams.put("ss", requestParams.get("gstss"));
                }
                if (requestParams.containsKey("excludeRetailPurchaseInvoice")) {
                    filterParams.put("excludeRetailPurchaseInvoice", requestParams.get("excludeRetailPurchaseInvoice"));
                }
                String gcurrencyid = (String) requestParams.get(Constants.globalCurrencyKey);
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                /**
                 * *******************************With Inventory
                 * Data*******************************
                 */
                //VI with GST on Total Amounts
                if(isAdvanceSearch){
                    filterParams.put(Constants.Acc_Search_Json,requestParams.get(Constants.purchaseInvoiceSearchJson));
                    filterParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    filterParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    filterParams.put(Constants.fixedAssetsPurchaseInvoiceSearchJson,requestParams.get(Constants.fixedAssetsPurchaseInvoiceSearchJson));
                }
                KwlReturnObject result = accGoodsReceiptDAOObj.getCalculatedGRTax(filterParams);
                List<GoodsReceipt> list = result.getEntityList();
                double saleAmount = 0;
                double saleAmountExcludingTax = 0;
                double saleAmountExcludingTaxB = 0;
                double taxableAmount = 0;
                double taxCollected = 0;
                /**
                * -----------------Rules For Transaction with Purchase Tax as per ERM-263---------
                * If Debit/Credit type = Debit && Tax Type = Purchase Tax then  Amount Sign = Positive
                * If Debit/Credit type = Credit && Tax Type = Purchase Tax then  Amount Sign = Negative.
                */

//Cal Tax for whole GR[PS]
                if (list != null) {
                    if (fileType.equals(Constants.isGSTAuditFile)) {
                        /**
                         * http://jira.deskera.com/browse/ERP-42115 - 
                         * To show each product as separate row in audit file even when global level tax is applied.
                         */
                        accGstService.getGoodsReceiptRowsForAuditFile(requestParams, list, grPurchaseTaxjArr);
                    } else {
                        for (GoodsReceipt temp : list) {
                            double invTaxAmt = temp.getTaxamountinbase();
                            double invSalesAmt = temp.getInvoiceAmount(); // (invSalesAmt = Sub Total + Product Tax + Total Term Amount + Total Term Tax Amount) in transaction currency
                            double termAmount = 0, termAmountInBase = 0;
                            double termTaxAmount = 0, termTaxAmountInBase = 0;
                            HashMap<String, Object> invTermMap = new HashMap();
                            invTermMap.put("invoiceid", temp.getID());
                            KwlReturnObject receiptTermsMapresult = accGoodsReceiptDAOObj.getInvoiceTermMap(invTermMap);
                            List<ReceiptTermsMap> termMap = receiptTermsMapresult.getEntityList();
                            for (ReceiptTermsMap receiptTermMap : termMap) {
                                termAmount += receiptTermMap.getTermamount();
                                termAmountInBase += receiptTermMap.getTermamountinbase();
                                termTaxAmount += receiptTermMap.getTermtaxamount();
                                termTaxAmountInBase += receiptTermMap.getTermtaxamountinbase();
                            }
                            invTaxAmt -= termTaxAmountInBase;
                            invSalesAmt = invSalesAmt - termAmount - termTaxAmount;

                            KwlReturnObject invSalesAmountResult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());
                            invSalesAmt = authHandler.round((Double) invSalesAmountResult.getEntityList().get(0), companyid);

                            KwlReturnObject invAmtConverted = null;
                            KwlReturnObject taxAmtConverted = null;



                            // gstFlag = Country is Singapore
                            if (requestParams.containsKey("gstFlag")) {
                                /*
                                     * Company currency is not SGD
                                 */
                                if (!gcurrencyid.equals(Constants.SGDID)) {
                                    if (!temp.getCurrency().getCurrencyID().equals(Constants.SGDID)) {

                                        if (temp.getGstCurrencyRate() != 0) {
                                            invSalesAmt = (temp.getInvoiceAmount()-termAmount-termTaxAmount) * temp.getGstCurrencyRate();
                                            invSalesAmt = authHandler.round(invSalesAmt, companyid);
                                            if (invTaxAmt != 0) {
                                                invTaxAmt = (temp.getTaxamount()-termTaxAmount) * temp.getGstCurrencyRate();
                                                invTaxAmt = authHandler.round(invTaxAmt, companyid);
                                            }
                                        } else {
    //                                        invAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invSalesAmt, gcurrencyid, Constants.SGDID, temp.getJournalEntry().getEntryDate(), temp.getGstCurrencyRate());
                                            invAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invSalesAmt, gcurrencyid, Constants.SGDID, temp.getCreationDate(), temp.getGstCurrencyRate());
                                            invSalesAmt = (Double) invAmtConverted.getEntityList().get(0);
                                            if (invTaxAmt != 0) {
    //                                            taxAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invTaxAmt, gcurrencyid, Constants.SGDID, temp.getJournalEntry().getEntryDate(), temp.getGstCurrencyRate());
                                                taxAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invTaxAmt, gcurrencyid, Constants.SGDID, temp.getCreationDate(), temp.getGstCurrencyRate());
                                                invTaxAmt = (Double) taxAmtConverted.getEntityList().get(0);
                                            }
                                        }
                                    } else {
                                        invSalesAmt = temp.getInvoiceAmount(); //+ termAmountToBeIncluded;
                                        invTaxAmt = temp.getTaxamount() - termTaxAmount;
                                    }
                                }
                            }
    //                        else if(!gcurrencyid.equals(Constants.RMID)){
    //                            invAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invSalesAmt, gcurrencyid,Constants.RMID , temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());
    //                            invSalesAmt = (Double)invAmtConverted.getEntityList().get(0);
    //                            if(invTaxAmt != 0){
    //                                taxAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invTaxAmt, gcurrencyid, Constants.RMID, temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());
    //                                invTaxAmt = (Double)taxAmtConverted.getEntityList().get(0);
    //                            }
    //                        }




                            /**
                             * To calculate sub total.
                             */
                            saleAmount += authHandler.round(invSalesAmt, companyid);
                            saleAmountExcludingTax += authHandler.round(invSalesAmt - invTaxAmt, companyid);
                            taxableAmount += authHandler.round(invTaxAmt, companyid);

    //                        double invAmtDue = 0;
    //                        if (!temp.getVendorEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
    //                            List amtList;
    //                            if (temp.isIsExpenseType()) {
    //                                amtList = accGoodsReceiptCommon.getExpGRAmountDue(requestParams, temp);
    //                            } else {
    //                                if (Constants.InvoiceAmountDueFlag) {
    //                                    amtList = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(requestParams, temp);
    //                                } else {
    //                                    amtList = accGoodsReceiptCommon.getGRAmountDue(requestParams, temp);
    //                                }
    //                            }
    //                            if (!amtList.isEmpty() && amtList != null) {
    //                                invAmtDue = (Double) amtList.get(1);
    //                            }
    //                        }
    //                        if (invAmtDue == 0) {
    //                            taxCollected += authHandler.round(invTaxAmt, 2);//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
    //                        }
                            double transactionExchangeRate = 0;
                            if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                                transactionExchangeRate = (authHandler.round(temp.getInvoiceAmount(), companyid)) / (invSalesAmt);
                            } else {
                                transactionExchangeRate = temp.getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getJournalEntry().getExternalCurrencyRate();
                            }
                            transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);

    //                        transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                            purchasesTax = new JSONObject();
                            purchasesTax.put("type", "Purchase Invoice");
                            purchasesTax.put(Constants.billid, temp.getID());
                            purchasesTax.put("jeid", temp.getJournalEntry().getID());
                            purchasesTax.put("journalEntryNo", temp.getJournalEntry().getEntryNumber());
                            purchasesTax.put("jedate", odf.format(temp.getJournalEntry().getEntryDate()));
    //                        purchasesTax.put("grdate", sdf.format(new Date(temp.getJournalEntry().getEntryDate().getTime())));
                            purchasesTax.put("grdate", sdf.format(new Date(temp.getCreationDate().getTime())));
                            purchasesTax.put("grname", temp.getVendor().getName());
                            purchasesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                            purchasesTax.put("grno", temp.getGoodsReceiptNumber());
                            purchasesTax.put("gramt", authHandler.round(invSalesAmt, companyid));
                            purchasesTax.put("gramtexcludingtax", authHandler.round(invSalesAmt - invTaxAmt, companyid));
                            purchasesTax.put("grtaxamount", authHandler.round(invTaxAmt, companyid));

                            purchasesTax.put("originalamountincludingtax", authHandler.round((temp.getInvoiceAmount()-termAmount-termTaxAmount), companyid));
                            purchasesTax.put("originaltaxamount", authHandler.round(temp.getTaxamount(), companyid));

                            purchasesTax.put("transactionexchangerate", transactionExchangeRate);
                            purchasesTax.put("transactioncurrencysymbol", temp.getCurrency().getSymbol());
                            purchasesTax.put("transactioncurrencyid", temp.getCurrency().getCurrencyID());
                            purchasesTax.put(Constants.memo, temp.getMemo() != null ? temp.getMemo() : "");
    //                        totalcategorycost += authHandler.round(invTaxAmt, companyid);
    //                        totalgramtexcludingtax += authHandler.round(invSalesAmt - invTaxAmt, companyid);
                            /**
                             * To calculate grand total.
                             */
                            totalcategorycost += authHandler.round(invTaxAmt, companyid);//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                            totalgramtexcludingtax += authHandler.round(invSalesAmt - invTaxAmt, companyid);//authHandler.round((invSalesAmt*100)/(100+taxPercent),Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                            totalAmount += authHandler.round(invSalesAmt, companyid);

                            if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                                purchasesTax.put("grlineno", 1);
                                purchasesTax.put("grproduct", "");
                                purchasesTax.put("gruen", temp.getVendor() != null ? (isMalasianCompany ? temp.getVendor().getCompanyRegistrationNumber() : temp.getVendor().getUENNumber()) : "");
                                purchasesTax.put("transactioncurrencycode", temp.getCurrency().getCurrencyCode());
                                purchasesTax.put("permit", "");
                            }
                            grPurchaseTaxjArr.put(purchasesTax);

                        }
                    }
                }
                /**
                * Purchase Tax.
                * Calculate Tax for Purchase Invoice(Vendor Invoice) Details[PS]
                */

                //Cal Tax for VI Details[PS]
                if (isAdvanceSearch) {
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.purchaseInvoiceSearchJson));
                    filterParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    filterParams.put(Constants.fixedAssetsPurchaseInvoiceSearchJson, requestParams.get(Constants.fixedAssetsPurchaseInvoiceSearchJson));
                }
                result = accGoodsReceiptDAOObj.getCalculatedGRDtlTax(filterParams);
                
                List<GoodsReceiptDetail> GRList = result.getEntityList();
                if (GRList != null) {
                    for (GoodsReceiptDetail temp : GRList) {
                        double quantity;
                        double rowTaxPercent = 0;
                        double rowTaxAmount = 0;
                        boolean isRowTaxApplicable = false;
                        double ramount = 0;
                        double gramtexcludingtax = 0;
                        quantity = temp.getInventory().getQuantity();
                        double rdisc = 0;
                        ramount = temp.getRowExcludingGstAmountInBase();//authHandler.round(temp.getRate() * quantity, Constants.AMOUNT_DIGIT_AFTER_DECIMAL);                        
                        double lineLevelTermAmount = 0;
                        lineLevelTermAmount = temp.getLineLevelTermAmount();
                        rowTaxAmount = temp.getRowTaxAmountInBase();
                        
                        rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                        
                        KwlReturnObject invAmtConverted = null;
                        KwlReturnObject taxAmtConverted = null;
                            
                        /*
                         * gstFlag = Country is Singapore
                         */ 
                         if (requestParams.containsKey("gstFlag")) {
                             /*
                              * Company currency is not SGD
                              */ 
                            if (!gcurrencyid.equals(Constants.SGDID)) {
                                if (!temp.getGoodsReceipt().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
                                    if (temp.getGstCurrencyRate() != 0) {
                                        ramount = (temp.getRowExcludingGstAmount())*temp.getGstCurrencyRate();
                                        ramount = authHandler.round(ramount, companyid);
                                        if (rowTaxAmount != 0) {
                                              rowTaxAmount = (temp.getRowTaxAmount())*temp.getGstCurrencyRate();
                                              rowTaxAmount = authHandler.round(rowTaxAmount, companyid);
                                        }
                                    } else {
//                                        invAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, ramount, gcurrencyid, Constants.SGDID, temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGstCurrencyRate());
                                        invAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, ramount, gcurrencyid, Constants.SGDID, temp.getGoodsReceipt().getCreationDate(), temp.getGstCurrencyRate());
                                        ramount = (Double) invAmtConverted.getEntityList().get(0);
                                        if (rowTaxAmount != 0) {
//                                            taxAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, rowTaxAmount, gcurrencyid, Constants.SGDID, temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGstCurrencyRate());
                                            taxAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, rowTaxAmount, gcurrencyid, Constants.SGDID, temp.getGoodsReceipt().getCreationDate(), temp.getGstCurrencyRate());
                                            rowTaxAmount = (Double) taxAmtConverted.getEntityList().get(0);
                                        }
                                    }
                                } else {
                                    /*
                                    * If transaction currency is SGD , then no need to convert amount.
                                    */
                                    ramount = temp.getRowExcludingGstAmount();
                                    rowTaxAmount = temp.getRowTaxAmount();
                                }
                            }
                        }
                        
//                        double invAmtDue = 0;
//                        if (!temp.getGoodsReceipt().getVendorEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
//                            List amtList;
//                            amtList = accGoodsReceiptCommon.getGRAmountDue(requestParams, temp.getGoodsReceipt());
//                            if (!amtList.isEmpty() && amtList != null) {
//                                invAmtDue = (Double) amtList.get(1);
//                            }
//                        }
//                        if (invAmtDue == 0) {
//                            taxCollected += authHandler.round((rowTaxAmount), Constants.AMOUNT_DIGIT_AFTER_DECIMAL);//taxCollected+=authHandler.round((ramount*rowTaxPercent/100),2);
//                        }
                        //ramount += termAmountInBase;
                        //rowTaxAmount += termTaxAmountInBase;
                        
                        double grAmount = 0d;
                        if (temp.getGoodsReceipt().getTax() == null) {
                            ramount = authHandler.round(ramount, companyid);
                            //rowTaxAmount = authHandler.round(rowTaxAmount, companyid);
                            grAmount = ramount + (rowTaxAmount);//ramount + (ramount * rowTaxPercent / 100);
                            gramtexcludingtax += authHandler.round(ramount, companyid);
                            
                            /**
                             * To calculate sub total.
                             */
                            saleAmount += authHandler.round(ramount + rowTaxAmount, companyid);
                            saleAmountExcludingTax += authHandler.round(ramount, companyid);
                            taxableAmount += authHandler.round(rowTaxAmount, companyid);
                        } else {
                            grAmount = 0;//if tax has been included in invoice level then the invoice amount for row level will be show zero.
                        }
                        double transactionExchangeRate = 0;
                        if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                            transactionExchangeRate = (temp.getRowExcludingGstAmount())/(ramount);
                        } else {
                            transactionExchangeRate = temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate()  == 0 ? 1 : temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate() ;
                        }
                        transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                        purchasesTax = new JSONObject();
                        purchasesTax.put("type", "Purchase Invoice");
                        purchasesTax.put(Constants.billid, temp.getGoodsReceipt().getID());
                        purchasesTax.put("jeid", temp.getGoodsReceipt().getJournalEntry().getID());
                        purchasesTax.put("jedate", odf.format(temp.getGoodsReceipt().getJournalEntry().getEntryDate()));
//                        purchasesTax.put("grdate", sdf.format(new Date(temp.getGoodsReceipt().getJournalEntry().getEntryDate().getTime())));
                        purchasesTax.put("grdate", sdf.format(new Date(temp.getGoodsReceipt().getCreationDate().getTime())));
                        purchasesTax.put("grname", temp.getGoodsReceipt().getVendor().getName());
                        purchasesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                        purchasesTax.put("grno", temp.getGoodsReceipt().getGoodsReceiptNumber());
                        purchasesTax.put("gramt", authHandler.round(grAmount, companyid));
                        purchasesTax.put("originalamountincludingtax", authHandler.round(temp.getRowExcludingGstAmount()+temp.getRowTaxAmount(), companyid));
                        purchasesTax.put("gramtexcludingtax", authHandler.round(gramtexcludingtax, companyid));
                        purchasesTax.put("journalEntryNo", temp.getGoodsReceipt().getJournalEntry().getEntryNumber());
                        purchasesTax.put("grtaxamount", authHandler.round(rowTaxAmount, companyid));//purchasesTax.put("grtaxamount", (ramount*rowTaxPercent/100));
                        purchasesTax.put("originaltaxamount", authHandler.round(temp.getRowTaxAmount(), companyid));
                        purchasesTax.put("transactionexchangerate", transactionExchangeRate);
                        purchasesTax.put("transactioncurrencysymbol", temp.getGoodsReceipt().getCurrency().getSymbol());
                        purchasesTax.put("transactioncurrencyid", temp.getGoodsReceipt().getCurrency().getCurrencyID());
                        purchasesTax.put(Constants.memo, temp.getGoodsReceipt().getMemo() != null ? temp.getGoodsReceipt().getMemo() : "");
                                                    
                        /**
                         * To calculate grand total.
                         */
                        totalcategorycost += authHandler.round(rowTaxAmount, companyid);//totalcategorycost+=(ramount*rowTaxPercent/100);
                        totalgramtexcludingtax += authHandler.round(gramtexcludingtax, companyid);
                        totalAmount += authHandler.round(grAmount, companyid);
                        
                        /**
                         * Added following key for IAF.
                         */
                        if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                            purchasesTax.put("grlineno", temp.getSrno());
                            purchasesTax.put("grproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : temp.getInventory().getProduct() != null ? (!StringUtil.isNullOrEmpty(temp.getInventory().getProduct().getDescription()) ? temp.getInventory().getProduct().getDescription() : temp.getInventory().getProduct().getName()) : "");
                            purchasesTax.put("gruen", temp.getGoodsReceipt().getVendor() != null ? (isMalasianCompany ? temp.getGoodsReceipt().getVendor().getCompanyRegistrationNumber() : temp.getGoodsReceipt().getVendor().getUENNumber()) : "");
                            purchasesTax.put("transactioncurrencycode", temp.getGoodsReceipt().getCurrency().getCurrencyCode());
                            purchasesTax.put("permit", "");

                        }
                        grPurchaseTaxjArr.put(purchasesTax);
                        
                    }
                }  
                /**
                * Purchase Tax.
                * Term Tax Calculations
                */    
                if (isAdvanceSearch) {
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.purchaseInvoiceSearchJson));
                    filterParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    filterParams.put(Constants.fixedAssetsPurchaseInvoiceSearchJson, requestParams.get(Constants.fixedAssetsPurchaseInvoiceSearchJson));
                }
                KwlReturnObject receiptTermMapResult = accGoodsReceiptDAOObj.getReceiptTermMapList(filterParams);
                List<ReceiptTermsMap> receiptTermMapList = receiptTermMapResult.getEntityList();
                for (ReceiptTermsMap temp : receiptTermMapList) {
                    double termAmount = 0;
                    double termAmountInBase = 0;

                    if (temp.getGoodsreceipt().isGstIncluded()) {
                        termAmount = temp.getTermAmountExcludingTax();
                        termAmountInBase = temp.getTermAmountExcludingTaxInBase();
                    } else {
                        termAmount = temp.getTermamount();
                        termAmountInBase = temp.getTermamountinbase();
                    }
                    double termTaxAmount = temp.getTermtaxamount();
                    double termTaxAmountInBase = temp.getTermtaxamountinbase();

                    KwlReturnObject invAmtConverted = null;
                    KwlReturnObject taxAmtConverted = null;
                    /*
                        * gstFlag = Country is Singapore
                        */
                    if (requestParams.containsKey("gstFlag")) {
                        /*
                            * Company currency is not SGD
                            */
                        if (!gcurrencyid.equals(Constants.SGDID)) {
                            if (!temp.getGoodsreceipt().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
                                if (temp.getGoodsreceipt().getGstCurrencyRate() != 0) {
                                    termAmountInBase = (termAmount) * temp.getGoodsreceipt().getGstCurrencyRate();
                                    termAmountInBase = authHandler.round(termAmountInBase, companyid);
                                    if (termTaxAmount != 0) {
                                        termTaxAmountInBase = (termTaxAmount) * temp.getGoodsreceipt().getGstCurrencyRate();
                                        termTaxAmountInBase = authHandler.round(termTaxAmountInBase, companyid);
                                    }
                                } else {
                                    invAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, termAmountInBase, gcurrencyid, Constants.SGDID, temp.getGoodsreceipt().getCreationDate(), temp.getGoodsreceipt().getGstCurrencyRate());
                                    termAmountInBase = (Double) invAmtConverted.getEntityList().get(0);
                                    if (termTaxAmount != 0) {
                                        taxAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, termTaxAmountInBase, gcurrencyid, Constants.SGDID, temp.getGoodsreceipt().getCreationDate(), temp.getGoodsreceipt().getGstCurrencyRate());
                                        termTaxAmountInBase = (Double) taxAmtConverted.getEntityList().get(0);
                                    }
                                }
                            } else {
                                /*
                                 * If transaction currency is SGD , then no need to convert amount.
                                 */
                                termAmount = termAmountInBase = temp.getTermamount();
                                termTaxAmount = termTaxAmountInBase = temp.getTermtaxamount();
                            }
                        }
                    }
                    double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = (authHandler.round((temp.getTermamount()), companyid)) / (termAmountInBase);
                    } else {
                        transactionExchangeRate = temp.getGoodsreceipt().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getGoodsreceipt().getJournalEntry().getExternalCurrencyRate();
                    }
                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);

                    /**
                        * To calculate sub total.
                        */
                    taxableAmount += authHandler.round(termTaxAmountInBase, companyid);
                    saleAmountExcludingTax += authHandler.round(termAmountInBase, companyid);
                    saleAmount += authHandler.round(termAmountInBase+termTaxAmountInBase, companyid);

                    purchasesTax = new JSONObject();
                    purchasesTax.put("type", "Purchase Invoice");
                    purchasesTax.put(Constants.billid, temp.getGoodsreceipt().getID());
                    purchasesTax.put("jeid", temp.getGoodsreceipt().getJournalEntry().getID());
                    purchasesTax.put("jedate", odf.format(temp.getGoodsreceipt().getJournalEntry().getEntryDate()));
                    purchasesTax.put("grdate", sdf.format(new Date(temp.getGoodsreceipt().getCreationDate().getTime())));
                    purchasesTax.put("grname", temp.getGoodsreceipt().getVendor().getName());
                    purchasesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    purchasesTax.put("grno", temp.getGoodsreceipt().getGoodsReceiptNumber());
                    purchasesTax.put("gramt", authHandler.round(termAmountInBase+termTaxAmountInBase, companyid));
                    purchasesTax.put("gramtexcludingtax", authHandler.round(termAmountInBase, companyid));
                    purchasesTax.put("grtaxamount", authHandler.round(termTaxAmountInBase, companyid));//purchasesTax.put("grtaxamount", (ramount*rowTaxPercent/100));

                    purchasesTax.put("originalamountincludingtax", authHandler.round(termAmount+termTaxAmount, companyid));
                    purchasesTax.put("originaltaxamount", authHandler.round(termTaxAmount, companyid));
                    purchasesTax.put("journalEntryNo", temp.getGoodsreceipt().getJournalEntry().getEntryNumber());
                    purchasesTax.put("transactionexchangerate", transactionExchangeRate);
                    purchasesTax.put("transactioncurrencysymbol", temp.getGoodsreceipt().getCurrency().getSymbol());
                    purchasesTax.put("transactioncurrencyid", temp.getGoodsreceipt().getCurrency().getCurrencyID());
                    purchasesTax.put(Constants.memo, temp.getGoodsreceipt().getMemo() != null ? temp.getGoodsreceipt().getMemo() : "");
                    
                    /**
                     * To calculate grand total.
                     */
                    totalcategorycost += authHandler.round(termTaxAmountInBase, companyid);//totalcategorycost+=(ramount*rowTaxPercent/100);
                    totalgramtexcludingtax += authHandler.round(termAmountInBase, companyid);
                    totalAmount += authHandler.round(termAmountInBase+termTaxAmountInBase, companyid);
                    /**
                     * Added following key for IAF.
                     */
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        purchasesTax.put("grlineno", 1);
                        purchasesTax.put("grproduct", "");
                        purchasesTax.put("gruen", temp.getGoodsreceipt().getVendor() != null ? (isMalasianCompany ? temp.getGoodsreceipt().getVendor().getCompanyRegistrationNumber() : temp.getGoodsreceipt().getVendor().getUENNumber()) : "");
                        purchasesTax.put("transactioncurrencycode", temp.getGoodsreceipt().getCurrency().getCurrencyCode());
                        purchasesTax.put("permit", "");
                        
                    }
                    grPurchaseTaxjArr.put(purchasesTax);
                }


                /*
                 *
                 Calculate tax for Credit Note for Undercharged Purchase Invoice(Tax applied at line level.)
                 *
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.creditNoteSearchJson));
                    filterParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                }
                result = accGoodsReceiptDAOObj.getCalculatedCNTaxGst(filterParams);
                List<CreditNoteAgainstVendorGst> list12 = result.getEntityList();
                if (list12 != null) {
                    for (CreditNoteAgainstVendorGst creditMemo : list12) {
                        double taxPercent = 0;
                        double dnAmtDue = 0;
                        double taxAmount = 0;
                        double cnSalesAmt = 0.0;
                        double cnAmountInTransactionCurrency = 0;
                        double cnTaxAmountInTransactionCurrency = 0;
                        String discountType = String.valueOf(creditMemo.getDiscountispercent());
                        double discountValue = creditMemo.getDiscount();                        
                        double totalAmountwithTax = 0.0;
                        cnSalesAmt = (creditMemo.getRate()*creditMemo.getReturnQuantity());
                        taxAmount = creditMemo.getRowTaxAmount();
                        if (discountType.equalsIgnoreCase(Constants.DISCOUNT_MASTER_TYPE_PERCENTAGE)) {
                            cnSalesAmt -= (cnSalesAmt * discountValue / 100);// amount excluding discount.ERP-38665
                        } else {
                            cnSalesAmt -= discountValue; //flat discount.
                        }
                        //cnTxCurrAmt and cnTxCurrTaxAmt to use amount in tranaction currency as cnSalesAmt and taxAmount cam change in below operations
                        cnAmountInTransactionCurrency = cnSalesAmt;
                        cnTaxAmountInTransactionCurrency = taxAmount;

                        String currencyid = creditMemo.getCreditNote().getCurrency().getCurrencyID();
                        double gstCurrencyRate = creditMemo.getCreditNote().getGstCurrencyRate();
                        /*
                        *ERP-39555 : GST Currency Rate in CN Overcharge/Undercharge when Country currency is SGD and base currency is other than SGD 
                        *If GST Currency rate not given then consider consider external currency rate on the basis of date.
                        */
                        if (!gcurrencyid.equals(Constants.SGDID) && requestParams.containsKey("gstFlag")) {
                            if (!currencyid.equals(Constants.SGDID)) { //If transaction id is SGD then value for cnSalesAmt and taxAmount is in SGD are in SGD
                                //If transaction Currency is not SGD, then convert in SGD
                                if (gstCurrencyRate != 0) {
                                    cnSalesAmt = cnSalesAmt * gstCurrencyRate;
                                    taxAmount = taxAmount * gstCurrencyRate;

                                } else {
                                    //If gstCurrencyRate is not given by user, then convert transaction currency to base currency and base currency to SGD
                                    KwlReturnObject CNAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, cnSalesAmt, currencyid, Constants.SGDID, creditMemo.getCreditNote().getJournalEntry().getEntryDate(), 0);
                                    if (CNAmt != null) {
                                        cnSalesAmt = (Double) CNAmt.getEntityList().get(0);
                                    }
                                    KwlReturnObject CNTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmount, currencyid, Constants.SGDID, creditMemo.getCreditNote().getJournalEntry().getEntryDate(), 0);
                                    if (CNTaxAmt != null) {
                                        taxAmount = (Double) CNTaxAmt.getEntityList().get(0);
                                    }
                                }

                            }

                        } else {
                            KwlReturnObject bAmt;
                            if (requestParams.containsKey("gstFlag")) {
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, cnSalesAmt, creditMemo.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, creditMemo.getCreditNote().getJournalEntry().getEntryDate(), creditMemo.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, cnSalesAmt, creditMemo.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, creditMemo.getCreditNote().getCreationDate(), creditMemo.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                            } else {
//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, creditMemo.getCreditNote().getCurrency().getCurrencyID(), creditMemo.getCreditNote().getJournalEntry().getEntryDate(), creditMemo.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, creditMemo.getCreditNote().getCurrency().getCurrencyID(), creditMemo.getCreditNote().getCreationDate(), creditMemo.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                            }
                            cnSalesAmt = (Double) bAmt.getEntityList().get(0);
                            if (creditMemo.getTax() != null) {
                                KwlReturnObject bTaxAmt;
                                if (requestParams.containsKey("gstFlag")) {
//                                bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, creditMemo.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, creditMemo.getCreditNote().getJournalEntry().getEntryDate(), creditMemo.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                                    bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, creditMemo.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, creditMemo.getCreditNote().getCreationDate(), creditMemo.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                                } else {
//                                bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, creditMemo.getCreditNote().getCurrency().getCurrencyID(), creditMemo.getCreditNote().getJournalEntry().getEntryDate(), creditMemo.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                                    bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, creditMemo.getCreditNote().getCurrency().getCurrencyID(), creditMemo.getCreditNote().getCreationDate(), creditMemo.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                                }
                                taxAmount = (Double) bTaxAmt.getEntityList().get(0);
                            }
                        }
                        cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                        taxAmount = authHandler.round(taxAmount, companyid);
                        totalAmountwithTax = authHandler.round(cnSalesAmt + (taxAmount), companyid);
                        
                        /*
                         * If base currency is not SGD and country currency is SGD, then calculated transaction rate else considered external currency rate from journal entry.
                         */
                        double transactionExchangeRate = 0;
                        if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                            transactionExchangeRate = cnAmountInTransactionCurrency / cnSalesAmt;
                        } else {
                            transactionExchangeRate = creditMemo.getCreditNote().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : creditMemo.getCreditNote().getJournalEntry().getExternalCurrencyRate();
                        }

                        transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                        /**
                         * To calculate sub total.
                         */
                        taxableAmount += authHandler.round((taxAmount), companyid);
                        saleAmount += authHandler.round(totalAmountwithTax, companyid);
                        saleAmountExcludingTax += authHandler.round(cnSalesAmt, companyid);
                        
                        purchasesTaxBilling = new JSONObject();
                        purchasesTaxBilling.put("type", "Credit Note");
                        purchasesTaxBilling.put("noteid", creditMemo.getCreditNote().getID());
                        purchasesTaxBilling.put("jeid", creditMemo.getCreditNote().getJournalEntry().getID());
                        purchasesTaxBilling.put("jedate", odf.format(creditMemo.getCreditNote().getJournalEntry().getEntryDate()));
//                        purchasesTaxBilling.put("grdate", sdf.format(new Date(creditMemo.getCreditNote().getJournalEntry().getEntryDate().getTime())));
                        purchasesTaxBilling.put("grdate", sdf.format(new Date(creditMemo.getCreditNote().getCreationDate().getTime())));
                        if (creditMemo.getCreditNote().getCntype() == 5) {
                            purchasesTaxBilling.put("grname", creditMemo.getCreditNote().getVendor().getName());
                        } else {
                            purchasesTaxBilling.put("grname", creditMemo.getCreditNote().getCustomer().getName());
                        }
                        purchasesTaxBilling.put("grno", creditMemo.getCreditNote().getCreditNoteNumber());
                        purchasesTaxBilling.put("gramt", authHandler.round(totalAmountwithTax, companyid));
                        //originalamountincludingtax to show amount in transaction currency in report
                        purchasesTaxBilling.put("originalamountincludingtax", authHandler.round((cnAmountInTransactionCurrency + cnTaxAmountInTransactionCurrency), companyid));
                        purchasesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                        purchasesTaxBilling.put("gramtexcludingtax", authHandler.round(cnSalesAmt, companyid));
                        purchasesTaxBilling.put("journalEntryNo", creditMemo.getCreditNote().getJournalEntry().getEntryNumber());
                        purchasesTaxBilling.put("grtaxamount", authHandler.round(taxAmount, companyid));
                        purchasesTaxBilling.put("billid", creditMemo.getCreditNote().getID());
                        purchasesTaxBilling.put("inputType", creditMemo.getCreditNote().getCntype());
                        purchasesTaxBilling.put("noteno", creditMemo.getCreditNote().getCreditNoteNumber());
                        purchasesTaxBilling.put("currencyid", creditMemo.getCreditNote().getCurrency().getCurrencyID());
//                        purchasesTaxBilling.put("date", odf.format(creditMemo.getCreditNote().getJournalEntry().getEntryDate()));
                        purchasesTaxBilling.put("date", odf.format(creditMemo.getCreditNote().getCreationDate()));
                        purchasesTaxBilling.put("costcenterid", creditMemo.getCreditNote().getCostcenter() == null ? "" : creditMemo.getCreditNote().getCostcenter().getID());
                        purchasesTaxBilling.put("lasteditedby", creditMemo.getCreditNote().getModifiedby() == null ? "" : (creditMemo.getCreditNote().getModifiedby().getFirstName() + " " + creditMemo.getCreditNote().getModifiedby().getLastName()));
                        purchasesTaxBilling.put(Constants.SEQUENCEFORMATID, creditMemo.getCreditNote().getSeqformat() != null ? creditMemo.getCreditNote().getSeqformat().getID() : "");
                        purchasesTaxBilling.put("includeprotax", creditMemo.getTax()!=null?true:false);
                        purchasesTaxBilling.put("personid", creditMemo.getCreditNote().getVendor().getID());
                        purchasesTaxBilling.put("personname", creditMemo.getCreditNote().getVendor().getName());
                        purchasesTaxBilling.put("agentid", (creditMemo.getCreditNote().getMasterAgent()==null)?"":creditMemo.getCreditNote().getMasterAgent().getID()) ;
                        purchasesTaxBilling.put(Constants.memo, creditMemo.getCreditNote().getMemo() != null ? creditMemo.getCreditNote().getMemo() : "");
                        //originaltaxamount to show amount in transaction currency in report
                        purchasesTaxBilling.put("originaltaxamount", authHandler.round(cnTaxAmountInTransactionCurrency, companyid));
                        purchasesTaxBilling.put("transactionexchangerate", transactionExchangeRate);
                        purchasesTaxBilling.put("transactioncurrencysymbol", creditMemo.getCreditNote().getCurrency().getSymbol());
                        purchasesTaxBilling.put("transactioncurrencyid", creditMemo.getCreditNote().getCurrency().getCurrencyID());
                        /**
                         * To calculate grand total.
                         */
                        totalgramtexcludingtax += authHandler.round(cnSalesAmt, companyid);
                        totalcategorycost += authHandler.round(taxAmount, companyid);
                        totalAmount += authHandler.round(totalAmountwithTax, companyid);

                        /**
                         * Added following key for IAF.
                         */
                        if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                            purchasesTaxBilling.put("grlineno", creditMemo.getSrno());
                            purchasesTaxBilling.put("grproduct", !StringUtil.isNullOrEmpty(creditMemo.getDescription()) ? creditMemo.getDescription() : creditMemo.getProduct() != null ? (!StringUtil.isNullOrEmpty(creditMemo.getProduct().getDescription()) ? creditMemo.getProduct().getDescription() : creditMemo.getProduct().getName()) : "");
                            purchasesTaxBilling.put("gruen", creditMemo.getCreditNote().getVendor() != null ? (isMalasianCompany ? creditMemo.getCreditNote().getVendor().getCompanyRegistrationNumber() : creditMemo.getCreditNote().getVendor().getUENNumber()) : "");
                            purchasesTaxBilling.put("transactioncurrencycode", creditMemo.getCreditNote().getCurrency().getCurrencyCode());
                            purchasesTaxBilling.put("permit", "");
                        }
                        grPurchaseTaxjArr.put(purchasesTaxBilling);
                    }
                }
                //DN with GST on Total Amounts
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.debitNoteSearchJson));
                }
                result = accGoodsReceiptDAOObj.getCalculatedDNTax(filterParams);
                
                List<DebitNote> list11 = result.getEntityList();
                if (list11 != null) {
                    for (DebitNote debitMemo : list11) {
                        double dnAmount = 0;
                        double taxAmount = 0;
                        double dnAmountExcludingTax = 0;
                       
                        KwlReturnObject result1 = accJournalEntryobj.getJournalEntryDetail(debitMemo.getJournalEntry().getID(), debitMemo.getJournalEntry().getCompany().getCompanyID());
                        Iterator iterator = result1.getEntityList().iterator();
                        boolean taxflag = false;
                        while (iterator.hasNext()) {
                            JournalEntryDetail jed = (JournalEntryDetail) iterator.next();
                            Account account = null;
                            account = jed.getAccount();

                            //Logic to get new OTHER_CURRENT_LIABILITIES group from old OTHER_CURRENT_LIABILITIES
                            //To do - Need to test wheteher is working or not
                            String currLibName = "";
                            Group liab_group = accAccountDAOobj.getNewGroupFromOldId(Group.OTHER_CURRENT_LIABILITIES, account.getCompany().getCompanyID());
                            if (liab_group != null) {
                                currLibName = liab_group.getID();
                            }

                            if (account.getGroup().getID().equals(currLibName)) {
                                if (!jed.isDebit() && account.getID().equals(taxObj.getAccount().getID())) {
                                    taxAmount = jed.getAmount();
                                    taxflag = true;
                                }
                            } else if (!jed.isDebit()) {
                                dnAmountExcludingTax += jed.getAmount();
                            }

                            if (jed.isDebit()) {
                                dnAmount += jed.getAmount();
                            }
//                            saleAmount-=dnAmount;
                        }
                        if (taxflag) {
                            String currencyid = debitMemo.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : debitMemo.getJournalEntry().getCurrency().getCurrencyID();
                            KwlReturnObject bAmt1 = null;
                            if (requestParams.containsKey("gstFlag")) {
                                String fromcurrencyid = currencyid;
                                if (!fromcurrencyid.equals(Constants.SGDID)) {
//                                    bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, dnAmount, fromcurrencyid, Constants.SGDID, debitMemo.getJournalEntry().getEntryDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                                    bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, dnAmount, fromcurrencyid, Constants.SGDID, debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                                }
                            } else {
//                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, dnAmount, currencyid, debitMemo.getJournalEntry().getEntryDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, dnAmount, currencyid, debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            }
                            if (bAmt1 != null) {
                                dnAmount = (Double) bAmt1.getEntityList().get(0);
                            }
                            KwlReturnObject bAmt2 = null;
                            if (requestParams.containsKey("gstFlag")) {
                                String fromcurrencyid = currencyid;
                                if (!fromcurrencyid.equals(Constants.SGDID)) {
//                                    bAmt2 = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmount, fromcurrencyid, Constants.SGDID, debitMemo.getJournalEntry().getEntryDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                                    bAmt2 = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmount, fromcurrencyid, Constants.SGDID, debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                                }
                            } else {
//                                bAmt2 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, debitMemo.getJournalEntry().getEntryDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                                bAmt2 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                            }
                            if (bAmt2 != null) {
                                taxAmount = (Double) bAmt2.getEntityList().get(0);
                            }
//                            taxableAmount-=taxAmount;
                            //                     result = accDebitNoteobj.getTotalTax_TotalDiscount(debitMemo.getID());
                            //                     double totTax = 0, totDiscount = 0;
                            //                     if (result != null && result.getEntityList() != null) {
                            //                         Iterator resItr = result.getEntityList().iterator();
                            //                         Object[] sumRow = (Object[]) resItr.next();
                            //                         if (sumRow[0] != null) {
                            //                             totTax = Double.parseDouble(sumRow[0].toString());
                            //                         }
                            //                         if (sumRow[1] != null) {
                            //                             totDiscount = Double.parseDouble(sumRow[1].toString());
                            //                         }
                            //                     }
                            /**
                             * To calculate sub total.
                             */
                            saleAmount += -(authHandler.round(dnAmountExcludingTax, companyid)+authHandler.round(taxAmount, companyid));
                            taxableAmount += -(authHandler.round(taxAmount, companyid));
                            saleAmountExcludingTax += -(authHandler.round(dnAmountExcludingTax, companyid));
                            
                            double transactionExchangeRate = debitMemo.getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : debitMemo.getJournalEntry().getExternalCurrencyRate();
                            purchasesTax = new JSONObject();
                            purchasesTax.put("type", "Debit Note");
                            purchasesTax.put("noteid", debitMemo.getID());
                            purchasesTax.put("jeid", debitMemo.getJournalEntry().getID());
                            purchasesTax.put("jedate", odf.format(debitMemo.getJournalEntry().getEntryDate()));
//                            purchasesTax.put("grdate", sdf.format(new Date(debitMemo.getJournalEntry().getEntryDate().getTime())));
                            purchasesTax.put("grdate", sdf.format(new Date(debitMemo.getCreationDate().getTime())));
                            purchasesTax.put("grname", debitMemo.getVendor().getName());
                            purchasesTax.put("grno", debitMemo.getDebitNoteNumber());
                            purchasesTax.put("gramt", -authHandler.round(dnAmount, companyid));
                            purchasesTax.put("originalamountincludingtax", -authHandler.round(dnAmount * transactionExchangeRate, companyid));
                            purchasesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be substract.
                            purchasesTax.put("gramtexcludingtax", authHandler.round(-dnAmountExcludingTax, companyid));
                            purchasesTax.put("journalEntryNo", debitMemo.getJournalEntry().getEntryNumber());
                            purchasesTax.put("grtaxamount", -authHandler.round(taxAmount, companyid));
                            purchasesTax.put("originaltaxamount", -authHandler.round(taxAmount * transactionExchangeRate, companyid));
                            purchasesTax.put("transactionexchangerate", authHandler.round(transactionExchangeRate, companyid));
                            purchasesTax.put("transactioncurrencysymbol", debitMemo.getCurrency().getSymbol());
                            purchasesTax.put("transactioncurrencyid", debitMemo.getCurrency().getCurrencyID());
                            purchasesTax.put(Constants.memo, debitMemo.getMemo() != null ? debitMemo.getMemo() : "");
                            
                            /**
                             * To calculate grand total.
                             */
                            totalcategorycost -= authHandler.round(taxAmount, companyid);
                            totalgramtexcludingtax -= authHandler.round(dnAmountExcludingTax, companyid);
                            totalAmount -= authHandler.round(dnAmount, companyid);
                            /**
                             * Added following key for IAF.
                             */
                            if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                                purchasesTax.put("grlineno", 1);
                                purchasesTax.put("grproduct", "");
                                purchasesTax.put("gruen", debitMemo.getVendor() != null ? (isMalasianCompany ? debitMemo.getVendor().getCompanyRegistrationNumber() : debitMemo.getVendor().getUENNumber()) : "");
                                purchasesTax.put("transactioncurrencycode", debitMemo.getCurrency().getCurrencyCode());
                                purchasesTax.put("permit", "");
                            }
                            grPurchaseTaxjArr.put(purchasesTax);
                        }
                    }
                }
                
                /**
                 * Purchase Tax.
                 * Calculate tax for Debit Note For Overcharge PI(Tax applied at global level)
                 * ERM-778.
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.debitNoteSearchJson));
                    filterParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                }
                result = accGoodsReceiptDAOObj.getCalculatedDebitNoteTax(filterParams);
                List<DebitNote> calculateDNTaxList = result.getEntityList();
                if (fileType.equals(Constants.isGSTAuditFile)) {
                    /**
                     * http://jira.deskera.com/browse/ERP-42115 - To show each
                     * product as separate row in audit file even when global
                     * level tax is applied.
                     */
                    accGstService.getDNOverchargeRowsForAuditFile(requestParams, calculateDNTaxList, grPurchaseTaxjArr);
                } else {
                    for (DebitNote debitMemo : calculateDNTaxList) {
                        double dnAmount = 0;
                        double taxAmount = 0;
                        double dnAmountExcludingTax = 0;
                        double dnAmountInTransactionCurrency = 0;
                        double dnTaxAmountInTransactionCurrency = 0;
                        double dnDiscountAmt=0;
                        KwlReturnObject result1 = accJournalEntryobj.getJournalEntryDetail(debitMemo.getJournalEntry().getID(), debitMemo.getJournalEntry().getCompany().getCompanyID());
                        Iterator iterator = result1.getEntityList().iterator();
                        boolean taxflag = false;
                        while (iterator.hasNext()) {
                            JournalEntryDetail jed = (JournalEntryDetail) iterator.next();
                            Account account = null;
                            account = jed.getAccount();

                            if (!jed.isDebit() && account.getID().equals(taxObj.getAccount().getID())) {
                                taxAmount += jed.getAmount();
                                taxflag = true;
                            }
                            if (jed.isDebit()) {
                                dnAmount += jed.getAmount();
                            }
                        }
                        /*
                         * ERP-38665 - debit note for Overcharged Purchase invoice(If tax used at global level)
                         * In GST reports principal amount should be excluding Discount 
                         */
                        Set<DebitNoteAgainstCustomerGst> rowGstDetail = debitMemo.getRowsGst();
                        if (rowGstDetail != null) {
                            for (DebitNoteAgainstCustomerGst rowGst : rowGstDetail) {
                                double dnSaleAmt = rowGst.getRate() * rowGst.getReturnQuantity();
                                double discountValue = rowGst.getDiscount();
                                String discountType = String.valueOf(rowGst.getDiscountispercent());
                                if (discountType.equalsIgnoreCase(Constants.DISCOUNT_MASTER_TYPE_PERCENTAGE)) {
                                    dnDiscountAmt += (dnSaleAmt * discountValue / 100);
                                } else {
                                    dnDiscountAmt += discountValue; //flat discount 
                                }
                            }
                        }
                        dnAmount = dnAmount - dnDiscountAmt;
                        //dnTxCurrAmt and dnTxCurrTaxAmt to use amount in tranaction currency as dnAmount and taxAmount can change in below operations
                        dnAmountInTransactionCurrency = dnAmount;
                        dnTaxAmountInTransactionCurrency = taxAmount;


                        String currencyid = debitMemo.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : debitMemo.getJournalEntry().getCurrency().getCurrencyID();
                        if (taxflag) {
                            /*
                            *ERP-39555 : GST Currency Rate in CN Overcharge/Undercharge when Country currency is SGD and base currency is other than SGD 
                            *If GST Currency rate not given then consider consider external currency rate on the basis of date.
                            */
                            if (!gcurrencyid.equals(Constants.SGDID) && requestParams.containsKey("gstFlag")) {
                                if (!currencyid.equals(Constants.SGDID)) { //If transaction id is SGD then value for dnAmount and taxAmount are in SGD
                                    //If transaction Currency is not SGD, then convert in SGD
                                    if (debitMemo.getGstCurrencyRate() != 0) {
                                        dnAmount = dnAmount * debitMemo.getGstCurrencyRate();
                                        taxAmount = taxAmount * debitMemo.getGstCurrencyRate();

                                    } else {
                                        KwlReturnObject DNAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, dnAmount, currencyid, Constants.SGDID, debitMemo.getJournalEntry().getEntryDate(), 0);
                                        if (DNAmt != null) {
                                            dnAmount = (Double) DNAmt.getEntityList().get(0);
                                        }
                                        KwlReturnObject DNTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmount, currencyid, Constants.SGDID, debitMemo.getJournalEntry().getEntryDate(), 0);
                                        if (DNTaxAmt != null) {
                                            taxAmount = (Double) DNTaxAmt.getEntityList().get(0);
                                        }
                                    }

                                }

                            } else {
                                KwlReturnObject bAmt1 = null;
                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, dnAmount, currencyid, debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                                if (bAmt1 != null) {
                                    dnAmount = (Double) bAmt1.getEntityList().get(0);
                                }
                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, debitMemo.getCreationDate(), debitMemo.getJournalEntry().getExternalCurrencyRate());
                                if (bAmt1 != null) {
                                    taxAmount = (Double) bAmt1.getEntityList().get(0);
                                }
                            }


                            dnAmountExcludingTax += dnAmount - taxAmount;
                            /*
                            * If base currency is not SGD and country currency is SGD, then calculated transaction rate else considered external currency rate from journal entry.
                            */
                            double transactionExchangeRate = 0;
                            if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                                transactionExchangeRate = dnAmountInTransactionCurrency / dnAmount;
                            } else {
                                transactionExchangeRate = debitMemo.getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : debitMemo.getJournalEntry().getExternalCurrencyRate();
                            }

                            transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                            /**
                             * Vendor Debit Note With Purchase Tax to be shown as
                             * negative in GST Report.
                             */
                            /**
                             * By default type of tax account is credit for
                             * DebitNote If type of tax account is credit & purchase
                             * tax then amount should be negative Refer - ERM-263.
                             */
                            dnAmount = -dnAmount;
                            taxAmount = -taxAmount;
                            dnAmountExcludingTax = -dnAmountExcludingTax;
                            dnAmountInTransactionCurrency = -dnAmountInTransactionCurrency;
                            dnTaxAmountInTransactionCurrency = -dnTaxAmountInTransactionCurrency;
                            /**
                             * To calculate sub total.
                             */
                            saleAmount += (authHandler.round(dnAmountExcludingTax, companyid) + authHandler.round(taxAmount, companyid));
                            taxableAmount += (authHandler.round(taxAmount, companyid));
                            saleAmountExcludingTax += (authHandler.round(dnAmountExcludingTax, companyid));


                            purchasesTax = new JSONObject();
                            purchasesTax.put("type", "Debit Note");
                            purchasesTax.put("noteid", debitMemo.getID());
                            purchasesTax.put("jeid", debitMemo.getJournalEntry().getID());
                            purchasesTax.put("jedate", odf.format(debitMemo.getJournalEntry().getEntryDate()));
                            purchasesTax.put("grdate", sdf.format(new Date(debitMemo.getCreationDate().getTime())));
                            purchasesTax.put("grname", debitMemo.getVendor().getName());
                            purchasesTax.put("grno", debitMemo.getDebitNoteNumber());
                            purchasesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be substract.
                            purchasesTax.put("gramt", authHandler.round(dnAmount, companyid));
                            purchasesTax.put("journalEntryNo", debitMemo.getJournalEntry().getEntryNumber());
                            //originalamountincludingtax to show amount in transaction currency in report
                            purchasesTax.put("originalamountincludingtax", authHandler.round(dnAmountInTransactionCurrency, companyid));
                            purchasesTax.put("gramtexcludingtax", authHandler.round(dnAmountExcludingTax, companyid));
                            purchasesTax.put("grtaxamount", authHandler.round(taxAmount, companyid));
                            //originaltaxamount to show amount in transaction currency in report
                            purchasesTax.put("originaltaxamount", authHandler.round(dnTaxAmountInTransactionCurrency, companyid));
                            purchasesTax.put("transactionexchangerate", transactionExchangeRate);
                            purchasesTax.put("transactioncurrencysymbol", debitMemo.getCurrency().getSymbol());
                            purchasesTax.put("transactioncurrencyid", debitMemo.getCurrency().getCurrencyID());
                            purchasesTax.put(Constants.memo, debitMemo.getMemo() != null ? debitMemo.getMemo() : "");

                            /**
                             * To calculate grand total.
                             */
                            totalcategorycost += authHandler.round(taxAmount, companyid);
                            totalgramtexcludingtax += authHandler.round(dnAmountExcludingTax, companyid);
                            totalAmount += authHandler.round(dnAmount, companyid);
                            /**
                             * Added following key for IAF.
                             */
                            if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                                purchasesTax.put("grlineno", 1);
                                purchasesTax.put("grproduct", "");
                                purchasesTax.put("gruen", debitMemo.getVendor() != null ? (isMalasianCompany ? debitMemo.getVendor().getCompanyRegistrationNumber() : debitMemo.getVendor().getUENNumber()) : "");
                                purchasesTax.put("transactioncurrencycode", debitMemo.getCurrency().getCurrencyCode());
                                purchasesTax.put("permit", "");
                            }

                            grPurchaseTaxjArr.put(purchasesTax);
                        }
                    }

                }
                /**
                 * Purchase Tax.
                 * Calculate tax for Debit Note for Overcharge.(Tax applied at line level)
                 *
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.debitNoteSearchJson));
                }
                result = accGoodsReceiptDAOObj.getCalculatedDNTaxGst(filterParams);
                List<DebitNoteAgainstCustomerGst> dnDetailsList = result.getEntityList();
                for (DebitNoteAgainstCustomerGst temp : dnDetailsList) {
                    double dnSalesAmt = temp.getRate() * temp.getReturnQuantity();
                    double taxAmount = temp.getRowTaxAmount();
                    double dnAmountInTransactionCurrency = 0;
                    double dnTaxAmountInTransactionCurrency = 0;
                    double discountValue = temp.getDiscount();
                    String discountType = String.valueOf(temp.getDiscountispercent());
                    if (discountType.equalsIgnoreCase(Constants.DISCOUNT_MASTER_TYPE_PERCENTAGE)) {
                        dnSalesAmt -= (dnSalesAmt * discountValue / 100);// amount excluding discount.ERP-38665
                    } else {
                        dnSalesAmt -= discountValue; //flat discount 
                    }
                    //dnTxCurrAmt and dnTxCurrTaxAmt to use amount in tranaction currency as cnSalesAmt and taxAmount can change in below operations
                    dnAmountInTransactionCurrency = dnSalesAmt;
                    dnTaxAmountInTransactionCurrency = taxAmount;
                    
                    String currencyid = temp.getDebitNote().getCurrency().getCurrencyID();
                    double gstCurrencyRate = temp.getDebitNote().getGstCurrencyRate();
                    /*
                     *ERP-39555 : GST Currency Rate in CN Overcharge/Undercharge when Country currency is SGD and base currency is other than SGD 
                     *If GST Currency rate not given then consider consider external currency rate on the basis of date.
                     */
                    if (!gcurrencyid.equals(Constants.SGDID) && requestParams.containsKey("gstFlag")) {
                        if (!currencyid.equals(Constants.SGDID)) { //If transaction id is SGD then value for dnSalesAmt and taxAmount is in SGD are in SGD
                            //If transaction Currency is not SGD, then convert in SGD
                            if (gstCurrencyRate != 0) {
                                dnSalesAmt = dnSalesAmt * gstCurrencyRate;
                                taxAmount = taxAmount * gstCurrencyRate;

                            } else {
                                //If gstCurrencyRate is not given by user, then convert transaction currency to base currency and base currency to SGD
                                KwlReturnObject DNAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, dnSalesAmt, currencyid, Constants.SGDID, temp.getDebitNote().getJournalEntry().getEntryDate(), 0);
                                if (DNAmt != null) {
                                    dnSalesAmt = (Double) DNAmt.getEntityList().get(0);
                                }
                                KwlReturnObject DNTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmount, currencyid, Constants.SGDID, temp.getDebitNote().getJournalEntry().getEntryDate(), 0);
                                if (DNTaxAmt != null) {
                                    taxAmount = (Double) DNTaxAmt.getEntityList().get(0);
                                }
                            }
                        }
                    } else {
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, dnSalesAmt, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                        dnSalesAmt = (Double) bAmt.getEntityList().get(0);                        

                        KwlReturnObject bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                        taxAmount = (Double) bTaxAmt.getEntityList().get(0);                        
                    }
                    taxAmount = authHandler.round(taxAmount, companyid);
                    dnSalesAmt = authHandler.round(dnSalesAmt, companyid);
                    double totalAmountwithTax = authHandler.round(dnSalesAmt + taxAmount, companyid);
                    
                    /*
                     * If base currency is not SGD and country currency is SGD, then calculated transaction rate else considered external currency rate from journal entry.
                     */
                    double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = dnAmountInTransactionCurrency / dnSalesAmt;
                    } else {
                        transactionExchangeRate = temp.getDebitNote().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getDebitNote().getJournalEntry().getExternalCurrencyRate();
                    }
                    
                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                    /**
                     * Vendor Debit Note With Purchase Tax to be shown as negative in GST Report.
                     */
                    /**
                     * By default type of tax account is credit for DebitNote
                     * If type of tax account is credit & purchase tax then
                     * amount should be negative Refer - ERM-263.
                     */
                    dnSalesAmt = -dnSalesAmt;
                    taxAmount = -taxAmount;
                    totalAmountwithTax = -totalAmountwithTax;
                    dnAmountInTransactionCurrency = -dnAmountInTransactionCurrency; 
                    dnTaxAmountInTransactionCurrency = -dnTaxAmountInTransactionCurrency;

                    /**
                     * To calculate sub total.
                     */
                    taxableAmount += authHandler.round(taxAmount, companyid);
                    saleAmount += authHandler.round(totalAmountwithTax, companyid);
                    saleAmountExcludingTax += authHandler.round(dnSalesAmt, companyid);

                    
                    purchasesTax = new JSONObject();
                    purchasesTax.put("type", "Debit Note");
                    purchasesTax.put(Constants.billid, temp.getDebitNote().getID());
                    purchasesTax.put("jeid", temp.getDebitNote().getJournalEntry().getID());
                    purchasesTax.put("jedate", odf.format(temp.getDebitNote().getJournalEntry().getEntryDate()));
                    purchasesTax.put("grdate", sdf.format(new Date(temp.getDebitNote().getCreationDate().getTime())));
                    purchasesTax.put("grname", temp.getDebitNote().getVendor().getName());
                    purchasesTax.put("grno", temp.getDebitNote().getDebitNoteNumber());
                    purchasesTax.put("gramt", authHandler.round(totalAmountwithTax, companyid));
                    purchasesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    purchasesTax.put("gramtexcludingtax", authHandler.round(dnSalesAmt, companyid));
                    purchasesTax.put("journalEntryNo", temp.getDebitNote().getJournalEntry().getEntryNumber());
                    purchasesTax.put("grtaxamount", authHandler.round(taxAmount, companyid));
                    //originaltaxamount and originalamountincludingtax to show amount in transaction currency in report
                    purchasesTax.put("originaltaxamount", authHandler.round(dnTaxAmountInTransactionCurrency, companyid));
                    purchasesTax.put("originalamountincludingtax", authHandler.round((dnAmountInTransactionCurrency+dnTaxAmountInTransactionCurrency), companyid));
                    purchasesTax.put("transactionexchangerate", transactionExchangeRate);
                    purchasesTax.put("transactioncurrencysymbol", temp.getDebitNote().getCurrency().getSymbol());
                    purchasesTax.put("transactioncurrencyid", temp.getDebitNote().getCurrency().getCurrencyID());
                    purchasesTax.put(Constants.memo, temp.getDebitNote().getMemo() != null ? temp.getDebitNote().getMemo() : "");
                    
                    purchasesTax.put("noteid", temp.getDebitNote().getID());
                    purchasesTax.put("noteno", temp.getDebitNote().getDebitNoteNumber());
                    purchasesTax.put("currencyid", temp.getDebitNote().getCurrency().getCurrencyID());
                    purchasesTax.put("date", odf.format(temp.getDebitNote().getCreationDate()));
                    purchasesTax.put("includeprotax", true);
                    purchasesTax.put("personname", temp.getDebitNote().getVendor().getName());
                    purchasesTax.put("costcenterid", temp.getDebitNote().getCostcenter() == null ? "" : temp.getDebitNote().getCostcenter().getID());
                    purchasesTax.put("lasteditedby", temp.getDebitNote().getModifiedby() == null ? "" : (temp.getDebitNote().getModifiedby().getFirstName() + " " + temp.getDebitNote().getModifiedby().getLastName()));
                    purchasesTax.put(Constants.SEQUENCEFORMATID, temp.getDebitNote().getSeqformat() != null ? temp.getDebitNote().getSeqformat().getID() : "");
                    purchasesTax.put("personid", temp.getDebitNote().getVendor().getID());
                    purchasesTax.put("personname", temp.getDebitNote().getVendor().getName());
                    purchasesTax.put("inputType", temp.getDebitNote().getDntype());
                    
                    /**
                     * To calculate grand total.
                     */
                    totalcategorycost += authHandler.round(taxAmount, companyid);
                    totalgramtexcludingtax += authHandler.round(dnSalesAmt, companyid);
                    totalAmount += authHandler.round(totalAmountwithTax, companyid);
                    /**
                     * Added following key for IAF.
                     */
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        purchasesTax.put("grlineno", temp.getSrno());
                        purchasesTax.put("grproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : temp.getProduct() != null ? (!StringUtil.isNullOrEmpty(temp.getProduct().getDescription()) ? temp.getProduct().getDescription() : temp.getProduct().getName()) : "");
                        purchasesTax.put("gruen", temp.getDebitNote().getVendor() != null ? (isMalasianCompany ? temp.getDebitNote().getVendor().getCompanyRegistrationNumber() : temp.getDebitNote().getVendor().getUENNumber()) : "");
                        purchasesTax.put("transactioncurrencycode", temp.getDebitNote().getCurrency().getCurrencyCode());
                        purchasesTax.put("permit", "");
                    }

                    grPurchaseTaxjArr.put(purchasesTax);
                }
                
                /**
                 * Purchase Tax.
                 *Credit Note for Undercharged Purchase Invoice(Tax applied at global level.)
                 */
//                if (isMalasianCompany) {
                    if (isAdvanceSearch) {
                        filterParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                        filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.creditNoteSearchJson));
                    }
                    result = accInvoiceDAOobj.getCalculatedCreditNoteTax(filterParams);
                    List<CreditNote> calculatedCNTaxList = result.getEntityList();
                    if (calculatedCNTaxList != null) {
                        if (fileType.equals(Constants.isGSTAuditFile)) {
                            /**
                             * http://jira.deskera.com/browse/ERP-42115 - To
                             * show each product as separate row in audit file
                             * even when global level tax is applied.
                             */
                            accGstService.getCNUnderChargeRowsForAuditFile(requestParams, calculatedCNTaxList, grPurchaseTaxjArr);
                        } else {
                            for (CreditNote creditMemo : calculatedCNTaxList) {
                                double cnAmount = 0;
                                double taxAmount = 0;
                                double cnAmountExcludingTax = 0;
                                double cnAmountInTransactionCurrency = 0;
                                double cnTaxAmountInTransactionCurrency = 0;
                                double cnDiscountAmt=0;
                                KwlReturnObject result1 = accJournalEntryobj.getJournalEntryDetail(creditMemo.getJournalEntry().getID(), creditMemo.getJournalEntry().getCompany().getCompanyID());
                                Iterator iterator = result1.getEntityList().iterator();
                                boolean taxflag = false;
                                while (iterator.hasNext()) {
                                    JournalEntryDetail jed = (JournalEntryDetail) iterator.next();
                                    Account account = null;
                                    account = jed.getAccount();

                                    if (jed.isDebit() && account.getID().equals(taxObj.getAccount().getID())) {
                                        taxAmount += jed.getAmount();
                                        taxflag = true;
                                    }
                                    if (jed.isDebit()) {
                                        cnAmount += jed.getAmount();
                                    }

                                }
                                /*
                                 * ERP-38665 - credit note for undercharged Purchase invoice
                                 * In GST reports principal amount should be excluding Discount 
                                 */
                                Set<CreditNoteAgainstVendorGst> rowGstDetail = creditMemo.getRowsGst();
                                if (rowGstDetail != null) {
                                    for (CreditNoteAgainstVendorGst rowGst : rowGstDetail) {
                                        double cnSaleAmt = rowGst.getRate() * rowGst.getReturnQuantity();
                                        double discountValue = rowGst.getDiscount();
                                        String discountType = String.valueOf(rowGst.getDiscountispercent());
                                        if (discountType.equalsIgnoreCase(Constants.DISCOUNT_MASTER_TYPE_PERCENTAGE)) {
                                            cnDiscountAmt += (cnSaleAmt * discountValue / 100);
                                        } else {
                                            cnDiscountAmt += discountValue; //flat discount 
                                        }
                                    }
                                }
                                cnAmount = cnAmount - cnDiscountAmt;
                                //cnTxCurrAmt and cnTxCurrTaxAmt to use amount in tranaction currency as cnAmount and taxAmount can change in below operations
                                cnAmountInTransactionCurrency = cnAmount;
                                cnTaxAmountInTransactionCurrency = taxAmount;

                                String currencyid = creditMemo.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : creditMemo.getJournalEntry().getCurrency().getCurrencyID();
                                if (taxflag) {                               
                                    /*
                                    *ERP-39555 : GST Currency Rate in CN Overcharge/Undercharge when Country currency is SGD and base currency is other than SGD 
                                    *If GST Currency rate not given then consider consider external currency rate on the basis of date.
                                    */
                                    if (!gcurrencyid.equals(Constants.SGDID) && requestParams.containsKey("gstFlag")) {
                                        if (!currencyid.equals(Constants.SGDID)) { //If transaction id is SGD then value for cnSalesAmt and taxAmount is in SGD are in SGD
                                            //If transaction Currency is not SGD, then convert in SGD
                                            if (creditMemo.getGstCurrencyRate() != 0) {
                                                cnAmount = cnAmount * creditMemo.getGstCurrencyRate();
                                                taxAmount = taxAmount * creditMemo.getGstCurrencyRate();

                                            } else {
                                                //If gstCurrencyRate is not given by user, then convert transaction currency to base currency and base currency to SGD
                                                KwlReturnObject CNAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, cnAmount, currencyid, Constants.SGDID, creditMemo.getJournalEntry().getEntryDate(), 0);
                                                if (CNAmt != null) {
                                                    cnAmount = (Double) CNAmt.getEntityList().get(0);
                                                }
                                                KwlReturnObject CNTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmount, currencyid, Constants.SGDID, creditMemo.getJournalEntry().getEntryDate(), 0);
                                                if (CNTaxAmt != null) {
                                                    taxAmount = (Double) CNTaxAmt.getEntityList().get(0);
                                                }
                                            }
                                        }

                                    } else {
                                        KwlReturnObject bAmt1 = null;
    //                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, cnAmount, currencyid, creditMemo.getJournalEntry().getEntryDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, cnAmount, currencyid, creditMemo.getCreationDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                                        if (bAmt1 != null) {
                                            cnAmount = (Double) bAmt1.getEntityList().get(0);
                                        }
    //                                bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, creditMemo.getJournalEntry().getEntryDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmount, currencyid, creditMemo.getCreationDate(), creditMemo.getJournalEntry().getExternalCurrencyRate());
                                        taxAmount = (Double) bAmt1.getEntityList().get(0);
                                    }
                                    cnAmount = authHandler.round(cnAmount, companyid);    
                                    taxAmount = authHandler.round(taxAmount, companyid);
                                    cnAmountExcludingTax = cnAmount - taxAmount;

                                    /*
                                     * If base currency is not SGD and country currency is SGD, then calculated transaction rate else considered external currency rate from journal entry.
                                     */
                                    double transactionExchangeRate = 0;
                                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                                        transactionExchangeRate = cnAmountInTransactionCurrency / cnAmount;
                                    } else {
                                        transactionExchangeRate = creditMemo.getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : creditMemo.getJournalEntry().getExternalCurrencyRate();
                                    }
                                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);

                                    /**
                                     * To calculate sub total.
                                     */
                                    saleAmount += authHandler.round(cnAmount, companyid);
                                    saleAmountExcludingTax += authHandler.round(cnAmountExcludingTax, companyid);
                                    taxableAmount += authHandler.round(taxAmount, companyid);


                                    purchasesTax = new JSONObject();
                                    purchasesTax.put("type", "Credit Note");
                                    purchasesTax.put("noteid", creditMemo.getID());
                                    purchasesTax.put("jeid", creditMemo.getJournalEntry().getID());
                                    purchasesTax.put("jedate", odf.format(creditMemo.getJournalEntry().getEntryDate()));
    //                                purchasesTax.put("grdate", sdf.format(new Date(creditMemo.getJournalEntry().getEntryDate().getTime())));
                                    purchasesTax.put("grdate", sdf.format(new Date(creditMemo.getCreationDate().getTime())));
                                    purchasesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                                    purchasesTax.put("grname", creditMemo.getVendor().getName());
                                    purchasesTax.put("grno", creditMemo.getCreditNoteNumber());
                                    purchasesTax.put("gramt", authHandler.round(cnAmount, companyid));
                                    purchasesTax.put("gramtexcludingtax", authHandler.round(cnAmountExcludingTax, companyid));
                                    purchasesTax.put("journalEntryNo", creditMemo.getJournalEntry().getEntryNumber());
                                    purchasesTax.put("grtaxamount", authHandler.round(taxAmount, companyid));
                                    //originaltaxamount and originalamountincludingtax to show amount in transaction currency in report
                                    purchasesTax.put("originaltaxamount", authHandler.round(cnTaxAmountInTransactionCurrency, companyid));
                                    purchasesTax.put("originalamountincludingtax", authHandler.round(cnAmountInTransactionCurrency, companyid));
                                    purchasesTax.put("transactionexchangerate", transactionExchangeRate);
                                    purchasesTax.put("transactioncurrencysymbol", creditMemo.getCurrency().getSymbol());
                                    purchasesTax.put("transactioncurrencyid", creditMemo.getCurrency().getCurrencyID());
                                    purchasesTax.put(Constants.memo, creditMemo.getMemo() != null ? creditMemo.getMemo() : "");

                                    /**
                                     * To calculate grand total.
                                     */
                                    totalcategorycost += authHandler.round(taxAmount, companyid);
                                    totalgramtexcludingtax += authHandler.round(cnAmountExcludingTax, companyid);
                                    totalAmount += authHandler.round(cnAmount, companyid);
                                    /**
                                     * Added following key for IAF.
                                     */
                                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                                        purchasesTax.put("grlineno", 1);
                                        purchasesTax.put("grproduct", "");
                                        purchasesTax.put("gruen", creditMemo.getVendor() != null ? (isMalasianCompany ? creditMemo.getVendor().getCompanyRegistrationNumber() : creditMemo.getVendor().getUENNumber()) : "");
                                        purchasesTax.put("transactioncurrencycode", creditMemo.getCurrency().getCurrencyCode());
                                        purchasesTax.put("permit", "");
                                    }

                                    grPurchaseTaxjArr.put(purchasesTax);
                                }
                            }
                        }
                    }
//                }
                 /**
                 *Purchase Tax.  
                 *Cal Tax for Expense GR Details[PS]
                 */   
                
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.purchaseInvoiceSearchJson));
                }
                result = accGoodsReceiptDAOObj.getCalculatedExpenseGRDtlTax(filterParams);
                List<ExpenseGRDetail> expList = result.getEntityList();
                if (expList != null) {
                    for (ExpenseGRDetail temp : expList) {
                        double rowTaxAmount = 0;
                        double gramtexcludingtax = 0;
                        double gramtax = 0;
                        double ramount = 0;
                        double lineLevelTermAmount = temp.getLineLevelTermAmount();
                        rowTaxAmount = temp.getRowTaxAmount();
                        double rdisc = 0;
                        double ramountExcludingGst = 0;
                        rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
                        if(temp.getGoodsReceipt().isGstIncluded()){
                            ramount = temp.getRateExcludingGst();
                        } else {
                            ramount = temp.getRate();
                            ramount -= rdisc;
                        }
                        ramountExcludingGst  = ramount;
                        /*
                         * gstFlag = Country is Singapore and
                         * Company currency is not SGD
                         */
                        if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                            if (!temp.getGoodsReceipt().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
                                KwlReturnObject invAmtConverted = null;
                                KwlReturnObject taxAmtConverted = null;
                                if (temp.getGstCurrencyRate() != 0) {
                                    ramount = ramount * temp.getGstCurrencyRate();
                                    ramount = authHandler.round(ramount, companyid);
                                    if (rowTaxAmount != 0) {
                                        rowTaxAmount = temp.getRowTaxAmount() * temp.getGstCurrencyRate();
                                        rowTaxAmount = authHandler.round(rowTaxAmount, companyid);
                                    }
                                } else {
//                                    invAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, ramount, gcurrencyid, Constants.SGDID, temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGstCurrencyRate());
                                    invAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, ramount, gcurrencyid, Constants.SGDID, temp.getGoodsReceipt().getCreationDate(), temp.getGstCurrencyRate());
                                    ramount = (Double) invAmtConverted.getEntityList().get(0);
                                    if (rowTaxAmount != 0) {
//                                        taxAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, rowTaxAmount, gcurrencyid, Constants.SGDID, temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGstCurrencyRate());
                                        taxAmtConverted = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, rowTaxAmount, gcurrencyid, Constants.SGDID, temp.getGoodsReceipt().getCreationDate(), temp.getGstCurrencyRate());
                                        rowTaxAmount = (Double) taxAmtConverted.getEntityList().get(0);
                                    }
                                }
                            }
                        } else {
                            KwlReturnObject bAmt = null;
                            KwlReturnObject baseAmt = null;
//                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, ramount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            ramount = (Double) bAmt.getEntityList().get(0);
                            if (rowTaxAmount != 0) {
//                                baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getJournalEntry().getEntryDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rowTaxAmount, temp.getGoodsReceipt().getCurrency().getCurrencyID(), temp.getGoodsReceipt().getCreationDate(), temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate());
                                rowTaxAmount = (Double) baseAmt.getEntityList().get(0);
                            }
                        }
                        
                        ramount = authHandler.round(ramount, companyid);//Amount without tax.
                        rowTaxAmount = authHandler.round(rowTaxAmount, companyid);//Tax Amount.
                        double totalAmountwithTax = ramount + rowTaxAmount;//Amount with tax.
                        gramtexcludingtax = authHandler.round(ramount, companyid);
                        gramtax = authHandler.round(rowTaxAmount, companyid);
                        /**
                         * If type of tax account is credit & purchase tax then
                         * amount should be negative Refer - ERM-263.
                         */
                        if (!temp.isIsdebit()) {
                            gramtexcludingtax = -gramtexcludingtax;
                            totalAmountwithTax = -totalAmountwithTax;
                            gramtax = -gramtax;
                            rowTaxAmount = -rowTaxAmount;
                        }
                        /**
                         * To calculate sub total.
                         */
                        saleAmount += authHandler.round(totalAmountwithTax, companyid);
                        saleAmountExcludingTax += authHandler.round(gramtexcludingtax, companyid);
                        taxableAmount += authHandler.round(rowTaxAmount, companyid);
                        
                        double transactionExchangeRate = 0;
                        if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                            transactionExchangeRate = ramountExcludingGst / ramount;
                        } else {
                            transactionExchangeRate = temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getGoodsReceipt().getJournalEntry().getExternalCurrencyRate();
                        }
                        transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                        purchasesTax = new JSONObject();
                        purchasesTax.put("type", "Purchase Invoice");
                        purchasesTax.put(Constants.billid, temp.getGoodsReceipt().getID());
                        purchasesTax.put("jeid", temp.getGoodsReceipt().getJournalEntry().getID());
                        purchasesTax.put("jedate", odf.format(temp.getGoodsReceipt().getJournalEntry().getEntryDate()));
//                        purchasesTax.put("grdate", sdf.format(new Date(temp.getGoodsReceipt().getJournalEntry().getEntryDate().getTime())));
                        purchasesTax.put("grdate", sdf.format(new Date(temp.getGoodsReceipt().getCreationDate().getTime())));
                        purchasesTax.put("grname", temp.getGoodsReceipt().getVendor().getName());
                        purchasesTax.put("grno", temp.getGoodsReceipt().getGoodsReceiptNumber());
                        purchasesTax.put("gramt", authHandler.round(totalAmountwithTax, companyid));
                        purchasesTax.put("originalamountincludingtax", authHandler.round(totalAmountwithTax * transactionExchangeRate, companyid));
                        purchasesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                        purchasesTax.put("gramtexcludingtax", authHandler.round(gramtexcludingtax, companyid));
                        purchasesTax.put("journalEntryNo", temp.getGoodsReceipt().getJournalEntry().getEntryNumber());
                        purchasesTax.put("grtaxamount", gramtax);//purchasesTax.put("grtaxamount", (ramount*rowTaxPercent/100));
                        purchasesTax.put("originaltaxamount", authHandler.round((rowTaxAmount * transactionExchangeRate), companyid));
                        purchasesTax.put("transactionexchangerate", transactionExchangeRate);
                        purchasesTax.put("transactioncurrencysymbol", temp.getGoodsReceipt().getCurrency().getSymbol());
//                        purchasesTax.put("isDebit", temp.isIsdebit());
                        purchasesTax.put("transactioncurrencyid", temp.getGoodsReceipt().getCurrency().getCurrencyID());
                        purchasesTax.put(Constants.memo, temp.getGoodsReceipt().getMemo() != null ? temp.getGoodsReceipt().getMemo() : "");
                        
                        /**
                         * To calculate grand total.
                         */
                        totalcategorycost += authHandler.round(gramtax, companyid);
                        totalgramtexcludingtax += authHandler.round(gramtexcludingtax, companyid);
                        totalAmount += authHandler.round(totalAmountwithTax, companyid);
                        /**
                         * Added following key for IAF.
                         */
                        if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                            purchasesTax.put("grlineno", temp.getSrno());
                            purchasesTax.put("grproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : temp.getAccount() != null ? temp.getAccount().getName() : "");
                            purchasesTax.put("gruen", temp.getGoodsReceipt().getVendor() != null ? (isMalasianCompany ? temp.getGoodsReceipt().getVendor().getCompanyRegistrationNumber() : temp.getGoodsReceipt().getVendor().getUENNumber()) : "");
                            purchasesTax.put("transactioncurrencycode", temp.getGoodsReceipt().getCurrency().getCurrencyCode());
                            purchasesTax.put("permit", "");
                        }

                        grPurchaseTaxjArr.put(purchasesTax);
                    }
                }

                /**
                 * Purchase Side.
                 * *******************************Make Payment For Otherwise
                 * Tax Calculation And For Against GL
                 * Code*******************************
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.makePaymentSearchJson));
                }
                filterParams.put("showDishonouredPayment", true);
                KwlReturnObject rpResult = accVendorPaymentDao.getCalculatedMakePaymentOtherwiseTax(filterParams);
                Iterator rpIt = rpResult.getEntityList().iterator();
//                double madeAmount = 0;
//                double madeTaxableAmount = 0;
//                double madeTaxCollected = 0;
                while (rpIt.hasNext()) {
                    double rptAmtDue = 0;
                    double taxAmount = 0;
                    double originalTaxAmount = 0;
                    PaymentDetailOtherwise temp = (PaymentDetailOtherwise) rpIt.next();
                    double rptSalesAmt = temp.getAmount();
                    double originalRptSalesAmt = temp.getAmount();
                    
                    if (temp.getTax() != null) {
                        taxAmount = temp.getTaxamount();
                        originalTaxAmount = taxAmount;
                    }                                                                                
                    
                    KwlReturnObject bAmt = null;
                    if (requestParams.containsKey("gstFlag")) {
                        if (!temp.getPayment().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rptSalesAmt, temp.getPayment().getCurrency().getCurrencyID(), Constants.SGDID, temp.getPayment().getJournalEntry().getEntryDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rptSalesAmt, temp.getPayment().getCurrency().getCurrencyID(), Constants.SGDID, temp.getPayment().getCreationDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                        }
                    } else {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rptSalesAmt, temp.getPayment().getCurrency().getCurrencyID(), temp.getPayment().getJournalEntry().getEntryDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rptSalesAmt, temp.getPayment().getCurrency().getCurrencyID(), temp.getPayment().getCreationDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                    }
                    if (bAmt != null) {
                        rptSalesAmt = (Double) bAmt.getEntityList().get(0);
                    }
                    KwlReturnObject bAmt1 = null;
                    if (requestParams.containsKey("gstFlag")) {
                        if (!temp.getPayment().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
//                            bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getPayment().getCurrency().getCurrencyID(), Constants.SGDID, temp.getPayment().getJournalEntry().getEntryDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getPayment().getCurrency().getCurrencyID(), Constants.SGDID, temp.getPayment().getCreationDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                        }
                    } else {
//                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getPayment().getCurrency().getCurrencyID(), temp.getPayment().getJournalEntry().getEntryDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getPayment().getCurrency().getCurrencyID(), temp.getPayment().getCreationDate(), temp.getPayment().getJournalEntry().getExternalCurrencyRate());
                    }
                    if (bAmt1 != null) {
                        taxAmount = (Double) bAmt1.getEntityList().get(0);
                    }
                    
                    rptSalesAmt = authHandler.round(rptSalesAmt, companyid);
                    taxAmount = authHandler.round(taxAmount, companyid);
//                    madeAmount += authHandler.round(rptSalesAmt, companyid);//505*100=(100+p)x
//                    madeTaxableAmount += authHandler.round((rptSalesAmt - (taxAmount)), companyid);
//                    if (!temp.getCustomerEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
//                        rptAmtDue = accInvoiceCommon.getBillingAmountDue(requestParams, temp);
//                    }
//                    if (rptAmtDue == 0) {
//                        madeTaxCollected += authHandler.round((rptSalesAmt - (taxAmount)), companyid);
//                    }
                    double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = originalRptSalesAmt / rptSalesAmt;
                    } else {
                        transactionExchangeRate = temp.getPayment().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getPayment().getJournalEntry().getExternalCurrencyRate();
                    }
                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        taxAmount += rptSalesAmt;
                        originalTaxAmount += originalRptSalesAmt;
                        originalRptSalesAmt = 0;        
                        rptSalesAmt = 0;

                    }

                    double totalAmountwithTax = 0.0;
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        totalAmountwithTax = taxAmount;
                    } else {
                        totalAmountwithTax = rptSalesAmt + authHandler.round((taxAmount), companyid);
                    }
                    
                    if (!temp.isIsdebit()) {
                        /**
                         * If type of tax account is credit & purchase tax then
                         * amount should be negative Refer - ERM-263.
                         */
                        taxAmount = -taxAmount;//Tax Amount in base.
                        rptSalesAmt = -rptSalesAmt;//Amount without tax in base.
                        totalAmountwithTax = -totalAmountwithTax;//Total Amount with tax in base.
                        
                        originalRptSalesAmt = -originalRptSalesAmt;
                        originalTaxAmount = -originalTaxAmount;
                    }
                    /**
                     * To calculate subtotal.
                     */
                    saleAmount += authHandler.round((rptSalesAmt + taxAmount), companyid);
                    saleAmountExcludingTax += authHandler.round(rptSalesAmt, companyid);
                    taxableAmount += authHandler.round(taxAmount, companyid);                
                    
                    purchasesTaxBilling = new JSONObject();
                    purchasesTaxBilling.put("type", "Payment Made");
                    purchasesTaxBilling.put(Constants.billid, temp.getPayment().getID());
                    purchasesTaxBilling.put("jeid", temp.getPayment().getJournalEntry().getID());
                    purchasesTaxBilling.put("jedate", odf.format(temp.getPayment().getJournalEntry().getEntryDate()));
//                    purchasesTaxBilling.put("grdate", sdf.format(new Date(temp.getPayment().getJournalEntry().getEntryDate().getTime())));
                    purchasesTaxBilling.put("grdate", sdf.format(new Date(temp.getPayment().getCreationDate().getTime())));
                    purchasesTaxBilling.put("grname", temp.getAccount().getName());
                    purchasesTaxBilling.put("grno", temp.getPayment().getPaymentNumber());
                    purchasesTaxBilling.put("gramtexcludingtax", rptSalesAmt);
                    purchasesTaxBilling.put("gramt", authHandler.round(totalAmountwithTax, companyid));
                    purchasesTaxBilling.put("originalamountincludingtax", authHandler.round(originalRptSalesAmt + originalTaxAmount, companyid));
                    purchasesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    purchasesTaxBilling.put("journalEntryNo", temp.getPayment().getJournalEntry().getEntryNumber());
                    purchasesTaxBilling.put("grtaxamount", authHandler.round(taxAmount, companyid));
                    purchasesTaxBilling.put("originaltaxamount", authHandler.round(originalTaxAmount, companyid));
                    purchasesTaxBilling.put("transactionexchangerate", transactionExchangeRate);
                    purchasesTaxBilling.put("transactioncurrencysymbol", temp.getPayment().getCurrency().getSymbol());
                    purchasesTaxBilling.put("transactioncurrencyid", temp.getPayment().getCurrency().getCurrencyID());
                    purchasesTaxBilling.put(Constants.memo, temp.getPayment().getMemo() != null ? temp.getPayment().getMemo() : "");

                    /**
                     * Added following key for IAF.
                     */
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        purchasesTaxBilling.put("grlineno", temp.getSrNoForRow());
                        purchasesTaxBilling.put("grproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : temp.getAccount() != null ? temp.getAccount().getName() : "");
                        purchasesTaxBilling.put("gruen", temp.getPayment().getVendor() != null ? (isMalasianCompany ? temp.getPayment().getVendor().getCompanyRegistrationNumber() : temp.getPayment().getVendor().getUENNumber()) : "");
                        purchasesTaxBilling.put("transactioncurrencycode", temp.getPayment().getCurrency().getCurrencyCode());
                        purchasesTaxBilling.put("permit", "");
                    }
                    
                    grPurchaseTaxjArr.put(purchasesTaxBilling);
                    
                    /**
                     * To calculate grand total.
                     */
                    totalcategorycost += authHandler.round(taxAmount, companyid);
                    totalgramtexcludingtax += authHandler.round(rptSalesAmt, companyid);
                    totalAmount += authHandler.round(totalAmountwithTax, companyid);

                    if (temp.getPayment().isIsDishonouredCheque()) {
                        /**
                         * This block return the reverse entry of payment if Cheque is Dishonoured
                         * Case 1 - If type of tax account is debit & sales tax then amount should be positive only for dishonoured cheque payment
                         * Case 2 - If type of tax account is credit & sales tax then amount should be negative only for dishonoured payment
                         * Please Refer - ERM-263.
                         */
                        taxAmount = -taxAmount;
                        rptSalesAmt = -rptSalesAmt;
                        totalAmountwithTax = -totalAmountwithTax;
                        originalRptSalesAmt = -originalRptSalesAmt;
                        originalTaxAmount = -originalTaxAmount;

                        /**
                         * To calculate subtotal.
                         */
                        saleAmount += authHandler.round((rptSalesAmt + taxAmount), companyid);
                        saleAmountExcludingTax += authHandler.round(rptSalesAmt, companyid);
                        taxableAmount += authHandler.round(taxAmount, companyid);
                        
//                        double dishonouredExchangeRate = temp.getPayment().getDisHonouredChequeJe().getExternalCurrencyRate() == 0 ? 1 : temp.getPayment().getDisHonouredChequeJe().getExternalCurrencyRate();
                        purchasesTaxBilling = new JSONObject();
                        purchasesTaxBilling.put("type", "Payment Made");
                        purchasesTaxBilling.put(Constants.billid, temp.getPayment().getID());
                        purchasesTaxBilling.put("jeid", temp.getPayment().getDisHonouredChequeJe().getID());
                        purchasesTaxBilling.put("jedate", odf.format(temp.getPayment().getDisHonouredChequeJe().getEntryDate()));
                        purchasesTaxBilling.put("grdate", sdf.format(new Date(temp.getPayment().getCreationDate().getTime())));
                        purchasesTaxBilling.put("grname", temp.getAccount().getName());
                        purchasesTaxBilling.put("grno", temp.getPayment().getPaymentNumber());
                        purchasesTaxBilling.put("gramtexcludingtax", rptSalesAmt);
                        purchasesTaxBilling.put("gramt", authHandler.round(totalAmountwithTax, companyid));
                        purchasesTaxBilling.put("originalamountincludingtax", authHandler.round(originalRptSalesAmt + originalTaxAmount, companyid));
                        purchasesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                        purchasesTaxBilling.put("journalEntryNo", temp.getPayment().getDisHonouredChequeJe().getEntryNumber());
                        purchasesTaxBilling.put("grtaxamount", authHandler.round(taxAmount, companyid));
                        purchasesTaxBilling.put("originaltaxamount", authHandler.round(originalTaxAmount, companyid));
                        purchasesTaxBilling.put("transactionexchangerate", transactionExchangeRate);
                        purchasesTaxBilling.put("transactioncurrencysymbol", temp.getPayment().getCurrency().getSymbol());
                        purchasesTaxBilling.put("transactioncurrencyid", temp.getPayment().getCurrency().getCurrencyID());
                        purchasesTaxBilling.put(Constants.memo, temp.getPayment().getDisHonouredChequeJe().getMemo() != null ? temp.getPayment().getDisHonouredChequeJe().getMemo() : "");

                        /**
                         * Added following key for IAF.
                         */
                        if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                            purchasesTaxBilling.put("grlineno", temp.getSrNoForRow());
                            purchasesTaxBilling.put("grproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : temp.getAccount() != null ? temp.getAccount().getName() : "");
                            purchasesTaxBilling.put("gruen", temp.getPayment().getVendor() != null ? (isMalasianCompany ? temp.getPayment().getVendor().getCompanyRegistrationNumber() : temp.getPayment().getVendor().getUENNumber()) : "");
                            purchasesTaxBilling.put("transactioncurrencycode", temp.getPayment().getCurrency().getCurrencyCode());
                            purchasesTaxBilling.put("permit", "");
                        }
                        grPurchaseTaxjArr.put(purchasesTaxBilling);
                        
                        /**
                         * To calculate grand total.
                         */
                        totalcategorycost += authHandler.round(taxAmount, companyid);
                        totalgramtexcludingtax += authHandler.round(rptSalesAmt, companyid);
                        totalAmount += authHandler.round(totalAmountwithTax, companyid);
                    }
                    
                    //
//                     purchasesTax.put("grdate", temp.getGoodsReceipt().getJournalEntry().getEntryDate().getTime());
//                         purchasesTax.put("grname", temp.getGoodsReceipt().getVendor().getName());
//                         purchasesTax.put("grno", temp.getGoodsReceipt().getGoodsReceiptNumber());
//                         purchasesTax.put("gramt", (grAmount));
//                         purchasesTax.put("journalEntryNo", temp.getGoodsReceipt().getJournalEntry().getEntryNumber());
//                         purchasesTax.put("grtaxamount", (ramount*rowTaxPercent/100));
//                         totalcategorycost+=(ramount*rowTaxPercent/100);
//                         totalAmount+=(grAmount);
                }
                
                /**
                 * Purchase Tax.
                 * Receive Payment For Otherwise
                 * Tax Calculation And For Against GL Code
                 * 
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.receivePaymentSearchJson));
                }
                rpResult = accReceiptDao.getCalculatedReceivePaymentOtherwiseTax(filterParams);
                rpIt = rpResult.getEntityList().iterator();
                double receiveAmount = 0;
                double receivedTaxableAmount = 0;
                double taxableAmountC = 0;
                double receivedTaxCollected = 0;
                while (rpIt.hasNext()) {
                    double taxPercent = 0;
                    double rptAmtDue = 0;
                    double taxAmount = 0;
                    double originalTaxAmount = 0;
                    ReceiptDetailOtherwise temp = (ReceiptDetailOtherwise) rpIt.next();
                    double rptSalesAmt = (Double) temp.getAmount();
                    double originalRptSalesAmt = (Double) temp.getAmount(); //Amount in transaction currency
                    
                    if (temp.getTax() != null) {
                        taxAmount = temp.getTaxamount();
                        originalTaxAmount = taxAmount; // Amount In Transaction Currency
                    }
                    
                    KwlReturnObject bAmt = null;
                    if (requestParams.containsKey("gstFlag")) {
                        if (!temp.getReceipt().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rptSalesAmt, temp.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, rptSalesAmt, temp.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        }
                    } else {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rptSalesAmt, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, rptSalesAmt, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                    }
                    if (bAmt != null) {
                        rptSalesAmt = (Double) bAmt.getEntityList().get(0);
                    }
                    rptSalesAmt = authHandler.round(rptSalesAmt, companyid);

                    if (temp.getTax() != null) {
//                        KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getReceipt().getJournalEntry().getEntryDate(), temp.getTax().getID());
                        KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getReceipt().getCreationDate(), temp.getTax().getID());
                        taxPercent = (Double) perresult.getEntityList().get(0);
                        taxAmount = authHandler.round((temp.getTaxamount()), companyid);
                    }
                    KwlReturnObject bAmt1 = null;
                    if (requestParams.containsKey("gstFlag")) {
                        if (!temp.getReceipt().getCurrency().getCurrencyID().equals(Constants.SGDID)) {
//                            bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), Constants.SGDID, temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        }
                    } else {
//                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getJournalEntry().getEntryDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getReceipt().getCurrency().getCurrencyID(), temp.getReceipt().getCreationDate(), temp.getReceipt().getJournalEntry().getExternalCurrencyRate());
                    }
                    if (bAmt1 != null) {
                        taxAmount = (Double) bAmt1.getEntityList().get(0);
                    }

                    
                    /*
                     * If base currency is not SGD and country currency is SGD, then calculated transaction rate else considered external currency rate from journal entry.
                     */
                    
                    double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = originalRptSalesAmt / rptSalesAmt;
                    } else {
                        transactionExchangeRate = temp.getReceipt().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getReceipt().getJournalEntry().getExternalCurrencyRate();
                    }
                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                    
                    
                    /*
                    * If account is tax account then do not show principal amount, only show tax amount.Principal amount in this case is 0.
                    */
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        taxAmount += rptSalesAmt;
                        originalTaxAmount = originalRptSalesAmt;
                        originalRptSalesAmt = 0;
                        rptSalesAmt = 0;
                    }

                    double totalAmountwithTax = 0.0;
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        totalAmountwithTax = authHandler.round((taxAmount), companyid);
                    } else {
                        totalAmountwithTax = authHandler.round((rptSalesAmt + (taxAmount)), companyid);
                    }
                    receiveAmount += authHandler.round(rptSalesAmt, companyid);//505*100=(100+p)x
                    receivedTaxableAmount += authHandler.round((rptSalesAmt - (authHandler.round(taxAmount, companyid))), companyid);
//                    if (!temp.getCustomerEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
//                        rptAmtDue = accInvoiceCommon.getBillingAmountDue(requestParams, temp);
//                    }
                    if (rptAmtDue == 0) {
                        receivedTaxCollected += authHandler.round((rptSalesAmt - (authHandler.round(taxAmount, companyid))), companyid);
                    }
                    
                    if (!temp.isIsdebit()) {
                        /**
                         * If type of tax account is credit & purchase tax then
                         * amount should be negative Refer - ERM-263.
                         */
                        taxAmount = -taxAmount;
                        rptSalesAmt = -rptSalesAmt;
                        originalRptSalesAmt = - originalRptSalesAmt;
                        originalTaxAmount = -originalTaxAmount;
                        totalAmountwithTax = -totalAmountwithTax;
                    }
                    /**
                     * To calculate subtotal.
                     */
                    saleAmount += authHandler.round((rptSalesAmt + taxAmount), companyid);
                    saleAmountExcludingTax += authHandler.round(rptSalesAmt, companyid);
                    taxableAmount += authHandler.round(taxAmount, companyid);

                    purchasesTaxBilling = new JSONObject();
                    purchasesTaxBilling.put(Constants.billid, temp.getReceipt().getID());
                    purchasesTaxBilling.put("type", "Payment Received");
                    purchasesTaxBilling.put("jeid", temp.getReceipt().getJournalEntry().getID());
                    purchasesTaxBilling.put("jedate", odf.format(temp.getReceipt().getJournalEntry().getEntryDate()));
//                    purchasesTaxBilling.put("grdate", sdf.format(new Date(temp.getReceipt().getJournalEntry().getEntryDate().getTime())));
                    purchasesTaxBilling.put("grdate", sdf.format(new Date(temp.getReceipt().getCreationDate().getTime())));
                    purchasesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    purchasesTaxBilling.put("grname", temp.getAccount().getName());
                    purchasesTaxBilling.put("grno", temp.getReceipt().getReceiptNumber());
                    purchasesTaxBilling.put("gramt", authHandler.round(totalAmountwithTax, companyid));
                    purchasesTaxBilling.put("gramtexcludingtax", authHandler.round(rptSalesAmt, companyid));
                    purchasesTaxBilling.put("journalEntryNo", temp.getReceipt().getJournalEntry().getEntryNumber());
                    purchasesTaxBilling.put("grtaxamount", authHandler.round(taxAmount, companyid));
                    purchasesTaxBilling.put("originaltaxamount", authHandler.round(originalTaxAmount, companyid));
                    purchasesTaxBilling.put("originalamountincludingtax", authHandler.round(originalRptSalesAmt+originalTaxAmount, companyid));                    
                    purchasesTaxBilling.put("transactionexchangerate", transactionExchangeRate);
                    purchasesTaxBilling.put("transactioncurrencysymbol", temp.getReceipt().getCurrency().getSymbol());
                    purchasesTaxBilling.put("transactioncurrencyid", temp.getReceipt().getCurrency().getCurrencyID());
                    purchasesTaxBilling.put(Constants.memo, temp.getReceipt().getMemo() != null ? temp.getReceipt().getMemo() : "");

                    /**
                     * Added following key for IAF.
                     */
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        purchasesTaxBilling.put("grlineno", temp.getSrNoForRow());
                        purchasesTaxBilling.put("grproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : temp.getAccount() != null ? temp.getAccount().getName() : "");
                        purchasesTaxBilling.put("gruen", temp.getReceipt().getCustomer() != null ? (isMalasianCompany ? temp.getReceipt().getCustomer().getCompanyRegistrationNumber() : temp.getReceipt().getCustomer().getUENNumber()) : "");
                        purchasesTaxBilling.put("transactioncurrencycode", temp.getReceipt().getCurrency().getCurrencyCode());
                        purchasesTaxBilling.put("permit", "");
                    }
                    grPurchaseTaxjArr.put(purchasesTaxBilling);

                    /**
                     * To calculate grand total.
                     */
                    totalcategorycost += authHandler.round(taxAmount, companyid);
                    totalgramtexcludingtax += authHandler.round(rptSalesAmt, companyid);
                    totalAmount += authHandler.round(totalAmountwithTax, companyid);

                    if (temp.getReceipt().isIsDishonouredCheque()) {
                        /**
                         * This block return the reverse entry of payment if Cheque is Dishonoured
                         * Case 1 - If type of tax account is debit & sales tax then amount should be positive only for dishonoured cheque payment
                         * Case 2 - If type of tax account is credit & sales tax then amount should be negative only for dishonoured cheque payment
                         * Please Refer - ERM-263.
                         */
                        taxAmount = -taxAmount;
                        rptSalesAmt = -rptSalesAmt;
                        totalAmountwithTax = -totalAmountwithTax;
                        originalRptSalesAmt = -originalRptSalesAmt;
                        originalTaxAmount = -originalTaxAmount;

                        /**
                         * To calculate subtotal.
                         */
                        saleAmount += authHandler.round((rptSalesAmt + taxAmount), companyid);
                        saleAmountExcludingTax += authHandler.round(rptSalesAmt, companyid);
                        taxableAmount += authHandler.round(taxAmount, companyid);

                        purchasesTaxBilling = new JSONObject(purchasesTaxBilling.toString());
                        purchasesTaxBilling.put("jedate", odf.format(temp.getReceipt().getDisHonouredChequeJe().getEntryDate()));
                        purchasesTaxBilling.put("gramt", authHandler.round(totalAmountwithTax, companyid));
                        purchasesTaxBilling.put("gramtexcludingtax", authHandler.round(rptSalesAmt, companyid));
                        purchasesTaxBilling.put("grtaxamount", authHandler.round(taxAmount, companyid));
                        purchasesTaxBilling.put("originaltaxamount", authHandler.round(originalTaxAmount, companyid));
                        purchasesTaxBilling.put("originalamountincludingtax", authHandler.round(originalRptSalesAmt+originalTaxAmount, companyid));
                        purchasesTaxBilling.put(Constants.memo, temp.getReceipt().getDisHonouredChequeJe().getMemo() != null ? temp.getReceipt().getDisHonouredChequeJe().getMemo() : "");
                        grPurchaseTaxjArr.put(purchasesTaxBilling);
                        /**
                         * To calculate grand total.
                         */
                        totalcategorycost += authHandler.round(taxAmount, companyid);
                        totalgramtexcludingtax += authHandler.round(rptSalesAmt, companyid);
                        totalAmount += authHandler.round(totalAmountwithTax, companyid);
                    }
                }
                /**
                 * Purchase Tax.
                 * *******************************Debit Note Otherwise Tax
                 * Calculation *******************************
                 */
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.debitNoteSearchJson));
                }
                KwlReturnObject cnResult = accVendorPaymentDao.getCalculatedDebitNoteOtherwiseTax(filterParams);
                Iterator dnIt = cnResult.getEntityList().iterator();
                double dnAmount = 0;
                double dnTaxableAmount = 0;
                double dnTaxCollected = 0;
                while (dnIt.hasNext()) {
                    double dnAmtDue = 0;
                    double taxAmount = 0;
                    double originalTaxAmount = 0;
                    DebitNoteTaxEntry temp = (DebitNoteTaxEntry) dnIt.next();
                    double cnSalesAmt=0.0;
                    double originalCnSalesAmt=0.0;
                    if(!temp.getDebitNote().isIncludingGST()){
                        cnSalesAmt = (Double) temp.getAmount();
                    }else{
                        cnSalesAmt = (Double) temp.getRateIncludingGst();
                    }
                    originalCnSalesAmt = cnSalesAmt;
//                    double cnSalesAmt = (Double) temp.getAmount();
                    KwlReturnObject bAmt;
                    /*
                     * gstFlag = Country is Singapore
                     */ 
                    if (requestParams.containsKey("gstFlag")) {
                        //(ERP-8222) && check is for if country is Singapore then no need to convert it again in SGD.
                        if (temp.getGstCurrencyRate() != 0 && (!temp.getDebitNote().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID))) {//to check if the GoodsReceipt has external GST rate when country is Singapore
                            cnSalesAmt = originalCnSalesAmt*temp.getGstCurrencyRate();
                            cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                        } else if (!temp.getDebitNote().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID)){
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, cnSalesAmt, temp.getDebitNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getDebitNote().getJournalEntry().getEntryDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, cnSalesAmt, temp.getDebitNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                            cnSalesAmt = (Double) bAmt.getEntityList().get(0);
                            cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                        }
                    } else {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getJournalEntry().getEntryDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                        cnSalesAmt = (Double) bAmt.getEntityList().get(0);
                        cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                    }                    
                    if (temp.getTax() != null) {

                        taxAmount = temp.getTaxamount();
                        originalTaxAmount = taxAmount;
                        KwlReturnObject bTaxAmt;
                        /*
                         * gstFlag = Country is Singapore
                         */ 
                        if (requestParams.containsKey("gstFlag")) {
                            //(ERP-8222) && check is for if country is Singapore then no need to convert it again in SGD.
                            if (temp.getGstCurrencyRate() != 0 && (!temp.getDebitNote().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID))) {//to check if the GoodsReceipt has external GST rate when country is Singapore
                                taxAmount = originalTaxAmount*temp.getGstCurrencyRate();
                                taxAmount = authHandler.round(taxAmount, companyid);
                            } else if (!temp.getDebitNote().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID)){
//                                bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getDebitNote().getJournalEntry().getEntryDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                                bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                                taxAmount = (Double) bTaxAmt.getEntityList().get(0);
                                taxAmount = authHandler.round(taxAmount, companyid);
                            }
                        } else {
//                            bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getJournalEntry().getEntryDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                            bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getCreationDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate());
                            taxAmount = (Double) bTaxAmt.getEntityList().get(0);
                            taxAmount = authHandler.round(taxAmount, companyid);
                        }
                        
                    }
                    //Account name is same as GST.Purposefully done for client. 
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        taxAmount += cnSalesAmt;
                        cnSalesAmt = 0;
                    }

                    double totalAmountwithTax = 0.0;
                    double originalTotalAmountwithTax = 0.0;
                    
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        totalAmountwithTax = taxAmount;
                        originalTotalAmountwithTax = originalTaxAmount;
                    } else {
                        totalAmountwithTax = authHandler.round(cnSalesAmt + (taxAmount), companyid);
                        originalTotalAmountwithTax = authHandler.round(originalCnSalesAmt + (originalTaxAmount), companyid);
                    }

                    
                    dnAmount += authHandler.round(cnSalesAmt, companyid);//505*100=(100+p)x
                    dnTaxableAmount += authHandler.round((cnSalesAmt - taxAmount), companyid);

                    if (dnAmtDue == 0) {
                        dnTaxCollected += authHandler.round((cnSalesAmt - taxAmount), companyid);
                    }

                    if (!temp.isDebitForMultiCNDN()) {
                        /**
                         * If type of account is credit & purchase tax then
                         * amount should be negative Refer - ERM-263.
                         */
                        cnSalesAmt = -cnSalesAmt;
                        originalCnSalesAmt = -originalCnSalesAmt;
                        taxAmount = -taxAmount;
                        originalTaxAmount = -originalTaxAmount;
                        totalAmountwithTax = -totalAmountwithTax;
                        originalTotalAmountwithTax = -originalTotalAmountwithTax;
                    }

                    /**
                     * To calculate subtotal.
                     */
                    taxableAmount += taxAmount;
                    saleAmount += totalAmountwithTax;
                    saleAmountExcludingTax += cnSalesAmt;
                    
                    double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = (originalCnSalesAmt) / (cnSalesAmt);
                    } else {
                        transactionExchangeRate = temp.getDebitNote().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getDebitNote().getJournalEntry().getExternalCurrencyRate();
                    }
                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                    purchasesTaxBilling = new JSONObject();
                    purchasesTaxBilling.put("type", "Debit Note");
                    purchasesTaxBilling.put("noteid", temp.getDebitNote().getID());
                    purchasesTaxBilling.put("jeid", temp.getDebitNote().getJournalEntry().getID());
                    purchasesTaxBilling.put("jedate", odf.format(temp.getDebitNote().getJournalEntry().getEntryDate()));
//                    purchasesTaxBilling.put("grdate", sdf.format(new Date(temp.getDebitNote().getJournalEntry().getEntryDate().getTime())));
                    purchasesTaxBilling.put("grdate", sdf.format(new Date(temp.getDebitNote().getCreationDate().getTime())));
                    if (temp.getDebitNote().getDntype() == 4) {
                        purchasesTaxBilling.put("grname", temp.getDebitNote().getCustomer().getName());
                    } else {
                        purchasesTaxBilling.put("grname", temp.getDebitNote().getVendor().getName());
                    }
                    purchasesTaxBilling.put("grno", temp.getDebitNote().getDebitNoteNumber());
                    purchasesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    purchasesTaxBilling.put("gramtexcludingtax", authHandler.round(cnSalesAmt, companyid));
                    purchasesTaxBilling.put("grtaxamount", authHandler.round(taxAmount, companyid));
                    purchasesTaxBilling.put("originaltaxamount", authHandler.round(originalTaxAmount, companyid));
                    purchasesTaxBilling.put("gramt", authHandler.round(totalAmountwithTax, companyid));
                    purchasesTaxBilling.put("originalamountincludingtax", authHandler.round(originalTotalAmountwithTax, companyid));
                    purchasesTaxBilling.put("transactionexchangerate", transactionExchangeRate);
                    purchasesTaxBilling.put("journalEntryNo", temp.getDebitNote().getJournalEntry().getEntryNumber());
                    purchasesTaxBilling.put("transactioncurrencysymbol", temp.getDebitNote().getCurrency().getSymbol());
                    purchasesTaxBilling.put("transactioncurrencyid", temp.getDebitNote().getCurrency().getCurrencyID());
                    purchasesTaxBilling.put(Constants.memo, temp.getDebitNote().getMemo() != null ? temp.getDebitNote().getMemo() : "");
                    
                    /**
                     * Added following key for IAF.
                     */
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        purchasesTaxBilling.put("grlineno", temp.getSrNoForRow());
                        purchasesTaxBilling.put("grproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : temp.getAccount() != null ? temp.getAccount().getName() : "");
                        if (temp.getDebitNote().getDntype() == 4) {
                            purchasesTaxBilling.put("gruen", temp.getDebitNote().getCustomer() != null ? (isMalasianCompany ? temp.getDebitNote().getCustomer().getCompanyRegistrationNumber() : temp.getDebitNote().getCustomer().getUENNumber()) : "");
                        } else {
                            purchasesTaxBilling.put("gruen", temp.getDebitNote().getVendor() != null ? (isMalasianCompany ? temp.getDebitNote().getVendor().getCompanyRegistrationNumber() : temp.getDebitNote().getVendor().getUENNumber()) : "");
                        }
                        purchasesTaxBilling.put("transactioncurrencycode", temp.getDebitNote().getCurrency().getCurrencyCode());
                        purchasesTaxBilling.put("permit", "");

                    }
                    grPurchaseTaxjArr.put(purchasesTaxBilling);
                    
                    /**
                     * To calculate grand total.
                     */
                    totalgramtexcludingtax += cnSalesAmt;
                    totalcategorycost += taxAmount;
                    totalAmount += totalAmountwithTax;
                    
                }

                /**
                 * Purchase Tax.
                 * *******************************Credit Note Otherwise Tax
                 * Calculation *******************************
                 */
                // Vendor Credit Note
                // Company Specif check has been removed for ERP-16173
//                if(isMalasianCompany){
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.creditNoteSearchJson));
                }
                cnResult = accReceiptDao.getCalculatedCreditNoteOtherwiseTax(filterParams);
                dnIt = cnResult.getEntityList().iterator();
                dnAmount = 0;
                dnTaxableAmount = 0;
                dnTaxCollected = 0;
                while (dnIt.hasNext()) {
                    double taxPercent = 0;
                    double dnAmtDue = 0;
                    double taxAmount = 0;
                    double originalTaxAmount = 0;
                    CreditNoteTaxEntry temp = (CreditNoteTaxEntry) dnIt.next();
                    double cnSalesAmt=0.0;
                    double originalCnSalesAmt=0.0;
                    if(!temp.getCreditNote().isIncludingGST()){
                        cnSalesAmt = (Double) temp.getAmount();
                    }else{
                        cnSalesAmt = (Double) temp.getRateIncludingGst();
                    }
                    originalCnSalesAmt = cnSalesAmt;
                    KwlReturnObject bAmt;
                    /*
                     * gstFlag = Country is Singapore
                     */ 
                     if (requestParams.containsKey("gstFlag")) {
                        //(ERP-8222) && check is for if country is Singapore then no need to convert it again in SGD.
                        if (temp.getGstCurrencyRate() != 0 && (!temp.getCreditNote().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID))) {//to check if the GoodsReceipt has external GST rate when country is Singapore
                            cnSalesAmt = originalCnSalesAmt*temp.getGstCurrencyRate();
                            cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                        } else if (!temp.getCreditNote().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID)){
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, cnSalesAmt, temp.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, cnSalesAmt, temp.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                            cnSalesAmt = (Double) bAmt.getEntityList().get(0);
                            cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                        }
                    } else {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, cnSalesAmt, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                        cnSalesAmt = (Double) bAmt.getEntityList().get(0);
                        cnSalesAmt = authHandler.round(cnSalesAmt, companyid);
                    }         
                     
                     
                    if (temp.getTax() != null) {

                        taxAmount = temp.getTaxamount();
                        originalTaxAmount = taxAmount;
                        KwlReturnObject bTaxAmt;
                        /*
                         * gstFlag = Country is Singapore
                         */ 
                        if (requestParams.containsKey("gstFlag")) {
                            //(ERP-8222) && check is for if country is Singapore then no need to convert it again in SGD.
                            if (temp.getGstCurrencyRate() != 0 && (!temp.getCreditNote().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID))) {//to check if the GoodsReceipt has external GST rate when country is Singapore
//                                bTaxAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, taxAmount, temp.getDebitNote().getCurrency().getCurrencyID(), temp.getDebitNote().getJournalEntry().getEntryDate(), temp.getDebitNote().getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                                taxAmount = originalTaxAmount*temp.getGstCurrencyRate();
                                taxAmount = authHandler.round(taxAmount, companyid);
                            } else if (!temp.getCreditNote().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID)){
//                                bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                                bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, taxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), Constants.SGDID, temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                                taxAmount = (Double) bTaxAmt.getEntityList().get(0);
                                taxAmount = authHandler.round(taxAmount, companyid);
                            }
                        } else {
//                            bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getJournalEntry().getEntryDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                            bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmount, temp.getCreditNote().getCurrency().getCurrencyID(), temp.getCreditNote().getCreationDate(), temp.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                            taxAmount = (Double) bTaxAmt.getEntityList().get(0);
                            taxAmount = authHandler.round(taxAmount, companyid);
                        }
                        
                        
                        
                    }
                    //Account name is same as GST.Purposefully done for client. 
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        taxAmount += cnSalesAmt;
                        cnSalesAmt = 0;
                    }

                    double totalAmountwithTax = 0.0;
                    double originalTotalAmountwithTax = 0.0;
                    if (temp.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        totalAmountwithTax = taxAmount;
                        originalTotalAmountwithTax = originalTaxAmount;
                    } else {
                        totalAmountwithTax = authHandler.round(cnSalesAmt + (taxAmount), companyid);
                        originalTotalAmountwithTax = authHandler.round(originalCnSalesAmt + (originalTaxAmount), companyid);
                    }

                    dnAmount += authHandler.round(cnSalesAmt, companyid);//505*100=(100+p)x
                    dnTaxableAmount += authHandler.round((cnSalesAmt - taxAmount), companyid);

                    if (dnAmtDue == 0) {
                        dnTaxCollected += authHandler.round((cnSalesAmt - taxAmount), companyid);
                    }

                     double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = (originalCnSalesAmt) / (cnSalesAmt);
                    } else {
                        transactionExchangeRate = temp.getCreditNote().getJournalEntry().getExternalCurrencyRate() == 0 ? 1 : temp.getCreditNote().getJournalEntry().getExternalCurrencyRate();
                    }
                    transactionExchangeRate = authHandler.round(transactionExchangeRate, companyid);
                    
                    if (!temp.isDebitForMultiCNDN()) {
                        /**
                         * If type of account is credit & purchase tax then
                         * amount should be negative Refer - ERM-263.
                         */
                        cnSalesAmt = -cnSalesAmt;
                        taxAmount = -taxAmount;
                        originalTaxAmount = -originalTaxAmount;
                        totalAmountwithTax = -totalAmountwithTax;
                        originalTotalAmountwithTax = -originalTotalAmountwithTax;
                    }

                    /**
                     * To Calculate subtotal.
                     */
                    saleAmount += totalAmountwithTax;
                    taxableAmount += taxAmount;
                    saleAmountExcludingTax += cnSalesAmt;
                    
                    purchasesTaxBilling = new JSONObject();
                    purchasesTaxBilling.put("type", "Credit Note");
                    purchasesTaxBilling.put("noteid", temp.getCreditNote().getID());
                    purchasesTaxBilling.put("jeid", temp.getCreditNote().getJournalEntry().getID());
                    purchasesTaxBilling.put("jedate", odf.format(temp.getCreditNote().getJournalEntry().getEntryDate()));
//                    purchasesTaxBilling.put("grdate", sdf.format(new Date(temp.getCreditNote().getJournalEntry().getEntryDate().getTime())));
                    purchasesTaxBilling.put("grdate", sdf.format(new Date(temp.getCreditNote().getCreationDate().getTime())));
                    if (temp.getCreditNote().getCntype() == 4) {
                        purchasesTaxBilling.put("grname", temp.getCreditNote().getVendor().getName());
                    } else {
                        purchasesTaxBilling.put("grname", temp.getCreditNote().getCustomer().getName());
                    }
                    purchasesTaxBilling.put("grno", temp.getCreditNote().getCreditNoteNumber());
                    purchasesTaxBilling.put("gramt", authHandler.round(totalAmountwithTax, companyid));
                    purchasesTaxBilling.put("originalamountincludingtax", authHandler.round(originalTotalAmountwithTax, companyid));
                    purchasesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    purchasesTaxBilling.put("gramtexcludingtax", authHandler.round(cnSalesAmt, companyid));
                    purchasesTaxBilling.put("journalEntryNo", temp.getCreditNote().getJournalEntry().getEntryNumber());
                    purchasesTaxBilling.put("grtaxamount", authHandler.round(taxAmount, companyid));
                    purchasesTaxBilling.put("originaltaxamount", authHandler.round(originalTaxAmount, companyid));
                    purchasesTaxBilling.put("transactionexchangerate", transactionExchangeRate);
                    purchasesTaxBilling.put("transactioncurrencysymbol", temp.getCreditNote().getCurrency().getSymbol());
                    purchasesTaxBilling.put("transactioncurrencyid", temp.getCreditNote().getCurrency().getCurrencyID());
                    purchasesTaxBilling.put(Constants.memo, temp.getCreditNote().getMemo() != null ? temp.getCreditNote().getMemo() : "");
                    
                    /**
                     * Added following key for IAF.
                     */
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        purchasesTaxBilling.put("grlineno", temp.getSrNoForRow());
                        purchasesTaxBilling.put("grproduct", !StringUtil.isNullOrEmpty(temp.getDescription()) ? temp.getDescription() : temp.getAccount() != null ? temp.getAccount().getName() : "");
                        if (temp.getCreditNote().getCntype() == 4) {
                            purchasesTaxBilling.put("gruen", temp.getCreditNote().getVendor() != null ? (isMalasianCompany ? temp.getCreditNote().getVendor().getCompanyRegistrationNumber() : temp.getCreditNote().getVendor().getUENNumber()) : "");
                        } else {
                            purchasesTaxBilling.put("gruen", temp.getCreditNote().getCustomer() != null ? (isMalasianCompany ? temp.getCreditNote().getCustomer().getCompanyRegistrationNumber() : temp.getCreditNote().getCustomer().getUENNumber()) : "");
                        }
                        purchasesTaxBilling.put("transactioncurrencycode", temp.getCreditNote().getCurrency().getCurrencyCode());
                        purchasesTaxBilling.put("permit", "");
                    }
                    grPurchaseTaxjArr.put(purchasesTaxBilling);

                    /**
                     * To Calculate Grand Total.
                     */
                    totalgramtexcludingtax += authHandler.round(cnSalesAmt, companyid);
                    totalcategorycost += authHandler.round(taxAmount, companyid);
                    totalAmount += authHandler.round(totalAmountwithTax, companyid);
                }
//             }
                /**
                 * Purchase Tax.
                 * *********************************** Get taxes used in
                 * Journal Entry***************************
                 */
                // ERP-17298
                if (isAdvanceSearch) {
                    filterParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                    filterParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.journalEntrySearchJson));
                }
                KwlReturnObject jeDetailWithGstResult = accJournalEntryobj.getJEDetailsToIncludeInGSTReport(filterParams);
                List<JournalEntryDetail> JED = (List<JournalEntryDetail>) jeDetailWithGstResult.getEntityList();
                for (JournalEntryDetail jed : JED) {
                    JournalEntry JE = jed.getJournalEntry();
                    boolean isDebit = jed.isDebit();
                    double amount = jed.getAmount();
                    double eClaimJEPrincipleAmount = 0.0;
                    double taxAmount = 0;
                    amount = authHandler.round(amount, companyid);
                    amount = isDebit ? (amount) : (-amount);
                    double originalAmount = amount;
                    KwlReturnObject bAmt = null;
                    if (requestParams.containsKey("gstFlag")) {
                        if (!JE.getCurrency().getCurrencyID().equals(Constants.SGDID)) {
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified((Map) requestParams, amount, JE.getCurrency().getCurrencyID(), Constants.SGDID, JE.getEntryDate(), JE.getExternalCurrencyRate());
                        }
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, amount, JE.getCurrency().getCurrencyID(), JE.getEntryDate(), JE.getExternalCurrencyRate());
                    }
                    if (bAmt != null) {
                        amount = (Double) bAmt.getEntityList().get(0);
                    }
                    
                    
                    /*
                     * If base currency is not SGD and country currency is SGD, then calculated transaction rate else considered external currency rate from journal entry.
                     */
                    double transactionExchangeRate = 0;
                    if (requestParams.containsKey("gstFlag") && !gcurrencyid.equals(Constants.SGDID)) {
                        transactionExchangeRate = originalAmount / amount;
                    } else {
                        transactionExchangeRate = JE.getExternalCurrencyRate() == 0 ? 1 : JE.getExternalCurrencyRate();
                    }
                    
                    /*
                    * If account is tax account then do not show principal amount, only show tax amount.Principal amount in this case is 0.
                    */
                    if (jed.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        taxAmount += amount;
                        amount = 0;
                    }
                    double totalAmountwithTax = 0.0;
                    if (jed.getAccount().getID().equals(taxObj.getAccount().getID())) {
                        totalAmountwithTax = taxAmount;
                    }
                    if (JE.isIsFromEclaim()) {
                        requestParams.put(Constants.Acc_JEid, JE.getID());
                        eClaimJEPrincipleAmount = accFinancialReportsService.getTotalPricipleAmountForEClaimJE((Map) requestParams);
                        amount = isDebit ? eClaimJEPrincipleAmount : -eClaimJEPrincipleAmount;
                        totalAmountwithTax += amount;
                    }
                    /**
                     * To calculate sub total.
                     */
                    taxableAmount += authHandler.round(taxAmount, companyid);
                    saleAmount += authHandler.round(totalAmountwithTax, companyid);
                    saleAmountExcludingTax += authHandler.round(amount, companyid);

                    
                    /*
                     *When JE from eClaim then amount is total of principle amount+tax amount
                     */
                    double jeDetailAmount = JE.isIsFromEclaim() ? totalAmountwithTax :jed.getAmount();
                    KwlReturnObject bAmtOfJE = accCurrencyDAOobj.getCurrencyToBaseAmountRoundOff(requestParams, jeDetailAmount, JE.getCurrency().getCurrencyID(), JE.getEntryDate(), JE.getExternalCurrencyRate());
                    double amountInBase = (Double) bAmtOfJE.getEntityList().get(0);
                    amountInBase = authHandler.round(amountInBase, companyid);
                    transactionExchangeRate = JE.isIsFromEclaim() ? jeDetailAmount / amountInBase : transactionExchangeRate;
                    
                    purchasesTaxBilling = new JSONObject();
                    purchasesTaxBilling.put(Constants.billid, JE.getID());
                    purchasesTaxBilling.put("type", "Journal Entry");
                    purchasesTaxBilling.put("typeValue", JE.getTypeValue());
                    purchasesTaxBilling.put("jeid", JE.getID());
                    purchasesTaxBilling.put("jedate", odf.format(JE.getEntryDate()));
                    purchasesTaxBilling.put("grdate", sdf.format(new Date(JE.getEntryDate().getTime())));
                    purchasesTaxBilling.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    purchasesTaxBilling.put("grname", jed.getAccount().getName());
                    purchasesTaxBilling.put("grno", JE.getEntryNumber());
                    purchasesTaxBilling.put("gramt", authHandler.round(totalAmountwithTax, companyid));
                    purchasesTaxBilling.put("gramtexcludingtax", authHandler.round(amount, companyid));
                    purchasesTaxBilling.put("journalEntryNo", JE.getEntryNumber());
                    purchasesTaxBilling.put("grtaxamount", authHandler.round(taxAmount, companyid));
                    purchasesTaxBilling.put("originaltaxamount", authHandler.round(taxAmount * transactionExchangeRate, companyid));
                    purchasesTaxBilling.put("originalamountincludingtax", authHandler.round(totalAmountwithTax * transactionExchangeRate, companyid));
                    purchasesTaxBilling.put("transactionexchangerate", authHandler.round(transactionExchangeRate, companyid));
                    purchasesTaxBilling.put("transactioncurrencysymbol", JE.getCurrency().getSymbol());
                    purchasesTaxBilling.put("transactioncurrencyid", JE.getCurrency().getCurrencyID());
                    purchasesTaxBilling.put(Constants.memo, JE.getMemo() != null ? JE.getMemo() : "");
                    
                    /**
                     * Added following key for IAF.
                     */
                    if (fileType.equalsIgnoreCase(Constants.isGSTAuditFile)) {
                        purchasesTaxBilling.put("grlineno", jed.getSrno());
                        purchasesTaxBilling.put("grproduct", !StringUtil.isNullOrEmpty(jed.getDescription()) ? jed.getDescription() : jed.getAccount() != null ? jed.getAccount().getName() : "");
                        purchasesTaxBilling.put("gruen", "");
                        purchasesTaxBilling.put("transactioncurrencycode", JE.getCurrency().getCurrencyCode());
                        purchasesTaxBilling.put("permit", "");
                    }
                    
                    /**
                     * To calculate grand total.
                     */
                    totalcategorycost += authHandler.round(taxAmount, companyid);//(rptSalesAmt*taxPercent/100);
                    totalgramtexcludingtax += authHandler.round(amount, companyid);
                    totalAmount += authHandler.round(totalAmountwithTax, companyid);
                    grPurchaseTaxjArr.put(purchasesTaxBilling);
                }
                
                /*
                 * Add ImportedServicesInvoices Payment entry in GST Report for MalasianCompany when TAX "GST(TX)"
                 */
                if (isMalasianCompany && (isForGSTReport || isForTaxReport) && taxObj.getName().equals(Constants.MALAYSIAN_GST_TX_TAX_CODE)) {
                    JSONArray importedServicesJArr = getImportedServicesInvoicesJSON(requestParams);
                    for (int i = 0; i < importedServicesJArr.length(); i++) {
                        JSONObject jobj = importedServicesJArr.getJSONObject(i);
                        
                        /**
                         * To calculate sub total.
                         */
                        saleAmount += jobj.optDouble("invamt", 0.0);
                        saleAmountExcludingTax += jobj.optDouble("gramtexcludingtax", 0.0);
                        taxableAmount += (jobj.optDouble("invtaxamount", 0));
                        
                        /**
                         * To calculate grand total.
                         */
                        totalcategorycost += (jobj.optDouble("invtaxamount", 0));//totalcategorycost+= (ramount*rowTaxPercent/100);
                        totalgramtexcludingtax += jobj.optDouble("gramtexcludingtax", 0);
                        totalAmount += jobj.optDouble("invamt", 0);

                        grPurchaseTaxjArr.put(importedServicesJArr.getJSONObject(i));
                    }
                }
                /**
                 * Commented code to avoid unnecessary looping &
                 * used grPurchaseTaxjArr instead of grPurchaseTaxBillingjArr.
                 */
//                for (int i = 0; i < grPurchaseTaxBillingjArr.length(); i++) {
//                    grPurchaseTaxjArr.put(grPurchaseTaxBillingjArr.getJSONObject(i));
//                }
                if (isMalasianCompany) {
                    // Putting Adjustment Taxes
                    filterParams.put("isInputTax", true);
                    KwlReturnObject adjsResult = accInvoiceDAOobj.getTaxAdjustments((HashMap<String, Object>) filterParams);
                    List<TaxAdjustment> taxAdjustmentList = adjsResult.getEntityList();
                    for (TaxAdjustment taxAdjustment : taxAdjustmentList) {
                        obj = new JSONObject();
                        obj.put("taxname", taxAdjustment.getTax().getName());
                        obj.put("taxcode", taxAdjustment.getTax().getTaxCodeWithoutPercentage());
                        obj.put("mergedResourceData", taxAdjustment.getTax().getTaxCodeWithoutPercentage());
                        obj.put("mergedCategoryData", "Purchase and Expenses with GST Paid");
                        obj.put("categoryName", "Grand");
                        obj.put("totalcategorycost", totalcategorycost + taxAdjustment.getTaxAmount());
                        obj.put("totalgramtexcludingtax", totalgramtexcludingtax + taxAdjustment.getAmount());
                        obj.put("totalsale", authHandler.round(taxAdjustment.getAmount() + taxAdjustment.getTaxAmount(), companyid));//sales including tax[PS]
                        obj.put("totalsaleexcludingtax", authHandler.round(taxAdjustment.getAmount(), companyid));//sales including tax[PS]
                        obj.put("taxrate", "6");
                        obj.put("taxamount", authHandler.round(taxAdjustment.getTaxAmount(), companyid));
                        obj.put("taxcollected", 0);  //taxamount of all thoose invoices whose amount due is 0[PS]
                        obj.put("taxpayable", taxAdjustment.getTaxAmount());
                        obj.put("grdate", sdf.format(taxAdjustment.getCreationDate()));
                        obj.put("grname", "");
                        obj.put("journalEntryNo", taxAdjustment.getJournalEntry().getEntryNumber());
                        obj.put("jeid", taxAdjustment.getJournalEntry().getID());
                        obj.put("jedate", odf.format(taxAdjustment.getJournalEntry().getEntryDate()));
                        obj.put("grno", taxAdjustment.getDocumentNo());
                        obj.put("gramt", taxAdjustment.getAmount() + taxAdjustment.getTaxAmount());
                        obj.put("addAmountFlag", true);
                        obj.put("gramtexcludingtax", taxAdjustment.getAmount());
                        obj.put("totalinvamt", totalAmount + taxAdjustment.getAmount() + taxAdjustment.getTaxAmount());
                        obj.put("grtaxamount", taxAdjustment.getTaxAmount());
                        obj.put("type", "Tax Adjustment");
                        obj.put(Constants.memo, "");
                        grPurchaseTaxjArr.put(obj);

                        /**
                         * To calculate sub total.
                         */
                        saleAmount += (taxAdjustment.getAmount() + taxAdjustment.getTaxAmount());
                        saleAmountExcludingTax += taxAdjustment.getAmount();
                        taxableAmount += taxAdjustment.getTaxAmount();
                        /**
                         * To calculate sub total.
                         */
                        totalcategorycost += taxAdjustment.getTaxAmount();
                        totalgramtexcludingtax += taxAdjustment.getAmount();
                        totalAmount += taxAdjustment.getAmount() + taxAdjustment.getTaxAmount();
                    }
                }

                if (fileType.equals("pdf")) {
                    obj = new JSONObject();
                    obj.put("taxname", taxObj.getName());
                    obj.put("taxtype", taxObj.getTaxtype());
                    obj.put("taxcode", taxObj.getTaxCodeWithoutPercentage());
                    obj.put("totalsale", authHandler.round(saleAmount, companyid));//sales including tax[PS]
                    obj.put("taxrate", taxListObj.getPercent());
                    obj.put("taxamount", authHandler.round(taxableAmount, companyid));
                    obj.put("taxcollected", taxCollected);  //taxamount of all thoose invoices whose amount due is 0[PS]
                    obj.put("taxpayable", (taxableAmount - taxCollected));
                    obj.put("totalsaleexcludingtax", authHandler.round(saleAmountExcludingTax + saleAmountExcludingTaxB, companyid));
                    if (isRequireSortByDate) {
                        grPurchaseTaxjArr = AccReportsHandler.sortPurchaseJsonArrayByGSTDate(grPurchaseTaxjArr, sdf);
                    }
                    obj.put("details", grPurchaseTaxjArr);
                    jArr.put(obj);
                } else if (fileType.equals(Constants.isGSTAuditFile)) {
                    JSONObject fileDataJObj = new JSONObject();
                    JSONArray fileDataJArr = new JSONArray();
                    for (int jsonVal = 0; jsonVal < grPurchaseTaxjArr.length(); jsonVal++) {
                        obj = new JSONObject();
                        JSONObject oldObject = (JSONObject) grPurchaseTaxjArr.get(jsonVal);
                        obj.put("grdate", sdf.parse(oldObject.optString("grdate")).getTime());
                        obj.put("grname", oldObject.optString("grname"));
                        obj.put("grno", oldObject.optString("grno"));
                        obj.put("gramt", oldObject.optDouble("gramt", 0.0));
                        obj.put("gramtexcludinggst", oldObject.optDouble("gramtexcludingtax", 0.0));
                        obj.put("grtaxamount", oldObject.optDouble("grtaxamount", 0.0));
                        obj.put("grlineno", oldObject.optInt("grlineno", 0));
                        obj.put("grproduct", StringUtil.replaceFullHTML(oldObject.optString("grproduct", "")));
                        obj.put("grtaxcode", taxObj.getTaxCodeWithoutPercentage());
                        obj.put("gruen", oldObject.optString("gruen", ""));
                        obj.put("fcycode", oldObject.optString("transactioncurrencycode", ""));
                        obj.put("purchasefcy", oldObject.optDouble("originalamountincludingtax", 0.0));
                        obj.put("purchasefcyexcludinggst", oldObject.optDouble("originalamountincludingtax", 0.0) - oldObject.optDouble("originaltaxamount", 0.0));
                        obj.put("gstfcy", oldObject.optDouble("originaltaxamount", 0.0));
                        obj.put("permit", oldObject.optString("permit"));
                        fileDataJArr.put(obj);
                    }
                    fileDataJObj.put("details", fileDataJArr);
                    jArr.put(fileDataJObj);
                } else {
                    for (int jsonVal = 0; jsonVal < grPurchaseTaxjArr.length(); jsonVal++) {
                        obj = new JSONObject();
                        JSONObject oldObject = (JSONObject) grPurchaseTaxjArr.get(jsonVal);
                        obj.put("taxname", taxObj.getName());
                        obj.put("taxtype", taxObj.getTaxtype());
                        obj.put("taxcode", taxObj.getTaxCodeWithoutPercentage());
                        obj.put("mergedResourceData", isMalasianCompany ? taxObj.getTaxCodeWithoutPercentage() : taxObj.getName());
                        obj.put("mergedCategoryData", "Purchase and Expenses with GST Paid");
                        obj.put("categoryName", "Grand");
                        obj.put("totalsale", authHandler.round(saleAmount, companyid));//sales including tax[PS]
                        obj.put("totalsaleexcludingtax", authHandler.round(saleAmountExcludingTax + saleAmountExcludingTaxB, companyid));//sales including tax[PS]
                        obj.put("taxrate", taxListObj.getPercent());
                        obj.put("totalcategorycost", totalcategorycost);
                        obj.put("totalgramtexcludingtax", totalgramtexcludingtax);
                        obj.put("taxamount", authHandler.round(taxableAmount, companyid));
                        obj.put("taxcollected", taxCollected);  //taxamount of all thoose invoices whose amount due is 0[PS]
                        obj.put("taxpayable", (taxableAmount - taxCollected));
                        obj.put("invdate", oldObject.getString("grdate"));
                        obj.put("invname", oldObject.getString("grname"));
                        obj.put("invno", oldObject.getString("grno"));
                        obj.put("journalEntryNo", oldObject.getString("journalEntryNo"));
                        obj.put("jeid", oldObject.has("jeid") ? oldObject.getString("jeid") : "");
                        obj.put("jedate", oldObject.has("jedate") ? oldObject.getString("jedate") : "");
                        obj.put(Constants.billid, oldObject.has(Constants.billid) ? oldObject.getString(Constants.billid) : "");
                        obj.put("type", oldObject.has("type") ? oldObject.getString("type") : "");
                        obj.put("noteid", oldObject.has("noteid") ? oldObject.getString("noteid") : "");
                        obj.put("billid", oldObject.has("billid") ? oldObject.getString("billid") : "");
                        if(oldObject.has("inputType")){
                            obj.put("inputType", oldObject.getString("inputType"));
                        }
                        obj.put("noteno", oldObject.has("noteno") ? oldObject.getString("noteno") : "");
                        obj.put("date", oldObject.has("date") ? oldObject.getString("date") : "");
                        obj.put(Constants.memo, oldObject.optString(Constants.memo));
                        obj.put("costcenterid", oldObject.has("costcenterid") ? oldObject.getString("costcenterid") : "");
                        obj.put("lasteditedby", oldObject.has("lasteditedby") ? oldObject.getString("lasteditedby") : "");
                        obj.put("includeprotax", oldObject.has("includeprotax") ? oldObject.getString("includeprotax") : "");
                        obj.put("sequenceformatid", oldObject.has("sequenceformatid") ? oldObject.getString("sequenceformatid") : "");
                        obj.put("agentid", oldObject.has("agentid") ? oldObject.getString("agentid") : "");
                        obj.put("personid", oldObject.has("personid") ? oldObject.getString("personid") : "");
                        obj.put("personname", oldObject.has("personname") ? oldObject.getString("personname") : "");
                        obj.put("currencyid", oldObject.has("currencyid") ? oldObject.getString("currencyid") : "");
                        obj.put("totalinvamt", totalAmount);
                        obj.put("invamt", oldObject.getDouble("gramt"));
                        obj.put("addAmountFlag", oldObject.getBoolean("addAmountFlag"));
                        obj.put("gramtexcludingtax", oldObject.optDouble("gramtexcludingtax", 0.0));
                        obj.put("invtaxamount", oldObject.getDouble("grtaxamount"));
                        obj.put("originalamountincludingtax", oldObject.optDouble("originalamountincludingtax", 0.0));
                        obj.put("originaltaxamount", oldObject.optDouble("originaltaxamount", 0.0));
                        obj.put("transactionexchangerate", oldObject.optDouble("transactionexchangerate", 1.0));
                        obj.put("transactioncurrencysymbol", oldObject.optString("transactioncurrencysymbol", ""));
                        obj.put("transactioncurrencyid", oldObject.optString("transactioncurrencyid", ""));
                        obj.put("isDebit", oldObject.optBoolean("isDebit", true));
                        
                        jArr.put(obj);
                    }
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getCalculatedPurchaseTaxMerged : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public double getReceiptTotalAmount(String currencyid, Receipt receipt, KWLCurrency currency, HashMap<String, Object> requestParams, boolean isfixedAsset) throws ServiceException {
        try {
            double amount = 0;
            if (!receipt.getRows().isEmpty()) {
                if (isfixedAsset) {
                    for (ReceiptDetail rd : receipt.getRows()) {
                        if (rd.getInvoice() != null && rd.getInvoice().isFixedAssetInvoice()) {
                            amount += rd.getAmount();
                        }
                    }
                } else {
                    for (ReceiptDetail rd : receipt.getRows()) {
                        if (rd.getInvoice() != null && rd.getInvoice().isFixedAssetInvoice()) {
                            continue;
                        }
                        amount += rd.getAmount();
                    }
                }
                currencyid = (receipt.getCurrency() == null ? currency.getCurrencyID() : receipt.getCurrency().getCurrencyID());
//                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, receipt.getJournalEntry().getEntryDate(), receipt.getJournalEntry().getExternalCurrencyRate());
                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, receipt.getCreationDate(), receipt.getJournalEntry().getExternalCurrencyRate());
                amount = (Double) bAmt.getEntityList().get(0);
            }
            return amount;
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getReceiptTotalAmount : " + ex.getMessage(), ex);
        }
    }

    public double getPaymentTotalAmount(String currencyid, Payment payment, KWLCurrency currency, HashMap<String, Object> requestParams, boolean isfixedAsset) throws ServiceException {
        try {
            double amount = 0;
            if (!payment.getRows().isEmpty()) {
                if (isfixedAsset) {
                    for (PaymentDetail pd : payment.getRows()) {
                        if (pd.getGoodsReceipt() != null && pd.getGoodsReceipt().isFixedAssetInvoice()) {
                            amount += pd.getAmount();
                        }
                    }
                } else {
                    for (PaymentDetail pd : payment.getRows()) {
                        if (pd.getGoodsReceipt() != null && pd.getGoodsReceipt().isFixedAssetInvoice()) {//skip the rows if it contain asset invoices
                            continue;
                        }
                        amount += pd.getAmount();
                    }
                }
                currencyid = (payment.getCurrency() == null ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID());
//                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, payment.getJournalEntry().getEntryDate(), payment.getJournalEntry().getExternalCurrencyRate());
                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
                amount = (Double) bAmt.getEntityList().get(0);
            }
            return amount;

        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getPaymentTotalAmount : " + ex.getMessage(), ex);
        }
    }

    //Product Price
    public ModelAndView getProductPriceCustVen(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put(Constants.start, (StringUtil.isNullOrEmpty(request.getParameter(Constants.start))) ? "0" : request.getParameter(Constants.start));
            requestParams.put(Constants.limit, (StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) ? "30" : request.getParameter(Constants.limit));
            requestParams.put(Constants.ss, (StringUtil.isNullOrEmpty(request.getParameter(Constants.ss))) ? "" : request.getParameter(Constants.ss));
            if (!StringUtil.isNullOrEmpty(request.getParameter("direction")) && !StringUtil.isNullOrEmpty(request.getParameter("field"))) {
                requestParams.put("dir", request.getParameter("direction"));
                requestParams.put("sort", request.getParameter("field"));
            }
            requestParams.put("productid", (StringUtil.isNullOrEmpty(request.getParameter("productid"))) ? "" : request.getParameter("productid"));
            requestParams.put("affectuserid", (StringUtil.isNullOrEmpty(request.getParameter("affectuserid"))) ? "" : request.getParameter("affectuserid"));
            boolean carryin = Boolean.parseBoolean(request.getParameter("carryin"));
            boolean isvaliditydate = !StringUtil.isNullOrEmpty(request.getParameter("isvaliditydate")) ? Boolean.parseBoolean(request.getParameter("isvaliditydate")) : false;
            requestParams.put("carryin", carryin);
            requestParams.put("productPriceinMultipleCurrency", Boolean.FALSE.parseBoolean(request.getParameter("productPriceinMultipleCurrency")));
            requestParams.put("isvaliditydate", isvaliditydate);
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            if (!StringUtil.isNullOrEmpty(request.getParameter("producttype"))) {
                requestParams.put("producttype", request.getParameter("producttype"));
            }
            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            KwlReturnObject result = accProductObj.getPriceCustVen(requestParams);
            List list = result.getEntityList();
            int count = result.getRecordTotalCount();

            JSONArray DataJArr = getPriceListJsonCustVen(request, list, carryin);
            jobj.put(Constants.RES_data, DataJArr);
            jobj.put(Constants.RES_count, count);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accReportsController.getProductPriceCustVen : " + ex.getMessage();
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    
    /*------Function to Export Product Price of Customer/Vendor------ */
    public ModelAndView exportCustVenProductsPrice(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {

            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(Constants.start, (StringUtil.isNullOrEmpty(request.getParameter(Constants.start))) ? "0" : request.getParameter(Constants.start));
            requestParams.put(Constants.limit, (StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) ? "30" : request.getParameter(Constants.limit));
            requestParams.put(Constants.globalCurrencyKey, getGlobalCurrencyidFromRequest(request));
            requestParams.put(Constants.ss, (StringUtil.isNullOrEmpty(request.getParameter(Constants.ss))) ? "" : request.getParameter(Constants.ss));
            requestParams.put("isvaliditydate", (StringUtil.isNullOrEmpty(request.getParameter("isvaliditydate"))) ? false : Boolean.FALSE.parseBoolean(request.getParameter("isvaliditydate")));
            requestParams.put("productid", (StringUtil.isNullOrEmpty(request.getParameter("productid"))) ? "" : request.getParameter("productid"));
            requestParams.put("affectuserid", (StringUtil.isNullOrEmpty(request.getParameter("affectuserid"))) ? "" : request.getParameter("affectuserid"));
            boolean carryin = Boolean.parseBoolean(request.getParameter("carryin"));
            requestParams.put("carryin", carryin);
            requestParams.put("productPriceinMultipleCurrency", Boolean.FALSE.parseBoolean(request.getParameter("productPriceinMultipleCurrency")));
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            if (!StringUtil.isNullOrEmpty(request.getParameter("producttype"))) {
                requestParams.put("producttype", request.getParameter("producttype"));
            }
            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            /*
             *Added this check to Export all records in Excel,CSV and PDF.
             * SDP-14079
             */
            requestParams.put("isExport", true);
            
            KwlReturnObject result = accProductObj.getPriceCustVen(requestParams);
            List list = result.getEntityList();
            
            request.setAttribute("isExport", true);
            JSONArray DataJArr = getPriceListJsonCustVen(request, list, carryin);

            jobj.put(Constants.RES_data, DataJArr);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            if (StringUtil.equal(fileType, "pdf")) {
                List jasperPrint = null;
                response.setHeader("Content-Disposition", "attachment;filename=" + "PriceListReport.pdf");
                jasperPrint = accReportsService.exportCustVenProductsPriceJasper(request, DataJArr, accountingHandlerDAOobj);
                JRPdfExporter exp = new JRPdfExporter();
                exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
                exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
                exp.exportReport();
            } else {
                exportDaoObj.processRequest(request, response, jobj);
            }
            jobj.put(Constants.RES_success, true);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public JSONArray getPriceListJsonCustVen(HttpServletRequest request, List list, boolean carryin) throws ServiceException, SessionExpiredException {
        JSONArray jArr = new JSONArray();
        try {
            Iterator itr = list.iterator();
            DateFormat df = authHandler.getDateOnlyFormat();
            DateFormat udf = authHandler.getUserDateFormatter(request);
            boolean isExport=request.getAttribute("isExport")!=null? (Boolean)request.getAttribute("isExport"): false; 
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Object> fieldrequestParams = new HashMap();
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = new HashMap<String, Integer>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Product_Master_ModuleId));
            FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
            String companyid=sessionHandlerImpl.getCompanyid(request);
            while (itr.hasNext()) {
                PriceList price = (PriceList) itr.next();
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  //ERP-8349[SJ]                             
//                Map obj = new HashMap<String, Object>();
                JSONObject obj=new JSONObject();
                obj.put("priceid", price.getID());
                obj.put("applydate", df.format(price.getApplyDate()));
                obj.put("applydateUserFormat", udf.format(price.getApplyDate()));
                if (isExport) {
                    obj.put("carryin", price.isCarryIn() ? "Purchase Price" : "Sales Price");
                } else {
                    obj.put("carryin", price.isCarryIn());
                }
                double priceval=price.getPrice();
                obj.put("price", authHandler.formattingDecimalForUnitPrice(price.getPrice(),companyid));
                obj.put("currency", price.getCurrency() != null ? price.getCurrency().getName() : "-");
                String affecteduser = price.getAffecteduser();
                String affectedUserCode = "";
                String affecteduserid = "";
                if (!affecteduser.equals("-1")) { //SDP-175
                    if (carryin) {
                        KwlReturnObject compresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), affecteduser);
                        Vendor vendor = (Vendor) compresult.getEntityList().get(0);
                        affecteduser = vendor != null ? vendor.getName() : "";
                        affecteduserid = vendor != null ? vendor.getID() : "";
                        affectedUserCode = vendor != null ? vendor.getAcccode(): "";
                    } else {
                        KwlReturnObject compresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), affecteduser);
                        Customer customer = (Customer) compresult.getEntityList().get(0);
                        affecteduser = customer != null ? customer.getName() : "";
                        affecteduserid = customer != null? customer.getID(): "";
                        affectedUserCode = customer != null? customer.getAcccode(): "";
                    }
                } else {
                    affecteduser = "All";
                    affecteduserid = "-1";
                }
                obj.put("affecteduser", affecteduser);
                obj.put("affecteduserid", affecteduserid);
                obj.put("affectedusercode", affectedUserCode);
                obj.put("productid", (price.getProduct() != null) ? price.getProduct().getProductid() : "");
                obj.put("productuuid", (price.getProduct() != null) ? price.getProduct().getID() : "");
                obj.put(Constants.currencyKey, (price.getCurrency() != null) ? price.getCurrency().getCurrencyID() : "");
                obj.put("currencyCode", (price.getCurrency() != null) ? price.getCurrency().getCurrencyCode() : "");
                obj.put("productName", (price.getProduct() != null) ? price.getProduct().getProductName() : "");
                obj.put("productDesc", (price.getProduct() != null) ? price.getProduct().getDescription() : "");
                obj.put("stockoum", (price.getProduct() != null) ? price.getProduct().getUnitOfMeasure()!=null?price.getProduct().getUnitOfMeasure().getNameEmptyforNA():"": "");
                obj.put("pricrinstockoum", (price.getProduct() != null) ? (authHandler.formattedAmount(priceval,companyid)+"/" + (price.getProduct().getUnitOfMeasure()!=null?price.getProduct().getUnitOfMeasure().getNameEmptyforNA():"") ): "");
                //added uom column in price report
                obj.put("uomname", (price.getUomid() != null) ? price.getUomid().getName():(price.getProduct().getUnitOfMeasure()!=null)?price.getProduct().getUnitOfMeasure().getName(): "");
                obj.put("uomid", (price.getUomid() != null) ? price.getUomid().getID():(price.getProduct().getUnitOfMeasure()!=null)?price.getProduct().getUnitOfMeasure().getID(): "");
                /**
                 * Put Product Custom data
                 */
                KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(AccProductCustomData.class.getName(), price.getProduct().getID());
                if (custumObjresult.getEntityList().size() > 0) {
//                        DateFormat df = (DateFormat) requestParams.get("df");
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    AccProductCustomData accProductCustomData = (AccProductCustomData) custumObjresult.getEntityList().get(0);
                    AccountingManager.setCustomColumnValues(accProductCustomData, FieldMap, replaceFieldMap, variableMap);
                    if (accProductCustomData != null) {
                        JSONObject params = new JSONObject();
                        params.put("isExport", isExport);
//                            params.put("userdf", userdf);

//                            if (!StringUtil.isNullOrEmpty(paramObj.optString(Constants.browsertz))) {
//                                params.put(Constants.browsertz, paramObj.optString(Constants.browsertz));
//                            }
                        fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                    }
                }
                jArr.put(obj);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getPriceListJsonCustVen : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public ModelAndView getApprovalhistory(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            String billid = request.getParameter(Constants.billid);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            HashMap requestparams = new HashMap();
            requestparams.put("locale",RequestContextUtils.getLocale(request));
            msg = accountingHandlerDAOobj.getApprovalHistory(billid, companyid, df,requestparams);
            issuccess = true;
        } catch (SessionExpiredException ex) {

            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {

            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);

            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public void exportContraPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportContraPaymentVoucher(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accVendorPaymentControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public ModelAndView getAccountForecastReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";

        try {
            JSONArray jArr = getAccountForecastReport(request, false);

            JSONArray monthArray = getMonthsJSONArray(request);
            monthArray.put(new JSONObject().put("monthname", "Total"));

            if (jArr.length() == 0) {
                jArr.put(new JSONObject().put("months", monthArray));
            } else {
                JSONObject firstObject = jArr.getJSONObject(0);
                firstObject.put("months", monthArray);
            }

            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());

            issuccess = true;

        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);

        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);

        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    private JSONArray getAccountForecastReport(HttpServletRequest request, boolean isForExport) throws JSONException, SessionExpiredException, ServiceException, ParseException {
        JSONArray DataJArr = new JSONArray();
        DateFormat newsdf = authHandler.getDateOnlyFormat();

        boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
        String accountId = request.getParameter("accountid");
        boolean isYearlyBudgetFlag = false;
        String isYearlyBudget = request.getParameter("isYearlyBudget");
        if (!StringUtil.isNullOrEmpty(isYearlyBudget)) {
            isYearlyBudgetFlag = Boolean.parseBoolean(isYearlyBudget);
        }
        String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
        String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
        boolean eliminateflag = consolidateFlag;

        final DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
        Date startDate = dtf.parseLocalDate(request.getParameter("stdate")).toDate();
        Date endDate = dtf.parseLocalDate(request.getParameter("enddate")).toDate();

        LocalDate localStartDate = new LocalDate(startDate);
        LocalDate localEndDate = new LocalDate(endDate);

        startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
        endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();
        startDate.setHours(00);
        startDate.setMinutes(00);
        startDate.setSeconds(00);

        endDate.setHours(00);
        endDate.setMinutes(00);
        endDate.setSeconds(00);
        Calendar cal = Calendar.getInstance();
        cal.setTime(startDate);
        int startDay = cal.get(Calendar.DATE);
        int startMonth = cal.get(Calendar.MONTH + 1);
        int startYear = cal.get(Calendar.YEAR);

        cal.setTime(endDate);
        int endDay = cal.get(Calendar.DATE);
        int endMonth = cal.get(Calendar.MONTH + 1);
        int endYear = cal.get(Calendar.YEAR);

        SimpleDateFormat sdf = new SimpleDateFormat("MMM DD, yyyy HH:mm:ss a");

        List monthList = getMonthList(request.getParameter("stdate"), request.getParameter("enddate"), "MMMM, yyyy");
//        monthList.add("Total");

        Map customerMap = new HashMap();

        DateFormat df = authHandler.getDateOnlyFormat();

        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
        requestParams.put("accountid", accountId);
        KwlReturnObject result = accAccountDAOobj.getMonthlyBudget(requestParams);
        AccountBudget accbudget = null;
        List list = result.getEntityList();
        if (!list.isEmpty()) {
            Iterator itr = list.iterator();
            accbudget = (AccountBudget) itr.next();
        }
        result = accAccountDAOobj.getMonthlyForecast(requestParams);
        AccountForecast accountForecast = null;
        list = result.getEntityList();
        if (!list.isEmpty()) {
            Iterator itr = list.iterator();
            accountForecast = (AccountForecast) itr.next();
        }

        JSONArray jArr = new JSONArray();
        int count = 0;
        double yearlybudget = 0;
        double yearlyforecast = 0;
        double yearlyactual = 0;
        for (int i = 0; i < monthList.size(); i++) {
            JSONObject obj = new JSONObject();
            String monthYear = (String) monthList.get(i);
            Date startDate1 = dtf.parseLocalDate(monthYear.replace(" ", ", ")).toDate();
            Date endDate1 = dtf.parseLocalDate(monthYear.replace(" ", ", ")).toDate();

            localStartDate = new LocalDate(startDate1);
            localEndDate = new LocalDate(endDate1);

            startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
            endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();

            KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountId);
            Account account = (Account) accresult.getEntityList().get(0);
            boolean isDebit = false;
            boolean isBalanceSheet = true;

            if (isBalanceSheet) {
                if (account.getGroup().getNature() == Group.NATURE_LIABILITY) {
                    isDebit = true;
                }
            } else if (account.getGroup().getNature() == Group.NATURE_EXPENSES) {
                isDebit = true;
            }
            double totalAmount[] = {0, 0};
            JSONArray chArr = new JSONArray();
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
//            double tempTotalAmount[] = accReportsService.formatAccountDetails(request, account, startDate, endDate, 0 + 1, isDebit, isBalanceSheet, chArr, newsdf, null, null);
            double tempTotalAmount[] = accReportsService.formatAccountDetails(paramJobj, account, startDate, endDate, 0 + 1, isDebit, isBalanceSheet, chArr, newsdf, null, null,null,null);
            totalAmount[0] += tempTotalAmount[0];
            obj.put("monthname", monthYear);
            double montlybudget = 0;
            if (accbudget != null) {
                montlybudget = getMontlyBudgetValue(accbudget, startDate.getMonth());
            }
            double montlyforecast = 0;
            if (accountForecast != null) {
                montlyforecast = getMontlyForecastValue(accountForecast, startDate.getMonth());
            }
            yearlybudget += montlybudget;
            yearlyforecast += montlyforecast;
            yearlyactual += tempTotalAmount[0];
            if (isYearlyBudgetFlag) {
                obj.put("monthlybudget", yearlybudget);
                obj.put("forecastbudget", yearlyforecast);
                obj.put("actualbalance", yearlyactual);
                obj.put("actvsbudget", yearlyactual - yearlybudget);
                obj.put("actvsfct", yearlyforecast - yearlyactual);
            } else {
                obj.put("monthlybudget", montlybudget);
                obj.put("forecastbudget", montlyforecast);
                obj.put("actualbalance", tempTotalAmount[0]);
                obj.put("actvsbudget", tempTotalAmount[0] - montlybudget);
                obj.put("actvsfct", montlyforecast - tempTotalAmount[0]);
            }
            for (int k = 0; k < monthList.size(); k++) {
                if (i > 0) {
                    if (k < i) {
                        obj.put("amount_" + k, montlyforecast);
                    } else {
                        obj.put("amount_" + k, tempTotalAmount[0]);
                    }
                } else {
                    obj.put("amount_" + k, tempTotalAmount[0]);
                }
            }

            count++;
            jArr.put(obj);
        }
        return jArr;
    }

    private JSONArray getMonthsJSONArray(HttpServletRequest request) throws JSONException {
        List monthList = getMonthList(request.getParameter("stdate"), request.getParameter("enddate"), "MMMM, yyyy");
        JSONArray monthArray = new JSONArray();
        for (int i = 0; i < monthList.size(); i++) {
            JSONObject monthObj = new JSONObject();
            monthObj.put("monthname", monthList.get(i));
            monthArray.put(monthObj);
        }
        return monthArray;
    }

    public ModelAndView exportAccountForecast(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray jArr = getAccountForecastReport(request, true);
            jobj.put(Constants.RES_data, jArr);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView exportBankBook(HttpServletRequest request, HttpServletResponse response) {
        accReportsService.exportBankBook(request, response);
        return new ModelAndView("jsonView_ex", "model", "");
    }

    public ModelAndView exportGeneralLedger(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = true;
        boolean noactivity = false;
        String msg = "";
        String view = "";
        String selectedBalPLId = "";
        double endingBalanceSummary = 0, openbalanceSummary = 0;
        boolean excludePreviousYear = request.getParameter("excludePreviousYear") != null ? Boolean.parseBoolean(request.getParameter("excludePreviousYear")) : false;
        boolean issubGeneralLedger = request.getParameter("issubGeneralLedger") != null ? Boolean.parseBoolean(request.getParameter("issubGeneralLedger")) : false;
        Date start = new Date(1970);
        ArrayList<GeneralLedger> generalLedgerList = new ArrayList<GeneralLedger>();
        Map<String, Object> financeDetailsMap = new HashMap<String, Object>();
        FinanceDetails financeDetails = new FinanceDetails();
        ArrayList<FinanceDetails> financeDetailsList = new ArrayList<FinanceDetails>();
        ArrayList<GeneralLedger> nonZeroGeneralLedgerList = new ArrayList<GeneralLedger>();
        FileOutputStream outputStream = null;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            extraCompanyPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            boolean isLandscape = request.getParameter("isLandscape") != null ? Boolean.parseBoolean(request.getParameter("isLandscape")) : false;
            boolean showChildAccountsInGl = false;
            if (extraCompanyPreferences != null && extraCompanyPreferences.isShowChildAccountsInGl()) {//Check to show Child accounts.
                showChildAccountsInGl = extraCompanyPreferences.isShowChildAccountsInGl();
            }
            boolean includeExcludeChildBalances = request.getParameter("includeExcludeChildBalances") != null ? Boolean.parseBoolean(request.getParameter("includeExcludeChildBalances")) : false;
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                view = "jsonView-empty";
                request.setAttribute("fileType", "print");
                ModelAndView result = getGeneralLedger(request, response);
                String model = (String) result.getModel().get("model");
                JSONObject objJSONObj = new JSONObject(model);
                objJSONObj.put("GenerateDate", GenerateDate);
                exportDaoObj.processRequest(request, response, objJSONObj);
                request.removeAttribute("fileType");

            } else {
                int templateflag = StringUtil.isNullOrEmpty(request.getParameter("templateflag")) ? 0 : Integer.parseInt(request.getParameter("templateflag"));
               
                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) cmpresult.getEntityList().get(0);
                financeDetails.setName(company.getCompanyName());
                financeDetails.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
                financeDetails.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
                financeDetails.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
                financeDetails.setCurrencyinword(company.getCurrency().getName() != null ? company.getCurrency().getName() : "");
                SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                DateFormat df2 = authHandler.getUserDateFormatterWithoutTimeZone(request);
                String endDate1 = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("enddate")));
                Calendar c = Calendar.getInstance();
                c.setTime(df.parse(endDate1)); // number of days to substract
                c.add(Calendar.DATE, 0);
                endDate1 = df.format(c.getTime());
                SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                String startDate2 = df2.format(sdf.parse(request.getParameter("startDate")));
                String endDate2 = df2.format(sdf.parse(request.getParameter("enddate")));
                String date1 = "From Date : " + startDate2 + ",To Date : " + endDate2;
                financeDetails.setDateRange(date1);

                KwlReturnObject compAccPrefResult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compAccPrefResult.getEntityList().get(0);
                String fiscalstart = df2.format(companyAccountPreferences.getFinancialYearFrom());
                Calendar c1 = Calendar.getInstance();
                c1.setTime(df2.parse(fiscalstart));
                c1.add(Calendar.YEAR, 1); // number of years to add
                c1.add(Calendar.DATE, -1);  //Check this line-VP
                String fiscalend = df2.format(c1.getTime());
                String accPeriod = "Accounting Period : " + fiscalstart + " - " + fiscalend;
                financeDetails.setAccountigperiod(accPeriod);   //to calculate financial year. mayur b

                Boolean isLedgerPrintCSV = !StringUtil.isNullOrEmpty(request.getParameter("isLedgerPrintCSV")) ? Boolean.parseBoolean(request.getParameter("isLedgerPrintCSV")) : false;
                HashMap<String, Object> requestParams = accAccountHandler.getRequestMap(request);
                String selectedAccountIds = request.getParameter("accountIds");
                if (!StringUtil.isNullOrEmpty(selectedAccountIds)) {
                    requestParams.put("selectedAccountIds", selectedAccountIds);
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("balPLId"))) {
                    selectedBalPLId = request.getParameter("balPLId");
                    requestParams.put("selectedBalPLId", selectedBalPLId);
                }
                if (requestParams.containsKey("acctypes") && requestParams.get("acctypes") != null && StringUtil.equal(requestParams.get("acctypes").toString(), "3")) {
                    noactivity = true;
                }
                boolean isGeneralLedger = false;
                if (!StringUtil.isNullOrEmpty(request.getParameter("isGeneralLedger"))) {
                    isGeneralLedger = Boolean.parseBoolean(request.getParameter("isGeneralLedger"));
                    requestParams.put("generalLedgerFlag", isGeneralLedger);
                }

                boolean threadFlag = false;
                if (!StringUtil.isNullOrEmpty(request.getParameter("threadflag"))) {
                    threadFlag = Boolean.parseBoolean(request.getParameter("threadflag"));

                }
                boolean isExportingSelectedRecord = false;
                if (!StringUtil.isNullOrEmpty(request.getParameter("isExportingSelectedRecord"))) {
                    isExportingSelectedRecord = Boolean.parseBoolean(request.getParameter("isExportingSelectedRecord"));
                    requestParams.put("isExportingSelectedRecord", isExportingSelectedRecord);
                }

                boolean isExportingCustomerVendorRecord = false;
                if (!StringUtil.isNullOrEmpty(request.getParameter("isExportingCustomerVendorRecord"))) {
                    isExportingCustomerVendorRecord = Boolean.parseBoolean(request.getParameter("isExportingCustomerVendorRecord"));
                }

                DateFormat dateFormat = authHandler.getDateOnlyFormat();

                requestParams.put("userid", sessionHandlerImpl.getUserid(request));

                boolean showAllAccountsInGl = false;
                if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAllAccountInGl()) { // Check to show all accounts.
                    showAllAccountsInGl = extraCompanyPreferences.isShowAllAccountInGl();
                }
                Date startDate = new Date(0);
                Date endDate = new Date();
                String sDate = request.getParameter("startDate");
                String eDate = request.getParameter("endDate");
                if (!StringUtil.isNullOrEmpty(sDate)) {
                    startDate = authHandler.getDateOnlyFormat().parse(sDate);
                }
                if (!StringUtil.isNullOrEmpty(eDate)) {
                    endDate = authHandler.getDateOnlyFormat().parse(eDate);
                }

                requestParams.put("showAllAccountsInGl", showAllAccountsInGl);
                requestParams.put("includeExcludeChildBalances", includeExcludeChildBalances);
                requestParams.put("showChildAccountsInGl", showChildAccountsInGl);
                requestParams.put("includeExcludeChildBalances", includeExcludeChildBalances);
                requestParams.put("startDate", startDate);
                requestParams.put("endDate", endDate);
                HashMap<String, Object> reqParams = AccountingManager.getGlobalParams(request);
                reqParams.put(Constants.REQ_startdate, request.getParameter("stdate"));
                reqParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
                reqParams.put("dateformat", authHandler.getDateOnlyFormat());
                boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
                String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                String Searchjson = request.getParameter(Constants.Acc_Search_Json);
                String filterCriteria = request.getParameter(Constants.Filter_Criteria);
                String invoiceSearchJson = "";
                String grSearchJson = "";
                String cnSearchJson = "";
                String dnSearchJson = "";
                String paymentSearchJson = "";
                String receiptSearchJson = "";
                String fixedAssetgrSearchJson = "";
                String fixedAssetInvoiceSearchJson = "";
                String leaseInvoiceSearchJson = "";
                if (threadFlag) {
                    if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_Search_Json))) {
                        requestParams.put(Constants.Acc_Search_Json, (request.getParameter(Constants.Acc_Search_Json) != null ? request.getParameter(Constants.Acc_Search_Json) : ""));
                    }
                    requestParams.put("excludePreviousYear", excludePreviousYear);
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
//                    requestParams.put("excludePreviousYearDate", accReportsService.getDateForExcludePreviousYearBalanceFilter(request, startDate));
                    requestParams.put("excludePreviousYearDate", accReportsService.getDateForExcludePreviousYearBalanceFilter(paramJobj, startDate));
                    requestParams.put("currencyIds", (request.getParameter("currencyIds") != null ? request.getParameter("currencyIds") : ""));
                    requestParams.put("startDate", request.getParameter("startDate"));
                    requestParams.put("endDate", request.getParameter("endDate"));
                    requestParams.put("costcenter", request.getParameter("costcenter"));
                    requestParams.put("DimensionBasedComparisionReport", (request.getAttribute("DimensionBasedComparisionReport") != null) ? request.getAttribute("DimensionBasedComparisionReport") : "");
                    requestParams.put(Constants.Acc_Search_Json, (request.getParameter(Constants.Acc_Search_Json) == null) ? "" : request.getParameter(Constants.Acc_Search_Json));
                    requestParams.put(Constants.Filter_Criteria, (request.getParameter(InvoiceConstants.Filter_Criteria) == null) ? "" : request.getParameter(InvoiceConstants.Filter_Criteria));
                    requestParams.put("templatecode", (StringUtil.isNullOrEmpty(request.getParameter("templatecode"))) ? -1 : Integer.parseInt(request.getParameter("templatecode")));
                    requestParams.put("periodView", request.getParameter("periodView") != null ? Boolean.parseBoolean(request.getParameter("periodView")) : false);
                    requestParams.put("netProfitClosesFlag", request.getAttribute("netProfitClosesFlag"));
                    requestParams.put("gstForm5Flag", request.getAttribute("gstForm5Flag") != null ? Boolean.parseBoolean((String) request.getAttribute("gstForm5Flag")) : false);
                    requestParams.put("forexAccID", request.getAttribute("forexAccID") != null ? (String) request.getAttribute("forexAccID") : "");
                    requestParams.put("isPeriod", request.getAttribute("isPeriod") != null ? (Boolean) request.getAttribute("isPeriod") : false);
                    requestParams.put("tocurrencyid", request.getParameter("tocurrencyid"));
                    requestParams.put("accountCodeNotAdded", (request.getParameter("accountCodeNotAdded") != null) ? request.getParameter("accountCodeNotAdded") : "");
                    requestParams.put("stdate", request.getParameter("stdate"));
                    requestParams.put("enddate", request.getParameter("enddate"));
                    requestParams.put("ledgerReport", request.getParameter("ledgerReport") != null ? Boolean.parseBoolean(request.getParameter("ledgerReport")) : false);
                    requestParams.put("consolidateFlag", request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false);
                    requestParams.put("bankBook", Boolean.parseBoolean((String) request.getParameter("bankBook")));
                    requestParams.put("ledgerReport", Boolean.parseBoolean((String) request.getParameter("ledgerReport")));
                    requestParams.put("filetype", request.getParameter("filetype"));
                    // for export to pdf:Thread
                    requestParams.put("dateRange", date1);
                    requestParams.put("accountingperiod", accPeriod);
                    requestParams.put("address", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                    requestParams.put("jrxmlRealPath", request.getSession().getServletContext().getRealPath("jrxml"));
                    requestParams.put("satsTemplateFlag", (templateflag == Constants.sats_templateflag));

                    SimpleDateFormat tzformat = new SimpleDateFormat("ddMMyyyy_hhmmssaa");
                    tzformat.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getTimeZoneDifference(request)));
                    requestParams.put("tzformat", tzformat); //To show run time date in Export Details Report with timezone.
                    String userdateformat = sessionHandlerImpl.getUserDateFormat(request);
                    requestParams.put("userdateformat", userdateformat);
                    requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));
                    exportLedger.add(requestParams);
                    //exportLedger.setRequestParams(requestParams);
                    exportLedger.setIsGeneralLedger(isGeneralLedger);
                    exportLedger.setIsLedgerPrintCSV(isLedgerPrintCSV);
                    exportLedger.setCompany(company);

                    exportLedger.setDateFormat(dateFormat);
                    Thread t = new Thread(exportLedger);        //Run method for this thread is available in ExportLedger.java
                    t.start();
                } else {
//                Set<String> uniqueChildAccount = new HashSet();
                    boolean isCustomColumnExport = false;
                    requestParams.put("exportGLCSV", true);
                    boolean isSplitOpeningBalanceAmount = accInvoiceCommon.isSplitOpeningBalanceAmount(sessionHandlerImpl.getCompanyid(request));
                    boolean isSplitOpeningBalanceSearch = accInvoiceCommon.isSplitOpeningBalanceSearch(request.getParameter(Constants.Acc_Search_Json), companyid);
                    HashMap<String, Object> hashMap = new HashMap();
                    hashMap.put("searchJson", request.getParameter(Constants.Acc_Search_Json));
                    hashMap.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                    boolean isSearchFieldForAsset = accInvoiceCommon.isSearchFieldForAsset(hashMap);
                    requestParams.put("isSplitOpeningBalanceSearch", isSplitOpeningBalanceSearch);
                    requestParams.put("isSplitOpeningBalanceAmount", isSplitOpeningBalanceAmount);
                    requestParams.put("isSearchFieldForAsset", isSearchFieldForAsset);
                    KwlReturnObject result = accAccountDAOobj.getAccounts(requestParams);
                    List list = result.getEntityList();
                    request.setAttribute("showChildAccountsInGl", showChildAccountsInGl);
                    String filterConjuctionCriteria = request.getParameter("filterConjuctionCriteria") != null ? request.getParameter("filterConjuctionCriteria") : "";
                    request.setAttribute("filterConjuctionCriteria", filterConjuctionCriteria);
                    request.setAttribute("Searchjson", Searchjson);
                    Map<String, Object> accountJsonparamMap = new HashMap<String, Object>();
                    accountJsonparamMap.put("noactivity", noactivity);
                    accountJsonparamMap.put("isCustomColumnExport", isCustomColumnExport);
                    JSONObject paramJobject = StringUtil.convertRequestToJsonObject(request);
                    paramJobject.put("includeExcludeChildBalances", includeExcludeChildBalances);
                    paramJobject.put("generalLedgerFlag", isGeneralLedger);
                    paramJobject.put("showChildAccountsInGl", showChildAccountsInGl);
                    paramJobject.put("isGeneralLedger", isGeneralLedger);
//                    jobj = accFinancialReportsService.getAccountJson(request, list, accCurrencyDAOobj, accountJsonparamMap);
                    jobj = accFinancialReportsService.getAccountJson(paramJobject, list, accCurrencyDAOobj, accountJsonparamMap);
                    request.removeAttribute("isGeneralLedger");
                    JSONArray jSONArray = jobj.getJSONArray(Constants.RES_data);
                    Set<String> accountIdSet = new HashSet<String>();
                    Map<String, BillingInvoice> billingInvoiceMapGL = new HashMap<String, BillingInvoice>();
                    Map<String, BillingGoodsReceipt> billingGrMapGL = new HashMap<String, BillingGoodsReceipt>();
                    Map<String, Object[]> billingCreditNoteMapGL = new HashMap<String, Object[]>();
                    Map<String, Object[]> billingDebitNoteMapGL = new HashMap<String, Object[]>();
                    Map<String, Object[]> billingPaymentReceivedMapGL = new HashMap<String, Object[]>();
                    Map<String, Object[]> billingPaymentMadeMapGL = new HashMap<String, Object[]>();
                    Map<String, Invoice> invoiceMapGL = new HashMap<String, Invoice>();
                    Map<String, GoodsReceipt> grMapGL = new HashMap<String, GoodsReceipt>();
                    Map<String, Object[]> creditNoteMapGL = new HashMap<String, Object[]>();
                    Map<String, Object[]> creditNoteMapVendorGL = new HashMap<String, Object[]>();
                    Map<String, Object[]> debitNoteMapGL = new HashMap<String, Object[]>();
                    Map<String, Object[]> debitNoteMapCustomerGL = new HashMap<String, Object[]>();
                    Map<String, Object[]> paymentReceivedMapGL = new HashMap<String, Object[]>();
                    Map<String, Object[]> paymentMadeMapGL = new HashMap<String, Object[]>();
                    Map<String, GoodsReceipt> fixedAssetgrMapGL = new HashMap<String, GoodsReceipt>();
                    Map<String, Invoice> fixedAssetInvoiceMapGL = new HashMap<String, Invoice>();
                    Map<String, Invoice> leaseInvoiceMapGL = new HashMap<String, Invoice>();
                    Map<String, Invoice> cashSalesGL = new HashMap<String, Invoice>();
                    Map<String, GoodsReceipt> cashPurchaseGL = new HashMap<String, GoodsReceipt>();
                    Map<String, Integer> jeDetailPaymentTypeMapGL = new HashMap<String, Integer>();
                    Map<String, Integer> jeDetailReceiptTypeMapGL = new HashMap<String, Integer>();
                    if (jSONArray.length() > 0 && isGeneralLedger) {
                        if (!StringUtil.isNullOrEmpty(Searchjson) && !StringUtil.isNullOrEmpty(filterCriteria)) {
                            reqParams.put("isIAF", true);
                            HashMap<String, Object> reqPar1 = new HashMap<String, Object>();
                            reqPar1.put(Constants.companyKey, companyid);
                            reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                            reqPar1.put(Constants.Filter_Criteria, filterCriteria);

                            reqPar1.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                            invoiceSearchJson = accReportsService.getSearchJsonByModule(reqPar1);

                            reqPar1.remove(Constants.moduleid);
                            reqPar1.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                            grSearchJson = accReportsService.getSearchJsonByModule(reqPar1);

                            reqPar1.remove(Constants.moduleid);
                            reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                            cnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);

                            reqPar1.remove(Constants.moduleid);
                            reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                            dnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);

                            reqPar1.remove(Constants.moduleid);
                            reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                            paymentSearchJson = accReportsService.getSearchJsonByModule(reqPar1);

                            reqPar1.remove(Constants.moduleid);
                            reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                            receiptSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                            
                            reqPar1.remove(Constants.moduleid);
                            reqPar1.put(Constants.moduleid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId);
                            fixedAssetgrSearchJson = accReportsService.getSearchJsonByModule(reqPar1);

                            reqPar1.remove(Constants.moduleid);
                            reqPar1.put(Constants.moduleid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId);
                            fixedAssetInvoiceSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                            
                            reqPar1.remove(Constants.moduleid);
                            reqPar1.put(Constants.moduleid, Constants.LEASE_INVOICE_MODULEID);
                            leaseInvoiceSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                        }
                        if (!consolidateFlag) {
                            HashMap<String, Object> reqParams1 = new HashMap<String, Object>();
                            HashMap<String, Object> reqParams2 = new HashMap<String, Object>();

                            reqParams.put(Constants.companyKey, companyid);
                            reqParams.put(Constants.globalCurrencyKey, gcurrencyid);
                            reqParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));

                            billingGrMapGL = accReportsService.getBillingGoodsReceiptMap(reqParams);
                            billingCreditNoteMapGL = accReportsService.getBillingCreditNoteMap(reqParams);
                            billingDebitNoteMapGL = accReportsService.getBillingDebitNoteMap(reqParams);
                            billingPaymentReceivedMapGL = accReportsService.getBillingPaymentReceivedMap(reqParams);
                            billingPaymentMadeMapGL = accReportsService.getBillingPaymentMadeMap(reqParams);
                            // reqParams.put("")
                            // reqParams.put("isFixedAsset", true);
                            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                                reqParams.put(Constants.Acc_Search_Json, invoiceSearchJson);
                            }
                            invoiceMapGL = accReportsService.getInvoiceMapNew(reqParams);
                            reqParams2.putAll(reqParams);
                            reqParams2.put("cashonly", "true");
                            cashSalesGL = accReportsService.getInvoiceMapNew(reqParams2);
                            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                                reqParams.remove(Constants.Acc_Search_Json);
                                reqParams.put(Constants.Acc_Search_Json, fixedAssetInvoiceSearchJson);
                            }
                            reqParams1.putAll(reqParams);
                            reqParams1.put("isFixedAsset", true);
                            
                            fixedAssetInvoiceMapGL = accReportsService.getInvoiceMapNew(reqParams1);
                            
                            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                                reqParams.remove(Constants.Acc_Search_Json);
                                reqParams.put(Constants.Acc_Search_Json, leaseInvoiceSearchJson);
                            }
                            reqParams1.putAll(reqParams);
                            reqParams1.remove("isFixedAsset");
                            reqParams1.put("isLeaseFixedAsset", true);
                            leaseInvoiceMapGL = accReportsService.getInvoiceMapNew(reqParams1);
                            
                            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                                reqParams.remove(Constants.Acc_Search_Json);
                                reqParams.put(Constants.Acc_Search_Json, grSearchJson);
                            }
                            grMapGL = accReportsService.getGoodsReceiptMapNew(reqParams);
                            reqParams1.clear();
                            reqParams2.clear();
                            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                                reqParams.remove(Constants.Acc_Search_Json);
                                reqParams.put(Constants.Acc_Search_Json, fixedAssetgrSearchJson);
                            }
                            reqParams1.putAll(reqParams);
                            reqParams1.put("isFixedAsset", true);
                            fixedAssetgrMapGL = accReportsService.getGoodsReceiptMapNew(reqParams1);
                            
                            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                                reqParams.remove(Constants.Acc_Search_Json);
                                reqParams.put(Constants.Acc_Search_Json, grSearchJson);
                            }
                            reqParams2.putAll(reqParams);
                            reqParams2.put("cashonly", "true");
                            cashPurchaseGL = accReportsService.getGoodsReceiptMapNew(reqParams2);
                            
                            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                                reqParams.remove(Constants.Acc_Search_Json);
                                reqParams.put(Constants.Acc_Search_Json, cnSearchJson);
                            }
                            creditNoteMapGL = accReportsService.getCreditNoteMap(reqParams);
                            creditNoteMapVendorGL = accReportsService.creditNoteMapVendor(reqParams);

                            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                                reqParams.remove(Constants.Acc_Search_Json);
                                reqParams.put(Constants.Acc_Search_Json, dnSearchJson);
                            }
                            debitNoteMapGL = accReportsService.getDebitNoteMap(reqParams);
                            debitNoteMapCustomerGL = accReportsService.debitNoteMapCustomer(reqParams);

                            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                                reqParams.remove(Constants.Acc_Search_Json);
                                reqParams.put(Constants.Acc_Search_Json, receiptSearchJson);
                            }
                            paymentReceivedMapGL = accReportsService.getPaymentReceivedMap(reqParams);

                            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                                reqParams.remove(Constants.Acc_Search_Json);
                                reqParams.put(Constants.Acc_Search_Json, paymentSearchJson);
                            }
                            paymentMadeMapGL = accReportsService.getPaymentMadeMap(reqParams);

                            invoiceMapGL.putAll(cashSalesGL);
                            grMapGL.putAll(cashPurchaseGL);
                            for (String jeid : paymentMadeMapGL.keySet()) {
                                if (!StringUtil.isNullOrEmpty(jeid)) {
                                    Payment tempp = (Payment) paymentMadeMapGL.get(jeid)[0];
                                    if (tempp != null) {
                                        accReportsService.createJEDetailPaymentTypeMapNew(tempp, jeDetailPaymentTypeMapGL, companyid);
                                    }
                                }
                            }
                            for (String jeid : paymentReceivedMapGL.keySet()) {
                                if (!StringUtil.isNullOrEmpty(jeid)) {
                                    Receipt tempr = (Receipt) paymentReceivedMapGL.get(jeid)[0];
                                    if (tempr != null) {
                                        accReportsService.createJEDetailReceiptTypeMapNew(tempr, jeDetailReceiptTypeMapGL, companyid);
                                    }
                                }
                            }
                        }
                    }
                    StringBuilder reportSB = new StringBuilder();
                    String filetype = request.getParameter("filetype");
                    SimpleDateFormat sdfTemp = new SimpleDateFormat("ddMMyyyy_hhmmssaa");
                    String filename = storageHandlerImpl.GetDocStorePath() + "GL_" + sdfTemp.format(new Date()).toString() + ".csv";

                    boolean headersFlag = false;
                    if (isLedgerPrintCSV) {
                        reportSB.append("\"Account Code\",\"Alias Code\",\"Account Name\",\"Type\",\"Date\",\"JE Number\",\"Number\",\"Name(Payer/Payee)\""
                                + ",\"Double Entry Movement\",\"Memo\",\"Description\",\"Exchange Rate\",\"Opening Balance\",\"Debit\",\"Credit\",\"Balance\"\n");
                    }
                    for (int count = 0; count < jSONArray.length(); count++) {
                        if (jSONArray.getJSONObject(count).has("accid") && !accountIdSet.contains(jSONArray.getJSONObject(count).getString("accid"))) {
                            String acccode = "";
                            String aliascode = "";
                            String accname = "";
                            String accId = jSONArray.getJSONObject(count).getString("accid");
                            String accounttypestring = jSONArray.getJSONObject(count).getString("accounttypestring");
                            accountIdSet.add(accId);
                            KwlReturnObject accountResult = accountingHandlerDAOobj.getObject("com.krawler.hql.accounting.Account", accId);
                            KwlReturnObject custResult = accountingHandlerDAOobj.getObject("com.krawler.hql.accounting.Customer", accId);
                            KwlReturnObject venResult = accountingHandlerDAOobj.getObject("com.krawler.hql.accounting.Vendor", accId);
                            if (custResult.getEntityList().get(0) != null || venResult.getEntityList().get(0) != null) {
                                jSONArray.getJSONObject(count).put("isOnlyAccount", "false");
                            } else {
                                jSONArray.getJSONObject(count).put("isOnlyAccount", "true");
                            }
                            if (!noactivity) {
                                if (isGeneralLedger) {
                                    double openingBalance = 0d, calculateOpeningBalance = 0, calculateOpenbalanceInbase = 0d, openbalanceInbase = 0d, endingBalance = 0d, calculatePeriodBalance = 0d, periodBalance = 0d;
                                    if (excludePreviousYear && accounttypestring.equals(Group.ACC_TYPE_PROFITLOSSSTR)) {
                                        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
//                                        start = accReportsService.getDateForExcludePreviousYearBalanceFilter(request, startDate);
                                        start = accReportsService.getDateForExcludePreviousYearBalanceFilter(paramJobj, startDate);
                                    } else {
                                        start = new Date(1970);
                                    }
                                    Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();  //end date used to calculate Opening Balance
                                    if (accountResult.getEntityList().get(0) != null) {
                                        Account account = (Account) accountResult.getEntityList().get(0);
//                                    System.out.println("Account: " + count + ", Name: " + account.getAccountName() + ", Time: " + new Date());
                                        acccode = account.getAcccode() != null ? account.getAcccode() : "";
                                        aliascode = account.getAliascode() != null ? account.getAliascode() : "";
                                        accname = account.getName() != null ? account.getName() : "";
                                        List childlist = new ArrayList(account.getChildren());
                                        if (!account.isDeleted()) {
                                            openingBalance = jSONArray.getJSONObject(count).getDouble("openbalance");
                                            openbalanceInbase = jSONArray.getJSONObject(count).getDouble("openbalanceinbase");
                                            String selectedCurrencyIds = request.getParameter("currencyIds") != null ? request.getParameter("currencyIds") : "";
                                            String[] selectedCurrencyIdsArray = null;
                                            if (!StringUtil.isNullOrEmpty(selectedCurrencyIds)) {
                                                selectedCurrencyIdsArray = selectedCurrencyIds.split(",");
                                            }
                                            boolean currencyFlag = false;
                                            if (selectedCurrencyIdsArray != null) {
                                                for (String obj : selectedCurrencyIdsArray) {
                                                    if (account.getCurrency().getCurrencyID().equals(obj)) {
                                                        currencyFlag = false;
                                                        break;
                                                    } else {
                                                        currencyFlag = true;
                                                    }
                                                }
                                            }
                                            if (childlist.isEmpty()) {
//                                            if (isGeneralLedger && !StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_Search_Json))) {
//                                                /*
//                                                    code in this if is done for ERP-13428 ticket:-
//                                                    * 1)do not include opening balance of account
//                                                    * 2) do not include opening trasactions amount of customer/vendor mapped with this current account when advanced search is performed on dimension
//                                                    * 3)when advanced search is performed on dimension then  documents are  considered for calculation are - saved with that dimension.
//                                                 */
//                                                openingBalance = 0;
//                                                openbalanceInbase = 0;
//                                            }
                                                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
//                                                periodBalance = accReportsService.getAccountBalance(request, account.getID(), startDate, endDate);
//                                                calculateOpeningBalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openingBalance;
                                                // calculateOpenbalanceInbase = accReportsService.getAccountBalanceWithOutClosing(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openbalanceInbase;
                                                periodBalance = accReportsService.getAccountBalance(paramJobj, account.getID(), startDate, endDate,null);
                                                calculateOpeningBalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(paramJobj, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openingBalance;
                                                calculateOpenbalanceInbase = accReportsService.getAccountBalanceWithOutClosing(paramJobj, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate,null) + openbalanceInbase;

                                                calculatePeriodBalance = periodBalance;
                                                if (account.getCreationDate().compareTo(startDate) < 0) {
                                                    calculateOpeningBalance -= openingBalance;
                                                    calculateOpenbalanceInbase -= openbalanceInbase;
                                                } else if (account.getCreationDate().compareTo(startDate) == 0) {
                                                    calculateOpeningBalance -= openingBalance;
                                                    calculateOpenbalanceInbase -= openbalanceInbase;
                                                    if (currencyFlag) {
                                                        calculatePeriodBalance = periodBalance;
                                                    } else {
                                                        calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                    }
                                                } else if (account.getCreationDate().compareTo(startDate) > 0 && account.getCreationDate().compareTo(endDate) < 0) {
                                                    if (currencyFlag) {
                                                        calculateOpeningBalance -= openingBalance;
                                                        calculateOpenbalanceInbase -= openbalanceInbase;
                                                    } else if (account.getCreationDate().compareTo(startDate) == 0) {
                                                        calculateOpeningBalance -= openingBalance;
                                                        calculateOpenbalanceInbase -= openbalanceInbase;
                                                        if (currencyFlag) {
                                                            calculatePeriodBalance = periodBalance;
                                                        } else {
                                                            calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                        }
                                                    } else if (account.getCreationDate().compareTo(startDate) > 0 && account.getCreationDate().compareTo(endDate) < 0) {
                                                        if (currencyFlag) {
                                                            calculateOpeningBalance -= openingBalance;
                                                            calculateOpenbalanceInbase -= openbalanceInbase;
                                                            calculatePeriodBalance = periodBalance;
                                                        } else {
                                                            calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                            calculateOpenbalanceInbase -= openbalanceInbase;
                                                        }
                                                    }
                                                }
                                                    endingBalance = calculateOpenbalanceInbase + calculatePeriodBalance;
                                                } else {
                                                    if (showChildAccountsInGl) {
                                                        if (includeExcludeChildBalances) {
                                                            request.setAttribute("stdate", sDate);
                                                            request.setAttribute("isPeriod", true);
                                                            //Calculate parent period balance
                                                            periodBalance = getAccountBalance(request, account.getID(), startDate, endDate);
                                                            //Calculate child period balance
                                                            periodBalance = accReportsService.getParentOpeningBalance(account, periodBalance, request, startDate, endDate);
                                                            calculateOpeningBalance = openingBalance;//getOpeningBalance+openingBalance;
                                                            request.setAttribute("isPeriod", false);
                                                            calculateOpenbalanceInbase = getAccountBalance(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate);
                                                            calculateOpenbalanceInbase = accReportsService.getParentOpeningBalance(account, calculateOpenbalanceInbase, request, excludePreviousYear ? start : new Date(0), openBalEndDate);
                                                            calculatePeriodBalance = periodBalance;
                                                        } else {
                                                            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
//                                                            periodBalance = accReportsService.getAccountBalance(request, account.getID(), startDate, endDate);
                                                            periodBalance = accReportsService.getAccountBalance(paramJobj, account.getID(), startDate, endDate,null);
//                                                            calculateOpeningBalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openingBalance;
                                                            calculateOpeningBalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(paramJobj, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openingBalance;
                                                            calculateOpenbalanceInbase = accReportsService.getAccountBalanceWithOutClosing(paramJobj, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate,null) + openbalanceInbase;
                                                            calculatePeriodBalance = periodBalance;
                                                            if (account.getCreationDate().compareTo(startDate) < 0) {
                                                                calculateOpeningBalance -= openingBalance;
                                                                calculateOpenbalanceInbase -= openbalanceInbase;
                                                            } else if (account.getCreationDate().compareTo(startDate) == 0) {
                                                                calculateOpeningBalance -= openingBalance;
                                                                calculateOpenbalanceInbase -= openbalanceInbase;
                                                                if (currencyFlag) {
                                                                    calculatePeriodBalance = periodBalance;
                                                                } else {
                                                                    calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                                }
                                                            } else if (account.getCreationDate().compareTo(startDate) > 0 && account.getCreationDate().compareTo(endDate) < 0) {
                                                                if (currencyFlag) {
                                                                    calculateOpeningBalance -= openingBalance;
                                                                    calculateOpenbalanceInbase -= openbalanceInbase;
                                                                } else if (account.getCreationDate().compareTo(startDate) == 0) {
                                                                    calculateOpeningBalance -= openingBalance;
                                                                    calculateOpenbalanceInbase -= openbalanceInbase;
                                                                    if (currencyFlag) {
                                                                        calculatePeriodBalance = periodBalance;
                                                                    } else {
                                                                        calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                                    }
                                                                } else if (account.getCreationDate().compareTo(startDate) > 0 && account.getCreationDate().compareTo(endDate) < 0) {
                                                                    if (currencyFlag) {
                                                                        calculateOpeningBalance -= openingBalance;
                                                                        calculateOpenbalanceInbase -= openbalanceInbase;
                                                                        calculatePeriodBalance = periodBalance;
                                                                    } else {
                                                                        calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                                        calculateOpenbalanceInbase -= openbalanceInbase;
                                                                    }
                                                                }
                                                            }
                                                          }
                                                        }  else {
                                                        if (includeExcludeChildBalances) {
                                                            request.setAttribute("isPeriod", true);
                                                            //Calculate parent period balance
                                                            periodBalance = getAccountBalance(request, account.getID(), startDate, endDate);
                                                            //Calculate child period balance
                                                            periodBalance = accReportsService.getParentOpeningBalance(account, periodBalance, request, startDate, endDate);
                                                            calculateOpeningBalance = openingBalance;//getOpeningBalance+openingBalance;
                                                            request.setAttribute("isPeriod", false);
                                                            calculateOpenbalanceInbase = getAccountBalance(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate);
                                                            calculateOpenbalanceInbase = accReportsService.getParentOpeningBalance(account, calculateOpenbalanceInbase, request, excludePreviousYear ? start : new Date(0), openBalEndDate);
                                                            calculatePeriodBalance = periodBalance;
                                                        } else {
                                                            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                                                            periodBalance = accReportsService.getAccountBalance(paramJobj, account.getID(), startDate, endDate,null);
//                                                            calculateOpeningBalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openingBalance;
                                                            calculateOpeningBalance = accFinancialReportsService.getAccountBalanceInOriginalCurrency(paramJobj, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openingBalance;
//                                                            calculateOpenbalanceInbase = accReportsService.getAccountBalanceWithOutClosing(request, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate) + openbalanceInbase;
                                                            calculateOpenbalanceInbase = accReportsService.getAccountBalanceWithOutClosing(paramJobj, account.getID(), excludePreviousYear ? start : new Date(0), openBalEndDate,null) + openbalanceInbase;
                                                            calculatePeriodBalance = periodBalance;
                                                            if (account.getCreationDate().compareTo(startDate) < 0) {
                                                                calculateOpeningBalance -= openingBalance;
                                                                calculateOpenbalanceInbase -= openbalanceInbase;
                                                            } else if (account.getCreationDate().compareTo(startDate) == 0) {
                                                                calculateOpeningBalance -= openingBalance;
                                                                calculateOpenbalanceInbase -= openbalanceInbase;
                                                                if (currencyFlag) {
                                                                    calculatePeriodBalance = periodBalance;
                                                                } else {
                                                                    calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                                }
                                                            } else if (account.getCreationDate().compareTo(startDate) > 0 && account.getCreationDate().compareTo(endDate) < 0) {
                                                                if (currencyFlag) {
                                                                    calculateOpeningBalance -= openingBalance;
                                                                    calculateOpenbalanceInbase -= openbalanceInbase;
                                                                } else if (account.getCreationDate().compareTo(startDate) == 0) {
                                                                    calculateOpeningBalance -= openingBalance;
                                                                    calculateOpenbalanceInbase -= openbalanceInbase;
                                                                    if (currencyFlag) {
                                                                        calculatePeriodBalance = periodBalance;
                                                                    } else {
                                                                        calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                                    }
                                                                } else if (account.getCreationDate().compareTo(startDate) > 0 && account.getCreationDate().compareTo(endDate) < 0) {
                                                                    if (currencyFlag) {
                                                                        calculateOpeningBalance -= openingBalance;
                                                                        calculateOpenbalanceInbase -= openbalanceInbase;
                                                                        calculatePeriodBalance = periodBalance;
                                                                    } else {
                                                                        calculatePeriodBalance = periodBalance - openbalanceInbase;
                                                                        calculateOpenbalanceInbase -= openbalanceInbase;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        endingBalance = calculateOpenbalanceInbase + calculatePeriodBalance;
                                                    }
                                                    if (account.getParent() == null && !showChildAccountsInGl) {
                                                        openbalanceSummary += calculateOpenbalanceInbase;
                                                        endingBalanceSummary += endingBalance;
                                                    } else if (showChildAccountsInGl) {
                                                        openbalanceSummary += calculateOpenbalanceInbase;
                                                        endingBalanceSummary += endingBalance;
                                                    }
                                                }

                                        request.setAttribute("accountid", accId);
                                        jobj = accReportsService.getLedgerForGL(request, billingInvoiceMapGL, billingGrMapGL, billingCreditNoteMapGL, billingDebitNoteMapGL, billingPaymentReceivedMapGL, billingPaymentMadeMapGL,
                                                invoiceMapGL, grMapGL, creditNoteMapGL, creditNoteMapVendorGL, debitNoteMapGL, debitNoteMapCustomerGL, paymentReceivedMapGL, paymentMadeMapGL,
                                                fixedAssetgrMapGL, fixedAssetInvoiceMapGL, leaseInvoiceMapGL, jeDetailPaymentTypeMapGL, jeDetailReceiptTypeMapGL);
                                                boolean emptyTransactionFlag = true;
                                                double debitsum = 0;
                                                double creditsum = 0;
                                                double balance = 0;

                                                JSONArray objJSONArray = jobj.getJSONArray(Constants.RES_data);

                           /*This code is added to display the 
                            * Opening amount of Account
                            * We do not required this code in the Customer wise GL Report. - Mayur B.
                            */
                            
                                    if ((isLedgerPrintCSV && isExportingCustomerVendorRecord)||!isExportingCustomerVendorRecord) {
                                                GeneralLedger generalLedger1 = new GeneralLedger();
                                                generalLedger1.setAcccode(acccode);
                                                generalLedger1.setAccname(accname);
                                                generalLedger1.setAccountGroupID(accId);
                                                if (!isLedgerPrintCSV) {
                                                    generalLedger1.setAliascode(aliascode);
                                                    generalLedger1.setClosing(endingBalance);//done for ERP-13428 closing balance is not displayed .
                                                }
                                                generalLedger1.setOpening(calculateOpenbalanceInbase);
                                                generalLedger1.setBalance(calculateOpenbalanceInbase);
                                                if (!issubGeneralLedger) {
                                                    generalLedgerList.add(generalLedger1);
                                                }
                                                if (!showAllAccountsInGl) {
                                                    if (calculateOpenbalanceInbase != 0 || endingBalance != 0 || calculatePeriodBalance != 0) {
                                                        nonZeroGeneralLedgerList.add(generalLedger1);
                                                    }
                                                }
                                    }

                                                double parentGrandTotalDebitSum = 0;
                                                double parentGrandTotalCreditSum = 0;
                                                boolean isParentAccount = false;
                                                boolean isParentAccountNotHaveAnyTransaction = true;
                                                HashMap<String, Double> balanceAmtMap = new HashMap<String, Double>();

                                                for (int count1 = 0; count1 < objJSONArray.length(); count1++) {
                                                    if (!((objJSONArray.length() == 1 || objJSONArray.length() == 2) && ((objJSONArray.getJSONObject(count1).getString("d_accountname")).equals("Opening Balance") || (objJSONArray.getJSONObject(count1).getString("d_accountname")).equals("Balance c/f") || (objJSONArray.getJSONObject(count1).getString("d_accountname")).equals("Balance b/d") || (objJSONArray.getJSONObject(count1).getString("c_accountname")).equals("Opening Balance") || (objJSONArray.getJSONObject(count1).getString("c_accountname")).equals("Balance c/f") || (objJSONArray.getJSONObject(count1).getString("c_accountname")).equals("Balance b/d")))) {
                                                        emptyTransactionFlag = false;
                                                    }
                                                    if ((objJSONArray.getJSONObject(count1).getString("d_accountname")).equals("Opening Balance")
                                                            || (objJSONArray.getJSONObject(count1).getString("d_accountname")).equals("Balance c/f")
                                                            || (objJSONArray.getJSONObject(count1).getString("d_accountname")).equals("Balance b/d")
                                                            || (objJSONArray.getJSONObject(count1).getString("c_accountname")).equals("Opening Balance")
                                                            || (objJSONArray.getJSONObject(count1).getString("c_accountname")).equals("Balance c/f")
                                                            || (objJSONArray.getJSONObject(count1).getString("c_accountname")).equals("Balance b/d")
                                                            || !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).optString("isnetbalance", ""))) {
                                                        continue;
                                                    } else {

                                                        String transactionAccountId = objJSONArray.getJSONObject(count1).getString("accountid");

                                                        if (accId.equals(transactionAccountId) || !isLedgerPrintCSV) {//ERP-8745,ERP-8700 in case of Child account transactions- transaction accountid will not be equal to parent(selected) account id--> so this indicates that child account transaction is beibg iterate and in CSV Export we don't need show child account transactions in front of parent, only child account transaction amount will be shown in Grand Total

                                                            GeneralLedger generalLedger = new GeneralLedger();
                                                            String transactionSymbol = "";
                                                            String transactionDateString = "";
                                                            double exchangeRateAmount = 0.0;
                                                            generalLedger.setAcccode(acccode);
                                                            generalLedger.setAliascode(aliascode);
                                                            generalLedger.setAccname(accname);
                                                            generalLedger.setDate(!StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).getString("d_date")) ? df2.format(authHandler.getDateOnlyFormat().parse(objJSONArray.getJSONObject(count1).getString("d_date"))) : !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).getString("c_date")) ? df2.format(authHandler.getDateOnlyFormat().parse(objJSONArray.getJSONObject(count1).getString("c_date"))) : "");
                                                            generalLedger.setVoucherno(!StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).getString("d_transactionID")) ? objJSONArray.getJSONObject(count1).getString("d_transactionID") : !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).getString("c_transactionID")) ? objJSONArray.getJSONObject(count1).getString("c_transactionID") : "");
                                                            String name = !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).getString("d_accountname")) ? objJSONArray.getJSONObject(count1).getString("d_accountname") : !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).getString("c_accountname")) ? objJSONArray.getJSONObject(count1).getString("c_accountname") : "";
                                                            String desc = "";
                                                            if (isLedgerPrintCSV) {
                                                                desc = !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).optString("d_transactionDetailsForExpander", "")) ? objJSONArray.getJSONObject(count1).optString("d_transactionDetailsForExpander", "") : !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).optString("c_transactionDetailsForExpander", "")) ? objJSONArray.getJSONObject(count1).optString("c_transactionDetailsForExpander", "") : "";
                                                            } else {
                                                                desc = !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).optString("d_transactionDetails", "")) ? objJSONArray.getJSONObject(count1).optString("d_transactionDetails", "") : !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).optString("c_transactionDetails", "")) ? objJSONArray.getJSONObject(count1).optString("c_transactionDetails", "") : "";
                                                            }
                                                            String memo = objJSONArray.getJSONObject(count1).optString("memoValue", "");
                                                            String type = !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).optString("type", "")) ? objJSONArray.getJSONObject(count1).getString("type") : "";
                                                            String payer = !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).optString("payer", "")) ? objJSONArray.getJSONObject(count1).getString("payer") : "";
                                                            String JENumber = !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).optString("d_entryno", "")) ? objJSONArray.getJSONObject(count1).getString("d_entryno") : !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).optString("c_entryno", "")) ? objJSONArray.getJSONObject(count1).getString("c_entryno") : "";

                                                            String personid = objJSONArray.getJSONObject(count1).optString("personid", "");
                                                            String personname = objJSONArray.getJSONObject(count1).optString("personname", "");
                                                            boolean isVendor = Boolean.parseBoolean(objJSONArray.getJSONObject(count1).optString("isVendor", "false"));
                                                            generalLedger.setPersonID(personid);
                                                            generalLedger.setPersonName(personname);
                                                            int personType = personid.equals("")?3:(isVendor? 2:1);
                                                            generalLedger.setTransactionTypePerson(personType);
                                                                
                                                            generalLedger.setName(name);
                                                            generalLedger.setType(type);
                                                            generalLedger.setMemo(memo);
                                                            generalLedger.setPayer(payer);
                                                            generalLedger.setDesc(desc);
                                                            generalLedger.setOnlydesc(desc);
                                                            generalLedger.setJEnumber(JENumber);

                                                            if (!StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).optString("transactionCurrency", ""))) {
                                                                if (objJSONArray.getJSONObject(count1).getString("transactionCurrency").equals(company.getCurrency().getCurrencyID())) {
                                                                    generalLedger.setErate("1");
                                                                    generalLedger.setCurrencyName(!StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).getString("transactionSymbol")) ? objJSONArray.getJSONObject(count1).getString("transactionSymbol") : "");
                                                                } else {
                                                                    if (objJSONArray.getJSONObject(count1).optDouble("d_amount", 0) > 0.0) {
                                                                        transactionSymbol = !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).getString("transactionSymbol")) ? objJSONArray.getJSONObject(count1).getString("transactionSymbol") : "";
                                                                        transactionDateString = !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).getString("transactionDateString")) ? objJSONArray.getJSONObject(count1).getString("transactionDateString") : "";
                                                                        exchangeRateAmount = ((objJSONArray.getJSONObject(count1).getDouble("d_amount") / objJSONArray.getJSONObject(count1).getDouble("transactionAmount")) * 100 / 100);
                                                                        generalLedger.setCurrencyName(transactionSymbol + "(" + transactionDateString + ")");
                                                                        double externalcurrencyrate = objJSONArray.getJSONObject(count1).optDouble("d_externalcurrencyrate", 0);
                                                                        if(externalcurrencyrate != 0){
                                                                            externalcurrencyrate = 1 / externalcurrencyrate;
                                                                            externalcurrencyrate =  (Math.round(externalcurrencyrate*Constants.ROUND_OFF_NUMBER))/Constants.ROUND_OFF_NUMBER;
                                                                            generalLedger.setErate(externalcurrencyrate+"");
                                                                        } else {
                                                                            generalLedger.setErate(exchangeRateAmount+"");
                                                                        }
                                                                    } else if (objJSONArray.getJSONObject(count1).optDouble("c_amount", 0) > 0.0) {
                                                                        transactionSymbol = !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).getString("transactionSymbol")) ? objJSONArray.getJSONObject(count1).getString("transactionSymbol") : "";
                                                                        transactionDateString = !StringUtil.isNullOrEmpty(objJSONArray.getJSONObject(count1).getString("transactionDateString")) ? objJSONArray.getJSONObject(count1).getString("transactionDateString") : "";
                                                                        exchangeRateAmount = ((objJSONArray.getJSONObject(count1).getDouble("c_amount") / objJSONArray.getJSONObject(count1).getDouble("transactionAmount")) * 100 / 100);
                                                                        generalLedger.setCurrencyName(transactionSymbol + "(" + transactionDateString + ")");
                                                                        double externalcurrencyrate = objJSONArray.getJSONObject(count1).optDouble("c_externalcurrencyrate", 0);
                                                                        if(externalcurrencyrate != 0){
                                                                            externalcurrencyrate = 1 / externalcurrencyrate;
                                                                            externalcurrencyrate = (Math.round(externalcurrencyrate*Constants.ROUND_OFF_NUMBER))/Constants.ROUND_OFF_NUMBER;
                                                                            generalLedger.setErate(externalcurrencyrate+"");
                                                                        } else {
                                                                            generalLedger.setErate(exchangeRateAmount+"");
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            debitsum = debitsum + objJSONArray.getJSONObject(count1).optDouble("d_amount", 0);
                                                            creditsum = creditsum + objJSONArray.getJSONObject(count1).optDouble("c_amount", 0);
                                                            balance = objJSONArray.getJSONObject(count1).optDouble("balanceAmount", 0);
                                                            balanceAmtMap.put(transactionAccountId, balance);
                                                            generalLedger.setDebit(objJSONArray.getJSONObject(count1).optDouble("d_amount", 0));
                                                            generalLedger.setCredit(objJSONArray.getJSONObject(count1).optDouble("c_amount", 0));
                                                            
                                                            //Credit / Debit Amount in Account Currency
                                                            generalLedger.setDebitAmtInAccCurrency(objJSONArray.getJSONObject(count1).optDouble("d_amountindocumentcurrency", 0));
                                                            generalLedger.setCreditAmtInAccCurrency(objJSONArray.getJSONObject(count1).optDouble("c_amountindocumentcurrency", 0));
                                                            
                                                            generalLedger.setBalance(objJSONArray.getJSONObject(count1).optDouble("balanceAmount", 0));
                                                            generalLedger.setOpeningBalanceofAccount(calculateOpenbalanceInbase);
                                                            generalLedger.setOpening(0);
                                                            generalLedger.setClosing(endingBalance);
                                                            generalLedger.setPeriod(calculatePeriodBalance);
                                                            generalLedger.setAccountGroupID(accId);
                                                            generalLedger.setHeaderString(objJSONArray.getJSONObject(count1).optString(Constants.MAIN_GROUP_VALUE, ""));
                                                            generalLedger.setInnerString(objJSONArray.getJSONObject(count1).optString(Constants.SUB_GROUP_VALUE, ""));
                                                            generalLedgerList.add(generalLedger);
                                                            isParentAccountNotHaveAnyTransaction = false;

                                                            if (!showAllAccountsInGl) {
                                                                if (calculateOpenbalanceInbase != 0 || endingBalance != 0 || calculatePeriodBalance != 0) {
                                                                    nonZeroGeneralLedgerList.add(generalLedger);
                                                                }
                                                            }
                                                        } else {
                                                            isParentAccount = true;
                                                            parentGrandTotalDebitSum += objJSONArray.getJSONObject(count1).optDouble("d_amount", 0);
                                                            parentGrandTotalCreditSum += objJSONArray.getJSONObject(count1).optDouble("c_amount", 0);
                                                            double parentBalance = objJSONArray.getJSONObject(count1).optDouble("balanceAmount", 0);;
                                                            balanceAmtMap.put(transactionAccountId, parentBalance);
                                                        }
                                                    }
                                                }

                                                if (isLedgerPrintCSV && isParentAccount && isParentAccountNotHaveAnyTransaction) {//ERP-8745,ERP-8700 in case of csv export if parent transaction does not have any transaction.
                                                    GeneralLedger generalLedger = new GeneralLedger();
                                                    generalLedger.setAcccode(acccode);
                                                    generalLedger.setAliascode(aliascode);
                                                    generalLedger.setAccname(accname);
                                                    generalLedger.setAccountGroupID(accId);
                                                    generalLedger.setDate("");
                                                    generalLedger.setVoucherno("");
                                                    generalLedger.setName("");
                                                    generalLedger.setType("");
                                                    generalLedger.setMemo("");
                                                    generalLedger.setPayer("");
                                                    generalLedger.setDesc("");
                                                    generalLedger.setOnlydesc("");
                                                    generalLedger.setJEnumber("");
                                                    generalLedger.setErate("1");
                                                    generalLedger.setDebit(0);
                                                    generalLedger.setCredit(0);
                                                    generalLedger.setBalance(0);
                                                    generalLedger.setOpening(0);
                                                    generalLedger.setClosing(endingBalance);
                                                    generalLedger.setPeriod(calculatePeriodBalance);
                                                    generalLedgerList.add(generalLedger);

                                                    if (!showAllAccountsInGl) {
                                                        if (calculateOpenbalanceInbase != 0 || endingBalance != 0 || calculatePeriodBalance != 0) {
                                                            nonZeroGeneralLedgerList.add(generalLedger);
                                                        }
                                                    }
                                                }

                                                // to add subgroup total
                                                if (isLedgerPrintCSV && objJSONArray.length() > 0 && !(creditsum == 0 && debitsum == 0 && balance == 0) && !isExportingCustomerVendorRecord) {
                                                    GeneralLedger generalLedger = new GeneralLedger();
                                                    generalLedger.setOnlydesc("Total");
                                                    generalLedger.setCredit(creditsum);
                                                    generalLedger.setDebit(debitsum);
                                                    generalLedger.setAccountGroupID(accId);
                                                    generalLedger.setOpening(calculateOpenbalanceInbase);
                                                    generalLedger.setBalance(balance);
                                                    generalLedgerList.add(generalLedger);

                                                    if (!showAllAccountsInGl) {
                                                        if (calculateOpenbalanceInbase != 0 || endingBalance != 0 || calculatePeriodBalance != 0) {
                                                            nonZeroGeneralLedgerList.add(generalLedger);
                                                        }
                                                    }
                                                }

                                                if (isParentAccount && isLedgerPrintCSV && (parentGrandTotalDebitSum != 0 || parentGrandTotalCreditSum != 0 || creditsum != 0 || debitsum != 0)) {//ERP-8745,ERP-8700 to show grand total for Parent Account
                                                    double grandTotalBalance = 0;

                                                    Set<String> keys = balanceAmtMap.keySet();
                                                    for (String key : keys) {
                                                        double bal = balanceAmtMap.get(key);
                                                        grandTotalBalance += bal;
                                                    }

                                                    GeneralLedger generalLedger = new GeneralLedger();
                                                    generalLedger.setOnlydesc("Grand Total");
                                                    generalLedger.setCredit(parentGrandTotalCreditSum + creditsum);
                                                    generalLedger.setDebit(parentGrandTotalDebitSum + debitsum);
                                                    generalLedger.setOpening(calculateOpenbalanceInbase);
                                                    generalLedger.setBalance(grandTotalBalance);
                                                    generalLedger.setAccountGroupID(accId);
                                                    generalLedgerList.add(generalLedger);

                                                    if (!showAllAccountsInGl) {
                                                        if (calculateOpenbalanceInbase != 0 || endingBalance != 0 || calculatePeriodBalance != 0) {
                                                            nonZeroGeneralLedgerList.add(generalLedger);
                                                        }
                                                    }
                                                }

                                                jSONArray.getJSONObject(count).remove("openbalance");
                                                jSONArray.getJSONObject(count).put("openbalance", calculateOpeningBalance);
                                                jSONArray.getJSONObject(count).remove("openbalanceinbase");
                                                jSONArray.getJSONObject(count).put("openbalanceinbase", calculateOpenbalanceInbase);
                                                jSONArray.getJSONObject(count).put("endingBalance", endingBalance);
                                                jSONArray.getJSONObject(count).put("periodBalance", calculatePeriodBalance);

                                                if (!isExportingCustomerVendorRecord && emptyTransactionFlag && !isLedgerPrintCSV) {// in case of PDF Export
                                                    GeneralLedger generalLedger = new GeneralLedger();
                                                    generalLedger.setAcccode(acccode);
                                                    generalLedger.setAccname(accname);
                                                    generalLedger.setDesc("No Transactions");
                                                    generalLedger.setOpening(calculateOpeningBalance);
                                                    generalLedger.setClosing(endingBalance);
                                                    generalLedger.setPeriod(calculatePeriodBalance);
                                                    generalLedger.setAccountGroupID(accId);
                                                    generalLedgerList.add(generalLedger);

                                                    if (!showAllAccountsInGl) {
                                                        if (calculateOpenbalanceInbase != 0 || endingBalance != 0 || calculatePeriodBalance != 0) {
                                                            nonZeroGeneralLedgerList.add(generalLedger);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (isLedgerPrintCSV && !StringUtil.isNullOrEmpty(filetype) && filetype.equals("csv")) {
                                    if (!showAllAccountsInGl && nonZeroGeneralLedgerList.size() > Constants.THRESHOLD_VAL_TO_WRITE_INTO_CSV_FILE) {
                                        if (!headersFlag) {
                                            outputStream = new FileOutputStream(filename, true);
                                        }
                                        reportSB = getStringBuilderForGLExportToCsv(reportSB, nonZeroGeneralLedgerList, companyid);
                                        outputStream.write(reportSB.toString().getBytes());
                                        headersFlag = true;
                                        reportSB.setLength(0);
                                        nonZeroGeneralLedgerList.clear();
                                    } else if (generalLedgerList.size() > Constants.THRESHOLD_VAL_TO_WRITE_INTO_CSV_FILE) {
                                        if (!headersFlag) {
                                            outputStream = new FileOutputStream(filename, true);
                                        }
                                        reportSB = getStringBuilderForGLExportToCsv(reportSB, generalLedgerList, companyid);
                                        outputStream.write(reportSB.toString().getBytes());
                                        headersFlag = true;
                                        reportSB.setLength(0);
                                        generalLedgerList.clear();
                                    }
                                }
                            }
                        }
                            if (outputStream != null) {
                                outputStream.flush();
                                outputStream.close();
                            }

                            if (jSONArray.length() > 0 && isGeneralLedger) {
                                accReportsService.clearMaps(billingInvoiceMapGL, billingGrMapGL, billingCreditNoteMapGL, billingDebitNoteMapGL, billingPaymentReceivedMapGL, billingPaymentMadeMapGL,
                                        invoiceMapGL, grMapGL, creditNoteMapGL, creditNoteMapVendorGL, debitNoteMapGL, debitNoteMapCustomerGL, paymentReceivedMapGL, paymentMadeMapGL,
                                        fixedAssetgrMapGL, fixedAssetInvoiceMapGL, cashSalesGL, cashPurchaseGL, jeDetailPaymentTypeMapGL, jeDetailReceiptTypeMapGL);
                            }
                            jobj.put("endingBalanceSummary", endingBalanceSummary);
                            jobj.remove("openbalanceSummary");
                            jobj.put("openbalanceSummary", openbalanceSummary);
                            jobj.put("totalCount", showAllAccountsInGl ? result.getRecordTotalCount() : nonZeroGeneralLedgerList.size());

                    if (!showAllAccountsInGl && !issubGeneralLedger) {
                        financeDetailsMap.put("GeneralLedgerSubReportData", new JRBeanCollectionDataSource(nonZeroGeneralLedgerList));
                    } else {
                        if (issubGeneralLedger) {
                            Collections.sort(generalLedgerList, new SubLedgerComparator());
                            ListIterator<GeneralLedger> glList = generalLedgerList.listIterator();
                            String firstHeader = "";
                            while (glList.hasNext()) {
                                GeneralLedger g = glList.next();
                                if (g.getHeaderString().equals("")) {
                                    continue;
                                } else {
                                    firstHeader = g.getHeaderString();
                                    break;
                                }
                            }
                            ListIterator<GeneralLedger> glList1 = generalLedgerList.listIterator();
                            while (glList1.hasNext()) {
                                GeneralLedger g = glList1.next();
                                if (g.getHeaderString().equals("") && g.getDesc().equals("No Transactions")) {
                                    g.setHeaderString(firstHeader);
                                } else {
                                    continue;
                                }
                            }
                            financeDetailsMap.put("GeneralLedgerSubReportData", new JRBeanCollectionDataSource(generalLedgerList));
                        }else{
                            if(isExportingCustomerVendorRecord){
                                Collections.sort(generalLedgerList,new GLedgerComparator());
                            }
                            financeDetailsMap.put("GeneralLedgerSubReportData", new JRBeanCollectionDataSource(generalLedgerList));
                        }
                    }
                    financeDetails.setReportname("General Ledger - Detailed");

                    financeDetailsList.add(financeDetails);
                    financeDetailsMap.put("datasource", new JRBeanCollectionDataSource(financeDetailsList));

                    if (!isLedgerPrintCSV) {
                        financeDetailsMap.put("format", "pdf");
                        financeDetailsMap.put("address", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                        InputStream inputStream = null;
                        InputStream inputStreamSubReport = null;
                        if (templateflag == Constants.sats_templateflag) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedger.jrxml");
                            inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SATSGeneralLedgerSubReport.jrxml");
                        } else {
                            if (issubGeneralLedger) {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SubLedger.jrxml");
                                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SubLedgerSubReport.jrxml");
                            } else if (isLandscape) {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedgerLandscape.jrxml");
                                if(isExportingCustomerVendorRecord){
                                    inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedgerCustomerVendorWiseSubReportLandscape.jrxml");
                                }else{
                                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedgerSubReportLandscape.jrxml");
                                }
                            } else {
                                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedger.jrxml");
                                    if(isExportingCustomerVendorRecord){
                                        inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedgerCustomerVendorWiseSubReport.jrxml");
                                    }else{
                                        inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedgerSubReport.jrxml");
                                    }
                                }
                                }
                                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                                JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                                JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                                financeDetailsMap.put("GeneralLedgerSubReport", jasperReportSubReport);
                                JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(financeDetailsList);
                                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, financeDetailsMap, beanColDataSource);

                        JRPdfExporter exp = new JRPdfExporter();
                        exp.setParameter(JRPdfExporterParameter.JASPER_PRINT, jasperPrint);
                        exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
                        String pdfFileName = issubGeneralLedger ? "SubLedger_v1.pdf":"GeneralLedger_v1.pdf";
                        response.setHeader("Content-Disposition", "attachment;filename=\"" + pdfFileName+"\"");
                        exp.exportReport();
                    } else {
                        financeDetailsMap.put("format", "csv");

                                if (!showAllAccountsInGl) {
                                    if (!StringUtil.isNullOrEmpty(filetype) && filetype.equals("csv")) {
                                        exportGLCsv(response, nonZeroGeneralLedgerList, filename, headersFlag, companyid);
                                    } else {
                                        createGeneralLedgerCsvFile(request, response, nonZeroGeneralLedgerList);
                                    }
                                } else {
                                    if (!StringUtil.isNullOrEmpty(filetype) && filetype.equals("csv")) {
                                        exportGLCsv(response, generalLedgerList, filename, headersFlag, companyid);
                                    } else {
                                        createGeneralLedgerCsvFile(request, response, generalLedgerList);
                                    }
                                }
                                view = "generalLedger";
                            }
                    }
                }
        }  catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = "" + ex.getMessage();
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
                if (outputStream != null) {
                    outputStream.flush();
                    outputStream.close();
                }
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println("Execution Completed: " + new Date());
        }
        return new ModelAndView("jsonView_ex", "model", "");
    }

    public StringBuilder getStringBuilderForGLExportToCsv(StringBuilder reportSB, ArrayList<GeneralLedger> generalLedgerList, String companyid) throws ServiceException, SessionExpiredException {
        try {
            for (GeneralLedger gl : generalLedgerList) {
                reportSB.append(StringUtil.isNullOrEmpty(gl.getAcccode()) ? "," : "\"" + gl.getAcccode() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getAliascode()) ? "," : "\"" + gl.getAliascode() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getAccname()) ? "," : "\"" + gl.getAccname() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getType()) ? "," : "\"" + gl.getType() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getDate()) ? "," : "\"" + gl.getDate() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getJEnumber()) ? "," : "\"" + gl.getJEnumber() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getVoucherno()) ? "," : "\"" + gl.getVoucherno() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getPayer()) ? "," : "\"" + gl.getPayer() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getName()) ? "," : "\"" + gl.getName() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getMemo()) ? "," : "\"" + gl.getMemo().replaceAll("\n", " ").replaceAll("\"", "\'") + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getOnlydesc()) ? "," : "\"" + gl.getOnlydesc().replaceAll("\n", " ").replaceAll("\"", "\'") + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getErate()) ? "," : "\"" + gl.getErate() + "\",");
                reportSB.append("\"" + authHandler.formattedCommaSeparatedUnitPrice(gl.getOpening(), companyid) + "\",");
                reportSB.append("\"" + authHandler.formattedCommaSeparatedUnitPrice(gl.getDebit(), companyid) + "\",");
                reportSB.append("\"" + authHandler.formattedCommaSeparatedUnitPrice(gl.getCredit(), companyid) + "\",");
                reportSB.append("\"" + authHandler.formattedCommaSeparatedUnitPrice(gl.getBalance(), companyid) + "\"\n");
            }

        } catch (Exception ex) {
            System.out.println("Exception in getStringForGeneralLedgerCsvFile : " + ex.getMessage());
        } finally {
            return reportSB;
        }
    }

    public void exportGLCsv(HttpServletResponse response, ArrayList<GeneralLedger> generalLedgerList, String filename, boolean headersFlag, String companyid) {
        try {
//            OutputStream out = (OutputStream) outputStream;
//            ByteArrayOutputStream os = (ByteArrayOutputStream) out;
            StringBuilder reportSB = new StringBuilder();
            if (!headersFlag) {
                reportSB.append("\"Account Code\",\"Alias Code\",\"Account Name\",\"Type\",\"Date\",\"JE Number\",\"Number\",\"Name(Payer/Payee)\""
                        + ",\"Double Entry Movement\",\"Memo\",\"Description\",\"Exchange Rate\",\"Opening Balance\",\"Debit\",\"Credit\",\"Balance\"\n");
            }
            for (GeneralLedger gl : generalLedgerList) {
                reportSB.append(StringUtil.isNullOrEmpty(gl.getAcccode()) ? "," : "\"" + gl.getAcccode() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getAliascode()) ? "," : "\"" + gl.getAliascode() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getAccname()) ? "," : "\"" + gl.getAccname() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getType()) ? "," : "\"" + gl.getType() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getDate()) ? "," : "\"" + gl.getDate() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getJEnumber()) ? "," : "\"" + gl.getJEnumber() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getVoucherno()) ? "," : "\"" + gl.getVoucherno() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getPayer()) ? "," : "\"" + gl.getPayer() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getName()) ? "," : "\"" + gl.getName() + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getMemo()) ? "," : "\"" + gl.getMemo().replaceAll("\n", " ").replaceAll("\"", "\'") + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getOnlydesc()) ? "," : "\"" + gl.getOnlydesc().replaceAll("\n", " ").replaceAll("\"", "\'") + "\",");
                reportSB.append(StringUtil.isNullOrEmpty(gl.getErate()) ? "," : "\"" + gl.getErate() + "\",");
                reportSB.append("\"" + authHandler.formattedCommaSeparatedUnitPrice(gl.getOpening(), companyid) + "\",");
                reportSB.append("\"" + authHandler.formattedCommaSeparatedUnitPrice(gl.getDebit(), companyid) + "\",");
                reportSB.append("\"" + authHandler.formattedCommaSeparatedUnitPrice(gl.getCredit(), companyid) + "\",");
                reportSB.append("\"" + authHandler.formattedCommaSeparatedUnitPrice(gl.getBalance(), companyid) + "\"\n");
            }
            FileOutputStream outputStream = new FileOutputStream(filename, true);
            outputStream.write(reportSB.toString().getBytes());
            if (outputStream != null) {
                outputStream.flush();
                outputStream.close();
            }

            ByteArrayOutputStream os = new ByteArrayOutputStream();
            File file = new File(filename);
            FileInputStream inputStream = new FileInputStream(file);
            byte[] bytes = new byte[(int) file.length()];
            int readCount = 0;
            while ((readCount = inputStream.read(bytes)) > 0) {
                os.write(bytes);
            }
            response.setHeader("Content-Disposition", "attachment; filename=\"GeneralLedger_v1.csv\"");
            response.setContentType("application/octet-stream");
            response.setContentLength(os.size());
            response.getOutputStream().write(os.toByteArray());
            response.getOutputStream().flush();
            response.getOutputStream().close();
            if (os != null) {
                os.close();
            }
            if (inputStream != null) {
                inputStream.close();
            }
            if (file != null) {
                file.delete();
            }
        } catch (Exception ex) {
            System.out.println("Exception in exportGLCsv : " + ex.getMessage());
        }
    }

    public void createGeneralLedgerCsvFile(HttpServletRequest request, HttpServletResponse response, ArrayList<GeneralLedger> generalLedgerList) throws ServiceException, SessionExpiredException {
        ByteArrayOutputStream os = null;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            boolean isExportingCustomerVendorRecord = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isExportingCustomerVendorRecord"))) {
                isExportingCustomerVendorRecord = Boolean.parseBoolean(request.getParameter("isExportingCustomerVendorRecord"));
            }

            StringBuilder reportSB = new StringBuilder();
            if (isExportingCustomerVendorRecord) {
                reportSB.append("\"Person Name\",\"Customer or Vendor\",\"JE Records\",\"Account Code\",\"Alias Code\",\"Account Name\",\"Type\",\"Date\",\"JE Number\",\"Number\",\"Name(Payer/Payee)\""
                        + ",\"Double Entry Movement\",\"Memo\",\"Description\",\"Exchange Rate\",\"Opening Balance\",\"Debit\",\"Credit\",\"Balance\"\n");
            } else {
            reportSB.append("\"Account Code\",\"Alias Code\",\"Account Name\",\"Type\",\"Date\",\"JE Number\",\"Number\",\"Name(Payer/Payee)\""
                    + ",\"Double Entry Movement\",\"Memo\",\"Description\",\"Exchange Rate\",\"Opening Balance\",\"Debit\",\"Credit\",\"Balance\"\n");
            }
            
            if (request.getParameter("filetype").equals("csv")) {
                for (GeneralLedger gl : generalLedgerList) {
                    if(isExportingCustomerVendorRecord){
                        reportSB.append(StringUtil.isNullOrEmpty(gl.getPersonName()) ? "," : "\"" + gl.getPersonName() + "\",");
                        reportSB.append(gl.getTransactionTypePerson()==2 ? "\"Vendor\"," :((gl.getTransactionTypePerson()==1)?"\"Customer\",":"\"\""));
                        reportSB.append(gl.getTransactionTypePerson()==3 ? "\"JE Record\"," :"\"Not JE Record\",");
                    }
                    reportSB.append(StringUtil.isNullOrEmpty(gl.getAcccode()) ? "," : "\"" + gl.getAcccode() + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(gl.getAliascode()) ? "," : "\"" + gl.getAliascode() + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(gl.getAccname()) ? "," : "\"" + gl.getAccname() + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(gl.getType()) ? "," : "\"" + gl.getType() + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(gl.getDate()) ? "," : "\"" + gl.getDate() + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(gl.getJEnumber()) ? "," : "\"" + gl.getJEnumber() + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(gl.getVoucherno()) ? "," : "\"" + gl.getVoucherno() + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(gl.getPayer()) ? "," : "\"" + gl.getPayer() + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(gl.getName()) ? "," : "\"" + gl.getName() + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(gl.getMemo()) ? "," : "\"" + gl.getMemo().replaceAll("\n", " ").replaceAll("\"", "\'") + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(gl.getOnlydesc()) ? "," : "\"" + gl.getOnlydesc().replaceAll("\n", " ").replaceAll("\"", "\'") + "\",");
                    reportSB.append(StringUtil.isNullOrEmpty(gl.getErate()) ? "," : "\"" + gl.getErate() + "\",");
                    reportSB.append("\"" + authHandler.formattedCommaSeparatedUnitPrice(gl.getOpening(), companyid) + "\",");
                    reportSB.append("\"" + authHandler.formattedCommaSeparatedUnitPrice(gl.getDebit(), companyid) + "\",");
                    reportSB.append("\"" + authHandler.formattedCommaSeparatedUnitPrice(gl.getCredit(), companyid) + "\",");
                    reportSB.append("\"" + authHandler.formattedCommaSeparatedUnitPrice(gl.getBalance(), companyid) + "\"\n");
                }
                os = new ByteArrayOutputStream();
                os.write(reportSB.toString().getBytes());
                response.setHeader("Content-Disposition", "attachment; filename=\"GeneralLedger.csv\"");
                response.setContentType("application/octet-stream");
                response.setContentLength(os.size());
                response.getOutputStream().write(os.toByteArray());
                response.getOutputStream().flush();
                response.getOutputStream().close();
                if (os != null) {
                    os.close();
                }
            } else {
                Workbook wb = null;
                Sheet sheet = null;
                Cell cell = null;
                String generalLedgerheader[] ={};
                if(isExportingCustomerVendorRecord){
                    generalLedgerheader = new String[] {"Person Name","Customer or Vendor","JE Records","Account Code", "Alias Code", "Account Name", "Type", "Date", "JE Number", "Number", "Name(Payer/Payee)", "Double Entry Movement", "Memo", "Description", "Currency","Exchange Rate", "Opening Balance", "Debit Amount", "Debit Amount in Base Currency", "Credit Amount", "Credit Amount in Base Currency", "Balance"};
                }else{
                    generalLedgerheader = new String[] {"Account Code", "Alias Code", "Account Name", "Type", "Date", "JE Number", "Number", "Name(Payer/Payee)", "Double Entry Movement", "Memo", "Description", "Currency","Exchange Rate", "Opening Balance", "Debit Amount", "Debit Amount in Base Currency", "Credit Amount", "Credit Amount in Base Currency", "Balance"};
                }
                
                int rownum = 0;     //Row count
                int cellnum = 0;    //Cell count
                wb = new HSSFWorkbook();
                sheet = wb.createSheet("Sheet-1");
                
                //Create new cell for Company Name
                String companyName = sessionHandlerImpl.getCompanyName(request);
                Row compnayHeaderRow = sheet.createRow(rownum++);
                cell = compnayHeaderRow.createCell(cellnum++);
                cell.setCellValue("Company Name");
                cell = compnayHeaderRow.createCell(cellnum++);
                ExtraCompanyPreferences extrapref = null;
                KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                    extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
                    if (extrapref != null && extrapref.isIsMultiEntity()) {
                        String searchjson = request.getParameter(Constants.Acc_Search_Json);
                        boolean ismultientity = false;
                        boolean ismultientityfieldpresent=false;
                        StringBuilder appendimensionString = new StringBuilder();
                        if (!StringUtil.isNullOrEmpty(searchjson) && !StringUtil.equal(searchjson, "undefined")) {
                            
                                searchjson =StringUtil.DecodeText(request.getParameter(Constants.Acc_Search_Json));
                            
                            JSONObject json = new JSONObject(searchjson);
                            if (json.has("root")) {
                                JSONArray advSearch = json.getJSONArray("root");
//                                if (advSearch.length() == 1) {
                                    for (int i = 0; i < advSearch.length(); i++) {
                                        JSONObject dimensionjson = advSearch.getJSONObject(i);
                                        ismultientity = dimensionjson.optBoolean(Constants.isMultiEntity, false);
                                        String searchTextArray[] = dimensionjson.optString("searchText").split(",");
                                        if (searchTextArray.length > 0 && dimensionjson.optInt(Constants.fieldtype, 0) == 4 && dimensionjson.optBoolean("iscustomfield", true) == false && ismultientity) {//for dimension only
                                            ismultientityfieldpresent=true;
                                            for (String searchTextvalue : searchTextArray) {
                                                FieldComboData fieldcombodata = null;
                                                KwlReturnObject fieldcombodataObj = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), searchTextvalue);
                                                if (fieldcombodataObj != null && !fieldcombodataObj.getEntityList().isEmpty() && fieldcombodataObj.getEntityList().get(0) != null) {
                                                    fieldcombodata = (FieldComboData) fieldcombodataObj.getEntityList().get(0);
                                                    if (!StringUtil.isNullOrEmpty(fieldcombodata.getItemdescription())) {
                                                        appendimensionString.append(fieldcombodata.getItemdescription().concat(","));
                                                    } else {
                                                        appendimensionString.append(fieldcombodata.getValue().concat(","));
                                                    }
                                                }
                                            }//end of for of SearchTextValue
                                            break;
                                        }//end of searchTextArray
                                    }//end of for loop of advSearch
//                                }
                            }//end of root
                        }
                        if (ismultientityfieldpresent) {//this will only be applicable for multientity
                            String dimensionvalue = appendimensionString.toString();
                            companyName = dimensionvalue.substring(0, dimensionvalue.length() - 1);
                        }
                    }
                }// end of extrapreferences
                cell.setCellValue(companyName);                
                
                //Create new cell for Report Title
                cellnum = 0;
                String reporttitle = request.getParameter("filename");
                Row reportTitleHeaderRow = sheet.createRow(rownum++);
                cell = reportTitleHeaderRow.createCell(cellnum++);
                cell.setCellValue("Report Title");
                cell = reportTitleHeaderRow.createCell(cellnum++);
                cell.setCellValue(reporttitle);

                //Create new cell for Export Date
                cellnum = 0;
                String exportdate = authHandler.getDateFormatter(request).format(new Date());
                Row exportDateHeaderRow = sheet.createRow(rownum++);
                cell = exportDateHeaderRow.createCell(cellnum++);
                cell.setCellValue("Export Date");
                cell = exportDateHeaderRow.createCell(cellnum++);
                cell.setCellValue(exportdate);                
                
                //Create new cell for From Date
                cellnum = 0;
                String startdate = "";
                startdate = request.getParameter("startDate");
                Row fromDateHeaderRow = sheet.createRow(rownum++);
                cell = fromDateHeaderRow.createCell(cellnum++);
                cell.setCellValue("From Date");
                cell = fromDateHeaderRow.createCell(cellnum++);
                cell.setCellValue(startdate);

                //Create new cell for To Date
                cellnum = 0;
                String enddate = "";
                enddate = request.getParameter("enddate");
                Row toDateHeaderRow = sheet.createRow(rownum++);
                cell = toDateHeaderRow.createCell(cellnum++);
                cell.setCellValue("To Date");
                cell = toDateHeaderRow.createCell(cellnum++);
                cell.setCellValue(enddate);
                
                /*
         After Appending all rows for filter append search fields rows
         */
        String searchjson = request.getParameter(Constants.Acc_Search_Json);
        if (!StringUtil.isNullOrEmpty(searchjson) && !StringUtil.equal(searchjson, "undefined")) {
           // try {
                searchjson=StringUtil.DecodeText(request.getParameter(Constants.Acc_Search_Json));
                JSONObject json = new JSONObject(searchjson);
                if (json.has("root")) {
                    JSONArray advSearch = json.getJSONArray("root");
                    for (int i = 0; i < advSearch.length(); i++) {
                        JSONObject dimensionjson = advSearch.getJSONObject(i);
                        String value = null;
                        String header = "";
                        String fieldtype = "";
                        String ModuleName="";
                        fieldtype =StringUtil.DecodeText(dimensionjson.optString("fieldtype", ""));
                        header = StringUtil.DecodeText(dimensionjson.optString("columnheader", ""));
                        ModuleName = StringUtil.DecodeText(dimensionjson.optString("modulename", ""));
                        if (!StringUtil.isNullOrEmpty(ModuleName)) {
                            header += " [" + ModuleName + "]";
                        }
                        if (fieldtype.equalsIgnoreCase("2") || fieldtype.equalsIgnoreCase("3")) {
                            value = StringUtil.DecodeText(dimensionjson.optString("search", ""));
                        } else {
                            value = StringUtil.DecodeText(dimensionjson.optString("combosearch", ""));
                        }
                        if (!StringUtil.isNullOrEmpty(header)) {
                            cellnum = 0;
                            Row termHeaderRow = sheet.createRow(rownum++);
                            cell = termHeaderRow.createCell(cellnum++);
                            cell.setCellValue(header);
                            cell = termHeaderRow.createCell(cellnum++);
                            cell.setCellValue(value);
                        }
                    }

                }//end of root
            /*} catch (UnsupportedEncodingException ex) {
                Logger.getLogger(exportMPXDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
            }*/
        }
        
                
                //Create new cell for BlankRow
                cellnum = 0;
                Row BlankRow = sheet.createRow(rownum++);
                cell = BlankRow.createCell(cellnum++);
                cell.setCellValue("");               
                
                cellnum = 0;
                Row headerRow = sheet.createRow(rownum++);
                for (int header = 0; header < generalLedgerheader.length; header++) {
                    cell = headerRow.createCell(cellnum++);  //Create new cell
                    cell.setCellValue(generalLedgerheader[header]);
                }
                //HSSFRow row = sheet.createRow(rownum++);
                double balance = 0.0;
                double openingSum = 0.0;
                double debitSum = 0.0;
                double creditSum = 0.0;
                for (GeneralLedger gl : generalLedgerList) {
                    cellnum = 0;
                    Row row = sheet.createRow(rownum++);
                    if(isExportingCustomerVendorRecord){
                        cell = row.createCell(cellnum++);  
                        cell.setCellValue(StringUtil.isNullOrEmpty(gl.getPersonName()) ? " " : gl.getPersonName());
                        cell = row.createCell(cellnum++);  
                        String person = gl.getTransactionTypePerson()==2 ? "Vendor" :((gl.getTransactionTypePerson()==1)?"Customer":"");
                        cell.setCellValue(person);
                        cell = row.createCell(cellnum++);  
                        cell.setCellValue(gl.getTransactionTypePerson()==3 ? "JE Record" : "Not JE Record");
                    }
                    cell = row.createCell(cellnum++);  
                    cell.setCellValue(StringUtil.isNullOrEmpty(gl.getAcccode()) ? " " : gl.getAcccode());
                    cell = row.createCell(cellnum++);
                    cell.setCellValue(StringUtil.isNullOrEmpty(gl.getAliascode()) ? " " : gl.getAliascode());
                    cell = row.createCell(cellnum++);
                    cell.setCellValue(StringUtil.isNullOrEmpty(gl.getAccname()) ? " " : gl.getAccname());
                    cell = row.createCell(cellnum++);
                    cell.setCellValue(StringUtil.isNullOrEmpty(gl.getType()) ? " " : gl.getType());
                    cell = row.createCell(cellnum++);
                    cell.setCellValue(StringUtil.isNullOrEmpty(gl.getDate()) ? " " : gl.getDate());
                    cell = row.createCell(cellnum++);
                    cell.setCellValue(StringUtil.isNullOrEmpty(gl.getJEnumber()) ? " " : gl.getJEnumber());
                    cell = row.createCell(cellnum++);
                    cell.setCellValue(StringUtil.isNullOrEmpty(gl.getVoucherno()) ? " " : gl.getVoucherno());
                    cell = row.createCell(cellnum++);
                    cell.setCellValue(StringUtil.isNullOrEmpty(gl.getPayer()) ? " " : gl.getPayer());
                    cell = row.createCell(cellnum++);
                    cell.setCellValue(StringUtil.isNullOrEmpty(gl.getName()) ? " " : gl.getName());
                    cell = row.createCell(cellnum++);
                    cell.setCellValue(StringUtil.isNullOrEmpty(gl.getMemo()) ? " " : gl.getMemo().replaceAll("\n", " "));
                    cell = row.createCell(cellnum++);
                    cell.setCellValue(StringUtil.isNullOrEmpty(gl.getOnlydesc()) ? " " : gl.getOnlydesc().replaceAll("\n", " "));
                    cell = row.createCell(cellnum++);
                    cell.setCellValue(StringUtil.isNullOrEmpty(gl.getCurrencyName()) ? " " : gl.getCurrencyName());
                    cell = row.createCell(cellnum++);
                    cell.setCellType(0);             // ERP-25608 Amount Fields made numeric in excel file 
                    double curr = (!StringUtil.isNullOrEmpty(gl.getErate())) ? Double.parseDouble(gl.getErate()) : 0;
                    cell.setCellValue(curr);
                    cell = row.createCell(cellnum++);
                    
                    String openingStr = authHandler.formattedCommaSeparatedUnitPrice(gl.getOpening(), companyid);
                    openingStr = openingStr.replaceAll(",", "");
                    try {
                        cell.setCellType(0);             // ERP-25608 Amount Fields made numeric in excel file 
                        double opening = (!StringUtil.isNullOrEmpty(openingStr)) ? Double.parseDouble(openingStr) : 0;
                        cell.setCellValue(opening);
                        cell = row.createCell(cellnum++);
                    } catch (Exception e) {            // try-catch block added to make Fields string in excel file as previous.
                        cell.setCellValue(authHandler.formattedCommaSeparatedUnitPrice(gl.getOpening(), companyid));
                        cell = row.createCell(cellnum++);
                    }
                    
                    String DebitAmtInAccCurrencyStr = authHandler.formattedCommaSeparatedUnitPrice(gl.getDebitAmtInAccCurrency(), companyid);
                    DebitAmtInAccCurrencyStr = DebitAmtInAccCurrencyStr.replaceAll(",", "");
                    try {
                        cell.setCellType(0);             // ERP-25608 Amount Fields made numeric in excel file 
                        double DebitAmtInAccCurrency = (!StringUtil.isNullOrEmpty(DebitAmtInAccCurrencyStr)) ? Double.parseDouble(DebitAmtInAccCurrencyStr) : 0;
                        cell.setCellValue(DebitAmtInAccCurrency);
                        cell = row.createCell(cellnum++);
                    } catch (Exception e) {            // try-catch block added to make Fields string in excel file as previous.
                        cell.setCellValue(authHandler.formattedCommaSeparatedUnitPrice(gl.getDebitAmtInAccCurrency(), companyid));
                        cell = row.createCell(cellnum++);
                    }
                    
                    String debitStr = authHandler.formattedCommaSeparatedUnitPrice(gl.getDebit(), companyid);
                    debitStr = debitStr.replaceAll(",", "");
                    try {
                        cell.setCellType(0);             // ERP-25608 Amount Fields made numeric in excel file 
                        double debit = (!StringUtil.isNullOrEmpty(debitStr)) ? Double.parseDouble(debitStr) : 0;
                        cell.setCellValue(debit);
                        cell = row.createCell(cellnum++);
                    } catch (Exception e) {            // try-catch block added to make Fields string in excel file as previous.
                        cell.setCellValue(authHandler.formattedCommaSeparatedUnitPrice(gl.getDebit(), companyid));
                        cell = row.createCell(cellnum++);
                    }
                    
                    String CreditAmtInAccCurrencyStr = authHandler.formattedCommaSeparatedUnitPrice(gl.getCreditAmtInAccCurrency(), companyid);
                    CreditAmtInAccCurrencyStr = CreditAmtInAccCurrencyStr.replaceAll(",", "");
                    try {
                        cell.setCellType(0);             // ERP-25608 Amount Fields made numeric in excel file 
                        double CreditAmtInAccCurrency = (!StringUtil.isNullOrEmpty(CreditAmtInAccCurrencyStr)) ? Double.parseDouble(CreditAmtInAccCurrencyStr) : 0;
                        cell.setCellValue(CreditAmtInAccCurrency);
                        cell = row.createCell(cellnum++);
                    } catch (Exception e) {            // try-catch block added to make Fields string in excel file as previous.
                        cell.setCellValue(authHandler.formattedCommaSeparatedUnitPrice(gl.getCreditAmtInAccCurrency(), companyid));
                        cell = row.createCell(cellnum++);
                    }
                    
                    String creditStr = authHandler.formattedCommaSeparatedUnitPrice(gl.getCredit(), companyid);
                    creditStr = creditStr.replaceAll(",", "");
                    try {
                        cell.setCellType(0);             // ERP-25608 Amount Fields made numeric in excel file 
                        double credit = (!StringUtil.isNullOrEmpty(creditStr)) ? Double.parseDouble(creditStr) : 0;
                        cell.setCellValue(credit);
                        cell = row.createCell(cellnum++);
                    } catch (Exception e) {            // try-catch block added to make Fields string in excel file as previous.
                        cell.setCellValue(authHandler.formattedCommaSeparatedUnitPrice(gl.getCredit(), companyid));
                        cell = row.createCell(cellnum++);
                    }
                    
                    if (isExportingCustomerVendorRecord) {
                        openingSum += gl.getOpening();
                        debitSum += gl.getDebit();
                        creditSum += gl.getCredit();
                        balance = openingSum + debitSum - creditSum;
                        String balanceStr = String.valueOf(balance);
                        balanceStr = balanceStr.replaceAll(",", "");
                        try {
                            cell.setCellType(0);             // ERP-25608 Amount Fields made numeric in excel file 
                            cell.setCellValue(Double.parseDouble(balanceStr));
                        } catch (Exception e) {            // try-catch block added to make Fields string in excel file as previous.
                            cell.setCellValue(authHandler.formattedCommaSeparatedUnitPrice(balance, companyid));
                        }
                    } else {
                        String balStr = authHandler.formattedCommaSeparatedUnitPrice(gl.getBalance(), companyid);
                        balStr = balStr.replaceAll(",", "");
                        try {
                            cell.setCellType(0);             // ERP-25608 Amount Fields made numeric in excel file 
                            double bal = (!StringUtil.isNullOrEmpty(balStr)) ? Double.parseDouble(balStr) : 0;
                            cell.setCellValue(bal);
                        } catch (Exception e) {            // try-catch block added to make Fields string in excel file as previous.
                            cell.setCellValue(authHandler.formattedCommaSeparatedUnitPrice(gl.getBalance(), companyid));
                        }
                    
                    }
                }
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-Disposition", "attachment;filename=\"GeneralLedger_v1.xls\"");
                wb.write(response.getOutputStream());//To write Excel sheet data into Response object
                response.getOutputStream().close();
                response.getOutputStream().flush();

            }

        } catch (Exception ex) {
            ex.printStackTrace();

        }
    }

     public ModelAndView exportDimesionBasedProfitLoss(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request); 
            paramJobj.put("isExport", true);
            boolean threadFlag = false;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("threadflag", null))) {
                threadFlag = Boolean.parseBoolean(paramJobj.optString("threadflag"));
            }
            //Thread Process
            if (threadFlag) {
                HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
                String companyid = paramJobj.getString(Constants.companyKey);
                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) cmpresult.getEntityList().get(0);
                requestParams.put("paramsJsonObject",paramJobj);
                accExportDimensionReportPL.add(requestParams);
                accExportDimensionReportPL.setCompany(company);

                Thread t = new Thread(accExportDimensionReportPL);        //Run method for this thread is available in ExportDimensionReportPL.java
                t.start();
            } else {

                boolean isCustomLayout = !StringUtil.isNullOrEmpty(paramJobj.optString("isCustomLayout", null)) ? Boolean.parseBoolean(paramJobj.optString("isCustomLayout")) : false;
                request.setAttribute("isForTradingAndProfitLoss", true);
                paramJobj.put("isForTradingAndProfitLoss", true);
                paramJobj = accFinancialReportsService.getCommonParametersForCustomLayout(paramJobj, request);
//                JSONObject fobj1 = accFinancialReportsService.getDimesionBasedProfitLoss(paramJobj, true);
                JSONObject fobj1 = accFinancialReportsService.getDimesionBasedProfitLossAllAccounts(paramJobj, true);
                
                JSONObject fobj = new JSONObject();
                JSONArray jArrL = fobj1.getJSONArray("refleft");
                JSONArray jArrR = fobj1.getJSONArray("refright");
                fobj.put("left", jArrL);
                fobj.put("right", jArrR);
                jobj.put(Constants.data, fobj);
                if (!isCustomLayout) { // sorting JSON
                    jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(paramJobj, jobj, true);
                } else {// sorting JSON
                    Map<String, Object> requestParams = new HashMap<>();
                    requestParams.put(Constants.companyKey, paramJobj.getString(Constants.companyKey));
                    requestParams.put("templateid", paramJobj.optString("templateid", null));
                    jobj = accReportsService.getOrderedJSONForDimensionBasedCustomLayout(requestParams, jobj, true);
                }
                JSONArray jarrColumns = fobj1.getJSONArray("jarrColumns");
                JSONArray jarrRecords = fobj1.getJSONArray("jarrRecords");
                JSONObject gridconfig = new JSONObject();
                gridconfig.put(Constants.data, jarrColumns);
                gridconfig.put("headers", jarrRecords);
                
                
                request.setAttribute("gridconfig", gridconfig);
                jobj.put(Constants.data, jobj.getJSONArray(Constants.data));
                String fileType = request.getParameter("filetype");
                if (StringUtil.equal(fileType, "print")) {
                    String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                    jobj.put("GenerateDate", GenerateDate);
                    exportDaoObj.processRequest(request, response, jobj);
                } else {
                    exportDaoObj.processRequest(request, response, jobj);
                }
            }//end of else
            
        } catch (SessionExpiredException ex) {
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView_ex", "model", "");
    }

    public ModelAndView getDimesionBasedProfitLoss(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        JSONObject jobj1 = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONObject jMeta = new JSONObject();
        JSONObject commData = new JSONObject();
        try {     
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            boolean isCustomLayout = !StringUtil.isNullOrEmpty(paramJobj.optString("isCustomLayout",null)) ? Boolean.parseBoolean(paramJobj.optString("isCustomLayout")) : false;
            paramJobj.put("isForTradingAndProfitLoss",true);
            paramJobj = accFinancialReportsService.getCommonParametersForCustomLayout(paramJobj, request);
            JSONObject fobj1 = accFinancialReportsService.getDimesionBasedProfitLossAllAccounts(paramJobj, true);
//            JSONObject fobj1 = accFinancialReportsService.getDimesionBasedProfitLoss(paramJobj, true);
            JSONObject fobj = new JSONObject();
            JSONArray jArrL = fobj1.has("refleft") ? fobj1.getJSONArray("refleft") : new JSONArray();
            JSONArray jArrR = fobj1.has("refright") ? fobj1.getJSONArray("refright") : new JSONArray();
            fobj.put("left", jArrL);
            fobj.put("right", jArrR);
            jobj.put(Constants.RES_data, fobj);
            if (!isCustomLayout) {
//                jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(request, jobj, false);
                jobj = accFinancialReportsService.getNewMonthlyMYOBtradingreport(paramJobj, jobj, false);
            } else {
                Map<String, Object> requestParams = new HashMap<>();
                requestParams.put(Constants.companyKey, paramJobj.getString(Constants.companyKey));
                requestParams.put("templateid", paramJobj.optString("templateid",null));
                jobj = accReportsService.getOrderedJSONForDimensionBasedCustomLayout(requestParams, jobj, false);
            }
            
            jarrColumns = fobj1.getJSONArray("jarrColumns");
            jarrRecords = fobj1.getJSONArray("jarrRecords");
            
            commData.put(Constants.RES_success, true);
            commData.put(Constants.RES_data, isCustomLayout ? jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data) : jobj.getJSONObject(Constants.RES_data).getJSONArray("left") );
            commData.put("coldataTotatCount", (isCustomLayout ? jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data) : jobj.getJSONObject(Constants.RES_data).getJSONArray("left")).length());
            commData.put("columns", jarrColumns);
            commData.put("totalcount", (isCustomLayout ? jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data) : jobj.getJSONObject(Constants.RES_data).getJSONArray("left")).length());
            jMeta.put("totalProperty", "totalcount");
            jMeta.put("root", Constants.RES_data);
            jMeta.put("fields", jarrRecords);
            jMeta.put("coldataTotatCount", (isCustomLayout ? jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data) : jobj.getJSONObject(Constants.RES_data).getJSONArray("left")).length());
            commData.put("metaData", jMeta);
            commData.put("totalcount", (isCustomLayout ? jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data) : jobj.getJSONObject(Constants.RES_data).getJSONArray("left")).length());

            jobj1.put("valid", true);
            jobj1.put(Constants.RES_data, commData);
            jobj1.put("totalcount", (isCustomLayout ? jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data) : jobj.getJSONObject(Constants.RES_data).getJSONArray("left")).length());
            jobj1.put("coldataTotatCount", (isCustomLayout ? jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data) : jobj.getJSONObject(Constants.RES_data).getJSONArray("left")).length());
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj1.put(Constants.RES_success, issuccess);
                jobj1.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                ex.printStackTrace();
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj1.toString());
    }

    public ModelAndView exportDimesionBasedBalanceSheet(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            boolean isCustomLayout = !StringUtil.isNullOrEmpty(request.getParameter("isCustomLayout")) ? Boolean.parseBoolean(request.getParameter("isCustomLayout")) : false;
            request.setAttribute("isForTradingAndProfitLoss", true);
            request.setAttribute("isExport", true);
            JSONObject fobj1 = getDimesionBasedBalanceSheet(request);
            JSONObject fobj = new JSONObject();
            JSONArray jArrL = fobj1.getJSONArray("refleft");
            JSONArray jArrR = fobj1.getJSONArray("refright");

            fobj.put("left", jArrL);
            fobj.put("right", jArrR);
            jobj.put(Constants.RES_data, fobj);
            if(!isCustomLayout){
                JSONArray rightObjArr = new JSONArray();
                JSONObject objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("accountname", "Assets");
                objlast.put("amount", "");
                objlast.put("fmt", "B");

                rightObjArr.put(0, objlast);
                for (int i = 0; i < jArrR.length(); i++) {
                    rightObjArr.put(jArrR.getJSONObject(i));
                }

                objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("accountname", "Liabilities");
                objlast.put("amount", "");
                objlast.put("fmt", "B");

                rightObjArr.put(objlast);

                objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("accountname", "Equity");
                objlast.put("amount", "");
                objlast.put("fmt", "B");

                for (int i = 0; i < jArrL.length(); i++) {
                    rightObjArr.put(jArrL.getJSONObject(i));
                }
                jobj.remove(Constants.RES_data);
                jobj.put(Constants.RES_data, rightObjArr);
            } else {
                Map<String, Object> requestParams = new HashMap<>();
                requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                requestParams.put("templateid", request.getParameter("templateid"));
                jobj = accReportsService.getOrderedJSONForDimensionBasedCustomLayout(requestParams, jobj, true);
            }
            
            JSONArray jarrColumns = fobj1.getJSONArray("jarrColumns");
            JSONArray jarrRecords = fobj1.getJSONArray("jarrRecords");
            JSONObject gridconfig = new JSONObject();
            gridconfig.put("headers", jarrRecords);
            
            gridconfig.put(Constants.RES_data, jarrColumns);
            request.setAttribute("gridconfig", gridconfig);
            jobj.put(Constants.RES_data, jobj.getJSONArray(Constants.RES_data));
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                exportDaoObj.processRequest(request, response, jobj);
            }
        } catch (SessionExpiredException ex) {
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView_ex", "model", "");
    }

    public ModelAndView getDimesionBasedBalanceSheet(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        JSONObject jobj1 = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONObject jMeta = new JSONObject();
        JSONObject commData = new JSONObject();
        try {
            boolean isCustomLayout = !StringUtil.isNullOrEmpty(request.getParameter("isCustomLayout")) ? Boolean.parseBoolean(request.getParameter("isCustomLayout")) : false;
            request.setAttribute("isForTradingAndProfitLoss", true);
//            request.setAttribute("isExport", true);
            JSONObject fobj1 = getDimesionBasedBalanceSheet(request);
            JSONObject fobj = new JSONObject();
            JSONArray jArrL = fobj1.getJSONArray("refleft");
            JSONArray jArrR = fobj1.getJSONArray("refright");
            JSONArray rightObjArr = new JSONArray();
            fobj.put("left", jArrL);
            fobj.put("right", jArrR);
            jobj.put(Constants.RES_data, fobj);

            if (!isCustomLayout) {
                JSONObject objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("accountname", "Assets");
                objlast.put("amount", "");
                objlast.put("fmt", "B");

                rightObjArr.put(0, objlast);
                for (int i = 0; i < jArrR.length(); i++) {
                    rightObjArr.put(jArrR.getJSONObject(i));
                }

                objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("accountname", "Liabilities");
                objlast.put("amount", "");
                objlast.put("fmt", "B");

                rightObjArr.put(objlast);

                objlast = new JSONObject();
                objlast.put("accountid", "");
                objlast.put("level", 0);
                objlast.put("isdebit", false);
                objlast.put("leaf", true);
                objlast.put("accountname", "Equity");
                objlast.put("amount", "");
                objlast.put("fmt", "B");

                for (int i = 0; i < jArrL.length(); i++) {
                    rightObjArr.put(jArrL.getJSONObject(i));
                }
                jobj.getJSONObject(Constants.RES_data).remove("left");
                jobj.getJSONObject(Constants.RES_data).put(Constants.RES_data, rightObjArr);
            } else {
                Map<String, Object> requestParams = new HashMap<>();
                requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                requestParams.put("templateid", request.getParameter("templateid"));
                jobj = accReportsService.getOrderedJSONForDimensionBasedCustomLayout(requestParams, jobj, false);
            }
            jarrColumns = fobj1.getJSONArray("jarrColumns");
            jarrRecords = fobj1.getJSONArray("jarrRecords");

            commData.put(Constants.RES_success, true);
            commData.put(Constants.RES_data, jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data));
            commData.put("coldataTotatCount", jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data).length());
            commData.put("columns", jarrColumns);
            commData.put("totalcount", jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data).length());
            jMeta.put("totalProperty", "totalcount");
            jMeta.put("root", Constants.RES_data);
            jMeta.put("fields", jarrRecords);
            jMeta.put("coldataTotatCount", jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data).length());
            commData.put("metaData", jMeta);
            commData.put("totalcount", jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data).length());

            jobj1.put("valid", true);
            jobj1.put(Constants.RES_data, commData);
            jobj1.put("totalcount", jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data).length());
            jobj1.put("coldataTotatCount", jobj.getJSONObject(Constants.RES_data).getJSONArray(Constants.RES_data).length());

            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj1.put(Constants.RES_success, issuccess);
                jobj1.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                ex.printStackTrace();
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj1.toString());
    }

    public JSONObject getDimesionBasedBalanceSheet(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj1 = new JSONObject();
        JSONObject jobjTemp = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONObject paramJobj = new JSONObject();
        try {
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String currencyname = (!StringUtil.isNullOrEmpty(currency.getSymbol())) ? currency.getSymbol() : currency.getName();
            
            boolean isCustomLayout = !StringUtil.isNullOrEmpty(request.getParameter("isCustomLayout")) ? Boolean.parseBoolean(request.getParameter("isCustomLayout")) : false;
            boolean isExport = (request.getAttribute("isExport") != null && !StringUtil.isNullOrEmpty(request.getAttribute("isExport").toString())) ? Boolean.parseBoolean(request.getAttribute("isExport").toString()) : false;
            CompanyAccountPreferences pref = null;
            KwlReturnObject prefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
            if (!pref.isShowchild()) {// Anup Check to hide child customer / vendors from balance sheet
                request.setAttribute("hidechildCV", true);
            }
            ExtraCompanyPreferences extrapref = null;
            boolean isShowAllAccountInBS = false;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (extraprefresult != null && !extraprefresult.getEntityList().isEmpty() && extraprefresult.getEntityList().get(0) != null) {
                extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
              isShowAllAccountInBS = extrapref.isShowallaccountsinbs();
            }
            JSONObject jArrR = new JSONObject();
            JSONObject jArrL = new JSONObject();
            JSONArray temprightObjArr1 = new JSONArray();
            JSONArray templeftObjArr = new JSONArray();
            int j = 0;
            String Searchjson = null;
            if (request.getParameter(Constants.Acc_Search_Json) != null) {
                Searchjson = request.getParameter(Constants.Acc_Search_Json).toString();
            }

            JSONObject SearchJsonObj = new JSONObject(Searchjson);
            JSONArray SearchJsonArray = SearchJsonObj.getJSONArray("root");
            JSONObject compareObj = SearchJsonArray.optJSONObject(0);

            String column = compareObj.optString("column");
            String refdbname = compareObj.optString("refdbname");
            String xfield = compareObj.optString("xfield");
            String iscustomcolumn = compareObj.optString("iscustomcolumn");
            String iscustomcolumndata = compareObj.optString("iscustomcolumndata");
            String isfrmpmproduct = compareObj.optString("isfrmpmproduct");
            String fieldtype = compareObj.optString("fieldtype");
            String searchText = compareObj.optString("searchText");
            String columnheader = compareObj.optString("columnheader");
            String search = compareObj.optString("search");
            String xtype = compareObj.optString("xtype");
            String isForProductMasterSearch = compareObj.optString("isForProductMasterSearch");
            String combosearch = "";
            try{
                combosearch = StringUtil.DecodeText(compareObj.optString("combosearch"));
            } catch(Exception e){
                combosearch = compareObj.optString("combosearch");
            }
            String isinterval = compareObj.optString("isinterval");
            String interval = compareObj.optString("interval");
            String isbefore = compareObj.optString("isbefore");
            
            List<String> searchTextItems = Arrays.asList(searchText.split("\\s*,\\s*"));
            List<String> searchItems = Arrays.asList(search.split("\\s*,\\s*"));
            List<String> combosearchItems = Arrays.asList(combosearch.split("\\s*,\\s*"));

            JSONArray comparedata = new JSONArray();
            for (int i = 0; i < searchTextItems.size(); i++) {
                JSONObject cntObj = new JSONObject();
                cntObj.put("searchText", searchTextItems.get(i));
//                cntObj.put("search", searchItems.get(i));//Commented this line due to we have removed search key from search json.
                cntObj.put("combosearch", combosearchItems.get(i));
                cntObj.put("column", column);
                cntObj.put("refdbname", refdbname);
                cntObj.put("xfield", xfield);
                cntObj.put("iscustomcolumn", iscustomcolumn);
                cntObj.put("iscustomcolumndata", iscustomcolumndata);
                cntObj.put("isfrmpmproduct", isfrmpmproduct);
                cntObj.put("fieldtype", fieldtype);
                cntObj.put("columnheader", columnheader);
                cntObj.put("xtype", xtype);
                cntObj.put("isinterval", isinterval);
                cntObj.put("interval", interval);
                cntObj.put("isbefore", isbefore);
                comparedata.put(cntObj);
            }
            paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put(Constants.extraCompanyPreferences, extrapref);
            paramJobj.put(Constants.preferences, pref);
            paramJobj = accFinancialReportsService.getCommonParametersForCustomLayout(paramJobj, request);
            
            for (j = 0; j < comparedata.length(); j++) {
                JSONArray dimSearchJsonArr = new JSONArray();
                JSONObject dimJson = comparedata.getJSONObject(j);
                dimJson.put("search",search);
                dimJson.put("isForProductMasterSearch",isForProductMasterSearch);
                dimSearchJsonArr.put(dimJson);
                JSONObject putSearchJson = new JSONObject();
                putSearchJson.put("root", dimSearchJsonArr);
                //  search JSON Array for Dimension Based report
                paramJobj.put("DimensionBasedComparisionReport", "DimensionBasedComparisionReport");
                paramJobj.put("DimensionBasedSearchJson", putSearchJson);
                paramJobj.put("monthlyreport", "MonthlyReport");
                JSONObject jobj = new JSONObject();
                if (!isCustomLayout) {// call for dimension based balance sheet
                    jobj = accReportsService.getBalanceSheetAllAccounts(paramJobj, null); //SDP-11471
//                    jobj = accReportsService.getBalanceSheet(request);
                } else {// call for dimension based Custom Balance Sheet
//                    jobj = accFinancialReportsService.getBSorPL_CustomLayout(request, extrapref, companyid);
                    jobj = accFinancialReportsService.getBSorPL_CustomLayout(paramJobj, extrapref, companyid);
                }           
                JSONObject jobj2 = jobj.getJSONObject(Constants.RES_data);
                JSONArray rightObjArr1 = jobj2.getJSONArray("right");
                JSONArray leftObjArr = jobj2.getJSONArray("left");
                if (j == 0) {
                    temprightObjArr1 = jobj2.getJSONArray("right");
                    templeftObjArr = jobj2.getJSONArray("left");
                }

                for (int i = 0; i < leftObjArr.length(); i++) {
                    JSONObject getObj = leftObjArr.getJSONObject(i);
                    String accId = "";
                    if (getObj.has("accountid")) {
                        accId = getObj.getString("accountid");
                    }
                    if (!accId.equals("")) {
                        if (j == 0) {
                            JSONObject putObj = new JSONObject();
                            if (getObj.has("accountname")) {
                                putObj.put("accountname", getObj.get("accountname"));
                            }
                            if (getObj.has("accountcode")) {
                                putObj.put("accountcode", getObj.get("accountcode"));
                            }
                            if (getObj.has("haschild")) {
                                putObj.put("haschild", getObj.get("haschild"));
                            }
                            if (getObj.has("acctype")) {
                                putObj.put("acctype", getObj.getString("acctype"));
                            }
                            if (getObj.has("level")) {
                                putObj.put("level", getObj.get("level"));
                            }
                            if (getObj.has("fmt")) {
                                putObj.put("fmt", getObj.get("fmt"));
                            }
                            if (getObj.has("accountflag")) {
                                putObj.put("accountflag", getObj.get("accountflag"));
                            }
                            if (getObj.has("leaf")) {
                                putObj.put("leaf", getObj.getBoolean("leaf"));
                            }
                            if (getObj.has("isdebit")) {
                                putObj.put("isdebit", getObj.get("isdebit"));
                            }
                            if (getObj.has("openingamount")) {
                                try {
                                    double tempopeningtotal = Double.parseDouble((getObj.get("openingamount").toString()));
                                    putObj.put("openingamount_0", authHandler.formattedAmount(tempopeningtotal, companyid));
                                    putObj.put("totalopeningamount", authHandler.formattedAmount(tempopeningtotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("openingamount_0", getObj.get("openingamount"));
                                    putObj.put("totalopeningamount", getObj.get("openingamount"));
                                }
                            }
                            if (getObj.has("periodamount")) {
                                try {
                                    if (!StringUtil.isNullOrEmpty(getObj.optString("periodamount"))) {
                                        double tempperiodtotal = Double.parseDouble((getObj.get("periodamount").toString()));
                                        putObj.put("periodamount_0", authHandler.formattedAmount(tempperiodtotal, companyid));
                                        putObj.put("totalperiodamount", authHandler.formattedAmount(tempperiodtotal, companyid));
                                    } else {
                                        putObj.put("periodamount_0", "");
                                        putObj.put("totalperiodamount", "");
                                    }
                                } catch (Exception e) {
                                    putObj.put("periodamount_0", getObj.get("periodamount"));
                                    putObj.put("totalperiodamount", getObj.get("periodamount"));
                                }
                            }
                            if (getObj.has("endingamount") && !isCustomLayout) {
                                try {
                                    double tempperiodtotal = Double.parseDouble((getObj.get("endingamount").toString()));
                                    if (tempperiodtotal != 0.0) {
                                        putObj.put("endingamount_0", authHandler.formattedAmount(tempperiodtotal, companyid));
                                        putObj.put("totalendingamount", authHandler.formattedAmount(tempperiodtotal, companyid));
                                    } else {
                                        putObj.put("endingamount_0", "");
                                        putObj.put("totalendingamount", "");
                                    }
                                } catch (Exception e) {
                                    putObj.put("endingamount_0", getObj.get("endingamount"));
                                    putObj.put("totalendingamount", getObj.get("endingamount"));
                                }
                            } else if (getObj.has("amount") && isCustomLayout) {
                                try {
                                    if (!StringUtil.isNullOrEmpty(getObj.optString("amount"))) {
                                        double tempperiodtotal = Double.parseDouble((getObj.get("amount").toString()));
                                        putObj.put("endingamount_0", authHandler.formattedAmount(tempperiodtotal, companyid));
                                        putObj.put("totalendingamount", authHandler.formattedAmount(tempperiodtotal, companyid));
                                    } else {
                                        putObj.put("endingamount_0", "");
                                        putObj.put("totalendingamount", "");
                                    }
                                } catch (Exception e) {
                                    putObj.put("endingamount_0", getObj.get("amount"));
                                    putObj.put("totalendingamount", getObj.get("amount"));
                                }
                            }
                            putObj.put("accountid", accId);
                            jArrL.put(accId, putObj);
                        } else {
                            JSONObject putObj1 = new JSONObject();
                            if (jArrL.has(accId)) {
                                putObj1 = jArrL.getJSONObject(accId);
                            } else {
                                if (getObj.has("accountname")) {
                                    putObj1.put("accountname", getObj.get("accountname"));
                                }
                                if (getObj.has("accountcode")) {
                                    putObj1.put("accountcode", getObj.get("accountcode"));
                                }
                                if (getObj.has("haschild")) {
                                    putObj1.put("haschild", getObj.get("haschild"));
                                }
                                if (getObj.has("acctype")) {
                                    putObj1.put("acctype", getObj.getString("acctype"));
                                }
                                if (getObj.has("level")) {
                                    putObj1.put("level", getObj.get("level"));
                                }
                                if (getObj.has("fmt")) {
                                    putObj1.put("fmt", getObj.get("fmt"));
                                }
                                if (getObj.has("accountflag")) {
                                    putObj1.put("accountflag", getObj.get("accountflag"));
                                }
                                if (getObj.has("leaf")) {
                                    putObj1.put("leaf", getObj.getBoolean("leaf"));
                                }
                                if (getObj.has("isdebit")) {
                                    putObj1.put("isdebit", getObj.get("isdebit"));
                                }
                                putObj1.put("accountid", accId);
                                if (getObj.get("accountname").toString().equals("Net Loss")) {
                                    JSONObject check = templeftObjArr.getJSONObject(templeftObjArr.length() - 1);
                                    JSONObject check1 = templeftObjArr.getJSONObject(templeftObjArr.length() - 2);
                                    if (!check.get("accountname").toString().equals("Net Loss") && !check1.get("accountname").toString().equals("Net Loss")) {
                                        templeftObjArr.put(getObj);
                                    }
                                }
                                if (getObj.get("accountname").toString().equals("Net Profit")) {
                                    JSONObject check = templeftObjArr.getJSONObject(templeftObjArr.length() - 1);
                                    JSONObject check1 = templeftObjArr.getJSONObject(templeftObjArr.length() - 2);
                                    if (!check.get("accountname").toString().equals("Net Profit") && !check1.get("accountname").toString().equals("Net Profit")) {
                                        templeftObjArr.put(getObj);
                                    }
                                }
                                if (getObj.get("accountname").toString().equals("Gross Loss")) {
                                    JSONObject check = templeftObjArr.getJSONObject(templeftObjArr.length() - 1);
                                    JSONObject check1 = templeftObjArr.getJSONObject(templeftObjArr.length() - 2);
                                    if (!check.get("accountname").toString().equals("Gross Loss") && !check1.get("accountname").toString().equals("Gross Loss")) {
                                        templeftObjArr.put(getObj);
                                    }
                                }
                                if (getObj.get("accountname").toString().equals("Gross Profit")) {
                                    JSONObject check = templeftObjArr.getJSONObject(templeftObjArr.length() - 1);
                                    JSONObject check1 = templeftObjArr.getJSONObject(templeftObjArr.length() - 2);
                                    if (!check.get("accountname").toString().equals("Gross Profit") && !check1.get("accountname").toString().equals("Gross Profit")) {
                                        templeftObjArr.put(getObj);
                                    }
                                }
                                if (isCustomLayout) {
                                    templeftObjArr.put(getObj);
                                }
                            }
                            if (getObj.has("openingamount")) {
                                putObj1.put("openingamount_" + j, getObj.get("openingamount"));
                                if (putObj1.has("totalopeningamount")) {
                                    if (!StringUtil.isNullOrEmpty(getObj.optString("openingamount"))) {
                                        double temptotal = Double.parseDouble((putObj1.get("totalopeningamount").toString().equals("") || putObj1.get("totalopeningamount").toString().equals("-") || putObj1.get("totalopeningamount").toString().contains("<")) ? "0.0" : (putObj1.get("totalopeningamount").toString()));
                                        temptotal = temptotal + Double.parseDouble((getObj.get("openingamount").toString().equals("") || getObj.get("openingamount").toString().equals("-") || getObj.get("openingamount").toString().contains("<")) ? "0.0" : (getObj.get("openingamount").toString()));
                                        putObj1.put("totalopeningamount", authHandler.formattedAmount(temptotal, companyid));
                                    }
                                } else {
                                    try {
                                        if (!StringUtil.isNullOrEmpty(getObj.optString("openingamount"))) {
                                            double temptotal = Double.parseDouble((getObj.get("openingamount").toString()));
                                            putObj1.put("totalopeningamount", authHandler.formattedAmount(temptotal, companyid));
                                        }
                                    } catch (Exception e) {
                                        putObj1.put("totalopeningamount", getObj.get("openingamount"));
                                    }
                                }
                            }
                            if (getObj.has("periodamount")) {
                                putObj1.put("periodamount_" + j, getObj.get("periodamount"));
                                if (putObj1.has("totalperiodamount")) {
                                    if (!StringUtil.isNullOrEmpty(getObj.optString("periodamount"))) {
                                        double temptotal = Double.parseDouble((putObj1.get("totalperiodamount").toString().equals("") || putObj1.get("totalperiodamount").toString().equals("-") || putObj1.get("totalperiodamount").toString().contains("<")) ? "0.0" : (putObj1.get("totalperiodamount").toString()));
                                        temptotal = temptotal + Double.parseDouble((getObj.get("periodamount").toString().equals("") || getObj.get("periodamount").toString().equals("-") || getObj.get("periodamount").toString().contains("<")) ? "0.0" : (getObj.get("periodamount").toString()));
                                        putObj1.put("totalperiodamount", authHandler.formattedAmount(temptotal, companyid));
                                    }
                                } else {
                                    try {
                                        if (!StringUtil.isNullOrEmpty(getObj.optString("periodamount"))) {
                                            double temptotal = Double.parseDouble((getObj.get("periodamount").toString()));
                                            putObj1.put("totalperiodamount", authHandler.formattedAmount(temptotal, companyid));
                                        }
                                    } catch (Exception e) {
                                        putObj1.put("totalperiodamount", getObj.get("periodamount"));
                                    }
                                }
                            }
                            if (getObj.has("endingamount") && !isCustomLayout) {
                                putObj1.put("endingamount_" + j, getObj.get("endingamount"));
                                if (putObj1.has("totalendingamount")) {
                                    if (!StringUtil.isNullOrEmpty(getObj.optString("endingamount"))) {
                                        double temptotal = Double.parseDouble((putObj1.get("totalendingamount").toString().equals("") || putObj1.get("totalendingamount").toString().equals("-") || putObj1.get("totalendingamount").toString().contains("<")) ? "0.0" : (putObj1.get("totalendingamount").toString()));
                                        temptotal = temptotal + Double.parseDouble((getObj.get("endingamount").toString().equals("") || getObj.get("endingamount").toString().equals("-") || getObj.get("endingamount").toString().contains("<")) ? "0.0" : (getObj.get("endingamount").toString()));
                                        putObj1.put("totalendingamount", authHandler.formattedAmount(temptotal, companyid));
                                    }
                                } else {
                                    try {
                                        if (!StringUtil.isNullOrEmpty(getObj.optString("endingamount"))) {
                                            double temptotal = Double.parseDouble((getObj.get("endingamount").toString()));
                                            putObj1.put("totalendingamount", authHandler.formattedAmount(temptotal, companyid));
                                        }
                                    } catch (Exception e) {
                                        putObj1.put("totalendingamount", getObj.get("endingamount"));
                                    }
                                }
                            } else if (getObj.has("amount") && isCustomLayout) {
                                putObj1.put("endingamount_" + j, getObj.get("amount"));
                                if (putObj1.has("totalendingamount")) {
                                    if (!StringUtil.isNullOrEmpty(getObj.optString("amount"))) {
                                        double temptotal = Double.parseDouble((putObj1.get("totalendingamount").toString().equals("") || putObj1.get("totalendingamount").toString().equals("-") || putObj1.get("totalendingamount").toString().contains("<")) ? "0.0" : (putObj1.get("totalendingamount").toString()));
                                        temptotal = temptotal + Double.parseDouble((getObj.get("amount").toString().equals("") || getObj.get("amount").toString().equals("-") || getObj.get("amount").toString().contains("<")) ? "0.0" : (getObj.get("amount").toString()));
                                        putObj1.put("totalendingamount", authHandler.formattedAmount(temptotal, companyid));
                                    }
                                } else {
                                    try {
                                        if (!StringUtil.isNullOrEmpty(getObj.optString("amount"))) {
                                            double temptotal = Double.parseDouble((getObj.get("amount").toString()));
                                            putObj1.put("totalendingamount", authHandler.formattedAmount(temptotal, companyid));
                                        }
                                    } catch (Exception e) {
                                        putObj1.put("totalendingamount", getObj.get("amount"));
                                    }
                                }
                            }
                            jArrL.put(accId, putObj1);
                        }
                    }
                }

                for (int i = 0; i < rightObjArr1.length(); i++) {
                    JSONObject getObj = rightObjArr1.getJSONObject(i);
                    String accId = "";
                    if (getObj.has("accountid")) {
                        accId = getObj.getString("accountid");
                    }
                    if (!accId.equals("")) {
                        if (j == 0) {
                            JSONObject putObj = new JSONObject();
                            if (getObj.has("accountname")) {
                                putObj.put("accountname", getObj.get("accountname"));
                            }
                            if (getObj.has("accountcode")) {
                                putObj.put("accountcode", getObj.get("accountcode"));
                            }
                             if (getObj.has("haschild")) {
                                putObj.put("haschild", getObj.get("haschild"));
                            }
                            if (getObj.has("acctype")) {
                                putObj.put("acctype", getObj.getString("acctype"));
                            }
                            if (getObj.has("level")) {
                                putObj.put("level", getObj.get("level"));
                            }
                            if (getObj.has("fmt")) {
                                putObj.put("fmt", getObj.get("fmt"));
                            }
                            if (getObj.has("accountflag")) {
                                putObj.put("accountflag", getObj.get("accountflag"));
                            }
                            if (getObj.has("leaf")) {
                                putObj.put("leaf", getObj.getBoolean("leaf"));
                            }
                            if (getObj.has("isdebit")) {
                                putObj.put("isdebit", getObj.get("isdebit"));
                            }
                            if (getObj.has("isparent")) {
                                putObj.put("isparent", getObj.get("isparent"));
                            }
                            if (getObj.has("totalFlagAccountsWithchild")) {
                                putObj.put("totalFlagAccountsWithchild", getObj.get("totalFlagAccountsWithchild"));
                            }
                            if (getObj.has("openingamount")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("openingamount").toString()));
                                    putObj.put("openingamount_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("totalopeningamount", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("openingamount_0", getObj.get("openingamount"));
                                    putObj.put("totalopeningamount", getObj.get("openingamount"));
                                }
                            }
                            if (getObj.has("periodamount")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("periodamount").toString()));
                                    putObj.put("periodamount_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("totalperiodamount", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("periodamount_0", getObj.get("periodamount"));
                                    putObj.put("totalperiodamount", getObj.get("periodamount"));
                                }
                            }
                            if (getObj.has("endingamount") && !isCustomLayout) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("endingamount").toString()));
                                    putObj.put("endingamount_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("totalendingamount", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("endingamount_0", getObj.get("endingamount"));
                                    putObj.put("totalendingamount", getObj.get("endingamount"));
                                }
                            } else if (getObj.has("amount") && isCustomLayout) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("amount").toString()));
                                    putObj.put("endingamount_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("totalendingamount", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("endingamount_0", getObj.get("amount"));
                                    putObj.put("totalendingamount", getObj.get("amount"));
                                }
                            }
                            putObj.put("accountid", accId);
                            jArrR.put(accId, putObj);
                        } else {
                            JSONObject putObj1 = new JSONObject();
                            if (jArrR.has(accId)) {
                                putObj1 = jArrR.getJSONObject(accId);
                            } else {
                                if (getObj.has("accountname")) {
                                    putObj1.put("accountname", getObj.get("accountname"));
                                }
                                if (getObj.has("accountcode")) {
                                    putObj1.put("accountcode", getObj.get("accountcode"));
                                }
                                if (getObj.has("haschild")) {
                                    putObj1.put("haschild", getObj.get("haschild"));
                                }
                                if (getObj.has("acctype")) {
                                    putObj1.put("acctype", getObj.getString("acctype"));
                                }
                                if (getObj.has("level")) {
                                    putObj1.put("level", getObj.get("level"));
                                }
                                if (getObj.has("fmt")) {
                                    putObj1.put("fmt", getObj.get("fmt"));
                                }
                                if (getObj.has("accountflag")) {
                                    putObj1.put("accountflag", getObj.get("accountflag"));
                                }
                                if (getObj.has("leaf")) {
                                    putObj1.put("leaf", getObj.getBoolean("leaf"));
                                }
                                if (getObj.has("isdebit")) {
                                    putObj1.put("isdebit", getObj.get("isdebit"));
                                }
                                if (getObj.has("isparent")) {
                                    putObj1.put("isparent", getObj.get("isparent"));
                                }
                                if (getObj.has("totalFlagAccountsWithchild")) {
                                    putObj1.put("totalFlagAccountsWithchild", getObj.get("totalFlagAccountsWithchild"));
                                }
                                putObj1.put("accountid", accId);
                                if (getObj.get("accountname").equals("Net Loss")) {
                                    JSONObject check = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 1);
                                    JSONObject check1 = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 2);
                                    if (!check.get("accountname").toString().equals("Net Loss") && !check1.get("accountname").toString().equals("Net Loss")) {
                                        temprightObjArr1.put(getObj);
                                    }
                                }
                                if (getObj.get("accountname").equals("Net Profit")) {
                                    JSONObject check = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 1);
                                    JSONObject check1 = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 2);
                                    if (!check.get("accountname").toString().equals("Net Profit") && !check1.get("accountname").toString().equals("Net Profit")) {
                                        temprightObjArr1.put(getObj);
                                    }
                                }
                                if (getObj.get("accountname").equals("Gross Loss")) {
                                    JSONObject check = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 1);
                                    JSONObject check1 = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 2);
                                    if (!check.get("accountname").toString().equals("Gross Loss") && !check1.get("accountname").toString().equals("Gross Loss")) {
                                        temprightObjArr1.put(getObj);
                                    }
                                }
                                if (getObj.get("accountname").equals("Gross Profit")) {
                                    JSONObject check = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 1);
                                    JSONObject check1 = temprightObjArr1.getJSONObject(temprightObjArr1.length() - 2);
                                    if (!check.get("accountname").toString().equals("Gross Profit") && !check1.get("accountname").toString().equals("Gross Profit")) {
                                        temprightObjArr1.put(getObj);
                                    }
                                }
                                if (isCustomLayout) {
                                    temprightObjArr1.put(getObj);
                                }
                            }
                            if (getObj.has("openingamount")) {
                                putObj1.put("openingamount_" + j, getObj.get("openingamount"));
                                if (putObj1.has("totalopeningamount")) {
                                    double temptotal = Double.parseDouble((putObj1.get("totalopeningamount").toString().equals("") || putObj1.get("totalopeningamount").toString().equals("-") || putObj1.get("totalopeningamount").toString().contains("<")) ? "0.0" : (putObj1.get("totalopeningamount").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("openingamount").toString().equals("") || getObj.get("openingamount").toString().equals("-") || getObj.get("openingamount").toString().contains("<")) ? "0.0" : (getObj.get("openingamount").toString()));
                                    putObj1.put("totalopeningamount", authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("openingamount").toString()));
                                        putObj1.put("totalopeningamount", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("totalopeningamount", getObj.get("openingamount"));
                                    }
                                }
                            }
                            if (getObj.has("periodamount")) {
                                putObj1.put("periodamount_" + j, getObj.get("periodamount"));
                                if (putObj1.has("totalperiodamount")) {
                                    double temptotal = Double.parseDouble((putObj1.get("totalperiodamount").toString().equals("") || putObj1.get("totalperiodamount").toString().equals("-") || putObj1.get("totalperiodamount").toString().contains("<")) ? "0.0" : (putObj1.get("totalperiodamount").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("periodamount").toString().equals("") || getObj.get("periodamount").toString().equals("-") || getObj.get("periodamount").toString().contains("<")) ? "0.0" : (getObj.get("periodamount").toString()));
                                    putObj1.put("totalperiodamount", authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("periodamount").toString()));
                                        putObj1.put("totalperiodamount", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("totalperiodamount", getObj.get("periodamount"));
                                    }
                                }
                            }
                            if (getObj.has("endingamount") && !isCustomLayout) {
                                putObj1.put("endingamount_" + j, getObj.get("endingamount"));
                                if (putObj1.has("totalendingamount")) {
                                    double temptotal = Double.parseDouble((putObj1.get("totalendingamount").toString().equals("") || putObj1.get("totalendingamount").toString().equals("-") || putObj1.get("totalendingamount").toString().contains("<")) ? "0.0" : (putObj1.get("totalendingamount").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("endingamount").toString().equals("") || getObj.get("endingamount").toString().equals("-") || getObj.get("endingamount").toString().contains("<")) ? "0.0" : (getObj.get("endingamount").toString()));
                                    putObj1.put("totalendingamount", authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("endingamount").toString()));
                                        putObj1.put("totalendingamount", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("totalendingamount", getObj.get("endingamount"));
                                    }
                                }
                            } else if (getObj.has("amount") && isCustomLayout) {
                                putObj1.put("amount_" + j, getObj.get("amount"));
                                if (putObj1.has("totalendingamount")) {
                                    double temptotal = Double.parseDouble((putObj1.get("totalendingamount").toString().equals("") || putObj1.get("totalendingamount").toString().equals("-") || putObj1.get("totalendingamount").toString().contains("<")) ? "0.0" : (putObj1.get("totalendingamount").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("amount").toString().equals("") || getObj.get("amount").toString().equals("-") || getObj.get("amount").toString().contains("<")) ? "0.0" : (getObj.get("amount").toString()));
                                    putObj1.put("totalendingamount", authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("amount").toString()));
                                        putObj1.put("totalendingamount", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("totalendingamount", getObj.get("amount"));
                                    }
                                }
                            }
                            jArrR.put(accId, putObj1);
                        }
                    }
                }
            }// end looping Dimensions  

            // Put Column Model

            JSONObject dimObj = new JSONObject();
            if (extrapref.isShowAccountCodeInFinancialReport()) {
                dimObj = new JSONObject();
                dimObj.put("name", "accountcode");
                jarrRecords.put(dimObj);
            }

            dimObj = new JSONObject();
            dimObj.put("name", "accountname");
            jarrRecords.put(dimObj);
            if (!isExport) {
                dimObj = new JSONObject();
                dimObj.put("name", "accountflag");
                jarrRecords.put(dimObj);

                dimObj = new JSONObject();
                dimObj.put("name", "isdebit");
                dimObj.put("type", "boolean");
                jarrRecords.put(dimObj);

                dimObj = new JSONObject();
                dimObj.put("name", "level");
                jarrRecords.put(dimObj);

                dimObj = new JSONObject();
                dimObj.put("name", "fmt");
                jarrRecords.put(dimObj);

                dimObj = new JSONObject();
                dimObj.put("name", "leaf");
                jarrRecords.put(dimObj);

                dimObj = new JSONObject();
                dimObj.put("name", "acctype");
                jarrRecords.put(dimObj);

                dimObj = new JSONObject();
                dimObj.put("name", "accountid");
                jarrRecords.put(dimObj);

            }
            if (extrapref.isShowAccountCodeInFinancialReport()) {
                jobjTemp = new JSONObject();
                jobjTemp.put("header", "<div align=center><b>" + "Account Code" + "</b></div>");
                jobjTemp.put("tip", "Account Code");
                jobjTemp.put("dataIndex", "accountcode");
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jarrColumns.put(jobjTemp);
            }
            
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<div align=center><b>" + "Particulars" + "</b></div>");
            jobjTemp.put("tip", "Particulars");
            jobjTemp.put("dataIndex", "accountname");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);
            
            for (int k = 0; k < combosearchItems.size(); k++) {
                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "openingamount_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header","<div align=center><b>"+ combosearchItems.get(k) + " Opening Amount " + currencyname+"</b></div>");
                jobjTemp.put("tip", combosearchItems.get(k) + " Opening Amount " + currencyname);
                jobjTemp.put("dataIndex", "openingamount_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "periodamount_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", "<div align=center><b>"+combosearchItems.get(k) + " Period Amount " + currencyname+"<div align=center><b>");
                jobjTemp.put("tip", combosearchItems.get(k) + " Period Amount " + currencyname);
                jobjTemp.put("dataIndex", "periodamount_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "endingamount_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", "<div align=center><b>"+combosearchItems.get(k) + " Ending Amount " + currencyname+"</b></div>");
                jobjTemp.put("tip", combosearchItems.get(k) + " Ending Amount " + currencyname);
                jobjTemp.put("dataIndex", "endingamount_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);
            }

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "totalopeningamount");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<div align=center><b>Total Opening Amount " + currencyname+"</b></div>");
            jobjTemp.put("tip", "Total Opening Amount " + currencyname);
            jobjTemp.put("dataIndex", "totalopeningamount");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "totalperiodamount");
            jarrRecords.put(dimObj);
            
            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<div align=center><b>Total Period Amount " + currencyname+"</b></div>");
            jobjTemp.put("tip", "Total Period Amount " + currencyname);
            jobjTemp.put("dataIndex", "totalperiodamount");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "totalendingamount");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<div align=center><b>Total Ending Amount " + currencyname+"</b></div>");
            jobjTemp.put("tip", "Total Ending Amount " + currencyname);
            jobjTemp.put("dataIndex", "totalendingamount");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            jobj1.put("jarrColumns", jarrColumns);
            jobj1.put("jarrRecords", jarrRecords);
            jobj1.put("left", jArrL);
            jobj1.put("refleft", AccReportsHandler.getAccountsConvertedJSONArray(paramJobj,jArrL, templeftObjArr,isShowAllAccountInBS,"totalendingamount"));
            jobj1.put("right", jArrR);
            jobj1.put("refright", AccReportsHandler.getAccountsConvertedJSONArray(paramJobj,jArrR, temprightObjArr1,isShowAllAccountInBS,"totalendingamount"));
        } catch (JSONException e) {
            e.printStackTrace();
            throw ServiceException.FAILURE("getMonthlyTradingProfitLossExport : " + e.getMessage(), e);
        } catch (Exception e) {
            System.out.println(e);
            e.printStackTrace();
        }
        return jobj1;
    }

    public ModelAndView exportDimesionBasedTrialBalance(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            request.setAttribute("isExport", true);
            JSONObject fobj1 = getDimesionBasedTrialBalance(request);
            JSONArray jArrL = fobj1.getJSONArray("refleft");
            JSONArray jarrColumns = fobj1.getJSONArray("jarrColumns");
            JSONObject gridconfig = new JSONObject();
            gridconfig.put(Constants.RES_data, jarrColumns);
            request.setAttribute("gridconfig", gridconfig);

            jobj.put(Constants.RES_data, jArrL);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                exportDaoObj.processRequest(request, response, jobj);
            }
        } catch (SessionExpiredException ex) {
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView_ex", "model", "");
    }

    public ModelAndView getDimesionBasedTrialBalance(HttpServletRequest request, HttpServletResponse response) {
        String msg = "";
        boolean issuccess = false;
        JSONObject jobj1 = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONObject jMeta = new JSONObject();
        JSONObject commData = new JSONObject();
        try {
            JSONObject fobj1 = getDimesionBasedTrialBalance(request);
            JSONObject fobj = new JSONObject();
            JSONArray jArrL = fobj1.getJSONArray("refleft");
            fobj.put("left", jArrL);

            jarrColumns = fobj1.getJSONArray("jarrColumns");
            jarrRecords = fobj1.getJSONArray("jarrRecords");

            commData.put(Constants.RES_success, true);
            commData.put(Constants.RES_data, jArrL);
            commData.put("coldataTotatCount", jArrL.length());
            commData.put("columns", jarrColumns);
            commData.put("totalcount", jArrL.length());
            jMeta.put("totalProperty", "totalcount");
            jMeta.put("root", Constants.RES_data);
            jMeta.put("fields", jarrRecords);
            jMeta.put("coldataTotatCount", jArrL.length());
            commData.put("metaData", jMeta);
            commData.put("totalcount", jArrL.length());

            jobj1.put("valid", true);
            jobj1.put(Constants.RES_data, commData);
            jobj1.put("totalcount", jArrL.length());
            jobj1.put("coldataTotatCount", jArrL.length());
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            ex.printStackTrace();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj1.put(Constants.RES_success, issuccess);
                jobj1.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                ex.printStackTrace();
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
}
        }
        return new ModelAndView("jsonView", "model", jobj1.toString());
    }

    public JSONObject getDimesionBasedTrialBalance(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj1 = new JSONObject();
        JSONObject jobjTemp = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        Boolean isExport=false;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            CompanyAccountPreferences pref = null;
            KwlReturnObject prefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            pref = (CompanyAccountPreferences) prefresult.getEntityList().get(0);
            if (!pref.isShowchild()) {// Check to hide child customer / vendors from balance sheet
                request.setAttribute("hidechildCV", true);
            }

            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String currencyname = (!StringUtil.isNullOrEmpty(currency.getSymbol())) ? currency.getSymbol() : currency.getName();

            JSONObject jArrR = new JSONObject();
            JSONObject jArrL = new JSONObject();
            JSONArray temprightObjArr1 = new JSONArray();
            JSONArray templeftObjArr = new JSONArray();
            int j = 0;
            String Searchjson = null;
            if (request.getParameter(Constants.Acc_Search_Json) != null) {
                Searchjson = request.getParameter(Constants.Acc_Search_Json).toString();
            }

            JSONObject SearchJsonObj = new JSONObject(Searchjson);
            JSONArray SearchJsonArray = SearchJsonObj.getJSONArray("root");
            JSONObject compareObj = SearchJsonArray.optJSONObject(0);

            String column = compareObj.optString("column");
            String refdbname = compareObj.optString("refdbname");
            String xfield = compareObj.optString("xfield");
            String iscustomcolumn = compareObj.optString("iscustomcolumn");
            String iscustomcolumndata = compareObj.optString("iscustomcolumndata");
            String isfrmpmproduct = compareObj.optString("isfrmpmproduct");
            String fieldtype = compareObj.optString("fieldtype");
            String searchText = compareObj.optString("searchText");
            String columnheader = compareObj.optString("columnheader");
            String search = compareObj.optString("search");
            String xtype = compareObj.optString("xtype");
            String combosearch = "";
            try{
                combosearch = StringUtil.DecodeText(compareObj.optString("combosearch"));
            } catch(Exception e){
                combosearch = compareObj.optString("combosearch");
            }
            String isinterval = compareObj.optString("isinterval");
            String interval = compareObj.optString("interval");
            String isbefore = compareObj.optString("isbefore");
            boolean isForProductMasterSearch = compareObj.optBoolean("isForProductMasterSearch",false);

            List<String> searchTextItems = Arrays.asList(searchText.split("\\s*,\\s*"));
            List<String> searchItems = Arrays.asList(search.split("\\s*,\\s*"));
            List<String> combosearchItems = Arrays.asList(combosearch.split("\\s*,\\s*"));

            JSONArray comparedata = new JSONArray();
            for (int i = 0; i < searchTextItems.size(); i++) {
                JSONObject cntObj = new JSONObject();
                cntObj.put("searchText", searchTextItems.get(i));
                cntObj.put("search", searchItems.get(i));
                cntObj.put("combosearch", combosearchItems.get(i));
                cntObj.put("column", column);
                cntObj.put("refdbname", refdbname);
                cntObj.put("xfield", xfield);
                cntObj.put("iscustomcolumn", iscustomcolumn);
                cntObj.put("iscustomcolumndata", iscustomcolumndata);
                cntObj.put("isfrmpmproduct", isfrmpmproduct);
                cntObj.put("fieldtype", fieldtype);
                cntObj.put("columnheader", columnheader);
                cntObj.put("xtype", xtype);
                cntObj.put("isinterval", isinterval);
                cntObj.put("interval", interval);
                cntObj.put("isForProductMasterSearch", isForProductMasterSearch);
                cntObj.put("isbefore", isbefore);
                comparedata.put(cntObj);
            }

            for (j = 0; j < comparedata.length(); j++) {
                JSONArray dimSearchJsonArr = new JSONArray();
                JSONObject dimJson = comparedata.getJSONObject(j);
                dimSearchJsonArr.put(dimJson);
                JSONObject putSearchJson = new JSONObject();
                putSearchJson.put("root", dimSearchJsonArr);
                //  search JSON Array for Dimension Based report
                request.setAttribute("DimensionBasedComparisionReport", "DimensionBasedComparisionReport");
                request.setAttribute("DimensionBasedSearchJson", putSearchJson);
                request.setAttribute("monthlyreport", "MonthlyReport");
                request.setAttribute("isPeriod", true);
//                JSONObject jobj = getTrialBalance(request);
                JSONObject paramJObj = StringUtil.convertRequestToJsonObject(request);
                JSONObject jobj = accReportsService.getTrialBalance(paramJObj);
                JSONArray leftObjArr = jobj.getJSONArray(Constants.RES_data);
                if (j==0) {
                    templeftObjArr = jobj.getJSONArray(Constants.RES_data);
                }

                for (int i = 0; i < leftObjArr.length(); i++) {
                    JSONObject getObj = leftObjArr.getJSONObject(i);
                    String accId = "";
                    if (getObj.has("accountid")) {
                        accId = getObj.getString("accountid");
                    }
                    if (!accId.equals("")) {
                        if (j == 0) {
                            JSONObject putObj = new JSONObject();
                            if (getObj.has("acccode")) {
                                putObj.put("acccode", getObj.get("acccode"));
                            }
                            if (getObj.has("aliascode")) {
                                putObj.put("aliascode", getObj.get("aliascode"));
                            }
                            if (getObj.has("accountname")) {
                                putObj.put("accountname", getObj.get("accountname"));
                            }
                            if (getObj.has("acctype")) {
                                putObj.put("acctype", getObj.getString("acctype"));
                            }
                            if (getObj.has("level")) {
                                putObj.put("level", getObj.get("level"));
                            }
                            if (getObj.has("fmt")) {
                                putObj.put("fmt", getObj.get("fmt"));
                            }
                            if (getObj.has("accountflag")) {
                                putObj.put("accountflag", getObj.get("accountflag"));
                            }
                            if (getObj.has("leaf")) {
                                putObj.put("leaf", getObj.getBoolean("leaf"));
                            }
                            if (getObj.has("isdebit")) {
                                putObj.put("isdebit", getObj.get("isdebit"));
                            }
                            if (getObj.has("d_amount_open")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("d_amount_open").toString()));
                                    putObj.put("d_amount_open_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("d_amount_open_total", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("d_amount_open_0", getObj.get("d_amount_open"));
                                    putObj.put("d_amount_open_total", getObj.get("d_amount_open"));
                                }
                            }
                            if (getObj.has("c_amount_open")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("c_amount_open").toString()));
                                    putObj.put("c_amount_open_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("c_amount_open_total", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("c_amount_open_0", getObj.get("c_amount_open"));
                                    putObj.put("c_amount_open_total", getObj.get("c_amount_open"));
                                }
                            }
                            if (getObj.has("d_amount_period")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("d_amount_period").toString()));
                                    putObj.put("d_amount_period_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("d_amount_period_total", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("d_amount_period_0", getObj.get("d_amount_period"));
                                    putObj.put("d_amount_period_total", getObj.get("d_amount_period"));
                                }
                            }
                            if (getObj.has("c_amount_period")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("c_amount_period").toString()));
                                    putObj.put("c_amount_period_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("c_amount_period_total", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("c_amount_period_0", getObj.get("c_amount_period"));
                                    putObj.put("c_amount_period_total", getObj.get("c_amount_period"));
                                }
                            }
                            if (getObj.has("d_amount")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("d_amount").toString()));
                                    putObj.put("d_amount_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("d_amount_total", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("d_amount_0", getObj.get("d_amount"));
                                    putObj.put("d_amount_total", getObj.get("d_amount"));
                                }
                            }
                            if (getObj.has("c_amount")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("c_amount").toString()));
                                    putObj.put("c_amount_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("c_amount_total", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("c_amount_0", getObj.get("c_amount"));
                                    putObj.put("c_amount_total", getObj.get("c_amount"));
                                }
                            }
                            if (getObj.has("ytd_d_amount_open")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("ytd_d_amount_open").toString()));
                                    putObj.put("ytd_d_amount_open_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("ytd_d_amount_open_total", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("ytd_d_amount_open_0", getObj.get("ytd_d_amount_open"));
                                    putObj.put("ytd_d_amount_open_total", getObj.get("ytd_d_amount_open"));
                                }
                            }
                            if (getObj.has("ytd_c_amount_open")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("ytd_c_amount_open").toString()));
                                    putObj.put("ytd_c_amount_open_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("ytd_c_amount_open_total", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("ytd_c_amount_open_0", getObj.get("ytd_c_amount_open"));
                                    putObj.put("ytd_c_amount_open_total", getObj.get("ytd_c_amount_open"));
                                }
                            }
                            if (getObj.has("ytd_d_amount_period")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("ytd_d_amount_period").toString()));
                                    putObj.put("ytd_d_amount_period_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("ytd_d_amount_period_total", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("ytd_d_amount_period_0", getObj.get("ytd_d_amount_period"));
                                    putObj.put("ytd_d_amount_period_total", getObj.get("ytd_d_amount_period"));
                                }
                            }
                            if (getObj.has("ytd_c_amount_period")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("ytd_c_amount_period").toString()));
                                    putObj.put("ytd_c_amount_period_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("ytd_c_amount_period_total", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("ytd_c_amount_period_0", getObj.get("ytd_c_amount_period"));
                                    putObj.put("ytd_c_amount_period_total", getObj.get("ytd_c_amount_period"));
                                }
                            }
                            if (getObj.has("ytd_d_amount")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("ytd_d_amount").toString()));
                                    putObj.put("ytd_d_amount_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("ytd_d_amount_total", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("ytd_d_amount_0", getObj.get("ytd_d_amount"));
                                    putObj.put("ytd_d_amount_total", getObj.get("ytd_d_amount"));
                                }
                            }
                            if (getObj.has("ytd_c_amount")) {
                                try {
                                    double temptotal = Double.parseDouble((getObj.get("ytd_c_amount").toString()));
                                    putObj.put("ytd_c_amount_0", authHandler.formattedAmount(temptotal, companyid));
                                    putObj.put("ytd_c_amount_total", authHandler.formattedAmount(temptotal, companyid));
                                } catch (Exception e) {
                                    putObj.put("ytd_c_amount_0", getObj.get("ytd_c_amount"));
                                    putObj.put("ytd_c_amount_total", getObj.get("ytd_c_amount"));
                                }
                            }
                            putObj.put("accountid", accId);
                            jArrL.put(accId, putObj);
                        } else {
                            JSONObject putObj1 = new JSONObject();
                            if (jArrL.has(accId)) {
                                putObj1 = jArrL.getJSONObject(accId);
                            } else {
                                if (getObj.has("acccode")) {
                                    putObj1.put("acccode", getObj.get("acccode"));
                                }
                                if (getObj.has("aliascode")) {
                                    putObj1.put("aliascode", getObj.get("aliascode"));
                                }
                                if (getObj.has("accountname")) {
                                    putObj1.put("accountname", getObj.get("accountname"));
                                }
                                if (getObj.has("acctype")) {
                                    putObj1.put("acctype", getObj.getString("acctype"));
                                }
                                if (getObj.has("level")) {
                                    putObj1.put("level", getObj.get("level"));
                                }
                                if (getObj.has("fmt")) {
                                    putObj1.put("fmt", getObj.get("fmt"));
                                }
                                if (getObj.has("accountflag")) {
                                    putObj1.put("accountflag", getObj.get("accountflag"));
                                }
                                if (getObj.has("leaf")) {
                                    putObj1.put("leaf", getObj.getBoolean("leaf"));
                                }
                                if (getObj.has("isdebit")) {
                                    putObj1.put("isdebit", getObj.get("isdebit"));
                                }
                                putObj1.put("accountid", accId);
                                if (getObj.get("accountname").toString().equals("Net Loss")) {
                                    JSONObject check = templeftObjArr.getJSONObject(templeftObjArr.length() - 1);
                                    JSONObject check1 = templeftObjArr.getJSONObject(templeftObjArr.length() - 2);
                                    if (!check.get("accountname").toString().equals("Net Loss") && !check1.get("accountname").toString().equals("Net Loss")) {
                                        templeftObjArr.put(getObj);
                                    }
                                }
                                if (getObj.get("accountname").toString().equals("Net Profit")) {
                                    JSONObject check = templeftObjArr.getJSONObject(templeftObjArr.length() - 1);
                                    JSONObject check1 = templeftObjArr.getJSONObject(templeftObjArr.length() - 2);
                                    if (!check.get("accountname").toString().equals("Net Profit") && !check1.get("accountname").toString().equals("Net Profit")) {
                                        templeftObjArr.put(getObj);
                                    }
                                }
                                if (getObj.get("accountname").toString().equals("Gross Loss")) {
                                    JSONObject check = templeftObjArr.getJSONObject(templeftObjArr.length() - 1);
                                    JSONObject check1 = templeftObjArr.getJSONObject(templeftObjArr.length() - 2);
                                    if (!check.get("accountname").toString().equals("Gross Loss") && !check1.get("accountname").toString().equals("Gross Loss")) {
                                        templeftObjArr.put(getObj);
                                    }
                                }
                                if (getObj.get("accountname").toString().equals("Gross Profit")) {
                                    JSONObject check = templeftObjArr.getJSONObject(templeftObjArr.length() - 1);
                                    JSONObject check1 = templeftObjArr.getJSONObject(templeftObjArr.length() - 2);
                                    if (!check.get("accountname").toString().equals("Gross Profit") && !check1.get("accountname").toString().equals("Gross Profit")) {
                                        templeftObjArr.put(getObj);
                                    }
                                }
                                templeftObjArr.put(getObj);
                            }
                            if (getObj.has("d_amount_open")) {
                                putObj1.put("d_amount_open_" + j, getObj.get("d_amount_open"));
                                if (putObj1.has("d_amount_open_total")) {
                                    double temptotal = Double.parseDouble((putObj1.get("d_amount_open_total").toString().equals("") || putObj1.get("d_amount_open_total").toString().equals("-") || putObj1.get("d_amount_open_total").toString().contains("<")) ? "0.0" : (putObj1.get("d_amount_open_total").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("d_amount_open").toString().equals("") || getObj.get("d_amount_open").toString().equals("-") || getObj.get("d_amount_open").toString().contains("<")) ? "0.0" : (getObj.get("d_amount_open").toString()));
                                    putObj1.put("d_amount_open_total", temptotal == 0.0 ? "" : authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("d_amount_open").toString()));
                                        putObj1.put("d_amount_open_total", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("d_amount_open_total", getObj.get("d_amount_open"));
                                    }
                                }
                            }
                            if (getObj.has("c_amount_open")) {
                                putObj1.put("c_amount_open_" + j, getObj.get("c_amount_open"));
                                if (putObj1.has("c_amount_open_total")) {
                                    double temptotal = Double.parseDouble((putObj1.get("c_amount_open_total").toString().equals("") || putObj1.get("c_amount_open_total").toString().equals("-") || putObj1.get("c_amount_open_total").toString().contains("<")) ? "0.0" : (putObj1.get("c_amount_open_total").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("c_amount_open").toString().equals("") || getObj.get("c_amount_open").toString().equals("-") || getObj.get("c_amount_open").toString().contains("<")) ? "0.0" : (getObj.get("c_amount_open").toString()));
                                    putObj1.put("c_amount_open_total", authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("c_amount_open").toString()));
                                        putObj1.put("c_amount_open_total", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("c_amount_open_total", getObj.get("c_amount_open"));
                                    }
                                }
                            }
                            if (getObj.has("d_amount_period")) {
                                putObj1.put("d_amount_period_" + j, getObj.get("d_amount_period"));
                                if (putObj1.has("d_amount_period_total")) {
                                    double temptotal = Double.parseDouble((putObj1.get("d_amount_period_total").toString().equals("") || putObj1.get("d_amount_period_total").toString().equals("-") || putObj1.get("d_amount_period_total").toString().contains("<")) ? "0.0" : (putObj1.get("d_amount_period_total").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("d_amount_period").toString().equals("") || getObj.get("d_amount_period").toString().equals("-") || getObj.get("d_amount_period").toString().contains("<")) ? "0.0" : (getObj.get("d_amount_period").toString()));
                                    putObj1.put("d_amount_period_total", temptotal == 0.0 ? "" : authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("d_amount_period").toString()));
                                        putObj1.put("d_amount_period_total", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("d_amount_period_total", getObj.get("d_amount_period"));
                                    }
                                }
                            }
                            if (getObj.has("c_amount_period")) {
                                putObj1.put("c_amount_period_" + j, getObj.get("c_amount_period"));
                                if (putObj1.has("c_amount_period_total")) {
                                    double temptotal = Double.parseDouble((putObj1.get("c_amount_period_total").toString().equals("") || putObj1.get("c_amount_period_total").toString().equals("-") || putObj1.get("c_amount_period_total").toString().contains("<")) ? "0.0" : (putObj1.get("c_amount_period_total").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("c_amount_period").toString().equals("") || getObj.get("c_amount_period").toString().equals("-") || getObj.get("c_amount_period").toString().contains("<")) ? "0.0" : (getObj.get("c_amount_period").toString()));
                                    putObj1.put("c_amount_period_total", authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("c_amount_period").toString()));
                                        putObj1.put("c_amount_period_total", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("c_amount_period_total", getObj.get("c_amount_period"));
                                    }
                                }
                            }
                            if (getObj.has("d_amount")) {
                                putObj1.put("d_amount_" + j, getObj.get("d_amount"));
                                if (putObj1.has("d_amount_total")) {
                                    double temptotal = Double.parseDouble((putObj1.get("d_amount_total").toString().equals("") || putObj1.get("d_amount_total").toString().equals("-") || putObj1.get("d_amount_total").toString().contains("<")) ? "0.0" : (putObj1.get("d_amount_total").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("d_amount").toString().equals("") || getObj.get("d_amount").toString().equals("-") || getObj.get("d_amount").toString().contains("<")) ? "0.0" : (getObj.get("d_amount").toString()));
                                    putObj1.put("d_amount_total", temptotal == 0.0 ? "" : authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("d_amount").toString()));
                                        putObj1.put("d_amount_total", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("d_amount_total", getObj.get("d_amount"));
                                    }
                                }
                            }
                            if (getObj.has("c_amount")) {
                                putObj1.put("c_amount_" + j, getObj.get("c_amount"));
                                if (putObj1.has("c_amount_total")) {
                                    double temptotal = Double.parseDouble((putObj1.get("c_amount_total").toString().equals("") || putObj1.get("c_amount_total").toString().equals("-") || putObj1.get("c_amount_total").toString().contains("<")) ? "0.0" : (putObj1.get("c_amount_total").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("c_amount").toString().equals("") || getObj.get("c_amount").toString().equals("-") || getObj.get("c_amount").toString().contains("<")) ? "0.0" : (getObj.get("c_amount").toString()));
                                    putObj1.put("c_amount_total", authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("c_amount").toString()));
                                        putObj1.put("c_amount_total", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("c_amount_total", getObj.get("c_amount"));
                                    }
                                }
                            }
                            if (getObj.has("ytd_d_amount_open")) {
                                putObj1.put("ytd_d_amount_open_" + j, getObj.get("ytd_d_amount_open"));
                                if (putObj1.has("ytd_d_amount_open_total")) {
                                    double temptotal = Double.parseDouble((putObj1.get("ytd_d_amount_open_total").toString().equals("") || putObj1.get("ytd_d_amount_open_total").toString().equals("-") || putObj1.get("ytd_d_amount_open_total").toString().contains("<")) ? "0.0" : (putObj1.get("ytd_d_amount_open_total").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("ytd_d_amount_open").toString().equals("") || getObj.get("ytd_d_amount_open").toString().equals("-") || getObj.get("ytd_d_amount_open").toString().contains("<")) ? "0.0" : (getObj.get("ytd_d_amount_open").toString()));
                                    putObj1.put("ytd_d_amount_open_total", temptotal == 0.0 ? "" : authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("ytd_d_amount_open").toString()));
                                        putObj1.put("ytd_d_amount_open_total", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("ytd_d_amount_open_total", getObj.get("ytd_d_amount_open"));
                                    }
                                }
                            }
                            if (getObj.has("ytd_c_amount_open")) {
                                putObj1.put("ytd_c_amount_open_" + j, getObj.get("ytd_c_amount_open"));
                                if (putObj1.has("ytd_c_amount_open_total")) {
                                    double temptotal = Double.parseDouble((putObj1.get("ytd_c_amount_open_total").toString().equals("") || putObj1.get("ytd_c_amount_open_total").toString().equals("-") || putObj1.get("ytd_c_amount_open_total").toString().contains("<")) ? "0.0" : (putObj1.get("ytd_c_amount_open_total").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("ytd_c_amount_open").toString().equals("") || getObj.get("ytd_c_amount_open").toString().equals("-") || getObj.get("ytd_c_amount_open").toString().contains("<")) ? "0.0" : (getObj.get("ytd_c_amount_open").toString()));
                                    putObj1.put("ytd_c_amount_open_total", authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("ytd_c_amount_open").toString()));
                                        putObj1.put("ytd_c_amount_open_total", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("ytd_c_amount_open_total", getObj.get("ytd_c_amount_open"));
                                    }
                                }
                            }
                            if (getObj.has("ytd_d_amount_period")) {
                                putObj1.put("ytd_d_amount_period_" + j, getObj.get("ytd_d_amount_period"));
                                if (putObj1.has("ytd_d_amount_period_total")) {
                                    double temptotal = Double.parseDouble((putObj1.get("ytd_d_amount_period_total").toString().equals("") || putObj1.get("ytd_d_amount_period_total").toString().equals("-") || putObj1.get("ytd_d_amount_period_total").toString().contains("<")) ? "0.0" : (putObj1.get("ytd_d_amount_period_total").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("ytd_d_amount_period").toString().equals("") || getObj.get("ytd_d_amount_period").toString().equals("-") || getObj.get("ytd_d_amount_period").toString().contains("<")) ? "0.0" : (getObj.get("ytd_d_amount_period").toString()));
                                    putObj1.put("ytd_d_amount_period_total", temptotal == 0.0 ? "" : authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("ytd_d_amount_period").toString()));
                                        putObj1.put("ytd_d_amount_period_total", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("ytd_d_amount_period_total", getObj.get("ytd_d_amount_period"));
                                    }
                                }
                            }
                            if (getObj.has("ytd_c_amount_period")) {
                                putObj1.put("ytd_c_amount_period_" + j, getObj.get("ytd_c_amount_period"));
                                if (putObj1.has("ytd_c_amount_period_total")) {
                                    double temptotal = Double.parseDouble((putObj1.get("ytd_c_amount_period_total").toString().equals("") || putObj1.get("ytd_c_amount_period_total").toString().equals("-") || putObj1.get("ytd_c_amount_period_total").toString().contains("<")) ? "0.0" : (putObj1.get("ytd_c_amount_period_total").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("ytd_c_amount_period").toString().equals("") || getObj.get("ytd_c_amount_period").toString().equals("-") || getObj.get("ytd_c_amount_period").toString().contains("<")) ? "0.0" : (getObj.get("ytd_c_amount_period").toString()));
                                    putObj1.put("ytd_c_amount_period_total", authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("ytd_c_amount_period").toString()));
                                        putObj1.put("ytd_c_amount_period_total", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("ytd_c_amount_period_total", getObj.get("ytd_c_amount_period"));
                                    }
                                }
                            }
                            if (getObj.has("ytd_d_amount")) {
                                putObj1.put("ytd_d_amount_" + j, getObj.get("ytd_d_amount"));
                                if (putObj1.has("ytd_d_amount_total")) {
                                    double temptotal = Double.parseDouble((putObj1.get("ytd_d_amount_total").toString().equals("") || putObj1.get("ytd_d_amount_total").toString().equals("-") || putObj1.get("ytd_d_amount_total").toString().contains("<")) ? "0.0" : (putObj1.get("ytd_d_amount_total").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("ytd_d_amount").toString().equals("") || getObj.get("ytd_d_amount").toString().equals("-") || getObj.get("ytd_d_amount").toString().contains("<")) ? "0.0" : (getObj.get("ytd_d_amount").toString()));
                                    putObj1.put("ytd_d_amount_total", temptotal == 0.0 ? "" : authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("ytd_d_amount").toString()));
                                        putObj1.put("ytd_d_amount_total", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("ytd_d_amount_total", getObj.get("ytd_d_amount"));
                                    }
                                }
                            }
                            if (getObj.has("ytd_c_amount")) {
                                putObj1.put("ytd_c_amount_" + j, getObj.get("ytd_c_amount"));
                                if (putObj1.has("ytd_c_amount_total")) {
                                    double temptotal = Double.parseDouble((putObj1.get("ytd_c_amount_total").toString().equals("") || putObj1.get("ytd_c_amount_total").toString().equals("-") || putObj1.get("ytd_c_amount_total").toString().contains("<")) ? "0.0" : (putObj1.get("ytd_c_amount_total").toString()));
                                    temptotal = temptotal + Double.parseDouble((getObj.get("ytd_c_amount").toString().equals("") || getObj.get("ytd_c_amount").toString().equals("-") || getObj.get("ytd_c_amount").toString().contains("<")) ? "0.0" : (getObj.get("ytd_c_amount").toString()));
                                    putObj1.put("ytd_c_amount_total", authHandler.formattedAmount(temptotal, companyid));
                                } else {
                                    try {
                                        double temptotal = Double.parseDouble((getObj.get("ytd_c_amount").toString()));
                                        putObj1.put("ytd_c_amount_total", authHandler.formattedAmount(temptotal, companyid));
                                    } catch (Exception e) {
                                        putObj1.put("ytd_c_amount_total", getObj.get("ytd_c_amount"));
                                    }
                                }
                            }
                            jArrL.put(accId, putObj1);      
                        }
                    }
                }
            }
            /*
             * isExport will be true in case of print and export(csv,xls)
             * This is done to avoid addition of blank header in export and print case.
             * Ticket--> ERP-37002
             */
            if (request.getAttribute("isExport") != null && !StringUtil.isNullOrEmpty(request.getAttribute("isExport").toString())) {
                isExport = (Boolean) request.getAttribute("isExport");
            }
            if (!isExport) {
                jobjTemp.put("header", " ");
                jobjTemp.put("tip", " ");
                jobjTemp.put("dataIndex", "accountid");
                jobjTemp.put("width", 200);
                jobjTemp.put("hidden", true);
                jarrColumns.put(jobjTemp);
            }

            JSONObject dimObj = new JSONObject();
            dimObj.put("name", "accountid");
            jarrRecords.put(dimObj);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Account Code");
            jobjTemp.put("tip", "Account Code");
            jobjTemp.put("dataIndex", "acccode");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            dimObj = new JSONObject();
            dimObj.put("name", "acccode");
            jarrRecords.put(dimObj);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Alias Code");
            jobjTemp.put("tip", "Alias Code");
            jobjTemp.put("dataIndex", "aliascode");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            dimObj = new JSONObject();
            dimObj.put("name", "aliascode");
            jarrRecords.put(dimObj);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Account");
            jobjTemp.put("tip", "Account");
            jobjTemp.put("dataIndex", "accountname");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            dimObj = new JSONObject();
            dimObj.put("name", "accountname");
            jarrRecords.put(dimObj);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Group Type");
            jobjTemp.put("tip", "Group Type");
            jobjTemp.put("dataIndex", "acctype");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            dimObj = new JSONObject();
            dimObj.put("name", "acctype");
            jarrRecords.put(dimObj);
            
            dimObj = new JSONObject();
            dimObj.put("name", "fmt");
            jarrRecords.put(dimObj);

            for (int k = 0; k < combosearchItems.size(); k++) {
                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "d_amount_open_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", combosearchItems.get(k) + " Opening Amount Debit " + currencyname);
                jobjTemp.put("tip", combosearchItems.get(k) + " Opening Amount Debit " + currencyname);
                jobjTemp.put("dataIndex", "d_amount_open_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "c_amount_open_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", combosearchItems.get(k) + " Opening Amount Credit " + currencyname);
                jobjTemp.put("tip", combosearchItems.get(k) + " Opening Amount Credit " + currencyname);
                jobjTemp.put("dataIndex", "c_amount_open_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "d_amount_period_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", combosearchItems.get(k) + " Period Amount Debit " + currencyname);
                jobjTemp.put("tip", combosearchItems.get(k) + " Period Amount Debit " + currencyname);
                jobjTemp.put("dataIndex", "d_amount_period_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "c_amount_period_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", combosearchItems.get(k) + " Period Amount Credit " + currencyname);
                jobjTemp.put("tip", combosearchItems.get(k) + " Period Amount Credit " + currencyname);
                jobjTemp.put("dataIndex", "c_amount_period_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "d_amount_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", combosearchItems.get(k) + " Ending Amount Debit " + currencyname);
                jobjTemp.put("tip", combosearchItems.get(k) + " Ending Amount Debit " + currencyname);
                jobjTemp.put("dataIndex", "d_amount_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "c_amount_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", combosearchItems.get(k) + " Ending Amount Credit " + currencyname);
                jobjTemp.put("tip", combosearchItems.get(k) + " Ending Amount Credit " + currencyname);
                jobjTemp.put("dataIndex", "c_amount_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "ytd_d_amount_open_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", combosearchItems.get(k) + " YTD Opening Amount Debit " + currencyname);
                jobjTemp.put("tip", combosearchItems.get(k) + " YTD Opening Amount Debit " + currencyname);
                jobjTemp.put("dataIndex", "ytd_d_amount_open_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "ytd_c_amount_open_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", combosearchItems.get(k) + " YTD Opening Amount Credit " + currencyname);
                jobjTemp.put("tip", combosearchItems.get(k) + " YTD Opening Amount Credit " + currencyname);
                jobjTemp.put("dataIndex", "ytd_c_amount_open_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "ytd_d_amount_period_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", combosearchItems.get(k) + " YTD Period Amount Debit " + currencyname);
                jobjTemp.put("tip", combosearchItems.get(k) + " YTD Period Amount Debit " + currencyname);
                jobjTemp.put("dataIndex", "ytd_d_amount_period_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "ytd_c_amount_period_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", combosearchItems.get(k) + " YTD Period Amount Credit " + currencyname);
                jobjTemp.put("tip", combosearchItems.get(k) + " YTD Period Amount Credit " + currencyname);
                jobjTemp.put("dataIndex", "ytd_c_amount_period_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "ytd_d_amount_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", combosearchItems.get(k) + " YTD Ending Amount Debit " + currencyname);
                jobjTemp.put("tip", combosearchItems.get(k) + " YTD Ending Amount Debit " + currencyname);
                jobjTemp.put("dataIndex", "ytd_d_amount_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                //put the Record
                dimObj = new JSONObject();
                dimObj.put("name", "ytd_c_amount_" + k);
                jarrRecords.put(dimObj);

                //put Column
                jobjTemp = new JSONObject();
                jobjTemp.put("header", combosearchItems.get(k) + " YTD Ending Amount Credit " + currencyname);
                jobjTemp.put("tip", combosearchItems.get(k) + " YTD Ending Amount Credit " + currencyname);
                jobjTemp.put("dataIndex", "ytd_c_amount_" + k);
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);
            }

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "d_amount_open_total");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total Opening Amount Debit " + currencyname);
            jobjTemp.put("tip", "Total Opening Amount Debit " + currencyname);
            jobjTemp.put("dataIndex", "d_amount_open_total");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "c_amount_open_total");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total Opening Amount Credit " + currencyname);
            jobjTemp.put("tip", "Total Opening Amount Credit " + currencyname);
            jobjTemp.put("dataIndex", "c_amount_open_total");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "d_amount_period_total");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total Period Amount Debit " + currencyname);
            jobjTemp.put("tip", "Total Period Amount Debit " + currencyname);
            jobjTemp.put("dataIndex", "d_amount_period_total");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "c_amount_period_total");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total Period Amount Credit " + currencyname);
            jobjTemp.put("tip", "Total Period Amount Credit " + currencyname);
            jobjTemp.put("dataIndex", "c_amount_period_total");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "d_amount_total");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total Ending Amount Debit " + currencyname);
            jobjTemp.put("tip", "Total Ending Amount Debit " + currencyname);
            jobjTemp.put("dataIndex", "d_amount_total");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "c_amount_total");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total Ending Amount Credit " + currencyname);
            jobjTemp.put("tip", "Total Ending Amount Credit " + currencyname);
            jobjTemp.put("dataIndex", "c_amount_total");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "ytd_d_amount_open_total");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total YTD Opening Amount Debit " + currencyname);
            jobjTemp.put("tip", "Total YTD Opening Amount Debit " + currencyname);
            jobjTemp.put("dataIndex", "ytd_d_amount_open_total");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "ytd_c_amount_open_total");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total YTD Opening Amount Credit " + currencyname);
            jobjTemp.put("tip", "Total YTD Opening Amount Credit " + currencyname);
            jobjTemp.put("dataIndex", "ytd_c_amount_open_total");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "ytd_d_amount_period_total");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total YTD Period Amount Debit " + currencyname);
            jobjTemp.put("tip", "Total YTD Period Amount Debit " + currencyname);
            jobjTemp.put("dataIndex", "ytd_d_amount_period_total");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "ytd_c_amount_period_total");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total YTD Period Amount Credit " + currencyname);
            jobjTemp.put("tip", "Total YTD Period Amount Credit " + currencyname);
            jobjTemp.put("dataIndex", "ytd_c_amount_period_total");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "ytd_d_amount_total");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total YTD Ending Amount Debit " + currencyname);
            jobjTemp.put("tip", "Total YTD Ending Amount Debit " + currencyname);
            jobjTemp.put("dataIndex", "ytd_d_amount_total");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);

            //put the Record
            dimObj = new JSONObject();
            dimObj.put("name", "ytd_c_amount_total");
            jarrRecords.put(dimObj);

            //put Column
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total YTD Ending Amount Credit " + currencyname);
            jobjTemp.put("tip", "Total YTD Ending Amount Credit " + currencyname);
            jobjTemp.put("dataIndex", "ytd_c_amount_total");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 200);
            jarrColumns.put(jobjTemp);
            
            jobj1.put("jarrColumns", jarrColumns);
            jobj1.put("jarrRecords", jarrRecords);
            jobj1.put("left", jArrL);
            jobj1.put("refleft", AccReportsHandler.getConvertedJSONArray(jArrL, templeftObjArr));
            jobj1.put("right", jArrR);
            jobj1.put("refright", AccReportsHandler.getConvertedJSONArray(jArrR, temprightObjArr1));
        } catch (JSONException e) {
            e.printStackTrace();
            throw ServiceException.FAILURE("getMonthlyTradingProfitLossExport : " + e.getMessage(), e);
        } catch (Exception e) {
            System.out.println(e);
            e.printStackTrace();
        }
        return jobj1;
    }

    public ModelAndView getInventoryMovementReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONArray jArr = getInventoryMovement(request, false);

            JSONArray monthArray = getMonthsJSONArray(request);
            monthArray.put(new JSONObject().put("monthname", "Total"));

            if (jArr.length() == 0) {
                jArr.put(new JSONObject().put("months", monthArray));
            } else {
                JSONObject firstObject = jArr.getJSONObject(0);
                firstObject.put("months", monthArray);
            }
            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView exportInventoryMovementReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        String view = "jsonView-empty";
        try {
            JSONArray jArr = getInventoryMovement(request, true);
            JSONArray monthArray = getMonthsJSONArray(request);
            monthArray.put(new JSONObject().put("monthname", "Total"));
            if (jArr.length() == 0) {
                jArr.put(new JSONObject().put("months", monthArray));
            } else {
                JSONObject firstObject = jArr.getJSONObject(0);
                firstObject.put("months", monthArray);
            }
            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    private JSONArray getInventoryMovement(HttpServletRequest request, boolean isForExport) throws JSONException, SessionExpiredException, ServiceException, ParseException {
        JSONArray DataJArr = new JSONArray();
        boolean isInventoryDetails = request.getParameter("isinventoryDetails") != null ? Boolean.parseBoolean(request.getParameter("isinventoryDetails")) : false;
        boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
        String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        DateFormat df = authHandler.getDateOnlyFormat();
        KwlReturnObject accResult = accAccountDAOobj.quotationindecimalforcompany(sessionHandlerImpl.getCompanyid(request));
        int quantitydigitafterdecimal = 4;
        if (accResult.getEntityList().get(0) != null) {
            Object[] decimalcontact = (Object[]) accResult.getEntityList().get(0);

            if (decimalcontact[1] != null) {
                quantitydigitafterdecimal = (Integer) decimalcontact[1];
            }
        }
        KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
        KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
        final DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
        Date startDate = dtf.parseLocalDate(request.getParameter("stdate")).toDate();
        Date endDate = dtf.parseLocalDate(request.getParameter("enddate")).toDate();

        LocalDate localStartDate = new LocalDate(startDate);
        LocalDate localEndDate = new LocalDate(endDate);

        startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
        endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();

        SimpleDateFormat sdf = new SimpleDateFormat("MMM DD, yyyy");

        requestParams.put(Constants.REQ_startdate, startDate);
        requestParams.put(Constants.REQ_enddate, endDate);
        requestParams.put(Constants.df, sdf);
        String companyid = "";
        for (int cnt = 0; cnt < companyids.length; cnt++) {
            companyid = companyids[cnt];
            request.setAttribute(Constants.companyKey, companyid);
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put("ss", request.getParameter("ss"));
            requestParams.put("locationid", request.getParameter("locationid"));
            requestParams.put("type", request.getParameter("type"));
            KwlReturnObject result = accProductObj.getBuildAssemblyProducts(requestParams); //accInvoiceDAOobj.getInvoicesMerged(requestParams);
            List list = result.getEntityList();
            DataJArr = getBuildAssemblyProductsJSON(request, list);//            DataJArr =  accInvoiceServiceDAO.getInvoiceJsonMerged(request, list, DataJArr); 
        }

        List monthList = getMonthList(request.getParameter("stdate"), request.getParameter("enddate"), "MMMM, yyyy");
        monthList.add("Total");

        Map productMap = new HashMap();

        SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
        for (int invIndex = 0; invIndex < DataJArr.length(); invIndex++) {
            JSONObject build = DataJArr.getJSONObject(invIndex);
            String productid = build.getString("productid");  //String customerid = build.getString("personid");  
            Double buildcost = build.optDouble("buildcost", 0.0);
            Double buildqty = build.optDouble("quantity", 0.0);

            LocalDate buildDate = new LocalDate(sdf1.parse(build.getString("entrydate")));
            String monthYear = buildDate.toString("MMM yyyy");

            if (productMap.containsKey(productid)) {
                Map monthlyBuildMap = (HashMap) productMap.get(productid);
                if (monthlyBuildMap == null) {
                    monthlyBuildMap = new HashMap();
                    monthlyBuildMap.put(monthYear, buildcost);
                    monthlyBuildMap.put(monthYear + "qty", buildqty);
                } else {
                    Double monthlyBuildProdCost = (Double) monthlyBuildMap.get(monthYear);
                    Double monthlyBuildQty = (Double) monthlyBuildMap.get(monthYear + "qty");
                    if (monthlyBuildProdCost == null) {
                        monthlyBuildMap.put(monthYear, buildcost);
                        monthlyBuildMap.put(monthYear + "qty", buildqty);
                    } else {
                        double amount = monthlyBuildProdCost.doubleValue();
                        double quantity = monthlyBuildQty.doubleValue();
                        amount += buildcost.doubleValue();
                        quantity += buildqty.doubleValue();
                        monthlyBuildMap.put(monthYear, new Double(amount));
                        monthlyBuildMap.put(monthYear + "qty", new Double(quantity));
                    }
                }
                if (isForExport) {//total only in export case
                    Map monthlyBuildTotalMap = new HashMap();
                    if (productMap.containsKey("Total")) {
                        monthlyBuildTotalMap = (HashMap) productMap.get("Total");
                        if (monthlyBuildTotalMap.containsKey(monthYear)) {
                            double totalAmount = (Double) monthlyBuildTotalMap.get(monthYear);
                            double totalQty = (Double) monthlyBuildTotalMap.get(monthYear + "qty");
                            totalAmount += buildcost;
                            totalQty += buildqty;
                            monthlyBuildTotalMap.put(monthYear, totalAmount);
                            monthlyBuildTotalMap.put(monthYear + "qty", totalQty);
                        } else {
                            monthlyBuildTotalMap.put(monthYear, buildcost);
                            monthlyBuildTotalMap.put(monthYear + "qty", buildqty);
                        }
                        productMap.put("Total", monthlyBuildTotalMap);
                    } else {
                        monthlyBuildTotalMap = new HashMap();
                        monthlyBuildTotalMap.put(monthYear, buildcost);
                        monthlyBuildTotalMap.put(monthYear + "qty", buildqty);
                        productMap.put("Total", monthlyBuildTotalMap);
                    }
                }
            } else {
                Map monthlyBuildMap = new HashMap();
                monthlyBuildMap.put(monthYear, buildcost);
                monthlyBuildMap.put(monthYear + "qty", buildqty);
                productMap.put(productid, monthlyBuildMap);

                if (isForExport) {
                    Map monthlyBuildTotalMap = new HashMap();
                    if (productMap.containsKey("Total")) {
                        monthlyBuildTotalMap = (HashMap) productMap.get("Total");
                        if (monthlyBuildTotalMap.containsKey(monthYear)) {
                            double totalAmount = (Double) monthlyBuildTotalMap.get(monthYear);
                            double totalQty = (Double) monthlyBuildTotalMap.get(monthYear + "qty");
                            totalAmount += buildcost;
                            totalQty += buildqty;
                            monthlyBuildTotalMap.put(monthYear, totalAmount);
                            monthlyBuildTotalMap.put(monthYear + "qty", totalQty);
                        } else {
                            monthlyBuildTotalMap.put(monthYear, buildcost);
                            monthlyBuildTotalMap.put(monthYear + "qty", buildqty);
                        }
                        productMap.put("Total", monthlyBuildTotalMap);
                    } else {
                        monthlyBuildTotalMap = new HashMap();
                        monthlyBuildTotalMap.put(monthYear, buildcost);
                        monthlyBuildTotalMap.put(monthYear + "qty", buildqty);
                        productMap.put("Total", monthlyBuildTotalMap);
                    }
                }
            }
        }

        JSONArray jArr = new JSONArray(); //final data

        Set productSet = productMap.keySet();
        Iterator productIter = productSet.iterator();
        JSONObject jSONObjectTotal = new JSONObject();
        int size = monthList.size();
        double[] monthlyTotal = new double[size];
        double grandTotal = 0.0;
        double grandTotalQty = 0.0;
        while (productIter.hasNext()) {
            String productid = productIter.next().toString();
            Map monthlyBuildMap = (HashMap) productMap.get(productid);

            JSONObject obj = new JSONObject();
            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
            Product product = (Product) objItr.getEntityList().get(0);
            obj.put("prodid", product != null ? product.getProductid() : "");
            obj.put("uom", product != null ? product.getUnitOfMeasure().getNameEmptyforNA() : "");
            obj.put("productid", productid);
            obj.put("productname", product != null ? product.getName() : "");           //            obj.put("customerid", productid);
            double totalBuildCost = 0.00;
            double totalBuildQty = 0.00;
            for (int i = 0; i < monthList.size() - 1; i++) {
                String monthYear = (String) monthList.get(i);

                if (monthlyBuildMap.containsKey(monthYear)) {
                    double monthlyBuildCost = ((Double) monthlyBuildMap.get(monthYear)).doubleValue();
                    double monthlyBuildQty = ((Double) monthlyBuildMap.get(monthYear + "qty")).doubleValue();
                    totalBuildCost += authHandler.round(monthlyBuildCost, companyid);
                    totalBuildQty += authHandler.round(monthlyBuildQty, companyid);
                    if (isForExport) {
                        obj.put("amount_" + i, baseCurrency.getSymbol() + " " + authHandler.formattedAmount(monthlyBuildCost, companyid));
                        obj.put("qty_" + i, authHandler.formattingDecimalForQuantity(monthlyBuildQty, companyid));
                    } else {
                        obj.put("amount_" + i, baseCurrency.getSymbol() + " " + authHandler.formattedAmount(monthlyBuildCost, companyid));
                        obj.put("qty_" + i, authHandler.formattingDecimalForQuantity(monthlyBuildQty, companyid));
                    }

                    monthlyTotal[i] = 0.0 + monthlyTotal[i] + monthlyBuildCost;    //add month total for all customer
                } else {
                    if (isForExport) {
                        obj.put("amount_" + i, baseCurrency.getSymbol() + " " + authHandler.formattedAmount(0, companyid));
                        obj.put("qty_" + i, authHandler.formattingDecimalForQuantity(0.0, companyid));
                    } else {
                        obj.put("amount_" + i, baseCurrency.getSymbol() + " " + authHandler.formattedAmount(0, companyid));
                        obj.put("qty_" + i, authHandler.formattingDecimalForQuantity(0.0, companyid));
                    }
                }
            }
            grandTotal = grandTotal + totalBuildCost;                                       //grand total for all product   \
            grandTotalQty = grandTotalQty + totalBuildQty;
            if (isForExport) {
                obj.put("amount_" + (monthList.size() - 1), authHandler.formattedAmount(totalBuildCost,companyid));
                obj.put("qty_" + (monthList.size() - 1), authHandler.formattingDecimalForQuantity(totalBuildQty, companyid));
            } else {
                obj.put("amount_" + (monthList.size() - 1), baseCurrency.getSymbol() + " " + authHandler.formattedAmount(totalBuildCost, companyid));
                obj.put("qty_" + (monthList.size() - 1), authHandler.formattingDecimalForQuantity(totalBuildQty, companyid));
            }
            if (obj.optString("productid", "").equals("Total")) {
                jSONObjectTotal = obj;
            } else {
                jArr.put(obj);

                if (isForExport && isInventoryDetails) {
                    DateFormat detailSdf = new SimpleDateFormat("MMMM,yyyy");
                    HashMap<String, Object> detailRequestParams = AccountingManager.getGlobalParams(request);
                    detailRequestParams.put("productid", product != null ? product.getID() : "");
                    if (request.getParameter("stdate") != null) {
                        Date startdt = detailSdf.parse(request.getParameter("stdate"));
                        detailRequestParams.put(Constants.REQ_startdate, startdt);
                        Date enddt = detailSdf.parse(request.getParameter("enddate"));
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(enddt);
                        // passing month-1 because 0-->jan, 1-->feb... 11-->dec
                        calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE));
                        String sstart = authHandler.getDateOnlyFormat().format(calendar.getTime());
                        Date enddate = authHandler.getDateOnlyFormat().parse(sstart);
                       // Date enddate = calendar.getTime();
                        detailRequestParams.put(Constants.REQ_enddate, enddate);
                    }
                    KwlReturnObject detailResult = accProductObj.getBuildAssemblyDetails(detailRequestParams);
                    List list = detailResult.getEntityList();
                    JSONArray detailDataJArr = productHandler.getBuildAssemblyDetailsJSON(request, list);
                    List detailMonthList = getMonthList(request.getParameter("stdate"), request.getParameter("enddate"), "MMMM, yyyy");
                    Map detailProductMap = new HashMap();
                    SimpleDateFormat detailsdf1 = new SimpleDateFormat("dd/MM/yyyy");
                    for (int invIndex = 0; invIndex < detailDataJArr.length(); invIndex++) {
                        JSONObject builddetails = detailDataJArr.getJSONObject(invIndex);
                        String rowProductid = builddetails.getString("rowProductId");
                        Double buildcost = builddetails.optDouble("cost", 0.0);
                        Double buildqty = builddetails.optDouble("quantity", 0.0);
                        LocalDate buildDate = new LocalDate(detailsdf1.parse(builddetails.getString("entrydate")));
                        String monthYear = buildDate.toString("MMM yyyy");
                        if (detailProductMap.containsKey(rowProductid)) {
                            Map detailMonthlyBuildMap = (HashMap) detailProductMap.get(rowProductid);
                            if (detailMonthlyBuildMap == null) {
                                detailMonthlyBuildMap = new HashMap();
                                detailMonthlyBuildMap.put(monthYear, buildcost);
                                detailMonthlyBuildMap.put(monthYear + "qty", buildqty);
                            } else {
                                Double monthlyBuildProdCost = (Double) detailMonthlyBuildMap.get(monthYear);
                                Double monthlyBuildQty = (Double) detailMonthlyBuildMap.get(monthYear + "qty");
                                if (monthlyBuildProdCost == null) {
                                    detailMonthlyBuildMap.put(monthYear, buildcost);
                                    detailMonthlyBuildMap.put(monthYear + "qty", buildqty);
                                } else {
                                    double amount = monthlyBuildProdCost.doubleValue();
                                    double quantity = monthlyBuildQty.doubleValue();
                                    amount += buildcost.doubleValue();
                                    quantity += buildqty.doubleValue();
                                    detailMonthlyBuildMap.put(monthYear, new Double(amount));
                                    detailMonthlyBuildMap.put(monthYear + "qty", new Double(quantity));
                                }
                            }
                        } else {
                            Map detailMonthlyBuildMap = new HashMap();
                            detailMonthlyBuildMap.put(monthYear, buildcost);
                            detailMonthlyBuildMap.put(monthYear + "qty", buildqty);
                            detailProductMap.put(rowProductid, detailMonthlyBuildMap);
                        }
                    }

                    Set detailProductSet = detailProductMap.keySet();
                    Iterator detailProductIter = detailProductSet.iterator();
                    while (detailProductIter.hasNext()) {
                        String rowProductid = detailProductIter.next().toString();
                        Map detailMonthlyBuildMap = (HashMap) detailProductMap.get(rowProductid);

                        JSONObject detailObj = new JSONObject();
                        KwlReturnObject detailObjItr = accountingHandlerDAOobj.getObject(Product.class.getName(), rowProductid);
                        Product detailProduct = (Product) detailObjItr.getEntityList().get(0);
                        detailObj.put("prodid", detailProduct != null ? detailProduct.getProductid() : "");
                        detailObj.put("productid", rowProductid);
                        detailObj.put("productname", detailProduct != null ? detailProduct.getName() : "");
                        for (int i = 0; i < detailMonthList.size(); i++) {
                            String monthYear = (String) detailMonthList.get(i);

                            if (detailMonthlyBuildMap.containsKey(monthYear)) {

                                double monthlyBuildCost = ((Double) detailMonthlyBuildMap.get(monthYear)).doubleValue();
                                double monthlyBuildQty = ((Double) detailMonthlyBuildMap.get(monthYear + "qty")).doubleValue();

                                detailObj.put("amount_" + i, baseCurrency.getSymbol() + " " + authHandler.formattedAmount(monthlyBuildCost, companyid));
                                detailObj.put("qty_" + i, authHandler.formattingDecimalForQuantity(monthlyBuildQty, companyid));
                            } else {
                                detailObj.put("amount_" + i, baseCurrency.getSymbol() + " " + authHandler.formattedAmount(0, companyid));
                                detailObj.put("qty_" + i, authHandler.formattingDecimalForQuantity(0.0, companyid));
                            }
                        }
                        jArr.put(detailObj);
                    }
                    jArr.put(new JSONObject()); // to separate two product details by blank row
                }
            }
        }
        if (!isForExport) {      //month wise total
            JSONObject obj1 = new JSONObject();
            obj1.put("productname", "Total");
            for (int j = 0; j < monthList.size() - 1; j++) {
                obj1.put("amount_" + j, baseCurrency.getSymbol() + " " + authHandler.formattedAmount(monthlyTotal[j], companyid));
            }
            obj1.put("amount_" + (monthList.size() - 1), baseCurrency.getSymbol() + " " + authHandler.formattedAmount(grandTotal, companyid));
            jArr.put(obj1);
        }
        if (isForExport) {
            jSONObjectTotal.put("productname", "Total");
            jArr.put(jSONObjectTotal);
        }
        return jArr;
    }

    public static JSONArray getBuildAssemblyProductsJSON(HttpServletRequest request, List list) throws JSONException, ServiceException {
        Iterator itr = list.iterator();
        JSONArray jArr = new JSONArray();
        while (itr.hasNext()) {
            try {
                Object[] row = (Object[]) itr.next();
                JSONObject obj = new JSONObject();
                obj.put("buildid", row[0]);
                obj.put("productid", row[1]);
                obj.put("productname", row[2]);
                obj.put("quantity", row[3]);
                obj.put("entrydate", (Date) row[4]);
                obj.put("buildcost", row[5]);
                jArr.put(obj);
            } catch (Exception ex) {
                throw ServiceException.FAILURE("getProductsJson : " + ex.getMessage(), ex);
            }
        }
        return jArr;
    }

    public ModelAndView getDimensionsReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = true;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = accAccountHandler.getRequestMap(request);
            requestParams.put("dateformat", authHandler.getDateOnlyFormat());
            KwlReturnObject result = accReportsService.getDimensionsReport(requestParams);
            List list = result.getEntityList();
            JSONArray DataJArr = accReportsService.getDimensionsReportJson(request, list);
            jobj.put(Constants.RES_data, DataJArr);
            jobj.put(Constants.RES_count, result.getRecordTotalCount());
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = "" + ex.getMessage();
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (Exception ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView exportDimensionsReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = true;
        String msg = "";
        String view = "jsonView";
        try {
            HashMap<String, Object> requestParams = accAccountHandler.getRequestMap(request);
            requestParams.put("dateformat", authHandler.getDateOnlyFormat());
            KwlReturnObject result = accReportsService.getDimensionsReport(requestParams);
            List list = result.getEntityList();
            JSONArray DataJArr = accReportsService.getDimensionsReportJson(request, list);
            jobj.put(Constants.RES_data, DataJArr);
            jobj.put(Constants.RES_count, list.size());
            exportDaoObj.processRequest(request, response, jobj);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                view = "jsonView-empty";
            }
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = "" + ex.getMessage();
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (Exception ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getPriceCalculationForAsseblyProduct(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> jsonRequestParam = new HashMap<String, Object>();
            Map<String, Object> requestMap = request.getParameterMap();
            Set set = requestMap.entrySet();
            for (Object ob : set) {
                Map.Entry<String, Object> entry = (Map.Entry<String, Object>) ob;
                String[] value = (String[]) entry.getValue();
                jsonRequestParam.put(entry.getKey(), value[0]);
            }
            jsonRequestParam.put(Constants.df, authHandler.getDateOnlyFormat());
            jsonRequestParam.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            jsonRequestParam.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            JSONArray valJSONArray = stockService.getPriceCalculationForAsseblyProduct(jsonRequestParam);
            jobj.put("valuationArray", valJSONArray);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getPriceCalculationForAsseblySubProduct(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONObject jobj1 = new JSONObject();
        JSONObject jArr = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        double productVal = 0;
        double actQty = 1;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String productId = request.getParameter("productId");
            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
            companyPriceListParams.put("isPurchase", true);
            companyPriceListParams.put("productid", productId);
            /*
            Initial price should be displayed while creating the assembly product.
            */
            companyPriceListParams.put("displayInitialPrice", true);
            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(companyid, companyPriceListParams);
            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
            if (!StringUtil.isNullOrEmpty(request.getParameter("quantity"))) {
                actQty = Double.parseDouble(request.getParameter("quantity"));
                if(actQty == 0){ // to handle divide by 0 case
                    actQty=1;
                }
            }
            
            KwlReturnObject prdresult = accountingHandlerDAOobj.getObject(Product.class.getName(), productId);
            Product product = (Product) prdresult.getEntityList().get(0);
            ValuationMethod productValuationMethod = product.getValuationMethod();
            productVal = getProductCalculation(request, product, actQty, companyMaxDateProductPriceList);
            if (productValuationMethod != ValuationMethod.AVERAGE) {

                productVal = productVal / actQty;
            }
            /*
             * if product type is job work inventory/job work assembly initial purchase price if picked from price list                                         
             * 
             * 
           */
            if (product.getProducttype().getID().equals(Producttype.CUSTOMER_INVENTORY) || product.getProducttype().getID().equals(Producttype.CUSTOMER_ASSEMBLY)) 
            {
                KwlReturnObject result = accProductObj.getInitialPrice(productId, true);
                productVal = (double) result.getEntityList().get(0);
            }
            KwlReturnObject sales = accProductObj.getProductPrice(productId, false, null, "", "");
            jobj1.put("saleprice", sales.getEntityList().get(0) == null ? 0 : sales.getEntityList().get(0));
            jobj1.put("purchaseprice", productVal);
            jobj1.put("onhand", product.getAvailableQuantity()); //Quantity on Hand in Build Assembly
            jobj.append("data", jobj1);

            issuccess = true;
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONArray getPriceCalculationForAsseblyProduct(HashMap<String, Object> jsonRequestParam) throws ServiceException, SessionExpiredException, ParseException, JSONException {
        JSONArray jArr = new JSONArray();
        String Productid="";
        if (jsonRequestParam.containsKey("productid") && jsonRequestParam.get("productid") != null) {
            Productid = jsonRequestParam.get("productid").toString();
        }
        HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
        companyPriceListParams.put("isPurchase", true);
        companyPriceListParams.put("productid", Productid);
        KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(jsonRequestParam.get(Constants.companyKey).toString(), companyPriceListParams);
        Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
            
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put("productid", Productid);
        requestParams.put(Constants.currencyKey, jsonRequestParam.get(Constants.globalCurrencyKey).toString());
        KwlReturnObject result = accProductObj.getAssemblyItems(requestParams);
        Iterator itr = result.getEntityList().iterator();
        double valuation = 0;
        double buildquantity =0;
        if (jsonRequestParam.containsKey("buildquantity") && jsonRequestParam.get("buildquantity") != null) {
            buildquantity =  Double.parseDouble(jsonRequestParam.get("buildquantity").toString());
        }
//        double buildquantity = Double.parseDouble(request.getParameter("buildquantity"));
        Map bomProductInvQtyMap=new HashMap();
        
//        String bomJson=request.getParameter("bomjson");
        String bomJson="";
        if(jsonRequestParam.containsKey("bomjson") && jsonRequestParam.get("bomjson")!=null){
            bomJson=jsonRequestParam.get("bomjson").toString();
        }
        JSONArray bomArr = null;
        if (!StringUtil.isNullOrEmpty(bomJson)) {
            bomArr = new JSONArray("[" + bomJson + "]");
            for (int i = 0; i < bomArr.length(); i++) {
                JSONObject bomObj = bomArr.getJSONObject(i);
                String bomProductId = bomObj.getString("product");
                double invQty = bomObj.getDouble("actualquantity");
                bomProductInvQtyMap.put(bomProductId, invQty);
            }
        }
        while (itr.hasNext()) {
            JSONObject obj = new JSONObject();
            double productVal = 0;
            Object[] row = (Object[]) itr.next();
            ProductAssembly passembly = (ProductAssembly) row[0];
            String bomProductId= passembly.getSubproducts() !=null ? passembly.getSubproducts().getID() : "";
            double actQty = (bomProductInvQtyMap.containsKey(bomProductId)) ? (Double)bomProductInvQtyMap.get(bomProductId): passembly.getInventoryQuantity();
//            productVal = getProductCalculation(request, passembly.getSubproducts(),actQty, companyMaxDateProductPriceList);
            
            KwlReturnObject rs = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), jsonRequestParam.get(Constants.companyKey).toString());
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) rs.getEntityList().get(0);
       
            HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
            DateFormat df = (DateFormat)(jsonRequestParam.get("df"));
            requestParams1.put(Constants.df, df);
            requestParams1.put(Constants.companyKey, jsonRequestParam.get(Constants.companyKey).toString());
            requestParams1.put("productId", bomProductId);
            requestParams1.put("startdate", df.format(companyAccountPreferences.getBookBeginningFrom()));
            requestParams1.put("enddate", df.format(new Date()));
            KwlReturnObject result1 = accProductObj.getStockLedger(requestParams1);
            
            jsonRequestParam.put("totalQtyForProductBuild",actQty * buildquantity);
            jsonRequestParam.put("BOMProductId",bomProductId);
            List list = result1.getEntityList();
            JSONArray resultJson=new JSONArray();
//            JSONArray DataJArr = productControllerCMN.getNewStockLedgerJson(request, list, companyMaxDateProductPriceList,resultJson);
            JSONArray DataJArr = stockService.getNewStockLedgerJson(jsonRequestParam, list, companyMaxDateProductPriceList,resultJson);
            
            if(resultJson.length() > 0){
                JSONObject jObjt=resultJson.getJSONObject(0);
                productVal=jObjt.optDouble("productBuildUnitCost");
            }
            valuation += productVal;
            obj.put("productid", passembly.getSubproducts().getID());

            double unitBuildCost = 0;
            unitBuildCost = (productVal * actQty);
            obj.put("buildcost", unitBuildCost);
            jArr.put(obj);
        }
        return jArr;
    }

    public double getLifoFifoCalculation(HttpServletRequest request, String productid, Date endDate, double onhand, boolean isLifo, String productTypeID, double buildquantity) throws ServiceException, SessionExpiredException, ParseException {
        double lifo = 0;
        List<Date> date = new ArrayList();
        List<Double> qty = new ArrayList();
        List<Double> baseuomrate = new ArrayList(); // Conversion Factor
        List<Double> rate = new ArrayList();
        List<Double> copyrate = new ArrayList();
        List<String> currency = new ArrayList();

        String companyid = sessionHandlerImpl.getCompanyid(request);
        String currencyid = sessionHandlerImpl.getCurrencyID(request);
        HashMap<String, Object> currencyParams = AccountingManager.getGlobalParams(request);

        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put(Constants.companyKey, companyid);
        requestParams.put("productid", productid);
        requestParams.put("producttypeid", productTypeID);

        KwlReturnObject rateandQtyResult = accProductObj.getRateandQtyOfOpeningGRSR(requestParams); // getting transaction information of product opening, GR and SR
        List rateandQtyList = rateandQtyResult.getEntityList();
        Iterator it = rateandQtyList.iterator();
        while (it.hasNext()) {
            Object[] Objrow = (Object[]) it.next();
            if (Objrow[3] != null) {
                date.add((Date) Objrow[0]);
                if (Objrow[2] == null) {
                    continue;
                }
                double purchaseReturnQty = 0;
                if (!StringUtil.isNullOrEmpty((String) Objrow[9])) {
                    KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Inventory.class.getName(), (String) Objrow[9]);
                    Inventory inventory = (Inventory) accresult.getEntityList().get(0);
                    purchaseReturnQty = inventory.getQuantity();
                }
                if (purchaseReturnQty == 0) {
                    qty.add((Objrow[2] == null) ? 0 : (Double) Objrow[2]);
                } else {
                    double actQty = (Double) Objrow[2];
                    actQty = actQty - purchaseReturnQty;
                    if (actQty > 0) {
                        qty.add(actQty);

                    } else {
                        continue;
                    }
                }
                baseuomrate.add((Double) Objrow[3]);
                rate.add((Double) (Objrow[4] == null ? 0.0 : Objrow[4]));
                if (StringUtil.isNullOrEmpty(Objrow[5].toString())) {
                    currency.add(currencyid);
                } else {
                    currency.add((String) Objrow[5]);
                }
            }
        }

        double totalQty = onhand;
        if (onhand > 0 && isLifo) {
            for (int i = 0; i < qty.size(); i++) {
                if (totalQty >= qty.get(i) * baseuomrate.get(i) && totalQty != 0) {
                    double tempRate = rate.get(i);
                    Date transactionDate = date.get(i);
                    double baseuomQty = qty.get(i) * baseuomrate.get(i);

                    KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i), transactionDate, 0);
                    tempRate = (Double) crresult.getEntityList().get(0);
                    lifo = lifo + (baseuomQty * (tempRate / baseuomrate.get(i)));
                    for (int cnt = 0; cnt < baseuomQty; cnt++) {
                        copyrate.add(tempRate / baseuomrate.get(i));
                    }
                    totalQty = totalQty - baseuomQty;
                } else if (totalQty < qty.get(i) * baseuomrate.get(i) && totalQty != 0) {
                    double tempRate = rate.get(i);
                    Date transactionDate = date.get(i);

                    KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i), transactionDate, 0);
                    tempRate = (Double) crresult.getEntityList().get(0);
                    for (int cnt = 0; cnt < totalQty; cnt++) {
                        copyrate.add(tempRate / baseuomrate.get(i));
                    }
                    lifo = lifo + (totalQty * (tempRate / baseuomrate.get(i)));
                    totalQty = 0;
                }
            }
            lifo = 0;
            if (buildquantity > copyrate.size()) {

                buildquantity = copyrate.size();
            }
            for (int i = copyrate.size(); i >= 0; i--) {
                if (buildquantity > 0) {
                    lifo = lifo + copyrate.get(i - 1);
                    buildquantity--;
                }
            }
        }

        if (onhand > 0 && !isLifo) {
            for (int i = qty.size(); i > 0; i--) {
                if (totalQty >= qty.get(i - 1) * baseuomrate.get(i - 1) && totalQty != 0) {
                    double tempRate = rate.get(i - 1);
                    Date transactionDate = date.get(i - 1);
                    double baseuomQty = qty.get(i - 1) * baseuomrate.get(i - 1);

                    KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i - 1), transactionDate, 0);
                    tempRate = (Double) crresult.getEntityList().get(0);
                    lifo = lifo + (baseuomQty * (tempRate / baseuomrate.get(i - 1)));
                    for (int cnt = 0; cnt < baseuomQty; cnt++) {
                        copyrate.add(tempRate / baseuomrate.get(i - 1));
                    }
                    totalQty = totalQty - baseuomQty;
                } else if (totalQty < qty.get(i - 1) * baseuomrate.get(i - 1) && totalQty != 0) {
                    double tempRate = rate.get(i - 1);
                    Date transactionDate = date.get(i - 1);
                    KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i - 1), transactionDate, 0);
                    tempRate = (Double) crresult.getEntityList().get(0);

                    lifo = lifo + (totalQty * (tempRate / baseuomrate.get(i - 1)));
                    for (int cnt = 0; cnt < totalQty; cnt++) {
                        copyrate.add(tempRate / baseuomrate.get(i - 1));
                    }
                    totalQty = 0;
                }
            }
            lifo = 0;
            if (buildquantity > copyrate.size()) {
                buildquantity = copyrate.size();
            }
            for (int i = copyrate.size(); i >= 0; i--) {
                if (buildquantity > 0) {
                    lifo = lifo + copyrate.get(i - 1);
                    buildquantity--;
                }
            }
        }
        if (onhand < 0) {
            KwlReturnObject priceResult = accProductObj.getProductPrice(productid, true, null, "", "");
            List<Object> priceList = priceResult.getEntityList();
            double proPrice = 0;
            if (priceList != null) {
                for (Object cogsval : priceList) {
                    proPrice = (cogsval == null ? 0.0 : (Double) cogsval);
                }
            }
            lifo = onhand * proPrice;
        }
        return lifo;
    }

    public double getProductCalculation(HttpServletRequest request, Product product,double actQty, Map<String, Object[]> companyMaxDateProductPriceList) throws ServiceException, SessionExpiredException, ParseException {
        double valuation = 0, totalValuation = 0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        boolean isAssemblySubProduct = !StringUtil.isNullOrEmpty(request.getParameter("isAssemblySubProduct"))?Boolean.parseBoolean(request.getParameter("isAssemblySubProduct")):false;
        HashMap<String, Object> requestParam = new HashMap();
        requestParam.put("isprovalReport", false);
        requestParam.put(Constants.companyKey, companyid);
        requestParam.put("productid", product.getID());
        requestParam.put("isAssemblySubProduct", isAssemblySubProduct);
        requestParam.put("productCategoryid", "");
        Calendar startcal = Calendar.getInstance();
        Calendar endcal = Calendar.getInstance();
        double buildquantity = Double.parseDouble(request.getParameter("buildquantity"));
        buildquantity = buildquantity * actQty;
        Date endDate = null;
        KwlReturnObject rtObj = accProductObj.getInventoryOpeningBalanceDate(companyid);
        List lst = rtObj.getEntityList();
        Iterator ite = lst.iterator();
        if (ite.hasNext()) {
            endDate = (Date) ite.next();
        }

        KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);

        Date stDate = preferences.getFinancialYearFrom();
        if (stDate != null) {
            startcal.setTime(stDate);
        }
        if (endDate != null) {
            endcal.setTime(endDate);
        }

        KwlReturnObject rtObject = accProductObj.getProValuation(requestParam);
        List list = rtObject.getEntityList();
        Iterator itr = list.iterator();
        while (itr.hasNext()) {
            Object[] row = (Object[]) itr.next();
            product = (Product) row[0];
            double remainingQty = 0;
            double avgcost = 0;// Double.parseDouble(row[1]==null?"0":row[1].toString());
            double onhand = Double.parseDouble(row[2] == null ? "0" : row[2].toString());
            if (buildquantity > onhand) {
                remainingQty = buildquantity - onhand;
            }
            String productTypeID = product.getProducttype().getID();
            ValuationMethod productValuationMethod = product.getValuationMethod();
            if (product.isIsSerialForProduct()) {
                valuation = accReportsService.getSerialNoValuation(request, onhand, productTypeID, avgcost, product, startcal, endcal);

            } else {
                if (onhand != 0) {
                    if (productValuationMethod == ValuationMethod.AVERAGE) {
                        avgcost = accReportsService.getAvarageValuation(request, onhand, productTypeID, avgcost, product, startcal, endcal);
                        valuation = avgcost;

                    } else if (productValuationMethod == ValuationMethod.FIFO) {
//                        if ((onhand - buildquantity) > 0) {
//                            onhand = buildquantity;
//                        } 
                        valuation = getLifoFifoCalculation(request, product.getID(), endDate, onhand, false, productTypeID, buildquantity);
                    } else {
//                        if ((onhand - buildquantity) > 0) {
//                            onhand = buildquantity;
//                        } 
                        valuation = getLifoFifoCalculation(request, product.getID(), endDate, onhand, true, productTypeID, buildquantity);
                    }
                } else {
                    valuation = 0;
                }
            }
            if (remainingQty > 0) {
//                KwlReturnObject priceResult = accProductObj.getProductPrice(product.getID(), true, null, "", "");
//                List<Object> priceList = priceResult.getEntityList();
                double proPrice = 0;
//                if (priceList != null) {
//                    for (Object cogsval : priceList) {
//                        proPrice = (cogsval == null ? 0.0 : (Double) cogsval);
//                    }
//                }
                if(companyMaxDateProductPriceList.containsKey(product.getID())) {
                    Object[] priceObj = companyMaxDateProductPriceList.get(product.getID());
                    proPrice = (Double) priceObj[1];
                }
                valuation = valuation + (remainingQty * proPrice);
            }
            totalValuation += valuation;
        }
        return totalValuation;
    }

    public ModelAndView getVHTReportForGrid(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            String fileType = "";
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cpresult.getEntityList().get(0);
            java.text.DateFormat formatter = authHandler.getDateOnlyFormat();
            java.io.ByteArrayOutputStream baos = null;
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter(Constants.limit);
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            request.setAttribute("issales", true);
            String withoutinventory = request.getParameter("withoutinventory");

            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            if (!StringUtil.isNullOrEmpty(request.getParameter("ss"))) {
                requestParams.put("gstss", request.getParameter("ss"));
            }
            requestParams.put("endDate", endDate);
            requestParams.put("startDate", startDate);
            requestParams.put("isVHT", request.getParameter("isVHT"));
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                requestParams.put("gstFlag", true);
            }
            requestParams.put("issales", false);
            requestParams.put("isSalesTax", false);
            JSONArray purchasejArr = getCalculatedTaxVHT(requestParams, fileType);
            requestParams.put("issales", true);
            requestParams.put("isSalesTax", true);
            JSONArray salesjArr = getCalculatedTaxVHT(requestParams, fileType);

            for (int jsonVal = 0; jsonVal < salesjArr.length(); jsonVal++) {
                purchasejArr.put(salesjArr.getJSONObject(jsonVal));
            }

            if (company.getCountry().getID().equals(Constants.SINGAPOREID)) {
                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), Constants.SGDID);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                for (int jsonVal = 0; jsonVal < purchasejArr.length(); jsonVal++) {
                    JSONObject jSONObject = (JSONObject) purchasejArr.get(jsonVal);
                    jSONObject.put(Constants.currencyKey, currency.getCurrencyID());
                    jSONObject.put("currencysymbol", currency.getSymbol());
                    jSONObject.put("currencyname", currency.getName());
                    jSONObject.put("currencycode", currency.getHtmlcode());

                }
            }

            JSONArray pagedJson = purchasejArr; //ERP-13641 [SJ]                
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(purchasejArr, Integer.parseInt(start), Integer.parseInt(limit));
            }

            jobj.put(Constants.RES_data, pagedJson);
            jobj.put(Constants.RES_count, purchasejArr.length());
            jobj.put(Constants.RES_success, true);
            jobj.put(Constants.RES_msg, "");
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONArray getCalculatedTaxVHT(HashMap<String, Object> requestParams, String fileType) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        try {
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), (String) requestParams.get(Constants.companyKey));
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            String cashAccount = pref.getCashAccount().getID();
            requestParams.put("cashaccountid", cashAccount);
            KwlReturnObject result = accTaxObj.getCalculatedTax((Map) requestParams);
            List list = result.getEntityList();
            boolean isSalesTax = (Boolean) (requestParams.get("isSalesTax"));
            if (isSalesTax) {
                jArr = getCalculatedSalesVHTMerged(requestParams, list, fileType);
            } else {
                jArr = getCalculatedPurchaseVHTMerged(requestParams, list, fileType);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getCalculatedTaxGST : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public JSONArray getCalculatedPurchaseVHTMerged(Map<String, Object> requestParams, List taxList, String fileType) throws ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        JSONArray grPurchaseTaxjArr = new JSONArray();
        JSONObject purchasesTax = new JSONObject();
        JSONArray grPurchaseTaxBillingjArr = new JSONArray();
        JSONObject purchasesTaxBilling = new JSONObject();
        JSONObject obj = new JSONObject();
        double totalAmount = 0;
        double totalcategorycost = 0;
        double totalgramtexcludingtax = 0;
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        boolean isVHT = true;
        boolean isexport = false;
        String companyid = "";
        if (requestParams.containsKey("companyid")){
            companyid = (String) requestParams.get("companyid");
        }
        if (requestParams.containsKey("isexport")) {
            isexport = Boolean.parseBoolean(requestParams.get("isexport").toString());
        }
        Map<String, Object> filterParams = new HashMap<String, Object>();
        if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
            filterParams.put("startDate", requestParams.get("startDate"));
            filterParams.put("endDate", requestParams.get("endDate"));
        }
        if (requestParams.containsKey(Constants.companyKey) && requestParams.containsKey(Constants.companyKey)) {
            filterParams.put(Constants.companyKey, requestParams.get(Constants.companyKey));
        }
        if (requestParams.containsKey("gstss")) {
            filterParams.put("ss", requestParams.get("gstss"));
        }
        if (requestParams.containsKey("excludeRetailPurchaseInvoice")) {
            filterParams.put("excludeRetailPurchaseInvoice", requestParams.get("excludeRetailPurchaseInvoice"));
        }
        String gcurrencyid = (String) requestParams.get(Constants.globalCurrencyKey);
        KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
        KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
        /**
         * *******************************With Inventory
         * Data*******************************
         */
        //VI with GST on Total Amounts
        KwlReturnObject result = accGoodsReceiptDAOObj.getCalculatedVHT(filterParams);
        List<GoodsReceipt> list = result.getEntityList();
        double saleAmount = 0;
        double saleAmountExcludingTax = 0;
        double saleAmountExcludingTaxB = 0;
        double taxableAmount = 0;
        double taxCollected = 0;
        
//Cal Tax for whole GR[PS]
        try {
            if (list != null) {
                for (GoodsReceipt temp : list) {
                    String terms = "";
                    double taxPercent = 0;
                    boolean isTaxApplicable = false;
                    double invTaxAmt = 0d;
                    double amtindocCurrency = 0d;
                    double invSalesAmt = (Double) (temp.getVendorEntry() == null ? 0 : temp.getVendorEntry().getAmount()); //Calculating total sales in customer currency     [PS]
                    if (temp.getTax() != null) {
//                        KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getJournalEntry().getEntryDate(), temp.getTax().getID());
                        KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getCreationDate(), temp.getTax().getID());
                        taxPercent = (Double) perresult.getEntityList().get(0);
                        isTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                    }
                    // get wether tax is applicable or not

                    double taxAmtInInvoiceCurrency = 0d;

                    if (isTaxApplicable) { //temp.getTaxEntry() will contain null value if tax amount of selected Tax is zero
                        taxAmtInInvoiceCurrency = (temp.getTaxEntry() != null) ? temp.getTaxEntry().getAmount() : 0;
                    }

                    KwlReturnObject bAmt;
                    KwlReturnObject bTaxAmt = null;
                    KwlReturnObject bTermAmt = null;
                    if (requestParams.containsKey("gstFlag")) {
                        String fromcurrencyid = temp.getCurrency().getCurrencyID();
                        //(ERP-8222) && check is for if country is Singapore then no need to convert it again in SGD.
                        if (temp.getGstCurrencyRate() != 0 && (!fromcurrencyid.equalsIgnoreCase(Constants.SGDID))) {//to check if the GoodsReceipt has external GST rate when country is Singapore
//                            bAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                            bAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                            if (isTaxApplicable) {
//                                bTaxAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                                bTaxAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                            }
                        } else {
//                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invSalesAmt, fromcurrencyid, Constants.SGDID, temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invSalesAmt, fromcurrencyid, Constants.SGDID, temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());
                            if (isTaxApplicable) {
//                                bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmtInInvoiceCurrency, fromcurrencyid, Constants.SGDID, temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());
                                bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmtInInvoiceCurrency, fromcurrencyid, Constants.SGDID, temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());
                            }
                        }
                    } else {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        if (isTaxApplicable) {
//                            bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                            bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        }
                    }
                    amtindocCurrency = invSalesAmt - taxAmtInInvoiceCurrency;
                    invSalesAmt = (Double) bAmt.getEntityList().get(0);
                    invSalesAmt = authHandler.round(invSalesAmt, companyid);
                    if (isTaxApplicable) {
                        invTaxAmt = (Double) bTaxAmt.getEntityList().get(0);
                        invTaxAmt = authHandler.round(invTaxAmt, companyid);
                    }

                    saleAmount += authHandler.round(invSalesAmt, companyid);//505*100=(100+p)x
                    invSalesAmt = invSalesAmt - invTaxAmt;  // remove tax amount

                    JSONArray termdetails = getTermDetails(temp.getID(), accGoodsReceiptDAOObj);
                    for (int i = 0; i < termdetails.length(); i++) {
                        JSONObject jSONObject = termdetails.getJSONObject(i);
                        terms += jSONObject.getString("term");
                    }

                    invTaxAmt = CommonFunctions.getTotalTermsAmount(getTermDetails(temp.getID(), accGoodsReceiptDAOObj));
//                    bTermAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invTaxAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    bTermAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invTaxAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    invTaxAmt = (Double) bTermAmt.getEntityList().get(0);
                    invTaxAmt = authHandler.round(invTaxAmt, companyid);
                    double invAmtExcludingTax = invSalesAmt - invTaxAmt;

                    saleAmountExcludingTax += invAmtExcludingTax;//authHandler.round(((invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                    taxableAmount += invTaxAmt;//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                    double invAmtDue = 0;
                    if (!temp.getVendorEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
                        List amtList;
                        if (temp.isIsExpenseType()) {
                            amtList = accGoodsReceiptCommon.getExpGRAmountDue(requestParams, temp);
                        } else {
                            if (Constants.InvoiceAmountDueFlag) {
                                amtList = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(requestParams, temp);
                            } else {
                                amtList = accGoodsReceiptCommon.getGRAmountDue(requestParams, temp);
                            }
                        }
                        if (!amtList.isEmpty() && amtList != null) {
                            invAmtDue = (Double) amtList.get(1);
                        }
                    }
                    if (invAmtDue == 0) {
                        taxCollected += invTaxAmt;//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                    }
                    purchasesTax = new JSONObject();
                    purchasesTax.put("amtindocCurrency", amtindocCurrency);
                    purchasesTax.put("terms", terms);
                    purchasesTax.put("invsymbol", temp.getCurrency().getSymbol());
//                    purchasesTax.put("grdate", temp.getJournalEntry().getEntryDate().getTime());
                    purchasesTax.put("grdate", temp.getCreationDate().getTime());
                    purchasesTax.put("grname", temp.getVendor().getName());
                    purchasesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                    purchasesTax.put("grno", temp.getGoodsReceiptNumber());
                    purchasesTax.put("gramt", invSalesAmt);
                    purchasesTax.put("gramtexcludingtax", invAmtExcludingTax);//authHandler.round(((invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL));
                    purchasesTax.put("journalEntryNo", temp.getJournalEntry().getEntryNumber());
                    purchasesTax.put("grtaxamount", invTaxAmt);//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL));
                    totalcategorycost += invTaxAmt;//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                    totalgramtexcludingtax += invAmtExcludingTax;//authHandler.round((invSalesAmt*100)/(100+taxPercent),Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                    totalAmount += invSalesAmt;
                    grPurchaseTaxjArr.put(purchasesTax);
                }
            }
            if (isexport) {
                obj = new JSONObject();
                obj = new JSONObject();
                obj.put("taxcode", "Purchase Invoice");
                jArr.put(obj);
            }
            for (int jsonVal = 0; jsonVal < grPurchaseTaxjArr.length(); jsonVal++) {
                obj = new JSONObject();
                JSONObject oldObject = (JSONObject) grPurchaseTaxjArr.get(jsonVal);
                if (StringUtil.isNullOrEmpty(oldObject.getString("terms"))) {
                    continue;
                } else {
                    obj.put("taxcode", oldObject.getString("terms"));
                }
                obj.put("amtindocCurrency", oldObject.getString("amtindocCurrency"));
                obj.put("mergedResourceData", "Vendor Invoice");
                obj.put("mergedCategoryData", "Purchase and Expenses with GST Paid");
                obj.put("categoryName", "Grand");
                obj.put("totalsale", authHandler.round(saleAmount, companyid));//sales including tax[PS]
                obj.put("totalsaleexcludingtax", authHandler.round(saleAmountExcludingTax + saleAmountExcludingTaxB, companyid));//sales including tax[PS]
                obj.put("totalcategorycost", totalcategorycost);
                obj.put("totalgramtexcludingtax", totalgramtexcludingtax);
                obj.put("taxamount", authHandler.round(taxableAmount, companyid));
                obj.put("taxcollected", taxCollected);  //taxamount of all thoose invoices whose amount due is 0[PS]
                obj.put("taxpayable", (taxableAmount - taxCollected));
                obj.put("invdate", sdf.format(oldObject.getLong("grdate")));
                obj.put("invname", oldObject.getString("grname"));
                obj.put("invno", oldObject.getString("grno"));
                obj.put("journalEntryNo", oldObject.getString("journalEntryNo"));
                obj.put("totalinvamt", totalAmount);
                obj.put("invamt", oldObject.getDouble("gramt"));
                obj.put("addAmountFlag", oldObject.getBoolean("addAmountFlag"));
                obj.put("gramtexcludingtax", oldObject.optDouble("gramtexcludingtax", 0.0));
                obj.put("invtaxamount", oldObject.getDouble("grtaxamount"));
                obj.put("invsymbol", oldObject.getString("invsymbol"));
                if (fileType.equals("pdf")) {
                    obj.put("details", grPurchaseTaxjArr);
                }
                jArr.put(obj);
            }
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }

    public JSONArray getCalculatedSalesVHTMerged(Map<String, Object> requestParams, List taxList, String fileType) throws ServiceException, ParseException {

        JSONArray jArr = new JSONArray();
        boolean isVHT = true;
      
        double totalAmount = 0;
        double totalcategorycost = 0;
        double totalgramtexcludingtax = 0;
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        JSONArray invSalesTaxjArr = new JSONArray();
        JSONObject salesTax = new JSONObject();
        JSONArray invSalesTaxBillingjArr = new JSONArray();
        JSONObject SalesTaxBilling = new JSONObject();
        boolean isexport = false;
        String companyid = "";
        if (requestParams.containsKey("companyid")){
            companyid = (String) requestParams.get("compayid");
        }
        if (requestParams.containsKey("isexport")) {
            isexport = Boolean.parseBoolean(requestParams.get("isexport").toString());
        }
        Map<String, Object> filterParams = new HashMap<String, Object>();
        if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
            filterParams.put("startDate", requestParams.get("startDate"));
            filterParams.put("endDate", requestParams.get("endDate"));
        }

        if (requestParams.containsKey(Constants.companyKey) && requestParams.containsKey(Constants.companyKey)) {
            filterParams.put(Constants.companyKey, requestParams.get(Constants.companyKey));
        }
        if (requestParams.containsKey("gstss")) {
            filterParams.put("ss", requestParams.get("gstss"));
        }
        String gcurrencyid = (String) requestParams.get(Constants.globalCurrencyKey);
        KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
        KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
        /**
         * *******************************With Inventory
         * Data*******************************
         */
        KwlReturnObject result = accInvoiceDAOobj.getCalculatedVHT(filterParams);
        Iterator ite1 = result.getEntityList().iterator();
        double saleAmount = 0;
        double saleAmountExcludingTax = 0;
        double saleAmountExcludingTaxB = 0;
        double taxableAmount = 0;
        double taxCollected = 0;
        try {
            while (ite1.hasNext()) {
                String terms = "";
                double taxPercent = 0;
                boolean isTaxApplicable = false;
                double invAmtDue = 0;
                double amtindocCurrency = 0d;
                Invoice temp = (Invoice) ite1.next();
                double invSalesAmt = (Double) (temp.getCustomerEntry() == null ? 0 : temp.getCustomerEntry().getAmount()); //Calculating total sales in customer currency     [PS]
                double invTaxAmt = 0d;

                if (temp.getTax() != null) {
//                    KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getJournalEntry().getEntryDate(), temp.getTax().getID());
                    KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), temp.getCreationDate(), temp.getTax().getID());
                    taxPercent = (Double) perresult.getEntityList().get(0);
                    isTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                }

                double taxAmtInInvoiceCurrency = 0d;

                if (isTaxApplicable) {  //temp.getTaxEntry() will contain null value if tax amount of selected Tax is zero
                    taxAmtInInvoiceCurrency = (temp.getTaxEntry() != null) ? temp.getTaxEntry().getAmount() : 0;
                }

                KwlReturnObject bAmt;
                KwlReturnObject bTaxAmt = null;
                KwlReturnObject bTermAmt = null;
                if (requestParams.containsKey("gstFlag")) {
                    String fromcurrencyid = temp.getCurrency().getCurrencyID();
                    //(ERP-8222) && check is for if country is Singapore then no need to convert it again in SGD.
                    if (temp.getGstCurrencyRate() != 0 && (!fromcurrencyid.equalsIgnoreCase(Constants.SGDID))) {//to check if the invoice has external GST rate when country is Singapore
//                        bAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                        bAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                        if (isTaxApplicable) {
//                            bTaxAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                            bTaxAmt = accCurrencyDAOobj.getforeignToBaseAmountAndBaseToSGD((Map) requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate(), temp.getGstCurrencyRate());
                        }
                    } else {
//                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invSalesAmt, fromcurrencyid, Constants.SGDID, temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, invSalesAmt, fromcurrencyid, Constants.SGDID, temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());
                        if (isTaxApplicable) {
//                            bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmtInInvoiceCurrency, fromcurrencyid, Constants.SGDID, temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());
                            bTaxAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, taxAmtInInvoiceCurrency, fromcurrencyid, Constants.SGDID, temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());
                        }
                    }
                } else {
//                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, invSalesAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    if (isTaxApplicable) {
//                        bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                        bTaxAmt = accCurrencyDAOobj.getCurrencyToBaseAmount((Map) requestParams, taxAmtInInvoiceCurrency, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                    }
                }
                amtindocCurrency = invSalesAmt - taxAmtInInvoiceCurrency;
                invSalesAmt = (Double) bAmt.getEntityList().get(0);
                invSalesAmt = authHandler.round(invSalesAmt, companyid);

                if (isTaxApplicable) {
                    invTaxAmt = (Double) bTaxAmt.getEntityList().get(0);
                    invTaxAmt = authHandler.round(invTaxAmt, companyid);
                }
                invSalesAmt = invSalesAmt - invTaxAmt;  // remove tax amount

                JSONArray termdetails = accInvoiceServiceDAO.getTermDetails(temp.getID());
                for (int i = 0; i < termdetails.length(); i++) {
                    JSONObject jSONObject = termdetails.getJSONObject(i);
                    terms += jSONObject.getString("term");
                }

                invTaxAmt = CommonFunctions.getTotalTermsAmount(accInvoiceServiceDAO.getTermDetails(temp.getID()));
//                bTermAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invTaxAmt, temp.getCurrency().getCurrencyID(), temp.getJournalEntry().getEntryDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                bTermAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invTaxAmt, temp.getCurrency().getCurrencyID(), temp.getCreationDate(), temp.getJournalEntry().getExternalCurrencyRate());                        //Converting into base [PS]
                invTaxAmt = (Double) bTermAmt.getEntityList().get(0);
                invTaxAmt = authHandler.round(invTaxAmt, companyid);
                double invAmtExcludingTax = invSalesAmt - invTaxAmt;
                saleAmount += authHandler.round(invSalesAmt, companyid);//505*100=(100+p)x
                saleAmountExcludingTax += invAmtExcludingTax;//authHandler.round((invSalesAmt*100)/(100+taxPercent),2);
                taxableAmount += invTaxAmt;//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),2);
                if (!temp.getCustomerEntry().getAccount().getID().equals((String) requestParams.get("cashaccountid"))) {
                    invAmtDue = accInvoiceCommon.getAmountDue((HashMap<String, Object>) requestParams, temp);
                }
                if (invAmtDue == 0) {
                    taxCollected += invTaxAmt;//authHandler.round((invSalesAmt-(invSalesAmt*100)/(100+taxPercent)),2);
                }

                salesTax = new JSONObject();
                salesTax.put("amtindocCurrency", amtindocCurrency);
                salesTax.put("invsymbol", temp.getCurrency().getSymbol());
                salesTax.put("terms", terms);
//                salesTax.put("invdate", temp.getJournalEntry().getEntryDate().getTime());
                salesTax.put("invdate", temp.getCreationDate().getTime());
                salesTax.put("invname", temp.getCustomer().getName());
                salesTax.put("addAmountFlag", true);// For Calculating Total Amount in JS Side this amount will be add.
                salesTax.put("invno", temp.getInvoiceNumber());
                salesTax.put("invamt", authHandler.formattedAmount(invSalesAmt, companyid));
                salesTax.put("gramtexcludingtax", invAmtExcludingTax);//authHandler.round(((invSalesAmt*100)/(100+taxPercent)),2));
                salesTax.put("journalEntryNo", temp.getJournalEntry().getEntryNumber());
                salesTax.put("invtaxamount", invTaxAmt);//authHandler.formattedAmount(authHandler.round(invSalesAmt-(invSalesAmt*100)/(100+taxPercent),2)));
                totalcategorycost += invTaxAmt;//authHandler.round(invSalesAmt-(invSalesAmt*100)/(100+taxPercent),2);
                totalgramtexcludingtax += invAmtExcludingTax;//authHandler.round((invSalesAmt*100)/(100+taxPercent),2);
                totalAmount += invSalesAmt;
                invSalesTaxjArr.put(salesTax);
            }
            if (isexport) {
                JSONObject obj = new JSONObject();
                obj = new JSONObject();
                obj.put("taxcode", "Sales Invoice");
                jArr.put(obj);
            }
            for (int jsonVal = 0; jsonVal < invSalesTaxjArr.length(); jsonVal++) {
                JSONObject obj = new JSONObject();
                JSONObject oldObject = (JSONObject) invSalesTaxjArr.get(jsonVal);
                if (StringUtil.isNullOrEmpty(oldObject.getString("terms"))) {
                    continue;
                }
                obj.put("amtindocCurrency", oldObject.getString("amtindocCurrency"));
                obj.put("taxcode", oldObject.getString("terms"));
                obj.put("mergedResourceData", "Customer Invoice");
                obj.put("mergedCategoryData", "Sales and Income with GST Received");
                obj.put("categoryName", "Grand");
                obj.put("totalcategorycost", totalcategorycost);
                obj.put("totalgramtexcludingtax", totalgramtexcludingtax);
                obj.put("totalsaleexcludingtax", authHandler.round(saleAmountExcludingTax + saleAmountExcludingTaxB, companyid));//sales including tax[PS]
                obj.put("invdate", sdf.format(oldObject.getLong("invdate")));
                obj.put("invname", oldObject.getString("invname"));
                obj.put("journalEntryNo", oldObject.getString("journalEntryNo"));
                obj.put("invno", oldObject.getString("invno"));
                obj.put("invamt", oldObject.getDouble("invamt"));
                obj.put("addAmountFlag", oldObject.getBoolean("addAmountFlag"));
                obj.put("gramtexcludingtax", oldObject.optDouble("gramtexcludingtax", 0.0));
                obj.put("totalinvamt", totalAmount);
                obj.put("invtaxamount", oldObject.getDouble("invtaxamount"));
                obj.put("invsymbol", oldObject.getString("invsymbol"));
                if (fileType.equals("pdf")) {
                    obj.put("details", invSalesTaxjArr);
                }
                jArr.put(obj);
            }
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }

    public ModelAndView getBuildAssemblyDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            KwlReturnObject accResult = accAccountDAOobj.quotationindecimalforcompany(sessionHandlerImpl.getCompanyid(request));
            int quantitydigitafterdecimal = 4;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            if (accResult.getEntityList().get(0) != null) {
                Object[] decimalcontact = (Object[]) accResult.getEntityList().get(0);
                if (decimalcontact[1] != null) {
                    quantitydigitafterdecimal = (Integer) decimalcontact[1];
                }
            }
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
            HashMap<String, Object> requestParams = productHandler.getProductRequestMap(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            DateFormat sdf = new SimpleDateFormat("MMMM,yyyy");
            if (request.getParameter("stdate") != null) {
                Date startdt = sdf.parse(request.getParameter("stdate"));
                requestParams.put(Constants.REQ_startdate, startdt);
                Date enddt = sdf.parse(request.getParameter("enddate"));
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(enddt);
                // passing month-1 because 0-->jan, 1-->feb... 11-->dec
                calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE));
                String sstart = authHandler.getDateOnlyFormat().format(calendar.getTime());
                Date enddate = authHandler.getDateOnlyFormat().parse(sstart);
               // Date enddate = calendar.getTime();
                requestParams.put(Constants.REQ_enddate, enddate);
            }
            KwlReturnObject result = accProductObj.getBuildAssemblyDetails(requestParams);
            List list = result.getEntityList();
            JSONArray DataJArr = productHandler.getBuildAssemblyDetailsJSON(request, list);
            List monthList = getMonthList(request.getParameter("stdate"), request.getParameter("enddate"), "MMMM, yyyy");
            Map productMap = new HashMap();
            SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");
            for (int invIndex = 0; invIndex < DataJArr.length(); invIndex++) {
                JSONObject builddetails = DataJArr.getJSONObject(invIndex);
                String productid = builddetails.getString("rowProductId");
                Double buildcost = builddetails.optDouble("cost", 0.0);
                Double buildqty = builddetails.optDouble("quantity", 0.0);
                LocalDate buildDate = new LocalDate(sdf1.parse(builddetails.getString("entrydate")));
                String monthYear = buildDate.toString("MMM yyyy");
                if (productMap.containsKey(productid)) {
                    Map monthlyBuildMap = (HashMap) productMap.get(productid);
                    if (monthlyBuildMap == null) {
                        monthlyBuildMap = new HashMap();
                        monthlyBuildMap.put(monthYear, buildcost);
                        monthlyBuildMap.put(monthYear + "qty", buildqty);
                    } else {
                        Double monthlyBuildProdCost = (Double) monthlyBuildMap.get(monthYear);
                        Double monthlyBuildQty = (Double) monthlyBuildMap.get(monthYear + "qty");
                        if (monthlyBuildProdCost == null) {
                            monthlyBuildMap.put(monthYear, buildcost);
                            monthlyBuildMap.put(monthYear + "qty", buildqty);
                        } else {
                            double amount = monthlyBuildProdCost.doubleValue();
                            double quantity = monthlyBuildQty.doubleValue();
                            amount += buildcost.doubleValue();
                            quantity += buildqty.doubleValue();
                            monthlyBuildMap.put(monthYear, new Double(amount));
                            monthlyBuildMap.put(monthYear + "qty", new Double(quantity));
                        }
                    }
                } else {
                    Map monthlyBuildMap = new HashMap();
                    monthlyBuildMap.put(monthYear, buildcost);
                    monthlyBuildMap.put(monthYear + "qty", buildqty);
                    productMap.put(productid, monthlyBuildMap);
                }
            }
            JSONArray jArr = new JSONArray(); //final data
            Set productSet = productMap.keySet();
            Iterator productIter = productSet.iterator();
            while (productIter.hasNext()) {
                String productid = productIter.next().toString();
                Map monthlyBuildMap = (HashMap) productMap.get(productid);
                JSONObject obj = new JSONObject();
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
                Product product = (Product) objItr.getEntityList().get(0);
                obj.put("prodid", product != null ? product.getProductid() : "");
                obj.put("productid", productid);
                obj.put("productname", product != null ? product.getName() : "");           //            obj.put("customerid", productid);
                for (int i = 0; i < monthList.size(); i++) {
                    String monthYear = (String) monthList.get(i);
      
                    if (monthlyBuildMap.containsKey(monthYear)) {

                        double monthlyBuildCost = ((Double) monthlyBuildMap.get(monthYear)).doubleValue();
                        double monthlyBuildQty = ((Double) monthlyBuildMap.get(monthYear + "qty")).doubleValue();

                        obj.put("amount_" + i, baseCurrency.getSymbol() + " " + authHandler.formattedAmount(monthlyBuildCost, companyid));
                        obj.put("qty_" + i, authHandler.formattingDecimalForQuantity(monthlyBuildQty, companyid));
                    } else {
                        obj.put("amount_" + i, baseCurrency.getSymbol() + " " + authHandler.formattedAmount(0, companyid));
                        obj.put("qty_" + i, authHandler.formattingDecimalForQuantity(0.0, companyid));
                    }
                }
                jArr.put(obj);
            }
            JSONArray monthArray = getMonthsJSONArray(request);
            if (jArr.length() == 0) {
                jArr.put(new JSONObject().put("months", monthArray));
            } else {
                JSONObject firstObject = jArr.getJSONObject(0);
                firstObject.put("months", monthArray);
            }
            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    /* Controller for copying custom layout
     * @param request 
     * @param response 
     * @return ModelAndView
     */
    public ModelAndView copyCustomLayout(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        boolean isDefaultTemplatePresent = false;
        String msg = "";
        try {
            Map<String,Object> requestParams=new HashMap<>();
            String companyid=sessionHandlerImpl.getCompanyid(request);
            boolean isAdminSubdomain = authHandler.isAdminSubDomain(request);
            String countryid = request.getParameter("countryid");
            String templatename = "", templateid = "";
            // Flag to decide whether replace default or check for default. If true then validate otherwise replace.
            boolean isValidateDefault = (!StringUtil.isNullOrEmpty(request.getParameter("validateDefault"))) ? Boolean.valueOf(request.getParameter("validateDefault")) : false ;
            boolean isDefault = (!StringUtil.isNullOrEmpty(request.getParameter("isDefault"))) ? Boolean.valueOf(request.getParameter("isDefault")) : false ;
            boolean isValidData = true;
            int templatetype = request.getParameter("templatetype") !=null ? Integer.parseInt(request.getParameter("templatetype")) : -1;
            if (accAccountDAOobj.checkNameAlreadyExists("", request.getParameter("templatename"), companyid,countryid,isAdminSubdomain,templatetype)) {
                msg = messageSource.getMessage("acc.field.CustomLayoutTemplatenamealreadyexistsPleaseenteranothername", null, RequestContextUtils.getLocale(request));
                isValidData = false;
            } else if (isDefault && isValidateDefault) {
                HashMap<String, Object> params = new HashMap<>();
                params.put("companyid", companyid);
                params.put("isDefault", true);
                params.put("templatetype", templatetype);
                KwlReturnObject result = accAccountDAOobj.getPnLTemplates(params);
                if (result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                    msg = messageSource.getMessage("acc.customLayout.DefaultPresent", null, RequestContextUtils.getLocale(request));
                    isValidData = false;
                    isDefaultTemplatePresent = true;
                }
            }
            
            if(isValidData){
                if (isDefault && !isValidateDefault) {
                    accAccountDAOobj.updateDefaultTemplate(companyid, templatetype);
                }
                requestParams.put(Constants.companyKey, companyid);
                if (!StringUtil.isNullOrEmpty(request.getParameter("copytemplateid"))) {
                    requestParams.put("copytemplateid", request.getParameter("copytemplateid"));
                    templateid =  request.getParameter("copytemplateid");
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("templatename"))) {
                    requestParams.put("templatename", request.getParameter("templatename"));
                    templatename = request.getParameter("templatename");
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("templatetype"))) {
                    requestParams.put("templatetype", request.getParameter("templatetype"));
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("templatetitle"))) {
                    requestParams.put("templatetitle", request.getParameter("templatetitle"));
                }
                requestParams.put("isDefault", isDefault);
                
                if(isAdminSubdomain){
                    requestParams.put("isAdminSubdomain", isAdminSubdomain);
                    requestParams.put("countryid", countryid);
                }                
                issuccess = accReportsService.copyCustomLayoutTemplate(requestParams);
                auditTrailObj.insertAuditLog(AuditAction.CUSTOMTEMPLATE_COPY, "User " + sessionHandlerImpl.getUserFullName(request) + " has copied custom layout template : "+templatename, request, templateid ); 
            }
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
                jobj.put("defaultPresent",isDefaultTemplatePresent);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    //  Export Malayasian GST Function
    public void exportGSTFORM3JASPER(HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> JasperMap = new HashMap<>();
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) result.getEntityList().get(0);
        
            result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);

            OnlyDatePojo dateObj = new OnlyDatePojo();
            dateObj.setDate("");
            
            List<OnlyDatePojo> dateList = new ArrayList<>();
            dateList.add(dateObj);

            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            
            JasperMap.put("COMPANY_NAME", company.getCompanyName());
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), company.getCompanyID());
            ExtraCompanyPreferences extraPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            String multiEntityValue = "";
            if (extraPreferences.isIsMultiEntity()) {
                try {
                    multiEntityValue = request.getParameter(Constants.multiEntityValue);
                    JSONObject entityDetailsObj = null;
                    Map<String, Object> requestParams = new HashMap<>();
                    if (!StringUtil.isNullOrEmpty(multiEntityValue)) {
                        requestParams.put(Constants.multiEntityValue, multiEntityValue);
                        requestParams.put(Constants.companyid, company.getCompanyID());
                        entityDetailsObj = accGstService.getEntityDetails(requestParams);

                        String GST_NUMBER = entityDetailsObj.getJSONArray("data").getJSONObject(0).optString("multiEntitygstno");
                        JasperMap.put("GST_NUMBER", !StringUtil.isNullOrEmpty(GST_NUMBER) ? GST_NUMBER : "");
                    }
                } catch (com.krawler.utils.json.base.JSONException ex) {
                    Logger.getLogger(accReportsController.class.getName()).log(Level.WARNING, ex.getMessage());
                }
                String searchJson = request.getParameter(Constants.Acc_Search_Json);
                JasperMap.put("COMPANY_NAME", exportDaoObj.getEntityDimensionNameforExport(searchJson, company));
            } else {
                JasperMap.put("GST_NUMBER", StringUtil.isNullOrEmpty(companyAccountPreferences.getGstNumber()) ? "" : companyAccountPreferences.getGstNumber());
            }
            JasperMap.put("START_DATE", sdf.format(startDate));
            JasperMap.put("END_DATE", sdf.format(endDate));
            JasperMap.put("PAYMENT_DUE_DATE", "");
            /*
             * Get the Input OUTPUT TAX
             */
            String taxname = "";
            JSONObject inOutJobj;
            JSONArray inOuttJrr = getMalasianGSTForm5(request, true);
            JSONObject industryCodes = inOuttJrr.getJSONObject(inOuttJrr.length()-1);
            for (int i = 0; i < inOuttJrr.length()-1; i++) {
                inOutJobj = inOuttJrr.getJSONObject(i);
                taxname = inOutJobj.optString(Constants.taxkeyJasper, "");
                if (!StringUtil.isNullOrEmpty(taxname)) {
                    JasperMap.put(taxname, inOutJobj.optDouble("taxamount", 0.00));
                }
            }
            /*
             * Get Additional Tax
             */
            JSONObject addJobj;
            JSONArray addJArr = getGSTForm5Additional(request, true);
            for (int i = 0; i < addJArr.length(); i++) {
                addJobj = addJArr.getJSONObject(i);
                taxname = addJobj.optString(Constants.taxkeyJasper, "");
                if (!StringUtil.isNullOrEmpty(taxname)) {
                    JasperMap.put(taxname, addJobj.optDouble("taxamount", 0.00));
                }
            }
            /*
             * TO DO Break Down JSONArray breakJArr =
             */
            List <Map<String,Object>> breakDownList = accReportsService.getMalaysiangstMSICCodes(paramJobj , industryCodes);
            JasperMap.put("MSIC_CODES", new JRBeanCollectionDataSource(breakDownList));
            
            JasperMap.put("AUTHORIZED_PERSON", "");
            JasperMap.put("IDENTITY_CARD_NO", "");
            JasperMap.put("PASSPORT_NO", "");
            JasperMap.put("NATIONALITY", "");
            JasperMap.put("RECEIVED_DATE", "");
            JasperMap.put("POSTMARK_DATE", "");
            JasperMap.put("LOGO_IMAGE",  storageHandlerImpl.GetDocStorePath() + "ROYAL_MALAYSIAN_CUSTOMS_DEPARTMENT.png");
            /*
             * Export Parameters
             */
            JasperMap.put("format", "pdf");
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GST_FORM_3.jrxml");
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(dateList);
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, JasperMap, beanColDataSource);
            response.setHeader("Content-Disposition", "attachment;filename=" + "GST_Form_03.pdf");
            response.setContentType("application/octet-stream");
            ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, outputStream);
            exp.exportReport();
            response.setContentLength(outputStream.size());
            response.getOutputStream().write(outputStream.toByteArray());
            try {
                Map<String, Object> map = new HashMap<>();
                map.put("startDate", startDate);
                map.put("endDate", endDate);
                map.put(Constants.df, authHandler.getDateOnlyFormat());
                map.put(Constants.companyKey, company.getCompanyID());
                map.put(Constants.userid, sessionHandlerImpl.getUserid(request));
                map.put(Constants.multiEntityValue, multiEntityValue);
                accGstService.exportAndSaveGSTFormGenerationHistory(outputStream, map);
                String auditMsg = extraPreferences.isIsMultiEntity() ? "User " + sessionHandlerImpl.getUserFullName(request) + " has genarated and exported GST form 03 file for entity "+ multiEntityValue +" from "+ sdf.format(startDate) +" to "+ sdf.format(endDate) +".": "User " + sessionHandlerImpl.getUserFullName(request) + " has genarated and exported GST Form 03 File from "+  sdf.format(startDate) +" to "+ sdf.format(endDate) +".";
                auditTrailObj.insertAuditLog(AuditAction.GST_GENERATION_03,auditMsg, request, "", "");
            } catch (Exception ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.WARNING, ex.getMessage());
            }
        } catch (Exception e) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, e);
        }
    } 
    
    /**
     * This method is a controller for cost and selling price
     * report.
     *
     * @param request Object of HttpServletRequest
     * @param response Object of HttpServletResponse
     * @return ModelAndView
     */
    public ModelAndView getDataForCostAndSellingPriceReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject finaljobj = new JSONObject();
        String msg = "";
        boolean success = false;
        try {
            JSONObject requestParams = new JSONObject();
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyId = sessionHandlerImpl.getCompanyid(request);
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.companyKey, companyId);
            requestParams.put(Constants.df, df);
            DateFormat userdf = authHandler.getUserDateFormatter(request);
            requestParams.put(Constants.userdf, userdf);
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));
            requestParams.put(Constants.productid, request.getParameter(Constants.productid));
            Map<String, PriceValuationStack.Batch> valuationMap = AccProductService.getValuationMapForCostAndSellingPriceReport(requestParams);
            KwlReturnObject kwlReturnObject = accInvoiceDAOobj.getDataForCostAndSellingPriceReport(requestParams);
            List list = kwlReturnObject.getEntityList();
            JSONArray data = new JSONArray();
            if (list != null && !list.isEmpty()) {
                data = accReportsService.getDataForCostAndSellingPriceReport(list, requestParams, valuationMap);
            }
            JSONArray pagedJson = data;
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(request.getParameter(Constants.start)), Integer.parseInt(request.getParameter(Constants.limit)));
            }
            finaljobj.put(Constants.RES_data, pagedJson);
            finaljobj.put("totalCount", data.length());
            success = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            success = false;
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                finaljobj.put(Constants.RES_success, success);
                finaljobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", finaljobj.toString());
    }
    
    /**
     * This method is used to export/price data for cost and selling price
     * report.
     *
     * @param request Object of HttpServletRequest
     * @param response Object of HttpServletResponse
     * @return ModelAndView
     */
    public ModelAndView exportDataForCostAndSellingPriceReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONObject requestParams = new JSONObject();
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyId = sessionHandlerImpl.getCompanyid(request);
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.companyKey, companyId);
            requestParams.put(Constants.df, df);
            DateFormat userdf = authHandler.getUserDateFormatter(request);
            requestParams.put(Constants.userdf, userdf);
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));
            requestParams.put(Constants.productid, request.getParameter(Constants.productid));
            Map<String, PriceValuationStack.Batch> valuationMap = AccProductService.getValuationMapForCostAndSellingPriceReport(requestParams);
            KwlReturnObject kwlReturnObject = accInvoiceDAOobj.getDataForCostAndSellingPriceReport(requestParams);
            List list = kwlReturnObject.getEntityList();
            JSONArray data = new JSONArray();
            if (list != null && !list.isEmpty()) {
                data = accReportsService.getDataForCostAndSellingPriceReport(list, requestParams, valuationMap);
            }
            JSONArray pagedJson = data;
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(request.getParameter(Constants.start)), Integer.parseInt(request.getParameter(Constants.limit)));
            }
            JSONObject dataObj = new JSONObject();
            dataObj.put(Constants.RES_data, pagedJson);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                dataObj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, dataObj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    public ModelAndView getConsolidationReport(HttpServletRequest request, HttpServletResponse response) throws JSONException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issucess = false;
        try{
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            JSONArray array = accFinancialReportsService.getConsolidationReport(paramJobj);
            issucess=true;
            jobj.put(Constants.RES_data, array);
            jobj.put(Constants.RES_count, array.length());
        } catch (JSONException | SessionExpiredException | ServiceException ex){
            issucess=false;
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            jobj.put(Constants.RES_success, issucess);
            jobj.put(Constants.RES_msg, msg);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
        public ModelAndView exportConsolidationReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("exportModule", "Consolidation");

            String userDateFormatId = sessionHandlerImpl.getDateFormatID(request);
            String timeZoneDifferenceId = sessionHandlerImpl.getTimeZoneDifference(request);
            String currencyIDForProduct = sessionHandlerImpl.getCurrencyID(request);
            DateFormat dateFormatForProduct = authHandler.getDateOnlyFormat(request);
            paramJobj.put("dateFormatForProduct", dateFormatForProduct);
            paramJobj.put("userDateFormatId", userDateFormatId);
            paramJobj.put("timeZoneDifferenceId", timeZoneDifferenceId);
            paramJobj.put("currencyIDForProduct", currencyIDForProduct);
                
            consolidationReportExportThread.add(paramJobj);
            Thread t = new Thread(consolidationReportExportThread);
            t.setPriority(8);
            t.start();
            
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    } 

    public ModelAndView getConsolidationProfitAndLossReport(HttpServletRequest request, HttpServletResponse response) throws JSONException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issucess = false;
        String result="";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("stdate", paramJobj.getString("startdate"));
            paramJobj.put("enddate", paramJobj.getString("enddate"));
            paramJobj.put("isForTradingAndProfitLoss", true);
            jobj = accFinancialReportsService.getConsolidationProfitAndLossReport(paramJobj);
            issucess = true;
        } catch (JSONException | SessionExpiredException | ServiceException ex) {
            issucess = false;
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            jobj.put(Constants.RES_success, issucess);
            jobj.put(Constants.RES_msg, msg);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
        
    
    public ModelAndView exportConsolidationProfitAndLossReport(HttpServletRequest request, HttpServletResponse response){
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("stdate", paramJobj.getString("startdate"));
            paramJobj.put("enddate", paramJobj.getString("enddate"));
            paramJobj.put("isForTradingAndProfitLoss", true);
            paramJobj.put("isExport", true);
            paramJobj.put("exportModule", "ProfitAndLoss");
            
            String userDateFormatId = sessionHandlerImpl.getDateFormatID(request);
            String timeZoneDifferenceId = sessionHandlerImpl.getTimeZoneDifference(request);
            String currencyIDForProduct = sessionHandlerImpl.getCurrencyID(request);
            DateFormat dateFormatForProduct = authHandler.getDateOnlyFormat(request);
            paramJobj.put("dateFormatForProduct", dateFormatForProduct);
            paramJobj.put("userDateFormatId", userDateFormatId);
            paramJobj.put("timeZoneDifferenceId", timeZoneDifferenceId);
            paramJobj.put("currencyIDForProduct", currencyIDForProduct);
            
            consolidationReportExportThread.add(paramJobj);
            Thread t = new Thread(consolidationReportExportThread);
            t.setPriority(8);
            t.start();
            
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } 
        return new ModelAndView(view, "model", jobj.toString());
    }
        
    public ModelAndView getConsolidationBalanceSheetReport(HttpServletRequest request, HttpServletResponse response) throws JSONException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issucess = false;
        String result="";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("stdate", paramJobj.getString("startdate"));
            paramJobj.put("enddate", paramJobj.getString("enddate"));
            paramJobj.put("isForTradingAndProfitLoss", true);
            jobj = accFinancialReportsService.getConsolidationBalanceSheetReport(request,paramJobj);// as we have to use existing method hence passing request
            issucess = true;
        } catch (JSONException | SessionExpiredException | ServiceException ex) {
            issucess = false;
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            jobj.put(Constants.RES_success, issucess);
            jobj.put(Constants.RES_msg, msg);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
        
    
    public ModelAndView exportConsolidationBalanceSheetReport(HttpServletRequest request, HttpServletResponse response){
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("stdate", paramJobj.getString("startdate"));
            paramJobj.put("enddate", paramJobj.getString("enddate"));
            paramJobj.put("isForTradingAndProfitLoss", true);
            paramJobj.put("isExport", true);
            
            String userDateFormatId = sessionHandlerImpl.getDateFormatID(request);
            String timeZoneDifferenceId = sessionHandlerImpl.getTimeZoneDifference(request);
            String currencyIDForProduct = sessionHandlerImpl.getCurrencyID(request);
            DateFormat dateFormatForProduct = authHandler.getDateOnlyFormat(request);
            paramJobj.put("dateFormatForProduct", dateFormatForProduct);
            paramJobj.put("userDateFormatId", userDateFormatId);
            paramJobj.put("timeZoneDifferenceId", timeZoneDifferenceId);
            paramJobj.put("currencyIDForProduct", currencyIDForProduct);            
            
            Date requestTime = authHandler.getSimpleDateAndTimeFormat().parse(authHandler.getConstantDateFormatter().format(new Date()));
            int exportStatus = 1;
            SimpleDateFormat sdfTemp = new SimpleDateFormat("ddMMyyyy_HHmmssa");
            String fileName = "ConsolidationBalanceSheet_" + (sdfTemp.format(requestTime)).toString();
            HashMap<String, Object> exportDetails = new HashMap<String, Object>();
            exportDetails.put("fileName", fileName + "." + paramJobj.getString("filetype"));
            exportDetails.put("requestTime", requestTime);
            exportDetails.put("status", exportStatus);
            exportDetails.put("companyId", paramJobj.getString(Constants.companyKey));
            exportDetails.put("fileType", paramJobj.getString("filetype"));

            paramJobj.put("filename", fileName);

             
            KwlReturnObject result1 = accProductObj.saveProductExportDetails(exportDetails);
            ProductExportDetail obj = (ProductExportDetail) result1.getEntityList().get(0);
//                    addProductExportDetails(def, exportDetails);

            jobj = accFinancialReportsService.getConsolidationBalanceSheetReport(request,paramJobj);// as we have to use existing method hence passing request
            exportDaoObj.processRequestNew(paramJobj, jobj);

            HashMap<String, Object> requestParamsForExport = new HashMap<String, Object>();
            requestParamsForExport.put("loginUserId", paramJobj.getString("userId"));
            requestParamsForExport.put("exportFileName", paramJobj.optString("filename", paramJobj.optString("name")));
            requestParamsForExport.put("filetype", paramJobj.optString("filetype"));
            requestParamsForExport.put("email_sub", "Consolidated Balance Sheet Report Export Status");
            requestParamsForExport.put("email_det_txt", "Balance Sheet");

            consolidationReportExportThread.SendMail(requestParamsForExport);

            if (obj != null) {
                exportDetails.put(Constants.Acc_id, obj.getId());
                exportDetails.put("status", 2);
                accProductObj.saveProductExportDetails(exportDetails);
            }
            
        } catch (JSONException | SessionExpiredException | ServiceException | IOException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } 
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getCustomConsolidationBalanceSheetReport(HttpServletRequest request, HttpServletResponse response) throws JSONException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issucess = false;
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("stdate", paramJobj.getString("startdate"));
            paramJobj.put("enddate", paramJobj.getString("enddate"));
            paramJobj.put("isBalanceSheet", true);
            jobj = accFinancialReportsService.getCustomConsolidationBalanceSheetReport(paramJobj);
            issucess = true;
        } catch (JSONException | SessionExpiredException | ServiceException ex) {
            issucess = false;
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            jobj.put(Constants.RES_success, issucess);
            jobj.put(Constants.RES_msg, msg);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    
    public ModelAndView getCustomConsolidationPNLReport(HttpServletRequest request, HttpServletResponse response) throws JSONException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issucess = false;
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("stdate", paramJobj.getString("startdate"));
            paramJobj.put("enddate", paramJobj.getString("enddate"));
            paramJobj.put("isConsolidatedPNL", true);
            jobj = accFinancialReportsService.getCustomConsolidationPNLReport(paramJobj);
            issucess = true;
        } catch (JSONException | SessionExpiredException | ServiceException ex) {
            issucess = false;
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            jobj.put(Constants.RES_success, issucess);
            jobj.put(Constants.RES_msg, msg);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView exportCustomConsolidationBalanceSheetReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("stdate", paramJobj.getString("startdate"));
            paramJobj.put("enddate", paramJobj.getString("enddate"));
            paramJobj.put("isBalanceSheet", true);
            jobj = accFinancialReportsService.getCustomConsolidationBalanceSheetReport(paramJobj);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(paramJobj).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put(Constants.RES_success, true);
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
 public ModelAndView exportCustomConsolidationPNLReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("stdate", paramJobj.getString("startdate"));
            paramJobj.put("enddate", paramJobj.getString("enddate"));
            paramJobj.put("isConsolidatedPNL", true);
            jobj = accFinancialReportsService.getCustomConsolidationPNLReport(paramJobj);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(paramJobj).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put(Constants.RES_success, true);
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }   
        
    public ModelAndView getMonthwiseGeneralLedgerReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            if (StringUtil.isNullOrEmpty((String) request.getParameter(Constants.currencyKey))) { //SDP-11689
                paramJobj.put(Constants.currencyKey, sessionHandlerImpl.getCurrencyID(request));
            }
            jobj = accFinancialReportsService.getMonthwiseGeneralLedgerReport(paramJobj, false);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }

    public ModelAndView exportMonthwiseGeneralLedger(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            /*
             * Business login to fetch data
             */
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            if (StringUtil.isNullOrEmpty((String) request.getParameter(Constants.currencyKey))) { //ERP-36452
                paramJobj.put(Constants.currencyKey, sessionHandlerImpl.getCurrencyID(request));
            }
            jobj = accFinancialReportsService.getMonthwiseGeneralLedgerReport(paramJobj, true);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(paramJobj).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put(Constants.RES_success, true);
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    /**
     * This method is used to get the data for the Group Detail Report
     *
     * @param request Object of HttpServletRequest
     * @param response Object of HttpServletResponse
     * @return ModelAndView
     */
    public ModelAndView getGroupDetailReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean success = true;
        try {
            JSONObject jsonObject = StringUtil.convertRequestToJsonObject(request);
            JSONArray dataArr = new JSONArray();
            
            /*Get Grid configuration Meta Data Information */
            
            JSONObject configObj=accReportsService.getGLRegistryGridInfo(jsonObject);
            
            accReportsService.getGroupWiseGLReport(jsonObject, dataArr,null);
            jobj.put(Constants.RES_data, dataArr);
            jobj.put(Constants.RES_count, dataArr.length());
            /*
            Grid configuration related data seninding to UI side
            */
            jobj.put(Constants.COLUMN_CONFIGS, configObj.getJSONArray(Constants.COLUMN_CONFIGS));
        } catch (Exception ex) {
            success = false;
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, success);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    /**
     * This method is used to export the data for the Group Detail Report
     *
     * @param request Object of HttpServletRequest
     * @param response Object of HttpServletResponse
     * @return ModelAndView
     */
    public ModelAndView exportGroupDetailReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        _logger.log(Level.INFO, "GL export started at : " + new Date());
        try {            
            
            //request.setAttribute("isexportledgerflag", Constants.isexportledgerflag);
            String filetype = StringUtil.isNullOrEmpty(request.getParameter("filetype")) ? "" : request.getParameter("filetype");
            if(filetype.equals("detailedXls") || filetype.equals("detailedXLS") || filetype.equals("detailedCSV")){
                request.setAttribute("isexportledgerflag", Constants.isexportledgerflag);
                Map<String, String> propertiesMap = companyReportConfigurationService.getPropertiesForExport(sessionHandlerImpl.getCompanyid(request), Constants.COMPANY_REPORT_CONFIG_GL, Constants.globalFields, true,Constants.isexportledgerflag,Constants.FROM_EXPANDER);
                request.setAttribute("title", propertiesMap.get("title"));
                request.setAttribute("header", propertiesMap.get("header"));
                request.setAttribute("align", propertiesMap.get("align"));
            } else if (filetype.equals("detailedPDF")) {
                request.setAttribute("isexportledgerflag", Constants.isexportledgerflag);
            }
            JSONObject jsonObject = StringUtil.convertRequestToJsonObject(request);
            boolean threadFlag = jsonObject.optBoolean("threadflag");
            boolean isSubGeneralLedger = jsonObject.optBoolean("issubGeneralLedger");
            boolean isExportingCustomerVendorRecord = jsonObject.optBoolean("isExportingCustomerVendorRecord",false);
            boolean isLandscape = request.getParameter("isLandscape") != null ? Boolean.parseBoolean(request.getParameter("isLandscape")) : false;
            String fileType = request.getParameter("filetype");
            JSONArray dataArr = new JSONArray();
            if (threadFlag) {
                jsonObject.put("jrxmlRealPath", request.getSession().getServletContext().getRealPath("jrxml"));
                exportGroupDetailReport.add(jsonObject);
                Thread t = new Thread(exportGroupDetailReport);        //Run method for this thread is available in ExportGroupDetailReport.java
                t.setPriority(8);
                t.start();
            } else if (isSubGeneralLedger || fileType.equalsIgnoreCase("detailedPDF")) {
                
                int templateflag = StringUtil.isNullOrEmpty(request.getParameter("templateflag")) ? 0 : Integer.parseInt(request.getParameter("templateflag"));
                
                Map<String, Object> financeDetailsMap = accReportsService.getSubLedgerToExport(jsonObject, dataArr);
                
                InputStream inputStream = null;
                InputStream inputStreamSubReport = null;
                if (templateflag == Constants.sats_templateflag) {
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedger.jrxml");
                    inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SATSGeneralLedgerSubReport.jrxml");
                } else {
                    if (isSubGeneralLedger) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SubLedger.jrxml");
                        inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SubLedgerSubReport.jrxml");
                    } else if (isLandscape) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedgerLandscape.jrxml");
                        if (isExportingCustomerVendorRecord) {
                            inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedgerCustomerVendorWiseSubReportLandscape.jrxml");
                        } else {
                            inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedgerSubReportLandscape.jrxml");
                        }
                    } else {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedger.jrxml");
                        if (isExportingCustomerVendorRecord) {
                            inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedgerCustomerVendorWiseSubReport.jrxml");
                        } else {
                            inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedgerSubReport.jrxml");
                        }
                    }
                }

                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                financeDetailsMap.put("GeneralLedgerSubReport", jasperReportSubReport);
                JRBeanCollectionDataSource beanColDataSource = (JRBeanCollectionDataSource) financeDetailsMap.get("datasource");
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, financeDetailsMap, beanColDataSource);

                JRPdfExporter exp = new JRPdfExporter();
                exp.setParameter(JRPdfExporterParameter.JASPER_PRINT, jasperPrint);
                exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
                String pdfFileName = "";
                if(isSubGeneralLedger){
                    pdfFileName = "SubLedger_v1.pdf";
                }else{
                    pdfFileName = request.getParameter("filename").equals("General Ledger Report_v1") ? "GeneralLedgerReport(Detail)_v1.pdf" : "GroupDetailReport(Detail)_v1.pdf";
                }
                response.setHeader("Content-Disposition", "attachment;filename=\"" + pdfFileName+"\"");
                exp.exportReport();
            } else {

                accReportsService.getGroupWiseGLReport(jsonObject, dataArr,null);
                JSONObject dataObj = new JSONObject();
                dataObj.put(Constants.RES_data, dataArr);
                if (StringUtil.equal(fileType, "print")) {
                    String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                    dataObj.put("GenerateDate", GenerateDate);
                    dataObj.put("isFromToDateRequired", true);
                    view = "jsonView-empty";
                }
                if (filetype.equals("pdf")) {

                    Map<String, Object> SummaryLevelPDF = accReportsService.getGeneralLedgerToExportPDFSummary(jsonObject, dataArr);
                    InputStream inputStream = null;
                    InputStream inputStreamSubReport = null;
                    if (isLandscape) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedgerLandscape.jrxml");
                        inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedgerSummaryLandScape.jrxml");
                    } else {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedger.jrxml");
                        inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GeneralLedgerSummary.jrxml");
                    }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                    JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                    SummaryLevelPDF.put("GeneralLedgerSubReport", jasperReportSubReport);
                    JRBeanCollectionDataSource beanColDataSource = (JRBeanCollectionDataSource) SummaryLevelPDF.get("datasource");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, SummaryLevelPDF, beanColDataSource);

                    JRPdfExporter exp = new JRPdfExporter();
                    exp.setParameter(JRPdfExporterParameter.JASPER_PRINT, jasperPrint);
                    exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
                    String pdfFileName = "";

                    pdfFileName = request.getParameter("filename").equals("General Ledger Report_v1") ? "GeneralLedgerReport(summary)_v1.pdf" : "GroupDetailReport(summary)_v1.pdf";
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + pdfFileName+"\"");
                    exp.exportReport();
                } else {
                    exportDaoObj.processRequestNew(request, response, dataObj);
                }
            }

        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        _logger.log(Level.INFO, "GL export ended at : " + new Date());
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    /**
     * @param requestParams  HttpServletRequest should include parameters required by this
     * method
     * @description Controller method addRemoveFavouriteReport which calls a method 
     * addRemoveFavouriteReport which sets report as favourite or un favourite 
     * @return ModelAndView This will return the ModelAndView including JSON object
     * which contains the report data 
     */
    public ModelAndView addRemoveFavouriteReport(HttpServletRequest request, HttpServletResponse response) {
        /*Variable declaration*/
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;

        /*
         Creating transaction for updating data
         */
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("CAP_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        String isfavourite = request.getParameter("isfavourite");
        try {
            
            /*
             Map to store data in DB
             */
            HashMap<String, Object> requestParams = new HashMap<>();
            String reportid = request.getParameter("id");
            String userid = request.getParameter("userid");
            requestParams.put("reportid", reportid);
            requestParams.put("userid", userid);
            requestParams.put("isfavourite", isfavourite);
            requestParams.put("company", sessionHandlerImpl.getCompanyid(request));
            
            /*
             Function to save favourite report data in DB 
             */
            KwlReturnObject result = accCompanyPreferencesObj.addRemoveFavouriteReport(requestParams);
            
            /*Success messages*/
            issuccess = true;
            if(Boolean.parseBoolean(isfavourite.toString())){
                msg = messageSource.getMessage("acc.report.favourite.add.success", null, RequestContextUtils.getLocale(request));
            }else{
                msg = messageSource.getMessage("acc.report.favourite.remove.success", null, RequestContextUtils.getLocale(request));
            }
            
            /*
             Transaction commit after updating data
             */
            txnManager.commit(status);
        } catch (Exception ex) {
            issuccess = false;
            txnManager.rollback(status);
            if(Boolean.parseBoolean(isfavourite.toString())){
                msg = messageSource.getMessage("acc.report.favourite.add.error", null, RequestContextUtils.getLocale(request));
            }else{
                msg = messageSource.getMessage("acc.report.favourite.remove.error", null, RequestContextUtils.getLocale(request));
            }
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        /*
         * Return JSON with success or failure message
         */
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getExportConfiguredCustomData(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "", companyid = "", reportType = "";
        boolean issuccess = false, onlyVisible = false,isconfigsaved=false,fromExpander=false;
        try {
            reportType = Constants.COMPANY_REPORT_CONFIG_GL;
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            companyid = paramJobj.getString(Constants.companyKey);
            Map params = null;
            jobj = companyReportConfigurationService.getExportConfigData(companyid, reportType, onlyVisible,fromExpander, params);
//            KwlReturnObject companyConfigObj = companyReportConfigurationdao.getCompanyReportConfiguration(companyid, reportType);
            if(jobj.length()>0 && jobj.optBoolean("isconfigsaved")){
                isconfigsaved=jobj.optBoolean("isconfigsaved");
            }
            
//            JSONArray isconfigsaved1 = jobj.getJSONArray("isconfigsaved");
//            JSONArray data1 = jobj.getJSONArray("data");
            
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
                jobj.put("isconfigsaved", isconfigsaved);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView saveGLConfiguration(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "", userid = "", companyid = "";
        boolean issuccess = false;
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            userid = !StringUtil.isNullOrEmpty(paramJobj.getString(Constants.userid)) ? paramJobj.getString(Constants.userid) : "";
            paramJobj.put("dataArray", request.getParameter("data"));
            paramJobj.put("id", request.getParameter("id"));
            companyid = !StringUtil.isNullOrEmpty(paramJobj.getString(Constants.companyKey)) ? paramJobj.getString(Constants.companyKey) : "";
            companyReportConfigurationService.saveGLConfiguration(paramJobj, userid, companyid);
            
            issuccess = true;
            msg = messageSource.getMessage("acc.field.Configurationsavedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView getBankReconciliationHistoryRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false, isexpandAll = false;
        String msg = "", actionType="", billid = "";
        JSONArray unclearedChecksArr = null, unclearedDepositsArr = null, clearedDepositsArr = null, clearedChecksArr = null, currencyArray = null, dataArray = null;
        JSONObject jsobj = null, depositObj = null, chequeObj = null, currencyObj = null;
        Date startDate = null, endDate = null;
        try {
            clearedDepositsArr = new JSONArray();
            clearedChecksArr = new JSONArray();
            unclearedDepositsArr = new JSONArray();
            unclearedChecksArr = new JSONArray();
            currencyArray = new JSONArray();
            dataArray = new JSONArray();
            jsobj = new JSONObject();
            //isexpandAll = !StringUtil.isNullOrEmpty(request.getParameter("isexpand")) ? Boolean.parseBoolean(request.getParameter("isexpand")) : false;
            DateFormat df = authHandler.getDateOnlyFormat(request);
            
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            //if (isexpandAll) {
                billid = (!StringUtil.isNullOrEmpty(request.getParameter("billid"))) ? request.getParameter("billid") : "";
                startDate = (!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) ? authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")) : null;
                endDate = (!StringUtil.isNullOrEmpty(request.getParameter("enddate"))) ? authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")) : null;
                requestParams.put("startdate", startDate);
                requestParams.put("enddate", endDate);
                requestParams.put("billid", billid);
                requestParams.put("action", false);  //To fetch only reconciled record details
                KwlReturnObject result = accBankReconciliationObj.getBankReconciliationHistory(requestParams);
                List list = result.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    BankReconciliation entry = (BankReconciliation) itr.next();
                    if (StringUtil.isNullOrEmpty(entry.getReconcilenumber())) {
                        continue;       //Do not print the Un-Reconciled Snapshot
                    }
                    HashMap<String, Object> rowsParams = new HashMap<String, Object>();
                    rowsParams.put("company", entry.getCompany().getCompanyID());
                    rowsParams.put("brid", entry.getID());
                    rowsParams.put("startdate", startDate);
                    rowsParams.put("enddate", endDate);
                    rowsParams.put("userdf", authHandler.getUserDateFormatterWithoutTimeZone(request));
                    
                    JSONObject obj = new JSONObject();
                    obj.put("billid", entry.getID());
                    actionType = entry.isDeleted() ? "Un-Reconcile" : "Reconcile";
                    obj.put("action", actionType);
                    obj.put("clearanceDate", entry.getClearanceDate() == null ? "" : df.format(entry.getClearanceDate()));
                    obj.put("brstartdate", entry.getStartDate() == null ? "" : df.format(entry.getStartDate()));
                    obj.put("brenddate", entry.getEndDate() == null ? "" : df.format(entry.getEndDate()));
                    obj.put("clearingamount", entry.getClearingAmount());
                    obj.put("accountid", entry.getAccount().getID());
                    obj.put("reconcileno", entry.getReconcilenumber());
                    jobj = getBankReconciliationHistoryRows(rowsParams);
                    
                    JSONObject jsondata = jobj.getJSONObject(Constants.RES_data);
                    unclearedDepositsArr = jsondata.getJSONArray("unclearedDepositsArr");
                    unclearedChecksArr = jsondata.getJSONArray("unclearedChecksArr");
                    clearedDepositsArr = jsondata.getJSONArray("clearedDepositsArr");
                    clearedChecksArr = jsondata.getJSONArray("clearedChecksArr");

                    //Cleared Deposits & Other Credits
                    depositObj = new JSONObject();
                    depositObj.put("reconciletype", "Cleared Deposits");
                    depositObj.put("billid", entry.getID());
                    depositObj.put("payments", clearedDepositsArr);
                    dataArray.put(depositObj);

                    //Cleared Checks & Payments
                    chequeObj = new JSONObject();
                    chequeObj.put("reconciletype", "Cleared Checks");
                    chequeObj.put("billid", entry.getID());
                    chequeObj.put("payments", clearedChecksArr);
                    dataArray.put(chequeObj);

                    //Uncleared Deposits & Other Credits
                    depositObj = new JSONObject();
                    depositObj.put("reconciletype", "Uncleared Deposits");
                    depositObj.put("billid", entry.getID());
                    depositObj.put("payments", unclearedDepositsArr);
                    dataArray.put(depositObj);

                    //Uncleared Checks & Payments
                    chequeObj = new JSONObject();
                    chequeObj.put("reconciletype", "Uncleared Checks");
                    chequeObj.put("billid", entry.getID());
                    chequeObj.put("payments", unclearedChecksArr);
                    dataArray.put(chequeObj);

                    jobj.put("data", dataArray);
                    issuccess = true;
                }
            //} else {    //Single Expansion
                    
            //}
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView exportReconciliationHistoryDetailsData(HttpServletRequest request, HttpServletResponse response) {  //Export Reconcile Details Report xls
        JSONObject jobj = new JSONObject();
        JSONObject jobjPrint = new JSONObject();
        String view = "jsonView_ex";
        String actionType = "";
        Date startDate = null, endDate = null;
        JSONArray unclearedDepositsArr = null, unclearedChecksArr = null, clearedDepositsArr = null, clearedChecksArr = null, currencyArray = null, dataArray = null;
        try {
            Boolean isreconciledhistorydetailsXls = true;
            JSONArray finlArray = new JSONArray();
            DateFormat df = authHandler.getDateOnlyFormat(request);
            //actionType = !StringUtil.isNullOrEmpty(request.getParameter("action")) ? request.getParameter("action") : "";
            startDate = (!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) ? authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")) : null;
            endDate = (!StringUtil.isNullOrEmpty(request.getParameter("enddate"))) ? authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")) : null;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            //requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            requestParams.put("startdate", startDate);
            requestParams.put("enddate", endDate);
            requestParams.put("action", false);  //To fetch only reconciled record details
            KwlReturnObject result = accBankReconciliationObj.getBankReconciliationHistory(requestParams);
            List list = result.getEntityList();
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                JSONObject headers = new JSONObject();
                BankReconciliation entry = (BankReconciliation) itr.next();                
                if(StringUtil.isNullOrEmpty(entry.getReconcilenumber())){
                    continue;       //Do not print the Un-Reconciled Snapshot
                }                
                JSONObject obj = new JSONObject();
                obj.put("billid", entry.getID());
                actionType = entry.isDeleted() ? "Un-Reconcile" : "Reconcile";
                obj.put("action", actionType);
                obj.put("clearanceDate", entry.getClearanceDate() == null ? "" : df.format(entry.getClearanceDate()));
                obj.put("brstartdate", entry.getStartDate() == null ? "" : df.format(entry.getStartDate()));
                obj.put("brenddate", entry.getEndDate() == null ? "" : df.format(entry.getEndDate()));
                obj.put("checkcount", entry.getCheckCount());
                obj.put("depositecount", entry.getDepositeCount());
                obj.put("clearingamount", entry.getClearingAmount());
                obj.put("createdby", entry.getCreatedby() == null ? "" : StringUtil.getFullName(entry.getCreatedby()));
                obj.put("accountid", entry.getAccount().getID());
                obj.put("accountname", entry.getAccount().getName());
                obj.put("reconcileno", entry.getReconcilenumber());
                obj.put("bankBookBalanceinAcc", entry.getBankBookBalanceinAcc());
                obj.put("clearedChecksAmountinAcc", entry.getClearedChecksAmountinAcc());
                obj.put("clearedDepositsAmountinAcc", entry.getClearedDepositsAmountinAcc());
                obj.put("unclearedChecksAmountinAcc", entry.getUnclearedChecksAmountinAcc());
                obj.put("unclearedDepositsAmountinAcc", entry.getUnclearedDepositsAmountinAcc());
                obj.put("bankStmtBalanceinAcc", entry.getBankStmtBalanceinAcc());
                obj.put("attachdoc", "");
                finlArray.put(obj);

                HashMap<String, Object> rowsParams = new HashMap<String, Object>();
                rowsParams.put("company", entry.getCompany().getCompanyID());
                rowsParams.put("brid", entry.getID());
                rowsParams.put("startdate", startDate);
                rowsParams.put("enddate", endDate);
                rowsParams.put("userdf", authHandler.getUserDateFormatterWithoutTimeZone(request));

                jobj = getBankReconciliationHistoryRows(rowsParams);

                JSONObject jsondata = jobj.getJSONObject(Constants.RES_data);
                unclearedDepositsArr = jsondata.getJSONArray("unclearedDepositsArr");
                unclearedChecksArr = jsondata.getJSONArray("unclearedChecksArr");
                clearedDepositsArr = jsondata.getJSONArray("clearedDepositsArr");
                clearedChecksArr = jsondata.getJSONArray("clearedChecksArr");

                clearedDepositsArr.put(new JSONObject());
                headers.put("date", "Cleared Deposits and Other Credits");
                finlArray.put(headers);
                for (int i = 0; i < clearedDepositsArr.length(); i++) {
                    finlArray.put(clearedDepositsArr.getJSONObject(i));
                }
                headers = new JSONObject();
                headers.put("date", "Cleared Checks and Payments");
                finlArray.put(headers);
                for (int i = 0; i < clearedChecksArr.length(); i++) {
                    finlArray.put(clearedChecksArr.getJSONObject(i));
                }
                
                finlArray.put(new JSONObject());
                headers = new JSONObject();
                headers.put("date", "Uncleared Deposits and Other Credits");
                finlArray.put(headers);
                for (int i = 0; i < unclearedDepositsArr.length(); i++) {
                    finlArray.put(unclearedDepositsArr.getJSONObject(i));
                }
                
                finlArray.put(new JSONObject());
                headers = new JSONObject();
                headers.put("date", "Uncleared Checks and Payments");
                finlArray.put(headers);
                for (int i = 0; i < unclearedChecksArr.length(); i++) {
                    finlArray.put(unclearedChecksArr.getJSONObject(i));
                }
                
                finlArray.put(new JSONObject());
                finlArray.put(new JSONObject());    //2 Rows space between Two Global Records
            }
            String fileType = request.getParameter("filetype");
            jobjPrint.put(Constants.RES_data, finlArray);
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobjPrint.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobjPrint);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobjPrint.toString());
    }

    public JSONObject getBankReconciliationHistoryRows(HashMap<String, Object> requestParams) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        try {
            JSONArray clearedChecksArray = new JSONArray();
            JSONArray clearedDepositArray = new JSONArray();
            JSONArray unclearedChecksArray = new JSONArray();
            JSONArray unclearedDepositArray = new JSONArray();
            JSONObject rootjobj = new JSONObject();
            DateFormat userdf = authHandler.getDateOnlyFormat();
            if(requestParams.containsKey("userdf") && requestParams.get("userdf")!=null){
                userdf = (DateFormat)requestParams.get("userdf");
            }
            KwlReturnObject result = accBankReconciliationObj.getBankReconciliationHistoryRows(requestParams);
            List list = result.getEntityList();
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                BankReconciliationDetailHistory brdhistory = (BankReconciliationDetailHistory) itr.next();
                JSONObject rowsobj = new JSONObject();
                rowsobj.put("brdid", brdhistory.getID());
                rowsobj.put("bankreconciliationid", brdhistory.getBankReconciliation().getID());
                rowsobj.put("company", brdhistory.getCompany().getCompanyID());
                rowsobj.put("reconciledate", authHandler.getDateOnlyFormat().format(brdhistory.getReconciledate()));
                rowsobj.put("date", brdhistory.getDate() != null ? userdf.format(brdhistory.getDate()):"");
                try {
                    rowsobj.put("customername", StringUtil.decodeString(brdhistory.getAccountname()));
                } catch (Exception e) {
                    rowsobj.put("customername", brdhistory.getAccountname());
                }
                rowsobj.put("paidto", StringUtil.decodeString(brdhistory.getPaidto()));
                rowsobj.put("chequeno", brdhistory.getChequeno());
                rowsobj.put("chequedate", brdhistory.getChequedate()!=null ? userdf.format(brdhistory.getChequedate()) : "");
                rowsobj.put("description", brdhistory.getDescription());
                rowsobj.put("entryno", brdhistory.getEntryno());
                rowsobj.put("jeid", brdhistory.getJeid());
                rowsobj.put("transactionid", brdhistory.getTransactionid());
                try {
                    rowsobj.put("transactionnumber", StringUtil.decodeString(brdhistory.getTransactionNumber()));
                } catch (Exception e) {
                    rowsobj.put("transactionnumber", brdhistory.getTransactionNumber());
                }
                rowsobj.put("transcurrsymbol", brdhistory.getTranscurrsymbol());       //Transaction Currency Symbol
                rowsobj.put("amountintransactioncurrency", brdhistory.getAmountintransactioncurrency());
                rowsobj.put("accountcurrencysymbol", brdhistory.getAccountcurrencysymbol());     //Account Currency Symbol
                rowsobj.put("amountinacc", brdhistory.getAmountinacc());
                rowsobj.put("basecurrency", brdhistory.getCompany().getCurrency().getSymbol());     //Base Currency
                rowsobj.put("amount", brdhistory.getAmount());
                rowsobj.put("debit", brdhistory.isDebit());
                rowsobj.put("isopeningtransaction", brdhistory.isIsopeningtransaction());
                rowsobj.put("moduleid", brdhistory.getModuleid());
                rowsobj.put("clearedstatus", brdhistory.getClearedstatus());
                rowsobj.put("reportname", brdhistory.getReportname());
                if (brdhistory.getClearedstatus() == Constants.CLEARED_CHECKS) {    //1                    
                    clearedChecksArray.put(rowsobj);
                }
                if (brdhistory.getClearedstatus() == Constants.CLEARED_DEPOSITS) {    //2                    
                    clearedDepositArray.put(rowsobj);
                }
                if (brdhistory.getClearedstatus() == Constants.UNCLEARED_CHECKS) {    //3                    
                    unclearedChecksArray.put(rowsobj);
                }
                if (brdhistory.getClearedstatus() == Constants.UNCLEARED_DEPOSITS) {    //4                    
                    unclearedDepositArray.put(rowsobj);
                }
            }
            rootjobj.put("clearedChecksArr", clearedChecksArray);
            rootjobj.put("clearedDepositsArr", clearedDepositArray);
            rootjobj.put("unclearedChecksArr", unclearedChecksArray);
            rootjobj.put("unclearedDepositsArr", unclearedDepositArray);

            jobj.put(Constants.RES_data, rootjobj);
        } catch (JSONException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getBankReconciliationHistoryRows : " + ex.getMessage(), ex);
        } 
        return jobj;
    }
    /**
     * This method is used to get the data of Aged And BS mismatch
     *
     * @param request Object of HttpServletRequest
     * @param response Object of HttpServletResponse
     * @return ModelAndView
     */
    public ModelAndView compareAgedAndbalanceSheetReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean success = true;
        try {
            JSONObject jsonObject = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object> requestParams = null;
            int agedReportType = jsonObject.optInt("agedreporttype", 0);
            if (agedReportType == 0) {//Aged receivable case
                requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
                jsonObject.put("agedRequestParamMap", requestParams);
            } else if (agedReportType == 1) {//Aged Payable case
                requestParams = AccGoodsReceiptServiceHandler.getGoodsReceiptRequestMap(request);
                jsonObject.put("agedRequestParamMap", requestParams);
            }
            JSONArray dataArr = new JSONArray();
            dataArr = accFinancialReportsService.compareAgedAndbalanceSheetReport(jsonObject, requestParams);
            jobj.put(Constants.RES_data, dataArr);
            jobj.put(Constants.RES_count, dataArr.length());
        } catch (Exception ex) {
            success = false;
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, success);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    /**
     * This method is used to get the Budget Vs Cost Report
     *
     * @param request Object of HttpServletRequest
     * @param response Object of HttpServletResponse
     * @return ModelAndView
     */
    public ModelAndView getBudgetVsCostReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean success = true;
        try {
            JSONObject jsonObject = StringUtil.convertRequestToJsonObject(request);
            jobj = accFinancialReportsService.getBudgetVsCostReport(jsonObject);
        } catch (Exception ex) {
            success = false;
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, success);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    /**
     * This method is used to export the Budget Vs Cost Report
     *
     * @param request Object of HttpServletRequest
     * @param response Object of HttpServletResponse
     * @return ModelAndView
     */
    public ModelAndView exportBudgetVsCostReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jsonObject = new JSONObject();
        String view = "jsonView_ex";
        try {
            jsonObject = StringUtil.convertRequestToJsonObject(request);
            jsonObject.put("export", true);
            jsonObject = accFinancialReportsService.getBudgetVsCostReport(jsonObject);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jsonObject.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jsonObject);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jsonObject.toString());
    }
    
    /**
     * This method is used to get the Budget Vs Cost Report
     *
     * @param request Object of HttpServletRequest
     * @param response Object of HttpServletResponse
     * @return ModelAndView
     */
    public ModelAndView getActualVsBudgetReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean success = true;
        try {
            JSONObject jsonObject = StringUtil.convertRequestToJsonObject(request);
            jobj = accFinancialReportsService.getActualVsBudgetReport(jsonObject);
        } catch (Exception ex) {
            success = false;
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, success);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    /**
     * This method is used export the Actual Vs Budget
     *
     * @param request Object of HttpServletRequest
     * @param response Object of HttpServletResponse
     * @return ModelAndView
     */
    public ModelAndView exportActualVsBudgetReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jsonObject = new JSONObject();
        String view = "jsonView_ex";
        try {
            jsonObject = StringUtil.convertRequestToJsonObject(request);
            jsonObject.put("isfromExport", true);
            jsonObject = accFinancialReportsService.getActualVsBudgetReport(jsonObject);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jsonObject.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jsonObject);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jsonObject.toString());
    }
    /**
     * This method is used to get the Forecasting Report
     *
     * @param request Object of HttpServletRequest
     * @param response Object of HttpServletResponse
     * @return ModelAndView
     */
    public ModelAndView getForecastingReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean success = true;
        try {
            JSONObject jsonObject = StringUtil.convertRequestToJsonObject(request);
            jobj = accFinancialReportsService.getForecastingReport(jsonObject);
        } catch (Exception ex) {
            success = false;
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, success);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    /**
     * This method is used to export the Forecasting Report 
     *
     * @param request Object of HttpServletRequest
     * @param response Object of HttpServletResponse
     * @return ModelAndView
     */
    public ModelAndView exportForecastingReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean success = true;
        String view = "jsonView_ex";
        try {
            String fileType = request.getParameter("filetype");
            JSONObject jsonObject = StringUtil.convertRequestToJsonObject(request);
            jsonObject.put("isfromExport", true);
            jobj = accFinancialReportsService.getForecastingReport(jsonObject);
            JSONObject exportObj =  accFinancialReportsService.getForecastingReportExportObject(jobj);
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jsonObject.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, exportObj);
        } catch (Exception ex) {
            success = false;
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, success);
            } catch (JSONException ex) {
                Logger.getLogger(accReportsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    public JSONObject getTrialBalance(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        JSONObject summaryJobj = new JSONObject();
        try {
            String isexportString = "false";
            boolean isExport = false;
            Boolean isJasperTemplate = !StringUtil.isNullOrEmpty(request.getParameter("templateflag")) ? true : false;
            isExport = isJasperTemplate;
            if (request.getAttribute("isExport") != null) {
                isexportString = request.getAttribute("isExport").toString();
                isExport = !StringUtil.isNullOrEmpty(isexportString) ? Boolean.parseBoolean(isexportString) : false;
                String fileType = request.getParameter("filetype");
                if (StringUtil.equal(fileType, "pdf") || StringUtil.equal(fileType, "print") || StringUtil.equal(fileType, "csv")) {
                    isExport = false;//setting true for showing total amount row in default pdf export - itext.
                }
            }
            boolean hidechildCV = false;
            ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.loadObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            extraCompanyPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);

            boolean showAllAccounts = false;
            if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAllAccount()) {//Check to show all accounts.
                showAllAccounts = true;
                request.setAttribute("showAllAccounts", true);
            }

            if (!extraCompanyPreferences.isShowChildAccountsInTb()) {//Anup Check to hide child child accounts and include its sum in parent account if it is hidden.
                hidechildCV = true;
                request.setAttribute("hidechildCV", true);
            }
            KwlReturnObject pref = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) pref.getEntityList().get(0);

            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            boolean eliminateflag = consolidateFlag;
            HashMap<String, String> usedAccountsMap = new HashMap<String, String>();

            requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
            JSONArray jArr = new JSONArray();
            Date startDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) {
                startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));//ERP-32676 - date parse exception
            }
            Date endDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("enddate"))) {
                endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));//ERP-32676 - date parse exception
            }

            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            Date excludedPreviousYearDate = accReportsService.getDateForExcludePreviousYearBalanceFilter(paramJobj, startDate);

            Date openBalEndDate = new DateTime(startDate).minusDays(1).toDate();
            Date excludedPreviousYearDateMinusOne = new DateTime(excludedPreviousYearDate).minusDays(1).toDate();
            double netProfitAndLossAmount = 0;
            double netProfitLossPeriod = 0;
            double netProfitAndLossAmountYTD = 0;
            double netProfitAndLossPeriodYTD = 0;
            request.setAttribute("isTrialBalance", true);
            request.setAttribute("startDate", startDate);
            String profitLossId = "", profitLossName = "", profitLossCode = "";
            boolean isOpeningBalanceFlag = false;
            if (request.getAttribute("isOpeningBalanceFlag") != null) {
                isOpeningBalanceFlag = Boolean.parseBoolean(request.getAttribute("isOpeningBalanceFlag").toString());
            }
            double bals[] = getOpeningBalancesDateWiseMerged(request, requestParams, companyids, new Date(1970), endDate, eliminateflag, preferences);
            double balance = -(bals[1] + bals[0]);
            double ytdbalance = balance; // Calcualte Difference in Opening balance for YTD
            request.removeAttribute("startDate");
            request.removeAttribute("isTrialBalance");
            boolean perpetualOrMRP = false;
            if (balance != 0 || ytdbalance != 0) {
                JSONObject obj = new JSONObject();
                if (balance > 0) {
                    obj.put("d_amount_period", "");
                    obj.put("c_amount_period", "");
                    obj.put("d_period", 0.0);
                    obj.put("c_period", 0.0);
                    obj.put("periodbalance", 0.0);
                    obj.put("d_amount_open", balance);
                    summaryJobj.put("d_amount_open", summaryJobj.has("d_amount_open") ? summaryJobj.getDouble("d_amount_open") + balance : balance);
                    obj.put("c_amount_open", "");
                    obj.put("d_amount", (balance));
                    summaryJobj.put("d_amount", summaryJobj.has("d_amount") ? summaryJobj.getDouble("d_amount") + balance : balance);
                    obj.put("c_amount", "");
                } else {
                    obj.put("c_amount_period", "");
                    obj.put("d_amount_period", "");
                    obj.put("d_period", 0.0);
                    obj.put("c_period", 0.0);
                    obj.put("periodbalance", 0.0);
                    obj.put("c_amount_open", (balance == 0.0) ? balance : -balance);
                    summaryJobj.put("c_amount_open", summaryJobj.has("c_amount_open") ? summaryJobj.getDouble("c_amount_open") - balance : (balance == 0.0) ? balance : -balance);
                    obj.put("d_amount_open", "");
                    obj.put("c_amount", (balance == 0.0) ? balance : -(balance));
                    summaryJobj.put("c_amount", summaryJobj.has("c_amount") ? summaryJobj.getDouble("c_amount") - (balance) : (balance == 0.0) ? balance : -(balance));
                    obj.put("d_amount", "");
                }
                obj.put("openingamount", balance);
                obj.put("endingamount", balance);

                if (ytdbalance > 0) {
                    obj.put("ytd_d_amount_open", ytdbalance);
                    summaryJobj.put("ytd_d_amount_open", summaryJobj.has("ytd_d_amount_open") ? summaryJobj.getDouble("ytd_d_amount_open") + ytdbalance : ytdbalance);
                    obj.put("ytd_c_amount_open", "");
                    obj.put("ytd_d_amount", ytdbalance);
                    summaryJobj.put("ytd_d_amount", summaryJobj.has("ytd_d_amount") ? summaryJobj.getDouble("ytd_d_amount") + ytdbalance : ytdbalance);
                    obj.put("ytd_c_amount", "");
                } else {
                    obj.put("ytd_c_amount_open", (ytdbalance == 0.0) ? ytdbalance : -ytdbalance);
                    summaryJobj.put("ytd_c_amount_open", summaryJobj.has("ytd_c_amount_open") ? summaryJobj.getDouble("ytd_c_amount_open") - ytdbalance : (ytdbalance == 0.0) ? ytdbalance : -ytdbalance);
                    obj.put("ytd_d_amount_open", "");
                    obj.put("ytd_c_amount", (ytdbalance == 0.0) ? ytdbalance : -ytdbalance);
                    summaryJobj.put("ytd_c_amount", summaryJobj.has("ytd_c_amount") ? summaryJobj.getDouble("ytd_c_amount") - ytdbalance : (ytdbalance == 0.0) ? ytdbalance : -ytdbalance);
                    obj.put("ytd_d_amount", "");
                }
                obj.put("accountid", "");
                obj.put("fmt", "A");
                obj.put("accountname", Constants.Difference_in_Opening_balances); // Difference In Opening Balance
                obj.put("leaf", true);
                jArr.put(obj);
            }

            HashMap<String, Object> filterParams = new HashMap<String, Object>();
            //Code for remote sort
            boolean directionDesc = false;
            boolean sortOnType = false;
            if (request.getParameter("dir") != null && !StringUtil.isNullOrEmpty(request.getParameter("dir")) && request.getParameter("sort") != null && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                String orderBy = "";
//                if (filterParams.containsKey("direction") && filterParams.get("direction") != null) {
                String direction = request.getParameter("dir");
                if (direction.equalsIgnoreCase("desc")) {
                    directionDesc = true;
                } else {
                    directionDesc = false;
                }
                String field = request.getParameter("sort");
                if (field.equalsIgnoreCase("acctype")) {
                    sortOnType = true;
                    field = "  group.name " + direction;
                } else if (field.equalsIgnoreCase("accountname")) {//this check is added for :- ERP-13291[CSH] GST in Financial Staements
                    sortOnType = false;
                    field = "  name " + direction;
                } else if (field.equalsIgnoreCase("acccode")) {//this check is added for :- ERP-13291[CSH] GST in Financial Staements
                    sortOnType = false;
                    field = "  acccode " + direction;
                } else if (field.equalsIgnoreCase("aliascode")) {//this check is added for :- ERP-13291[CSH] GST in Financial Staements
                    sortOnType = false;
                    field = "  aliascode " + direction;
                } else {
                    sortOnType = false;
                    field = " acccode " + direction + ", name " + direction;
                }
                orderBy = field;
                filterParams.put("order_by", orderBy);
            } else {
                filterParams.put("order_by", " acccode, name asc");
            }
            //Object for sorting of account objects
            accountComp accComp = new accountComp(sortOnType, directionDesc);
            String companyid = "";
            Date start = new Date(1970);
            HashMap<String, Double> openPeriodAmounts = new HashMap<String, Double>();
            HashMap<String, Double> openPeriod_Ytd_Amounts = new HashMap<String, Double>();
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                filterParams.put("parent", null);
                filterParams.put(Constants.companyKey, companyid);
                String selectedAccountIds = request.getParameter("accountIds");
                if (!StringUtil.isNullOrEmpty(selectedAccountIds)) {
                    filterParams.put("selectedAccountIds", selectedAccountIds);
                }

                KwlReturnObject accresult = accAccountDAOobj.getAccountEntry(filterParams);
                List<Account> list = accresult.getEntityList();
                for (Account account : list) {
                    JSONArray childArray = new JSONArray();
                    if (usedAccountsMap.containsKey(account.getID())) {
                        continue;
                    }
                    if (account.getAccounttype() == 0) {
                        start = excludedPreviousYearDate;
                    } else {
                        start = new Date(1970);
                    }
                    usedAccountsMap.put(account.getID(), account.getID());
                    boolean ytdFlag = false;
                    double openingBalance = 0.0;
                    double periodBalance = 0.0, c_period = 0.0, d_period = 0.0;
                    openPeriodAmounts.clear();
                    openingBalance = accReportsService.getAccountClosingBalanceDateWiseMerged(request, account, start, openBalEndDate, ytdFlag, eliminateflag, openPeriodAmounts);
                    openPeriodAmounts.clear();
                    double amount = accReportsService.getAccountClosingBalanceDateWiseMerged(request, account, startDate, endDate, ytdFlag, eliminateflag, openPeriodAmounts);

                    
                    ytdFlag = false;
                    double openingBalanceYtd = accReportsService.getAccountClosingBalanceDateWiseMerged(request, account, start, excludedPreviousYearDateMinusOne, ytdFlag, eliminateflag, openPeriod_Ytd_Amounts);
                    openPeriod_Ytd_Amounts.clear();
                    double ytd_amount = accReportsService.getAccountClosingBalanceDateWiseMerged(request, account, excludedPreviousYearDate, endDate, ytdFlag, eliminateflag, openPeriod_Ytd_Amounts);
//                    double openingBalanceYtd = 0.0;
                    double periodBalanceYtd = 0.0;
                    if (!consolidateFlag) {
                        if (account.getID().equals(extraCompanyPreferences.getProfitLossAccountId())) {
                            profitLossId = account.getID();
                            profitLossName = account.getName();
                            profitLossCode = account.getAcccode();
                            netProfitAndLossAmount += openingBalance;
                            if (openingBalance == 0 && openPeriodAmounts.containsKey("openingBalance")) {
                                netProfitAndLossAmount += openPeriodAmounts.get("openingBalance");
                            }
                            if (openPeriodAmounts.containsKey("periodBalance")) {
                                netProfitLossPeriod += openPeriodAmounts.get("periodBalance");
                            }
                            if (openPeriod_Ytd_Amounts.containsKey("openingBalance")) {
                                netProfitAndLossAmountYTD += openPeriod_Ytd_Amounts.get("openingBalance");
                            }
                            if (openPeriod_Ytd_Amounts.containsKey("periodBalance")) {
                                netProfitAndLossPeriodYTD += openPeriod_Ytd_Amounts.get("periodBalance");
                            }
                            if (openPeriodAmounts.containsKey("openingBalance")) {
                                openingBalance += openPeriodAmounts.get("openingBalance");
                            }
                        }
                        if (openingBalance == 0 && openPeriodAmounts.containsKey("openingBalance")) {
                            openingBalance += openPeriodAmounts.get("openingBalance");
                        }
                        if (openPeriodAmounts.containsKey("periodBalance")) {
                            periodBalance = openPeriodAmounts.get("periodBalance");
                        }
                        if (openPeriodAmounts.containsKey("c_period")) {
                            c_period = openPeriodAmounts.get("c_period");
                        }
                        if (openPeriodAmounts.containsKey("d_period")) {
                            d_period = openPeriodAmounts.get("d_period");
                        }
                        amount = openingBalance + periodBalance;
                        if (openingBalanceYtd == 0 && openPeriod_Ytd_Amounts.containsKey("openingBalance")) {
                            openingBalanceYtd = openPeriod_Ytd_Amounts.get("openingBalance");
                        }
                        if (openPeriod_Ytd_Amounts.containsKey("periodBalance")) {
                            periodBalanceYtd = openPeriod_Ytd_Amounts.get("periodBalance");
                        }
                        ytd_amount = openingBalanceYtd + periodBalanceYtd;
                        if (!showAllAccounts && StringUtil.roundDoubleTo(openingBalance, 2) == 0 && StringUtil.roundDoubleTo(periodBalance, 2) == 0 && StringUtil.roundDoubleTo(openingBalanceYtd, 2) == 0 && StringUtil.roundDoubleTo(periodBalanceYtd, 2) == 0 && StringUtil.roundDoubleTo(ytd_amount, 2) == 0 && StringUtil.roundDoubleTo(amount, 2) == 0 && account.getChildren().isEmpty()) {
                            continue;
                        }
                    } else {
                        //Fetched Mapped accounts amount for multi company feature.
                        double[] mappedAmountArr = {0, 0};
                        mappedAmountArr = getMappedAccountsAmount(account, startDate, endDate, 0, accComp, request, eliminateflag, usedAccountsMap, openPeriodAmounts, openPeriod_Ytd_Amounts);

                        amount += mappedAmountArr[0];
                        ytd_amount += mappedAmountArr[1];

                        if (account.getID().equals(extraCompanyPreferences.getProfitLossAccountId())) {
                            profitLossId = account.getID();
                            profitLossName = account.getName();
                            profitLossCode = account.getAcccode();
                            netProfitAndLossAmount += openingBalance;
                            if (openingBalance == 0 && openPeriodAmounts.containsKey("openingBalance")) {
                                netProfitAndLossAmount += openPeriodAmounts.get("openingBalance");
                            }
                            if (openPeriodAmounts.containsKey("periodBalance")) {
                                netProfitLossPeriod += openPeriodAmounts.get("periodBalance");
                            }
                            if (openPeriod_Ytd_Amounts.containsKey("openingBalance")) {
                                netProfitAndLossAmountYTD += openPeriod_Ytd_Amounts.get("openingBalance");
                            }
                            if (openPeriod_Ytd_Amounts.containsKey("periodBalance")) {
                                netProfitAndLossPeriodYTD += openPeriod_Ytd_Amounts.get("periodBalance");
                            }
                            if (openPeriodAmounts.containsKey("openingBalance")) {
                                openingBalance += openPeriodAmounts.get("openingBalance");
                            }
                        }

                        if (openingBalance == 0 && openPeriodAmounts.containsKey("openingBalance")) {
                            openingBalance += openPeriodAmounts.get("openingBalance");
                        }
                        if (openPeriodAmounts.containsKey("periodBalance")) {
                            periodBalance = openPeriodAmounts.get("periodBalance");
                        }
                        amount = openingBalance + periodBalance;
                        if (openPeriodAmounts.containsKey("c_period")) {
                            c_period = openPeriodAmounts.get("c_period");
                        }
                        if (openPeriodAmounts.containsKey("d_period")) {
                            d_period = openPeriodAmounts.get("d_period");
                        }
                        if (openPeriod_Ytd_Amounts.containsKey("openingBalance")) {
                            openingBalanceYtd = openPeriod_Ytd_Amounts.get("openingBalance");
                        }
                        if (openPeriod_Ytd_Amounts.containsKey("periodBalance")) {
                            periodBalanceYtd = openPeriod_Ytd_Amounts.get("periodBalance");
                        }

                        if (!showAllAccounts && StringUtil.roundDoubleTo(openingBalance, 2) == 0 && StringUtil.roundDoubleTo(periodBalance, 2) == 0 && StringUtil.roundDoubleTo(openingBalanceYtd, 2) == 0 && StringUtil.roundDoubleTo(periodBalanceYtd, 2) == 0 && StringUtil.roundDoubleTo(ytd_amount, 2) == 0 && StringUtil.roundDoubleTo(amount, 2) == 0) {
                            continue;
                        }
                    }
                    if (!account.getChildren().isEmpty()) {
                        childArray = getChildAccounts(account, startDate, endDate, 0, accComp, request, consolidateFlag, eliminateflag, usedAccountsMap, hidechildCV, showAllAccounts);
                    }
                    //Fetched Mapped accounts amount for multi company feature.

                    int level = 0;
                    JSONObject obj = new JSONObject();
                    obj.put("accountid", account.getID());
                    obj.put("accountname", (!StringUtil.isNullOrEmpty(account.getName())) ? account.getName() : (!StringUtil.isNullOrEmpty(account.getAcccode()) ? account.getAcccode() : ""));
                    if (!StringUtil.isNullOrEmpty(account.getAcccode())) {
                        obj.put("acccode", account.getAcccode());
                    } else {
                        obj.put("acccode", "");
                    }
                    if (!StringUtil.isNullOrEmpty(account.getAliascode())) {
                        obj.put("aliascode", account.getAliascode());
                    } else {
                        obj.put("aliascode", "");
                    }
                    obj.put("description", account.getDescription() != null ? account.getDescription() : "");
                    obj.put("acctype", account.getGroup().getName());
                    obj.put("level", level);
                    obj.put("c_period", c_period);
                    summaryJobj.put("c_period", summaryJobj.has("c_period") ? summaryJobj.getDouble("c_period") + c_period : c_period);
                    obj.put("d_period", d_period);
                    summaryJobj.put("d_period", summaryJobj.has("d_period") ? summaryJobj.getDouble("d_period") + d_period : d_period);
                    obj.put("periodBalance", periodBalance);
                    summaryJobj.put("periodBalance", summaryJobj.has("periodBalance") ? summaryJobj.getDouble("periodBalance") + periodBalance : periodBalance);
                    obj.put("leaf", true);
                    if (openingBalance > 0) {
                        obj.put("d_amount_open", openingBalance);
                        obj.put("c_amount_open", "");
                        summaryJobj.put("d_amount_open", summaryJobj.has("d_amount_open") ? summaryJobj.getDouble("d_amount_open") + openingBalance : openingBalance);
                    } else if (openingBalance < 0) {
                        obj.put("c_amount_open", (openingBalance == 0.0) ? openingBalance : -openingBalance);
                        obj.put("d_amount_open", "");
                        summaryJobj.put("c_amount_open", summaryJobj.has("c_amount_open") ? summaryJobj.getDouble("c_amount_open") - openingBalance : (openingBalance == 0.0) ? openingBalance : -openingBalance);
                    } else {
                        obj.put("c_amount_open", "");
                        obj.put("d_amount_open", "");
                    }
                    obj.put("openingamount", openingBalance);
                    if (periodBalance > 0) {
                        obj.put("d_amount_period", periodBalance);
                        obj.put("c_amount_period", "");
                        summaryJobj.put("d_amount_period", summaryJobj.has("d_amount_period") ? summaryJobj.getDouble("d_amount_period") + periodBalance : periodBalance);
                    } else if (periodBalance < 0) {
                        obj.put("c_amount_period", (periodBalance == 0.0) ? periodBalance : -periodBalance);
                        obj.put("d_amount_period", "");
                        summaryJobj.put("c_amount_period", summaryJobj.has("c_amount_period") ? summaryJobj.getDouble("c_amount_period") - periodBalance : (periodBalance == 0.0) ? periodBalance : -periodBalance);
                    } else {
                        obj.put("c_amount_period", "");
                        obj.put("d_amount_period", "");
                    }
                    if (amount > 0) {
                        obj.put("d_amount", amount);
                        obj.put("c_amount", "");
                        summaryJobj.put("d_amount", summaryJobj.has("d_amount") ? summaryJobj.getDouble("d_amount") + amount : amount);
                    } else if (amount < 0) {
                        obj.put("c_amount", (amount == 0.0) ? amount : -amount);
                        obj.put("d_amount", "");
                        summaryJobj.put("c_amount", summaryJobj.has("c_amount") ? summaryJobj.getDouble("c_amount") - amount : (amount == 0.0) ? amount : -amount);
                    } else {
                        obj.put("c_amount", "");
                        obj.put("d_amount", "");
                    }
                    obj.put("endingamount", amount);

                    if (openingBalanceYtd > 0) {
                        obj.put("ytd_d_amount_open", openingBalanceYtd);
                        obj.put("ytd_c_amount_open", "");
                        summaryJobj.put("ytd_d_amount_open", summaryJobj.has("ytd_d_amount_open") ? summaryJobj.getDouble("ytd_d_amount_open") + openingBalanceYtd : openingBalanceYtd);
                    } else if (openingBalanceYtd < 0) {
                        obj.put("ytd_c_amount_open", (openingBalanceYtd == 0.0) ? openingBalanceYtd : -openingBalanceYtd);
                        obj.put("ytd_d_amount_open", "");
                        summaryJobj.put("ytd_c_amount_open", summaryJobj.has("ytd_c_amount_open") ? summaryJobj.getDouble("ytd_c_amount_open") - openingBalanceYtd : (openingBalanceYtd == 0.0) ? openingBalanceYtd : -openingBalanceYtd);
                    } else {
                        obj.put("ytd_c_amount_open", "");
                        obj.put("ytd_d_amount_open", "");
                    }
                    if (periodBalanceYtd > 0) {
                        obj.put("ytd_d_amount_period", periodBalanceYtd);
                        obj.put("ytd_c_amount_period", "");
                        summaryJobj.put("ytd_d_amount_period", summaryJobj.has("ytd_d_amount_period") ? summaryJobj.getDouble("ytd_d_amount_period") + periodBalanceYtd : periodBalanceYtd);
                    } else if (periodBalanceYtd < 0) {
                        obj.put("ytd_c_amount_period", (periodBalanceYtd == 0.0) ? periodBalanceYtd : -periodBalanceYtd);
                        obj.put("ytd_d_amount_period", "");
                        summaryJobj.put("ytd_c_amount_period", summaryJobj.has("ytd_c_amount_period") ? summaryJobj.getDouble("ytd_c_amount_period") - periodBalanceYtd : (periodBalanceYtd == 0.0) ? periodBalanceYtd : -periodBalanceYtd);
                    } else {
                        obj.put("ytd_c_amount_period", "");
                        obj.put("ytd_d_amount_period", "");
                    }

                    if (ytd_amount > 0) {
                        obj.put("ytd_d_amount", ytd_amount);
                        obj.put("ytd_c_amount", "");
                        summaryJobj.put("ytd_d_amount", summaryJobj.has("ytd_d_amount") ? summaryJobj.getDouble("ytd_d_amount") + ytd_amount : ytd_amount);
                    } else if (ytd_amount < 0) {
                        obj.put("ytd_c_amount", (ytd_amount == 0.0) ? ytd_amount : -ytd_amount);
                        obj.put("ytd_d_amount", "");
                        summaryJobj.put("ytd_c_amount", summaryJobj.has("ytd_c_amount") ? summaryJobj.getDouble("ytd_c_amount") - ytd_amount : (ytd_amount == 0.0) ? ytd_amount : -ytd_amount);
                    } else {
                        obj.put("ytd_c_amount", "");
                        obj.put("ytd_d_amount", "");
                    }

                    //Put child account's JSON from group company
                    if (childArray.length() == 0) {
                        if (showAllAccounts || (!showAllAccounts && (amount != 0 || ytd_amount != 0 || periodBalanceYtd != 0 || openingBalanceYtd != 0 || openingBalance != 0 || periodBalance != 0))) {
                            obj.put("leaf", true);
                            jArr.put(obj);
                        }
                    } else {
                        if (hidechildCV) {
                            for (int i = 0; i < childArray.length(); i++) {
                                JSONObject jobjTemp = childArray.getJSONObject(i);
                                if (jobjTemp.has("level") && jobjTemp.get("level") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("level").toString())) {
                                    int levelTemp = Integer.parseInt(jobjTemp.get("level").toString());
                                    if (levelTemp == level + 1) {//Add only one level down child accounts sum as it already contain sum of their childrens in case of multi level.                                    
                                        if (jobjTemp.has("d_amount") && jobjTemp.get("d_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount").toString())) {
                                            double d_amount = Double.parseDouble(jobjTemp.get("d_amount").toString());
                                            amount += d_amount;
                                            summaryJobj.put("d_amount", summaryJobj.has("d_amount") ? summaryJobj.getDouble("d_amount") + d_amount : d_amount);
                                        }
                                        if (jobjTemp.has("d_amount_open") && jobjTemp.get("d_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount_open").toString())) {
                                            double d_amount_open = Double.parseDouble(jobjTemp.get("d_amount_open").toString());
                                            openingBalance += d_amount_open;
                                            summaryJobj.put("d_amount_open", summaryJobj.has("d_amount_open") ? summaryJobj.getDouble("d_amount_open") + d_amount_open : d_amount_open);
                                        }
                                        if (jobjTemp.has("d_amount_period") && jobjTemp.get("d_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount_period").toString())) {
                                            double d_amount_period = Double.parseDouble(jobjTemp.get("d_amount_period").toString());
                                            periodBalance += d_amount_period;
                                            summaryJobj.put("d_amount_period", summaryJobj.has("d_amount_period") ? summaryJobj.getDouble("d_amount_period") + d_amount_period : d_amount_period);
                                        }
                                        if (jobjTemp.has("d_period") && jobjTemp.get("d_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_period").toString())) {
                                            double d_amount_period = Double.parseDouble(jobjTemp.get("d_period").toString());
                                            d_period += d_amount_period;
                                            summaryJobj.put("d_period", summaryJobj.has("d_period") ? summaryJobj.getDouble("d_period") + d_amount_period : d_amount_period);
                                        }
                                        if (jobjTemp.has("c_period") && jobjTemp.get("c_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_period").toString())) {
                                            double d_amount_period = Double.parseDouble(jobjTemp.get("c_period").toString());
                                            c_period += d_amount_period;
                                            summaryJobj.put("c_period", summaryJobj.has("c_period") ? summaryJobj.getDouble("c_period") + d_amount_period : d_amount_period);
                                        }
                                        if (jobjTemp.has("periodBalance") && jobjTemp.get("periodBalance") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("periodBalance").toString())) {
                                            double d_amount_period = Double.parseDouble(jobjTemp.get("periodBalance").toString());
//                                            periodBalance += d_amount_period;
                                            summaryJobj.put("periodBalance", summaryJobj.has("periodBalance") ? summaryJobj.getDouble("periodBalance") + d_amount_period : d_amount_period);
                                        }
                                        if (jobjTemp.has("ytd_d_amount_open") && jobjTemp.get("ytd_d_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount_open").toString())) {
                                            double ytd_d_amount_open = Double.parseDouble(jobjTemp.get("ytd_d_amount_open").toString());
                                            openingBalanceYtd += ytd_d_amount_open;
                                            summaryJobj.put("ytd_d_amount_open", summaryJobj.has("ytd_d_amount_open") ? summaryJobj.getDouble("ytd_d_amount_open") + ytd_d_amount_open : ytd_d_amount_open);
                                        }
                                        if (jobjTemp.has("ytd_d_amount_period") && jobjTemp.get("ytd_d_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount_period").toString())) {
                                            double ytd_d_amount_period = Double.parseDouble(jobjTemp.get("ytd_d_amount_period").toString());
                                            periodBalanceYtd += ytd_d_amount_period;
                                            summaryJobj.put("ytd_d_amount_period", summaryJobj.has("ytd_d_amount_period") ? summaryJobj.getDouble("ytd_d_amount_period") + ytd_d_amount_period : ytd_d_amount_period);
                                        }
                                        if (jobjTemp.has("ytd_d_amount") && jobjTemp.get("ytd_d_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount").toString())) {
                                            double ytd_d_amount = Double.parseDouble(jobjTemp.get("ytd_d_amount").toString());
                                            ytd_amount += ytd_d_amount;
                                            summaryJobj.put("ytd_d_amount", summaryJobj.has("ytd_d_amount") ? summaryJobj.getDouble("ytd_d_amount") + ytd_d_amount : ytd_d_amount);
                                        }
                                        if (jobjTemp.has("c_amount") && jobjTemp.get("c_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount").toString())) {
                                            double c_amount = Double.parseDouble(jobjTemp.get("c_amount").toString());
                                            amount -= c_amount;
                                            summaryJobj.put("c_amount", summaryJobj.has("c_amount") ? summaryJobj.getDouble("c_amount") + c_amount : c_amount);
                                        }
                                        if (jobjTemp.has("c_amount_open") && jobjTemp.get("c_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount_open").toString())) {
                                            double c_amount_open = Double.parseDouble(jobjTemp.get("c_amount_open").toString());
                                            openingBalance -= c_amount_open;
                                            summaryJobj.put("c_amount_open", summaryJobj.has("c_amount_open") ? summaryJobj.getDouble("c_amount_open") + c_amount_open : c_amount_open);
                                        }
                                        if (jobjTemp.has("c_amount_period") && jobjTemp.get("c_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount_period").toString())) {
                                            double c_amount_period = Double.parseDouble(jobjTemp.get("c_amount_period").toString());
                                            periodBalance -= c_amount_period;
                                            summaryJobj.put("c_amount_period", summaryJobj.has("c_amount_period") ? summaryJobj.getDouble("c_amount_period") + c_amount_period : c_amount_period);
                                        }
                                        if (jobjTemp.has("ytd_c_amount_open") && jobjTemp.get("ytd_c_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount_open").toString())) {
                                            double ytd_c_amount_open = Double.parseDouble(jobjTemp.get("ytd_c_amount_open").toString());
                                            openingBalanceYtd -= ytd_c_amount_open;
                                            summaryJobj.put("ytd_c_amount_open", summaryJobj.has("ytd_c_amount_open") ? summaryJobj.getDouble("ytd_c_amount_open") + ytd_c_amount_open : ytd_c_amount_open);
                                        }
                                        if (jobjTemp.has("ytd_c_amount_period") && jobjTemp.get("ytd_c_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount_period").toString())) {
                                            double ytd_c_amount_period = Double.parseDouble(jobjTemp.get("ytd_c_amount_period").toString());
                                            periodBalanceYtd -= ytd_c_amount_period;
                                            summaryJobj.put("ytd_c_amount_period", summaryJobj.has("ytd_c_amount_period") ? summaryJobj.getDouble("ytd_c_amount_period") + ytd_c_amount_period : ytd_c_amount_period);
                                        }
                                        if (jobjTemp.has("ytd_c_amount") && jobjTemp.get("ytd_c_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount").toString())) {
                                            double ytd_c_amount = Double.parseDouble(jobjTemp.get("ytd_c_amount").toString());
                                            ytd_amount -= ytd_c_amount;
                                            summaryJobj.put("ytd_c_amount", summaryJobj.has("ytd_c_amount") ? summaryJobj.getDouble("ytd_c_amount") + ytd_c_amount : ytd_c_amount);
                                        }
                                    }
                                }
                            }
                            if (amount > 0) {
                                obj.put("d_amount", amount);
                                obj.put("c_amount", "");
                            } else if (amount < 0) {
                                obj.put("c_amount", (amount == 0.0) ? amount : -amount);
                                obj.put("d_amount", "");
                            } else {
                                obj.put("c_amount", "");
                                obj.put("d_amount", "");
                            }
                            obj.put("endingamount", amount);

                            if (openingBalance > 0) {
                                obj.put("d_amount_open", openingBalance);
                                obj.put("c_amount_open", "");
                            } else if (openingBalance < 0) {
                                obj.put("c_amount_open", (openingBalance == 0.0) ? openingBalance : -openingBalance);
                                obj.put("d_amount_open", "");
                            } else {
                                obj.put("c_amount_open", "");
                                obj.put("d_amount_open", "");
                            }
                            obj.put("openingamount", openingBalance);
                            if (periodBalance > 0) {
                                obj.put("d_amount_period", periodBalance);
                                obj.put("c_amount_period", "");
                            } else if (periodBalance < 0) {
                                obj.put("c_amount_period", (periodBalance == 0.0) ? periodBalance : -periodBalance);
                                obj.put("d_amount_period", "");
                            } else {
                                obj.put("c_amount_period", "");
                                obj.put("d_amount_period", "");
                            }
                            obj.put("periodBalance", periodBalance);
                            obj.put("c_period", c_period);
                            obj.put("d_period", d_period);
                            if (ytd_amount > 0) {
                                obj.put("ytd_d_amount", ytd_amount);
                                obj.put("ytd_c_amount", "");
                            } else if (ytd_amount < 0) {
                                obj.put("ytd_c_amount", (ytd_amount == 0.0) ? ytd_amount : -ytd_amount);
                                obj.put("ytd_d_amount", "");
                            } else {
                                obj.put("ytd_c_amount", "");
                                obj.put("ytd_d_amount", "");
                            }
                            if (openingBalanceYtd > 0) {
                                obj.put("ytd_d_amount_open", openingBalanceYtd);
                                obj.put("ytd_c_amount_open", "");
                            } else if (openingBalanceYtd < 0) {
                                obj.put("ytd_c_amount_open", (openingBalanceYtd == 0.0) ? openingBalanceYtd : -openingBalanceYtd);
                                obj.put("ytd_d_amount_open", "");
                            } else {
                                obj.put("ytd_c_amount_open", "");
                                obj.put("ytd_d_amount_open", "");
                            }
                            if (periodBalanceYtd > 0) {
                                obj.put("ytd_d_amount_period", periodBalanceYtd);
                                obj.put("ytd_c_amount_period", "");
                            } else if (periodBalanceYtd < 0) {
                                obj.put("ytd_c_amount_period", (periodBalanceYtd == 0.0) ? periodBalanceYtd : -periodBalanceYtd);
                                obj.put("ytd_d_amount_period", "");
                            } else {
                                obj.put("ytd_c_amount_period", "");
                                obj.put("ytd_d_amount_period", "");
                            }
                        }
                        if (amount == 0) {
                            obj.put("c_amount", "");
                        }
                        if (openingBalance == 0) {
                            obj.put("c_amount_open", "");
                        }
                        if (periodBalance == 0) {
                            obj.put("c_amount_period", "");
                        }
                        if (ytd_amount == 0) {
                            obj.put("ytd_c_amount", "");
                        }
                        if (openingBalanceYtd == 0) {
                            obj.put("ytd_c_amount_open", "");
                        }
                        if (periodBalanceYtd == 0) {
                            obj.put("ytd_c_amount_period", "");
                        }
                        if (hidechildCV) {
                            obj.put("leaf", true);
                        } else {
                            obj.put("leaf", false);
                        }
                        jArr.put(obj);
                        if (!hidechildCV) {
                            for (int i = 0; i < childArray.length(); i++) {//whenn  we are showing child account at that time to addd child amount in final total. 
                                JSONObject jobjTemp = childArray.getJSONObject(i);
                                if (jobjTemp.has("level") && jobjTemp.get("level") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("level").toString())) {
                                    if (jobjTemp.has("d_amount") && jobjTemp.get("d_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount").toString())) {
                                        double d_amount = Double.parseDouble(jobjTemp.get("d_amount").toString());
                                        summaryJobj.put("d_amount", summaryJobj.has("d_amount") ? summaryJobj.getDouble("d_amount") + d_amount : d_amount);
                                    }
                                    if (jobjTemp.has("d_amount_open") && jobjTemp.get("d_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount_open").toString())) {
                                        double d_amount_open = Double.parseDouble(jobjTemp.get("d_amount_open").toString());
                                        summaryJobj.put("d_amount_open", summaryJobj.has("d_amount_open") ? summaryJobj.getDouble("d_amount_open") + d_amount_open : d_amount_open);
                                    }
                                    if (jobjTemp.has("d_amount_period") && jobjTemp.get("d_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_amount_period").toString())) {
                                        double d_amount_period = Double.parseDouble(jobjTemp.get("d_amount_period").toString());
                                        summaryJobj.put("d_amount_period", summaryJobj.has("d_amount_period") ? summaryJobj.getDouble("d_amount_period") + d_amount_period : d_amount_period);
                                    }
                                    if (jobjTemp.has("ytd_d_amount_open") && jobjTemp.get("ytd_d_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount_open").toString())) {
                                        double ytd_d_amount_open = Double.parseDouble(jobjTemp.get("ytd_d_amount_open").toString());
                                        summaryJobj.put("ytd_d_amount_open", summaryJobj.has("ytd_d_amount_open") ? summaryJobj.getDouble("ytd_d_amount_open") + ytd_d_amount_open : ytd_d_amount_open);
                                    }
                                    if (jobjTemp.has("ytd_d_amount_period") && jobjTemp.get("ytd_d_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount_period").toString())) {
                                        double ytd_d_amount_period = Double.parseDouble(jobjTemp.get("ytd_d_amount_period").toString());
                                        summaryJobj.put("ytd_d_amount_period", summaryJobj.has("ytd_d_amount_period") ? summaryJobj.getDouble("ytd_d_amount_period") + ytd_d_amount_period : ytd_d_amount_period);
                                    }
                                    if (jobjTemp.has("ytd_d_amount") && jobjTemp.get("ytd_d_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_d_amount").toString())) {
                                        double ytd_d_amount = Double.parseDouble(jobjTemp.get("ytd_d_amount").toString());
                                        summaryJobj.put("ytd_d_amount", summaryJobj.has("ytd_d_amount") ? summaryJobj.getDouble("ytd_d_amount") + ytd_d_amount : ytd_d_amount);
                                    }
                                    if (jobjTemp.has("c_amount") && jobjTemp.get("c_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount").toString())) {
                                        double c_amount = Double.parseDouble(jobjTemp.get("c_amount").toString());
                                        summaryJobj.put("c_amount", summaryJobj.has("c_amount") ? summaryJobj.getDouble("c_amount") + c_amount : c_amount);
                                    }
                                    if (jobjTemp.has("c_amount_open") && jobjTemp.get("c_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount_open").toString())) {
                                        double c_amount_open = Double.parseDouble(jobjTemp.get("c_amount_open").toString());
                                        summaryJobj.put("c_amount_open", summaryJobj.has("c_amount_open") ? summaryJobj.getDouble("c_amount_open") + c_amount_open : c_amount_open);
                                    }
                                    if (jobjTemp.has("c_amount_period") && jobjTemp.get("c_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_amount_period").toString())) {
                                        double c_amount_period = Double.parseDouble(jobjTemp.get("c_amount_period").toString());
                                        summaryJobj.put("c_amount_period", summaryJobj.has("c_amount_period") ? summaryJobj.getDouble("c_amount_period") + c_amount_period : c_amount_period);
                                    }
                                    if (jobjTemp.has("ytd_c_amount_open") && jobjTemp.get("ytd_c_amount_open") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount_open").toString())) {
                                        double ytd_c_amount_open = Double.parseDouble(jobjTemp.get("ytd_c_amount_open").toString());
                                        summaryJobj.put("ytd_c_amount_open", summaryJobj.has("ytd_c_amount_open") ? summaryJobj.getDouble("ytd_c_amount_open") + ytd_c_amount_open : ytd_c_amount_open);
                                    }
                                    if (jobjTemp.has("ytd_c_amount_period") && jobjTemp.get("ytd_c_amount_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount_period").toString())) {
                                        double ytd_c_amount_period = Double.parseDouble(jobjTemp.get("ytd_c_amount_period").toString());
                                        summaryJobj.put("ytd_c_amount_period", summaryJobj.has("ytd_c_amount_period") ? summaryJobj.getDouble("ytd_c_amount_period") + ytd_c_amount_period : ytd_c_amount_period);
                                    }
                                    if (jobjTemp.has("ytd_c_amount") && jobjTemp.get("ytd_c_amount") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("ytd_c_amount").toString())) {
                                        double ytd_c_amount = Double.parseDouble(jobjTemp.get("ytd_c_amount").toString());
                                        summaryJobj.put("ytd_c_amount", summaryJobj.has("ytd_c_amount") ? summaryJobj.getDouble("ytd_c_amount") + ytd_c_amount : ytd_c_amount);
                                    }
                                    if (jobjTemp.has("d_period") && jobjTemp.get("d_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("d_period").toString())) {
                                        double d_period_total = Double.parseDouble(jobjTemp.get("d_period").toString());
                                        summaryJobj.put("d_period", summaryJobj.has("d_period") ? summaryJobj.getDouble("d_period") + d_period_total : d_period_total);
                                    }
                                    if (jobjTemp.has("c_period") && jobjTemp.get("c_period") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("c_period").toString())) {
                                        double c_period_total = Double.parseDouble(jobjTemp.get("c_period").toString());
                                        summaryJobj.put("c_period", summaryJobj.has("c_period") ? summaryJobj.getDouble("c_period") + c_period_total : c_period_total);
                                    }
                                    if (jobjTemp.has("periodBalance") && jobjTemp.get("periodBalance") != null && !StringUtil.isNullOrEmpty(jobjTemp.get("periodBalance").toString())) {
                                        double ytd_c_amount = Double.parseDouble(jobjTemp.get("periodBalance").toString());
                                        summaryJobj.put("periodBalance", summaryJobj.has("periodBalance") ? summaryJobj.getDouble("periodBalance") + ytd_c_amount : ytd_c_amount);
                                    }
                                }
                                jArr.put(childArray.getJSONObject(i));
                            }
                        }
                    }
                }

                if (isOpeningBalanceFlag) { // Below code does not require for TB So commenting it Refer ticketSDP-2374 // include opening/closing stock
                    boolean isMRPActivated = accCompanyPreferencesObj.isMRPModuleActivated(companyid);
                    perpetualOrMRP = !(isMRPActivated || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD);
                    if (extraCompanyPreferences.isStockValuationFlag() && !(isMRPActivated || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) { // do not calculate closing stock if MRP module is activated
                        double invCloseBal = 0, ytdinvCloseBal = 0;
                        HashMap<String, Object> requestParam = new HashMap<String, Object>();
                        requestParam.put(Constants.REQ_startdate, preferences.getBookBeginningFrom() != null ? authHandler.getDateOnlyFormat().format(preferences.getBookBeginningFrom()) : "");
                        Date previousFYEndDate = new DateTime(excludedPreviousYearDate).minusDays(1).toDate();
                        if (preferences.getFinancialYearFrom() != null && preferences.getBookBeginningFrom() != null && (preferences.getFinancialYearFrom() != preferences.getBookBeginningFrom())) {
                            Calendar calendar = Calendar.getInstance();
                            calendar.setTime(preferences.getFinancialYearFrom());
                            Date ffyDate = calendar.getTime();
                            calendar.add(Calendar.YEAR, 1);
                            calendar.add(Calendar.DATE, -1);
                            Date endingFYDate = calendar.getTime();
                            if (startDate.after(ffyDate) && (startDate.before(endingFYDate) || DateUtils.isSameDay(startDate, endingFYDate))) {
                                calendar.setTime(preferences.getBookBeginningFrom());
                                Date bbDate = calendar.getTime();
                                calendar.add(Calendar.DATE, -1);
                                Date dayBeforeBBDate = calendar.getTime();
                                /*If BB != FFY and startdate falls between 1st FY startdate and endate then pass BB date - 1 as the endate*/
                                requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat(request).format(dayBeforeBBDate));
                            } else {
                                /* Previous FY Endate to be pass as enddate*/
                                requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat(request).format(previousFYEndDate));
                            }
                        } else {
                            /* Previous FY Endate to be pass as enddate*/
                            requestParam.put(Constants.REQ_enddate, authHandler.getDateOnlyFormat(request).format(previousFYEndDate));
                        }
                        requestParam.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                        requestParam.put(Constants.df, authHandler.getDateOnlyFormat());
                        if (!StringUtil.isNullOrEmpty(request.getParameter("searchJson"))) {
                            requestParam.put(Constants.Acc_Search_Json, request.getParameter("searchJson"));
                        }
                        double[] valuation = AccProductService.getInventoryValuationDataForFinancialReports(requestParam);
                        invCloseBal = valuation[5];
                        ytdinvCloseBal = invCloseBal;
                        if (invCloseBal != 0 || ytdinvCloseBal != 0) {
                            JSONObject obj = new JSONObject();
                            if (invCloseBal > 0) {
                                obj.put("d_amount_period", "");
                                obj.put("c_amount_period", "");
                                obj.put("d_period", 0.0);
                                obj.put("c_period", 0.0);
                                obj.put("periodbalance", 0.0);
                                obj.put("d_amount_open", invCloseBal);
                                summaryJobj.put("d_amount_open", summaryJobj.has("d_amount_open") ? summaryJobj.getDouble("d_amount_open") + invCloseBal : invCloseBal);
                                obj.put("c_amount_open", "");
                                obj.put("d_amount", (invCloseBal));
                                summaryJobj.put("d_amount", summaryJobj.has("d_amount") ? summaryJobj.getDouble("d_amount") + invCloseBal : invCloseBal);
                                obj.put("c_amount", "");
                            } else {
                                obj.put("c_amount_period", "");
                                obj.put("d_amount_period", "");
                                obj.put("d_period", 0.0);
                                obj.put("c_period", 0.0);
                                obj.put("periodbalance", 0.0);
                                obj.put("c_amount_open", (invCloseBal == 0.0) ? invCloseBal : -invCloseBal);
                                summaryJobj.put("c_amount_open", summaryJobj.has("c_amount_open") ? summaryJobj.getDouble("c_amount_open") - invCloseBal : (invCloseBal == 0.0) ? invCloseBal : -invCloseBal);
                                obj.put("d_amount_open", "");
                                obj.put("c_amount", (invCloseBal == 0.0) ? invCloseBal : -(invCloseBal));
                                summaryJobj.put("c_amount", summaryJobj.has("c_amount") ? summaryJobj.getDouble("c_amount") - (invCloseBal) : (invCloseBal == 0.0) ? invCloseBal : -(invCloseBal));
                                obj.put("d_amount", "");
                            }

                            obj.put("openingamount", invCloseBal);
                            obj.put("endingamount", (invCloseBal));

                            if (ytdinvCloseBal > 0) {
                                obj.put("ytd_d_amount_open", ytdinvCloseBal);
                                summaryJobj.put("ytd_d_amount_open", summaryJobj.has("ytd_d_amount_open") ? summaryJobj.getDouble("ytd_d_amount_open") + ytdinvCloseBal : ytdinvCloseBal);
                                obj.put("ytd_c_amount_open", "");
                                obj.put("ytd_d_amount", ytdinvCloseBal);
                                summaryJobj.put("ytd_d_amount", summaryJobj.has("ytd_d_amount") ? summaryJobj.getDouble("ytd_d_amount") + ytdinvCloseBal : ytdinvCloseBal);
                                obj.put("ytd_c_amount", "");
                            } else {
                                obj.put("ytd_c_amount_open", (ytdinvCloseBal == 0.0) ? ytdinvCloseBal : -ytdinvCloseBal);
                                summaryJobj.put("ytd_c_amount_open", summaryJobj.has("ytd_c_amount_open") ? summaryJobj.getDouble("ytd_c_amount_open") - ytdinvCloseBal : (ytdinvCloseBal == 0.0) ? ytdinvCloseBal : -ytdinvCloseBal);
                                obj.put("ytd_d_amount_open", "");
                                obj.put("ytd_c_amount", (ytdinvCloseBal == 0.0) ? ytdinvCloseBal : -ytdinvCloseBal);
                                summaryJobj.put("ytd_c_amount", summaryJobj.has("ytd_c_amount") ? summaryJobj.getDouble("ytd_c_amount") - ytdinvCloseBal : (ytdinvCloseBal == 0.0) ? ytdinvCloseBal : -ytdinvCloseBal);
                                obj.put("ytd_d_amount", "");
                            }
                            obj.put("accountid", "");
                            obj.put("accountname", Constants.OpeningStock); // Stock in hand
                            obj.put("leaf", true);
                            jArr.put(obj);
                        }
                    }
                }
            }

            excludedPreviousYearDate = new DateTime(excludedPreviousYearDate).minusDays(1).toDate();
            start = excludedPreviousYearDate;
            JSONObject profitLossobj = new JSONObject();

            double profitloss = calculateProfitLossForTrialBalance(request, startDate, endDate, start, isOpeningBalanceFlag, perpetualOrMRP);
            if (profitloss != 0) {
                netProfitAndLossAmount = profitloss;
                netProfitAndLossPeriodYTD = profitloss;

                profitLossName = "Accumulated Profit/Loss";
                profitLossId = "Accumulated Profit/Loss";
                profitLossCode = "Accumulated Profit/Loss";

                profitLossobj.put("accountname", profitLossName);  //"Net Loss");
                profitLossobj.put("accountid", profitLossId);
                profitLossobj.put("acccode", profitLossCode);
                profitLossobj.put("level", 0);
                profitLossobj.put("leaf", true);

                if (netProfitAndLossAmount > 0) {
                    profitLossobj.put("d_amount_open", netProfitAndLossAmount);
                    profitLossobj.put("c_amount_open", "");
                    summaryJobj.put("d_amount_open", summaryJobj.has("d_amount_open") ? summaryJobj.getDouble("d_amount_open") + netProfitAndLossAmount : netProfitAndLossAmount);
                } else {
                    profitLossobj.put("c_amount_open", (netProfitAndLossAmount == 0.0) ? netProfitAndLossAmount : -netProfitAndLossAmount);
                    profitLossobj.put("d_amount_open", "");
                    summaryJobj.put("c_amount_open", summaryJobj.has("c_amount_open") ? summaryJobj.getDouble("c_amount_open") - netProfitAndLossAmount : (netProfitAndLossAmount == 0.0) ? netProfitAndLossAmount : -netProfitAndLossAmount);
                }
                profitLossobj.put("openingamount", netProfitAndLossAmount);

                if (netProfitAndLossAmount > 0) {
                    profitLossobj.put("ytd_d_amount_open", netProfitAndLossAmount);
                    profitLossobj.put("ytd_c_amount_open", "");
                    summaryJobj.put("ytd_d_amount_open", summaryJobj.has("ytd_d_amount_open") ? summaryJobj.getDouble("ytd_d_amount_open") + netProfitAndLossAmount : netProfitAndLossAmount);
                } else {
                    profitLossobj.put("ytd_c_amount_open", (netProfitAndLossAmount == 0.0) ? netProfitAndLossAmount : -netProfitAndLossAmount);
                    profitLossobj.put("ytd_d_amount_open", "");
                    summaryJobj.put("ytd_c_amount_open", summaryJobj.has("ytd_c_amount_open") ? summaryJobj.getDouble("ytd_c_amount_open") - netProfitAndLossAmount : (netProfitAndLossAmount == 0.0) ? netProfitAndLossAmount : -netProfitAndLossAmount);
                }

                if (netProfitLossPeriod > 0) {
                    profitLossobj.put("d_amount_period", netProfitLossPeriod);
                    profitLossobj.put("c_amount_period", "");
                    summaryJobj.put("d_amount_period", summaryJobj.has("d_amount_period") ? summaryJobj.getDouble("d_amount_period") + netProfitLossPeriod : +netProfitLossPeriod);
                } else {
                    profitLossobj.put("c_amount_period", (netProfitLossPeriod == 0.0) ? netProfitLossPeriod : -netProfitLossPeriod);
                    profitLossobj.put("d_amount_period", "");
                    summaryJobj.put("c_amount_period", summaryJobj.has("c_amount_period") ? summaryJobj.getDouble("c_amount_period") - netProfitLossPeriod : (netProfitLossPeriod == 0.0) ? netProfitLossPeriod : -netProfitLossPeriod);
                }
                if (netProfitLossPeriod > 0) {
                    profitLossobj.put("ytd_d_amount_period", netProfitLossPeriod);
                    profitLossobj.put("ytd_c_amount_period", "");
                    summaryJobj.put("ytd_d_amount_period", summaryJobj.has("ytd_d_amount_period") ? summaryJobj.getDouble("ytd_d_amount_period") + netProfitLossPeriod : +netProfitLossPeriod);
                } else {
                    profitLossobj.put("ytd_c_amount_period", (netProfitLossPeriod == 0.0) ? netProfitLossPeriod : -netProfitLossPeriod);
                    profitLossobj.put("ytd_d_amount_period", "");
                    summaryJobj.put("ytd_c_amount_period", summaryJobj.has("ytd_c_amount_period") ? summaryJobj.getDouble("ytd_c_amount_period") - netProfitLossPeriod : (netProfitLossPeriod == 0.0) ? netProfitLossPeriod : -netProfitLossPeriod);
                }
                if ((netProfitLossPeriod + netProfitAndLossAmount) > 0) {
                    profitLossobj.put("d_amount", netProfitLossPeriod + netProfitAndLossAmount);
                    profitLossobj.put("c_amount", "");
                    summaryJobj.put("d_amount", summaryJobj.has("d_amount") ? summaryJobj.getDouble("d_amount") + netProfitLossPeriod + netProfitAndLossAmount : netProfitLossPeriod + netProfitAndLossAmount);
                } else {
                    profitLossobj.put("c_amount", ((netProfitLossPeriod + netProfitAndLossAmount) == 0.0) ? (netProfitLossPeriod + netProfitAndLossAmount) : -(netProfitLossPeriod + netProfitAndLossAmount));
                    profitLossobj.put("d_amount", "");
                    summaryJobj.put("c_amount", summaryJobj.has("c_amount") ? summaryJobj.getDouble("c_amount") - (netProfitLossPeriod + netProfitAndLossAmount) : -(netProfitLossPeriod + netProfitAndLossAmount));
                }
                if ((netProfitLossPeriod + netProfitAndLossAmount) > 0) {
                    profitLossobj.put("ytd_d_amount", netProfitLossPeriod + netProfitAndLossAmount);
                    profitLossobj.put("ytd_c_amount", "");
                    summaryJobj.put("ytd_d_amount", summaryJobj.has("ytd_d_amount") ? summaryJobj.getDouble("ytd_d_amount") + netProfitLossPeriod + netProfitAndLossAmount : netProfitLossPeriod + netProfitAndLossAmount);
                } else {
                    profitLossobj.put("ytd_c_amount", ((netProfitLossPeriod + netProfitAndLossAmount) == 0.0) ? (netProfitLossPeriod + netProfitAndLossAmount) : -(netProfitLossPeriod + netProfitAndLossAmount));
                    profitLossobj.put("ytd_d_amount", "");
                    summaryJobj.put("ytd_c_amount", summaryJobj.has("ytd_c_amount") ? summaryJobj.getDouble("ytd_c_amount") - (netProfitLossPeriod + netProfitAndLossAmount) : -(netProfitLossPeriod + netProfitAndLossAmount));
                }
                profitLossobj.put("endingamount", netProfitLossPeriod + netProfitAndLossAmount);

                profitLossobj.put("d_period", 0.0);
                profitLossobj.put("c_period", 0.0);
                profitLossobj.put("periodbalance", 0.0);
                jArr.put(profitLossobj);
            }
            double totalOpeningAmount = summaryJobj.optDouble("d_amount_open", 0) - summaryJobj.optDouble("c_amount_open", 0);
            double totalEndingAmount = summaryJobj.optDouble("d_amount", 0) - summaryJobj.optDouble("c_amount", 0);
            summaryJobj.put("openingamount", totalOpeningAmount);
            summaryJobj.put("endingamount", totalEndingAmount);

            summaryJobj.put("accountname", "Total");
            summaryJobj.put("acccode", "Total");
            summaryJobj.put("issummaryvalue", true);
            summaryJobj.put("level", 0);
            summaryJobj.put("leaf", true);
            if (!isExport) {
                jArr.put(summaryJobj);// summaryJobj is used for showing total amount of each column as a last record in the grid.
            }
            jobj.put(Constants.RES_data, jArr);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getTrialBalance : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getTrialBalance : " + ex.getMessage(), ex);
        }
        return jobj;
    }
}
