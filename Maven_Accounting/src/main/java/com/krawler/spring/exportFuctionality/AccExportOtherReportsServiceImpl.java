package com.krawler.spring.exportFuctionality;

import com.krawler.common.admin.*;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.handlers.FileUploadHandler;
import com.krawler.esp.handlers.StorageHandler;
import com.krawler.hql.accounting.*;
import com.krawler.spring.accounting.account.accAccountDAO;
import com.krawler.spring.accounting.account.accCusVenMapDAO;
import com.krawler.spring.accounting.companypreferances.accCompanyPreferencesDAO;
import com.krawler.spring.accounting.costCenter.AccCostCenterDAO;
import com.krawler.spring.accounting.creditnote.accCreditNoteDAO;
import com.krawler.spring.accounting.currency.accCurrencyDAO;
import com.krawler.spring.accounting.customDesign.CustomDesignDAO;
import com.krawler.spring.accounting.customer.accCustomerDAO;
import com.krawler.spring.accounting.debitnote.accDebitNoteDAO;
import com.krawler.spring.accounting.discount.accDiscountDAO;
import com.krawler.spring.accounting.goodsreceipt.AccGoodsReceiptServiceDAO;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptController;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptDAO;
import com.krawler.spring.accounting.handler.*;
import com.krawler.spring.accounting.invoice.*;
import com.krawler.spring.accounting.product.productHandler;
import com.krawler.spring.accounting.jasperreports.*;
import com.krawler.spring.accounting.journalentry.accJournalEntryDAO;
import com.krawler.spring.accounting.product.accProductDAO;
import com.krawler.spring.accounting.purchaseorder.AccPurchaseOrderServiceDAO;
import com.krawler.spring.accounting.purchaseorder.accPurchaseOrderDAO;
import com.krawler.spring.accounting.receipt.accReceiptDAO;
import com.krawler.spring.accounting.salesorder.accSalesOrderDAO;
import com.krawler.spring.accounting.tax.accTaxDAO;
import com.krawler.spring.accounting.term.accTermDAO;
import com.krawler.spring.accounting.vendorpayment.AccVendorPaymentServiceDAO;
import com.krawler.spring.accounting.vendorpayment.accVendorPaymentDAO;
import com.krawler.spring.auditTrailModule.auditTrailDAO;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.authHandler.authHandlerDAO;
import com.krawler.spring.common.AccCommonTablesDAO;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.common.kwlCommonTablesDAO;
import com.krawler.spring.exportFunctionality.exportMPXDAOImpl;
import com.krawler.spring.sessionHandler.sessionHandlerImpl;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import com.lowagie.text.Phrase;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import org.springframework.context.MessageSource;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLDecoder;
import java.text.*;
import java.util.Map.Entry;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import org.apache.velocity.app.VelocityEngine;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import com.krawler.spring.accounting.goodsreceipt.*;
import com.krawler.spring.accounting.receipt.AccReceiptServiceDAO;
import com.krawler.spring.accounting.salesorder.AccSalesOrderServiceDAO;
 
import java.io.*;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
/**
 *
 * @author krawler
 */
public class AccExportOtherReportsServiceImpl implements AccExportReportsServiceDAO {

    private HibernateTransactionManager txnManager;
    private accInvoiceDAO accInvoiceDAOobj;
    private AccExportReportsServiceDAO accExportReportsServiceDAOobj;
    private AccInvoiceServiceDAO accInvoiceServiceDAO;
    private AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAO;
    private accCreditNoteDAO accCreditNoteDAOobj;
    private accReceiptDAO accReceiptDAOobj;
    private accJournalEntryDAO accJournalEntryobj;
    private accProductDAO accProductObj;
    private accDiscountDAO accDiscountobj;
    private accCurrencyDAO accCurrencyDAOobj;
    private accCustomerDAO accCustomerDAOobj;
    private accTaxDAO accTaxObj;
    private AccCostCenterDAO accCostCenterObj;
    private AccountingHandlerDAO accountingHandlerDAOobj;
    private exportMPXDAOImpl exportDaoObj;
    private String successView;
    private kwlCommonTablesDAO kwlCommonTablesDAOObj;
    private accInvoiceCMN accInvoiceCommon;
    private MessageSource messageSource;
    private accAccountDAO accAccountDAOobj;
    private authHandlerDAO authHandlerDAOObj;
    private CustomDesignDAO customDesignDAOObj;
    private VelocityEngine velocityEngine;
    private CommonEnglishNumberToWords EnglishNumberToWordsOjb = new CommonEnglishNumberToWords();
    private accCompanyPreferencesDAO accCompanyPreferencesObj;
    private auditTrailDAO auditTrailObj;
    private accDebitNoteDAO accDebitNoteobj;
    private accCusVenMapDAO accCusVenMapDAOObj;
    private accSalesOrderDAO accSalesOrderDAOobj;
    private AccCommonTablesDAO accCommonTablesDAO;
    private accVendorPaymentDAO accVendorPaymentDAO;
    private accPurchaseOrderDAO accPurchaseOrderobj;
    private AccPurchaseOrderServiceDAO accPurchaseOrderServiceDAOobj;
    private accGoodsReceiptDAO accGoodsReceiptobj;
    private accTermDAO accTermObj;
    private AccVendorPaymentServiceDAO accVendorPaymentServiceDAOobj;
    private AccReceiptServiceDAO accReceiptServiceDAOobj;
    private AccSalesOrderServiceDAO accSalesOrderServiceDAOobj;
    private accGoodsReceiptCMN accGoodsReceiptCommon;
    private AccGoodsReceiptServiceHandler accGoodsReceiptServiceHandler;
    
    public void setAccGoodsReceiptServiceHandler(AccGoodsReceiptServiceHandler accGoodsReceiptServiceHandler) {
        this.accGoodsReceiptServiceHandler = accGoodsReceiptServiceHandler;
    }

    public void setaccGoodsReceiptCMN(accGoodsReceiptCMN accGoodsReceiptCommon) {
        this.accGoodsReceiptCommon = accGoodsReceiptCommon;
    }
    
    public void setaccSalesOrderServiceDAO(AccSalesOrderServiceDAO accSalesOrderServiceDAOobj) {
        this.accSalesOrderServiceDAOobj = accSalesOrderServiceDAOobj;
    }
    
    public void setaccPurchaseOrderDAO(accPurchaseOrderDAO accPurchaseOrderobj) {
        this.accPurchaseOrderobj = accPurchaseOrderobj;
    }

    public void setAccVendorPaymentDAO(accVendorPaymentDAO accVendorPaymentDAO) {
        this.accVendorPaymentDAO = accVendorPaymentDAO;
    }

    public void setaccSalesOrderDAO(accSalesOrderDAO accSalesOrderDAOobj) {
        this.accSalesOrderDAOobj = accSalesOrderDAOobj;
    }

    public void setaccExportReportsServiceDAO(AccExportReportsServiceDAO accExportReportsServiceDAOobj) {
        this.accExportReportsServiceDAOobj = accExportReportsServiceDAOobj;
    }

    public void setaccInvoiceServiceDAO(AccInvoiceServiceDAO accInvoiceServiceDAO) {
        this.accInvoiceServiceDAO = accInvoiceServiceDAO;
    }

    public void setaccGoodsReceiptServiceDAO(AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAO) {
        this.accGoodsReceiptServiceDAO = accGoodsReceiptServiceDAO;
    }

    public void setAccCusVenMapDAOObj(accCusVenMapDAO accCusVenMapDAOObj) {
        this.accCusVenMapDAOObj = accCusVenMapDAOObj;
    }

    public void setaccDebitNoteDAO(accDebitNoteDAO accDebitNoteobj) {
        this.accDebitNoteobj = accDebitNoteobj;
    }

    public void setauditTrailDAO(auditTrailDAO auditTrailDAOObj) {
        this.auditTrailObj = auditTrailDAOObj;
    }

    public void setaccAccountDAO(accAccountDAO accAccountDAOobj) {
        this.accAccountDAOobj = accAccountDAOobj;
    }

    public void setcustomDesignDAO(CustomDesignDAO customDesignDAOObj) {
        this.customDesignDAOObj = customDesignDAOObj;
    }

    public void setaccTermDAO(accTermDAO accTermObj) {
        this.accTermObj = accTermObj;
    }

    public void setvelocityEngine(VelocityEngine velocityEngine) {
        this.velocityEngine = velocityEngine;
    }

    @Override
    public void setMessageSource(MessageSource ms) {
        this.messageSource = ms;
    }

    public void setkwlCommonTablesDAO(kwlCommonTablesDAO kwlCommonTablesDAOObj1) {
        this.kwlCommonTablesDAOObj = kwlCommonTablesDAOObj1;
    }

    public void setTxnManager(HibernateTransactionManager txManager) {
        this.txnManager = txManager;
    }

    public void setaccInvoiceDAO(accInvoiceDAO accInvoiceDAOobj) {
        this.accInvoiceDAOobj = accInvoiceDAOobj;
    }

    public void setaccCreditNoteDAO(accCreditNoteDAO accCreditNoteDAOobj) {
        this.accCreditNoteDAOobj = accCreditNoteDAOobj;
    }

    public void setaccReceiptDAO(accReceiptDAO accReceiptDAOobj) {
        this.accReceiptDAOobj = accReceiptDAOobj;
    }

    public void setaccJournalEntryDAO(accJournalEntryDAO accJournalEntryobj) {
        this.accJournalEntryobj = accJournalEntryobj;
    }

    public void setaccProductDAO(accProductDAO accProductObj) {
        this.accProductObj = accProductObj;
    }

    public void setaccDiscountDAO(accDiscountDAO accDiscountobj) {
        this.accDiscountobj = accDiscountobj;
    }

    public void setaccCurrencyDAO(accCurrencyDAO accCurrencyDAOobj) {
        this.accCurrencyDAOobj = accCurrencyDAOobj;
    }

    public void setaccCustomerDAO(accCustomerDAO accCustomerDAOobj) {
        this.accCustomerDAOobj = accCustomerDAOobj;
    }

    public void setaccTaxDAO(accTaxDAO accTaxObj) {
        this.accTaxObj = accTaxObj;
    }

    public void setaccountingHandlerDAO(AccountingHandlerDAO AccountingHandlerDAOobj) {
        this.accountingHandlerDAOobj = AccountingHandlerDAOobj;
    }

    public void setexportMPXDAOImpl(exportMPXDAOImpl exportDaoObj) {
        this.exportDaoObj = exportDaoObj;
    }

    public String getSuccessView() {
        return successView;
    }

    public void setSuccessView(String successView) {
        this.successView = successView;
    }

    public void setAccInvoiceCommon(accInvoiceCMN accInvoiceCommon) {
        this.accInvoiceCommon = accInvoiceCommon;
    }

    public void setaccCostCenterDAO(AccCostCenterDAO accCostCenterDAOObj) {
        this.accCostCenterObj = accCostCenterDAOObj;
    }

    public void setAuthHandlerDAOObj(authHandlerDAO authHandlerDAOObj) {
        this.authHandlerDAOObj = authHandlerDAOObj;
    }

    public void setaccCompanyPreferencesDAO(accCompanyPreferencesDAO accCompanyPreferencesObj) {
        this.accCompanyPreferencesObj = accCompanyPreferencesObj;
    }

    public void setaccCommonTablesDAO(AccCommonTablesDAO accCommonTablesDAO) {
        this.accCommonTablesDAO = accCommonTablesDAO;
    }

    public void setaccPurchaseOrderServiceDAO(AccPurchaseOrderServiceDAO accPurchaseOrderServiceDAOobj) {
        this.accPurchaseOrderServiceDAOobj = accPurchaseOrderServiceDAOobj;
    }

    public void setaccGoodsReceiptDAO(accGoodsReceiptDAO accGoodsReceiptobj) {
        this.accGoodsReceiptobj = accGoodsReceiptobj;
    }
    public void setaccVendorPaymentServiceDAO(AccVendorPaymentServiceDAO accVendorPaymentServiceDAOobj) {
        this.accVendorPaymentServiceDAOobj = accVendorPaymentServiceDAOobj;
    }
    public void setAccReceiptServiceDAO(AccReceiptServiceDAO accReceiptServiceDAOobj) {
        this.accReceiptServiceDAOobj = accReceiptServiceDAOobj;
    }

    @Override
    public List<Object> exportSalesContractreport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                JSONArray DataJArr = new JSONArray();
                Map<String, Object> salescontactMap = new HashMap<String, Object>();
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                HashMap<String, String> customFieldMap = new HashMap<String, String>();
                HashMap<String, String> customDateFieldMap = new HashMap<String, String>();

                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Contract_Order_ModuleId));

                HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);


                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                DateFormat df1 = new SimpleDateFormat("dd MMMM yyyy");
                DateFormat df2 = new SimpleDateFormat("MMMM yyyy");
                DateFormat df3 = new SimpleDateFormat("EEEE, dd MMM yyyy");
                DecimalFormat quantityFormat = new DecimalFormat("0");
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));
                SalesContract salesContract = new SalesContract();
                ArrayList<SalesContract> salesContractlist = new ArrayList<SalesContract>();
                ArrayList<TaxInvoiceSubReport> subReportList = new ArrayList<TaxInvoiceSubReport>();
                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String invno = "";
                    String entryDate = null;
                    String custname = "";
                    String contactPerson = "";
                    String tel = "";
                    String fax = "";
                    String address = "";
                    String contractno = "";
                    String revisionDate = "";
                    String refNo = "";
                    String paymentTerms = "";
                    String shippmentTerms = "";
                    String shippmentPeriod = "";
                    String remarks = "";
                    String specification = "";
                    double contractamount = 0;
                    String deliveryDate = "";
                    String pono = "";
                    String terms = "";
                    boolean isSalesContract=true; // isSalesContract=true: "Sales Contract" , isSalesContract=false: "Lease Contract"




                    result = accountingHandlerDAOobj.getObject(Contract.class.getName(), billid);
                    Contract contract = (Contract) result.getEntityList().get(0);
                    KWLCurrency currency = null;
                    if (contract.getCurrency() != null) {
                        currency = contract.getCurrency();
                    }
                    
                    CustomerAddressDetails customerAddressDetail = null;
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, companyid);
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true); //true to get billing address
                    addressParams.put("customerid", contract.getCustomer().getID());
                    customerAddressDetail = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    
                    custname = StringUtil.isNullOrEmpty(contract.getCustomer().getName()) ? "" : contract.getCustomer().getName();
                    contactPerson = StringUtil.isNullOrEmpty(contract.getContactPerson()) ? "" : contract.getContactPerson();
                    
                    fax = (customerAddressDetail!=null && !StringUtil.isNullOrEmpty(customerAddressDetail.getFax())) ? customerAddressDetail.getFax():"";
                    //tel = (contract.getCustomer().getCustomerAddresses() == null) ? (StringUtil.isNullOrEmpty(contract.getCustomer().getContactNumber()) ? "" : contract.getCustomer().getContactNumber()) : (StringUtil.isNullOrEmpty(contract.getCustomer().getCustomerAddresses().getBillingPhone1()) ? "" : contract.getCustomer().getCustomerAddresses().getBillingPhone1());
                    tel = (customerAddressDetail!=null && !StringUtil.isNullOrEmpty(customerAddressDetail.getPhone())) ? customerAddressDetail.getPhone():"";
                    //address = accCustomerHandler.getCustomerAddressForSenwanTec(contract.getCustomer(), true);
                    address = accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams);
                    
                    contractno = StringUtil.isNullOrEmpty(contract.getContractNumber()) ? "" : contract.getContractNumber();
                    contractamount = contract.getAmount();
                 
                    String term = "";
                    switch (Integer.parseInt(contract.getTermType())) {
                        case 1:
                            term = " Day";
                            break;
                        case 2:
                            term = " Week";
                            break;
                        case 3:
                            term = " Month";
                            break;
                        case 4:
                            term = " Year";

                    }
                    paymentTerms = contract.getTermValue() + term;
                    entryDate = df3.format(contract.getOrderDate());
                    String sdate = "";
                    String edate = "";
                    KwlReturnObject contractendate = accSalesOrderDAOobj.getContractStrtendDates(contract.getID());
                    List lst = contractendate.getEntityList();
                    Iterator iter = lst.iterator();

                    while (iter.hasNext()) {
                        Object[] row = (Object[]) iter.next();
                        sdate = row[0] != null ? df2.format(row[0]) : "";
                        edate = row[1] != null ? df2.format(row[1]) : "";
                    }
                    shippmentPeriod = sdate + " -" + edate;
                    revisionDate = df.format(contract.getUpdatedon());

                    remarks = StringUtil.isNullOrEmpty(contract.getMemo()) ? "" : contract.getMemo();



                    salesContract.setCustname(custname);
                    salesContract.setAddress(address);
                    salesContract.setContactPerson(contactPerson);
                    salesContract.setCustomerTel(tel);
                    salesContract.setCustomerFax(fax);
                    salesContract.setDate(entryDate);
                    salesContract.setPaymentTerms(paymentTerms);
                    salesContract.setInvoiceNo(contractno);//set as Sales contract no



                    HashMap<String, Object> contaractRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("contract.ID");
                    filter_params.add(billid);
                    filter_names.add("company.companyID");
                    filter_params.add(companyid);
                    order_by.add("srno");
                    order_type.add("asc");
                    contaractRequestParams.put("filter_names", filter_names);
                    contaractRequestParams.put("filter_params", filter_params);
                    contaractRequestParams.put("order_by", order_by);
                    contaractRequestParams.put("order_type", order_type);
                    KwlReturnObject codresult = accSalesOrderDAOobj.getContractOrderDetails(contaractRequestParams);
                    Iterator itr = codresult.getEntityList().iterator();
                    double total = 0;
                    int i = 0;
                    while (itr.hasNext()) {
                        i++;
                        String code = "";
                        String desc = "";
                        String name = "";
                        double quantity = 0;
                        double rate = 0,productamount=0,discountpercent=0;
                        String currencyperunit = "";
                        TaxInvoiceSubReport contracttable = new TaxInvoiceSubReport();
                        ContractDetail row = (ContractDetail) itr.next();
                        JSONObject obj = new JSONObject();
                        contracttable.setsNo(i + "");
                        code = (row.getProduct() != null) ? row.getProduct().getProductid() : "";
                        contracttable.setCode(code);
                        name = (row.getProduct() != null) ? row.getProduct().getName() : "";
                        contracttable.setName(name);
                        String uom = row.getUom() != null ? row.getUom().getNameEmptyforNA() : row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                        quantity = row.getQuantity();
                        if(templateflag == Constants.Guan_ChongBF_templateflag){
                        contracttable.setQty(authHandler.formattedQuantity(quantity, companyid) + " " + uom);
                        }else {
                         contracttable.setQty(authHandler.formattedQuantity(quantity, companyid));
                         contracttable.setUom(uom);
                         desc=StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription();
                        }
                        contracttable.setuPrice(authHandler.formattedCommaSeparatedUnitPrice(row.getRate(), companyid));
                        currencyperunit = (currency != null) ? "(" + currency.getSymbol() + "/" + uom + ")" : "";
                        contracttable.setAmountCurrency(currencyperunit);
                        rate=row.getRate();
                        productamount=rate * quantity;
                        contracttable.setProductAmount(authHandler.formattedCommaSeparatedUnitPrice(productamount, companyid));
                        double rowTaxPercent = 0;
                        double rowTaxAmount = 0;
                        if (row.getTax() != null) {
//                            percent = CompanyHandler.getTaxPercent(session, request, invoice.getJournalEntry().getEntryDate(), invoice.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, row.getContract().getOrderDate(), row.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);

                            rowTaxAmount = row.getRowTaxAmount();

                        }
                        double tempAmount = row.getRate() * row.getQuantity();
                      //  double amount = 0;
                        if (row.getDiscountispercent() == 0) {
                            discountpercent = 0;
                            productamount = tempAmount - row.getDiscount();//Flat
                        } else {
                            discountpercent = row.getDiscount();
                            productamount = tempAmount - (tempAmount * (row.getDiscount() / 100));//Percentage Value
                        }
                        HashMap<String, Object> fieldrequestParamsProduct = new HashMap();
                        Map<String, Object> variableMapProduct = new HashMap<String, Object>();
                        fieldrequestParamsProduct.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                        fieldrequestParamsProduct.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Product_Master_ModuleId, 0));
                        HashMap<String, String> replaceFieldMapProduct = new HashMap<String, String>();
                        HashMap<String, Integer> FieldMapProduct = accAccountDAOobj.getFieldParamsMap(fieldrequestParamsProduct, replaceFieldMapProduct);
                        KwlReturnObject resultProduct = accountingHandlerDAOobj.getObject(AccProductCustomData.class.getName(), row.getProduct().getID());
                        AccProductCustomData objProduct = (AccProductCustomData) resultProduct.getEntityList().get(0);
                        if (objProduct != null) {
                            productHandler.setCustomColumnValuesForProduct(objProduct, FieldMapProduct, replaceFieldMapProduct, variableMapProduct);
                            for (Map.Entry<String, Object> varEntry : variableMapProduct.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("PACKAGING")) {
                                        desc = coldata;
                                    }
//                                 
                                }
                            }
                        }
                        contracttable.setCostome(discountpercent>0?discountpercent+" %":"");
                        contracttable.setProductAmount(authHandler.formattedCommaSeparatedUnitPrice((productamount-rowTaxAmount), companyid));
                        contracttable.setProductDescription(desc);
                        subReportList.add(contracttable);
                        if(row.getContract()!=null && !row.getContract().isNormalContract()){
                            isSalesContract=false; // Lease Contract
                        }
                    }
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    ContractCustomData contractCustom = (ContractCustomData) contract.getContractCustomData();
                    replaceFieldMap = new HashMap<String, String>();
                    if (contractCustom != null) {
                        AccountingManager.setCustomColumnValues(contractCustom, FieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {

                            String coldata = varEntry.getValue().toString();
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                if ((varEntry.getKey().split("_")[1]).equals("SHIPMENT TERM")) {
                                    shippmentTerms = coldata;
                                }

                                if ((varEntry.getKey().split("_")[1]).equals("SHIPMENT PERIOD")) {
                                    shippmentPeriod = coldata;
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("SPECIFICATION")) {
                                    specification = coldata;
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("Your Ref No")) {
                                    refNo = coldata;
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("Ref No")) {//GCBF
                                    refNo = coldata;
                                }
                                 if ((varEntry.getKey().split("_")[1]).equals("P/O No")) {//GCBF
                                    pono = coldata;
                                }
                                  if ((varEntry.getKey().split("_")[1]).equals("Terms")) { //GCBF

                                    terms = coldata;
                                }
                                  if ((varEntry.getKey().split("_")[1]).equals("Delivery Date")) { //GCBF

                                    deliveryDate = coldata;
                                }

                            }
                        }
                    }
                    salesContract.setRefno(refNo);
                    salesContract.setShippmentPeriod(shippmentPeriod);
                    if (isSalesContract) { // Sales Contract
                        salesContract.setContractName("Sales Contract");
                        salesContract.setContractNoLbl("Our Sales Contract No.");
                    } else { // Lease Contract
                        salesContract.setContractName("Lease Contract");
                        salesContract.setContractNoLbl("Our Lease Contract No.");
                    }
                    salesContractlist.add(salesContract);
                    salescontactMap.put("SubReportData", new JRBeanCollectionDataSource(subReportList));
                    salescontactMap.put("format", "pdf");
                    salescontactMap.put("shipmentTerms", shippmentTerms);
                    salescontactMap.put("specification", specification);
                    salescontactMap.put("remarks", remarks);
                    if (templateflag == Constants.Guan_Chong_templateflag)//comp
                    {
                        salescontactMap.put("companyname", company.getCompanyName().toUpperCase());
                        salescontactMap.put("companyaddress", "");
                        salescontactMap.put("note1","PLEASE DULY SIGN AND RETURN THE COPY OF THIS CONFIRMATION .PLEASE NOTE THAT THIS CONTRACT IS AUTOMATICALLY TERMINATED UPON DELAY");
                        salescontactMap.put("note2","SHIPMENT OF 2MONTHS FROM THE INDICATED CONTRACT SHIPPING PERIOD ,UNLESS OTHERWISE REARRANGED FROM GCB SPECIALTY CHOCOLATES SDN BHD");
                    }else 
                        if(templateflag == Constants.Guan_ChongBF_templateflag){//GCBF
                            
                         int countryLanguageId = Constants.OtherCountryLanguageId; //0
                         KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(),companyid);
                         ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                         if(extraCompanyPreferences.isAmountInIndianWord()){
                             countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
                         }
                         
                         salescontactMap.put("companyname",company.getCompanyName().toUpperCase());
                         salescontactMap.put("Total",authHandler.formattedAmount(contractamount, companyid));
                         salescontactMap.put("Currency",currency.getSymbol());
                         salescontactMap.put("amountInCurrency",(EnglishNumberToWordsOjb.convert(contractamount, currency,countryLanguageId) + " only.").toUpperCase());
                         salescontactMap.put("currencynameinwords",currency.getName().toUpperCase());
                         if(!StringUtil.isNullOrEmpty(deliveryDate)){
                                 Date dt = new Date(Long.parseLong(deliveryDate));
                                 salescontactMap.put("DeliveryDate","ETA"+df1.format(dt));
                                 }
                         salescontactMap.put("terms",terms);
                         salescontactMap.put("pono",pono);
                         salescontactMap.put("date",df.format(contract.getCreatedon()));
                    } else {// default company name and address for deoult template
                        salescontactMap.put("companyname1", company.getCompanyName().toUpperCase());
                        salescontactMap.put("companyname", company.getCompanyName().toUpperCase());
                        salescontactMap.put("companyaddress", CommonFunctions.getCompanyAddress(company));
                        salescontactMap.put("note1","");
                        salescontactMap.put("note2","");
                    }
                    if (isSalesContract) { // Sales Contract
                        response.setHeader("Content-Disposition", "attachment;filename=" + "SalesContract_v1.pdf");
                    } else { // Lease Contract 
                        response.setHeader("Content-Disposition", "attachment;filename=" + "LeaseContract_v1.pdf");
                    }
                    try {
                        InputStream inputStream = null;
                        if (templateflag == Constants.Guan_ChongBF_templateflag) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GCBFSalesContract.jrxml");
                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GCBSalesContract.jrxml");
                        }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);

                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(salesContractlist);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, salescontactMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                } catch (ServiceException ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }
    
    @Override
    public List<Object> exportGuanChongProformaInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                JSONArray DataJArr = new JSONArray();
                Map<String, Object> salescontactMap = new HashMap<String, Object>();
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                HashMap<String, String> customFieldMap = new HashMap<String, String>();
                HashMap<String, String> customDateFieldMap = new HashMap<String, String>();

                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Customer_Quotation_ModuleId));

                HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                DateFormat df1 = new SimpleDateFormat("dd MMMM,yyyy");
                DateFormat df2 = new SimpleDateFormat("MMMM yyyy");
                DateFormat df3 = new SimpleDateFormat("EEEE,dd MMM,yyyy");
                DecimalFormat quantityFormat = new DecimalFormat("0");
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));
                SalesContract quote = new SalesContract();
                ArrayList<SalesContract> quotationList = new ArrayList<SalesContract>();
                ArrayList<TaxInvoiceSubReport> subReportList = new ArrayList<TaxInvoiceSubReport>();
                try {
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String invno = "";
                    String entryDate = null;
                    String custname = "";
                    String contactPerson = "";
                    String tel = "";
                    String fax = "";
                    String address = "";
                    String contractno = "";
                    String revisionDate = "";
                    String refNo = "";
                    String paymentTerms = "";
                    String shippmentTerms = "";
                    String shippmentPeriod = "";
                    String shipFrom = "";
                    String shipTo = "";
                    String remarks = "";
                    String specification = "";

                    double amount = 0;
                    double subtotal = 0;
                    double gst = 0;
                    double totalDiscount = 0;
                    double amountinbase = 0;
                    double ordertaxamount = 0;
                    double rowTaxAmountTotal = 0;
                    double orderAmount = 0;
                    double taxPercent = 0;

                    result = accountingHandlerDAOobj.getObject(Quotation.class.getName(), billid);
                    Quotation quotation = (Quotation) result.getEntityList().get(0);
                    KWLCurrency currency = null;
                    if (quotation.getCurrency() != null) {
                        currency = quotation.getCurrency();
                    }
                    invno = quotation.getQuotationNumber();
                    contractno = quotation.getContract() == null ? "" : quotation.getContract().getContractNumber();
                    custname = quotation.getCustomer() == null ? "" : quotation.getCustomer().getName() == null ? "" : quotation.getCustomer().getName();
                    contactPerson = quotation.getBillingShippingAddresses() == null ? "" : quotation.getBillingShippingAddresses().getBillingContactPerson() == null ? "" : quotation.getBillingShippingAddresses().getBillingContactPerson();
                    fax = quotation.getBillingShippingAddresses() == null ? "" : quotation.getBillingShippingAddresses().getBillingFax() == null ? "" : quotation.getBillingShippingAddresses().getBillingFax();
                    tel = quotation.getBillingShippingAddresses() == null ? "" : quotation.getBillingShippingAddresses().getBillingPhone() == null ? "" : quotation.getBillingShippingAddresses().getBillingPhone();
                    
                    addressParams.put("isBillingAddress", true); //true to get billing address
                    addressParams.put("customerid", quotation.getCustomer().getID());
                    address = accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams);
                    
                    paymentTerms = quotation.getCustomer() == null ? "" : quotation.getCustomer().getCreditTerm() == null ? "" : quotation.getCustomer().getCreditTerm().getTermdays() + " Days";
                    entryDate = df3.format(quotation.getCreatedon());
                    remarks = quotation.getMemo() == null ? "" : quotation.getMemo();
                    shipTo = quotation.getShipTo() == null ? "" : quotation.getShipTo();
                    quote.setCustname(custname);
                    quote.setAddress(address);
                    quote.setContactPerson(contactPerson);
                    quote.setCustomerTel(tel);
                    quote.setCustomerFax(fax);
                    quote.setDate(entryDate);
                    quote.setPaymentTerms(paymentTerms);
                    quote.setInvoiceNo(invno);
                    quote.setShipTo(shipTo);

                    KwlReturnObject idresult = null;
                    HashMap<String, Object> quotationRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("quotation.ID");
                    filter_params.add(billid);
                    filter_names.add("company.companyID");
                    filter_params.add(companyid);
                    order_by.add("srno");
                    order_type.add("asc");
                    quotationRequestParams.put("filter_names", filter_names);
                    quotationRequestParams.put("filter_params", filter_params);
                    quotationRequestParams.put("order_by", order_by);
                    quotationRequestParams.put("order_type", order_type);
                    idresult = accInvoiceDAOobj.getQuotationDetails(quotationRequestParams);
                    Iterator itr = idresult.getEntityList().iterator();
                    double total = 0;
                    int i = 0;
                    while (itr.hasNext()) {
                        i++;
                        String desc = "";
                        TaxInvoiceSubReport table = new TaxInvoiceSubReport();
                        String prodName = "";
                        String prodDesc = "";
                        String partNo = "";
                        Phrase phrase1 = new Phrase();
                        Phrase phrase2 = new Phrase();
                        double quantity = 0, discountQuotation = 0, discountOrder = 0, baseUomQuantity = 0;
                        double rate = 0;
                        double discount = 0;
                        String uom = "";
                        double amount1 = 0;
                        QuotationDetail row = (QuotationDetail) itr.next();
                        if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                            prodDesc = row.getDescription();
                        } else {
                            if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                prodDesc = row.getProduct().getDescription();
                            }
                        }
                        String prodCode = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                        prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        quantity = row.getQuantity();
                        baseUomQuantity = row.getBaseuomquantity();

                        rate = row.getRate();
                        discount = row.getDiscount();
                        uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();

                        double quotationPrice = authHandler.round(rate * quantity,companyid);
                        if (row.getDiscountispercent() == 1) {
                            amount1 = (quotationPrice) - (quotationPrice * row.getDiscount() / 100);
                        } else {
                            amount1 = quotationPrice - row.getDiscount();
                        }

                        table.setProductDescription(prodDesc.replaceAll("\n", "<br>"));
                        table.setCode(prodCode);
                        table.setsNo(Integer.toString(i));
                        table.setQty(authHandler.formattedQuantity(quantity, companyid));
                        table.setAmountCurrency(currency.getCurrencyCode() != null ? currency.getCurrencyCode() : "");
                        table.setuPrice(authHandler.formattedCommaSeparatedUnitPrice(rate, companyid));
                        table.setProductAmount(authHandler.formattedCommaSeparatedAmount(amount1, companyid));
                        table.setUom(uom);

                        subReportList.add(table);
                        amount += amount1;
                        rowTaxAmountTotal += row.getRowTaxAmount();
                    }

                    if (quotation.getDiscount() != 0) {
                        if (quotation.isPerDiscount()) {
                            totalDiscount = amount * quotation.getDiscount() / 100;
                            amount = amount - totalDiscount;
                        } else {
                            amount = amount - quotation.getDiscount();
                            totalDiscount = quotation.getDiscount();
                        }
                    }
                    double totalTermAmount = 0;

                    HashMap<String, Object> requestParam = new HashMap();
                    requestParam.put("quotation", quotation.getID());
                    KwlReturnObject quotationResult = null;
                    quotationResult = accSalesOrderDAOobj.getQuotationTermMap(requestParam);
                    List<QuotationTermMap> termMap = quotationResult.getEntityList();
                    for (QuotationTermMap quotationTermMap : termMap) {
                        InvoiceTermsSales mt = quotationTermMap.getTerm();
                        double termAmnt = quotationTermMap.getTermamount();
                        totalTermAmount += termAmnt;
                    }

                    HashMap<String, Object> requestParams = new HashMap<String, Object>();
                    if (quotation.getTax() != null) {
                        requestParams.put("transactiondate", quotation.getQuotationDate());
                        requestParams.put("taxid", quotation.getTax().getID());
                        requestParams.put(Constants.companyKey, companyid);
                        KwlReturnObject taxResult = accTaxObj.getTax(requestParams);
                        List taxList = taxResult.getEntityList();
                        Object[] taxObj = (Object[]) taxList.get(0);
                        taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];

                    }
                    orderAmount = amount;//(Double) bAmt.getEntityList().get(0);
                    ordertaxamount = (taxPercent == 0 ? 0 : orderAmount * taxPercent / 100);
                    orderAmount += totalTermAmount;
                    quote.setTotalAmount(authHandler.formattedCommaSeparatedAmount((orderAmount + ordertaxamount + rowTaxAmountTotal), companyid));
                    QuotationDetail row = null;
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    KwlReturnObject idcustresult = accountingHandlerDAOobj.getObject(QuotationCustomData.class.getName(), quotation.getID());
                    if (idcustresult.getEntityList().get(0) != null && idcustresult.getEntityList().size() > 0) {
                        QuotationCustomData jeCustom = (QuotationCustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                if ((varEntry.getKey().split("_")[1]).equals("Shipment Term")) {
                                    quote.setShipmentTerms(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Export Date")) {
                                    quote.setExportDate(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Ship From")) {
                                    quote.setShipFrom(coldata);
                                }
                            }
                        }
                    }

                    quotationList.add(quote);
                    salescontactMap.put("CompanyName",company.getCompanyName()!=null?company.getCompanyName():"");
                    salescontactMap.put("SubReportData", new JRBeanCollectionDataSource(subReportList));
                    salescontactMap.put("format", "pdf");
                    response.setHeader("Content-Disposition", "attachment;filename=" + "ProformaInvoice_v1.pdf");
                    try {
                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GuanChongProformaInvoice.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);

                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(quotationList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, salescontactMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                } catch (ServiceException ex) {
                    Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportGCBDebittNoteJasperReport(HttpServletRequest request, HttpServletResponse response) {

        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        String curr = "";
        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;

                Map<String, Object> debitNoteMap = new HashMap<String, Object>();
                String view = "GCBDebitNote";
                SatTaxInvoice debitNote = new SatTaxInvoice();
                ArrayList<SatTaxInvoice> creditNoteList = new ArrayList<SatTaxInvoice>();
                ArrayList<SATSCreditNoteDetailsTable> creditNoteTableList = new ArrayList<SATSCreditNoteDetailsTable>();
                ArrayList<SATSCreditNoteDetailsTable> creditNoteTableList1 = new ArrayList<SATSCreditNoteDetailsTable>();
                try {

                    boolean otherwiseFlag = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("otherwise"))) {
                        otherwiseFlag = Boolean.parseBoolean(request.getParameter("otherwise"));
                    }
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    DateFormat dateFormat = (DateFormat) requestParams.get("df");
                    DateFormat df1 = new SimpleDateFormat("dd-MM-yyyy");
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 0));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;

                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    int i = 0;
                    HashMap<String, Object> cnRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("debiitNote.ID");
                    order_by.add("srno");
                    order_type.add("asc");
                    cnRequestParams.put("filter_names", filter_names);
                    cnRequestParams.put("filter_params", filter_params);
                    cnRequestParams.put("order_by", order_by);
                    cnRequestParams.put("order_type", order_type);
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), billid);
                    DebitNote dn = (DebitNote) result1.getEntityList().get(0);
                    entry = dn.getJournalEntry();
                    List<String> dimensionList = new ArrayList<String>();


                    curr = dn.getCurrency() != null ? dn.getCurrency().getSymbol() != null ? dn.getCurrency().getSymbol() : "" : "";
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add(Constants.companyKey);
                    Detailfilter_params.add(companyid);
                    Detailfilter_names.add("journalentryId");
                    Detailfilter_params.add(entry.getID());
                    Detailfilter_names.add("moduleId");
                    Detailfilter_params.add(moduleid + "");
                    invDetailRequestParams.put("filter_names", Detailfilter_names);
                    invDetailRequestParams.put("filter_params", Detailfilter_params);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;


                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names1 = new ArrayList(), filter_params1 = new ArrayList(), order_by1 = new ArrayList(), order_type1 = new ArrayList();
                    order_by1.add("srno");
                    order_type1.add("asc");
                    invRequestParams.put("order_by", order_by1);
                    invRequestParams.put("order_type", order_type1);

                    filter_names1.add("debitNote.ID");
                    filter_params1.add(dn.getID());
                    invRequestParams.put("filter_names", filter_names1);
                    invRequestParams.put("filter_params", filter_params1);
                    idresult = accDebitNoteobj.getDebitNoteDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();

                    String cndnName = "";
                    String cndnDate = "";
                    String prodDesc = "";
                    double subTotal = 0;
                    double amount = 0;
                    double gstTotal = 0;
                    int temp = 0;
                    String invDesc = "";
                    while (itr.hasNext()) {
                        DebitNoteDetail row = (DebitNoteDetail) itr.next();
                        SATSCreditNoteDetailsTable tableForInvoice = new SATSCreditNoteDetailsTable();

                        JSONObject obj = new JSONObject();
                        GoodsReceipt grObj = row.getGoodsReceipt();
                        if (grObj != null) {
                            Double invoiceAmount = 0d;

                            String Uom = "";
                            Date invoiceCreationDate = null;
                            invoiceCreationDate = grObj.getCreationDate();
                            if (grObj.isIsOpeningBalenceInvoice()) {
                                invoiceAmount = grObj.getOriginalOpeningBalanceAmount();
                            } else {
//                                invoiceCreationDate = grObj.getJournalEntry().getEntryDate();
                                invoiceAmount = grObj.getVendorEntry().getAmount();
                            }
                            int srno = row.getSrno();
                            prodDesc = row.getGoodsReceiptRow() == null ? "" : row.getGoodsReceiptRow().getInventory().getProduct().getDescription();
                            if (dn.isOtherwise() && row.getPaidinvflag() != 1) {
                                prodDesc = row.getGoodsReceipt() == null ? "" : row.getGoodsReceipt().getMemo();
                            } else {
                                prodDesc = row.getGoodsReceiptRow() == null ? "" : row.getGoodsReceiptRow().getGoodsReceipt().getMemo();
                            }
                            prodDesc=prodDesc.replaceAll("\n", "<br>");
                            tableForInvoice.setItemcode(srno + "");
                            tableForInvoice.setDesc(prodDesc);
                            tableForInvoice.setAmount(authHandler.formattedCommaSeparatedAmount(invoiceAmount, companyid));
                            tableForInvoice.setCurrency(curr);
                            creditNoteTableList1.add(tableForInvoice);
                        }

                    }

                    creditNoteTableList.addAll(creditNoteTableList1);
                    debitNoteMap.put("CreditDebitNoteDetailsTable", new JRBeanCollectionDataSource(creditNoteTableList));

                    String approverName = "";
                    if (dn.getCreatedby() != null) {
                        approverName = StringUtil.getFullName(dn.getCreatedby());
                    }
                    String terms = "";
                    String fax = "";
                    String Tel = "";
                    String hp = "";
                    String contactperson = "";
                    String invno = dn.getDebitNoteNumber();
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
//                    String entryDate = df.format(dn.getJournalEntry().getEntryDate());
                    String entryDate = df.format(dn.getCreationDate());
                    debitNote.setDocumentno(invno);
                    debitNote.setCurrency(curr);
                    debitNote.setDate(entryDate);
                    CustomerAddressDetails customerAddressDetail = null;
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, companyid);
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true); //true to get billing address
                    addressParams.put("customerid", dn.getCustomer().getID());
                    customerAddressDetail = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    if (dn.getCustomer() != null) {
                        debitNote.setName(dn.getCustomer().getName() != null ? dn.getCustomer().getName() : "");
                        debitNote.setAdd(accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams).replaceAll("\n", "<br>"));
                        terms = Integer.toString(dn.getCustomer().getCreditTerm().getTermdays()) + " Days";
                        fax = StringUtil.isNullOrEmpty(customerAddressDetail.getFax()) ? "" : customerAddressDetail.getFax();
                        //Tel = (dn.getCustomer().getCustomerAddresses() == null) ? (StringUtil.isNullOrEmpty(dn.getCustomer().getContactNumber()) ? "" : dn.getCustomer().getContactNumber()) : (StringUtil.isNullOrEmpty(dn.getCustomer().getCustomerAddresses().getBillingPhone1()) ? "" : dn.getCustomer().getCustomerAddresses().getBillingPhone1());
                        Tel = StringUtil.isNullOrEmpty(customerAddressDetail.getPhone()) ? "" : customerAddressDetail.getPhone();
                        //hp = dn.getCustomer().getCustomerAddresses() != null ? dn.getCustomer().getCustomerAddresses().getBillingMobile1() != null ? dn.getCustomer().getCustomerAddresses().getBillingMobile1() : "" : "";
                        hp = StringUtil.isNullOrEmpty(customerAddressDetail.getMobileNumber()) ? "" : customerAddressDetail.getMobileNumber();
                        //contactperson = dn.getCustomer().getCustomerAddresses() != null ? dn.getCustomer().getCustomerAddresses().getBillingContactPerson1() != null ? dn.getCustomer().getCustomerAddresses().getBillingContactPerson1() : "" : "";
                        contactperson = StringUtil.isNullOrEmpty(customerAddressDetail.getContactPerson()) ? "" : customerAddressDetail.getContactPerson();

                        debitNote.setCust("Customer");
                        debitNote.setCredit("Credit");
                    }
                    if (dn.getVendor() != null) {
                        addressParams.put("vendorid", dn.getVendor().getID());
                        debitNote.setName(dn.getVendor().getName() != null ? dn.getVendor().getName() : "");
                        debitNote.setAdd(accountingHandlerDAOobj.getVendorAddressForSenwanTec(addressParams).replaceAll("\n", "<br>"));
                        VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                        terms = Integer.toString(dn.getVendor().getDebitTerm().getTermdays()) + " Days";
                        fax = (vendorAddressDetails == null) ? (StringUtil.isNullOrEmpty(dn.getVendor().getFax()) ? "" : dn.getVendor().getFax()) : (StringUtil.isNullOrEmpty(vendorAddressDetails.getFax()) ? "" : vendorAddressDetails.getFax());
                        Tel = (vendorAddressDetails == null) ? (StringUtil.isNullOrEmpty(dn.getVendor().getContactNumber()) ? "" : dn.getVendor().getContactNumber()) : (StringUtil.isNullOrEmpty(vendorAddressDetails.getPhone()) ? "" : vendorAddressDetails.getPhone());
                        hp = vendorAddressDetails != null ? vendorAddressDetails.getMobileNumber() != null ? vendorAddressDetails.getMobileNumber() : "" : "";
                        contactperson = vendorAddressDetails != null ? vendorAddressDetails.getContactPerson() != null ? vendorAddressDetails.getContactPerson() : "" : "";

                        debitNote.setCust("Vendor");
                        debitNote.setCredit("Debit");
                    }
                    debitNote.setHp(hp);
                    debitNote.setPhone(Tel);
                    debitNote.setFax(fax);
                    debitNote.setDate(entryDate);
                    debitNote.setRaisedby(approverName);
                    debitNote.setContactperson(contactperson);
                    debitNote.setTotalamount(authHandler.formattedCommaSeparatedAmount(dn.getDnamount(), companyid));
                    creditNoteList.add(debitNote);

                    debitNoteMap.put("format", "pdf");
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    debitNoteMap.put("logo", fileName1);
                    debitNoteMap.put("title", "DEBIT NOTE");
                    debitNoteMap.put("attn", "Attn");
                    debitNoteMap.put("amountinwords","");//, curr + ": " + EnglishNumberToWordsOjb.convert(dn.getDnamount(), dn.getCurrency()) + " only.");
                    InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GCBCreditNote.jrxml");
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(creditNoteList);
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, debitNoteMap, beanColDataSource);
                    response.setHeader("Content-Disposition", "attachment;filename=" + "DebitNote_v1.pdf");
                    list.add(jasperPrint);

                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        return list;
    }

    @Override
    @Deprecated
    public List<Object> exportDefaultRFQ(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        boolean isFixedAsset = (request.getParameter("isFixedAsset") != null) ? Boolean.parseBoolean(request.getParameter("isFixedAsset")) : false;
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int templateflag = Integer.parseInt(request.getParameter("templateflag"));
        double discountTotal = 0;
        boolean isReport = true;

        HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
        filter_names.add("requestforquotation.ID");
        order_by.add("srno");
        order_type.add("asc");
        soRequestParams.put("filter_names", filter_names);
        soRequestParams.put("filter_params", filter_params);
        soRequestParams.put("order_by", order_by);
        soRequestParams.put("order_type", order_type);

        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), isFixedAsset ? Constants.Acc_FixedAssets_RFQ_ModuleId : Constants.Acc_RFQ_ModuleId, 1));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();

                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();

                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";

                    result = accountingHandlerDAOobj.getObject(RequestForQuotation.class.getName(), invoiceID);
                    RequestForQuotation rfq = (RequestForQuotation) result.getEntityList().get(0);
                    filter_params.clear();
                    filter_params.add(rfq.getID());
                    KwlReturnObject podresult = accPurchaseOrderobj.getRFQDetails(soRequestParams);
                    Iterator itr = podresult.getEntityList().iterator();
                    ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();
                    Map<String, Object> rows = new HashMap<String, Object>();
                    int i = 1;
                    while (itr.hasNext()) {
                        RequestForQuotationDetail row = (RequestForQuotationDetail) itr.next();
                        rows = new HashMap<String, Object>();
                        rows.put("srno", "" + (i++));
                        rows.put("productname", row.getProduct().getName());
                        rows.put("uom", row.getUom() != null ? row.getUom().getNameEmptyforNA() : row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                        rows.put("desc",  StringUtil.DecodeText(row.getRemark()));
                        rows.put("qty", authHandler.formattedQuantity(row.getQuantity(), companyid));
                        rows.put("pid", row.getProduct().getProductid());
                        rows.put("baseuomquantity", authHandler.formattedQuantity(row.getBaseuomquantity(), companyid));
                        rows.put("Condition", "");
                        rows.put("TATdays", "");
                        rows.put("RequisitionType", "");
                        rows.put("ARCs", "");
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        RequestForQuotationDetailCustomData requestForQuotationDetailCustomData = (RequestForQuotationDetailCustomData) row.getRequestForQuotationDetailCustomData();
                        HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
                        AccountingManager.setCustomColumnValues(requestForQuotationDetailCustomData, FieldMap, replaceFieldMap1, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue() != null ? varEntry.getValue().toString() : "";
                            String valueForReport = "";
                            if (customFieldMap.containsKey(varEntry.getKey()) && isReport && coldata != null) {

                                String[] valueData = coldata.split(",");
                                for (String value : valueData) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), value);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        valueForReport += fieldComboData.getValue() + ",";
                                    }
                                }
                                if (valueForReport.length() > 1) {
                                    valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("Condition")) {
                                    rows.put("Condition", valueForReport);
                                } else if ((varEntry.getKey().split("_")[1]).equals("TAT/days")) {
                                    rows.put("TATdays", valueForReport);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Requisition Type")) {
                                    rows.put("RequisitionType", valueForReport);
                                } else if ((varEntry.getKey().split("_")[1]).equals("ARCs")) {
                                    rows.put("ARCs", valueForReport);
                                }

                            } else {
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Condition")) {
                                        rows.put("Condition", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("TAT/days")) {
                                        rows.put("TATdays", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Requisition Type")) {
                                        rows.put("RequisitionType", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("ARCs")) {
                                        rows.put("ARCs", coldata);
                                    }
                                }
                            }
                        }
                        invDetailsList.add(rows);
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                    invoiceMap.put("Document_NO", rfq.getRfqNumber());
                    invoiceMap.put("memo", StringUtil.isNullOrEmpty(rfq.getMemo()) ? "" : rfq.getMemo());
                    KwlReturnObject userResult = accountingHandlerDAOobj.getObject(User.class.getName(), sessionHandlerImpl.getUserid(request));
                    User userDetails = (User) userResult.getEntityList().get(0);
                    String username = userDetails.getFirstName() + " " + userDetails.getLastName();
                    invoiceMap.put("orderedBy", StringUtil.isNullOrEmpty(username) ? "" : username);
                    invoiceMap.put("ComapnyName", company.getCompanyName() == null ? "" : company.getCompanyName());
                    invoiceMap.put("CompanyAddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));

                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    File logoimage = new File(imagepath);
                    invoiceMap.put("image", imagepath);
                    invoiceMap.put("isImagePresent", !logoimage.exists());
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(authHandler.getUserDateFormatterWithoutTimeZone(request).format(rfq.getRfqDate()));
                    datePojoList.add(datePojo);

                    InputStream inputStream = null;
                    String rfqDate=new SimpleDateFormat("ddMMyyyy").format(rfq.getRfqDate());
                   // response.setHeader("Content-Disposition", "attachment;filename=" + "RFQ_" + rfq.getRfqNumber() + "_v1.pdf");
                    filename = "RFQ_" + rfq.getRfqNumber() + "_v1.pdf";
                    response.setHeader("Content-Disposition", "attachment; filename=\"" + filename + "\"");
                    if (templateflag == Constants.Diamond_Aviation_templateflag) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationRFQJasper.jrxml");
                    } else {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DefaultRFQJasper.jrxml");
                    }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }

  @Override
   public List<Object> exportDefaultRFQ(JSONObject jsonObj) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        boolean isFixedAsset = (jsonObj.optString("isFixedAsset") != null) ? Boolean.parseBoolean(jsonObj.optString("isFixedAsset")) : false;
        String recordIDs = jsonObj.optString("recordids") != null ? jsonObj.optString("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int templateflag = Integer.parseInt(jsonObj.optString("templateflag"));
        double discountTotal = 0;
        boolean isReport = true;

        HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
        filter_names.add("requestforquotation.ID");
        order_by.add("srno");
        order_type.add("asc");
        soRequestParams.put("filter_names", filter_names);
        soRequestParams.put("filter_params", filter_params);
        soRequestParams.put("order_by", order_by);
        soRequestParams.put("order_type", order_type);

        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(jsonObj.optString(Constants.companyKey), isFixedAsset ? Constants.Acc_FixedAssets_RFQ_ModuleId : Constants.Acc_RFQ_ModuleId, 1));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = jsonObj.optString("bills") != null ? jsonObj.optString("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();

                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();

                    String companyid = (jsonObj.optString(Constants.companyids) != null) ? jsonObj.optString(Constants.companyids) : jsonObj.optString(Constants.companyKey);
                    String gcurrencyid = (jsonObj.optString(Constants.globalCurrencyKey) != null) ? jsonObj.optString(Constants.globalCurrencyKey) :jsonObj.optString(Constants.companyKey);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), jsonObj.optString(Constants.companyKey));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";

                    result = accountingHandlerDAOobj.getObject(RequestForQuotation.class.getName(), invoiceID);
                    RequestForQuotation rfq = (RequestForQuotation) result.getEntityList().get(0);
                    filter_params.clear();
                    filter_params.add(rfq.getID());
                    KwlReturnObject podresult = accPurchaseOrderobj.getRFQDetails(soRequestParams);
                    Iterator itr = podresult.getEntityList().iterator();
                    ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();
                    Map<String, Object> rows = new HashMap<String, Object>();
                    int i = 1;
                    while (itr.hasNext()) {
                        RequestForQuotationDetail row = (RequestForQuotationDetail) itr.next();
                        rows = new HashMap<String, Object>();
                        rows.put("srno", "" + (i++));
                        rows.put("productname", row.getProduct().getName());
                        rows.put("uom", row.getUom() != null ? row.getUom().getNameEmptyforNA() : row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                        rows.put("desc",  StringUtil.DecodeText(row.getRemark()));
                        rows.put("qty", authHandler.formattedQuantity(row.getQuantity(), companyid));
                        rows.put("pid", row.getProduct().getProductid());
                        rows.put("baseuomquantity", authHandler.formattedQuantity(row.getBaseuomquantity(), companyid));
                        rows.put("Condition", "");
                        rows.put("TATdays", "");
                        rows.put("RequisitionType", "");
                        rows.put("ARCs", "");
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        RequestForQuotationDetailCustomData requestForQuotationDetailCustomData = (RequestForQuotationDetailCustomData) row.getRequestForQuotationDetailCustomData();
                        HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
                        AccountingManager.setCustomColumnValues(requestForQuotationDetailCustomData, FieldMap, replaceFieldMap1, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue() != null ? varEntry.getValue().toString() : "";
                            String valueForReport = "";
                            if (customFieldMap.containsKey(varEntry.getKey()) && isReport && coldata != null) {

                                String[] valueData = coldata.split(",");
                                for (String value : valueData) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), value);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        valueForReport += fieldComboData.getValue() + ",";
                                    }
                                }
                                if (valueForReport.length() > 1) {
                                    valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("Condition")) {
                                    rows.put("Condition", valueForReport);
                                } else if ((varEntry.getKey().split("_")[1]).equals("TAT/days")) {
                                    rows.put("TATdays", valueForReport);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Requisition Type")) {
                                    rows.put("RequisitionType", valueForReport);
                                } else if ((varEntry.getKey().split("_")[1]).equals("ARCs")) {
                                    rows.put("ARCs", valueForReport);
                                }

                            } else {
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Condition")) {
                                        rows.put("Condition", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("TAT/days")) {
                                        rows.put("TATdays", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Requisition Type")) {
                                        rows.put("RequisitionType", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("ARCs")) {
                                        rows.put("ARCs", coldata);
                                    }
                                }
                            }
                        }
                        invDetailsList.add(rows);
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                    invoiceMap.put("Document_NO", rfq.getRfqNumber());
                    invoiceMap.put("memo", StringUtil.isNullOrEmpty(rfq.getMemo()) ? "" : rfq.getMemo());
                    KwlReturnObject userResult = accountingHandlerDAOobj.getObject(User.class.getName(), jsonObj.optString(Constants.useridKey));
                    User userDetails = (User) userResult.getEntityList().get(0);
                    String username = userDetails.getFirstName() + " " + userDetails.getLastName();
                    invoiceMap.put("orderedBy", StringUtil.isNullOrEmpty(username) ? "" : username);
                    invoiceMap.put("ComapnyName", company.getCompanyName() == null ? "" : company.getCompanyName());
                    invoiceMap.put("CompanyAddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));

                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    File logoimage = new File(imagepath);
                    invoiceMap.put("image", imagepath);
                    invoiceMap.put("isImagePresent", !logoimage.exists());
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    //datePojo.setDate(authHandler.getUserDateFormatterWithoutTimeZone(request).format(rfq.getRfqDate()));
                    datePojo.setDate(authHandler.getUserDateFormatterWithoutTimeZone(jsonObj).format(rfq.getRfqDate()));
                    datePojoList.add(datePojo);

                    InputStream inputStream = null;
                    String rfqDate=new SimpleDateFormat("ddMMyyyy").format(rfq.getRfqDate());
                   // response.setHeader("Content-Disposition", "attachment;filename=" + "RFQ_" + rfq.getRfqNumber() + "_v1.pdf");
                    filename = "RFQ_" + rfq.getRfqNumber() + "_v1.pdf";
                 //   response.setHeader("Content-Disposition", "attachment; filename=\"" + filename + "\"");
                    if (templateflag == Constants.Diamond_Aviation_templateflag) {
                        //inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationRFQJasper.jrxml");
                        inputStream = new FileInputStream(jsonObj.optString(Constants.JRXML_REAL_PATH_KEY) + "/DiamondAviationRFQJasper.jrxml");
                    } else {
                        inputStream = new FileInputStream(jsonObj.optString(Constants.JRXML_REAL_PATH_KEY) + "/DefaultRFQJasper.jrxml");
                    }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
  
    @Override
    @Deprecated
    public List<Object> exportDefaultPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String paymentId = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        /*
         * isExportPayment is true if export record from entry form 
         */ 
        boolean exportRecord = request.getParameter("isExportPayment")!= null ? Boolean.parseBoolean(request.getParameter("isExportPayment").toString()) : false;
        String recArray[] = recordIDs.split(",");
        Map<String, Object> globalVoucherMap = new HashMap<String, Object>();
        int counter = 0;
        double gsttotal = 0;
        String MODULE_ID=request.getParameter("moduleid");
        String jrXmlPath = request.getSession().getServletContext().getRealPath("/jrxml");
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    counter++;
                    paymentId = s;

                    if (StringUtil.isNullOrEmpty(paymentId)) {
                        paymentId = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    String customerName = "";
                    String chequeNo = "";
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<LabelValue> paidToList = new ArrayList<LabelValue>();
                    ArrayList<LabelValue> labelValueList = new ArrayList<LabelValue>();
                    ArrayList<LabelValue> detailsLabelValueList = new ArrayList<LabelValue>();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    Map<String, Object> voucherMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONObject jobj = new JSONObject();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                    int mode = Integer.parseInt(request.getParameter("mode"));
                    int templateflag = Integer.parseInt(request.getParameter("templateflag"));
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    KwlReturnObject compaccresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compaccresult.getEntityList().get(0);
                    String filename="";
                    boolean onlyOpeningBalanceTransactionsFlag = false;
                    if (mode == StaticValues.AUTONUM_PAYMENT) {
                        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                        requestParams.put(Constants.billid, paymentId);
                        request.setAttribute(Constants.companyKey, companyid);
                        request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                        requestParams.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                        requestParams.put("exportRecord", exportRecord);
                        result = accVendorPaymentDAO.getPayments(requestParams);
                        tempList = accVendorPaymentServiceDAOobj.getPaymentsJsonNew(requestParams, result.getEntityList(), tempList);
                        requestParams.put("dateformat", authHandler.getDateOnlyFormat());
                        requestParams.put("userdateformat", authHandler.getUserDateFormatterWithoutTimeZone(request));
                        requestParams.put("bills", paymentId.split(","));
                        DataJArr = accVendorPaymentServiceDAOobj.getPaymentDetailJsonNew(requestParams);
                        if( templateflag == Constants.Diamond_Aviation_templateflag){
                              voucherMap.put("headerLabel", "Remittance Advice");
                         } else{
                              voucherMap.put("headerLabel", "PAYMENT VOUCHER");
                         }
                        voucherMap.put("numberLabel", "Voucher #");
                        filename=(templateflag==Constants.Diamond_Aviation_templateflag)?"RemittanceAdvice_":"PaymentVoucher_";
                    }else if (mode == StaticValues.AUTONUM_RECEIPT) {
                        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                        HashMap<String, Object> requestParams = accReceiptServiceDAOobj.getReceiptRequestMapJSON(paramJobj);
                        requestParams.put(Constants.billid, paymentId);
                        int permCode=paramJobj.optInt("permcodecustomer");
                        
                        request.setAttribute(Constants.companyKey, companyid);
                        request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                        request.setAttribute("bills", paymentId);
                        paramJobj.put(Constants.companyKey, companyid);
                        paramJobj.put(Constants.globalCurrencyKey, gcurrencyid);
                        paramJobj.put("bills", paymentId);
                        paramJobj.put("permCode", permCode);
                        
                        
                        requestParams.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                        requestParams.put("exportRecord", exportRecord);
                        onlyOpeningBalanceTransactionsFlag = request.getParameter("onlyOpeningBalanceTransactionsFlag") != null ? Boolean.parseBoolean(request.getParameter("onlyOpeningBalanceTransactionsFlag")) : false;
                        if(onlyOpeningBalanceTransactionsFlag) {
                         result = accReceiptDAOobj.getAllOpeningBalanceReceipts(requestParams);
                         tempList = accReceiptServiceDAOobj.getOpeningBalanceReceiptJsonForReport(paramJobj, result.getEntityList(), tempList);
                        } else {
                            result = accReceiptDAOobj.getReceipts(requestParams);
                            tempList = accReceiptServiceDAOobj.getReceiptJson(paramJobj, result.getEntityList(), tempList);
                        }
                        requestParams.put("dateformat", authHandler.getDateOnlyFormat());
                        JSONObject tempobj = accReceiptServiceDAOobj.getReceiptRowsJSONNew(paramJobj);
                        
                        DataJArr=tempobj.getJSONArray("data");
                          if( templateflag == Constants.F1RecreationLeasing_templateflag || templateflag == Constants.F1Recreation_templateflag ){
                              voucherMap.put("headerLabel", "RECEIPT VOUCHER");
                         }else if( templateflag == Constants.Diamond_Aviation_templateflag){
                              voucherMap.put("headerLabel", "Official Receipt");
                         } else{
                              voucherMap.put("headerLabel", "PAYMENT RECEIPT");
                         }
                        voucherMap.put("numberLabel", "Receipt #");
                        filename=(templateflag==Constants.Diamond_Aviation_templateflag)?"OfficialReceipt_":"PaymentReceipt_";
                    }
                    
                    if (templateflag == Constants.lsh_templateflag) {
                        ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
                        JSONObject obj = tempList.get(0);
                        String codelabel = "";
                        String codevalue = "";
                        String personlabel = "";
                        String personvalue = "";
                        int paymentwindowtype = (Integer) obj.get("paymentwindowtype");
                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                            codelabel = "Vendor Code";
                            codevalue = obj.optString("personcode", "");
                            personlabel = "Vendor Name";
                            personvalue = obj.optString("personname", "");
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                            codelabel = "Customer Code";
                            codevalue = obj.optString("personcode", "");
                            personlabel = "Customer Name";
                            personvalue = obj.optString("personname", "");
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_against_GL_Code) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_against_GL_Code)) {
                            codelabel = "Applicant";
                            codevalue = obj.optString("createdby", "");
                            personlabel = mode == StaticValues.AUTONUM_PAYMENT ? "Payment To" : "Payment From";
                            personvalue = obj.optString("paidto", "");
                        }
                        voucherMap.put("PayToTable", new JRBeanCollectionDataSource(paidToList));
                        int srnumber = 0;
                        for (int i = 0; i < DataJArr.length(); i++) {
                            jobj = DataJArr.getJSONObject(i);
                            int detailtype = (Integer) jobj.get("type");
                            if (detailtype == Constants.PaymentAgainstInvoice) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = (mode == StaticValues.AUTONUM_PAYMENT ? "Payment Made Against Vendor Invoice # " : "Payment Received Against Customer Invoice # ") + data.getString("transectionno");
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.GLPayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Against GL Account " + (data.optString("accountcode", "").equals("") ? "" : data.optString("accountcode", "") + " - ") + data.getString("accountname");
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("totalamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("taxamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(((data.optDouble("totalamount", 0.0)) + data.optDouble("taxamount", 0.0)), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.PaymentAgainstCNDN) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = (mode == StaticValues.AUTONUM_PAYMENT ? "Payment Made Against Credit Note # " : "Payment Received Against Debit Note # ") + data.getString("transectionno");
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.AdvancePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Advance Amount ";
                                    if(data.optBoolean("isrefund",false)) {
                                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                                            invDesc = "Refund/ Deposit Amount against Payment #"+data.optString("transectionno","");
                                        }else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                                            invDesc = "Refund/ Deposit Amount against Receipt #"+data.optString("transectionno","");                   
                                        }
                                    }
                                    invDesc += (mode == StaticValues.AUTONUM_PAYMENT ? " to " : " from ");
                                    if (!data.optString("acccode", "").equals("") && !data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("acccode") + "-" + data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    } else if (!data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    }   // This will add the account name with code and then account holder name with code  
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("paidamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("paidamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.AdvanceLinkedWithInvoicePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "&nbsp&nbsp&nbsp&nbsp Adjusted Against Invoice# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                    if (data.getString("totalamount").equals(data.getString("amountpaid"))) {
                                        invDesc += " (Full)";
                                    }
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno("");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount("");
                                    ferrateGroupPaymentVoucherTable.setGstamount("");
                                    ferrateGroupPaymentVoucherTable.setTotalamount("");
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            }
                        }

                        if (!obj.optString("bankCharges", "0.0").equals("0.0")) {
                            double bankcharges = Double.parseDouble(obj.getString("bankCharges"));
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                            ferrateGroupPaymentVoucherTable.setDesc("Bank Charges");
                            ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        }

                        if (!obj.optString("bankInterest", "0.0").equals("0.0")) {
                            double bankInterest = Double.parseDouble(obj.getString("bankInterest"));
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                            ferrateGroupPaymentVoucherTable.setDesc("Bank Interest");
                            ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        }

                        datePojo.setDate(obj.optString("billdateinUserFormat", ""));
                        datePojoList.add(datePojo);
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        
                        if (counter % 2 == 1) {
                            voucherMap.put("logo", logo);
                            voucherMap.put("footer", footer);
                            voucherMap.put("name", codevalue);
                            voucherMap.put("nametitle", codelabel);
                            voucherMap.put("title", mode == StaticValues.AUTONUM_PAYMENT ? "Payment Voucher" : "Receipt of Payment");
                            voucherMap.put("number", obj.optString("billno", ""));
                            voucherMap.put("type", mode == StaticValues.AUTONUM_PAYMENT ? "Voucher Number" : "Receipt Number");
                            voucherMap.put("to", personlabel);
                            voucherMap.put("paymentto", personvalue);
                            voucherMap.put("approver", "");
                            voucherMap.put("date", obj.optString("billdateinUserFormat", ""));
                            voucherMap.put("totalamount", obj.optString("currencyname", "") + " " + authHandler.formattedCommaSeparatedAmount(Double.parseDouble(obj.optString("amount", "0")), companyid));
                            voucherMap.put("PettyCashVoucherSubReportData", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));
                            globalVoucherMap = voucherMap;
                        } else {
                            globalVoucherMap.put("name_1", codevalue);
                            globalVoucherMap.put("number_1", obj.optString("billno", ""));
                            globalVoucherMap.put("paymentto_1", personvalue);
                            globalVoucherMap.put("approver_1", "");
                            globalVoucherMap.put("date_1", obj.optString("billdateinUserFormat", ""));
                            globalVoucherMap.put("totalamount_1", obj.optString("currencyname", "") + " " + authHandler.formattedCommaSeparatedAmount(Double.parseDouble(obj.optString("amount", "0")), companyid));
                            globalVoucherMap.put("PettyCashVoucherSubReportData_1", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));
                        }
                        
                        if (counter==recArray.length || counter % 2 == 0) {
                            response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + obj.optString("billno", "") +"_v1.pdf\"");
//                            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LSHPaymentVoucher.jrxml");
                            InputStream inputStream = new FileInputStream(!StringUtil.isNullObject(jrXmlPath) ? jrXmlPath + "/LSHPaymentVoucherOneByTwo.jrxml" : request.getSession().getServletContext().getRealPath("jrxml") + "/LSHPaymentVoucherOneByTwo.jrxml");
                            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
//                            jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                            jasperPrint = JasperFillManager.fillReport(jasperReport, globalVoucherMap, beanColDataSource);
                            list.add(jasperPrint);
                        } else {
                            continue;
                        }
                    }else if (templateflag>=Constants.TID_Subdomain_templateflag && templateflag <= Constants.MITSUI_Subdomain_templateflag && mode == StaticValues.AUTONUM_PAYMENT) {//For Tid templates Payment Vaoucher
                        ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
                        JSONObject obj = tempList.get(0);
                        String codelabel = "";
                        String codevalue = "";
                        String personlabel = "";
                        String personvalue = "";
                        Boolean aginstGL=false;
                        int paymentwindowtype = (Integer) obj.get("paymentwindowtype");
                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                            codelabel = "Vendor Code";
                            codevalue = obj.optString("personcode", "");
                            personlabel = "Vendor Name";
                            personvalue = obj.optString("personname", "")+"<br>"+obj.optString("personaddress", "");
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                            codelabel = "Customer Code";
                            codevalue = obj.optString("personcode", "");
                            personlabel = "Customer Name";
                            personvalue = obj.optString("personname", "")+"<br>"+obj.optString("personaddress", "");
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_against_GL_Code) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_against_GL_Code)) {
                            codelabel = "Applicant";
                            codevalue = obj.optString("createdby", "");
                            personlabel = mode == StaticValues.AUTONUM_PAYMENT ? "Payment To" : "Payment From";
                            personvalue = obj.optString("paidto", "");
                        }
                        voucherMap.put("PayToTable", new JRBeanCollectionDataSource(paidToList));
                        int srnumber = 0;
                        for (int i = 0; i < DataJArr.length(); i++) {
                            jobj = DataJArr.getJSONObject(i);
                            int detailtype = (Integer) jobj.get("type");
                            if (detailtype == Constants.PaymentAgainstInvoice) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String dimensions=getDimensionString(data); //get dimension String
                                    String invDesc = (mode == StaticValues.AUTONUM_PAYMENT ? "Payment Made Against Vendor Invoice # " : "Payment Received Against Customer Invoice # ") + data.getString("transectionno")+" dated "+ data.getString("creationdateinuserformat")+dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.GLPayment) {
                                aginstGL = true;
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String type = ""; //ERP-10876
                                    if (data.optBoolean("debit", false)) {
                                        type = "Type : Debit";
                                    } else {
                                        type = "Type : Credit";
                                    }
                                    String dimensions=getDimensionString(data); //get dimension String
                                    String invDesc ="<br>"+data.optString("accountcode","")  +" "+ data.optString("accountname","")+"<br>"+type+"<br>Narration : " +  StringUtil.DecodeText(data.optString("description", "")) +dimensions; // ERP-10904
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc.replaceAll("-", " - "));
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("totalamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("taxamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(((data.optDouble("totalamount", 0.0)) + data.optDouble("taxamount", 0.0)), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.PaymentAgainstCNDN) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String dimensions=getDimensionString(data); //get dimension String
                                    String invDesc = (mode == StaticValues.AUTONUM_PAYMENT ? "Payment Made Against Credit Note # " : "Payment Received Against Debit Note # ") + data.getString("transectionno") + " dated "+ data.getString("creationdate")+dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.AdvancePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Advance Amount ";
                                    if(data.optBoolean("isrefund",false)) {
                                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                                            invDesc = "Refund/ Deposit Amount against Payment #"+data.optString("transectionno","");
                                        }else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                                            invDesc = "Refund/ Deposit Amount against Receipt #"+data.optString("transectionno","");                   
                                        }
                                    }
                                    invDesc += (mode == StaticValues.AUTONUM_PAYMENT ? " to " : " from ");
                                    if (!data.optString("acccode", "").equals("") && !data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("acccode") + "-" + data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    } else if (!data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    }   // This will add the account name with code and then account holder name with code 
                                    String dimensions=getDimensionString(data); //get dimension String
                                    invDesc += dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("paidamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("paidamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.AdvanceLinkedWithInvoicePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "&nbsp&nbsp&nbsp&nbsp Adjusted Against Invoice# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                    if (data.getString("totalamount").equals(data.getString("amountpaid"))) {
                                        invDesc += " (Full)";
                                    }
                                    String dimensions = getDimensionString(data); //get dimension String
                                    invDesc += dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno("");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount("");
                                    ferrateGroupPaymentVoucherTable.setGstamount("");
                                    ferrateGroupPaymentVoucherTable.setTotalamount("");
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            }
                        }

                        if (!obj.optString("bankCharges", "0.0").equals("0.0")) {
                            double bankcharges = Double.parseDouble(obj.getString("bankCharges"));
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                            ferrateGroupPaymentVoucherTable.setDesc("Bank Charges");
                            ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        }

                        if (!obj.optString("bankInterest", "0.0").equals("0.0")) {
                            double bankInterest = Double.parseDouble(obj.getString("bankInterest"));
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                            ferrateGroupPaymentVoucherTable.setDesc("Bank Interest");
                            ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        }
                        String companyregno = "";
                   switch(templateflag){
                     case Constants.TID_Subdomain_templateflag:
                           companyregno = "196600206D";
                            break;
                    case Constants.TIDR_Subdomain_templateflag:
                           companyregno = "201022916C";
                            break;
                    case Constants.CUSCADEN_Subdomain_templateflag:
                           companyregno = "200007357R";
                            break;
                    case Constants.TCD_Subdomain_templateflag:
                           companyregno = "199608145R";
                            break;
                    case Constants.CAMBORNE_Subdomain_templateflag:
                           companyregno = "199509073K";
                            break;
                    case Constants.MITSUI_Subdomain_templateflag:
                           companyregno = "198101129R";
                            break;
                 }   
                    String chequeNumber = "";
                    int detailType = Integer.parseInt(obj.optString("detailtype", "0"));
                        if (detailType == PaymentMethod.TYPE_CASH) {
                           
                                  chequeNumber =   obj.optString("paymentmethod", "");
                           
                            
                        } else if (detailType == PaymentMethod.TYPE_CARD) {
                            
                            chequeNumber =  obj.optString("paymentmethod", "");
                             
                        } else if (detailType == PaymentMethod.TYPE_BANK) {
                            
                             chequeNumber = obj.optString("chequenumber", "");
                            
                        }
                        datePojo.setDate(obj.optString("billdateinUserFormat", ""));
                        datePojoList.add(datePojo);
                    
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("logo", logo);
                        voucherMap.put("footer", footer);
                        voucherMap.put("name", codevalue);
                        voucherMap.put("customercode", codelabel);
                        voucherMap.put("title", mode == StaticValues.AUTONUM_PAYMENT ? "Payment Voucher" : "Receipt of Payment");
                        voucherMap.put("number", obj.optString("billno", ""));
                        voucherMap.put("type", mode == StaticValues.AUTONUM_PAYMENT ? "Voucher Number" : "Receipt Number");
                        voucherMap.put("to", personlabel);
                        voucherMap.put("paymentto", personvalue);
                        voucherMap.put("approver", "");
                        voucherMap.put("date", obj.optString("billdateinUserFormat", ""));
                        voucherMap.put("remark", obj.optString("memo", ""));
                        voucherMap.put("companyregistrationno",companyregno);
                        voucherMap.put("againstGLCodeFlag",aginstGL);
                        voucherMap.put("bankAccountDetails","To : "+obj.optString("paymentaccountnumber",""));//ERP-10877
                        voucherMap.put("chequeDetails","We attach herewith our cheque No. " + chequeNumber + " in settlement of :-");
                        voucherMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                        voucherMap.put("amountInWords", obj.optString("amountInWords", ""));
                        voucherMap.put("totalamount", obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(Double.parseDouble(obj.optString("amount", "0")), companyid));                      
                        response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + obj.optString("billno", "") +"_v1.pdf\"");
                        InputStream SubReportInputStream = new FileInputStream(!StringUtil.isNullObject(jrXmlPath) ? jrXmlPath + "/TIDPaymentVoucherSubReport.jrxml" : request.getSession().getServletContext().getRealPath("jrxml") + "/TIDPaymentVoucherSubReport.jrxml");
                        JasperDesign SubReportJasperDesign = JRXmlLoader.load(SubReportInputStream);
                        JasperReport SubReport = JasperCompileManager.compileReport(SubReportJasperDesign);                
                        voucherMap.put("PaymentVoucherSubReport", SubReport);
                        voucherMap.put("PaymentVoucherSubReportData", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));
                        InputStream inputStream = new FileInputStream(!StringUtil.isNullObject(jrXmlPath) ? jrXmlPath + "/TIDPaymentVoucher.jrxml" : request.getSession().getServletContext().getRealPath("jrxml") + "/TIDPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                        list.add(jasperPrint);
                    } else if (templateflag >= Constants.TID_Subdomain_templateflag && templateflag <= Constants.MITSUI_Subdomain_templateflag && mode == StaticValues.AUTONUM_RECEIPT) {//For Tid templates Payment Vaoucher
                        ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
                        JSONObject obj = tempList.get(0);
                        String codelabel = "";
                        String codevalue = "";
                        String personlabel = "";
                        String personvalue = "";
                        Boolean aginstGL = false;
                        int paymentwindowtype = (Integer) obj.get("paymentwindowtype");
                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                            codelabel = "Vendor Code";
                            codevalue = obj.optString("personcode", "");
                            personlabel = "Vendor Name";
                            personvalue = obj.optString("personname", "") + "<br>" + obj.optString("personaddress", "");
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                            codelabel = "Customer Code";
                            codevalue = obj.optString("personcode", "");
                            personlabel = "Customer Name";
                            personvalue = obj.optString("personname", "") + "<br>" + obj.optString("personaddress", "");
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_against_GL_Code) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_against_GL_Code)) {
                            codelabel = "Applicant";
                            codevalue = obj.optString("createdby", "");
                            personlabel = mode == StaticValues.AUTONUM_PAYMENT ? "Payment To" : "Payment From";
                            personvalue = obj.optString("paidto", "");
                        }
                        voucherMap.put("PayToTable", new JRBeanCollectionDataSource(paidToList));
                        int srnumber = 0;
                        for (int i = 0; i < DataJArr.length(); i++) {
                            jobj = DataJArr.getJSONObject(i);
                            int detailtype = (Integer) jobj.get("type");
                            if (detailtype == Constants.PaymentAgainstInvoice) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String dimensions=getDimensionString(data); //get dimension String
                                    String invDesc = (mode == StaticValues.AUTONUM_PAYMENT ? "Payment Made Against Vendor Invoice # " : "Payment Received Against Customer Invoice # ") + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat")+dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.GLPayment) {
                                aginstGL = true;
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String type = "";//ERP-10876
                                    if (data.optBoolean("debit", false)) {
                                        type = "Type : Debit";
                                    } else {
                                        type = "Type : Credit";
                                    }
                                    String dimensions = getDimensionString(data); //get dimension String
                                    String invDesc = "<br>" + data.optString("accountcode", "") + " " + data.optString("accountname", "") + "<br>" + type + "<br>Narration : " +  StringUtil.DecodeText(data.optString("description", "")) + dimensions; // ERP-10904
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("totalamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("taxamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(((data.optDouble("totalamount", 0.0)) + data.optDouble("taxamount", 0.0)), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.PaymentAgainstCNDN) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String dimensions=getDimensionString(data); //get dimension String
                                    String invDesc = (mode == StaticValues.AUTONUM_PAYMENT ? "Payment Made Against Credit Note # " : "Payment Received Against Debit Note # ") + data.getString("transectionno") + " dated " + data.getString("creationdate")+dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.AdvancePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Advance Amount ";
                                    if (data.optBoolean("isrefund", false)) {
                                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                                            invDesc = "Refund/ Deposit Amount against Payment #" + data.optString("transectionno", "");
                                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                                            invDesc = "Refund/ Deposit Amount against Receipt #" + data.optString("transectionno", "");
                                        }
                                    }
                                    invDesc += (mode == StaticValues.AUTONUM_PAYMENT ? " to " : " from ");
                                    if (!data.optString("acccode", "").equals("") && !data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("acccode") + "-" + data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    } else if (!data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    }   // This will add the account name with code and then account holder name with code  
                                    String dimensions=getDimensionString(data); //get dimension String
                                    invDesc += dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("paidamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("paidamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.AdvanceLinkedWithInvoicePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "&nbsp&nbsp&nbsp&nbsp Adjusted Against Invoice# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                    if (data.getString("totalamount").equals(data.getString("amountpaid"))) {
                                        invDesc += " (Full)";
                                    }
                                    String dimensions=getDimensionString(data); //get dimension String
                                    invDesc+=dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno("");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount("");
                                    ferrateGroupPaymentVoucherTable.setGstamount("");
                                    ferrateGroupPaymentVoucherTable.setTotalamount("");
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            }
                        }

                        if (!obj.optString("bankCharges", "0.0").equals("0.0")) {
                            double bankcharges = Double.parseDouble(obj.getString("bankCharges"));
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                            ferrateGroupPaymentVoucherTable.setDesc("Bank Charges");
                            ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        }

                        if (!obj.optString("bankInterest", "0.0").equals("0.0")) {
                            double bankInterest = Double.parseDouble(obj.getString("bankInterest"));
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                            ferrateGroupPaymentVoucherTable.setDesc("Bank Interest");
                            ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        }
                        String companyregno = "";
                        switch (templateflag) {
                            case Constants.TID_Subdomain_templateflag:
                                companyregno = "196600206D";
                                break;
                            case Constants.TIDR_Subdomain_templateflag:
                                companyregno = "201022916C";
                                break;
                            case Constants.CUSCADEN_Subdomain_templateflag:
                                companyregno = "200007357R";
                                break;
                            case Constants.TCD_Subdomain_templateflag:
                                companyregno = "199608145R";
                                break;
                            case Constants.CAMBORNE_Subdomain_templateflag:
                                companyregno = "199509073K";
                                break;
                            case Constants.MITSUI_Subdomain_templateflag:
                                companyregno = "198101129R";
                                break;
                        }
                        String chequeNumber = "";
                        int detailType = Integer.parseInt(obj.optString("detailtype", "0"));
                        if (detailType == PaymentMethod.TYPE_CASH) {

                            chequeNumber = obj.optString("paymentmethod", "");


                        } else if (detailType == PaymentMethod.TYPE_CARD) {

                            chequeNumber = obj.optString("paymentmethod", "");

                        } else if (detailType == PaymentMethod.TYPE_BANK) {

                            chequeNumber = obj.optString("chequenumber", "");

                        }
                        datePojo.setDate(obj.optString("billdateinUserFormat", ""));
                        datePojoList.add(datePojo);

                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("logo", logo);
                        voucherMap.put("footer", footer);
                        voucherMap.put("name", codevalue);
                        voucherMap.put("customercode", codelabel);
                        voucherMap.put("title", mode == StaticValues.AUTONUM_PAYMENT ? "Payment Voucher" : "Receipt of Payment");
                        voucherMap.put("number", obj.optString("billno", ""));
                        voucherMap.put("type", mode == StaticValues.AUTONUM_PAYMENT ? "Voucher Number" : "Receipt Number");
                        voucherMap.put("to", personlabel);
                        voucherMap.put("paymentto", personvalue);
                        voucherMap.put("approver", "");
                        voucherMap.put("date", obj.optString("billdateinUserFormat", ""));
                        voucherMap.put("remark", obj.optString("memo", ""));
                        voucherMap.put("companyregistrationno", companyregno);
                        voucherMap.put("againstGLCodeFlag", aginstGL);
                        voucherMap.put("bankAccountDetails","From : "+obj.optString("paymentaccountnumber",""));    //ERP-10877
                        voucherMap.put("chequeDetails", "We attach herewith our cheque No. " + chequeNumber + " in settlement of :-");
                        voucherMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                        voucherMap.put("amountInWords", obj.optString("amountInWords", ""));
                        voucherMap.put("totalamount", obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount((Double.parseDouble(obj.optString("amount", "0"))), companyid));
                        response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + obj.optString("billno", "") +"_v1.pdf\"");
                        InputStream SubReportInputStream = new FileInputStream(!StringUtil.isNullObject(jrXmlPath) ? jrXmlPath + "/TIDPaymentVoucherSubReport.jrxml" : request.getSession().getServletContext().getRealPath("jrxml") + "/TIDPaymentVoucherSubReport.jrxml");
                        JasperDesign SubReportJasperDesign = JRXmlLoader.load(SubReportInputStream);
                        JasperReport SubReport = JasperCompileManager.compileReport(SubReportJasperDesign);
                        voucherMap.put("PaymentVoucherSubReport", SubReport);
                        voucherMap.put("PaymentVoucherSubReportData", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));
                        InputStream inputStream = new FileInputStream(!StringUtil.isNullObject(jrXmlPath) ? jrXmlPath + "/TIDPaymentVoucher.jrxml" : request.getSession().getServletContext().getRealPath("jrxml") + "/TIDPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                        list.add(jasperPrint);
                    } else if (templateflag == Constants.Diamond_Aviation_templateflag) {
                        double documentTotalAmt=0;
                        ArrayList<DiamondAviationPaymentVoucherTable> tableList = new ArrayList<DiamondAviationPaymentVoucherTable>();
                        JSONObject obj = tempList.get(0);
                        datePojo.setDate(obj.optString("billdateinUserFormat", ""));
                        datePojoList.add(datePojo);
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("imagePath", logo);

                        int paymentwindowtype = (Integer) obj.get("paymentwindowtype");
                        voucherMap.put("name", obj.optString("personname", ""));
                        voucherMap.put("code", obj.optString("personcode", ""));
                        voucherMap.put("codelabel", mode == StaticValues.AUTONUM_PAYMENT ? "Creditor Code":"Customer Code");
                        voucherMap.put("ispayment", mode == StaticValues.AUTONUM_PAYMENT ? true : false);
                        voucherMap.put("address", obj.optString("personaddress", ""));
                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_against_GL_Code) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_against_GL_Code)) {
                            voucherMap.put("name", obj.optString("paidto", ""));
                        }
                        for (int i = 0; i < DataJArr.length(); i++) {
                            jobj = DataJArr.getJSONObject(i);
                            int detailtype = (Integer) jobj.get("type");
                            if (detailtype == Constants.PaymentAgainstInvoice) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                                    JSONObject data = arr.getJSONObject(j);
                                    table.setDetails(data.getString("transectionno"));
                                    table.setDate(data.getString("creationdateinuserformat"));
                                    double totalAmount = Double.parseDouble(data.optString("totalamount", "0.0"));
                                    double amountPaid = Double.parseDouble(data.optString("amountpaid", "0.0"));
                                    if(data.has("isCurrencySame") && !data.getBoolean("isCurrencySame")) {
                                        totalAmount = Double.parseDouble(data.optString("documentAmount", "0.0"));
                                        amountPaid = Double.parseDouble(data.optString("paidAmount", "0.0"));
                                    }
                                    table.setDocumentamount(authHandler.formattedCommaSeparatedAmount(totalAmount, companyid));
                                    table.setPaidamount(authHandler.formattedCommaSeparatedAmount(amountPaid, companyid));
                                    tableList.add(table);
//                                    documentTotalAmt+=Double.parseDouble(data.optString("totalamount", "0.0"));
                                    documentTotalAmt+=totalAmount;
                                }
                            } else if (detailtype == Constants.GLPayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                                    JSONObject data = arr.getJSONObject(j);
                                    String taxname = "";
                                    String taxpercent = "";
                                    String invDesc = "Against GL Account " + (data.optString("accountcode", "").equals("") ? "" : data.optString("accountcode", "") + " - ") + data.getString("accountname");
                                    if (!data.optString("taxamount", "0.0").equals("0.0")) {
                                        taxpercent = data.optString("taxpercent", "");
                                        taxname = (data.optString("taxcode", "").equals("") ? "" : data.optString("taxcode", "") + " - ") + data.optString("taxname", "") + (taxpercent.equals("") ? "" : " - (" + taxpercent + "%)");
                                        table.setDetails(invDesc);
                                        table.setPaidamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                        tableList.add(table);

                                        table = new DiamondAviationPaymentVoucherTable();
                                        table.setDetails("&nbsp&nbsp&nbsp&nbsp " + taxname);
                                        table.setPaidamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("taxamount", "0.0"))), companyid));
                                        tableList.add(table);
                                    } else {
                                        table.setDetails(invDesc);
                                        table.setPaidamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                        tableList.add(table);
                                    }
                                }
                            } else if (detailtype == Constants.PaymentAgainstCNDN) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                                    JSONObject data = arr.getJSONObject(j);
                                    table.setDetails(data.getString("transectionno"));
                                    table.setDate(data.getString("creationdate"));
                                    table.setDocumentamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                    table.setPaidamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("cnpaidamount", "0.0"))), companyid));
                                    tableList.add(table);
                                    documentTotalAmt+=Double.parseDouble(data.optString("totalamount", "0.0"));
                                    
//                                    String invDesc = mode == StaticValues.AUTONUM_PAYMENT?"Against Credit Note# ":"Against Debit Note# ";
//                                    invDesc+=data.getString("transectionno") + " dated " + data.getString("creationdate");
                                }
                            } else if (detailtype == Constants.AdvancePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Advance Amount ";
                                    if (data.optBoolean("isrefund", false)) {
                                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                                            invDesc = "Refund/ Deposit Amount against Payment #" + data.optString("transectionno", "");
                                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                                            invDesc = "Refund/ Deposit Amount against Receipt #" + data.optString("transectionno", "");
                                        }
                                    }
                                    invDesc += (mode == StaticValues.AUTONUM_PAYMENT ? " to " : " from ");
                                    if (!data.optString("acccode", "").equals("") && !data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("acccode") + "-" + data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    } else if (!data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    }   // This will add the account name with code and then account holder name with code  

                                    table.setDetails(invDesc);
                                    table.setPaidamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("paidamount", "0.0"))), companyid));
                                    tableList.add(table);
                                }
                            } else if (detailtype == Constants.AdvanceLinkedWithInvoicePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Adjusted Against Invoice# " + data.getString("transectionno") /*
                                             * + " dated " + data.getString("creationdateinuserformat")
                                             */;
//                                    if (data.getString("totalamount").equals(data.getString("amountpaid"))) {
//                                        invDesc += " (Full)";
//                                    }
                                    table.setDetails(invDesc);
                                    table.setDate(data.getString("creationdateinuserformat"));
                                    table.setDocumentamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                    table.setPaidamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("amountpaid", "0.0"))), companyid));
                                    tableList.add(table);
                                    documentTotalAmt+=Double.parseDouble(data.optString("totalamount", "0.0"));
                                }
                            }
                        }

                        if (!obj.optString("bankCharges", "0.0").equals("0.0")) {
                            double bankcharges = Double.parseDouble(obj.getString("bankCharges"));
                            DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                            table.setDetails("Bank Charges");
                            table.setPaidamount(authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            tableList.add(table);
                        }

                        if (!obj.optString("bankInterest", "0.0").equals("0.0")) {
                            double bankInterest = Double.parseDouble(obj.getString("bankInterest"));
                            DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                            table.setDetails("Bank Interest");
                            table.setPaidamount(authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            tableList.add(table);
                        }
                        voucherMap.put("PaymentTable", new JRBeanCollectionDataSource(tableList));
                        voucherMap.put("amount", authHandler.formattedCommaSeparatedAmount(Double.parseDouble(obj.optString("amount", "0")), companyid));
                        voucherMap.put("documentamount", authHandler.formattedCommaSeparatedAmount(documentTotalAmt, companyid));
                        voucherMap.put("currency", obj.optString("currencycode", ""));
                        int detailType = Integer.parseInt(obj.optString("detailtype", "0"));
                        if (detailType == PaymentMethod.TYPE_CASH) {
                            voucherMap.put("paymentmethod", obj.optString("paymentmethod", ""));
                            voucherMap.put("referencenumber", obj.optString("refno", ""));
                        } else if (detailType == PaymentMethod.TYPE_CARD) {
                            voucherMap.put("paymentmethod", obj.optString("paymentmethod", ""));
                            voucherMap.put("referencenumber", obj.optString("refno", ""));
                        } else if (detailType == PaymentMethod.TYPE_BANK) {
                            voucherMap.put("paymentmethod", obj.optString("paymentmethod", ""));
                            voucherMap.put("referencenumber", obj.optString("chequenumber", ""));
                        }
                        response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + obj.optString("billno", "") +"_v1.pdf\"");
                        voucherMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                        InputStream inputStream = new FileInputStream(!StringUtil.isNullObject(jrXmlPath) ? jrXmlPath + "/DiamondAviationPaymentVoucher.jrxml" : request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                        list.add(jasperPrint);
                    } else {
                        /*
                         * Main Section for Payment/Receipt Voucher of Default Template.
                         */
                        JSONObject obj = tempList.get(0);
                        datePojo.setDate(obj.optString("billdateinUserFormat", ""));
                        datePojoList.add(datePojo);
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("image", logo);
                        boolean isLetterHead = false;
                        if (!StringUtil.isNullOrEmpty(request.getParameter("isLetterHead"))) {
                            isLetterHead = Boolean.parseBoolean((String) request.getParameter("isLetterHead"));
                        }
                        voucherMap.put("isLetterHead", isLetterHead && ExportRecordHandler.checkCompanyTemplateLogoPresent(company));
                        voucherMap.put("imagePath", ExportRecordHandler.checkCompanyTemplateLogoPresent(company)?logo:"");
                        voucherMap.put("imagePath2", footer);
                        voucherMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                        voucherMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                        voucherMap.put("COMPANY_PHONE", company.getPhoneNumber() == null ? "" : company.getPhoneNumber());
                        voucherMap.put("COMPANY_FAX", company.getFaxNumber() == null ? "" : company.getFaxNumber());
                        voucherMap.put("COMPANY_EMAIL", company.getEmailID() == null ? "" : company.getEmailID());

                        int paymentwindowtype = (Integer) obj.get("paymentwindowtype");
                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                            LabelValue labelValue = new LabelValue();
                            if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                                if (mode == StaticValues.AUTONUM_PAYMENT) {
                                    labelValue.setLabel("Paid To");
                                labelValue.setValue(obj.optString("paidto", ""));
                                paidToList.add(labelValue);
                                } else if (mode == StaticValues.AUTONUM_RECEIPT) {
                                    voucherMap.put("extraPaidTo", obj.optString("paidto", ""));
                                    labelValue.setLabel("");
                                    labelValue.setValue("");
                                    paidToList.add(labelValue);
                                }
                            } else {
                                labelValue.setLabel(mode == StaticValues.AUTONUM_PAYMENT ? "Paid To" : "Received From");
                                labelValue.setValue(obj.optString("paidto", ""));
                                paidToList.add(labelValue);
                            }
                            labelValue = new LabelValue();
                            labelValue.setLabel("Vendor Code");
                            labelValue.setValue(obj.optString("personcode", ""));
                            paidToList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Vendor Name");
                            labelValue.setValue(obj.optString("personname", ""));
                            customerName = obj.optString("personname", "");
                            paidToList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("");
                            labelValue.setValue(obj.optString("personaddress", ""));
                            paidToList.add(labelValue);
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                            LabelValue labelValue = new LabelValue();
                            if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                                if(mode == StaticValues.AUTONUM_PAYMENT){
                                labelValue.setLabel("Paid To");
                                labelValue.setValue(obj.optString("paidto", ""));
                                paidToList.add(labelValue);
                                }else if(mode == StaticValues.AUTONUM_RECEIPT){
                                    voucherMap.put("extraPaidTo", obj.optString("paidto", ""));
                                    labelValue.setLabel("");
                                    labelValue.setValue("");
                                    paidToList.add(labelValue);
                                }
                            } else {
                                labelValue.setLabel(mode == StaticValues.AUTONUM_PAYMENT ? "Paid To" : "Received From");
                                labelValue.setValue(obj.optString("paidto", ""));
                                paidToList.add(labelValue);
                            }
                            labelValue = new LabelValue();
                            labelValue.setLabel("Customer Code");
                            labelValue.setValue(obj.optString("personcode", ""));
                            paidToList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Customer Name");
                            labelValue.setValue(obj.optString("personname", ""));
                            customerName = obj.optString("personname", "");
                            paidToList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("");
                            labelValue.setValue(obj.optString("personaddress", ""));
                            paidToList.add(labelValue);
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_against_GL_Code) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_against_GL_Code)) {
                            LabelValue labelValue = new LabelValue();
                            if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                                if(mode == StaticValues.AUTONUM_PAYMENT){
                                labelValue.setLabel("Paid To");
                                labelValue.setValue(obj.optString("paidto", ""));
                                paidToList.add(labelValue);
                                }else if(mode == StaticValues.AUTONUM_RECEIPT){
                                    voucherMap.put("extraPaidTo", obj.optString("paidto", ""));
                                    labelValue.setLabel("");
                                    labelValue.setValue("");
                                    paidToList.add(labelValue);
                                }
                            } else {
                                labelValue.setLabel(mode == StaticValues.AUTONUM_PAYMENT ? "Paid To" : "Received From");
                                labelValue.setValue(obj.optString("paidto", ""));
                                paidToList.add(labelValue);
                            }
                            customerName = obj.optString("paidto", "");
                        } else if(paymentwindowtype == 0 && mode == StaticValues.AUTONUM_RECEIPT) {
                            LabelValue labelValue = new LabelValue();
                            labelValue.setLabel("Customer Code");
                            labelValue.setValue(obj.optString("personcode", ""));
                            paidToList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Customer Name");
                            labelValue.setValue(obj.optString("personname", ""));
                            customerName = obj.optString("personname", "");
                            paidToList.add(labelValue);
                        }
                        voucherMap.put("PayToTable", new JRBeanCollectionDataSource(paidToList));
                        /*
                         * Detail Section for Payment/Receipt Voucher of Default Template.
                         */
                        for (int i = 0; i < DataJArr.length(); i++) {
                            jobj = DataJArr.getJSONObject(i);
                            int detailtype = (Integer) jobj.get("type");
                        if (detailtype == Constants.PaymentAgainstInvoice) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    LabelValue labelValue = new LabelValue();
                                    JSONObject data = arr.getJSONObject(j);
                                    String description = data.optString("description", "").equals("") ? "" : "<br>Narration : "+ StringUtil.DecodeText(data.optString("description", ""));
                                    String invDesc = "Against Invoice# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                    if (data.getString("totalamount").equals(data.getString("amountpaid"))) {
                                        invDesc += " (Full)";
                                    }else{
                                          invDesc += " (Part)";
                                    }
                                    labelValue.setLabel(invDesc+description);
                                    labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.getString("enteramount"))), companyid)); //enteramount- in payment currency
                                    labelValue.setExtravalue(data.getString("currencysymbol")+" "+authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.getString("totalamount"))), companyid)); //enteramount- in payment currency
                                    labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                    detailsLabelValueList.add(labelValue);
                                }
                            } else if (detailtype == Constants.GLPayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    LabelValue labelValue = new LabelValue();
                                    JSONObject data = arr.getJSONObject(j);
                                    String taxname = "";
                                    String taxpercent = "";
                                     String invDesc = "";
                                    if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                                        invDesc = data.optString("description", "").equals("") ? "" :  StringUtil.DecodeText(data.optString("description", ""));
                                    } else {
                                        String description = data.optString("description", "").equals("") ? "" : "<br>Narration : "+ StringUtil.DecodeText(data.optString("description", ""));
                                        invDesc = "Against GL Account " + (data.optString("accountcode", "").equals("") ? "" : data.optString("accountcode", "") + " - ") + data.getString("accountname") + description;
                                    }
                                    if (!data.optString("taxamount", "0.0").equals("0.0")) {
                                        taxpercent = data.optString("taxpercent", "");
                                        taxname = (data.optString("taxcode","").equals("")?"":data.optString("taxcode","")+" - ")+data.optString("taxname", "")+(taxpercent.equals("")?"":" - ("+taxpercent+"%)");
                                        labelValue.setLabel(invDesc);
                                        if (MODULE_ID.equalsIgnoreCase(Integer.toString(Constants.Acc_Make_Payment_ModuleId))) {
                                            if (data.optBoolean("debit")) {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                            } else {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount((-Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                            }
                                        } else {
                                            if (data.optBoolean("debit")) {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount(-Double.parseDouble(data.optString("totalamount", "0.0")), companyid));
                                            } else {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount(Double.parseDouble(data.optString("totalamount", "0.0")), companyid));
                                            }
                                        }
                                        //labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                        labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                        detailsLabelValueList.add(labelValue);

                                        labelValue = new LabelValue();
                                        labelValue.setLabel(taxname); // ERP-11746
                                        labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("taxamount", "0.0"))), companyid));
                                        detailsLabelValueList.add(labelValue);
                                    } else {
                                        labelValue.setLabel(invDesc);
                                        if (MODULE_ID.equalsIgnoreCase(Integer.toString(Constants.Acc_Make_Payment_ModuleId))) {
                                            if (data.optBoolean("debit")) {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                            } else {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount((-Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                            }
                                        } else {
                                            if (data.optBoolean("debit")) {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount(-Double.parseDouble(data.optString("totalamount", "0.0")), companyid));
                                            } else {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount(Double.parseDouble(data.optString("totalamount", "0.0")), companyid));
                                            }
                                        }
                                        //labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                        labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                        detailsLabelValueList.add(labelValue);
                                    }
                                }
                            } else if (detailtype == Constants.PaymentAgainstCNDN) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    LabelValue labelValue = new LabelValue();
                                    JSONObject data = arr.getJSONObject(j);
                                    String description = data.optString("description", "").equals("") ? "" : "<br>Narration : "+ StringUtil.DecodeText(data.optString("description", ""));
                                    String invDesc = mode == StaticValues.AUTONUM_PAYMENT?"Against Credit Note# ":"Against Debit Note# ";
                                    invDesc+=data.getString("transectionno") + " dated " + data.getString("creationdate");
                                    if (data.getString("totalamount").equals(data.getString("cnpaidamount"))) {
                                        invDesc += " (Full)";
                                    }
                                    labelValue.setLabel(invDesc + description);
                                    labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.getString("enteramount"))), companyid));
                                    labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                    detailsLabelValueList.add(labelValue);
                                }
                            } else if (detailtype == Constants.AdvancePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    LabelValue labelValue = new LabelValue();
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Advance Amount ";
                                    String description = data.optString("description", "").equals("") ? "" : "<br>Narration : "+ StringUtil.DecodeText(data.optString("description", ""));
                                    if(data.optBoolean("isrefund",false)) {
                                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                                            invDesc = "Refund/ Deposit Amount against Payment #"+data.optString("transectionno","");
                                        }else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                                            invDesc = "Refund/ Deposit Amount against Receipt #"+data.optString("transectionno","");                   
                                        }
                                    }
                                    invDesc+=(mode == StaticValues.AUTONUM_PAYMENT?" to ":" from ");
                                    if (!data.optString("acccode", "").equals("") && !data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("acccode") + "-" + data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    } else if (!data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    }   // This will add the account name with code and then account holder name with code  
                                    labelValue.setLabel(invDesc + description);
                                    labelValue.setValue(authHandler.formattedCommaSeparatedAmount(Double.parseDouble(data.getString("paidamount")), companyid));
                                    labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                    labelValue.setTaxname(data.optString("gstAccountName",""));
                                    labelValue.setTaxamount(data.optString("gstAdvancedTaxAmount",""));
                                    gsttotal += Double.parseDouble(data.optString("gstAdvancedTaxAmount","0"));
                                    detailsLabelValueList.add(labelValue);
                                }
                            }else if (detailtype == Constants.AdvanceLinkedWithInvoicePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    LabelValue labelValue = new LabelValue();
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "&nbsp&nbsp&nbsp&nbsp Adjusted Against Invoice# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                    if (data.getString("totalamount").equals(data.getString("amountpaid"))) {
                                        invDesc += " (Full)";
                                    }
                                    labelValue.setLabel(invDesc);
                                    labelValue.setExtravalue(data.getString("currencysymbol")+" "+authHandler.formattedCommaSeparatedAmount(Double.parseDouble(data.getString("enteramount")), companyid));
                                    labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                    detailsLabelValueList.add(labelValue);
                                }
                            } else if (detailtype == Constants.AdvanceLinkedWithNotePayment) {// In Case Advance Payment/Receipt Linked with Debit Note/Credit Note
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    LabelValue labelValue = new LabelValue();
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "&nbsp&nbsp&nbsp&nbsp Adjusted Against Note# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                    if (data.optString("totalamount","").equals(data.optString("cnpaidamount",""))) {
                                        invDesc += " (Full)";
                                    }
                                    labelValue.setLabel(invDesc);
                                    labelValue.setExtravalue(data.optString("currencysymbol","")+" "+authHandler.formattedCommaSeparatedAmount(Double.parseDouble(data.getString("enteramount")), companyid));
                                    labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                    detailsLabelValueList.add(labelValue);
                                }
                            }
                            else if(onlyOpeningBalanceTransactionsFlag) {
                                    LabelValue labelValue = new LabelValue();
                                    labelValue.setLabel("This is an Opening Receipt");
                                    labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(jobj.optString("enteramount"))), companyid)); //enteramount- in payment currency
                                    detailsLabelValueList.add(labelValue);
                            }
                        }

                        if (!obj.optString("bankCharges", "0.0").equals("0.0")) {
                            double bankcharges = Double.parseDouble(obj.getString("bankCharges"));
                            LabelValue labelValue = new LabelValue();
                            labelValue.setLabel("Bank Charges");
                            labelValue.setValue(authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            detailsLabelValueList.add(labelValue);
                        }

                        if (!obj.optString("bankInterest", "0.0").equals("0.0")) {
                            double bankInterest = Double.parseDouble(obj.getString("bankInterest"));
                            LabelValue labelValue = new LabelValue();
                            labelValue.setLabel("Bank Interest");
                            labelValue.setValue(authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            detailsLabelValueList.add(labelValue);
                        }
                        
                        if(templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                            Collections.sort(detailsLabelValueList);
                        }
                        
                        voucherMap.put("PaymentTable", new JRBeanCollectionDataSource(detailsLabelValueList));
                        voucherMap.put("remark", obj.optString("memo", ""));
                        voucherMap.put("amountInWords", obj.optString("amountInWords", ""));
                        voucherMap.put("amount", authHandler.formattedCommaSeparatedAmount(Double.parseDouble(obj.optString("amount", "0")), companyid));
                        voucherMap.put("currency", accCommonTablesDAO.getCustomCurrencyCode(obj.optString("currencycode", ""),companyid));
                        voucherMap.put("preparedBy", obj.optString("createdby", ""));
                        voucherMap.put("number", obj.optString("billno", ""));
                        int detailType = Integer.parseInt(obj.optString("detailtype", "0"));
                        if (detailType == PaymentMethod.TYPE_CASH) {
                            LabelValue labelValue = new LabelValue();
                            labelValue.setLabel("Payment Method");labelValue.setValue("Cash - " + obj.optString("paymentmethod", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Currency");labelValue.setValue(obj.optString("currencyname", ""));
                            labelValueList.add(labelValue);
                        } else if (detailType == PaymentMethod.TYPE_CARD) {
                            LabelValue labelValue = new LabelValue();
                            labelValue.setLabel("Payment Method");labelValue.setValue("Card - " + obj.optString("paymentmethod", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Card Holder Name");labelValue.setValue(obj.optString("refname", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Reference Number");labelValue.setValue(obj.optString("refno", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Card Number");labelValue.setValue(obj.optString("refcardno", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Currency");labelValue.setValue(obj.optString("currencyname", ""));
                            labelValueList.add(labelValue);
                        } else if (detailType == PaymentMethod.TYPE_BANK) {
                            LabelValue labelValue = new LabelValue();
                            labelValue.setLabel("Payment Method");labelValue.setValue("Bank - " + obj.optString("paymentmethod", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Bank Name");labelValue.setValue(obj.optString("bankname", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Cheque Number");labelValue.setValue(obj.optString("chequenumber", ""));
                            chequeNo = obj.optString("chequenumber", "");
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Cheque Date");labelValue.setValue(obj.optString("chequedate", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Currency");labelValue.setValue(obj.optString("currencyname", ""));
                            labelValueList.add(labelValue);
                        }
                        if (templateflag == Constants.sms_templateflag) {
                            String title="";
                            if(detailType == PaymentMethod.TYPE_CASH){
                                title="PETTY CASH VOUCHER";
                            }else if(paymentwindowtype == Constants.Make_Payment_against_GL_Code){
                                title="PAYMENT VOUCHER(GL)";
                            }else{
                                title="PAYMENT VOUCHER";
                            }
                            voucherMap.put("headerLabel", title);
                            voucherMap.put("footerflag", true);
                            voucherMap.put("numberLabel", mode == StaticValues.AUTONUM_PAYMENT ? "Voucher Number" : "Receipt Number");
                            voucherMap.put("dateLabel", mode == StaticValues.AUTONUM_PAYMENT ? "Payment Date" : "Receipt Date");
                            voucherMap.put("footerflag", true);
                            voucherMap.put("UEN", companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                            voucherMap.put("GSTREGNUMBER", companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                            
                            List<String> dimensionList = new ArrayList<String>();
                            List<String> dimensionValueList = new ArrayList<String>();
                            List<String> colonList = new ArrayList<String>();
                            
                            Iterator iter = obj.keys();
                            while (iter.hasNext()) {
                                String key = (String) iter.next();
                                if (key.startsWith("Dimension_")) {
                                    dimensionList.add(key.split("_")[1]);
                                    dimensionValueList.add(obj.getString(key));
                                    colonList.add(":");
                                }
                            }
                                
                                String dimensionLable = "";
                                for (String dimesion : dimensionList) {
                                    dimensionLable += dimesion + "<br>";
                                }
                                voucherMap.put("dimentionName", dimensionLable);

                                String dimensionValue = "";
                                for (String dimesionValue : dimensionValueList) {
                                    dimensionValue += dimesionValue + "<br>";
                                }
                                voucherMap.put("classDimension", dimensionValue);

                                String colon = "";
                                for (String col : colonList) {
                                    colon += col + "<br>";
                                }
                                voucherMap.put("colon", colon);
                            
                        }
                        filename=filename + obj.optString("billno", "") +"_v1.pdf";
                        filename= filename.replaceAll(" ", "_");
                        voucherMap.put("PaymentMethodTable", new JRBeanCollectionDataSource(labelValueList));
                        voucherMap.put("chequeNo", chequeNo);   //For BestSafety Receipt Voucher Template
                        voucherMap.put("name", customerName);   //For BestSafety Receipt Voucher Template
                        response.setHeader("Content-Disposition", "attachment;filename=\""+ filename +"\"");
                        voucherMap.put("subtotal", authHandler.formattedCommaSeparatedAmount((Double.parseDouble(obj.optString("amount", "0"))-gsttotal), companyid));
                        voucherMap.put("gsttotal", authHandler.formattedCommaSeparatedAmount(gsttotal, companyid));
//                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") +"/DefaultPaymentVoucherForVHQ.jrxml");
                        String jrxmlFileName="";
                        if(templateflag==Constants.sms_templateflag){
                            jrxmlFileName="/DefaultPaymentVoucherForSMS.jrxml";
                        }else if(templateflag==Constants.TID_templateflag||templateflag==Constants.TID_Subdomain_templateflag||templateflag==Constants.TIDR_Subdomain_templateflag||templateflag==Constants.CUSCADEN_Subdomain_templateflag||templateflag==Constants.CAMBORNE_Subdomain_templateflag||templateflag==Constants.MITSUI_Subdomain_templateflag){
                            jrxmlFileName="/DefaultPaymentVoucherForTID.jrxml";
                        }else if(templateflag==Constants.vhqpost_tempalteflag){
                            jrxmlFileName="/DefaultPaymentVoucherForVHQ.jrxml";
                        }else if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                            jrxmlFileName="/F1recreationPaymentVoucher.jrxml";
                        }else if (mode == StaticValues.AUTONUM_RECEIPT && templateflag == Constants.BestSafety_templateflag) {
                            jrxmlFileName="/BestSafetyReceiptVoucher.jrxml";
                        }else{
                            if(company.getCountry()!=null && "137".equals(company.getCountry().getID()) && mode == StaticValues.AUTONUM_RECEIPT) {
                                jrxmlFileName="/DefaultPaymentVoucherForMalaysians.jrxml";
                            } else {
                                jrxmlFileName="/DefaultPaymentVoucher.jrxml";
                            }
                        }
                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") +jrxmlFileName);
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                        list.add(jasperPrint);
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
   
     @Override
    public List<Object> exportDefaultPaymentVoucher(JSONObject jsonObj) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String paymentId = "";
        String recordIDs = jsonObj.optString("recordids") != null ? jsonObj.optString("recordids") : "";
        /*
         * isExportPayment is true if export record from entry form 
         */ 
        boolean exportRecord = jsonObj.optString("isExportPayment")!= null ? Boolean.parseBoolean(jsonObj.optString("isExportPayment").toString()) : false;
        String recArray[] = recordIDs.split(",");
        Map<String, Object> globalVoucherMap = new HashMap<String, Object>();
        int counter = 0;
        double gsttotal = 0;
        String MODULE_ID=jsonObj.optString("moduleid");
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    counter++;
                    paymentId = s;

                    if (StringUtil.isNullOrEmpty(paymentId)) {
                        paymentId = jsonObj.optString("bills") != null ? jsonObj.optString("bills") : "";
                    }
                    String customerName = "";
                    String chequeNo = "";
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<LabelValue> paidToList = new ArrayList<LabelValue>();
                    ArrayList<LabelValue> labelValueList = new ArrayList<LabelValue>();
                    ArrayList<LabelValue> detailsLabelValueList = new ArrayList<LabelValue>();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    Map<String, Object> voucherMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONObject jobj = new JSONObject();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                    int mode = Integer.parseInt(jsonObj.optString("mode"));
                    int templateflag = Integer.parseInt(jsonObj.optString("templateflag"));
                    String companyid = (jsonObj.optString(Constants.companyids) != null) ? jsonObj.optString(Constants.companyids) : jsonObj.optString(Constants.companyKey);
                    String gcurrencyid ="";
                            if(jsonObj.optString(Constants.globalCurrencyKey) != null){
                                gcurrencyid=jsonObj.optString(Constants.globalCurrencyKey); 
                             } 
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    KwlReturnObject compaccresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(),jsonObj.optString(Constants.companyKey));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compaccresult.getEntityList().get(0);
                    String filename="";
                    if (mode == StaticValues.AUTONUM_PAYMENT) {
                        HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(jsonObj);
                        requestParams.put(Constants.billid, paymentId);
                        jsonObj.put(Constants.companyKey, companyid);
                        jsonObj.put(Constants.globalCurrencyKey, gcurrencyid);
                        requestParams.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                        requestParams.put("exportRecord", exportRecord);
                        result = accVendorPaymentDAO.getPayments(requestParams);
                        tempList = accVendorPaymentServiceDAOobj.getPaymentsJsonNew(requestParams, result.getEntityList(), tempList);
                        requestParams.put("dateformat", authHandler.getDateOnlyFormat());
                        //requestParams.put("userdateformat", authHandler.getUserDateFormatterWithoutTimeZone(request));
                        requestParams.put("userdateformat", jsonObj.optString(Constants.userdateformat));
                        requestParams.put("bills", paymentId.split(","));
                        DataJArr = accVendorPaymentServiceDAOobj.getPaymentDetailJsonNew(requestParams);
                        if( templateflag == Constants.Diamond_Aviation_templateflag){
                              voucherMap.put("headerLabel", "Remittance Advice");
                         } else{
                              voucherMap.put("headerLabel", "PAYMENT VOUCHER");
                         }
                        voucherMap.put("numberLabel", "Voucher #");
                        filename=(templateflag==Constants.Diamond_Aviation_templateflag)?"RemittanceAdvice_":"PaymentVoucher_";
                    }else if (mode == StaticValues.AUTONUM_RECEIPT) {
                        JSONObject paramJobj = jsonObj;
                        HashMap<String, Object> requestParams = accReceiptServiceDAOobj.getReceiptRequestMapJSON(paramJobj);
                        requestParams.put(Constants.billid, paymentId);
                        
                        //request.setAttribute(Constants.companyKey, companyid);
                        //request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                        //request.setAttribute("bills", paymentId);
                        paramJobj.put(Constants.companyKey, companyid);
                        paramJobj.put(Constants.globalCurrencyKey, gcurrencyid);
                        paramJobj.put("bills", paymentId);
                        
                        
                        requestParams.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                        requestParams.put("exportRecord", exportRecord);
                        result = accReceiptDAOobj.getReceipts(requestParams);
                        
                        tempList = accReceiptServiceDAOobj.getReceiptJson(paramJobj, result.getEntityList(), tempList);
                        requestParams.put("dateformat", authHandler.getDateOnlyFormat());
                        JSONObject tempobj = accReceiptServiceDAOobj.getReceiptRowsJSONNew(paramJobj);
                        
                        DataJArr=tempobj.getJSONArray("data");
                          if( templateflag == Constants.F1RecreationLeasing_templateflag || templateflag == Constants.F1Recreation_templateflag ){
                              voucherMap.put("headerLabel", "RECEIPT VOUCHER");
                         }else if( templateflag == Constants.Diamond_Aviation_templateflag){
                              voucherMap.put("headerLabel", "Official Receipt");
                         } else{
                              voucherMap.put("headerLabel", "PAYMENT RECEIPT");
                         }
                        voucherMap.put("numberLabel", "Receipt #");
                        filename=(templateflag==Constants.Diamond_Aviation_templateflag)?"OfficialReceipt_":"PaymentReceipt_";
                    }
                    
                    if (templateflag == Constants.lsh_templateflag) {
                        ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
                        JSONObject obj = tempList.get(0);
                        String codelabel = "";
                        String codevalue = "";
                        String personlabel = "";
                        String personvalue = "";
                        int paymentwindowtype = (Integer) obj.get("paymentwindowtype");
                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                            codelabel = "Vendor Code";
                            codevalue = obj.optString("personcode", "");
                            personlabel = "Vendor Name";
                            personvalue = obj.optString("personname", "");
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                            codelabel = "Customer Code";
                            codevalue = obj.optString("personcode", "");
                            personlabel = "Customer Name";
                            personvalue = obj.optString("personname", "");
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_against_GL_Code) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_against_GL_Code)) {
                            codelabel = "Applicant";
                            codevalue = obj.optString("createdby", "");
                            personlabel = mode == StaticValues.AUTONUM_PAYMENT ? "Payment To" : "Payment From";
                            personvalue = obj.optString("paidto", "");
                        }
                        voucherMap.put("PayToTable", new JRBeanCollectionDataSource(paidToList));
                        int srnumber = 0;
                        for (int i = 0; i < DataJArr.length(); i++) {
                            jobj = DataJArr.getJSONObject(i);
                            int detailtype = (Integer) jobj.get("type");
                            if (detailtype == Constants.PaymentAgainstInvoice) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = (mode == StaticValues.AUTONUM_PAYMENT ? "Payment Made Against Vendor Invoice # " : "Payment Received Against Customer Invoice # ") + data.getString("transectionno");
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.GLPayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Against GL Account " + (data.optString("accountcode", "").equals("") ? "" : data.optString("accountcode", "") + " - ") + data.getString("accountname");
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("totalamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("taxamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(((data.optDouble("totalamount", 0.0)) + data.optDouble("taxamount", 0.0)), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.PaymentAgainstCNDN) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = (mode == StaticValues.AUTONUM_PAYMENT ? "Payment Made Against Credit Note # " : "Payment Received Against Debit Note # ") + data.getString("transectionno");
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.AdvancePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Advance Amount ";
                                    if(data.optBoolean("isrefund",false)) {
                                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                                            invDesc = "Refund/ Deposit Amount against Payment #"+data.optString("transectionno","");
                                        }else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                                            invDesc = "Refund/ Deposit Amount against Receipt #"+data.optString("transectionno","");                   
                                        }
                                    }
                                    invDesc += (mode == StaticValues.AUTONUM_PAYMENT ? " to " : " from ");
                                    if (!data.optString("acccode", "").equals("") && !data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("acccode") + "-" + data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    } else if (!data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    }   // This will add the account name with code and then account holder name with code  
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("paidamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("paidamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.AdvanceLinkedWithInvoicePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "&nbsp&nbsp&nbsp&nbsp Adjusted Against Invoice# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                    if (data.getString("totalamount").equals(data.getString("amountpaid"))) {
                                        invDesc += " (Full)";
                                    }
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno("");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount("");
                                    ferrateGroupPaymentVoucherTable.setGstamount("");
                                    ferrateGroupPaymentVoucherTable.setTotalamount("");
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            }
                        }

                        if (!obj.optString("bankCharges", "0.0").equals("0.0")) {
                            double bankcharges = Double.parseDouble(obj.getString("bankCharges"));
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                            ferrateGroupPaymentVoucherTable.setDesc("Bank Charges");
                            ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        }

                        if (!obj.optString("bankInterest", "0.0").equals("0.0")) {
                            double bankInterest = Double.parseDouble(obj.getString("bankInterest"));
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                            ferrateGroupPaymentVoucherTable.setDesc("Bank Interest");
                            ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        }

                        datePojo.setDate(obj.optString("billdateinUserFormat", ""));
                        datePojoList.add(datePojo);
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        
                        if (counter % 2 == 1) {
                            voucherMap.put("logo", logo);
                            voucherMap.put("footer", footer);
                            voucherMap.put("name", codevalue);
                            voucherMap.put("nametitle", codelabel);
                            voucherMap.put("title", mode == StaticValues.AUTONUM_PAYMENT ? "Payment Voucher" : "Receipt of Payment");
                            voucherMap.put("number", obj.optString("billno", ""));
                            voucherMap.put("type", mode == StaticValues.AUTONUM_PAYMENT ? "Voucher Number" : "Receipt Number");
                            voucherMap.put("to", personlabel);
                            voucherMap.put("paymentto", personvalue);
                            voucherMap.put("approver", "");
                            voucherMap.put("date", obj.optString("billdateinUserFormat", ""));
                            voucherMap.put("totalamount", obj.optString("currencyname", "") + " " + authHandler.formattedCommaSeparatedAmount(Double.parseDouble(obj.optString("amount", "0")), companyid));
                            voucherMap.put("PettyCashVoucherSubReportData", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));
                            globalVoucherMap = voucherMap;
                        } else {
                            globalVoucherMap.put("name_1", codevalue);
                            globalVoucherMap.put("number_1", obj.optString("billno", ""));
                            globalVoucherMap.put("paymentto_1", personvalue);
                            globalVoucherMap.put("approver_1", "");
                            globalVoucherMap.put("date_1", obj.optString("billdateinUserFormat", ""));
                            globalVoucherMap.put("totalamount_1", obj.optString("currencyname", "") + " " + authHandler.formattedCommaSeparatedAmount(Double.parseDouble(obj.optString("amount", "0")), companyid));
                            globalVoucherMap.put("PettyCashVoucherSubReportData_1", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));
                        }
                        
                        if (counter==recArray.length || counter % 2 == 0) {
                        //    response.setHeader("Content-Disposition", "attachment;filename=" + filename + obj.optString("billno", "") +"_v1.pdf");
//                            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LSHPaymentVoucher.jrxml");
                            InputStream inputStream = new FileInputStream(jsonObj.optString(Constants.JRXML_REAL_PATH_KEY) + "/LSHPaymentVoucherOneByTwo.jrxml");
                            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
//                            jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                            jasperPrint = JasperFillManager.fillReport(jasperReport, globalVoucherMap, beanColDataSource);
                            list.add(jasperPrint);
                        } else {
                            continue;
                        }
                    }else if (templateflag>=Constants.TID_Subdomain_templateflag && templateflag <= Constants.MITSUI_Subdomain_templateflag && mode == StaticValues.AUTONUM_PAYMENT) {//For Tid templates Payment Vaoucher
                        ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
                        JSONObject obj = tempList.get(0);
                        String codelabel = "";
                        String codevalue = "";
                        String personlabel = "";
                        String personvalue = "";
                        Boolean aginstGL=false;
                        int paymentwindowtype = (Integer) obj.get("paymentwindowtype");
                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                            codelabel = "Vendor Code";
                            codevalue = obj.optString("personcode", "");
                            personlabel = "Vendor Name";
                            personvalue = obj.optString("personname", "")+"<br>"+obj.optString("personaddress", "");
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                            codelabel = "Customer Code";
                            codevalue = obj.optString("personcode", "");
                            personlabel = "Customer Name";
                            personvalue = obj.optString("personname", "")+"<br>"+obj.optString("personaddress", "");
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_against_GL_Code) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_against_GL_Code)) {
                            codelabel = "Applicant";
                            codevalue = obj.optString("createdby", "");
                            personlabel = mode == StaticValues.AUTONUM_PAYMENT ? "Payment To" : "Payment From";
                            personvalue = obj.optString("paidto", "");
                        }
                        voucherMap.put("PayToTable", new JRBeanCollectionDataSource(paidToList));
                        int srnumber = 0;
                        for (int i = 0; i < DataJArr.length(); i++) {
                            jobj = DataJArr.getJSONObject(i);
                            int detailtype = (Integer) jobj.get("type");
                            if (detailtype == Constants.PaymentAgainstInvoice) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String dimensions=getDimensionString(data); //get dimension String
                                    String invDesc = (mode == StaticValues.AUTONUM_PAYMENT ? "Payment Made Against Vendor Invoice # " : "Payment Received Against Customer Invoice # ") + data.getString("transectionno")+" dated "+ data.getString("creationdateinuserformat")+dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.GLPayment) {
                                aginstGL = true;
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String type = ""; //ERP-10876
                                    if (data.optBoolean("debit", false)) {
                                        type = "Type : Debit";
                                    } else {
                                        type = "Type : Credit";
                                    }
                                    String dimensions=getDimensionString(data); //get dimension String
                                    String invDesc ="<br>"+data.optString("accountcode","")  +" "+ data.optString("accountname","")+"<br>"+type+"<br>Narration : " +  StringUtil.DecodeText(data.optString("description", "")) +dimensions; // ERP-10904
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc.replaceAll("-", " - "));
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("totalamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("taxamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(((data.optDouble("totalamount", 0.0)) + data.optDouble("taxamount", 0.0)), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.PaymentAgainstCNDN) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String dimensions=getDimensionString(data); //get dimension String
                                    String invDesc = (mode == StaticValues.AUTONUM_PAYMENT ? "Payment Made Against Credit Note # " : "Payment Received Against Debit Note # ") + data.getString("transectionno") + " dated "+ data.getString("creationdate")+dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.AdvancePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Advance Amount ";
                                    if(data.optBoolean("isrefund",false)) {
                                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                                            invDesc = "Refund/ Deposit Amount against Payment #"+data.optString("transectionno","");
                                        }else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                                            invDesc = "Refund/ Deposit Amount against Receipt #"+data.optString("transectionno","");                   
                                        }
                                    }
                                    invDesc += (mode == StaticValues.AUTONUM_PAYMENT ? " to " : " from ");
                                    if (!data.optString("acccode", "").equals("") && !data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("acccode") + "-" + data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    } else if (!data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    }   // This will add the account name with code and then account holder name with code 
                                    String dimensions=getDimensionString(data); //get dimension String
                                    invDesc += dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("paidamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("paidamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.AdvanceLinkedWithInvoicePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "&nbsp&nbsp&nbsp&nbsp Adjusted Against Invoice# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                    if (data.getString("totalamount").equals(data.getString("amountpaid"))) {
                                        invDesc += " (Full)";
                                    }
                                    String dimensions = getDimensionString(data); //get dimension String
                                    invDesc += dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno("");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount("");
                                    ferrateGroupPaymentVoucherTable.setGstamount("");
                                    ferrateGroupPaymentVoucherTable.setTotalamount("");
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            }
                        }

                        if (!obj.optString("bankCharges", "0.0").equals("0.0")) {
                            double bankcharges = Double.parseDouble(obj.getString("bankCharges"));
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                            ferrateGroupPaymentVoucherTable.setDesc("Bank Charges");
                            ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        }

                        if (!obj.optString("bankInterest", "0.0").equals("0.0")) {
                            double bankInterest = Double.parseDouble(obj.getString("bankInterest"));
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                            ferrateGroupPaymentVoucherTable.setDesc("Bank Interest");
                            ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        }
                        String companyregno = "";
                   switch(templateflag){
                     case Constants.TID_Subdomain_templateflag:
                           companyregno = "196600206D";
                            break;
                    case Constants.TIDR_Subdomain_templateflag:
                           companyregno = "201022916C";
                            break;
                    case Constants.CUSCADEN_Subdomain_templateflag:
                           companyregno = "200007357R";
                            break;
                    case Constants.TCD_Subdomain_templateflag:
                           companyregno = "199608145R";
                            break;
                    case Constants.CAMBORNE_Subdomain_templateflag:
                           companyregno = "199509073K";
                            break;
                    case Constants.MITSUI_Subdomain_templateflag:
                           companyregno = "198101129R";
                            break;
                 }   
                    String chequeNumber = "";
                    int detailType = Integer.parseInt(obj.optString("detailtype", "0"));
                        if (detailType == PaymentMethod.TYPE_CASH) {
                           
                                  chequeNumber =   obj.optString("paymentmethod", "");
                           
                            
                        } else if (detailType == PaymentMethod.TYPE_CARD) {
                            
                            chequeNumber =  obj.optString("paymentmethod", "");
                             
                        } else if (detailType == PaymentMethod.TYPE_BANK) {
                            
                             chequeNumber = obj.optString("chequenumber", "");
                            
                        }
                        datePojo.setDate(obj.optString("billdateinUserFormat", ""));
                        datePojoList.add(datePojo);
                    
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("logo", logo);
                        voucherMap.put("footer", footer);
                        voucherMap.put("name", codevalue);
                        voucherMap.put("customercode", codelabel);
                        voucherMap.put("title", mode == StaticValues.AUTONUM_PAYMENT ? "Payment Voucher" : "Receipt of Payment");
                        voucherMap.put("number", obj.optString("billno", ""));
                        voucherMap.put("type", mode == StaticValues.AUTONUM_PAYMENT ? "Voucher Number" : "Receipt Number");
                        voucherMap.put("to", personlabel);
                        voucherMap.put("paymentto", personvalue);
                        voucherMap.put("approver", "");
                        voucherMap.put("date", obj.optString("billdateinUserFormat", ""));
                        voucherMap.put("remark", obj.optString("memo", ""));
                        voucherMap.put("companyregistrationno",companyregno);
                        voucherMap.put("againstGLCodeFlag",aginstGL);
                        voucherMap.put("bankAccountDetails","To : "+obj.optString("paymentaccountnumber",""));//ERP-10877
                        voucherMap.put("chequeDetails","We attach herewith our cheque No. " + chequeNumber + " in settlement of :-");
                        voucherMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                        voucherMap.put("amountInWords", obj.optString("amountInWords", ""));
                        voucherMap.put("totalamount", obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(Double.parseDouble(obj.optString("amount", "0")), companyid));                      
                      //  response.setHeader("Content-Disposition", "attachment;filename=" + filename + obj.optString("billno", "") +"_v1.pdf");
                        InputStream SubReportInputStream = new FileInputStream(jsonObj.optString(Constants.JRXML_REAL_PATH_KEY) + "/TIDPaymentVoucherSubReport.jrxml");
                        JasperDesign SubReportJasperDesign = JRXmlLoader.load(SubReportInputStream);
                        JasperReport SubReport = JasperCompileManager.compileReport(SubReportJasperDesign);                
                        voucherMap.put("PaymentVoucherSubReport", SubReport);
                        voucherMap.put("PaymentVoucherSubReportData", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));
                        InputStream inputStream = new FileInputStream(jsonObj.optString(Constants.JRXML_REAL_PATH_KEY) + "/TIDPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                        list.add(jasperPrint);
                    } else if (templateflag >= Constants.TID_Subdomain_templateflag && templateflag <= Constants.MITSUI_Subdomain_templateflag && mode == StaticValues.AUTONUM_RECEIPT) {//For Tid templates Payment Vaoucher
                        ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
                        JSONObject obj = tempList.get(0);
                        String codelabel = "";
                        String codevalue = "";
                        String personlabel = "";
                        String personvalue = "";
                        Boolean aginstGL = false;
                        int paymentwindowtype = (Integer) obj.get("paymentwindowtype");
                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                            codelabel = "Vendor Code";
                            codevalue = obj.optString("personcode", "");
                            personlabel = "Vendor Name";
                            personvalue = obj.optString("personname", "") + "<br>" + obj.optString("personaddress", "");
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                            codelabel = "Customer Code";
                            codevalue = obj.optString("personcode", "");
                            personlabel = "Customer Name";
                            personvalue = obj.optString("personname", "") + "<br>" + obj.optString("personaddress", "");
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_against_GL_Code) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_against_GL_Code)) {
                            codelabel = "Applicant";
                            codevalue = obj.optString("createdby", "");
                            personlabel = mode == StaticValues.AUTONUM_PAYMENT ? "Payment To" : "Payment From";
                            personvalue = obj.optString("paidto", "");
                        }
                        voucherMap.put("PayToTable", new JRBeanCollectionDataSource(paidToList));
                        int srnumber = 0;
                        for (int i = 0; i < DataJArr.length(); i++) {
                            jobj = DataJArr.getJSONObject(i);
                            int detailtype = (Integer) jobj.get("type");
                            if (detailtype == Constants.PaymentAgainstInvoice) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String dimensions=getDimensionString(data); //get dimension String
                                    String invDesc = (mode == StaticValues.AUTONUM_PAYMENT ? "Payment Made Against Vendor Invoice # " : "Payment Received Against Customer Invoice # ") + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat")+dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.GLPayment) {
                                aginstGL = true;
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String type = "";//ERP-10876
                                    if (data.optBoolean("debit", false)) {
                                        type = "Type : Debit";
                                    } else {
                                        type = "Type : Credit";
                                    }
                                    String dimensions = getDimensionString(data); //get dimension String
                                    String invDesc = "<br>" + data.optString("accountcode", "") + " " + data.optString("accountname", "") + "<br>" + type + "<br>Narration : " +  StringUtil.DecodeText(data.optString("description", "")) + dimensions; // ERP-10904
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("totalamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("taxamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(((data.optDouble("totalamount", 0.0)) + data.optDouble("taxamount", 0.0)), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.PaymentAgainstCNDN) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String dimensions=getDimensionString(data); //get dimension String
                                    String invDesc = (mode == StaticValues.AUTONUM_PAYMENT ? "Payment Made Against Credit Note # " : "Payment Received Against Debit Note # ") + data.getString("transectionno") + " dated " + data.getString("creationdate")+dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("enteramount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.AdvancePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Advance Amount ";
                                    if (data.optBoolean("isrefund", false)) {
                                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                                            invDesc = "Refund/ Deposit Amount against Payment #" + data.optString("transectionno", "");
                                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                                            invDesc = "Refund/ Deposit Amount against Receipt #" + data.optString("transectionno", "");
                                        }
                                    }
                                    invDesc += (mode == StaticValues.AUTONUM_PAYMENT ? " to " : " from ");
                                    if (!data.optString("acccode", "").equals("") && !data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("acccode") + "-" + data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    } else if (!data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    }   // This will add the account name with code and then account holder name with code  
                                    String dimensions=getDimensionString(data); //get dimension String
                                    invDesc += dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("paidamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                                    ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(data.optDouble("paidamount", 0.0), companyid));
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            } else if (detailtype == Constants.AdvanceLinkedWithInvoicePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "&nbsp&nbsp&nbsp&nbsp Adjusted Against Invoice# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                    if (data.getString("totalamount").equals(data.getString("amountpaid"))) {
                                        invDesc += " (Full)";
                                    }
                                    String dimensions=getDimensionString(data); //get dimension String
                                    invDesc+=dimensions;
                                    FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                                    ferrateGroupPaymentVoucherTable.setSno("");
                                    ferrateGroupPaymentVoucherTable.setDesc(invDesc);
                                    ferrateGroupPaymentVoucherTable.setAmount("");
                                    ferrateGroupPaymentVoucherTable.setGstamount("");
                                    ferrateGroupPaymentVoucherTable.setTotalamount("");
                                    ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                                    ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                                }
                            }
                        }

                        if (!obj.optString("bankCharges", "0.0").equals("0.0")) {
                            double bankcharges = Double.parseDouble(obj.getString("bankCharges"));
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                            ferrateGroupPaymentVoucherTable.setDesc("Bank Charges");
                            ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        }

                        if (!obj.optString("bankInterest", "0.0").equals("0.0")) {
                            double bankInterest = Double.parseDouble(obj.getString("bankInterest"));
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setSno(++srnumber + ".");
                            ferrateGroupPaymentVoucherTable.setDesc("Bank Interest");
                            ferrateGroupPaymentVoucherTable.setAmount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setTotalamount(obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(obj.optString("currencycode", ""));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        }
                        String companyregno = "";
                        switch (templateflag) {
                            case Constants.TID_Subdomain_templateflag:
                                companyregno = "196600206D";
                                break;
                            case Constants.TIDR_Subdomain_templateflag:
                                companyregno = "201022916C";
                                break;
                            case Constants.CUSCADEN_Subdomain_templateflag:
                                companyregno = "200007357R";
                                break;
                            case Constants.TCD_Subdomain_templateflag:
                                companyregno = "199608145R";
                                break;
                            case Constants.CAMBORNE_Subdomain_templateflag:
                                companyregno = "199509073K";
                                break;
                            case Constants.MITSUI_Subdomain_templateflag:
                                companyregno = "198101129R";
                                break;
                        }
                        String chequeNumber = "";
                        int detailType = Integer.parseInt(obj.optString("detailtype", "0"));
                        if (detailType == PaymentMethod.TYPE_CASH) {

                            chequeNumber = obj.optString("paymentmethod", "");


                        } else if (detailType == PaymentMethod.TYPE_CARD) {

                            chequeNumber = obj.optString("paymentmethod", "");

                        } else if (detailType == PaymentMethod.TYPE_BANK) {

                            chequeNumber = obj.optString("chequenumber", "");

                        }
                        datePojo.setDate(obj.optString("billdateinUserFormat", ""));
                        datePojoList.add(datePojo);

                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("logo", logo);
                        voucherMap.put("footer", footer);
                        voucherMap.put("name", codevalue);
                        voucherMap.put("customercode", codelabel);
                        voucherMap.put("title", mode == StaticValues.AUTONUM_PAYMENT ? "Payment Voucher" : "Receipt of Payment");
                        voucherMap.put("number", obj.optString("billno", ""));
                        voucherMap.put("type", mode == StaticValues.AUTONUM_PAYMENT ? "Voucher Number" : "Receipt Number");
                        voucherMap.put("to", personlabel);
                        voucherMap.put("paymentto", personvalue);
                        voucherMap.put("approver", "");
                        voucherMap.put("date", obj.optString("billdateinUserFormat", ""));
                        voucherMap.put("remark", obj.optString("memo", ""));
                        voucherMap.put("companyregistrationno", companyregno);
                        voucherMap.put("againstGLCodeFlag", aginstGL);
                        voucherMap.put("bankAccountDetails","From : "+obj.optString("paymentaccountnumber",""));    //ERP-10877
                        voucherMap.put("chequeDetails", "We attach herewith our cheque No. " + chequeNumber + " in settlement of :-");
                        voucherMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                        voucherMap.put("amountInWords", obj.optString("amountInWords", ""));
                        voucherMap.put("totalamount", obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount((Double.parseDouble(obj.optString("amount", "0"))), companyid));
                     //   response.setHeader("Content-Disposition", "attachment;filename=" + filename + obj.optString("billno", "") +"_v1.pdf");
                        
                        InputStream SubReportInputStream = new FileInputStream(jsonObj.optString(Constants.JRXML_REAL_PATH_KEY) + "/TIDPaymentVoucherSubReport.jrxml");
                        JasperDesign SubReportJasperDesign = JRXmlLoader.load(SubReportInputStream);
                        JasperReport SubReport = JasperCompileManager.compileReport(SubReportJasperDesign);
                        voucherMap.put("PaymentVoucherSubReport", SubReport);
                        voucherMap.put("PaymentVoucherSubReportData", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));
                        InputStream inputStream = new FileInputStream(jsonObj.optString(Constants.JRXML_REAL_PATH_KEY) + "/TIDPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                        list.add(jasperPrint);
                    } else if (templateflag == Constants.Diamond_Aviation_templateflag) {
                        double documentTotalAmt=0;
                        ArrayList<DiamondAviationPaymentVoucherTable> tableList = new ArrayList<DiamondAviationPaymentVoucherTable>();
                        JSONObject obj = tempList.get(0);
                        datePojo.setDate(obj.optString("billdateinUserFormat", ""));
                        datePojoList.add(datePojo);
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("imagePath", logo);

                        int paymentwindowtype = (Integer) obj.get("paymentwindowtype");
                        voucherMap.put("name", obj.optString("personname", ""));
                        voucherMap.put("code", obj.optString("personcode", ""));
                        voucherMap.put("codelabel", mode == StaticValues.AUTONUM_PAYMENT ? "Creditor Code":"Customer Code");
                        voucherMap.put("ispayment", mode == StaticValues.AUTONUM_PAYMENT ? true : false);
                        voucherMap.put("address", obj.optString("personaddress", ""));
                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_against_GL_Code) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_against_GL_Code)) {
                            voucherMap.put("name", obj.optString("paidto", ""));
                        }
                        for (int i = 0; i < DataJArr.length(); i++) {
                            jobj = DataJArr.getJSONObject(i);
                            int detailtype = (Integer) jobj.get("type");
                            if (detailtype == Constants.PaymentAgainstInvoice) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                                    JSONObject data = arr.getJSONObject(j);
                                    table.setDetails(data.getString("transectionno"));
                                    table.setDate(data.getString("creationdateinuserformat"));
                                    double totalAmount = Double.parseDouble(data.optString("totalamount", "0.0"));
                                    double amountPaid = Double.parseDouble(data.optString("amountpaid", "0.0"));
                                    if(data.has("isCurrencySame") && !data.getBoolean("isCurrencySame")) {
                                        totalAmount = Double.parseDouble(data.optString("documentAmount", "0.0"));
                                        amountPaid = Double.parseDouble(data.optString("paidAmount", "0.0"));
                                    }
                                    table.setDocumentamount(authHandler.formattedCommaSeparatedAmount(totalAmount, companyid));
                                    table.setPaidamount(authHandler.formattedCommaSeparatedAmount(amountPaid, companyid));
                                    tableList.add(table);
//                                    documentTotalAmt+=Double.parseDouble(data.optString("totalamount", "0.0"));
                                    documentTotalAmt+=totalAmount;
                                }
                            } else if (detailtype == Constants.GLPayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                                    JSONObject data = arr.getJSONObject(j);
                                    String taxname = "";
                                    String taxpercent = "";
                                    String invDesc = "Against GL Account " + (data.optString("accountcode", "").equals("") ? "" : data.optString("accountcode", "") + " - ") + data.getString("accountname");
                                    if (!data.optString("taxamount", "0.0").equals("0.0")) {
                                        taxpercent = data.optString("taxpercent", "");
                                        taxname = (data.optString("taxcode", "").equals("") ? "" : data.optString("taxcode", "") + " - ") + data.optString("taxname", "") + (taxpercent.equals("") ? "" : " - (" + taxpercent + "%)");
                                        table.setDetails(invDesc);
                                        table.setPaidamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                        tableList.add(table);

                                        table = new DiamondAviationPaymentVoucherTable();
                                        table.setDetails("&nbsp&nbsp&nbsp&nbsp " + taxname);
                                        table.setPaidamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("taxamount", "0.0"))), companyid));
                                        tableList.add(table);
                                    } else {
                                        table.setDetails(invDesc);
                                        table.setPaidamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                        tableList.add(table);
                                    }
                                }
                            } else if (detailtype == Constants.PaymentAgainstCNDN) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                                    JSONObject data = arr.getJSONObject(j);
                                    table.setDetails(data.getString("transectionno"));
                                    table.setDate(data.getString("creationdate"));
                                    table.setDocumentamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                    table.setPaidamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("cnpaidamount", "0.0"))), companyid));
                                    tableList.add(table);
                                    documentTotalAmt+=Double.parseDouble(data.optString("totalamount", "0.0"));
                                    
//                                    String invDesc = mode == StaticValues.AUTONUM_PAYMENT?"Against Credit Note# ":"Against Debit Note# ";
//                                    invDesc+=data.getString("transectionno") + " dated " + data.getString("creationdate");
                                }
                            } else if (detailtype == Constants.AdvancePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Advance Amount ";
                                    if (data.optBoolean("isrefund", false)) {
                                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                                            invDesc = "Refund/ Deposit Amount against Payment #" + data.optString("transectionno", "");
                                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                                            invDesc = "Refund/ Deposit Amount against Receipt #" + data.optString("transectionno", "");
                                        }
                                    }
                                    invDesc += (mode == StaticValues.AUTONUM_PAYMENT ? " to " : " from ");
                                    if (!data.optString("acccode", "").equals("") && !data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("acccode") + "-" + data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    } else if (!data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    }   // This will add the account name with code and then account holder name with code  

                                    table.setDetails(invDesc);
                                    table.setPaidamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("paidamount", "0.0"))), companyid));
                                    tableList.add(table);
                                }
                            } else if (detailtype == Constants.AdvanceLinkedWithInvoicePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Adjusted Against Invoice# " + data.getString("transectionno") /*
                                             * + " dated " + data.getString("creationdateinuserformat")
                                             */;
//                                    if (data.getString("totalamount").equals(data.getString("amountpaid"))) {
//                                        invDesc += " (Full)";
//                                    }
                                    table.setDetails(invDesc);
                                    table.setDate(data.getString("creationdateinuserformat"));
                                    table.setDocumentamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                    table.setPaidamount(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("amountpaid", "0.0"))), companyid));
                                    tableList.add(table);
                                    documentTotalAmt+=Double.parseDouble(data.optString("totalamount", "0.0"));
                                }
                            }
                        }

                        if (!obj.optString("bankCharges", "0.0").equals("0.0")) {
                            double bankcharges = Double.parseDouble(obj.getString("bankCharges"));
                            DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                            table.setDetails("Bank Charges");
                            table.setPaidamount(authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            tableList.add(table);
                        }

                        if (!obj.optString("bankInterest", "0.0").equals("0.0")) {
                            double bankInterest = Double.parseDouble(obj.getString("bankInterest"));
                            DiamondAviationPaymentVoucherTable table = new DiamondAviationPaymentVoucherTable();
                            table.setDetails("Bank Interest");
                            table.setPaidamount(authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            tableList.add(table);
                        }
                        voucherMap.put("PaymentTable", new JRBeanCollectionDataSource(tableList));
                        voucherMap.put("amount", authHandler.formattedCommaSeparatedAmount(Double.parseDouble(obj.optString("amount", "0")), companyid));
                        voucherMap.put("documentamount", authHandler.formattedCommaSeparatedAmount(documentTotalAmt, companyid));
                        voucherMap.put("currency", obj.optString("currencycode", ""));
                        int detailType = Integer.parseInt(obj.optString("detailtype", "0"));
                        if (detailType == PaymentMethod.TYPE_CASH) {
                            voucherMap.put("paymentmethod", obj.optString("paymentmethod", ""));
                            voucherMap.put("referencenumber", obj.optString("refno", ""));
                        } else if (detailType == PaymentMethod.TYPE_CARD) {
                            voucherMap.put("paymentmethod", obj.optString("paymentmethod", ""));
                            voucherMap.put("referencenumber", obj.optString("refno", ""));
                        } else if (detailType == PaymentMethod.TYPE_BANK) {
                            voucherMap.put("paymentmethod", obj.optString("paymentmethod", ""));
                            voucherMap.put("referencenumber", obj.optString("chequenumber", ""));
                        }
                      //  response.setHeader("Content-Disposition", "attachment;filename=" + filename + obj.optString("billno", "") +"_v1.pdf");
                        voucherMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                        InputStream inputStream = new FileInputStream(jsonObj.optString(Constants.JRXML_REAL_PATH_KEY) + "/DiamondAviationPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                        list.add(jasperPrint);
                    } else {
                        /*
                         * Main Section for Payment/Receipt Voucher of Default Template.
                         */
                        JSONObject obj = tempList.get(0);
                        datePojo.setDate(obj.optString("billdateinUserFormat", ""));
                        datePojoList.add(datePojo);
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("image", logo);
                        boolean isLetterHead = false;
                        if (!StringUtil.isNullOrEmpty(jsonObj.optString("isLetterHead"))) {
                            isLetterHead = Boolean.parseBoolean((String) jsonObj.optString("isLetterHead"));
                        }
                        voucherMap.put("isLetterHead", isLetterHead && ExportRecordHandler.checkCompanyTemplateLogoPresent(company));
                        voucherMap.put("imagePath", ExportRecordHandler.checkCompanyTemplateLogoPresent(company)?logo:"");
                        voucherMap.put("imagePath2", footer);
                        voucherMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                        voucherMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                        voucherMap.put("COMPANY_PHONE", company.getPhoneNumber() == null ? "" : company.getPhoneNumber());
                        voucherMap.put("COMPANY_FAX", company.getFaxNumber() == null ? "" : company.getFaxNumber());
                        voucherMap.put("COMPANY_EMAIL", company.getEmailID() == null ? "" : company.getEmailID());

                        int paymentwindowtype = (Integer) obj.get("paymentwindowtype");
                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                            LabelValue labelValue = new LabelValue();
                            if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                                if (mode == StaticValues.AUTONUM_PAYMENT) {
                                    labelValue.setLabel("Paid To");
                                labelValue.setValue(obj.optString("paidto", ""));
                                paidToList.add(labelValue);
                                } else if (mode == StaticValues.AUTONUM_RECEIPT) {
                                    voucherMap.put("extraPaidTo", obj.optString("paidto", ""));
                                    labelValue.setLabel("");
                                    labelValue.setValue("");
                                    paidToList.add(labelValue);
                                }
                            } else {
                                labelValue.setLabel(mode == StaticValues.AUTONUM_PAYMENT ? "Paid To" : "Received From");
                                labelValue.setValue(obj.optString("paidto", ""));
                                paidToList.add(labelValue);
                            }
                            labelValue = new LabelValue();
                            labelValue.setLabel("Vendor Code");
                            labelValue.setValue(obj.optString("personcode", ""));
                            paidToList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Vendor Name");
                            labelValue.setValue(obj.optString("personname", ""));
                            customerName = obj.optString("personname", "");
                            paidToList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("");
                            labelValue.setValue(obj.optString("personaddress", ""));
                            paidToList.add(labelValue);
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                            LabelValue labelValue = new LabelValue();
                            if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                                if(mode == StaticValues.AUTONUM_PAYMENT){
                                labelValue.setLabel("Paid To");
                                labelValue.setValue(obj.optString("paidto", ""));
                                paidToList.add(labelValue);
                                }else if(mode == StaticValues.AUTONUM_RECEIPT){
                                    voucherMap.put("extraPaidTo", obj.optString("paidto", ""));
                                    labelValue.setLabel("");
                                    labelValue.setValue("");
                                    paidToList.add(labelValue);
                                }
                            } else {
                                labelValue.setLabel(mode == StaticValues.AUTONUM_PAYMENT ? "Paid To" : "Received From");
                                labelValue.setValue(obj.optString("paidto", ""));
                                paidToList.add(labelValue);
                            }
                            labelValue = new LabelValue();
                            labelValue.setLabel("Customer Code");
                            labelValue.setValue(obj.optString("personcode", ""));
                            paidToList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Customer Name");
                            labelValue.setValue(obj.optString("personname", ""));
                            customerName = obj.optString("personname", "");
                            paidToList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("");
                            labelValue.setValue(obj.optString("personaddress", ""));
                            paidToList.add(labelValue);
                        } else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_against_GL_Code) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_against_GL_Code)) {
                            LabelValue labelValue = new LabelValue();
                            if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                                if(mode == StaticValues.AUTONUM_PAYMENT){
                                labelValue.setLabel("Paid To");
                                labelValue.setValue(obj.optString("paidto", ""));
                                paidToList.add(labelValue);
                                }else if(mode == StaticValues.AUTONUM_RECEIPT){
                                    voucherMap.put("extraPaidTo", obj.optString("paidto", ""));
                                    labelValue.setLabel("");
                                    labelValue.setValue("");
                                    paidToList.add(labelValue);
                                }
                            } else {
                                labelValue.setLabel(mode == StaticValues.AUTONUM_PAYMENT ? "Paid To" : "Received From");
                                labelValue.setValue(obj.optString("paidto", ""));
                                paidToList.add(labelValue);
                            }
                            customerName = obj.optString("paidto", "");
                        }
                        voucherMap.put("PayToTable", new JRBeanCollectionDataSource(paidToList));
                        /*
                         * Detail Section for Payment/Receipt Voucher of Default Template.
                         */
                        for (int i = 0; i < DataJArr.length(); i++) {
                            jobj = DataJArr.getJSONObject(i);
                            int detailtype = (Integer) jobj.get("type");
                        if (detailtype == Constants.PaymentAgainstInvoice) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    LabelValue labelValue = new LabelValue();
                                    JSONObject data = arr.getJSONObject(j);
                                    String description = data.optString("description", "").equals("") ? "" : "<br>Narration : "+ StringUtil.DecodeText(data.optString("description", ""));
                                    String invDesc = "Against Invoice# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                    if (data.getString("totalamount").equals(data.getString("amountpaid"))) {
                                        invDesc += " (Full)";
                                    }else{
                                          invDesc += " (Part)";
                                    }
                                    labelValue.setLabel(invDesc+description);
                                    labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.getString("enteramount"))), companyid)); //enteramount- in payment currency
                                    labelValue.setExtravalue(data.getString("currencysymbol")+" "+authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.getString("totalamount"))), companyid)); //enteramount- in payment currency
                                    labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                    detailsLabelValueList.add(labelValue);
                                }
                            } else if (detailtype == Constants.GLPayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    LabelValue labelValue = new LabelValue();
                                    JSONObject data = arr.getJSONObject(j);
                                    String taxname = "";
                                    String taxpercent = "";
                                     String invDesc = "";
                                    if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                                        invDesc = data.optString("description", "").equals("") ? "" :  StringUtil.DecodeText(data.optString("description", ""));
                                    } else {
                                        String description = data.optString("description", "").equals("") ? "" : "<br>Narration : "+ StringUtil.DecodeText(data.optString("description", ""));
                                        invDesc = "Against GL Account " + (data.optString("accountcode", "").equals("") ? "" : data.optString("accountcode", "") + " - ") + data.getString("accountname") + description;
                                    }
                                    if (!data.optString("taxamount", "0.0").equals("0.0")) {
                                        taxpercent = data.optString("taxpercent", "");
                                        taxname = (data.optString("taxcode","").equals("")?"":data.optString("taxcode","")+" - ")+data.optString("taxname", "")+(taxpercent.equals("")?"":" - ("+taxpercent+"%)");
                                        labelValue.setLabel(invDesc);
                                        if (MODULE_ID.equalsIgnoreCase(Integer.toString(Constants.Acc_Make_Payment_ModuleId))) {
                                            if (data.optBoolean("debit")) {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                            } else {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount((-Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                            }
                                        } else {
                                            if (data.optBoolean("debit")) {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount(-Double.parseDouble(data.optString("totalamount", "0.0")), companyid));
                                            } else {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount(Double.parseDouble(data.optString("totalamount", "0.0")), companyid));
                                            }
                                        }
                                        //labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                        labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                        detailsLabelValueList.add(labelValue);

                                        labelValue = new LabelValue();
                                        labelValue.setLabel(taxname); // ERP-11746
                                        labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("taxamount", "0.0"))), companyid));
                                        detailsLabelValueList.add(labelValue);
                                    } else {
                                        labelValue.setLabel(invDesc);
                                        if (MODULE_ID.equalsIgnoreCase(Integer.toString(Constants.Acc_Make_Payment_ModuleId))) {
                                            if (data.optBoolean("debit")) {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                            } else {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount((-Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                            }
                                        } else {
                                            if (data.optBoolean("debit")) {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount(-Double.parseDouble(data.optString("totalamount", "0.0")), companyid));
                                            } else {
                                                labelValue.setValue(authHandler.formattedCommaSeparatedAmount(Double.parseDouble(data.optString("totalamount", "0.0")), companyid));
                                            }
                                        }
                                        //labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.optString("totalamount", "0.0"))), companyid));
                                        labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                        detailsLabelValueList.add(labelValue);
                                    }
                                }
                            } else if (detailtype == Constants.PaymentAgainstCNDN) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    LabelValue labelValue = new LabelValue();
                                    JSONObject data = arr.getJSONObject(j);
                                    String description = data.optString("description", "").equals("") ? "" : "<br>Narration : "+ StringUtil.DecodeText(data.optString("description", ""));
                                    String invDesc = mode == StaticValues.AUTONUM_PAYMENT?"Against Credit Note# ":"Against Debit Note# ";
                                    invDesc+=data.getString("transectionno") + " dated " + data.getString("creationdate");
                                    if (data.getString("totalamount").equals(data.getString("cnpaidamount"))) {
                                        invDesc += " (Full)";
                                    }
                                    labelValue.setLabel(invDesc + description);
                                    labelValue.setValue(authHandler.formattedCommaSeparatedAmount((Double.parseDouble(data.getString("enteramount"))), companyid));
                                    labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                    detailsLabelValueList.add(labelValue);
                                }
                            } else if (detailtype == Constants.AdvancePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    LabelValue labelValue = new LabelValue();
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "Advance Amount ";
                                    String description = data.optString("description", "").equals("") ? "" : "<br>Narration : "+ StringUtil.DecodeText(data.optString("description", ""));
                                    if(data.optBoolean("isrefund",false)) {
                                        if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Vendor) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Vendor)) {
                                            invDesc = "Refund/ Deposit Amount against Payment #"+data.optString("transectionno","");
                                        }else if ((mode == StaticValues.AUTONUM_PAYMENT && paymentwindowtype == Constants.Make_Payment_to_Customer) || (mode == StaticValues.AUTONUM_RECEIPT && paymentwindowtype == Constants.Receive_Payment_from_Customer)) {
                                            invDesc = "Refund/ Deposit Amount against Receipt #"+data.optString("transectionno","");                   
                                        }
                                    }
                                    invDesc+=(mode == StaticValues.AUTONUM_PAYMENT?" to ":" from ");
                                    if (!data.optString("acccode", "").equals("") && !data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("acccode") + "-" + data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    } else if (!data.optString("accname", "").equals("")) {
                                        invDesc += data.getString("accname");
                                        if (!data.optString("accountcode", "").equals("") && !data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountcode") + "-" + data.getString("accountname") + ")";
                                        } else if (!data.optString("accountname", "").equals("")) {
                                            invDesc += " (" + data.getString("accountname") + ")";
                                        }
                                    }   // This will add the account name with code and then account holder name with code  
                                    labelValue.setLabel(invDesc + description);
                                    labelValue.setValue(authHandler.formattedCommaSeparatedAmount(Double.parseDouble(data.getString("paidamount")), companyid));
                                    labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                    labelValue.setTaxname(data.optString("gstAccountName",""));
                                    labelValue.setTaxamount(data.optString("gstAdvancedTaxAmount",""));
                                    gsttotal += Double.parseDouble(data.optString("gstAdvancedTaxAmount","0"));
                                    detailsLabelValueList.add(labelValue);
                                }
                            }else if (detailtype == Constants.AdvanceLinkedWithInvoicePayment) {
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    LabelValue labelValue = new LabelValue();
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "&nbsp&nbsp&nbsp&nbsp Adjusted Against Invoice# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                    if (data.getString("totalamount").equals(data.getString("amountpaid"))) {
                                        invDesc += " (Full)";
                                    }
                                    labelValue.setLabel(invDesc);
                                    labelValue.setExtravalue(data.getString("currencysymbol")+" "+authHandler.formattedCommaSeparatedAmount(Double.parseDouble(data.getString("enteramount")), companyid));
                                    labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                    detailsLabelValueList.add(labelValue);
                                }
                            } else if (detailtype == Constants.AdvanceLinkedWithNotePayment) {// In Case Advance Payment/Receipt Linked with Debit Note/Credit Note
                                JSONArray arr = jobj.getJSONArray("typedata");
                                for (int j = 0; j < arr.length(); j++) {
                                    LabelValue labelValue = new LabelValue();
                                    JSONObject data = arr.getJSONObject(j);
                                    String invDesc = "&nbsp&nbsp&nbsp&nbsp Adjusted Against Note# " + data.getString("transectionno") + " dated " + data.getString("creationdateinuserformat");
                                    if (data.optString("totalamount","").equals(data.optString("cnpaidamount",""))) {
                                        invDesc += " (Full)";
                                    }
                                    labelValue.setLabel(invDesc);
                                    labelValue.setExtravalue(data.optString("currencysymbol","")+" "+authHandler.formattedCommaSeparatedAmount(Double.parseDouble(data.getString("enteramount")), companyid));
                                    labelValue.setCreationDate(data.has("dateforsort") ? (Date)data.get("dateforsort") : null);
                                    detailsLabelValueList.add(labelValue);
                                }
                            }
                        }

                        if (!obj.optString("bankCharges", "0.0").equals("0.0")) {
                            double bankcharges = Double.parseDouble(obj.getString("bankCharges"));
                            LabelValue labelValue = new LabelValue();
                            labelValue.setLabel("Bank Charges");
                            labelValue.setValue(authHandler.formattedCommaSeparatedAmount(bankcharges, companyid));
                            detailsLabelValueList.add(labelValue);
                        }

                        if (!obj.optString("bankInterest", "0.0").equals("0.0")) {
                            double bankInterest = Double.parseDouble(obj.getString("bankInterest"));
                            LabelValue labelValue = new LabelValue();
                            labelValue.setLabel("Bank Interest");
                            labelValue.setValue(authHandler.formattedCommaSeparatedAmount(bankInterest, companyid));
                            detailsLabelValueList.add(labelValue);
                        }
                        
                        if(templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                            Collections.sort(detailsLabelValueList);
                        }
                        
                        voucherMap.put("PaymentTable", new JRBeanCollectionDataSource(detailsLabelValueList));
                        voucherMap.put("remark", obj.optString("memo", ""));
                        voucherMap.put("amountInWords", obj.optString("amountInWords", ""));
                        voucherMap.put("amount", authHandler.formattedCommaSeparatedAmount(Double.parseDouble(obj.optString("amount", "0")), companyid));
                        voucherMap.put("currency", accCommonTablesDAO.getCustomCurrencyCode(obj.optString("currencycode", ""),companyid));
                        voucherMap.put("preparedBy", obj.optString("createdby", ""));
                        voucherMap.put("number", obj.optString("billno", ""));
                        int detailType = Integer.parseInt(obj.optString("detailtype", "0"));
                        if (detailType == PaymentMethod.TYPE_CASH) {
                            LabelValue labelValue = new LabelValue();
                            labelValue.setLabel("Payment Method");labelValue.setValue("Cash - " + obj.optString("paymentmethod", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Currency");labelValue.setValue(obj.optString("currencyname", ""));
                            labelValueList.add(labelValue);
                        } else if (detailType == PaymentMethod.TYPE_CARD) {
                            LabelValue labelValue = new LabelValue();
                            labelValue.setLabel("Payment Method");labelValue.setValue("Card - " + obj.optString("paymentmethod", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Card Holder Name");labelValue.setValue(obj.optString("refname", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Reference Number");labelValue.setValue(obj.optString("refno", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Card Number");labelValue.setValue(obj.optString("refcardno", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Currency");labelValue.setValue(obj.optString("currencyname", ""));
                            labelValueList.add(labelValue);
                        } else if (detailType == PaymentMethod.TYPE_BANK) {
                            LabelValue labelValue = new LabelValue();
                            labelValue.setLabel("Payment Method");labelValue.setValue("Bank - " + obj.optString("paymentmethod", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Bank Name");labelValue.setValue(obj.optString("bankname", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Cheque Number");labelValue.setValue(obj.optString("chequenumber", ""));
                            chequeNo = obj.optString("chequenumber", "");
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Cheque Date");labelValue.setValue(obj.optString("chequedate", ""));
                            labelValueList.add(labelValue);
                            labelValue = new LabelValue();
                            labelValue.setLabel("Currency");labelValue.setValue(obj.optString("currencyname", ""));
                            labelValueList.add(labelValue);
                        }
                        if (templateflag == Constants.sms_templateflag) {
                            String title="";
                            if(detailType == PaymentMethod.TYPE_CASH){
                                title="PETTY CASH VOUCHER";
                            }else if(paymentwindowtype == Constants.Make_Payment_against_GL_Code){
                                title="PAYMENT VOUCHER(GL)";
                            }else{
                                title="PAYMENT VOUCHER";
                            }
                            voucherMap.put("headerLabel", title);
                            voucherMap.put("footerflag", true);
                            voucherMap.put("numberLabel", mode == StaticValues.AUTONUM_PAYMENT ? "Voucher Number" : "Receipt Number");
                            voucherMap.put("dateLabel", mode == StaticValues.AUTONUM_PAYMENT ? "Payment Date" : "Receipt Date");
                            voucherMap.put("footerflag", true);
                            voucherMap.put("UEN", companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                            voucherMap.put("GSTREGNUMBER", companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                            
                            List<String> dimensionList = new ArrayList<String>();
                            List<String> dimensionValueList = new ArrayList<String>();
                            List<String> colonList = new ArrayList<String>();
                            
                            Iterator iter = obj.keys();
                            while (iter.hasNext()) {
                                String key = (String) iter.next();
                                if (key.startsWith("Dimension_")) {
                                    dimensionList.add(key.split("_")[1]);
                                    dimensionValueList.add(obj.getString(key));
                                    colonList.add(":");
                                }
                            }
                                
                                String dimensionLable = "";
                                for (String dimesion : dimensionList) {
                                    dimensionLable += dimesion + "<br>";
                                }
                                voucherMap.put("dimentionName", dimensionLable);

                                String dimensionValue = "";
                                for (String dimesionValue : dimensionValueList) {
                                    dimensionValue += dimesionValue + "<br>";
                                }
                                voucherMap.put("classDimension", dimensionValue);

                                String colon = "";
                                for (String col : colonList) {
                                    colon += col + "<br>";
                                }
                                voucherMap.put("colon", colon);
                            
                        }
                        filename=filename + obj.optString("billno", "") +"_v1.pdf";
                        filename= filename.replaceAll(" ", "_");
                        voucherMap.put("PaymentMethodTable", new JRBeanCollectionDataSource(labelValueList));
                        voucherMap.put("chequeNo", chequeNo);   //For BestSafety Receipt Voucher Template
                        voucherMap.put("name", customerName);   //For BestSafety Receipt Voucher Template
                    //    response.setHeader("Content-Disposition", "attachment;filename="+ filename );
                        voucherMap.put("subtotal", authHandler.formattedCommaSeparatedAmount((Double.parseDouble(obj.optString("amount", "0"))-gsttotal), companyid));
                        voucherMap.put("gsttotal", authHandler.formattedCommaSeparatedAmount(gsttotal, companyid));
//                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") +"/DefaultPaymentVoucherForVHQ.jrxml");
                        String jrxmlFileName="";
                        if(templateflag==Constants.sms_templateflag){
                            jrxmlFileName="/DefaultPaymentVoucherForSMS.jrxml";
                        }else if(templateflag==Constants.TID_templateflag||templateflag==Constants.TID_Subdomain_templateflag||templateflag==Constants.TIDR_Subdomain_templateflag||templateflag==Constants.CUSCADEN_Subdomain_templateflag||templateflag==Constants.CAMBORNE_Subdomain_templateflag||templateflag==Constants.MITSUI_Subdomain_templateflag){
                            jrxmlFileName="/DefaultPaymentVoucherForTID.jrxml";
                        }else if(templateflag==Constants.vhqpost_tempalteflag){
                            jrxmlFileName="/DefaultPaymentVoucherForVHQ.jrxml";
                        }else if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                            jrxmlFileName="/F1recreationPaymentVoucher.jrxml";
                        }else if (mode == StaticValues.AUTONUM_RECEIPT && templateflag == Constants.BestSafety_templateflag) {
                            jrxmlFileName="/BestSafetyReceiptVoucher.jrxml";
                        }else{
                            if(company.getCountry()!=null && "137".equals(company.getCountry().getID()) && mode == StaticValues.AUTONUM_RECEIPT) {
                                jrxmlFileName="/DefaultPaymentVoucherForMalaysians.jrxml";
                            } else {
                                jrxmlFileName="/DefaultPaymentVoucher.jrxml";
                            }
                        }
                        //InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") +jrxmlFileName);
                        InputStream inputStream = new FileInputStream(jsonObj.optString(Constants.JRXML_REAL_PATH_KEY) +jrxmlFileName);
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                        list.add(jasperPrint);
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
  
    public String getDimensionString(JSONObject data) {
        String dimensionString = "";
        try {
            if (data.has("dimensionArr")) { // checking if dimensionArr is present ofr not
                JSONArray dimensionArr = data.getJSONArray("dimensionArr");
                for (int k = 0; k < dimensionArr.length(); k++) {
                    JSONObject temp = dimensionArr.getJSONObject(k); 
                    for (Iterator iterator = temp.keys(); iterator.hasNext();) { // iterating JSON to get all keys and values
                        String key = (String) iterator.next();
                        if (key.contains("Custom_")) { // if dimension is "Dimension Test" then key gives "Custom_Dimension Test" as it is field name
                            dimensionString += "<br>" + key.substring(7) + " : " + temp.get(key);
                        } else {
                            dimensionString += "<br>" + key + " : " + temp.get(key);
                        }
                    }
                }
            } // This code will be used to get all the dimension 
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            return dimensionString;
        }
    }
    @Override
    public List<Object> exportDiamondAviationCustomerInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recArray[]=null;
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String invIDsfromDO = request.getAttribute("invIDsfromDO") != null ? request.getAttribute("invIDsfromDO").toString() : ""; //this will exports Invoice in DO Module for Diamond Aviation.
        boolean isInvoiceLinkedWithDO = false;
        if(request.getAttribute("isInvoiceLinkedWithDO")!=null){
                isInvoiceLinkedWithDO = Boolean.parseBoolean(request.getAttribute("isInvoiceLinkedWithDO").toString());
        }
        
        if(isInvoiceLinkedWithDO){
            recArray = invIDsfromDO.split(",");
        }else{
            recArray = recordIDs.split(",");
        }
        
        int linkedinvoicetype=-1;
        if(request.getAttribute("linkedinvoicetype")!=null){
                    linkedinvoicetype=Integer.parseInt(request.getAttribute("linkedinvoicetype").toString());
         }
        
        int templateflag =  Integer.parseInt(request.getParameter("templateflag")); 
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();
                    
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                    int type = 0;
                    if(linkedinvoicetype!=-1){
                         type =linkedinvoicetype;
                    }else{
                         type =request.getParameter("type")!=null?Integer.parseInt(request.getParameter("type")):0;
                    }
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";
                    
                    HashMap<String, Object> requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
                    requestParams.put(Constants.billid, invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("CashAndInvoice", true);
                    requestParams.put("isAged", true);   // Sending this flag because we have used the same template for normal, Fixed Asset and Lease Invoice
                    
                    KwlReturnObject invoiceResult = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                    DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, invoiceResult.getEntityList(), DataJArr);
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                    HashMap<String, Object> genericDataMap = new HashMap<String, Object>();
                    if (isInvoiceLinkedWithDO) {
                        DataJArrRows = accInvoiceServiceDAO.getInvoiceRows(paramJobj, invoiceID.split(","),genericDataMap);
                    } else {
                        DataJArrRows = accInvoiceServiceDAO.getInvoiceRows(paramJobj, invoiceID.split(","),genericDataMap);
                    }
                    
                    HashSet<String> linkIds = new HashSet<String>();
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                        String tempLinkTo = jobj.optInt("linktype", -1)==0? jobj.optString("linkto", ""):"";
                        if(!tempLinkTo.equals(""))
                        linkIds.add(tempLinkTo);
                        invRows.setSrNo(""+(i+1));
                        invRows.setCode(jobj.optString("pid", ""));
                        invRows.setDesc(jobj.optString("desc", ""));                        
                        String serial="";
                        if(!jobj.optString("rowid","").equals("")){
                        KwlReturnObject kmsg = accCommonTablesDAO.getOnlySerialDetails(jobj.optString("rowid",""), false, Constants.Acc_Invoice_ModuleId + "", false, false);
                            List batchserialdetails = kmsg.getEntityList();
                            Iterator iter = batchserialdetails.iterator();
                            while (iter.hasNext()) {
                                Object[] objArr = (Object[]) iter.next();
                                serial = objArr[8] != null ? (String) objArr[8] : "";
                            }
                            invRows.setCustom1(serial);
                        }
                        if(!jobj.optString("Custom_Condition", "").equals("")){
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_Condition", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom2(fieldComboData.getValue());
                                }else{
                                    invRows.setCustom2(jobj.optString("Custom_Condition", ""));
                                }
                        }
                        if(!jobj.optString("Custom_Serial Number", "").equals("")){
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_Serial Number", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom1(fieldComboData.getValue());
                                }else{
                                    invRows.setCustom1(jobj.optString("Custom_Serial Number", ""));
                                }
                        }
                        invRows.setQty(authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                        invRows.setRate(authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        invRows.setTotal(authHandler.formattedCommaSeparatedAmount(jobj.optDouble("amount", 0), companyid));
                        invRows.setAmountCurrency( jobj.optString("currencysymbol",""));
                        invDetailsList.add(invRows);
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));

                    String linkTo = "";
                    for (String l : linkIds) {
                        linkTo += l + ",";
                    }
                    if (linkTo.length() > 1) {
                        linkTo = linkTo.substring(0, linkTo.length() - 1);
                    }
                    
                    
                    JSONObject obj = DataJArr.getJSONObject(0);
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String imagepath1 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                    invoiceMap.put("IMAGEPATH", imagepath);
                    invoiceMap.put("IMAGEPATH1", imagepath1);
                    invoiceMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                    invoiceMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                    invoiceMap.put("COMPANY_GST_REG_NO", companyAccountPreferences.getGstNumber() == null ? "" : companyAccountPreferences.getGstNumber());
                    invoiceMap.put("CUSTOMER_NAME", obj.optString("customername", ""));
                    invoiceMap.put("CUSTOMER_CODE", obj.optString("customercode", ""));
                    invoiceMap.put("CUSTOMER_BILLTO_ADDRESS", obj.optString("billtoaddress", ""));
                    invoiceMap.put("CUSTOMER_SHIPTO_ADDRESS", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("ORDER_NUMBER", obj.optString("porefno", ""));
                    invoiceMap.put("SHIPPING", obj.optString("shipvia", ""));
                    invoiceMap.put("PAYMENT_TERMS", obj.optBoolean("cashtransaction", false)? "Cash":(obj.optString("termdays", ""))+" days");
                    invoiceMap.put("SUBTOTAL", authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0) - obj.optDouble("taxamount", 0)), companyid));
                    invoiceMap.put("GST_AMOUNT", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("GST_PERCENT", (obj.optDouble("taxpercent", 0)) == 0 ? "" : " "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid) + "%");
                    invoiceMap.put("TOTAL_AMOUNT", obj.optString("currencycode", "")+" "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                    invoiceMap.put("ATTN",obj.optString("salespersonname", ""));
                    invoiceMap.put("INOVICENO",obj.optString("billno", "")); 
                    invoiceMap.put("porefno",obj.optString("porefno", ""));
                    invoiceMap.put("JOBCODE",obj.optString("Custom_Job Code", ""));
                    
                    String CompanyPDFPOSTTEXT ="";
                    KwlReturnObject templateConfig = accCommonTablesDAO.getPDFTemplateRow(companyid, Constants.Acc_Invoice_ModuleId);
                    List<PdfTemplateConfig> templist = templateConfig.getEntityList();
                    if (!templist.isEmpty()) {
                        for (PdfTemplateConfig config : templist) {
                            CompanyPDFPOSTTEXT = config.getPdfPostText() == null ? "" : config.getPdfPostText();
                        }
                    }
                    invoiceMap.put("BANK_DETAILS", CompanyPDFPOSTTEXT);
                    
                    InputStream inputStream = null;
                    if(templateflag == Constants.Diamond_Aviation_templateflag)
                    {
                    if(type==0){
                        title = "Commercial Invoice ";
                        filename = "CommercialInvoice_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationCommercialInvoice.jrxml");
                    }else if(type==1){
                        title = "Commercial Invoice ";
                        filename = "CommercialInvoice_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationCommercialInvoice_1.jrxml");
                    }else if(type==2){
                        title = "Proforma Invoice ";
                        filename = "ProformaInvoice_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationProformaInvoice.jrxml");
                    }else if(type==3){
                        title = "Tax Invoice ";
                        filename = "SalesInvoice_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationSalesInvoice.jrxml");
                    }else if(type==4){
                        title = "Tax Invoice ";
                        filename = "SalesInvoiceExchange_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationSalesInvoiceExchange.jrxml");
                    }else if(type==5){
                        title = "Tax Invoice ";
                        filename = "ServiceInvoice_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationServiceInvoice.jrxml");
                    }else if(type==6){
                        title = "Pro Forma Invoice ";
                        filename = "ProformaInvoiceExchange_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationSalesInvoiceExchange.jrxml");
                    } 
                    }else if(templateflag == Constants.Alfatech_templateFlag)
                    {   invoiceMap.put("BankAccountNo",type==1?"357-904-548-3":"421-301-4476");
                        invoiceMap.put("BankBranchCode",type==1?"018":"494");
                        title = "Tax Invoice ";
                        filename = "TaxInvoice"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/AlfatechTaxInvoice.jrxml");
                    } 
                    invoiceMap.put("TITLE", title + obj.optString("billno", ""));
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename +"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
    @Override
    public List<Object> exportDiamondAviationPuchaseOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int templateflag =  Integer.parseInt(request.getParameter("templateflag")); 

        String poIDsfromDO = request.getAttribute("poIDsfromDO") != null ? request.getAttribute("poIDsfromDO").toString() : ""; //this will exports PO in DO Module for Diamond Aviation.
        boolean isPOLinkedWithDO = false;
        if (request.getAttribute("isPOLinkedWithDO") != null) {
            isPOLinkedWithDO = Boolean.parseBoolean(request.getAttribute("isPOLinkedWithDO").toString());
        }

        if (isPOLinkedWithDO) {
            recArray = poIDsfromDO.split(",");
        } else {
            recArray = recordIDs.split(",");
        }

        int linkedPOtype = -1;
        if (request.getAttribute("linkedPOtype") != null) {
            linkedPOtype = Integer.parseInt(request.getAttribute("linkedPOtype").toString());
        }
        
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();
                    
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                    int type = 0;
                    if(linkedPOtype!=-1){
                         type =linkedPOtype;
                    }else{
                         type =request.getParameter("type")!=null?Integer.parseInt(request.getParameter("type")):0;
                    }
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";
                    
                    HashMap<String, Object> requestParams = accPurchaseOrderServiceDAOobj.getPurchaseOrderMap(request);
                    requestParams.put("billId", invoiceID);
                    requestParams.put("bills", invoiceID.split(","));
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put("isForReport", true);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("dateFormatValue", authHandler.getDateOnlyFormat(request));
                    requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));

                    KwlReturnObject invoiceResult = accPurchaseOrderobj.getPurchaseOrdersMerged(requestParams);
                    DataJArr = accPurchaseOrderServiceDAOobj.getPurchaseOrdersJsonMerged(requestParams, invoiceResult.getEntityList(), DataJArr);
                    requestParams.put("closeflag", null);
                    DataJArrRows = accPurchaseOrderServiceDAOobj.getPurchaseOrderRows(requestParams);

                    HashSet<String> linkIds = new HashSet<String>();
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                        String tempLinkTo = jobj.optInt("linktype", -1)==0? jobj.optString("linkto", ""):"";
                        if(!tempLinkTo.equals(""))
                        linkIds.add(tempLinkTo);
                        invRows.setSrNo(""+(i+1));
                        invRows.setCode(jobj.optString("pid", ""));
                        invRows.setDesc(jobj.optString("desc", ""));
                        invRows.setUom(jobj.optString("uomname", ""));
                        String serial="";
                        if(!jobj.optString("rowid","").equals("")){
                        KwlReturnObject kmsg = accCommonTablesDAO.getOnlySerialDetails(jobj.optString("rowid",""), false, Constants.Acc_Purchase_Order_ModuleId + "", false, false);
                            List batchserialdetails = kmsg.getEntityList();
                            Iterator iter = batchserialdetails.iterator();
                            while (iter.hasNext()) {
                                Object[] objArr = (Object[]) iter.next();
                                serial = objArr[8] != null ? (String) objArr[8] : "";
                            }
                        }
                        invRows.setCustom1(serial);
                        if(!jobj.optString("Custom_Condition", "").equals("")){
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_Condition", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom2(fieldComboData.getValue());
                                }else{
                                    invRows.setCustom2(jobj.optString("Custom_Condition", ""));
                                }
                        }
                        
                        if(!jobj.optString("Custom_ARCs", "").equals("")){
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_ARC", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom4(fieldComboData.getValue());
                                    invRows.setCustom5(fieldComboData.getValue());
                                }else{
                                    invRows.setCustom4(jobj.optString("Custom_ARCs", ""));
                                    invRows.setCustom5(jobj.optString("Custom_ARCs", ""));
                                }
                        }
                        if(!jobj.optString("Custom_Serial Number", "").equals("")){
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_Serial Number", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom1(fieldComboData.getValue());
                                }else{
                                    invRows.setCustom1(jobj.optString("Custom_Serial Number", ""));
                                }
                        }
                        if(!jobj.optString("Custom_TAT", "").equals("")){
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_TAT", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom6(fieldComboData.getValue());
                                }else{
                                    invRows.setCustom6(jobj.optString("Custom_TAT", ""));
                                }
                        }
                        invRows.setCustom3(jobj.optString("leadtime", ""));
                        invRows.setQty(jobj.optBoolean("isexpenseinv",false)? "" :authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                        invRows.setRate(authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        invRows.setTotal(jobj.optBoolean("isexpenseinv",false)?(authHandler.formattedCommaSeparatedAmount((jobj.optDouble("rate", 0)+jobj.optDouble("rowTaxAmount", 0)), companyid))
                                :(authHandler.formattedCommaSeparatedAmount(((jobj.optDouble("quantity", 0)*jobj.optDouble("rate", 0))+jobj.optDouble("rowTaxAmount", 0)), companyid)));
                        invRows.setAmountCurrency( jobj.optString("currencysymbol",""));
                        if(templateflag == Constants.Tony_FiberGlass_templateflag){
                             invRows.setQty(jobj.optBoolean("isexpenseinv",false)? "" :authHandler.formattingDecimalForQuantity(jobj.optDouble("quantity", 0), companyid));
                        }
                        invDetailsList.add(invRows);
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));

                    String linkTo = "";
                    for (String l : linkIds) {
                        linkTo += l + ",";
                    }
                    if (linkTo.length() > 1) {
                        linkTo = linkTo.substring(0, linkTo.length() - 1);
                    }
                    
                    JSONObject obj = DataJArr.getJSONObject(0);
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String imagepath2 = StorageHandler.GetDocStorePath() + companyid + "_footer"+ FileUploadHandler.getCompanyImageExt();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                    invoiceMap.put("IMAGEPATH", imagepath);//header
                    invoiceMap.put("IMAGEPATH1", imagepath2);//footer
                    invoiceMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                    invoiceMap.put("COMPANY_GST_REG_NO", companyAccountPreferences.getGstNumber() == null ? "" : companyAccountPreferences.getGstNumber());
                    invoiceMap.put("COMPANY_BILLTO_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                    invoiceMap.put("COMPANY_SHIPTO_ADDRESS", AccountingAddressManager.getCompanyDefaultShippingAddress(companyid, accountingHandlerDAOobj));
                    invoiceMap.put("VENDOR_NAME", obj.optString("personname", ""));
                    invoiceMap.put("VENDOR_CODE", obj.optString("personcode", ""));
                    invoiceMap.put("VENDOR_ADDRESS", obj.optString("billtoaddress", ""));
                    invoiceMap.put("VENDOR_ADDRESS_SHIPTO", obj.optString("shiptoaddress", ""));
                   //Get Vendor address from vendoe management
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, companyid);
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true); //true to get billing address
                    addressParams.put("vendorid", obj.optString("personid", ""));
                    String personAddress = accountingHandlerDAOobj.getVendorAddress(addressParams);
                    invoiceMap.put("PERSON_ADDRESS", personAddress);
                    invoiceMap.put("SHIPVIA", obj.optString("shipvia", ""));
                    invoiceMap.put("SUPPLIER_REF", obj.optString("Custom_Supplier Ref", ""));
                    invoiceMap.put("PAYMENT_TERMS", obj.optString("termname", ""));
                    invoiceMap.put("REMARK", (obj.optString("posttext", "")));
                    invoiceMap.put("SUBTOTAL", authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0) - obj.optDouble("taxamount", 0)), companyid));
                    invoiceMap.put("GST_AMOUNT", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("GST_PERCENT", (obj.optDouble("taxpercent", 0)) == 0 ? "" : " "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid) + "%");
                    invoiceMap.put("TOTAL_AMOUNT", obj.optString("currencycode", "")+" "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                    invoiceMap.put("SHIP_DATE", obj.optString("shipdateinuserformat", ""));//alafetech
                    invoiceMap.put("PURCHASE_ORDER_NO", obj.optString("billno", ""));//alfatech
                    invoiceMap.put("VENDOR_BILLING_ADDRESS", obj.optString("shiptoaddress", ""));//alfatech
                    invoiceMap.put("JOB_SITE", obj.optString("Custom_Job Site", ""));//alfatech
                    invoiceMap.put("PROJECT_NO", obj.optString("Custom_Job Code", ""));//alafatech 
                    InputStream inputStream = null;
                    if(templateflag == Constants.Diamond_Aviation_templateflag)
                    {
                    if(type==0){
                        title = "Exchange Order ";
                        filename = "ExchangeOrder_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationExchangeOrder.jrxml");
                    }else if(type==1){
                        title = "Purchase Order ";
                        filename = "PurchaseOrder_"+ obj.optString("billno", "")+".pdf";
                        /**
                         * JRXml Path found null, so we need to append '/' front of jrxml path.
                         */
                        String jrXmlPath = request.getSession().getServletContext().getRealPath("/jrxml");
                        inputStream = new FileInputStream(jrXmlPath != null ? jrXmlPath + "/DiamondAviationPurchaseOrder.jrxml" : request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationPurchaseOrder.jrxml");
                    }else if(type==2){
                        title = "Repair Order ";
                        filename = "RepairOrder_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationRepairOrder.jrxml");
                    }
                    } else if(templateflag == Constants.Alfatech_templateFlag)
                    {  invoiceMap.put("TOTAL_AMOUNT", authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                 
                         title = "Purchase Order ";
                        filename = "PurchaseOrder_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/AlfatechPurhaseOrder.jrxml");
                       
                    }else if(templateflag == Constants.Tony_FiberGlass_templateflag){
                        invoiceMap.put("CUSTOMER_NAME", obj.optString("personname", ""));
                        invoiceMap.put("CUSTOMER_BILLTO_ADDRESS", obj.optString("billtoaddress", ""));
                        invoiceMap.put("PAYMENT_TERMS",obj.optString("termname", ""));
                        invoiceMap.put("TOTAL_AMOUNT", obj.optString("currencycode", "") + " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                        invoiceMap.put("ATTN", obj.optString(Constants.BILLING_CONTACT_PERSON, ""));
                        invoiceMap.put("INVOICE_NUMBER", obj.optString("billno", ""));
                        invoiceMap.put("PREPARED_BY", obj.optString("createdby", ""));
                        invoiceMap.put("FREIGHT", obj.optString("Custom_Freight", ""));
                        invoiceMap.put("DELIVERY_DATE", obj.optString("shipdateinuserformat", ""));
                        
                        filename = "PurchaseOrder_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TonyFiberglassPurchaseOrder.jrxml");
                    }
                    invoiceMap.put("TITLE", title + obj.optString("billno", ""));
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename +"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
    @Override
    public List<Object> exportDiamondAviationCustomerQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
         List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();
                        
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONObject DataJObjRows = new JSONObject();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                    int type = Integer.parseInt(request.getParameter("type"));
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";
                    
                    HashMap<String, Object> requestParams = accSalesOrderServiceDAOobj.getSalesOrdersMap(request);
                    requestParams.put("billId", invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("dataFormatValue", authHandler.getDateOnlyFormat(request));
                    requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));
                    if (StringUtil.isNullOrEmpty(request.getParameter("archieve"))) {
                        requestParams.put("archieve", 0);
                    } else {
                        requestParams.put("archieve", Integer.parseInt(request.getParameter("archieve")));
                    }
                    requestParams.put("closeflag", null);
                    requestParams.put("sopolinkflag", null);
                    requestParams.put("linkFlagInSO", null);
                    requestParams.put("linkFlagInInv", null);
                    requestParams.put("dtype",request.getParameter("dtype"));
                    boolean isOrder = false;
                    String isorder = request.getParameter("isOrder");
                    if (!StringUtil.isNullOrEmpty(isorder) && StringUtil.equal(isorder, "true")) {
                        isOrder = true;
                    }
                    requestParams.put("isOrder", isOrder);
                    requestParams.put("userId", sessionHandlerImpl.getUserid(request));

                    boolean isLeaseFixedAsset= false;
                    KwlReturnObject quores = accountingHandlerDAOobj.getObject(Quotation.class.getName(), invoiceID);
                    Quotation quotation = (Quotation) quores.getEntityList().get(0);
                    isLeaseFixedAsset = quotation.isLeaseQuotation();
                    requestParams.put("isLeaseFixedAsset",isLeaseFixedAsset);
                    
                    KwlReturnObject invoiceResult = accSalesOrderDAOobj.getQuotations(requestParams);
                    DataJArr = accSalesOrderServiceDAOobj.getQuotationsJson(requestParams, invoiceResult.getEntityList(), DataJArr);
                    requestParams.put("bills", invoiceID);
                    DataJObjRows = accSalesOrderServiceDAOobj.getQuotationRows(requestParams);
                    
                    HashSet<String> linkIds = new HashSet<String>();
                    if(DataJObjRows.length()>0){
                        DataJArrRows=DataJObjRows.getJSONArray("data");
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                        String tempLinkTo = jobj.optInt("linktype", -1)==0? jobj.optString("linkto", ""):"";
                        if(!tempLinkTo.equals(""))
                        linkIds.add(tempLinkTo);
                        invRows.setCode(jobj.optString("pid", ""));
                        invRows.setDesc(jobj.optString("desc", ""));
                        if(!jobj.optString("Custom_ARCs", "").equals("")){
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_ARCs", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom1(fieldComboData.getValue());
                                }else{
                                    invRows.setCustom1(jobj.optString("Custom_ARCs", ""));
                                }
                        }
                         if(!jobj.optString("Custom_TAT", "").equals("")){
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_TAT", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom2(fieldComboData.getValue());
                                }else{
                                    invRows.setCustom2(jobj.optString("Custom_TAT", ""));
                                }
                        }
                        if(!jobj.optString("Custom_Condition", "").equals("")){
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_Condition", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom3(fieldComboData.getValue());
                                }else{
                                    invRows.setCustom3(jobj.optString("Custom_Condition", ""));
                                }
                        }
                         if(!jobj.optString("Custom_Serial Number", "").equals("")){
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_Serial Number", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom4(fieldComboData.getValue());
                                }else{
                                    invRows.setCustom4(jobj.optString("Custom_Serial Number", ""));
                                }
                        }
//                        String serial="";
//                        if(!jobj.optString("rowid","").equals("")){
//                        KwlReturnObject kmsg = accCommonTablesDAO.getOnlySerialDetails(jobj.optString("rowid",""), false, Constants.Acc_Customer_Quotation_ModuleId + "", false, false);
//                            List batchserialdetails = kmsg.getEntityList();
//                            Iterator iter = batchserialdetails.iterator();
//                            while (iter.hasNext()) {
//                                Object[] objArr = (Object[]) iter.next();
//                                serial = objArr[8] != null ? (String) objArr[8] : "";
//                            }
//                            invRows.setCustom4(serial);
//                        }
                        invRows.setQty(authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                        invRows.setRate(authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        invRows.setTotal(authHandler.formattedCommaSeparatedAmount(((jobj.optDouble("quantity", 0)*jobj.optDouble("rate", 0))), companyid));
                        invDetailsList.add(invRows);
                    }
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));

                    String linkTo = "";
                    for (String l : linkIds) {
                        linkTo += l + ",";
                    }
                    if (linkTo.length() > 1) {
                        linkTo = linkTo.substring(0, linkTo.length() - 1);
                    }
                    
                    JSONObject obj = DataJArr.getJSONObject(0);
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                    invoiceMap.put("IMAGEPATH", imagepath);
                    invoiceMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                    invoiceMap.put("COMPANY_GST_REG_NO", companyAccountPreferences.getGstNumber() == null ? "" : companyAccountPreferences.getGstNumber());
                    invoiceMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                    invoiceMap.put("COMPANY_SHIPTO_ADDRESS", AccountingAddressManager.getCompanyDefaultShippingAddress(companyid, accountingHandlerDAOobj));
                    invoiceMap.put("CUSTOMER_NAME", obj.optString("personname", ""));
                    invoiceMap.put("CUSTOMER_CODE", obj.optString("personcode", ""));
                    invoiceMap.put("CUSTOMER_ADDRESS", obj.optString("billtoaddress", ""));
                    invoiceMap.put("CUSTOMER_ADDRESS_SHIPTO", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("CUSTOMER_REF", obj.optString("Custom_Customer Ref", ""));
                    invoiceMap.put("REPAIR_DETAILS", obj.optString("posttext", ""));
                    invoiceMap.put("DUE_DATE", obj.optString("validtilldateinuserformat", ""));
                    invoiceMap.put("SUBTOTAL", authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                    invoiceMap.put("GST_AMOUNT", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("GST_PERCENT", (obj.optDouble("taxpercent", 0)) == 0 ? "" : " " +authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid) + "%");
                    invoiceMap.put("TOTAL_AMOUNT", obj.optString("currencycode", "")+" "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("orderamountwithTax", 0), companyid));
                    invoiceMap.put("SHIPVIA", obj.optString("shipvia", ""));
                    invoiceMap.put("PAYMENT_TERMS", obj.optString("termname", ""));
                    
                    String CompanyPDFPOSTTEXT ="";
                    KwlReturnObject templateConfig = accCommonTablesDAO.getPDFTemplateRow(companyid, Constants.Acc_Customer_Quotation_ModuleId);
                    List<PdfTemplateConfig> templist = templateConfig.getEntityList();
                    if (!templist.isEmpty()) {
                        for (PdfTemplateConfig config : templist) {
                            CompanyPDFPOSTTEXT = config.getPdfPostText() == null ? "" : config.getPdfPostText();
                        }
                    }
                    invoiceMap.put("BANK_DETAILS", CompanyPDFPOSTTEXT);
                    
                    InputStream inputStream = null;
                    if(type==0){
                        title = "Quote ";
                        filename = "Quote_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationCustomerQuotation.jrxml");
                    }else if(type==1){
                        title = "Quote ";
                        filename = "Quote_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationServiceCustomerQuotation.jrxml");
                    }else if(type==2){
                        title = "Quote ";
                        filename = "ServiceQuote_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationCustomerQuotationService.jrxml");
                    }else if(type==3){
                        title = "Quote ";
                        filename = "Quote_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationCustomerQuotationWithSerialNumber.jrxml");
                    }else if(type==4){
                        title = "Quote ";
                        filename = "ExchangeQuote_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationExchangeQuotation.jrxml");
                    }
                    invoiceMap.put("TITLE", title + obj.optString("billno", ""));
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
    @Override
    public List<Object> exportRightSpaceCustomerQuoteAndInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();

                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONObject DataJObjRows = new JSONObject();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                    
                    int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                    int type = Integer.parseInt(request.getParameter("type"));
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String amountKey = "";
                    String title = "";
                    String PO_NUMBER = "";
                    String QUOTE_NUMBER = "";  //type 4
                    boolean isQuote = false;
                    
                    if (mode == StaticValues.AUTONUM_QUOTATION) {
                        HashMap<String, Object> requestParams = accSalesOrderServiceDAOobj.getSalesOrdersMap(request);
                        requestParams.put("billId", invoiceID);
                        request.setAttribute(Constants.companyKey, companyid);
                        request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                        request.setAttribute(Constants.billid, invoiceID);
                        requestParams.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                        requestParams.put("dataFormatValue", authHandler.getDateOnlyFormat(request));
                        requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));
                        if (StringUtil.isNullOrEmpty(request.getParameter("archieve"))) {
                            requestParams.put("archieve", 0);
                        } else {
                            requestParams.put("archieve", Integer.parseInt(request.getParameter("archieve")));
                        }
                        requestParams.put("closeflag", null);
                        requestParams.put("sopolinkflag", null);
                        requestParams.put("linkFlagInSO", null);
                        requestParams.put("linkFlagInInv", null);
                        requestParams.put("dtype", "report");
                        boolean isOrder = false;
                        String isorder = request.getParameter("isOrder");
                        if (!StringUtil.isNullOrEmpty(isorder) && StringUtil.equal(isorder, "true")) {
                            isOrder = true;
                        }
                        requestParams.put("isOrder", isOrder);
                        requestParams.put("userId", sessionHandlerImpl.getUserid(request));

                        boolean isLeaseFixedAsset = false;
                        KwlReturnObject quores = accountingHandlerDAOobj.getObject(Quotation.class.getName(), invoiceID);
                        Quotation quotation = (Quotation) quores.getEntityList().get(0);
                        isLeaseFixedAsset = quotation.isLeaseQuotation();
                        requestParams.put("isLeaseFixedAsset", isLeaseFixedAsset);

                        KwlReturnObject invoiceResult = accSalesOrderDAOobj.getQuotations(requestParams);
                        DataJArr = accSalesOrderServiceDAOobj.getQuotationsJson(requestParams, invoiceResult.getEntityList(), DataJArr);
                        requestParams.put("bills", invoiceID);
                        DataJObjRows = accSalesOrderServiceDAOobj.getQuotationRows(requestParams);
                        if (DataJObjRows.length() > 0) {
                            DataJArrRows = DataJObjRows.getJSONArray("data");
                        }
                        filename="Quatation_Type";
                        amountKey="orderamountwithTax";
                        title = "QUOTATION";
                        isQuote = true;
                    } else if (mode == StaticValues.AUTONUM_INVOICE) {

                        HashMap<String, Object> requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
                        requestParams.put(Constants.billid, invoiceID);
                        request.setAttribute(Constants.companyKey, companyid);
                        request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                        request.setAttribute(Constants.billid, invoiceID);
                        requestParams.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                        requestParams.put("CashAndInvoice", true);
                        requestParams.put("isAged", true);   // Sending this flag because we have used the same template for normal, Fixed Asset and Lease Invoice
                        
                        KwlReturnObject invoiceResult = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                        DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, invoiceResult.getEntityList(), DataJArr);
                        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                        HashMap<String, Object> genericDataMap = new HashMap<String, Object>();
                        DataJArrRows = accInvoiceServiceDAO.getInvoiceRows(paramJobj, invoiceID.split(","),genericDataMap);//Request Dependency removed
                        filename="TaxInvoice_Type";
                        amountKey="amount";
                        if(type==3 || type==4 || type==6){
                            title = "TAX INVOICE /\nDELIVERY ORDER";
                        }else{
                            title = "TAX INVOICE";   
                        }
                            
                    }

                    HashSet<String> quoteLinkIds = new HashSet<String>();
                    double subtotal= 0;
                    if (DataJArrRows.length() > 0) {
//                        DataJArrRows = DataJObjRows.getJSONArray("data");
                        for (int i = 0; i < DataJArrRows.length(); i++) {
                            JSONObject jobj = DataJArrRows.getJSONObject(i);
                            JasperProductTable invRows = new JasperProductTable();
                            String tempLinkTo = jobj.optInt("linktype", 0) == 2 ? jobj.optString("linkto", "") : "";
                            if (!tempLinkTo.equals("")) {
                                quoteLinkIds.add(tempLinkTo);
                            }
                            invRows.setSrNo((i + 1) + ".");
//                            invRows.setSnforsort(jobj.optInt("srno", 0));
                            invRows.setCode(jobj.optString("pid", ""));
                            invRows.setDesc(jobj.optString("desc", ""));
                            invRows.setUom(jobj.optString("uomname", ""));
                            
                            double quantity = jobj.optDouble("quantity", 0);
                            double rate = jobj.optDouble("rate", 0);
                            double amount = rate*quantity;
                            
                            double discount = 0;
                            if(jobj.optInt("discountispercent", 0)==0){
                                discount = jobj.optDouble("prdiscount", 0);
                            }else{
                                discount = amount*(jobj.optDouble("prdiscount", 0)/100); 
                            }
                            amount -= discount;
                            invRows.setQty(authHandler.formattedQuantity(quantity, companyid));
                            invRows.setRate(authHandler.formattedCommaSeparatedUnitPrice(rate, companyid));
                            invRows.setTotal(authHandler.formattedCommaSeparatedAmount(amount, companyid));
                            invRows.setTotalinDouble(amount);
                            subtotal+=amount;
                            
                            if(type==5 && !jobj.optString("Custom_Line Date", "").equals("")) {//for Type 5 custom1 parameter sent with Date value
                                DateFormat format = new SimpleDateFormat(sessionHandlerImpl.getUserDateFormat(request));
                                DateFormat sdf = new SimpleDateFormat(Constants.MMMMdyyyy);
                                String date = StringUtil.isNullOrEmpty(jobj.optString("Custom_Line Date", "")) ? null : jobj.optString("Custom_Line Date", ""); 
                                invRows.setCustom1(date!=null ? format.format(sdf.parse(date)) : "");
                            }
                            if (!jobj.optString("Custom_Line Custom 1", "").equals("")) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_Line Custom 1", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom1(fieldComboData.getValue());
                                } else {
                                    invRows.setCustom1(jobj.optString("Custom_Line Custom 1", ""));
                                }
                            }
                            if (!jobj.optString("Custom_Line Custom 2", "").equals("")) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_Line Custom 2", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom2(fieldComboData.getValue());
                                } else {
                                    invRows.setCustom2(jobj.optString("Custom_Line Custom 2", ""));
                                }
                            }
                            if (!jobj.optString("Custom_Line Custom 3", "").equals("")) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_Line Custom 3", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom3(fieldComboData.getValue());
                                } else {
                                    invRows.setCustom3(jobj.optString("Custom_Line Custom 3", ""));
                                }
                            }
                            invDetailsList.add(invRows);
                        }
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));

                    String invLinkToQuoteIds = "";
                    for (String l : quoteLinkIds) {
                        invLinkToQuoteIds += l + ",";
                    }
                    if (invLinkToQuoteIds.length() > 1) {
                        invLinkToQuoteIds = invLinkToQuoteIds.substring(0, invLinkToQuoteIds.length() - 1);
                    }

                    JSONObject obj = DataJArr.getJSONObject(0);
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);

                    String DESC_LINE_1 = "";
                    String DESC_LINE_2 = "";
                    String DESC_LINE_3 = "";
                    String DESC_LINE_4 = "";
                    String PROJECT_CODE = "";
                    String PROJECT = "";
                    String VENUE = "";
                    String PR_NUMBER = "";  //type 2
                    String QUOTE_PO_NUMBER = "";
                    String UNIT = "";//type 6

                    if (!obj.optString("Custom_Line title 1", "").equals("")) {
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), obj.optString("Custom_Line title 1", ""));
                        if (fieldComboData != null) {
                            DESC_LINE_1 = fieldComboData.getValue();
                        } else {
                            DESC_LINE_1 = obj.optString("Custom_Line title 1", "");
                        }
                    }

                    if (!obj.optString("Custom_Line title 2", "").equals("")) {
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), obj.optString("Custom_Line title 2", ""));
                        if (fieldComboData != null) {
                            DESC_LINE_2 = fieldComboData.getValue();
                        } else {
                            DESC_LINE_2 = obj.optString("Custom_Line title 2", "");
                        }
                    }
                    
                    if (!obj.optString("Custom_Line title 3", "").equals("")) {
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), obj.optString("Custom_Line title 1", ""));
                        if (fieldComboData != null) {
                            DESC_LINE_3 = fieldComboData.getValue();
                        } else {
                            DESC_LINE_3 = obj.optString("Custom_Line title 3", "");
                        }
                    }

                    if (!obj.optString("Custom_Line title 4", "").equals("")) {
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), obj.optString("Custom_Line title 2", ""));
                        if (fieldComboData != null) {
                            DESC_LINE_4 = fieldComboData.getValue();
                        } else {
                            DESC_LINE_4 = obj.optString("Custom_Line title 4", "");
                        }
                    }

                    if (!obj.optString("Custom_LP Code 1", "").equals("")) {
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), obj.optString("Custom_LP Code 1", ""));
                        if (fieldComboData != null) {
                            PROJECT_CODE = fieldComboData.getValue();
                        } else {
                            PROJECT_CODE = obj.optString("Custom_LP Code 1", "");
                        }
                    }
                    
                    if (!obj.optString("Custom_Project", "").equals("")) {
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), obj.optString("Custom_Project", ""));
                        if (fieldComboData != null) {
                            PROJECT = fieldComboData.getValue();
                        } else {
                            PROJECT = obj.optString("Custom_Project", "");
                        }
                    }
                    
                    if (!obj.optString("Custom_Venue", "").equals("")) {
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), obj.optString("Custom_Venue", ""));
                        if (fieldComboData != null) {
                            VENUE = fieldComboData.getValue();
                        } else {
                            VENUE = obj.optString("Custom_Venue", "");
                        }
                    }
                    
                    if (!obj.optString("Custom_PR No", "").equals("")) {
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), obj.optString("Custom_PR No", ""));
                        if (fieldComboData != null) {
                            PR_NUMBER = fieldComboData.getValue();
                        } else {
                            PR_NUMBER = obj.optString("Custom_PR No", "");
                        }
                    }
                    
                    if (!obj.optString("Custom_PO Number", "").equals("")) {
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), obj.optString("Custom_PO Number", ""));
                        if (fieldComboData != null) {
                            QUOTE_PO_NUMBER = fieldComboData.getValue();
                        } else {
                            QUOTE_PO_NUMBER = obj.optString("Custom_PO Number", "");
                        }
                    }
                    
                    if (!obj.optString("Custom_Unit", "").equals("")) {
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), obj.optString("Custom_Unit", ""));
                        if (fieldComboData != null) {
                            UNIT = fieldComboData.getValue();
                        } else {
                            UNIT = obj.optString("Custom_Unit", "");
                        }
                    }
                    
                    String careOf = "";
                    HashMap<String, Object> requestParams = new HashMap<String, Object>();
                    requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    requestParams.put(Constants.filter_values, Arrays.asList(companyid, 25));
                    requestParams.put("isActivated", 1);
                    requestParams.put("order_by", Arrays.asList("sequence"));
                    requestParams.put("order_type", Arrays.asList("asc"));
                    List lst = null;
                    result = accAccountDAOobj.getFieldParams(requestParams);
                    lst = result.getEntityList();
                    lst = accAccountDAOobj.sortOnParent(lst);
                    Iterator ite = lst.iterator();
                    while (ite.hasNext()) {
                        FieldParams tmpcontyp = null;
                        tmpcontyp = (FieldParams) ite.next();
                        if (tmpcontyp.getFieldname().equals("Custom_C/O")) {
                            KwlReturnObject custumObjresult = null;
                            CustomerCustomData accCustomerCustomData = null;
                            custumObjresult = accountingHandlerDAOobj.getObject(CustomerCustomData.class.getName(), obj.optString("personid", ""));
                            accCustomerCustomData = (CustomerCustomData) custumObjresult.getEntityList().get(0);
                            if (accCustomerCustomData != null) {
                                String coldata = accCustomerCustomData.getCol(tmpcontyp.getColnum());
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if(tmpcontyp.getFieldtype() == 1){
                                        careOf = coldata;
                                    }else if (tmpcontyp.getFieldtype() == 4 || tmpcontyp.getFieldtype() == 7 ) {

                                    String[] coldataArray = coldata.split(",");
                                    String Coldata = "";
                                    for (int countArray = 0; countArray < coldataArray.length; countArray++) {
                                        Coldata += "'" + coldataArray[countArray] + "',";
                                    }
                                    Coldata = Coldata.substring(0, Coldata.length() - 1);
                                    String ColValue = accAccountDAOobj.getfieldcombodatabyids(Coldata);
                                    careOf=ColValue ;

                                    }
                                }
                            }
                        }
                    }
                    String header_imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String footer_imagepath = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("HEADER_IMAGEPATH", header_imagepath);
                    invoiceMap.put("FOOTER_IMAGEPATH", footer_imagepath);
                    invoiceMap.put("TITLE", title);
                    invoiceMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                    invoiceMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                    invoiceMap.put("CUSTOMER_NAME", obj.optString("personname", ""));
                    invoiceMap.put("CUSTOMER_ADDRESS", obj.optString("billtoaddress", ""));
                    invoiceMap.put("CUSTOMER_ATTN", obj.optString("billingContactPerson", ""));
                    invoiceMap.put("CUSTOMER_EMAIL", obj.optString("billingEmail", ""));
                    invoiceMap.put("CUSTOMER_HP", obj.optString("billingMobile", ""));
                    invoiceMap.put("CUSTOMER_ACCOUNT", careOf); //type 2
                    invoiceMap.put("ENTRY_NUMBER", obj.optString("billno", ""));
                    invoiceMap.put("PAYMENT_TERMS", obj.optString("termname", ""));
                    invoiceMap.put("PO_NUMBER", isQuote ? QUOTE_PO_NUMBER : obj.optString("porefno",""));
                    invoiceMap.put("PR_NUMBER", PR_NUMBER);  //type 2
                    invoiceMap.put("QUOTE_NUMBER", isQuote ? obj.optString("billno", "") : obj.optString("porefno",""));  //type 4 //Nicky- 16119,16078
                    invoiceMap.put("UNIT", UNIT);  //type 6
                    invoiceMap.put("DESC_LINE_1", DESC_LINE_1);
                    invoiceMap.put("DESC_LINE_2", DESC_LINE_2);
                    invoiceMap.put("DESC_LINE_3", DESC_LINE_3);
                    invoiceMap.put("DESC_LINE_4", DESC_LINE_4);
                    invoiceMap.put("PROJECT_CODE", PROJECT_CODE);  //type 4
                    invoiceMap.put("PROJECT_NAME", PROJECT);  //type 4
                    invoiceMap.put("SALESPERSON_NAME", obj.optString("salespersonname",""));  //type 4
                    invoiceMap.put("SALESPERSON_DESIGNATION", obj.optString("salespersondesignation",""));  //type 4
                    invoiceMap.put("VENUE", VENUE);
                    invoiceMap.put("CURRENCY_SYMBOL", obj.optString("currencysymbol", ""));
                    invoiceMap.put("SUBTOTAL", obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(subtotal, companyid));
                    invoiceMap.put("GST_AMOUNT", obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("GST_PERCENT", (obj.optDouble("taxpercent", 0)) == 0 ? "" : " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid) + "%");
                    invoiceMap.put("TOTAL_AMOUNT", obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble(amountKey, 0), companyid));

                    filename = filename + type + "_" + obj.optString("billno", "") + ".pdf";
                   
                    if(type==3 ||type==4){
                    //subreport part
                        InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/RightSpaceTaxInvoiceType"+type+"SubReport.jrxml");
                        JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                        JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                        invoiceMap.put("TaxInvoiceSubReport", jasperReportSubReport);
                    }
                    InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/RightSpaceTaxInvoiceType"+type+".jrxml");
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }

    @Override
     public List<Object> exportCustomerQuotationForFasten(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
//        String jrxmlFile = "/FastenCustomerQuotation.jrxml";// with border
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
//        int type = request.getParameter("type") != null ? Integer.parseInt(request.getParameter("type")) : 0;
        String recArray[] = recordIDs.split(",");
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;
                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONObject DataJObjRows = new JSONObject();
                    JSONArray DataJArrRows = new JSONArray();
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";
                    HashMap<String, Object> requestParams = accSalesOrderServiceDAOobj.getSalesOrdersMap(request);
                    requestParams.put("billId", invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("dataFormatValue", authHandler.getDateOnlyFormat(request));
                    requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));
                    if (StringUtil.isNullOrEmpty(request.getParameter("archieve"))) {
                        requestParams.put("archieve", 0);
                    } else {
                        requestParams.put("archieve", Integer.parseInt(request.getParameter("archieve")));
                    }
                    requestParams.put("closeflag", null);
                    requestParams.put("sopolinkflag", null);
                    requestParams.put("linkFlagInSO", null);
                    requestParams.put("linkFlagInInv", null);
                    requestParams.put("dtype", request.getParameter("dtype"));
                    boolean isOrder = false;
                    String isorder = request.getParameter("isOrder");
                    if (!StringUtil.isNullOrEmpty(isorder) && StringUtil.equal(isorder, "true")) {
                        isOrder = true;
                    }
                    requestParams.put("isOrder", isOrder);
                    requestParams.put("userId", sessionHandlerImpl.getUserid(request));
                    KwlReturnObject invoiceResult = accSalesOrderDAOobj.getQuotations(requestParams);
                    DataJArr = accSalesOrderServiceDAOobj.getQuotationsJson(requestParams, invoiceResult.getEntityList(), DataJArr);
                    requestParams.put("bills", invoiceID);
                    DataJObjRows = accSalesOrderServiceDAOobj.getQuotationRows(requestParams);
                    ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();
                    Map<String, Object> rows = new HashMap<String, Object>();
                    double subtotal=0;
                    if (DataJObjRows.length() > 0) {
                        DataJArrRows = DataJObjRows.getJSONArray("data");
                        for (int i = 0; i < DataJArrRows.length(); i++) {
                            JSONObject jobj = DataJArrRows.getJSONObject(i);
                            rows = new HashMap<String, Object>();
                            double productamount=0;
                            rows.put("ProductName",jobj.optString("productname", ""));
                            rows.put("ProductCode",jobj.optString("pid", ""));
                            rows.put("srNo",jobj.optString("srno", ""));
                            rows.put("desc",jobj.optString("desc", ""));
                            rows.put("qty",authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                            rows.put("uom",jobj.optString("uomname", ""));
                            rows.put("rate",authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                            rows.put("DiscoutIsPercent", authHandler.formattedCommaSeparatedAmount(jobj.optDouble("prdiscount", 0), companyid)+(jobj.optDouble("discountispercent", 0) == 0?"":"%"));
                            if (!jobj.optBoolean("discountispercent", false)) {
                                if (jobj.optDouble("discountispercent", 0) == 0) {
                                    productamount = (jobj.optDouble("rate", 0) * jobj.optDouble("quantity", 0)) - authHandler.round(jobj.optDouble("prdiscount", 0), companyid); // Flat
                                    rows.put("disc", jobj.optDouble("prdiscount", 0)+"");
                                } else {
                                    productamount = (jobj.optDouble("rate", 0) * jobj.optDouble("quantity", 0)) - authHandler.round(((jobj.optDouble("rate", 0) * jobj.optDouble("quantity", 0)) * (jobj.optDouble("prdiscount", 0) / 100)), companyid); // Percentage Value
                                    rows.put("disc", jobj.optDouble("prdiscount", 0)+"");
                                }
                            }else{
                              rows.put("disc", jobj.optDouble("prdiscount", 0));
                            }
                            rows.put("total",authHandler.formattedCommaSeparatedAmount(productamount, companyid));
                            subtotal+=productamount;
                            invDetailsList.add(rows);
                        }
                    }
                    Collections.sort(invDetailsList, new SrNoComparator());
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                    JSONObject obj = DataJArr.getJSONObject(0);
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                     HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, companyid);
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true); //true to get billing address
                    addressParams.put("customerid",obj.optString("personid", ""));
                    invoiceMap.put("Document_NO", obj.optString("billno", ""));
//                    invoiceMap.put("billto", obj.optString("personname", "")+"\n"+obj.optString("billtoaddress", ""));
                    invoiceMap.put("billto", obj.optString("personname", "")+"\n"+accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams));
                    invoiceMap.put("Ship_To_ADDRESS",obj.optString("shiptoaddress", ""));
                    invoiceMap.put("Ship_To_ADDRESS", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("salesPersonCode", obj.optString("salespersonname", ""));
                    invoiceMap.put("FOB", obj.optString("fob", ""));
                    invoiceMap.put("customercode", obj.optString("personcode", ""));
                    invoiceMap.put("ShipVia", obj.optString("shipvia", ""));
                    invoiceMap.put("currencycode", obj.optString("currencycode", ""));
                    invoiceMap.put("PAYMENT_TERMS", obj.optString("termname", ""));
                    invoiceMap.put("CompanyName", obj.optString("companyname", ""));
                    invoiceMap.put("CompanyAddress", AccountingAddressManager.getCompanyDefaultBillingAddressFasten(companyid, accountingHandlerDAOobj));
                    invoiceMap.put("dueDate", obj.optString("validtilldateinuserformat", ""));
                    invoiceMap.put("shipDate", obj.optString("shipdateinuserformat", ""));
                    invoiceMap.put("memo", obj.optString("memo", ""));
                    invoiceMap.put("Amount_In_Words", obj.optString("amountinWords", ""));
                    invoiceMap.put("orderedBy", obj.optString("preparedBy", ""));
                    invoiceMap.put("SubTotal", authHandler.formattedCommaSeparatedAmount(subtotal, companyid));
                    invoiceMap.put("GSTAmount", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("TotalAmount", authHandler.formattedCommaSeparatedAmount(obj.optDouble("orderamountwithTax", 0), companyid));
                    invoiceMap.put("ProjectName", obj.optString("Custom_Project Name", ""));
                    invoiceMap.put("ProjectLocation", obj.optString("Custom_Project Location", ""));
                    invoiceMap.put("attn", obj.optString(Constants.BILLING_CONTACT_PERSON));
                    invoiceMap.put("Phone", obj.optString(Constants.BILLING_PHONE));
                    invoiceMap.put("Fax", obj.optString(Constants.BILLING_FAX));
                    invoiceMap.put("Email", obj.optString(Constants.BILLING_EMAIL));
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    File logo = new File(imagepath);
                    invoiceMap.put("isLogoPresent", logo.exists());
                    invoiceMap.put("logo", imagepath);
                    InputStream inputStream = null;
                    title = "Quote ";
                    filename = "CustomerQuote_" + obj.optString("billno", "") + "_v1.pdf";
//                    if(type==2){
//                        jrxmlFile = "/FastenCustomerQuotation2.jrxml";// without border
//                    }else if(type==3){
//                        jrxmlFile = "/FastenCustomerQuotation3.jrxml";// with border aligned to date
//                    }
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") +  "/FastenCustomerQuotation2.jrxml");
                    invoiceMap.put("TITLE", title + obj.optString("billno", ""));
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }    
    
 public List<Object> exportCustomerInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int templateflag = Integer.parseInt(request.getParameter("templateflag"));
        int type = 0 ;
        boolean isFixedAsset=(StringUtil.isNullOrEmpty(request.getParameter("isFixedAsset")))?false:Boolean.parseBoolean(request.getParameter("isFixedAsset"));
        if(!StringUtil.isNullOrEmpty(request.getParameter("type")) && templateflag == Constants.BakerTilly_templateflag_pcs){
         type = Integer.parseInt(request.getParameter("type"));
        }
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();
                    ArrayList<JasperProductTable> invDetailsListWithoutTax = new ArrayList<JasperProductTable>();//For Baker Tilly Subreport
                    ArrayList<JasperProductTable> invDetailsListWithTax = new ArrayList<JasperProductTable>();// For Baker Tilly Subreport

                    double rowDiscountTotal = 0;
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";

                    HashMap<String, Object> requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
                    requestParams.put(Constants.billid, invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("CashAndInvoice", true);

                    KwlReturnObject invoiceResult = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                    DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, invoiceResult.getEntityList(), DataJArr);
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                    HashMap<String, Object> genericDataMap = new HashMap<String, Object>();
                    DataJArrRows = accInvoiceServiceDAO.getInvoiceRows(paramJobj, invoiceID.split(","),genericDataMap);

                    HashSet<String> quoatationLinkIds = new HashSet<String>();
                    HashSet<String> doLinkIds = new HashSet<String>();
                    double subtotal=0;
                    List<String> gstCodeList =new ArrayList<String>();
                    gstCodeList.add("GST(ZR)@0.00%");
                    Boolean isSameGSTCode = true;
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                        String tempLinkTo = jobj.optInt("linktype", -1) == 2 ? jobj.optString("linkto", "") : "";
                        if (!tempLinkTo.equals("")) {
                            quoatationLinkIds.add(tempLinkTo);
                        }
                        String tempDoLinkTo = jobj.optInt("linktype", -1) == 1 ? jobj.optString("linkto", "") : "";
                        if (!tempDoLinkTo.equals("")) {
                            doLinkIds.add(tempDoLinkTo);
                        }
                        invRows.setDesc(jobj.optString("desc", ""));
                        invRows.setCustom1(jobj.optString("unitname", ""));
                        
                        if(templateflag==Constants.Tony_FiberGlass_templateflag){
                        invRows.setQty(authHandler.formattingDecimalForQuantity(jobj.optDouble("quantity", 0), companyid));
                        }else{
                        invRows.setQty(authHandler.formattedQuantity(jobj.optDouble("quantity",0), companyid));
                        }
                        invRows.setCode(jobj.optString("pid",""));
                        invRows.setRate(authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        invRows.setTotal(authHandler.formattedCommaSeparatedAmount(jobj.optDouble("amount", 0), companyid));
                        invRows.setTotalinDouble(authHandler.round(jobj.optDouble("amount", 0),companyid));
                        invRows.setRowTaxAmount(jobj.optDouble("taxamount", 0));
                        invRows.setAmountCurrency(jobj.optString("currencysymbol", ""));
                        invRows.setTotalWithoutTax((jobj.optDouble("amount", 0)-jobj.optDouble("taxamount", 0)));
                        
                        invRows.setTotalWithout_Tax_Discount(authHandler.formattedCommaSeparatedAmount((jobj.optDouble("quantity", 0)*jobj.optDouble("rate", 0)), companyid));
                        rowDiscountTotal+=jobj.optDouble("discountvalue",0);
                  
                        if (templateflag == Constants.BakerTilly_templateflag_pcs) {
                            KwlReturnObject productCategories = null;
                            productCategories = accProductObj.getProductCategoryForDetailsReport(jobj.optString("productid", ""));
                            List productCategoryList = productCategories.getEntityList();
                            String cateogry = "";
                            String gstCode = jobj.optString("taxNameForExport", "");
                            Iterator catIte = productCategoryList.iterator();
                            while (catIte.hasNext()) {
                                ProductCategoryMapping pcm = (ProductCategoryMapping) catIte.next();
                                String categoryName = pcm.getProductCategory().getValue().toString();
                                cateogry += categoryName + "";
                            }
                            if (gstCode.equals("GST(OS)@0.00%")) {
                                cateogry = "EXPENSES PAID ON BEHALF OF CLIENT";
                                invRows.setProductCategoryID(1);
                                invDetailsListWithoutTax.add(invRows);
                            } else {
                                invRows.setCustom1("GSTRECORD");//for grouping pourpose at JRXML Side
                                if (cateogry.equalsIgnoreCase("FEE") || StringUtil.isNullOrEmpty(cateogry)) {
                                    invRows.setProductCategoryID(1);
                                    cateogry = "OUR PROFESSIONAL CHARGES";
                                } else {
                                    cateogry = "OUT OF POCKET EXPENSES";
                                    invRows.setProductCategoryID(2);
                                }
                                invDetailsListWithTax.add(invRows);

//                                if (!StringUtil.isNullOrEmpty(gstCode)) {// ERP-18366
//                                    if (gstCodeList.isEmpty()) {
//                                        gstCodeList.add(gstCode);
//                                    } else 
                                        if (!gstCodeList.contains(gstCode) && isSameGSTCode) {
                                        isSameGSTCode = false;
                                    }
//                                }
                            }
                            invRows.setProductCategory(cateogry);
                        }
                        invDetailsList.add(invRows);
                        subtotal+=(jobj.optDouble("amount", 0)-jobj.optDouble("taxamount", 0));
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                    if (templateflag == Constants.BakerTilly_templateflag_pcs) {
                        Collections.sort(invDetailsListWithTax, new JasperProductTable());// To get sorted list as per category ID 
                        invoiceMap.put("TableDataWithTAX", new JRBeanCollectionDataSource(invDetailsListWithTax));
                        invoiceMap.put("TableDataWithoutTax", new JRBeanCollectionDataSource(invDetailsListWithoutTax));
                    }
                    String quotationLinkTo = "";
                    for (String l : quoatationLinkIds) {
                        quotationLinkTo += l + ",";
                    }
                    if (quotationLinkTo.length() > 0) {
                        quotationLinkTo = quotationLinkTo.substring(0, quotationLinkTo.length() - 1);
                    }
                    
                    String doLinkTo = "";
                    for (String l : doLinkIds) {
                        doLinkTo += l + ",";
                    }
                    if (doLinkTo.length() > 0) {
                        doLinkTo = doLinkTo.substring(0, doLinkTo.length() - 1);
                    }
                    

                    JSONObject obj = DataJArr.getJSONObject(0);
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String imagepath1 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                    invoiceMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                    invoiceMap.put("CUSTOMER_NAME", obj.optString("customername", ""));
                    invoiceMap.put("CUSTOMER_CODE", obj.optString("customercode", ""));
                    invoiceMap.put("CUSTOMER_BILLTO_ADDRESS",(templateflag == Constants.BakerTilly_templateflag_pcs)? obj.optString(Constants.BILLING_ADDRESS, ""):obj.optString("billtoaddress", ""));
                    invoiceMap.put("CUSTOMER_SHIPTO_ADDRESS",  obj.optString(Constants.SHIPPING_ADDRESS, "") );
                    invoiceMap.put("PAYMENT_TERMS",obj.optString("termname", ""));
                    invoiceMap.put("SUBTOTAL", obj.optString("currencycode", "") + " " + authHandler.formattedCommaSeparatedAmount(subtotal, companyid));
                    invoiceMap.put("SUBTOTAL_WITOUT_CURRENCY",authHandler.formattedCommaSeparatedAmount(subtotal, companyid));
                    invoiceMap.put("GST_AMOUNT", obj.optString("currencycode", "") + " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("GST_AMOUNT_WITOUT_CURRENCY", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("GST_REG_NUMBER", companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");//                    invoiceMap.put("GST_PERCENT", (obj.optDouble("taxpercent", 0)) == 0 ? "GST" : authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0)) + "% GST");
                    invoiceMap.put("GST_NAME", StringUtil.isNullOrEmpty(obj.optString("taxname", "GST"))?"GST @ 7%":obj.optString("taxname", "GST"));//Used for Baker Tilly Client
                    invoiceMap.put("HAS_GLOBAL_GST", !StringUtil.isNullOrEmpty(obj.optString("taxname", " ")));//Used for Baker Tilly Client
                    invoiceMap.put("GST_PERCENT", "7% GST");
                    invoiceMap.put("TOTAL_AMOUNT", obj.optString("currencycode", "") + " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                    invoiceMap.put("TOTAL_AMOUNT_WITOUT_CURRENCY", authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                    invoiceMap.put("BALANCE_DUE", obj.optString("currencycode", "") + " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("amountdue", 0), companyid));
                    invoiceMap.put("ATTN", obj.optString(Constants.BILLING_CONTACT_PERSON, ""));
                    invoiceMap.put("SALESMAN_CODE", obj.optString("Custom_Salesman Code", ""));
                    invoiceMap.put("QUOTATION_REF", StringUtil.isNullOrEmpty(quotationLinkTo)? "":"Refer to quotation ref "+quotationLinkTo);
                    invoiceMap.put("INVOICE_NUMBER", obj.optString("billno", ""));
                    invoiceMap.put("DO_NUMBER", doLinkTo);
                    invoiceMap.put("PO_NUMBER", obj.optString("Custom_P/O Number", ""));
                    invoiceMap.put("PREPARED_BY", obj.optString("createdby", ""));
                    invoiceMap.put("IMAGEPATH", imagepath);
                    invoiceMap.put("IMAGEPATH1", imagepath1);
                    invoiceMap.put("CURRENCY_SYMBOL", obj.optString("currencysymbol", ""));
                    invoiceMap.put("CURRENCY_CODE",  obj.optString("currencycode", ""));
                    //Extra Params For Amcoweld tax invoice template
                    invoiceMap.put("AMOUNT_IN_WORDS", obj.optString("amountinWords", ""));
                    invoiceMap.put("SHIPTO_ATTN", obj.optString(Constants.BILLING_CONTACT_PERSON, ""));
                    invoiceMap.put("TEL", obj.optString(Constants.BILLING_PHONE, ""));
                    invoiceMap.put("FAX", obj.optString(Constants.BILLING_FAX, ""));
                    invoiceMap.put("SMCode", obj.optString("salesPersonCode", ""));
                    invoiceMap.put("PO_Number", obj.optString("porefno", ""));
                    invoiceMap.put("taxpercent", obj.optDouble("taxpercent", 0)+"%");
                    invoiceMap.put("DISCOUNT_TOTAL", authHandler.formattedCommaSeparatedAmount(rowDiscountTotal, companyid));
                    invoiceMap.put("SUBTOTAL_WITH_DISCOUNT", authHandler.formattedCommaSeparatedAmount((subtotal+rowDiscountTotal), companyid));
                    //extra - params for swatow tax invoice template
                    String DESC_LINE_1 = "";
                    if(templateflag == Constants.Swatow_templateflag) {
                        
                        invoiceMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                        invoiceMap.put("PAYMENT_TERMS", obj.optBoolean("cashtransaction", false)? "Cash":(obj.optString("termdays", ""))+" days");
                        invoiceMap.put("HP", obj.optString("billingMobile", ""));
                        invoiceMap.put("REMARKS", obj.optString("memo", ""));
                        invoiceMap.put("CURRENCY", obj.optString("currencycode", ""));
                        
                        if (!obj.optString("Custom_Line Title", "").equals("")) {
                            FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), obj.optString("Custom_Line Title", ""));
                            if (fieldComboData != null) {
                                DESC_LINE_1 = fieldComboData.getValue();
                            } else {
                                DESC_LINE_1 = obj.optString("Custom_Line Title", "");
                            }
                        }
                        invoiceMap.put("LINE_TITLE", StringUtil.isNullOrEmpty(DESC_LINE_1) ? "":DESC_LINE_1);
                        invoiceMap.put("TITLE", "TAX INVOICE");
                    }
                    //==============================================
                    
                    double advance = 0;
                    double discount = 0;
                    if (!StringUtil.isNullOrEmpty(invoiceID)) {
                        HashMap<String, Object> requestParam = new HashMap();
                        requestParam.put("invoiceid", invoiceID);
                        KwlReturnObject curresult = null;
                        curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
                        List<InvoiceTermsMap> termMap = curresult.getEntityList();
                        for (InvoiceTermsMap invoiceTerMap : termMap) {
                            InvoiceTermsSales mt = invoiceTerMap.getTerm();
                            double termAmnt = invoiceTerMap.getTermamount();
                            if (mt.getTerm().equals("Advance")) {
                                advance = termAmnt;
                            } else if (mt.getTerm().equals("Discount")) {
                                discount = termAmnt;
                            }
                        }
                    }
                    
                    invoiceMap.put("ADVANCE", obj.optString("currencycode", "") + " " + authHandler.formattedCommaSeparatedAmount(advance, companyid));
                    invoiceMap.put("DISCOUNT", obj.optString("currencycode", "") + " " + authHandler.formattedCommaSeparatedAmount(discount, companyid));

                    InputStream inputStream = null;
                    InputStream inputStreamSubreport = null;
                    if(isFixedAsset){
                        filename = "AssetDisposalInvoice_";
                    }else{
                        filename  = "TaxInvoice_";
                    }
                    if (templateflag == Constants.Tony_FiberGlass_templateflag) {
                            filename = filename + obj.optString("billno", "") + ".pdf";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TonyFiberglassTaxInvoice.jrxml");
                    } else if(templateflag == Constants.Swatow_templateflag) {
                            filename = filename + obj.optString("billno", "") + ".pdf";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/Swatow_TaxInvoice.jrxml");
                    
                    } else if (templateflag == Constants.BakerTilly_templateflag_pcs) {
                        invoiceMap.put("LINE_GST_NAME",isSameGSTCode?"GST@0.00%":"GST@7.00%");//  Used for Baker Tilly Client
                        invoiceMap.put("LINE_TOTAl",invDetailsListWithoutTax.isEmpty()?"Total":"");//  Used for Baker Tilly Client
                        invoiceMap.put("IS_NO_TOTAl",invDetailsListWithoutTax.isEmpty());//  Used for Baker Tilly Client
                       
                        invoiceMap.put("isWithHeaderFooter", type==1?true:false);
                        filename = filename + obj.optString("billno", "") + ".pdf";
                        inputStreamSubreport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BakerTillyCustomerInvoice_subreport.jrxml");
                        JasperDesign jasperDesignSubreport = JRXmlLoader.load(inputStreamSubreport);
                        JasperReport jasperReportSubreport = JasperCompileManager.compileReport(jasperDesignSubreport);
                        invoiceMap.put("SubReport", jasperReportSubreport);
                        
                        inputStreamSubreport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BakerTillyCustomerInvoice_subreport2.jrxml");
                        JasperDesign jasperDesignSubreport2 = JRXmlLoader.load(inputStreamSubreport);
                        JasperReport jasperReportSubreport2 = JasperCompileManager.compileReport(jasperDesignSubreport2);
                        invoiceMap.put("SubReport2", jasperReportSubreport2);
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BakerTillyCustomerInvoice.jrxml");
                    } else if(templateflag == Constants.Amcoweld_templateflag){
                        filename = filename + obj.optString("billno", "") + ".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/AmcoweldTaxInvoicePreprinted.jrxml");
                    }
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }    
     
   public List<Object> exportDeliveryOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int templateflag = Integer.parseInt(request.getParameter("templateflag"));
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();

                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";

                    HashMap<String, Object> requestParams = accInvoiceServiceDAO.getDeliveryOrdersMap(request);
                    requestParams.put(Constants.billid, invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("CashAndInvoice", true);
                    
                    HashMap fieldMap = new HashMap();
                    boolean isFixedAsset = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isFixedAsset));
                    boolean isConsignment = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isConsignment));
                    boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isLeaseFixedAsset))) ? Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset)) : false;
                    Map reqParam = new HashMap();
                    reqParam.put("companyid", companyid);
                    reqParam.put("isFixedAsset", isFixedAsset);
                    reqParam.put("isConsignment", isConsignment);
                    reqParam.put("isLeaseFixedAsset", isLeaseFixedAsset);
                    fieldMap = accInvoiceServiceDAO.getDODetailsCustomFieldMap(reqParam);
                                        
                    KwlReturnObject doResult = accInvoiceDAOobj.getDeliveryOrdersMerged(requestParams);
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                    DataJArr = accInvoiceServiceDAO.getDeliveryOrdersJsonMerged(paramJobj, doResult.getEntityList());
//                    DataJArr = accInvoiceServiceDAO.getDeliveryOrdersJsonMerged(request, doResult.getEntityList());
                    JSONObject dOrows = accInvoiceServiceDAO.getDeliveryOrderRows(request,fieldMap);
                    DataJArrRows=dOrows.getJSONArray("data");
                    HashSet<String> quoatationLinkIds = new HashSet<String>();
                    HashSet<String> doLinkIds = new HashSet<String>();
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                        String tempLinkTo = jobj.optInt("linktype", -1) == 2 ? jobj.optString("linkto", "") : "";
                        if (!tempLinkTo.equals("")) {
                            quoatationLinkIds.add(tempLinkTo);
                        }
                        String tempDoLinkTo = jobj.optInt("linktype", -1) == 1 ? jobj.optString("linkto", "") : "";
                        if (!tempDoLinkTo.equals("")) {
                            doLinkIds.add(tempDoLinkTo);
                        }
                        invRows.setCode(jobj.optString("pid",""));
                        invRows.setDesc(jobj.optString("desc", ""));
                        invRows.setCustom1(jobj.optString("unitname", ""));
                        invRows.setQty(authHandler.formattingDecimalForQuantity(jobj.optDouble("quantity", 0), companyid));
                        invDetailsList.add(invRows);
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));

                    String quotationLinkTo = "";
                    for (String l : quoatationLinkIds) {
                        quotationLinkTo += l + ",";
                    }
                    if (quotationLinkTo.length() > 0) {
                        quotationLinkTo = quotationLinkTo.substring(0, quotationLinkTo.length() - 1);
                    }
                    
                    String doLinkTo = "";
                    for (String l : doLinkIds) {
                        doLinkTo += l + ",";
                    }
                    if (doLinkTo.length() > 0) {
                        doLinkTo = doLinkTo.substring(0, doLinkTo.length() - 1);
                    }


                    JSONObject obj = DataJArr.getJSONObject(0);
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String imagepath1 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                    invoiceMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                    invoiceMap.put("CUSTOMER_NAME", obj.optString("customername", ""));
//                    invoiceMap.put("CUSTOMER_BILLTO_ADDRESS", obj.optString("billtoaddress", ""));
                    invoiceMap.put("CUSTOMER_BILLTO_ADDRESS", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("BILLTO_ADDRESS", obj.optString("billtoaddress", ""));
                    invoiceMap.put("PAYMENT_TERMS",obj.optString("termname", ""));
                    invoiceMap.put("ADVANCE", obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("termamount", 0), companyid));
                    invoiceMap.put("ATTN", obj.optString(Constants.BILLING_CONTACT_PERSON, ""));
                    invoiceMap.put("ATTN1", obj.optString(Constants.SHIPPING_CONTACT_PERSON, ""));
                    invoiceMap.put("TEL", obj.optString(Constants.BILLING_PHONE, ""));
                    invoiceMap.put("FAX", obj.optString(Constants.BILLING_FAX, ""));
                    
                    invoiceMap.put("QUOTATION_REF", StringUtil.isNullOrEmpty(quotationLinkTo)? "":"Refer to quotation ref "+quotationLinkTo);
                    invoiceMap.put("INVOICE_NUMBER", obj.optString("billno", ""));
                    invoiceMap.put("DO_NUMBER", doLinkTo+"DO_NUMBER");
                    invoiceMap.put("PREPARED_BY", obj.optString("createdby", ""));
                    InputStream inputStream = null;
                    if (templateflag == Constants.Tony_FiberGlass_templateflag) {
                        invoiceMap.put("PO_NUMBER", obj.optString("Custom_P/O Number", ""));
                        invoiceMap.put("SALESMAN_CODE", obj.optString("Custom_Salesman Code", " "));
                        filename = "DeliveryOrder_" + obj.optString("billno", "") + ".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TonyFiberglassDeliveryOrder.jrxml");
                    } else if (templateflag == Constants.Amcoweld_templateflag) {
                        invoiceMap.put("PO_NUMBER", obj.optString("customerporefno", ""));
                        invoiceMap.put("SALESMAN_CODE", obj.optString("salesPersonCode", " "));
                        filename = "DeliveryOrder_" + obj.optString("billno", "") + ".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/AcoweldDeliveryOrder.jrxml");
                    }
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }    
   
   public List<Object> exportVendorQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int templateflag = Integer.parseInt(request.getParameter("templateflag"));
        try {
            
            JSONObject paramJobj=StringUtil.convertRequestToJsonObject(request);
            
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();

                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";

                    HashMap<String, Object> requestParams = accPurchaseOrderServiceDAOobj.getPurchaseOrderMap(request);
                    if (StringUtil.isNullOrEmpty(request.getParameter("archieve"))) {
                        requestParams.put("archieve", 0);
                    } else {
                        requestParams.put("archieve", Integer.parseInt(request.getParameter("archieve")));
                    }
                    requestParams.put("billId", invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);

                    KwlReturnObject invoiceResult = accPurchaseOrderobj.getQuotations(requestParams);
                    DataJArr = accPurchaseOrderServiceDAOobj.getQuotationsJson(paramJobj, invoiceResult.getEntityList(), DataJArr);
                    JSONObject dOrows =accPurchaseOrderServiceDAOobj.getQuotationRows(request);
                    DataJArrRows=dOrows.getJSONArray("data");

                    double subtotal=0;
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                        double rowtotal=(jobj.optDouble("quantity", 0)*jobj.optDouble("rate", 0))+jobj.optDouble("rowTaxAmount", 0);
                        invRows.setCode(jobj.optString("pid", ""));
                        invRows.setDesc(jobj.optString("desc", ""));
                        invRows.setUom(jobj.optString("unitname", ""));
                        invRows.setQty(authHandler.formattingDecimalForQuantity(jobj.optDouble("quantity", 0), companyid));
                        invRows.setRate(authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        invRows.setTotal(authHandler.formattedCommaSeparatedAmount(rowtotal, companyid));
                        invRows.setAmountCurrency(jobj.optString("currencysymbol", ""));
                        String serial="";
                        if(!jobj.optString("rowid","").equals("")){
                        KwlReturnObject kmsg = accCommonTablesDAO.getOnlySerialDetails(jobj.optString("rowid",""), false, Constants.Acc_Vendor_Quotation_ModuleId + "", false, false);
                            List batchserialdetails = kmsg.getEntityList();
                            Iterator iter = batchserialdetails.iterator();
                            while (iter.hasNext()) {
                                Object[] objArr = (Object[]) iter.next();
                                serial = objArr[8] != null ? (String) objArr[8] : "";
                            }
                            invRows.setCustom1(serial);
                        }
                        if(!jobj.optString("Custom_Condition", "").equals("")){
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_Condition", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom2(fieldComboData.getValue());
                                }else{
                                    invRows.setCustom2(jobj.optString("Custom_Condition", ""));
                                }
                        }
                        if(!jobj.optString("Custom_Serial Number", "").equals("")){
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), jobj.optString("Custom_Serial Number", ""));
                                if (fieldComboData != null) {
                                    invRows.setCustom1(fieldComboData.getValue());
                                }else{
                                    invRows.setCustom1(jobj.optString("Custom_Serial Number", ""));
                                }
                        }
                        invDetailsList.add(invRows);
                        subtotal+=rowtotal;
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));

                    JSONObject obj = DataJArr.getJSONObject(0);
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String imagepath1 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                    invoiceMap.put("IMAGEPATH", imagepath);
                    invoiceMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                    invoiceMap.put("COMPANY_BILLTO_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                    invoiceMap.put("COMPANY_SHIPTO_ADDRESS", AccountingAddressManager.getCompanyDefaultShippingAddress(companyid, accountingHandlerDAOobj));
                    invoiceMap.put("COMPANY_GST_REG_NO", companyAccountPreferences.getGstNumber() == null ? "" : companyAccountPreferences.getGstNumber());
                    invoiceMap.put("VENDOR_NAME", obj.optString("personname", ""));
                    invoiceMap.put("VENDOR_ADDRESS", obj.optString("billtoaddress", ""));
                  //Get Vendor address from vendoe management
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, companyid);
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true); //true to get billing address
                    addressParams.put("vendorid", obj.optString("personid", ""));
                    String personAddress = accountingHandlerDAOobj.getVendorAddress(addressParams);
                    invoiceMap.put("PERSON_ADDRESS", personAddress);
                    invoiceMap.put("VENDOR_CODE", obj.optString("personcode", ""));
                    invoiceMap.put("SUBTOTAL", authHandler.formattedCommaSeparatedAmount(subtotal, companyid));
                    invoiceMap.put("GST_AMOUNT", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("GST_PERCENT", (obj.optDouble("taxpercent", 0)) == 0 ? "" : " "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid) + "%");
                    invoiceMap.put("CUSTOMER_NAME", obj.optString("personname", ""));
                    invoiceMap.put("CUSTOMER_BILLTO_ADDRESS", obj.optString("billtoaddress", ""));
                    invoiceMap.put("SHIPTO_ADDRESS", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("PAYMENT_TERMS",obj.optString("termname", ""));
                    invoiceMap.put("SHIPVIA", obj.optString("shipvia", ""));
                    if(templateflag==Constants.Diamond_Aviation_templateflag){
                        invoiceMap.put("TOTAL_AMOUNT", obj.optString("currencycode", "") + " " + authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0)+obj.optDouble("taxamount", 0)), companyid));
                    }else{
                        invoiceMap.put("TOTAL_AMOUNT", obj.optString("currencycode", "") + " " + authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0)+obj.optDouble("taxamount", 0)), companyid));
                    }
                    invoiceMap.put("ATTN", obj.optString(Constants.BILLING_CONTACT_PERSON, ""));
                    invoiceMap.put("INVOICE_NUMBER", obj.optString("billno", ""));
                    invoiceMap.put("PREPARED_BY", obj.optString("createdby", ""));
                    invoiceMap.put("FREIGHT", obj.optString("Custom_Freight", ""));
                    invoiceMap.put("DELIVERY_DATE", obj.optString("shipdateinuserformat", ""));
                    InputStream inputStream = null;
                    if (templateflag == Constants.Tony_FiberGlass_templateflag) {
                            filename = "VendorQuotation_" + obj.optString("billno", "") + ".pdf";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TonyFiberglassVendorQuotation.jrxml");
                    }else if(templateflag==Constants.Diamond_Aviation_templateflag){
                        title = "QUOTE ";
                        filename = "Quote_Exchange_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationVendorQuotation.jrxml");
                        invoiceMap.put("TITLE", title + obj.optString("billno", ""));
                    }
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }      
    
      @Override
    public List<Object> exportARKCustomerInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int templateflag = Integer.parseInt(request.getParameter("templateflag"));
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();

                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                    int type = request.getParameter("type") != null ? Integer.parseInt(request.getParameter("type")) : 0;
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";

                    HashMap<String, Object> requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
                    requestParams.put(Constants.billid, invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("CashAndInvoice", true);

                    KwlReturnObject invoiceResult = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                    DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, invoiceResult.getEntityList(), DataJArr);
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                    HashMap<String, Object> genericDataMap = new HashMap<String, Object>();
                    DataJArrRows = accInvoiceServiceDAO.getInvoiceRows(paramJobj, null,genericDataMap);
                    JSONObject obj = DataJArr.getJSONObject(0);
                    double subtotal = 0;
                    HashSet<String> linkIds = new HashSet<String>();
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                        String tempLinkTo = jobj.optInt("linktype", -1) == 0 ? jobj.optString("linkto", "") : "";
                        if (!tempLinkTo.equals("")) {
                            linkIds.add(tempLinkTo);
                        }
                        invRows.setSrNo("" + (i + 1));
                        invRows.setCode(jobj.optString("pid", ""));
                        invRows.setDesc(jobj.optString("desc", ""));
                        invRows.setCustom1(jobj.optString("Custom_Serial Number", ""));
                        invRows.setCustom2(jobj.optString("Custom_Condition", ""));
                        invRows.setQty(authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                        invRows.setRate(authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        invRows.setTotal(authHandler.formattedCommaSeparatedAmount(jobj.optDouble("amount", 0), companyid));
                        invRows.setAmountCurrency(obj.optString("currencycode", ""));
                        invDetailsList.add(invRows);
                        subtotal += jobj.optDouble("amount", 0);
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));

                    String linkTo = "";
                    for (String l : linkIds) {
                        linkTo += l + ",";
                    }
                    if (linkTo.length() > 0) {
                        linkTo = linkTo.substring(0, linkTo.length() - 1);
                    }


                 
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String imagepath1 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    double exchngerate = 0;
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                    invoiceMap.put("IMAGEPATH", imagepath);
                    invoiceMap.put("IMAGEPATH1", imagepath1);
                    invoiceMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                    invoiceMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                    invoiceMap.put("COMPANY_GST_REG_NO", companyAccountPreferences.getGstNumber() == null ? "" : companyAccountPreferences.getGstNumber());
                    invoiceMap.put("CUSTOMER_NAME", obj.optString("customername", ""));
                    invoiceMap.put("CUSTOMER_CODE", obj.optString("customercode", ""));
                    invoiceMap.put("CUSTOMER_BILLTO_ADDRESS", obj.optString("billtoaddress", ""));
                    // invoiceMap.put("CUSTOMER_SHIPTO_ADDRESS", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("ORDER_NUMBER", linkTo);
                    invoiceMap.put("PAYMENT_TERMS", obj.optBoolean("cashtransaction", false) ? "Cash" : (obj.optString("termdays", "")) + " days");
                    invoiceMap.put("SUBTOTAL", authHandler.formattedCommaSeparatedAmount(subtotal, companyid));
                    invoiceMap.put("GST_AMOUNT", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("GST_PERCENT", (obj.optDouble("taxpercent", 0)) == 0 ? "" : " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid) + "%");
                    invoiceMap.put("TOTAL_AMOUNT", authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                    invoiceMap.put("ATTN", obj.optString("salespersonname", ""));
                    invoiceMap.put("INOVICENO", obj.optString("billno", ""));
                    invoiceMap.put("porefno", obj.optString("porefno", ""));
                    invoiceMap.put("Memo", obj.optString("memo", ""));
                    invoiceMap.put("PostText", obj.optString("posttext", ""));
                    invoiceMap.put("Name", obj.optString("Custom_Name", ""));
                    invoiceMap.put("Transshipment", obj.optString("Custom_Transshipment", ""));//Transshipment
                    invoiceMap.put("Port", obj.optString("Custom_Port", ""));//Port
                    invoiceMap.put("Laycan", obj.optString("Custom_Laycan", ""));//Laycan
                    invoiceMap.put("ContractNo", obj.optString("Custom_Contract No", ""));//ContractNo
                    invoiceMap.put("VesselName", obj.optString("Custom_Vessel Name", ""));//VesselName
                    invoiceMap.put("CurrencyCode", obj.optString("currencycode", ""));
                    //=========Custom fields for Government Invoice==========
                    invoiceMap.put("Position", obj.optString("Custom_Position", ""));//Position
                    invoiceMap.put("CUSTOMER_INVOICENO", obj.optString("Custom_Customer Invoice No", ""));//Customer invoice #
                    exchngerate = obj.optDouble("Custom_Currency Rate", 1);
                    invoiceMap.put("ExchangeRate",exchngerate==1?"    ":exchngerate+"");//Exchange rate
                    invoiceMap.put("CurrencyCode", obj.optString("currencycode", ""));
                      invoiceMap.put("INVNO",obj.optString("Custom_Invoice No", ""));//Inv #
                    //=====Code To get Terms and Value List 
                    ArrayList<Terms> termslist = new ArrayList<Terms>();
                    if (!StringUtil.isNullOrEmpty(invoiceID)) {
                        HashMap<String, Object> requestParam = new HashMap();
                        requestParam.put("invoiceid", invoiceID);
                        KwlReturnObject curresult = null;
                        curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
                        List<InvoiceTermsMap> termMap = curresult.getEntityList();
                        for (InvoiceTermsMap invoiceTerMap : termMap) {
                            InvoiceTermsSales mt = invoiceTerMap.getTerm();
                            double termAmnt = invoiceTerMap.getTermamount();
                            Terms term = new Terms();
                            term.setTermName(mt.getTerm());
                            term.setTermValue("" + termAmnt);
                            term.setTermCurrency(obj.optString("currencycode", ""));
                            termslist.add(term);
                           
                        }
                    }
                    invoiceMap.put("termsList", new JRBeanCollectionDataSource(termslist));
                    InputStream inputStream = null;
                    //------Code to handle base and foreign currency rates
                    double baseCurrencyRate = obj.optDouble("oldcurrencyrate");
                    double externalCurrencyRate = obj.getDouble("externalcurrencyrate");

                    invoiceMap.put("TAXAMOUNTINBASE",authHandler.formattedCommaSeparatedAmount((obj.optDouble("taxamount", 0)*exchngerate), companyid));
                    invoiceMap.put("AMOUNTINBASE",authHandler.formattedCommaSeparatedAmount((subtotal*exchngerate), companyid));
                    title = "Tax Invoice ";
                    filename = "TaxInvoice" + obj.optString("billno", "") + ".pdf";
                    if(type == 0){
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/ARKNoramlInvoice.jrxml");
                    }else{
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/ARKGovernmentInvoice.jrxml");
                    }
                    invoiceMap.put("TITLE", title + obj.optString("billno", ""));
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    @Override
    public List<Object> exportGoodsReceiptOrderJasperReport(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, JSONException, SessionExpiredException, ParseException {
        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int templateflag = Integer.parseInt(request.getParameter("templateflag"));
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    billid = s;
                    if (StringUtil.isNullOrEmpty(billid)) {
                        billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    KwlReturnObject objItr;
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);

                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    String grNumber = "";
                    String date = "";
                    String vendorName = "";
                    String Vendoraddress = "";
                    String shipToaddress = "";
                    String status = "";
                    String dueDate = "";
                    String shpDate = "";
                    String shipVia = "";
                    String FOB = "";
                    String memo = "";
                    String preparedBy = "";
                    String companyName = "";
                    double rowTaxAmountTotal = 0;
                    double rowDiscountTotal = 0;
                    try {
                        objItr = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), billid);
                        GoodsReceiptOrder grOrder = (GoodsReceiptOrder) objItr.getEntityList().get(0);
                        Vendor vendor = grOrder.getVendor();
                        KWLCurrency currency = null;
                        if (grOrder.getCurrency() != null) {
                            currency = grOrder.getCurrency();
                        }
                        grNumber = grOrder.getGoodsReceiptOrderNumber() == null ? "" : grOrder.getGoodsReceiptOrderNumber();
                        date = grOrder.getOrderDate() != null ? authHandler.getUserDateFormatterWithoutTimeZone(request).format(grOrder.getOrderDate()) : "";
                        vendorName = vendor.getName() != null ? vendor.getName() : "";

                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put(Constants.companyKey, companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("vendorid", vendor.getID());
                        Vendoraddress = grOrder.getBillingShippingAddresses() != null ? !StringUtil.isNullOrEmpty(CommonFunctions.getBillingShippingAddress(grOrder.getBillingShippingAddresses(), true)) ? CommonFunctions.getBillingShippingAddress(grOrder.getBillingShippingAddresses(), true) : "" : accountingHandlerDAOobj.getVendorAddress(addressParams);
                        addressParams.put("isBillingAddress", false);    //false to get shipping address
                        shipToaddress = grOrder.getBillingShippingAddresses() != null ? !StringUtil.isNullOrEmpty(CommonFunctions.getBillingShippingAddress(grOrder.getBillingShippingAddresses(), false)) ? CommonFunctions.getBillingShippingAddress(grOrder.getBillingShippingAddresses(), false) : "" : accountingHandlerDAOobj.getVendorAddress(addressParams);
                        
                        status = grOrder.getStatus() != null ? grOrder.getStatus().getValue() : "";
                        shipVia = grOrder.getShipvia() != null ? grOrder.getShipvia() : "";
                        FOB = grOrder.getFob() != null ? grOrder.getFob() : "";
                        memo = grOrder.getMemo() != null ? grOrder.getMemo() : "";
                        preparedBy = grOrder.getCreatedby() != null ? grOrder.getCreatedby().getFullName() : "";
                        companyName = company.getCompanyName() != null ? company.getCompanyName() : "";
                        shpDate = grOrder.getShipdate() != null ? authHandler.getUserDateFormatterWithoutTimeZone(request).format(grOrder.getShipdate()) : "";
                        OnlyDatePojo datePojo = new OnlyDatePojo();
                        datePojo.setDate(date);
                        datePojoList.add(datePojo);
                        //Get LIne level data 
                        ArrayList<JasperProductTable> subreportList = new ArrayList<JasperProductTable>();
                        HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
                        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                        filter_names.add("grOrder.ID");
                        order_by.add("srno");
                        order_type.add("asc");
                        doRequestParams.put("filter_names", filter_names);
                        doRequestParams.put("filter_params", filter_params);
                        doRequestParams.put("order_by", order_by);
                        doRequestParams.put("order_type", order_type);
                        filter_params.clear();
                        filter_params.add(grOrder.getID());
                        KwlReturnObject podresult = accGoodsReceiptobj.getGoodsReceiptOrderDetails(doRequestParams);
                        Iterator itr = podresult.getEntityList().iterator();
                        while (itr.hasNext()) {
                            double rate = 0;
                            JasperProductTable subtable = new JasperProductTable();
                            GoodsReceiptOrderDetails row = (GoodsReceiptOrderDetails) itr.next();
                            subtable.setSrNo("" + row.getSrno());
                            subtable.setCode(row.getProduct() != null ? row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "" : "");
                            subtable.setQty(authHandler.formattedQuantity(row.getDeliveredQuantity(), companyid));
                            rate = row.getRate() != 0 ? row.getRate() : 0;
                            subtable.setRate(authHandler.formattedCommaSeparatedUnitPrice(rate, companyid));
                            subtable.setTotal(authHandler.formattedCommaSeparatedAmount((row.getDeliveredQuantity() * row.getRate()), companyName));
                            subtable.setDesc(row.getDescription() != null ? row.getDescription().replaceAll("\n", "<br>") : "");
                            subtable.setName(row.getProduct() != null ? row.getProduct().getName() != null ? row.getProduct().getName() : "" : "");
                            subtable.setAmountCurrency(currency != null ? currency.getCurrencyCode() : "");
                            subreportList.add(subtable);
                        }
                        invoiceMap.put("SubReportData", new JRBeanCollectionDataSource(subreportList));
                        invoiceMap.put("DUEDATE", "");
                        invoiceMap.put("COMPANY_NAME", companyName);
                        invoiceMap.put("VENDOR_NAME", vendorName);
                        invoiceMap.put("BILLTOADDRESS", Vendoraddress);
                        invoiceMap.put("GST_PERCENT", grNumber);
                        invoiceMap.put("SHIPTOADDRESS", shipToaddress);
                        invoiceMap.put("GRNumber", grNumber);
                        invoiceMap.put("STATUS", status);
                        invoiceMap.put("SHIP_DATE", shpDate);
                        invoiceMap.put("IMAGEPATH", grNumber);
                        invoiceMap.put("SHIP_VIA", shipVia);
                        invoiceMap.put("FOB", FOB);
                        invoiceMap.put("PreparedBY", preparedBy);
                        invoiceMap.put("Memo", memo);
                        InputStream inputStream = null;
                        //Background Image path
                        String imagepath = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        invoiceMap.put("imagePath2", imagepath);
                        String filename = "GoodsReceipt" + grNumber + ".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationGoodsReceipt.jrxml");
                        invoiceMap.put("TITLE", "Goods Receipt" + grNumber);
                        response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                        list.add(jasperPrint);
                    } catch (Exception ex) {
                        Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

            }
        } catch (ServiceException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }



        return list;
    }

    @Override
    public JasperPrint exportCustomerLedgerJasperReport(JSONObject request) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public JasperPrint exportVendorLedgerJasperReport(JSONObject request) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportCreditNoteJasperReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportCreditNoteJasperReport(HttpServletRequest request, HttpServletResponse response, String billIds) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportDebitNoteJasperReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportDebitNoteJasperReport(HttpServletRequest request, HttpServletResponse response, String billIds) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportPaymentReceipt(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportContraPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportCustomerInvoiceReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportLSHCustomerInvoiceReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportSenwanCommercialInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportFerrateGroupTaxInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<Object> exportForm21AInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<JasperPrint> exportExciseFormERJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<JasperPrint> exportForm201CJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<JasperPrint> exportForm33Jasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<Object> exportRuleNo11Jasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public List<Object> exportRuleNo11JasperForInterStockTransfer(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public List<Object> exportRuleNo11JasperForPO(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public List<Object> exportCommercialInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<Object> exportMalaysianGstTaxInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportMalaysianGstCreditDebitNote(HttpServletRequest request, String billid, String companyid, int mode) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportPurchaseOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportSenwanGroupPurchaseOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportFerrateGroupPurchaseOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportF1RecreationPurchaseOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportDeliveryOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportSenwanGroupCustomerQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportVHQCustomerQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportPacificTecDeliveryOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportVHQSalesOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportFerrateGroupVendorInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportSenwanTecPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportTIDPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportFerrateGroupPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportLSHPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportLSHPaymentReceipt(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportSatsTaxInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportSATSCreditNoteJasperReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportSatsVendorTaxInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportSATSDebitNoteJasperReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportHengguanCustomerQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportBITDeliveryOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportPurchaseRequisition(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportBMCustomerInvoiceReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportFOneCustomerInvoiceReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportF1RecreationCustomerQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportPurchaseReturn(HttpServletRequest request, HttpServletResponse response, String billid, String DNNUmber ) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public Map exportForm201AJson(Map request) throws ServiceException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportSalesReturnJasper(HttpServletRequest request, HttpServletResponse response ,String billid, String CNNumber) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportPackingList(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportGCBCreditNoteJasperReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportGCBPurchaseRequisition(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportProductCompositionJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<Object> exportInvoicepackingList(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<Object> exportSupplementaryInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    public JSONObject exportSalesReturn(JSONObject paramJobj) throws ServiceException, SessionExpiredException {      //ERP-30208 : Sales Return only
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public JSONObject exportSalesReturnWithCN(JSONObject paramJobj) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public JSONObject exportCreditSales(JSONObject paramJobj) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public JSONObject exportCashSales(JSONObject paramJobj) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public JSONObject exportSalesOrder(JSONObject paramJobj) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    public List<Object> exportPermitInvoiceList(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        try {
            String billid = "";
            boolean avoidRecursiveLink = false;
            String recordIDs = request.getParameter("billIds") != null ? request.getParameter("billIds") : "";
            String recArray[] = recordIDs.split(",");
            if (recArray.length != 0) {
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                PackingInvoiceListJasper packingInvoice = new PackingInvoiceListJasper();
                ArrayList<PackingInvoiceListJasper> packingInvoiceList = new ArrayList<PackingInvoiceListJasper>();
                ArrayList<PackingInvoiceListJasperTable> packingInvoiceTableList = new ArrayList<PackingInvoiceListJasperTable>();
                Map<String, Object> permitInvoiceListMap = new HashMap<String, Object>();
                String view = "permitInvoiceList";
                KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);
                String companyid = sessionHandlerImpl.getCompanyid(request);
                KwlReturnObject result = null;
                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) cmpresult.getEntityList().get(0);
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));
                String nameofperson = "";
                String contctno = "";
                String companyname = "";
                String customer = "";
                companyname = company.getCompanyName();
                User user = company.getCreator();
                nameofperson = user.getFullName()==null ? "" : user.getFullName() + "<br>" + user.getAddress();
                contctno = user.getContactNumber()==null?"" : user.getContactNumber();
                int totalctns = 0;
                double grandtotal = 0;
                String currencysim = "";
                String invoiceNumbers = "";
                int i=1;
                for (String s : recArray) {
                    billid = s;
                    if (StringUtil.isNullOrEmpty(billid)) {
                        billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    if (!StringUtil.isNullOrEmpty(request.getParameter("avoidRecursiveLink"))) {
                        avoidRecursiveLink = Boolean.FALSE.parseBoolean(request.getParameter("avoidRecursiveLink"));
                    }
                    JSONArray DataJArr = new JSONArray();
                    try {
                        DeliveryOrder deliveryOrder = null;
                        deliveryOrder = (DeliveryOrder) kwlCommonTablesDAOObj.getClassObject(DeliveryOrder.class.getName(), billid);
                        HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                        order_by.add("srno");
                        order_type.add("asc");
                        invRequestParams.put("order_by", order_by);
                        invRequestParams.put("order_type", order_type);
                        KwlReturnObject idresult = null;
                        Iterator itr = null;
                        customer = deliveryOrder.getCustomer().getName() + "<br>" + (deliveryOrder.getCustomer().getBillingAddress() != null ? deliveryOrder.getCustomer().getBillingAddress() : "");
                        filter_names.add("deliveryOrder.ID");
                        filter_params.add(deliveryOrder.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accInvoiceDAOobj.getDeliveryOrderDetails(invRequestParams);
                        itr = idresult.getEntityList().iterator();
                        int cnt = 0;
                        while (itr.hasNext()) {
                            double qtyctn = 0;
                            String department = "";
                            DeliveryOrderDetail row = (DeliveryOrderDetail) itr.next();
                            HashMap<String, Object> fieldrequestParams = new HashMap();
                            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Delivery_Order_ModuleId, 1));
                            HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
                            HashMap<String, String> customFieldMap = new HashMap<String, String>();
                            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                            HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
                            Map<String, Object> variableMap = new HashMap<String, Object>();
                            DeliveryOrderDetailCustomData deliveryOrderDetailCustomData = (DeliveryOrderDetailCustomData) row.getDeliveryOrderDetailCustomData();
                            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                            AccountingManager.setCustomColumnValues(deliveryOrderDetailCustomData, fieldMap, replaceFieldMap, variableMap);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                String valueForReport = "";
                                if (customFieldMap.containsKey(varEntry.getKey()) && coldata != null) {

                                    String[] valueData = coldata.split(",");
                                    for (String value : valueData) {
                                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), value);
                                        if (fieldComboData != null) {
                                            valueForReport += fieldComboData.getValue() + ",";
                                        }
                                    }
                                    if (valueForReport.length() > 1) {
                                        valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                                    }
                                    if (varEntry.getKey().equals("Custom_QTY CTN")) {
                                        qtyctn = Double.parseDouble(valueForReport);
                                    }
                                    if (varEntry.getKey().equals("Custom_DEPARTMENT")) {
                                        department = valueForReport;
                                    }
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        if (varEntry.getKey().equals("Custom_QTY CTN")) {
                                            qtyctn = Double.parseDouble(coldata);
                                        }
                                        if (varEntry.getKey().equals("Custom_DEPARTMENT")) {
                                            department = coldata;
                                        }
                                    }
                                }
                            }
                            PackingInvoiceListJasperTable piljt = new PackingInvoiceListJasperTable();
                            piljt.setDepartment(department);
                            piljt.setQtyctn("" +(int)qtyctn);
                            totalctns += (int)qtyctn;
                            piljt.setDescription(row.getDescription());
                            piljt.setSno("" +(i++));
                            piljt.setQtypics("" +authHandler.formattedQuantity(row.getDeliveredQuantity(), companyid));
                            piljt.setSku(row.getProduct().getProductid());
                            piljt.setRetailprice("" +authHandler.formattedAmount(row.getRate(), companyid));
                            piljt.setTotalamount("" +authHandler.formattedAmount((row.getDeliveredQuantity() * row.getRate()), companyid));
                            packingInvoiceTableList.add(piljt);
                            cnt++;
                            grandtotal += (row.getDeliveredQuantity() * row.getRate());
                        }
                        currencysim = deliveryOrder.getCurrency() == null ? currencysim : deliveryOrder.getCurrency().getSymbol();
                        Set<DeliveryOrderDetail> doRows = deliveryOrder.getRows();
                        String invoiceno = "";
                        boolean addflag = true;
                        DeliveryOrderDetail tempdodobj = null;
                        if (doRows != null && !doRows.isEmpty()) {
                            for (DeliveryOrderDetail temp : doRows) {
                                tempdodobj = temp;
                                if (invoiceNumbers.equals("")) {
                                    if (tempdodobj.getCidetails() != null && tempdodobj.getCidetails().getInvoice() != null) {
                                        if (!invoiceNumbers.contains(tempdodobj.getCidetails().getInvoice().getInvoiceNumber())) {
                                            invoiceNumbers += tempdodobj.getCidetails().getInvoice().getInvoiceNumber();
                                        }
                                    }
                                } else {
                                    if (tempdodobj.getCidetails() != null && tempdodobj.getCidetails().getInvoice() != null) {
                                        if (!invoiceNumbers.contains(tempdodobj.getCidetails().getInvoice().getInvoiceNumber())) {
                                            invoiceNumbers += "," + tempdodobj.getCidetails().getInvoice().getInvoiceNumber();
                                        }
                                    }
                                }
                                if (avoidRecursiveLink && temp.getCidetails() != null) {
                                    addflag = false;
                                }
                            }
                        }
                    } catch (ServiceException ex) {
                        Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                PackingInvoiceListJasperTable piljt = new PackingInvoiceListJasperTable();
                piljt.setCarton("");
                piljt.setSku("");
                piljt.setDescription(" ");
                piljt.setRetailprice(" ");
                packingInvoiceTableList.add(piljt);

                piljt = new PackingInvoiceListJasperTable();
                piljt.setCarton("");
                piljt.setSku("");
                piljt.setDescription("");
                piljt.setRetailprice("Total Ctns ");
                piljt.setTotalamount("" + (int)totalctns);
                packingInvoiceTableList.add(piljt);

                piljt = new PackingInvoiceListJasperTable();
                piljt.setCarton("");
                piljt.setSku("");
                piljt.setDescription(" ");
                piljt.setRetailprice(" ");
                packingInvoiceTableList.add(piljt);

                piljt = new PackingInvoiceListJasperTable();
                piljt.setCarton("");
                piljt.setSku("");
                piljt.setDescription("GRAND TOTAL (" + currencysim + " )");
                piljt.setRetailprice(" ");
                piljt.setTotalamount("" + authHandler.formattedAmount(grandtotal, companyid));
                packingInvoiceTableList.add(piljt);
                packingInvoice.setCompanyname(companyname);
                packingInvoice.setCompanyadd(company.getAddress());
                packingInvoice.setCustomer(customer);
                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                packingInvoice.setDate(df.format(new Date()));
                packingInvoice.setInvoiceno(invoiceNumbers.equals("")?"":invoiceNumbers);
                packingInvoice.setUser(nameofperson);
                packingInvoiceList.add(packingInvoice);
                permitInvoiceListMap.put("PackingInvoiceListData", new JRBeanCollectionDataSource(packingInvoiceTableList));
                String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                permitInvoiceListMap.put("imagePath", fileName1);
                permitInvoiceListMap.put("format", "pdf");
                response.setHeader("Content-Disposition", "attachment;filename=" + "PermitInvoiceList_v1.pdf");
                InputStream inputStream = null;
                try {
                    if (templateflag == Constants.Arklife_templateflag) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PermitInvoiceList.jrxml");
                    }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(packingInvoiceList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, permitInvoiceListMap, beanColDataSource);
                } catch (Exception e) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                }
                list.add(jasperPrint);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return list;
    }
    
    @Override
    public List<Object> exportFascinaWindowsDeliveryOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                Map<String, Object> deliveryOrderMap = new HashMap<String, Object>();
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;

                DateFormat df = new SimpleDateFormat("dd-MMM-yy");
                DecimalFormat quantityFormat = new DecimalFormat("0");

                DeliveryOrderJasper deliveryOrderJasper = new DeliveryOrderJasper();
                ArrayList<DeliveryOrderJasper> deliveryOrderList = new ArrayList<DeliveryOrderJasper>();
                ArrayList<DeliveryOrderTable2> deliveryOrderTable2List = new ArrayList<DeliveryOrderTable2>();
                try {
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    Company cmpObj = (Company) kwlCommonTablesDAOObj.getClassObject(Company.class.getName(), companyid);
                    String invno = "";
                    Date entryDate = null;
                    String customerName = "";
                    String customerAdd = "";
                    String customerEmail = "";
                    String customerPostal = "";
                    String customerPhone = "";
                    String customerFax = "";
                    String customerAttn = "";
                    String memo = "";

                    DeliveryOrder deliveryOrder = null;
                    deliveryOrder = (DeliveryOrder) kwlCommonTablesDAOObj.getClassObject(DeliveryOrder.class.getName(), billid);
                    
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, companyid);
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true); //true to get billing address
                    addressParams.put("customerid", deliveryOrder.getCustomer().getID());
                    
                    invno = deliveryOrder.getDeliveryOrderNumber();
                    entryDate = deliveryOrder.getOrderDate();
                    customerName = deliveryOrder.getCustomer().getName() != null ? deliveryOrder.getCustomer().getName() : "";
                    customerAdd = deliveryOrder.getBillingShippingAddresses() != null ? CommonFunctions.getBillingShippingAddressForSenwanTec(deliveryOrder.getBillingShippingAddresses(), true) : deliveryOrder.getCustomer() != null ? (accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams)).replaceAll("\n", "<br>") : "";
                    CustomerAddressDetails customerAddressDetail = null;
                    customerAddressDetail = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);

                    customerEmail = StringUtil.isNullOrEmpty(customerAddressDetail==null?"":customerAddressDetail.getEmailID()) ? "" : customerAddressDetail.getEmailID();
                    customerPostal = StringUtil.isNullOrEmpty(customerAddressDetail==null?"":customerAddressDetail.getPostalCode()) ? "" : " " + customerAddressDetail.getPostalCode();
                    customerAdd = customerAdd + (StringUtil.isNullOrEmpty(customerAddressDetail==null?"":customerPostal) ? "" : "\nPostal Code : " + customerPostal) + (StringUtil.isNullOrEmpty(customerEmail) ? "" : "\nEmail : " + customerEmail);
                    customerPhone = StringUtil.isNullOrEmpty(customerAddressDetail==null?"":customerAddressDetail.getPhone()) ? "" : customerAddressDetail.getPhone();
                    // customerFax = deliveryOrder.getCustomer() != null ? deliveryOrder.getCustomer().getCustomerAddresses() != null ? deliveryOrder.getCustomer().getCustomerAddresses().getBillingFax1() : "" : "";		customerFax = StringUtil.isNullOrEmpty(customerAddressDetail.getFax()) ? "" : ", Fax : " + customerAddressDetail.getFax();
                    customerFax = deliveryOrder.getCustomer() != null ? deliveryOrder.getCustomer().getAcccode() != null ? deliveryOrder.getCustomer().getAcccode() : "" : "";
                    customerAttn = StringUtil.isNullOrEmpty(customerAddressDetail==null?"":customerAddressDetail.getContactPerson()) ? "" : ", Fax : " + customerAddressDetail.getContactPerson();
                    memo = deliveryOrder.getMemo() != null ? deliveryOrder.getMemo() : "";
                    String approverName = "";
                    if (deliveryOrder.getCreatedby() != null) {
                        approverName = StringUtil.getFullName(deliveryOrder.getCreatedby());
                    }
                    deliveryOrderJasper.setDate(df.format(entryDate));
                    deliveryOrderJasper.setDonumber(invno);
                    deliveryOrderJasper.setName(customerName);
                    deliveryOrderJasper.setAddress(customerAdd);
                    deliveryOrderJasper.setPhone(customerPhone);
                    deliveryOrderJasper.setFax(customerFax);
                    deliveryOrderJasper.setAttn(customerAttn);
                    deliveryOrderJasper.setMemo(memo);
                    deliveryOrderList.add(deliveryOrderJasper);
                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    order_by.add("srno");
                    order_type.add("asc");
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    filter_names.add("deliveryOrder.ID");
                    filter_params.add(deliveryOrder.getID());
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);

                    idresult = accInvoiceDAOobj.getDeliveryOrderDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();
                    int i = 0;
                    while (itr.hasNext()) {
                        i++;
                        DeliveryOrderTable2 deliveryOrderTable2 = new DeliveryOrderTable2();
                        String prodName = "";
                        String prodDesc = "";
                        double quantity = 0, deliverdQuantity = 0;
                        String uom = "";
                        String linkTo = "-";

                        DeliveryOrderDetail row = (DeliveryOrderDetail) itr.next();
                        prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                            prodDesc = row.getDescription();
                        } else {
                            if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                prodDesc = row.getProduct().getDescription();
                            }
                        }
                        quantity = row.getActualQuantity();
                        deliverdQuantity = row.getDeliveredQuantity();
                        uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();

                        String parent = "NA";
                        String child = "NA";
                        MasterItem masterItemCategory = accProductObj.getProductsMasterItem(companyid, row.getProduct().getID());
                        if (masterItemCategory != null && masterItemCategory.getParent() != null) {
                            parent = masterItemCategory.getParent().getValue();
                            child = masterItemCategory.getValue();
                        } else if (masterItemCategory != null && masterItemCategory.getParent() == null) {
                            parent = masterItemCategory.getValue();
                        }

                        deliveryOrderTable2.setSno(Integer.toString(i));
                        deliveryOrderTable2.setUnit(uom);
                        deliveryOrderTable2.setCategory(parent);
                        deliveryOrderTable2.setProductname(prodName);
                        deliveryOrderTable2.setDesc(prodDesc);
                        deliveryOrderTable2.setQty(quantityFormat.format(deliverdQuantity));
                        deliveryOrderTable2List.add(deliveryOrderTable2);
                    }
                    deliveryOrderMap.put("DeliveryOrderSubReportData", new JRBeanCollectionDataSource(deliveryOrderTable2List));
                    deliveryOrderMap.put("companyname", cmpObj.getCompanyName());
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String fileName2 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    deliveryOrderMap.put("imagePath", fileName1);
                    deliveryOrderMap.put("footer", fileName2);
                    deliveryOrderMap.put("format", "pdf");
                    response.setHeader("Content-Disposition", "attachment;filename=" + "DeliveryOrder_v1.pdf");
                    try {
                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/FascinaWindowsDeliveryOrder.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);

                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(deliveryOrderList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, deliveryOrderMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                } catch (ServiceException ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportMalaysianGstNormalCreditDebitNote(HttpServletRequest request, String billid, String companyid, int mode) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportF1RecreationPurchaseReturn(HttpServletRequest request, HttpServletResponse response, String billid, String DNNumber) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportF1SalesReturnReport(HttpServletRequest request, HttpServletResponse response, String billids, String CNNumber) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<Object> exportF1RecreationCreditDebitNote(HttpServletRequest request, HttpServletResponse response, String recbillid) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        List<LabelValue> labelvalueList = new ArrayList<LabelValue>();
        List<OnlyDatePojo> onlyDatelist = new ArrayList<OnlyDatePojo>();
        OnlyDatePojo onlyDateObj = new OnlyDatePojo();
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
        KwlReturnObject idresult = null;
        String billid = recbillid;
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int mode = Integer.parseInt(request.getParameter("mode"));
//        if (recArray.length != 0) {
//            for (String s : recArray) {
//                billid = s;
//                if (StringUtil.isNullOrEmpty(billid)) {
//                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
//                }
        String customerName = "";
        String attn = "";
        String terms = "";
        String billAddr = "";
        String memo = "";
        Iterator itr = null;
        String linkTo = "";
        double totaltax = 0, discountTotalQuotation = 0, totaltaxpercent = 0;
        double totalAmount = 0;
        HashSet<String> linkIds = new HashSet<String>();
        JasperPrint jasperPrint = null;
        JasperReport jasperReport = null;
        JasperReport jasperReportSubReport = null;

        Map<String, Object> invoiceMap = new HashMap<String, Object>();
        try {
            DateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");
            String gstNo = "";
            boolean addShipTo = true;
            String cnNumber = "";
            Date entryDate = null;
            Date invDate = null;
            Date shipDate = null;
            Date currentDate = new Date();
            double subTotal = 0;
            double rowTaxAmountTotal = 0;
            double rowDiscountAmountTotal = 0;
            String curr = "";
            String postText = "";
            String approverName = "";
            String mail = "";
            String Tel = "";
            String Fax = "";
            String custCode = "";
            String title = "";

            KWLCurrency currency = null;
            String currencyid = "";
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            KwlReturnObject compResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compResult.getEntityList().get(0);

            if (mode == StaticValues.AUTONUM_CREDITNOTE) {
                KwlReturnObject creditNoteResult = kwlCommonTablesDAOObj.getObject(CreditNote.class.getName(), billid);
                CreditNote cn = (CreditNote) creditNoteResult.getEntityList().get(0);
                if (cn.getCreatedby() != null) {
                    approverName = StringUtil.getFullName(cn.getCreatedby());
                }
                title="CREDIT NOTE";
                currencyid = (cn.getCurrency() == null) ? currencyid : cn.getCurrency().getCurrencyID();
                currency = cn.getCurrency();
                curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                addShipTo = true;
                cnNumber = cn.getCreditNoteNumber();
//                entryDate = cn.getCreationDate() == null ? cn.getJournalEntry().getEntryDate() : cn.getCreationDate();
                entryDate = cn.getCreationDate();
                
                //params to send to get billing address
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put(Constants.companyKey, companyid);
                addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                addressParams.put("isBillingAddress", true); //true to get billing address
                if (cn.getVendor() == null) {
                    CustomerAddressDetails customerAddressDetail = null;
                    addressParams.put("customerid", cn.getCustomer().getID());
                    customerAddressDetail = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    customerName = cn.getVendor() == null ? cn.getCustomer().getName() : cn.getCustomer().getName();
                    billAddr = accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams);
                    //attn = cn.getCustomer().getCustomerAddresses() != null ? cn.getCustomer().getCustomerAddresses().getBillingContactPerson1() != null ? cn.getCustomer().getCustomerAddresses().getBillingContactPerson1() : "" : "";
                    terms = cn.getCustomer() == null ? "" : cn.getCustomer().getCreditTerm() == null ? "" : cn.getCustomer().getCreditTerm().getTermname();
                    if (customerAddressDetail != null) {
                        attn = StringUtil.isNullOrEmpty(customerAddressDetail.getContactPerson()) ? "" : customerAddressDetail.getContactPerson();
                        mail = StringUtil.isNullOrEmpty(customerAddressDetail.getEmailID()) ? "" : customerAddressDetail.getEmailID();
                        Fax = StringUtil.isNullOrEmpty(customerAddressDetail.getFax()) ? "" : customerAddressDetail.getFax();
                        Tel = StringUtil.isNullOrEmpty(customerAddressDetail.getPhone()) ? "" : customerAddressDetail.getPhone();
                    }//mail = cn.getCustomer().getCustomerAddresses() != null ? cn.getCustomer().getCustomerAddresses().getBillingEmail1() != null ? cn.getCustomer().getCustomerAddresses().getBillingEmail1() : "" : "";
                    //Fax = cn.getCustomer().getCustomerAddresses() != null ? cn.getCustomer().getCustomerAddresses().getBillingFax1() != null ? cn.getCustomer().getCustomerAddresses().getBillingFax1() : "" : "";
                    //Tel = cn.getCustomer().getCustomerAddresses() != null ? cn.getCustomer().getCustomerAddresses().getBillingPhone1() != null ? cn.getCustomer().getCustomerAddresses().getBillingPhone1() : "" : "";
                    custCode = cn.getCustomer() != null ? cn.getCustomer().getAcccode() : "";
                } else {
                    customerName = cn.getVendor() == null ? cn.getCustomer().getName() : cn.getVendor().getName();
                    VendorAddressDetails vendorAddressDetail = null;
                    addressParams.put("vendorid", cn.getVendor().getID());
                    vendorAddressDetail = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                    billAddr = accountingHandlerDAOobj.getVendorAddressForSenwanTec(addressParams);
                    //attn = cn.getVendor().getVendorAddresses() != null ? cn.getVendor().getVendorAddresses().getBillingContactPerson1() != null ? cn.getVendor().getVendorAddresses().getBillingContactPerson1() : "" : "";
                    terms = cn.getVendor() == null ? "" : cn.getVendor().getDebitTerm() == null ? "" : cn.getVendor().getDebitTerm().getTermname();
                    if (vendorAddressDetail != null) {
                        attn = StringUtil.isNullOrEmpty(vendorAddressDetail.getContactPerson()) ? "" : vendorAddressDetail.getContactPerson();
                        mail = StringUtil.isNullOrEmpty(vendorAddressDetail.getEmailID()) ? "" : vendorAddressDetail.getEmailID();
                        Fax = StringUtil.isNullOrEmpty(vendorAddressDetail.getFax()) ? "" : vendorAddressDetail.getFax();
                        Tel = StringUtil.isNullOrEmpty(vendorAddressDetail.getPhone()) ? "" : vendorAddressDetail.getPhone();
                    }
                    //Tel = cn.getVendor().getVendorAddresses() != null ? cn.getVendor().getVendorAddresses().getBillingPhone1() != null ? cn.getVendor().getVendorAddresses().getBillingPhone1() : "" : "";
                    //mail = cn.getVendor().getVendorAddresses() != null ? cn.getVendor().getVendorAddresses().getBillingEmail1() != null ? cn.getVendor().getVendorAddresses().getBillingEmail1() : "" : "";
                    //Fax = cn.getVendor().getVendorAddresses() != null ? cn.getVendor().getVendorAddresses().getBillingFax1() != null ? cn.getVendor().getVendorAddresses().getBillingFax1() : "" : "";
                    //Tel = cn.getVendor().getVendorAddresses() != null ? cn.getVendor().getVendorAddresses().getBillingPhone1() != null ? cn.getVendor().getVendorAddresses().getBillingPhone1() : "" : "";
                    custCode = cn.getVendor() != null ? cn.getVendor().getAcccode() : "";
                }
                memo = cn.getMemo() != null ? cn.getMemo() : "";
                if(!StringUtil.isNullOrEmpty(memo)){
                    LabelValue labelvalue = new LabelValue();
                    memo="<b>Remarks : </b>" + memo;
                    labelvalue.setLabel(memo);
                    labelvalue.setValue("");
                    labelvalueList.add(labelvalue);
                }
                CreditNoteDetail row = null;
                int i = 0;
                if (cn != null) {
                    Set<CreditNoteTaxEntry> dnTaxEntryDetails = cn.getCnTaxEntryDetails();
                    if (dnTaxEntryDetails != null && !dnTaxEntryDetails.isEmpty()) {

                        for (CreditNoteTaxEntry noteTaxEntry : dnTaxEntryDetails) {
                            LabelValue labelvalue = new LabelValue();
                            i++;
                            String accName = "";
                            String accCode = "";
                            String total1 = "";
                            String accDesc = "";
                            String prodCode = "";
                            String uom = "";
                            String taxCode = "";
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            double discount = 0;
                            double rowtaxamount = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;
                            
                            accCode = noteTaxEntry.getAccount().getAcccode();
                            accName = noteTaxEntry.getAccount().getName();
                            accDesc = noteTaxEntry.getDescription().replaceAll("\n", "<br>");
                            try{
                                accDesc= StringUtil.DecodeText(accDesc);
                            }catch(Exception e){
                                accDesc=accDesc;
                            }
//                            String composedDesc = StringUtil.isNullOrEmpty(accCode) ? accName + "<br>" + accDesc : accCode + " " + accName + "<br>" + accDesc;
//                            labelvalue.setLabel(composedDesc);
                            labelvalue.setLabel(accDesc);
                            
                            rowtaxamount = noteTaxEntry.getTaxamount();
                            amount1 = noteTaxEntry.getAmount();
                            amount_with_discount = amount1 - discount;
                            labelvalue.setValue(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                            labelvalueList.add(labelvalue);
                            
                            if (noteTaxEntry.getTax() != null) {
                            double taxPercent=0;
                            HashMap<String, Object> requestParams = new HashMap<String, Object>();
                            requestParams.put("transactiondate", entryDate);
                            requestParams.put("taxid", noteTaxEntry.getTax() != null ? noteTaxEntry.getTax().getID() : "");
                            requestParams.put(Constants.companyKey, companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            if (!taxList.isEmpty()) {
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                            String taxDesc = "Add "+taxPercent+"% GST";
                            labelvalue=new LabelValue();                            
                            labelvalue.setLabel(taxDesc);
                            labelvalue.setValue(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                            labelvalueList.add(labelvalue);
                            }
                            amount_with_tax = amount_with_discount + rowtaxamount;
                            subTotal += amount1;
                            rowDiscountAmountTotal += discount;
                            rowTaxAmountTotal += rowtaxamount;

                        }
                    } else {// in case of if tax is not included while creation of CN Value will be go fron jedetail table in case of Edit.
                        JournalEntry je = cn.getJournalEntry();
                        Set<JournalEntryDetail> jeDetails = je.getDetails();
                        for (JournalEntryDetail jed : jeDetails) {
                            LabelValue labelvalue = new LabelValue();
                            i++;
                            String accName = "";
                            String total1 = "";
                            String accDesc = "";
                            String accCode = "";
                            String uom = "";
                            String taxCode = "";
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            double discount = 0;
                            double rowtaxamount = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;
                            JSONObject obj = new JSONObject();
                            if (jed.isDebit()) {
                                accCode = jed.getAccount().getAcccode();
                                accName = jed.getAccount().getName();
                                accDesc = jed.getDescription().replaceAll("\n", "<br>");
                                try {
                                    accDesc = StringUtil.DecodeText(accDesc);
                                } catch (Exception e) {
                                    accDesc = accDesc;
                                }
                                labelvalue.setLabel(accDesc);
                                amount1 = jed.getAmount();
                                amount_with_discount = amount1 - discount;
                                amount_with_tax = amount_with_discount + rowtaxamount;
                                labelvalue.setValue(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                                labelvalueList.add(labelvalue);
                            }

                            subTotal += amount1;
                            rowDiscountAmountTotal += discount;
                            rowTaxAmountTotal += rowtaxamount;

                        }
                    }

                }
                HashMap<String, Object> cnRequestParams = new HashMap<String, Object>();
                ArrayList filter_names1 = new ArrayList(), filter_params1 = new ArrayList(), order_by1 = new ArrayList(), order_type1 = new ArrayList();
                filter_names1.add("creditNote.ID");
                order_by1.add("srno");
                order_type1.add("asc");
                cnRequestParams.put("filter_names", filter_names1);
                cnRequestParams.put("filter_params", filter_params1);
                cnRequestParams.put("order_by", order_by1);
                cnRequestParams.put("order_type", order_type1);

                filter_params1.clear();
                filter_params1.add(cn.getID());
                KwlReturnObject grdresult = accCreditNoteDAOobj.getCreditNoteDetails(cnRequestParams);
                Iterator itr1 = grdresult.getEntityList().iterator();
                while (itr1.hasNext()) {
                    row = (CreditNoteDetail) itr1.next();
                    Invoice invObj = row.getInvoice();
                    if (invObj != null) {
                        Date invoiceCreationDate = null;
                        invoiceCreationDate = invObj.getCreationDate();
//                        if (invObj.isIsOpeningBalenceInvoice()) {
//                            invoiceCreationDate = invObj.getCreationDate();
//                        } else {
//                            invoiceCreationDate = invObj.getJournalEntry().getEntryDate();
//                        }
                        String tempLinkTo = invObj.getInvoiceNumber();
                        linkIds.add(tempLinkTo);
//                                invDate = invoiceCreationDate;
                    }
                }
                for (String l : linkIds) {
                    linkTo += l + ",";
                }
                if (linkTo.length() > 1) {
                    linkTo = linkTo.substring(0, linkTo.length() - 1);
                }
                linkTo = StringUtil.isNullOrEmpty(linkTo) ? "" : linkTo;

                onlyDateObj.setDate(df1.format(entryDate));
                onlyDatelist.add(onlyDateObj);

                /// Code to get custome fields from JE details for Credit Note
                HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                HashMap<String, String> customFieldMap = new HashMap<String, String>();
                HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                HashMap<String, Integer> FieldMap = null;
                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Credit_Note_ModuleId));
                FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                Map<String, Object> variableMap = new HashMap<String, Object>();
                HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                Detailfilter_names.add(Constants.companyKey);
                Detailfilter_params.add(cn.getCompany().getCompanyID());
                Detailfilter_names.add("journalentryId");
                Detailfilter_params.add(cn.getJournalEntry().getID());
                Detailfilter_names.add("moduleId");
                Detailfilter_params.add(Constants.Acc_Credit_Note_ModuleId + "");
                invDetailRequestParams.put("filter_names", Detailfilter_names);
                invDetailRequestParams.put("filter_params", Detailfilter_params);
                KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                if (idcustresult.getEntityList().size() > 0) {
                    AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                    AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                    for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                        String coldata = varEntry.getValue().toString();
                        if (coldata != null) {

                            if (varEntry.getKey().equals("Custom_Quotation Ref No")) {
                                invoiceMap.put("QuotationNo", coldata);
                            } else if (varEntry.getKey().equals("Custom_Sales Person")) {
                                invoiceMap.put("salesPerson", coldata);
                            } else if (varEntry.getKey().equals("Custom_Source/Type")) {
                                invoiceMap.put("SourceType", coldata);
                            } else if ((varEntry.getKey().split("_")[1]).equals("Invoice Number")) {
                                linkTo=coldata;
                            }
                        }
                    }
                }
            } else if (mode == StaticValues.AUTONUM_DEBITNOTE) {
                KwlReturnObject creditNoteResult = kwlCommonTablesDAOObj.getObject(DebitNote.class.getName(), billid);
                DebitNote cn = (DebitNote) creditNoteResult.getEntityList().get(0);
                if (cn.getCreatedby() != null) {
                    approverName = StringUtil.getFullName(cn.getCreatedby());
                }
                currencyid = (cn.getCurrency() == null) ? currencyid : cn.getCurrency().getCurrencyID();
                currency = cn.getCurrency();
                curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                addShipTo = true;
                title="DEBIT NOTE";
                cnNumber = cn.getDebitNoteNumber();
//                entryDate = cn.getCreationDate() == null ? cn.getJournalEntry().getEntryDate() : cn.getCreationDate();
                entryDate = cn.getCreationDate();
                
                //params to send to get billing address
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put(Constants.companyKey, companyid);
                addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                addressParams.put("isBillingAddress", true); //true to get billing address
                if (cn.getVendor() == null) {
                    CustomerAddressDetails customerAddressDetail = null;
                    addressParams.put("customerid", cn.getCustomer().getID());
                    customerAddressDetail = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    customerName = cn.getVendor() == null ? cn.getCustomer().getName() : cn.getCustomer().getName();
                    billAddr = accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams);
//                    attn = cn.getCustomer().getCustomerAddresses() != null ? cn.getCustomer().getCustomerAddresses().getBillingContactPerson1() != null ? cn.getCustomer().getCustomerAddresses().getBillingContactPerson1() : "" : "";
                    if(customerAddressDetail!=null){
                        attn = StringUtil.isNullOrEmpty(customerAddressDetail.getContactPerson()) ? "" : customerAddressDetail.getContactPerson();
                        mail = StringUtil.isNullOrEmpty(customerAddressDetail.getEmailID()) ? "" : customerAddressDetail.getEmailID();
                        Fax = StringUtil.isNullOrEmpty(customerAddressDetail.getFax()) ? "" : customerAddressDetail.getFax();
                        Tel = StringUtil.isNullOrEmpty(customerAddressDetail.getPhone()) ? "" : customerAddressDetail.getPhone();
                    } 
                   
                    terms = cn.getCustomer() == null ? "" : cn.getCustomer().getCreditTerm() == null ? "" : cn.getCustomer().getCreditTerm().getTermname();
                    custCode = cn.getCustomer() != null ? cn.getCustomer().getAcccode() : "";
                } else {
                    customerName = cn.getVendor() == null ? cn.getCustomer().getName() : cn.getVendor().getName();
                    VendorAddressDetails vendorAddressDetail = null;
                    addressParams.put("vendorid", cn.getVendor().getID());
                    vendorAddressDetail = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                    billAddr = accountingHandlerDAOobj.getVendorAddressForSenwanTec(addressParams);                                       
                    terms = cn.getVendor() == null ? "" : cn.getVendor().getDebitTerm() == null ? "" : cn.getVendor().getDebitTerm().getTermname(); 
                    if (vendorAddressDetail != null) {
                        attn = StringUtil.isNullOrEmpty(vendorAddressDetail.getContactPerson()) ? "" : vendorAddressDetail.getContactPerson();
                        mail = StringUtil.isNullOrEmpty(vendorAddressDetail.getEmailID()) ? "" : vendorAddressDetail.getEmailID();
                        Fax = StringUtil.isNullOrEmpty(vendorAddressDetail.getFax()) ? "" : vendorAddressDetail.getFax();
                        Tel = StringUtil.isNullOrEmpty(vendorAddressDetail.getPhone()) ? "" : vendorAddressDetail.getPhone();
                    }                    
                    custCode = cn.getVendor() != null ? cn.getVendor().getAcccode() : "";
                }
                memo = cn.getMemo() != null ? cn.getMemo() : "";
                if(!StringUtil.isNullOrEmpty(memo)){
                    LabelValue labelvalue = new LabelValue();
                    memo="<b>Remarks : </b>" + memo;
                    labelvalue.setLabel(memo);
                    labelvalue.setValue("");
                    labelvalueList.add(labelvalue);
                }
                DebitNoteDetail row = null;
                int i = 0;
                if (cn != null) {
                    Set<DebitNoteTaxEntry> dnTaxEntryDetails = cn.getDnTaxEntryDetails();
                    if (dnTaxEntryDetails != null && !dnTaxEntryDetails.isEmpty()) {

                        for (DebitNoteTaxEntry noteTaxEntry : dnTaxEntryDetails) {
                            LabelValue labelvalue = new LabelValue();
                            i++;
                            String accName = "";
                            String accCode = "";
                            String total1 = "";
                            String accDesc = "";
                            String prodCode = "";
                            String uom = "";
                            String taxCode = "";
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            double discount = 0;
                            double rowtaxamount = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;
                            
                            accCode = noteTaxEntry.getAccount().getAcccode();
                            accName = noteTaxEntry.getAccount().getName();
                            accDesc = noteTaxEntry.getDescription().replaceAll("\n", "<br>");
//                            String composedDesc = StringUtil.isNullOrEmpty(accCode) ? accName + "<br>" + accDesc : accCode + " " + accName + "<br>" + accDesc;
                            labelvalue.setLabel(accDesc);
    
                            rowtaxamount = noteTaxEntry.getTaxamount();
                            amount1 = noteTaxEntry.getAmount();
                            amount_with_discount = amount1 - discount;
                            labelvalue.setValue(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                            labelvalueList.add(labelvalue);
                            
                            if (noteTaxEntry.getTax() != null) {
                            double taxPercent=0;
                            HashMap<String, Object> requestParams = new HashMap<String, Object>();
                            requestParams.put("transactiondate", entryDate);
                            requestParams.put("taxid", noteTaxEntry.getTax() != null ? noteTaxEntry.getTax().getID() : "");
                            requestParams.put(Constants.companyKey, companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            if (!taxList.isEmpty()) {
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                            String taxDesc = "Add "+taxPercent+"% GST";
                            labelvalue=new LabelValue();                            
                            labelvalue.setLabel(taxDesc);
                            labelvalue.setValue(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                            labelvalueList.add(labelvalue);
                            }
                            amount_with_tax = amount_with_discount + rowtaxamount;
                            subTotal += amount1;
                            rowDiscountAmountTotal += discount;
                            rowTaxAmountTotal += rowtaxamount;

                        }
                    } else {// in case of if tax is not included while creation of CN Value will be go fron jedetail table in case of Edit.
                        JournalEntry je = cn.getJournalEntry();
                        Set<JournalEntryDetail> jeDetails = je.getDetails();
                        for (JournalEntryDetail jed : jeDetails) {
                            LabelValue labelvalue = new LabelValue();
                            i++;
                            String accName = "";
                            String total1 = "";
                            String accDesc = "";
                            String accCode = "";
                            String uom = "";
                            String taxCode = "";
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            double discount = 0;
                            double rowtaxamount = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;
                            JSONObject obj = new JSONObject();
                            if (jed.isDebit()) {
                                accCode = jed.getAccount().getAcccode();
                                accName = jed.getAccount().getName();
                                accDesc = jed.getDescription().replaceAll("\n", "<br>");
                                labelvalue.setLabel(accDesc);
                                amount1 = jed.getAmount();
                                amount_with_discount = amount1 - discount;
                                amount_with_tax = amount_with_discount + rowtaxamount;
                                labelvalue.setLabel(accDesc);
                                labelvalue.setValue(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                                labelvalueList.add(labelvalue);
                            }    
                            
                            subTotal += amount1;
                            rowDiscountAmountTotal += discount;
                            rowTaxAmountTotal += rowtaxamount;

                        }
                    }

                }
                HashMap<String, Object> cnRequestParams = new HashMap<String, Object>();
                ArrayList filter_names1 = new ArrayList(), filter_params1 = new ArrayList(), order_by1 = new ArrayList(), order_type1 = new ArrayList();
                filter_names1.add("debitNote.ID");
                order_by1.add("srno");
                order_type1.add("asc");
                cnRequestParams.put("filter_names", filter_names1);
                cnRequestParams.put("filter_params", filter_params1);
                cnRequestParams.put("order_by", order_by1);
                cnRequestParams.put("order_type", order_type1);

                filter_params1.clear();
                filter_params1.add(cn.getID());
                KwlReturnObject grdresult = accDebitNoteobj.getDebitNoteDetails(cnRequestParams);
                Iterator itr1 = grdresult.getEntityList().iterator();
                while (itr1.hasNext()) {
                    row = (DebitNoteDetail) itr1.next();
                    GoodsReceipt invObj = row.getGoodsReceipt();
                    if (invObj != null) {
                        Date invoiceCreationDate = null;
                        invoiceCreationDate = invObj.getCreationDate();
//                        if (invObj.isIsOpeningBalenceInvoice()) {
//                            invoiceCreationDate = invObj.getCreationDate();
//                        } else {
//                            invoiceCreationDate = invObj.getJournalEntry().getEntryDate();
//                        }
                        String tempLinkTo = invObj.getGoodsReceiptNumber();
                        linkIds.add(tempLinkTo);
//                                invDate = invoiceCreationDate;
                    }
                }
                for (String l : linkIds) {
                    linkTo += l + ",";
                }
                if (linkTo.length() > 1) {
                    linkTo = linkTo.substring(0, linkTo.length() - 1);
                }
                linkTo = StringUtil.isNullOrEmpty(linkTo) ? "" : linkTo;

                onlyDateObj.setDate(df1.format(entryDate));
                onlyDatelist.add(onlyDateObj);

                /// Code to get custome fields from JE details for Credit Note
                HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                HashMap<String, String> customFieldMap = new HashMap<String, String>();
                HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                HashMap<String, Integer> FieldMap = null;
                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Debit_Note_ModuleId));
                FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                Map<String, Object> variableMap = new HashMap<String, Object>();
                HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                Detailfilter_names.add(Constants.companyKey);
                Detailfilter_params.add(cn.getCompany().getCompanyID());
                Detailfilter_names.add("journalentryId");
                Detailfilter_params.add(cn.getJournalEntry().getID());
                Detailfilter_names.add("moduleId");
                Detailfilter_params.add(Constants.Acc_Debit_Note_ModuleId + "");
                invDetailRequestParams.put("filter_names", Detailfilter_names);
                invDetailRequestParams.put("filter_params", Detailfilter_params);
                KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                if (idcustresult.getEntityList().size() > 0) {
                    AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                    AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                    for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                        String coldata = varEntry.getValue().toString();
                        if (coldata != null) {

                            if (varEntry.getKey().equals("Custom_Quotation Ref No")) {
                                invoiceMap.put("QuotationNo", coldata);
                            } else if (varEntry.getKey().equals("Custom_Sales Person")) {
                                invoiceMap.put("salesPerson", coldata);
                            } else if (varEntry.getKey().equals("Custom_Source/Type")) {
                                invoiceMap.put("SourceType", coldata);
                            } else if ((varEntry.getKey().split("_")[1]).equals("Invoice Number")) {
                                linkTo=coldata;
                            }
                        }
                    }
                }
            }
            invoiceMap.put("accNumber", custCode);
            invoiceMap.put("CustomerName", customerName);
            invoiceMap.put("contactPerson", attn);
            invoiceMap.put("customerTel", Tel);
            invoiceMap.put("customerFax", Fax);
            invoiceMap.put("customerEmail", mail);
            invoiceMap.put("CnDNNumber", "" + cnNumber);
            invoiceMap.put("InvNo", linkTo);
            invoiceMap.put("Terms", terms);
            invoiceMap.put("Title", title);
            invoiceMap.put("address", billAddr.replaceAll("\n", "<br>"));
            invoiceMap.put("AmountTotal",  authHandler.formattedCommaSeparatedAmount((subTotal + rowTaxAmountTotal - rowDiscountAmountTotal), companyid));
            invoiceMap.put("currency", currency != null ? currency.getSymbol() : "");
            invoiceMap.put("CompanyName", company != null ? company.getCompanyName() : "");
            invoiceMap.put("GSTRegNo", companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
            String logo = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
            invoiceMap.put("TableDataList", new JRBeanCollectionDataSource(labelvalueList));
            invoiceMap.put("imagePath2", logo);
            invoiceMap.put("format", "pdf");

            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationCreditDebitNote.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);

            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(onlyDatelist);
            jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
            list.add(jasperPrint);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }

        return list;
    }
     @Override
    public List<Object> exportSBISalesOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                List<OnlyDatePojo> onlydateList = new ArrayList<OnlyDatePojo>();
                List<SBISalesOrderProductTable> s0TableList = new ArrayList<SBISalesOrderProductTable>();

                List<Terms> termsList = new ArrayList<Terms>();
                OnlyDatePojo onlydateobj = new OnlyDatePojo();
                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                boolean isSelfBilledInvoice = false;
                boolean isSelfBilledInvoiceWithFC = false;
                String exchangerate = "";
                String rmcdApprovalNo = "";
                String customerName = "";
                String customerCode = "";
                String customerGSTNumber = "";
                String customerAdd = "";
                String attn = "";
                String recepientAttn = "";
                String terms = "";
                String billTo = "";
                String billAddr = "";
                String shipTo = "";
                String memo = "";
                String salesPerson = null;
                String billtoAddress = "";
                boolean isInclude = false; //Hiding or Showing P.O. NO field in single PDF 
                Iterator itr = null;
                String linkTo = "";
                HashSet<String> linkIds = new HashSet<String>();
                double totaltax = 0, discountTotalQuotation = 0, totaltaxpercent = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";
                String DeliveryMode = "";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                int templatflag = request.getParameter("templateflag") != null ? Integer.parseInt(request.getParameter("templateflag")) : 0;
                boolean issimplifiedtaxinvoice = request.getParameter("issimplifiedtaxinvoice") != null ? Boolean.parseBoolean(request.getParameter("issimplifiedtaxinvoice")) : false;
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
                Company company = (Company) cmpresult.getEntityList().get(0);
                Map<String, Object> invoiceMap = new HashMap<String, Object>();
                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df1 = authHandler.getUserDateFormatter(request);
                    HashMap<String, Object> requestParamsForCurrency = AccountingManager.getGlobalParams(request);//to change currency to base currency and so

                    String gstNo = "";
                    String invno = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    Date currentDate = new Date();
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String termName = "";
                    String termAmount = "0.00";
                    double subTotal = 0;
                    double ProductServiceTotal = 0;
                    double ServiceTotal = 0;
                    double ProductTotal = 0;
                    double ProductServiceTotalCost = 0;
                    double ServiceTotalCost = 0;
                    double ProductTotalCost = 0;
                    String curr = "";
                    String curr_base = "";//to show base currency at summnery 
                    String postText = "";
                    String approverName = "";
                    String custFaxHp = "";
                    String recepFaxHp = "";
                    String custEmail = "";
                    String porefno = "";
                    String tel = "";
                    String recepientTel = "";
                    String fax = "";
                    String recepientfax = "";
                    String custDID = "";
                    String recepDID = "";
                    String recepEmail = "";
                    
                    double exchangerateinternal = 1;
                    
                    KWLCurrency currency = null;
                    String currencyid = "";
                    if (mode == StaticValues.AUTONUM_SALESORDER) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(SalesOrder.class.getName(), billid);
                        SalesOrder inv = (SalesOrder) cap.getEntityList().get(0);
                        if (inv.getCreatedby() != null) {
                            approverName = StringUtil.getFullName(inv.getCreatedby());
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        curr = currency.getCurrencyCode() != null ? currency.getCurrencyCode() : "";
                        curr_base =company.getCurrency().getCurrencyCode();
                        invno = inv.getSalesOrderNumber();
                        entryDate = inv.getOrderDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipdate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();
                        ////--------------------Cust Addres Details------------------------
			CustomerAddressDetails customerAddressDetail = null;
			CustomerAddressDetails customerShippingAddressDetail = null;
			//params to send to get billing address
			HashMap<String, Object> addressParams = new HashMap<String, Object>();
			addressParams.put(Constants.companyKey,companyid);
			addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
			addressParams.put("isBillingAddress", true); //true to get billing address
			addressParams.put("customerid", inv.getCustomer().getID());
			customerAddressDetail =accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
			addressParams.put("isBillingAddress", false);
			customerShippingAddressDetail =accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                        
                        order_by.add("srno");
                        order_type.add("asc");
                        filter_names.add("salesOrder.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        invRequestParams.put("order_by", order_by);
                        invRequestParams.put("order_type", order_type);
                        idresult = accSalesOrderDAOobj.getSalesOrderDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? "" : inv.getCustomer().getName();
                        customerCode = inv.getCustomer() == null ? "" : inv.getCustomer().getAcccode() == null ? "" : inv.getCustomer().getAcccode();
                        customerAdd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        //attn = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingContactPerson() : inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getBillingContactPerson1() != null ? inv.getCustomer().getCustomerAddresses().getBillingContactPerson1() : "" : "";
                        attn = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingContactPerson() : customerAddressDetail != null ? customerAddressDetail.getContactPerson() != null ? customerAddressDetail.getContactPerson() : "" : "";
                        //recepientAttn = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingContactPerson() : inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getShippingContactPerson1() != null ? inv.getCustomer().getCustomerAddresses().getShippingContactPerson1() : "" : "";
                        recepientAttn = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingContactPerson() : customerShippingAddressDetail != null ? customerShippingAddressDetail.getContactPerson() != null ? customerShippingAddressDetail.getContactPerson() : "" : "";
                        salesPerson = inv.getSalesperson() != null ? inv.getSalesperson().getValue() : "";
                        billAddr = inv.getBillingShippingAddresses()!=null?inv.getBillingShippingAddresses().getBillingAddress():"";//CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), true);
                        shipTo =  inv.getBillingShippingAddresses()!=null?inv.getBillingShippingAddresses().getShippingAddress():"";//CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);
                        tel = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingPhone() : customerAddressDetail != null ? customerAddressDetail.getPhone() != null ? customerAddressDetail.getPhone() : "" : "";
                        //recepientfax = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingFax() : inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getShippingFax1() != null ? inv.getCustomer().getCustomerAddresses().getShippingFax1() : "" : "";
                        recepientfax = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingFax() : customerShippingAddressDetail != null ? customerShippingAddressDetail.getFax() != null ? customerShippingAddressDetail.getFax() : "" : "";
                        //fax = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingFax() : inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getBillingFax1() != null ? inv.getCustomer().getCustomerAddresses().getBillingFax1() : "" : "";
                        fax = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingFax() : customerAddressDetail != null ? customerAddressDetail.getFax() != null ? customerAddressDetail.getFax() : "" : "";
                        //recepientTel = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingPhone() : inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getShippingPhone1() != null ? inv.getCustomer().getCustomerAddresses().getShippingPhone1() : "" : "";
                        recepientTel = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingPhone() : customerShippingAddressDetail != null ? customerShippingAddressDetail.getPhone() != null ? customerShippingAddressDetail.getPhone() : "" : "";
                        //custFaxHp = (inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getBillingPhone1() != null ? inv.getCustomer().getCustomerAddresses().getBillingPhone1() : "--" : "--") + " / " + (inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getBillingFax1() != null ? inv.getCustomer().getCustomerAddresses().getBillingFax1() : "--" : "--");
                        custFaxHp = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingMobile() : "";
                        //recepFaxHp = (inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getShippingPhone1() != null ? inv.getCustomer().getCustomerAddresses().getShippingPhone1() : "--" : "--") + " / " + (inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getShippingFax1() != null ? inv.getCustomer().getCustomerAddresses().getShippingFax1() : "--" : "--");
                        recepFaxHp = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingMobile() : "";
                        custDID = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingPhone() : "";//+ " / " + (customerShippingAddressDetail != null ? customerShippingAddressDetail.getFax() != null ? customerShippingAddressDetail.getFax() : "--" : "--");
                        recepDID = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingPhone() : "";//+ " / " + (customerShippingAddressDetail != null ? customerShippingAddressDetail.getFax() != null ? customerShippingAddressDetail.getFax() : "--" : "--");
                        //custEmail = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingEmail() : inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getBillingEmail1() != null ? inv.getCustomer().getCustomerAddresses().getBillingEmail1() : "" : "";
                        recepEmail = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingEmail() : customerShippingAddressDetail != null ? customerShippingAddressDetail.getEmailID() != null ? customerShippingAddressDetail.getEmailID() : "" : "";
                        custEmail = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingEmail() : customerAddressDetail != null ? customerAddressDetail.getEmailID() != null ? customerAddressDetail.getEmailID() : "" : "";
                        exchangerateinternal = inv.getExternalCurrencyRate()==0?1:inv.getExternalCurrencyRate();
                        postText = inv.getPostText() == null ? "" : inv.getPostText();
                        terms = inv.getTerm() != null ? inv.getTerm().getTermname():"";
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo() != null ? inv.getMemo() : "";
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        SalesOrderDetail row = null;

                        int i = 0;
                        while (itr.hasNext()) {
                            SBISalesOrderProductTable tableSO = new SBISalesOrderProductTable();
                            i++;
                            double discount = 0, rowtaxamount = 0, rate = 0, discountPrice = 0;
                            String vendorCurrency = "";
                            String sNo = "";
                            String partNo = "";
                            String desc = "";
                            double qty = 0;
                            double unitSRP = 0;
                            double totalSRP = 0;
                            double unitCost = 0;
                            double totalCost = 0;
                            String vendor = "";
                            String poNo = "";
                            String doNo = "";
                            String invoiceNo = "";
                            String remarks = "";
                            double margin = 0;
                            double marginpercent = 0;
                            double totalSRPBaseCurrency=0;
                            double exchangerateVendorCurrency = 0;
                            
                            row = (SalesOrderDetail) itr.next();
                            sNo = row.getSrno() + "";
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                desc =  StringUtil.DecodeText(row.getDescription());
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                    desc =  StringUtil.DecodeText(row.getProduct().getDescription());
                                }
                            }
                            partNo = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                           
                            rowtaxamount = row.getRowTaxAmount();
                            if(row.getSalesOrder().isGstIncluded()){
                                unitSRP = row.getRateincludegst();
                            }else{
                                unitSRP = row.getRate();
                            }
                            qty = row.getQuantity();//Uniot Price document currency
                              discount = row.getDiscount();
                            totalSRP = (qty * unitSRP);//Total Price document currency
                              if (row.getDiscountispercent() == 1) {
                                discount = totalSRP * discount / 100;   // code to get discountPrice
                                totalSRP = (totalSRP) - discount;
                            } else {
                                totalSRP = totalSRP - discount;
                            }
                            if(!row.getSalesOrder().isGstIncluded()){
                                totalSRP = totalSRP + rowtaxamount;
                            }  
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalSRP, inv.getCurrency().getCurrencyID(), inv.getOrderDate(), inv.getExternalCurrencyRate());
                            totalSRPBaseCurrency =authHandler.round((Double) bAmt.getEntityList().get(0),companyid); ;
                      
                               
                            //---------------- Code to get Vendor mapping details for profit margin In SBi.............
                             KwlReturnObject cap1 = accountingHandlerDAOobj.getObject(SODetailsVendorMapping.class.getName(), row.getID());
                            SODetailsVendorMapping soVendorobj = (SODetailsVendorMapping) cap1.getEntityList().get(0);
                            if(soVendorobj!=null){
                            vendorCurrency = soVendorobj.getVendor()==null?"":soVendorobj.getVendor().getCurrency().getCurrencyCode();
                            vendor = soVendorobj.getVendor()==null?"":soVendorobj.getVendor().getName();
                            unitCost = soVendorobj.getUnitcost();//Unit Price vendor currency
                            totalCost = authHandler.round(soVendorobj.getTotalcost(),companyid);;//total cost vendor currency
                            exchangerateVendorCurrency = authHandler.round(soVendorobj.getExchangerate(),companyid);
                              }
                           
                            if (row.getProduct().getProducttype().getID().equals(Producttype.SERVICE)) {
                                ServiceTotal += totalSRP;// for sevice type product total in document currency
                                ServiceTotalCost+= totalCost;//for service type product in base currency
                            } else {
                                ProductTotal += totalSRP;//for inventory type product total in document currency
                                ProductTotalCost += totalCost;//for inventory type product in base currency
                            }
                            
//                            ------------- Linking Information for So-------------
                            if (!StringUtil.isNullOrEmpty(row.getPurchaseorderdetailid())) {//to get PO No. Linked
                                KwlReturnObject podetailresult = accountingHandlerDAOobj.getObject(PurchaseOrderDetail.class.getName(), row.getPurchaseorderdetailid());
                                PurchaseOrderDetail purchaseOrderDetail = (PurchaseOrderDetail) podetailresult.getEntityList().get(0);
                                if (purchaseOrderDetail != null) {
                                    poNo=  StringUtil.isNullOrEmpty(poNo)?poNo:(poNo +"<br>");
                                    poNo = poNo + purchaseOrderDetail.getPurchaseOrder().getPurchaseOrderNumber();
                                }
                            }
                            KwlReturnObject idresultDO = accInvoiceDAOobj.getDOIDFromSOD(row.getID(),"");//to get DO NO Linked
                            List listDO = idresultDO.getEntityList();
                            Iterator iteDO = listDO.iterator();
                            while (iteDO.hasNext()) {
                                DeliveryOrderDetail doDetail = (DeliveryOrderDetail) iteDO.next();
                                doNo =    StringUtil.isNullOrEmpty(doNo)?doNo:(doNo +"<br>");
                                doNo = doNo + doDetail.getDeliveryOrder().getDeliveryOrderNumber();
//                               invoiceNo =invoiceNo + (doDetail.getCidetails()!=null? doDetail.getCidetails().getInvoice()!=null?doDetail.getCidetails().getInvoice().getInvoiceNumber():"":"");//also get Invoice No if do is Linked To Some Invoice.
                                KwlReturnObject idresultINVOICE = accInvoiceDAOobj.getINVDFromDOD(doDetail.getID());//To Get Invoice's Linked
                                List listINVOICE = idresultINVOICE.getEntityList();
                                Iterator ite1 = listINVOICE.iterator();
                                while (ite1.hasNext()) {
                                    InvoiceDetail ge = (InvoiceDetail) ite1.next();
                                    invoiceNo =  StringUtil.isNullOrEmpty(invoiceNo)?invoiceNo:(invoiceNo +"<br>");
                                    invoiceNo = invoiceNo + ge.getInvoice().getInvoiceNumber();
//                                    doNo = doNo + (ge.getDeliveryOrderDetail() != null ? (ge.getDeliveryOrderDetail().getDeliveryOrder() != null ? ge.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber() : "") : "");//also get DO No if INV is Linked To Some DO.
                                }
                            }
//----------------to search  Purchase order Created by Linking to  SO
                            KwlReturnObject idresultPO = accInvoiceDAOobj.getPODFromSOD(row.getID());//To Get Invoice's Linked
                            List listPO= idresultPO.getEntityList();
                            Iterator itPO = listPO.iterator();
                            while (itPO.hasNext()) {
                               KwlReturnObject podetailresult = accountingHandlerDAOobj.getObject(PurchaseOrderDetail.class.getName(), itPO.next()+"");
                                PurchaseOrderDetail purchaseOrderDetail = (PurchaseOrderDetail) podetailresult.getEntityList().get(0);
                                if (purchaseOrderDetail != null) {
                                    poNo=  StringUtil.isNullOrEmpty(poNo)?poNo:(poNo +"<br>");
                                    poNo = poNo + purchaseOrderDetail.getPurchaseOrder().getPurchaseOrderNumber();
                            }
                            }
                            KwlReturnObject idresultINVOICE = accInvoiceDAOobj.getIDFromSOD(row.getID());//To Get Invoice's Linked
                            List listINVOICE = idresultINVOICE.getEntityList();
                            Iterator ite1 = listINVOICE.iterator();
                            while (ite1.hasNext()) {
                                InvoiceDetail ge = (InvoiceDetail) ite1.next();
                                invoiceNo = StringUtil.isNullOrEmpty(invoiceNo)?invoiceNo:(invoiceNo +"<br>");
                                invoiceNo = invoiceNo + ge.getInvoice().getInvoiceNumber();
//                                doNo = doNo + (ge.getDeliveryOrderDetail()!=null?(ge.getDeliveryOrderDetail().getDeliveryOrder()!=null?ge.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber():""):"");//also get DO No if INV is Linked To Some DO.
                                KwlReturnObject idresultdod = accInvoiceDAOobj.getDODFromINVD(ge.getID());//To Get DO's Linked
                                List listdod = idresultdod.getEntityList();
                                Iterator doite1 = listdod.iterator();
                                while (doite1.hasNext()) {
                                    DeliveryOrderDetail doe = (DeliveryOrderDetail) doite1.next();
                                    doNo =  StringUtil.isNullOrEmpty(doNo)?doNo:(doNo +"<br>");
                                    doNo =doNo + doe.getDeliveryOrder().getDeliveryOrderNumber();
//                                    doNo = doNo + (ge.getDeliveryOrderDetail() != null ? (ge.getDeliveryOrderDetail().getDeliveryOrder() != null ? ge.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber() : "") : "");//also get DO No if INV is Linked To Some DO.
                                }
                            }
                            if (row.getQuotationDetail() != null)//invoce linked with quotation
                            { invoiceMap.put("QuotationNumber", row.getQuotationDetail().getQuotation().getQuotationNumber());
                                KwlReturnObject qdresult = accInvoiceDAOobj.getINVDFromQD(row.getQuotationDetail().getID());
                                List qdlist = qdresult.getEntityList();
                                Iterator qdite1 = qdlist.iterator();
                                double qua = 0.0;
                                while (ite1.hasNext()) {
                                    InvoiceDetail qd = (InvoiceDetail) qdite1.next();
                                    invoiceNo = StringUtil.isNullOrEmpty(invoiceNo)?invoiceNo:(invoiceNo +"<br>");
                                    invoiceNo = invoiceNo + qd.getInvoice().getInvoiceNumber();
                                    doNo =  StringUtil.isNullOrEmpty(doNo)?doNo:(doNo +"<br>");
                                    doNo = doNo + (qd.getDeliveryOrderDetail() != null ? qd.getDeliveryOrderDetail().getDeliveryOrder() != null ? qd.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber() : "" : "");
                                }
                            }

                       
                            // Line Level Custome fields
                            HashMap<String, Object> fieldrequestParams1 = new HashMap();
                            HashMap<String, String> customFieldMap = new HashMap<String, String>();
                            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                            fieldrequestParams1.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                            fieldrequestParams1.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Sales_Order_ModuleId, 1));
                            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams1, replaceFieldMap, customFieldMap, customDateFieldMap);

                            Map<String, Object> variableMap = new HashMap<String, Object>();
                            SalesOrderDetailsCustomData jeDetailCustom = (SalesOrderDetailsCustomData) row.getSoDetailCustomData();
                            replaceFieldMap = new HashMap<String, String>();
                            AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                               String coldata = varEntry. getValue() != null ? varEntry.getValue().toString() : "";
                                    
                                        if (!StringUtil.isNullOrEmpty(coldata)) {
                                            if (varEntry.getKey().equals("Custom_Remarks")) {
                                                tableSO.setRemarks(coldata);
                                            }  
                                        }
                                     

                            }
                            // Margin Calculation at line level
                            margin = authHandler.round((totalSRPBaseCurrency-totalCost),companyid);
                            marginpercent =totalCost==0?100.00:margin==0?0.00:(margin/totalSRPBaseCurrency*100);
                            tableSO.setsNo(sNo);
                            tableSO.setDesc(desc.replaceAll("\n","<br>"));
                            tableSO.setPartNo(partNo);
                            tableSO.setQty(authHandler.formattedQuantity(qty, companyid));
                            tableSO.setUnitSRP(curr+" "+authHandler.formattedCommaSeparatedUnitPrice(unitSRP, companyid));
                            tableSO.setTotalSRP(curr+" "+authHandler.formattedCommaSeparatedAmount(totalSRP, companyid));
                            tableSO.setPoNo(poNo);
                            tableSO.setDoNo(doNo);
                            tableSO.setInvoiceNo(invoiceNo);
                            tableSO.setUnitCost(vendorCurrency +" "+authHandler.formattedCommaSeparatedUnitPrice(unitCost, companyid));
                            tableSO.setTotalCost(curr_base+" "+authHandler.formattedCommaSeparatedAmount(totalCost, companyid));
                            tableSO.setVendor(vendor);
                            tableSO.setMargin((curr_base+" "+authHandler.formattedCommaSeparatedAmount(margin, companyid)));
                            tableSO.setMarginPercent(unitSRP<=0?"NA":authHandler.formattedCommaSeparatedAmount(marginpercent, companyid));
                            tableSO.setExchangerate(authHandler.formattedCommaSeparatedAmount(exchangerateVendorCurrency, companyid));
                            s0TableList.add(tableSO);
                            totalAmount += discountPrice + rowtaxamount;
                        }

                        if (inv.getTax() != null) {
                            requestParams.put("transactiondate", entryDate);
                            requestParams.put("taxid", inv.getTax() != null ? inv.getTax().getID() : "");
                            requestParams.put(Constants.companyKey, companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            if (!taxList.isEmpty()) {
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                        }
                        totaltax = (taxPercent == 0 ? 0 : totalAmount * taxPercent / 100);
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
                        double termTotalAmount = 0;
                      
                        if (!StringUtil.isNullOrEmpty(inv.getID())) {
                            HashMap<String, Object> requestParam = new HashMap();
                            requestParam.put("salesOrder", inv.getID());
                            KwlReturnObject curresult = null;
                            curresult = accSalesOrderDAOobj.getSalesOrderTermMap(requestParam);
                            List<SalesOrderTermMap> termMap = curresult.getEntityList();
                            for (SalesOrderTermMap invoiceTerMap : termMap) {
                                Terms termsObj = new Terms();
                                InvoiceTermsSales mt = invoiceTerMap.getTerm();
                                double termAmnt = invoiceTerMap.getTermamount();
                                termName = (termAmnt > 0 ? "(+) " : "(-) ") + mt.getTerm();
                                termAmount = termAmnt > 0 ? authHandler.formattedCommaSeparatedAmount(termAmnt, companyid) : "(" + authHandler.formattedCommaSeparatedAmount((termAmnt * -1), companyid) + ")";
                                termsObj.setTermName(termName);
                                termsObj.setTermValue(termAmount);
                                termsList.add(termsObj);
                                termTotalAmount += termAmnt;
                            }
                        }
                            totalAmount += termTotalAmount;
                            HashMap<String, String> customFieldMap = new HashMap<String, String>();
                            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                            HashMap<String, Object> fieldrequestParams = new HashMap();
                            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Sales_Order_ModuleId));
                            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                         
                            ///code for custome fields 
                            Map<String, Object> variableMap = new HashMap<String, Object>();
                            SalesOrderCustomData jeDetailCustom = (SalesOrderCustomData) inv.getSoCustomData();
                            replaceFieldMap = new HashMap<String, String>();
                            if (jeDetailCustom != null) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                                for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                    String coldata = varEntry.getValue().toString();
                                   

                                        if (!StringUtil.isNullOrEmpty(coldata)) {
                                            if (varEntry.getKey().equals("Custom_Quotation Ref No")) {
                                                invoiceMap.put("QuotationNumber", coldata);
                                            } else if (varEntry.getKey().equals("Custom_Purchaser")||varEntry.getKey().equals("Custom_Requestor")) {
                                                invoiceMap.put("Purchaser", coldata);
                                            } else if (varEntry.getKey().equals("Custom_Delivered By")) {
                                                invoiceMap.put("DeliveredBy", coldata);
                                            } else if (varEntry.getKey().equals("Custom_Project")) {
                                                invoiceMap.put("Project", coldata);
                                            } else if (varEntry.getKey().equals("Custom_Project Manager")) {
                                                invoiceMap.put("ProjectManager", coldata);
                                            } else if (varEntry.getKey().equals("Custom_Salesman 2")||varEntry.getKey().equals("Custom_Sales Person 2")) {
                                                invoiceMap.put("Salesman_two", coldata);
                                                 FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                                if (fieldComboData != null) {
                                                    invoiceMap.put("Salesman_two",fieldComboData.getValue());
                                                }else{
                                                    invoiceMap.put("Salesman_two", coldata);
                                                }
                                            } else if (varEntry.getKey().equals("Custom_Delivery Mode")) {
                                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                                if (fieldComboData != null) {
                                                    DeliveryMode = fieldComboData.getValue();
                                                }else{
                                                DeliveryMode = coldata;
                                                }
                                        }
                                    }

                                }
                            }
                        //---------------Set The Parametere here ---------------------
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ServiceTotal, inv.getCurrency().getCurrencyID(), inv.getOrderDate(), inv.getExternalCurrencyRate());
                        double ServiceTotal_In_Base = authHandler.round((Double) bAmt.getEntityList().get(0),companyid); 
                      
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ProductTotal, inv.getCurrency().getCurrencyID(), inv.getOrderDate(), inv.getExternalCurrencyRate());
                        double ProductTotal_In_Base = authHandler.round((Double) bAmt.getEntityList().get(0),companyid); 
                       
                        double serviceMargin = authHandler.round((ServiceTotal_In_Base - ServiceTotalCost), companyid); 
                        
                        double productMargin =authHandler.round( (ProductTotal_In_Base - ProductTotalCost), companyid); 
                        double serviceTotal_base_currency = 0;
                        invoiceMap.put("Currency", curr_base);//base currency symbol for sumnery section in Sales Order
                        invoiceMap.put("ProductServiceTotal", authHandler.formattedCommaSeparatedAmount((authHandler.round(ServiceTotal_In_Base,companyid) + authHandler.round(ProductTotal_In_Base,companyid)), companyid));
                        invoiceMap.put("ServiceTotal", authHandler.formattedCommaSeparatedAmount(ServiceTotal_In_Base, companyid));
                        invoiceMap.put("ProductTotal", authHandler.formattedCommaSeparatedAmount(ProductTotal_In_Base, companyid));
                        invoiceMap.put("CustomerName", customerName);
                        invoiceMap.put("RecipientName", inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingRecipientName() :customerShippingAddressDetail.getRecipientName()==null?"":customerShippingAddressDetail.getRecipientName());
                        invoiceMap.put("BillingAddress", billAddr);
                        invoiceMap.put("DeliveryAddress", shipTo);
                        invoiceMap.put("PaymentTerm", terms);
                        invoiceMap.put("CustAttn", attn);
                        invoiceMap.put("RecipientAttn", recepientAttn);
                        invoiceMap.put("CustHPFAX", custFaxHp);
                        invoiceMap.put("RecipientHPFAX", recepFaxHp);
                        invoiceMap.put("CustFAX", fax);
                        invoiceMap.put("RecipientFAX", recepientfax);
                        invoiceMap.put("CustTEL", tel);
                        invoiceMap.put("RecipientTEL", recepientTel);
                        invoiceMap.put("CustomerEmail", custEmail);
                        invoiceMap.put("RecipientEmail", recepEmail);
                        invoiceMap.put("customerDID", custDID);
                        invoiceMap.put("recepeintDID", recepDID);
                        invoiceMap.put("CustomerPoRefNo", inv.getCustomerPORefNo()!=null?inv.getCustomerPORefNo():"");
                        invoiceMap.put("SalesPerson", salesPerson);
                        invoiceMap.put("DateOfDelivery", shipDate!=null?df1.format(shipDate):"");
                        invoiceMap.put("TransactionDate", entryDate!=null?df1.format(entryDate):"");
                        invoiceMap.put("ExchangeRate", "");
                        invoiceMap.put("ExchangeRateInternal", "(Internal)   1"+curr_base+" = "+  new DecimalFormat("#.#####").format(exchangerateinternal)+" "+curr);
                        invoiceMap.put("ProductServiceTotalCost", authHandler.formattedCommaSeparatedAmount((ProductTotalCost + ServiceTotalCost), companyid));
                        invoiceMap.put("ServiceTotalCost", authHandler.formattedCommaSeparatedAmount(ServiceTotalCost, companyid));
                        invoiceMap.put("ProductTotalCost", authHandler.formattedCommaSeparatedAmount(ProductTotalCost, companyid));
                        invoiceMap.put("ProductServiceMargin", authHandler.formattedCommaSeparatedAmount(inv.getTotalProfitMargin(), companyid)+"");
                        invoiceMap.put("ServiceMargin",  authHandler.formattedCommaSeparatedAmount(serviceMargin, companyid)+"");
                        invoiceMap.put("ProductMargin",  authHandler.formattedCommaSeparatedAmount(productMargin, companyid)+"");
                        invoiceMap.put("ProductServiceMarginPercent",(ServiceTotal_In_Base + ProductTotal_In_Base)==0?"NA":authHandler.formattedCommaSeparatedAmount(inv.getTotalProfitMarginPercent(), companyid)+"%");
                        invoiceMap.put("ServiceMarginPercent", ServiceTotal_In_Base==0?"NA":(ServiceTotalCost ==0 && ServiceTotal ==0)?(authHandler.formattedCommaSeparatedAmount(0, companyid) +"%"):ServiceTotalCost!=0?authHandler.formattedCommaSeparatedAmount(((serviceMargin/ServiceTotal_In_Base)*100), companyid) +"%":(authHandler.formattedCommaSeparatedAmount(100, companyid) +"%"));
                        invoiceMap.put("ProductMarginPercent",ProductTotal_In_Base==0?"NA":(ProductTotal==0 && ProductTotalCost == 0)?"0.00%":ProductTotalCost!=0?authHandler.formattedCommaSeparatedAmount(((productMargin/ProductTotal_In_Base)*100), companyid)+"%":(authHandler.formattedCommaSeparatedAmount(100, companyid) +"%"));
                        invoiceMap.put("SoNumber",inv.getSalesOrderNumber()!=null?inv.getSalesOrderNumber():"");
                        invoiceMap.put("TableDataList", new JRBeanCollectionDataSource(s0TableList));
                        invoiceMap.put("title", "Sales Order Form");
                        invoiceMap.put("FooterMemo","* A copy of customer's PO is to be attached with all Sales Order<br>* Special approval from Director for GP below 10% &/or sales amount more than S$70,000");
                        invoiceMap.put("DeliveryMode",DeliveryMode);
                        invoiceMap.put("memo",inv.getMemo()!=null?inv.getMemo():"");
                        String imagePath =  StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        invoiceMap.put("LOGO",imagePath);
                        
                        response.setHeader("Content-Disposition", "attachment;filename=" + "SalesOrder_v1.pdf");
                        KwlReturnObject compResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                        CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compResult.getEntityList().get(0);
                        onlydateobj.setDate(df1.format(entryDate));
                        onlydateList.add(onlydateobj);
                        invoiceMap.put("title", "Sales Order Form");
                        invoiceMap.put("SO_CQNO", "So No.");
                        invoiceMap.put("format", "pdf");
                        FileInputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SBISalesOrder.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(onlydateList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                        list.add(jasperPrint);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
            }
        }
        return list;
    }
     
 @Override
 public List<Object> exportDiamondAviationDeliveryOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {  

        List<Object> list = new ArrayList<Object>();
        List<Object> invoiceDesigns = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                Map<String, Object> deliveryOrderMap = new HashMap<String, Object>();
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                DateFormat formatter = authHandler.getUserDateFormatterWithoutTimeZone(request);

                int templateflag = request.getParameter("templateflag") != null ? Integer.parseInt(request.getParameter("templateflag")) : 0;
                int type = 0;
                type = request.getParameter("type") != null ? Integer.parseInt(request.getParameter("type")) : 0;
                if(request.getAttribute("dotype")!=null){
                    type=Integer.parseInt(request.getAttribute("dotype").toString());
                }
                String invtype="-1";
                if(request.getAttribute("invtype")!=null){
                    invtype=request.getAttribute("invtype").toString();
                }
                String potype="-1";
                if(request.getAttribute("potype")!=null){
                    potype=request.getAttribute("potype").toString();
                }
                String grotype="-1";
                if(request.getAttribute("grotype")!=null){
                    grotype=request.getAttribute("grotype").toString();
                }
                boolean isPrintInvoice=false;
                if(request.getAttribute("isPrintInvoice")!=null){
                    isPrintInvoice=Boolean.parseBoolean(request.getAttribute("isPrintInvoice").toString());
                }
                String filename="";
                if(request.getAttribute("filename")!=null){
                    filename=request.getAttribute("filename").toString();
                }
                
                DeliveryOrderJasper deliveryOrderJasper = new DeliveryOrderJasper();
                ArrayList<DeliveryOrderJasper> deliveryOrderList = new ArrayList<DeliveryOrderJasper>();
                ArrayList<DeliveryOrderTable2> deliveryOrderTable2List = new ArrayList<DeliveryOrderTable2>();
                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    String invno = "";
                    Date entryDate = null;
                    String customerEmail = "";
                    String customerName = "";
                    String customerAdd = "";
                    String customerPhone = "";
                    String attn = "";
                    String billTo = "";
                    String shipTo = "";
                    String memo = "";
                    String orderID = "";
                    String status = "";
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String terms = "";
                    String sitawiredcode = "";

                    String SOref = "";
                    String QouteRef = "";
                    
                    DeliveryOrder deliveryOrder = null;
                    deliveryOrder = (DeliveryOrder) kwlCommonTablesDAOObj.getClassObject(DeliveryOrder.class.getName(), billid);
                    invno = deliveryOrder.getDeliveryOrderNumber();
                    entryDate = deliveryOrder.getOrderDate();
                    status = deliveryOrder.getStatus() != null ? deliveryOrder.getStatus().getValue() : "";
                    customerName = deliveryOrder.getCustomer().getName() != null ? deliveryOrder.getCustomer().getName() : "";
                    customerEmail = deliveryOrder.getBillingShippingAddresses() == null ? "" : deliveryOrder.getBillingShippingAddresses().getBillingEmail();
                    customerPhone = deliveryOrder.getBillingShippingAddresses() == null ? "" : deliveryOrder.getBillingShippingAddresses().getBillingPhone();
                    attn = deliveryOrder.getBillingShippingAddresses() == null ? "" : deliveryOrder.getBillingShippingAddresses().getBillingContactPerson();               
//                    if (type == 2 ) {//Dilevery Order
//                        shipTo = deliveryOrder.getBillingShippingAddresses() != null ? CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), false) : "";
//                    }else
                    if (type == 1 || type == 2 ) {//Packing Slip
                        shipTo = deliveryOrder.getBillingShippingAddresses() != null ? CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), false) : "";
                    } else {
                        shipTo = AccountingAddressManager.getCompanyDefaultShippingAddress(companyid, accountingHandlerDAOobj);
                    }
                    billTo = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
                    memo = deliveryOrder.getMemo() != null ? deliveryOrder.getMemo() : "";
                    shipDate = deliveryOrder.getShipdate();
                    shipvia = deliveryOrder.getShipvia() != null ? deliveryOrder.getShipvia() : "";
                    fob = deliveryOrder.getFob() != null ? deliveryOrder.getFob() : "";
                    orderID = deliveryOrder.getID();
                    terms = deliveryOrder.getCustomer().getCreditTerm() != null ? deliveryOrder.getCustomer().getCreditTerm().getTermname() : "";
                    String approverName = "";
                    if (deliveryOrder.getCreatedby() != null) {
                        approverName = StringUtil.getFullName(deliveryOrder.getCreatedby());
                    }
                    deliveryOrderJasper.setAttn(attn);
                    deliveryOrderJasper.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                    deliveryOrderJasper.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    deliveryOrderJasper.setDate(formatter.format(entryDate));
                    deliveryOrderJasper.setDonumber(invno);
                    deliveryOrderJasper.setName(customerName);
                    deliveryOrderJasper.setPhone(customerPhone);
                    deliveryOrderJasper.setEmail(customerEmail);
                    deliveryOrderJasper.setMemo(memo.replaceAll("\n", "<br>"));
                    deliveryOrderJasper.setPreparedby(approverName);

                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    order_by.add("srno");
                    order_type.add("asc");
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    filter_names.add("deliveryOrder.ID");
                    filter_params.add(orderID);
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);

                    idresult = accInvoiceDAOobj.getDeliveryOrderDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();
                    int i = 0;
                    String docids = "";
                    double itemscount = 0;
                    
                    HashSet<String> poRefNumbers = new HashSet<String>();
                    HashSet<String> invLinkIds = new HashSet<String>();
                    HashSet<String> qouteLinkIds = new HashSet<String>();
                    HashSet<String> soLinkIds = new HashSet<String>();
                    HashSet<String> linkInvoiceNumbers = new HashSet<String>();
                    
                    while (itr.hasNext()) {
                        i++;
                        DeliveryOrderTable2 deliveryOrderTable2 = new DeliveryOrderTable2();
                        String prodName = "";
                        String serial = "";
                        String prodcode = "";
                        String prodDesc = "";
                        double quantity = 0, deliverdQuantity = 0;
                        String uom = "";

                        DeliveryOrderDetail row = (DeliveryOrderDetail) itr.next();
                        prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                            prodDesc = row.getDescription();
                        } else {
                            if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                prodDesc = row.getProduct().getDescription();
                            }
                        }
                        quantity = row.getActualQuantity();
                        deliverdQuantity = row.getDeliveredQuantity();
                        uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                        /*
                         * to get the linking information upto 2-3 levels (Mayur
                         * B).
                         */
                        String porefnumber="";
                        String invoiceID="";
                        String quoteID="";
                        String Invref = "";
                        String soID = "";
                        if (row.getCidetails() != null) {
                            porefnumber = row.getCidetails().getInvoice().getPoRefNumber() == null ? "": row.getCidetails().getInvoice().getPoRefNumber();
                            Invref = row.getCidetails().getInvoice().getInvoiceNumber();
                            invoiceID = row.getCidetails().getInvoice().getID();
                            if (row.getCidetails().getSalesorderdetail() != null) {
                                SOref = row.getCidetails().getSalesorderdetail().getSalesOrder().getSalesOrderNumber();
                                soID = row.getCidetails().getSalesorderdetail().getSalesOrder().getID();
                                if (row.getCidetails().getSalesorderdetail().getQuotationDetail() != null) {
                                    QouteRef = row.getCidetails().getSalesorderdetail().getQuotationDetail().getQuotation().getquotationNumber();
                                    quoteID = row.getCidetails().getSalesorderdetail().getQuotationDetail().getQuotation().getID();
                                }
                            }
                            if (row.getCidetails().getQuotationDetail() != null) {
                                QouteRef = row.getCidetails().getQuotationDetail().getQuotation().getquotationNumber();
                                quoteID = row.getCidetails().getQuotationDetail().getQuotation().getID();
                            }
                        } else if (row.getSodetails() != null) {
                            SOref = row.getSodetails().getSalesOrder().getSalesOrderNumber();
                            soID = row.getSodetails().getSalesOrder().getID();
                            if (row.getSodetails().getQuotationDetail() != null) {
                                QouteRef = row.getSodetails().getQuotationDetail().getQuotation().getquotationNumber();
                                quoteID = row.getSodetails().getQuotationDetail().getQuotation().getID();
                            }
                        }
                        
                        if(!porefnumber.equals(""))
                        poRefNumbers.add(porefnumber);
                        
                        if(!invoiceID.equals(""))
                        invLinkIds.add(invoiceID);
                        
                        if(!quoteID.equals(""))
                        qouteLinkIds.add(quoteID);
                        
                        if(!soID.equals(""))
                        soLinkIds.add(soID);
                        
                        if(!Invref.equals(""))
                        linkInvoiceNumbers.add(Invref);

                        deliveryOrderTable2.setProductname(prodName);
                        deliveryOrderTable2.setDesc(prodDesc.replaceAll("\n", "<br>"));

                        HashMap<String, Object> fieldrequestParams = new HashMap();
                        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                        fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Delivery_Order_ModuleId, 1));
                        HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
                        HashMap<String, String> customFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
//                         HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
                        HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        DeliveryOrderDetailCustomData deliveryOrderDetailCustomData = (DeliveryOrderDetailCustomData) row.getDeliveryOrderDetailCustomData();
                        AccountingManager.setCustomColumnValues(deliveryOrderDetailCustomData, fieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if ((varEntry.getKey().split("_")[1]).equals("Condition")) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    deliveryOrderTable2.setStatus(fieldComboData.getValue());
                                } else {
                                    deliveryOrderTable2.setStatus(coldata);
                                }
                            }   //ERP-16694 Status is mapped to Condition
                            if ((varEntry.getKey().split("_")[1]).equals("Serial Number")) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    deliveryOrderTable2.setSno(fieldComboData.getValue());
                                } else {
                                    deliveryOrderTable2.setSno(coldata);
                                }
                            }
                            if ((varEntry.getKey().split("_")[1]).equals("Check")) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    deliveryOrderTable2.setChecked(fieldComboData.getValue());
                                } else {
                                    deliveryOrderTable2.setChecked(coldata);
                                }
                            }
                        }
                        
//                        docids = row.getID();
//                        KwlReturnObject kmsg = null;
//                        kmsg = accCommonTablesDAO.getOnlySerialDetails(docids, false, Constants.Acc_Delivery_Order_ModuleId + "", false, false);
//                        List batchserialdetails = kmsg.getEntityList();
//                        Iterator iter = batchserialdetails.iterator();
//                        while (iter.hasNext()) {
//                            Object[] objArr = (Object[]) iter.next();
//                            serial = objArr[8] != null ? (String) objArr[8] : "";
//                            deliveryOrderTable2.setSno(serial);//product serial no
//                        }
                        prodcode = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                        deliveryOrderTable2.setQty(authHandler.formattedQuantity(deliverdQuantity, companyid));
//                        deliveryOrderTable2.setChecked("");
                        deliveryOrderTable2.setPartno(prodcode);
                        itemscount = itemscount + row.getDeliveredQuantity();

                        deliveryOrderTable2.setUom(uom);
                        deliveryOrderTable2List.add(deliveryOrderTable2);
                    }
                    
                    HashSet<String> poIDs = null;
                    if (!qouteLinkIds.isEmpty() && !potype.equals("-1")) {
                        poIDs = getLinkedPOidsForDiamondAviationPackages(request, qouteLinkIds, 0); //idtype: 0-PO, 1-GRO 
                    }
                    
                    if (!soLinkIds.isEmpty() && !potype.equals("-1")) {
                        poIDs = getLinkedPOidsFromSOForDiamondAviationPackages(request, soLinkIds, 0); //idtype: 0-PO, 1-GRO 
                    }

                    HashSet<String> groIDs = null;
                    if (!qouteLinkIds.isEmpty() && !grotype.equals("-1")) {
                        groIDs = getLinkedPOidsForDiamondAviationPackages(request, qouteLinkIds, 1);
                    }
                    
                    if (!soLinkIds.isEmpty() && !grotype.equals("-1")) {
                        groIDs = getLinkedPOidsFromSOForDiamondAviationPackages(request, soLinkIds, 1); //idtype: 0-PO, 1-GRO 
                    }

                    if (!invLinkIds.isEmpty()) {
                        String linkInvoiceIDs = "";
                        for (String l : invLinkIds) {
                            linkInvoiceIDs += l + ",";
                        }
                        if (linkInvoiceIDs.length() > 1) {
                            linkInvoiceIDs = linkInvoiceIDs.substring(0, linkInvoiceIDs.length() - 1);
                        }
                        request.setAttribute("invIDsfromDO", linkInvoiceIDs);
                        request.setAttribute("isInvoiceLinkedWithDO", true);
//                        request.setAttribute("invtype", invtype);
                        
                        String invTypesArr[]=null;
                        if(!invtype.equals("-1")){
                            invTypesArr=invtype.split(",");
                        }

                        int temptype=0;
                        if(invTypesArr!=null && invTypesArr.length!=0 && isPrintInvoice){
                            for(String invID:invTypesArr){
                                temptype = Integer.parseInt(invID);
                                request.setAttribute("linkedinvoicetype", temptype);
                                List invlist=exportDiamondAviationCustomerInvoice(request, response);
                                invoiceDesigns.addAll(invlist);
                            }
                        }
                    }
                    
                    if (poIDs!=null && !poIDs.isEmpty()) {
                        String linkedPOIDs = "";
                        for (String l : poIDs) {
                            linkedPOIDs += l + ",";
                        }
                        if (linkedPOIDs.length() > 1) {
                            linkedPOIDs = linkedPOIDs.substring(0, linkedPOIDs.length() - 1);
                        }
                        request.setAttribute("poIDsfromDO", linkedPOIDs);
                        request.setAttribute("isPOLinkedWithDO", true);
                        request.setAttribute("linkedPOtype", potype);
                        List polist = exportDiamondAviationPuchaseOrder(request, response);
                        invoiceDesigns.addAll(polist);
                    }
                    
                    if (groIDs!=null && !grotype.isEmpty()) {
                        String linkedGROIDs = "";
                        for (String l : groIDs) {
                            linkedGROIDs += l + ",";
                        }
                        if (linkedGROIDs.length() > 1) {
                            linkedGROIDs = linkedGROIDs.substring(0, linkedGROIDs.length() - 1);
                        }
                        request.setAttribute("groIDsfromDO", linkedGROIDs);
                        request.setAttribute("isGROLinkedWithDO", true);
//                        request.setAttribute("linkedGROtype", grotype);
                        List grolist = exportDiamondAviationGoodsReceiptOrderJasperReport(request, response);
                        invoiceDesigns.addAll(grolist);
                    }

                    String linkInvref = "";
                    for (String l : linkInvoiceNumbers) {
                        linkInvref += l + ",";
                    }
                    if (linkInvref.length() > 1) {
                        linkInvref = linkInvref.substring(0, linkInvref.length() - 1);
                    }
                    
                    String poRefNumber = "";
                    for (String l : poRefNumbers) {
                        poRefNumber += l + ",";
                    }
                    if (poRefNumber.length() > 1) {
                        poRefNumber = poRefNumber.substring(0, poRefNumber.length() - 1);
                    }

                    deliveryOrderList.add(deliveryOrderJasper);
//                    String ordernumber="";
//                    // custome Data
//                    HashMap<String, Object> fieldrequestParams = new HashMap();
//                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
//                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Delivery_Order_ModuleId));
//                    HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
//                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
//                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
//                    HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
//                    Map<String, Object> variableMap = new HashMap<String, Object>();
//                    DeliveryOrderCustomData deliveryOrderCustomData = (DeliveryOrderCustomData) deliveryOrder.getDeliveryOrderCustomData();
//                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
//                    AccountingManager.setCustomColumnValues(deliveryOrderCustomData, fieldMap, replaceFieldMap, variableMap);
//                    for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
//                        String coldata = varEntry.getValue().toString();
//                        if (!StringUtil.isNullOrEmpty(coldata)) {
//                            if ((varEntry.getKey().split("_")[1]).equals("Order Number")) {
//                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
//                                if (fieldComboData != null) {
//                                    ordernumber = fieldComboData.getValue();
//                                } else {
//                                    ordernumber = coldata;
//                                }
//                            }
//                        }
//                    }  //ERP-11506
                    
                    if (type == 3)//Certificate of confermance
                    {
                        deliveryOrderMap.put("refno", linkInvref);
                        deliveryOrderMap.put("name", approverName);
                        deliveryOrderMap.put("donumber", poRefNumber);
                        deliveryOrderMap.put("dostatus", status);
                        deliveryOrderMap.put("sitawirecode", sitawiredcode);

                    } else {
                        deliveryOrderJasper.setDate(formatter.format(entryDate));
                        deliveryOrderMap.put("shipTo", (type == 2) ? customerName + "<br>" + shipTo : shipTo.replaceAll("\n", "<br>"));
                        deliveryOrderMap.put("from", billTo);
                        deliveryOrderMap.put("donumber", invno);
                        deliveryOrderMap.put("porefnumber", poRefNumber);
                        deliveryOrderMap.put("title", (type == 2) ? "Delivery Order " : "Packing Slip ");
                        deliveryOrderMap.put("itemcount", "" + authHandler.formattedQuantity(itemscount, companyid));
                    }
                    deliveryOrderMap.put("DeliveryOrderTable2", new JRBeanCollectionDataSource(deliveryOrderTable2List));
                    String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String header = StorageHandler.GetDocStorePath() + companyid + "_header" + FileUploadHandler.getCompanyImageExt();
                    String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    deliveryOrderMap.put("logo", logo);
                    deliveryOrderMap.put("header", header);
                    deliveryOrderMap.put("footer", footer);
                    deliveryOrderMap.put("format", "pdf");
                    deliveryOrderMap.put("isdeliveryorder", type == 2 ? true : false);
                    deliveryOrderMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                    deliveryOrderMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                    if(!StringUtil.isNullOrEmpty(filename)){
                        response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "_" + invno +".pdf\"");
                    }else{
                        response.setHeader("Content-Disposition", "attachment;filename=\"" + "DeliveryOrder_"+invno+".pdf\"");
                    }
                    try {
                        InputStream inputStream = null;
                        if (type == 1) {
                            if (!StringUtil.isNullOrEmpty(filename)) {
                                response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "_" + invno + ".pdf\"");
                            } else {
                                response.setHeader("Content-Disposition", "attachment;filename=\"" + "PackingSlip_"+invno+".pdf\"");
                            }
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationPackagingSlip.jrxml");
                        } else if (type == 3) {
                            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationCertificateOfConfermanceSubreport.jrxml");
                            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                            jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                            deliveryOrderMap.put("COFSubReport", jasperReportSubReport);
                            if (!StringUtil.isNullOrEmpty(filename)) {
                                response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + ".pdf\"");
                            } else {
                                response.setHeader("Content-Disposition", "attachment;filename=\"" + "CoC_"+invno+".pdf\"");
                            }
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationCertificateOfConfermance.jrxml");
                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationPackagingSlip.jrxml");
                        }
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(deliveryOrderList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, deliveryOrderMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                    if(!invoiceDesigns.isEmpty()){
                        list.addAll(invoiceDesigns);
                    }
                } catch (JSONException ex) {
                    Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ServiceException ex) {
                    Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
 }
 
    public HashSet<String> getLinkedPOidsForDiamondAviationPackages(HttpServletRequest request, HashSet<String> qouteLinkIds, int idtype) {
        List poIDs = null;
        JSONObject DataJObjRows = new JSONObject();
        JSONArray DataJArrRows = new JSONArray();
        HashSet<String> docIDs = new HashSet<String>();
        HashSet<String> venQuoteLinkIds = new HashSet<String>();
        HashSet<String> LinkIds = new HashSet<String>();
        try {
            String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
            for (String quoteId : qouteLinkIds) {

                String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);

                HashMap<String, Object> requestParams = accSalesOrderServiceDAOobj.getSalesOrdersMap(request);
                requestParams.put("billId", quoteId);
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                request.setAttribute(Constants.billid, quoteId);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put("dataFormatValue", authHandler.getDateOnlyFormat(request));
                requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));
                if (StringUtil.isNullOrEmpty(request.getParameter("archieve"))) {
                    requestParams.put("archieve", 0);
                } else {
                    requestParams.put("archieve", Integer.parseInt(request.getParameter("archieve")));
                }
                requestParams.put("closeflag", null);
                requestParams.put("sopolinkflag", null);
                requestParams.put("linkFlagInSO", null);
                requestParams.put("linkFlagInInv", null);
                requestParams.put("dtype", request.getParameter("dtype"));
                boolean isOrder = false;
                String isorder = request.getParameter("isOrder");
                if (!StringUtil.isNullOrEmpty(isorder) && StringUtil.equal(isorder, "true")) {
                    isOrder = true;
                }
                requestParams.put("isOrder", isOrder);
                requestParams.put("userId", sessionHandlerImpl.getUserid(request));
                requestParams.put("bills", quoteId);
                DataJObjRows = accSalesOrderServiceDAOobj.getQuotationRows(requestParams);


                if (DataJObjRows.length() > 0) {
                    DataJArrRows = DataJObjRows.getJSONArray("data");
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        String tempLinkTo = jobj.optInt("linktype", -1) == 0 ? jobj.optString("rowid", "") : "";
                        if (!tempLinkTo.equals("")) {
                            venQuoteLinkIds.add(tempLinkTo);
                        }
                    }
                }
            }
//Code for finding PO 
            if (!venQuoteLinkIds.isEmpty() && idtype == 0) {   //idtype=0 for PO 
                for (String venQuoteId : venQuoteLinkIds) {
                    KwlReturnObject result = accPurchaseOrderobj.getPurchaseOrdersIDForDiamondAviation(venQuoteId, companyid);
                    docIDs.add((String)result.getEntityList().get(0));
                }
            }

//Code for finding GRO            
            if (!venQuoteLinkIds.isEmpty() && idtype == 1) {   //idtype=1 for GRO

                List poDetailsIDs = new ArrayList();
                for (String venQuoteId : venQuoteLinkIds) {
                    KwlReturnObject result = accPurchaseOrderobj.getPurchaseOrdersDetailsIDForDiamondAviation(venQuoteId, companyid);
                    poDetailsIDs.add(result.getEntityList().get(0));

                } //here we will get POD IDS.
                
//Case 1: if gro is created by creating VI first and then GRO.
                boolean isDirectLinkToPO=false;
                HashSet<String> VenInvLinkID = new HashSet<String>();
                if (!poDetailsIDs.isEmpty()) {
                    Iterator itr = poDetailsIDs.listIterator();
                    while (itr.hasNext()) {
                        String podid = (String) itr.next();
                        KwlReturnObject result = accInvoiceDAOobj.getVenInvIDFromPOD(podid, companyid);
                        if(result.getEntityList().isEmpty()){
                            isDirectLinkToPO=true; //if this flag is true means GRO is linked with PO with the help of VI.
                        }else{
                            VenInvLinkID.add((String) result.getEntityList().get(0));
                        }
                    }
                } // here we will get Vendor Invoice IDS link to POD IDS 
                
                if (!VenInvLinkID.isEmpty() && !isDirectLinkToPO) {
                    for (String venInvoiceId : VenInvLinkID) {
                        KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptOrderIDFromVI(venInvoiceId, companyid);
                        docIDs.add((String) result.getEntityList().get(0));
                    }
                } // case 1 ends here

//Case 2 : if GRP is created from PO directly.
                if (!poDetailsIDs.isEmpty() && isDirectLinkToPO) {
                    Iterator itr = poDetailsIDs.listIterator();
                    while (itr.hasNext()) {
                        String venInvDetailsID = (String) itr.next();
                        KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptIDForDiamondAviation(venInvDetailsID, companyid);
                        docIDs.add((String) result.getEntityList().get(0));
                    }
                } //case 2 ends here
            }
        } catch (Exception ex) {
                    Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
      }
        return docIDs;
    }
    
    public HashSet<String> getLinkedPOidsFromSOForDiamondAviationPackages(HttpServletRequest request, HashSet<String> soLinkIds, int idtype) {
        JSONArray DataJArrRows = new JSONArray();
        HashSet<String> poIDs = new HashSet<String>();
        HashSet<String> groIDs = new HashSet<String>();
        try {
            String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
            for (String soID : soLinkIds) {
                String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                HashMap<String, Object> requestParams = accSalesOrderServiceDAOobj.getSalesOrdersMap(request);
                requestParams.put("billId", soID);
                requestParams.put("bills", soID.split(","));
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                request.setAttribute(Constants.billid, soID);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put("dateFormatValue", authHandler.getDateOnlyFormat());
                requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));
                requestParams.put("closeflag", null);
                JSONObject paramJobj=StringUtil.convertRequestToJsonObject(request);
                JSONObject tempjobj = accSalesOrderServiceDAOobj.getSalesOrderRows(paramJobj);
                DataJArrRows = tempjobj.getJSONArray("data");
                for (int i = 0; i < DataJArrRows.length(); i++) {
                    JSONObject jobj = DataJArrRows.getJSONObject(i);
                    if (jobj.optDouble("linktype", -1) == 4) {
                        String poID = jobj.optString("linkid", "");
                        poIDs.add(poID);
                    }
                }

            }
            if (!poIDs.isEmpty() && idtype == 1) {   //idtype=1 for GRO

                List poDetailsIDs = new ArrayList();
                for (String poId : poIDs) {
                    KwlReturnObject result = accPurchaseOrderobj.getPurchaseOrdersDetailsIDFromPO(poId, companyid);
                    poDetailsIDs.add(result.getEntityList().get(0));

                } //here we will get POD IDS.

                //Case 1: if gro is created like VI -> GRO.
                boolean isDirectLinkToPO = false;
                HashSet<String> VenInvLinkID = new HashSet<String>();
                if (!poDetailsIDs.isEmpty()) {
                    Iterator itr = poDetailsIDs.iterator();
                    while (itr.hasNext()) {
                        String podid = (String) itr.next();
                        KwlReturnObject result = accInvoiceDAOobj.getVenInvIDFromPOD(podid, companyid);
                        if (result.getEntityList().isEmpty()) {
                            isDirectLinkToPO = true; //if this flag is true means GRO is linked with PO with the help of VI.
                        } else {
                            VenInvLinkID.add((String) result.getEntityList().get(0));
                        }
                    }
                } // here we will get Vendor Invoice IDS link to POD IDS 

                if (!VenInvLinkID.isEmpty() && !isDirectLinkToPO) {
                    for (String venInvoiceId : VenInvLinkID) {
                        KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptOrderIDFromVI(venInvoiceId, companyid);
                        groIDs.add((String) result.getEntityList().get(0));
                    }
                } // case 1 ends here

//Case 2 : if GRP is created from PO directly.
                if (!poDetailsIDs.isEmpty() && isDirectLinkToPO) {
                    Iterator itr = poDetailsIDs.iterator();
                    while (itr.hasNext()) {
                        String venInvDetailsID = (String) itr.next();
                        KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptIDForDiamondAviation(venInvDetailsID, companyid);
                        groIDs.add((String) result.getEntityList().get(0));
                    }
                } //case 2 ends here
                return groIDs;
            }

        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return poIDs;
    }

 @Override
 public List<Object> exportDiamondAviationDeliveryOrderPackages(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> finalList= new ArrayList<Object>();
     
        String filename="";
        String doType="-1";
        String invType="-1";
        String poType="-1";
        String groType="-1";
                    
           /* 
            * For Diamond Aviation Packages - Mayur Bhokase.
            * 
            * # Invoice Types #                     # Purchase Order Types #            # Delivery Order Types #             # Quote #                              #GRO#
            * 
            * Commercial Invoice       |0           Exchange Order      |0              Packing List            |1           Default Quote               |0        NonConformityReport   | 1 
            * Commercial Invoice-1     |1           Purchase Order      |1              Delivery Order          |2           Service Quote               |1
            * Proforma Invoice         |2           Repair Order        |2              Cert. of Conformance    |3           Service with Repair Details |2
            * Sales Invoice            |3
            * Sales Invoice Exchange   |4
            * Service Invoice          |5
            * Proforma Invoice Exchange|6
            *
            */
                    
        int templatePackage = request.getParameter("package") != null ? Integer.parseInt(request.getParameter("package")) : 0;
        switch (templatePackage) {
            case 1:
                filename="General_Overseas_Shipping_Package";
                doType = "1";
                invType = "1";
                break;

            case 2:
                filename="Local_Exchange_Core_Return_Package";
                doType = "2";
//                poType = "0";
                break;

            case 3:
                filename="Local_Exchange_Sales_Package";
                doType = "2,3";
                invType = "4";
                break;
                
            case 12:
                filename="Local_Exchange_Proforma_Sales_Package";
                doType = "2,3";
                invType = "6";
                break;

            case 4:
                filename="Local_Outright_Sales_Package";
                doType = "2,3";
                invType = "3";
                break;

            case 5:
                filename="Local_Repair_Outsource_Package";
                doType = "2";
                poType = "2";
                break;

            case 6:
                filename="Local_Warranty_Reject_Package";
                doType = "2";
                groType = "1";
                break;

            case 7:
                filename="Overseas_Exchange_Core_Return_Package";
                doType = "1";
                invType = "1";
//                poType = "0";    ERP-17947
                break;

            case 8:
                filename="Overseas_Exchange_Sales_Package";
                doType = "1,3";
                invType = "1,4";
                break;
            
            case 13:
                filename="Overseas_Exchange_Proforma_Sales_Package";
                doType = "1,3";
                invType = "1,6";
                break;

            case 9:
                filename="Overseas_Outright_Sales_Package";
                doType = "1,3";
                invType = "1,3";
                break;

            case 10:
                filename="Overseas_Repair_Outsource_Package";
                doType = "1";
                invType = "1";
                poType = "2";
                break;

            case 11:
                filename="Overseas_Warranty_Reject_Package";
                doType = "1";
                invType = "1";
                groType = "1";
                break;
        }
        
        String doTypesArr[]=null;
        if(!doType.equals("-1")){
            doTypesArr=doType.split(",");
        }
        
        int type=0;
        int count=0;
        if(doTypesArr!=null && doTypesArr.length!=0){
            for(String doID:doTypesArr){
                count++;
                type = Integer.parseInt(doID);
                request.setAttribute("filename", filename);
                request.setAttribute("dotype", doID);
                request.setAttribute("invtype", invType);
                request.setAttribute("potype", poType);
                request.setAttribute("grotype", groType);
                request.setAttribute("isPrintInvoice", count==1?true:false);  // This flag skip the redundent printing of same invoices if there are multiple type of DO present such as PL, DO, CoC.
                List list=exportDiamondAviationDeliveryOrder(request, response);
                finalList.addAll(list);
            }
        }
          return finalList;
    }
    @Override
    public List<Object> exportDiamondAviationGoodsReceiptOrderJasperReport(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, JSONException, SessionExpiredException, ParseException {
        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int templateflag = Integer.parseInt(request.getParameter("templateflag"));

        String groIDsfromDO = request.getAttribute("groIDsfromDO") != null ? request.getAttribute("groIDsfromDO").toString() : ""; //this will exports PO in DO Module for Diamond Aviation.
        boolean isGROLinkedWithDO = false;
        if (request.getAttribute("isGROLinkedWithDO") != null) {
            isGROLinkedWithDO = Boolean.parseBoolean(request.getAttribute("isGROLinkedWithDO").toString());
        }

        if (isGROLinkedWithDO) {
            recArray = groIDsfromDO.split(",");
        } else {
            recArray = recordIDs.split(",");
        }

//        int linkedPOtype = -1;
//        if (request.getAttribute("linkedGROtype") != null) {
//            linkedPOtype = Integer.parseInt(request.getAttribute("linkedGROtype").toString());
//        }

        HashMap<String, Object> fieldrequestParams = new HashMap();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Goods_Receipt_ModuleId));
        HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    billid = s;
                    if (StringUtil.isNullOrEmpty(billid)) {
                        billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    KwlReturnObject objItr;
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);

                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

//                    int type = 0;
//                    if(linkedPOtype!=-1){
//                         type =linkedPOtype;
//                    }else{
//                         type =request.getParameter("type")!=null?Integer.parseInt(request.getParameter("type")):0;
//                    }

                    String PONumber = "";
                    String grNumber = "";
                    String date = "";
                    String vendorName = "";
                    String Vendoraddress = "";
                    String shipToaddress = "";
                    String status = "";
                    String dueDate = "";
                    String shpDate = "";
                    String shipVia = "";
                    String FOB = "";
                    String memo = "";
                    String preparedBy = "";
                    String companyName = "";
                    String serial = "";
                    double rowTaxAmountTotal = 0;
                    double rowDiscountTotal = 0;
                    try {
                        objItr = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), billid);
                        GoodsReceiptOrder grOrder = (GoodsReceiptOrder) objItr.getEntityList().get(0);
                        Vendor vendor = grOrder.getVendor();
                        KWLCurrency currency = null;
                        if (grOrder.getCurrency() != null) {
                            currency = grOrder.getCurrency();
                        }
                        grNumber = grOrder.getGoodsReceiptOrderNumber() == null ? "" : grOrder.getGoodsReceiptOrderNumber();
                        date = grOrder.getOrderDate() != null ? authHandler.getUserDateFormatterWithoutTimeZone(request).format(grOrder.getOrderDate()) : "";
                        vendorName = vendor.getName() != null ? vendor.getName() : "";
                        Vendoraddress = grOrder.getBillingShippingAddresses() != null ? !StringUtil.isNullOrEmpty(CommonFunctions.getBillingShippingAddress(grOrder.getBillingShippingAddresses(), true)) ? CommonFunctions.getBillingShippingAddress(grOrder.getBillingShippingAddresses(), true) : "" : "";
                        shipToaddress = grOrder.getBillingShippingAddresses() != null ? !StringUtil.isNullOrEmpty(CommonFunctions.getBillingShippingAddress(grOrder.getBillingShippingAddresses(), false)) ? CommonFunctions.getBillingShippingAddress(grOrder.getBillingShippingAddresses(), false) : "" : "";
                        status = grOrder.getStatus() != null ? grOrder.getStatus().getValue() : "";
                        shipVia = grOrder.getShipvia() != null ? grOrder.getShipvia() : "";
                        FOB = grOrder.getFob() != null ? grOrder.getFob() : "";
                        memo = grOrder.getMemo() != null ? grOrder.getMemo() : "";
                        preparedBy = grOrder.getCreatedby() != null ? grOrder.getCreatedby().getFullName() : "";
                        companyName = company.getCompanyName() != null ? company.getCompanyName() : "";
                        shpDate = grOrder.getShipdate() != null ? authHandler.getUserDateFormatterWithoutTimeZone(request).format(grOrder.getShipdate()) : "";
                        OnlyDatePojo datePojo = new OnlyDatePojo();
                        datePojo.setDate(date);
                        datePojoList.add(datePojo);
                        //Get LIne level data 
                        ArrayList<JasperProductTable> subreportList = new ArrayList<JasperProductTable>();
                        HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
                        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                        filter_names.add("grOrder.ID");
                        order_by.add("srno");
                        order_type.add("asc");
                        doRequestParams.put("filter_names", filter_names);
                        doRequestParams.put("filter_params", filter_params);
                        doRequestParams.put("order_by", order_by);
                        doRequestParams.put("order_type", order_type);
                        filter_params.clear();
                        filter_params.add(grOrder.getID());
                        KwlReturnObject podresult = accGoodsReceiptobj.getGoodsReceiptOrderDetails(doRequestParams);
                        Iterator itr = podresult.getEntityList().iterator();
                        if (itr.hasNext()) {
                            double rate = 0;

                            GoodsReceiptOrderDetails row = (GoodsReceiptOrderDetails) itr.next();

                            invoiceMap.put("PartNo", row.getProduct() != null ? row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "" : "");
                            invoiceMap.put("Description", row.getDescription() != null ? row.getDescription().replaceAll("\n", "<br>") : "");
                            invoiceMap.put("Quantity", authHandler.formattedQuantity(row.getDeliveredQuantity(), companyid));

                            HashMap<String, Object> fieldrequestParams1 = new HashMap();
                            fieldrequestParams1.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                            fieldrequestParams1.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Goods_Receipt_ModuleId, 1));
                            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                            HashMap<String, String> customFieldMap1 = new HashMap<String, String>();
                            HashMap<String, String> customDateFieldMap1 = new HashMap<String, String>();
                            HashMap<String, Integer> fieldMap1 = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams1, replaceFieldMap, customFieldMap1, customDateFieldMap1);

                            Map<String, Object> variableMap1 = new HashMap<String, Object>();
                            GoodsReceiptOrderDetailsCustomDate goodsReceiptOrderDetailsCustomDate = (GoodsReceiptOrderDetailsCustomDate) row.getGoodsReceiptOrderDetailsCustomDate();

                            AccountingManager.setCustomColumnValues(goodsReceiptOrderDetailsCustomDate, fieldMap1, replaceFieldMap, variableMap1);
                            for (Map.Entry<String, Object> varEntry : variableMap1.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Condition")) {
                                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                        if (fieldComboData != null) {
                                            invoiceMap.put("Condition", fieldComboData.getValue());
                                        } else {
                                            invoiceMap.put("Condition", coldata);
                                        }
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Serial Number")) {
                                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                        if (fieldComboData != null) {
                                            invoiceMap.put("SerialNumber", fieldComboData.getValue());
                                        } else {
                                            invoiceMap.put("SerialNumber", coldata);
                                        }
                                    }
                                }
                            }
                            String docids = row.getID();
                            KwlReturnObject kmsg = null;
                            kmsg = accCommonTablesDAO.getOnlySerialDetails(docids, false, Constants.Acc_Goods_Receipt_ModuleId + "", false, false);
                            List batchserialdetails = kmsg.getEntityList();
                            Iterator iter = batchserialdetails.iterator();
                            while (iter.hasNext()) {
                                Object[] objArr = (Object[]) iter.next();
                                serial = objArr[8] != null ? (String) objArr[8] : "";
                                invoiceMap.put("SerialNumber", serial);
                            }
                            if (row.getPodetails() != null) {
                                PONumber=row.getPodetails().getPurchaseOrder().getPurchaseOrderNumber();
                            }
                            
                            if (row.getVidetails() != null &&  row.getVidetails().getPurchaseorderdetail() !=null) {
                                PONumber=row.getVidetails().getPurchaseorderdetail().getPurchaseOrder().getPurchaseOrderNumber(); //ERP-12380
                            }

                        }

                        String revno = "";
                        String suppliertrackingno = "";
                        String issuedate = "";
                        // custome Data
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        GoodsReceiptOrderCustomData goodsReceiptOrderCustomData = (GoodsReceiptOrderCustomData) grOrder.getGoodsReceiptOrderCustomData();
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                        AccountingManager.setCustomColumnValues(goodsReceiptOrderCustomData, fieldMap, replaceFieldMap, variableMap);
                        DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                        Date dateFromDB=null;
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                if ((varEntry.getKey().split("_")[1]).equals("Issue Date")) {
//                                    issuedate = authHandler.getUserDateFormatter(request).format(Long.parseLong(coldata));
                                    try {
                                        DateFormat sdf = new SimpleDateFormat(sessionHandlerImpl.getUserDateFormat(request));
                                        dateFromDB = defaultDateFormat.parse(coldata);
                                        coldata = sdf.format(dateFromDB);
                                    } catch (Exception e) {
                                        issuedate = coldata;
                                    }
                                    issuedate = coldata;
                                }
                            }
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                if ((varEntry.getKey().split("_")[1]).equals("SUPPLIER TRACKING NUMBER")) {
                                    suppliertrackingno = coldata;
                                } else if ((varEntry.getKey().split("_")[1]).equals("Rev No")) {
                                    revno = coldata;
                                }
                            }
                        }
                        invoiceMap.put("SupplierTrackingNo", suppliertrackingno);
                        invoiceMap.put("Rev_No", revno);
                        invoiceMap.put("ISSUE_DATE", issuedate);
                        invoiceMap.put("GRNumber", grNumber);
                        invoiceMap.put("COMPANY_NAME", companyName);
                        invoiceMap.put("VENDOR_NAME", vendorName);
                        invoiceMap.put("BILLTOADDRESS", Vendoraddress);
                        invoiceMap.put("NCNumber", grNumber);
                        invoiceMap.put("PONumber", PONumber); //ERP-11506
//                          invoiceMap.put("Rev_No","");
                        InputStream inputStream = null;
                        String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        invoiceMap.put("imagePath2", imagepath);
                        String filename = "NonConformityReport" + grNumber + ".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationTemplateNonConformityReport.jrxml");
                        invoiceMap.put("TITLE", "Goods Receipt" + grNumber);
                        response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                        list.add(jasperPrint);
                    } catch (Exception ex) {
                        Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

            }
        } catch (ServiceException ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }



        return list;
    }
 
    @Override
    public List<Object> exportDiamondAviationGoodsReceiptScrapReportJasper(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, JSONException, SessionExpiredException, ParseException {
        List<Object> list = new ArrayList<Object>();
        ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
        Map<String, Object> invoiceMap = new HashMap<String, Object>();
        String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        

        JasperPrint jasperPrint = null;
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    String billid = s;
                    if (StringUtil.isNullOrEmpty(billid)) {
                        billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), billid);
                    GoodsReceiptOrder grOrder = (GoodsReceiptOrder) objItr.getEntityList().get(0);
                    
                    String grNumber = grOrder.getGoodsReceiptOrderNumber() == null ? "" : grOrder.getGoodsReceiptOrderNumber();
                    String date = grOrder.getOrderDate() != null ? authHandler.getUserDateFormatterWithoutTimeZone(request).format(grOrder.getOrderDate()) : "";
                    
                    //Get LIne level data 
                    ArrayList<JasperProductTable> subreportList = new ArrayList<JasperProductTable>();
                    HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("grOrder.ID");
                    order_by.add("srno");
                    order_type.add("asc");
                    doRequestParams.put("filter_names", filter_names);
                    doRequestParams.put("filter_params", filter_params);
                    doRequestParams.put("order_by", order_by);
                    doRequestParams.put("order_type", order_type);
                    filter_params.clear();
                    filter_params.add(grOrder.getID());
                    KwlReturnObject podresult = accGoodsReceiptobj.getGoodsReceiptOrderDetails(doRequestParams);
                    Iterator itr = podresult.getEntityList().iterator();
                    
                    String partNo = "", srNo = "", certificate = "";
                    if (itr.hasNext()) {
                        GoodsReceiptOrderDetails row = (GoodsReceiptOrderDetails) itr.next();
                        partNo = row.getProduct() != null ? row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "" : "";

                        HashMap<String, Object> fieldrequestParams1 = new HashMap();
                        fieldrequestParams1.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                        fieldrequestParams1.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Goods_Receipt_ModuleId, 1));
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customFieldMap1 = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMap1 = new HashMap<String, String>();
                        HashMap<String, Integer> fieldMap1 = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams1, replaceFieldMap, customFieldMap1, customDateFieldMap1);

                        Map<String, Object> variableMap1 = new HashMap<String, Object>();
                        GoodsReceiptOrderDetailsCustomDate goodsReceiptOrderDetailsCustomDate = (GoodsReceiptOrderDetailsCustomDate) row.getGoodsReceiptOrderDetailsCustomDate();

                        AccountingManager.setCustomColumnValues(goodsReceiptOrderDetailsCustomDate, fieldMap1, replaceFieldMap, variableMap1);
                        for (Map.Entry<String, Object> varEntry : variableMap1.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                if ((varEntry.getKey().split("_")[1]).equals("Serial Number")) {
                                    FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                    if (fieldComboData != null) {
                                        srNo=fieldComboData.getValue();
                                    }else{
                                        srNo = coldata;
                                    }
                                }                                
                            }
                        }
                        String docids = row.getID();
                        KwlReturnObject kmsg = null;
                        kmsg = accCommonTablesDAO.getOnlySerialDetails(docids, false, Constants.Acc_Goods_Receipt_ModuleId + "", false, false);
                        List batchserialdetails = kmsg.getEntityList();
                        Iterator iter = batchserialdetails.iterator();
                        while (iter.hasNext()) {
                            Object[] objArr = (Object[]) iter.next();
                            srNo = objArr[8] != null ? (String) objArr[8] : "";
                        }
                    }
                    
                    // custome Data
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Goods_Receipt_ModuleId));
                    HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    GoodsReceiptOrderCustomData goodsReceiptOrderCustomData = (GoodsReceiptOrderCustomData) grOrder.getGoodsReceiptOrderCustomData();
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    AccountingManager.setCustomColumnValues(goodsReceiptOrderCustomData, fieldMap, replaceFieldMap, variableMap);
                    for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                        String coldata = varEntry.getValue().toString();
                        if (!StringUtil.isNullOrEmpty(coldata)) {
                            if ((varEntry.getKey().split("_")[1]).equals("DA Scrap Certificate No")) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    certificate = fieldComboData.getValue();
                                } else {
                                    certificate = coldata;
                                }
                            }
                        }
                    }
                    
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(date);
                    datePojoList.add(datePojo);

                    InputStream inputStream = null;
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("imagepath", imagepath);
                    invoiceMap.put("text", "");
                    String filename = "ScrapReport_";
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationScrapReport.jrxml");
                    invoiceMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                    invoiceMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                    invoiceMap.put("ponumber", grNumber);
                    invoiceMap.put("partnumber", partNo);
                    invoiceMap.put("srnumber", srNo);
                    invoiceMap.put("scrapcert", certificate);
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + grNumber +".pdf\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
    @Override
    public List<Object> exportDiamondAviationPartsReceiptNote(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, JSONException, SessionExpiredException, ParseException {
        List<Object> list = new ArrayList<Object>();
        List<Object> invoiceDesigns = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                Map<String, Object> deliveryOrderMap = new HashMap<String, Object>();
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                DateFormat formatter = authHandler.getUserDateFormatterWithoutTimeZone(request);

                int templateflag = request.getParameter("templateflag") != null ? Integer.parseInt(request.getParameter("templateflag")) : 0;
                int type = 0;
                type = request.getParameter("type") != null ? Integer.parseInt(request.getParameter("type")) : 0;

                DeliveryOrderJasper deliveryOrderJasper = new DeliveryOrderJasper();
                ArrayList<DeliveryOrderJasper> deliveryOrderList = new ArrayList<DeliveryOrderJasper>();
                ArrayList<DeliveryOrderTable2> deliveryOrderTable2List = new ArrayList<DeliveryOrderTable2>();
                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    String invno = "";
                    Date entryDate = null;
                    String customerEmail = "";
                    String customerName = "";
                    String customerAdd = "";
                    String customerPhone = "";
                    String billTo = "";
                    String shipTo = "";

                    GoodsReceiptOrder deliveryOrder = null;
                    deliveryOrder = (GoodsReceiptOrder) kwlCommonTablesDAOObj.getClassObject(GoodsReceiptOrder.class.getName(), billid);
                    invno = deliveryOrder.getGoodsReceiptOrderNumber();
                    entryDate = deliveryOrder.getOrderDate();
                    customerName = deliveryOrder.getVendor().getName() != null ? deliveryOrder.getVendor().getName() : "";

                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    addressParams.put("isBillingAddress", false); //false to get shipping address
                    addressParams.put("vendorid", deliveryOrder.getVendor().getID());
                    shipTo = deliveryOrder.getBillingShippingAddresses() != null ? CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), false) : accountingHandlerDAOobj.getVendorAddress(addressParams);
                    billTo = deliveryOrder.getBillingShippingAddresses() != null ? CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), true) : AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);;
//                    billTo = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
                    deliveryOrderJasper.setDate(formatter.format(entryDate));

                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    order_by.add("srno");
                    order_type.add("asc");
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    filter_names.add("grOrder.ID");
                    filter_params.add(deliveryOrder.getID());
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);

                    idresult = accGoodsReceiptobj.getGoodsReceiptOrderDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();
                    int i = 0;
                    String docids = "";
                    double itemscount = 0;

                    while (itr.hasNext()) {
                        i++;
                        DeliveryOrderTable2 deliveryOrderTable2 = new DeliveryOrderTable2();
                        String prodName = "";
                        String serial = "";
                        String prodcode = "";
                        String prodDesc = "";
                        double quantity = 0, deliverdQuantity = 0;
                        String uom = "";

                        GoodsReceiptOrderDetails row = (GoodsReceiptOrderDetails) itr.next();
                        prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                            prodDesc = row.getDescription();
                        } else {
                            if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                prodDesc = row.getProduct().getDescription();
                            }
                        }
                        quantity = row.getActualQuantity();
                        deliverdQuantity = row.getDeliveredQuantity();
                        uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                        /*
                         * to get the linking information upto 2-3 levels (Mayur
                         * B).
                         */
                        
                        deliveryOrderTable2.setProductname(prodName);
                        deliveryOrderTable2.setDesc(prodDesc.replaceAll("\n", "<br>"));

                        HashMap<String, Object> fieldrequestParams = new HashMap();
                        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                        fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Goods_Receipt_ModuleId, 1));
                        HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
                        HashMap<String, String> customFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
//                         HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
                        HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        GoodsReceiptOrderDetailsCustomDate deliveryOrderDetailCustomData = (GoodsReceiptOrderDetailsCustomDate) row.getGoodsReceiptOrderDetailsCustomDate();
                        AccountingManager.setCustomColumnValues(deliveryOrderDetailCustomData, fieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if ((varEntry.getKey().split("_")[1]).equals("Status")) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    deliveryOrderTable2.setStatus(fieldComboData.getValue());
                                } else {
                                    deliveryOrderTable2.setStatus(coldata);
                                }
                            }
                            if ((varEntry.getKey().split("_")[1]).equals("Product Status")) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    deliveryOrderTable2.setStatus(fieldComboData.getValue());
                                } else {
                                    deliveryOrderTable2.setStatus(coldata);
                                }
                            }
                            if ((varEntry.getKey().split("_")[1]).equals("Serial Number")) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    deliveryOrderTable2.setSno(fieldComboData.getValue());
                                } else {
                                    deliveryOrderTable2.setSno(coldata);
                                }
                            }
                            if ((varEntry.getKey().split("_")[1]).equals("Check")) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    deliveryOrderTable2.setChecked(fieldComboData.getValue());
                                } else {
                                    deliveryOrderTable2.setChecked(coldata);
                                }
                            }
                        }

                        docids = row.getID();
                        KwlReturnObject kmsg = null;
                        kmsg = accCommonTablesDAO.getOnlySerialDetails(docids, false, Constants.Acc_Goods_Receipt_ModuleId + "", false, false);
                        List batchserialdetails = kmsg.getEntityList();
                        Iterator iter = batchserialdetails.iterator();
                        while (iter.hasNext()) {
                            Object[] objArr = (Object[]) iter.next();
                            serial = objArr[8] != null ? (String) objArr[8] : "";
                            deliveryOrderTable2.setSno(serial);//product serial no
                        }
                        prodcode = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                        deliveryOrderTable2.setQty(authHandler.formattedQuantity(deliverdQuantity, companyid));
//                        deliveryOrderTable2.setChecked("");
                        deliveryOrderTable2.setPartno(prodcode);
                        itemscount = itemscount + row.getDeliveredQuantity();

                        deliveryOrderTable2.setUom(uom);
                        deliveryOrderTable2List.add(deliveryOrderTable2);
                    }
                    
                    String ordernumber="";
                    // custome Data
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Goods_Receipt_ModuleId));
                    HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    GoodsReceiptOrderCustomData goodsReceiptOrderCustomData = (GoodsReceiptOrderCustomData) deliveryOrder.getGoodsReceiptOrderCustomData();
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    AccountingManager.setCustomColumnValues(goodsReceiptOrderCustomData, fieldMap, replaceFieldMap, variableMap);
                    for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                        String coldata = varEntry.getValue().toString();
                        if (!StringUtil.isNullOrEmpty(coldata)) {
                            if ((varEntry.getKey().split("_")[1]).equals("Order Number")) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    ordernumber = fieldComboData.getValue();
                                } else {
                                    ordernumber = coldata;
                                }
                            }
                        }
                    }
                    

                    deliveryOrderJasper.setDate(formatter.format(entryDate));
                    deliveryOrderMap.put("shipTo", (type == 2) ? customerName + "<br>" + shipTo : shipTo.replaceAll("\n", "<br>"));
                    deliveryOrderMap.put("from", billTo);
                    deliveryOrderMap.put("donumber", invno);
                    deliveryOrderMap.put("porefnumber", ordernumber);
                    deliveryOrderMap.put("title","Parts Receipt Note ");
//                    deliveryOrderMap.put("title1","Parts Receipt Note");
                    deliveryOrderMap.put("itemcount", "" + authHandler.formattedQuantity(itemscount, companyid));
                    deliveryOrderList.add(deliveryOrderJasper);
                    deliveryOrderMap.put("DeliveryOrderTable2", new JRBeanCollectionDataSource(deliveryOrderTable2List));
                    String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String header = StorageHandler.GetDocStorePath() + companyid + "_header" + FileUploadHandler.getCompanyImageExt();
                    String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    deliveryOrderMap.put("logo", logo);
                    deliveryOrderMap.put("header", header);
                    deliveryOrderMap.put("footer", footer);
                    deliveryOrderMap.put("format", "pdf");
                    deliveryOrderMap.put("isdeliveryorder", true);
                    deliveryOrderMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                    deliveryOrderMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + "PartReceiptNote_" + invno +".pdf\"");
                    InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationPackagingSlip.jrxml");

                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(deliveryOrderList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, deliveryOrderMap, beanColDataSource);
                } catch (Exception e) {
                    Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                }
                list.add(jasperPrint);
                if (!invoiceDesigns.isEmpty()) {
                    list.addAll(invoiceDesigns);
                }
            }
        }
        return list;
    }

    @Override
      public List<Object> exportSBICustomerQoutationJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                List<OnlyDatePojo> onlydateList = new ArrayList<OnlyDatePojo>();
                List<SBISalesOrderProductTable> s0TableList = new ArrayList<SBISalesOrderProductTable>();

                List<Terms> termsList = new ArrayList<Terms>();
                OnlyDatePojo onlydateobj = new OnlyDatePojo();
                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                boolean isSelfBilledInvoice = false;
                boolean isSelfBilledInvoiceWithFC = false;
                String exchangerate = "";
                String rmcdApprovalNo = "";
                String customerName = "";
                String customerCode = "";
                String customerGSTNumber = "";
                String customerAdd = "";
                String attn = "";
                String recepientAttn = "";
                String terms = "";
                String billTo = "";
                String billAddr = "";
                String shipTo = "";
                String memo = "";
                String salesPerson = null;
                String billtoAddress = "";
                boolean isInclude = false; //Hiding or Showing P.O. NO field in single PDF 
                Iterator itr = null;
                String linkTo = "";
                HashSet<String> linkIds = new HashSet<String>();
                double totaltax = 0, discountTotalQuotation = 0, totaltaxpercent = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";
                String DeliveryMode = "";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                int templatflag = request.getParameter("templateflag") != null ? Integer.parseInt(request.getParameter("templateflag")) : 0;
//                boolean issimplifiedtaxinvoice = request.getParameter("issimplifiedtaxinvoice") != null ? Boolean.parseBoolean(request.getParameter("issimplifiedtaxinvoice")) : false;
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
                Company company = (Company) cmpresult.getEntityList().get(0);
                Map<String, Object> invoiceMap = new HashMap<String, Object>();
                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df1 = authHandler.getUserDateFormatter(request);
                    HashMap<String, Object> requestParamsForCurrency = AccountingManager.getGlobalParams(request);//to change currency to base currency and so

                    String gstNo = "";
                    String invno = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    Date currentDate = new Date();
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String termName = "";
                    String termAmount = "0.00";
                    double subTotal = 0;
                    double ProductServiceTotal = 0;
                    double ServiceTotal = 0;
                    double ProductTotal = 0;
                    double ProductServiceTotalCost = 0;
                    double ServiceTotalCost = 0;
                    double ProductTotalCost = 0;
                    String curr = "";
                    String curr_base = "";//to show base currency at summnery 
                    String postText = "";
                    String approverName = "";
                    String custFaxHp = "";
                    String recepFaxHp = "";
                    String custEmail = "";
                    String porefno = "";
                    double exchangerateinternal = 1;
                    String tel = "";
                    String recepientTel = "";
                    String fax = "";
                    String recepientfax = "";
                    String custDID = "";
                    String recepDID = "";
                    String recepEmail = "";
                    
                    KWLCurrency currency = null;
                    String currencyid = "";
                    if (mode == StaticValues.AUTONUM_QUOTATION) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Quotation.class.getName(), billid);
                        Quotation inv = (Quotation) cap.getEntityList().get(0);
                        if (inv.getCreatedby() != null) {
                            approverName = StringUtil.getFullName(inv.getCreatedby());
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        curr = currency.getCurrencyCode() != null ? currency.getCurrencyCode() : "";
                        curr_base =company.getCurrency().getCurrencyCode();
                        invno = inv.getQuotationNumber();
                        entryDate = inv.getQuotationDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipdate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();
			////--------------------Cust Addres Details------------------------
			CustomerAddressDetails customerAddressDetail = null;
			CustomerAddressDetails customerShippingAddressDetail = null;
			//params to send to get billing address
			HashMap<String, Object> addressParams = new HashMap<String, Object>();
			addressParams.put(Constants.companyKey,companyid);
			addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
			addressParams.put("isBillingAddress", true); //true to get billing address
			addressParams.put("customerid", inv.getCustomer().getID());
			customerAddressDetail =accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
			addressParams.put("isBillingAddress", false);
			customerShippingAddressDetail =accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                        order_by.add("srno");
                        order_type.add("asc");
                        filter_names.add("quotation.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        invRequestParams.put("order_by", order_by);
                        invRequestParams.put("order_type", order_type);
                        idresult = accSalesOrderDAOobj.getQuotationDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? "" : inv.getCustomer().getName();
                        customerAdd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        //attn = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingContactPerson() : inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getBillingContactPerson1() != null ? inv.getCustomer().getCustomerAddresses().getBillingContactPerson1() : "" : "";
                        attn = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingContactPerson() : customerAddressDetail != null ? customerAddressDetail.getContactPerson() != null ? customerAddressDetail.getContactPerson() : "" : "";
                        //recepientAttn = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingContactPerson() : inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getShippingContactPerson1() != null ? inv.getCustomer().getCustomerAddresses().getShippingContactPerson1() : "" : "";
                        recepientAttn = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingContactPerson() : customerShippingAddressDetail != null ? customerShippingAddressDetail.getContactPerson() != null ? customerShippingAddressDetail.getContactPerson() : "" : "";
                        salesPerson = inv.getSalesperson() != null ? inv.getSalesperson().getValue() : "";
                        billAddr = inv.getBillingShippingAddresses()!=null?inv.getBillingShippingAddresses().getBillingAddress():"";//CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), true);
                        shipTo =  inv.getBillingShippingAddresses()!=null?inv.getBillingShippingAddresses().getShippingAddress():"";//CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);
                        tel = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingPhone() : customerAddressDetail != null ? customerAddressDetail.getPhone() != null ? customerAddressDetail.getPhone() : "" : "";
                        //recepientfax = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingFax() : inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getShippingFax1() != null ? inv.getCustomer().getCustomerAddresses().getShippingFax1() : "" : "";
                        recepientfax = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingFax() : customerShippingAddressDetail != null ? customerShippingAddressDetail.getFax() != null ? customerShippingAddressDetail.getFax() : "" : "";
                        //fax = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingFax() : inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getBillingFax1() != null ? inv.getCustomer().getCustomerAddresses().getBillingFax1() : "" : "";
                        fax = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingFax() : customerAddressDetail != null ? customerAddressDetail.getFax() != null ? customerAddressDetail.getFax() : "" : "";
                        //recepientTel = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingPhone() : inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getShippingPhone1() != null ? inv.getCustomer().getCustomerAddresses().getShippingPhone1() : "" : "";
                        recepientTel = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingPhone() : customerShippingAddressDetail != null ? customerShippingAddressDetail.getPhone() != null ? customerShippingAddressDetail.getPhone() : "" : "";
                         //custFaxHp = (inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getBillingPhone1() != null ? inv.getCustomer().getCustomerAddresses().getBillingPhone1() : "--" : "--") + " / " + (inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getBillingFax1() != null ? inv.getCustomer().getCustomerAddresses().getBillingFax1() : "--" : "--");
                        custFaxHp = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingMobile() : "";
                        //recepFaxHp = (inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getShippingPhone1() != null ? inv.getCustomer().getCustomerAddresses().getShippingPhone1() : "--" : "--") + " / " + (inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getShippingFax1() != null ? inv.getCustomer().getCustomerAddresses().getShippingFax1() : "--" : "--");
                        recepFaxHp = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingMobile() : "";
                        custDID = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingPhone() : "";//+ " / " + (customerShippingAddressDetail != null ? customerShippingAddressDetail.getFax() != null ? customerShippingAddressDetail.getFax() : "--" : "--");
                        recepDID = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingPhone() : "";//+ " / " + (customerShippingAddressDetail != null ? customerShippingAddressDetail.getFax() != null ? customerShippingAddressDetail.getFax() : "--" : "--");
                        custEmail = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingEmail() : customerAddressDetail != null ? customerAddressDetail.getEmailID() != null ? customerAddressDetail.getEmailID() : "" : "";
                        recepEmail = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getShippingEmail() : customerShippingAddressDetail != null ? customerShippingAddressDetail.getEmailID() != null ? customerShippingAddressDetail.getEmailID() : "" : "";
                        exchangerateinternal = inv.getExternalCurrencyRate()==0?1:inv.getExternalCurrencyRate();
                        postText = inv.getPostText() == null ? "" : inv.getPostText();
                        terms = inv.getTerm() != null ? inv.getTerm().getTermname():"";
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo() != null ? inv.getMemo() : "";
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        QuotationDetail row = null;

                        int i = 0;
                        while (itr.hasNext()) {
                            SBISalesOrderProductTable tableSO = new SBISalesOrderProductTable();
                            i++;
                            double discount = 0, rowtaxamount = 0, rate = 0, discountPrice = 0;
                            String vendorCurrency = "";
                            String sNo = "";
                            String partNo = "";
                            String desc = "";
                            double qty = 0;
                            double unitSRP = 0;
                            double totalSRP = 0;
                            double unitCost = 0;
                            double totalCost = 0;
                            String vendor = "";
                            String poNo = "";
                            String doNo = "";
                            String invoiceNo = "";
                            String remarks = "";
                            double margin = 0;
                            double marginpercent = 0;
                            double totalSRPBaseCurrency=0;
                            double exchangerateVendorCurrency = 0;
                            
                            row = (QuotationDetail) itr.next();
                            sNo = row.getSrno() + "";
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                desc =  StringUtil.DecodeText(row.getDescription());
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                    desc =  StringUtil.DecodeText(row.getProduct().getDescription());
                                }
                            }
                            partNo = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                           
                            rowtaxamount = row.getRowTaxAmount();
                            if(row.getQuotation().isGstIncluded()){
                                unitSRP = row.getRateincludegst();
                            }else{
                                unitSRP = row.getRate();
                            }
                            qty = row.getQuantity();//Uniot Price document currency
                            totalSRP = (qty * unitSRP);//Total Price document currency
                                  // code to get discountPrice
                            discount = row.getDiscount();
                            if (row.getDiscountispercent() == 1) {
                                discount = totalSRP * discount / 100;
                                totalSRP = (totalSRP) - discount;
                            } else {
                                totalSRP = totalSRP - discount;
                            }
                            if(!row.getQuotation().isGstIncluded()){
                                totalSRP = totalSRP + rowtaxamount;
                            }
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalSRP, inv.getCurrency().getCurrencyID(), inv.getQuotationDate(), inv.getExternalCurrencyRate());
                            totalSRPBaseCurrency = (Double) bAmt.getEntityList().get(0);
                      
                               
                            //---------------- Code to get Vendor mapping details for profit margin In SBi.............
                             KwlReturnObject cap1 = accountingHandlerDAOobj.getObject(QuotationDetailsVendorMapping.class.getName(), row.getID());
                            QuotationDetailsVendorMapping soVendorobj = (QuotationDetailsVendorMapping) cap1.getEntityList().get(0);
                            if(soVendorobj!=null){
                            vendorCurrency = soVendorobj.getVendor()==null?"":soVendorobj.getVendor().getCurrency().getCurrencyCode();
                            vendor = soVendorobj.getVendor()==null?"":soVendorobj.getVendor().getName();
                            unitCost = soVendorobj.getUnitcost();//Unit Price vendor currency
                            totalCost = soVendorobj.getTotalcost();//total cost vendor currency
                            exchangerateVendorCurrency = authHandler.round(soVendorobj.getExchangerate(),companyid);
                              }
                           
                           
                            if (row.getProduct().getProducttype().getID().equals(Producttype.SERVICE)) {
                                ServiceTotal += totalSRP;// for sevice type product total in document currency
                                ServiceTotalCost+= authHandler.round(totalCost,companyid);//for service type product in base currency
                            } else {
                                ProductTotal += totalSRP;//for inventory type product total in document currency
                                ProductTotalCost += authHandler.round(totalCost,companyid);//for inventory type product in base currency
                            }
                                  //So linked  with quotation 
                            KwlReturnObject sdresult = accInvoiceDAOobj.getSODFromQD(row.getID());
                            List sdlist = sdresult.getEntityList();
                            Iterator sdite1 = sdlist.iterator();
                            double sua = 0.0;
                            while (sdite1.hasNext()) {
                                SalesOrderDetail qd = (SalesOrderDetail) sdite1.next();
                                KwlReturnObject idresultDO = accInvoiceDAOobj.getDOIDFromSOD(qd.getID(),"");//to get DO NO Linked
                                List listDO = idresultDO.getEntityList();
                                Iterator iteDO = listDO.iterator();
                                while (iteDO.hasNext()) {
                                    DeliveryOrderDetail doDetail = (DeliveryOrderDetail) iteDO.next();
                                    doNo = StringUtil.isNullOrEmpty(doNo) ? doNo : (doNo + "<br>");
                                    doNo = doNo + doDetail.getDeliveryOrder().getDeliveryOrderNumber();
                                    KwlReturnObject idresultINVOICE = accInvoiceDAOobj.getINVDFromDOD(doDetail.getID());//To Get Invoice's Linked
                                    List listINVOICE = idresultINVOICE.getEntityList();
                                    Iterator ite1 = listINVOICE.iterator();
                                    while (ite1.hasNext()) {
                                        InvoiceDetail ge = (InvoiceDetail) ite1.next();
                                        invoiceNo = StringUtil.isNullOrEmpty(invoiceNo) ? invoiceNo : (invoiceNo + "<br>");
                                        invoiceNo = invoiceNo + ge.getInvoice().getInvoiceNumber();
                                    }}
                                    //get PO From SO details'
                                    if (!StringUtil.isNullOrEmpty(qd.getPurchaseorderdetailid())) {//to get PO No. Linked
                                        KwlReturnObject podetailresult = accountingHandlerDAOobj.getObject(PurchaseOrderDetail.class.getName(), qd.getPurchaseorderdetailid());
                                        PurchaseOrderDetail purchaseOrderDetail = (PurchaseOrderDetail) podetailresult.getEntityList().get(0);
                                        if (purchaseOrderDetail != null) {
                                            poNo = StringUtil.isNullOrEmpty(poNo) ? poNo : (poNo + "<br>");
                                            poNo = poNo + purchaseOrderDetail.getPurchaseOrder().getPurchaseOrderNumber();
                                        }
                                    }
                              // get the CQ SO -INV-DO linking
                                 KwlReturnObject idresultINVOICE = accInvoiceDAOobj.getIDFromSOD(qd.getID());//To Get Invoice's Linked
                                List listINVOICE = idresultINVOICE.getEntityList();
                                Iterator ite1 = listINVOICE.iterator();
                                while (ite1.hasNext()) {
                                    InvoiceDetail ge = (InvoiceDetail) ite1.next();
                                    invoiceNo = StringUtil.isNullOrEmpty(invoiceNo) ? invoiceNo : (invoiceNo + "<br>");
                                    invoiceNo = invoiceNo + ge.getInvoice().getInvoiceNumber();
//                                doNo = doNo + (ge.getDeliveryOrderDetail()!=null?(ge.getDeliveryOrderDetail().getDeliveryOrder()!=null?ge.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber():""):"");//also get DO No if INV is Linked To Some DO.
                                    KwlReturnObject idresultdod = accInvoiceDAOobj.getDODFromINVD(ge.getID());//To Get DO's Linked
                                    List listdod = idresultdod.getEntityList();
                                    Iterator doite1 = listdod.iterator();
                                    while (doite1.hasNext()) {
                                        DeliveryOrderDetail doe = (DeliveryOrderDetail) doite1.next();
                                        doNo = StringUtil.isNullOrEmpty(doNo) ? doNo : (doNo + "<br>");
                                        doNo = doNo + doe.getDeliveryOrder().getDeliveryOrderNumber();
//                                    doNo = doNo + (ge.getDeliveryOrderDetail() != null ? (ge.getDeliveryOrderDetail().getDeliveryOrder() != null ? ge.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber() : "") : "");//also get DO No if INV is Linked To Some DO.
                                    }
                                }
                            }

                            //invoce linked with quotation

                            KwlReturnObject qdresult = accInvoiceDAOobj.getINVDFromQD(row.getID());
                            List qdlist = qdresult.getEntityList();
                            Iterator qdite1 = qdlist.iterator();
                            double qua = 0.0;
                            while (qdite1.hasNext()) {
                                InvoiceDetail qd = (InvoiceDetail) qdite1.next();
                                invoiceNo = StringUtil.isNullOrEmpty(invoiceNo) ? invoiceNo : (invoiceNo + "<br>");
                                invoiceNo = invoiceNo + qd.getInvoice().getInvoiceNumber();
                                doNo = StringUtil.isNullOrEmpty(doNo) ? doNo : (doNo + "<br>");
                                doNo = doNo + (qd.getDeliveryOrderDetail() != null ? qd.getDeliveryOrderDetail().getDeliveryOrder() != null ? qd.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber() : "" : "");
                            }



                            // Line Level Custome fields
                            HashMap<String, Object> fieldrequestParams1 = new HashMap();
                            HashMap<String, String> customFieldMap = new HashMap<String, String>();
                            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                            fieldrequestParams1.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                            fieldrequestParams1.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Sales_Order_ModuleId, 1));
                            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams1, replaceFieldMap, customFieldMap, customDateFieldMap);

                            Map<String, Object> variableMap = new HashMap<String, Object>();
                            QuotationDetailCustomData jeDetailCustom = (QuotationDetailCustomData) row.getQuotationDetailCustomData();
                            replaceFieldMap = new HashMap<String, String>();
                            AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                               String coldata = varEntry. getValue() != null ? varEntry.getValue().toString() : "";
                                    
                                        if (!StringUtil.isNullOrEmpty(coldata)) {
                                            if (varEntry.getKey().equals("Custom_Remarks")) {
                                                tableSO.setRemarks(coldata);
                                            }  
                                        }
                                     

                            }
                            // Margin Calculation at line level
                            margin = authHandler.round((totalSRPBaseCurrency-totalCost),companyid);
                            marginpercent =totalCost==0?100.00:margin==0?0.00:(margin/totalSRPBaseCurrency*100);
                            tableSO.setsNo(sNo);
                            tableSO.setDesc(desc.replaceAll("\n","<br>"));
                            tableSO.setPartNo(partNo);
                            tableSO.setQty(authHandler.formattedQuantity(qty, companyid));
                            tableSO.setUnitSRP(curr+" "+authHandler.formattedCommaSeparatedUnitPrice(unitSRP, companyid));
                            tableSO.setTotalSRP(curr+" "+authHandler.formattedCommaSeparatedAmount(totalSRP, companyid));
                            tableSO.setPoNo(poNo);
                            tableSO.setDoNo(doNo);
                            tableSO.setInvoiceNo(invoiceNo);
                            tableSO.setUnitCost(vendorCurrency +" "+authHandler.formattedCommaSeparatedUnitPrice(unitCost, companyid));
                            tableSO.setTotalCost(curr_base+" "+authHandler.formattedCommaSeparatedAmount(totalCost, companyid));
                            tableSO.setVendor(vendor);
                            tableSO.setMargin(curr_base+" "+authHandler.formattedCommaSeparatedAmount(margin, companyid));
                            tableSO.setMarginPercent(unitSRP<=0?"NA":authHandler.formattedCommaSeparatedAmount(marginpercent, companyid));
                            tableSO.setExchangerate(authHandler.formattedCommaSeparatedAmount(exchangerateVendorCurrency, companyid));
                            s0TableList.add(tableSO);
                            totalAmount += discountPrice + rowtaxamount;
                        }

                        if (inv.getTax() != null) {
                            requestParams.put("transactiondate", entryDate);
                            requestParams.put("taxid", inv.getTax() != null ? inv.getTax().getID() : "");
                            requestParams.put(Constants.companyKey, companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            if (!taxList.isEmpty()) {
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                        }
                        totaltax = (taxPercent == 0 ? 0 : totalAmount * taxPercent / 100);
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
                        double termTotalAmount = 0;
                      
                        if (!StringUtil.isNullOrEmpty(inv.getID())) {
                            HashMap<String, Object> requestParam = new HashMap();
                            requestParam.put("quotation", inv.getID());
                            KwlReturnObject curresult = null;
                            curresult = accSalesOrderDAOobj.getQuotationTermMap(requestParam);
                            List<QuotationTermMap> termMap = curresult.getEntityList();
                            for (QuotationTermMap invoiceTerMap : termMap) {
                                Terms termsObj = new Terms();
                                InvoiceTermsSales mt = invoiceTerMap.getTerm();
                                double termAmnt = invoiceTerMap.getTermamount();
                                termName = (termAmnt > 0 ? "(+) " : "(-) ") + mt.getTerm();
                                termAmount = termAmnt > 0 ? authHandler.formattedCommaSeparatedAmount(termAmnt, companyid) : "(" + authHandler.formattedCommaSeparatedAmount((termAmnt * -1), companyid) + ")";
                                termsObj.setTermName(termName);
                                termsObj.setTermValue(termAmount);
                                termsList.add(termsObj);
                                termTotalAmount += termAmnt;
                            }
                        }
                            totalAmount += termTotalAmount;
                            HashMap<String, String> customFieldMap = new HashMap<String, String>();
                            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                            HashMap<String, Object> fieldrequestParams = new HashMap();
                            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Customer_Quotation_ModuleId));
                            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                         
                            ///code for custome fields 
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        KwlReturnObject idcustresult = accountingHandlerDAOobj.getObject(QuotationCustomData.class.getName(), inv.getID());
                        if (idcustresult.getEntityList().get(0) != null && idcustresult.getEntityList().size() > 0) {
                            QuotationCustomData jeCustom = (QuotationCustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                              

                                        if (!StringUtil.isNullOrEmpty(coldata)) {
                                            if (varEntry.getKey().equals("Custom_Quotation Ref No")) {
                                                invoiceMap.put("QuotationNumber", coldata);
                                            } else if (varEntry.getKey().equals("Custom_Purchaser")||varEntry.getKey().equals("Custom_Requestor")) {
                                                invoiceMap.put("Purchaser", coldata);
                                            } else if (varEntry.getKey().equals("Custom_Delivered By")) {
                                                invoiceMap.put("DeliveredBy", coldata);
                                            } else if (varEntry.getKey().equals("Custom_Project")) {
                                                invoiceMap.put("Project", coldata);
                                            } else if (varEntry.getKey().equals("Custom_Project Manager")) {
                                                invoiceMap.put("ProjectManager", coldata);
                                            } else if (varEntry.getKey().equals("Custom_Sales Person 2")||varEntry.getKey().equals("Custom_Salesman 2")) {
                                                invoiceMap.put("Salesman_two", coldata);
                                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                                if (fieldComboData != null) { 
                                                    invoiceMap.put("Salesman_two", fieldComboData.getValue());
                                                }else{
                                                    invoiceMap.put("Salesman_two",  coldata);
                                                }
                                            } else if (varEntry.getKey().equals("Custom_Delivery Mode")) {
                                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                                if (fieldComboData != null) {
                                                    DeliveryMode = fieldComboData.getValue();
                                                }else{
                                                    DeliveryMode = coldata;
                                                }
                                            }
                                        }
                                     
                                }
                            }
                        //---------------Set The Parametere here ---------------------
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ServiceTotal, inv.getCurrency().getCurrencyID(), inv.getQuotationDate(), inv.getExternalCurrencyRate());
                        double ServiceTotal_In_Base = authHandler.round((Double) bAmt.getEntityList().get(0),companyid); 
                      
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ProductTotal, inv.getCurrency().getCurrencyID(), inv.getQuotationDate(), inv.getExternalCurrencyRate());
                        double ProductTotal_In_Base =  authHandler.round((Double) bAmt.getEntityList().get(0),companyid); 
                       
                        double serviceMargin = authHandler.round((ServiceTotal_In_Base - ServiceTotalCost),companyid); 
                        
                        double productMargin =authHandler.round( (ProductTotal_In_Base - ProductTotalCost),companyid); 
                        double serviceTotal_base_currency = 0;
                        invoiceMap.put("Currency", curr_base);//base currency symbol for sumnery section in Sales Order
                        invoiceMap.put("ProductServiceTotal", authHandler.formattedCommaSeparatedAmount((authHandler.round(ServiceTotal_In_Base,companyid) + authHandler.round(ProductTotal_In_Base,companyid)), companyid));
                        invoiceMap.put("ServiceTotal", authHandler.formattedCommaSeparatedAmount(ServiceTotal_In_Base, companyid));
                        invoiceMap.put("ProductTotal", authHandler.formattedCommaSeparatedAmount(ProductTotal_In_Base, companyid));
                        invoiceMap.put("CustomerName", customerName);
                        invoiceMap.put("RecipientName",inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingRecipientName() :customerShippingAddressDetail.getRecipientName()==null?"":customerShippingAddressDetail.getRecipientName());
                        invoiceMap.put("BillingAddress", billAddr);
                        invoiceMap.put("DeliveryAddress", shipTo);
                        invoiceMap.put("PaymentTerm", terms);
                        invoiceMap.put("CustAttn", attn);
                        invoiceMap.put("RecipientAttn", recepientAttn);
                        invoiceMap.put("CustHPFAX", custFaxHp);
                        invoiceMap.put("RecipientHPFAX", recepFaxHp);
                        invoiceMap.put("CustFAX", fax);
                        invoiceMap.put("RecipientFAX", recepientfax);
                        invoiceMap.put("CustTEL", tel);
                        invoiceMap.put("RecipientTEL", recepientTel);
                        invoiceMap.put("CustomerEmail", custEmail);
                        invoiceMap.put("RecipientEmail", recepEmail);
                        invoiceMap.put("RecipientEmail", recepEmail);
                        invoiceMap.put("customerDID", custDID);
                        invoiceMap.put("recepeintDID", recepDID);
                        invoiceMap.put("CustomerPoRefNo", inv.getCustomerPORefNo()!=null?inv.getCustomerPORefNo():"");
                        invoiceMap.put("SalesPerson", salesPerson);
                        invoiceMap.put("DateOfDelivery", shipDate!=null?df1.format(shipDate):"");
                        invoiceMap.put("TransactionDate", entryDate!=null?df1.format(entryDate):"");
                        invoiceMap.put("ExchangeRate", "");
                        invoiceMap.put("ExchangeRateInternal", "(Internal)   1"+curr_base+" = "+  new DecimalFormat("#.#####").format(exchangerateinternal)+" "+curr);
                        invoiceMap.put("ProductServiceTotalCost", authHandler.formattedCommaSeparatedAmount((ProductTotalCost + ServiceTotalCost), companyid));
                        invoiceMap.put("ServiceTotalCost", authHandler.formattedCommaSeparatedAmount(ServiceTotalCost, companyid));
                        invoiceMap.put("ProductTotalCost", authHandler.formattedCommaSeparatedAmount(ProductTotalCost, companyid));
                        invoiceMap.put("ProductServiceMargin", authHandler.formattedCommaSeparatedAmount(inv.getTotalProfitMargin(), companyid)+"");
                        invoiceMap.put("ServiceMargin",  authHandler.formattedCommaSeparatedAmount(serviceMargin, companyid)+"");
                        invoiceMap.put("ProductMargin",  authHandler.formattedCommaSeparatedAmount(productMargin, companyid)+"");
                        invoiceMap.put("ProductServiceMarginPercent",(ServiceTotal_In_Base + ProductTotal_In_Base)==0?"NA":authHandler.formattedCommaSeparatedAmount(inv.getTotalProfitMarginPercent(), companyid)+"%");
                        invoiceMap.put("ServiceMarginPercent", ServiceTotal_In_Base==0?"NA":(ServiceTotalCost ==0 && ServiceTotal ==0)?(authHandler.formattedCommaSeparatedAmount(0, companyid) +"%"):ServiceTotalCost!=0?authHandler.formattedCommaSeparatedAmount(((serviceMargin/ServiceTotal_In_Base)*100), companyid) +"%":(authHandler.formattedCommaSeparatedAmount(100, companyid) +"%"));
                        invoiceMap.put("ProductMarginPercent",ProductTotal_In_Base==0?"NA":(ProductTotal==0 && ProductTotalCost == 0)?"0.00%":ProductTotalCost!=0?authHandler.formattedCommaSeparatedAmount(((productMargin/ProductTotal_In_Base)*100), companyid)+"%":(authHandler.formattedCommaSeparatedAmount(100, companyid) +"%"));
                        invoiceMap.put("SoNumber",inv.getQuotationNumber()!=null?inv.getQuotationNumber():"");
                        invoiceMap.put("TableDataList", new JRBeanCollectionDataSource(s0TableList));
                        invoiceMap.put("FooterMemo","* A copy of customer's PO is to be attached with all Customer Quotation<br>* Special approval from Director for GP below 10% &/or sales amount more than S$70,000");
                        invoiceMap.put("DeliveryMode",DeliveryMode);
                        invoiceMap.put("memo",inv.getMemo()!=null?inv.getMemo():"");
                        String imagePath =  StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        invoiceMap.put("LOGO",imagePath);
                        
                        response.setHeader("Content-Disposition", "attachment;filename=" + "Quotation_v1.pdf");
                        KwlReturnObject compResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                        CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compResult.getEntityList().get(0);
                        onlydateobj.setDate(df1.format(entryDate));
                        onlydateList.add(onlydateobj);
                        invoiceMap.put("title", "Customer Quotation Form");
                        invoiceMap.put("SO_CQNO", "Cq No.");
                        invoiceMap.put("format", "pdf");
                        FileInputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SBISalesOrder.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(onlydateList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                        list.add(jasperPrint);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
            }
        }
        return list;
    }

    @Override
    public List<Object> exportCustomerQuotationJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
         List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();
                        
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONObject DataJObjRows = new JSONObject();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                   
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";
                    
                    HashMap<String, Object> requestParams = accSalesOrderServiceDAOobj.getSalesOrdersMap(request);
                    requestParams.put("billId", invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("dataFormatValue", authHandler.getDateOnlyFormat(request));
                    requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));
                    if (StringUtil.isNullOrEmpty(request.getParameter("archieve"))) {
                        requestParams.put("archieve", 0);
                    } else {
                        requestParams.put("archieve", Integer.parseInt(request.getParameter("archieve")));
                    }
                    requestParams.put("closeflag", null);
                    requestParams.put("sopolinkflag", null);
                    requestParams.put("linkFlagInSO", null);
                    requestParams.put("linkFlagInInv", null);
                    requestParams.put("dtype",request.getParameter("dtype"));
                    boolean isOrder = false;
                    String isorder = request.getParameter("isOrder");
                    if (!StringUtil.isNullOrEmpty(isorder) && StringUtil.equal(isorder, "true")) {
                        isOrder = true;
                    }
                    requestParams.put("isOrder", isOrder);
                    requestParams.put("userId", sessionHandlerImpl.getUserid(request));
                    KwlReturnObject invoiceResult = accSalesOrderDAOobj.getQuotations(requestParams);
                    DataJArr = accSalesOrderServiceDAOobj.getQuotationsJson(requestParams, invoiceResult.getEntityList(), DataJArr);
                    requestParams.put("bills", invoiceID);
                    DataJObjRows = accSalesOrderServiceDAOobj.getQuotationRows(requestParams);

                    HashSet<String> linkIds = new HashSet<String>();
                    if(DataJObjRows.length()>0){
                        DataJArrRows=DataJObjRows.getJSONArray("data");
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                        invRows.setSrNo(""+(i+1));
                        invRows.setDesc(jobj.optString("desc", ""));
                        invRows.setUom(jobj.optString("unitname",""));
                        invRows.setQty(authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                        invRows.setRate(authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        invRows.setTotal(authHandler.formattedCommaSeparatedAmount(((jobj.optDouble("quantity", 0)*jobj.optDouble("rate", 0))+jobj.optDouble("rowTaxAmount", 0)), companyid));
                        invRows.setAmountCurrency(jobj.optString("currencysymbol", ""));
                        invDetailsList.add(invRows);
                    }
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));

                    String linkTo = "";
                    for (String l : linkIds) {
                        linkTo += l + ",";
                    }
                    if (linkTo.length() > 1) {
                        linkTo = linkTo.substring(0, linkTo.length() - 1);
                    }
                    
                    JSONObject obj = DataJArr.getJSONObject(0);
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                    invoiceMap.put("IMAGEPATH", imagepath);
                    invoiceMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                    invoiceMap.put("COMPANY_FAX", company.getFaxNumber() == null ? "" : company.getFaxNumber());
                    invoiceMap.put("COMPANY_EMAIL", company.getEmailID() == null ? "" : company.getEmailID());
                    invoiceMap.put("COMPANY_TEL", company.getPhoneNumber() == null ? "" : company.getPhoneNumber());
                    invoiceMap.put("CUSTOMER_NAME", obj.optString("personname", ""));
                    invoiceMap.put("CUSTOMER_CODE", obj.optString("personcode", ""));
                    invoiceMap.put("CUSTOMER_FAX", obj.optString(Constants.BILLING_FAX, ""));
                    invoiceMap.put("From", obj.optString("Custom_From", ""));
                    invoiceMap.put("GST_PERCENT", (obj.optDouble("taxpercent", 0)) == 0 ? "" : " " +authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid) + "%");
                    invoiceMap.put("TOTAL_AMOUNT", obj.optString("currencycode", "")+" "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("orderamountwithTax", 0), companyid));
                    invoiceMap.put("PREPARED_BY", obj.optString("Custom_Name", ""));
                    invoiceMap.put("ATTN", obj.optString(Constants.BILLING_CONTACT_PERSON, ""));
                    invoiceMap.put("QUOTATION_NO",obj.optString("billno", ""));
                    InputStream SubReportInputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BaseSafetyQuotationReportsubreport.jrxml");
                    JasperDesign SubReportJasperDesign = JRXmlLoader.load(SubReportInputStream);
                    JasperReport SubReport = JasperCompileManager.compileReport(SubReportJasperDesign);                
                    invoiceMap.put("SubReport", SubReport);
                    invoiceMap.put("SubReportData", new JRBeanCollectionDataSource(invDetailsList));
                    invoiceMap.put("Re", "Enquiry for Quotation");
                    
                     
                    InputStream inputStream = null;
                     
                        title = "Quote_";
                        filename = "Quote_"+ obj.optString("billno", "")+".pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BaseSafetyQuotationReport.jrxml");
                 
                    invoiceMap.put("TITLE", title + obj.optString("billno", ""));
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
    @Override
    public List<Object> exportLANDPLUSCustomerInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recArray[] = null;
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        recArray = recordIDs.split(",");
        int type = 0;
        type = request.getParameter("type") != null ? Integer.parseInt(request.getParameter("type")) : 0;
        int templateflag = Integer.parseInt(request.getParameter("templateflag"));
        try {

            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<Map<String, Object>> invDetailsList = new ArrayList<Map<String, Object>>();

                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();


                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";

                    HashMap<String, Object> requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
                    requestParams.put(Constants.billid, invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    request.setAttribute("isExport", true);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("CashAndInvoice", true);
                    requestParams.put("isAged", true);   // Sending this flag because we have used the same template for normal, Fixed Asset and Lease Invoice

                    KwlReturnObject invoiceResult = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                    DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, invoiceResult.getEntityList(), DataJArr);
                    JSONObject obj = DataJArr.getJSONObject(0);
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                    HashMap<String, Object> genericDataMap = new HashMap<String, Object>();
                    DataJArrRows = accInvoiceServiceDAO.getInvoiceRows(paramJobj, invoiceID.split(","),genericDataMap);
                    //-----------Product Details----------------------------
                    Map<String, Object> invRows = new HashMap<String, Object>();
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        invRows = new HashMap<String, Object>();

                        invRows.put("srNo", (i + 1));
                        invRows.put("code", jobj.optString("pid", ""));
                        invRows.put("desc", jobj.optString("desc", ""));
                        invRows.put("qty", authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                        invRows.put("rate", authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        invRows.put("total", obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount((jobj.optDouble("amount", 0) - jobj.optDouble("rowTaxAmount", 0)), companyid));

                        invDetailsList.add(invRows);
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));

                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                    invoiceMap.put("COMPANY_NAME", company.getCompanyName() == null ? "" : company.getCompanyName());
                    invoiceMap.put("GST_REG_NO", companyAccountPreferences.getGstNumber() == null ? "" : companyAccountPreferences.getGstNumber());
                    invoiceMap.put("CUSTOMER_NAME", obj.optString("customername", ""));
                    invoiceMap.put("CUSTOMER_BILLTO_ADDRESS", obj.optString("billtoaddress", ""));
                    invoiceMap.put("CURRENCY_SYMBOL", obj.optString("currencysymbol", ""));
                    invoiceMap.put("PAYMENT_TERMS", obj.optBoolean("cashtransaction", false) ? "Cash" : (obj.optString("termname", "")));
                    invoiceMap.put("SUBTOTAL", authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0) - obj.optDouble("taxamount", 0)), companyid));
                    invoiceMap.put("GST_AMOUNT", obj.optDouble("taxamount", 0) == 0 ? "" : (obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid)));
                    invoiceMap.put("GST_AMOUNT_WITH_ZERO_AMOUNT", obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("CURRENCY_CODE", obj.optString("currencycode", ""));
                    invoiceMap.put("GST_PERCENT", (obj.optDouble("taxpercent", 0)) == 0 ? "" : " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid) + "%");
                    invoiceMap.put("GST_NAME", (obj.optString("taxname", "GST")));
                    invoiceMap.put("TOTAL_AMOUNT", obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                    invoiceMap.put("AMOUNT_IN_WORDS", obj.optString("amountinWords", ""));
                    invoiceMap.put("AGENT", obj.optString("salespersonname", ""));
                    invoiceMap.put("AGENT_CODE", obj.optString("salespersoncode", ""));
                    invoiceMap.put("ATTN", obj.optString(Constants.BILLING_CONTACT_PERSON, ""));
                    invoiceMap.put("CO_AGENT", "");
                    invoiceMap.put("INVOICE_NO", obj.optString("billno", ""));
                    invoiceMap.put("TYPE", type);
                    
                     String CompanyPDFPOSTTEXT ="";
                    KwlReturnObject templateConfig = accCommonTablesDAO.getPDFTemplateRow(companyid, Constants.Acc_Invoice_ModuleId);
                    List<PdfTemplateConfig> templist = templateConfig.getEntityList();
                    if (!templist.isEmpty()) {
                        for (PdfTemplateConfig config : templist) {
                            CompanyPDFPOSTTEXT = config.getPdfPostText() == null ? "" : config.getPdfPostText();
                        }
                    }
                    invoiceMap.put("BANK_DETAILS", StringUtil.isNullOrEmpty(obj.optString("Custom_Bank_Description", "")) ? CompanyPDFPOSTTEXT : obj.optString("Custom_Bank_Description", ""));

                    InputStream inputStream = null;
                    switch (type) {
                        case 1:
                            invoiceMap.put("CO_AGENT", obj.optString("Custom_Cobroker's Name", ""));
                            invoiceMap.put("CUSTOM1_LABEL", "Re");
                            invoiceMap.put("CUSTOM1_VALUE", obj.optString("Custom_Property address", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Property address_Description", "")) ? "" : ("\n" + obj.optString("Custom_Property address_Description", ""))));
                            invoiceMap.put("CUSTOM2_LABEL", "Vendor");
                            invoiceMap.put("CUSTOM2_VALUE", obj.optString("Custom_Seller / Landlord's Name", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Seller / Landlord's Name_Description", "")) ? "" : ("\n" + obj.optString("Custom_Seller / Landlord's Name_Description", ""))));
                            invoiceMap.put("CUSTOM3_LABEL", "Purchaser");
                            invoiceMap.put("CUSTOM3_VALUE", obj.optString("Custom_Purchaser / Tenant's Name", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Purchaser / Tenant's Name_Description", "")) ? "" : ("\n" + obj.optString("Custom_Purchaser / Tenant's Name_Description", ""))));
                            filename = "Sales_Cobroke_Invoice_" + obj.optString("billno", "") + ".pdf";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusTaxInvoiceType1.jrxml");
                            break;

                        case 2:
                            invoiceMap.put("CUSTOM1_LABEL", "Re");
                            invoiceMap.put("CUSTOM1_VALUE", obj.optString("Custom_Property address", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Property address_Description", "")) ? "" : ("\n" + obj.optString("Custom_Property address_Description", ""))));
                            invoiceMap.put("CUSTOM2_LABEL", "Vendor");
                            invoiceMap.put("CUSTOM2_VALUE", obj.optString("Custom_Seller / Landlord's Name", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Seller / Landlord's Name_Description", "")) ? "" : ("\n" + obj.optString("Custom_Seller / Landlord's Name_Description", ""))));
                            invoiceMap.put("CUSTOM3_LABEL", "Purchaser");
                            invoiceMap.put("CUSTOM3_VALUE", obj.optString("Custom_Purchaser / Tenant's Name", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Purchaser / Tenant's Name_Description", "")) ? "" : ("\n" + obj.optString("Custom_Purchaser / Tenant's Name_Description", ""))));
                            filename = "Sales_Direct_Invoice_" + obj.optString("billno", "") + ".pdf";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusTaxInvoiceType1.jrxml");
                            break;

                        case 3:
                            invoiceMap.put("CO_AGENT", obj.optString("Custom_Cobroker's Name", ""));
                            invoiceMap.put("CUSTOM1_LABEL", "Re");
                            invoiceMap.put("CUSTOM1_VALUE", obj.optString("Custom_Property address", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Property address_Description", "")) ? "" : ("\n" + obj.optString("Custom_Property address_Description", ""))));
                            invoiceMap.put("CUSTOM2_LABEL", "Landlord");
                            invoiceMap.put("CUSTOM2_VALUE", obj.optString("Custom_Seller / Landlord's Name", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Seller / Landlord's Name_Description", "")) ? "" : ("\n" + obj.optString("Custom_Seller / Landlord's Name_Description", ""))));
                            invoiceMap.put("CUSTOM3_LABEL", "Tenant");
                            invoiceMap.put("CUSTOM3_VALUE", obj.optString("Custom_Purchaser / Tenant's Name", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Purchaser / Tenant's Name_Description", "")) ? "" : ("\n" + obj.optString("Custom_Purchaser / Tenant's Name_Description", ""))));
                            filename = "Rental_Cobroker_Invoice_" + obj.optString("billno", "") + ".pdf";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusTaxInvoiceType1.jrxml");
                            break;

                        case 4:
                            invoiceMap.put("CUSTOM1_LABEL", "Re");
                            invoiceMap.put("CUSTOM1_VALUE", obj.optString("Custom_Property address", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Property address_Description", "")) ? "" : ("\n" + obj.optString("Custom_Property address_Description", ""))));
                            invoiceMap.put("CUSTOM2_LABEL", "Landlord");
                            invoiceMap.put("CUSTOM2_VALUE", obj.optString("Custom_Seller / Landlord's Name", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Seller / Landlord's Name_Description", "")) ? "" : ("\n" + obj.optString("Custom_Seller / Landlord's Name_Description", ""))));
                            invoiceMap.put("CUSTOM3_LABEL", "Tenant");
                            invoiceMap.put("CUSTOM3_VALUE", obj.optString("Custom_Purchaser / Tenant's Name", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Purchaser / Tenant's Name_Description", "")) ? "" : ("\n" + obj.optString("Custom_Purchaser / Tenant's Name_Description", ""))));
                            filename = "Rental_Direct_Client_Invoice_" + obj.optString("billno", "") + ".pdf";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusTaxInvoiceType4.jrxml");
                            break;

                        case 5:
                            invoiceMap.put("CUSTOM1_LABEL", "Re");
                            invoiceMap.put("CUSTOM1_VALUE", obj.optString("Custom_Property address", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Property address_Description", "")) ? "" : ("\n" + obj.optString("Custom_Property address_Description", ""))));
                            invoiceMap.put("CUSTOM2_LABEL", "Occupier");
                            invoiceMap.put("CUSTOM2_VALUE", obj.optString("Custom_Occupier", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Occupier_Description", "")) ? "" : ("\n" + obj.optString("Custom_Occupier_Description", ""))));
                            filename = "Furniture_Invoice_" + obj.optString("billno", "") + ".pdf";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusTaxInvoiceType1.jrxml");
                            break;

                        case 6:
                            invoiceMap.put("CUSTOM1_LABEL", "Re");
                            invoiceMap.put("CUSTOM1_VALUE", obj.optString("Custom_Property address", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Property address_Description", "")) ? "" : ("\n" + obj.optString("Custom_Property address_Description", ""))));
//                            invoiceMap.put("CUSTOM2_LABEL", "Property address");
//                            invoiceMap.put("CUSTOM2_VALUE", obj.optString("Custom_Property address", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Property address_Description", "")) ? "" : ("\n" + obj.optString("Custom_Property address_Description", ""))));
                            invoiceMap.put("CUSTOM3_LABEL", "Borrower Name");
                            invoiceMap.put("CUSTOM3_VALUE", obj.optString("Custom_Borrower Name", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Purchaser_Borrower Name", "")) ? "" : ("\n" + obj.optString("Custom_Purchaser_Borrower Name", ""))));
                            filename = "Others1_Invoice_" + obj.optString("billno", "") + ".pdf";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusTaxInvoiceType1.jrxml");
                            break;

                        case 7:
                            invoiceMap.put("CUSTOM1_LABEL", "Re");
                            invoiceMap.put("CUSTOM1_VALUE", obj.optString("Custom_Property address", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Property address_Description", "")) ? "" : ("\n" + obj.optString("Custom_Property address_Description", ""))));
                            filename = "Others2_Invoice_" + obj.optString("billno", "") + ".pdf";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusTaxInvoiceType1.jrxml");
                            break;

                        case 8:
                            invoiceMap.put("CUSTOM1_LABEL", "Re");
                            invoiceMap.put("CUSTOM1_VALUE", obj.optString("Custom_Property address", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Property address_Description", "")) ? "" : ("\n" + obj.optString("Custom_Property address_Description", ""))));
                            invoiceMap.put("CUSTOM2_LABEL", "Service Order Code");
                            invoiceMap.put("CUSTOM2_VALUE", obj.optString("Custom_Service Order Code", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Service Order Code_Description", "")) ? "" : ("\n" + obj.optString("Custom_Service Order Code_Description", ""))));
                            invoiceMap.put("CUSTOM3_LABEL", "Job Code");
                            invoiceMap.put("CUSTOM3_VALUE", obj.optString("Custom_Job Code", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Job Code_Description", "")) ? "" : ("\n" + obj.optString("Custom_Job Code_Description", ""))));
                            invoiceMap.put("CUSTOM4_LABEL", "Client");
                            invoiceMap.put("CUSTOM4_VALUE", obj.optString("Custom_Name of Assignee's Company", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Name of Assignee's Company_Description", "")) ? "" : ("\n" + obj.optString("Custom_Name of Assignee's Company_Description", ""))));
                            invoiceMap.put("CUSTOM5_LABEL", "Assignee");
                            invoiceMap.put("CUSTOM5_VALUE", obj.optString("Custom_Assignee", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Assignee_Description", "")) ? "" : ("\n" + obj.optString("Custom_Assignee_Description", ""))));
                            filename = "DSP_Invoice_" + obj.optString("billno", "") + ".pdf";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusTaxInvoiceType8.jrxml");
                            break;

                        case 9:
                            invoiceMap.put("CUSTOM_RE", obj.optString("Custom_Property address", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Property address_Description", "")) ? "" : ("\n" + obj.optString("Custom_Property address_Description", ""))));
                            invoiceMap.put("CUSTOM_OCCUPIER", obj.optString("Custom_Occupier", "") + (StringUtil.isNullOrEmpty(obj.optString("Custom_Occupier_Description", "")) ? "" : "<br>" + obj.optString("Custom_Occupier_Description", "")));
                            filename = "Zero_GST_Invoice_" + obj.optString("billno", "") + ".pdf";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusZeroGSTTaxInovice.jrxml");
                            break;
                    }
                    
                    String TITLE = "INVOICE";
                    String ROC = "";
                    String LICENCE = "";
                    switch (templateflag) {
                        case Constants.LandPlus_templateflag:            //http://accounting.deskera.com/a/lpn/
                            
                            TITLE = "TAX INVOICE";                       // As this is GST Company
                            ROC = "199907331D";
                            LICENCE = "L3008536D";
                            break;
                            
                        case Constants.LandBank_templateflag:            //http://accounting.deskera.com/a/lbp/
                            
                            ROC = "200404705N";
                            LICENCE = "L3009107J";
                            break;
                            
                        case Constants.LandBest_templateflag:            //http://accounting.deskera.com/a/lbr/
                            
                            ROC = "201319354K";
                            LICENCE = "L3010563Z";
                            break;
                            
                        case Constants.LandElHome_templateflag:          //http://accounting.deskera.com/a/leh/

                            ROC = "201023361Z";
                            LICENCE = "L3009305C";
                            break;
                            
                        case Constants.LandHub_templateflag:             //http://accounting.deskera.com/a/lhp/
                            
                            ROC = "201221356R";
                            LICENCE = "L3010459E";
                            break;
                            
                        case Constants.LandMax_templateflag:             //http://accounting.deskera.com/a/lmp/
                            
                            ROC = "201214500G";
                            LICENCE = "L3010440D";
                            break;
                            
                        case Constants.LandQuest_templateflag:           //http://accounting.deskera.com/a/lqp/
                            
                            ROC = "T10LL1606L";
                            LICENCE = "L3009842-I";
                            break;
                            
                        case Constants.LandSelectReality_templateflag:   //http://accounting.deskera.com/a/lsr/
                            
                            ROC = "201131243K";
                            LICENCE = "L3010396C";
                            break;
                            
                        case Constants.LandVin_templateflag:             //http://accounting.deskera.com/a/lvp/
                            
                            ROC = "201225059K";
                            LICENCE = "L3010492G";
                            break;
                            
                        case Constants.LandPlus_Zenn_templateflag:       //http://accounting.deskera.com/a/zenn/
                            
                            ROC = "201410928Z";
                            break;
                            
                        case Constants.LandPlus_Mobility_templateflag:   //http://accounting.deskera.com/a/msrd/ 
                            
                            TITLE = "TAX INVOICE";                       // As this is GST Company
                            ROC = "201319366E";
                            break;
                    }
                    invoiceMap.put("TITLE", TITLE);
                    invoiceMap.put("ROC", ROC);
                    invoiceMap.put("LICENCE", LICENCE);
                    
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);

                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }

    @Override
    public JasperPrint exportDefaultFormatCreditNoteJasperReport(HttpServletRequest request, HttpServletResponse response, String billid) throws ServiceException, JSONException, SessionExpiredException, ParseException {
//        List<Object> list = new ArrayList<Object>();
//        String billid = "";
//        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
//        String recArray[] = recordIDs.split(",");
//
//        if (recArray.length != 0) {
//            for (String s : recArray) {
//                billid = s;
                Map<String, Object> creditNoteMap = new HashMap<String, Object>();

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                 InputStream inputStream = null;

                try {
                     String companyid = sessionHandlerImpl.getCompanyid(request);
                     int templateflag = Integer.parseInt(request.getParameter("templateflag"));

                     KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                     Company company = (Company) cmpresult.getEntityList().get(0);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);

                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), billid);
                    CreditNote cn = (CreditNote) result1.getEntityList().get(0);

                    String invno = cn.getCreditNoteNumber();
                    DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);  //ERP-20961     //new SimpleDateFormat("dd/MM/yyyy");
//                    String entryDate = df.format(cn.getJournalEntry() != null ? cn.getJournalEntry().getEntryDate() : cn.getCreationDate());
                    String entryDate = df.format(cn.getCreationDate());
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, companyid);
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true); //true to get billing address
                    
                    String code = "", name = "", address = "", memo = "", dncurrency = "",gstRegNo = "";
                    String nameLabel = "", addressLabel = "", codeLabel = "", termsLabel = "", terms = "";
                    if (cn.getCustomer() != null) {	//CN For Customer
                        nameLabel = "Customer Name";
                        addressLabel = "Customer Address";
                        codeLabel = "Customer Code";
                        addressParams.put("customerid", cn.getCustomer().getID());
                        code = (cn.getCustomer().getAcccode() != null ? cn.getCustomer().getAcccode() : "");
                        name = (cn.getCustomer().getName() != null ? cn.getCustomer().getName() : "");
                        if (cn.getBillingShippingAddresses() != null) {
                            address = CommonFunctions.getBillingShippingAddressWithAttn(cn.getBillingShippingAddresses(), true);
                        } else {
                            address = "";
                        }
                        memo = (cn.getMemo() != null ? cn.getMemo() : "");
                        dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                        terms = cn.getCustomer().getCreditTerm() == null ? "" : cn.getCustomer().getCreditTerm().getTermdays() + " Days";
                    }
                    if (cn.getVendor() != null) {   //CN For Vendor
                        nameLabel = "Vendor Name";
                        addressLabel = "Vendor Address";
                        codeLabel = "Vendor Code";
                        
                        code = (cn.getVendor().getAcccode() != null ? cn.getVendor().getAcccode() : "");
                        name = (cn.getVendor().getName() != null ? cn.getVendor().getName() : "");
                        addressParams.put("vendorid", cn.getVendor().getID());
                        if (cn.getBillingShippingAddresses() != null) {
                            address = CommonFunctions.getBillingShippingAddressWithAttn(cn.getBillingShippingAddresses(), true);
                        } else {
                            address = "";
                        }
                        memo = (cn.getMemo() != null ? cn.getMemo() : "");
                        dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                        terms = cn.getVendor().getDebitTerm()==null?"":cn.getVendor().getDebitTerm().getTermdays()+" Days";
                    }
                    dncurrency = accCommonTablesDAO.getCustomCurrencyCode(dncurrency,companyid);
                    gstRegNo = StringUtil.isNullOrEmpty(companyAccountPreferences.getGstNumber())?"":("\nGST Registration Number:"+companyAccountPreferences.getGstNumber());
                    creditNoteMap.put(Constants.companyid,companyid);
                    if(cn.getSalesReturn()!=null) {
                        forCreditNoteWithSalesReturn(cn.getSalesReturn().getID(), creditNoteMap);
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DefaultStandardFormatForSalesReturn.jrxml");
                    } else {
                        forCreditNoteWithSalesInvoice(cn, creditNoteMap,companyid);
                        if (cn.isIsOpeningBalenceCN()) {
                            memo = cn.getMemo();
                        }
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DefaultStandardFormatForCreditDebitNoteWithInvoice.jrxml");
                    }
                    
                    creditNoteMap.put("format", "pdf");
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    creditNoteMap.put("imagePath", fileName1);
                    boolean isLetterHead = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("isLetterHead"))) {
                        isLetterHead = Boolean.parseBoolean((String) request.getParameter("isLetterHead"));
                    }
                    creditNoteMap.put("isLetterHead", isLetterHead && ExportRecordHandler.checkCompanyTemplateLogoPresent(company));
                    ArrayList datePojoList = new ArrayList();
                    OnlyDatePojo dateObj = new OnlyDatePojo();
                    dateObj.setDate(entryDate);
                    datePojoList.add(dateObj);
                    
//                    if (templateflag == Constants.DefaultStandardFormat_tempalteflag) {
                        creditNoteMap.put("headerLabel", "CREDIT NOTE");
                        creditNoteMap.put("beingNoteLabel", "Being Credit Note for the following invoices :");
                        creditNoteMap.put("numberLabel", "Document No.");
                        creditNoteMap.put("personCode", code);
                        creditNoteMap.put("personCodeLabel", codeLabel);
                        creditNoteMap.put("number", invno);
                        creditNoteMap.put("personName", name);
                        creditNoteMap.put("personNameLabel", nameLabel);
                        creditNoteMap.put("personAddress", address);
                        creditNoteMap.put("personAddressLabel", addressLabel);
                        creditNoteMap.put("currency", dncurrency);
                        creditNoteMap.put("COMPANY_NAME", company.getCompanyName());
                        creditNoteMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj)+gstRegNo);
                        creditNoteMap.put("remark", memo);
                        creditNoteMap.put("preparedBy", cn.getCreatedby() != null ? cn.getCreatedby().getFullName() : "");
                        creditNoteMap.put("personTerms", terms);
//                    }
                    String invNoWithoutSpace =invno.replaceAll(" ", "_");   
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + "CreditNote_"+invNoWithoutSpace+"_v1.pdf\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, creditNoteMap, beanColDataSource);
//                    list.add(jasperPrint);

                } catch (Exception ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
//            }
//        }
        return jasperPrint;
    }  

    @Override
    public JasperPrint exportDefaultFormatDebitNoteJasperReport(HttpServletRequest request, HttpServletResponse response, String billid) throws ServiceException, JSONException, SessionExpiredException, ParseException {
//        List<Object> list = new ArrayList<Object>();
//        String billid = "";
//        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
//        String recArray[] = recordIDs.split(",");
//
//        if (recArray.length != 0) {
//            for (String s : recArray) {
//                billid = s;
                Map<String, Object> creditNoteMap = new HashMap<String, Object>();

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                InputStream inputStream = null;

                try {
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    int templateflag = Integer.parseInt(request.getParameter("templateflag"));

                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);

                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), billid);
                    DebitNote cn = (DebitNote) result1.getEntityList().get(0);

                    String invno = cn.getDebitNoteNumber();
                    DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);
//                    String entryDate = df.format(cn.getJournalEntry() != null ? cn.getJournalEntry().getEntryDate() : cn.getCreationDate());
                    String entryDate = df.format(cn.getCreationDate());

                    String code = "", name = "", address = "", memo = "", dncurrency = "",gstRegNo="";
                    String nameLabel = "", addressLabel = "", codeLabel = "", termsLabel = "";
                    String terms = "";
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true); //true to get billing address
                    if (cn.getCustomer() != null) {	//CN For Customer
                        nameLabel = "Customer Name";
                        addressLabel = "Customer Address";
                        codeLabel = "Customer Code";
            
                        code = (cn.getCustomer().getAcccode() != null ? cn.getCustomer().getAcccode() : "");
                        name = (cn.getCustomer().getName() != null ? cn.getCustomer().getName() : "");
                        addressParams.put("customerid", cn.getCustomer().getID());
                        if (cn.getBillingShippingAddresses() != null) {
                            address = CommonFunctions.getBillingShippingAddressWithAttn(cn.getBillingShippingAddresses(), true);
                        } else {
                            address = "";
                        }
                        memo = (cn.getMemo() != null ? cn.getMemo() : "");
                        dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                        terms = cn.getCustomer().getCreditTerm()==null?"":cn.getCustomer().getCreditTerm().getTermdays()+" Days";
                    }
                    if (cn.getVendor() != null) {   //CN For Vendor
                        nameLabel = "Vendor Name";
                        addressLabel = "Vendor Address";
                        codeLabel = "Vendor Code";
                        
                        code = (cn.getVendor().getAcccode() != null ? cn.getVendor().getAcccode() : "");
                        name = (cn.getVendor().getName() != null ? cn.getVendor().getName() : "");
                        addressParams.put("vendorid", cn.getVendor().getID());
                        if (cn.getBillingShippingAddresses() != null) {
                            address = CommonFunctions.getBillingShippingAddressWithAttn(cn.getBillingShippingAddresses(), true);
                        } else {
                            address = "";
                        }
                        memo = (cn.getMemo() != null ? cn.getMemo() : "");
                        dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                        terms = cn.getVendor().getDebitTerm()==null?"":cn.getVendor().getDebitTerm().getTermdays()+" Days";
                    }
                    dncurrency = accCommonTablesDAO.getCustomCurrencyCode(dncurrency,companyid);
                    gstRegNo = StringUtil.isNullOrEmpty(companyAccountPreferences.getGstNumber())?"":("\nGST Registration Number:"+companyAccountPreferences.getGstNumber());
                    if (cn.getPurchaseReturn() != null) {
                        forDebitNoteWithPurchaseReturn(cn.getPurchaseReturn().getID(), creditNoteMap,companyid);
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DefaultStandardFormatForSalesReturn.jrxml");
                    } else {
                        forDebitNoteWithPurchaseInvoice(cn, creditNoteMap, companyid);
                        if (cn.isIsOpeningBalenceDN()) {
                            memo = cn.getMemo();
                        }
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DefaultStandardFormatForCreditDebitNoteWithInvoice.jrxml");
                    }

                    creditNoteMap.put("format", "pdf");
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    creditNoteMap.put("imagePath", fileName1);
                    boolean isLetterHead = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("isLetterHead"))) {
                        isLetterHead = Boolean.parseBoolean((String) request.getParameter("isLetterHead"));
                    }
                    creditNoteMap.put("isLetterHead", isLetterHead && ExportRecordHandler.checkCompanyTemplateLogoPresent(company));
                    ArrayList datePojoList = new ArrayList();
                    OnlyDatePojo dateObj = new OnlyDatePojo();
                    dateObj.setDate(entryDate);
                    datePojoList.add(dateObj);

//                    if (templateflag == Constants.DefaultStandardFormat_tempalteflag) {
                    creditNoteMap.put("headerLabel", "DEBIT NOTE"); 
                    creditNoteMap.put("beingNoteLabel", "Being Debit Note for the following invoices :");
                    creditNoteMap.put("numberLabel", "Document No.");
                    creditNoteMap.put("personCode", code);
                    creditNoteMap.put("personCodeLabel", codeLabel);
                    creditNoteMap.put("number", invno);
                    creditNoteMap.put("personName", name);
                    creditNoteMap.put("personNameLabel", nameLabel);
                    creditNoteMap.put("personAddress", address);
                    creditNoteMap.put("personAddressLabel", addressLabel);
                    creditNoteMap.put("currency", dncurrency);
                    creditNoteMap.put("COMPANY_NAME", company.getCompanyName());
                    creditNoteMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj)+gstRegNo);
                    creditNoteMap.put("remark", memo);
                    creditNoteMap.put("personTerms", terms);
                    creditNoteMap.put("preparedBy", cn.getCreatedby() != null ? cn.getCreatedby().getFullName() : "");
//                    }
                    
                    String invNoWithoutSpace =invno.replaceAll(" ", "_");
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + "DebitNote_"+invNoWithoutSpace+"_v1.pdf\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, creditNoteMap, beanColDataSource);
//                    list.add(jasperPrint);

                } catch (Exception ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
//            }
//        }
        return jasperPrint;
    }

    public void forDebitNoteWithPurchaseInvoice(DebitNote cn, Map<String, Object> creditNoteMap, String companyid) {
        try {
            boolean isOpeningBalanceTransaction = cn.isIsOpeningBalenceDN();
            ArrayList<CreditNoteTable> creditNoteTableList = new ArrayList<CreditNoteTable>();
            int x = 1;
            
            if (!isOpeningBalanceTransaction) { //To show Particulars Detail in PDF when transaction is a non-opening type.
                Set<DebitNoteTaxEntry> cnTaxEntryDetails = cn.getDnTaxEntryDetails();
                if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {

                    for (DebitNoteTaxEntry noteTaxEntry : cnTaxEntryDetails) {
                        CreditNoteTable creditNoteTable = new CreditNoteTable();
                        String accName = "";
                        String accCode = "";
                        String accDesc = "";
                        double rowtaxamount = 0;
                        double amount1 = 0;

                        accCode = noteTaxEntry.getAccount().getAcccode() != null ? noteTaxEntry.getAccount().getAcccode() : "";
                        accName = noteTaxEntry.getAccount().getName() != null ? noteTaxEntry.getAccount().getName() : "";
                        accDesc = noteTaxEntry.getDescription() != null ? noteTaxEntry.getDescription() : "";
                        rowtaxamount = noteTaxEntry.getTaxamount();
                        amount1 = noteTaxEntry.getAmount();
                        if (noteTaxEntry.isDebitForMultiCNDN()) {
                            rowtaxamount = rowtaxamount * -1;
                            amount1 = amount1 * -1;
                        }
                        creditNoteTable.setAccName(accName);
                        creditNoteTable.setAccCode(accCode);
                        String desc = accName;
                        desc += "<br>";
                        desc += StringUtil.isNullOrEmpty(desc) ? "" : StringUtil.isNullOrEmpty(accDesc) ? "" : "\nDescription : "+accDesc;
                        desc += "<br>";
                        desc += noteTaxEntry.getReason()==null ? "" : StringUtil.isNullOrEmpty(noteTaxEntry.getReason().getValue()) ? "" : ("\nReason : "+noteTaxEntry.getReason().getValue());
                        creditNoteTable.setNarration(desc);
                        if(cn.isIncludingGST()){
                            creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount((amount1-rowtaxamount), companyid));
                            creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount(amount1, companyid));
                        }else{
                            creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount1, companyid));
                            creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount((amount1 + rowtaxamount), companyid));
                        }
                        creditNoteTable.setGstAmount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                        creditNoteTable.setSrNo(noteTaxEntry.getSrNoForRow());
//                        creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount(amount1 + rowtaxamount));
                        creditNoteTableList.add(creditNoteTable);
                    }
                } else {// in case of if tax is not included while creation of CN Value will be go fron jedetail table in case of Edit.
                    JournalEntry je = cn.getJournalEntry();
                    Set<JournalEntryDetail> jeDetails = je.getDetails();
                    for (JournalEntryDetail jed : jeDetails) {
                        String accName = "";
                        String accDesc = "";
                        String accCode = "";
                        double discount = 0;
                        double rowtaxamount = 0;
                        double amount1 = 0;
                        double amount_with_discount = 0;
                        double amount_with_tax = 0;

                        if (jed.isDebit()) {
                            accCode = jed.getAccount().getAcccode() != null ? jed.getAccount().getAcccode() : "";
                            accName = jed.getAccount().getName() != null ? jed.getAccount().getName() : "";
                            accDesc = jed.getDescription() != null ? jed.getDescription() : "";
                            amount1 = jed.getAmount();
                            amount_with_discount = amount1 - discount;
                            amount_with_tax = amount_with_discount + rowtaxamount;
                            CreditNoteTable creditNoteTable = new CreditNoteTable();
                            creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(jed.getAmount(), companyid));
                            creditNoteTable.setAccName(accName);
                            creditNoteTable.setAccCode(accCode);
                            String desc = accName;
                            desc += StringUtil.isNullOrEmpty(desc) ? "" : StringUtil.isNullOrEmpty(accDesc) ? "" : "- ";
                            desc += accDesc;
                            creditNoteTable.setNarration(desc);
                            creditNoteTable.setSrNo(jed.getSrno());
                            creditNoteTable.setGstAmount(authHandler.formattedCommaSeparatedAmount(jed.getGstCurrencyRate(), companyid));
                            creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                            creditNoteTableList.add(creditNoteTable);
                        }
                    }
                }
                Collections.sort(creditNoteTableList, new Comparator<CreditNoteTable>() {

                    @Override
                    public int compare(CreditNoteTable o1, CreditNoteTable o2) {
                        if (o1.getSrNo() > o2.getSrNo()) {
                            return 1;
                        } else {
                            return -1;
                        }
                    }
                });
            } else {    //To show Particulars as An Opening in PDF when transaction is an opening type.
                CreditNoteTable creditNoteTable = new CreditNoteTable();
                creditNoteTable.setAccName("This is an Opening Debit Note");
                creditNoteTable.setNarration("This is an Opening Debit Note");
                creditNoteTable.setDesc(cn.getNarration());
                creditNoteTable.setSrNo(x++);
                creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(cn.getDnamount(), companyid));
                creditNoteTable.setGstAmount(authHandler.formattedCommaSeparatedAmount(0, companyid));
                creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount(cn.getDnamount(), companyid));
                creditNoteTableList.add(creditNoteTable);
            }

            ArrayList creditNoteDetails = new ArrayList();
            Set<DebitNoteDetail> rows = cn.getRows();
            List sortedList = new ArrayList(rows);
            Collections.sort(sortedList, new Comparator<DebitNoteDetail>() {
                @Override
                public int compare(DebitNoteDetail o1, DebitNoteDetail o2) {
                    if (o1.getSrno()> o2.getSrno()) {
                        return 1;
                    } else {
                        return -1;
                    }
                }
            });
            Iterator itr = sortedList.iterator();
            x = 1;
            while (itr.hasNext()) {
                DebitNoteDetail row = (DebitNoteDetail) itr.next();
                GoodsReceipt invObj = row.getGoodsReceipt();
                if (invObj != null) {
                    double actualAmount = 0;
                    if (row.getGoodsReceipt().isIsOpeningBalenceInvoice() && !row.getGoodsReceipt().isNormalInvoice()) {
                        actualAmount = row.getGoodsReceipt().getOriginalOpeningBalanceAmount();
                    } else {
                        actualAmount = row.getGoodsReceipt().getVendorEntry().getAmount();
                    }

                    Discount disc = row.getDiscount();
                    double invamount = 0d;
                    if (disc != null) {
                        invamount = authHandler.round(disc.getDiscountValue(), companyid);
                    } else {
                        invamount = 0;
                    }

                    String billno = row.getGoodsReceipt().getGoodsReceiptNumber();

                    CreditNoteTable creditNoteTable = new CreditNoteTable();
                    creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(invamount, companyid));
                    String desc = billno;
                    desc += StringUtil.isNullOrEmpty(desc) ? "" : " - ";
                    desc += "Amount Due : ";
                    desc += authHandler.formattedCommaSeparatedAmount(actualAmount, companyid);
                    creditNoteTable.setNarration(desc);
                    creditNoteTable.setSrNo(x++);
                    creditNoteDetails.add(creditNoteTable);
                }
            }
            
            int countryLanguageId = Constants.OtherCountryLanguageId; //0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), cn.getCompany().getCompanyID());
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            Company company = (Company) kwlCommonTablesDAOObj.getClassObject(Company.class.getName(), companyid);
            boolean isMalaysian = company != null ? company.getCountry().getID().equalsIgnoreCase("137") : false;
            double totalAmountIncludingTax = cn.getDnamount();
            double totalTaxAmount = 0;
            KWLCurrency currency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), cn.getCurrency().getCurrencyID());
            if (isMalaysian) {
                Set<DebitNoteAgainstCustomerGst> debitNoteAgainstCustomerGstSetObj = cn.getRowsGst();
                if (!debitNoteAgainstCustomerGstSetObj.isEmpty()) {
                    Iterator itrDebit = debitNoteAgainstCustomerGstSetObj.iterator();
                    while (itrDebit.hasNext()) {
                        DebitNoteAgainstCustomerGst debitNoteAgainstCustomerGstObj = (DebitNoteAgainstCustomerGst) itrDebit.next();
                        totalTaxAmount += debitNoteAgainstCustomerGstObj.getRowTaxAmount();
                    }
                    if (cn.isIncludingGST()) {
                        totalAmountIncludingTax = cn.getDnamount();
                    } else {
                        totalAmountIncludingTax = totalTaxAmount + cn.getDnamount();
                    }
                }
            }
            String netinword = EnglishNumberToWordsOjb.convert(authHandler.round(!isMalaysian?cn.getDnamount():totalAmountIncludingTax, companyid), currency,countryLanguageId);
            creditNoteMap.put("CreditNoteTable", new JRBeanCollectionDataSource(creditNoteTableList));
            creditNoteMap.put("InvoiceDetails", new JRBeanCollectionDataSource(creditNoteDetails));
            creditNoteMap.put("amount", authHandler.formattedCommaSeparatedAmount(!isMalaysian?cn.getDnamount():totalAmountIncludingTax, companyid));
            creditNoteMap.put("amountInWords", netinword + " only.");
            creditNoteMap.put("personTerms", "");

        } catch (ServiceException ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void forDebitNoteWithPurchaseReturn(String billid, Map<String, Object> SalesReturnMap,String companyid) {
        try {
            PurchaseReturn sr = (PurchaseReturn) kwlCommonTablesDAOObj.getClassObject(PurchaseReturn.class.getName(), billid);

            HashMap<String, Object> invRequestParams = new HashMap<>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            ArrayList<TaxInvoiceSubReport> SalesReturnTableList = new ArrayList<>();
            order_by.add("srno");
            order_type.add("asc");
            invRequestParams.put("order_by", order_by);
            invRequestParams.put("order_type", order_type);
            KwlReturnObject idresult = null;
            Iterator itr = null;
            filter_names.add("purchaseReturn.ID");
            filter_params.add(sr.getID());
            invRequestParams.put("filter_names", filter_names);
            invRequestParams.put("filter_params", filter_params);

            idresult = accGoodsReceiptobj.getPurchaseReturnDetails(invRequestParams);
            itr = idresult.getEntityList().iterator();
            double total = 0;
            double totalTaxAmount = 0;
            int i = 0;
            while (itr.hasNext()) {
                i++;
                TaxInvoiceSubReport srTable = new TaxInvoiceSubReport();
                String prodName = "";
                String prodDesc = "";
                double Uprice = 0;
                double amount = 0;
                double quantity = 0;
                double discAmt = 0;

                PurchaseReturnDetail row = (PurchaseReturnDetail) itr.next();
                prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                quantity = row.getReturnQuantity();

                if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                    prodDesc += row.getDescription();
                }
                prodDesc = (StringUtil.isNullOrEmpty(prodName) ? "" : prodName)+ (StringUtil.isNullOrEmpty(prodDesc)? "" : " - "+prodDesc);

            
                Uprice = row.getRate();
                amount = Uprice * quantity;
                if (row.getDiscountispercent() == 0) {
                    discAmt = row.getDiscount();//Flat
                } else {
                    discAmt = amount * (row.getDiscount() / 100);//Percentage Value
                }
                amount = amount - discAmt;
                total += amount;
                totalTaxAmount += row.getRowTaxAmount();

                srTable.setsNo(i + "");
                srTable.setProductDescription(prodDesc);
                srTable.setuPrice(authHandler.formattedQuantity(quantity, companyid));
                srTable.setTaxamount(authHandler.formattedCommaSeparatedUnitPrice(Uprice, companyid));
                srTable.setProductAmount(authHandler.formattedCommaSeparatedAmount(amount, companyid));

                SalesReturnTableList.add(srTable);
            }
            SalesReturnMap.put("SRSubReportData", new JRBeanCollectionDataSource(SalesReturnTableList));
            SalesReturnMap.put("gsttotal", authHandler.formattedCommaSeparatedAmount(totalTaxAmount, companyid));
            SalesReturnMap.put("subtotal", authHandler.formattedCommaSeparatedAmount(total, companyid));
            SalesReturnMap.put("total", authHandler.formattedCommaSeparatedAmount((total + totalTaxAmount), companyid));
            
            int countryLanguageId = Constants.OtherCountryLanguageId; //0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(),sr.getCompany().getCompanyID());
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }

            String netinword = EnglishNumberToWordsOjb.convert(authHandler.round(total + totalTaxAmount, companyid), sr.getCurrency(),countryLanguageId);
            SalesReturnMap.put("amountInWords", netinword + " only.");

        } catch (Exception e) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public void forCreditNoteWithSalesInvoice(CreditNote cn, Map<String, Object> creditNoteMap,String companyid) {
        try {
             boolean isOpeningBalanceTransaction = cn.isIsOpeningBalenceCN();
            ArrayList<CreditNoteTable> creditNoteTableList = new ArrayList<CreditNoteTable>();
            int x = 1;
            
            if (!isOpeningBalanceTransaction) { //To show Particulars Detail in PDF when transaction is a non-opening type.
                Set<CreditNoteTaxEntry> cnTaxEntryDetails = cn.getCnTaxEntryDetails();
                if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {

                    for (CreditNoteTaxEntry noteTaxEntry : cnTaxEntryDetails) {
                        CreditNoteTable creditNoteTable = new CreditNoteTable();
                        String accName = "";
                        String accCode = "";
                        String accDesc = "";
                        double rowtaxamount = 0;
                        double amount1 = 0;

                        accCode = noteTaxEntry.getAccount().getAcccode() != null ? noteTaxEntry.getAccount().getAcccode() : "";
                        accName = noteTaxEntry.getAccount().getName() != null ? noteTaxEntry.getAccount().getName() : "";
                        accDesc = noteTaxEntry.getDescription() != null ? StringUtil.decodeString(noteTaxEntry.getDescription()) : "";
                        rowtaxamount = noteTaxEntry.getTaxamount();
                        amount1 = noteTaxEntry.getAmount();
                        if (!noteTaxEntry.isDebitForMultiCNDN()) {
                            rowtaxamount = rowtaxamount * -1;
                            amount1 = amount1 * -1;
                        }
                        creditNoteTable.setAccName(accName);
                        creditNoteTable.setAccCode(accCode);
                        String desc = accName;
                        desc += "<br>";
                        desc += StringUtil.isNullOrEmpty(desc) ? "" : StringUtil.isNullOrEmpty(accDesc) ? "" : "\nDescription : "+accDesc;
                        desc += noteTaxEntry.getReason()==null ? "" : StringUtil.isNullOrEmpty(noteTaxEntry.getReason().getValue()) ? "" : ("\nReason : "+noteTaxEntry.getReason().getValue());
                        creditNoteTable.setNarration(desc);
                        if(cn.isIncludingGST()){
                            creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount((amount1-rowtaxamount), companyid));
                            creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount(amount1, companyid));
                        }else{
                            creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount1, companyid));
                            creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount((amount1 + rowtaxamount), companyid));
                        }
                        creditNoteTable.setGstAmount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                        creditNoteTable.setSrNo(noteTaxEntry.getSrNoForRow());
                        creditNoteTableList.add(creditNoteTable);
                    }
                } else {// in case of if tax is not included while creation of CN Value will be go fron jedetail table in case of Edit.
                    JournalEntry je = cn.getJournalEntry();
                    Set<JournalEntryDetail> jeDetails = je.getDetails();
                    for (JournalEntryDetail jed : jeDetails) {
                        String accName = "";
                        String accDesc = "";
                        String accCode = "";
                        double discount = 0;
                        double rowtaxamount = 0;
                        double amount1 = 0;
                        double amount_with_discount = 0;
                        double amount_with_tax = 0;
                        
                        if (cn.getCntype() == 5) {
                            if (!jed.isDebit()) {
                                accCode = jed.getAccount().getAcccode() != null ? jed.getAccount().getAcccode() : "";
                                accName = jed.getAccount().getName() != null ? jed.getAccount().getName() : "";
                                accDesc = jed.getDescription() != null ? jed.getDescription() : "";
                                amount1 = jed.getAmount();
                                amount_with_discount = amount1 - discount;
                                amount_with_tax = amount_with_discount + rowtaxamount;
                                CreditNoteTable creditNoteTable = new CreditNoteTable();
                                creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(jed.getAmount(), companyid));
                                creditNoteTable.setAccName(accName);
                                creditNoteTable.setAccCode(accCode);
                                String desc = accName;
                                desc += StringUtil.isNullOrEmpty(desc) ? "" : StringUtil.isNullOrEmpty(accDesc) ? "" : "- ";
                                desc += accDesc;
                                creditNoteTable.setNarration(desc);
                                creditNoteTable.setSrNo(jed.getSrno());
                                creditNoteTable.setGstAmount(authHandler.formattedCommaSeparatedAmount(jed.getGstCurrencyRate(), companyid));
                                creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                                creditNoteTableList.add(creditNoteTable);
                            }
                        } else {
                            if (jed.isDebit()) {
                                accCode = jed.getAccount().getAcccode() != null ? jed.getAccount().getAcccode() : "";
                                accName = jed.getAccount().getName() != null ? jed.getAccount().getName() : "";
                                accDesc = jed.getDescription() != null ? jed.getDescription() : "";
                                amount1 = jed.getAmount();
                                amount_with_discount = amount1 - discount;
                                amount_with_tax = amount_with_discount + rowtaxamount;
                                CreditNoteTable creditNoteTable = new CreditNoteTable();
                                creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(jed.getAmount(), companyid));
                                creditNoteTable.setAccName(accName);
                                creditNoteTable.setAccCode(accCode);
                                String desc = accName;
                                desc += StringUtil.isNullOrEmpty(desc) ? "" : StringUtil.isNullOrEmpty(accDesc) ? "" : "- ";
                                desc += accDesc;
                                creditNoteTable.setNarration(desc);
                                creditNoteTable.setSrNo(jed.getSrno());
                                creditNoteTable.setGstAmount(authHandler.formattedCommaSeparatedAmount(jed.getGstCurrencyRate(), companyid));
                                creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                                creditNoteTableList.add(creditNoteTable);
                            }
                        }
                    }
                }
                Collections.sort(creditNoteTableList, new Comparator<CreditNoteTable>() {

                    @Override
                    public int compare(CreditNoteTable o1, CreditNoteTable o2) {
                        if (o1.getSrNo() > o2.getSrNo()) {
                            return 1;
                        } else {
                            return -1;
                        }
                    }
                });
            } else {    //To show Particulars as An Opening in PDF when transaction is an opening type.
                CreditNoteTable creditNoteTable = new CreditNoteTable();
                creditNoteTable.setAccName("This is an Opening Credit Note");
                creditNoteTable.setNarration("This is an Opening Credit Note");
                creditNoteTable.setDesc(cn.getNarration());
                creditNoteTable.setSrNo(x++);
                creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(cn.getCnamount(), companyid));
                creditNoteTable.setGstAmount(authHandler.formattedCommaSeparatedAmount(0, companyid));
                creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount(cn.getCnamount(), companyid));
                creditNoteTableList.add(creditNoteTable);
            }

            ArrayList creditNoteDetails = new ArrayList();
            Set<CreditNoteDetail> rows = cn.getRows();
            Iterator itr = rows.iterator();
            x = 1;
            while (itr.hasNext()) {
                CreditNoteDetail row = (CreditNoteDetail) itr.next();
                Invoice invObj = row.getInvoice();
                if (invObj != null) {
                    double actualAmount = 0;
                    if (row.getInvoice().isIsOpeningBalenceInvoice() && !row.getInvoice().isNormalInvoice()) {
                        actualAmount = row.getInvoice().getOriginalOpeningBalanceAmount();
                    } else {
                        actualAmount = row.getInvoice().getCustomerEntry().getAmount();
                    }

                    Discount disc = row.getDiscount();
                    double invamount = 0d;
                    if (disc != null) {
                        invamount = authHandler.round(disc.getDiscountValue(), companyid);
                    } else {
                        invamount = 0;
                    }

                    String billno = row.getInvoice().getInvoiceNumber();

                    CreditNoteTable creditNoteTable = new CreditNoteTable();
                    creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(invamount, companyid));
                    String desc = billno;
                    desc += StringUtil.isNullOrEmpty(desc) ? "" : "- ";
                    desc += "Amount Due : ";
                    desc += authHandler.formattedCommaSeparatedAmount(actualAmount, companyid);
                    creditNoteTable.setNarration(desc);
                    creditNoteTable.setSrNo(x++);
                    creditNoteDetails.add(creditNoteTable);
                }
            }
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), cn.getCompany().getCompanyID());
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            
            KWLCurrency currency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), cn.getCurrency().getCurrencyID());
            String netinword = EnglishNumberToWordsOjb.convert(authHandler.round(cn.getCnamount(), companyid), currency,countryLanguageId);
            creditNoteMap.put("CreditNoteTable", new JRBeanCollectionDataSource(creditNoteTableList));
            creditNoteMap.put("InvoiceDetails", new JRBeanCollectionDataSource(creditNoteDetails));
            creditNoteMap.put("amount", authHandler.formattedCommaSeparatedAmount(cn.getCnamount(), companyid));
            creditNoteMap.put("amountInWords", netinword + " only.");
            creditNoteMap.put("personTerms", "");
            
        } catch (ServiceException ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    public void forCreditNoteWithSalesReturn(String billid, Map<String, Object> SalesReturnMap) {
        try {
            SalesReturn sr = (SalesReturn) kwlCommonTablesDAOObj.getClassObject(SalesReturn.class.getName(), billid);
            String companyid = StringUtil.isNullOrEmpty(SalesReturnMap.get(Constants.companyid).toString())?"":SalesReturnMap.get(Constants.companyid).toString();
            HashMap<String, Object> invRequestParams = new HashMap<>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            ArrayList<TaxInvoiceSubReport> SalesReturnTableList = new ArrayList<>();
            order_by.add("srno");
            order_type.add("asc");
            invRequestParams.put("order_by", order_by);
            invRequestParams.put("order_type", order_type);
            KwlReturnObject idresult = null;
            Iterator itr = null;
            filter_names.add("salesReturn.ID");
            filter_params.add(sr.getID());
            invRequestParams.put("filter_names", filter_names);
            invRequestParams.put("filter_params", filter_params);

            idresult = accInvoiceDAOobj.getSalesReturnDetails(invRequestParams);
            itr = idresult.getEntityList().iterator();
            double total = 0;
            double totalTaxAmount = 0;
            int i = 0;
            while (itr.hasNext()) {
                i++;
                TaxInvoiceSubReport srTable = new TaxInvoiceSubReport();
                String prodName = "";
                String prodDesc = "";
                double Uprice = 0;
                double amount = 0;
                double quantity = 0;
                double discAmt = 0;

                SalesReturnDetail row = (SalesReturnDetail) itr.next();
                prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                quantity = row.getReturnQuantity();
                prodDesc = (StringUtil.isNullOrEmpty(prodName) ? "" : prodName)+ (StringUtil.isNullOrEmpty(prodDesc)? "" : " - "+prodDesc);
               
                Uprice = row.getRate();
                amount = Uprice * quantity;
                 if (row.getDiscountispercent() == 0) {
                    discAmt = row.getDiscount();//Flat
                } else {
                    discAmt = amount * (row.getDiscount() / 100);//Percentage Value
                }
                amount = amount - discAmt;
                total += amount;
                totalTaxAmount += row.getRowTaxAmount();

                srTable.setsNo(i + "");
                srTable.setProductDescription(prodDesc);
                srTable.setuPrice(authHandler.formattedQuantity(quantity, companyid));
                srTable.setTaxamount(authHandler.formattedCommaSeparatedUnitPrice(Uprice, companyid));
                srTable.setProductAmount(authHandler.formattedCommaSeparatedAmount(amount, companyid));

                SalesReturnTableList.add(srTable);
            }
            if (sr.getTax() != null) {
                double taxPercent = 0;
                KwlReturnObject taxresult = accTaxObj.getTaxPercent(companyid, sr.getOrderDate(), sr.getTax().getID());
                taxPercent = (Double) taxresult.getEntityList().get(0);
                totalTaxAmount = (taxPercent == 0 ? 0 : authHandler.round((total * taxPercent / 100), companyid));
            }
            SalesReturnMap.put("SRSubReportData", new JRBeanCollectionDataSource(SalesReturnTableList));
            SalesReturnMap.put("gsttotal", authHandler.formattedCommaSeparatedAmount(totalTaxAmount, companyid));
            SalesReturnMap.put("subtotal", authHandler.formattedCommaSeparatedAmount(total, companyid));
            SalesReturnMap.put("total", authHandler.formattedCommaSeparatedAmount((total + totalTaxAmount), companyid));
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sr.getCompany().getCompanyID());
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            String netinword = EnglishNumberToWordsOjb.convert(authHandler.round(total + totalTaxAmount, companyid), sr.getCurrency(),countryLanguageId);
            String custmerterms = sr.getCustomer().getCreditTerm() != null ? (Integer.toString(sr.getCustomer().getCreditTerm().getTermdays()) + " Days") : "";
            SalesReturnMap.put("personTerms", custmerterms);
            SalesReturnMap.put("amountInWords", netinword + " only.");
            
        } catch (Exception e) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    @Override
    public List<Object> exportCreditNoteJasperReportForMonzone(HttpServletRequest request, HttpServletResponse response, List entityList) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        double total = 0;

        Map<String, Object> creditNoteMap = new HashMap<String, Object>();
        JasperPrint jasperPrint = null;
        JasperReport jasperReport = null;
        InputStream inputStream = null;
        ArrayList<TransactionPojo> creditNoteList = new ArrayList<TransactionPojo>();

        KWLCurrency currency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));        
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        String companyid = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject compaccresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
        CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compaccresult.getEntityList().get(0);
        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
        Company company = (Company) cmpresult.getEntityList().get(0);
        String companyname = company.getCompanyName() != null ? company.getCompanyName() : "";
        String companyaddress = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
        String companyemail = company.getEmailID() != null ? company.getEmailID() : "";
        String companyfax = company.getFaxNumber() != null ? company.getFaxNumber() : "";
        String companyphone = company.getPhoneNumber() != null ? company.getPhoneNumber() : "";
        KwlReturnObject bAmt = null;
        
        if (entityList.size() != 0) {
            for (Object s : entityList) {
                billid = ((Object[])s)[1].toString();

                try {
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    DateFormat dateFormat = (DateFormat) requestParams.get("df");
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Credit_Note_ModuleId));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;

                    HashMap<String, Object> cnRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("creditNote.ID");
                    order_by.add("srno");
                    order_type.add("asc");
                    cnRequestParams.put("filter_names", filter_names);
                    cnRequestParams.put("filter_params", filter_params);
                    cnRequestParams.put("order_by", order_by);
                    cnRequestParams.put("order_type", order_type);
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), billid);
                    CreditNote cn = (CreditNote) result1.getEntityList().get(0);
                    boolean isOpeningBalanceTransaction = cn.isIsOpeningBalenceCN();
                    entry = cn.getJournalEntry();
                    List<String> dimensionList = new ArrayList<String>();
                    if (entry != null) {
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add(Constants.companyKey);
                        Detailfilter_params.add(cn.getCompany().getCompanyID());
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(cn.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(Constants.Acc_Credit_Note_ModuleId + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                            Date dateFromDB=null;
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        dimensionList.add(fieldComboData.getValue() != null ? varEntry.getKey().split("_")[1] + "&nbsp;&nbsp;:" + fieldComboData.getValue() : "");
                                    }
                                } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                    DateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                                    try {
                                        dateFromDB = defaultDateFormat.parse(coldata);
                                        coldata = sdf.format(dateFromDB);
                                    } catch (Exception e) {
                                    }
                                    dimensionList.add(varEntry.getKey().split("_")[1] + "&nbsp;&nbsp;:" + coldata);
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        dimensionList.add(varEntry.getKey().split("_")[1] + "&nbsp;&nbsp;:" + coldata);
                                    }
                                }
                            }
                        }
                    }

                    String invno = cn.getCreditNoteNumber();
//                    String entryDate = df.format(cn.getJournalEntry() != null ? cn.getJournalEntry().getEntryDate() : cn.getCreationDate());
                    String entryDate = df.format(cn.getCreationDate());
                    String code = "", name = "", phone = "", address = "", fax = "", memo = "", dncurrency = "";
                    
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true); //true to get billing address
                    if (cn.getCustomer() != null) {	//CN For Customer
                        code = (cn.getCustomer().getAcccode() != null ? cn.getCustomer().getAcccode() : "");
                        name = (cn.getCustomer().getName() != null ? cn.getCustomer().getName() : "");
                        phone = (cn.getCustomer().getContactNumber() != null ? cn.getCustomer().getContactNumber() : "");
                        addressParams.put("customerid", cn.getCustomer().getID());
                        address = (cn.getCustomer() != null ? accountingHandlerDAOobj.getCustomerAddress(addressParams).replaceAll("\n", "<br>") : cn.getCustomer().getBillingAddress() != null ? cn.getCustomer().getBillingAddress().replaceAll("\n", "<br>") : "");
                        fax = (cn.getCustomer().getFax() != null ? cn.getCustomer().getFax() : "");
                        memo = (cn.getMemo() != null ? cn.getMemo() : "");
                        dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                    }
                    if (cn.getVendor() != null) {   //CN For Vendor
                        code = (cn.getVendor().getAcccode() != null ? cn.getVendor().getAcccode() : "");
                        name = (cn.getVendor().getName() != null ? cn.getVendor().getName() : "");
                        phone = (cn.getVendor().getContactNumber() != null ? cn.getVendor().getContactNumber() : "");
                        addressParams.put("vendorid", cn.getVendor().getID());
                        address = (cn.getVendor() != null ? accountingHandlerDAOobj.getVendorAddress(addressParams).replaceAll("\n", "<br>") : cn.getVendor().getAddress() != null ? cn.getVendor().getAddress().replaceAll("\n", "<br>") : "");
                        fax = (cn.getVendor().getFax() != null ? cn.getVendor().getFax() : "");
                        memo = (cn.getMemo() != null ? cn.getMemo() : "");
                        dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                    }
                    
                    if (!isOpeningBalanceTransaction) { //To show Particulars Detail in PDF when transaction is a non-opening type. 
                        JournalEntry je = cn.getJournalEntry();
                        Set<JournalEntryDetail> jeDetails = je.getDetails();
                        for (JournalEntryDetail jed : jeDetails) {
                            String accName = "";
                            String accDesc = "";
                            String accCode = "";
                            double discount = 0;
                            double rowtaxamount = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;
                            if (jed.isDebit()) {
                                accCode = jed.getAccount().getAcccode() != null ? jed.getAccount().getAcccode() : "";
                                accName = jed.getAccount().getName() != null ? jed.getAccount().getName() : "";
                                accDesc = jed.getDescription() != null ? jed.getDescription() : "";
                                amount1 = jed.getAmount();
                                amount_with_discount = amount1 - discount;
                                amount_with_tax = amount_with_discount + rowtaxamount;
                                
//                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount_with_tax, currency.getCurrencyID(), jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount_with_tax, currency.getCurrencyID(), cn.getCreationDate(), jed.getJournalEntry().getExternalCurrencyRate());
                                double amountinbase = (Double) bAmt.getEntityList().get(0);
                                
                                TransactionPojo creditNoteTable = new TransactionPojo();
                                creditNoteTable.setTransactionDebitAmount(authHandler.formattedCommaSeparatedAmount(amountinbase, companyid));
                                creditNoteTable.setTransactionCreditAmount(authHandler.formattedCommaSeparatedAmount(0, companyid));
                                creditNoteTable.setTransactionAccName(accName);
                                creditNoteTable.setTransactionAccCode(accCode);
                                creditNoteTable.setTransactionNarration(accDesc);
                                creditNoteTable.setTransactionId(cn.getID());
                                creditNoteTable.setTransactionDate(entryDate);
                                creditNoteTable.setTransactionNumber(invno);
                                creditNoteTable.setPrintFlag(false);
                                creditNoteList.add(creditNoteTable);
                            }
                        }
                    } else {    //To show Particulars as An Opening in PDF when transaction is an opening type.
                        TransactionPojo creditNoteTable = new TransactionPojo();
                        creditNoteTable.setTransactionAccName("This is an Opening Credit Note");
                        creditNoteTable.setTransactionNarration(cn.getNarration());
                        creditNoteTable.setTransactionId(cn.getID());
                        creditNoteTable.setTransactionDate(entryDate);
                        creditNoteTable.setTransactionNumber(invno);
                        creditNoteTable.setPrintFlag(false);
                        creditNoteList.add(creditNoteTable);
                    }

                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, cn.getCnamount(), currency.getCurrencyID(), cn.getCreationDate(), cn.getExternalCurrencyRate());
                    double amountinbase = (Double) bAmt.getEntityList().get(0);
                    TransactionPojo creditNoteTable = new TransactionPojo();
                    creditNoteTable.setTransactionDebitAmount(authHandler.formattedCommaSeparatedAmount(0, companyid));
                    creditNoteTable.setTransactionCreditAmount(authHandler.formattedCommaSeparatedAmount(amountinbase, companyid));
                    creditNoteTable.setTransactionAccName(name);
                    creditNoteTable.setTransactionAccCode(code);
                    creditNoteTable.setTransactionNarration(memo);
                    creditNoteTable.setTransactionId(cn.getID());
                    creditNoteTable.setTransactionDate(entryDate);
                    creditNoteTable.setTransactionNumber(invno);
                    creditNoteTable.setPrintFlag(true);
                    creditNoteList.add(creditNoteTable);
                    total += amountinbase;
                } catch (Exception ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            creditNoteMap.put("currencyDescription", "Amount in " + currency.getName().toString());
            creditNoteMap.put("currencyCode", currency.getCurrencyCode().toString());
            creditNoteMap.put("TransactionDetails", new JRBeanCollectionDataSource(creditNoteList));

            creditNoteMap.put("companyname", companyname);
            creditNoteMap.put("companyaddress", companyaddress);
            creditNoteMap.put("companyphone", companyphone);
            creditNoteMap.put("companyfax", companyfax);
            creditNoteMap.put("companyemail", companyemail);

            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
//            Date end_Date = authHandler.getConstantDateFormatter(request).parse(request.getParameter("enddate"));
            Date end_Date = authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddate"));
            Calendar c = Calendar.getInstance();
            c.setTime(end_Date);
            c.add(Calendar.DATE, -1);   //Subtract 1 day.
            String endDate1 = userdf.format(c.getTime());
//            String startDate1 = userdf.format(authHandler.getConstantDateFormatter(request).parse(request.getParameter("startdate")));
            String startDate1 = userdf.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter("startdate")));

            String fiscalstart = userdf.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(userdf.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            String fiscalend = userdf.format(c1.getTime());

            creditNoteMap.put("startPeriod", fiscalstart);
            creditNoteMap.put("endPeriod", fiscalend);
            creditNoteMap.put("rangeType", "Custom");
            creditNoteMap.put("fromDate", startDate1);
            creditNoteMap.put("toDate", endDate1);
            creditNoteMap.put("total", authHandler.formattedCommaSeparatedAmount(total, companyid));
            creditNoteMap.put("creditnoteFlag", true);
            creditNoteMap.put("title", "Credit Note Register - All");

            ArrayList datePojoList = new ArrayList();
            OnlyDatePojo datePojo = new OnlyDatePojo();
            Date date = new Date();
            datePojo.setDate(df.format(date));
            datePojoList.add(datePojo);

            try{
            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneDebitCreditNoteJasperMainreport.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);

            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneCreditNoteJasperSubreport.jrxml");
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

            creditNoteMap.put("SubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, creditNoteMap, beanColDataSource);
            list.add(jasperPrint);
            } catch(Exception e){
                Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
            }
        }
        return list;
    }
    
    @Override
    public List<Object> exportDebitNoteJasperReportForMonzone(HttpServletRequest request, HttpServletResponse response, List entityList) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        double total = 0;

        Map<String, Object> creditNoteMap = new HashMap<String, Object>();
        JasperPrint jasperPrint = null;
        JasperReport jasperReport = null;
        InputStream inputStream = null;
        ArrayList<TransactionPojo> creditNoteList = new ArrayList<TransactionPojo>();

        KWLCurrency currency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));        
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        String companyid = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject compaccresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
        CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compaccresult.getEntityList().get(0);
        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
        Company company = (Company) cmpresult.getEntityList().get(0);
        String companyname = company.getCompanyName() != null ? company.getCompanyName() : "";
        String companyaddress = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
        String companyemail = company.getEmailID() != null ? company.getEmailID() : "";
        String companyfax = company.getFaxNumber() != null ? company.getFaxNumber() : "";
        String companyphone = company.getPhoneNumber() != null ? company.getPhoneNumber() : "";
        KwlReturnObject bAmt = null;
        
        if (entityList.size() != 0) {
            for (Object s : entityList) {
                billid = ((Object[])s)[1].toString();

                try {
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    DateFormat dateFormat = (DateFormat) requestParams.get("df");
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Credit_Note_ModuleId));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;

                    HashMap<String, Object> cnRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("creditNote.ID");
                    order_by.add("srno");
                    order_type.add("asc");
                    cnRequestParams.put("filter_names", filter_names);
                    cnRequestParams.put("filter_params", filter_params);
                    cnRequestParams.put("order_by", order_by);
                    cnRequestParams.put("order_type", order_type);
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), billid);
                    DebitNote cn = (DebitNote) result1.getEntityList().get(0);
                    boolean isOpeningBalanceTransaction = cn.isIsOpeningBalenceDN();
                    entry = cn.getJournalEntry();
                    List<String> dimensionList = new ArrayList<String>();
                    if (entry != null) {
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add(Constants.companyKey);
                        Detailfilter_params.add(cn.getCompany().getCompanyID());
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(cn.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(Constants.Acc_Credit_Note_ModuleId + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                            Date dateFromDB=null;
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        dimensionList.add(fieldComboData.getValue() != null ? varEntry.getKey().split("_")[1] + "&nbsp;&nbsp;:" + fieldComboData.getValue() : "");
                                    }
                                } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                    DateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                                    try {
                                        dateFromDB = defaultDateFormat.parse(coldata);
                                        coldata = sdf.format(dateFromDB);
                                    } catch (Exception e) {
                                    }
                                    dimensionList.add(varEntry.getKey().split("_")[1] + "&nbsp;&nbsp;:" + coldata);
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        dimensionList.add(varEntry.getKey().split("_")[1] + "&nbsp;&nbsp;:" + coldata);
                                    }
                                }
                            }
                        }
                    }

                    String invno = cn.getDebitNoteNumber();
//                    String entryDate = df.format(cn.getJournalEntry() != null ? cn.getJournalEntry().getEntryDate() : cn.getCreationDate());
                    String entryDate = df.format(cn.getCreationDate());
                    String code = "", name = "", phone = "", address = "", fax = "", memo = "", dncurrency = "";
                    
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true); //true to get billing address
                    if (cn.getCustomer() != null) {	//CN For Customer
                        code = (cn.getCustomer().getAcccode() != null ? cn.getCustomer().getAcccode() : "");
                        name = (cn.getCustomer().getName() != null ? cn.getCustomer().getName() : "");
                        phone = (cn.getCustomer().getContactNumber() != null ? cn.getCustomer().getContactNumber() : "");
                        addressParams.put("customerid", cn.getCustomer().getID());
                        address = (cn.getCustomer() != null ? accountingHandlerDAOobj.getCustomerAddress(addressParams).replaceAll("\n", "<br>") : cn.getCustomer().getBillingAddress() != null ? cn.getCustomer().getBillingAddress().replaceAll("\n", "<br>") : "");
                        fax = (cn.getCustomer().getFax() != null ? cn.getCustomer().getFax() : "");
                        memo = (cn.getMemo() != null ? cn.getMemo() : "");
                        dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                    }
                    if (cn.getVendor() != null) {   //CN For Vendor
                        code = (cn.getVendor().getAcccode() != null ? cn.getVendor().getAcccode() : "");
                        name = (cn.getVendor().getName() != null ? cn.getVendor().getName() : "");
                        phone = (cn.getVendor().getContactNumber() != null ? cn.getVendor().getContactNumber() : "");
                        addressParams.put("vendorid", cn.getVendor().getID());
                        address = (cn.getVendor() != null ? accountingHandlerDAOobj.getVendorAddress(addressParams).replaceAll("\n", "<br>") : cn.getVendor().getAddress() != null ? cn.getVendor().getAddress().replaceAll("\n", "<br>") : "");
                        fax = (cn.getVendor().getFax() != null ? cn.getVendor().getFax() : "");
                        memo = (cn.getMemo() != null ? cn.getMemo() : "");
                        dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                    }
                    
                    if (!isOpeningBalanceTransaction) { //To show Particulars Detail in PDF when transaction is a non-opening type. 
                        JournalEntry je = cn.getJournalEntry();
                        Set<JournalEntryDetail> jeDetails = je.getDetails();
                        for (JournalEntryDetail jed : jeDetails) {
                            String accName = "";
                            String accDesc = "";
                            String accCode = "";

                            double discount = 0;
                            double rowtaxamount = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;

                            if (!jed.isDebit()) {
                                accCode = jed.getAccount().getAcccode() != null ? jed.getAccount().getAcccode() : "";
                                accName = jed.getAccount().getName() != null ? jed.getAccount().getName() : "";
                                accDesc = jed.getDescription() != null ? jed.getDescription() : "";
                                amount1 = jed.getAmount();
                                amount_with_discount = amount1 - discount;
                                amount_with_tax = amount_with_discount + rowtaxamount;
                                
//                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount_with_tax, currency.getCurrencyID(), jed.getJournalEntry().getEntryDate(), jed.getJournalEntry().getExternalCurrencyRate());
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount_with_tax, currency.getCurrencyID(), cn.getCreationDate(), jed.getJournalEntry().getExternalCurrencyRate());
                                double amountinbase = (Double) bAmt.getEntityList().get(0);
                                
                                TransactionPojo creditNoteTable = new TransactionPojo();
                                creditNoteTable.setTransactionCreditAmount(authHandler.formattedCommaSeparatedAmount(amountinbase, companyid));
                                creditNoteTable.setTransactionDebitAmount("");
                                creditNoteTable.setTransactionAccName(accName);
                                creditNoteTable.setTransactionAccCode(accCode);
                                creditNoteTable.setTransactionNarration(accDesc);
                                creditNoteTable.setTransactionId(cn.getID());
                                creditNoteTable.setTransactionDate(entryDate);
                                creditNoteTable.setTransactionNumber(invno);
                                creditNoteTable.setPrintFlag(true);
                                creditNoteList.add(creditNoteTable);
                            }
                        }
                    } else {    //To show Particulars as An Opening in PDF when transaction is an opening type.
                        TransactionPojo creditNoteTable = new TransactionPojo();
                        creditNoteTable.setTransactionAccName("This is an Opening Credit Note");
                        creditNoteTable.setTransactionNarration(cn.getNarration());
                        creditNoteTable.setTransactionId(cn.getID());
                        creditNoteTable.setTransactionDate(entryDate);
                        creditNoteTable.setTransactionNumber(invno);
                        creditNoteTable.setPrintFlag(true);
                        creditNoteList.add(creditNoteTable);
                    }

                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, cn.getDnamount(), currency.getCurrencyID(), cn.getCreationDate(), cn.getExternalCurrencyRate());
                    double amountinbase = (Double) bAmt.getEntityList().get(0);
                    TransactionPojo creditNoteTable = new TransactionPojo();
                    creditNoteTable.setTransactionCreditAmount("");
                    creditNoteTable.setTransactionDebitAmount(authHandler.formattedCommaSeparatedAmount(amountinbase, companyid));
                    creditNoteTable.setTransactionAccName(name);
                    creditNoteTable.setTransactionAccCode(code);
                    creditNoteTable.setTransactionNarration(memo);
                    creditNoteTable.setTransactionId(cn.getID());
                    creditNoteTable.setTransactionDate(entryDate);
                    creditNoteTable.setTransactionNumber(invno);
                    creditNoteTable.setPrintFlag(false);
                    creditNoteTable.setTransactionTotal(authHandler.formattedCommaSeparatedAmount(amountinbase, companyid));
                    creditNoteTable.setTransactionCurrencyCode(currency.getCurrencyCode().toString());
                    creditNoteList.add(creditNoteTable);
                    total += amountinbase;
                } catch (Exception ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            creditNoteMap.put("currencyDescription", "Amount in " + currency.getName().toString());
            creditNoteMap.put("currencyCode", currency.getCurrencyCode().toString());
            creditNoteMap.put("TransactionDetails", new JRBeanCollectionDataSource(creditNoteList));

            creditNoteMap.put("companyname", companyname);
            creditNoteMap.put("companyaddress", companyaddress);
            creditNoteMap.put("companyphone", companyphone);
            creditNoteMap.put("companyfax", companyfax);
            creditNoteMap.put("companyemail", companyemail);

            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
//            Date end_Date = authHandler.getConstantDateFormatter(request).parse(request.getParameter("enddate"));	//ERP-8442
            Date end_Date = authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddate"));
            Calendar c = Calendar.getInstance();
            c.setTime(end_Date);
            c.add(Calendar.DATE, -1);   //Subtract 1 day.
            String endDate1 = userdf.format(c.getTime());
//            String startDate1 = userdf.format(authHandler.getConstantDateFormatter(request).parse(request.getParameter("startdate")));
            String startDate1 = userdf.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter("startdate")));

            String fiscalstart = userdf.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(userdf.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            String fiscalend = userdf.format(c1.getTime());

            creditNoteMap.put("startPeriod", fiscalstart);
            creditNoteMap.put("endPeriod", fiscalend);
            creditNoteMap.put("rangeType", "Custom");
            creditNoteMap.put("fromDate", startDate1);
            creditNoteMap.put("toDate", endDate1);
            creditNoteMap.put("total", authHandler.formattedCommaSeparatedAmount(total, companyid));
            creditNoteMap.put("creditnoteFlag", false);
            creditNoteMap.put("title", "Debit Note Register");

            ArrayList datePojoList = new ArrayList();
            OnlyDatePojo datePojo = new OnlyDatePojo();
            Date date = new Date();
            datePojo.setDate(df.format(date));
            datePojoList.add(datePojo);

            try{
            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneDebitCreditNoteJasperMainreport.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);

            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneDebitNoteJasperSubreport.jrxml");
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

            creditNoteMap.put("SubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, creditNoteMap, beanColDataSource);
            list.add(jasperPrint);
            } catch(Exception e){
                Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
            }
        }
        return list;
    }
    
@Override
    public List<Object> exportMonzonePuchaseOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int templateflag =  Integer.parseInt(request.getParameter("templateflag")); 
       double discountTotal = 0;
        
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<LabelValue> labelValueList = new ArrayList<LabelValue>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();
                    
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                    int type = 0;
                   
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";
                    
                    HashMap<String, Object> requestParams = accPurchaseOrderServiceDAOobj.getPurchaseOrderMap(request);
                    requestParams.put("billId", invoiceID);
                    requestParams.put("bills", invoiceID.split(","));
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put("isForReport", true);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("dateFormatValue", authHandler.getDateOnlyFormat(request));
                    requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));

                    KwlReturnObject invoiceResult = accPurchaseOrderobj.getPurchaseOrdersMerged(requestParams);
                    DataJArr = accPurchaseOrderServiceDAOobj.getPurchaseOrdersJsonMerged(requestParams, invoiceResult.getEntityList(), DataJArr);
                    requestParams.put("closeflag", null);
                    DataJArrRows = accPurchaseOrderServiceDAOobj.getPurchaseOrderRows(requestParams);

                    String tempLinkTo = "";
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                         tempLinkTo = jobj.optInt("linktype", -1)==2? jobj.optString("linkto", ""):"";
                        
                        invRows.setSrNo(""+(i+1));
                        invRows.setCode(jobj.optString("pid", ""));
                        invRows.setDesc(jobj.optString("desc", "").replaceAll("\n","<br>"));
                        invRows.setUom(jobj.optString("uomname", ""));
                        invRows.setQty(authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                        invRows.setRate(authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        invRows.setTotal(authHandler.formattedCommaSeparatedAmount(((jobj.optDouble("quantity", 0)*jobj.optDouble("rate", 0))+jobj.optDouble("rowTaxAmount", 0)), companyid));
                        invRows.setAmountCurrency( jobj.optString("currencysymbol",""));
                        if(!jobj.optBoolean("discountispercent",false)){                            
                         discountTotal+= (jobj.optDouble("rate", 0) * (jobj.optDouble("prdiscount",0) / 100)) ;
                        }else{
                         discountTotal+=  jobj.optDouble("prdiscount",0);
                        }
                        invDetailsList.add(invRows);
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                    JSONObject obj = DataJArr.getJSONObject(0);
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String imagepath2 = StorageHandler.GetDocStorePath() + companyid + "_footer"+ FileUploadHandler.getCompanyImageExt();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                   
                    InputStream inputStream = null;
                     
                    LabelValue LabelObj = new LabelValue();
                    LabelObj.setLabel("<b>Total Before Tax</b>");
                    LabelObj.setExtravalue("");
                    LabelObj.setValue("<b>"+authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0) - obj.optDouble("taxamount", 0)+discountTotal), companyid)+"</b>");
                    labelValueList.add(LabelObj);
                    if(discountTotal!=0){
                    LabelObj = new LabelValue();
                    LabelObj.setLabel("<b>Discount</b>");
                    LabelObj.setExtravalue("");
                    LabelObj.setValue(discountTotal!=0?"<b>("+authHandler.formattedCommaSeparatedAmount(discountTotal, companyid)+")</b>":"<b>"+authHandler.formattedCommaSeparatedAmount(discountTotal, companyid)+"</b>");
                    labelValueList.add(LabelObj);
                    }
                    LabelObj = new LabelValue();
                    LabelObj.setLabel(StringUtil.isNullOrEmpty(obj.optString("taxname",""))?"GST":"GST "+obj.optString("taxname",""));
                    LabelObj.setExtravalue((obj.optDouble("taxpercent", 0)) == 0 ? "" : " "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid));
                    LabelObj.setValue(authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    labelValueList.add(LabelObj);
                     
                    invoiceMap.put("AmountTableData", new JRBeanCollectionDataSource(labelValueList));
                    invoiceMap.put("Your_Po_Ref_No", tempLinkTo);
                    invoiceMap.put("Memo", obj.optString("memo", ""));
                    invoiceMap.put("Accont_No", obj.optString("personcode", ""));
                    invoiceMap.put("Contact_Person", obj.optString("billingContactPerson", ""));
                    invoiceMap.put("Technician", obj.optString("Custom_Technician", ""));
                    invoiceMap.put("Vehicle_NO", obj.optString("Custom_Vehicle No", ""));
                    invoiceMap.put("Bill_To_ADDRESS", obj.optString("billtoaddress", ""));
                    invoiceMap.put("Ship_To__ADDRESS", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("Document_NO", obj.optString("billno", ""));
                    invoiceMap.put("PAYMENT_TERMS", (obj.optString("termName", "")));
                    invoiceMap.put("GST_AMOUNT", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("GST_PERCENT", (obj.optDouble("taxpercent", 0)) == 0 ? "" : " "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid) + "%");
                    invoiceMap.put("CURRENCY", obj.optString("currencycode", ""));
                    invoiceMap.put("TOTAL_AMOUNT", authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                    invoiceMap.put("TOTAL_AMOUNT_LABEL","Total Order Amount");
                    invoiceMap.put("SUBTOTAL", authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0) - obj.optDouble("taxamount", 0)+discountTotal), companyid));
                    invoiceMap.put("Amount_In_Words", obj.optString("amountInWodrs", "")+" Only.");
                    invoiceMap.put("personname", obj.optString("personname", ""));
                    invoiceMap.put("DOSRNumber", obj.optString("Custom_DO/SR NO", ""));
                    invoiceMap.put("TITLE", "PURCHASE ORDER");
                    invoiceMap.put("Total_Discount", authHandler.formattedCommaSeparatedAmount(discountTotal, companyid));
                    invoiceMap.put("isDeliveryOrder",true);
                    invoiceMap.put("posttext", obj.optString("posttext", ""));
                    String CompanyPDFPOSTTEXT ="";
                    KwlReturnObject templateConfig = accCommonTablesDAO.getPDFTemplateRow(companyid, Constants.Acc_Purchase_Order_ModuleId);
                    List<PdfTemplateConfig> templist = templateConfig.getEntityList();
                    if (!templist.isEmpty()) {
                        for (PdfTemplateConfig config : templist) {
                            CompanyPDFPOSTTEXT = config.getPdfPostText() == null ? "" : config.getPdfPostText();
                        }
                    }
                    invoiceMap.put("moduleposttext", obj.optString("posttext", "").equals("")?CompanyPDFPOSTTEXT:"");
                    
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + "PurchaseOrder_v1.pdf\"");
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzonePurchaseOrderJasper.jrxml");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }

@Override
    public List<Object> exportMonzoneTaxInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int templateflag =  Integer.parseInt(request.getParameter("templateflag")); 
       double discountTotal = 0;
        
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<LabelValue> labelValueList = new ArrayList<LabelValue>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();
                 
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                    int type = 0;
                   
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";
                    
                    HashMap<String, Object> requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
                    requestParams.put(Constants.billid, invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("CashAndInvoice", true);

                    KwlReturnObject invoiceResult = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                    DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, invoiceResult.getEntityList(), DataJArr);
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                    HashMap<String, Object> genericDataMap = new HashMap<String, Object>();
                    DataJArrRows = accInvoiceServiceDAO.getInvoiceRows(paramJobj, null,genericDataMap);
                  
                    String tempLinkTo = "";
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                         tempLinkTo = jobj.optInt("linktype", -1)==2? jobj.optString("linkto", ""):"";
                        
                        invRows.setSrNo(""+(i+1));
                        invRows.setCode(jobj.optString("pid", ""));
                        invRows.setDesc(jobj.optString("desc", "").replaceAll("\n","<br>"));
                        invRows.setUom("");
                        invRows.setQty(authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                        invRows.setRate(authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        invRows.setTotal(authHandler.formattedCommaSeparatedAmount(((jobj.optDouble("quantity", 0)*jobj.optDouble("rate", 0))), companyid));
                        invRows.setAmountCurrency( jobj.optString("currencysymbol",""));
                        if(!jobj.optBoolean("discountispercent",true)){                            
                        discountTotal+= (jobj.optDouble("rate", 0) * (jobj.optDouble("prdiscount",0) / 100)) ;
                        }else{
                        discountTotal+=  jobj.optDouble("prdiscount",0);
                        }
                        
                        invDetailsList.add(invRows);
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                    JSONObject obj = DataJArr.getJSONObject(0);
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String imagepath2 = StorageHandler.GetDocStorePath() + companyid + "_footer"+ FileUploadHandler.getCompanyImageExt();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                   
                    InputStream inputStream = null;
                    
                       
                    invoiceMap.put("Your_Po_Ref_No", tempLinkTo);
                    invoiceMap.put("Memo", obj.optString("memo", ""));
                    invoiceMap.put("Accont_No", obj.optString("customercode", ""));
                    invoiceMap.put("Contact_Person", obj.optString("billingContactPerson", ""));
                    invoiceMap.put("Technician", obj.optString("Custom_Technician", ""));
                    invoiceMap.put("DOSRNumber", obj.optString("Custom_D.O./SR.NO", ""));
                    invoiceMap.put("Vehicle_NO", obj.optString("Custom_Vehicle No", ""));
                    invoiceMap.put("personname", obj.optString("personname", ""));
                    invoiceMap.put("Bill_To_ADDRESS", obj.optString("billtoaddress", ""));
                    invoiceMap.put("Ship_To__ADDRESS", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("Document_NO", obj.optString("billno", ""));
                    invoiceMap.put("PAYMENT_TERMS", (obj.optString("termName", "")));
                    invoiceMap.put("GST_AMOUNT", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("GST_PERCENT", (obj.optDouble("taxpercent", 0)) == 0 ? "" : " "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid) + "%");
                    invoiceMap.put("TOTAL_AMOUNT",authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                    invoiceMap.put("TOTAL_AMOUNT_LABEL","Total Invoice Amount");
                    invoiceMap.put("SUBTOTAL", authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0) - obj.optDouble("taxamount", 0)+discountTotal), companyid));
                    invoiceMap.put("personname", obj.optString("personname", ""));
                    invoiceMap.put("Amount_In_Words", obj.optString("amountinWords", ""));
                    invoiceMap.put("TITLE", "TAX INVOICE");
                    invoiceMap.put("Total_Discount", authHandler.formattedCommaSeparatedAmount(discountTotal, companyid));
                    invoiceMap.put("isDeliveryOrder",true); 
                    
                    LabelValue LabelObj = new LabelValue();
                    LabelObj.setLabel("<b>Total Before Tax</b>");
                    LabelObj.setExtravalue("");
                    LabelObj.setValue("<b>"+authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0) - obj.optDouble("taxamount", 0)+discountTotal), companyid)+"</b>");
                    labelValueList.add(LabelObj);
                    LabelObj = new LabelValue();
                    LabelObj.setLabel(StringUtil.isNullOrEmpty(obj.optString("taxname",""))?"GST":obj.optString("taxname",""));
                    LabelObj.setExtravalue((obj.optDouble("taxpercent", 0)) == 0 ? "" : " "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid));
                    LabelObj.setValue(authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    labelValueList.add(LabelObj);
                    LabelObj = new LabelValue();
                    LabelObj.setLabel("Discount");
                    LabelObj.setExtravalue("");
                    LabelObj.setValue(discountTotal!=0?"("+authHandler.formattedCommaSeparatedAmount(discountTotal, companyid)+")":authHandler.formattedCommaSeparatedAmount(discountTotal, companyid));
                    labelValueList.add(LabelObj);
                     
                    invoiceMap.put("AmountTableData", new JRBeanCollectionDataSource(labelValueList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "TaxInvoice_v1.pdf");
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneTaxInvoiceJasper.jrxml");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
@Override
    public List<Object> exportMonzoneCustomerQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int type =  Integer.parseInt(request.getParameter("type")); 
        double discountTotal = 0;
        
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<LabelValue> labelValueList = new ArrayList<LabelValue>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();
                    
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONObject DataJObjRows = new JSONObject();
                    JSONArray DataJArrRows = new JSONArray();
                   
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                     HashMap<String, Object> requestParams = accSalesOrderServiceDAOobj.getSalesOrdersMap(request);
                    requestParams.put("billId", invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("dataFormatValue", authHandler.getDateOnlyFormat(request));
                    requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));
                    if (StringUtil.isNullOrEmpty(request.getParameter("archieve"))) {
                        requestParams.put("archieve", 0);
                    } else {
                        requestParams.put("archieve", Integer.parseInt(request.getParameter("archieve")));
                    }
                    requestParams.put("closeflag", null);
                    requestParams.put("sopolinkflag", null);
                    requestParams.put("linkFlagInSO", null);
                    requestParams.put("linkFlagInInv", null);
                    requestParams.put("dtype",request.getParameter("dtype"));
                    boolean isOrder = false;
                    String isorder = request.getParameter("isOrder");
                    if (!StringUtil.isNullOrEmpty(isorder) && StringUtil.equal(isorder, "true")) {
                        isOrder = true;
                    }
                    requestParams.put("isOrder", isOrder);
                    requestParams.put("userId", sessionHandlerImpl.getUserid(request));
                    KwlReturnObject invoiceResult = accSalesOrderDAOobj.getQuotations(requestParams);
                    DataJArr = accSalesOrderServiceDAOobj.getQuotationsJson(requestParams, invoiceResult.getEntityList(), DataJArr);
                    requestParams.put("bills", invoiceID);
                    DataJObjRows = accSalesOrderServiceDAOobj.getQuotationRows(requestParams);
                     String tempLinkTo = "";
                    if(DataJObjRows.length()>0){
                        DataJArrRows=DataJObjRows.getJSONArray("data");
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                         tempLinkTo = jobj.optInt("linktype", -1)==2? jobj.optString("linkto", ""):"";
                        
                        invRows.setSrNo(""+(i+1));
                        invRows.setCode(jobj.optString("pid", ""));
                        invRows.setDesc(jobj.optString("desc", "").replaceAll("\n","<br>"));
                        invRows.setUom(jobj.optString("uomname", ""));
                        invRows.setQty(authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                        invRows.setRate(authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        invRows.setTotal(authHandler.formattedCommaSeparatedAmount(((jobj.optDouble("quantity", 0)*jobj.optDouble("rate", 0))+jobj.optDouble("rowTaxAmount", 0)), companyid));
                        invRows.setAmountCurrency( jobj.optString("currencysymbol",""));
                        if(!jobj.optBoolean("discountispercent",false)){                            
                        discountTotal+= (jobj.optDouble("rate", 0) * (jobj.optDouble("prdiscount",0) / 100)) ;
                        }else{
                        discountTotal+=  jobj.optDouble("prdiscount",0);
                        }
                        invDetailsList.add(invRows);
                    }
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                    JSONObject obj = DataJArr.getJSONObject(0);
                    
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                   
                    InputStream inputStream = null;
                    invoiceMap.put("Your_Po_Ref_No", "");
                    invoiceMap.put("Memo", obj.optString("memo", ""));
                    invoiceMap.put("Accont_No", obj.optString("personcode", ""));
                    invoiceMap.put("Contact_Person", obj.optString("billingContactPerson", ""));
                    invoiceMap.put("Technician", obj.optString("Custom_Technician", ""));
                    invoiceMap.put("DOSRNumber", obj.optString("Custom_DO/SR NO", ""));
                    invoiceMap.put("Vehicle_NO", obj.optString("Custom_Vehicle No", ""));
                    invoiceMap.put("personname", obj.optString("personname", ""));
                    invoiceMap.put("Bill_To_ADDRESS",obj.optString("billtoaddress", ""));
                    invoiceMap.put("Ship_To__ADDRESS", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("Document_NO", obj.optString("billno", ""));
                    invoiceMap.put("PAYMENT_TERMS", (obj.optString("termName", "")));
                    invoiceMap.put("GST_AMOUNT", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("GST_PERCENT", (obj.optDouble("taxpercent", 0)) == 0 ? "" : " "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid) + "%");
                    invoiceMap.put("personname", obj.optString("personname", ""));
                    invoiceMap.put("CURRENCY", obj.optString("currencycode", ""));
                    invoiceMap.put("TOTAL_AMOUNT", authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                    invoiceMap.put("TOTAL_AMOUNT_LABEL","Total Invoice Amount");
                    invoiceMap.put("SUBTOTAL", authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0) - obj.optDouble("taxamount", 0)+discountTotal), companyid));
                    invoiceMap.put("Amount_In_Words",  obj.optString("amountinWords", ""));
                    invoiceMap.put("Total_Discount", authHandler.formattedCommaSeparatedAmount(discountTotal, companyid));
                    invoiceMap.put("isDeliveryOrder",true);
                    invoiceMap.put("TITLE", "QUOTATION");
                    invoiceMap.put("posttext", obj.optString("posttext", ""));
                    
                    String CompanyPDFPOSTTEXT ="";
                    KwlReturnObject templateConfig = accCommonTablesDAO.getPDFTemplateRow(companyid, Constants.Acc_Customer_Quotation_ModuleId);
                    List<PdfTemplateConfig> templist = templateConfig.getEntityList();
                    if (!templist.isEmpty()) {
                        for (PdfTemplateConfig config : templist) {
                            CompanyPDFPOSTTEXT = config.getPdfPostText() == null ? "" : config.getPdfPostText();
                        }
                    }
                    invoiceMap.put("moduleposttext", obj.optString("posttext", "").equals("")?CompanyPDFPOSTTEXT:"");

                    LabelValue LabelObj = new LabelValue();
                    LabelObj.setLabel("<b>Total Before Tax</b>");
                    LabelObj.setExtravalue("");
                    LabelObj.setValue("<b>"+authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0) - obj.optDouble("taxamount", 0)+discountTotal), companyid)+"</b>");
                    labelValueList.add(LabelObj);
                    LabelObj = new LabelValue();
                    LabelObj.setLabel("<b>Discount</b>");
                    LabelObj.setExtravalue("");
                    LabelObj.setValue("<b>"+(discountTotal!=0?"("+authHandler.formattedCommaSeparatedAmount(discountTotal, companyid)+")":authHandler.formattedCommaSeparatedAmount(discountTotal, companyid))+"</b>");
                    labelValueList.add(LabelObj);
                    LabelObj = new LabelValue();
                    LabelObj.setLabel("GST"+" "+obj.optString("taxname",""));
                    LabelObj.setExtravalue((obj.optDouble("taxpercent", 0)) == 0 ? "" : " "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid));
                    LabelObj.setValue(authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    labelValueList.add(LabelObj);
                    
                    invoiceMap.put("AmountTableData", new JRBeanCollectionDataSource(labelValueList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "QUOTATION_v1.pdf");
                    if(type==1){
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzonePurchaseOrderJasper.jrxml");
                    }else{
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzonePurchaseOrderJasperEpson.jrxml");
                    }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }

@Override
    public List<Object> exportKimCheyInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int type =  request.getParameter("type") != null ? Integer.parseInt(request.getParameter("type")) : 0;
        
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();
                    
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    
                    HashMap<String, Object> requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
                    requestParams.put(Constants.billid, invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("CashAndInvoice", true);

                    KwlReturnObject invoiceResult = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                    DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, invoiceResult.getEntityList(), DataJArr);
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                    HashMap<String, Object> genericDataMap = new HashMap<String, Object>();
                    DataJArrRows = accInvoiceServiceDAO.getInvoiceRows(paramJobj, null,genericDataMap);
                  
                    String tempLinkTo = "";
                    for (int i = 0; i < DataJArrRows.length(); i++) { 
                        double rowDiscount = 0;
                        
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                         tempLinkTo = jobj.optInt("linktype", -1)==2? jobj.optString("linkto", ""):"";
                        invRows.setCustom1( jobj.optInt("linktype", -1)==1? jobj.optString("linkto", ""):"");
                        invRows.setSrNo(""+(i+1));
                        invRows.setCode(jobj.optString("pid", ""));
                        invRows.setDesc(jobj.optString("desc", ""));
                        invRows.setUom(jobj.optString("uomname", ""));
                        invRows.setQty(authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                        if (!jobj.optBoolean("discountispercent", false)) {
                            invRows.setCustom2(authHandler.formattedAmount(jobj.optDouble("prdiscount", 0), companyid));
                            rowDiscount += ((jobj.optDouble("rate", 0) * (jobj.optDouble("prdiscount", 0) / 100))) * jobj.optDouble("quantity", 0);
                        } else {
                            invRows.setCustom2("");
                            rowDiscount += jobj.optDouble("prdiscount", 0) * jobj.optDouble("quantity", 0);
                        }
                        invRows.setRate(authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        invRows.setTotal(authHandler.formattedCommaSeparatedAmount(((jobj.optDouble("quantity", 0)*jobj.optDouble("rate", 0))+jobj.optDouble("rowTaxAmount", 0)-rowDiscount), companyid));
                        invRows.setAmountCurrency( jobj.optString("currencysymbol",""));
                        invDetailsList.add(invRows);
                    }
                    JSONObject obj = DataJArr.getJSONObject(0);
                    InputStream inputStream = null;
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                    invoiceMap.put("DocNumber", obj.optString("billno", ""));
                    invoiceMap.put("billto", obj.optString("personname", "") + "\n" + obj.optString("billtoaddress", ""));
                    invoiceMap.put("shipto", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("date", obj.optString("dateinuserformat", ""));
                    invoiceMap.put("Remarks", obj.optString("memo", ""));
                    invoiceMap.put("SalesPerson", obj.optString("salespersonname"));
                    invoiceMap.put("CustID", obj.optString("customercode", ""));
                    invoiceMap.put("YourRefNo",obj.optString("Custom_Reference No", " ")); 
                    invoiceMap.put("PoNumber",obj.optString("porefno"));
                    invoiceMap.put("OrderedBy", obj.optString("createdby", ""));
                    invoiceMap.put("Terms", (obj.optString("termname", "")));
                    invoiceMap.put("TotalAmount", obj.optString("currencycode", "") + " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                    invoiceMap.put("GSTAmount", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("SubTotal", authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0) - obj.optDouble("taxamount", 0), companyid));
                    String imagepath1 = StorageHandler.GetDocStorePath() + companyid + "_logoWithText" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("Logo", imagepath1);
                    response.setHeader("Content-Disposition", "attachment;filename=" + "TaxInvoice_v1.pdf");
                    if (obj.optBoolean("cashtransaction", false)) {
                        invoiceMap.put("currencycode", obj.optString("currencycode", ""));
                        invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                        invoiceMap.put("TotalAmount", authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                        String jrxmlFile = "/KimCheyCashSalesInvoice.jrxml";//Portrait A4 Size design
                        if(type == 1)// Type ==1 if Landscape
                        { 
                             jrxmlFile = "/KimCheyCashSalesInvoiceLandsacpe.jrxml";// Landsacpe Letter Design 
                        }
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + jrxmlFile);
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    } else {
                        if(type==2){
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/KimCheyTaxInvoiceGrid.jrxml");
                        }else{
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/KimCheyTaxInvoice.jrxml");
                        }
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(invDetailsList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    }
                      list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
@Override
 public List<Object> exportKimCheyDeliveryOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();

                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    String filename = "";

                    HashMap fieldMap = new HashMap();
                    boolean isFixedAsset = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isFixedAsset));
                    boolean isConsignment = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isConsignment));
                    boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isLeaseFixedAsset))) ? Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset)) : false;
                    Map reqParam = new HashMap();
                    reqParam.put("companyid", companyid);
                    reqParam.put("isFixedAsset", isFixedAsset);
                    reqParam.put("isConsignment", isConsignment);
                    reqParam.put("isLeaseFixedAsset", isLeaseFixedAsset);
                    fieldMap = accInvoiceServiceDAO.getDODetailsCustomFieldMap(reqParam);
                    
                    HashMap<String, Object> requestParams = accInvoiceServiceDAO.getDeliveryOrdersMap(request);
                    requestParams.put(Constants.billid, invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("CashAndInvoice", true);

                    KwlReturnObject doResult = accInvoiceDAOobj.getDeliveryOrdersMerged(requestParams);
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                    DataJArr = accInvoiceServiceDAO.getDeliveryOrdersJsonMerged(paramJobj, doResult.getEntityList());
//                    DataJArr = accInvoiceServiceDAO.getDeliveryOrdersJsonMerged(request, doResult.getEntityList());
                    JSONObject dOrows = accInvoiceServiceDAO.getDeliveryOrderRows(request,fieldMap);
                    DataJArrRows=dOrows.getJSONArray("data");
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                        invRows.setSrNo((i+1)+"");
                        invRows.setCode(jobj.optString("pid",""));
                        invRows.setDesc(jobj.optString("desc", ""));
                        invRows.setUom(jobj.optString("unitname", ""));
                        invRows.setQty(authHandler.formattingDecimalForQuantity(jobj.optDouble("quantity", 0), companyid));
                        invDetailsList.add(invRows);
                    }
                  

                    JSONObject obj = DataJArr.getJSONObject(0);
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String imagepath1 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                    
                    invoiceMap.put("DocNumber", obj.optString("billno", ""));
                    invoiceMap.put("billto",obj.optString("personname", "") + "\n" + obj.optString("billtoaddress", ""));
                    invoiceMap.put("shipto", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("date", obj.optString("dateinuserformat", ""));
                    invoiceMap.put("Remarks", obj.optString("memo", ""));
                    invoiceMap.put("SalesPerson", obj.optString("mapSalesPersonName"));
                    invoiceMap.put("CustID", obj.optString("customercode", ""));
                    invoiceMap.put("YourRefNo", obj.optString("Custom_Reference No", " "));
                    invoiceMap.put("PoNumber", obj.optString("Custom_PO Number", ""));
                    invoiceMap.put("OrderedBy", obj.optString("createdby", ""));
                    invoiceMap.put("Logo", imagepath);
                    invoiceMap.put("Terms", (obj.optString("termname", "")));
                    invoiceMap.put("TextImage", imagepath1);
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                   
                    InputStream inputStream = null;
                    filename = "DeliveryOrder_" + obj.optString("billno", "") + ".pdf";
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/KimCheyDeliveryOrder.jrxml");

                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }

    @Override
    public List<Object> exportSalesInvoiceRegisterReport(HttpServletRequest request, HttpServletResponse response,JSONArray tempArray) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportSalesInvoiceRegisterSummaryReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
@Override
 public List<Object> exportMonzoneDeliveryOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    ArrayList<LabelValue> labelValueList = new ArrayList<LabelValue>();
                    ArrayList<JasperProductTable> invDetailsList = new ArrayList<JasperProductTable>();

                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    HashMap fieldMap = new HashMap();
                    boolean isFixedAsset = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isFixedAsset));
                    boolean isConsignment = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isConsignment));
                    boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isLeaseFixedAsset))) ? Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset)) : false;
                    Map reqParam = new HashMap();
                    reqParam.put("companyid", companyid);
                    reqParam.put("isFixedAsset", isFixedAsset);
                    reqParam.put("isConsignment", isConsignment);
                    reqParam.put("isLeaseFixedAsset", isLeaseFixedAsset);
                    fieldMap = accInvoiceServiceDAO.getDODetailsCustomFieldMap(reqParam);
                    HashMap<String, Object> requestParams = accInvoiceServiceDAO.getDeliveryOrdersMap(request);
                    requestParams.put(Constants.billid, invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("CashAndInvoice", true);

                    KwlReturnObject doResult = accInvoiceDAOobj.getDeliveryOrdersMerged(requestParams);
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                    DataJArr = accInvoiceServiceDAO.getDeliveryOrdersJsonMerged(paramJobj, doResult.getEntityList());
//                    DataJArr = accInvoiceServiceDAO.getDeliveryOrdersJsonMerged(request, doResult.getEntityList());
                    JSONObject dOrows = accInvoiceServiceDAO.getDeliveryOrderRows(request,fieldMap);
                    DataJArrRows=dOrows.getJSONArray("data");
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        JasperProductTable invRows = new JasperProductTable();
                        invRows.setSrNo((i+1)+"");
                        invRows.setCode(jobj.optString("pid",""));
                        invRows.setDesc(jobj.optString("desc", "").replaceAll("\n","<br>"));
                        invRows.setUom(jobj.optString("unitname", ""));
                        invRows.setQty(authHandler.formattingDecimalForQuantity(jobj.optDouble("dquantity", 0), companyid));
                        invDetailsList.add(invRows);
                    }
                  

                    JSONObject obj = DataJArr.getJSONObject(0);
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                    
                    invoiceMap.put("Your_Po_Ref_No", "");
                    invoiceMap.put("Memo", obj.optString("memo", ""));
                    invoiceMap.put("Accont_No", obj.optString("customercode", ""));
                    invoiceMap.put("Contact_Person", obj.optString("billingContactPerson", ""));
                    invoiceMap.put("Technician", obj.optString("Custom_Technician", ""));
                    invoiceMap.put("DOSRNumber", obj.optString("Custom_D.O./SR.NO", ""));
                    invoiceMap.put("Vehicle_NO", obj.optString("Custom_Vehicle No", ""));
                    invoiceMap.put("personname", obj.optString("personname", ""));
                    invoiceMap.put("Bill_To_ADDRESS",obj.optString("billtoaddress", ""));
                    invoiceMap.put("Ship_To__ADDRESS", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("Document_NO", obj.optString("billno", ""));
                    invoiceMap.put("PAYMENT_TERMS", (obj.optString("termName", "")));
                    invoiceMap.put("GST_AMOUNT", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("GST_PERCENT", (obj.optDouble("taxpercent", 0)) == 0 ? "" : " "+authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxpercent", 0), companyid) + "%");
                    invoiceMap.put("personname", obj.optString("personname", ""));
                    invoiceMap.put("TOTAL_AMOUNT","");
                    invoiceMap.put("SUBTOTAL", "");
                    invoiceMap.put("Amount_In_Words","");
                    invoiceMap.put("Total_Discount", "");
                    invoiceMap.put("isDeliveryOrder",false);
                    
                    invoiceMap.put("TITLE", "DELIVERY ORDER");
                   
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                    InputStream inputStream = null;
                   
                    LabelValue LabelObj = new LabelValue();
                    LabelObj.setLabel("");
                    LabelObj.setExtravalue("");
                    LabelObj.setValue("");
                    labelValueList.add(LabelObj);
                    
                    invoiceMap.put("AmountTableData", new JRBeanCollectionDataSource(labelValueList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "DeliveryOrder_v1.pdf");
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneDeliveryOrderJasper.jrxml");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }

    @Override
    public List<Object> exportVendorInvoiceRegisterReport(HttpServletRequest request, HttpServletResponse response, JSONArray tempArray) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> salesInvoiceMap = new HashMap<String, Object>();
        SalesInvoiceRegisterSubReport salesinvoiceSubReport = null;
        List<SalesInvoiceRegisterSubReport> salesinvoiceSubReportsList = new ArrayList<SalesInvoiceRegisterSubReport>();
        String startDate = "", endDate = "";
        JSONArray DataJArr = new JSONArray();
        try {
            String companyname = "", companyaddress = "", companyphone = "", companyfax = "", companyemail = "";
            String startPeriod = "", endPeriod = "", rangeType = "", currencyname="", currencycode="";
            double basicamount =0;
            double taxamount =0;
            double discountamount =0;
            double totalamount =0;
            double termAmount = 0;
            double totalDiscount = 0;

            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject compaccresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compaccresult.getEntityList().get(0);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            companyname = company.getCompanyName() != null ? company.getCompanyName() : "";
            companyaddress = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
            companyemail = company.getEmailID() != null ? company.getEmailID() : "";
            companyfax = company.getFaxNumber() != null ? company.getFaxNumber() : "";
            companyphone = company.getPhoneNumber() != null ? company.getPhoneNumber() : "";
            currencyname = company.getCurrency().getName();
            currencycode = company.getCurrency().getCurrencyCode();

            //Calculate Accounting Period
            //DateFormat userdf = authHandler.getUserDateFormatter(request);
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            if (!StringUtil.isNullOrEmpty(request.getParameter("startdate")) && !StringUtil.isNullOrEmpty(request.getParameter("enddate"))) {
//                startDate = df.format(authHandler.getConstantDateFormatter(request).parse(request.getParameter("startdate")));
//                endDate = df.format(authHandler.getConstantDateFormatter(request).parse(request.getParameter("enddate")));    //ERP-8442
                startDate = userdf.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter("startdate")));
                endDate = userdf.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddate")));
            }            
            startPeriod = userdf.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(userdf.parse(startPeriod));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            endPeriod = userdf.format(c1.getTime());
            
             HashMap<String, Object> requestParams = accGoodsReceiptControllerCMN.getGoodsReceiptMap(request);
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            boolean ispendingpayment = request.getParameter("ispendingpayment")!=null?Boolean.parseBoolean(request.getParameter("ispendingpayment")):false;            
            String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids)!=null)?request.getParameter(Constants.companyids).split(","):sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey)!=null)?request.getParameter(Constants.globalCurrencyKey):sessionHandlerImpl.getCurrencyID(request);            
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter"));// 0 = Invoice Due date OR 1 = Invoice date
            boolean report = request.getParameter("report")!=null?Boolean.parseBoolean(request.getParameter("report")):false;
            boolean isAged = request.getParameter("isAged")!=null?Boolean.parseBoolean(request.getParameter("isAged")):false;
            requestParams.put("datefilter", datefilter);
            requestParams.put("report", report);
            boolean isOpeningBalanceInvoices = StringUtil.isNullOrEmpty(request.getParameter("isOpeningBalanceInvoices"))?false:Boolean.parseBoolean(request.getParameter("isOpeningBalanceInvoices"));        
            if(!StringUtil.isNullOrEmpty(request.getParameter("isOpeningBalanceInvoices"))){
                isOpeningBalanceInvoices = Boolean.parseBoolean(request.getParameter("isOpeningBalanceInvoices"));
            }
            requestParams.put("onlyExpensePI", request.getParameter("onlyExpensePI"));
            requestParams.put("isOpeningBalanceInvoices", request.getParameter("isOpeningBalanceInvoices"));
            requestParams.put("invoiceLinkedWithGRNStatus", request.getParameter("invoiceLinkedWithGRNStatus"));
            if(request.getParameter("getRepeateInvoice")!=null){
                requestParams.put("getRepeateInvoice",request.getParameter("getRepeateInvoice"));
            }
            
            if (request.getParameter("ccrAllRecords") != null) //All CC records flag
            {
                requestParams.put("ccrAllRecords", StringUtil.getBoolean(request.getParameter("ccrAllRecords")));
            }
            boolean isForTemplate = false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isForTemplate"))){
                isForTemplate = Boolean.parseBoolean(request.getParameter("isForTemplate"));
            }
             String dir = "";
            String sort = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))){
                dir = request.getParameter("dir");
                 sort = request.getParameter("sort");
                   requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            
            KwlReturnObject userResult = accountingHandlerDAOobj.getObject(User.class.getName(), sessionHandlerImpl.getUserid(request));
            User user = (User) userResult.getEntityList().get(0);
            if (!StringUtil.isNullOrEmpty(user.getDepartment())) {
                requestParams.put("userDepartment", user.getDepartment());
            }
            
            for(int cnt=0; cnt<companyids.length; cnt++) {
                companyid = companyids[cnt];                
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put("isForTemplate", isForTemplate);
                requestParams.put("custVendorID", request.getParameter("custVendorID"));
                boolean isBadDebtInvoices = false;
                if (!StringUtil.isNullOrEmpty(request.getParameter("isBadDebtInvoices"))) {// Changes For Malasian Company
                    isBadDebtInvoices = Boolean.parseBoolean(request.getParameter("isBadDebtInvoices"));
                    if (isBadDebtInvoices) {
//                        if (!StringUtil.isNullOrEmpty(request.getParameter("badDebtCalculationDate"))) {
                        int baddebttype = Integer.parseInt(request.getParameter("baddebttype"));
                        requestParams.put("isBadDebtInvoices", isBadDebtInvoices);
                        requestParams.put("baddebttype", baddebttype);
                        requestParams.put("selectedCriteriaDate", request.getParameter("selectedCriteriaDate"));
                        requestParams.put("badDebtCriteria", request.getParameter("badDebtCriteria"));
                        
                        if (baddebttype == 0) {
                            requestParams.put("badDebtCalculationDate", request.getParameter("badDebtCalculationDate"));
                            requestParams.put("badDebtCriteria", Integer.parseInt(request.getParameter("badDebtCriteria")));
                        } else {
                            requestParams.put("badDebtCalculationFromDate", request.getParameter("badDebtCalculationFromDate"));
                            requestParams.put("badDebtCalculationToDate", request.getParameter("badDebtCalculationToDate"));
                        }
                    }
                }
                
                if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.billid))) {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), request.getParameter(Constants.billid));
                    GoodsReceipt gr = (GoodsReceipt) result.getEntityList().get(0);
                    requestParams.put("isFixedAsset", gr.isFixedAssetInvoice());
                }
                
                KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptsMerged(requestParams);
                List list1 = result.getEntityList();

                DataJArr = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMerged(requestParams, list1, DataJArr, accountingHandlerDAOobj,  accCurrencyDAOobj,  accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
            
                for (int i = 0; i < DataJArr.length(); i++) {
                HashSet hs = new HashSet();
                String dono = "", doDate = "";
                JSONObject jobj = new JSONObject();
                jobj = DataJArr.getJSONObject(i);
                String billid = jobj.optString(Constants.billid, "");   //Invoice ID 
                String invoiceNumber = jobj.optString("billno", "");    //Invoice Number
                String customername = jobj.optString("personname", "");
                String customercode = jobj.optString("personcode", "");
                String creationDate = jobj.optString("date", "");
                String dueDate = jobj.optString("duedate", "");
                String docClass = jobj.optString("Custom_Document Class", "");
                String transactionCurrency = jobj.optString("currencycode", "");
                String agent = jobj.optString("agentname", "");
                String invCurrencySymbol = jobj.optString("currencysymbol", "");
                invCurrencySymbol = accCommonTablesDAO.getCustomCurrencySymbol(invCurrencySymbol, companyid);
                double invAmount = jobj.optDouble("amount", 0);
                double invAmountInBase = jobj.optDouble("amountinbase", 0);
                double termamountinBase = jobj.optDouble("termamountinBase", 0);
                double invTaxAmount = jobj.optDouble("taxamount", 0);
                double invTaxAmountInBase = jobj.optDouble("taxamountinbase", 0);
                /**
                 * FOR New GST (INDIA And US ) taxamountinbase column not saved.
                 * Code changes added but for Existing records no taxamountinbase,
                 * So Using Tax Amount  calculate taxamountinbase
                 */
                if (extraCompanyPreferences.isIsNewGST()) {
                    double externalCurrencyRate = jobj.optDouble("externalcurrencyrate", 0d);
                    String currencyid = jobj.optString("currencyid", "");
                    KwlReturnObject taxAmtObj = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invTaxAmount, currencyid, new Date(jobj.optString(InvoiceConstants.date, "")), externalCurrencyRate);
                    invTaxAmountInBase = (taxAmtObj != null && !taxAmtObj.getEntityList().isEmpty()) ? (Double) taxAmtObj.getEntityList().get(0) : invTaxAmount;
                }
                String[] invoices = {};
                invoices = billid.split(",");
                List<String> dolist = new ArrayList<String>();  //Contains Linked DO numbers.
                List<String> doDates = new ArrayList<String>();
                int srno = 1;
                JSONArray DataRowsArr = accGoodsReceiptCommon.getGoodsReceiptRows(request,invoices);
                jobj.put("DataRowsArr", DataRowsArr);
                for (int k = 0; k < DataRowsArr.length(); k++) {
                    JSONObject jobRow = new JSONObject();
                    jobRow = DataRowsArr.getJSONObject(k);
                    salesinvoiceSubReport = new SalesInvoiceRegisterSubReport();
                    List prodList = new ArrayList();
                    String productid = jobRow.optString("pid", "");
                    String description = jobRow.optString("productname", "");
                    double qty = jobRow.optDouble("quantity", 0);
                    String uom = jobRow.optString("uomname", "");
                    double rate = jobRow.optDouble("rate", 0);
                    double amount = jobRow.optDouble("amount", 0);
                    double amountinbase = jobRow.optDouble("amountinbase", 0);
                    double taxAmount = jobRow.optDouble("taxamount", 0);
                    double taxAmountinbase = jobRow.optDouble("taxamountinbase", 0);
                    double discount = jobRow.optDouble("discountvalue", 0);
                    double discountinbase = jobRow.optDouble("discountvalueinbase", 0);
                    if (!StringUtil.isNullOrEmpty(jobRow.optString("linktype","")) && jobRow.optString("linktype","").equalsIgnoreCase("1")) { //To Show only Linked DO 
                        dono = jobRow.optString("linkto","");  
                        if(!dolist.contains(dono))
                            dolist.add(dono);
                        doDate = jobRow.optString("grodate","");
                        if(!doDates.contains(doDate))
                            doDates.add(doDate);                                             
                    }
                    if(!prodList.contains(dono)){
                        prodList.add(dono);
                        salesinvoiceSubReport.setDonumber(dono);
                    }
                    if(!prodList.contains(doDate)){
                        prodList.add(doDate);
                        salesinvoiceSubReport.setDoDate(doDate);
                    }
                    
                    if (isOpeningBalanceInvoices) {
                        salesinvoiceSubReport = new SalesInvoiceRegisterSubReport();
                    }
                    salesinvoiceSubReport.setSrno(srno+".");
                    salesinvoiceSubReport.setInvoiceno(invoiceNumber);
                    salesinvoiceSubReport.setCustNo(customercode);
                    salesinvoiceSubReport.setCustName(customername);
                    salesinvoiceSubReport.setInvoiceDate(userdf.format(new Date(creationDate)));
                    salesinvoiceSubReport.setDueDate(userdf.format(new Date(dueDate)));
                    salesinvoiceSubReport.setDocNo(docClass);
                    
                    salesinvoiceSubReport.setQty(authHandler.formattedQuantity(qty, companyid));
                    salesinvoiceSubReport.setUom(uom);
                    salesinvoiceSubReport.setRate(authHandler.formattedAmount(rate, companyid));
                    salesinvoiceSubReport.setAmount(authHandler.formattedAmount(amount, companyid));
                    salesinvoiceSubReport.setDiscount(authHandler.formattedAmount(discount, companyid));
                    salesinvoiceSubReport.setProdCode(productid);
                    salesinvoiceSubReport.setDescription(description);
                    salesinvoiceSubReport.setCurrency(transactionCurrency);
                    salesinvoiceSubReport.setSalesperson(agent);
                    salesinvoiceSubReport.setTotalAmount(invCurrencySymbol+" "+authHandler.formattedCommaSeparatedAmount(invAmount, companyid));
                    salesinvoiceSubReport.setTaxAmount(invCurrencySymbol+" "+authHandler.formattedCommaSeparatedAmount(invTaxAmount, companyid));
                    salesinvoiceSubReportsList.add(salesinvoiceSubReport);
                        
                    salesinvoiceSubReport = new SalesInvoiceRegisterSubReport();
                    salesinvoiceSubReport.setInvoiceno(invoiceNumber);
                    salesinvoiceSubReport.setCustNo(customercode);
                    salesinvoiceSubReport.setCustName(customername);
                    salesinvoiceSubReport.setInvoiceDate(df.format(new Date(creationDate)));
                    salesinvoiceSubReport.setDueDate(df.format(new Date(dueDate)));
                    salesinvoiceSubReport.setDocNo(docClass);
                    salesinvoiceSubReport.setRate("DISCOUNT ALLOWED");
                    salesinvoiceSubReport.setAmount(authHandler.formattedAmount(discount, companyid));
                    salesinvoiceSubReport.setCurrency(transactionCurrency);
                    salesinvoiceSubReportsList.add(salesinvoiceSubReport);
                    srno++;
                    /*
                     * amount in base variable will stored the final value of amount which is calculated in the product grid.
                     * i.e. this value includes product level tax and excludes product level discount.
                     * hence we have calculated basic amount in following way.  [Mayur B]
                     */
//                    basicamount+=(amountinbase+discountinbase-taxAmountinbase); //calculating basic amount by removing tax amount of row level.
//                    taxamount+=taxAmountinbase;
                    discountamount+=discountinbase;
                }//DataRowsArr loop
                basicamount += (invAmountInBase + totalDiscount - invTaxAmountInBase - termamountinBase); //calculating basic amount by removing tax amount of row level.
                taxamount += invTaxAmountInBase;
                termAmount += termamountinBase;
                tempArray.put(jobj);
            }//DataJArr For loop
            totalamount=basicamount+taxamount-discountamount+termAmount;
            String countryID = company.getCountry().getID();
            String gstlabel = !(countryID.equals(Constants.INDONESIAN_COUNTRYID)) ? (currencycode +" GST OUTPUT") : (currencycode + " VAT OUTPUT");
            //Add header part values as parameters
            salesInvoiceMap.put("reportName", "Purchase Invoice Register - Invoice wise (Detail)");
            salesInvoiceMap.put("companyname", companyname);
            salesInvoiceMap.put("companyaddress", companyaddress);
            salesInvoiceMap.put("companyphone", companyphone);
            salesInvoiceMap.put("companyfax", companyfax);
            salesInvoiceMap.put("companyemail", companyemail);
            salesInvoiceMap.put("currency", currencyname);
            salesInvoiceMap.put("currencycode", currencycode);
            salesInvoiceMap.put("rangeType", "Custom");
            salesInvoiceMap.put("fromDate", startDate);
            salesInvoiceMap.put("toDate", endDate);
            salesInvoiceMap.put("startPeriod", startPeriod);
            salesInvoiceMap.put("endPeriod", endPeriod);
            salesInvoiceMap.put("basicamount", authHandler.formattedCommaSeparatedAmount(basicamount, companyid));
            salesInvoiceMap.put("taxamount", authHandler.formattedCommaSeparatedAmount(taxamount, companyid));
            salesInvoiceMap.put("discountamount", authHandler.formattedCommaSeparatedAmount(discountamount, companyid));
            salesInvoiceMap.put("termamount", authHandler.formattedCommaSeparatedAmount(termAmount, companyid));
            salesInvoiceMap.put("gstlabel", gstlabel);
            salesInvoiceMap.put("currencyname", currencyname);
            salesInvoiceMap.put("custVenNameLabel", "Vendor Name");
            salesInvoiceMap.put("salesPerson_Agent_Label", "Agent");
            salesInvoiceMap.put("invoiceLabel", "Purchase Invoice #");
            salesInvoiceMap.put("sipiLabel", "PI #");
            salesInvoiceMap.put("totalamount", authHandler.formattedCommaSeparatedAmount(totalamount, companyid));
            salesInvoiceMap.put("MonzoneSalesInvoiceRegisterSubReport", new JRBeanCollectionDataSource(salesinvoiceSubReportsList));
            //salesInvoiceMap.put("format", "pdf");
            response.setHeader("Content-Disposition", "attachment;filename=" + "PurchaseInvoiceRegisterDetailReport_v1.pdf");

            JasperPrint jasperPrint = null;
            JasperReport jasperReport = null;
            JasperReport jasperReportSubReport = null;
            InputStream inputStream = null;
            InputStream inputStreamSubReport = null;
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));
            if(templateflag==Constants.Monzone_templateflag){
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneSalesInvoiceRegister.jrxml");
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneSalesInvoiceRegisterSubReport.jrxml");
            }else{
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusSalesInvoiceRegister.jrxml");
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusSalesInvoiceRegisterSubReport.jrxml");
            }
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            
            List salesInvoiceList = new ArrayList();
            OnlyDatePojo odp = new OnlyDatePojo();
            odp.setDate(df.format(new Date()));
            salesInvoiceList.add(odp);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            salesInvoiceMap.put("SubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(salesInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, salesInvoiceMap, beanColDataSource);

            list.add(jasperPrint);
                 }
        }catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
        return list;
    }
    
    @Override
    public List<Object> exportVendorInvoiceRegisterSummaryReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> purchaseInvoiceMap = new HashMap<String, Object>();
        SalesInvoiceRegisterSubReport purchaseInvoiceSubReport = null;
        List<SalesInvoiceRegisterSubReport> salesinvoiceSubReportsList = new ArrayList<SalesInvoiceRegisterSubReport>();
        String startDate = "", endDate = "";
        JSONArray DataJArr = new JSONArray();
        try {
            String companyname = "", companyaddress = "", companyphone = "", companyfax = "", companyemail = "" ,gstlabel = "";;
            String startPeriod = "", endPeriod = "", rangeType = "", currencyname="", currencyCode = "";
            boolean onlyAmountDue = StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue"))?false:Boolean.parseBoolean(request.getParameter("onlyamountdue"));        
            boolean ispendingpayment=false;
            boolean isForTemplate=false;
            double basicAmount =0;  double taxAmount =0;  double discountAmount =0; double totalAmount =0;  double termAmount = 0;
            String currencysymbol = "";
            double amount = 0;
            double discount = 0;  double discountinbase = 0;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isForTemplate"))){
                isForTemplate = Boolean.parseBoolean(request.getParameter("isForTemplate"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("ispendingpayment"))) {
                ispendingpayment = Boolean.parseBoolean(request.getParameter("ispendingpayment"));
            }
            boolean isUnpaidInvoiceReport = StringUtil.isNullOrEmpty(request.getParameter("isUnpaidInvoiceReport"))?false:Boolean.parseBoolean(request.getParameter("onlyamountdue"));        
            if(!StringUtil.isNullOrEmpty(request.getParameter("isUnpaidInvoiceReport"))){
                isUnpaidInvoiceReport = Boolean.parseBoolean(request.getParameter("isUnpaidInvoiceReport"));
            }  
            boolean isOpeningBalanceInvoices = StringUtil.isNullOrEmpty(request.getParameter("isOpeningBalanceInvoices"))?false:Boolean.parseBoolean(request.getParameter("isOpeningBalanceInvoices"));        
            if(!StringUtil.isNullOrEmpty(request.getParameter("isOpeningBalanceInvoices"))){
                isOpeningBalanceInvoices = Boolean.parseBoolean(request.getParameter("isOpeningBalanceInvoices"));
            }
            boolean onlyRecurredInvoices = request.getParameter("onlyRecurredInvoices") != null ? Boolean.parseBoolean(request.getParameter("onlyRecurredInvoices")) : false;
             /*
             When check(Drop Down) to include child accounts is disabled then includeExcludeChildCombobox flag will be set as TRUE to include child accounts
             
              includeExcludeChildCombobox, if All = Include all child accounts while fetching parent account data
              includeExcludeChildCombobox, if TRUE = Include all child accounts while fetching parent account data
              includeExcludeChildCombobox, if FALSE = Exclude child acounts while fetching parent account data
             
             */
            boolean includeExcludeChildCmb;
            if (request.getParameter("includeExcludeChildCmb") != null&&request.getParameter("includeExcludeChildCmb").toString().equals("All")) {
                includeExcludeChildCmb = true;
            } else {
                includeExcludeChildCmb = request.getParameter("includeExcludeChildCmb") != null ? Boolean.parseBoolean(request.getParameter("includeExcludeChildCmb")) : false;
            }
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject compaccresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compaccresult.getEntityList().get(0);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            companyname = company.getCompanyName() != null ? company.getCompanyName() : "";
            companyaddress = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
            companyemail = company.getEmailID() != null ? company.getEmailID() : "";
            companyfax = company.getFaxNumber() != null ? company.getFaxNumber() : "";
            companyphone = company.getPhoneNumber() != null ? company.getPhoneNumber() : "";
            currencyname = company.getCurrency().getName();
  	    currencyCode = accCommonTablesDAO.getCustomCurrencyCode(company.getCurrency().getCurrencyCode(),companyid);
             /**
             * Updated total tax word in Export PDF format for GST
             */
            String countryID = company.getCountry().getID();
            gstlabel = !(countryID.equals(Constants.INDONESIAN_COUNTRYID)) ? (currencyCode +" GST OUTPUT") : (currencyCode + " VAT OUTPUT");
            //Calculate Accounting Period
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            if (!StringUtil.isNullOrEmpty(request.getParameter("startdate")) && !StringUtil.isNullOrEmpty(request.getParameter("enddate"))) {
                Date end_Date = authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddate"));    
                Calendar c = Calendar.getInstance();
                c.setTime(end_Date);
                endDate = userdf.format(c.getTime());
                startDate = userdf.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter("startdate")));
            }            
            startPeriod = userdf.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(userdf.parse(startPeriod));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            endPeriod = userdf.format(c1.getTime());
            
            HashMap<String, Object> requestParams = accGoodsReceiptControllerCMN.getGoodsReceiptMap(request);
            requestParams.put("customerBankAccountType", request.getParameter("customerBankAccountType"));
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid") != null) ? request.getParameter("gcurrencyid") : sessionHandlerImpl.getCurrencyID(request);
            String userId = sessionHandlerImpl.getUserid(request);
            requestParams.put(Constants.useridKey, userId);
            boolean onlyOutstanding = false;
            String title = "Purchase Invoice Register";
            if (!StringUtil.isNullOrEmpty(request.getParameter("onlyOutsatnding"))) {
                onlyOutstanding = Boolean.parseBoolean(request.getParameter("onlyOutsatnding"));
                title= "Outstanding Invoices";
            }
            String filename = "";
            boolean isFixedAsset = (request.getParameter("isFixedAsset") != null) ? Boolean.parseBoolean(request.getParameter("isFixedAsset")) : false;
            if (isFixedAsset) {
                    filename = "AssetDisposalInvoiceList_v1.pdf";
            }else{
                filename = "PurchaseInvoiceRegisterSummaryReport_v1.pdf";
            }
            request.setAttribute("isExport", true);
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            request.setAttribute("companyid", companyid);
            request.setAttribute("gcurrencyid", gcurrencyid);
            request.setAttribute("onlyOutstanding", onlyOutstanding);
            request.setAttribute("onlyamountdue", onlyAmountDue );
            requestParams.put("companyid", companyid);
            requestParams.put("gcurrencyid", gcurrencyid);
            requestParams.put("custInvFlagForSalesPerson", true);
            requestParams.put("consolidateFlag", consolidateFlag);
            requestParams.put("isForTemplate", isForTemplate);
            requestParams.put("datefilter", request.getParameter("datefilter"));
            requestParams.put("custVendorID", request.getParameter("custVendorID"));
            requestParams.put("onlyExpensePI", request.getParameter("onlyExpensePI"));
            requestParams.put("onlyOutsatnding", onlyOutstanding);
            requestParams.put("ispendingpayment", ispendingpayment);
            requestParams.put("isUnpaidInvoiceReport", isUnpaidInvoiceReport);
            requestParams.put("includeExcludeChildCmb",includeExcludeChildCmb);
            requestParams.put("isOpeningBalanceInvoices", request.getParameter("isOpeningBalanceInvoices"));
            requestParams.put("invoiceLinkedWithGRNStatus", request.getParameter("invoiceLinkedWithGRNStatus"));
            requestParams.put("onlyRecurredInvoices", onlyRecurredInvoices);
            request.setAttribute("isInvoiceOptimizeExport", true );
            KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptsMerged(requestParams);
            List list1 = result.getEntityList();

            DataJArr = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMerged(requestParams, list1, DataJArr, accountingHandlerDAOobj, accCurrencyDAOobj, accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
            for (int i = 0; i < DataJArr.length(); i++) {
                int srno = 1;
                String dono = "", doDate = "";
                JSONObject jobj = new JSONObject();
                jobj = DataJArr.getJSONObject(i);
                String billid = jobj.optString("billid", "");   //Invoice ID 
                String invoiceNumber = jobj.optString("billno", "");    //Invoice Number
                String customername = jobj.optString("personname", "");
                String customercode = jobj.optString("personcode", "");
                String agent = jobj.optString("agentname", "");
                String creationDate = jobj.optString("date", "");
                String dueDate = jobj.optString("duedate", "");
                String invCurrencySymbol = jobj.optString("currencysymbol", "");
                invCurrencySymbol = accCommonTablesDAO.getCustomCurrencySymbol(invCurrencySymbol, companyid);
                double invAmount = jobj.optDouble("amount", 0);
                double invAmountInBase = jobj.optDouble("amountinbase", 0);
                double termamountinBase = jobj.optDouble("termamountinBase", 0);
                double invTaxAmount = jobj.optDouble("taxamount", 0);
                double invTaxAmountInBase = jobj.optDouble("taxamountinbase", 0);
                String taxName = jobj.optString("taxname", "");
                String[] invoices = {};
                invoices = billid.split(",");
                List<String> dolist = new ArrayList<String>();  //Contains Linked DO numbers.
                JSONArray DataRowsArr = accGoodsReceiptCommon.getGoodsReceiptRows(request,invoices);
                jobj.put("DataRowsArr", DataRowsArr);
                double totaldiscount=0d;
                for (int k = 0; k < DataRowsArr.length(); k++) {
                    JSONObject jobRow = new JSONObject();
                    jobRow = DataRowsArr.getJSONObject(k);
                    purchaseInvoiceSubReport = new SalesInvoiceRegisterSubReport();
                    List prodList = new ArrayList();
                    currencysymbol = jobRow.optString("currencysymbol", "");
                    currencysymbol = accCommonTablesDAO.getCustomCurrencySymbol(currencysymbol, companyid);
                    amount = jobRow.optDouble(Constants.amountForExcelFile, 0);//ERP-29102
                    discount = jobRow.optDouble("discountvalue", 0);
                    discountinbase = jobRow.optDouble("discountvalueinbase", 0);
                    if (!StringUtil.isNullOrEmpty(jobRow.optString("linktype","")) && jobRow.optString("linktype","").equalsIgnoreCase("1")) { //To Show only Linked DO 
                        dono = jobRow.optString("linkto","");  
                        if(!dolist.contains(dono))
                            dolist.add(dono);
                    }
                    if(!prodList.contains(dono)){
                        prodList.add(dono);
                        purchaseInvoiceSubReport.setDonumber(dono);
                    }
                    
                    purchaseInvoiceSubReport.setSrno(srno+".");
                    srno++;
                    totaldiscount+=discountinbase;
                    discountAmount+=discountinbase;
                }//DataRowsArr loop
                if (isOpeningBalanceInvoices) {
                    purchaseInvoiceSubReport = new SalesInvoiceRegisterSubReport();
                }
                purchaseInvoiceSubReport.setInvoiceno(invoiceNumber);
                purchaseInvoiceSubReport.setCustNo(customercode);
                purchaseInvoiceSubReport.setCustName(customername);
                purchaseInvoiceSubReport.setSalesperson(agent);
                purchaseInvoiceSubReport.setInvoiceDate(userdf.format(new Date(creationDate)));
                purchaseInvoiceSubReport.setDueDate(userdf.format(new Date(dueDate)));
                purchaseInvoiceSubReport.setTaxName(taxName);
                purchaseInvoiceSubReport.setBasicAmount(invCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(invAmount, companyid));
                purchaseInvoiceSubReport.setTaxAmount(invCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(invTaxAmount, companyid));
                purchaseInvoiceSubReport.setAmount(currencysymbol + " " + authHandler.formattedCommaSeparatedAmount(amount, companyid));
                purchaseInvoiceSubReport.setDiscount(authHandler.formattedCommaSeparatedAmount(discount, companyid));
                salesinvoiceSubReportsList.add(purchaseInvoiceSubReport);
                basicAmount += (invAmountInBase + totaldiscount - invTaxAmountInBase-termamountinBase); //calculating basic amount by removing tax amount of row level.
                taxAmount += invTaxAmountInBase;
                termAmount += termamountinBase;
            }//DataJArr For loop
            totalAmount=basicAmount+taxAmount-discountAmount+termAmount;
            //Add header part values as parameters
            purchaseInvoiceMap.put("reportName", title+" - Invoice wise (Summary)");
            purchaseInvoiceMap.put("companyname", companyname);
            purchaseInvoiceMap.put("companyaddress", companyaddress);
            purchaseInvoiceMap.put("companyphone", companyphone);
            purchaseInvoiceMap.put("companyfax", companyfax);
            purchaseInvoiceMap.put("companyemail", companyemail);
            purchaseInvoiceMap.put("currencyname", currencyname);
            purchaseInvoiceMap.put("currencycode", currencyCode);
            purchaseInvoiceMap.put("gstlabel", gstlabel);
            purchaseInvoiceMap.put("rangeType", "Custom");
            purchaseInvoiceMap.put("fromDate", startDate);
            purchaseInvoiceMap.put("toDate", endDate);
            purchaseInvoiceMap.put("startPeriod", startPeriod);
            purchaseInvoiceMap.put("endPeriod", endPeriod);
            purchaseInvoiceSubReport.setBasicAmountVal(authHandler.round(basicAmount, companyid));
            purchaseInvoiceSubReport.setTaxAmountVal(authHandler.round(taxAmount, companyid));
            purchaseInvoiceSubReport.setTermAmount(authHandler.formattingDecimalForAmount(termAmount, companyid));
            purchaseInvoiceSubReport.setTermAmountVal(authHandler.round(termAmount, companyid));
            purchaseInvoiceSubReport.setDiscountAmount(authHandler.formattingDecimalForAmount(discountAmount, companyid));
            purchaseInvoiceSubReport.setDiscountAmountVal(authHandler.round(discountAmount, companyid));
            purchaseInvoiceSubReport.setTotalAmountVal(authHandler.round(totalAmount, companyid));
            purchaseInvoiceMap.put("MonzoneSalesInvoiceRegisterSubReport", new JRBeanCollectionDataSource(salesinvoiceSubReportsList));
            response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");

            JasperPrint jasperPrint = null;
            JasperReport jasperReport = null;
            JasperReport jasperReportSubReport = null;
            InputStream inputStream = null;
            InputStream inputStreamSubReport = null;
            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusSalesInvoiceRegister.jrxml");
            inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PurchaseInvoiceRegisterSubReportSummary.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        
            List purchaseInvoiceList = new ArrayList();
            OnlyDatePojo odp = new OnlyDatePojo();
            odp.setDate(userdf.format(new Date()));
            purchaseInvoiceList.add(odp);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            purchaseInvoiceMap.put("SubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(purchaseInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, purchaseInvoiceMap, beanColDataSource);

            list.add(jasperPrint);
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
        return list;
    }
  
    @Override
    public List<Object> exportDeliveryOrderForFasten(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        int moduleId = request.getParameter("moduleid") != null ? Integer.parseInt(request.getParameter("moduleid")) : 0;
        String recArray[] = recordIDs.split(",");
        String filenameJRXML = "";
        String filename = "";
        JSONObject obj = null;
        int type = !StringUtil.isNullOrEmpty(request.getParameter("type")) ? Integer.parseInt(request.getParameter("type")) : 0;
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;
                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    OnlyDatePojo onlyDateObj = new OnlyDatePojo();
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    KwlReturnObject compaccresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compaccresult.getEntityList().get(0);
                    String companyaddress = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
          
                    ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();
                        
                    HashMap fieldMap = new HashMap();
                    boolean isFixedAsset = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isFixedAsset));
                    boolean isConsignment = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isConsignment));
                    boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isLeaseFixedAsset))) ? Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset)) : false;
                    Map reqParam = new HashMap();
                    reqParam.put("companyid", companyid);
                    reqParam.put("isFixedAsset", isFixedAsset);
                    reqParam.put("isConsignment", isConsignment);
                    reqParam.put("isLeaseFixedAsset", isLeaseFixedAsset);
                    fieldMap = accInvoiceServiceDAO.getDODetailsCustomFieldMap(reqParam);
                    if (moduleId == Constants.Acc_Delivery_Order_ModuleId) {
                        HashMap<String, Object> requestParams = accInvoiceServiceDAO.getDeliveryOrdersMap(request);
                        requestParams.put(Constants.billid, invoiceID);
                        request.setAttribute(Constants.companyKey, companyid);
                        request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                        request.setAttribute(Constants.billid, invoiceID);
                        requestParams.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                        requestParams.put("CashAndInvoice", true);
                        KwlReturnObject doResult = accInvoiceDAOobj.getDeliveryOrdersMerged(requestParams);
                        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                        DataJArr = accInvoiceServiceDAO.getDeliveryOrdersJsonMerged(paramJobj, doResult.getEntityList());
                        JSONObject dOrows = accInvoiceServiceDAO.getDeliveryOrderRows(request , fieldMap);
                        DataJArrRows = dOrows.getJSONArray("data");
                        Map<String, Object> rows = new HashMap<String, Object>();
                        obj = DataJArr.getJSONObject(0);
                        for (int i = 0; i < DataJArrRows.length(); i++) {
                            JSONObject jobj = DataJArrRows.getJSONObject(i);
                            rows = new HashMap<String, Object>();
                            double productamount=0;
                            rows.put("srNo", jobj.optString("srno", ""));
                            rows.put("code", jobj.optString("pid", ""));
                            rows.put("desc", jobj.optString("desc", ""));
                            rows.put("qty", authHandler.formattedCommaSeparatedQyantityJasper(jobj.optDouble("quantity", 0),companyid));
                            rows.put("uom", jobj.optString("unitname", ""));
                            rows.put("rate", authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                            if (!jobj.optBoolean("discountispercent", false)) {
                                if (jobj.optDouble("discountispercent", 0) == 0) {
                                    productamount = (jobj.optDouble("rate", 0) * jobj.optDouble("dquantity", 0)) - authHandler.round(jobj.optDouble("prdiscount", 0), companyid); // Flat
                                    rows.put("disc", jobj.optDouble("prdiscount", 0));
                                } else {
                                    productamount = (jobj.optDouble("rate", 0) * jobj.optDouble("dquantity", 0)) - authHandler.round(((jobj.optDouble("rate", 0) * jobj.optDouble("dquantity", 0)) * (jobj.optDouble("prdiscount", 0) / 100)), companyid); // Percentage Value
                                    rows.put("disc", jobj.optDouble("prdiscount", 0));
                                }
                            } else {
                                rows.put("disc", jobj.optDouble("prdiscount", 0));
                            }
                            rows.put("total", productamount);
                            invDetailsList.add(rows);
                        }
                        filenameJRXML = "/FastenDeliveryOrder.jrxml";// "FastenDeliveryOrder.jrxml" is used for SO Pr-Printed and DO
                        filename = "DeliveryOrder_" + obj.optString("billno", "") + ".pdf";
                            onlyDateObj.setDate(obj.optString("billno", ""));///date not used in this design do sending Bill no
                    } else if (moduleId == Constants.Acc_Purchase_Order_ModuleId) {
                        HashMap<String, Object> requestParams = accPurchaseOrderServiceDAOobj.getPurchaseOrderMap(request);
                        requestParams.put("billId", invoiceID);
                        requestParams.put("bills", invoiceID.split(","));
                        request.setAttribute(Constants.companyKey, companyid);
                        request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                        request.setAttribute(Constants.billid, invoiceID);
                        requestParams.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                        requestParams.put("dateFormatValue", authHandler.getDateFormatter(request));
                        requestParams.put(Constants.userdf, authHandler.getUserDateFormatter(request));

                        KwlReturnObject invoiceResult = accPurchaseOrderobj.getPurchaseOrdersMerged(requestParams);
                        DataJArr = accPurchaseOrderServiceDAOobj.getPurchaseOrdersJsonMerged(requestParams, invoiceResult.getEntityList(), DataJArr);
                        requestParams.put("closeflag", null);
                        DataJArrRows = accPurchaseOrderServiceDAOobj.getPurchaseOrderRows(requestParams);
                        Map<String, Object> rows = new HashMap<String, Object>();
                        obj = DataJArr.getJSONObject(0);
                        double diacountTotal = 0;
                        
                        for (int i = 0; i < DataJArrRows.length(); i++) {
                            JSONObject jobj = DataJArrRows.getJSONObject(i);
                            rows = new HashMap<String, Object>();
                            double productamount = 0;
                            rows.put("srNo", jobj.optString("srno", ""));
                            rows.put("ProductName", jobj.optString("productname", ""));
                            rows.put("desc", jobj.optString("desc", ""));
                            boolean isexpenseinv = jobj.optBoolean("isexpenseinv", false); 
                            double quantity = isexpenseinv? 1:jobj.optDouble("quantity", 0);
                            rows.put("qty", authHandler.formattedCommaSeparatedQyantityJasper(quantity,companyid) + " " + jobj.optString("unitname", ""));
                            rows.put("uom", jobj.optString("unitname", ""));
                            rows.put("rate", authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                                if (!jobj.optBoolean("discountispercent", false)) {
                                    
                                    rows.put("disc", authHandler.formattedCommaSeparatedAmount(jobj.optDouble("discountvalue", 0), companyid));
                                } else {
                                    rows.put("disc", jobj.optDouble("prdiscount", 0)==0?authHandler.formattedCommaSeparatedAmount(0, companyid):authHandler.formattedCommaSeparatedAmount(jobj.optDouble("prdiscount", 0), companyid)+"%");
                                }
                            productamount = (jobj.optDouble("rate", 0) * quantity);  
                            rows.put("discount_flat_or__percent", jobj.optInt("discountispercent", 0)==1? authHandler.formattingDecimalForAmount(jobj.optDouble("prdiscount", 0), companyid)+"%":authHandler.formattedCommaSeparatedAmount(jobj.optDouble("discountvalue", 0), companyid));
                            rows.put("disc", authHandler.formattedCommaSeparatedAmount(jobj.optDouble("discountvalue", 0), companyid));
                            diacountTotal +=jobj.optDouble("discountvalue", 0);
                            rows.put("total", authHandler.formattedCommaSeparatedAmount(productamount, companyid)+"");
                            rows.put("total_With_Discount", authHandler.formattedCommaSeparatedAmount((productamount - jobj.optDouble("discountvalue", 0)), companyid)+"");
                            rows.put("currencysymbol", jobj.optString("currencysymbol", ""));
                            invDetailsList.add(rows);
                        }
                        //// Specic params for PO Report
                        if (type == 0) { 
                            filenameJRXML = "/FastenPurchaseOrder.jrxml";
                        } else if (type == 1) { 
                            filenameJRXML = "/FastenPurchaseOrder1.jrxml";
                        } else if (type == 2) {
                            filenameJRXML = "/FastenPurchaseOrder2.jrxml";
                        }
                        
                        /// Code get term amount "DISCOUNT"

                        HashMap<String, Object> requestParam = new HashMap();
                        HashMap<String, Object> filterrequestParams = new HashMap();
                        requestParam.put("purchaseOrder", invoiceID);
                        KwlReturnObject purchaseOrderResult = null;
                        purchaseOrderResult = accPurchaseOrderobj.getPurchaseOrderTermMap(requestParam);
                        List<PurchaseOrderTermMap> termMap = purchaseOrderResult.getEntityList();
                        for (PurchaseOrderTermMap purchaseOrderTermMap : termMap) {
                            InvoiceTermsSales mt = purchaseOrderTermMap.getTerm();
                            double termAmnt = purchaseOrderTermMap.getTermamount();
                            if (mt.getTerm().equalsIgnoreCase("DISCOUNT")) {
                                diacountTotal += authHandler.round(termAmnt, companyid)*-1;
                            }

                        }
                    
                        filename = "PurchaseOrder_" + obj.optString("billno", "") + ".pdf";
                        onlyDateObj.setDate(obj.optString("dateinuserformat", ""));
                        invoiceMap.put("requestedBy", obj.optString("Custom_Requested By", ""));
                        invoiceMap.put("GSTAmount", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                        invoiceMap.put("TotalAmount",  authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                        invoiceMap.put("DISCOUNT",  authHandler.formattedCommaSeparatedAmount(diacountTotal, companyid));
                        invoiceMap.put("SubTotal", authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0) - obj.optDouble("taxamount", 0)+diacountTotal), companyid));
                        invoiceMap.put("SubTotal_Without_Discount", authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0) - obj.optDouble("taxamount", 0)), companyid));
                        invoiceMap.put("Amount_In_Words", obj.optString("amountInWodrs", "") + " Only");
                    } else if (moduleId == Constants.Acc_Sales_Order_ModuleId) {
                        HashMap<String, Object> requestParams = accSalesOrderServiceDAOobj.getSalesOrdersMap(request);
                        requestParams.put("billId", invoiceID);
                        requestParams.put("bills", invoiceID.split(","));
                        request.setAttribute(Constants.companyKey, companyid);
                        request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                        request.setAttribute(Constants.billid, invoiceID);
                        requestParams.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                        requestParams.put("dateFormatValue", authHandler.getDateOnlyFormat(request));
                        requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));

                        KwlReturnObject invoiceResult = accSalesOrderDAOobj.getSalesOrdersMerged(requestParams);
                        JSONObject paramJobj=StringUtil.convertRequestToJsonObject(request);
                        DataJArr = accSalesOrderServiceDAOobj.getSalesOrdersJsonMerged(paramJobj, invoiceResult.getEntityList(), DataJArr);
                        requestParams.put("closeflag", null);
                        JSONObject tempjobj = accSalesOrderServiceDAOobj.getSalesOrderRows(paramJobj);
                        DataJArrRows = tempjobj.getJSONArray("data");
                        Map<String, Object> rows = new HashMap<String, Object>();
                        obj = DataJArr.getJSONObject(0);

                        for (int i = 0; i < DataJArrRows.length(); i++) {
                            JSONObject jobj = DataJArrRows.getJSONObject(i);
                            rows = new HashMap<String, Object>();
                            double productamount = 0;
                            rows.put("srNo", jobj.optString("srno", ""));
                            rows.put("ProductName", jobj.optString("productname", ""));
                            rows.put("code", jobj.optString("pid", ""));
                            rows.put("desc", jobj.optString("desc", ""));
                            if (type == 1) {
                                rows.put("qty", authHandler.formattedCommaSeparatedQyantityJasper(jobj.optDouble("quantity", 0),companyid));
                            } else {
                                rows.put("qty", authHandler.formattedCommaSeparatedQyantityJasper(jobj.optDouble("quantity", 0),companyid) + " " + jobj.optString("unitname", ""));
                            }
                            rows.put("uom", jobj.optString("unitname", ""));
                            rows.put("rate", authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid) + "");
                            if (!jobj.optBoolean("discountispercent", false)) {
                                if (jobj.optDouble("discountispercent", 0) == 0) {
                                    productamount = (jobj.optDouble("rate", 0) * jobj.optDouble("quantity", 0)) - jobj.optDouble("prdiscount", 0);//Flat
                                    rows.put("disc", authHandler.formattedCommaSeparatedAmount(jobj.optDouble("prdiscount", 0), companyid));
                                } else {
                                    productamount = (jobj.optDouble("rate", 0) * jobj.optDouble("quantity", 0)) - ((jobj.optDouble("rate", 0) * jobj.optDouble("quantity", 0)) * (jobj.optDouble("prdiscount", 0) / 100));//Percentage Value
                                    rows.put("disc", jobj.optDouble("prdiscount", 0)==0?authHandler.formattedCommaSeparatedAmount(0, companyid):authHandler.formattedCommaSeparatedAmount(jobj.optDouble("prdiscount", 0), companyid)+"%");
                                }
                            } else {
                                rows.put("disc", jobj.optDouble("prdiscount", 0));
                            }
                            rows.put("total", authHandler.formattedCommaSeparatedAmount(productamount, companyid) + "");
                            rows.put("currencysymbol", jobj.optString("currencysymbol", ""));
                            invDetailsList.add(rows);
                        }
                        //// Specic params for PO Report
                        if (type == 1) { // "FastenDeliveryOrder.jrxml" is used for SO Pr-Printed and DO
                            filenameJRXML = "/FastenDeliveryOrder.jrxml";
                        } else {
                            filenameJRXML = "/FastenSalesOrder.jrxml";
                        }
                        filename = "SalesOrder" + obj.optString("billno", "") + ".pdf";
                        onlyDateObj.setDate(obj.optString("dateinuserformat", ""));
                       
                        invoiceMap.put("GSTAmount", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                        invoiceMap.put("TotalAmount", authHandler.formattedCommaSeparatedAmount(obj.optDouble("orderamountwithTax", 0), companyid));
                        invoiceMap.put("SubTotal", authHandler.formattedCommaSeparatedAmount((obj.optDouble("orderamountwithTax", 0)-obj.optDouble("taxamount", 0)), companyid));
                        invoiceMap.put("Amount_In_Words", obj.optString("amountInWodrs", "") + " Only");
                    }
                    
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("imagepath", imagepath);
                    Collections.sort(invDetailsList, new SrNoComparator());
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                    invoiceMap.put("CustomeName", obj.optString("personname", ""));
                    invoiceMap.put("CompanyAddress", companyaddress);
                    invoiceMap.put("memo", obj.optString("memo", ""));
                    invoiceMap.put("ShipVia", obj.optString("shipvia", ""));
                    invoiceMap.put("FOB", obj.optString("fob", ""));
                    invoiceMap.put("RequiredDelivery", obj.optString("shipdateinuserformat", ""));
                    invoiceMap.put("Approver", obj.optString("approver", ""));//for PO
                    invoiceMap.put("billto", obj.optString(Constants.BILLING_ADDRESS, ""));
                    invoiceMap.put("billtoaddress", obj.optString("billtoaddress", ""));// for PO & SO
                    invoiceMap.put("shiptoaddress", obj.optString("shiptoaddress", ""));//for PO & SO
                    invoiceMap.put("YourRefNo", obj.optString("Custom_Supplier reference number", ""));
                    invoiceMap.put("ourRefNo", obj.optString("Custom_PR Number", ""));
                    invoiceMap.put("ComapnyName", company!=null?company.getCompanyName()!=null?company.getCompanyName():"":"");
                    invoiceMap.put("currencycode", obj.optString("currencycode", ""));
                    invoiceMap.put("SO_DueDate", obj.optString("duedateinuserformat", ""));//for SO Due Date
                    invoiceMap.put("Ship_To_ADDRESS", obj.optString(Constants.SHIPPING_ADDRESS, ""));
                    invoiceMap.put("Bill_To_ADDRESS", obj.optString("customername", "") + "\n" + obj.optString(Constants.BILLING_ADDRESS, ""));
                    invoiceMap.put("billto",  obj.optString(Constants.BILLING_ADDRESS, ""));
                    invoiceMap.put("Account_No", obj.optString("customercode", ""));
                    invoiceMap.put("PAYMENT_TERMS", obj.optString("termname", ""));
                    invoiceMap.put("SMCode", obj.optString("salesPersonCode", ""));
                    invoiceMap.put("SALES_PERSON", obj.optString("mapSalesPersonName", ""));
                    invoiceMap.put("dueDate", obj.optString("dateinuserformat", ""));
                    invoiceMap.put("Document_NO", obj.optString("billno", ""));
                    invoiceMap.put("Reference", obj.optString("Custom_Reference", ""));
                    if (moduleId == Constants.Acc_Delivery_Order_ModuleId) {
                        invoiceMap.put("orderedBy", obj.optString("shipvia", "")); //Shown shipvia instead of orderyby
                    }else if(moduleId == Constants.Acc_Sales_Order_ModuleId && type==1){
                        invoiceMap.put("SALES_PERSON", obj.optString("salespersonname", ""));
                        invoiceMap.put("orderedBy", obj.optString("shipvia", "")); //Shown shipvia instead of orderyby
                    }else{
                        invoiceMap.put("orderedBy", obj.optString("createdby", ""));
                    }
                    datePojoList.add(onlyDateObj);
                    InputStream inputStream = null;

                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + filenameJRXML);
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }

    @Override
    public void exportSOAtoZIP_FILE(JSONObject request, HttpServletResponse response, boolean iscustmer) throws Exception{
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public void exportSOAtoZIP_FILE(JSONObject request, boolean iscustmer) throws Exception{
        throw new UnsupportedOperationException("Not supported yet.");
    }
    private class SrNoComparator implements Comparator<Map<String, Object>> {

        @Override
        public int compare(Map<String, Object> map1, Map<String, Object> map2) {
            int result = 0;
            Integer sr1 = 0, sr2 = 0;
            if (map1.containsKey("srNo")) {
                sr1 = Integer.parseInt((String)map1.get("srNo"));
            }
            if (map2.containsKey("srNo")) {
                sr2 = Integer.parseInt((String)map2.get("srNo"));
            }

            if (sr1 > sr2) {
                result = 1;
            } else if (sr1 < sr2) {
                result = -1;
            } else {
                result = 0;
            }

            return result;
        }
    }
    public List<Object> exportCustomerInvoiceForFasten(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int templateflag = Integer.parseInt(request.getParameter("templateflag"));
        int type =request.getParameter("type")!=null?Integer.parseInt(request.getParameter("type")):0;
        boolean isFixedAsset=(StringUtil.isNullOrEmpty(request.getParameter("isFixedAsset")))?false:Boolean.parseBoolean(request.getParameter("isFixedAsset"));
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;
                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    String filename = "";
                    HashMap<String, Object> requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
                    requestParams.put(Constants.billid, invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("CashAndInvoice", true);
                    KwlReturnObject invoiceResult = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                    DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, invoiceResult.getEntityList(), DataJArr);
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                    HashMap<String, Object> genericDataMap = new HashMap<String, Object>();
                    DataJArrRows = accInvoiceServiceDAO.getInvoiceRows(paramJobj, invoiceID.split(","),genericDataMap);
                    Map<String, Object> rows = new HashMap<String, Object>();
                    ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();
                    double subtotal=0;
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        rows = new HashMap<String, Object>();
                        rows.put("srNo", jobj.optString("srno", ""));
                        rows.put("code", jobj.optString("pid", ""));
                        rows.put("desc", jobj.optString("desc", ""));
                        rows.put("qty", authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                        rows.put("uom", jobj.optString("unitname", ""));
                        rows.put("rate", jobj.optDouble("rate", 0));
                        if (!jobj.optBoolean("discountispercent", false)) {
                            if (jobj.optDouble("discountispercent", 0) == 0) {
                                rows.put("disc", jobj.optDouble("prdiscount", 0));
//                                rows.put("disc", (jobj.optDouble("prdiscount", 0)*100)/(jobj.optDouble("prdiscount", 0) + jobj.optDouble("amount", 0)));
                            } else {
                                rows.put("disc", jobj.optDouble("prdiscount", 0));
                            }
                        } else {
                            rows.put("disc", jobj.optDouble("prdiscount", 0));
                        }
                        rows.put("total", jobj.optDouble("amount", 0) - jobj.optDouble("rowTaxAmount",0));
                        rows.put("remarks", jobj.optString("Custom_Remarks", ""));
                        subtotal+=authHandler.round(jobj.optDouble("amount", 0)- jobj.optDouble("rowTaxAmount",0),companyid);
                        invDetailsList.add(rows);
                    }
                    Collections.sort(invDetailsList, new SrNoComparator());
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                    JSONObject obj = DataJArr.getJSONObject(0);
                    OnlyDatePojo onlyDateObj = new OnlyDatePojo();
                    invoiceMap.put("Ship_To_ADDRESS", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("Bill_To_ADDRESS",obj.optString("customername", "")+"\n"+ obj.optString("billtoaddress", ""));
                    invoiceMap.put("subTotal",obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(subtotal, companyid));
                    invoiceMap.put("GSTAmount",obj.optString("currencysymbol", "") + " " +authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("amountDue",obj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                    invoiceMap.put("Account_No", obj.optString("customercode", ""));
                    invoiceMap.put("PAYMENT_TERMS", obj.optString("termname", ""));
                    invoiceMap.put("SMCode", obj.optString("salesPersonName", ""));
//                    invoiceMap.put("dueDate", obj.optString("duedateInUserDateFormat", ""));
                    invoiceMap.put("dueDate", obj.optString("dateinuserformat", "")); //Shown Invoice Date instead date
                    invoiceMap.put("Document_NO",  obj.optString("billno", ""));
                    invoiceMap.put("Reference", obj.optString("porefno", ""));
//                    invoiceMap.put("orderedBy", obj.optString("createdby", ""));
                    invoiceMap.put("orderedBy", obj.optString("shipvia", "")); //Shown shipvia instead of orderyby
                    invoiceMap.put("customername", obj.optString("customername", "")+"\n"+ obj.optString("billtoaddress", ""));
                    invoiceMap.put("customercode", obj.optString("customercode", ""));
                    invoiceMap.put("invoiceDate", obj.optString("dateinuserformat", ""));
                    invoiceMap.put("companyName",obj.optString("companyname", ""));
                    invoiceMap.put("companyAddress",AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                    invoiceMap.put("attn",obj.optString("billingContactPerson", ""));
                    invoiceMap.put("deliveryOrderNo",obj.optString("dONumber", ""));
                    onlyDateObj.setDate( obj.optString("billno", ""));
                    datePojoList.add(onlyDateObj);
                    InputStream inputStream = null;
                    if(isFixedAsset){
                        filename = "AssetDisposalInvoice_";
                    }else{
                        filename  = "TaxInvoice_";
                    }
                    if(type==1){
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/FastenARRepairInvoice.jrxml");
                        filename = "AR_RepairInvoice_" + obj.optString("billno", "") + ".pdf";
                    }else{
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/FastenTaxInvoice.jrxml");
                        filename = filename + obj.optString("billno", "") + ".pdf";
                    }
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
    @Override
    public List<Object> exportCNDNSRPRJasperForFasten(HttpServletRequest request, HttpServletResponse response , String billids, String CNNumber, int moduleId) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                if (!StringUtil.isNullOrEmpty(billids)) {
                    billid = billids;
                }
                
                Map<String, Object> SalesReturnMap = new HashMap<String, Object>();
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                int templateflag = request.getParameter("templateflag")!=null ? Integer.parseInt(request.getParameter("templateflag")) : 0;

                ArrayList<TaxInvoiceSubReport> SalesReturnTableList = new ArrayList<TaxInvoiceSubReport>();
                try {
                    int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : moduleId;
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String invno = "";
                    Date entryDate = null;
                    long entryDateLong = 0;
                    String memo = "", currencyCode = "", title = "";
                    String Customername = "", customerid = "";
                    String Accountcode = "";
                    String custadd = "";
                    String salesperson = "", salespersoncode = "";
                    String attn = "";
                    String refno = "", debitorcredit = "", filename = "",gstRegNo="";

                    SalesReturn sr = null;
                    PurchaseReturn pr = null;
                    CreditNote cn = null;
                    DebitNote dn = null;
                    
                    double total = 0;
                    double totalTaxAmount = 0;
                    double taxPercentages = 0;
                    double taxAmount = 0;
                    Object[] params = null;
                    HashMap<String, Object> requestParams = null;
                    
                    //=========params to get row details=================
                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    order_by.add("srno");
                    order_type.add("asc");
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    
                   gstRegNo = StringUtil.isNullOrEmpty(companyAccountPreferences.getGstNumber())?"":("\nGST Registration Number:"+companyAccountPreferences.getGstNumber());
                    switch(moduleid){
                        case Constants.Acc_Sales_Return_ModuleId : 
                            sr = (SalesReturn) kwlCommonTablesDAOObj.getClassObject(SalesReturn.class.getName(), billid);

                            invno = sr.getSalesReturnNumber();
                            entryDate = sr.getOrderDate();
                            entryDate = sr.getOrderDate();
                            memo = sr.getMemo() != null ? sr.getMemo() : "";
                            Customername = sr.getCustomer().getName() != null ? sr.getCustomer().getName() : "";
                            Accountcode = sr.getCustomer().getAcccode() != null ? sr.getCustomer().getAcccode() : "";
                            customerid = sr.getCustomer().getID();

                            addressParams.put("customerid", customerid);
                            CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                            attn = customerAddressDetails != null ? customerAddressDetails.getContactPerson() != null ? customerAddressDetails.getContactPerson() : "" : "";
                            custadd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                            currencyCode = sr.getCurrency().getCurrencyCode();
                            title = "CUSTOMER RETURN NOTE";
                            filename = "SalesReturn";

                            filter_params.add(sr.getID());
                            filter_names.add("salesReturn.ID");
                            invRequestParams.put("filter_names", filter_names);
                            invRequestParams.put("filter_params", filter_params);
                            
                            idresult = accInvoiceDAOobj.getSalesReturnDetails(invRequestParams);
                            itr = idresult.getEntityList().iterator();
                            params = getSalesReturnRows(itr, companyid, sr);
                            
                            requestParams = new HashMap<String, Object>();
                            if (sr.getTax() != null) {
                                requestParams.put("transactiondate", sr.getOrderDate());
                                requestParams.put("taxid", sr.getTax().getID());
                                requestParams.put(Constants.companyKey, companyid);
                                KwlReturnObject taxResult = accTaxObj.getTax(requestParams);
                                List taxList = taxResult.getEntityList();
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercentages = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                            break;
                            
                        case Constants.Acc_Purchase_Return_ModuleId : 
                            pr = (PurchaseReturn) kwlCommonTablesDAOObj.getClassObject(PurchaseReturn.class.getName(), billid);

                            invno = pr.getPurchaseReturnNumber();
                            entryDate = pr.getOrderDate();
                            memo = pr.getMemo() != null ? pr.getMemo() : "";
                            Customername = pr.getVendor().getName() != null ? pr.getVendor().getName() : "";
                            Accountcode = pr.getVendor().getAcccode() != null ? pr.getVendor().getAcccode() : "";
                            customerid = pr.getVendor().getID();

                            addressParams.put("vendorid", customerid);
                            VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                            attn = vendorAddressDetails != null ? vendorAddressDetails.getContactPerson() != null ? vendorAddressDetails.getContactPerson() : "" : "";
                            custadd = accountingHandlerDAOobj.getVendorAddress(addressParams);
                            currencyCode = pr.getCurrency().getCurrencyCode();
                            title = "SUPPLIER RETURN NOTE";
                            filename = "PurchaseReturn";

                            filter_params.add(pr.getID());
                            filter_names.add("purchaseReturn.ID");
                            invRequestParams.put("filter_names", filter_names);
                            invRequestParams.put("filter_params", filter_params);
                            
                            idresult = accGoodsReceiptobj.getPurchaseReturnDetails(invRequestParams);
                            itr = idresult.getEntityList().iterator();
                            params = getPurchaseReturnRows(itr, companyid, pr);
                            
                            requestParams = new HashMap<String, Object>();
                            if (pr.getTax() != null) {
                                requestParams.put("transactiondate", pr.getOrderDate());
                                requestParams.put("taxid", pr.getTax().getID());
                                requestParams.put(Constants.companyKey, companyid);
                                KwlReturnObject taxResult = accTaxObj.getTax(requestParams);
                                List taxList = taxResult.getEntityList();
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercentages = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                            break;
                            
                        case Constants.Acc_Credit_Note_ModuleId :
                            cn = (CreditNote) kwlCommonTablesDAOObj.getClassObject(CreditNote.class.getName(), billid);

                            invno = cn.getCreditNoteNumber();
                            entryDate = cn.getCreationDate();
                            entryDateLong = cn.getCreatedon();
                            memo = cn.getMemo() != null ? cn.getMemo() : "";
                            Customername = cn.getCustomer()!=null ? (cn.getCustomer().getName() != null ? cn.getCustomer().getName() : "") : (cn.getVendor()!=null ? (cn.getVendor().getName()!= null ? cn.getVendor().getName() : "") : "");
                            Accountcode = cn.getCustomer()!=null ? (cn.getCustomer().getAcccode() != null ? cn.getCustomer().getAcccode() : "") : (cn.getVendor()!=null ? (cn.getVendor().getAcccode()!= null ? cn.getVendor().getAcccode() : "") : "");
                            customerid = cn.getCustomer()!=null ? (cn.getCustomer().getID() != null ? cn.getCustomer().getID() : "") : (cn.getVendor()!=null ? (cn.getVendor().getID()!= null ? cn.getVendor().getID() : "") : "");

                            if(cn.getCustomer()!=null) {
                                addressParams.put("customerid", customerid);
                                CustomerAddressDetails cnCustomerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                                attn = cnCustomerAddressDetails != null ? cnCustomerAddressDetails.getContactPerson() != null ? cnCustomerAddressDetails.getContactPerson() : "" : "";
                                custadd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                            } else if(cn.getVendor()!=null){
                                addressParams.put("vendorid", customerid);
                                VendorAddressDetails cnVendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                                attn = cnVendorAddressDetails != null ? cnVendorAddressDetails.getContactPerson() != null ? cnVendorAddressDetails.getContactPerson() : "" : "";
                                custadd = accountingHandlerDAOobj.getVendorAddress(addressParams);
                            }
                            currencyCode = cn.getCurrency().getCurrencyCode();
                            title = "CREDIT NOTE";
                            debitorcredit = "credit";
                            filename = "CreditNote";
                            
                            sr = cn.getSalesReturn();
                            filter_params.add(sr.getID());
                            filter_names.add("salesReturn.ID");
                            invRequestParams.put("filter_names", filter_names);
                            invRequestParams.put("filter_params", filter_params);
                            
                            idresult = accInvoiceDAOobj.getSalesReturnDetails(invRequestParams);
                            itr = idresult.getEntityList().iterator();
                            params = getSalesReturnRows(itr, companyid, sr);
                            
                            requestParams = new HashMap<String, Object>();
                            if (sr.getTax() != null) {
                                requestParams.put("transactiondate", sr.getOrderDate());
                                requestParams.put("taxid", sr.getTax().getID());
                                requestParams.put(Constants.companyKey, companyid);
                                KwlReturnObject taxResult = accTaxObj.getTax(requestParams);
                                List taxList = taxResult.getEntityList();
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercentages = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                            break;
                            
                        case Constants.Acc_Debit_Note_ModuleId :
                            dn = (DebitNote) kwlCommonTablesDAOObj.getClassObject(DebitNote.class.getName(), billid);

                            invno = dn.getDebitNoteNumber();
                            entryDate = dn.getCreationDate();
                            entryDateLong = dn.getCreatedon();
                            memo = dn.getMemo() != null ? dn.getMemo() : "";
                            Customername = dn.getCustomer()!=null ? (dn.getCustomer().getName() != null ? dn.getCustomer().getName() : "") : (dn.getVendor()!=null ? (dn.getVendor().getName()!= null ? dn.getVendor().getName() : "") : "");
                            Accountcode = dn.getCustomer()!=null ? (dn.getCustomer().getAcccode() != null ? dn.getCustomer().getAcccode() : "") : (dn.getVendor()!=null ? (dn.getVendor().getAcccode()!= null ? dn.getVendor().getAcccode() : "") : "");
                            customerid = dn.getCustomer()!=null ? (dn.getCustomer().getID() != null ? dn.getCustomer().getID() : "") : (dn.getVendor()!=null ? (dn.getVendor().getID()!= null ? dn.getVendor().getID() : "") : "");

                            if(dn.getCustomer()!=null) {
                                addressParams.put("customerid", customerid);
                                CustomerAddressDetails cnCustomerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                                attn = cnCustomerAddressDetails != null ? cnCustomerAddressDetails.getContactPerson() != null ? cnCustomerAddressDetails.getContactPerson() : "" : "";
                                custadd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                            } else if(dn.getVendor()!=null){
                                addressParams.put("vendorid", customerid);
                                VendorAddressDetails cnVendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                                attn = cnVendorAddressDetails != null ? cnVendorAddressDetails.getContactPerson() != null ? cnVendorAddressDetails.getContactPerson() : "" : "";
                                custadd = accountingHandlerDAOobj.getVendorAddress(addressParams);
                            }
                            currencyCode = dn.getCurrency().getCurrencyCode();
                            title = "DEBIT NOTE";
                            debitorcredit = "debit";
                            filename = "DebitNote";
                            
                            pr = dn.getPurchaseReturn();
                            filter_params.add(pr.getID());
                            filter_names.add("purchaseReturn.ID");
                            invRequestParams.put("filter_names", filter_names);
                            invRequestParams.put("filter_params", filter_params);
                            
                            requestParams = new HashMap<String, Object>();
                            if (pr.getTax() != null) {
                                requestParams.put("transactiondate", pr.getOrderDate());
                                requestParams.put("taxid", pr.getTax().getID());
                                requestParams.put(Constants.companyKey, companyid);
                                KwlReturnObject taxResult = accTaxObj.getTax(requestParams);
                                List taxList = taxResult.getEntityList();
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercentages = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                            
                            idresult = accGoodsReceiptobj.getPurchaseReturnDetails(invRequestParams);
                            itr = idresult.getEntityList().iterator();
                            params = getPurchaseReturnRows(itr, companyid, pr);
                            break;
                    }
                    
                    total = (Double) params[0];
                    totalTaxAmount = (Double) params[1];
                    SalesReturnTableList = (ArrayList<TaxInvoiceSubReport>) params[2];
                    SalesReturnMap = (Map<String, Object>) params[3];
                    refno = (String) params[4];
                    salesperson = (String) params[5];
                    salespersoncode = (String) params[6];
                    
                    double taxamt = (taxPercentages == 0 ? 0 : total * taxPercentages / 100);
                    totalTaxAmount += taxamt;
                    
                    SalesReturnMap.put("TableDataset", new JRBeanCollectionDataSource(SalesReturnTableList));
                    ArrayList datePojoList = new ArrayList();
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    if(entryDate!=null) {
//                        datePojo.setDate(df.format(entryDate));
                        datePojo.setDate(authHandler.getUserDateFormatterWithoutTimeZone(request).format(entryDate));
                    } else {
                        datePojo.setDate(df.format(entryDateLong));
                    }
                    datePojoList.add(datePojo);

                    SalesReturnMap.put("companyname", company.getCompanyName() != null ? company.getCompanyName() : "");
                    SalesReturnMap.put("companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj)+gstRegNo);
                    SalesReturnMap.put("currencycode", currencyCode);
                    SalesReturnMap.put("attn", attn);
                    SalesReturnMap.put("amountdue", currencyCode + " " + authHandler.formattedCommaSeparatedAmount((total + totalTaxAmount), companyid));
                    SalesReturnMap.put("totalamount", currencyCode + " " + authHandler.formattedCommaSeparatedAmount(total, companyid));
                    SalesReturnMap.put("taxamount", "" + authHandler.formattedCommaSeparatedAmount(totalTaxAmount, companyid));
                    SalesReturnMap.put("taxpercent", taxPercentages == 0 ? "" : authHandler.formattedCommaSeparatedAmount(taxPercentages, companyid)+"%");
                    SalesReturnMap.put("remarks", memo);
                    SalesReturnMap.put("no",invno);
                    SalesReturnMap.put("supplier",Customername+"\n"+custadd);
                    SalesReturnMap.put("from",salesperson);
                    SalesReturnMap.put("suppliercode", Accountcode);
                    SalesReturnMap.put("yourref", refno);
                    SalesReturnMap.put("templateflag", ""+templateflag);
                    SalesReturnMap.put("title", title);
                    SalesReturnMap.put("debitorcredit", debitorcredit);
                    SalesReturnMap.put("smcode", salespersoncode);

                    SalesReturnMap.put("format", "pdf");
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + ".pdf\"");
                    try {
                        InputStream inputStream = null;
                        
                        if(moduleid == Constants.Acc_Sales_Return_ModuleId || moduleid == Constants.Acc_Purchase_Return_ModuleId) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/FastenSalesPurchaseReturn.jrxml");
                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/FastenDebitCreditNote.jrxml");
                        }
                        
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, SalesReturnMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                } catch (ServiceException ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (!StringUtil.isNullOrEmpty(billids)) {
                    break;
                }
            }
        }
        return list;
    }
    
    public Object[] getSalesReturnRows(Iterator itr, String companyid, SalesReturn sr) {
        Object[] returnValues = new Object[7];
        String refno = "", salesperson = "", salespersoncode = "";
                
        //=============Rows Operations====================
        ArrayList<TaxInvoiceSubReport> SalesReturnTableList = new ArrayList<TaxInvoiceSubReport>();
        double total = 0;
        double rowtaxamount = 0;
        double totalTaxAmount = 0;
        int i = 0;
        while (itr.hasNext()) {
            i++;
            TaxInvoiceSubReport srTable = new TaxInvoiceSubReport();
            String prodId = "", Uom = "";
            String prodName = "";
            String prodDesc = "";
            double Uprice = 0;
            double amount = 0;
            double quantity = 0;
            double discount = 0;

            SalesReturnDetail row = (SalesReturnDetail) itr.next();
            prodId = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
            prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
            quantity = row.getReturnQuantity();
            Uom = row.getUom() == null ? "" : row.getUom().getNameEmptyforNA();

            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                
                    prodDesc =  StringUtil.DecodeText(row.getDescription());
                
            }
            if ((row.getDodetails() != null) && (!(row.getDodetails().equals("undefined")))) {
                refno = row.getDodetails().getDeliveryOrder().getDeliveryOrderNumber();
                if (row.getDodetails().getCidetails() != null) {
                    salesperson = row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson().getValue()) ? row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson().getValue() : "" : "";
                    salespersoncode = row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson().getCode()) ? row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson().getCode() : "" : "";
                }
            } else if (row.getCidetails() != null) {
                refno = row.getCidetails().getInvoice().getInvoiceNumber();
                salesperson = row.getCidetails().getInvoice().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getCidetails().getInvoice().getMasterSalesPerson().getValue()) ? row.getCidetails().getInvoice().getMasterSalesPerson().getValue() : "" : "";
                salespersoncode = row.getCidetails().getInvoice().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getCidetails().getInvoice().getMasterSalesPerson().getCode()) ? row.getCidetails().getInvoice().getMasterSalesPerson().getCode() : "" : "";
            } else {
                refno = "";
            }
            Uprice = row.getRate();
            amount = Uprice * quantity;
            if (row.getDiscountispercent() == 0) {
                discount = row.getDiscount();//Flat
            } else {
                discount = amount * (row.getDiscount() / 100);//Percentage Value
            }
            amount -= discount;
            total += amount;
            rowtaxamount = row.getRowTaxAmount();
            totalTaxAmount += rowtaxamount;

            srTable.setName(prodName);
            srTable.setCode(prodId);
            srTable.setProductDescription(prodDesc);
            srTable.setQty(authHandler.formattedQuantity(quantity, companyid) + " " + Uom);
            srTable.setuPrice(authHandler.formattedAmount(Uprice, companyid));
            srTable.setProductAmount(authHandler.formattedAmount(amount, companyid));
            SalesReturnTableList.add(srTable);
        }
        
        returnValues[0] = total;
        returnValues[1] = totalTaxAmount;
        returnValues[2] = SalesReturnTableList;
        
        //=============Custom Data Operations====================
        Map<String, Object> SalesReturnMap = new HashMap<String, Object>();
        
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();

        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Sales_Return_ModuleId, 0, 1));

        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

        Map<String, Object> variableMap = new HashMap<String, Object>();
        SalesReturnCustomData salesReturnCustomData = (SalesReturnCustomData) sr.getSalesReturnCustomData();
        AccountingManager.setCustomColumnValues(salesReturnCustomData, FieldMap, replaceFieldMap, variableMap);
        for (Entry<String, Object> varEntry : variableMap.entrySet()) {
            String coldata = varEntry.getValue().toString();

            if (!StringUtil.isNullOrEmpty(coldata)) {
                if ((varEntry.getKey().split("_")[1]).equals("Our Ref")) {
                    try {
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                        if (fieldComboData != null) {
                            coldata = fieldComboData.getValue();
                        }
                        SalesReturnMap.put("ourref", coldata);
                    } catch (ServiceException ex) {
                        Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        returnValues[3] = SalesReturnMap;
        returnValues[4] = refno;
        returnValues[5] = salesperson;
        returnValues[6] = salespersoncode;
        
        return returnValues;
    }
    
    public Object[] getPurchaseReturnRows(Iterator itr, String companyid, PurchaseReturn pr) {
        Object[] returnValues = new Object[7];
        String refno = "", salesperson = "", salespersoncode = "";
        
        //=============Rows Operations====================
        ArrayList<TaxInvoiceSubReport> SalesReturnTableList = new ArrayList<TaxInvoiceSubReport>();
        double total = 0;
        double rowtaxamount = 0;
        double totalTaxAmount = 0;
        int i = 0;
        while (itr.hasNext()) {
            i++;
            TaxInvoiceSubReport srTable = new TaxInvoiceSubReport();
            String prodId = "", Uom = "";
            String prodName = "";
            String prodDesc = "";
            double Uprice = 0;
            double amount = 0;
            double quantity = 0;
            double discount = 0;

            PurchaseReturnDetail row = (PurchaseReturnDetail) itr.next();
            prodId = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
            prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
            quantity = row.getReturnQuantity();
            Uom = row.getUom() == null ? "" : row.getUom().getNameEmptyforNA();

            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                
                    prodDesc =  StringUtil.DecodeText(row.getDescription());
                
            }
            if ((row.getGrdetails() != null) && (!(row.getGrdetails().equals("undefined")))) {
                refno = row.getGrdetails().getGrOrder().getGoodsReceiptOrderNumber();
                if (row.getGrdetails().getVidetails() != null) {
                    salesperson = row.getGrdetails().getVidetails().getGoodsReceipt().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getGrdetails().getVidetails().getGoodsReceipt().getMasterSalesPerson().getValue()) ? row.getGrdetails().getVidetails().getGoodsReceipt().getMasterSalesPerson().getValue() : "" : "";
                    salespersoncode = row.getGrdetails().getVidetails().getGoodsReceipt().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getGrdetails().getVidetails().getGoodsReceipt().getMasterSalesPerson().getCode()) ? row.getGrdetails().getVidetails().getGoodsReceipt().getMasterSalesPerson().getValue() : "" : "";
                }
            } else if (row.getVidetails() != null) {
                refno = row.getVidetails().getGoodsReceipt().getGoodsReceiptNumber();
                salesperson = row.getVidetails().getGoodsReceipt().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getVidetails().getGoodsReceipt().getMasterSalesPerson().getValue()) ? row.getVidetails().getGoodsReceipt().getMasterSalesPerson().getValue() : "" : "";
                salespersoncode = row.getVidetails().getGoodsReceipt().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getVidetails().getGoodsReceipt().getMasterSalesPerson().getCode()) ? row.getVidetails().getGoodsReceipt().getMasterSalesPerson().getCode() : "" : "";
            } else {
                refno = "";
            }
            Uprice = row.getRate();
            amount = Uprice * quantity;
            if (row.getDiscountispercent() == 0) {
                discount = row.getDiscount();//Flat
            } else {
                discount = amount * (row.getDiscount() / 100);//Percentage Value
            }
            amount -= discount;
            total += amount;
            rowtaxamount = row.getRowTaxAmount();
            totalTaxAmount += rowtaxamount;

            srTable.setName(prodName);
            srTable.setCode(prodId);
            srTable.setProductDescription(prodDesc);
            srTable.setQty(authHandler.formattedQuantity(quantity, companyid) + " " + Uom);
            srTable.setuPrice(authHandler.formattedAmount(Uprice, companyid));
            srTable.setProductAmount(authHandler.formattedAmount(amount, companyid));
            SalesReturnTableList.add(srTable);
        }
        
        returnValues[0] = total;
        returnValues[1] = totalTaxAmount;
        returnValues[2] = SalesReturnTableList;
        
        //=============Custom Data Operations====================
        Map<String, Object> SalesReturnMap = new HashMap<String, Object>();
        
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();

        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Purchase_Return_ModuleId, 0, 1));

        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

        Map<String, Object> variableMap = new HashMap<String, Object>();
        PurchaseReturnCustomData purchaseReturnCustomData = (PurchaseReturnCustomData) pr.getPurchaseReturnCustomData();
        AccountingManager.setCustomColumnValues(purchaseReturnCustomData, FieldMap, replaceFieldMap, variableMap);
        for (Entry<String, Object> varEntry : variableMap.entrySet()) {
            String coldata = varEntry.getValue().toString();

            if (!StringUtil.isNullOrEmpty(coldata)) {
                if ((varEntry.getKey().split("_")[1]).equals("Our Ref")) {
                    try {
                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                        if (fieldComboData != null) {
                            coldata = fieldComboData.getValue();
                        }
                        SalesReturnMap.put("ourref", coldata);
                    } catch (ServiceException ex) {
                        Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        returnValues[3] = SalesReturnMap;
        returnValues[4] = refno;
        returnValues[5] = salesperson;
        returnValues[6] = salespersoncode;
        
        return returnValues;
    }
    public void getPurchaseOrdersForXls(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        JSONArray DataJArr = new JSONArray();
        JSONArray tempJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        SalesInvoiceRegisterSubReport salesinvoiceSubReport = new SalesInvoiceRegisterSubReport();
        try {
            HashMap<String, Object> requestParams = accPurchaseOrderServiceDAOobj.getPurchaseOrderMap(request);
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids).split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            boolean isConsignment = request.getParameter("isConsignment") != null ? Boolean.parseBoolean(request.getParameter("isConsignment")) : false;
            boolean eliminateflag = consolidateFlag;
            if (consolidateFlag) {
                requestParams.put(Constants.start, "");
                requestParams.put(Constants.limit, "");
            }
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cpresult.getEntityList().get(0);
            Boolean isTradingFlow = false;
            if (pref != null && pref.isWithInvUpdate()) {
                isTradingFlow = true;
            }
            requestParams.put("isTradingFlow", isTradingFlow);
            if (isConsignment) {
                requestParams.put("isConsignment", isConsignment);
            }

            KwlReturnObject userResult = accountingHandlerDAOobj.getObject(User.class.getName(), sessionHandlerImpl.getUserid(request));
            User user = (User) userResult.getEntityList().get(0);
            if (!StringUtil.isNullOrEmpty(user.getDepartment())) {
                requestParams.put("userDepartment", user.getDepartment());
            }

            KwlReturnObject result = null;
            String companyid = "";
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                boolean isForTemplate = false;
                String billId = "";
                if (!StringUtil.isNullOrEmpty(request.getParameter("isForTemplate"))) {
                    isForTemplate = Boolean.parseBoolean(request.getParameter("isForTemplate"));
                    requestParams.put("isForTemplate", isForTemplate);
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.billid))) {
                    billId = request.getParameter(Constants.billid);
                    requestParams.put("billId", billId);
                }
                boolean isOutstanding = false;

//                result = accPurchaseOrderobj.getPurchaseOrdersMerged(requestParams);
                isOutstanding = request.getParameter("isOutstanding") != null ? Boolean.parseBoolean(request.getParameter("isOutstanding")) : false;
                requestParams.put("isOutstanding", isOutstanding);

                if (!isOutstanding) {
                    result = accPurchaseOrderobj.getPurchaseOrdersMerged(requestParams);
                } else {
                    result = accPurchaseOrderobj.getOutstandingPurchaseOrders(requestParams);
                }

                DataJArr = accPurchaseOrderServiceDAOobj.getPurchaseOrdersJsonMerged(requestParams, result.getEntityList(), DataJArr);
                for (int i = 0; i < DataJArr.length(); i++) {
                    HashSet hs = new HashSet();
                    String dono = "", doDate = "";
                    JSONObject jobj = new JSONObject();
                    jobj = DataJArr.getJSONObject(i);

                    String billid = jobj.optString(Constants.billid, "");   //Invoice ID 
                    String invoiceNumber = jobj.optString("billno", "");    //Invoice Number
                    String customername = jobj.optString("personname", "");
                    String customercode = jobj.optString("personcode", "");
                    String creationDate = jobj.optString("date", "");
                    String dueDate = jobj.optString("duedate", "");
                    String docClass = jobj.optString("Custom_Document Class", "");

                    requestParams.put("billId", billid);
                    requestParams.put("bills", billid.split(","));
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, billid);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("closeflag", null);
                    requestParams.put("dateFormatValue", authHandler.getDateOnlyFormat(request));
                    requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));

                    int srno = 1;
                    JSONArray DataRowsArr = accPurchaseOrderServiceDAOobj.getPurchaseOrderRows(requestParams);
                    jobj.put("DataRowsArr", DataRowsArr);
                    tempJArr.put(jobj);
                }
            }
            exportXlsReport(response, Constants.ACC_PURCHASE_ORDER, Constants.ACC_PURCHASE_ORDER, tempJArr, companyid);

        } catch (Exception ex) {
            issuccess = false;
            msg = "accPurchaseOrderController.getPurchaseOrders : " + ex.getMessage();
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void exportXlsReport(HttpServletResponse response, String title, String fileName, JSONArray DataJArr, String companyid) throws ServiceException, SessionExpiredException, JSONException {
        Workbook wb = new HSSFWorkbook();
        Sheet sheet = wb.createSheet(title);
        Row row = sheet.createRow((short) 0);

        int rowCount = 0;
        int i = 0;
        row = sheet.createRow((short) rowCount);
        row.createCell(0).setCellValue(title + " Number");
        row.createCell(1).setCellValue(title + " Date");
        row.createCell(2).setCellValue("Due Date");
        row.createCell(3).setCellValue("Name");
        row.createCell(4).setCellValue("Alias Name");
        row.createCell(5).setCellValue("Currency");
        row.createCell(6).setCellValue("Discount");
        row.createCell(7).setCellValue("Tax Name");
        row.createCell(8).setCellValue("Tax Amount");
        row.createCell(9).setCellValue("Terms Amount");
        row.createCell(10).setCellValue("Total Amount");
        row.createCell(11).setCellValue("Total Amount (In Base Currency))");
        row.createCell(12).setCellValue("Memo");
        row.createCell(13).setCellValue("Status");
        row.createCell(14).setCellValue("Last Edited By");

        rowCount++;
        for (i = 0; i < DataJArr.length(); i++) {
            JSONObject jobj = new JSONObject();
            jobj = DataJArr.getJSONObject(i);
            row = sheet.createRow((short) rowCount);
            row.createCell(0).setCellValue(jobj.optString("billno", ""));
            row.createCell(1).setCellValue(jobj.optString("date", ""));
            row.createCell(2).setCellValue(jobj.optString("duedate", ""));
            row.createCell(3).setCellValue(jobj.optString("personname", ""));
            row.createCell(4).setCellValue(jobj.optString("aliasname", ""));
            row.createCell(5).setCellValue(jobj.has("currencyCode") ? jobj.optString("currencyCode", "") : jobj.optString("currencycode", ""));
            row.createCell(6).setCellValue(authHandler.formattedAmount(jobj.optDouble("discountval", 0), companyid));
            row.createCell(7).setCellValue(jobj.optString("taxname", ""));
            row.createCell(8).setCellValue(authHandler.formattedAmount(jobj.optDouble("taxamount", 0), companyid));
            row.createCell(9).setCellValue(authHandler.formattedAmount(jobj.optDouble("termamount", 0), companyid));
            row.createCell(10).setCellValue(authHandler.formattedAmount(jobj.optDouble("amount", 0), companyid));
            row.createCell(11).setCellValue(authHandler.formattedAmount(jobj.optDouble("amountinbase", 0), companyid));
            row.createCell(12).setCellValue(jobj.optString("memo", ""));
            row.createCell(13).setCellValue(jobj.optString("status", ""));
            row.createCell(14).setCellValue(jobj.optString("lasteditedby", ""));

            JSONArray DataRowsArr = jobj.getJSONArray("DataRowsArr");
            int j = 0;
            rowCount++;

            row = sheet.createRow((short) rowCount);
            row.createCell(15).setCellValue("Sr.No");
            row.createCell(16).setCellValue("Product ID");
            row.createCell(17).setCellValue("Product Name");
            row.createCell(18).setCellValue("Product Type");
            row.createCell(19).setCellValue("Qty");
            row.createCell(20).setCellValue(title.equals(Constants.Delivery_Order) ? "Delivered Qty" : "Rate");
            row.createCell(21).setCellValue("Discount");
            row.createCell(22).setCellValue("Tax Amount");
            row.createCell(23).setCellValue("Amount");
            rowCount++;
            for (j = 0; j < DataRowsArr.length(); j++) {
                row = sheet.createRow((short) rowCount);
                JSONObject jobjRow = new JSONObject();
                jobjRow = DataRowsArr.getJSONObject(j);
                row.createCell(15).setCellValue((j + 1) + "");
                row.createCell(16).setCellValue(jobjRow.optString("pid", ""));
                row.createCell(17).setCellValue(jobjRow.optString("productname", ""));
                row.createCell(18).setCellValue(jobjRow.optString("type", ""));
                row.createCell(19).setCellValue(authHandler.formattedQuantity(jobjRow.optDouble("quantity", 0), companyid));//jobjRow.optString("quantity", ""));
                row.createCell(20).setCellValue(authHandler.formattedQuantity((title.equals(Constants.Delivery_Order) ? jobjRow.optDouble("dquantity", 0) : jobjRow.optDouble("rate", 0)), companyid));
                row.createCell(21).setCellValue(authHandler.formattedAmount(jobjRow.optDouble("discountvalue", 0), companyid));
                row.createCell(22).setCellValue(authHandler.formattedAmount(jobjRow.optDouble("taxamount", 0), companyid));
                row.createCell(23).setCellValue(authHandler.formattedAmount(jobjRow.optDouble("amount", 0), companyid));
                rowCount++;
            }
        }
        if (title.equals(Constants.VENDOR_INVOICE) || title.equals(Constants.CUSTOMER_INVOICE)) {
            sheet.setColumnHidden(13, true);
        }
        if (title.equals(Constants.Delivery_Order)) {
            sheet.setColumnHidden(6, true);
            sheet.setColumnHidden(7, true);
            sheet.setColumnHidden(8, true);
            sheet.setColumnHidden(9, true);
            sheet.setColumnHidden(21, true);
            sheet.setColumnHidden(22, true);
            sheet.setColumnHidden(23, true);

        }
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            wb.write(os);
            os.close();
            String filename = fileName + "  Register";
            response.setHeader("Content-Disposition", "attachment; filename=\"" + filename + ".xls\"");
            response.setContentType("application/octet-stream");
            response.setContentLength(os.size());
            response.getOutputStream().write(os.toByteArray());

            response.getOutputStream().flush();
        } catch (IOException ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void exportDeliveryOrderXls(HttpServletRequest request, HttpServletResponse response, JSONArray tempArray) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            HashMap<String, Object> requestParams = accInvoiceServiceDAO.getDeliveryOrdersMap(request);
            boolean pendingapproval = request.getParameter("pendingapproval") != null ? Boolean.parseBoolean(request.getParameter("pendingapproval")) : false;
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String companyid = (consolidateFlag && request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            request.setAttribute(Constants.companyKey, companyid);
            request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
            requestParams.put("pendingapproval", pendingapproval);
            request.setAttribute("isExport", true);

            boolean isUnInvoiced = request.getParameter("isUnInvoiced") != null ? Boolean.parseBoolean(request.getParameter("isUnInvoiced")) : false;
            KwlReturnObject result = null;
            if (!isUnInvoiced) {
                result = accInvoiceDAOobj.getDeliveryOrdersMerged(requestParams);
            } else {
                result = accInvoiceDAOobj.getUnInvoicedDeliveryOrders(requestParams);
            }
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            JSONArray DataJArr = accInvoiceServiceDAO.getDeliveryOrdersJsonMerged(paramJobj, result.getEntityList());
            HashMap fieldMap = new HashMap();
            boolean isFixedAsset = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isFixedAsset));
            boolean isConsignment = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isConsignment));
            boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isLeaseFixedAsset))) ? Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset)) : false;
            Map reqParam = new HashMap();
            reqParam.put("companyid", companyid);
            reqParam.put("isFixedAsset", isFixedAsset);
            reqParam.put("isConsignment", isConsignment);
            reqParam.put("isLeaseFixedAsset", isLeaseFixedAsset);
            fieldMap = accInvoiceServiceDAO.getDODetailsCustomFieldMap(reqParam);
            for (int i = 0; i < DataJArr.length(); i++) {
                HashSet hs = new HashSet();
                jobj = new JSONObject();
                jobj = DataJArr.getJSONObject(i);

                String billid = jobj.optString(Constants.billid, "");   //Invoice ID 
                String invoiceNumber = jobj.optString("billno", "");    //Invoice Number
                String customername = jobj.optString("personname", "");
                String customercode = jobj.optString("personcode", "");
                String creationDate = jobj.optString("date", "");
                String dueDate = jobj.optString("duedate", "");
                String docClass = jobj.optString("Custom_Document Class", "");

                requestParams.put("billId", billid);
                requestParams.put("bills", billid.split(","));
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                request.setAttribute(Constants.billid, billid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put("closeflag", null);
                requestParams.put("dateFormatValue", authHandler.getDateOnlyFormat(request));
                requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));

                int srno = 1;

                JSONObject dOrows = accInvoiceServiceDAO.getDeliveryOrderRows(request, fieldMap);
                JSONArray DataRowsArr = dOrows.getJSONArray("data");
                jobj.put("DataRowsArr", DataRowsArr);
                tempArray.put(jobj);
            }


        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    public List<Object> exportCustomerQuotationForTonyFibreGlass(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        Integer type = 0;
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;
                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    if (!StringUtil.isNullOrEmpty(request.getParameter("type"))) {
                        type = Integer.parseInt(request.getParameter("type"));
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONObject DataJObjRows = new JSONObject();
                    JSONArray DataJArrRows = new JSONArray();
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";
                    HashMap<String, Object> requestParams = accSalesOrderServiceDAOobj.getSalesOrdersMap(request);
                    requestParams.put("billId", invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("dataFormatValue", authHandler.getDateOnlyFormat(request));
                    requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));
                    if (StringUtil.isNullOrEmpty(request.getParameter("archieve"))) {
                        requestParams.put("archieve", 0);
                    } else {
                        requestParams.put("archieve", Integer.parseInt(request.getParameter("archieve")));
                    }
                    requestParams.put("closeflag", null);
                    requestParams.put("sopolinkflag", null);
                    requestParams.put("linkFlagInSO", null);
                    requestParams.put("linkFlagInInv", null);
                    requestParams.put("dtype", request.getParameter("dtype"));
                    boolean isOrder = false;
                    String isorder = request.getParameter("isOrder");
                    if (!StringUtil.isNullOrEmpty(isorder) && StringUtil.equal(isorder, "true")) {
                        isOrder = true;
                    }
                    requestParams.put("isOrder", isOrder);
                    requestParams.put("userId", sessionHandlerImpl.getUserid(request));
                    KwlReturnObject invoiceResult = accSalesOrderDAOobj.getQuotations(requestParams);
                    DataJArr = accSalesOrderServiceDAOobj.getQuotationsJson(requestParams, invoiceResult.getEntityList(), DataJArr);
                    requestParams.put("bills", invoiceID);
                    requestParams.put("dtype", "report");//to get Values of Custom Field in Case of Export
                    DataJObjRows = accSalesOrderServiceDAOobj.getQuotationRows(requestParams);
                    ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();
                    Map<String, Object> rows = new HashMap<String, Object>();
                    double subtotal = 0;
                    if (DataJObjRows.length() > 0) {
                        DataJArrRows = DataJObjRows.getJSONArray("data");
                        for (int i = 0; i < DataJArrRows.length(); i++) {
                            JSONObject jobj = DataJArrRows.getJSONObject(i);
                            rows = new HashMap<String, Object>();
                            double productamount = 0;
                            if (jobj.optDouble("discountispercent", 0) == 0) {
                                productamount = (jobj.optDouble("rate", 0) * jobj.optDouble("quantity", 0)) - jobj.optDouble("prdiscount", 0);//Flat
                            } else {
                                productamount = (jobj.optDouble("rate", 0) * jobj.optDouble("quantity", 0)) - ((jobj.optDouble("rate", 0) * jobj.optDouble("quantity", 0)) * (jobj.optDouble("prdiscount", 0) / 100));//Percentage Value
                            }
                            if (type == 1) {
                                //Fpr Concrete Floaring Quatation
                                rows.put("Price_Double", authHandler.round(productamount, companyid));
                                rows.put("Product_Name", jobj.optString("productname", ""));
                                rows.put("Area", jobj.optString("Custom_Area", ""));
                                rows.put("Treatment_Area", jobj.optString("Custom_Treatment Area", ""));
                                rows.put("AmountCurrency", jobj.optString("currencysymbol", "")+" ");
                            } else {
                                String temp = storageHandlerImpl.GetProfileImgStorePath() + Constants.ProductImages;
                                temp = temp + jobj.optString("productid") + ".png";
                                rows.put("Product_Image", temp);
                                rows.put("Material", "");//not in use at line shifted to global level
                                rows.put("Accessory", jobj.optString("Custom_Accessory", ""));
                                rows.put("Color", jobj.optString("Custom_Product Color", ""));
                                rows.put("Price", jobj.optString("currencysymbol", "") + " " + authHandler.formattedCommaSeparatedAmount(productamount, companyid));
                            }
                            invDetailsList.add(rows);
                        }
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                    JSONObject obj = DataJArr.getJSONObject(0);
                    OnlyDatePojo datePojo = new OnlyDatePojo();
                    datePojo.setDate(obj.optString("dateinuserformat", ""));
                    datePojoList.add(datePojo);
                    invoiceMap.put("Material", obj.optString("Custom_Propose material", ""));
                    String address = obj.optString(Constants.BILLING_ADDRESS, "");
                    invoiceMap.put("Document_NO", obj.optString("billno", ""));
                    invoiceMap.put("CustomerName", "<b>" + obj.optString("personname", "") + "</b><br>" + address);
                    invoiceMap.put("CUSTOMER_TEL", obj.optString(Constants.BILLING_PHONE, ""));
                    invoiceMap.put("CUSTOMER_FAX", obj.optString(Constants.BILLING_FAX, ""));
                    invoiceMap.put("ATTENTION", obj.optString(Constants.BILLING_CONTACT_PERSON, ""));
                    invoiceMap.put("RE", "QUOTATION FOR FIBREGLASS PIPE SPOOL");
                    invoiceMap.put("JOB_SCOP", obj.optString("Custom_Job scope", ""));
                    invoiceMap.put("Payment_Term", obj.optString("Custom_Payment Terms", ""));
                    invoiceMap.put("Validity", obj.optString("Custom_Validity", ""));
                    invoiceMap.put("Delivery_Time", obj.optString("Custom_Delivery Time", ""));
                    
                    String salespersonTel = StringUtil.isNullOrEmpty(obj.optString("salesPersonTel", "")) ? "" : "<br>Tel: " + obj.optString("salesPersonTel", "");
                    String salespersonEmail = StringUtil.isNullOrEmpty(obj.optString("salesPersonEmail", "")) ? "" : "<br>Email:<u>" + obj.optString("salesPersonEmail", "") + "</u>";
                    String salespersondesignation = StringUtil.isNullOrEmpty(obj.optString("salespersondesignation", "")) ? "" : "<br>" + obj.optString("salespersondesignation", "");
                    invoiceMap.put("SalesPersonName", obj.optString("salespersonname", "")+salespersondesignation+salespersonTel+salespersonEmail);
                    invoiceMap.put("companyName", company.getCompanyName() != null ? company.getCompanyName() : "");
                    invoiceMap.put("companyTel", company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
                    invoiceMap.put("companyFax", company.getFaxNumber() != null ? company.getFaxNumber() : "");
                    invoiceMap.put("companyWebsite", company.getWebsite() != null ? company.getWebsite() : "");
                    invoiceMap.put("companyAddress",AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                  
                    // Jrxml For Type 0 ......Pipe Spool Quatation
                    String mainReprotJRXML = "/TonyFibreGlassCustomerQuotation.jrxml";
                    String subReprotJRXML = "/TonyFibreGlassCustomerQuotation_subreport.jrxml";
                    if (type == 1) {
                        //For Concrete Floaring Quatation
                        mainReprotJRXML = "/TonyFibreGlassConcreteFloorLiningCustomerQuotation.jrxml";
                        subReprotJRXML = "/TonyFibreGlassConcreteFloorliningCustomerQuotation_subreport.jrxml";
                        invoiceMap.put("RE", "QUOTATION FOR FIBREGLASS LINING ONTO CONCRETE FLOORING");
                        invoiceMap.put("PersonName", obj.optString("personname", ""));
                        invoiceMap.put("Address", address);
                        invoiceMap.put("Project", obj.optString("Custom_Project", ""));
                        invoiceMap.put("Chemical_Environment", obj.optString("Custom_Test And Documentation / Chemical Environment", ""));
                        invoiceMap.put("Temperature", obj.optString("Custom_Temperature", ""));
                        invoiceMap.put("Proposed_material", obj.optString("Custom_Propose material", ""));
                        invoiceMap.put("Duration_of_work", obj.optString("Custom_Duration of work", ""));
                    }

                    List<String> characters = new ArrayList<String>(26);
                    for (char c = 'a'; c <= 'z' ; c++) {
                        characters.add(String.valueOf(c));
                    }
                    
                    invoiceMap.put("charactersList", characters);
                    invoiceMap.put("SubReportData", new JRBeanCollectionDataSource(invDetailsList));
                    String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("Footrer_Image", footer);

                    InputStream inputStream = null;
                    InputStream inputStreamSubreport = null;

                    inputStreamSubreport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + subReprotJRXML);
                    invoiceMap.put("TITLE", title + obj.optString("billno", ""));
                    JasperDesign jasperDesignSubreport = JRXmlLoader.load(inputStreamSubreport);
                    JasperReport jasperReportSubreport = JasperCompileManager.compileReport(jasperDesignSubreport);
                    invoiceMap.put("SubReport", jasperReportSubreport);
                    title = "Quote ";
                    filename = "CustomerQuote.pdf";
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + mainReprotJRXML);
                    invoiceMap.put("TITLE", title + obj.optString("billno", ""));
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
     public List<Object> exportF1RecreationProformaInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;

                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<TaxInvoice> invList = new ArrayList<TaxInvoice>();
                    ArrayList<TaxInvoiceSubReport> invDetailsList = new ArrayList<TaxInvoiceSubReport>();
                        
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONObject DataJObjRows = new JSONObject();
                    JSONArray DataJArrRows = new JSONArray();
                    KwlReturnObject result = null;
                    List<JSONObject> tempList = new ArrayList<JSONObject>();
                    int type = Integer.parseInt(request.getParameter("type"));
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";
                    
                    HashMap<String, Object> requestParams = accSalesOrderServiceDAOobj.getSalesOrdersMap(request);
                    requestParams.put("billId", invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("dataFormatValue", authHandler.getDateOnlyFormat(request));
                    requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));
                    if (StringUtil.isNullOrEmpty(request.getParameter("archieve"))) {
                        requestParams.put("archieve", 0);
                    } else {
                        requestParams.put("archieve", Integer.parseInt(request.getParameter("archieve")));
                    }
                    requestParams.put("closeflag", null);
                    requestParams.put("sopolinkflag", null);
                    requestParams.put("linkFlagInSO", null);
                    requestParams.put("linkFlagInInv", null);
                    requestParams.put("dtype",request.getParameter("dtype"));
                    boolean isOrder = false;
                    String isorder = request.getParameter("isOrder");
                    if (!StringUtil.isNullOrEmpty(isorder) && StringUtil.equal(isorder, "true")) {
                        isOrder = true;
                    }
                    requestParams.put("isOrder", isOrder);
                    requestParams.put("userId", sessionHandlerImpl.getUserid(request));

                    boolean isLeaseFixedAsset= false;
                    KwlReturnObject quores = accountingHandlerDAOobj.getObject(Quotation.class.getName(), invoiceID);
                    Quotation quotation = (Quotation) quores.getEntityList().get(0);
                    isLeaseFixedAsset = quotation.isLeaseQuotation();
                    requestParams.put("isLeaseFixedAsset",isLeaseFixedAsset);
                    
                    KwlReturnObject invoiceResult = accSalesOrderDAOobj.getQuotations(requestParams);
                    DataJArr = accSalesOrderServiceDAOobj.getQuotationsJson(requestParams, invoiceResult.getEntityList(), DataJArr);
                    requestParams.put("bills", invoiceID);
                    DataJObjRows = accSalesOrderServiceDAOobj.getQuotationRows(requestParams);
                    
                    HashSet<String> linkIds = new HashSet<String>();
                    if(DataJObjRows.length()>0){
                        DataJArrRows=DataJObjRows.getJSONArray("data");
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        TaxInvoiceSubReport invRows = new TaxInvoiceSubReport();
                        String tempLinkTo = jobj.optInt("linktype", -1)==0? jobj.optString("linkto", ""):"";
                        if(!tempLinkTo.equals(""))
                        linkIds.add(tempLinkTo);
                        invRows.setCode(jobj.optString("pid", ""));
                        invRows.setProductDescription(jobj.optString("desc", ""));
                        invRows.setQty(authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                        invRows.setuPrice(authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        invRows.setProductAmount(authHandler.formattedCommaSeparatedAmount(((jobj.optDouble("quantity", 0)*jobj.optDouble("rate", 0))+jobj.optDouble("rowTaxAmount", 0)), companyid));
                        invDetailsList.add(invRows);
                    }
                    }
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));

                    String linkTo = "";
                    for (String l : linkIds) {
                        linkTo += l + ",";
                    }
                    if (linkTo.length() > 1) {
                        linkTo = linkTo.substring(0, linkTo.length() - 1);
                    }
                    
                    JSONObject obj = DataJArr.getJSONObject(0);
                    String imagepath = StorageHandler.GetDocStorePath() + companyid + " " + FileUploadHandler.getCompanyImageExt();
                    TaxInvoice invoice = new TaxInvoice();
                    
                      
                    invoice.setCustcode(obj.optString("personcode", ""));
                    invoice.setCustname(obj.optString("personname", ""));
                    invoice.setAddress(obj.optString(Constants.BILLING_ADDRESS, "").replaceAll("\n", "<br>"));
                    invoice.setContactPerson(obj.optString(Constants.BILLING_CONTACT_PERSON, ""));
                    invoice.setCustomerTel(obj.optString(Constants.BILLING_PHONE, ""));
                    invoice.setCustomerFax(obj.optString(Constants.BILLING_FAX, ""));
                    invoice.setCustomerEmail(obj.optString(Constants.BILLING_EMAIL, ""));
                    invoice.setaccNumber(obj.optString("personcode", ""));
                    
                    invoice.setDate(obj.optString("dateinuserformat", ""));
                    invoice.setInvoiceNo(obj.optString("dateinuserformat", ""));
                    invoice.setdONomber(obj.optString("dateinuserformat", ""));//d/o number
                    invoice.setqtNumber(obj.optString("dateinuserformat", ""));
                    invoice.setpONumber(obj.optString("dateinuserformat", ""));
                    invoice.setSalesPerson(obj.optString("dateinuserformat", ""));
                    invoice.setPaymentTerms(obj.optString("dateinuserformat", ""));
                    invoice.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    invoice.setGrandTotal(authHandler.formattedCommaSeparatedAmount(obj.optDouble("quantity", 0), companyid));
                    invList.add(invoice);

                    invoiceMap.put("currency", obj.optString("dateinuserformat", ""));   
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("imagePath1", fileName1);
                    String fileName2 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("imagePath2", fileName2);
                    invoiceMap.put("invoicesublist", new JRBeanCollectionDataSource(invDetailsList));

                    InputStream inputStream = null;
                    title = "Quote ";
                    filename = "ExchangeQuote_"+ obj.optString("billno", "")+".pdf";
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationExchangeQuotation.jrxml");
                    invoiceMap.put("TITLE", title + obj.optString("billno", ""));
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(invList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }

    @Override
    public List<Object> exportDefaultFormatCreditNoteJasperReportForTonyFibreGlass(HttpServletRequest request, HttpServletResponse response, String billid) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> creditNoteMap = new HashMap<String, Object>();

        JasperPrint jasperPrint = null;
        JasperReport jasperReport = null;
        InputStream inputStream = null;
        double gstTotal = 0;
        double subtotal = 0;


        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));

            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);

            KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), billid);
            CreditNote cn = (CreditNote) result1.getEntityList().get(0);

            String invno = cn.getCreditNoteNumber();
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
//            String entryDate = df.format(cn.getJournalEntry() != null ? cn.getJournalEntry().getEntryDate() : cn.getCreationDate());
            String entryDate = df.format(cn.getCreationDate());
            HashMap<String, Object> addressParams = new HashMap<String, Object>();
            addressParams.put(Constants.companyKey, companyid);
            addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
            addressParams.put("isBillingAddress", true); //true to get billing address

            String code = "", name = "", address = "", memo = "", dncurrency = "", terms = "",smCode = "";

            if (cn.getCustomer() != null) {	//CN For Customer
                addressParams.put("customerid", cn.getCustomer().getID());
                code = (cn.getCustomer().getAcccode() != null ? cn.getCustomer().getAcccode() : "");
                name = (cn.getCustomer().getName() != null ? cn.getCustomer().getName() : "");
                address = (cn.getCustomer() != null ? accountingHandlerDAOobj.getCustomerAddress(addressParams) : cn.getCustomer().getBillingAddress() != null ? cn.getCustomer().getBillingAddress() : "");
                memo = (cn.getMemo() != null ? cn.getMemo() : "");
                dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                terms = cn.getCustomer().getCreditTerm() == null ? "" : cn.getCustomer().getCreditTerm().getTermdays() + " Days";
                smCode =  cn.getSalesPerson()!=null? cn.getSalesPerson().getCode()!=null?cn.getSalesPerson().getCode():"":"";
            }
            if (cn.getVendor() != null) {   //CN For Vendor

                code = (cn.getVendor().getAcccode() != null ? cn.getVendor().getAcccode() : "");
                name = (cn.getVendor().getName() != null ? cn.getVendor().getName() : "");
                addressParams.put("vendorid", cn.getVendor().getID());
                address = (cn.getVendor() != null ? accountingHandlerDAOobj.getVendorAddress(addressParams) : cn.getVendor().getAddress() != null ? cn.getVendor().getAddress() : "");
                memo = (cn.getMemo() != null ? cn.getMemo() : "");
                dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                terms = cn.getVendor().getDebitTerm() == null ? "" : cn.getVendor().getDebitTerm().getTermdays() + " Days";
                smCode =  cn.getSalesPerson()!=null? cn.getSalesPerson().getCode()!=null?cn.getSalesPerson().getCode():"":"";
            }

            boolean isOpeningBalanceTransaction = cn.isIsOpeningBalenceCN();
            ArrayList<CreditNoteTable> creditNoteTableList = new ArrayList<CreditNoteTable>();
            int x = 1;

            if (!isOpeningBalanceTransaction) { //To show Particulars Detail in PDF when transaction is a non-opening type.
                Set<CreditNoteTaxEntry> cnTaxEntryDetails = cn.getCnTaxEntryDetails();
                if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {

                    for (CreditNoteTaxEntry noteTaxEntry : cnTaxEntryDetails) {
                        CreditNoteTable creditNoteTable = new CreditNoteTable();
                        String accName = "";
                        String accCode = "";
                        String accDesc = "";
                        double rowtaxamount = 0;
                        double amount1 = 0;
                        boolean isDebit = true;
                        isDebit = noteTaxEntry.isDebitForMultiCNDN();
                        accCode = noteTaxEntry.getAccount().getAcccode() != null ? noteTaxEntry.getAccount().getAcccode() : "";
                        accName = noteTaxEntry.getAccount().getName() != null ? noteTaxEntry.getAccount().getName() : "";
                        try {
                            accDesc =  StringUtil.DecodeText(noteTaxEntry.getDescription() != null ? noteTaxEntry.getDescription() : "");
                        } catch (Exception e) {
                            accDesc = noteTaxEntry.getDescription() != null ? noteTaxEntry.getDescription() : "";
                        }
                        rowtaxamount = noteTaxEntry.getTaxamount();
                        amount1 = noteTaxEntry.getAmount();
                        if (!isDebit) {
                            rowtaxamount = rowtaxamount * -1;
                            amount1 = amount1 * -1;
                        }
                        creditNoteTable.setDesc(accDesc);
                        creditNoteTable.setQty("1");
                        creditNoteTable.setUom("NA");
                        creditNoteTable.setRate(authHandler.formattedCommaSeparatedAmount(amount1, companyid));
                        creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount(amount1, companyid));
                        creditNoteTable.setSrNo(noteTaxEntry.getSrNoForRow());
                        creditNoteTableList.add(creditNoteTable);
                        subtotal += authHandler.round(amount1, companyid);
                        gstTotal += authHandler.round(rowtaxamount, companyid);
                    }
                } else {// in case of if tax is not included while creation of CN Value will be go fron jedetail table in case of Edit.
                    JournalEntry je = cn.getJournalEntry();
                    Set<JournalEntryDetail> jeDetails = je.getDetails();
                    for (JournalEntryDetail jed : jeDetails) {
                        String accName = "";
                        String accDesc = "";
                        String accCode = "";
                        double discount = 0;
                        double rowtaxamount = 0;
                        double amount1 = 0;
                        double amount_with_discount = 0;
                        double amount_with_tax = 0;

                        if (jed.isDebit()) {
                            accCode = jed.getAccount().getAcccode() != null ? jed.getAccount().getAcccode() : "";
                            accName = jed.getAccount().getName() != null ? jed.getAccount().getName() : "";
                            accDesc = jed.getDescription() != null ? jed.getDescription() : "";
                            amount1 = jed.getAmount();
                            amount_with_discount = amount1 - discount;
                            amount_with_tax = amount_with_discount + rowtaxamount;
                            CreditNoteTable creditNoteTable = new CreditNoteTable();
                            creditNoteTable.setDesc(accDesc);
                            creditNoteTable.setQty("1");
                            creditNoteTable.setUom("NA");
                            creditNoteTable.setRate(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                            creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                            creditNoteTableList.add(creditNoteTable);
                            subtotal += authHandler.round(amount1, companyid);
                            gstTotal += authHandler.round(rowtaxamount, companyid);
                        }
                    }
                }
            } else {    //To show Particulars as An Opening in PDF when transaction is an opening type.
                CreditNoteTable creditNoteTable = new CreditNoteTable();
                creditNoteTable.setAccName("This is an Opening Credit Note");
                creditNoteTable.setDesc(cn.getNarration());
                creditNoteTableList.add(creditNoteTable);
            }


            // Custom Field for credit Note 
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = null;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Credit_Note_ModuleId));
            FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

            Map<String, Object> variableMap = new HashMap<String, Object>();
            HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
            ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
            Detailfilter_names.add(Constants.companyKey);
            Detailfilter_params.add(cn.getCompany().getCompanyID());
            Detailfilter_names.add("journalentryId");
            Detailfilter_params.add(cn.getJournalEntry().getID());
            Detailfilter_names.add("moduleId");
            Detailfilter_params.add(Constants.Acc_Credit_Note_ModuleId + "");
            invDetailRequestParams.put("filter_names", Detailfilter_names);
            invDetailRequestParams.put("filter_params", Detailfilter_params);
            KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
            if (idcustresult.getEntityList().size() > 0) {
                AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                    String coldata = varEntry.getValue().toString();
                    if (!StringUtil.isNullOrEmpty(coldata)) {
                        if ((varEntry.getKey().split("_")[1]).equals("P/O Number")) {
                            creditNoteMap.put("PO_NUMBER", coldata);
                        }
                         
//                                 
                    }
                }
            }

            ArrayList datePojoList = new ArrayList();
            OnlyDatePojo dateObj = new OnlyDatePojo();
            dateObj.setDate(entryDate);
            datePojoList.add(dateObj);
            Collections.sort(creditNoteTableList, new CreditNoteTable());
            creditNoteMap.put("TableData", new JRBeanCollectionDataSource(creditNoteTableList));
            creditNoteMap.put("COMPANY_NAME", company.getCompanyName());
            creditNoteMap.put("CUSTOMER_NAME", name);
            creditNoteMap.put("CUSTOMER_BILLTO_ADDRESS", address);
            creditNoteMap.put("INVOICE_NUMBER", invno);
            creditNoteMap.put("PAYMENT_TERMS", terms);
            creditNoteMap.put("SUBTOTAL", authHandler.formattedCommaSeparatedAmount(subtotal, companyid));
            creditNoteMap.put("GST_AMOUNT", authHandler.formattedCommaSeparatedAmount(gstTotal, companyid));
            creditNoteMap.put("TOTAL_AMOUNT", dncurrency + " " + authHandler.formattedCommaSeparatedAmount(cn.getCnamount(), companyid));
            creditNoteMap.put("PAYMENTCREDITS", dncurrency + " " + authHandler.formattedCommaSeparatedAmount(cn.getCnamount(), companyid));
            creditNoteMap.put("PREPARED_BY", cn.getCreatedby() != null ? cn.getCreatedby().getFullName() : "");
            creditNoteMap.put("BALANCE_DUE", authHandler.formattedCommaSeparatedAmount(0, companyid));
            creditNoteMap.put("CNDNLabel", "Credit Note");
            creditNoteMap.put("SALESMAN_CODE", smCode);

            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TonyFiberglassCreditNoteOtherwise.jrxml");
            creditNoteMap.put("format", "pdf");
            response.setHeader("Content-Disposition", "attachment;filename=\"" + "CreditNote_" + invno + ".pdf\"");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, creditNoteMap, beanColDataSource);
            list.add(jasperPrint);

        } catch (Exception ex) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }

@Override
    public List<Object> exportChallanNo281Report(HttpServletRequest request, HttpServletResponse response,Map<String, Object> requiredData) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public List<Object> exportDefaultFormatDebitNoteJasperReportForTonyFibreGlass(HttpServletRequest request, HttpServletResponse response, String billid) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> creditNoteMap = new HashMap<String, Object>();

        JasperPrint jasperPrint = null;
        JasperReport jasperReport = null;
        InputStream inputStream = null;
        double gstTotal = 0;
        double subtotal = 0;


        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));

            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);

            KwlReturnObject result1 = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), billid);
            DebitNote cn = (DebitNote) result1.getEntityList().get(0);

            String invno = cn.getDebitNoteNumber();
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
//            String entryDate = df.format(cn.getJournalEntry() != null ? cn.getJournalEntry().getEntryDate() : cn.getCreationDate());
            String entryDate = df.format(cn.getCreationDate());
            HashMap<String, Object> addressParams = new HashMap<String, Object>();
            addressParams.put(Constants.companyKey, companyid);
            addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
            addressParams.put("isBillingAddress", true); //true to get billing address

            String code = "", name = "", address = "", memo = "", dncurrency = "", terms = "",smCode="";

            if (cn.getCustomer() != null) {	//CN For Customer
                addressParams.put("customerid", cn.getCustomer().getID());
                code = (cn.getCustomer().getAcccode() != null ? cn.getCustomer().getAcccode() : "");
                name = (cn.getCustomer().getName() != null ? cn.getCustomer().getName() : "");
                address = (cn.getCustomer() != null ? accountingHandlerDAOobj.getCustomerAddress(addressParams) : cn.getCustomer().getBillingAddress() != null ? cn.getCustomer().getBillingAddress() : "");
                memo = (cn.getMemo() != null ? cn.getMemo() : "");
                dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                terms = cn.getCustomer().getCreditTerm() == null ? "" : cn.getCustomer().getCreditTerm().getTermdays() + " Days";
            }
            if (cn.getVendor() != null) {   //CN For Vendor

                code = (cn.getVendor().getAcccode() != null ? cn.getVendor().getAcccode() : "");
                name = (cn.getVendor().getName() != null ? cn.getVendor().getName() : "");
                addressParams.put("vendorid", cn.getVendor().getID());
                address = (cn.getVendor() != null ? accountingHandlerDAOobj.getVendorAddress(addressParams) : cn.getVendor().getAddress() != null ? cn.getVendor().getAddress() : "");
                memo = (cn.getMemo() != null ? cn.getMemo() : "");
                dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                terms = cn.getVendor().getDebitTerm() == null ? "" : cn.getVendor().getDebitTerm().getTermdays() + " Days";
            }

            boolean isOpeningBalanceTransaction = cn.isIsOpeningBalenceDN();
            ArrayList<CreditNoteTable> creditNoteTableList = new ArrayList<CreditNoteTable>();
            int x = 1;

            if (!isOpeningBalanceTransaction) { //To show Particulars Detail in PDF when transaction is a non-opening type.
                Set<DebitNoteTaxEntry> cnTaxEntryDetails = cn.getDnTaxEntryDetails();
                if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {

                    for (DebitNoteTaxEntry noteTaxEntry : cnTaxEntryDetails) {
                        CreditNoteTable creditNoteTable = new CreditNoteTable();
                        String accName = "";
                        String accCode = "";
                        String accDesc = "";
                        double rowtaxamount = 0;
                        double amount1 = 0;
                        boolean isDebit = false;
                        isDebit = noteTaxEntry.isDebitForMultiCNDN();
                        accCode = noteTaxEntry.getAccount().getAcccode() != null ? noteTaxEntry.getAccount().getAcccode() : "";
                        accName = noteTaxEntry.getAccount().getName() != null ? noteTaxEntry.getAccount().getName() : "";
                        try {
                            accDesc =  StringUtil.DecodeText(noteTaxEntry.getDescription() != null ? noteTaxEntry.getDescription() : "");
                        } catch (Exception e) {
                            accDesc = noteTaxEntry.getDescription() != null ? noteTaxEntry.getDescription() : "";
                        }
                        rowtaxamount = noteTaxEntry.getTaxamount();
                        amount1 = noteTaxEntry.getAmount();
                        if (isDebit) {
                            rowtaxamount = rowtaxamount * -1;
                            amount1 = amount1 * -1;
                        }
                        creditNoteTable.setDesc(accDesc);
                        creditNoteTable.setQty("1");
                        creditNoteTable.setUom("NA");
                        creditNoteTable.setRate(authHandler.formattedCommaSeparatedAmount(amount1, companyid));
                        creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount(amount1, companyid));
                        creditNoteTable.setSrNo(noteTaxEntry.getSrNoForRow());
                        creditNoteTableList.add(creditNoteTable);
                        subtotal += authHandler.round(amount1, companyid);
                        gstTotal += authHandler.round(rowtaxamount, companyid);
                    }
                } else {// in case of if tax is not included while creation of CN Value will be go fron jedetail table in case of Edit.
                    JournalEntry je = cn.getJournalEntry();
                    Set<JournalEntryDetail> jeDetails = je.getDetails();
                    for (JournalEntryDetail jed : jeDetails) {
                        String accName = "";
                        String accDesc = "";
                        String accCode = "";
                        double discount = 0;
                        double rowtaxamount = 0;
                        double amount1 = 0;
                        double amount_with_discount = 0;
                        double amount_with_tax = 0;

                        if (jed.isDebit()) {
                            accCode = jed.getAccount().getAcccode() != null ? jed.getAccount().getAcccode() : "";
                            accName = jed.getAccount().getName() != null ? jed.getAccount().getName() : "";
                            accDesc = jed.getDescription() != null ? jed.getDescription() : "";
                            amount1 = jed.getAmount();
                            amount_with_discount = amount1 - discount;
                            amount_with_tax = amount_with_discount + rowtaxamount;
                            CreditNoteTable creditNoteTable = new CreditNoteTable();
                            creditNoteTable.setDesc(accDesc);
                            creditNoteTable.setQty("1");
                            creditNoteTable.setUom("NA");
                            creditNoteTable.setRate(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                            creditNoteTable.setTotal(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                            creditNoteTableList.add(creditNoteTable);
                            subtotal += authHandler.round(amount1, companyid);
                            gstTotal += authHandler.round(rowtaxamount, companyid);
                        }
                    }
                }
            } else {    //To show Particulars as An Opening in PDF when transaction is an opening type.
                CreditNoteTable creditNoteTable = new CreditNoteTable();
                creditNoteTable.setAccName("This is an Opening Credit Note");
                creditNoteTable.setDesc(cn.getNarration());
                creditNoteTableList.add(creditNoteTable);
            }


            // Custom Field for credit Note 
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = null;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Credit_Note_ModuleId));
            FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

            Map<String, Object> variableMap = new HashMap<String, Object>();
            HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
            ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
            Detailfilter_names.add(Constants.companyKey);
            Detailfilter_params.add(cn.getCompany().getCompanyID());
            Detailfilter_names.add("journalentryId");
            Detailfilter_params.add(cn.getJournalEntry().getID());
            Detailfilter_names.add("moduleId");
            Detailfilter_params.add(Constants.Acc_Debit_Note_ModuleId + "");
            invDetailRequestParams.put("filter_names", Detailfilter_names);
            invDetailRequestParams.put("filter_params", Detailfilter_params);
            KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
            if (idcustresult.getEntityList().size() > 0) {
                AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                    String coldata = varEntry.getValue().toString();
                    if (!StringUtil.isNullOrEmpty(coldata)) {
                        if ((varEntry.getKey().split("_")[1]).equals("P/O Number")) {
                            creditNoteMap.put("PO_NUMBER", coldata);
                        }
                        if ((varEntry.getKey().split("_")[1]).equals("Salesman Code")) {
                            smCode =coldata;
                        }
//                                 
                    }
                }
            }

            ArrayList datePojoList = new ArrayList();
            OnlyDatePojo dateObj = new OnlyDatePojo();
            dateObj.setDate(entryDate);
            datePojoList.add(dateObj);
            Collections.sort(creditNoteTableList, new CreditNoteTable());
            creditNoteMap.put("TableData", new JRBeanCollectionDataSource(creditNoteTableList));
            creditNoteMap.put("COMPANY_NAME", company.getCompanyName());
            creditNoteMap.put("CUSTOMER_NAME", name);
            creditNoteMap.put("CUSTOMER_BILLTO_ADDRESS", address);
            creditNoteMap.put("INVOICE_NUMBER", invno);
            creditNoteMap.put("PAYMENT_TERMS", terms);
            creditNoteMap.put("SUBTOTAL", authHandler.formattedCommaSeparatedAmount(subtotal, companyid));
            creditNoteMap.put("GST_AMOUNT", authHandler.formattedCommaSeparatedAmount(gstTotal, companyid));
            creditNoteMap.put("TOTAL_AMOUNT", dncurrency + " " + authHandler.formattedCommaSeparatedAmount(cn.getDnamount(), companyid));
            creditNoteMap.put("PAYMENTCREDITS", dncurrency + " " + authHandler.formattedCommaSeparatedAmount(cn.getDnamount(), companyid));

            creditNoteMap.put("PREPARED_BY", cn.getCreatedby() != null ? cn.getCreatedby().getFullName() : "");
            creditNoteMap.put("BALANCE_DUE", authHandler.formattedCommaSeparatedAmount(0, companyid));
            creditNoteMap.put("SALESMAN_CODE", smCode);
            creditNoteMap.put("CNDNLabel", "Debit Note");


            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TonyFiberglassCreditNoteOtherwise.jrxml");
            creditNoteMap.put("format", "pdf");
            response.setHeader("Content-Disposition", "attachment;filename=\"" + "DebitNote" + invno + ".pdf\"");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, creditNoteMap, beanColDataSource);
            list.add(jasperPrint);

        } catch (Exception ex) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    @Override
    public List<Object> exportSwatowPurchaseOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        String filenameJRXML = "";
        String filename = "";
        JSONObject obj = null;
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;
                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    OnlyDatePojo onlyDateObj = new OnlyDatePojo();
                    Map<String, Object> invoiceMap = new HashMap<String, Object>();
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    KwlReturnObject compaccresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compaccresult.getEntityList().get(0);


                    ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();


                    HashMap<String, Object> requestParams = accPurchaseOrderServiceDAOobj.getPurchaseOrderMap(request);
                    requestParams.put("billId", invoiceID);
                    requestParams.put("bills", invoiceID.split(","));
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("dateFormatValue", authHandler.getDateOnlyFormat(request));
                    requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));

                    KwlReturnObject invoiceResult = accPurchaseOrderobj.getPurchaseOrdersMerged(requestParams);
                    DataJArr = accPurchaseOrderServiceDAOobj.getPurchaseOrdersJsonMerged(requestParams, invoiceResult.getEntityList(), DataJArr);
                    requestParams.put("closeflag", null);
                    DataJArrRows = accPurchaseOrderServiceDAOobj.getPurchaseOrderRows(requestParams);
                    Map<String, Object> rows = new HashMap<String, Object>();
                    obj = DataJArr.getJSONObject(0);
                    double discountTotal = 0;
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        rows = new HashMap<String, Object>();
                        double productamount = 0;
                        rows.put("srNo", jobj.optString("srno", ""));
                        rows.put("ProductName", jobj.optString("productname", ""));
                        rows.put("Code", jobj.optString("pid", ""));
                        rows.put("desc", jobj.optString("desc", ""));
                        rows.put("qty", authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid));
                        rows.put("uom", jobj.optString("unitname", ""));
                        rows.put("rate", authHandler.formattedCommaSeparatedUnitPrice(jobj.optDouble("rate", 0), companyid));
                        if (!jobj.optBoolean("discountispercent", false)) {
                            productamount = (jobj.optDouble("rate", 0) * jobj.optDouble("quantity", 0)) - authHandler.round(jobj.optDouble("prdiscount", 0), companyid); // Flat
                            discountTotal += jobj.optDouble("prdiscount", 0);
                            rows.put("disc", authHandler.formattedAmount(jobj.optDouble("prdiscount", 0), companyid));
                        } else {
                            discountTotal += authHandler.round(((jobj.optDouble("rate", 0) * jobj.optDouble("quantity", 0)) * (jobj.optDouble("prdiscount", 0) / 100)), companyid);
                            productamount = (jobj.optDouble("rate", 0) * jobj.optDouble("quantity", 0)) - authHandler.round(((jobj.optDouble("rate", 0) * jobj.optDouble("quantity", 0)) * (jobj.optDouble("prdiscount", 0) / 100)), companyid); // Percentage Value
                            rows.put("disc", authHandler.formattedAmount(jobj.optDouble("prdiscount", 0), companyid));
                        }

                        rows.put("total", authHandler.formattedCommaSeparatedAmount(productamount, companyid) + "");
                        rows.put("currencysymbol", jobj.optString("currencysymbol", ""));
                        invDetailsList.add(rows);
                    }
                    //// Specic params for PO Report

                    filenameJRXML = "/SwatowPurchaseOrder.jrxml";

                    filename = "PurchaseOrder_" + obj.optString("billno", "") + ".pdf";
                    onlyDateObj.setDate(obj.optString("dateinuserformat", ""));
                    invoiceMap.put("GSTAmount", authHandler.formattedCommaSeparatedAmount(obj.optDouble("taxamount", 0), companyid));
                    invoiceMap.put("TotalAmount", authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0), companyid));
                    invoiceMap.put("SubTotal", authHandler.formattedCommaSeparatedAmount((obj.optDouble("amount", 0) - obj.optDouble("taxamount", 0)), companyid));
                    invoiceMap.put("DiscountTotal", authHandler.formattedCommaSeparatedAmount(discountTotal, companyid));
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, companyid);
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true); //true to get billing address
                    addressParams.put("vendorid", obj.optString("personid", ""));
                    String custAddress = accountingHandlerDAOobj.getVendorAddress(addressParams);
                    Collections.sort(invDetailsList, new SrNoComparator());
                    invoiceMap.put("TableData", new JRBeanCollectionDataSource(invDetailsList));
                    invoiceMap.put("CustomeName", obj.optString("personname", "") + "\n" + custAddress);
                    invoiceMap.put("RequiredDelivery", obj.optString("shipdateinuserformat", ""));
                    invoiceMap.put("billtoaddress", obj.optString("billtoaddress", ""));
                    invoiceMap.put("shiptoaddress", obj.optString("shiptoaddress", ""));
                    invoiceMap.put("ComapnyName", company != null ? company.getCompanyName() != null ? company.getCompanyName() : "" : "");
                    invoiceMap.put("currencycode", obj.optString("currencycode", ""));
                    invoiceMap.put("SO_DueDate", obj.optString("duedateinuserformat", ""));
                    invoiceMap.put("PAYMENT_TERMS", obj.optString("termname", ""));
                    invoiceMap.put("Document_NO", obj.optString("billno", ""));
                    invoiceMap.put("costcenterName", obj.optString("costcenterName", ""));
                    invoiceMap.put("memo", obj.optString("memo", ""));
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("logo", fileName1);
                    datePojoList.add(onlyDateObj);
                    InputStream inputStream = null;

                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + filenameJRXML);
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
    @Override //ERP-17180 
    public List exportCashReceipt(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException, JSONException {
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> jasperMap = new HashMap<String, Object>();
        JSONArray DataJArr = new JSONArray();
        OnlyDatePojo dateObj = new OnlyDatePojo();
        JSONObject obj = null;

        List<LabelValue> labelValueList = new ArrayList<LabelValue>();
        List<LabelValue> paidToList = new ArrayList<LabelValue>();
        List<OnlyDatePojo> onlydatePojoList = new ArrayList<OnlyDatePojo>();
        List<LabelValue> detailsLabelValueList = new ArrayList<LabelValue>();

        String invoiceID = request.getParameter("bills");
        String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
        try {
            String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            HashMap<String, Object> requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            requestParams.put(Constants.billid, invoiceID);
            request.setAttribute(Constants.companyKey, companyid);
            request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
            request.setAttribute(Constants.billid, invoiceID);
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
            requestParams.put("CashAndInvoice", true);
            requestParams.put("isAged", true);

            KwlReturnObject invoiceResult = accInvoiceDAOobj.getInvoicesMerged(requestParams);
            DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, invoiceResult.getEntityList(), DataJArr);
            LabelValue labelValue = new LabelValue();
            if (DataJArr.length() > 0) {

                obj = DataJArr.getJSONObject(0);

                dateObj.setDate(obj.optString("dateinuserformat", ""));
                onlydatePojoList.add(dateObj);
                labelValue = new LabelValue();
                //---------Customer Name ,Code,Address--------
                labelValue.setLabel("Received From");
                labelValue.setValue("");
                labelValue.setCreationDate(new Date());
                paidToList.add(labelValue);

                labelValue = new LabelValue();
                labelValue.setLabel("Customer Code");
                labelValue.setValue(obj.optString("customercode", ""));
                labelValue.setCreationDate(new Date());
                paidToList.add(labelValue);

                labelValue = new LabelValue();
                labelValue.setLabel("Customer Name");
                labelValue.setValue(obj.optString("personname", ""));
                labelValue.setCreationDate(new Date());
                paidToList.add(labelValue);

                labelValue = new LabelValue();
                labelValue.setLabel("");
                labelValue.setValue(obj.optString("billtoaddress", ""));
                labelValue.setCreationDate(new Date());
                paidToList.add(labelValue);
                jasperMap.put("PayToTable", new JRBeanCollectionDataSource(paidToList));
                //---------Payment Methide ,Currency ---------------
                labelValue = new LabelValue();
                labelValue.setLabel("Payment Method");
                labelValue.setValue(obj.optString("paymentname", ""));
                labelValue.setCreationDate(new Date());
                labelValueList.add(labelValue);

                labelValue = new LabelValue();
                labelValue.setLabel("Currency");
                labelValue.setValue(obj.optString("currencyname", ""));
                labelValue.setCreationDate(new Date());
                labelValueList.add(labelValue);
                jasperMap.put("PaymentMethodTable", new JRBeanCollectionDataSource(labelValueList));
//            --------------Document Details table--------
                labelValue = new LabelValue();
                StringBuffer detailDesc = new StringBuffer();
                detailDesc.append("Against Cash Sales Invoice# ");
                detailDesc.append(obj.optString("billno", ""));
                detailDesc.append(" dated ");
                detailDesc.append(obj.optString("dateinuserformat", ""));

                labelValue.setLabel(detailDesc.toString());
                labelValue.setValue(authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0.00), companyid));
                labelValue.setCreationDate(new Date());
                detailsLabelValueList.add(labelValue);
                jasperMap.put("PaymentTable", new JRBeanCollectionDataSource(detailsLabelValueList));

                jasperMap.put("imagePath", StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt());
                jasperMap.put("COMPANY_NAME", company.getCompanyName());
                jasperMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                jasperMap.put("headerLabel", "Payment Receipt");
                jasperMap.put("numberLabel", "Receipt #");
                jasperMap.put("number", obj.optString("billno", ""));
                jasperMap.put("paidToLabel", "");
                jasperMap.put("codeLabel", "");
                jasperMap.put("nameLabel", "");
                jasperMap.put("paidTo", "");
                jasperMap.put("name", "");
                jasperMap.put("code", "");
                jasperMap.put("remark", obj.optString("memo", ""));
                jasperMap.put("amountInWords", obj.optString("amountinWords", ""));
                jasperMap.put("amount", authHandler.formattedCommaSeparatedAmount(obj.optDouble("amount", 0.00), companyid));
                jasperMap.put("currency", obj.optString("currencycode", ""));
                jasperMap.put("preparedBy", obj.optString("createdby", ""));
                jasperMap.put("address", "");
                jasperMap.put("foneflag", false);
                jasperMap.put("isLetterHead", false);
                response.setHeader("Content-Disposition", "attachment;filename=\"" + "CashSalesPaymentReceived" + obj.optString("billno", "") + ".pdf\"");
            }
// ------------Same Jrxml Used for default Payment Made and Paymnet Received
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DefaultPaymentVoucher.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(onlydatePojoList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, jasperMap, beanColDataSource);
            list.add(jasperPrint);
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;

    }
    
    
    @Override
    public List<Object> exportSalesOrderForHINSITSU(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        JasperPrint jasperPrint = null;
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        int moduleId = request.getParameter("moduleid") != null ? Integer.parseInt(request.getParameter("moduleid")) : 0;
        String recArray[] = recordIDs.split(",");
        String filenameJRXML = "";
        String filename = "";
        JSONObject obj = null;
        int type = !StringUtil.isNullOrEmpty(request.getParameter("type")) ? Integer.parseInt(request.getParameter("type")) : 0;
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;
                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    OnlyDatePojo onlyDateObj = new OnlyDatePojo();
                    
                    JSONArray DataJArr = new JSONArray();
                    JSONArray DataJArrRows = new JSONArray();
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    KwlReturnObject compaccresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compaccresult.getEntityList().get(0);
                    String companyaddress = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);

                    ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();

                    if (moduleId == Constants.Acc_Sales_Order_ModuleId) {
                        HashMap<String, Object> requestParams = accSalesOrderServiceDAOobj.getSalesOrdersMap(request);
                        requestParams.put("billId", invoiceID);
                        requestParams.put("bills", invoiceID.split(","));
                        request.setAttribute(Constants.companyKey, companyid);
                        request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                        request.setAttribute(Constants.billid, invoiceID);
                        requestParams.put(Constants.companyKey, companyid);
                        requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                        requestParams.put("dateFormatValue", authHandler.getDateOnlyFormat(request));
                        requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));

                        KwlReturnObject invoiceResult = accSalesOrderDAOobj.getSalesOrdersMerged(requestParams);
                        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                        DataJArr = accSalesOrderServiceDAOobj.getSalesOrdersJsonMerged(paramJobj, invoiceResult.getEntityList(), DataJArr);
                        requestParams.put("closeflag", null);
                        JSONObject tempjobj = accSalesOrderServiceDAOobj.getSalesOrderRows(paramJobj);
                        DataJArrRows = tempjobj.getJSONArray("data");
                        Map<String, Object> rows = new HashMap<String, Object>();
                        obj = DataJArr.getJSONObject(0);
                        for (int i=0 ; i<DataJArrRows.length();i++){
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        Map<String, Object> invoiceMap = new HashMap<String, Object>();
                        filenameJRXML = "/HINSITSU_WORKORDER.jrxml";
                        filename = "SalesOrder" + obj.optString("billno", "") + ".pdf";
                        onlyDateObj.setDate(obj.optString("dateinuserformat", ""));
                        invoiceMap.put("WOSTYPE", obj.optString(" ", ""));
                        invoiceMap.put("DOCUMENT_NO", obj.optString(" ", ""));
                        invoiceMap.put("CUSTOMER_NAME", obj.optString("personname", ""));
                        invoiceMap.put("CUSTOMER_CODE", obj.optString("customercode", ""));
                        invoiceMap.put("SO_NUMBER", obj.optString("billno", ""));
                        invoiceMap.put("WORK_ORDER_NO", obj.optString(" ", ""));
                        invoiceMap.put("DATE", obj.optString("dateinuserformat", ""));
                        invoiceMap.put("ISSUED_BY", obj.optString("createdby", ""));
                        invoiceMap.put("ITEM_CODE", obj.optString("", ""));// Blank for now
                        invoiceMap.put("PART_NO", jobj.optString("pid", ""));
                        invoiceMap.put("DESCRIPTION", jobj.optString("desc", ""));
                        invoiceMap.put("PO_NUMBER", obj.optString("customerporefno", ""));
                        invoiceMap.put("DUE_DATE", obj.optString("duedateinuserformat", ""));
                        invoiceMap.put("ORDER_QTY", authHandler.formattedQuantity(jobj.optDouble("quantity", 0),companyid));
                        invoiceMap.put("REMARKS", obj.optString("memo", ""));
                        invoiceMap.put("MATERIAL", jobj.optString("Custom_MATERIAL", ""));
                        invoiceMap.put("TX_SIZE", jobj.optString("Custom_T x SIZE", ""));
                        invoiceMap.put("NO_OF_COLCOR", jobj.optString("Custom_NO OF COLOUR", ""));
                        invoiceMap.put("PCS_SHT_ROLL", jobj.optString("Custom_PCS/SHT/ROLL", ""));
                        invoiceMap.put("Serial", obj.optString("Custom_Serial", ""));
                        datePojoList.add(onlyDateObj);
                        InputStream inputStream = null;

                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + filenameJRXML);
                        response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                        list.add(jasperPrint);
                        }
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportOtherReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }

    @Override
    public List<Object> exportHinsitsuCustomerQoutationJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();  
        String invoiceID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    invoiceID = s;
                    if (StringUtil.isNullOrEmpty(invoiceID)) {
                        invoiceID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    JSONArray DataJArr = new JSONArray();
                    JSONObject DataJObjRows = new JSONObject();
                    JSONArray DataJArrRows = new JSONArray();
                    String companyid = (request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject comAccPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) comAccPrefResult.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String filename = "";
                    String title = "";
                    HashMap<String, Object> requestParams = accSalesOrderServiceDAOobj.getSalesOrdersMap(request);
                    requestParams.put("billId", invoiceID);
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute(Constants.billid, invoiceID);
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("dataFormatValue", authHandler.getDateOnlyFormat(request));
                    requestParams.put(Constants.userdf, authHandler.getUserDateFormatterWithoutTimeZone(request));
                    if (StringUtil.isNullOrEmpty(request.getParameter("archieve"))) {
                        requestParams.put("archieve", 0);
                    } else {
                        requestParams.put("archieve", Integer.parseInt(request.getParameter("archieve")));
                    }
                    requestParams.put("closeflag", null);
                    requestParams.put("sopolinkflag", null);
                    requestParams.put("linkFlagInSO", null);
                    requestParams.put("linkFlagInInv", null);
                    requestParams.put("dtype", request.getParameter("dtype"));
                    boolean isOrder = false;
                    String isorder = request.getParameter("isOrder");
                    if (!StringUtil.isNullOrEmpty(isorder) && StringUtil.equal(isorder, "true")) {
                        isOrder = true;
                    }
                    requestParams.put("isOrder", isOrder);
                    requestParams.put("userId", sessionHandlerImpl.getUserid(request));
                    KwlReturnObject invoiceResult = accSalesOrderDAOobj.getQuotations(requestParams);
                    DataJArr = accSalesOrderServiceDAOobj.getQuotationsJson(requestParams, invoiceResult.getEntityList(), DataJArr);
                    requestParams.put("bills", invoiceID);
                    DataJObjRows = accSalesOrderServiceDAOobj.getQuotationRows(requestParams);
                    //Map<String, Object> lineLevelProdMap = null;
                    ArrayList<OnlyDatePojo> datePojoList = new ArrayList<OnlyDatePojo>();
                    Map<String, Object> lineLevelProdMap = new HashMap<String, Object>();
                    OnlyDatePojo onlyDateObj = new OnlyDatePojo();
                    int mainprodno = 1;
                    if (DataJObjRows.length() > 0) {
                        JSONObject obj = DataJArr.getJSONObject(0);
                        DataJArrRows = DataJObjRows.getJSONArray("data");
                        for (int i = 0; i < DataJArrRows.length(); i++) {   //Line Level Products (Assembly Product)  
                            JasperPrint jasperPrint = null;
                            List materialTableBomList = new ArrayList();    //For Material Category Sub-Products
                            List inkTableBomList = new ArrayList();    //For Ink Category Sub-Products
                            
                            String processes = "";                            
                            JSONObject jobj = DataJArrRows.getJSONObject(i);
                            lineLevelProdMap = new HashMap<String, Object>();
                            String productid = jobj.optString("productid", "");
                            lineLevelProdMap.put("productName", jobj.optString("productname", ""));
                            lineLevelProdMap.put("productCode", jobj.optString("pid", ""));
                            lineLevelProdMap.put("productDesc", jobj.optString("desc", ""));
                            lineLevelProdMap.put("materialSize", jobj.optString("Custom_Material Size", ""));
                            lineLevelProdMap.put("qtyRequired", jobj.optString("Custom_Quantity Required", ""));
                            lineLevelProdMap.put("qtySubmit", jobj.optString("Custom_Quantity Submit", ""));
                            lineLevelProdMap.put("pieces", jobj.optString("Custom_Pieces/Sheets", ""));     //For Seal Printing only
                            lineLevelProdMap.put("deliverypieces", !StringUtil.isNullOrEmpty(jobj.optString("Custom_Pieces/Sheets", "")) ? (" = "+jobj.getString("Custom_Pieces/Sheets")) : "");   //DELIVERY CONDITION = <no.of pieces>
                            
                            //GET BOM DETAILS
                            KwlReturnObject krobj = accProductObj.getAssemblyProductDefaultBuildOfMaterials(productid);
                            List productassemblylist = krobj.getEntityList();
                            Iterator bomitr = productassemblylist.iterator();
                            Map<String, Object> materialProdMap = null, inkProdMap = null;
                            int materialprodsrno = 1, inkprodsrno = 1;
                            while (bomitr.hasNext()) {    //Read Default Build Of Materials (Material Category)   srNo
                                materialProdMap = new HashMap<String, Object>();
                                inkProdMap = new HashMap<String, Object>();
                                String categoryName = "";
                                ProductAssembly pa = (ProductAssembly) bomitr.next();
                                if (!(pa.getSubproducts().getProducttype().getID()).equals(Producttype.SERVICE)) {   //Other than Service Product will go under Material & Ink Category
                                     //Find the category of the BOM Product
                                    String bomproductid = pa.getSubproducts().getID();
                                    List categorylist = accProductObj.getProductsCategoryByProductID(companyid, bomproductid);
                                    if(categorylist!=null && !categorylist.isEmpty()){
                                        categoryName = (String)categorylist.get(0);
                                        if(categoryName.equalsIgnoreCase("MATERIALS")){     //Products From Material Category
                                            materialProdMap.put("srNo", String.valueOf(materialprodsrno));                                    
                                            materialProdMap.put("bomprodleft", pa.getSubproducts() != null ? (materialprodsrno) + ". " + pa.getSubproducts().getProductName() : "");
                                            materialTableBomList.add(materialProdMap);
                                            materialprodsrno++;
                                        } else if(categoryName.equalsIgnoreCase("INK")) {     //Products From INK Category
                                            inkProdMap.put("srNo", String.valueOf(inkprodsrno));
                                            inkProdMap.put("bomprodright", pa.getSubproducts() != null ? (inkprodsrno) + ". " + pa.getSubproducts().getProductName() : "");
                                            inkTableBomList.add(inkProdMap);
                                            inkprodsrno++;
                                        }
                                    }
                                } else {    //Service Type of Product will come under Process
                                    if (processes != "") {
                                        processes = processes + " --> ";    //Add Arrow after each  Service
                                    }
                                    processes += pa.getSubproducts() != null ? pa.getSubproducts().getProductName() : "";
                                }
                            }
                            Collections.sort(materialTableBomList, new SrNoComparator());   //Sort the list in ASC order
                            Collections.sort(inkTableBomList, new SrNoComparator());   //Sort the list in ASC order
                            lineLevelProdMap.put("serviceprods", processes);                            
                            lineLevelProdMap.put("MaterialTableData", new JRBeanCollectionDataSource(materialTableBomList));
                            lineLevelProdMap.put("InkTableData", new JRBeanCollectionDataSource(inkTableBomList));
                            mainprodno++;
                        
                        
                        int approvalstatus = obj.optInt("approvalstatus", 1);
                        if(approvalstatus==11 && (obj.optString("approvalstatusinfo", "")).equals("Approved")){
                            lineLevelProdMap.put("isApproved", "true");   //CQ Approved
                            String memo = obj.optString("memo", "");
                            lineLevelProdMap.put("memo", !StringUtil.isNullOrEmpty(memo) ? ("3) "+memo) : "");
                        } else {
                            lineLevelProdMap.put("isApproved", "false");   //CQ Pending for approval
                            String memo = obj.optString("memo", "");
                            lineLevelProdMap.put("memo", !StringUtil.isNullOrEmpty(memo) ? ("4) "+memo) : "");
                        }                        
                        lineLevelProdMap.put("customerName", obj.optString("personname", ""));
                        lineLevelProdMap.put("cqnumber", obj.optString("billno", ""));
                        lineLevelProdMap.put("cqdate", obj.optString("date", ""));
                        lineLevelProdMap.put("duedate", obj.optString(Constants.duedate, ""));
                        lineLevelProdMap.put("createdby", obj.optString("preparedBy", ""));           
                        
                        onlyDateObj.setDate(obj.optString("dateinuserformat", ""));
                        datePojoList.add(onlyDateObj);  //Date Pojo List
                        
                        String imagepath = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();                        
                        File logo = new File(imagepath);
                        lineLevelProdMap.put("isLogoPresent", logo.exists());
                        lineLevelProdMap.put("logo", imagepath);
                        
                        //Check Mark Logo
                        String checkmarkimagepath = StorageHandler.GetDocStorePath() + Constants.CHECKMARK_IMAGE;
                        File checkmarklogo = new File(checkmarkimagepath);
                        lineLevelProdMap.put("isCheckMarkPresent", checkmarklogo.exists());
                        lineLevelProdMap.put("checkmark", checkmarkimagepath);
                        InputStream inputStream = null;
                        filename = "CustomerQuotation_" + obj.optString("billno", "") + "_v1.pdf";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/HinsitsuCustomerQuotation.jrxml");
                        response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(datePojoList); 
                        jasperPrint = JasperFillManager.fillReport(jasperReport, lineLevelProdMap, beanColDataSource);
                        int pageCount = i+1;
                        if(i>0){
                            while (pageCount!=1) {
                                jasperPrint.removePage(pageCount-1);
                                pageCount--;
                            }//                            
                        }
                        int removeIndex = jasperPrint.getPages().size() - 1;
                        jasperPrint.getPages().remove(removeIndex);  //To Remove Blank Page
                        list.add(jasperPrint);
                        System.out.println("\u10035");
                        System.out.println("\u2713");
                    }//Assembly Product                    
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
}
