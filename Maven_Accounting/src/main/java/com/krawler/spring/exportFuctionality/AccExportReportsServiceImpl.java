package com.krawler.spring.exportFuctionality;

import com.itextpdf.text.Image;
import com.krawler.common.admin.*;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.IndiaComplianceConstants;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.handlers.FileUploadHandler;
import com.krawler.esp.handlers.StorageHandler;
import com.krawler.esp.handlers.sessionAdvisor;
import com.krawler.hql.accounting.*;
import com.krawler.inventory.model.stock.StockService;
import com.krawler.inventory.model.store.Store;
import com.krawler.spring.accounting.account.accAccountDAO;
import com.krawler.spring.accounting.account.accCusVenMapDAO;
import com.krawler.spring.accounting.companypreferances.accCompanyPreferencesDAO;
import com.krawler.spring.accounting.costCenter.AccCostCenterDAO;
import com.krawler.spring.accounting.costCenter.CCConstants;
import com.krawler.spring.accounting.creditnote.accCreditNoteDAO;
import com.krawler.spring.accounting.currency.accCurrencyDAO;
import com.krawler.spring.accounting.customDesign.CustomDesignDAO;
import com.krawler.spring.accounting.customer.accCustomerDAO;
import com.krawler.spring.accounting.debitnote.accDebitNoteDAO;
import com.krawler.spring.accounting.discount.accDiscountDAO;
import com.krawler.spring.accounting.goodsreceipt.AccGoodsReceiptServiceDAO;
import com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptController;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptDAO;
import com.krawler.spring.accounting.handler.*;
import com.krawler.spring.accounting.invoice.*;
import com.krawler.spring.accounting.jasperreports.*;
import com.krawler.spring.accounting.journalentry.accJournalEntryDAO;
import com.krawler.inventory.model.store.StoreService;
import com.krawler.spring.accounting.customDesign.CustomDesignHandler;
import com.krawler.spring.accounting.product.accProductDAO;
import com.krawler.spring.accounting.product.productHandler;
import com.krawler.spring.accounting.purchaseorder.AccPurchaseOrderServiceDAO;
import com.krawler.spring.accounting.purchaseorder.accPurchaseOrderControllerCMN;
import com.krawler.spring.accounting.purchaseorder.accPurchaseOrderDAO;
import com.krawler.spring.accounting.receipt.accReceiptControllerCMN;
import com.krawler.spring.accounting.receipt.accReceiptDAO;
import com.krawler.spring.accounting.salesorder.accSalesOrderDAO;
import com.krawler.spring.accounting.tax.accTaxDAO;
import com.krawler.spring.accounting.term.accTermDAO;
import com.krawler.spring.accounting.vendorpayment.accVendorPaymentControllerCMN;
import com.krawler.spring.accounting.vendorpayment.accVendorPaymentDAO;
import com.krawler.spring.auditTrailModule.auditTrailDAO;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.authHandler.authHandlerDAO;
import com.krawler.spring.common.AccCommonTablesDAO;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.common.kwlCommonTablesDAO;
import com.krawler.spring.exportFunctionality.exportMPXDAOImpl;
import com.krawler.spring.sessionHandler.sessionHandlerImpl;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import com.lowagie.text.Phrase;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import org.springframework.context.MessageSource;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLDecoder;
import java.text.*;
import java.util.Map.Entry;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import org.apache.velocity.app.VelocityEngine;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import com.krawler.spring.accounting.goodsreceipt.*;
import com.krawler.spring.accounting.payment.accPaymentDAO;
import com.krawler.spring.accounting.reports.AccReportsService;
import com.krawler.spring.accounting.reports.AccTemplateReportService;
import com.krawler.spring.accounting.vendor.accVendorDAO;
import com.krawler.spring.accounting.vendor.accVendorDAOImpl;
import java.io.*;
import net.sf.jasperreports.engine.*;
import java.util.zip.*;
/**
 *
 * @author krawler
 */
public class AccExportReportsServiceImpl implements AccExportReportsServiceDAO {

    private HibernateTransactionManager txnManager;
    private accInvoiceDAO accInvoiceDAOobj;
    private AccExportReportsServiceDAO accExportReportsServiceDAOobj;
    private AccInvoiceServiceDAO accInvoiceServiceDAO;
    private AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAO;
    private accCreditNoteDAO accCreditNoteDAOobj;
    private accReceiptDAO accReceiptDAOobj;
    private accJournalEntryDAO accJournalEntryobj;
    private accProductDAO accProductObj;
    private accDiscountDAO accDiscountobj;
    private accCurrencyDAO accCurrencyDAOobj;
    private accCustomerDAO accCustomerDAOobj;
    private accVendorDAO accVendorDAOobj;
    private accTaxDAO accTaxObj;
    private AccCostCenterDAO accCostCenterObj;
    private AccountingHandlerDAO accountingHandlerDAOobj;
    private exportMPXDAOImpl exportDaoObj;
    private String successView;
    private kwlCommonTablesDAO kwlCommonTablesDAOObj;
    private accInvoiceCMN accInvoiceCommon;
    private MessageSource messageSource;
    private accAccountDAO accAccountDAOobj;
    private authHandlerDAO authHandlerDAOObj;
    private CustomDesignDAO customDesignDAOObj;
    private VelocityEngine velocityEngine;
    private CommonEnglishNumberToWords EnglishNumberToWordsOjb = new CommonEnglishNumberToWords();
    private accCompanyPreferencesDAO accCompanyPreferencesObj;
    private auditTrailDAO auditTrailObj;
    private accDebitNoteDAO accDebitNoteobj;
    private accCusVenMapDAO accCusVenMapDAOObj;
    private accSalesOrderDAO accSalesOrderDAOobj;
    private AccCommonTablesDAO accCommonTablesDAO;
    private accVendorPaymentDAO accVendorPaymentDAO;
    private accPurchaseOrderDAO accPurchaseOrderobj;
    private AccPurchaseOrderServiceDAO accPurchaseOrderServiceDAOobj;
    private accGoodsReceiptDAO accGoodsReceiptobj;
    private accTermDAO accTermObj;
    private accGoodsReceiptCMN accGoodsReceiptCommon;
    private accPaymentDAO accPaymentDAOobj;
    private StoreService storeService;
    private StockService stockService;
    private static final DateFormat yyyyMMdd_HIPHON = new SimpleDateFormat("yyyy-MM-dd");
    private AccReportsService accReportsService;
    private AccTemplateReportService accTemplateReportService;
    
    
    public void setAccReportsService(AccReportsService accReportsService) {
        this.accReportsService = accReportsService;
    }
    public void setStockService(StockService stockService) {
        this.stockService = stockService;
    }
    
    public void setStoreService(StoreService storeService) {
        this.storeService = storeService;
    }

    public void setaccGoodsReceiptCMN(accGoodsReceiptCMN accGoodsReceiptCommon) {
        this.accGoodsReceiptCommon = accGoodsReceiptCommon;
    }

    public void setaccPaymentDAO(accPaymentDAO accPaymentDAOobj) {
        this.accPaymentDAOobj = accPaymentDAOobj;
    }
    
    public void setaccPurchaseOrderDAO(accPurchaseOrderDAO accPurchaseOrderobj) {
        this.accPurchaseOrderobj = accPurchaseOrderobj;
    }

    public void setAccVendorPaymentDAO(accVendorPaymentDAO accVendorPaymentDAO) {
        this.accVendorPaymentDAO = accVendorPaymentDAO;
    }

    public void setaccSalesOrderDAO(accSalesOrderDAO accSalesOrderDAOobj) {
        this.accSalesOrderDAOobj = accSalesOrderDAOobj;
    }

    public void setaccExportReportsServiceDAO(AccExportReportsServiceDAO accExportReportsServiceDAOobj) {
        this.accExportReportsServiceDAOobj = accExportReportsServiceDAOobj;
    }

    public void setaccInvoiceServiceDAO(AccInvoiceServiceDAO accInvoiceServiceDAO) {
        this.accInvoiceServiceDAO = accInvoiceServiceDAO;
    }

    public void setaccGoodsReceiptServiceDAO(AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAO) {
        this.accGoodsReceiptServiceDAO = accGoodsReceiptServiceDAO;
    }

    public void setAccCusVenMapDAOObj(accCusVenMapDAO accCusVenMapDAOObj) {
        this.accCusVenMapDAOObj = accCusVenMapDAOObj;
    }

    public void setaccDebitNoteDAO(accDebitNoteDAO accDebitNoteobj) {
        this.accDebitNoteobj = accDebitNoteobj;
    }

    public void setauditTrailDAO(auditTrailDAO auditTrailDAOObj) {
        this.auditTrailObj = auditTrailDAOObj;
    }

    public void setaccAccountDAO(accAccountDAO accAccountDAOobj) {
        this.accAccountDAOobj = accAccountDAOobj;
    }

    public void setcustomDesignDAO(CustomDesignDAO customDesignDAOObj) {
        this.customDesignDAOObj = customDesignDAOObj;
    }

    public void setaccTermDAO(accTermDAO accTermObj) {
        this.accTermObj = accTermObj;
    }

    public void setvelocityEngine(VelocityEngine velocityEngine) {
        this.velocityEngine = velocityEngine;
    }
    
    @Override
    public void setMessageSource(MessageSource ms) {
        this.messageSource = ms;
    }

    public void setkwlCommonTablesDAO(kwlCommonTablesDAO kwlCommonTablesDAOObj1) {
        this.kwlCommonTablesDAOObj = kwlCommonTablesDAOObj1;
    }

    public void setTxnManager(HibernateTransactionManager txManager) {
        this.txnManager = txManager;
    }

    public void setaccInvoiceDAO(accInvoiceDAO accInvoiceDAOobj) {
        this.accInvoiceDAOobj = accInvoiceDAOobj;
    }

    public void setaccCreditNoteDAO(accCreditNoteDAO accCreditNoteDAOobj) {
        this.accCreditNoteDAOobj = accCreditNoteDAOobj;
    }

    public void setaccReceiptDAO(accReceiptDAO accReceiptDAOobj) {
        this.accReceiptDAOobj = accReceiptDAOobj;
    }

    public void setaccJournalEntryDAO(accJournalEntryDAO accJournalEntryobj) {
        this.accJournalEntryobj = accJournalEntryobj;
    }

    public void setaccProductDAO(accProductDAO accProductObj) {
        this.accProductObj = accProductObj;
    }

    public void setaccDiscountDAO(accDiscountDAO accDiscountobj) {
        this.accDiscountobj = accDiscountobj;
    }

    public void setaccCurrencyDAO(accCurrencyDAO accCurrencyDAOobj) {
        this.accCurrencyDAOobj = accCurrencyDAOobj;
    }

    public void setaccCustomerDAO(accCustomerDAO accCustomerDAOobj) {
        this.accCustomerDAOobj = accCustomerDAOobj;
    }

    public void setaccTaxDAO(accTaxDAO accTaxObj) {
        this.accTaxObj = accTaxObj;
    }

    public void setaccountingHandlerDAO(AccountingHandlerDAO AccountingHandlerDAOobj) {
        this.accountingHandlerDAOobj = AccountingHandlerDAOobj;
    }

    public void setexportMPXDAOImpl(exportMPXDAOImpl exportDaoObj) {
        this.exportDaoObj = exportDaoObj;
    }

    public String getSuccessView() {
        return successView;
    }

    public void setSuccessView(String successView) {
        this.successView = successView;
    }

    public void setAccInvoiceCommon(accInvoiceCMN accInvoiceCommon) {
        this.accInvoiceCommon = accInvoiceCommon;
    }

    public void setaccCostCenterDAO(AccCostCenterDAO accCostCenterDAOObj) {
        this.accCostCenterObj = accCostCenterDAOObj;
    }

    public void setAuthHandlerDAOObj(authHandlerDAO authHandlerDAOObj) {
        this.authHandlerDAOObj = authHandlerDAOObj;
    }

    public void setaccCompanyPreferencesDAO(accCompanyPreferencesDAO accCompanyPreferencesObj) {
        this.accCompanyPreferencesObj = accCompanyPreferencesObj;
    }

    public void setaccCommonTablesDAO(AccCommonTablesDAO accCommonTablesDAO) {
        this.accCommonTablesDAO = accCommonTablesDAO;
    }

    public void setaccPurchaseOrderServiceDAO(AccPurchaseOrderServiceDAO accPurchaseOrderServiceDAOobj) {
        this.accPurchaseOrderServiceDAOobj = accPurchaseOrderServiceDAOobj;
    }

    public void setaccGoodsReceiptDAO(accGoodsReceiptDAO accGoodsReceiptobj) {
        this.accGoodsReceiptobj = accGoodsReceiptobj;
    }

    public void setaccVendorDAO(accVendorDAO accVendorDAOobj) {
        this.accVendorDAOobj = accVendorDAOobj;
    }
    
    public void setAccTemplateReportService(AccTemplateReportService accTemplateReportService) {
        this.accTemplateReportService = accTemplateReportService;
    }
    
    @Override
    public JasperPrint exportDefaultFormatCreditNoteJasperReport(HttpServletRequest request, HttpServletResponse response, String billid) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public JasperPrint exportDefaultFormatDebitNoteJasperReport(HttpServletRequest request, HttpServletResponse response, String billid) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<Object> exportCreditNoteJasperReportForMonzone(HttpServletRequest request, HttpServletResponse response, List entityList) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<Object> exportDebitNoteJasperReportForMonzone(HttpServletRequest request, HttpServletResponse response, List entityList) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<Object> exportCNDNSRPRJasperForFasten(HttpServletRequest request, HttpServletResponse response ,String billid, String CNNumber, int moduleId) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public void getPurchaseOrdersForXls(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public void exportXlsReport(HttpServletResponse response, String title, String fileName, JSONArray DataJArr, String companyid) throws ServiceException, SessionExpiredException, JSONException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    public JasperPrint RemoveBlankPages(JasperPrint print4) {
        List<JasperPrint> jprintlist = new ArrayList<JasperPrint>();
        jprintlist.add(print4);
        JasperPrint jsperPages = jprintlist.get(0);
        List<JRPrintPage> pages = jsperPages.getPages();
        if (pages.size() > 1) {
            pages.remove(pages.size() - 1);
        }
        return jsperPages;
    }
 
    @Override
    public JasperPrint exportCustomerLedgerJasperReport(JSONObject request) throws ServiceException, JSONException, SessionExpiredException, ParseException {

        Map<String, Object> statementOfAccountsMap = new HashMap<String, Object>();
        String view = "";
        JasperPrint jasperPrint = null;
        JasperReport jasperReport = null;
        JasperReport jasperReportSubReport = null;
        int templateFlag = request.optInt("templateflag",0);
        int templateType = request.optInt("type",0);
        StatementOfAccounts statementOfAccounts = new StatementOfAccounts();
        ArrayList<StatementOfAccounts> statementOfAccountsList = new ArrayList<StatementOfAccounts>();
        try {
            String companyid = request.optString(Constants.companyKey,"");
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);

            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            statementOfAccounts.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);//new SimpleDateFormat("dd/MM/yyyy");
            SimpleDateFormat sdf = new SimpleDateFormat(Constants.ddMMyyyy);
            Date startDate = authHandler.getDateOnlyFormat().parse(request.optString("stdate"));
            Date endDate = authHandler.getDateOnlyFormat().parse(request.optString("enddate"));
            Date asofDate = authHandler.getDateOnlyFormat().parse(request.optString("asofdate"));
            String dateRange = "";  //ERP-6384
            if (startDate != null && endDate != null) {
                dateRange = "From Date: " + df.format(startDate) + " To Date: " + df.format(endDate);
            }

            Calendar cal1 = Calendar.getInstance();
            Date date = cal1.getTime();
            String datePattern = "dd/MM/yyyy";
            statementOfAccounts.setDate(templateType == 1 ? (endDate != null ? df.format(endDate) : "") : (date != null ? authHandler.getUserDateFormatterWithoutTimeZone(request).format(date) : ""));  //Date Formatter applied fot template type=0
            statementOfAccounts.setDateRange(dateRange);    //ERP-6384
            statementOfAccounts.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            statementOfAccounts.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            statementOfAccounts.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            statementOfAccounts.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
            statementOfAccounts.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
            statementOfAccounts.setCompanyRegNo(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
            statementOfAccounts.setCurrency(company.getCurrency() != null ? company.getCurrency().getName() : "");
            String companySubName = "";
            if (templateFlag == Constants.BakerTilly_templateflag) {
                if (companyid.equalsIgnoreCase(Constants.BakerTilly_BTC_COMPANYID)) {
                    companySubName = "Baker Tilly Consultancy (Singapore) Pte Ltd";
                    statementOfAccounts.setName(companySubName);
                } else if (companyid.equalsIgnoreCase(Constants.BakerTilly_TFWMS_COMPANYID)) {
                    companySubName = "TFW Management Services Pte Ltd<br/>Management Consultants";
                    statementOfAccounts.setName(companySubName);
                } else if (companyid.equalsIgnoreCase(Constants.BakerTilly_BT_COMPANYID)) {
                    companySubName = "Baker Tilly TFW LLP<br/>Chartered Accountants of Singapore";
                    statementOfAccounts.setName(companySubName);
                } else if (companyid.equalsIgnoreCase(Constants.BakerTilly_PCS_COMPANYID)) {
                    companySubName = "Park Crescent Services Pte Ltd<br/>Corporate Secretaries";
                    statementOfAccounts.setName(companySubName);
                }
            }
            
            statementOfAccountsList.add(statementOfAccounts);
            if (templateType == Constants.SOA_CUSTOMER_CURRENCY) {
//                if(request.optString("name").equals("Customer_Account_Statement") && request.optInt("reportid")==1227){
//                    statementOfAccountsMap = accTemplateReportService.getSOAInfoMap(request,3,templateFlag);
//                }else{
                    statementOfAccountsMap = getCustomerLedgerForTonyFiberGlassJasper(request, templateFlag);
//                }
            }else if(templateType == Constants.Statement_OF_Invoice){
//                if(request.optString("name").equals("Customer_Account_Statement") && request.optInt("reportid")==1227){
//                    statementOfAccountsMap = accTemplateReportService.getSOAInfoMap(request,1,templateFlag);
//                }else{
                    statementOfAccountsMap = getCustomerLedgerInvoiceJasper(request, templateFlag);
//                }
            }else {
//                if(request.optString("name").equals("Customer_Account_Statement") && request.optInt("reportid")==1227){
//                    statementOfAccountsMap = accTemplateReportService.getSOAInfoMap(request,2,templateFlag);
//                }else{
                    request.put("showDishonouredPayment", true);
                    statementOfAccountsMap = getCustomerLedgerJasper(request, templateFlag);
//                }
                }
            statementOfAccountsMap.put("format", "pdf");
            String fileName1 = "";
            if (templateFlag == Constants.F1Recreation_templateflag || templateFlag == Constants.F1RecreationLeasing_templateflag) {
                fileName1 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
            } else {
                fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            }
            statementOfAccountsMap.put("imagePath", fileName1);
            statementOfAccountsMap.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
            if (templateFlag == Constants.sms_templateflag) {
                statementOfAccountsMap.put("footerflag", true);
            } else {
                statementOfAccountsMap.put("footerflag", false);  //Mayur B- To hide footer logo for SMS holding Company.
            }
            boolean isLetterHead = request.optBoolean("isLetterHead",false);
            
            statementOfAccountsMap.put("isLetterHead", isLetterHead && ExportRecordHandler.checkCompanyTemplateLogoPresent(company));
            boolean isLandscape = request.optBoolean("isLandscape",false);
             if(isLandscape){
                 String statementMainReportJrxml="";
                 String statementSubreportReportJrxml="";
                 if (templateType == Constants.SOA_CUSTOMER_CURRENCY) {
                     if (templateFlag == Constants.WorldGreen_templateflag || templateFlag == Constants.Alfatech_templateFlag) {
                         statementMainReportJrxml = "/DefaultStatementOfAccountsLandscape.jrxml";
                             statementSubreportReportJrxml = "/WorldGreenStatementOfAccountsSubReportLandscape.jrxml";
                    } else {
                         statementMainReportJrxml = "/DefaultStatementOfAccountsLandscape.jrxml";
                             statementSubreportReportJrxml = "/DefaultStatementOfAccountsSubReportLandscape.jrxml";
                     }
                 } else if(templateFlag == Constants.GPlus_templateflag && templateType == Constants.SOA_Credit_Debit_Split){
                        statementMainReportJrxml =  "/GPlus_SOA_Landscape_MainReport.jrxml";
                        statementSubreportReportJrxml="/GPlus_SOA_Landscape_SubReport.jrxml";
                 } else{
                    statementMainReportJrxml="/StatementOfAccountsLandscape.jrxml";
                    statementSubreportReportJrxml="/StatementOfAccountsSubReportLandscape.jrxml";
                 }
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + statementMainReportJrxml);
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);
                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + statementSubreportReportJrxml);
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
             } else if (templateType == Constants.Statement_OF_Invoice) {
                 fileName1 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                 statementOfAccountsMap.put("imagePath2", fileName1);
                 
                 Map<String, Object> jasperParMap = getStatementOfInvoiceJrxml(request, templateFlag);
                 jasperReport = (JasperReport) jasperParMap.get("jasperReport");
                 jasperReportSubReport = (JasperReport) jasperParMap.get("jasperReportSubReport");

             } else if (templateType == Constants.SOA_CUSTOMER_CURRENCY) {
                String statementMainReportJrxml="/DefaultStatementOfAccounts.jrxml";
                String statementSubreportReportJrxml="/DefaultStatementOfAccountsSubReport.jrxml";
                if (templateFlag == Constants.Guan_Chong_templateflag) {  
                    statementMainReportJrxml =  "/GuanChongStatementOfAccounts.jrxml";// check top have Blank space for  letter head
                    statementSubreportReportJrxml =  "/GuanChangCustomerCurrencySOA.jrxml";// With Blank Space 
                } else if (templateFlag == Constants.FastenEnterprises_templateflag || templateFlag == Constants.FastenHardwareEngineering_templateflag) {  
                    statementMainReportJrxml =  "/FastenStatementOfAccounts.jrxml";//  With Job Code as  custome filed from invoice
                    statementSubreportReportJrxml =  "/FastenStatementOfAccountsSubReport.jrxml";
                } else if(templateFlag ==  Constants.WorldGreen_templateflag ||templateFlag == Constants.Alfatech_templateFlag){
                    statementSubreportReportJrxml="/WorldGreenStatementOfAccountsSubReport.jrxml";
                }
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + statementMainReportJrxml);
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);
                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + statementSubreportReportJrxml);
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if(templateFlag ==  Constants.GPlus_templateflag && templateType == Constants.SOA_Credit_Debit_Split){
                    String statementMainReportJrxml =  "/GPlus_SOA_MainReport.jrxml";
                    String statementSubreportReportJrxml = "/GPlus_SOA_SubReport.jrxml";
                    InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + statementMainReportJrxml);
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + statementSubreportReportJrxml);
                    JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                    jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if(templateFlag ==  Constants.CleanSolutions_templateflag){
                    String statementMainReportJrxml =  "/CleanSolutions_SOA_MainReport.jrxml";
                    String statementSubreportReportJrxml = "/CleanSolutions_SOA_SubReport.jrxml";
                    InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + statementMainReportJrxml);
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + statementSubreportReportJrxml);
                    JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                    jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.sms_templateflag || templateFlag == Constants.smsholding_templateflag) {
//                view = "smsStatementOfAccounts";
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/SMSStatementOfAccounts.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/StatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

            } else if (templateFlag == Constants.lsh_templateflag) {
//                view = "LSHStatementOfAccounts";
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/LSHStatementOfAccounts.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"")+ "/LSHStatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.HCIS_templateflag) {
//                view = "LSHStatementOfAccounts";
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/HCISStatementOfAccounts.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/HCISStatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.BuildMate_templateflag) {
//                view = "LSHStatementOfAccounts";
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/LSHStatementOfAccounts.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/BMStatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.ChyeSengHuatConstruction_TemplateFlag || templateFlag == Constants.ChyeSengHuatHoldings_TemplateFlag || templateFlag == Constants.CSHOrchard_TemplateFlag || templateFlag == Constants.DandJ_TemplateFlag) {
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/StatementOfAccountChyeSang.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/StatementOfAccountSubreportCheySang.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.Guan_Chong_templateflag) {
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/StatementOfAccountsGuanChong.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/StatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.Monzone_templateflag) {
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/MonzoneStatementOfAccounts.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/MonzoneStatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.F1Recreation_templateflag || templateFlag == Constants.F1RecreationLeasing_templateflag) {
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/F1recreationStatementOfAccounts.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/F1recreationStatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                 jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
             } else if (templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                 statementOfAccountsMap.put("GstRegNo", "GST Registration No. " +( companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : ""));
                 statementOfAccountsMap.put("isImageOnLeft", true);
                 if (templateFlag == Constants.Endovation_templateflag) {
                     statementOfAccountsMap.put("isImageOnLeft", false);
                 }
                 //Use Tax No Field as Cmpny Reg No-
                 statementOfAccountsMap.put("CompanyegNo", "Company Registration No. " +( companyAccountPreferences.getTaxNumber() != null ? companyAccountPreferences.getTaxNumber() : ""));
                 InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/EndovationSOA.jrxml");
                 JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                 jasperReport = JasperCompileManager.compileReport(jasperDesign);
                 
                 InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/EndovationSOASubreport.jrxml");
                 JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                 jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
             } else {
                String file = "";
                if (templateFlag == Constants.vhqpost_tempalteflag)//add header logo half
                {
                    file = "/StatementofAccountWithLogoOnHalfSide.jrxml";
                } else {
                    file = "/StatementOfAccounts.jrxml";
                }  
//                view = "statementOfAccounts";
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + file);
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + "/StatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            }
            if (templateFlag == Constants.Guan_Chong_templateflag) {  //To show statement date as last day of the month.
//                cal1.set(Calendar.DAY_OF_MONTH, cal1.getActualMaximum(Calendar.DAY_OF_MONTH));
//                date = cal1.getTime();
                statementOfAccountsMap.put("statementdate", df.format(endDate));    //ERP-9451 The Date should show statement date not date of printing. //ERP-8366 : Last date of the current month.
            } else {
                statementOfAccountsMap.put("statementdate", df.format(startDate) + " - " + df.format(endDate));
            }
            if (templateFlag == Constants.ChyeSengHuatConstruction_TemplateFlag || templateFlag == Constants.ChyeSengHuatHoldings_TemplateFlag || templateFlag == Constants.CSHOrchard_TemplateFlag || templateFlag == Constants.DandJ_TemplateFlag) {
                statementOfAccountsMap.put("Title", "STATEMENT OF ACCOUNT");
            } if (templateFlag == Constants.Guan_Chong_templateflag || templateFlag == Constants.Guan_ChongBF_templateflag || templateFlag == Constants.CSHOrchard_TemplateFlag ) {
                statementOfAccountsMap.put("Title", "Statement of Accounts");
            } else if(templateFlag == Constants.GPlus_templateflag){
                statementOfAccountsMap.put("Title", "Statement of Accounts");
            } else if(templateType == 0 && templateFlag ==  Constants.CleanSolutions_templateflag){
                statementOfAccountsMap.put("Title", "Statement of");
            } else {
                statementOfAccountsMap.put("Title", "Statement");
            }
            statementOfAccountsMap.put("Companyname", company.getCompanyName() != null ? company.getCompanyName() : "");
            if (templateFlag == Constants.WorldGreen_templateflag) {
                statementOfAccountsMap.put("Companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj) + (companyAccountPreferences.getCompanyUEN() != null ? ("\nCo. Registration No.: " + companyAccountPreferences.getCompanyUEN()) : ""));
                statementOfAccountsMap.put("Title", "Statement of Account");
            } else {
                statementOfAccountsMap.put("Companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            }
            statementOfAccountsMap.put("TO_Date",  (endDate != null ? sdf.format(authHandler.getGlobalDateFormat().parse(request.optString("enddate"))) :authHandler.getDateOnlyFormat().format(date)));
            statementOfAccountsMap.put("From_Date",  (startDate != null ? sdf.format(authHandler.getGlobalDateFormat().parse(request.optString("stdate"))):authHandler.getDateOnlyFormat().format(date)));
            statementOfAccountsMap.put("asofDate",  (asofDate != null ? sdf.format(authHandler.getGlobalDateFormat().parse(request.optString("asofdate"))) :""));
            String agedon =null;
                if (!StringUtil.isNullOrEmpty(request.optString("datefilter"))) {
                    if(request.optInt("datefilter")==Constants.agedDueDate1to30Filter){
                        agedon =Constants.agedDueDate1to30Days;
                    } else if(request.optInt("datefilter")==Constants.agedInvoiceDateFilter){
                         agedon =Constants.agedInvoiceDate;      
                    } else if (request.optInt("datefilter") == Constants.agedInvoiceDate0to30Filter) {
                         agedon = Constants.agedInvoiceDate0to30;
                    } else{
                         agedon =Constants.agedDueDate0to30Days;  
                    }
                }
            statementOfAccountsMap.put("Aged_On",  (agedon != null ?agedon:""));          
            statementOfAccountsMap.put("templateFlag",templateFlag+"");
            statementOfAccountsMap.put("StatementOfAccountsSubReport", jasperReportSubReport);
            statementOfAccountsMap.put("datasource", new JRBeanCollectionDataSource(statementOfAccountsList));

            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(statementOfAccountsList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, statementOfAccountsMap, beanColDataSource);
            if (templateType == Constants.Statement_OF_Invoice ||templateType == Constants.SOA_CUSTOMER_CURRENCY || templateType == Constants.SOA_Credit_Debit_Split || (templateType==0 && (templateFlag == Constants.F1Recreation_templateflag || templateFlag == Constants.F1RecreationLeasing_templateflag || templateFlag == Constants.BakerTilly_templateflag || templateFlag ==  Constants.CleanSolutions_templateflag))) {
                jasperPrint = RemoveBlankPages(jasperPrint);
            }

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jasperPrint;
    }
    public Map<String, Object> getCustomerLedgerJasper(JSONObject  request, int templateFlag) throws ServiceException, SessionExpiredException, UnsupportedEncodingException {
        JSONObject jobj = new JSONObject();
        ArrayList<StatementOfAccountsSubReport> statementOfReportsSubReportList = new ArrayList<StatementOfAccountsSubReport>();
        HashMap<String, StatementOfAccountsSubReport> stmSubReportListMap = new HashMap<String, StatementOfAccountsSubReport>();
        Map<String, Object> statementOfAccountsMap = new HashMap<String, Object>();
        HashMap<String, ArrayList> amountDueMap = new HashMap<String, ArrayList>();
        try {
            String companyid =  request.optString(Constants.companyKey);
            int reportid = !StringUtil.isNullOrEmpty(request.optString("reportid")) ? Integer.parseInt(request.optString("reportid")) : -1;
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            int templateType = request.optString("type") != null ? Integer.parseInt(request.optString("type")) : 0;
            KwlReturnObject extraCompanyresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyresult.getEntityList().get(0);
            JSONArray jArr = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            boolean invoiceAmountDueFilter = true;
            if (request.optString("invoiceAmountDueFilter") != null) {
                invoiceAmountDueFilter = Boolean.parseBoolean(request.optString("invoiceAmountDueFilter"));
            }
            boolean isPostDatedCheque = false;
            if (request.optString("isPostDatedCheque") != null) {
                isPostDatedCheque = Boolean.parseBoolean(request.optString("isPostDatedCheque"));
            }
            
            int dateFilter = 1;
            if (request.optString("datefilter") != null) {
                dateFilter = request.optInt("datefilter",1);
            }
            
            Date startDate = authHandler.getDateOnlyFormat( ).parse(request.optString("stdate"));
            Date endDate = authHandler.getDateOnlyFormat( ).parse(request.optString("enddate"));
            Date asofDate = authHandler.getDateOnlyFormat( ).parse(request.optString("asofdate"));
            DateFormat df = authHandler.getDateOnlyFormat( );
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            //dateFormat.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getTimeZoneDifference(request)));//ERP-8521
            String customerIds ="";
            if(request.optString("customerIds")!=null){
//                customerIds = request.optString("customerIds").toString();
//            }else{
                 customerIds = request.optString("customerIds");
            }

            String withoutinventory = request.optString("withoutinventory");
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(request);
            requestParams.put("customerIds", customerIds);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put("startDate", new Date(0));
            requestParams.put("endDate", endDate);
            requestParams.put("isPostDatedCheque", isPostDatedCheque);
            if(templateFlag==Constants.F1RecreationLeasing_templateflag || templateFlag==Constants.F1Recreation_templateflag){
                requestParams.put("isSortedOnCreationDate",true);// to sort the date field
            }

            String searchJson = request.optString(Constants.Acc_Search_Json, "");
            String filterConjuctionCriteria = request.optString(Constants.Filter_Criteria, "");
            if (!StringUtil.isNullOrEmpty(searchJson)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
            }
            if (!StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            }

            boolean isAdvanceSearch = false;
            String invoiceSearchJson = "";
            String receiptSearchJson = "";
            String cnSearchJson = "";
            String dnSearchJson = "";
            String makePaymentSearchJson = "";

            if (requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Filter_Criteria) != null) {
                if (requestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                searchJson = requestParams.get(Constants.Acc_Search_Json).toString();
                if (!StringUtil.isNullOrEmpty(searchJson)) {
                    isAdvanceSearch = true;
                    requestParams.put(Constants.Filter_Criteria, request.optString(Constants.Filter_Criteria));
                    HashMap<String, Object> reqPar1 = new HashMap<>();
                    reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                    reqPar1.put(Constants.Acc_Search_Json, searchJson);
                    reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    invoiceSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.remove(Constants.moduleid);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    receiptSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    dnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    cnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    makePaymentSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                }
            }
            requestParams.put("invoiceSearchJson", invoiceSearchJson);
            requestParams.put("receiptSearchJson", receiptSearchJson);
            requestParams.put("cnSearchJson", cnSearchJson);
            requestParams.put("dnSearchJson", dnSearchJson);
            requestParams.put("makePaymentSearchJson", makePaymentSearchJson);
            requestParams.put("isAdvanceSearch", isAdvanceSearch);
            if (request.optBoolean("showDishonouredPayment", false)) {
                requestParams.put("showDishonouredPayment", true);
            }
            
            KwlReturnObject customerLedger = accInvoiceDAOobj.getCustomerLedgerReport(requestParams);
            List customerLedgerList = customerLedger.getEntityList();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), request.optString(Constants.globalCurrencyKey));
            KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
            String customBaseCurrencySymbol = accCommonTablesDAO.getCustomCurrencySymbol(baseCurrency.getSymbol(), companyid);
            String customBaseCurrencyCode = accCommonTablesDAO.getCustomCurrencyCode(baseCurrency.getCurrencyCode(), companyid);
            double balanceAmtInBase = 0;
            double balanceAmount = 0;
            String prevCustomer = "";
            
            String curDateString = "";
            Date curDate = null;
            boolean booleanAged = false;//Added for aged payable/receivable
//            int duration = 30;
            int duration = Integer.parseInt(request.optString("interval"));
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            curDate = Calendar.getInstance().getTime();
            curDateString = df.format(curDate);
            booleanAged = true;
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;

            HashMap<String, JSONObject> hashMapJSON = new HashMap<String, JSONObject>();
            JSONObject mainObj = accInvoiceServiceDAO.getCustomerAgedReceivableMerged(request, false, true);
            JSONArray jSONArray = mainObj.getJSONArray("data");
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                if (jSONObject.has("personid")) {
                    hashMapJSON.put(jSONObject.getString("personid"), jSONObject);
                }
            }
            request.put("isCurrencyDetails", true);
            Map<String,List<AgeingTableForSOA>> agedDetaislMap = getCurrencyWiseAgedDetaislForSOA(request,true);

            String defValue = authHandler.getCompleteDFStringForAmount("0.", companyid);
            ArrayList<Double> amountDueList = new ArrayList<Double>();
            double currencyTotalAmount = 0.00;
//            Map<String, ArrayList> currencyHashMapForAgeing = new HashMap<String, ArrayList>();
            Map<String, HashMap> currencyHashMap = new HashMap<String, HashMap>();
            Map<String, String> currencyCodeHashMap = new HashMap<String, String>();
            Set<String> custemerSet= new HashSet();
            String previousCustomerId = "";
            for (int i = 0; i < customerLedgerList.size(); i++) {
                Object[] tempCustomerLedger = (Object[]) customerLedgerList.get(i);
                String type = (String) tempCustomerLedger[0];
                String invoiceId = (String) tempCustomerLedger[1]; // if(type=='invoice') ==> invoice.id, if(type=='receipt') ==> receipt.id, if(type=='creditnote') ==> creditnote.id
                String invoiceNumber = (String) tempCustomerLedger[2]; // if(type=='invoice') ==> invoice.invoicenumber, if(type=='receipt') ==> receipt.receiptnumber, if(type=='creditnote') ==> creditnote.cnnumber
                String jeId = (String) tempCustomerLedger[3]; // journalentry.id
                String memo = StringUtil.isNullOrEmpty((String) tempCustomerLedger[4]) ? "" : (String) tempCustomerLedger[4]; // if(type=='invoice') ==> invoice.memo, if(type=='receipt') ==> receipt.memo, if(type=='creditnote') ==> creditnote.memo
                String currencyid = StringUtil.isNullOrEmpty((String) tempCustomerLedger[5]) ? request.optString(Constants.globalCurrencyKey) : (String) tempCustomerLedger[5]; // if(type=='invoice') ==> invoice.currency, if(type=='receipt') ==> receipt.currency, if(type=='creditnote') ==> creditnote.currency
                double amount = (Double) tempCustomerLedger[6]; // if(type=='invoice') ==> jedetail.amount, if(type=='receipt') ==> receiptdetails.amount, if(type=='creditnote') ==> jedetail.amount
                String jeEntryNumber = (String) tempCustomerLedger[7];
                Date jeEntryDate = (Date) tempCustomerLedger[8];
                double jeEntryExternalCurrencyRate = (Double) tempCustomerLedger[9];
                String invoiceCustomerId = (String) tempCustomerLedger[10];
                double invoiceOriginalAmount = amount;

                String CustomerID = tempCustomerLedger[18].toString();
                String CustomerAccountID = "";
                Customer customer = null;
                if(!StringUtil.isNullOrEmpty(CustomerID)){
                    KwlReturnObject kwlCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), CustomerID);
                    customer = (Customer) kwlCustomer.getEntityList().get(0);
                    CustomerAccountID = customer.getAccount().getID();
                }

                if(i==0) {
                    previousCustomerId = new String(invoiceCustomerId);
                }
                
                KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), invoiceCustomerId);
                Customer cust = (Customer) custresult.getEntityList().get(0);
                String invoiceCustomerCode = cust.getAcccode();
                String invoiceCustomerTerms = cust.getCreditTerm() == null ? "" : (cust.getCreditTerm().getTermdays() + " Days");
                
                //params to send to get billing address
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put("companyid", companyid);
                addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                addressParams.put("isBillingAddress", true);    //true to get billing address
                addressParams.put("customerid", cust.getID()); 
                CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                String invoiceCustomerAttn = "";
                if(customerAddressDetails!=null){
                    invoiceCustomerAttn = StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : customerAddressDetails.getContactPerson();
                }
                
                addressParams.put("templateFlag",templateFlag);
                String invoiceCustomerAdd = (templateFlag == Constants.HCIS_templateflag || templateFlag==Constants.F1RecreationLeasing_templateflag || templateFlag == Constants.F1Recreation_templateflag) ? accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams) : accountingHandlerDAOobj.getCustomerAddress(addressParams);
                invoiceCustomerAdd += StringUtil.isNullOrEmpty(invoiceCustomerAttn) ? "" : ("\nAttn : "+invoiceCustomerAttn);
                String invoiceCustomerName = (String) tempCustomerLedger[11];
                String withoutInventaryFlag = (String) tempCustomerLedger[13];
                double cndnAmountDue = (Double) tempCustomerLedger[14];
                String duedate ="";
                String chequenumber ="";
                String chequedate ="";
                
                if (templateFlag == Constants.F1RecreationLeasing_templateflag || templateFlag == Constants.F1Recreation_templateflag) {
                    if (type.equalsIgnoreCase("Customer Invoice") || type.equalsIgnoreCase("Sales Invoice")) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), invoiceId);
                        Invoice inv = (Invoice) cap.getEntityList().get(0);
                        duedate = inv.getDueDate() != null ? dateFormat.format(inv.getDueDate()) : "";
                    } else if (type.equalsIgnoreCase("Payment Received")) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Receipt.class.getName(), invoiceId);
                        Receipt receipt = (Receipt) cap.getEntityList().get(0);
                        chequenumber = ((receipt.getPayDetail() == null || receipt.getPayDetail().getCheque() == null) ? "" : "Cheque Number : "+receipt.getPayDetail().getCheque().getChequeNo());
                        chequedate = receipt.getPayDetail() == null ? "" : (receipt.getPayDetail().getPaymentMethod().getDetailType() == PaymentMethod.TYPE_BANK) ? (receipt.getPayDetail().getCheque() != null ? "&nbsp;&nbsp;&nbsp;&nbsp;"  +dateFormat.format(receipt.getPayDetail().getCheque().getDueDate()) : "") : "";
                    } else if (type.equalsIgnoreCase("Payment Made")) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Payment.class.getName(), invoiceId);
                        Payment receipt = (Payment) cap.getEntityList().get(0);
                        chequenumber = ((receipt.getPayDetail() == null || receipt.getPayDetail().getCheque() == null) ? "" : "Cheque Number : "+receipt.getPayDetail().getCheque().getChequeNo());
                        chequedate = receipt.getPayDetail() == null ? "" : (receipt.getPayDetail().getPaymentMethod().getDetailType() == PaymentMethod.TYPE_BANK) ? (receipt.getPayDetail().getCheque() != null ? "&nbsp;&nbsp;&nbsp;&nbsp;"+dateFormat.format(receipt.getPayDetail().getCheque().getDueDate()) : "") : "";
                    }
                }

                int openingtransactionFlag = Integer.parseInt(tempCustomerLedger[16].toString());
                boolean isOpeningBalanceTransaction = false;
                if (openingtransactionFlag == 1) {
                    isOpeningBalanceTransaction = true;
                }
                HashMap<String, Object> reqMap = AccountingManager.getGlobalParams(request);
                reqMap.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
                reqMap.put("startDate", startDate);
                reqMap.put("asofDate", asofDate);
                reqMap.put("invoiceCustomerId", invoiceCustomerId);
                reqMap.put("isOpeningBalanceTransaction", isOpeningBalanceTransaction);
                reqMap.put("transactionAmount", amount);
                reqMap.put("invoiceId", invoiceId);
                reqMap.put("type", type);
                amount=accReportsService.getAmountOfTransactionForCusromerSOA(reqMap);

    

                boolean isConversionRateFromCurrencyToBase = false;
                int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempCustomerLedger[17].toString());
                if (conversionRateFromCurrencyToBaseFlag == 1) {
                    isConversionRateFromCurrencyToBase = true;
                }

                KWLCurrency currency = null;
                if (!StringUtil.isNullOrEmpty(currencyid)) {
                    KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                    currency = (KWLCurrency) curresult1.getEntityList().get(0);
                }
                String customCurrencySumbol = currency.getSymbol() != null ? accCommonTablesDAO.getCustomCurrencySymbol(currency.getSymbol(),companyid) : accCommonTablesDAO.getCustomCurrencyCode(currency.getCurrencyCode(),companyid);
                if (!prevCustomer.equals(invoiceCustomerId)) {
                    currencyHashMap.clear();
                    currencyCodeHashMap.clear();
                    prevCustomer = invoiceCustomerId;
                    balanceAmtInBase = 0;
                    balanceAmount = 0;
//                    HashMap<String, Double> currncyAmount = new HashMap<String, Double>();
//                    currncyAmount.put(currency.getCurrencyID(), 0.00);
//                    currencyHashMap.put(invoiceCustomerId, currncyAmount);
                    currencyTotalAmount = 0.00;
                }

                if (custemerSet.add(invoiceCustomerId)) { // For each customer putting Accurred Balance detail once. 
                    HashMap<String, Object> reqMap0 = AccountingManager.getGlobalParams(request);
                    reqMap0.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
                    reqMap0.put("startDate", startDate);
                    reqMap0.put("asofDate", asofDate);
                    reqMap0.put("invoiceCustomerId", invoiceCustomerId);
                    reqMap0.put("CustomerAccountID", CustomerAccountID);
                    JSONObject opnJSON = accReportsService.calculateCustomerAccuredBalance(customerLedgerList, reqMap0);
                    StatementOfAccountsSubReport statementOfReportsSubReport = new StatementOfAccountsSubReport();
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(baseCurrency.getCurrencyID()) ? tempHashMap.get(baseCurrency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + opnJSON.getDouble("balanceAmountInBase");
                    tempHashMap.put(baseCurrency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    currencyCodeHashMap.put(baseCurrency.getCurrencyID(), baseCurrency.getCurrencyCode());
                    statementOfReportsSubReport.setCurrency(  customBaseCurrencyCode);
                    statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid));
                    statementOfReportsSubReport.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
//                    statementOfReportsSubReport.setDate(templateType == 1 ? (endDate != null ? df.format(endDate) : "") : (curDate != null ? df.format(curDate) : ""));
                    statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                    if(templateFlag == Constants.BakerTilly_templateflag)
                    {
                        statementOfReportsSubReport.setCustomercode("");
                    }else{
                        statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);                    
                    }                    
                    statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                    statementOfReportsSubReport.setTerms(invoiceCustomerTerms);
                    statementOfReportsSubReport.setAttn(invoiceCustomerAttn);
                    statementOfReportsSubReport.setAmountDueCurrent(defValue);
                    statementOfReportsSubReport.setAmountDue1(defValue);
                    statementOfReportsSubReport.setAmountDue2(defValue);
                    statementOfReportsSubReport.setAmountDue3(defValue);
                    statementOfReportsSubReport.setAmountDue4(defValue);
                    statementOfReportsSubReport.setAmountDue5(defValue);
                    statementOfReportsSubReport.setAmountCurrHeader(Constants.CURRENT);
                    if(dateFilter == Constants.agedDueDate0to30Filter || dateFilter == Constants.agedInvoiceDate0to30Filter){
                        statementOfReportsSubReport.setAmount1Header("0-" + duration + " days");
                    } else {
                        statementOfReportsSubReport.setAmount1Header("1-" + duration + " days");
                    }
                    statementOfReportsSubReport.setAmount2Header(duration + 1 + "-" + (2 * duration) + " days");
                    statementOfReportsSubReport.setAmount3Header((2 * duration) + 1 + "-" + (3 * duration) + " days");
                    statementOfReportsSubReport.setAmount4Header("Over " + (3 * duration) + " days");
                    statementOfReportsSubReport.setCompanyregno("");
                    statementOfReportsSubReport.setTransactionId("Accrued Balance");
                    statementOfReportsSubReport.setAgeingTableData(agedDetaislMap.get(invoiceCustomerId)==null?(new ArrayList<AgeingTableForSOA>()):agedDetaislMap.get(invoiceCustomerId));
                    statementOfReportsSubReportList.add(statementOfReportsSubReport);
                }
                 if (Math.abs(amount) <= 0 || accReportsService.isPeriodWiseOpeningTransaction(jeEntryDate, startDate)) { //if amount is zero then no need to show data in SOA Report so continue with next record
                    //refer ticket ERP-12504
                    if ((!statementOfReportsSubReportList.isEmpty()) && (!(previousCustomerId.equals(invoiceCustomerId))) || (i == customerLedgerList.size() - 1)) {
                        if ((!statementOfReportsSubReportList.isEmpty())) {
                            StatementOfAccountsSubReport lastStatementOfReportsSubReport = (StatementOfAccountsSubReport) statementOfReportsSubReportList.get(statementOfReportsSubReportList.size() - 1);
                            if (lastStatementOfReportsSubReport.getAgeingTableData().size() > 0) {
                                statementOfReportsSubReportList.remove(statementOfReportsSubReportList.size() - 1);
                                lastStatementOfReportsSubReport.setLastRecord(true);
                                statementOfReportsSubReportList.add(lastStatementOfReportsSubReport);
                            }
                        }
                    }
                    previousCustomerId = new String(invoiceCustomerId);

                    continue;
                }
               
                if (!currencyCodeHashMap.containsKey(currency.getCurrencyID())) {
                    currencyCodeHashMap.put(currency.getCurrencyID(), accCommonTablesDAO.getCustomCurrencyCode(currency.getCurrencyCode(), companyid));
                }
                StatementOfAccountsSubReport statementOfReportsSubReport = new StatementOfAccountsSubReport();
                statementOfReportsSubReport.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                statementOfReportsSubReport.setDate(templateType == 1 ? (endDate != null ? df.format(endDate) : "") : (curDate != null ? df.format(curDate) : ""));
                statementOfReportsSubReport.setBalance(defValue);
                statementOfReportsSubReport.setAmountDueCurrent(defValue);
                statementOfReportsSubReport.setAmountDue1(defValue);
                statementOfReportsSubReport.setAmountDue2(defValue);
                statementOfReportsSubReport.setAmountDue3(defValue);
                statementOfReportsSubReport.setAmountDue4(defValue);
                statementOfReportsSubReport.setAmountDue5(defValue);
                Invoice invoice = null;
                if (!StringUtil.isNullOrEmpty(invoiceId)) {
                    KwlReturnObject invoiceList = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceId);
                    invoice = (Invoice) invoiceList.getEntityList().get(0);
                }

//                String companyid = sessionHandlerImpl.getCompanyid(request);
                if (templateFlag == Constants.HCIS_templateflag) {
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Customer_ModuleId, 0, 1));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    KwlReturnObject idcustresult = accountingHandlerDAOobj.getObject(CustomerCustomData.class.getName(), cust.getID());
                    if (idcustresult.getEntityList().get(0) != null && idcustresult.getEntityList().size() > 0) {
                        CustomerCustomData jeCustom = (CustomerCustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();

                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                if ((varEntry.getKey().split("_")[1]).equals("Tuition Deposit")) {
                                    statementOfReportsSubReport.setTutiondeposite(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Boarding Deposit")) {
                                    statementOfReportsSubReport.setBoardingdeposite(coldata);
                                }
                            }
                        }
                    }
                }

//                if (invoice != null) {
//
//                    List ll = accInvoiceCommon.getAmountDue_Discount(requestParams, invoice);
//                    double amountdue = (Double) ll.get(0);
//                    double discountDeduct = (Double) ll.get(1);
//
//                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountdue, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
//                    double amountDueInBase = (Double) bAmt.getEntityList().get(0);
//                }
                jobjTemp = new JSONObject();
                Object[] tempNextCustomerLedger = null;
                if (i != customerLedgerList.size() - 1) {
                    tempNextCustomerLedger = (Object[]) customerLedgerList.get(i + 1);
                }
                String nextInvoiceCustomerId = tempNextCustomerLedger != null ? (String) tempNextCustomerLedger[10] : "";
                statementOfReportsSubReport.setTransactionId(templateFlag == Constants.HCIS_templateflag ? (type + " " + invoiceNumber) : invoiceNumber);
                if (templateFlag == Constants.F1RecreationLeasing_templateflag || templateFlag == Constants.F1Recreation_templateflag) {
                    statementOfReportsSubReport.setJeId(duedate);
                    statementOfReportsSubReport.setCompanyEmail(customerAddressDetails!=null?(customerAddressDetails.getEmailID() != null ? customerAddressDetails.getEmailID() : ""):"");
                    statementOfReportsSubReport.setCompanyFax(customerAddressDetails!=null?(customerAddressDetails.getFax() != null ? customerAddressDetails.getFax() : ""):"");
                    statementOfReportsSubReport.setCompanyPhone(customerAddressDetails!=null?(customerAddressDetails.getPhone() != null ? customerAddressDetails.getPhone() : ""):"");
                    statementOfReportsSubReport.setBankDetails(chequenumber+chequedate);
                    
                } else {
                    statementOfReportsSubReport.setJeId(templateFlag == Constants.BuildMate_templateflag ? "" : jeEntryNumber);
                }
                statementOfReportsSubReport.setDate(dateFormat.format(jeEntryDate));    //ERP-8521
                statementOfReportsSubReport.setOrderNo(""); // Order No.is unknown param. ERP-6384
                
                KwlReturnObject compResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);// ERP-29143
                Company companyobj = (Company) compResult.getEntityList().get(0);
                if (companyobj != null && companyobj.getCountry() != null && Integer.parseInt(companyobj.getCountry().getID()) == Constants.indian_country_id && extraCompanyPreferences.isTDSapplicable()) {
                    KwlReturnObject amountReceiptDetailOtherwise = accInvoiceDAOobj.getAmountFromReceiptDetailOtherwise(invoiceId);
                    List AmountList = amountReceiptDetailOtherwise.getEntityList();
                    if (AmountList != null) {
                        for (int j = 0; j < AmountList.size(); j++) {
                            Object[] row = (Object[]) AmountList.get(j);
                            double rowAmount = (Double) row[0];
                            if (rowAmount > 0 && row[2] != null && (row[2].toString()).equals(IndiaComplianceConstants.TRUE_CHAR_T)) {
                                amount += rowAmount;
                            } else {
                                amount -= rowAmount;
                            }
                        }
                    }
                }
                
                KwlReturnObject bAmt = null;
                if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                }

                double amountinbase = (Double) bAmt.getEntityList().get(0);
                amountinbase = authHandler.round(amountinbase, companyid);

                double tot_amountinbase = 0;
                List<JournalEntryDetail> listJEDetail = new ArrayList<>();

                if (reportid == Constants.SOA_CUSTOMER_ACCOUNT_STATEMENT_REPORTID) {
                    reqMap.put("type", type);
                    reqMap.put("invoiceId", invoiceId);
                    reqMap.put("amount", amount);
                    reqMap.put("amountinbase", amountinbase);
                    reqMap.put("jeId", jeId);
                    reqMap.put("CustomerAccountID", CustomerAccountID);

                    double[] amountArray = accReportsService.getSOACustomerAmountFromJEDetail(reqMap, listJEDetail);

                    amount = amountArray[0];
                    amountinbase = amountArray[1];
                }

                if (type.equalsIgnoreCase("Cash Sale")) {
                    if (templateFlag == Constants.lsh_templateflag) {
                        statementOfReportsSubReport.setDebit((amount != 0) ? (customCurrencySumbol+ " " + authHandler.formattedAmount(amount, companyid)) : "");
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance(customCurrencySumbol + " " +((currencyTotalAmount != 0) ?  authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid)));
                    } else if (templateFlag == Constants.CleanSolutions_templateflag && templateType == 0) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? (amount>0 ? (customCurrencySumbol+ " " + authHandler.formattedAmount(amount, companyid)) : ("("+(currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode())+ " " + authHandler.formattedAmount((amount*-1), companyid)+")")) : "");
                        statementOfReportsSubReport.setBalance(currencyTotalAmount>0 ? (customCurrencySumbol + " " +((currencyTotalAmount != 0) ?  authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid))) : ((currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode()) + " " +((currencyTotalAmount != 0) ?  authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid))));
                        statementOfReportsSubReport.setBalance(currencyTotalAmount != 0 ? ((currencyTotalAmount>0) ? (customCurrencySumbol + " " + authHandler.formattedAmount(currencyTotalAmount, companyid)) : ("(" + customCurrencySumbol + " " + authHandler.formattedAmount((currencyTotalAmount*-1), companyid) + ")")) : authHandler.formattedAmount(0, companyid));
                        statementOfReportsSubReport.setTransactionId(invoiceNumber + "," + " Orig Amount " + customCurrencySumbol +" " + authHandler.formattedCommaSeparatedAmount(invoiceOriginalAmount, companyid));
                    } else if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag || templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setDebit((amount != 0) ? authHandler.formattedCommaSeparatedAmount(amount, companyid) : "");
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedCommaSeparatedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid));
                    } else {
                        statementOfReportsSubReport.setDebit((amount != 0) ? authHandler.formattedAmount(amount, companyid) : "");
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid));
                    }

                } else if (type.equalsIgnoreCase("Customer Invoice") || type.equalsIgnoreCase("Sales Invoice")) {
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
//                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + amountinbase;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase + amountinbase;
                    balanceAmount = balanceAmount + amount;
                    if (templateFlag == Constants.lsh_templateflag) {
                        statementOfReportsSubReport.setDebit(customCurrencySumbol + " " + authHandler.formattedAmount(amount, companyid));
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance(customCurrencySumbol+" "+((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid)));
                    } else if (templateFlag == Constants.CleanSolutions_templateflag && templateType == 0) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit(amount!=0 ? (amount>0 ? (customCurrencySumbol + " " + authHandler.formattedAmount(amount, companyid)) : ("("+customCurrencySumbol + " " + authHandler.formattedAmount((amount*-1), companyid)+")")) : authHandler.formattedAmount(0, companyid));
                        statementOfReportsSubReport.setBalance(customCurrencySumbol+" "+((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid)));
                        statementOfReportsSubReport.setBalance(currencyTotalAmount != 0 ? (currencyTotalAmount>0 ? (customCurrencySumbol+" "+authHandler.formattedAmount(currencyTotalAmount, companyid)) : ("("+customCurrencySumbol+" "+authHandler.formattedAmount((currencyTotalAmount*-1), companyid)+")")) : authHandler.formattedAmount(0, companyid));
                        
                        Invoice inv = (Invoice) kwlCommonTablesDAOObj.getClassObject(Invoice.class.getName(), invoiceId);
                        duedate = inv.getDueDate() != null ? " Due " + dateFormat.format(inv.getDueDate()) + "," : "";
                        List<String> idsList = new ArrayList<String>();
                        idsList.add(inv.getID());
                        Map<String, JournalEntryDetail> invoiceCustomerEntryMap = accInvoiceDAOobj.getInvoiceCustomerEntryList(idsList);
                        JournalEntryDetail d = null;
                        if (inv.isNormalInvoice() && invoiceCustomerEntryMap.containsKey(inv.getID())) {
                            d = invoiceCustomerEntryMap.get(inv.getID());
                            invoiceOriginalAmount = d.getAmount();
                        }
                        if (inv.isIsOpeningBalenceInvoice() && !inv.isNormalInvoice()) {
                            invoiceOriginalAmount = inv.getOriginalOpeningBalanceAmount();
                        }
                        statementOfReportsSubReport.setTransactionId(invoiceNumber + "," + duedate + " Orig Amount " + (currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode()) +" " + authHandler.formattedCommaSeparatedAmount(invoiceOriginalAmount, companyid));
                    } else if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag || templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setDebit(authHandler.formattedCommaSeparatedAmount(amount, companyid));
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedCommaSeparatedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid));
                    } else {
                        statementOfReportsSubReport.setDebit(authHandler.formattedAmount(amount, companyid));
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid));
                    }
                } else if (type.equalsIgnoreCase("Payment Made") || type.equalsIgnoreCase(Constants.DISHONOURED_RECEIVE_PAYMENT)) {//For make payment to customer
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
//                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + amountinbase;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase + amountinbase;
                    balanceAmount = balanceAmount + amount;
                    if (templateFlag == Constants.lsh_templateflag) {
                        statementOfReportsSubReport.setDebit(customCurrencySumbol + " " + authHandler.formattedAmount(amount, companyid));
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance(customCurrencySumbol+" "+((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid)));
                    } else if (templateFlag == Constants.CleanSolutions_templateflag && templateType == 0) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit(amount!=0 ? (amount>0 ? (customCurrencySumbol + " " + authHandler.formattedAmount(amount, companyid)) : ("("+customCurrencySumbol + " " + authHandler.formattedAmount((amount*-1), companyid)+")")) : authHandler.formattedAmount(0, companyid));
                        statementOfReportsSubReport.setBalance(currencyTotalAmount != 0 ? (currencyTotalAmount>0 ? (customCurrencySumbol+" "+ authHandler.formattedAmount(currencyTotalAmount, companyid)) : ("("+ customCurrencySumbol +" "+ authHandler.formattedAmount((currencyTotalAmount*-1), companyid)+")")) : authHandler.formattedAmount(0, companyid));
                        statementOfReportsSubReport.setTransactionId(invoiceNumber + "," + " Orig Amount " + (currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode()) +" " + authHandler.formattedCommaSeparatedAmount(invoiceOriginalAmount, companyid));
                    } else if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag || templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setDebit(authHandler.formattedCommaSeparatedAmount(amount, companyid));
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedCommaSeparatedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid));
                    } else {
                        statementOfReportsSubReport.setDebit(authHandler.formattedAmount(amount, companyid));
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid));
                    }
                } else if (type.equalsIgnoreCase("Debit Note")) {//For Debit note of customer
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
//                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + amountinbase;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase + amountinbase;
                    balanceAmount = balanceAmount + amount;
                    if (templateFlag == Constants.lsh_templateflag) {
                        statementOfReportsSubReport.setDebit(customCurrencySumbol + " " + authHandler.formattedAmount(amount, companyid));
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance(customCurrencySumbol+" "+((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid)));
                    } else if (templateFlag == Constants.CleanSolutions_templateflag && templateType == 0) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit(amount!=0 ? (amount>0 ? ((currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode()) + " " + authHandler.formattedAmount(amount, companyid)) : ("("+(currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode()) + " " + authHandler.formattedAmount(amount, companyid)+")")) : authHandler.formattedAmount(0, companyid));
                        statementOfReportsSubReport.setBalance(currencyTotalAmount != 0 ? (currencyTotalAmount>0 ? ((currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode())+" "+ authHandler.formattedAmount(currencyTotalAmount, companyid)) : ("("+(currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode())+" "+ authHandler.formattedAmount((currencyTotalAmount*-1), companyid)+")")) : authHandler.formattedAmount(0, companyid));
                        statementOfReportsSubReport.setTransactionId(invoiceNumber + "," + " Orig Amount " + (currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode()) +" " + authHandler.formattedCommaSeparatedAmount(invoiceOriginalAmount, companyid));
                    } else if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag || templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setDebit(authHandler.formattedCommaSeparatedAmount(amount, companyid));
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedCommaSeparatedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid));
                    } else {
                        statementOfReportsSubReport.setDebit(authHandler.formattedAmount(amount, companyid));
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid));
                    }
                } else {  //if((type.equalsIgnoreCase("Payment Received")) || (type.equalsIgnoreCase("Credit Note")))
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
//                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount - amountinbase;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase - amountinbase;
                    balanceAmount = balanceAmount - amount;
                    if (templateFlag == Constants.lsh_templateflag) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? customCurrencySumbol + " " + authHandler.formattedAmount(amount, companyid) : "");
                        statementOfReportsSubReport.setBalance(customCurrencySumbol+" "+((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid)));
                    } else if (templateFlag == Constants.CleanSolutions_templateflag && templateType == 0) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? (amount>0 ? (customCurrencySumbol + " " + authHandler.formattedAmount(amount, companyid)) : ("("+customCurrencySumbol + " " + authHandler.formattedAmount(amount, companyid)+")")) : authHandler.formattedAmount(0, companyid));
                        statementOfReportsSubReport.setBalance(currencyTotalAmount != 0 ? (currencyTotalAmount>0 ? (customCurrencySumbol+" "+ authHandler.formattedAmount(currencyTotalAmount, companyid)) : ("("+customCurrencySumbol+" "+ authHandler.formattedAmount((currencyTotalAmount*-1), companyid)+")")) : authHandler.formattedAmount(0, companyid));
                        statementOfReportsSubReport.setTransactionId(invoiceNumber + "," + " Orig Amount " + customCurrencySumbol +" " + authHandler.formattedCommaSeparatedAmount(invoiceOriginalAmount, companyid));
                    } else if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag || templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedCommaSeparatedAmount(amount, companyid) : "");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedCommaSeparatedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid));
                    } else {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedAmount(amount, companyid) : "");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid));
                    }
                }
                statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);
                statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                statementOfReportsSubReport.setTerms(invoiceCustomerTerms);
                statementOfReportsSubReport.setAttn(invoiceCustomerAttn);

                if (hashMapJSON.containsKey(invoiceCustomerId)) {
                    JSONObject jSONObject = hashMapJSON.get(invoiceCustomerId);
                    if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag) {
                        statementOfReportsSubReport.setAmountDue1(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase2"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue2(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase3"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue3(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase4"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue4(authHandler.formattedCommaSeparatedAmount((jSONObject.getDouble("amountdueinbase5") + jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.getDouble("amountdueinbase9")+ jSONObject.getDouble("amountdueinbase10")+ jSONObject.getDouble("amountdueinbase11")), companyid) + "");
                        statementOfReportsSubReport.setAmountDue5(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("totalinbase"), companyid) + "");
                    } else if (templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setMemo(memo);
                        statementOfReportsSubReport.setDuration(duration);
                        statementOfReportsSubReport.setAmountDueCurrent(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase2"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue1(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase3"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue2(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase4"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue3(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase5"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue4(authHandler.formattedCommaSeparatedAmount((jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.getDouble("amountdueinbase9")  + jSONObject.getDouble("amountdueinbase10") + jSONObject.getDouble("amountdueinbase11")), companyid) + "");
                        statementOfReportsSubReport.setAmountDue5(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("totalinbase"), companyid) + "");
                    } else if (templateFlag == Constants.CleanSolutions_templateflag && templateType == 0) {
                        statementOfReportsSubReport.setAmountDue1(jSONObject.getDouble("amountdueinbase2")!=0? (jSONObject.getDouble("amountdueinbase2")>0?(authHandler.formattedAmount(jSONObject.getDouble("amountdueinbase2"), companyid)) : ("("+authHandler.formattedAmount((jSONObject.getDouble("amountdueinbase2")*-1), companyid)+")")) : authHandler.formattedAmount(0, companyid));
                        statementOfReportsSubReport.setAmountDue2(jSONObject.getDouble("amountdueinbase3")!=0? (jSONObject.getDouble("amountdueinbase3")>0?(authHandler.formattedAmount(jSONObject.getDouble("amountdueinbase3"), companyid)) : ("("+authHandler.formattedAmount((jSONObject.getDouble("amountdueinbase3")*-1), companyid)+")")) : authHandler.formattedAmount(0, companyid));
                        statementOfReportsSubReport.setAmountDue3(jSONObject.getDouble("amountdueinbase4")!=0? (jSONObject.getDouble("amountdueinbase4")>0?(authHandler.formattedAmount(jSONObject.getDouble("amountdueinbase4"), companyid)) : ("("+authHandler.formattedAmount((jSONObject.getDouble("amountdueinbase4")*-1), companyid)+")")) : authHandler.formattedAmount(0, companyid));
                        double total = jSONObject.getDouble("amountdueinbase5") + jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.getDouble("amountdueinbase9") + jSONObject.getDouble("amountdueinbase10") + jSONObject.getDouble("amountdueinbase11");
                        statementOfReportsSubReport.setAmountDue4(total!=0? (total>0?(authHandler.formattedAmount(total, companyid)) : ("("+authHandler.formattedAmount((total*-1), companyid)+")")) : authHandler.formattedAmount(0, companyid));
                        statementOfReportsSubReport.setAmountDue5(jSONObject.getDouble("totalinbase")!=0? (jSONObject.getDouble("totalinbase")>0?(authHandler.formattedAmount(jSONObject.getDouble("totalinbase"), companyid)) : ("("+authHandler.formattedAmount((jSONObject.getDouble("totalinbase")*-1), companyid)+")")) : authHandler.formattedAmount(0, companyid));
                    } else {
                        statementOfReportsSubReport.setAmountDue1(authHandler.formattedAmount(jSONObject.getDouble("amountdueinbase2"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue2(authHandler.formattedAmount(jSONObject.getDouble("amountdueinbase3"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue3(authHandler.formattedAmount(jSONObject.getDouble("amountdueinbase4"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue4(authHandler.formattedAmount((jSONObject.getDouble("amountdueinbase5") + jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.getDouble("amountdueinbase9") + jSONObject.getDouble("amountdueinbase10") + jSONObject.getDouble("amountdueinbase11")), companyid) + "");
                        statementOfReportsSubReport.setAmountDue5(authHandler.formattedAmount(jSONObject.getDouble("totalinbase"), companyid) + "");
                        statementOfReportsSubReport.setAmountDueCurrent(authHandler.formattedAmount(jSONObject.getDouble("amountdueinbase1"), companyid) + ""); //set current amount in Base
                    }
                }
                amountDueMap.put(invoiceCustomerId, amountDueList);
                statementOfReportsSubReport.setAmountCurrHeader(Constants.CURRENT);
                if(dateFilter == Constants.agedDueDate0to30Filter || dateFilter == Constants.agedInvoiceDate0to30Filter){
                    statementOfReportsSubReport.setAmount1Header("0-" + duration + " days");
                } else {
                    statementOfReportsSubReport.setAmount1Header("1-" + duration + " days");
                }
                statementOfReportsSubReport.setAmount2Header(duration + 1 + "-" + (2 * duration) + " days");
                statementOfReportsSubReport.setAmount3Header((2 * duration) + 1 + "-" + (3 * duration) + " days");
                statementOfReportsSubReport.setAmount4Header("Over " + (3 * duration) + " days");
                if (templateFlag == Constants.lsh_templateflag) {
                    statementOfReportsSubReport.setCurrency(customBaseCurrencySymbol);
                } else if (templateFlag == Constants.BuildMate_templateflag) {
                    statementOfReportsSubReport.setCurrency(baseCurrency.getName() != null ? baseCurrency.getName() : customBaseCurrencyCode);
                } else {
                    statementOfReportsSubReport.setCurrency(accCommonTablesDAO.getCustomCurrencyCode(currency.getCurrencyCode(),companyid));
                }
                statementOfReportsSubReport.setAgeingCurrency(customBaseCurrencyCode);
                statementOfReportsSubReport.setBaseCurrency(customBaseCurrencyCode);
                if (i == customerLedgerList.size() - 1) {
                    statementOfReportsSubReport.setPageBreak(false);
                }

          

                List<SOABalanceOutstandingPojo> outstandingPojos = new ArrayList<SOABalanceOutstandingPojo>();
                if (!nextInvoiceCustomerId.equals(invoiceCustomerId)) {
                    statementOfReportsSubReport.setOutstandingFlag(true);
                    for (Map.Entry<String, HashMap> entry : currencyHashMap.entrySet()) {
                        HashMap<String, Double> tempHashMap = entry.getValue();
                        for (Map.Entry<String, Double> entryInner : tempHashMap.entrySet()) {
                            SOABalanceOutstandingPojo sOABalanceOutstandingPojo = new SOABalanceOutstandingPojo();
                            sOABalanceOutstandingPojo.setBaseCurrency(currencyCodeHashMap.get(entryInner.getKey()));
                            sOABalanceOutstandingPojo.setBalance((templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag) ? authHandler.formattedCommaSeparatedAmount(entryInner.getValue(), companyid) : authHandler.formattedAmount(entryInner.getValue(), companyid));
                            outstandingPojos.add(sOABalanceOutstandingPojo);
                        }
                    }
                }

                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) cmpresult.getEntityList().get(0);
                Calendar cal0 = Calendar.getInstance();
                Date date = cal0.getTime();
                DateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");
                statementOfReportsSubReport.setHeaderdate(date != null ? df1.format(date) : "");
                if(templateFlag == Constants.F1RecreationLeasing_templateflag || templateFlag == Constants.F1Recreation_templateflag){
                statementOfReportsSubReport.setHeaderdate(endDate != null ? df1.format(endDate) : "");
                }
                statementOfReportsSubReport.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                statementOfReportsSubReport.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                statementOfReportsSubReport.setBasecurrencysymbol(company.getCurrency() != null ? company.getCurrency().getName() : "");
                String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                statementOfReportsSubReport.setImagepath(fileName1);
                statementOfReportsSubReport.setsOABalanceOutstandingPojos(outstandingPojos);
                statementOfReportsSubReport.setAgeingTableData(agedDetaislMap.get(invoiceCustomerId)==null?(new ArrayList<AgeingTableForSOA>()):agedDetaislMap.get(invoiceCustomerId));
//                if (templateFlag == Constants.lsh_templateflag && statementOfReportsSubReport.getBalance().contains("0.00")) {
//                    statementOfReportsSubReport.setBalance((currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode()) + " " + authHandler.formattedAmount(0));
////                    statementOfReportsSubReport.setDebit("");
////                    statementOfReportsSubReport.setCredit("");
//                }
                String coregno = "";
                switch (templateFlag) {
                    case Constants.ChyeSengHuatConstruction_TemplateFlag:
                        coregno = "197500149N";
                        break;
                    case Constants.DandJ_TemplateFlag:
                        coregno = "200207088H";
                        break;
                    case Constants.CSHOrchard_TemplateFlag:
                        coregno = "201409774Z";
                        break;
                    case Constants.ChyeSengHuatHoldings_TemplateFlag:
                        coregno = "200706470H";
                        break;
                }
                statementOfReportsSubReport.setCompanyregno(coregno);
                
                if(i==customerLedgerList.size()-1 && statementOfReportsSubReport.getAgeingTableData().size() > 0) {
                        statementOfReportsSubReport.setLastRecord(true);
                    } else if ((!statementOfReportsSubReportList.isEmpty()) && (!(previousCustomerId.equals(invoiceCustomerId)))) {
                        StatementOfAccountsSubReport lastStatementOfReportsSubReport = (StatementOfAccountsSubReport) statementOfReportsSubReportList.get(statementOfReportsSubReportList.size() - 1);
                    if (lastStatementOfReportsSubReport.getAgeingTableData().size() > 0) {
                            statementOfReportsSubReportList.remove(statementOfReportsSubReportList.size() - 1);
                            lastStatementOfReportsSubReport.setLastRecord(true);
                            statementOfReportsSubReportList.add(lastStatementOfReportsSubReport);
                        }
                    }
                previousCustomerId = new String(invoiceCustomerId);
                
                statementOfReportsSubReportList.add(statementOfReportsSubReport);
                stmSubReportListMap.put(invoiceCustomerId, statementOfReportsSubReport);
            }
            statementOfAccountsMap.put("StatementOfAccountsSubReportData", new JRBeanCollectionDataSource(statementOfReportsSubReportList));

        } catch (ParseException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerLedgerJasper : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerLedgerJasper : " + ex.getMessage(), ex);
        }
        return statementOfAccountsMap;
    }

    @Override
    public JasperPrint exportVendorLedgerJasperReport(JSONObject request) throws ServiceException, JSONException, SessionExpiredException, ParseException {

        Map<String, Object> statementOfAccountsMap = new HashMap<String, Object>();
        String view = "";
        JasperPrint jasperPrint = null;
        JasperReport jasperReport = null;
        JasperReport jasperReportSubReport = null;
        int templateFlag = request.optInt("templateflag",0);
        int templateType = request.optString("type") != null ? Integer.parseInt(request.optString("type")) : 0;
        StatementOfAccounts statementOfAccounts = new StatementOfAccounts();
        ArrayList<StatementOfAccounts> statementOfAccountsList = new ArrayList<StatementOfAccounts>();
        try {
            String companyid = request.optString(Constants.companyKey);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);   //ERP-20966   //new SimpleDateFormat("dd/MM/yyyy");
            SimpleDateFormat sdf = new SimpleDateFormat(Constants.ddMMyyyy);
            Date startDate = authHandler.getDateOnlyFormat().parse(request.optString("stdate"));
            Date endDate = authHandler.getDateOnlyFormat().parse(request.optString("enddate"));
            Date asofDate = authHandler.getDateOnlyFormat( ).parse(request.optString("asofdate"));
            String dateRange = "";  //ERP-6387
            if (startDate != null && endDate != null) {
                dateRange = "From Date: " + df.format(startDate) + " To Date: " + df.format(endDate);
            }
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            statementOfAccounts.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
//         statementOfAccounts.setAddress(company.getAddress()!=null?company.getAddress():"");          
            Calendar cal1 = Calendar.getInstance();
            Date date = cal1.getTime();

            statementOfAccounts.setDateRange(dateRange);    //ERP-6387
            statementOfAccounts.setDate(templateType == 1 ? (endDate != null ? df.format(endDate) : "") : (date != null ? df.format(date) : ""));
            statementOfAccounts.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            statementOfAccounts.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            statementOfAccounts.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            statementOfAccounts.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
            statementOfAccounts.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
            statementOfAccounts.setCompanyRegNo(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
            statementOfAccounts.setCurrency(company.getCurrency() != null ? company.getCurrency().getName() : "");
            String companySubName = "";
            if (templateFlag == Constants.BakerTilly_templateflag) {
                if (companyid.equalsIgnoreCase(Constants.BakerTilly_BTC_COMPANYID)) {
                    companySubName = "Baker Tilly Consultancy (Singapore) Pte Ltd";
                    statementOfAccounts.setName(companySubName);
                } else if (companyid.equalsIgnoreCase(Constants.BakerTilly_TFWMS_COMPANYID)) {
                    companySubName = "TFW Management Services Pte Ltd<br/>Management Consultants";
                    statementOfAccounts.setName(companySubName);
                } else if (companyid.equalsIgnoreCase(Constants.BakerTilly_BT_COMPANYID)) {
                    companySubName = "Baker Tilly TFW LLP<br/>Chartered Accountants of Singapore";
                    statementOfAccounts.setName(companySubName);
                } else if (companyid.equalsIgnoreCase(Constants.BAKERTILLY_PCS_REGISTRATION_NO)) {
                    companySubName = "Park Crescent Services Pte Ltd<br/>Corporate Secretaries";
                    statementOfAccounts.setName(companySubName);
                 }
            }
            statementOfAccountsList.add(statementOfAccounts);

            if (templateType == Constants.SOA_CUSTOMER_CURRENCY) {
                statementOfAccountsMap = getVendorLedgerTonyFiberGlass(request, templateFlag);
            }else if(templateType == Constants.Statement_OF_Invoice){
               statementOfAccountsMap = getVendorLedgerInvoiceJasper(request, templateFlag); 
            }else {
                statementOfAccountsMap = getVendorLedgerJasper(request, templateFlag);
            }

            statementOfAccountsMap.put("format", "pdf");
            String fileName1 = "";
            if (templateFlag == Constants.F1Recreation_templateflag || templateFlag == Constants.F1RecreationLeasing_templateflag) {
                fileName1 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
            } else {
                fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            }
            statementOfAccountsMap.put("imagePath", fileName1);
            if (templateFlag == Constants.sms_templateflag) {
                statementOfAccountsMap.put("footerflag", true);
            } else {
                statementOfAccountsMap.put("footerflag", false);  //Mayur B- To hide footer logo for SMS holding Company.
            }
            statementOfAccountsMap.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
            boolean isLetterHead = false;
            if (!StringUtil.isNullOrEmpty(request.optString("isLetterHead"))) {
                isLetterHead = Boolean.parseBoolean((String) request.optString("isLetterHead"));
            }
            statementOfAccountsMap.put("isLetterHead", isLetterHead && ExportRecordHandler.checkCompanyTemplateLogoPresent(company));
            boolean isLandscape = request.optString("isLandscape") != null ? Boolean.parseBoolean(request.optString("isLandscape")) : false;
            if(isLandscape){
                 String statementMainReportJrxml="";
                 String statementSubreportReportJrxml="";
                 if(templateType == Constants.SOA_CUSTOMER_CURRENCY){
                   if (templateFlag == Constants.WorldGreen_templateflag || templateFlag == Constants.Alfatech_templateFlag) {
                         statementMainReportJrxml = "/DefaultStatementOfAccountsLandscape.jrxml";
                            statementSubreportReportJrxml = "/WorldGreenStatementOfAccountsSubReportLandscape.jrxml";
                     } else {
                         statementMainReportJrxml = "/DefaultStatementOfAccountsLandscape.jrxml";
                            statementSubreportReportJrxml = "/DefaultStatementOfAccountsSubReportLandscape.jrxml";
                        }
                 }else{
                    statementMainReportJrxml="/StatementOfAccountsLandscape.jrxml";
                    statementSubreportReportJrxml="/StatementOfAccountsSubReportLandscape.jrxml";
                 }
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + statementMainReportJrxml);
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);
                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + statementSubreportReportJrxml);
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateType == Constants.Statement_OF_Invoice) {
                fileName1 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                statementOfAccountsMap.put("imagePath2", fileName1);

                Map<String, Object> jasperParMap = getStatementOfInvoiceJrxml(request, templateFlag);
                jasperReport = (JasperReport) jasperParMap.get("jasperReport");
                jasperReportSubReport = (JasperReport) jasperParMap.get("jasperReportSubReport");
            } else if (templateType == Constants.SOA_CUSTOMER_CURRENCY) {
                String statementMainReportJrxml="/DefaultStatementOfAccounts.jrxml";
                String statementSubreportReportJrxml="/DefaultStatementOfAccountsSubReport.jrxml";
                if (templateFlag == Constants.Guan_Chong_templateflag) {  
                    statementMainReportJrxml =  "/GuanChongStatementOfAccounts.jrxml";// check top have Blank space for  letter head
                    statementSubreportReportJrxml =  "/GuanChangCustomerCurrencySOA.jrxml";// With Blank Space 
                } else if (templateFlag == Constants.FastenEnterprises_templateflag || templateFlag == Constants.FastenHardwareEngineering_templateflag) {  
                    statementMainReportJrxml =  "/FastenStatementOfAccounts.jrxml";//  With Job Code as  custome filed from invoice
                    statementSubreportReportJrxml =  "/FastenStatementOfAccountsSubReport.jrxml";
                } else if(templateFlag == Constants.WorldGreen_templateflag || templateFlag == Constants.Alfatech_templateFlag){
                   statementSubreportReportJrxml="/WorldGreenStatementOfAccountsSubReport.jrxml";
                    }
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + statementMainReportJrxml);
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);
                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + statementSubreportReportJrxml);
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.sms_templateflag || templateFlag == Constants.smsholding_templateflag) {
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/SMSStatementOfAccounts.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY)+ "/StatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

            } else if (templateFlag == Constants.lsh_templateflag) {
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/LSHStatementOfAccounts.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/LSHStatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.HCIS_templateflag) {
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/HCISStatementOfAccounts.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/HCISStatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.BuildMate_templateflag) {
//                view = "LSHStatementOfAccounts";
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/LSHStatementOfAccounts.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/BMStatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.ChyeSengHuatConstruction_TemplateFlag || templateFlag == Constants.ChyeSengHuatHoldings_TemplateFlag || templateFlag == Constants.CSHOrchard_TemplateFlag || templateFlag == Constants.DandJ_TemplateFlag) {
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/StatementOfAccountChyeSang.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/StatementOfAccountSubreportCheySang.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.Guan_Chong_templateflag) {
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/StatementOfAccountsGuanChong.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/StatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.Monzone_templateflag) {
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/MonzoneStatementOfAccounts.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/MonzoneStatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else if (templateFlag == Constants.F1Recreation_templateflag || templateFlag == Constants.F1RecreationLeasing_templateflag) {
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/F1recreationStatementOfAccounts.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/F1recreationStatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            }else if (templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                statementOfAccountsMap.put("GstRegNo", "GST Registration No. " + (companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : ""));
                statementOfAccountsMap.put("isImageOnLeft", true);
                if (templateFlag == Constants.Endovation_templateflag) {
                    statementOfAccountsMap.put("isImageOnLeft", false);
                } //Use Tax No Field as Cmpny Reg No-
                statementOfAccountsMap.put("CompanyegNo", "Company Registration No.  " + (companyAccountPreferences.getTaxNumber() != null ? companyAccountPreferences.getTaxNumber() : ""));
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY)+ "/EndovationSOA.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/EndovationSOASubreport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            } else {
                String file = "";
                if (templateFlag == Constants.vhqpost_tempalteflag)//add header logo half
                {
                    file = "/StatementofAccountWithLogoOnHalfSide.jrxml";
                } else {
                    file = "/StatementOfAccounts.jrxml";
                }
                InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + file);
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY) + "/StatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            }
            if (templateFlag == Constants.ChyeSengHuatConstruction_TemplateFlag || templateFlag == Constants.ChyeSengHuatHoldings_TemplateFlag || templateFlag == Constants.CSHOrchard_TemplateFlag || templateFlag == Constants.DandJ_TemplateFlag) {
                statementOfAccountsMap.put("Title", "STATEMENT OF ACCOUNT");
            } if (templateFlag == Constants.Guan_Chong_templateflag || templateFlag == Constants.Guan_ChongBF_templateflag || templateFlag == Constants.CSHOrchard_TemplateFlag ) {
                statementOfAccountsMap.put("Title", "Statement of Accounts");
            } else {
                statementOfAccountsMap.put("Title", "Statement");
            }
            if (templateFlag == Constants.Guan_Chong_templateflag) {  //To show statement date as last day of the month.
                statementOfAccountsMap.put("statementdate", df.format(endDate));    //ERP-9451 The Date should show statement date not date of printing. //ERP-8366 : Last date of the current month.
            } else {
                statementOfAccountsMap.put("statementdate", df.format(startDate) + " - " + df.format(endDate));
            }
            statementOfAccountsMap.put("Companyname", company.getCompanyName() != null ? company.getCompanyName() : "");
            if (templateFlag == Constants.WorldGreen_templateflag) {
                statementOfAccountsMap.put("Companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj) + (companyAccountPreferences.getCompanyUEN() != null ? ("\nCo. Registration No.: " + companyAccountPreferences.getCompanyUEN()) : ""));
                statementOfAccountsMap.put("Title", "Statement of Account");
            } else {
                statementOfAccountsMap.put("Companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            }
            
            statementOfAccountsMap.put("TO_Date",  (endDate != null ? sdf.format(authHandler.getGlobalDateFormat().parse(request.optString("enddate"))):df.format(date)));
            statementOfAccountsMap.put("From_Date",  (startDate != null ? sdf.format(authHandler.getGlobalDateFormat().parse(request.optString("stdate"))) :authHandler.getDateOnlyFormat().format(date)));
            statementOfAccountsMap.put("asofDate",  (asofDate != null ? sdf.format(authHandler.getGlobalDateFormat().parse(request.optString("asofdate"))) :""));
            String agedon =null;
                if (!StringUtil.isNullOrEmpty(request.optString("datefilter"))) {
                    if(request.optInt("datefilter")==Constants.agedDueDate1to30Filter){
                        agedon =Constants.agedDueDate1to30Days;
                    } else if(request.optInt("datefilter")==Constants.agedInvoiceDateFilter){
                         agedon =Constants.agedInvoiceDate; 
                    } else if(request.optInt("datefilter")==Constants.agedInvoiceDate0to30Filter){
                         agedon =Constants.agedInvoiceDate0to30; 
                    } else{
                         agedon =Constants.agedDueDate0to30Days;  
                    }
                }
            statementOfAccountsMap.put("Aged_On",  (agedon != null ?agedon:""));
            
            statementOfAccountsMap.put("StatementOfAccountsSubReport", jasperReportSubReport);
            statementOfAccountsMap.put("datasource", new JRBeanCollectionDataSource(statementOfAccountsList));
            statementOfAccountsMap.put("templateFlag",templateFlag+"");
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(statementOfAccountsList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, statementOfAccountsMap, beanColDataSource);
            if (templateType == Constants.Statement_OF_Invoice || templateType == Constants.SOA_CUSTOMER_CURRENCY || (templateType==0 && (templateFlag == Constants.F1Recreation_templateflag || templateFlag == Constants.F1RecreationLeasing_templateflag ))) {
                jasperPrint = RemoveBlankPages(jasperPrint);
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jasperPrint;
    }

    public Map<String, Object> getCustomerLedgerForTonyFiberGlassJasper(JSONObject request, int templateFlag) throws ServiceException, SessionExpiredException, UnsupportedEncodingException {
        JSONObject jobj = new JSONObject();
        ArrayList<StatementOfAccountsSubReport> statementOfReportsSubReportList = new ArrayList<StatementOfAccountsSubReport>();
        HashMap<String, StatementOfAccountsSubReport> stmSubReportListMap = new HashMap<String, StatementOfAccountsSubReport>();
        Map<String, Object> statementOfAccountsMap = new HashMap<String, Object>();
        HashMap<String, ArrayList> amountDueMap = new HashMap<String, ArrayList>();
        int templateType = request.optInt("type",0);// != null ? Integer.parseInt(request.getParameter("type")) : 0;
        try {
            String companyid = request.optString(Constants.companyKey);
            int reportid = !StringUtil.isNullOrEmpty(request.optString("reportid")) ? Integer.parseInt(request.optString("reportid")) : -1;
            JSONArray jArr = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            boolean invoiceAmountDueFilter =  request.optBoolean("invoiceAmountDueFilter",false);
            boolean isPostDatedCheque = request.optBoolean("isPostDatedCheque",false);
            boolean isSortedOnCreationDate = request.optBoolean("isSortedOnCreationDate",false);
            
            Date startDate = authHandler.getDateOnlyFormat().parse(request.optString("stdate"));
            Date endDate = authHandler.getDateOnlyFormat( ).parse(request.optString("enddate"));
            Date asofDate = authHandler.getDateOnlyFormat( ).parse(request.optString("asofdate"));
            DateFormat df = authHandler.getDateOnlyFormat( );
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            //dateFormat.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getTimeZoneDifference(request)));//ERP-8521            
            String customerIds =request.optString("customerIds","");
//            if(request.getAttribute("customerIds")!=null){
//                customerIds = request.getAttribute("customerIds").toString();
//            }else{
//                 customerIds = request.getParameter("customerIds");
//            }
            int dateFilter = 1;
            if (request.optString("datefilter") != null) {
                dateFilter = request.optInt("datefilter",1);
            }
            
            String withoutinventory = request.optString("withoutinventory");
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(request);
            requestParams.put("customerIds", customerIds);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put("startDate", new Date(0));
            requestParams.put("endDate", endDate);
            requestParams.put("isPostDatedCheque", isPostDatedCheque);
            requestParams.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
            requestParams.put("isSortedOnCreationDate", isSortedOnCreationDate);

            //added new start
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.optString("dir")) && !StringUtil.isNullOrEmpty(request.optString("sort"))) {
                dir = request.optString("dir");
                sort = request.optString("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            //added new end

            String searchJson = request.optString(Constants.Acc_Search_Json, "");
            String filterConjuctionCriteria = request.optString(Constants.Filter_Criteria, "");
            if (!StringUtil.isNullOrEmpty(searchJson)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
            }
            if (!StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            }

            boolean isAdvanceSearch = false;
            String invoiceSearchJson = "";
            String receiptSearchJson = "";
            String cnSearchJson = "";
            String dnSearchJson = "";
            String makePaymentSearchJson = "";

            if (requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Filter_Criteria) != null) {
                if (requestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                searchJson = requestParams.get(Constants.Acc_Search_Json).toString();
                if (!StringUtil.isNullOrEmpty(searchJson)) {
                    isAdvanceSearch = true;
                    requestParams.put(Constants.Filter_Criteria, request.optString(Constants.Filter_Criteria));
                    HashMap<String, Object> reqPar1 = new HashMap<>();
                    reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                    reqPar1.put(Constants.Acc_Search_Json, searchJson);
                    reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    invoiceSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.remove(Constants.moduleid);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    receiptSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    dnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    cnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    makePaymentSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                }
            }
            requestParams.put("invoiceSearchJson", invoiceSearchJson);
            requestParams.put("receiptSearchJson", receiptSearchJson);
            requestParams.put("cnSearchJson", cnSearchJson);
            requestParams.put("dnSearchJson", dnSearchJson);
            requestParams.put("makePaymentSearchJson", makePaymentSearchJson);
            requestParams.put("isAdvanceSearch", isAdvanceSearch);

            KwlReturnObject customerLedger = accInvoiceDAOobj.getCustomerLedgerReport(requestParams);
            List customerLedgerList = customerLedger.getEntityList();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), request.optString(Constants.globalCurrencyKey));
            KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
            double balanceAmtInBase = 0;
            double balanceAmount = 0;
            double totalAmountInCustomerCurr = 0;
            String prevCustomer = "";

            //Extra var for ageing. start
            String curDateString = "";
            Date curDate = null;
            boolean booleanAged = false;//Added for aged payable/receivable
//            int duration = 30;
            int duration = Integer.parseInt(request.optString("interval"));
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            curDate = Calendar.getInstance().getTime();
            curDateString = df.format(curDate);
            booleanAged = true;
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;

            HashMap<String, JSONObject> hashMapJSON = new HashMap<String, JSONObject>();
            request.put("isCustomerCurrExport",true);
            JSONObject mainObj=accInvoiceServiceDAO.getCustomerAgedReceivableMerged(request,false,true);//   /* Used in Aged Receivables/SOA- to filter invoice on asOfdate */
            JSONArray jSONArray = mainObj.getJSONArray("data");
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                if (jSONObject.has("personid")) {
                    hashMapJSON.put(jSONObject.getString("personid"), jSONObject);
                }
            }

            String defValue = authHandler.getCompleteDFStringForAmount("0.", companyid);
            ArrayList<Double> amountDueList = new ArrayList<Double>();
            double currencyTotalAmount = 0.00;
            Map<String, HashMap> currencyHashMap = new HashMap<String, HashMap>();
            Map<String, String> currencyCodeHashMap = new HashMap<String, String>();
            Set<String> custemerSet= new HashSet();
            //Extra var for ageing. end

            for (int i = 0; i < customerLedgerList.size(); i++) {

                Object[] tempCustomerLedger = (Object[]) customerLedgerList.get(i);
                String type = (String) tempCustomerLedger[0];
                String invoiceId = (String) tempCustomerLedger[1]; // if(type=='invoice') ==> invoice.id, if(type=='receipt') ==> receipt.id, if(type=='creditnote') ==> creditnote.id
                String invoiceNumber = (String) tempCustomerLedger[2]; // if(type=='invoice') ==> invoice.invoicenumber, if(type=='receipt') ==> receipt.receiptnumber, if(type=='creditnote') ==> creditnote.cnnumber
                String jeId = (String) tempCustomerLedger[3]; // journalentry.id
                String memo = StringUtil.isNullOrEmpty((String) tempCustomerLedger[4]) ? "" : (String) tempCustomerLedger[4]; // if(type=='invoice') ==> invoice.memo, if(type=='receipt') ==> receipt.memo, if(type=='creditnote') ==> creditnote.memo
                String currencyid = StringUtil.isNullOrEmpty((String) tempCustomerLedger[5]) ? request.optString(Constants.globalCurrencyKey) : (String) tempCustomerLedger[5]; // if(type=='invoice') ==> invoice.currency, if(type=='receipt') ==> receipt.currency, if(type=='creditnote') ==> creditnote.currency
                double amount = (Double) tempCustomerLedger[6]; // if(type=='invoice') ==> jedetail.amount, if(type=='receipt') ==> receiptdetails.amount, if(type=='creditnote') ==> jedetail.amount
                String jeEntryNumber = (String) tempCustomerLedger[7];
                Date jeEntryDate = (Date) tempCustomerLedger[8];
              //  Calendar cal = Calendar.getInstance();
             //   cal.set(1900 + jeEntryDate.getYear(), jeEntryDate.getMonth(), jeEntryDate.getDate());
//                cal.add(Calendar.DAY_OF_MONTH, 1);  //ERP-8521 : This line adds extra day in given date. So far commented. 
 //              jeEntryDate = cal.getTime();
                double jeEntryExternalCurrencyRate = (Double) tempCustomerLedger[9];
                String invoiceCustomerId = (String) tempCustomerLedger[10];
                String invoiceCustomerName = (String) tempCustomerLedger[11];
                String withoutInventaryFlag = (String) tempCustomerLedger[13];
                double cndnAmountDue = (Double) tempCustomerLedger[14];
                double invoiceOriginalAmount = amount;
                String jobCode = "";// custome field for fasten client

                String CustomerID = tempCustomerLedger[18].toString();
                String CustomerAccountID = "";
                Customer customer = null;
                if(!StringUtil.isNullOrEmpty(CustomerID)){
                    KwlReturnObject kwlCustomer = accountingHandlerDAOobj.getObject(Customer.class.getName(), CustomerID);
                    customer = (Customer) kwlCustomer.getEntityList().get(0);
                    CustomerAccountID = customer.getAccount().getID();
                }
                
                //Extra Fields required for export. start
                KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), invoiceCustomerId);
                Customer cust = (Customer) custresult.getEntityList().get(0);
                String invoiceCustomerCode = cust.getAcccode()==null?"": cust.getAcccode();
                String invoiceCustomerTerms = cust.getCreditTerm() == null ? "" : (cust.getCreditTerm().getTermdays() + " Days");
                
                //params to send to get billing address
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put("companyid", companyid);
                addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                addressParams.put("isBillingAddress", true);    //true to get billing address
                addressParams.put("customerid", cust.getID());
                addressParams.put("templateFlag", templateFlag);
                CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                String invoiceCustomerAttn = "";
                if(customerAddressDetails!=null){
                    invoiceCustomerAttn = StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : customerAddressDetails.getContactPerson();
                }
                
                String invoiceCustomerAdd = (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.Guan_Chong_templateflag || templateFlag == Constants.Guan_ChongBF_templateflag) ? accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams) : accountingHandlerDAOobj.getCustomerAddress(addressParams);
                String custCurrencyId = cust.getCurrency() != null ? cust.getCurrency().getCurrencyID() : "";
                String baseCurrencyId = baseCurrency.getCurrencyID();
                KWLCurrency Custcurrency = cust.getCurrency();
                String custCurrencySymbol = Custcurrency.getSymbol() != null ? Custcurrency.getSymbol() : Custcurrency.getCurrencyCode();
                custCurrencySymbol = Custcurrency.getSymbol() != null ? accCommonTablesDAO.getCustomCurrencySymbol(Custcurrency.getSymbol(),companyid) : accCommonTablesDAO.getCustomCurrencySymbol(Custcurrency.getCurrencyCode(),companyid);
                //Extra Fields required for export. end
                String curr = Custcurrency.getSymbol() != null ? accCommonTablesDAO.getCustomCurrencySymbol(Custcurrency.getSymbol(),companyid) : accCommonTablesDAO.getCustomCurrencyCode(Custcurrency.getCurrencyCode(),companyid);

                int openingtransactionFlag = Integer.parseInt(tempCustomerLedger[16].toString());
                boolean isOpeningBalanceTransaction = false;
                if (openingtransactionFlag == 1) {
                    isOpeningBalanceTransaction = true;
                }
                HashMap<String, Object> reqMap = AccountingManager.getGlobalParams(request);
                reqMap.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
                reqMap.put("startDate", startDate);
                reqMap.put("asofDate", asofDate);
                reqMap.put("invoiceCustomerId", invoiceCustomerId);
                reqMap.put("isOpeningBalanceTransaction", isOpeningBalanceTransaction);
                reqMap.put("transactionAmount", amount);
                reqMap.put("invoiceId", invoiceId);
                reqMap.put("type", type);
                amount=accReportsService.getAmountOfTransactionForCusromerSOA(reqMap);

                
                boolean isConversionRateFromCurrencyToBase = false;
                int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempCustomerLedger[17].toString());
                if (conversionRateFromCurrencyToBaseFlag == 1) {
                    isConversionRateFromCurrencyToBase = true;
                }

                KWLCurrency currency = null;
                if (!StringUtil.isNullOrEmpty(currencyid)) {
                    KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                    currency = (KWLCurrency) curresult1.getEntityList().get(0);
                }
                if (!prevCustomer.equals(invoiceCustomerId)) {
                    currencyHashMap.clear();
                    currencyCodeHashMap.clear();
                    prevCustomer = invoiceCustomerId;
                    balanceAmtInBase = 0;
                    balanceAmount = 0;
                    totalAmountInCustomerCurr = 0;
                    HashMap<String, Double> currncyAmount = new HashMap<String, Double>();
                    currncyAmount.put(currency.getCurrencyID(), 0.00);
                    currencyHashMap.put(invoiceCustomerId, currncyAmount);
                    currencyTotalAmount = 0.00;
                }
                if (custemerSet.add(invoiceCustomerId)) { // For each customer putting Accurred Balance detail once. 
                    HashMap<String, Object> reqMap0 = AccountingManager.getGlobalParams(request);
                    reqMap0.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
                    reqMap0.put("startDate", startDate);
                    reqMap0.put("asofDate", asofDate);
                    reqMap0.put("invoiceCustomerId", invoiceCustomerId);
                    reqMap0.put("isCustomerCurrExport",true);
                    reqMap0.put("CustCurrId",custCurrencyId);
                    reqMap0.put("CustomerAccountID", CustomerAccountID);
                    JSONObject opnJSON = accReportsService.calculateCustomerAccuredBalance(customerLedgerList, reqMap0);
                    StatementOfAccountsSubReport statementOfReportsSubReport = new StatementOfAccountsSubReport();
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(baseCurrency.getCurrencyID()) ? tempHashMap.get(baseCurrency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + opnJSON.getDouble("balanceAmountInBase");
                    tempHashMap.put(baseCurrency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    totalAmountInCustomerCurr = opnJSON.getDouble("balanceAmountInBase");
//                    double custCurrToBaseExchRate = 1 / accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, custCurrencyId, jeEntryDate);
//                    if (accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, custCurrencyId, jeEntryDate) == 0.0) {
//                        custCurrToBaseExchRate = jeEntryExternalCurrencyRate;
//                    }
//                    if (baseCurrencyId.equals(custCurrencyId)) {
//                        custCurrToBaseExchRate = 1;
//                    }
//                    KwlReturnObject CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, opnJSON.getDouble("balanceAmountInBase"), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                    double currencyTotalAmountinCustCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
                    statementOfReportsSubReport.setBalance((totalAmountInCustomerCurr != 0) ? totalAmountInCustomerCurr < 0 ? ("(" + custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInCustomerCurr * -1), companyid) + ")") : (custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInCustomerCurr, companyid)) :(custCurrencySymbol+" "+authHandler.formattedAmount(0, companyid)));

//                    totalAmountInCustomerCurr = currencyTotalAmountinCustCurr;
                                        
                    statementOfReportsSubReport.setGstRegNo("");
                    statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                    statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);
                    statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                    statementOfReportsSubReport.setTerms(invoiceCustomerTerms);
                    statementOfReportsSubReport.setAttn(invoiceCustomerAttn);
                    statementOfReportsSubReport.setAmountDue1(defValue);
                    statementOfReportsSubReport.setAmountDue2(defValue);
                    statementOfReportsSubReport.setAmountDue3(defValue);
                    statementOfReportsSubReport.setAmountDue4(defValue);
                    statementOfReportsSubReport.setAmountDue5(defValue);
                    
                    if(dateFilter == Constants.agedDueDate0to30Filter || dateFilter == Constants.agedInvoiceDate0to30Filter){
                        statementOfReportsSubReport.setAmount1Header("0-" + duration + " days");
                    } else {
                        statementOfReportsSubReport.setAmount1Header("1-" + duration + " days");
                    }
                    
                    statementOfReportsSubReport.setAmount2Header(duration + 1 + "-" + (2 * duration) + " days");
                    statementOfReportsSubReport.setAmount3Header((2 * duration) + 1 + "-" + (3 * duration) + " days");
                    statementOfReportsSubReport.setAmount4Header("Over " + (3 * duration) + " days");
                    statementOfReportsSubReport.setCompanyregno("");
                    statementOfReportsSubReport.setTransactionId("Accrued Balance");
                    if (hashMapJSON.containsKey(invoiceCustomerId)) {
                        JSONObject jSONObject = hashMapJSON.get(invoiceCustomerId);
                        double amountdue1CustCurr = 0, amountdue2CustCurr = 0, amountdue3CustCurr = 0, amountdue4CustCurr = 0, amountdue5CustCurr = 0;
                        double totalinCustCurr = 0;
                        amountdue1CustCurr = jSONObject.getDouble("amountdueinbase1");
                        amountdue1CustCurr = authHandler.round(amountdue1CustCurr, companyid);

                        amountdue2CustCurr = jSONObject.getDouble("amountdueinbase2");
                        amountdue2CustCurr = authHandler.round(amountdue2CustCurr, companyid);

                        amountdue3CustCurr = jSONObject.getDouble("amountdueinbase3");
                        amountdue3CustCurr = authHandler.round(amountdue3CustCurr, companyid);

                        amountdue4CustCurr = jSONObject.getDouble("amountdueinbase4");
                        amountdue4CustCurr = authHandler.round(amountdue4CustCurr, companyid);

                        amountdue5CustCurr = jSONObject.getDouble("amountdueinbase5") + jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8");
                        amountdue5CustCurr = authHandler.round(amountdue5CustCurr, companyid);


                        statementOfReportsSubReport.setAmountDueCurrent(amountdue1CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue1CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue1CustCurr, companyid) + "");
                        statementOfReportsSubReport.setAmountDue1(amountdue2CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue2CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue2CustCurr, companyid) + "");
                        statementOfReportsSubReport.setAmountDue2(amountdue3CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue3CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue3CustCurr, companyid) + "");
                        statementOfReportsSubReport.setAmountDue3(amountdue4CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue4CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue4CustCurr, companyid) + "");
                        statementOfReportsSubReport.setAmountDue4(amountdue5CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue5CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue5CustCurr, companyid) + "");
                        
                        amountDueMap.put(invoiceCustomerId, amountDueList);

//                        KwlReturnObject amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, jSONObject.getDouble("totalinbase"), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                        totalinCustCurr = (Double) jSONObject.getDouble("totalinbase");
                        totalinCustCurr = authHandler.round(totalinCustCurr, companyid);
                        statementOfReportsSubReport.setAmountDue5(totalinCustCurr < 0 ? ("(" + curr + " " + authHandler.formattedCommaSeparatedAmount((totalinCustCurr * -1), companyid) + ")") : curr + " " + authHandler.formattedCommaSeparatedAmount(totalinCustCurr, companyid));
                    }
                    statementOfReportsSubReportList.add(statementOfReportsSubReport);
                }
                if (Math.abs(amount) <= 0 || accReportsService.isPeriodWiseOpeningTransaction(jeEntryDate, startDate)) { //if amount is zero then no need to show data in SOA Report so continue with next record
                    prevCustomer = new String(invoiceCustomerId);
                    continue;
                }
                if (!currencyCodeHashMap.containsKey(currency.getCurrencyID())) {
                    currencyCodeHashMap.put(currency.getCurrencyID(), currency.getCurrencyCode());
                }
                StatementOfAccountsSubReport statementOfReportsSubReport = new StatementOfAccountsSubReport();
                statementOfReportsSubReport.setBalance(defValue);
                statementOfReportsSubReport.setAmountDue1(defValue);
                statementOfReportsSubReport.setAmountDue2(defValue);
                statementOfReportsSubReport.setAmountDue3(defValue);
                statementOfReportsSubReport.setAmountDue4(defValue);
                statementOfReportsSubReport.setAmountDue5(defValue);

//                String companyid = sessionHandlerImpl.getCompanyid(request);

                jobjTemp = new JSONObject();
                Object[] tempNextCustomerLedger = null;
                if (i != customerLedgerList.size() - 1) {
                    tempNextCustomerLedger = (Object[]) customerLedgerList.get(i + 1);
                }

                String duedate = "";

                if (type.equalsIgnoreCase("Customer Invoice") || type.equalsIgnoreCase("Sales Invoice")) {
                    KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), invoiceId);
                    Invoice inv = (Invoice) cap.getEntityList().get(0);
                    duedate = inv.getDueDate() != null ? " Due " + dateFormat.format(inv.getDueDate()) + "," : "";
                    List<String> idsList = new ArrayList<String>();
                    idsList.add(inv.getID());
                    Map<String, JournalEntryDetail> invoiceCustomerEntryMap = accInvoiceDAOobj.getInvoiceCustomerEntryList(idsList);
                    JournalEntryDetail d = null;
                    if (inv.isNormalInvoice() && invoiceCustomerEntryMap.containsKey(inv.getID())) {
                        d = invoiceCustomerEntryMap.get(inv.getID());
                        invoiceOriginalAmount = d.getAmount();
                }
                     if (inv.isIsOpeningBalenceInvoice() && !inv.isNormalInvoice()) {
                        invoiceOriginalAmount = inv.getOriginalOpeningBalanceAmount();
                    }
                     
                    //------------------------Custom fields for invoice----------------
                    if (inv.getJournalEntry() != null && (templateFlag == Constants.FastenEnterprises_templateflag || templateFlag == Constants.FastenHardwareEngineering_templateflag)) {
                        int moduleid = Constants.Acc_Invoice_ModuleId;
                        HashMap<String, Object> fieldrequestParams = new HashMap();
                        HashMap<String, String> customFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                        HashMap<String, Object> fieldInLinerequestParams = new HashMap();
                        HashMap<String, String> customInLineFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customInLineDateFieldMap = new HashMap<String, String>();
                        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 1));
                        fieldInLinerequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                        fieldInLinerequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 1));
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                        HashMap<String, String> replaceFieldInLineMap = new HashMap<String, String>();
                        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                        HashMap<String, Integer> FieldInLineMap = accAccountDAOobj.getFieldParamsCustomMap(fieldInLinerequestParams, replaceFieldInLineMap, customInLineFieldMap, customInLineDateFieldMap);

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(companyid);
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(inv.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(moduleid + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        if (fieldComboData.getValue() != null && (varEntry.getKey().split("_")[1]).equals("Job Code")) {
                                            jobCode = fieldComboData.getValue();
                                        }
                                    }
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Job Code")) {
                                            jobCode = coldata;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                statementOfReportsSubReport.setOrderNo(jobCode); // set as Job code ref ERP-11331
                String nextInvoiceCustomerId = tempNextCustomerLedger != null ? (String) tempNextCustomerLedger[10] : "";
                statementOfReportsSubReport.setTransactionId(templateType == 1 ? invoiceNumber + "," + duedate + " Orig Amount " + (currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode()) +" " + authHandler.formattedCommaSeparatedAmount(invoiceOriginalAmount, companyid) : templateFlag == Constants.HCIS_templateflag ? (type + " " + invoiceNumber) : invoiceNumber);
                statementOfReportsSubReport.setJeId(templateFlag == Constants.BuildMate_templateflag ? "" : jeEntryNumber);
                statementOfReportsSubReport.setDate(dateFormat.format(jeEntryDate));

                KwlReturnObject bAmt = null;
                KwlReturnObject Custamount = null;//amount in customer currency
                KwlReturnObject baseCurrencyTotalAmount = null;//currencyTotalAmount in customer currency
                KwlReturnObject CustCurrencyTotalAmount = null;//currencyTotalAmount in customer currency
                if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                }
                double currencyTotalAmountInBase = 0;
                double currencyTotalAmountinCustCurr = 0;
                double amountinCustCurr = 0;
                double amountinbase = (Double) bAmt.getEntityList().get(0);
                amountinbase = authHandler.round(amountinbase, companyid);

                double tot_amountinbase = 0;
                List<JournalEntryDetail> listJEDetail = new ArrayList<>();
                if(reportid==Constants.SOA_CUSTOMER_ACCOUNT_STATEMENT_REPORTID && invoiceAmountDueFilter){
                    KwlReturnObject kwlJeDetails = accJournalEntryobj.getJournalEntryDetail(jeId, companyid);
                    List listJeDetails = kwlJeDetails.getEntityList();
                    if(listJeDetails!=null){
                        for (int j = 0; j < listJeDetails.size(); j++) {
                            JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listJeDetails.get(j);
                            if(journalEntryDetail.getAccount().getID().equals(CustomerAccountID) && !journalEntryDetail.isIsSeparated()){
                                tot_amountinbase += journalEntryDetail.getAmountinbase();
                            }
                        }
                    }


                    if(type.equalsIgnoreCase("Payment Received")){
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), invoiceId);
                        Receipt receipt = (Receipt) objItr.getEntityList().get(0);

                        Set<LinkDetailReceipt> linkDetailReceipt = receipt.getLinkDetailReceipts();
                        for(LinkDetailReceipt linkdetailreceipt : linkDetailReceipt){
                            if(!StringUtil.isNullOrEmpty(linkdetailreceipt.getLinkedGainLossJE())){
                                KwlReturnObject kwlLinkedJeDetails = accJournalEntryobj.getJournalEntryDetail(linkdetailreceipt.getLinkedGainLossJE(), companyid);
                                List listLinkedJeDetails = kwlLinkedJeDetails.getEntityList();
                                if(listLinkedJeDetails!=null){
                                    for (int j = 0; j < listLinkedJeDetails.size(); j++) {
                                        JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listLinkedJeDetails.get(j);
                                        if(!journalEntryDetail.getAccount().getID().equals(customer.getAccount().getID())){
                                            listJEDetail.add(journalEntryDetail);
                                        }
                                    }
                                }
                            }
                        }

                        Set<LinkDetailReceiptToDebitNote> linkDetailReceiptToDebitNote = receipt.getLinkDetailReceiptsToDebitNote();
                        for(LinkDetailReceiptToDebitNote linkdetailreceipttodebitNote : linkDetailReceiptToDebitNote){
                            if(!StringUtil.isNullOrEmpty(linkdetailreceipttodebitNote.getLinkedGainLossJE())){
                                KwlReturnObject kwlLinkedJeDetails = accJournalEntryobj.getJournalEntryDetail(linkdetailreceipttodebitNote.getLinkedGainLossJE(), companyid);
                                List listLinkedJeDetails = kwlLinkedJeDetails.getEntityList();
                                if(listLinkedJeDetails!=null){
                                    for (int j = 0; j < listLinkedJeDetails.size(); j++) {
                                        JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listLinkedJeDetails.get(j);
                                        if(!journalEntryDetail.getAccount().getID().equals(customer.getAccount().getID())){
                                            listJEDetail.add(journalEntryDetail);
                                        }
                                    }
                                }
                            }
                        }

                        if (tot_amountinbase != 0 && tot_amountinbase != amountinbase) {
                            System.out.println("Customer : " + invoiceCustomerName + ", Payment Received : " + invoiceNumber + ", Payment Received Amount : " + amountinbase + ", Total Amount : " + tot_amountinbase);
                            amountinbase = tot_amountinbase;

                            if(receipt.getCurrency().getCurrencyID().equals(baseCurrency.getCurrencyID())){
                                amount=amountinbase;
                            }
                        }
                    } if(type.equalsIgnoreCase("Credit Note")){
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), invoiceId);
                        CreditNote creditNote = (CreditNote) objItr.getEntityList().get(0);
                        Set<CreditNoteDetail> creditNoteDetail = creditNote.getRows();
                        for(CreditNoteDetail creditnotedetail : creditNoteDetail){
                            if(!StringUtil.isNullOrEmpty(creditnotedetail.getLinkedGainLossJE())){
                                KwlReturnObject kwlLinkedJeDetails = accJournalEntryobj.getJournalEntryDetail(creditnotedetail.getLinkedGainLossJE(), companyid);
                                List listLinkedJeDetails = kwlLinkedJeDetails.getEntityList();
                                if(listLinkedJeDetails!=null){
                                    for (int j = 0; j < listLinkedJeDetails.size(); j++) {
                                        JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listLinkedJeDetails.get(j);
                                        if(!journalEntryDetail.getAccount().getID().equals(customer.getAccount().getID())){
                                            listJEDetail.add(journalEntryDetail);
                                        }
                                    }
                                }
                            }
                        }

                        if (tot_amountinbase != 0 && tot_amountinbase != amountinbase) {
                            System.out.println("Customer : " + invoiceCustomerName + ", Credit Note : " + invoiceNumber + ", Credit Note Amount : " + amountinbase + ", Total Amount : " + tot_amountinbase);
                            amountinbase = tot_amountinbase;

                            if(creditNote.getCurrency().getCurrencyID().equals(baseCurrency.getCurrencyID())){
                                amount=amountinbase;
                            }
                        }
                    }
                }

                double custCurrToBaseExchRate = 1 / accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, custCurrencyId, jeEntryDate);
                if(accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, custCurrencyId, jeEntryDate)==0.0){
                   custCurrToBaseExchRate=jeEntryExternalCurrencyRate; 
                }
                if (baseCurrencyId.equals(custCurrencyId)) {
                    custCurrToBaseExchRate = 1;
                } else if (custCurrencyId.equals(currencyid)) { // if CustomerCurr and TransactionCurr is same then no need to take exchange rate from erd table. we can use transaction lavel exchange rate. 
                   custCurrToBaseExchRate = 1/jeEntryExternalCurrencyRate;
                }

                Custamount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountinbase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);


                amountinCustCurr = (Double) Custamount.getEntityList().get(0);
                amountinCustCurr = authHandler.round(amountinCustCurr, companyid);
                if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                    baseCurrencyTotalAmount = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, currencyTotalAmount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                } else {
                    baseCurrencyTotalAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, currencyTotalAmount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                }
                currencyTotalAmountInBase = (Double) bAmt.getEntityList().get(0);
                currencyTotalAmountInBase = authHandler.round(currencyTotalAmountInBase, companyid);

                CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, currencyTotalAmountInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);

                currencyTotalAmountinCustCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
                currencyTotalAmountinCustCurr = authHandler.round(currencyTotalAmountinCustCurr, companyid);

                if (type.equalsIgnoreCase("Cash Sale")) {
//                    CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                    currencyTotalAmountinCustCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                    currencyTotalAmountinCustCurr = authHandler.round(currencyTotalAmountinCustCurr, companyid);
                    statementOfReportsSubReport.setDebit("");
                    statementOfReportsSubReport.setCredit("(" + custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(authHandler.round(amountinCustCurr, companyid), companyid) + ")");
                    statementOfReportsSubReport.setBalance((totalAmountInCustomerCurr != 0) ? totalAmountInCustomerCurr < 0 ? ("(" + custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInCustomerCurr * -1), companyid) + ")") : (custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInCustomerCurr, companyid)) :(custCurrencySymbol+" "+authHandler.formattedAmount(0, companyid)));
                } else if (type.equalsIgnoreCase("Customer Invoice") || type.equalsIgnoreCase("Sales Invoice")) {
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase + amountinbase;
                    balanceAmount = balanceAmount + amount;

                    totalAmountInCustomerCurr = totalAmountInCustomerCurr + amountinCustCurr;

//                    CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                    currencyTotalAmountinCustCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                    currencyTotalAmountinCustCurr = authHandler.round(currencyTotalAmountinCustCurr, companyid);

                    statementOfReportsSubReport.setCredit(custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(amountinCustCurr, companyid));
                    statementOfReportsSubReport.setDebit("");
                    statementOfReportsSubReport.setBalance((totalAmountInCustomerCurr != 0) ? totalAmountInCustomerCurr < 0 ? ("(" + custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInCustomerCurr * -1), companyid) + ")") : (custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInCustomerCurr, companyid)) :(custCurrencySymbol+" "+authHandler.formattedAmount(0, companyid)));

                } else if (type.equalsIgnoreCase("Payment Made")) {//For make payment to customer
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase + amountinbase;
                    balanceAmount = balanceAmount + amount;

                    totalAmountInCustomerCurr = totalAmountInCustomerCurr + amountinCustCurr;

//                    CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                    currencyTotalAmountinCustCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                    currencyTotalAmountinCustCurr = authHandler.round(currencyTotalAmountinCustCurr, companyid);

                    statementOfReportsSubReport.setCredit(custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(amountinCustCurr, companyid));
                    statementOfReportsSubReport.setDebit("");
                    statementOfReportsSubReport.setBalance((totalAmountInCustomerCurr != 0) ? totalAmountInCustomerCurr < 0 ? ("(" + custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInCustomerCurr * -1), companyid) + ")") : (custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInCustomerCurr, companyid)) :(custCurrencySymbol+" "+authHandler.formattedAmount(0, companyid)));

                } else if (type.equalsIgnoreCase("Debit Note")) {//For Debit note of customer
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase + amountinbase;
                    balanceAmount = balanceAmount + amount;

                    totalAmountInCustomerCurr = totalAmountInCustomerCurr + amountinCustCurr;

//                    CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                    currencyTotalAmountinCustCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                    currencyTotalAmountinCustCurr = authHandler.round(currencyTotalAmountinCustCurr, companyid);


                    statementOfReportsSubReport.setCredit(custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(amountinCustCurr, companyid));
                    statementOfReportsSubReport.setDebit("");
                    statementOfReportsSubReport.setBalance((totalAmountInCustomerCurr != 0) ? totalAmountInCustomerCurr < 0 ? ("(" + custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInCustomerCurr * -1), companyid) + ")") : (custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInCustomerCurr, companyid)) :(custCurrencySymbol+" "+authHandler.formattedAmount(0, companyid)));

                } else {  //if((type.equalsIgnoreCase("Payment Received")) || (type.equalsIgnoreCase("Credit Note")))
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount - amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase - amountinbase;
                    balanceAmount = balanceAmount - amount;

                    totalAmountInCustomerCurr = totalAmountInCustomerCurr - amountinCustCurr;


//                    CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                    currencyTotalAmountinCustCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                    currencyTotalAmountinCustCurr = authHandler.round(currencyTotalAmountinCustCurr, companyid);

                    statementOfReportsSubReport.setDebit("");
                    statementOfReportsSubReport.setCredit("(" + custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(amountinCustCurr, companyid) + ")");
                    statementOfReportsSubReport.setBalance((totalAmountInCustomerCurr != 0) ? totalAmountInCustomerCurr < 0 ? ("(" + custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInCustomerCurr * -1), companyid) + ")") : (custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInCustomerCurr, companyid)) : (custCurrencySymbol+" "+authHandler.formattedAmount(0, companyid)));
                }
                statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);
                statementOfReportsSubReport.setBusinessPerson(Constants.CustomerName);
                statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                statementOfReportsSubReport.setTerms(invoiceCustomerTerms);
                statementOfReportsSubReport.setAttn(invoiceCustomerAttn);

                if (hashMapJSON.containsKey(invoiceCustomerId)) {
                    JSONObject jSONObject = hashMapJSON.get(invoiceCustomerId);

                    double amountdue1CustCurr = 0, amountdue2CustCurr = 0, amountdue3CustCurr = 0, amountdue4CustCurr = 0, amountdue5CustCurr = 0;
                    double totalinCustCurr = 0;
                    KwlReturnObject amountdueincustCurrency = null;
//                    amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, jSONObject.getDouble("amountdueinbase1"), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                    amountdue1CustCurr = jSONObject.getDouble("amountdueinbase1");
                    amountdue1CustCurr = authHandler.round(amountdue1CustCurr, companyid);


//                    amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, jSONObject.getDouble("amountdueinbase2"), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                    amountdue2CustCurr = jSONObject.getDouble("amountdueinbase2");
                    amountdue2CustCurr = authHandler.round(amountdue2CustCurr, companyid);

//                    amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, jSONObject.getDouble("amountdueinbase3"), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                    amountdue3CustCurr = jSONObject.getDouble("amountdueinbase3");
                    amountdue3CustCurr = authHandler.round(amountdue3CustCurr, companyid);

//                    amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, jSONObject.getDouble("amountdueinbase4"), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                    amountdue4CustCurr = jSONObject.getDouble("amountdueinbase4");
                    amountdue4CustCurr = authHandler.round(amountdue4CustCurr, companyid);

//                    amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, (jSONObject.getDouble("amountdueinbase5") + jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8")), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                    amountdue5CustCurr = jSONObject.getDouble("amountdueinbase5") + jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.getDouble("amountdueinbase9") + jSONObject.getDouble("amountdueinbase10") + jSONObject.getDouble("amountdueinbase11");
                    amountdue5CustCurr = authHandler.round(amountdue5CustCurr, companyid);

//                    amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, jSONObject.getDouble("totalinbase"), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                    totalinCustCurr = jSONObject.getDouble("totalinbase");
                    totalinCustCurr = authHandler.round(totalinCustCurr, companyid);

                    statementOfReportsSubReport.setAmountDueCurrent(amountdue1CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue1CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue1CustCurr, companyid) + "");
                    statementOfReportsSubReport.setAmountDue1(amountdue2CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue2CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue2CustCurr, companyid) + "");
                    statementOfReportsSubReport.setAmountDue2(amountdue3CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue3CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue3CustCurr, companyid) + "");
                    statementOfReportsSubReport.setAmountDue3(amountdue4CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue4CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue4CustCurr, companyid) + "");
                    statementOfReportsSubReport.setAmountDue4(amountdue5CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue5CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue5CustCurr, companyid) + "");
                    statementOfReportsSubReport.setAmountDue5(totalinCustCurr < 0 ? ("(" + curr + " " + authHandler.formattedCommaSeparatedAmount((totalinCustCurr * -1), companyid) + ")") : curr + " " + authHandler.formattedCommaSeparatedAmount(totalinCustCurr, companyid));


                }
                amountDueMap.put(invoiceCustomerId, amountDueList);
                if(dateFilter == Constants.agedDueDate0to30Filter || dateFilter == Constants.agedInvoiceDate0to30Filter){
                    statementOfReportsSubReport.setAmount1Header("0-" + duration + " days");
                } else {
                    statementOfReportsSubReport.setAmount1Header("1-" + duration + " days");
                }
                statementOfReportsSubReport.setAmount2Header(duration + 1 + "-" + (2 * duration) + " Days");
                statementOfReportsSubReport.setAmount3Header((2 * duration) + 1 + "-" + (3 * duration) + " Days");
                statementOfReportsSubReport.setAmount4Header("Over " + (3 * duration) + " Days");

                statementOfReportsSubReport.setCurrency(currency.getCurrencyCode());

                statementOfReportsSubReport.setAgeingCurrency(baseCurrency.getCurrencyCode());
                statementOfReportsSubReport.setBaseCurrency(baseCurrency.getCurrencyCode());
                if (i == customerLedgerList.size() - 1) {
                    statementOfReportsSubReport.setPageBreak(false);
                }
                List<SOABalanceOutstandingPojo> outstandingPojos = new ArrayList<SOABalanceOutstandingPojo>();
                if (!nextInvoiceCustomerId.equals(invoiceCustomerId)) {
                    statementOfReportsSubReport.setOutstandingFlag(true);
                    for (Map.Entry<String, HashMap> entry : currencyHashMap.entrySet()) {
                        HashMap<String, Double> tempHashMap = entry.getValue();
                        for (Map.Entry<String, Double> entryInner : tempHashMap.entrySet()) {
                            SOABalanceOutstandingPojo sOABalanceOutstandingPojo = new SOABalanceOutstandingPojo();
                            sOABalanceOutstandingPojo.setBaseCurrency(currencyCodeHashMap.get(entryInner.getKey()));
                            sOABalanceOutstandingPojo.setBalance((templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag) ? authHandler.formattedCommaSeparatedAmount(entryInner.getValue(), companyid) : authHandler.formattedAmount(entryInner.getValue(), companyid));
                            outstandingPojos.add(sOABalanceOutstandingPojo);
                        }
                    }
                }
                KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);

                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) cmpresult.getEntityList().get(0);
                Calendar cal0 = Calendar.getInstance();
                Date date = cal0.getTime();
                DateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");
                statementOfReportsSubReport.setHeaderdate(date != null ? dateFormat.format(date) : "");  //ERP-8521
                statementOfReportsSubReport.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                statementOfReportsSubReport.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                statementOfReportsSubReport.setBasecurrencysymbol(company.getCurrency() != null ? company.getCurrency().getName() : "");
                String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                statementOfReportsSubReport.setImagepath(fileName1);
                statementOfReportsSubReport.setsOABalanceOutstandingPojos(outstandingPojos);
//                if (templateFlag == Constants.lsh_templateflag && statementOfReportsSubReport.getBalance().contains("0.00")) {
//                    statementOfReportsSubReport.setBalance((currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode()) + " " + authHandler.formattedAmount(0));
////                    statementOfReportsSubReport.setDebit("");
////                    statementOfReportsSubReport.setCredit("");
//                }
                if(templateFlag == Constants.Guan_ChongBF_templateflag || templateFlag == Constants.Guan_Chong_templateflag){
                statementOfReportsSubReport.setCompanyEmail(customerAddressDetails.getEmailID() != null ?customerAddressDetails.getEmailID() : "");
                statementOfReportsSubReport.setCompanyFax(customerAddressDetails.getFax() != null ?customerAddressDetails.getFax() : "");
                statementOfReportsSubReport.setCompanyPhone(customerAddressDetails.getPhone() != null ?customerAddressDetails.getPhone() : "");
                } else{
                statementOfReportsSubReport.setCompanyEmail(company.getEmailID() != null ? company.getEmailID() : "");
                statementOfReportsSubReport.setCompanyFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
                statementOfReportsSubReport.setCompanyPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
                }
                statementOfReportsSubReport.setCustCurrency(custCurrencySymbol);

                statementOfReportsSubReportList.add(statementOfReportsSubReport);
                stmSubReportListMap.put(invoiceCustomerId, statementOfReportsSubReport);
                
                if(reportid==Constants.SOA_CUSTOMER_ACCOUNT_STATEMENT_REPORTID){
                    //Add JEs with Foreign Gain/Loss posted separately.
                    for(JournalEntryDetail jeDetail : listJEDetail){
                        statementOfReportsSubReport = new StatementOfAccountsSubReport();

                        statementOfReportsSubReport.setBalance(defValue);
                        statementOfReportsSubReport.setAmountDue1(defValue);
                        statementOfReportsSubReport.setAmountDue2(defValue);
                        statementOfReportsSubReport.setAmountDue3(defValue);
                        statementOfReportsSubReport.setAmountDue4(defValue);
                        statementOfReportsSubReport.setAmountDue5(defValue);

                        statementOfReportsSubReport.setOrderNo(jobCode); // set as Job code ref ERP-11331

                        statementOfReportsSubReport.setTransactionId(invoiceNumber+" ("+jeDetail.getAccount().getName()+")");
                        statementOfReportsSubReport.setJeId(templateFlag == Constants.BuildMate_templateflag ? "" : jeEntryNumber);
                        statementOfReportsSubReport.setDate(dateFormat.format(jeEntryDate));

                        Custamount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, jeDetail.getAmountinbase(), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                        amountinCustCurr = (Double) Custamount.getEntityList().get(0);
                        amountinCustCurr = authHandler.round(amountinCustCurr, companyid);
                        if(jeDetail.isDebit()){
                            balanceAmtInBase = balanceAmtInBase - jeDetail.getAmountinbase();
                            balanceAmount = balanceAmount - jeDetail.getAmount();

                            totalAmountInCustomerCurr = totalAmountInCustomerCurr - amountinCustCurr;

//                            CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                            currencyTotalAmountinCustCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                            currencyTotalAmountinCustCurr = authHandler.round(currencyTotalAmountinCustCurr, companyid);

                            statementOfReportsSubReport.setCredit((jeDetail.getAmount() != 0) ? (custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(amountinCustCurr, companyid)) : "");
                            statementOfReportsSubReport.setDebit("");
                            statementOfReportsSubReport.setBalance((totalAmountInCustomerCurr != 0) ?totalAmountInCustomerCurr < 0 ? ("(" + custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInCustomerCurr * -1), companyid) + ")") : (custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInCustomerCurr, companyid)) : (custCurrencySymbol+" "+authHandler.formattedAmount(0, companyid)));
                        }else{
                            balanceAmtInBase = balanceAmtInBase + jeDetail.getAmountinbase();
                            balanceAmount = balanceAmount + jeDetail.getAmount();

                            totalAmountInCustomerCurr = totalAmountInCustomerCurr + amountinCustCurr;

//                            CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                            currencyTotalAmountinCustCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                            currencyTotalAmountinCustCurr = authHandler.round(currencyTotalAmountinCustCurr, companyid);

                            statementOfReportsSubReport.setCredit((jeDetail.getAmount() != 0) ? (custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(amountinCustCurr, companyid)) : "");
                            statementOfReportsSubReport.setDebit("");
                            statementOfReportsSubReport.setBalance((totalAmountInCustomerCurr != 0) ? totalAmountInCustomerCurr < 0 ? ("(" + custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInCustomerCurr * -1), companyid) + ")") : (custCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInCustomerCurr, companyid)) : (custCurrencySymbol+" "+authHandler.formattedAmount(0, companyid)));
                        }

                        statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                        statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);
                        statementOfReportsSubReport.setBusinessPerson(Constants.CustomerName);
                        statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                        statementOfReportsSubReport.setTerms(invoiceCustomerTerms);
                        statementOfReportsSubReport.setAttn(invoiceCustomerAttn);

                        statementOfReportsSubReport.setCurrency(currency.getCurrencyCode());

                        statementOfReportsSubReport.setAgeingCurrency(baseCurrency.getCurrencyCode());
                        statementOfReportsSubReport.setBaseCurrency(baseCurrency.getCurrencyCode());
                        if (i == customerLedgerList.size() - 1) {
                            statementOfReportsSubReport.setPageBreak(false);
                        }

                        statementOfReportsSubReport.setHeaderdate(date != null ? dateFormat.format(date) : "");  //ERP-8521
                        statementOfReportsSubReport.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        statementOfReportsSubReport.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                        statementOfReportsSubReport.setBasecurrencysymbol(company.getCurrency() != null ? company.getCurrency().getName() : "");
                        statementOfReportsSubReport.setImagepath(fileName1);
                        statementOfReportsSubReport.setsOABalanceOutstandingPojos(outstandingPojos);

                        if(templateFlag == Constants.Guan_ChongBF_templateflag || templateFlag == Constants.Guan_Chong_templateflag){
                            statementOfReportsSubReport.setCompanyEmail(customerAddressDetails.getEmailID() != null ?customerAddressDetails.getEmailID() : "");
                            statementOfReportsSubReport.setCompanyFax(customerAddressDetails.getFax() != null ?customerAddressDetails.getFax() : "");
                            statementOfReportsSubReport.setCompanyPhone(customerAddressDetails.getPhone() != null ?customerAddressDetails.getPhone() : "");
                        } else{
                            statementOfReportsSubReport.setCompanyEmail(company.getEmailID() != null ? company.getEmailID() : "");
                            statementOfReportsSubReport.setCompanyFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
                            statementOfReportsSubReport.setCompanyPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
                        }
                        statementOfReportsSubReport.setCustCurrency(custCurrencySymbol);


                        statementOfReportsSubReportList.add(statementOfReportsSubReport);
    //                stmSubReportListMap.put(invoiceCustomerId, statementOfReportsSubReport);
                    }
                }
            }
            statementOfAccountsMap.put("StatementOfAccountsSubReportData", new JRBeanCollectionDataSource(statementOfReportsSubReportList));

        } catch (ParseException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerLedgerJasper : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerLedgerJasper : " + ex.getMessage(), ex);
        }
        return statementOfAccountsMap;
    }

    private double getAsOnDateAmountDueForTransactions(HashMap<String, Object> reqMap, Date asOfDate, String documentId, String type, double documentAmt, String companyid) throws ServiceException {
        double amtDue = 0;
        DateFormat df = (DateFormat) reqMap.get(Constants.df);
        String asofDate = df.format(asOfDate);
        if (!StringUtil.isNullOrEmpty(type)) {
            if (type.equalsIgnoreCase("Sales Invoice")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), documentId);
                Invoice invoice = (Invoice) objItr.getEntityList().get(0);
                if (invoice != null) {
                    reqMap.put("invoiceid", documentId);
                    reqMap.put("asofdate", asofDate);
                    List ll = accInvoiceCommon.getAmountDue_Discount(reqMap, invoice);
                    amtDue = (Double) ll.get(0);
                }
            } else if (type.equalsIgnoreCase("Purchase Invoice")) {
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), documentId);
                GoodsReceipt goodsReceipt = (GoodsReceipt) objItr.getEntityList().get(0);
                if (goodsReceipt != null) {
                    List ll = Collections.EMPTY_LIST;
                    reqMap.put("grid", documentId);
                    reqMap.put("asofdate", asofDate);
                    if (goodsReceipt.isIsExpenseType()) {
                        ll = accGoodsReceiptCommon.getExpGRAmountDue(reqMap, goodsReceipt);
                    } else {
                        ll = accGoodsReceiptCommon.getGRAmountDue(reqMap, goodsReceipt);
                    }
                    amtDue = (Double) ll.get(1);
                }
            } else if (type.equalsIgnoreCase("Debit Note")) {
                double dnAmount = 0;
                double invReturnAmt = 0;
                reqMap.put("debitnoteid", documentId);
                reqMap.put("asofdate", asofDate);
                KwlReturnObject dnpResult = accReceiptDAOobj.getDebitNotePaymentDetail(reqMap);
                if (!dnpResult.getEntityList().isEmpty()) {
                    Iterator dnpItr = dnpResult.getEntityList().iterator();
                    while (dnpItr.hasNext()) {
                        Object[] objects = (Object[]) dnpItr.next();
                        double exchangeratefortransaction = objects[0] != null ? (Double) objects[0] : 1.0;
                        double dnPaidAmtInReceiptCurrency = objects[1] != null ? (Double) objects[1] : 0.0;
                        dnAmount += authHandler.round(dnPaidAmtInReceiptCurrency / exchangeratefortransaction, companyid);
                    }
                }
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), documentId);
                DebitNote note = (DebitNote) objItr.getEntityList().get(0);
                if (note != null) {
                    KwlReturnObject dnresult = accDebitNoteobj.getDNRowsFromVendorInvoice(reqMap);
                    List<DebitNoteDetail> rows =dnresult.getEntityList(); 
                    for (DebitNoteDetail detail : rows) {
                        Discount disc = detail.getDiscount();
                        if (disc != null) {
                            invReturnAmt += disc.getDiscountValue();
                        }
                    }
                }
                
                double linkAmount = 0;
                KwlReturnObject linkResult = accReceiptDAOobj.getLinkDetailReceiptToDebitNote(reqMap);
                List<LinkDetailReceiptToDebitNote> detail = linkResult.getEntityList();
                for (LinkDetailReceiptToDebitNote ldr : detail) {
                    linkAmount += ldr.getAmountInDNCurrency();
                }
                amtDue = documentAmt - (dnAmount + invReturnAmt+linkAmount);
            } else if (type.equalsIgnoreCase("Credit Note")) {
                double cnAmount = 0;
                double invReturnAmt = 0;
                reqMap.put("creditnoteid", documentId);
                reqMap.put("asofdate", asofDate);
                KwlReturnObject cnpResult = accPaymentDAOobj.getCreditNotePaymentDetails(reqMap);
                if (!cnpResult.getEntityList().isEmpty()) {
                    Iterator cnpItr = cnpResult.getEntityList().iterator();
                    while (cnpItr.hasNext()) {
                        Object[] objects = (Object[]) cnpItr.next();
                        double exchangeratefortransaction = objects[0] != null ? (Double) objects[0] : 1.0;
                        double cnPaidAmtInReceiptCurrency = objects[1] != null ? (Double) objects[1] : 0.0;
                        cnAmount += authHandler.round(cnPaidAmtInReceiptCurrency / exchangeratefortransaction, companyid);
                    }
                }
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), documentId);
                CreditNote note = (CreditNote) objItr.getEntityList().get(0);
                if (note != null) {
                    KwlReturnObject result = accCreditNoteDAOobj.getCNRowsFromInvoice(reqMap);
                    List<CreditNoteDetail> rows = result.getEntityList();
                    for (CreditNoteDetail detail : rows) {
                        Discount disc = detail.getDiscount();
                        if (disc != null) {
                            invReturnAmt += disc.getDiscountValue();
                        }
                    }
                }
                double linkAmount = 0;
                KwlReturnObject cnLinkResult = accVendorPaymentDAO.getLinkDetailPaymentToCreditNote(reqMap);
                List<LinkDetailPaymentToCreditNote> linkDetail = cnLinkResult.getEntityList();
                for (LinkDetailPaymentToCreditNote ldr : linkDetail) {
                    linkAmount += ldr.getAmountInCNCurrency();
                }
                amtDue = documentAmt - (cnAmount + invReturnAmt + linkAmount);
            }
        }
        amtDue=authHandler.round(amtDue, companyid);
        return amtDue;
    }

    public Map<String, Object> getVendorLedgerJasper(JSONObject request, int templateFlag) throws ServiceException, SessionExpiredException, UnsupportedEncodingException {
        JSONObject jobj = new JSONObject();
        ArrayList<StatementOfAccountsSubReport> statementOfReportsSubReportList = new ArrayList<StatementOfAccountsSubReport>();
        HashMap<String, StatementOfAccountsSubReport> stmSubReportListMap = new HashMap<String, StatementOfAccountsSubReport>();
        Map<String, Object> statementOfAccountsMap = new HashMap<String, Object>();
        HashMap<String, ArrayList> amountDueMap = new HashMap<String, ArrayList>();
        String companyid =request.optString(Constants.companyKey);
        try {
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            int templateType = request.optString("type") != null ? Integer.parseInt(request.optString("type")) : 0;
            int reportid = !StringUtil.isNullOrEmpty(request.optString("reportid")) ? Integer.parseInt(request.optString("reportid")) : -1;

            JSONArray jArr = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            boolean invoiceAmountDueFilter = true;
            if (request.optString("invoiceAmountDueFilter") != null) {
                invoiceAmountDueFilter = Boolean.parseBoolean(request.optString("invoiceAmountDueFilter"));
            }
            boolean isPostDatedCheque = false;
            if (request.optString("isPostDatedCheque") != null) {
                isPostDatedCheque = Boolean.parseBoolean(request.optString("isPostDatedCheque"));
            }
            int dateFilter = 1;
            if (request.optString("datefilter") != null) {
                dateFilter = request.optInt("datefilter",1);
            }

            Date startDate = authHandler.getDateOnlyFormat( ).parse(request.optString("stdate"));
            Date endDate = authHandler.getDateOnlyFormat( ).parse(request.optString("enddate"));
            Date asofDate = authHandler.getDateOnlyFormat( ).parse(request.optString("asofdate"));
            DateFormat df = authHandler.getDateOnlyFormat( );
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            //dateFormat.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getTimeZoneDifference(request)));
            
            Calendar cal= Calendar.getInstance();
            cal.setTime(startDate);
            cal.add(Calendar.DATE, -1);  // number of days to add
            Date st = cal.getTime();
            Calendar end= Calendar.getInstance();
            end.setTime(asofDate);
            end.add(Calendar.DATE, 1);  // number of days to add
            Date ed=end.getTime();
            
            String vendorIds = "";
            if (request.optString("vendorIds") != null) {
                vendorIds = request.optString("vendorIds").toString();
            } else {
                vendorIds = request.optString("vendorIds");
            }
            String withoutinventory = request.optString("withoutinventory");
            HashMap<String, Object> requestParams =  AccountingManager.getGlobalParamsJson(request);
            requestParams.put("vendorIds", vendorIds);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put("startDate", new Date(0));
            requestParams.put("endDate", endDate);
            requestParams.put("isPostDatedCheque", isPostDatedCheque);            
            if(templateFlag==Constants.F1RecreationLeasing_templateflag || templateFlag==Constants.F1Recreation_templateflag){
            requestParams.put("isSortedOnCreationDate",true);// to sort the date field
            }

            String searchJson = request.optString(Constants.Acc_Search_Json, "");
            String filterConjuctionCriteria = request.optString(Constants.Filter_Criteria, "");
            if (!StringUtil.isNullOrEmpty(searchJson)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
            }
            if (!StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            }

            boolean isAdvanceSearch = false;
            String invoiceSearchJson = "";
            String receiptSearchJson = "";
            String cnSearchJson = "";
            String dnSearchJson = "";
            String makePaymentSearchJson = "";

            if (requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Filter_Criteria) != null) {
                if (requestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                searchJson = requestParams.get(Constants.Acc_Search_Json).toString();
                if (!StringUtil.isNullOrEmpty(searchJson)) {
                    isAdvanceSearch = true;
                    requestParams.put(Constants.Filter_Criteria, request.optString(Constants.Filter_Criteria));
                    HashMap<String, Object> reqPar1 = new HashMap<>();
                    reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                    reqPar1.put(Constants.Acc_Search_Json, searchJson);
                    reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    invoiceSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.remove(Constants.moduleid);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    receiptSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    dnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    cnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    makePaymentSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                }
            }
            requestParams.put("invoiceSearchJson", invoiceSearchJson);
            requestParams.put("receiptSearchJson", receiptSearchJson);
            requestParams.put("cnSearchJson", cnSearchJson);
            requestParams.put("dnSearchJson", dnSearchJson);
            requestParams.put("makePaymentSearchJson", makePaymentSearchJson);
            requestParams.put("isAdvanceSearch", isAdvanceSearch);
            
            requestParams.put("invoiceAmountDueFilter",invoiceAmountDueFilter);
            requestParams.put("showDishonouredPayment",true);
            KwlReturnObject customerLedger = accInvoiceDAOobj.getVendorLedgerReport(requestParams);
            List customerLedgerList = customerLedger.getEntityList();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(),request.optString(Constants.globalCurrencyKey));
            KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
            String customBaseCurrCode = accCommonTablesDAO.getCustomCurrencyCode(baseCurrency.getCurrencyCode(),companyid );
            String customBaseCurrSymbol = accCommonTablesDAO.getCustomCurrencySymbol(baseCurrency.getSymbol(),companyid );
            double balanceAmtInBase = 0;
            double balanceAmount = 0;
            String prevCustomer = "";
            String curDateString = "";
            Date curDate = null;
            boolean booleanAged = false;//Added for aged payable/receivable
            int duration = Integer.parseInt(request.optString("interval"));
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            curDate = Calendar.getInstance().getTime();
            curDateString = df.format(curDate);
            booleanAged = true;
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;

            HashMap<String, JSONObject> hashMapJSON = new HashMap<String, JSONObject>();
            HashMap<String, Object> requestParamsAged =  getVendorParameterMap(request);
            JSONArray jSONArray = accGoodsReceiptServiceDAO.getVendorAgedPayableMerged(request, requestParamsAged);
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                hashMapJSON.put(jSONObject.getString("personid"), jSONObject);
            }
            request.put("isCurrencyDetails", true);
            Map<String,List<AgeingTableForSOA>> agedDetaislMap = getCurrencyWiseAgedDetaislForSOA(request,false);
            String defValue = authHandler.getCompleteDFStringForAmount("0.", companyid);
            ArrayList<Double> amountDueList = new ArrayList<Double>();
            double currencyTotalAmount = 0.00;
            Map<String, HashMap> currencyHashMap = new HashMap<String, HashMap>();
//            Map<String, ArrayList> currencyHashMapForAgeing = new HashMap<String, ArrayList>();
            Map<String, String> currencyCodeHashMap = new HashMap<String, String>();
            Set<String> vendorSet = new HashSet();
            String previousCustomerId = "";
            for (int i = 0; i < customerLedgerList.size(); i++) {
                Object[] tempCustomerLedger = (Object[]) customerLedgerList.get(i);
                String type = (String) tempCustomerLedger[0];
                String invoiceId = (String) tempCustomerLedger[1]; // if(type=='invoice') ==> invoice.id, if(type=='receipt') ==> receipt.id, if(type=='creditnote') ==> creditnote.id
                String invoiceNumber = (String) tempCustomerLedger[2]; // if(type=='invoice') ==> invoice.invoicenumber, if(type=='receipt') ==> receipt.receiptnumber, if(type=='creditnote') ==> creditnote.cnnumber
                String jeId = (String) tempCustomerLedger[3]; // journalentry.id
                String memo = StringUtil.isNullOrEmpty((String) tempCustomerLedger[4]) ? "" : (String) tempCustomerLedger[4]; // if(type=='invoice') ==> invoice.memo, if(type=='receipt') ==> receipt.memo, if(type=='creditnote') ==> creditnote.memo
                String currencyid = StringUtil.isNullOrEmpty((String) tempCustomerLedger[5]) ? request.optString(Constants.globalCurrencyKey) : (String) tempCustomerLedger[5]; // if(type=='invoice') ==> invoice.currency, if(type=='receipt') ==> receipt.currency, if(type=='creditnote') ==> creditnote.currency
                double amount = (Double) tempCustomerLedger[6]; // if(type=='invoice') ==> jedetail.amount, if(type=='receipt') ==> receiptdetails.amount, if(type=='creditnote') ==> jedetail.amount
                String jeEntryNumber = (String) tempCustomerLedger[7];
                Date jeEntryDate = (Date) tempCustomerLedger[8];
                double jeEntryExternalCurrencyRate = (Double) tempCustomerLedger[9];
                String invoiceCustomerId = (String) tempCustomerLedger[10];
                
                String VendorID = tempCustomerLedger[19].toString();
                String VendorAccountID = "";
                Vendor vendor = null;
                if(!StringUtil.isNullOrEmpty(VendorID)){
                    KwlReturnObject kwlVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), VendorID);
                    vendor = (Vendor) kwlVendor.getEntityList().get(0);
                    VendorAccountID = vendor.getAccount().getID();
                }
                
                if(i==0) {
                    previousCustomerId = new String(invoiceCustomerId);
                }
                
                KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), invoiceCustomerId);
                Vendor ven = (Vendor) custresult.getEntityList().get(0);
                String invoiceCustomerCode = ven.getAcccode();
                String invoiceCustomerTerms = ven.getDebitTerm() == null ? "" : ven.getDebitTerm().getTermdays() + " Days";
                
                //params to send to get billing address
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put("companyid", companyid);
                addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                addressParams.put("isBillingAddress", true);    //true to get billing address
                addressParams.put("vendorid", ven.getID());
                addressParams.put("templateFlag", templateFlag);                
                String invoiceCustomerAdd = (templateFlag ==Constants.HCIS_templateflag || templateFlag==Constants.F1RecreationLeasing_templateflag || templateFlag == Constants.F1Recreation_templateflag)? accountingHandlerDAOobj.getVendorAddressForSenwanTec(addressParams) : accountingHandlerDAOobj.getVendorAddress(addressParams);
                String duedate ="";
                String chequenumber ="";
                String chequedate ="";
                if(templateFlag==Constants.F1RecreationLeasing_templateflag || templateFlag == Constants.F1Recreation_templateflag){
                    if (type.equalsIgnoreCase("Vendor Invoice") || type.equalsIgnoreCase("Purchase Invoice")) {
                    KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(GoodsReceipt.class.getName(), invoiceId);
                    GoodsReceipt inv = (GoodsReceipt) cap.getEntityList().get(0);
                    duedate = inv.getDueDate() != null ?  dateFormat.format(inv.getDueDate()): "";
                   } else if (type.equalsIgnoreCase("Payment Received")) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Receipt.class.getName(), invoiceId);
                        Receipt receipt = (Receipt) cap.getEntityList().get(0);
                        chequenumber = ((receipt.getPayDetail() == null || receipt.getPayDetail().getCheque() == null) ? "" : "Cheque Number : "+receipt.getPayDetail().getCheque().getChequeNo());
                        chequedate = receipt.getPayDetail() == null ? "" : (receipt.getPayDetail().getPaymentMethod().getDetailType() == PaymentMethod.TYPE_BANK) ? (receipt.getPayDetail().getCheque() != null ? "&nbsp;&nbsp;&nbsp;&nbsp;"+dateFormat.format(receipt.getPayDetail().getCheque().getDueDate()) : "") : "";
                    } else if (type.equalsIgnoreCase("Payment Made")) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Payment.class.getName(), invoiceId);
                        Payment receipt = (Payment) cap.getEntityList().get(0);
                        chequenumber = ((receipt.getPayDetail() == null || receipt.getPayDetail().getCheque() == null) ? "" : "Cheque Number : "+receipt.getPayDetail().getCheque().getChequeNo());
                        chequedate = receipt.getPayDetail() == null ? "" : (receipt.getPayDetail().getPaymentMethod().getDetailType() == PaymentMethod.TYPE_BANK) ? (receipt.getPayDetail().getCheque() != null ? "&nbsp;&nbsp;&nbsp;&nbsp;"+dateFormat.format(receipt.getPayDetail().getCheque().getDueDate()) : "") : "";
                    }}
                VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                String invoiceCustomerAttn = vendorAddressDetails == null ? "" : (StringUtil.isNullOrEmpty(vendorAddressDetails.getContactPerson())? "":vendorAddressDetails.getContactPerson());
//                String invoiceCustomerAttn = ven.getVendorAddresses() == null ? "" : ven.getVendorAddresses().getBillingContactPerson1() == null ? "" : ven.getVendorAddresses().getBillingContactPerson1();
                String invoiceCustomerName = (String) tempCustomerLedger[11];
                String withoutInventaryFlag = (String) tempCustomerLedger[13];
                double cndnAmountDue = (Double) tempCustomerLedger[14];
                int openingtransactionFlag = Integer.parseInt(tempCustomerLedger[16].toString());
                boolean isOpeningBalanceTransaction = false;
                if (openingtransactionFlag == 1) {
                    isOpeningBalanceTransaction = true;
                }
                HashMap<String, Object> reqMap = new HashMap();
                reqMap.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                reqMap.put(Constants.globalCurrencyKey, requestParams.get(Constants.globalCurrencyKey));
                reqMap.put(Constants.df, requestParams.get(Constants.df));
                reqMap.put(Constants.userdf, requestParams.get(Constants.userdf));
                reqMap.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
                reqMap.put("startDate", startDate);
                reqMap.put("asofDate", asofDate);	//SDP-8499
                reqMap.put("isOpeningBalanceTransaction", isOpeningBalanceTransaction);
                reqMap.put("transactionAmount", amount);
                reqMap.put("invoiceId", invoiceId);
                reqMap.put("type", type);

                amount = accReportsService.getAmountOfTransactionForVendorSOA(reqMap);
               

                boolean isConversionRateFromCurrencyToBase = false;
                int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempCustomerLedger[17].toString());
                if (conversionRateFromCurrencyToBaseFlag == 1) {
                    isConversionRateFromCurrencyToBase = true;
                }

                String currencySymbol =""; 
                KWLCurrency currency = null;
                if (!StringUtil.isNullOrEmpty(currencyid)) {
                    KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                    currency = (KWLCurrency) curresult1.getEntityList().get(0);
                    currencySymbol = currency.getSymbol() != null ? accCommonTablesDAO.getCustomCurrencySymbol(currency.getSymbol(),companyid) : accCommonTablesDAO.getCustomCurrencyCode(currency.getCurrencyCode(),companyid);
                }

                if (!prevCustomer.equals(invoiceCustomerId)) {
                    currencyHashMap.clear();
                    currencyCodeHashMap.clear();
                    prevCustomer = invoiceCustomerId;
                    balanceAmtInBase = 0;
                    balanceAmount = 0;
                    HashMap<String, Double> currncyAmount = new HashMap<String, Double>();
                    currncyAmount.put(currency.getCurrencyID(), 0.00);
                    currencyHashMap.put(invoiceCustomerId, currncyAmount);
                    currencyTotalAmount = 0.00;
                }
                if (vendorSet.add(invoiceCustomerId)) {
                    HashMap<String, Object> reqMap0 = AccountingManager.getGlobalParams(request);
                    reqMap0.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
                    reqMap0.put("startDate", startDate);
                    reqMap0.put("asofDate", asofDate);
                    reqMap0.put("invoiceVendorId", invoiceCustomerId);
                    reqMap0.put("VendorAccountID", VendorAccountID);
                    JSONObject opnJSON = accReportsService.calculateVendorAccuredBalance(customerLedgerList, reqMap0);
                    StatementOfAccountsSubReport statementOfReportsSubReport = new StatementOfAccountsSubReport();
                    statementOfReportsSubReport.setCurrency(customBaseCurrCode);
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(baseCurrency.getCurrencyID()) ? tempHashMap.get(baseCurrency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + opnJSON.getDouble("balanceAmountInBase");
                    tempHashMap.put(baseCurrency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid));
                    statementOfReportsSubReport.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
//                    statementOfReportsSubReport.setDate(templateType == 1 ? (endDate != null ? df.format(endDate) : "") : (curDate != null ? df.format(curDate) : ""));
                    statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                    if(templateFlag == Constants.BakerTilly_templateflag)
                    {
                        statementOfReportsSubReport.setCustomercode("");
                    }else{
                        statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);                    
                    }
                    statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                    statementOfReportsSubReport.setTerms(invoiceCustomerTerms);
                    statementOfReportsSubReport.setAttn(invoiceCustomerAttn);
                    statementOfReportsSubReport.setAmountDue1(defValue);
                    statementOfReportsSubReport.setAmountDue2(defValue);
                    statementOfReportsSubReport.setAmountDue3(defValue);
                    statementOfReportsSubReport.setAmountDue4(defValue);
                    statementOfReportsSubReport.setAmountDue5(defValue);
                    statementOfReportsSubReport.setAmountDueCurrent(defValue);
                    statementOfReportsSubReport.setAmountCurrHeader(Constants.CURRENT);
                    if(dateFilter == Constants.agedDueDate0to30Filter || dateFilter == Constants.agedInvoiceDate0to30Filter){
                        statementOfReportsSubReport.setAmount1Header("0-" + duration + " days");
                    } else {
                        statementOfReportsSubReport.setAmount1Header("1-" + duration + " days");
                    }
                    statementOfReportsSubReport.setAmount2Header(duration + 1 + "-" + (2 * duration) + " days");
                    statementOfReportsSubReport.setAmount3Header((2 * duration) + 1 + "-" + (3 * duration) + " days");
                    statementOfReportsSubReport.setAmount4Header("Over " + (3 * duration) + " days");
                    statementOfReportsSubReport.setCompanyregno("");
                    statementOfReportsSubReport.setTransactionId("Accrued Balance");
                    statementOfReportsSubReport.setAgeingTableData(agedDetaislMap.get(invoiceCustomerId) == null ? (new ArrayList<AgeingTableForSOA>()) : agedDetaislMap.get(invoiceCustomerId));
                    statementOfReportsSubReportList.add(statementOfReportsSubReport);
                }
                if (Math.abs(amount) <= 0 || accReportsService.isPeriodWiseOpeningTransaction(jeEntryDate, startDate)) { //if amount is zero then no need to show data in SOA Report so continue with next record
                    previousCustomerId = new String(invoiceCustomerId);
                    continue;
                }

                if (!currencyCodeHashMap.containsKey(currency.getCurrencyID())) {
                    currencyCodeHashMap.put(currency.getCurrencyID(), accCommonTablesDAO.getCustomCurrencyCode(currency.getCurrencyCode(),companyid));

                }
                StatementOfAccountsSubReport statementOfReportsSubReport = new StatementOfAccountsSubReport();
                statementOfReportsSubReport.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                statementOfReportsSubReport.setDate(templateType == 1 ? (endDate != null ? df.format(endDate) : "") : (curDate != null ? df.format(curDate) : ""));
                statementOfReportsSubReport.setAmountDue1(defValue); //need to set default bcoz when value is 0 then default value printed as 0.00 or 0.000
                statementOfReportsSubReport.setAmountDue2(defValue);
                statementOfReportsSubReport.setAmountDue3(defValue);
                statementOfReportsSubReport.setAmountDue4(defValue);
                statementOfReportsSubReport.setAmountDue5(defValue);
                statementOfReportsSubReport.setBalance(defValue);
                statementOfReportsSubReport.setAmountDueCurrent(defValue);
                Invoice invoice = null;
                if (!StringUtil.isNullOrEmpty(invoiceId)) {
                    KwlReturnObject invoiceList = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceId);
                    invoice = (Invoice) invoiceList.getEntityList().get(0);
                }
                if (templateFlag == Constants.HCIS_templateflag) {
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Vendor_ModuleId, 0, 1));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    KwlReturnObject idcustresult = accountingHandlerDAOobj.getObject(VendorCustomData.class.getName(), ven.getID());
                    if (idcustresult.getEntityList().get(0) != null && idcustresult.getEntityList().size() > 0) {
                        VendorCustomData jeCustom = (VendorCustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();

                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                if ((varEntry.getKey().split("_")[1]).equals("Tuition Deposit")) {
                                    statementOfReportsSubReport.setTutiondeposite(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Boarding Deposit")) {
                                    statementOfReportsSubReport.setBoardingdeposite(coldata);
                                }
                            }
                        }
                    }
                }

                jobjTemp = new JSONObject();
                Object[] tempNextCustomerLedger = null;
                if (i != customerLedgerList.size() - 1) {
                    tempNextCustomerLedger = (Object[]) customerLedgerList.get(i + 1);
                }
                String nextInvoiceCustomerId = tempNextCustomerLedger != null ? (String) tempNextCustomerLedger[10] : "";

                statementOfReportsSubReport.setTransactionId(templateFlag == Constants.HCIS_templateflag ? (type + " " + invoiceNumber) : invoiceNumber);
                 if (templateFlag == Constants.F1RecreationLeasing_templateflag || templateFlag == Constants.F1Recreation_templateflag) {
                    statementOfReportsSubReport.setJeId(duedate);
                    statementOfReportsSubReport.setCompanyEmail(vendorAddressDetails!=null?(vendorAddressDetails.getEmailID() != null ? vendorAddressDetails.getEmailID() : ""):"");
                    statementOfReportsSubReport.setCompanyFax(vendorAddressDetails!=null?(vendorAddressDetails.getFax() != null ? vendorAddressDetails.getFax() : ""):"");
                    statementOfReportsSubReport.setCompanyPhone(vendorAddressDetails!=null?(vendorAddressDetails.getPhone() != null ? vendorAddressDetails.getPhone() : ""):"");
                    statementOfReportsSubReport.setBankDetails(chequenumber + chequedate);
                
                 } else {
                    statementOfReportsSubReport.setJeId(templateFlag == Constants.BuildMate_templateflag ? "" : jeEntryNumber);
                } statementOfReportsSubReport.setDate(dateFormat.format(jeEntryDate));
                statementOfReportsSubReport.setOrderNo("");   // Order No.is unknown param. ERP-6387

                KwlReturnObject bAmt = null;
                if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                }

                double amountinbase = (Double) bAmt.getEntityList().get(0);
                amountinbase = authHandler.round(amountinbase, companyid);
                
                double tot_amountinbase = 0;
                List<JournalEntryDetail> listJEDetail = new ArrayList<>();

                if (reportid == Constants.SOA_VENDOR_ACCOUNT_STATEMENT_REPORTID) {
                    reqMap.put("type", type);
                    reqMap.put("invoiceId", invoiceId);
                    reqMap.put("amount", amount);
                    reqMap.put("amountinbase", amountinbase);
                    reqMap.put("jeId", jeId);
                    reqMap.put("VendorAccountID", VendorAccountID);

                    double[] amountArray = accReportsService.getSOAVendorAmountFromJEDetail(reqMap, listJEDetail);

                    amount = amountArray[0];
                    amountinbase = amountArray[1];
                }

                if (type.equalsIgnoreCase("Cash Purchase")) {
                    jobjTemp.put("debitAmountInBase", "");
                    jobjTemp.put("creditAmountInBase", amountinbase);
                    jobjTemp.put("balanceAmountInBase", balanceAmtInBase);
                    jobjTemp.put("debitAmount", "");
                    jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                    jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    if (templateFlag == Constants.lsh_templateflag) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? (currencySymbol + " " + authHandler.formattedAmount(authHandler.round(amount, companyid), companyid)) : "");
                        statementOfReportsSubReport.setBalance(currencySymbol + " " +((currencyTotalAmount != 0) ?  authHandler.formattedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid)));
                    } else if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag || templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    } else {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    }
                } else if (type.equalsIgnoreCase("Vendor Invoice") || type.equalsIgnoreCase("Purchase Invoice")) {

                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount - amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);

                    balanceAmtInBase = balanceAmtInBase - amountinbase;
                    jobjTemp.put("debitAmountInBase", "");
                    jobjTemp.put("creditAmountInBase", amountinbase);
                    jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                    balanceAmount = balanceAmount - amount;
                    jobjTemp.put("debitAmount", "");
                    jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                    jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    if (templateFlag == Constants.lsh_templateflag) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? currencySymbol + " " + authHandler.formattedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance(currencySymbol+" "+((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid)));
                    } else if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag || templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    } else {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    }
                } else if (type.equalsIgnoreCase("Payment Received")) {
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount - amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase - amountinbase;
                    jobjTemp.put("debitAmountInBase", "");
                    jobjTemp.put("creditAmountInBase", amountinbase);
                    jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                    balanceAmount = balanceAmount - amount;
                    jobjTemp.put("debitAmount", "");
                    jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                    jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    if (templateFlag == Constants.lsh_templateflag) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? currencySymbol + " " + authHandler.formattedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance(currencySymbol+" "+((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid)));
                    } else if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag || templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    } else {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    }
                } else if (type.equalsIgnoreCase("Credit Note")) {
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount - amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase - amountinbase;
                    jobjTemp.put("debitAmountInBase", "");
                    jobjTemp.put("creditAmountInBase", amountinbase);
                    jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                    balanceAmount = balanceAmount - amount;
                    jobjTemp.put("debitAmount", "");
                    jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                    jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    if (templateFlag == Constants.lsh_templateflag) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? currencySymbol + " " + authHandler.formattedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance(currencySymbol+" "+((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid)));
                    } else if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag || templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    } else {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    }
                } else if (type.equalsIgnoreCase(Constants.DISHONOURED_MAKE_PAYMENT)) {
                    KwlReturnObject companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) companyResult.getEntityList().get(0);
                    if (company != null && company.getCountry() != null && Constants.indian_country_id == Integer.parseInt(company.getCountry().getID())) {
                        double tdsAmount = getTDSAmountInAdvancePayment(invoiceId);
                        if (tdsAmount != 0.0) {
                            amountinbase -= tdsAmount;// +TDS Amount for Advance Payment
                            amount -= tdsAmount;// +TDS Amount for Advance Payment
                            currencyTotalAmount -= tdsAmount;// +TDS Amount for Advance Payment
                        }
                    }
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount - amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase - amountinbase;
                    jobjTemp.put("debitAmountInBase", "");
                    jobjTemp.put("creditAmountInBase", amountinbase);
                    jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                    balanceAmount = balanceAmount - amount;
                    jobjTemp.put("debitAmount", "");
                    jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                    jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    if (templateFlag == Constants.lsh_templateflag) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? currencySymbol + " " + authHandler.formattedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance(currencySymbol + " " + ((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid)));
                    } else if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag || templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    } else {
                        statementOfReportsSubReport.setDebit("");
                        statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    }
                } else if (type.equalsIgnoreCase(Constants.DISHONOURED_RECEIVE_PAYMENT)) {
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase + amountinbase;
                    jobjTemp.put("debitAmountInBase", amountinbase);
                    jobjTemp.put("creditAmountInBase", "");
                    jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                    balanceAmount = balanceAmount + amount;
                    jobjTemp.put("debitAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                    jobjTemp.put("creditAmount", "");
                    jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    if (templateFlag == Constants.lsh_templateflag) {
                        statementOfReportsSubReport.setDebit((amount != 0) ? currencySymbol + " " + authHandler.formattedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance(currencySymbol + " " + ((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid)));
                    } else if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag || templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setDebit((amount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    } else {
                        statementOfReportsSubReport.setDebit((amount != 0) ? authHandler.formattedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    }
                }else {  //if((type.equalsIgnoreCase("Payment Made")) || (type.equalsIgnoreCase("Debit Note")))
                    KwlReturnObject companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) companyResult.getEntityList().get(0);
                    if (company != null && company.getCountry() != null && Constants.indian_country_id == Integer.parseInt(company.getCountry().getID())) {
                        double tdsAmount = getTDSAmountInAdvancePayment(invoiceId);
                        if (tdsAmount != 0.0) {
                            amountinbase += tdsAmount;// +TDS Amount for Advance Payment
                            amount += tdsAmount;// +TDS Amount for Advance Payment
                            currencyTotalAmount += tdsAmount;// +TDS Amount for Advance Payment
                        }
                    }
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase + amountinbase;
                    jobjTemp.put("debitAmountInBase", amountinbase);
                    jobjTemp.put("creditAmountInBase", "");
                    jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                    balanceAmount = balanceAmount + amount;
                    jobjTemp.put("debitAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                    jobjTemp.put("creditAmount", "");
                    jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    if (templateFlag == Constants.lsh_templateflag) {
                        statementOfReportsSubReport.setDebit((amount != 0) ? currencySymbol+ " " + authHandler.formattedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance(currencySymbol+" "+((currencyTotalAmount != 0) ? authHandler.formattedAmount(currencyTotalAmount, companyid) : authHandler.formattedAmount(0, companyid)));
              } else if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag || templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setDebit((amount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    } else {
                        statementOfReportsSubReport.setDebit((amount != 0) ? authHandler.formattedAmount(authHandler.round(amount, companyid), companyid) : "");
                        statementOfReportsSubReport.setCredit("");
                        statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? authHandler.formattedAmount(authHandler.round(currencyTotalAmount, companyid), companyid) : authHandler.formattedAmount(0, companyid));
                    }
                }
                statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);
                statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                statementOfReportsSubReport.setTerms(invoiceCustomerTerms);
                statementOfReportsSubReport.setAttn(invoiceCustomerAttn);
                if (hashMapJSON.containsKey(invoiceCustomerId)) {
                    JSONObject jSONObject = hashMapJSON.get(invoiceCustomerId);
                    if (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag) {
                        statementOfReportsSubReport.setAmountDue1(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase2"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue2(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase3"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue3(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase4"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue4(authHandler.formattedCommaSeparatedAmount((jSONObject.getDouble("amountdueinbase5") + jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.getDouble("amountdueinbase9")+ jSONObject.getDouble("amountdueinbase10")+ jSONObject.getDouble("amountdueinbase11")), companyid) + "");
                        statementOfReportsSubReport.setAmountDue5(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("totalinbase"), companyid) + "");
                    }else if (templateFlag == Constants.Endovation_templateflag || templateFlag == Constants.Endovation_cfdn_templateflag || templateFlag == Constants.Endovation_cftp_templateflag || templateFlag == Constants.Endovation_fved_templateflag) {
                        statementOfReportsSubReport.setMemo(memo);
                        statementOfReportsSubReport.setDuration(duration);
                        statementOfReportsSubReport.setAmountDueCurrent(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase2"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue1(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase3"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue2(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase4"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue3(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase5"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue4(authHandler.formattedCommaSeparatedAmount((jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.getDouble("amountdueinbase9")  + jSONObject.getDouble("amountdueinbase10") + jSONObject.getDouble("amountdueinbase11")), companyid) + "");
                        statementOfReportsSubReport.setAmountDue5(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("totalinbase"), companyid) + "");
                    } else {
                        statementOfReportsSubReport.setAmountDueCurrent(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase1"), companyid) + ""); //set current amount
                        statementOfReportsSubReport.setAmountDue1(authHandler.formattedAmount(jSONObject.getDouble("amountdueinbase2"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue2(authHandler.formattedAmount(jSONObject.getDouble("amountdueinbase3"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue3(authHandler.formattedAmount(jSONObject.getDouble("amountdueinbase4"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue4(authHandler.formattedAmount((jSONObject.getDouble("amountdueinbase5") + jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.getDouble("amountdueinbase9") + jSONObject.getDouble("amountdueinbase10") + jSONObject.getDouble("amountdueinbase11")), companyid) + "");
                        statementOfReportsSubReport.setAmountDue5(authHandler.formattedAmount(jSONObject.getDouble("totalinbase"), companyid) + "");
                    }
                }
                amountDueMap.put(invoiceCustomerId, amountDueList);
                statementOfReportsSubReport.setAmountCurrHeader(Constants.CURRENT);
                if(dateFilter == Constants.agedDueDate0to30Filter || dateFilter == Constants.agedInvoiceDate0to30Filter){
                    statementOfReportsSubReport.setAmount1Header("0-" + duration + " days");
                } else {
                    statementOfReportsSubReport.setAmount1Header("1-" + duration + " days");
                }
                statementOfReportsSubReport.setAmount2Header(duration + 1 + "-" + (2 * duration) + " days");
                statementOfReportsSubReport.setAmount3Header((2 * duration) + 1 + "-" + (3 * duration) + " days");
                statementOfReportsSubReport.setAmount4Header("Over " + (3 * duration) + " days");
                if (templateFlag == Constants.lsh_templateflag) {
                    statementOfReportsSubReport.setCurrency(baseCurrency.getSymbol() != null ? customBaseCurrSymbol : customBaseCurrCode);
                } else if (templateFlag == Constants.BuildMate_templateflag) {
                    statementOfReportsSubReport.setCurrency(baseCurrency.getName() != null ? baseCurrency.getName() : customBaseCurrCode);
                } else {
                    statementOfReportsSubReport.setCurrency(accCommonTablesDAO.getCustomCurrencyCode(currency.getCurrencyCode(),companyid));
                }
                statementOfReportsSubReport.setAgeingCurrency(baseCurrency.getCurrencyCode());
                statementOfReportsSubReport.setBaseCurrency(baseCurrency.getCurrencyCode());
                if (i == customerLedgerList.size() - 1) {
                    statementOfReportsSubReport.setPageBreak(false);
                }
                
                
                List<SOABalanceOutstandingPojo> outstandingPojos = new ArrayList<SOABalanceOutstandingPojo>();
                if (!nextInvoiceCustomerId.equals(invoiceCustomerId)) {
                    statementOfReportsSubReport.setOutstandingFlag(true);
                    for (Map.Entry<String, HashMap> entry : currencyHashMap.entrySet()) {
//                        System.out.println(entry.getKey() + "/" + entry.getValue());
                        HashMap<String, Double> tempHashMap = entry.getValue();
                        for (Map.Entry<String, Double> entryInner : tempHashMap.entrySet()) {
                            if (currencyCodeHashMap.containsKey(entryInner.getKey())) {
                                SOABalanceOutstandingPojo sOABalanceOutstandingPojo = new SOABalanceOutstandingPojo();
                                sOABalanceOutstandingPojo.setBaseCurrency(currencyCodeHashMap.get(entryInner.getKey()));
                                sOABalanceOutstandingPojo.setBalance((templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(entryInner.getValue(), companyid), companyid) : authHandler.formattedAmount(authHandler.round(entryInner.getValue(), companyid), companyid));
                                outstandingPojos.add(sOABalanceOutstandingPojo);
                            }
                        }
                    }
                }

                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) cmpresult.getEntityList().get(0);
                Calendar cal0 = Calendar.getInstance();
                Date date = cal0.getTime();
                DateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");
                statementOfReportsSubReport.setHeaderdate(date != null ? df1.format(date) : "");
                if(templateFlag == Constants.F1RecreationLeasing_templateflag || templateFlag == Constants.F1Recreation_templateflag){
                     statementOfReportsSubReport.setHeaderdate(endDate != null ? df1.format(endDate) : "");
                }
                statementOfReportsSubReport.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                statementOfReportsSubReport.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                statementOfReportsSubReport.setBasecurrencysymbol(company.getCurrency() != null ? company.getCurrency().getName() : "");
                String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                statementOfReportsSubReport.setImagepath(fileName1);
                statementOfReportsSubReport.setsOABalanceOutstandingPojos(outstandingPojos);
                statementOfReportsSubReport.setAgeingTableData(agedDetaislMap.get(invoiceCustomerId)==null?(new ArrayList<AgeingTableForSOA>()):agedDetaislMap.get(invoiceCustomerId));

//                if (templateFlag == Constants.lsh_templateflag && statementOfReportsSubReport.getBalance().contains("0.00")) {
//                    statementOfReportsSubReport.setBalance((currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode()) + " " + authHandler.formattedAmount(0));
//                    statementOfReportsSubReport.setDebit("");
//                    statementOfReportsSubReport.setCredit("");
//                }
                String coregno = "";
                switch (templateFlag) {
                    case Constants.ChyeSengHuatConstruction_TemplateFlag:
                        coregno = "197500149N";
                        break;
                    case Constants.DandJ_TemplateFlag:
                        coregno = "200207088H";
                        break;
                    case Constants.CSHOrchard_TemplateFlag:
                        coregno = "201409774Z";
                        break;
                    case Constants.ChyeSengHuatHoldings_TemplateFlag:
                        coregno = "200706470H";
                        break;
                }
                statementOfReportsSubReport.setCompanyregno(coregno);

                if(i==customerLedgerList.size()-1 && statementOfReportsSubReport.getAgeingTableData().size() > 0) {
                    statementOfReportsSubReport.setLastRecord(true);
                } else if ((!statementOfReportsSubReportList.isEmpty()) && (!(previousCustomerId.equals(invoiceCustomerId)))) {
                    StatementOfAccountsSubReport lastStatementOfReportsSubReport = (StatementOfAccountsSubReport) statementOfReportsSubReportList.get(statementOfReportsSubReportList.size() - 1);
                    if (lastStatementOfReportsSubReport.getAgeingTableData().size() > 0) {
                        statementOfReportsSubReportList.remove(statementOfReportsSubReportList.size() - 1);
                        lastStatementOfReportsSubReport.setLastRecord(true);
                        statementOfReportsSubReportList.add(lastStatementOfReportsSubReport);
                    }
                }
                previousCustomerId = new String(invoiceCustomerId);
                
                statementOfReportsSubReportList.add(statementOfReportsSubReport);
                stmSubReportListMap.put(invoiceCustomerId, statementOfReportsSubReport);
            }
            statementOfAccountsMap.put("StatementOfAccountsSubReportData", new JRBeanCollectionDataSource(statementOfReportsSubReportList));

        } catch (ParseException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getVendorLedgerJasper : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getVendorLedgerJasper : " + ex.getMessage(), ex);
        }

        return statementOfAccountsMap;
    }
    
    @Override
    public List<Object> exportCreditNoteJasperReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        return exportCreditNoteJasperReport(request, response, recordIDs);
    }

    @Override
    public List<Object> exportCreditNoteJasperReport(HttpServletRequest request, HttpServletResponse response, String billIds) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
//        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recordIDs = billIds;
        String recArray[] = recordIDs.split(",");
        int countryLanguageId = Constants.OtherCountryLanguageId;  // 0 
                
        if (recArray.length != 0) {
            try {
                String companyid = sessionHandlerImpl.getCompanyid(request);

                KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                if (extraCompanyPreferences.isAmountInIndianWord()) {
                    countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
                }
            } catch (Exception ex) {
                Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (String s : recArray) {
                billid = s;
                Map<String, Object> creditNoteMap = new HashMap<String, Object>();
                String view = "creditNote";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                InputStream inputStream = null;
                CreditNote1 creditNote = new CreditNote1();
                ArrayList<CreditNote1> creditNoteList = new ArrayList<CreditNote1>();
                ArrayList<CreditNoteTable> creditNoteTableList = new ArrayList<CreditNoteTable>();
                
                try {
                    DateFormat formatter = authHandlerDAOObj.getUserDateFormatter(sessionHandlerImpl.getDateFormatID(request), sessionHandlerImpl.getTimeZoneDifference(request), true);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    int templateflag = Integer.parseInt(request.getParameter("templateflag"));
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    int moduleid = request.getParameter(Constants.moduleid)!=null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                    
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    DateFormat dateFormat = (DateFormat) requestParams.get("df");
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Credit_Note_ModuleId));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;

                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String companyname = company.getCompanyName() != null ? company.getCompanyName() : "";
                    creditNote.setName(companyname);
                    creditNote.setAdd(company.getAddress());
                    creditNote.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
                    creditNote.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
                    creditNote.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");

//            String[] cn1 = request.getParameterValues("bills");
                    int i = 0;
                    HashMap<String, Object> cnRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("creditNote.ID");
                    order_by.add("srno");
                    order_type.add("asc");
                    cnRequestParams.put("filter_names", filter_names);
                    cnRequestParams.put("filter_params", filter_params);
                    cnRequestParams.put("order_by", order_by);
                    cnRequestParams.put("order_type", order_type);
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), billid);
                    CreditNote cn = (CreditNote) result1.getEntityList().get(0);
                    boolean isOpeningBalanceTransaction = cn.isIsOpeningBalenceCN();
                    entry = cn.getJournalEntry();
                    List<String> dimensionList = new ArrayList<String>();
                    if (entry != null) {

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add( cn.getCompany().getCompanyID());
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add( cn.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(Constants.Acc_Credit_Note_ModuleId + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                                    Date dateFromDB=null;
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        dimensionList.add(fieldComboData.getValue() != null ? varEntry.getKey().split("_")[1] + "&nbsp;&nbsp;:" + fieldComboData.getValue() : "");
//                                       obj.put(varEntry.getKey(), fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                    }
                                } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                    DateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                                    try {
                                        dateFromDB = defaultDateFormat.parse(coldata);
                                        coldata = sdf.format(dateFromDB);
                                    } catch (Exception e) {
                                    }
                                    dimensionList.add(varEntry.getKey().split("_")[1] + "&nbsp;&nbsp;:" + coldata);
//                                  obj.put(varEntry.getKey(), df.format(Long.parseLong(coldata)));
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
//                                        obj.put(varEntry.getKey(), coldata);
                                        dimensionList.add(varEntry.getKey().split("_")[1] + "&nbsp;&nbsp;:" + coldata);
                                    }
                                }
                            }
                        }
                    }

                    String invno = cn.getCreditNoteNumber();
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
//                    String entryDate = formatter.format(cn.getJournalEntry() != null ? cn.getJournalEntry().getEntryDate() : cn.getCreationDate());////ERP-10970
                    String entryDate = formatter.format(cn.getCreationDate());
                    entryDate = formatter.format(formatter.parse(entryDate));//ERP-10970                    
//                    Date EntryDate = cn.getJournalEntry() != null ? cn.getJournalEntry().getEntryDate() : cn.getCreationDate();
                    Date EntryDate = cn.getCreationDate();
                    creditNote.setNumber(invno);
                    creditNote.setDate(entryDate);
                    String code = "", name = "", phone = "", address = "", fax = "", memo = "", dncurrency = "";

                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    if (cn.getCustomer() != null) {	//CN For Customer
                        code = (cn.getCustomer().getAcccode() != null ? cn.getCustomer().getAcccode() : "");
                        name = (cn.getCustomer().getName() != null ? cn.getCustomer().getName() : "");
                        phone = (cn.getCustomer().getContactNumber() != null ? cn.getCustomer().getContactNumber() : "");
                        addressParams.put("customerid", cn.getCustomer().getID());
                        address = (cn.getCustomer() != null ? accountingHandlerDAOobj.getCustomerAddress(addressParams).replaceAll("\n", "<br>") : cn.getCustomer().getBillingAddress() != null ? cn.getCustomer().getBillingAddress().replaceAll("\n", "<br>") : "");
                        fax = (cn.getCustomer().getFax() != null ? cn.getCustomer().getFax() : "");
                        memo = (cn.getMemo() != null ? cn.getMemo() : "");
                        dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                    }
                    if (cn.getVendor() != null) {   //CN For Vendor
                        code = (cn.getVendor().getAcccode() != null ? cn.getVendor().getAcccode() : "");
                        name = (cn.getVendor().getName() != null ? cn.getVendor().getName() : "");
                        phone = (cn.getVendor().getContactNumber() != null ? cn.getVendor().getContactNumber() : "");

                        //refer ticket ERP-10777
                        //address = (cn.getVendor() != null ? accVendorHandler.getVendorAddress(cn.getVendor(), true).replaceAll("\n", "<br>") : cn.getVendor().getAddress() != null ? cn.getVendor().getAddress().replaceAll("\n", "<br>") : "");
                        addressParams.put("vendorid", cn.getVendor().getID());
                        address = (cn.getVendor() != null ? accountingHandlerDAOobj.getVendorAddress(addressParams).replaceAll("\n", "<br>") : cn.getVendor().getAddress() != null ? cn.getVendor().getAddress().replaceAll("\n", "<br>") : "");

                        fax = (cn.getVendor().getFax() != null ? cn.getVendor().getFax() : "");
                        memo = (cn.getMemo() != null ? cn.getMemo() : "");
                        dncurrency = (cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                    }
                    creditNote.setCust_code(code);
                    creditNote.setCust_name(name);
                    creditNote.setCust_phone(phone);
                    creditNote.setCust_address(address);
                    creditNote.setCust_fax(fax);
                    creditNote.setCust_memo(memo);
                    creditNote.setCurrency(dncurrency);
                    if (!isOpeningBalanceTransaction) { //To show Particulars Detail in PDF when transaction is a non-opening type.

                        if (templateflag == Constants.vhqpost_tempalteflag) {
                            Set<CreditNoteTaxEntry> cnTaxEntryDetails = cn.getCnTaxEntryDetails();
                            if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {

                                for (CreditNoteTaxEntry noteTaxEntry : cnTaxEntryDetails) {
                                    CreditNoteTable creditNoteTable = new CreditNoteTable();
                                    LabelValue labelvalue = new LabelValue();
                                    i++;
                                    String accName = "";
                                    String accCode = "";
                                    String total1 = "";
                                    String accDesc = "";
                                    String prodCode = "";
                                    String uom = "";
                                    String taxCode = "";
                                    double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                                    double rate = 0;
                                    double discount = 0;
                                    double rowtaxamount = 0;
                                    double amount1 = 0;
                                    double amount_with_discount = 0;
                                    double amount_with_tax = 0;

                                    accCode = noteTaxEntry.getAccount().getAcccode() != null ? noteTaxEntry.getAccount().getAcccode() : "";
                                    accName = noteTaxEntry.getAccount().getName() != null ? noteTaxEntry.getAccount().getName() : "";
                                    accDesc = noteTaxEntry.getDescription() != null ? noteTaxEntry.getDescription() : "";
                                    rowtaxamount = noteTaxEntry.getTaxamount();
                                    amount1 = noteTaxEntry.getAmount();
                                    amount_with_discount = amount1 - discount;
                                    if (!noteTaxEntry.isDebitForMultiCNDN()) {
                                        rowtaxamount = rowtaxamount * -1;
                                        amount_with_discount = amount_with_discount * -1;
                                    }
                                    creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                                    creditNoteTable.setAccName(accName);
                                    creditNoteTable.setAccCode(accCode);
                                    creditNoteTable.setNarration(accDesc);
                                    creditNoteTableList.add(creditNoteTable);

                                    if (noteTaxEntry.getTax() != null) {
                                        double taxPercent = 0;
                                        HashMap<String, Object> requestParamstax = new HashMap<String, Object>();
                                        requestParamstax.put("transactiondate", EntryDate);
                                        requestParamstax.put("taxid", noteTaxEntry.getTax() != null ? noteTaxEntry.getTax().getID() : "");
                                        requestParamstax.put("companyid", companyid);
                                        KwlReturnObject resulttax = accTaxObj.getTax(requestParamstax);
                                        List taxList = resulttax.getEntityList();
                                        if (!taxList.isEmpty()) {
                                            Object[] taxObj = (Object[]) taxList.get(0);
                                            taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                                        }
                                        String taxDesc = noteTaxEntry.getTax().getTaxCode();//"Add " + taxPercent + "% GST";
                                        creditNoteTable = new CreditNoteTable();
                                        creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                                        creditNoteTable.setAccName(accName);
                                        creditNoteTable.setNarration(taxDesc);
                                        creditNoteTableList.add(creditNoteTable);
                                    }

                                }
                            } else {// in case of if tax is not included while creation of CN Value will be go fron jedetail table in case of Edit.
                                JournalEntry je = cn.getJournalEntry();
                                Set<JournalEntryDetail> jeDetails = je.getDetails();
                                for (JournalEntryDetail jed : jeDetails) {
                                    LabelValue labelvalue = new LabelValue();
                                    i++;
                                    String accName = "";
                                    String total1 = "";
                                    String accDesc = "";
                                    String accCode = "";
                                    String uom = "";
                                    String taxCode = "";
                                    double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                                    double rate = 0;
                                    double discount = 0;
                                    double rowtaxamount = 0;
                                    double amount1 = 0;
                                    double amount_with_discount = 0;
                                    double amount_with_tax = 0;
                                    JSONObject obj = new JSONObject();
                                    if (jed.isDebit()) {
                                        accCode = jed.getAccount().getAcccode()!=null?jed.getAccount().getAcccode():"";
                                        accName = jed.getAccount().getName()!=null?jed.getAccount().getName():"";
                                        accDesc = jed.getDescription()!=null?jed.getDescription():"";
                                        amount1 = jed.getAmount();
                                        amount_with_discount = amount1 - discount;
                                        amount_with_tax = amount_with_discount + rowtaxamount;
                                        CreditNoteTable creditNoteTable = new CreditNoteTable();
                                        creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                                        creditNoteTable.setAccName(accName);
                                        creditNoteTable.setAccCode(accCode);
                                        creditNoteTable.setNarration(accDesc);
                                        creditNoteTableList.add(creditNoteTable);
                                    }


                                }
                            }
                        } else {///default template for CN` 
                            Set<CreditNoteTaxEntry> cnTaxEntryDetails = cn.getCnTaxEntryDetails();
                            if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {
                                for (CreditNoteTaxEntry noteTaxEntry : cnTaxEntryDetails) {
                                    CreditNoteTable creditNoteTable = new CreditNoteTable();

                                    String accName = "";
                                    String accCode = "";
                                    String accDesc = "";

                                    double discount = 0;
                                    double rowtaxamount = 0;
                                    double amount1 = 0;
                                    double amount_with_discount = 0;
                                    double amount_with_tax = 0;

                                    accCode = noteTaxEntry.getAccount().getAcccode() != null ? noteTaxEntry.getAccount().getAcccode() : "";
                                    accName = noteTaxEntry.getAccount().getName() != null ? noteTaxEntry.getAccount().getName() : "";
                                    accDesc = noteTaxEntry.getDescription() != null ? noteTaxEntry.getDescription() : "";
                                    rowtaxamount = noteTaxEntry.getTaxamount();
                                    amount1 = noteTaxEntry.getAmount();
                                    amount_with_discount = amount1 - discount;
                                    if (!noteTaxEntry.isDebitForMultiCNDN()) {
                                        rowtaxamount = rowtaxamount * -1;
                                        amount_with_discount = amount_with_discount * -1;
                                    }
                                    creditNoteTable.setAccCode(accCode);
                                    creditNoteTable.setAccName(accName);
                                    creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                                    creditNoteTable.setNarration(accDesc);
                                    creditNoteTable.setSrNo(noteTaxEntry.getSrNoForRow() * 2);//just for sorting
                                    creditNoteTableList.add(creditNoteTable);

                                    if (noteTaxEntry.getTax() != null) {

                                        String taxDesc = noteTaxEntry.getTax().getTaxCode();//"Add " + taxPercent + "% GST";
                                        creditNoteTable = new CreditNoteTable();

                                        creditNoteTable.setAccCode("");
                                        creditNoteTable.setAccName(taxDesc);
                                        creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                                        creditNoteTable.setNarration("");
                                        creditNoteTable.setSrNo(noteTaxEntry.getSrNoForRow() * 2 + 1);// just for sorting

                                        creditNoteTableList.add(creditNoteTable);
                                    }

                                }
                                Collections.sort(creditNoteTableList, new CreditNoteTable());
                            } else {
                                Set<JournalEntryDetail> entryset = cn.getJournalEntry().getDetails();
                                Iterator itr = entryset.iterator();
                                while (itr.hasNext()) {
                                    JournalEntryDetail jed = (JournalEntryDetail) itr.next();
                                    if (jed.isDebit()) {
                                        CreditNoteTable creditNoteTable = new CreditNoteTable();
                                        creditNoteTable.setAccCode(jed.getAccount().getAcccode() != null ? jed.getAccount().getAcccode() : "");
                                        creditNoteTable.setAccName(jed.getAccount().getName() != null ? jed.getAccount().getName() : "");
                                        creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(jed.getAmount(), companyid));
                                        creditNoteTable.setNarration(jed.getDescription() != null ? jed.getDescription() : "");
                            // if account code is null then it is the GST entry so replace Desc with  Account name i.e GST code 
                            if(templateflag == Constants.vhqpost_tempalteflag)
                            {
                             creditNoteTable.setNarration(jed.getAccount().getAcccode() != null ?jed.getDescription() != null ? jed.getDescription() : "":jed.getAccount().getName() != null ? jed.getAccount().getName() : "");
                            }
                                        creditNoteTableList.add(creditNoteTable);
                                    }
                                }
                            }
                        }
                    } else {    //To show Particulars as An Opening in PDF when transaction is an opening type.
                        CreditNoteTable creditNoteTable = new CreditNoteTable();
                        creditNoteTable.setAccName("This is an Opening Credit Note");
                        creditNoteTable.setNarration(cn.getNarration());
                        creditNoteTableList.add(creditNoteTable);
                    }
                    String totalDimension = "";
                    for (String dimesion : dimensionList) {
                        totalDimension += dimesion + "<br>";
                    }
                    creditNote.setClassDimension(totalDimension);
                    creditNote.setTotalamount(authHandler.formattedCommaSeparatedAmount(cn.getCnamount(), companyid));
                    KWLCurrency currency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), cn.getCurrency().getCurrencyID());
                    String netinword = EnglishNumberToWordsOjb.convert(authHandler.round(cn.getCnamount(), companyid), currency,countryLanguageId);
                    creditNote.setCurrencyinword(netinword + " only.");
                    creditNote.setCurrency_word(cn.getCurrency().getName().toString());
                    String  GstRegNo = (companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "")  ;                               
                    String UEM = (companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                    creditNote.setGstRegNo(GstRegNo);
                    creditNote.setUem(UEM);
                    creditNoteList.add(creditNote);
                    creditNoteMap.put("format", "pdf");
                    creditNoteMap.put("CreditNoteTable", new JRBeanCollectionDataSource(creditNoteTableList));
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    creditNoteMap.put("imagePath", fileName1);
                    if (templateflag == Constants.sms_templateflag) {
                        creditNoteMap.put("footerflag", true);
                    } else {
                        creditNoteMap.put("footerflag", false);  //Mayur B- To hide footer logo for SMS holding Company.
                    }
                    creditNoteMap.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
//            creditNoteMap.put("datasource", new JRBeanCollectionDataSource(creditNoteList));

                    if (templateflag == Constants.sms_templateflag) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/CreditNote.jrxml");
                    } else if (templateflag == Constants.vhqpost_tempalteflag) {
                        creditNoteMap.put("notetype", "CREDIT NOTE");
                        creditNoteMap.put("AccountCode", code);
                        creditNoteMap.put("UEN", UEM);
                        creditNoteMap.put("GSTRegNo", GstRegNo);
                        creditNoteMap.put("CNNumber", invno);
                        creditNoteMap.put("PersonName", name);
                        creditNoteMap.put("PersonAddress", address);
                        creditNoteMap.put("PersonPhone", phone);
                        creditNoteMap.put("PersonFax", fax);
                        creditNoteMap.put("NoteCurrency", dncurrency);
                        creditNoteMap.put("NoteTotalAmount", authHandler.formattedCommaSeparatedAmount(cn.getCnamount(), companyid));
                        creditNoteMap.put("CurrencyInWords", netinword + " only.");
                        creditNoteMap.put("CurrencyWord", cn.getCurrency().getName().toString());
                        creditNoteMap.put("ComapnyName", companyname);
                        creditNoteMap.put("ClassDimensions", totalDimension);
                        creditNoteMap.put("memo", memo);
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/VHQPostCreditNote.jrxml");
                    } else if (templateflag == Constants.lsh_templateflag) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LshCreditNoteOtherwize.jrxml");
                    } else if (templateflag == Constants.Diamond_Aviation_templateflag) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationDefaultCreditNote.jrxml");
                    } else {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/CreditNoteForAll.jrxml");
                    }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    InputStream inputStreamSubReport = null;
                    if (templateflag == Constants.vhqpost_tempalteflag) {
                        inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/VHQPostCreditDebitNoteSubreport.jrxml");
                    } else {
                        inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/CreditNoteSubReport.jrxml");
                    }
                    JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                    JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

                    creditNoteMap.put("CreditNoteSubReport", jasperReportSubReport);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(creditNoteList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, creditNoteMap, beanColDataSource);
                    list.add(jasperPrint);

                } catch (Exception ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }
    
    public Map<String, Object> getVendorLedgerTonyFiberGlass(JSONObject request, int templateFlag) throws ServiceException, SessionExpiredException, UnsupportedEncodingException {
        JSONObject jobj = new JSONObject();
        ArrayList<StatementOfAccountsSubReport> statementOfReportsSubReportList = new ArrayList<StatementOfAccountsSubReport>();
        HashMap<String, StatementOfAccountsSubReport> stmSubReportListMap = new HashMap<String, StatementOfAccountsSubReport>();
        Map<String, Object> statementOfAccountsMap = new HashMap<String, Object>();
        HashMap<String, ArrayList> amountDueMap = new HashMap<String, ArrayList>();
        try {

            JSONArray jArr = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            boolean invoiceAmountDueFilter = true;
            if (request.optString("invoiceAmountDueFilter") != null) {
                invoiceAmountDueFilter = Boolean.parseBoolean(request.optString("invoiceAmountDueFilter"));
            }
            int reportid = !StringUtil.isNullOrEmpty(request.optString("reportid")) ? Integer.parseInt(request.optString("reportid")) : -1;
            boolean isPostDatedCheque = false;
            if (request.optString("isPostDatedCheque") != null) {
                isPostDatedCheque = Boolean.parseBoolean(request.optString("isPostDatedCheque"));
            }
            boolean isSortedOnCreationDate = false;
            if (request.optString("isSortedOnCreationDate") != null) {
                isSortedOnCreationDate = Boolean.parseBoolean(request.optString("isSortedOnCreationDate"));
            }
            int dateFilter = 1;
            if (request.optString("datefilter") != null) {
                dateFilter = request.optInt("datefilter",1);
            }
            int templateType = request.optString("type") != null ? Integer.parseInt(request.optString("type")) : 0;
            Date startDate = authHandler.getDateOnlyFormat( ).parse(request.optString("stdate"));
            Date endDate = authHandler.getDateOnlyFormat( ).parse(request.optString("enddate"));
            Date asofDate = authHandler.getDateOnlyFormat( ).parse(request.optString("asofdate"));
            DateFormat df = authHandler.getDateOnlyFormat( );
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            //dateFormat.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getTimeZoneDifference(request)));
            
            Calendar cal= Calendar.getInstance();
            cal.setTime(startDate);
            cal.add(Calendar.DATE, -1);  // number of days to add
            Date st = cal.getTime();
            Calendar end= Calendar.getInstance();
            end.setTime(asofDate);
            end.add(Calendar.DATE, 1);  // number of days to add
            Date ed=end.getTime();
            
            String vendorIds = "";
            if (request.optString("vendorIds") != null) {
                vendorIds = request.optString("vendorIds") ;
            }
            String withoutinventory = request.optString("withoutinventory");
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(request);
            requestParams.put("vendorIds", vendorIds);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put("startDate", new Date(0));
            requestParams.put("endDate", endDate);
            requestParams.put("isPostDatedCheque", isPostDatedCheque);
            requestParams.put("isSortedOnCreationDate", isSortedOnCreationDate);
            String searchJson = request.optString(Constants.Acc_Search_Json, "");
            String filterConjuctionCriteria = request.optString(Constants.Filter_Criteria, "");
            if (!StringUtil.isNullOrEmpty(searchJson)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
            }
            if (!StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            }

            boolean isAdvanceSearch = false;
            String invoiceSearchJson = "";
            String receiptSearchJson = "";
            String cnSearchJson = "";
            String dnSearchJson = "";
            String makePaymentSearchJson = "";

            if (requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Filter_Criteria) != null) {
                if (requestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                searchJson = requestParams.get(Constants.Acc_Search_Json).toString();
                if (!StringUtil.isNullOrEmpty(searchJson)) {
                    isAdvanceSearch = true;
                    requestParams.put(Constants.Filter_Criteria, request.optString(Constants.Filter_Criteria));
                    HashMap<String, Object> reqPar1 = new HashMap<>();
                    reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                    reqPar1.put(Constants.Acc_Search_Json, searchJson);
                    reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    invoiceSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.remove(Constants.moduleid);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    receiptSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    dnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    cnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    makePaymentSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                }
            }
            requestParams.put("invoiceSearchJson", invoiceSearchJson);
            requestParams.put("receiptSearchJson", receiptSearchJson);
            requestParams.put("cnSearchJson", cnSearchJson);
            requestParams.put("dnSearchJson", dnSearchJson);
            requestParams.put("makePaymentSearchJson", makePaymentSearchJson);
            requestParams.put("isAdvanceSearch", isAdvanceSearch);
            
            KwlReturnObject customerLedger = accInvoiceDAOobj.getVendorLedgerReport(requestParams);
            List customerLedgerList = customerLedger.getEntityList();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(),request.optString(Constants.globalCurrencyKey));
            KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
            String companyid = request.optString(Constants.companyKey);
            double balanceAmtInBase = 0;
            double balanceAmount = 0;
            double totalAmountInVendorCurr = 0;
            String prevCustomer = "";
            String curDateString = "";
            Date curDate = null;
            boolean booleanAged = false;//Added for aged payable/receivable
            int duration = Integer.parseInt(request.optString("interval"));
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            curDate = Calendar.getInstance().getTime();
            curDateString = df.format(curDate);
            booleanAged = true;
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;

            HashMap<String, JSONObject> hashMapJSON = new HashMap<String, JSONObject>();
            HashMap<String, Object> requestParamsAged =  getVendorParameterMap(request);

            requestParamsAged.put("isVendorCurrExport",true);
            
            JSONArray jSONArray = accGoodsReceiptServiceDAO.getVendorAgedPayableMerged(request, requestParamsAged);
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                hashMapJSON.put(jSONObject.getString("personid"), jSONObject);
            }
         
            String defValue = authHandler.getCompleteDFStringForAmount("0.", companyid);
            ArrayList<Double> amountDueList = new ArrayList<Double>();
            double currencyTotalAmount = 0.00;
            Map<String, HashMap> currencyHashMap = new HashMap<String, HashMap>();
            Map<String, String> currencyCodeHashMap = new HashMap<String, String>();
            Set<String> vendorSet = new HashSet();
            for (int i = 0; i < customerLedgerList.size(); i++) {
                Object[] tempCustomerLedger = (Object[]) customerLedgerList.get(i);
                String type = (String) tempCustomerLedger[0];
                String invoiceId = (String) tempCustomerLedger[1]; // if(type=='invoice') ==> invoice.id, if(type=='receipt') ==> receipt.id, if(type=='creditnote') ==> creditnote.id
                String invoiceNumber = (String) tempCustomerLedger[2]; // if(type=='invoice') ==> invoice.invoicenumber, if(type=='receipt') ==> receipt.receiptnumber, if(type=='creditnote') ==> creditnote.cnnumber
                String jeId = (String) tempCustomerLedger[3]; // journalentry.id
                String memo = StringUtil.isNullOrEmpty((String) tempCustomerLedger[4]) ? "" : (String) tempCustomerLedger[4]; // if(type=='invoice') ==> invoice.memo, if(type=='receipt') ==> receipt.memo, if(type=='creditnote') ==> creditnote.memo
                String currencyid = StringUtil.isNullOrEmpty((String) tempCustomerLedger[5]) ? request.optString(Constants.globalCurrencyKey) : (String) tempCustomerLedger[5]; // if(type=='invoice') ==> invoice.currency, if(type=='receipt') ==> receipt.currency, if(type=='creditnote') ==> creditnote.currency
                double amount = (Double) tempCustomerLedger[6]; // if(type=='invoice') ==> jedetail.amount, if(type=='receipt') ==> receiptdetails.amount, if(type=='creditnote') ==> jedetail.amount
                String jeEntryNumber = (String) tempCustomerLedger[7];
                Date jeEntryDate = (Date) tempCustomerLedger[8];
                double invoiceOriginalAmount = amount;
                String jobCode = "";// custome field
//                Calendar cal = Calendar.getInstance();// to solve datedifference in ui and pdf
//                cal.set(1900 + jeEntryDate.getYear(), jeEntryDate.getMonth(), jeEntryDate.getDate());
//                cal.add(Calendar.DAY_OF_MONTH, 1);
//                jeEntryDate = cal.getTime();
                String jeEntryDate1 = authHandler.getDateOnlyFormat( ).format(jeEntryDate);
                double jeEntryExternalCurrencyRate = (Double) tempCustomerLedger[9];
                String invoiceCustomerId = (String) tempCustomerLedger[10];
                KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), invoiceCustomerId);
                Vendor ven = (Vendor) custresult.getEntityList().get(0);
                String invoiceCustomerCode = ven.getAcccode();
                String invoiceCustomerTerms = ven.getDebitTerm() == null ? "" : ven.getDebitTerm().getTermdays() + " Days";
                //String invoiceCustomerAttn = ven.getVendorAddresses() == null ? "" : ven.getVendorAddresses().getBillingContactPerson1() == null ? "" : ven.getVendorAddresses().getBillingContactPerson1();
 
                //refer ticket ERP-10777
                //String invoiceCustomerAdd = templateFlag == Constants.HCIS_templateflag ? accVendorHandler.getVendorAddressForSenwanTec(ven, true) : accVendorHandler.getVendorAddress(ven, true);
                //params to send to get billing address
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put("companyid", companyid);
                addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                addressParams.put("isBillingAddress", true);    //true to get billing address
                addressParams.put("vendorid", ven.getID());
                addressParams.put("templateFlag", templateFlag);                
                String invoiceCustomerAdd =  (templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.Guan_Chong_templateflag || templateFlag == Constants.Guan_ChongBF_templateflag)?accountingHandlerDAOobj.getVendorAddressForSenwanTec(addressParams) : accountingHandlerDAOobj.getVendorAddress(addressParams);

                VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                String invoiceCustomerAttn = vendorAddressDetails == null ? "":(StringUtil.isNullOrEmpty(vendorAddressDetails.getContactPerson()) ? "":vendorAddressDetails.getContactPerson());
                        
                String invoiceCustomerName = (String) tempCustomerLedger[11];
                String withoutInventaryFlag = (String) tempCustomerLedger[13];
                double cndnAmountDue = (Double) tempCustomerLedger[14];
                String custCurrencyId = ven.getCurrency() != null ? ven.getCurrency().getCurrencyID() : "";
                String baseCurrencyId = baseCurrency.getCurrencyID();
                KWLCurrency Vencurrency = ven.getCurrency();
                String vendorCurrencySymbol = Vencurrency.getSymbol() != null ? Vencurrency.getSymbol() : Vencurrency.getCurrencyCode();
                vendorCurrencySymbol = Vencurrency.getSymbol() != null ? accCommonTablesDAO.getCustomCurrencySymbol(vendorCurrencySymbol, companyid) : accCommonTablesDAO.getCustomCurrencyCode(vendorCurrencySymbol, companyid);
                String curr = Vencurrency.getSymbol() != null ? accCommonTablesDAO.getCustomCurrencySymbol(Vencurrency.getSymbol(),companyid) : accCommonTablesDAO.getCustomCurrencyCode(Vencurrency.getCurrencyCode(),companyid);
                int openingtransactionFlag = Integer.parseInt(tempCustomerLedger[16].toString());
                String VendorID = tempCustomerLedger[19].toString();
                String VendorAccountID = "";
                Vendor vendor = null;
                if(!StringUtil.isNullOrEmpty(VendorID)){
                    KwlReturnObject kwlVendor = accountingHandlerDAOobj.getObject(Vendor.class.getName(), VendorID);
                    vendor = (Vendor) kwlVendor.getEntityList().get(0);
                    VendorAccountID = vendor.getAccount().getID();
                }
                boolean isOpeningBalanceTransaction = false;
                if (openingtransactionFlag == 1) {
                    isOpeningBalanceTransaction = true;
                }
                HashMap<String, Object> reqMap = new HashMap();
                reqMap.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                reqMap.put(Constants.globalCurrencyKey, requestParams.get(Constants.globalCurrencyKey));
                reqMap.put(Constants.df, requestParams.get(Constants.df));
                reqMap.put(Constants.userdf, requestParams.get(Constants.userdf));
                reqMap.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
                reqMap.put("startDate", startDate);
                reqMap.put("asofDate", asofDate);
                reqMap.put("isOpeningBalanceTransaction", isOpeningBalanceTransaction);
                reqMap.put("transactionAmount", amount);
                reqMap.put("invoiceId", invoiceId);
                reqMap.put("type", type);

                amount = accReportsService.getAmountOfTransactionForVendorSOA(reqMap);


                boolean isConversionRateFromCurrencyToBase = false;
                int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempCustomerLedger[17].toString());
                if (conversionRateFromCurrencyToBaseFlag == 1) {
                    isConversionRateFromCurrencyToBase = true;
                }


                KWLCurrency currency = null;
                if (!StringUtil.isNullOrEmpty(currencyid)) {
                    KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                    currency = (KWLCurrency) curresult1.getEntityList().get(0);
                }

                if (!prevCustomer.equals(invoiceCustomerId)) {
                    currencyHashMap.clear();
                    currencyCodeHashMap.clear();
                    prevCustomer = invoiceCustomerId;
                    balanceAmtInBase = 0;
                    balanceAmount = 0;
                    totalAmountInVendorCurr = 0;                  
                    HashMap<String, Double> currncyAmount = new HashMap<String, Double>();
                    currncyAmount.put(currency.getCurrencyID(), 0.00);
                    currencyHashMap.put(invoiceCustomerId, currncyAmount);
                    currencyTotalAmount = 0.00;
                }
                
                if (vendorSet.add(invoiceCustomerId)) {
                    HashMap<String, Object> reqMap0 = AccountingManager.getGlobalParams(request);
                    reqMap0.put("invoiceAmountDueFilter", invoiceAmountDueFilter);
                    reqMap0.put("startDate", startDate);
                    reqMap0.put("asofDate", asofDate);
                    reqMap0.put("invoiceVendorId", invoiceCustomerId);
                    reqMap0.put("isVendorCurrExport",true);
                    reqMap0.put("vendorCurrId",custCurrencyId);
                    reqMap0.put("VendorAccountID", VendorAccountID);
                    JSONObject opnJSON = accReportsService.calculateVendorAccuredBalance(customerLedgerList, reqMap0);
                    StatementOfAccountsSubReport statementOfReportsSubReport = new StatementOfAccountsSubReport();
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(baseCurrency.getCurrencyID()) ? tempHashMap.get(baseCurrency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + opnJSON.getDouble("balanceAmountInBase");
                    totalAmountInVendorCurr = opnJSON.getDouble("balanceAmountInBase");
                    tempHashMap.put(baseCurrency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
//                    double custCurrToBaseExchRate = 1 / accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, custCurrencyId, jeEntryDate);
//                    if (accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, custCurrencyId, jeEntryDate) == 0.0) {
//                        custCurrToBaseExchRate = jeEntryExternalCurrencyRate;
//                    }
//                    if (baseCurrencyId.equals(custCurrencyId)) {
//                        custCurrToBaseExchRate = 1;
//                    }
//                    KwlReturnObject CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, opnJSON.getDouble("balanceAmountInBase"), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                    double currencyTotalAmountinVenCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
                    statementOfReportsSubReport.setBalance((totalAmountInVendorCurr != 0) ? totalAmountInVendorCurr < 0 ? ("(" + vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInVendorCurr * -1), companyid) + ")") : (vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInVendorCurr, companyid)) : (vendorCurrencySymbol + " " + authHandler.formattedAmount(0, companyid)));
//                    
//                    totalAmountInVendorCurr = currencyTotalAmountinVenCurr;
//                    
                    statementOfReportsSubReport.setGstRegNo("");
//                    statementOfReportsSubReport.setDate(templateType == 1 ? (endDate != null ? df.format(endDate) : "") : (curDate != null ? df.format(curDate) : ""));
                    statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                    statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);
                    statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                    statementOfReportsSubReport.setTerms(invoiceCustomerTerms);
                    statementOfReportsSubReport.setAttn(invoiceCustomerAttn);
                    statementOfReportsSubReport.setAmountDue1(defValue);
                    statementOfReportsSubReport.setAmountDue2(defValue);
                    statementOfReportsSubReport.setAmountDue3(defValue);
                    statementOfReportsSubReport.setAmountDue4(defValue);
                    statementOfReportsSubReport.setAmountDue5(defValue);
                    if(dateFilter == Constants.agedDueDate0to30Filter || dateFilter == Constants.agedInvoiceDate0to30Filter){
                        statementOfReportsSubReport.setAmount1Header("0-" + duration + " days");
                    } else {
                        statementOfReportsSubReport.setAmount1Header("1-" + duration + " days");
                    }
                    statementOfReportsSubReport.setAmount2Header(duration + 1 + "-" + (2 * duration) + " days");
                    statementOfReportsSubReport.setAmount3Header((2 * duration) + 1 + "-" + (3 * duration) + " days");
                    statementOfReportsSubReport.setAmount4Header("Over " + (3 * duration) + " days");
                    statementOfReportsSubReport.setCompanyregno("");
                    statementOfReportsSubReport.setTransactionId("Accrued Balance");
                    if (hashMapJSON.containsKey(invoiceCustomerId)) {
                        JSONObject jSONObject = hashMapJSON.get(invoiceCustomerId);

                        double amountdue1CustCurr = 0, amountdue2CustCurr = 0, amountdue3CustCurr = 0, amountdue4CustCurr = 0, amountdue5CustCurr = 0;
                        double totalinCustCurr = 0;

                        amountdue1CustCurr = jSONObject.getDouble("amountdueinbase1");
                        amountdue1CustCurr = authHandler.round(amountdue1CustCurr, companyid);

                        amountdue2CustCurr = jSONObject.getDouble("amountdueinbase2");
                        amountdue2CustCurr = authHandler.round(amountdue2CustCurr, companyid);

                        amountdue3CustCurr = jSONObject.getDouble("amountdueinbase3");
                        amountdue3CustCurr = authHandler.round(amountdue3CustCurr, companyid);
                        
                        amountdue4CustCurr = jSONObject.getDouble("amountdueinbase4");
                        amountdue4CustCurr = authHandler.round(amountdue4CustCurr, companyid);

                        amountdue5CustCurr = (jSONObject.getDouble("amountdueinbase5") + jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.optDouble("accruedbalanceinbase", 0.0));
                        amountdue5CustCurr = authHandler.round(amountdue5CustCurr, companyid);

                        statementOfReportsSubReport.setAmountDueCurrent(amountdue1CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue1CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue1CustCurr, companyid) + "");
                        statementOfReportsSubReport.setAmountDue1(amountdue2CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue2CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue2CustCurr, companyid) + "");
                        statementOfReportsSubReport.setAmountDue2(amountdue3CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue3CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue3CustCurr, companyid) + "");
                        statementOfReportsSubReport.setAmountDue3(amountdue4CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue4CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue4CustCurr, companyid) + "");
                        statementOfReportsSubReport.setAmountDue4(amountdue5CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue5CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue5CustCurr, companyid) + "");
                      
                        amountDueMap.put(invoiceCustomerId, amountDueList);
                        totalinCustCurr = jSONObject.getDouble("totalinbase");
                        totalinCustCurr = authHandler.round(totalinCustCurr, companyid);
                        statementOfReportsSubReport.setAmountDue5(totalinCustCurr < 0 ? ("(" + curr + " " + authHandler.formattedCommaSeparatedAmount((totalinCustCurr * -1), companyid) + ")") : curr + " " + authHandler.formattedCommaSeparatedAmount(totalinCustCurr, companyid));
                    }
//                    statementOfReportsSubReport.setAgeingTableData(agedDetaislMap.get(invoiceCustomerId) == null ? (new ArrayList<AgeingTableForSOA>()) : agedDetaislMap.get(invoiceCustomerId));
                    statementOfReportsSubReportList.add(statementOfReportsSubReport);
                }
                if (Math.abs(amount) <= 0 || accReportsService.isPeriodWiseOpeningTransaction(jeEntryDate, startDate)) { //if amount is zero then no need to show data in SOA Report so continue with next record
                    prevCustomer = new String(invoiceCustomerId);
                    continue;
                }
                
                if (!currencyCodeHashMap.containsKey(currency.getCurrencyID())) {
                    currencyCodeHashMap.put(currency.getCurrencyID(), currency.getCurrencyCode());
                }
                String vendorCurr = Vencurrency.getSymbol() != null ? Vencurrency.getSymbol() : Vencurrency.getCurrencyCode();
                StatementOfAccountsSubReport statementOfReportsSubReport = new StatementOfAccountsSubReport();
                statementOfReportsSubReport.setAmountDue1(defValue); //need to set default bcoz when value is 0 then default value printed as 0.00 or 0.000
                statementOfReportsSubReport.setAmountDue2(defValue);
                statementOfReportsSubReport.setAmountDue3(defValue);
                statementOfReportsSubReport.setAmountDue4(defValue);
                statementOfReportsSubReport.setAmountDue5(vendorCurr+" "+defValue);
                statementOfReportsSubReport.setBalance(defValue);
                Invoice invoice = null;
                if (!StringUtil.isNullOrEmpty(invoiceId)) {
                    KwlReturnObject invoiceList = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceId);
                    invoice = (Invoice) invoiceList.getEntityList().get(0);
                }
                jobjTemp = new JSONObject();
                Object[] tempNextCustomerLedger = null;
                if (i != customerLedgerList.size() - 1) {
                    tempNextCustomerLedger = (Object[]) customerLedgerList.get(i + 1);
                }
                String nextInvoiceCustomerId = tempNextCustomerLedger != null ? (String) tempNextCustomerLedger[10] : "";
                String duedate = "";

                if (type.equalsIgnoreCase("Vendor Invoice") || type.equalsIgnoreCase("Purchase Invoice")) {
                    KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(GoodsReceipt.class.getName(), invoiceId);
                    GoodsReceipt inv = (GoodsReceipt) cap.getEntityList().get(0);
                    duedate = inv.getDueDate() != null ? " Due " + dateFormat.format(inv.getDueDate()) + "," : "";
                        JournalEntryDetail d = null;
                        if (inv.isIsOpeningBalenceInvoice() && !inv.isNormalInvoice()) {
                            invoiceOriginalAmount = inv.getOriginalOpeningBalanceAmount();
                        } else {
                             d = inv.getVendorEntry();
                            invoiceOriginalAmount = d.getAmount();
                }
                 //------------------------Custom fields for invoice----------------
                    if (inv.getJournalEntry() != null && templateFlag == Constants.FastenEnterprises_templateflag || templateFlag == Constants.FastenHardwareEngineering_templateflag) {
                        int moduleid = Constants.Acc_Vendor_Invoice_ModuleId;
                        HashMap<String, Object> fieldrequestParams = new HashMap();
                        HashMap<String, String> customFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                        HashMap<String, Object> fieldInLinerequestParams = new HashMap();
                        HashMap<String, String> customInLineFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customInLineDateFieldMap = new HashMap<String, String>();
                        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 1));
                        fieldInLinerequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                        fieldInLinerequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 1));
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                        HashMap<String, String> replaceFieldInLineMap = new HashMap<String, String>();
                        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                        HashMap<String, Integer> FieldInLineMap = accAccountDAOobj.getFieldParamsCustomMap(fieldInLinerequestParams, replaceFieldInLineMap, customInLineFieldMap, customInLineDateFieldMap);

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(companyid);
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(inv.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(moduleid + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        if (fieldComboData.getValue() != null && (varEntry.getKey().split("_")[1]).equals("Job Code")) {
                                            jobCode = fieldComboData.getValue();
                                        }
                                    }
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Job Code")) {
                                            jobCode = coldata;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                statementOfReportsSubReport.setOrderNo(jobCode); // set as Job code ref ERP-11331
                statementOfReportsSubReport.setTransactionId(templateType == 1 ? invoiceNumber + "," + duedate + " Orig Amount " + (currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode()) + " " + authHandler.formattedCommaSeparatedAmount(invoiceOriginalAmount, companyid) : templateFlag == Constants.HCIS_templateflag ? (type + " " + invoiceNumber) : invoiceNumber);
                statementOfReportsSubReport.setJeId(templateFlag == Constants.BuildMate_templateflag ? "" : jeEntryNumber);
                statementOfReportsSubReport.setDate(dateFormat.format(jeEntryDate));

                KwlReturnObject bAmt = null;
                KwlReturnObject Custamount = null;//amount in customer currency
                KwlReturnObject baseCurrencyTotalAmount = null;//currencyTotalAmount in customer currency
                KwlReturnObject CustCurrencyTotalAmount = null;//currencyTotalAmount in customer currency
                if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                }
                double currencyTotalAmountInBase = 0;
                double currencyTotalAmountinVenCurr = 0;
                double amountinVenCurr = 0;
                double amountinbase = (Double) bAmt.getEntityList().get(0);
                amountinbase = authHandler.round(amountinbase, companyid);
                
                double tot_amountinbase = 0;
                List<JournalEntryDetail> listJEDetail = new ArrayList<>();
                if(reportid==Constants.SOA_VENDOR_ACCOUNT_STATEMENT_REPORTID && invoiceAmountDueFilter){
                    Set<String> vendorAccountsSet = new HashSet<>();
                    vendorAccountsSet.add(VendorAccountID);

                    if(type.equalsIgnoreCase("Payment Made")){
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), invoiceId);
                        Payment payment = (Payment) objItr.getEntityList().get(0);

                        Set<LinkDetailPayment> linkDetailPayment = payment.getLinkDetailPayments();
                        for(LinkDetailPayment linkdetailpayment : linkDetailPayment){
                            if(!vendorAccountsSet.contains(linkdetailpayment.getGoodsReceipt().getAccount().getID())){
                                vendorAccountsSet.add(linkdetailpayment.getGoodsReceipt().getAccount().getID());
                            }
                        }

                        Set<CreditNotePaymentDetails> creditNotePaymentDetails = payment.getCreditNotePaymentDetails();
                        for(CreditNotePaymentDetails creditnotepaymentdetails : creditNotePaymentDetails){
                            if(!vendorAccountsSet.contains(creditnotepaymentdetails.getCreditnote().getAccount().getID())){
                                vendorAccountsSet.add(creditnotepaymentdetails.getCreditnote().getAccount().getID());
                            }
                        }

                        KwlReturnObject kwlJeDetails = accJournalEntryobj.getJournalEntryDetail(jeId, companyid);
                        List listJeDetails = kwlJeDetails.getEntityList();
                        if(listJeDetails!=null){
                            for (int j = 0; j < listJeDetails.size(); j++) {
                                JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listJeDetails.get(j);
//                                    if(journalEntryDetail.getAccount().getID().equals(VendorAccountID)){
                                if(vendorAccountsSet.contains(journalEntryDetail.getAccount().getID())){
                                    tot_amountinbase += journalEntryDetail.getAmountinbase();
                                }
                            }
                        }

                        for(LinkDetailPayment linkdetailpayment : linkDetailPayment){
                            if(!StringUtil.isNullOrEmpty(linkdetailpayment.getLinkedGainLossJE())){
                                KwlReturnObject kwlLinkedJeDetails = accJournalEntryobj.getJournalEntryDetail(linkdetailpayment.getLinkedGainLossJE(), companyid);
                                List listLinkedJeDetails = kwlLinkedJeDetails.getEntityList();
                                if(listLinkedJeDetails!=null){
                                    for (int j = 0; j < listLinkedJeDetails.size(); j++) {
                                        JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listLinkedJeDetails.get(j);
//                                            if(!journalEntryDetail.getAccount().getID().equals(vendor.getAccount().getID())){
                                        if(!vendorAccountsSet.contains(journalEntryDetail.getAccount().getID()) && 
                                                (journalEntryDetail.getJournalEntry().getEntryDate().after(st) && journalEntryDetail.getJournalEntry().getEntryDate().before(ed))){
                                            listJEDetail.add(journalEntryDetail);
                                        }
                                    }
                                }
                            }
                        }

                        Set<LinkDetailPaymentToCreditNote> linkDetailPaymentToCreditNote = payment.getLinkDetailPaymentToCreditNote();
                        for(LinkDetailPaymentToCreditNote linkdetailpaymenttocreditnote : linkDetailPaymentToCreditNote){
                            if(!StringUtil.isNullOrEmpty(linkdetailpaymenttocreditnote.getLinkedGainLossJE())){
                                KwlReturnObject kwlLinkedJeDetails = accJournalEntryobj.getJournalEntryDetail(linkdetailpaymenttocreditnote.getLinkedGainLossJE(), companyid);
                                List listLinkedJeDetails = kwlLinkedJeDetails.getEntityList();
                                if(listLinkedJeDetails!=null){
                                    for (int j = 0; j < listLinkedJeDetails.size(); j++) {
                                        JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listLinkedJeDetails.get(j);
//                                            if(!journalEntryDetail.getAccount().getID().equals(vendor.getAccount().getID())){
                                        if(!vendorAccountsSet.contains(journalEntryDetail.getAccount().getID()) && 
                                                (journalEntryDetail.getJournalEntry().getEntryDate().after(st) && journalEntryDetail.getJournalEntry().getEntryDate().before(ed))){
                                            listJEDetail.add(journalEntryDetail);
                                        }
                                    }
                                }
                            }
                        }

                        if (tot_amountinbase != 0 && tot_amountinbase != amountinbase) {
                            amountinbase = tot_amountinbase;

                            if(payment.getCurrency().getCurrencyID().equals(baseCurrency.getCurrencyID())){
                                amount=amountinbase;
                            }
                        }
                    } if(type.equalsIgnoreCase("Debit Note")){
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), invoiceId);
                        DebitNote debitNote = (DebitNote) objItr.getEntityList().get(0);

                        Set<DebitNoteDetail> debitNoteDetail = debitNote.getRows();
                        for(DebitNoteDetail debitnotedetail : debitNoteDetail){
                            if(!vendorAccountsSet.contains(debitnotedetail.getDebitNote().getAccount().getID())){
                                vendorAccountsSet.add(debitnotedetail.getDebitNote().getAccount().getID());
                            }
                        }

                        KwlReturnObject kwlJeDetails = accJournalEntryobj.getJournalEntryDetail(jeId, companyid);
                        List listJeDetails = kwlJeDetails.getEntityList();
                        if(listJeDetails!=null){
                            for (int j = 0; j < listJeDetails.size(); j++) {
                                JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listJeDetails.get(j);
                                if(vendorAccountsSet.contains(journalEntryDetail.getAccount().getID())){
                                    tot_amountinbase += journalEntryDetail.getAmountinbase();
                                }
                            }
                        }

                        for(DebitNoteDetail debitnotedetail : debitNoteDetail){
                            if(!StringUtil.isNullOrEmpty(debitnotedetail.getLinkedGainLossJE())){
                                KwlReturnObject kwlLinkedJeDetails = accJournalEntryobj.getJournalEntryDetail(debitnotedetail.getLinkedGainLossJE(), companyid);
                                List listLinkedJeDetails = kwlLinkedJeDetails.getEntityList();
                                if(listLinkedJeDetails!=null){
                                    for (int j = 0; j < listLinkedJeDetails.size(); j++) {
                                        JournalEntryDetail journalEntryDetail = (JournalEntryDetail) listLinkedJeDetails.get(j);
                                        if(!vendorAccountsSet.contains(journalEntryDetail.getAccount().getID()) && 
                                                (journalEntryDetail.getJournalEntry().getEntryDate().after(st) && journalEntryDetail.getJournalEntry().getEntryDate().before(ed))){
                                            listJEDetail.add(journalEntryDetail);
                                        }
                                    }
                                }
                            }
                        }

                        if (tot_amountinbase != 0 && tot_amountinbase != amountinbase) {
                            amountinbase = tot_amountinbase;

                            if(debitNote.getCurrency().getCurrencyID().equals(baseCurrency.getCurrencyID())){
                                amount=amountinbase;
                            }
                        }
                    }
                }

                double custCurrToBaseExchRate = 1 / accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, custCurrencyId, jeEntryDate);
                if (baseCurrencyId.equals(custCurrencyId)) {
                    custCurrToBaseExchRate = 1;
                } else if (custCurrencyId.equals(currencyid)) { // if VendorCurr and TransactionCurr is same then no need to take exchange rate from erd table. we can use transaction lavel exchange rate. 
                   custCurrToBaseExchRate = 1/jeEntryExternalCurrencyRate;
                }
                Custamount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountinbase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);


                amountinVenCurr = (Double) Custamount.getEntityList().get(0);
                amountinVenCurr = authHandler.round(amountinVenCurr, companyid);
                if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                    baseCurrencyTotalAmount = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, currencyTotalAmount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                } else {
                    baseCurrencyTotalAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, currencyTotalAmount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                }
                currencyTotalAmountInBase = (Double) bAmt.getEntityList().get(0);
                currencyTotalAmountInBase = authHandler.round(currencyTotalAmountInBase, companyid);

                CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, currencyTotalAmountInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);

                currencyTotalAmountinVenCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
                currencyTotalAmountinVenCurr = authHandler.round(currencyTotalAmountinVenCurr, companyid);

                if (type.equalsIgnoreCase("Cash Purchase")) {
                    jobjTemp.put("debitAmountInBase", "");
                    jobjTemp.put("creditAmountInBase", amountinbase);
                    jobjTemp.put("balanceAmountInBase", balanceAmtInBase);
                    jobjTemp.put("debitAmount", "");
                    jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                    jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    
//                    CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                    currencyTotalAmountinVenCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                    currencyTotalAmountinVenCurr = authHandler.round(currencyTotalAmountinVenCurr, companyid);
                    statementOfReportsSubReport.setDebit("");
                    statementOfReportsSubReport.setCredit("(" + ((amountinVenCurr != 0) ? (Vencurrency.getSymbol() != null ? Vencurrency.getSymbol() : currency.getCurrencyCode()) + " " + authHandler.formattedCommaSeparatedAmount(authHandler.round(amountinVenCurr, companyid), companyid) : "") + ")");
                    statementOfReportsSubReport.setBalance((totalAmountInVendorCurr != 0) ? totalAmountInVendorCurr < 0 ? ("(" + vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInVendorCurr * -1), companyid) + ")") : (vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInVendorCurr, companyid)) : (vendorCurrencySymbol + " " + authHandler.formattedAmount(0, companyid)));

                } else if (type.equalsIgnoreCase("Vendor Invoice") || type.equalsIgnoreCase("Purchase Invoice")) {

                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount - amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);

                    balanceAmtInBase = balanceAmtInBase - amountinbase;
                    jobjTemp.put("debitAmountInBase", "");
                    jobjTemp.put("creditAmountInBase", amountinbase);
                    jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

//                    CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                    currencyTotalAmountinVenCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                    currencyTotalAmountinVenCurr = authHandler.round(currencyTotalAmountinVenCurr, companyid);

                    totalAmountInVendorCurr = totalAmountInVendorCurr - amountinVenCurr;
                                        
                    balanceAmount = balanceAmount - amount;
                    jobjTemp.put("debitAmount", "");
                    jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                    jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    statementOfReportsSubReport.setDebit("");
                    statementOfReportsSubReport.setCredit("(" + ((amountinVenCurr != 0) ? vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(authHandler.round(amountinVenCurr, companyid), companyid) : "") + ")");
                    statementOfReportsSubReport.setBalance((totalAmountInVendorCurr != 0) ? totalAmountInVendorCurr < 0 ? ("(" + vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInVendorCurr * -1), companyid) + ")") : (vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInVendorCurr, companyid)) : (vendorCurrencySymbol + " " + authHandler.formattedAmount(0, companyid)));

                } else if (type.equalsIgnoreCase("Payment Received")) {
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount - amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase - amountinbase;

//                    CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                    currencyTotalAmountinVenCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                    currencyTotalAmountinVenCurr = authHandler.round(currencyTotalAmountinVenCurr, companyid);

                    totalAmountInVendorCurr = totalAmountInVendorCurr - amountinVenCurr;
                    
                    jobjTemp.put("debitAmountInBase", "");
                    jobjTemp.put("creditAmountInBase", amountinbase);
                    jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                    balanceAmount = balanceAmount - amount;
                    jobjTemp.put("debitAmount", "");
                    jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                    jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    statementOfReportsSubReport.setDebit("");
                    statementOfReportsSubReport.setCredit("(" + ((amount != 0) ? vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(authHandler.round(amountinVenCurr, companyid), companyid) : "") + ")");
                    statementOfReportsSubReport.setBalance((totalAmountInVendorCurr != 0) ? totalAmountInVendorCurr < 0 ? ("(" + vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInVendorCurr * -1), companyid) + ")") : (vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInVendorCurr, companyid)) : (vendorCurrencySymbol + " " + authHandler.formattedAmount(0, companyid)));

                } else if (type.equalsIgnoreCase("Credit Note")) {
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount - amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase - amountinbase;
                    jobjTemp.put("debitAmountInBase", "");
                    jobjTemp.put("creditAmountInBase", amountinbase);
                    jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

//                    CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                    currencyTotalAmountinVenCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                    currencyTotalAmountinVenCurr = authHandler.round(currencyTotalAmountinVenCurr, companyid);

                    totalAmountInVendorCurr = totalAmountInVendorCurr - amountinVenCurr;
                    
                    balanceAmount = balanceAmount - amount;
                    jobjTemp.put("debitAmount", "");
                    jobjTemp.put("creditAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                    jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    statementOfReportsSubReport.setDebit("");
                    statementOfReportsSubReport.setCredit("(" + ((amount != 0) ? vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(authHandler.round(amountinVenCurr, companyid), companyid) : "") + ")");
                    statementOfReportsSubReport.setBalance((totalAmountInVendorCurr != 0) ? totalAmountInVendorCurr < 0 ? ("(" + vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInVendorCurr * -1), companyid) + ")") : (vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInVendorCurr, companyid)) : (vendorCurrencySymbol + " " + authHandler.formattedAmount(0, companyid)));

                } else {  //if((type.equalsIgnoreCase("Payment Made")) || (type.equalsIgnoreCase("Debit Note")))
                    KwlReturnObject companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) companyResult.getEntityList().get(0);
                    if (company != null && company.getCountry() != null && Constants.indian_country_id == Integer.parseInt(company.getCountry().getID())) {
                        double tdsAmount = getTDSAmountInAdvancePayment(invoiceId);
                        if (tdsAmount != 0.0) {
                            amountinbase += tdsAmount;// +TDS Amount for Advance Payment
                            amount += tdsAmount;// +TDS Amount for Advance Payment
                            amountinVenCurr += tdsAmount;// +TDS Amount for Advance Payment
                        }
                    }
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase + amountinbase;

//                    CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                    currencyTotalAmountinVenCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                    currencyTotalAmountinVenCurr = authHandler.round(currencyTotalAmountinVenCurr, companyid);

                    totalAmountInVendorCurr = totalAmountInVendorCurr + amountinVenCurr;
                    
                    jobjTemp.put("debitAmountInBase", amountinbase);
                    jobjTemp.put("creditAmountInBase", "");
                    jobjTemp.put("balanceAmountInBase", balanceAmtInBase);

                    balanceAmount = balanceAmount + amount;
                    jobjTemp.put("debitAmount", (amount != 0) ? authHandler.round(amount, companyid) : "");
                    jobjTemp.put("creditAmount", "");
                    jobjTemp.put("balanceAmount", (balanceAmount != 0) ? authHandler.round(balanceAmount, companyid) : "");
                    statementOfReportsSubReport.setCredit(((amount != 0) ? vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(authHandler.round(amountinVenCurr, companyid), companyid) : ""));
                    statementOfReportsSubReport.setDebit("");
                    statementOfReportsSubReport.setBalance((totalAmountInVendorCurr != 0) ? totalAmountInVendorCurr < 0 ? ("(" + vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInVendorCurr * -1), companyid) + ")") : (vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInVendorCurr, companyid)) : (vendorCurrencySymbol + " " + authHandler.formattedAmount(0, companyid)));
                }
                statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                statementOfReportsSubReport.setBusinessPerson(Constants.VendorName);
                statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);
                statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                statementOfReportsSubReport.setTerms(invoiceCustomerTerms);
                statementOfReportsSubReport.setAttn(invoiceCustomerAttn);
                if (hashMapJSON.containsKey(invoiceCustomerId)) {
                    JSONObject jSONObject = hashMapJSON.get(invoiceCustomerId);

                    double amountdue1CustCurr = 0, amountdue2CustCurr = 0, amountdue3CustCurr = 0, amountdue4CustCurr = 0, amountdue5CustCurr = 0;
                    double totalinCustCurr = 0;
//                    KwlReturnObject amountdueincustCurrency = null;
//                    amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, jSONObject.getDouble("amountdueinbase1"), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                    amountdue1CustCurr = jSONObject.getDouble("amountdueinbase1");
                    amountdue1CustCurr = authHandler.round(amountdue1CustCurr, companyid);


//                    amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, jSONObject.getDouble("amountdueinbase2"), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                    amountdue2CustCurr = jSONObject.getDouble("amountdueinbase2");
                    amountdue2CustCurr = authHandler.round(amountdue2CustCurr, companyid);

//                    amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, jSONObject.getDouble("amountdueinbase3"), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                    amountdue3CustCurr = jSONObject.getDouble("amountdueinbase3");
                    amountdue3CustCurr = authHandler.round(amountdue3CustCurr, companyid);

//                    amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, jSONObject.getDouble("amountdueinbase4"), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                    amountdue4CustCurr = jSONObject.getDouble("amountdueinbase4");
                    amountdue4CustCurr = authHandler.round(amountdue4CustCurr, companyid);

//                    amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, (jSONObject.getDouble("amountdueinbase5") + jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.optDouble("accruedbalanceinbase",0.0)), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                    amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, (jSONObject.getDouble("amountdueinbase5") + jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.getDouble("accruedbalanceinbase")), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                    amountdue5CustCurr = (jSONObject.getDouble("amountdueinbase5") + jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.getDouble("amountdueinbase9") + jSONObject.getDouble("amountdueinbase10") + jSONObject.getDouble("amountdueinbase11"));
                    amountdue5CustCurr = authHandler.round(amountdue5CustCurr, companyid);

//                    amountdueincustCurrency = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, jSONObject.getDouble("totalinbase"), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                    totalinCustCurr = jSONObject.getDouble("totalinbase");
                    totalinCustCurr = authHandler.round(totalinCustCurr, companyid);

                    statementOfReportsSubReport.setAmountDueCurrent(amountdue1CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue1CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue1CustCurr, companyid) + "");
                    statementOfReportsSubReport.setAmountDue1(amountdue2CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue2CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue2CustCurr, companyid) + "");
                    statementOfReportsSubReport.setAmountDue2(amountdue3CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue3CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue3CustCurr, companyid) + "");
                    statementOfReportsSubReport.setAmountDue3(amountdue4CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue4CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue4CustCurr, companyid) + "");
                    statementOfReportsSubReport.setAmountDue4(amountdue5CustCurr < 0 ? ("(" + authHandler.formattedCommaSeparatedAmount((amountdue5CustCurr * -1), companyid) + ")") : authHandler.formattedCommaSeparatedAmount(amountdue5CustCurr, companyid) + "");
                    statementOfReportsSubReport.setAmountDue5(totalinCustCurr < 0 ? ("(" + curr + " " + authHandler.formattedCommaSeparatedAmount((totalinCustCurr * -1), companyid) + ")") : curr + " " + authHandler.formattedCommaSeparatedAmount(totalinCustCurr, companyid));
                }
                amountDueMap.put(invoiceCustomerId, amountDueList);
                if(dateFilter == Constants.agedDueDate0to30Filter || dateFilter == Constants.agedInvoiceDate0to30Filter){
                    statementOfReportsSubReport.setAmount1Header("0-" + duration + " days");
                } else {
                    statementOfReportsSubReport.setAmount1Header("1-" + duration + " days");
                }
                statementOfReportsSubReport.setAmount2Header(duration + 1 + "-" + (2 * duration) + " Days");
                statementOfReportsSubReport.setAmount3Header((2 * duration) + 1 + "-" + (3 * duration) + " Days");
                statementOfReportsSubReport.setAmount4Header("Over " + (3 * duration) + " Days");

                statementOfReportsSubReport.setCurrency(currency.getCurrencyCode());
                statementOfReportsSubReport.setAgeingCurrency(baseCurrency.getCurrencyCode());
                statementOfReportsSubReport.setBaseCurrency(baseCurrency.getCurrencyCode());
                if (i == customerLedgerList.size() - 1) {
                    statementOfReportsSubReport.setPageBreak(false);
                }
                List<SOABalanceOutstandingPojo> outstandingPojos = new ArrayList<SOABalanceOutstandingPojo>();
                if (!nextInvoiceCustomerId.equals(invoiceCustomerId)) {
                    statementOfReportsSubReport.setOutstandingFlag(true);
                    for (Map.Entry<String, HashMap> entry : currencyHashMap.entrySet()) {
//                        System.out.println(entry.getKey() + "/" + entry.getValue());
                        HashMap<String, Double> tempHashMap = entry.getValue();
                        for (Map.Entry<String, Double> entryInner : tempHashMap.entrySet()) {
                            SOABalanceOutstandingPojo sOABalanceOutstandingPojo = new SOABalanceOutstandingPojo();
                            sOABalanceOutstandingPojo.setBaseCurrency(currencyCodeHashMap.get(entryInner.getKey()));
                            sOABalanceOutstandingPojo.setBalance((templateFlag == Constants.HCIS_templateflag || templateFlag == Constants.BuildMate_templateflag) ? authHandler.formattedCommaSeparatedAmount(authHandler.round(entryInner.getValue(), companyid), companyid) : authHandler.formattedAmount(authHandler.round(entryInner.getValue(), companyid), companyid));
                            outstandingPojos.add(sOABalanceOutstandingPojo);
                        }
                    }
                }
                KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);

                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) cmpresult.getEntityList().get(0);
                Calendar cal0 = Calendar.getInstance();
                Date date = cal0.getTime();
                DateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");
                statementOfReportsSubReport.setHeaderdate(date != null ? df1.format(date) : "");
                statementOfReportsSubReport.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                statementOfReportsSubReport.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                statementOfReportsSubReport.setBasecurrencysymbol(company.getCurrency() != null ? company.getCurrency().getName() : "");
                String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                statementOfReportsSubReport.setImagepath(fileName1);
                statementOfReportsSubReport.setsOABalanceOutstandingPojos(outstandingPojos);

                   if(templateFlag == Constants.Guan_ChongBF_templateflag || templateFlag == Constants.Guan_Chong_templateflag){
                statementOfReportsSubReport.setCompanyEmail(vendorAddressDetails.getEmailID() != null ?vendorAddressDetails.getEmailID() : "");
                statementOfReportsSubReport.setCompanyFax(vendorAddressDetails.getFax() != null ?vendorAddressDetails.getFax() : "");
                statementOfReportsSubReport.setCompanyPhone(vendorAddressDetails.getPhone() != null ?vendorAddressDetails.getPhone() : "");
                } else{
                 statementOfReportsSubReport.setCompanyEmail(company.getEmailID() != null ? company.getEmailID() : "");
                statementOfReportsSubReport.setCompanyFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
                statementOfReportsSubReport.setCompanyPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
                statementOfReportsSubReport.setCustCurrency(vendorCurrencySymbol);
                }
                statementOfReportsSubReportList.add(statementOfReportsSubReport);
                stmSubReportListMap.put(invoiceCustomerId, statementOfReportsSubReport);
                
                
                if(reportid==Constants.SOA_VENDOR_ACCOUNT_STATEMENT_REPORTID){
                    //Add JEs with Foreign Gain/Loss posted separately.
                    for(JournalEntryDetail jeDetail : listJEDetail){
                        statementOfReportsSubReport = new StatementOfAccountsSubReport();
                        statementOfReportsSubReport.setAmountDue1(defValue); //need to set default bcoz when value is 0 then default value printed as 0.00 or 0.000
                        statementOfReportsSubReport.setAmountDue2(defValue);
                        statementOfReportsSubReport.setAmountDue3(defValue);
                        statementOfReportsSubReport.setAmountDue4(defValue);
                        statementOfReportsSubReport.setAmountDue5(vendorCurr+" "+defValue);
                        statementOfReportsSubReport.setBalance(defValue);

                        statementOfReportsSubReport.setOrderNo(jobCode); // set as Job code ref ERP-11331
                        statementOfReportsSubReport.setTransactionId(invoiceNumber + "(" + jeDetail.getAccount().getAccountName() + ")");
                        statementOfReportsSubReport.setJeId(templateFlag == Constants.BuildMate_templateflag ? "" : jeEntryNumber);
                        statementOfReportsSubReport.setDate(dateFormat.format(jeEntryDate));

                        Custamount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, jeDetail.getAmountinbase(), custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
                        amountinVenCurr = (Double) Custamount.getEntityList().get(0);
                        amountinVenCurr = authHandler.round(amountinVenCurr, companyid);
                        if(jeDetail.isDebit()){
                            balanceAmtInBase = balanceAmtInBase - jeDetail.getAmountinbase();
                            balanceAmount = balanceAmount - jeDetail.getAmount();

//                            CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                            currencyTotalAmountinVenCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                            currencyTotalAmountinVenCurr = authHandler.round(currencyTotalAmountinVenCurr, companyid);

                            totalAmountInVendorCurr = totalAmountInVendorCurr - amountinVenCurr;
                            
                            statementOfReportsSubReport.setCredit(((jeDetail.getAmount() != 0) ? vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(authHandler.round(amountinVenCurr, companyid), companyid) : ""));
                            statementOfReportsSubReport.setDebit("");
                            statementOfReportsSubReport.setBalance((totalAmountInVendorCurr != 0) ? totalAmountInVendorCurr < 0 ? ("(" + vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInVendorCurr * -1), companyid) + ")") : (vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInVendorCurr, companyid)) : (vendorCurrencySymbol + " " + authHandler.formattedAmount(0, companyid)));
                        }else{
                            balanceAmtInBase = balanceAmtInBase + jeDetail.getAmountinbase();
                            balanceAmount = balanceAmount + jeDetail.getAmount();

//                            CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, balanceAmtInBase, custCurrencyId, jeEntryDate, custCurrToBaseExchRate);
//                            currencyTotalAmountinVenCurr = (Double) CustCurrencyTotalAmount.getEntityList().get(0);
//                            currencyTotalAmountinVenCurr = authHandler.round(currencyTotalAmountinVenCurr, companyid);

                            totalAmountInVendorCurr = totalAmountInVendorCurr + amountinVenCurr;
                            
                            statementOfReportsSubReport.setCredit(((jeDetail.getAmount() != 0) ? vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(authHandler.round(amountinVenCurr, companyid), companyid) : ""));
                            statementOfReportsSubReport.setDebit("");
                            statementOfReportsSubReport.setBalance((totalAmountInVendorCurr != 0) ? totalAmountInVendorCurr < 0 ? ("(" + vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount((totalAmountInVendorCurr * -1), companyid) + ")") : (vendorCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(totalAmountInVendorCurr, companyid)) : (vendorCurrencySymbol + " " + authHandler.formattedAmount(0, companyid)));
                        }

                        statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                        statementOfReportsSubReport.setBusinessPerson(Constants.VendorName);
                        statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);
                        statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                        statementOfReportsSubReport.setTerms(invoiceCustomerTerms);
                        statementOfReportsSubReport.setAttn(invoiceCustomerAttn);

                        statementOfReportsSubReport.setCurrency(currency.getCurrencyCode());
                        statementOfReportsSubReport.setAgeingCurrency(baseCurrency.getCurrencyCode());
                        statementOfReportsSubReport.setBaseCurrency(baseCurrency.getCurrencyCode());
                        if (i == customerLedgerList.size() - 1) {
                            statementOfReportsSubReport.setPageBreak(false);
                        }

                        statementOfReportsSubReport.setHeaderdate(date != null ? df1.format(date) : "");
                        statementOfReportsSubReport.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        statementOfReportsSubReport.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                        statementOfReportsSubReport.setBasecurrencysymbol(company.getCurrency() != null ? company.getCurrency().getName() : "");
                        statementOfReportsSubReport.setImagepath(fileName1);
                        statementOfReportsSubReport.setsOABalanceOutstandingPojos(outstandingPojos);

                        if(templateFlag == Constants.Guan_ChongBF_templateflag || templateFlag == Constants.Guan_Chong_templateflag){
                            statementOfReportsSubReport.setCompanyEmail(vendorAddressDetails.getEmailID() != null ?vendorAddressDetails.getEmailID() : "");
                            statementOfReportsSubReport.setCompanyFax(vendorAddressDetails.getFax() != null ?vendorAddressDetails.getFax() : "");
                            statementOfReportsSubReport.setCompanyPhone(vendorAddressDetails.getPhone() != null ?vendorAddressDetails.getPhone() : "");
                        } else{
                            statementOfReportsSubReport.setCompanyEmail(company.getEmailID() != null ? company.getEmailID() : "");
                            statementOfReportsSubReport.setCompanyFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
                            statementOfReportsSubReport.setCompanyPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
                            statementOfReportsSubReport.setCustCurrency(vendorCurrencySymbol);
                        }

                        statementOfReportsSubReportList.add(statementOfReportsSubReport);
    //                    stmSubReportListMap.put(invoiceCustomerId, statementOfReportsSubReport);
                    }
                }
            }

            statementOfAccountsMap.put("StatementOfAccountsSubReportData", new JRBeanCollectionDataSource(statementOfReportsSubReportList));

        } catch (ParseException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getVendorLedgerJasper : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getVendorLedgerJasper : " + ex.getMessage(), ex);
        }

        return statementOfAccountsMap;
    }
    
    @Override
    public List<Object> exportDebitNoteJasperReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        return exportDebitNoteJasperReport(request, response, recordIDs);
    }
    public Double getTDSAmountInAdvancePayment(String docId) {
        double tdsAmount = 0.0;
        try {
            KwlReturnObject advDetailResult = accountingHandlerDAOobj.getAdvancePayDetails(docId);
            if (advDetailResult.getEntityList().size() > 0) {
                AdvanceDetail advDetail = (AdvanceDetail) advDetailResult.getEntityList().get(0);
                if (advDetail != null) {
                    tdsAmount = advDetail.getTdsamount();
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tdsAmount;
    }
    
    @Override
    public List<Object> exportDebitNoteJasperReport(HttpServletRequest request, HttpServletResponse response, String billIds) throws ServiceException, JSONException, SessionExpiredException, ParseException {

        List<Object> list = new ArrayList<Object>();
        String billid = "";
//        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recordIDs = billIds;
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            try {
                String companyid = sessionHandlerImpl.getCompanyid(request);
                int countryLanguageId = Constants.OtherCountryLanguageId; // 0
                KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                if (extraCompanyPreferences.isAmountInIndianWord()) {
                    countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
                }
                for (String s : recArray) {
                    billid = s;

                    Map<String, Object> debitNoteMap = new HashMap<String, Object>();
                    ArrayList<CreditNoteTable> creditNoteTableList = new ArrayList<CreditNoteTable>();
                    String view = "debitNote";
                    JasperPrint jasperPrint = null;
                    JasperReport jasperReport = null;
                    InputStream inputStream = null;
                    DebitNoteJasper debitnotejasper = new DebitNoteJasper();
                    ArrayList<DebitNoteJasper> debitNoteList = new ArrayList<DebitNoteJasper>();


                    int templateflag = Integer.parseInt(request.getParameter("templateflag"));
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    DateFormat dateFormat = (DateFormat) requestParams.get("df");
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String companyname = company.getCompanyName() != null ? company.getCompanyName() : "";
                    debitnotejasper.setName(companyname);
                    debitnotejasper.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
                    debitnotejasper.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
                    debitnotejasper.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
                    debitnotejasper.setAdd(company.getAddress() != null ? company.getAddress() : "");

//            String[] dn1 = request.getParameterValues("bills");
                    int i = 0;
                    HashMap<String, Object> dnRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("debitNote.ID");
                    order_by.add("srno");
                    order_type.add("asc");
                    dnRequestParams.put("filter_names", filter_names);
                    dnRequestParams.put("filter_params", filter_params);
                    dnRequestParams.put("order_by", order_by);
                    dnRequestParams.put("order_type", order_type);
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), billid);
                    DebitNote dn = (DebitNote) result1.getEntityList().get(0);
                    boolean isOpeningBalanceTransaction = dn.isIsOpeningBalenceDN();
                    entry = dn.getJournalEntry();
                    List<String> dimensionList = new ArrayList<String>();
                    if (entry != null) {

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> cnDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(dn.getCompany().getCompanyID());
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(dn.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(Constants.Acc_Debit_Note_ModuleId + "");
                        cnDetailRequestParams.put("filter_names", Detailfilter_names);
                        cnDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(cnDetailRequestParams);
                        DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                        Date dateFromDB=null;
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue() != null ? varEntry.getValue().toString() : "";
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        dimensionList.add(fieldComboData.getValue() != null ? varEntry.getKey().split("_")[1] + "&nbsp;&nbsp;:" + fieldComboData.getValue() : "");
//                                       obj.put(varEntry.getKey(), fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                    }
                                } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                    DateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                                    try {
                                        dateFromDB = defaultDateFormat.parse(coldata);
                                        coldata = sdf.format(dateFromDB);
                                    } catch (Exception e) {
                                    }
                                    dimensionList.add(varEntry.getKey().split("_")[1] + "&nbsp;&nbsp;:" + coldata);
//                                  obj.put(varEntry.getKey(), df.format(Long.parseLong(coldata)));
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
//                                        obj.put(varEntry.getKey(), coldata);
                                        dimensionList.add(varEntry.getKey().split("_")[1] + "&nbsp;&nbsp;:" + coldata);
                                    }
                                }
                            }
                        }
                    }

                    String invno = dn.getDebitNoteNumber();

                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
//                    String entryDate = dateFormat.format(dn.getJournalEntry() != null ? dn.getJournalEntry().getEntryDate() : dn.getCreationDate());  //ERP-10558
                    String entryDate = dateFormat.format(dn.getCreationDate());  
                    entryDate = df.format(new Date(entryDate));
//                    Date EntryDate = dn.getJournalEntry() != null ? dn.getJournalEntry().getEntryDate() : dn.getCreationDate();
                    Date EntryDate = dn.getCreationDate();
                    debitnotejasper.setNumber(invno);
                    debitnotejasper.setDate(entryDate);
                    String code = "", name = "", phone = "", address = "", fax = "", memo = "", dncurrency = "";
                    if (dn.getVendor() != null) {
                        code = (dn.getVendor().getAcccode() != null ? dn.getVendor().getAcccode().toString() : "");
                        name = (dn.getVendor().getName() != null ? dn.getVendor().getName() : "");
                        phone = (dn.getVendor().getContactNumber() != null ? dn.getVendor().getContactNumber() : "");
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("vendorid", dn.getVendor().getID());
                        address = (dn.getVendor() != null ? accountingHandlerDAOobj.getVendorAddress(addressParams).replaceAll("\n", "<br>") : dn.getVendor().getAddress() != null ? dn.getVendor().getAddress().replaceAll("\n", "<br>") : "");

                        fax = (dn.getVendor().getFax() != null ? dn.getVendor().getFax() : "");
                        memo = (dn.getMemo() != null ? dn.getMemo() : "");
                        dncurrency = (dn.getCurrency().getCurrencyCode() != null ? dn.getCurrency().getCurrencyCode() : "");
                    }
                    if (dn.getCustomer() != null) {  //DN for Customer
                        code = (dn.getCustomer().getAcccode() != null ? dn.getCustomer().getAcccode().toString() : "");
                        name = (dn.getCustomer().getName() != null ? dn.getCustomer().getName() : "");
                        phone = (dn.getCustomer().getContactNumber() != null ? dn.getCustomer().getContactNumber() : "");
                        fax = (dn.getCustomer().getFax() != null ? dn.getCustomer().getFax() : "");
                        memo = (dn.getMemo() != null ? dn.getMemo() : "");
                        dncurrency = (dn.getCurrency().getCurrencyCode() != null ? dn.getCurrency().getCurrencyCode() : "");
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("customerid", dn.getCustomer().getID());
                        address = (dn.getCustomer() != null ? accountingHandlerDAOobj.getCustomerAddress(addressParams).replaceAll("\n", "<br>") : dn.getCustomer().getBillingAddress() != null ? dn.getCustomer().getBillingAddress().replaceAll("\n", "<br>") : "");

                    }
                    debitnotejasper.setVendor_code(code);
                    debitnotejasper.setVendor_name(name);
                    debitnotejasper.setVendor_phone(phone);
                    debitnotejasper.setVendor_address(address);
                    debitnotejasper.setVendor_fax(fax);
                    debitnotejasper.setVendor_memo(memo);
                    debitnotejasper.setCurrency(dncurrency);

                    if (!isOpeningBalanceTransaction) {     //To show Particulars Detail in PDF when transaction is a non-opening type.

                        if (templateflag == Constants.vhqpost_tempalteflag) {
                            Set<DebitNoteTaxEntry> dnTaxEntryDetails = dn.getDnTaxEntryDetails();
                            if (dnTaxEntryDetails != null && !dnTaxEntryDetails.isEmpty()) {

                                for (DebitNoteTaxEntry noteTaxEntry : dnTaxEntryDetails) {
                                    CreditNoteTable creditNoteTable = new CreditNoteTable();
                                    LabelValue labelvalue = new LabelValue();
                                    i++;
                                    String accName = "";
                                    String accCode = "";
                                    String total1 = "";
                                    String accDesc = "";
                                    String prodCode = "";
                                    String uom = "";
                                    String taxCode = "";
                                    double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                                    double rate = 0;
                                    double discount = 0;
                                    double rowtaxamount = 0;
                                    double amount1 = 0;
                                    double amount_with_discount = 0;
                                    double amount_with_tax = 0;

                                    accCode = noteTaxEntry.getAccount().getAcccode() != null ? noteTaxEntry.getAccount().getAcccode() : "";
                                    accName = noteTaxEntry.getAccount().getName() != null ? noteTaxEntry.getAccount().getName() : "";
                                    accDesc = noteTaxEntry.getDescription();

                                    rowtaxamount = noteTaxEntry.getTaxamount();
                                    amount1 = noteTaxEntry.getAmount();
                                    amount_with_discount = amount1 - discount;
                                    if (noteTaxEntry.isDebitForMultiCNDN()) {
                                        rowtaxamount = rowtaxamount * -1;
                                        amount_with_discount = amount_with_discount * -1;
                                    }
                                    creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                                    creditNoteTable.setAccName(accName);
                                    creditNoteTable.setAccCode(accCode);
                                    creditNoteTable.setNarration(accDesc);
                                    creditNoteTableList.add(creditNoteTable);

                                    if (noteTaxEntry.getTax() != null) {
                                        double taxPercent = 0;
                                        HashMap<String, Object> requestParamstax = new HashMap<String, Object>();
                                        requestParamstax.put("transactiondate", EntryDate);
                                        requestParamstax.put("taxid", noteTaxEntry.getTax() != null ? noteTaxEntry.getTax().getID() : "");
                                        requestParamstax.put("companyid", companyid);
                                        KwlReturnObject resulttax = accTaxObj.getTax(requestParamstax);
                                        List taxList = resulttax.getEntityList();
                                        if (!taxList.isEmpty()) {
                                            Object[] taxObj = (Object[]) taxList.get(0);
                                            taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                                        }
                                        String taxDesc = noteTaxEntry.getTax().getTaxCode();//"Add " + taxPercent + "% GST";
                                        creditNoteTable = new CreditNoteTable();
                                        creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                                        creditNoteTable.setAccName(accName);
                                        creditNoteTable.setNarration(taxDesc);
                                        creditNoteTableList.add(creditNoteTable);
                                    }



                                }
                            } else {// in case of if tax is not included while creation of CN Value will be go fron jedetail table in case of Edit.
                                JournalEntry je = dn.getJournalEntry();
                                Set<JournalEntryDetail> jeDetails = je.getDetails();
                                for (JournalEntryDetail jed : jeDetails) {
                                    LabelValue labelvalue = new LabelValue();
                                    i++;
                                    String accName = "";
                                    String total1 = "";
                                    String accDesc = "";
                                    String accCode = "";
                                    String uom = "";
                                    String taxCode = "";
                                    double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                                    double rate = 0;
                                    double discount = 0;
                                    double rowtaxamount = 0;
                                    double amount1 = 0;
                                    double amount_with_discount = 0;
                                    double amount_with_tax = 0;
                                    JSONObject obj = new JSONObject();
                                    if (jed.isDebit()) {
                                        accCode = jed.getAccount().getAcccode() != null ? jed.getAccount().getAcccode() : "";
                                        accName = jed.getAccount().getName() != null ? jed.getAccount().getName() : "";
                                        accDesc = jed.getDescription() != null ? jed.getDescription() : "";
                                        amount1 = jed.getAmount();
                                        amount_with_discount = amount1 - discount;
                                        amount_with_tax = amount_with_discount + rowtaxamount;
                                        CreditNoteTable creditNoteTable = new CreditNoteTable();
                                        creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                                        creditNoteTable.setAccName(accName);
                                        creditNoteTable.setAccCode(accCode);
                                        creditNoteTable.setNarration(accDesc);
                                        creditNoteTableList.add(creditNoteTable);
                                    }



                                }
                            }
                        } else {// Default CN/DN Logic
                            Set<DebitNoteTaxEntry> dnTaxEntryDetails = dn.getDnTaxEntryDetails();
                            if (dnTaxEntryDetails != null && !dnTaxEntryDetails.isEmpty()) {

                                for (DebitNoteTaxEntry noteTaxEntry : dnTaxEntryDetails) {
                                    CreditNoteTable creditNoteTable = new CreditNoteTable();
                                    String accName = "";
                                    String accCode = "";
                                    String total1 = "";
                                    String accDesc = "";

                                    double discount = 0;
                                    double rowtaxamount = 0;
                                    double amount1 = 0;
                                    double amount_with_discount = 0;
                                    double amount_with_tax = 0;

                                    accCode = noteTaxEntry.getAccount().getAcccode() != null ? noteTaxEntry.getAccount().getAcccode() : "";
                                    accName = noteTaxEntry.getAccount().getName() != null ? noteTaxEntry.getAccount().getName() : "";
                                    accDesc = noteTaxEntry.getDescription() != null ? noteTaxEntry.getDescription() : "";
                                    rowtaxamount = noteTaxEntry.getTaxamount();
                                    amount1 = noteTaxEntry.getAmount();
                                    amount_with_discount = amount1 - discount;
                                    if (noteTaxEntry.isDebitForMultiCNDN()) {
                                        rowtaxamount = rowtaxamount * -1;
                                        amount_with_discount = amount_with_discount * -1;
                                    }
                                    creditNoteTable.setAccCode(accCode);
                                    creditNoteTable.setAccName(accName);
                                    creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                                    creditNoteTable.setNarration(accDesc);
                                    creditNoteTable.setSrNo(noteTaxEntry.getSrNoForRow() * 2);//just for sorting

                                    creditNoteTableList.add(creditNoteTable);

                                    if (noteTaxEntry.getTax() != null) {
                                        String taxDesc = noteTaxEntry.getTax().getTaxCode();//"Add " + taxPercent + "% GST";
                                        creditNoteTable = new CreditNoteTable();
                                        creditNoteTable.setAccCode("");
                                        creditNoteTable.setAccName(taxDesc);
                                        creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                                        creditNoteTable.setNarration("");
                                        creditNoteTable.setSrNo(noteTaxEntry.getSrNoForRow() * 2 + 1);//just for sorting

                                        creditNoteTableList.add(creditNoteTable);
                                    }
                                }
                                Collections.sort(creditNoteTableList, new CreditNoteTable());

                            } else {
                                Set<JournalEntryDetail> entryset = dn.getJournalEntry().getDetails();
                                Iterator itr = entryset.iterator();
                                while (itr.hasNext()) {
                                    JournalEntryDetail jed = (JournalEntryDetail) itr.next();
                                    if (!jed.isDebit()) {
                                        CreditNoteTable creditNoteTable = new CreditNoteTable();
                                        creditNoteTable.setAccCode(jed.getAccount().getAcccode() != null ? jed.getAccount().getAcccode() : "");
                                        creditNoteTable.setAccName(jed.getAccount().getName() != null ? jed.getAccount().getName() : "");
                                        creditNoteTable.setAmount(authHandler.formattedCommaSeparatedAmount(jed.getAmount(), companyid));
                                        creditNoteTable.setNarration(jed.getDescription() != null ? jed.getDescription() : "");
                                        // if account code is null then it is the GST entry so replace Desc with  Account name i.e GST code VHQ 
                                        if (templateflag == Constants.vhqpost_tempalteflag) {
                                            creditNoteTable.setNarration(jed.getAccount().getAcccode() != null ? jed.getDescription() != null ? jed.getDescription() : "" : jed.getAccount().getName() != null ? jed.getAccount().getName() : "");
                                        }
                                        creditNoteTableList.add(creditNoteTable);
                                    }
                                }
                            }
                        }
                    } else {    //To show Particulars as An Opening in PDF when transaction is an opening type.
                        CreditNoteTable creditNoteTable = new CreditNoteTable();
                        creditNoteTable.setAccName("This is an Opening Debit Note");
                        creditNoteTable.setNarration(dn.getNarration());
                        creditNoteTableList.add(creditNoteTable);
                    }
                    String totalDimension = "";
                    for (String dimesion : dimensionList) {
                        totalDimension += dimesion + "<br>";
                    }
                    debitnotejasper.setClassDimension(totalDimension);
                    debitnotejasper.setTotalamount(authHandler.formattedCommaSeparatedAmount(dn.getDnamount(), companyid));
                    KWLCurrency currency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), dn.getCurrency().getCurrencyID());
                    String netinword = EnglishNumberToWordsOjb.convert(dn.getDnamount(), currency, countryLanguageId);
                    debitnotejasper.setCurrencyinword(netinword + " only.");
                    debitnotejasper.setCurrency_word(dn.getCurrency().getName().toString());
                    String GstRegNo = companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "";
                    String UEM = companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "";
                    debitnotejasper.setGstRegNo(GstRegNo);
                    debitnotejasper.setUem(UEM);
                    debitNoteMap.put("CreditNoteTable", new JRBeanCollectionDataSource(creditNoteTableList));
                    debitNoteList.add(debitnotejasper);
                    debitNoteMap.put("format", "pdf");
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    debitNoteMap.put("imagePath", fileName1);
                    if (templateflag == Constants.sms_templateflag) {
                        debitNoteMap.put("footerflag", true);
                    } else {
                        debitNoteMap.put("footerflag", false);  //Mayur B- To hide footer logo for SMS holding Company.
                    }
                    debitNoteMap.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
//            debitNoteMap.put("imagePath3", "http://67.192.230.254/test/sms_chinesename.png");
//            debitNoteMap.put("datasource", new JRBeanCollectionDataSource(debitNoteList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "DebitNote.pdf");
                    if (templateflag == Constants.sms_templateflag) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DebitNote.jrxml");
                    } else if (templateflag == Constants.vhqpost_tempalteflag) {
                        debitNoteMap.put("notetype", "DEBIT NOTE");
                        debitNoteMap.put("AccountCode", code);
                        debitNoteMap.put("UEN", UEM);
                        debitNoteMap.put("GSTRegNo", GstRegNo);
                        debitNoteMap.put("CNNumber", invno);
                        debitNoteMap.put("PersonName", name);
                        debitNoteMap.put("PersonAddress", address);
                        debitNoteMap.put("PersonPhone", phone);
                        debitNoteMap.put("PersonFax", fax);
                        debitNoteMap.put("NoteCurrency", dncurrency);
                        debitNoteMap.put("NoteTotalAmount", authHandler.formattedCommaSeparatedAmount(dn.getDnamount(), companyid));
                        debitNoteMap.put("CurrencyInWords", netinword + " only.");
                        debitNoteMap.put("CurrencyWord", dn.getCurrency().getName().toString());
                        debitNoteMap.put("ComapnyName", companyname);
                        debitNoteMap.put("ClassDimensions", totalDimension);
                        debitNoteMap.put("memo", memo);
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/VHQPostCreditNote.jrxml");
                    } else if (templateflag == Constants.lsh_templateflag) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LSHDebitNoteOtherwise.jrxml");
                    } else if (templateflag == Constants.Diamond_Aviation_templateflag) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationDefaultDebitNote.jrxml");
                    } else {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DebitNoteForAll.jrxml");
                    }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    InputStream inputStreamSubReport = null;
                    if (templateflag == Constants.vhqpost_tempalteflag) {
                        inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/VHQPostCreditDebitNoteSubreport.jrxml");
                    } else {
                        inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/CreditNoteSubReport.jrxml");
                    }
                    JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                    JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

                    debitNoteMap.put("CreditNoteSubReport", jasperReportSubReport);

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(debitNoteList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, debitNoteMap, beanColDataSource);
                    list.add(jasperPrint);
                }
            } catch (Exception ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return list;
    }

    @Override
    public List<Object> exportPaymentReceipt(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String paymentId = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                paymentId = s;
                if (StringUtil.isNullOrEmpty(paymentId)) {
                    paymentId = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                Map<String, Object> voucherMap = new HashMap<String, Object>();
                String view = "";
                JasperPrint jasperPrint = null;
                Date currentDate = Calendar.getInstance().getTime();
                DateFormat dateFormat = new SimpleDateFormat("MMMM dd, yyyy");
                String currentDateStr = dateFormat.format(currentDate);
//        String paymentId = request.getParameter("bills");
                int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
                int mode = Integer.parseInt(request.getParameter("mode"));
                String companyid = AccountingManager.getCompanyidFromRequest(request);
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));

                KwlReturnObject objItr = null;
                Receipt receipt = null;
                BillingReceipt billingReceipt = null;

                try {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    java.util.Date entryDate = null;
                    double total = 0;
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();

                    KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                    KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

                    String currencyid = "";
                    String receiptNumber = "";
                    Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
                    PayDetail PayDetail = null;
                    String memo = "";
                    String AccountName = "";
                    String paidTo = "";
                    boolean ismanycrdb = false;
                    int receiptType = 0;
                    HashMap<String, Object> rRequestParams = new HashMap<String, Object>();

                    String netinword = "";
                    String cust = request.getParameter("customer");
                    String accname = request.getParameter("accname");
                    String address = request.getParameter("address");
                    double amount = Double.parseDouble(request.getParameter("amount"));


                    String vendorName = "";
                    String vendorCode = "";
                    String vendorAddress = "";
                    String bankCharges = "";
                    double bankChargesAmount = 0.0;
                    boolean iscontraentryflag = false;
                    iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));
                    String vendorPhone = "";
                    String vendorFax = "";


                    DateFormat df = (DateFormat) requestParams.get("df");
//            String companyid = sessionHandlerImpl.getCompanyid(request);
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 0));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;

                    double advanceAmount = 0;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
                        advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
                    }
                    boolean advanceFlag = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
                        advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
                    }
                    DateFormat dFormat = new SimpleDateFormat("dd/MM/yyyy");
                    List listPaymentDetails = null;
                    if (mode == StaticValues.AUTONUM_RECEIPT) {
                        objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), paymentId);
                        receipt = (Receipt) objItr.getEntityList().get(0);
                        currencyid = (receipt.getCurrency() == null) ? currency.getCurrencyID() : receipt.getCurrency().getCurrencyID();
                        receiptNumber = receipt.getReceiptNumber();
                        journalEntryDate = receipt.getJournalEntry().getEntryDate();
                        PayDetail = receipt.getPayDetail();
                        memo = receipt.getMemo();
                        Company com = receipt.getCompany();
                        ismanycrdb = receipt.isIsmanydbcr();
                        receiptType = receipt.getReceipttype();
                        paidTo = receipt.getReceivedFrom() != null ? receipt.getReceivedFrom().getValue() : "";
                        bankChargesAmount = receipt.getBankChargesAmount();
                        entry = receipt.getJournalEntry();
                        filter_names.add("receipt.ID");
                        filter_params.add(receipt.getID());
                        rRequestParams.put("filter_names", filter_names);
                        rRequestParams.put("filter_params", filter_params);
                        KwlReturnObject pdoresult = accReceiptDAOobj.getReceiptDetails(rRequestParams);
                        listPaymentDetails = pdoresult.getEntityList();


                        if (!listPaymentDetails.isEmpty()) {
                            ReceiptDetail receiptDetail = (ReceiptDetail) listPaymentDetails.get(0);
                            Customer customer = receiptDetail.getInvoice().getCustomer();
                            if (customer != null) {
                                vendorName = customer.getName();
                                vendorCode = customer.getAcccode();
                                vendorAddress = customer.getShippingAddress();
                                vendorPhone = customer.getContactNumber();
                                vendorFax = customer.getFax();
                            }
                        }


                    } else if (mode == StaticValues.AUTONUM_BILLINGRECEIPT) {
                        objItr = accountingHandlerDAOobj.getObject(BillingReceipt.class.getName(), paymentId);
                        billingReceipt = (BillingReceipt) objItr.getEntityList().get(0);
                        currencyid = (billingReceipt.getCurrency() == null) ? currency.getCurrencyID() : billingReceipt.getCurrency().getCurrencyID();
                        receiptNumber = billingReceipt.getBillingReceiptNumber();
                        journalEntryDate = billingReceipt.getJournalEntry().getEntryDate();
                        PayDetail = billingReceipt.getPayDetail();
                        memo = billingReceipt.getMemo();
                        Company com = billingReceipt.getCompany();
                        ismanycrdb = billingReceipt.isIsmanydbcr();
                        receiptType = billingReceipt.getReceipttype();
                        bankChargesAmount = billingReceipt.getBankChargesAmount();
                        entry = billingReceipt.getJournalEntry();
                        filter_names.add("billingReceipt.ID");
                        filter_params.add(billingReceipt.getID());
                        rRequestParams.put("filter_names", filter_names);
                        rRequestParams.put("filter_params", filter_params);
                        KwlReturnObject pdoresult = accReceiptDAOobj.getBillingReceiptDetails(rRequestParams);
                        listPaymentDetails = pdoresult.getEntityList();

                        if (!listPaymentDetails.isEmpty()) {
                            BillingReceiptDetail receiptDetail = (BillingReceiptDetail) listPaymentDetails.get(0);
                            Customer customer = receiptDetail.getBillingInvoice().getCustomer();
                            if (customer != null) {
                                vendorName = customer.getName();
                                vendorCode = customer.getAcccode();
                                vendorAddress = customer.getShippingAddress();
                                vendorPhone = customer.getContactNumber();
                                vendorFax = customer.getFax();
                            }
                        }

                    }

                    List<String> dimensionList = new ArrayList<String>();
                    List<String> dimensionValueList = new ArrayList<String>();
                    List<String> colonList = new ArrayList<String>();
                    if (entry != null) {

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(companyid);
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(entry.getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(moduleid + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                                    Date dateFromDB=null;
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        dimensionList.add(fieldComboData.getValue() != null ? varEntry.getKey().split("_")[1] : "");
                                        dimensionValueList.add(fieldComboData.getValue() != null ? fieldComboData.getValue() : "");
                                        colonList.add(":");
//                                       obj.put(varEntry.getKey(), fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                    }
                                } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                    dimensionList.add(varEntry.getKey().split("_")[1]);
                                    DateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                                    try {
                                        dateFromDB = defaultDateFormat.parse(coldata);
                                        coldata = sdf.format(dateFromDB);
                                    } catch (Exception e) {
                                    }
                                    dimensionValueList.add(coldata);
                                    colonList.add(":");
//                                  obj.put(varEntry.getKey(), df.format(Long.parseLong(coldata)));
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
//                                        obj.put(varEntry.getKey(), coldata);
                                        dimensionList.add(varEntry.getKey().split("_")[1]);
                                        dimensionValueList.add(coldata);
                                        colonList.add(":");
                                    }    
                                }
                            }
                        }
                    }




                     if (listPaymentDetails != null && listPaymentDetails.isEmpty() && receiptType==9 ) {
                        PettyCashVoucher pettyCashVoucher = new PettyCashVoucher();
                        ArrayList<PettyCashVoucher> pettyCashVoucherList = new ArrayList<PettyCashVoucher>();
                        view = "pettyCashVoucher";
                        pettyCashVoucher.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
                        //         statementOfAccounts.setAddress(company.getAddress()!=null?company.getAddress():"");
                        pettyCashVoucher.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
                        pettyCashVoucher.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
                        pettyCashVoucher.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
                        pettyCashVoucher.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        pettyCashVoucher.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                        pettyCashVoucher.setDate(currentDateStr);
                        pettyCashVoucher.setPaymentNumber(receiptNumber);
                        pettyCashVoucher.setPaid(paidTo);
                        pettyCashVoucher.setPaidToName("Received From");
                        pettyCashVoucher.setPaidToColon(":");
                        String paymentAccount = "";
                        if (PayDetail != null && PayDetail.getPaymentMethod() != null && PayDetail.getPaymentMethod().getAccount() != null && PayDetail.getPaymentMethod().getAccount().getGroup() != null) {
                            paymentAccount = PayDetail.getPaymentMethod().getAccount().getGroup().getName();
                        }
                        if (!StringUtil.isNullOrEmpty(paymentAccount)) {
                            if (!paymentAccount.equals("Cash")) {
                                Cheque cheque = PayDetail.getCheque();
                                if (PayDetail != null && cheque != null) {
                                    String bankName = cheque.getBankName();
                                    String checkNo = cheque.getChequeNo();
                                    pettyCashVoucher.setPaymentMethod(bankName != null ?  StringUtil.DecodeText(bankName) : "");
                                    pettyCashVoucher.setCheckNo(checkNo != null ? ("by Cheque/DD No " + checkNo) : "");
                                    pettyCashVoucher.setDated(cheque.getDueDate() != null ? ("dated " + dFormat.format(cheque.getDueDate())) : "");
                                }
                                pettyCashVoucher.setBankCharges("& Bank Charges");
                                pettyCashVoucher.setBankChargesAmount(authHandler.formattedAmount(bankChargesAmount, companyid) + " as per details given below");
                            } else {
                                pettyCashVoucher.setPaymentMethod("Cash in Hand");
                            }
                        } else {
                            pettyCashVoucher.setPaymentMethod("Cash in Hand");
                        }
                        pettyCashVoucher.setAddress(company.getAddress());
                        pettyCashVoucherList.add(pettyCashVoucher);
                        voucherMap = getPaymentReceiptSubReport(request, dimensionList, dimensionValueList, colonList, paymentId);
                        voucherMap.put("format", "pdf");
                        String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("imagePath", fileName1);
                        if (templateflag == 1) {
                            voucherMap.put("footerflag", true);
                        } else {
                            voucherMap.put("footerflag", false);  //Mayur B- To hide footer logo for SMS holding Company.
                        }
                        voucherMap.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
                        voucherMap.put("imagePath3", "http://67.192.230.254/test/sms_chinesename.png");
                        voucherMap.put("datasource", new JRBeanCollectionDataSource(pettyCashVoucherList));
                        if (!StringUtil.isNullOrEmpty(paymentAccount) && paymentAccount.equals("Cash")) {
                            voucherMap.put("title", "PETTY CASH VOUCHER");
                            response.setHeader("Content-Disposition", "attachment;filename=\"" + "PettyCashVoucher_" + receiptNumber + ".pdf\"");
                        } else {
//                if (request.getParameter("againstGLFlag") != null) {
//                     voucherMap.put("title", "PAYMENT VOUCHER(GL)");
//                 } else {
//                     voucherMap.put("title", "PAYMENT VOUCHER");
//                 }
                            voucherMap.put("title", "PAYMENT VOUCHER(GL)");
                            response.setHeader("Content-Disposition", "attachment;filename=\"" + "PaymentVoucher(GL)_" + receiptNumber + ".pdf\"");
                        }
                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PettyCashVoucher.jrxml");
                        InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PettyCashVoucherSubReport.jrxml");
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(pettyCashVoucherList);
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                        JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                        voucherMap.put("PettyCashVoucherSubReport", jasperReportSubReport);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
//            List<Object> list = new ArrayList<Object>();
//            JRPdfExporter exp = new JRPdfExporter();
//            list.add(jasperPrint);
//            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT_LIST, list);
////            exp.setParameter(JRPdfExporterParameter.OUTPUT_FILE, new File("/home/krawler/TaxInvoice.pdf"));
//            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
//            
//            exp.exportReport();
////            JasperExportManager.exportReportToPdfFile(jasperPrint, "/home/krawler/a.pdf"); 
                        list.add(jasperPrint);
                    } else {
                        PaymentVoucher paymentVoucher = new PaymentVoucher();
                        ArrayList<PaymentVoucher> paymentVoucherList = new ArrayList<PaymentVoucher>();
                        view = "paymentVoucher";
                        paymentVoucher.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
                        //         statementOfAccounts.setAddress(company.getAddress()!=null?company.getAddress():"");
                        paymentVoucher.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
                        paymentVoucher.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
                        paymentVoucher.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
                        paymentVoucher.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        paymentVoucher.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                        paymentVoucher.setDate(currentDateStr);
                        paymentVoucher.setPaymentNumber(receiptNumber);
                        String paymentAccount = "";
                        if (PayDetail != null && PayDetail.getPaymentMethod() != null && PayDetail.getPaymentMethod().getAccount() != null && PayDetail.getPaymentMethod().getAccount().getGroup() != null) {
                            paymentAccount = PayDetail.getPaymentMethod().getAccount().getGroup().getName();
                        }
                        if (!StringUtil.isNullOrEmpty(paymentAccount)) {
                            if (!paymentAccount.equals("Cash")) {
                                Cheque cheque = PayDetail.getCheque();
                                if (PayDetail != null && cheque != null) {
                                    String bankName = cheque.getBankName();
                                    String checkNo = cheque.getChequeNo();
                                    paymentVoucher.setPaymentMethod(bankName != null ? StringUtil.DecodeText(bankName) : "");
                                    paymentVoucher.setCheckNo(checkNo != null ? ("by Cheque/DD No " + checkNo) : "");
                                    paymentVoucher.setDated(cheque.getDueDate() != null ? ("dated " + dFormat.format(cheque.getDueDate())) : "");
                                }
                                paymentVoucher.setBankCharges("& Bank Charges");
                                paymentVoucher.setBankChargesAmount(authHandler.formattedAmount(bankChargesAmount, companyid) + " as per details given below");
                            } else {
                                paymentVoucher.setPaymentMethod("Cash in Hand");
                            }
                        } else {
                            paymentVoucher.setPaymentMethod("Cash in Hand");
                        }
                        String dimensionLable = "";
                        for (String dimesion : dimensionList) {
                            dimensionLable += dimesion + "<br>";
                        }
                        paymentVoucher.setDimentionName(dimensionLable);
                        String dimensionValue = "";
                        for (String dimesionValue : dimensionValueList) {
                            dimensionValue += dimesionValue + "<br>";
                        }
                        paymentVoucher.setClassDimension(dimensionValue);
                        String colon = "";
                        for (String col : colonList) {
                            colon += col + "<br>";
                        }
                        paymentVoucher.setColon(colon);
                        //           paymentVoucher.setClassDimension(totalDimension);
                        paymentVoucher.setMemo(memo);
                        paymentVoucher.setAddress(company.getAddress());
                        paymentVoucher.setVendorName(vendorName != null ? vendorName : "");
                        paymentVoucher.setVendorCode(vendorCode != null ? vendorCode : "");
                        paymentVoucher.setVendorAddress(vendorAddress != null ? vendorAddress : "");
                        paymentVoucher.setCustomerPhone(vendorPhone != null ? vendorPhone : "");
                        paymentVoucher.setCustomerFax(vendorFax != null ? vendorFax : "");
                        paymentVoucher.setCustomerOrVendor("Customer");
                        paymentVoucher.setPaidToName("Received From");
                        paymentVoucher.setPaidTo(paidTo);
                        getPaymentReceiptSubReportData(request, voucherMap, paymentVoucher, paymentId);
                        paymentVoucherList.add(paymentVoucher);
                        voucherMap.put("format", "pdf");
                        if (request.getParameter("againstGLFlag") != null) {
                            voucherMap.put("title", "PAYMENT VOUCHER(GL)");
                        } else {
                            voucherMap.put("title", "PAYMENT VOUCHER");
                        }
                        String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("imagePath", fileName1);
                        if (templateflag == 1) {
                            voucherMap.put("footerflag", true);
                        } else {
                            voucherMap.put("footerflag", false);  //Mayur B- To hide footer logo for SMS holding Company.
                        }
                        voucherMap.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
                        voucherMap.put("imagePath3", "http://67.192.230.254/test/sms_chinesename.png");
                        voucherMap.put("datasource", new JRBeanCollectionDataSource(paymentVoucherList));
                        if (!StringUtil.isNullOrEmpty(paymentAccount) && paymentAccount.equals("Cash")) {
                            voucherMap.put("title", "PETTY CASH VOUCHER");
                            response.setHeader("Content-Disposition", "attachment;filename=\"" + "PettyCashVoucher_" + receiptNumber + ".pdf\"");
                        } else {
                            voucherMap.put("title", "PAYMENT VOUCHER");
//                 if (request.getParameter("againstGLFlag") != null) {
//                     voucherMap.put("title", "PAYMENT VOUCHER(GL)");
//                 } else {
//                     voucherMap.put("title", "PAYMENT VOUCHER");
//                 }
                            response.setHeader("Content-Disposition", "attachment;filename=\"" + "PaymentVoucher_" + receiptNumber + ".pdf\"");
                        }
                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PaymentVoucher.jrxml");
                        InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PaymentVoucherSubReport.jrxml");
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(paymentVoucherList);
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                        JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                        voucherMap.put("PaymentVoucherSubReport", jasperReportSubReport);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
//            List<Object> list = new ArrayList<Object>();
//            JRPdfExporter exp = new JRPdfExporter();
//            list.add(jasperPrint);
//            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT_LIST, list);
////            exp.setParameter(JRPdfExporterParameter.OUTPUT_FILE, new File("/home/krawler/TaxInvoice.pdf"));
//            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
//             
//             exp.exportReport();
                        list.add(jasperPrint);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(accReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;

    }

    public Map<String, Object> getPaymentReceiptSubReport(HttpServletRequest request, List<String> dimensionList, List<String> dimensionValueList, List<String> colonList, String paymentId) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        ArrayList<PettyCashVoucherSubReport> pettyCashVoucherSubReportList = new ArrayList<PettyCashVoucherSubReport>();
        Map<String, Object> pettyCashVoucherMap = new HashMap<String, Object>();
        try {

            Receipt receipt = null;
            BillingReceipt billingReceipt = null;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            JSONArray jArr = new JSONArray();
//            String paymentId = request.getParameter("bills");
            java.util.Date entryDate = null;
            double total = 0;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            KwlReturnObject objItr = null;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            
            String currencyid = "";
            String receiptNumber = "";
            Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
            PayDetail PayDetail = null;
            String memo = "";
            String AccountName = "";
            boolean ismanycrdb = false;
            int receiptType = 0;
            HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
            List<Double> debitAccountAmount = new ArrayList<Double>();
            List<Double> debitAccountTaxAmount = new ArrayList<Double>();
            List<Double> debitAccountTotalAmount = new ArrayList<Double>();
            List<Double> creditAccountAmount = new ArrayList<Double>();
            List<Double> creditAccountTaxAmount = new ArrayList<Double>();
            List<Double> creditAccountTotalAmount = new ArrayList<Double>();
            List<String> debitAccountCodeNumber = new ArrayList<String>();
            List<String> debitAccountCodeName = new ArrayList<String>();
            List<String> creditAccountCodeNumber = new ArrayList<String>();
            List<String> creditAccountCodeName = new ArrayList<String>();
            List<String> debitTaxRow = new ArrayList<String>();
            List<String> creditTaxRow = new ArrayList<String>();
            List<String> creditDescription = new ArrayList<String>();
            List<String> debitDescription = new ArrayList<String>();
            List<PettyCashVoucherSubSubReport> pettyCashVoucherSubSubReportList = new ArrayList<PettyCashVoucherSubSubReport>();
            HashMap pdoMAp = new HashMap();

            String netinword = "";
            String cust = request.getParameter("customer");
            String accname = request.getParameter("accname");
            String address = request.getParameter("address");
            double amount = 0.0;


            boolean iscontraentryflag = false;
            iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));
            int mode = Integer.parseInt(request.getParameter("mode"));

            double advanceAmount = 0;
            if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
                advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
            }
            boolean advanceFlag = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
                advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
            }

            if (mode == StaticValues.AUTONUM_RECEIPT) {
                objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), paymentId);
                receipt = (Receipt) objItr.getEntityList().get(0);
                currencyid = (receipt.getCurrency() == null) ? currency.getCurrencyID() : receipt.getCurrency().getCurrencyID();
                receiptNumber = receipt.getReceiptNumber();
                journalEntryDate = receipt.getJournalEntry().getEntryDate();
                PayDetail = receipt.getPayDetail();
                memo = receipt.getMemo();
                Company com = receipt.getCompany();
                ismanycrdb = receipt.isIsmanydbcr();
                receiptType = receipt.getReceipttype();



                Iterator itrRow = receipt.getJournalEntry().getDetails().iterator();
                while (itrRow.hasNext()) {
                    JournalEntryDetail jed = ((JournalEntryDetail) itrRow.next());
                    if (!jed.isDebit()) {
                        if (receipt.getDeposittoJEDetail() != null) {
                            amount = receipt.getDeposittoJEDetail().getAmount();
                        } else {
                            amount = jed.getAmount();
                        }
                    }
                }
                amount = authHandler.round(amount, companyid);
            } else if (mode == StaticValues.AUTONUM_BILLINGRECEIPT) {
                objItr = accountingHandlerDAOobj.getObject(BillingReceipt.class.getName(), paymentId);
                billingReceipt = (BillingReceipt) objItr.getEntityList().get(0);
                currencyid = (billingReceipt.getCurrency() == null) ? currency.getCurrencyID() : billingReceipt.getCurrency().getCurrencyID();
                receiptNumber = billingReceipt.getBillingReceiptNumber();
                journalEntryDate = billingReceipt.getJournalEntry().getEntryDate();
                PayDetail = billingReceipt.getPayDetail();
                memo = billingReceipt.getMemo();
                Company com = billingReceipt.getCompany();
                ismanycrdb = billingReceipt.isIsmanydbcr();
                receiptType = billingReceipt.getReceipttype();
            }

//            if (ismanycrdb) {
            if (mode == StaticValues.AUTONUM_RECEIPT) {
                filter_names.add("receipt.ID");
                filter_params.add(receipt.getID());
                rRequestParams.put("filter_names", filter_names);
                rRequestParams.put("filter_params", filter_params);
                KwlReturnObject pdoresult = accReceiptDAOobj.getReceiptDetailOtherwise(rRequestParams);
                List<ReceiptDetailOtherwise> list1 = pdoresult.getEntityList();
                Iterator pdoRow = list1.iterator();
                if (pdoRow != null && list1.size() > 0) {
                    for (ReceiptDetailOtherwise pdo : list1) {
                        if (receipt.getID().equals(pdo.getReceipt().getID())) {
                            if (receipt.isIsmanydbcr()) {
                                if (pdo.isIsdebit()) {
                                    debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountAmount.add(pdo.getAmount());
                                    debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    debitDescription.add((pdo.getDescription()));

                                } else {
                                    creditAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountAmount.add(pdo.getAmount());
                                    creditAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    creditAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    creditTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    creditDescription.add((pdo.getDescription()));
                                }
                            } else {
                                debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountAmount.add(pdo.getAmount());
                                debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                debitDescription.add((pdo.getDescription()));
                            }

                        }
                    }
                }
                pdoMAp.put("creditdebitflag", 2);
            } else if (mode == StaticValues.AUTONUM_BILLINGRECEIPT) {
                filter_names.add("billingReceipt.ID");
                filter_params.add(billingReceipt.getID());
                rRequestParams.put("filter_names", filter_names);
                rRequestParams.put("filter_params", filter_params);
                KwlReturnObject pdoresult = accReceiptDAOobj.getBillingReceiptDetailOtherwise(rRequestParams);
                List<BillingReceiptDetailOtherwise> list1 = pdoresult.getEntityList();
                Iterator pdoRow = list1.iterator();
                if (pdoRow != null && list1.size() > 0) {
                    for (BillingReceiptDetailOtherwise pdo : list1) {
                        if (billingReceipt.getID().equals(pdo.getBillingReceipt().getID())) {
                            if (billingReceipt.isIsmanydbcr()) {
                                if (pdo.isIsdebit()) {
                                    debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountAmount.add(pdo.getAmount());
                                    debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    debitDescription.add((pdo.getDescription()));

                                } else {
                                    creditAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountAmount.add(pdo.getAmount());
                                    creditAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    creditAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    creditTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    creditDescription.add((pdo.getDescription()));
                                }
                            } else {
                                debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountAmount.add(pdo.getAmount());
                                debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                debitDescription.add((pdo.getDescription()));
                            }

                        }
                    }
                }
                pdoMAp.put("creditdebitflag", 2);
            }

//            }
//            AccountName = receipt.getPayDetail() != null ? receipt.getPayDetail().getPaymentMethod().getAccount().getName() : "";

            JSONObject obj;
//            if (ismanycrdb) {  //acc.je.accDebit
            int craditDebitFlag = 1;
//                if (pdoMAp.containsKey("creditdebitflag")) {
//                    craditDebitFlag = (Integer) pdoMAp.get("creditdebitflag");
//                }


            for (int i = 0; i < (craditDebitFlag == 1 ? debitAccountCodeName.size() : creditAccountCodeName.size()); i++) {

                PettyCashVoucherSubReport pettyCashVoucherSubReport = new PettyCashVoucherSubReport();
                pettyCashVoucherSubReport.setAccountCode(craditDebitFlag == 1 ? debitAccountCodeNumber.get(i) : creditAccountCodeNumber.get(i));
                pettyCashVoucherSubReport.setAccountName(craditDebitFlag == 1 ? debitAccountCodeName.get(i) : creditAccountCodeName.get(i));
                pettyCashVoucherSubReport.setAmount(craditDebitFlag == 1 ? authHandler.formattedAmount(debitAccountAmount.get(i), companyid) : authHandler.formattedAmount(creditAccountAmount.get(i), companyid));
                pettyCashVoucherSubReport.setTax(craditDebitFlag == 1 ? authHandler.formattedAmount(debitAccountTaxAmount.get(i), companyid) : authHandler.formattedAmount(creditAccountTaxAmount.get(i), companyid));
                pettyCashVoucherSubReport.setGstTaxable(craditDebitFlag == 1 ? debitTaxRow.get(i) : creditTaxRow.get(i));
                //                   pettyCashVoucherSubReport.setDimensionName("Class");

                String dimensionLable = "";
                for (String dimesion : dimensionList) {
                    dimensionLable += dimesion + "<br>";
                }
                pettyCashVoucherSubReport.setDimensionName(dimensionLable);
                String dimensionValue = "";
                for (String dimesionValue : dimensionValueList) {
                    dimensionValue += dimesionValue + "<br>";
                }
                pettyCashVoucherSubReport.setClassDimension(dimensionValue);
                String colon = "";
                for (String col : colonList) {
                    colon += col + "<br>";
                }
                pettyCashVoucherSubReport.setColon(colon);
                pettyCashVoucherSubReport.setPaymentId(receipt != null ? receipt.getID() : billingReceipt.getID());
                pettyCashVoucherSubReport.setDescription(craditDebitFlag == 1 ?  StringUtil.DecodeText(debitDescription.get(i)) :  StringUtil.DecodeText(creditDescription.get(i)));
                pettyCashVoucherSubReport.setTotalAmount(authHandler.formattedAmount(amount, companyid) + "");
                netinword = EnglishNumberToWordsOjb.convert(amount, currency,countryLanguageId);
                pettyCashVoucherSubReport.setAmountInWords(currency.getName() + " " + netinword + " only.");
                pettyCashVoucherSubReportList.add(pettyCashVoucherSubReport);

            }

            for (int i = 0; i < (craditDebitFlag == 1 ? creditAccountCodeName.size() : debitAccountCodeName.size()); i++) {

                PettyCashVoucherSubReport pettyCashVoucherSubReport = new PettyCashVoucherSubReport();
                pettyCashVoucherSubReport.setAccountCode(craditDebitFlag == 1 ? creditAccountCodeNumber.get(i) : debitAccountCodeNumber.get(i));
                pettyCashVoucherSubReport.setAccountName(craditDebitFlag == 1 ? creditAccountCodeName.get(i) : debitAccountCodeName.get(i));
                pettyCashVoucherSubReport.setAmount(craditDebitFlag == 1 ? authHandler.formattedAmount(creditAccountAmount.get(i), companyid) : authHandler.formattedAmount(debitAccountAmount.get(i), companyid));
                pettyCashVoucherSubReport.setTax(craditDebitFlag == 1 ? authHandler.formattedAmount(creditAccountTaxAmount.get(i), companyid) : authHandler.formattedAmount(debitAccountTaxAmount.get(i), companyid));
                pettyCashVoucherSubReport.setGstTaxable(craditDebitFlag == 1 ? (creditTaxRow.get(i)) : (debitTaxRow.get(i)));
//                    pettyCashVoucherSubReport.setDimentionName("Class");
                String dimensionLable = "";
                for (String dimesion : dimensionList) {
                    dimensionLable += dimesion + "<br>";
                }
                pettyCashVoucherSubReport.setDimensionName(dimensionLable);
                String dimensionValue = "";
                for (String dimesionValue : dimensionValueList) {
                    dimensionValue += dimesionValue + "<br>";
                }
                pettyCashVoucherSubReport.setClassDimension(dimensionValue);
                String colon = "";
                for (String col : colonList) {
                    colon += col + "<br>";
                }
                pettyCashVoucherSubReport.setColon(colon);
                //                  pettyCashVoucherSubReport.setClassDimension(totalDimension);
                pettyCashVoucherSubReport.setPaymentId(receipt != null ? receipt.getID() : billingReceipt.getID());
                pettyCashVoucherSubReport.setDescription(craditDebitFlag == 1 ?  StringUtil.DecodeText(creditDescription.get(i)) :  StringUtil.DecodeText(debitDescription.get(i)));
                pettyCashVoucherSubReport.setTotalAmount(authHandler.formattedAmount(amount, companyid) + "");
                netinword = EnglishNumberToWordsOjb.convert(amount, currency,countryLanguageId);
                pettyCashVoucherSubReport.setAmountInWords(currency.getName() + " " + netinword + " only.");
                pettyCashVoucherSubReportList.add(pettyCashVoucherSubReport);

            }


            if (advanceFlag) {
                obj = new JSONObject();
                obj.put("1", "Advance" + " : ");
                obj.put("2", authHandlerDAOObj.getFormattedCurrency(advanceAmount, currencyid, companyid));
                jArr.put(obj);

            }


            double totalAdvanceAmount = amount;
            if (advanceFlag) {
                totalAdvanceAmount = amount + advanceAmount;
            }


            pettyCashVoucherMap.put("PettyCashVoucherSubReportData", new JRBeanCollectionDataSource(pettyCashVoucherSubReportList));
//        pettyCashVoucherMap.put("PettyCashVoucherSubSubReportData", new JRBeanCollectionDataSource(pettyCashVoucherSubSubReportList));    

        } catch (JSONException ex) {
            Logger.getLogger(accReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerLedgerJasper : " + ex.getMessage(), ex);
        }

        return pettyCashVoucherMap;
    }

    public void getPaymentReceiptSubReportData(HttpServletRequest request, Map<String, Object> voucherMap, PaymentVoucher paymentVoucher, String paymentId) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        ArrayList<PaymentVoucherSubReport> paymentVoucherSubReportList = new ArrayList<PaymentVoucherSubReport>();

        Receipt receipt = null;
        BillingReceipt billingReceipt = null;
        JSONArray jArr = new JSONArray();
//        String paymentId = request.getParameter("bills");
        java.util.Date entryDate = null;
        double total = 0;
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
        KwlReturnObject objItr = null;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
        KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

        int countryLanguageId = Constants.OtherCountryLanguageId; // 0
        KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
        ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
        if (extraCompanyPreferences.isAmountInIndianWord()) {
            countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
        }
//        String currencyid = (payment.getCurrency() == null) ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID();
        String receiptNumber = "";
        Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
        PayDetail PayDetail = null;
        String memo = "";
        String AccountName = "";
        boolean ismanycrdb = false;
        int receiptType = 0;
        HashMap<String, Object> rRequestParams = new HashMap<String, Object>();

        List<PettyCashVoucherSubSubReport> pettyCashVoucherSubSubReportList = new ArrayList<PettyCashVoucherSubSubReport>();
        HashMap pdoMAp = new HashMap();

        String netinword = "";
        String cust = request.getParameter("customer");
        String accname = request.getParameter("accname");
        String address = request.getParameter("address");
        double amount = Double.parseDouble(request.getParameter("amount"));


        boolean iscontraentryflag = false;
        iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));


        double advanceAmount = 0;
        if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
            advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
        }
        boolean advanceFlag = false;
        if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
            advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
        }
        int mode = Integer.parseInt(request.getParameter("mode"));
        DateFormat dFormat = new SimpleDateFormat("dd/MM/yyyy");
        if (mode == StaticValues.AUTONUM_RECEIPT) {
            objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), paymentId);
            receipt = (Receipt) objItr.getEntityList().get(0);
            receiptNumber = receipt.getReceiptNumber();
            journalEntryDate = receipt.getJournalEntry().getEntryDate();
            PayDetail = receipt.getPayDetail();
            memo = receipt.getMemo();
            Company com = receipt.getCompany();
            ismanycrdb = receipt.isIsmanydbcr();
            receiptType = receipt.getReceipttype();
            filter_names.add("receipt.ID");
            filter_params.add(receipt.getID());
            rRequestParams.put("filter_names", filter_names);
            rRequestParams.put("filter_params", filter_params);
            KwlReturnObject pdoresult = accReceiptDAOobj.getReceiptDetails(rRequestParams);
            List<ReceiptDetail> list1 = pdoresult.getEntityList();
            Iterator pdoRow = list1.iterator();
            double totalAmount = 0.0;
            if (pdoRow != null && list1.size() > 0) {
                for (ReceiptDetail pdo : list1) {
                    if (receipt.getID().equals(pdo.getReceipt().getID())) {
                        PaymentVoucherSubReport paymentVoucherSubReport = new PaymentVoucherSubReport();
                        paymentVoucherSubReport.setInvoiceNumber(pdo.getInvoice().getInvoiceNumber());
//                        paymentVoucherSubReport.setInvoiceDate(pdo.getInvoice().getJournalEntry() != null ? dFormat.format(pdo.getInvoice().getJournalEntry().getEntryDate()) : "");
                        paymentVoucherSubReport.setInvoiceDate(pdo.getInvoice().getCreationDate() != null ? dFormat.format(pdo.getInvoice().getCreationDate()) : "");
                        paymentVoucherSubReport.setAmount(pdo.getAmount() + "");
                        paymentVoucherSubReport.setInvCurrency(pdo.getInvoice().getCurrency().getSymbol());
                        totalAmount += pdo.getAmount();
                        paymentVoucherSubReport.setTotalAmount(authHandler.formattedAmount(totalAmount, companyid) + "");
                        paymentVoucherSubReport.setAmountInWords(pdo.getInvoice().getCurrency().getName() + " " + EnglishNumberToWordsOjb.convert(authHandler.round(totalAmount,companyid), pdo.getInvoice().getCurrency(),countryLanguageId) + " only.");
                        paymentVoucher.setInvCurrency(pdo.getInvoice().getCurrency().getSymbol());
                        paymentVoucher.setTotalAmount(authHandler.formattedAmount(totalAmount, companyid) + "");
                        paymentVoucher.setAmountInWords(pdo.getInvoice().getCurrency().getName() + " " + EnglishNumberToWordsOjb.convert(authHandler.round(totalAmount, companyid), pdo.getInvoice().getCurrency(),countryLanguageId) + " only.");
                        paymentVoucherSubReportList.add(paymentVoucherSubReport);

                    }
                }
            }

        } else if (mode == StaticValues.AUTONUM_BILLINGRECEIPT) {
            objItr = accountingHandlerDAOobj.getObject(BillingReceipt.class.getName(), paymentId);
            billingReceipt = (BillingReceipt) objItr.getEntityList().get(0);
            receiptNumber = billingReceipt.getBillingReceiptNumber();
            journalEntryDate = billingReceipt.getJournalEntry().getEntryDate();
            PayDetail = billingReceipt.getPayDetail();
            memo = billingReceipt.getMemo();
            Company com = billingReceipt.getCompany();
            ismanycrdb = billingReceipt.isIsmanydbcr();
            receiptType = billingReceipt.getReceipttype();

            filter_names.add("billingReceipt.ID");
            filter_params.add(billingReceipt.getID());
            rRequestParams.put("filter_names", filter_names);
            rRequestParams.put("filter_params", filter_params);
            KwlReturnObject pdoresult = accReceiptDAOobj.getBillingReceiptDetails(rRequestParams);
            List<BillingReceiptDetail> list1 = pdoresult.getEntityList();
            Iterator pdoRow = list1.iterator();
            double totalAmount = 0.0;
            if (pdoRow != null && list1.size() > 0) {
                for (BillingReceiptDetail pdo : list1) {
                    if (billingReceipt.getID().equals(pdo.getBillingReceipt().getID())) {
                        PaymentVoucherSubReport paymentVoucherSubReport = new PaymentVoucherSubReport();
                        paymentVoucherSubReport.setInvoiceNumber(pdo.getBillingInvoice().getBillingInvoiceNumber());
                        paymentVoucherSubReport.setInvoiceDate(pdo.getBillingInvoice().getJournalEntry() != null ? dFormat.format(pdo.getBillingInvoice().getJournalEntry().getEntryDate()) : "");
                        paymentVoucherSubReport.setAmount(pdo.getAmount() + "");
                        paymentVoucherSubReport.setInvCurrency(pdo.getBillingInvoice().getCurrency().getSymbol());
                        totalAmount += pdo.getAmount();
                        paymentVoucherSubReport.setTotalAmount(authHandler.formattedAmount(totalAmount, companyid) + "");
                        paymentVoucher.setInvCurrency(pdo.getBillingInvoice().getCurrency().getSymbol());
                        paymentVoucher.setTotalAmount(authHandler.formattedAmount(totalAmount, companyid) + "");
                        paymentVoucher.setAmountInWords(pdo.getBillingInvoice().getCurrency().getName() + " " + EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalAmount)), pdo.getBillingInvoice().getCurrency(),countryLanguageId) + " only.");
                        paymentVoucherSubReportList.add(paymentVoucherSubReport);

                    }
                }
            }
        }


        voucherMap.put("PaymentVoucherSubReportData", new JRBeanCollectionDataSource(paymentVoucherSubReportList));
    }

    @Override
    public List<Object> exportPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String paymentId = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                paymentId = s;
                if (StringUtil.isNullOrEmpty(paymentId)) {
                    paymentId = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                Map<String, Object> voucherMap = new HashMap<String, Object>();
                String view = "";
                JasperPrint jasperPrint = null;

                Date currentDate = Calendar.getInstance().getTime();
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                String currentDateStr = dateFormat.format(currentDate);
//        String paymentId = request.getParameter("bills");
                int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
                int mode = Integer.parseInt(request.getParameter("mode"));
                String companyid = AccountingManager.getCompanyidFromRequest(request);
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));

                KwlReturnObject objItr = null;
                Payment payment = null;
                BillingPayment billingPayment = null;

                try {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    java.util.Date entryDate = null;
                    double total = 0;
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();

                    KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                    KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

                    String currencyid = "";
                    String receiptNumber = "";
                    String paidTo = "";
                    Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
                    PayDetail PayDetail = null;
                    String memo = "";
                    String AccountName = "";
                    boolean ismanycrdb = false;
                    int receiptType = 0;
                    String bankCharges = "";
                    double bankChargesAmount = 0.0;
                    String vendorName = "";
                    String vendorCode = "";
                    String vendorAddress = "";
                    String vendorPhone = "";
                    String vendorFax = "";
                    HashMap<String, Object> rRequestParams = new HashMap<String, Object>();

                    String netinword = "";
                    String cust = request.getParameter("customer");
                    String accname = request.getParameter("accname");
                    String address = request.getParameter("address");
                    double amount = Double.parseDouble(request.getParameter("amount"));


                    boolean iscontraentryflag = false;
                    iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));
                    DateFormat df = (DateFormat) requestParams.get("df");
//            String companyid = sessionHandlerImpl.getCompanyid(request);
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 0));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;


                    double advanceAmount = 0;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
                        advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
                    }
                    boolean advanceFlag = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
                        advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
                    }
                    List listPaymentDetails = null;
                    DateFormat dFormat = new SimpleDateFormat("dd/MM/yyyy");
                    if (mode == StaticValues.AUTONUM_PAYMENT) {
                        objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                        payment = (Payment) objItr.getEntityList().get(0);
                        currencyid = (payment.getCurrency() == null) ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID();
                        receiptNumber = payment.getPaymentNumber();
                        paidTo = payment.getPaidTo() != null ? payment.getPaidTo().getValue() : "";
                        journalEntryDate = payment.getJournalEntry().getEntryDate();
                        PayDetail = payment.getPayDetail();
                        memo = payment.getMemo();
                        Company com = payment.getCompany();
                        ismanycrdb = payment.isIsmanydbcr();
                        receiptType = payment.getReceipttype();
                        bankChargesAmount = payment.getBankChargesAmount();
                        entry = payment.getJournalEntry();
                        filter_names.add("payment.ID");
                        filter_params.add(payment.getID());
                        rRequestParams.put("filter_names", filter_names);
                        rRequestParams.put("filter_params", filter_params);
                        KwlReturnObject pdoresult = accVendorPaymentDAO.getPaymentDetails(rRequestParams);
                        listPaymentDetails = pdoresult.getEntityList();
                        if (!listPaymentDetails.isEmpty()) {
                            PaymentDetail paymentDetail = (PaymentDetail) listPaymentDetails.get(0);
                            Vendor vendor = paymentDetail.getGoodsReceipt().getVendor();
                            if (vendor != null) {
                                vendorName = vendor.getName();
                                vendorCode = vendor.getAcccode();
                                vendorAddress = vendor.getAddress();
                                vendorPhone = vendor.getContactNumber();
                                vendorFax = vendor.getFax();
                            }
                        }


                    } else if (mode == StaticValues.AUTONUM_BILLINGPAYMENT) {
                        objItr = accountingHandlerDAOobj.getObject(BillingPayment.class.getName(), paymentId);
                        billingPayment = (BillingPayment) objItr.getEntityList().get(0);
                        currencyid = (billingPayment.getCurrency() == null) ? currency.getCurrencyID() : billingPayment.getCurrency().getCurrencyID();
                        receiptNumber = billingPayment.getBillingPaymentNumber();
                        paidTo = billingPayment.getPaidTo() != null ? billingPayment.getPaidTo().getValue() : "";
                        journalEntryDate = billingPayment.getJournalEntry().getEntryDate();
                        PayDetail = billingPayment.getPayDetail();
                        memo = billingPayment.getMemo();
                        Company com = billingPayment.getCompany();
                        ismanycrdb = billingPayment.isIsmanydbcr();
                        receiptType = billingPayment.getReceipttype();
                        bankChargesAmount = billingPayment.getBankChargesAmount();
                        entry = billingPayment.getJournalEntry();
                        filter_names.add("billingPayment.ID");
                        filter_params.add(billingPayment.getID());
                        rRequestParams.put("filter_names", filter_names);
                        rRequestParams.put("filter_params", filter_params);
                        KwlReturnObject pdoresult = accVendorPaymentDAO.getBillingPaymentDetails(rRequestParams);
                        listPaymentDetails = pdoresult.getEntityList();

                        if (!listPaymentDetails.isEmpty()) {
                            BillingPaymentDetail paymentDetail = (BillingPaymentDetail) listPaymentDetails.get(0);
                            Vendor vendor = paymentDetail.getBillingGoodsReceipt().getVendor();
                            if (vendor != null) {
                                vendorName = vendor.getName();
                                vendorCode = vendor.getAcccode();
                                vendorAddress = vendor.getAddress();
                                vendorPhone = vendor.getContactNumber();
                                vendorFax = vendor.getFax();

                            }
                        }

                    }

                    List<String> dimensionList = new ArrayList<String>();
                    List<String> dimensionValueList = new ArrayList<String>();
                    List<String> colonList = new ArrayList<String>();
                    if (entry != null) {

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(companyid);
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(entry.getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(moduleid + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                                    Date dateFromDB=null;
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        dimensionList.add(fieldComboData.getValue() != null ? varEntry.getKey().split("_")[1] : "");
                                        dimensionValueList.add(fieldComboData.getValue() != null ? fieldComboData.getValue() : "");
                                        colonList.add(":");
//                                       obj.put(varEntry.getKey(), fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                    }
                                } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                    dimensionList.add(varEntry.getKey().split("_")[1]);
                                    DateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                                    try {
                                        dateFromDB = defaultDateFormat.parse(coldata);
                                        coldata = sdf.format(dateFromDB);
                                    } catch (Exception e) {
                                    }
                                    dimensionValueList.add(coldata);
                                    colonList.add(":");
//                                  obj.put(varEntry.getKey(), df.format(Long.parseLong(coldata)));
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
//                                        obj.put(varEntry.getKey(), coldata);
                                        dimensionList.add(varEntry.getKey().split("_")[1]);
                                        dimensionValueList.add(coldata);
                                        colonList.add(":");
                                    }
                                }
                            }
                        }
                    }
                    if (listPaymentDetails != null && listPaymentDetails.isEmpty() && receiptType==9 ) {
                        PettyCashVoucher pettyCashVoucher = new PettyCashVoucher();
                        ArrayList<PettyCashVoucher> pettyCashVoucherList = new ArrayList<PettyCashVoucher>();
                        view = "pettyCashVoucher";
                        pettyCashVoucher.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
                        //         statementOfAccounts.setAddress(company.getAddress()!=null?company.getAddress():"");
                        pettyCashVoucher.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
                        pettyCashVoucher.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
                        pettyCashVoucher.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
                        pettyCashVoucher.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        pettyCashVoucher.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                        pettyCashVoucher.setDate(currentDateStr);
                        pettyCashVoucher.setPaymentNumber(receiptNumber);
                        pettyCashVoucher.setPaid(paidTo);
                        pettyCashVoucher.setPaidToName("Paid");
                        pettyCashVoucher.setPaidToColon(":");
                        String paymentAccount = "";
                        if (PayDetail != null && PayDetail.getPaymentMethod() != null && PayDetail.getPaymentMethod().getAccount() != null && PayDetail.getPaymentMethod().getAccount().getGroup() != null) {
                            paymentAccount = PayDetail.getPaymentMethod().getAccount().getGroup().getName();
                        }
                        if (!StringUtil.isNullOrEmpty(paymentAccount)) {
                            if (!paymentAccount.equals("Cash")) {
                                Cheque cheque = PayDetail.getCheque();
                                if (PayDetail != null && cheque != null) {
                                    String bankName = cheque.getBankName();
                                    String checkNo = cheque.getChequeNo();
                                    pettyCashVoucher.setPaymentMethod(bankName != null ?  StringUtil.DecodeText(bankName) : "");
                                    pettyCashVoucher.setCheckNo(checkNo != null ? ("by Cheque/DD No " + checkNo) : "");
                                    pettyCashVoucher.setDated(cheque.getDueDate() != null ? ("dated " + dFormat.format(cheque.getDueDate())) : "");
                                }
                                pettyCashVoucher.setBankCharges("& Bank Charges");
                                pettyCashVoucher.setBankChargesAmount(authHandler.formattedAmount(bankChargesAmount, companyid) + " as per details given below");
                            } else {
                                pettyCashVoucher.setPaymentMethod("Cash in Hand");
                            }
                        } else {
                            pettyCashVoucher.setPaymentMethod("Cash in Hand");
                        }


                        pettyCashVoucher.setAddress(company.getAddress());
                        pettyCashVoucherList.add(pettyCashVoucher);
                        voucherMap = getPaymentVoucherSubReport(request, dimensionList, dimensionValueList, colonList, paymentId);
                        voucherMap.put("format", "pdf");
                        String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("imagePath", fileName1);
                        if (templateflag == 1) {
                            voucherMap.put("footerflag", true);
                        } else {
                            voucherMap.put("footerflag", false);  //Mayur B- To hide footer logo for SMS holding Company.
                        }
                        voucherMap.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
                        voucherMap.put("imagePath3", "http://67.192.230.254/test/sms_chinesename.png");
                        voucherMap.put("datasource", new JRBeanCollectionDataSource(pettyCashVoucherList));
                        if (!StringUtil.isNullOrEmpty(paymentAccount) && paymentAccount.equals("Cash")) {
                            voucherMap.put("title", "PETTY CASH VOUCHER");
                            response.setHeader("Content-Disposition", "attachment;filename=\"" + "PettyCashVoucher_" + receiptNumber + ".pdf\"");
                        } else {
//                if (request.getParameter("againstGLFlag") != null) {
//                     voucherMap.put("title", "PAYMENT VOUCHER(GL)");
//                 } else {
//                     voucherMap.put("title", "PAYMENT VOUCHER");
//                 }
                            voucherMap.put("title", "PAYMENT VOUCHER(GL)");
                            response.setHeader("Content-Disposition", "attachment;filename=\"" + "PaymentVoucher(GL)_" + receiptNumber + ".pdf\"");
                        }
                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PettyCashVoucher.jrxml");
                        InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PettyCashVoucherSubReport.jrxml");
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(pettyCashVoucherList);
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                        JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                        voucherMap.put("PettyCashVoucherSubReport", jasperReportSubReport);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
//            List<Object> list = new ArrayList<Object>();
//            JRPdfExporter exp = new JRPdfExporter();
//            list.add(jasperPrint);
//            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT_LIST, list);
////            exp.setParameter(JRPdfExporterParameter.OUTPUT_FILE, new File("/home/krawler/TaxInvoice.pdf"));
//            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
//           exp.exportReport(); 
                        list.add(jasperPrint);
                    } else {
                        PaymentVoucher paymentVoucher = new PaymentVoucher();
                        ArrayList<PaymentVoucher> paymentVoucherList = new ArrayList<PaymentVoucher>();
                        view = "paymentVoucher";
                        paymentVoucher.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
                        //         statementOfAccounts.setAddress(company.getAddress()!=null?company.getAddress():"");
                        paymentVoucher.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
                        paymentVoucher.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
                        paymentVoucher.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
                        paymentVoucher.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        paymentVoucher.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                        paymentVoucher.setDate(currentDateStr);
                        paymentVoucher.setPaymentNumber(receiptNumber);
//            String paymentAccount=PayDetail!=null?PayDetail.getPaymentMethod().getMethodName():"";
                        String paymentAccount = "";
                        if (PayDetail != null && PayDetail.getPaymentMethod() != null && PayDetail.getPaymentMethod().getAccount() != null && PayDetail.getPaymentMethod().getAccount().getGroup() != null) {
                            paymentAccount = PayDetail.getPaymentMethod().getAccount().getGroup().getName();
                        }
                        if (!StringUtil.isNullOrEmpty(paymentAccount)) {
                            if (!paymentAccount.equals("Cash")) {
                                Cheque cheque = PayDetail.getCheque();
                                if (PayDetail != null && cheque != null) {
                                    String bankName = cheque.getBankName();
                                    String checkNo = cheque.getChequeNo();
                                    paymentVoucher.setPaymentMethod(bankName != null ?  StringUtil.DecodeText(bankName) : "");
                                    paymentVoucher.setCheckNo(checkNo != null ? ("by Cheque/DD No " + checkNo) : "");
                                    paymentVoucher.setDated(cheque.getDueDate() != null ? ("dated " + dFormat.format(cheque.getDueDate())) : "");
                                }
                                paymentVoucher.setBankCharges("& Bank Charges");
                                paymentVoucher.setBankChargesAmount(authHandler.formattedAmount(bankChargesAmount, companyid) + " as per details given below");
                            } else {
                                paymentVoucher.setPaymentMethod("Cash in Hand");
                            }
                        } else {
                            paymentVoucher.setPaymentMethod("Cash in Hand");
                        }

                        String dimensionLable = "";
                        for (String dimesion : dimensionList) {
                            dimensionLable += dimesion + "<br>";
                        }
                        paymentVoucher.setDimentionName(dimensionLable);
                        String dimensionValue = "";
                        for (String dimesionValue : dimensionValueList) {
                            dimensionValue += dimesionValue + "<br>";
                        }
                        paymentVoucher.setClassDimension(dimensionValue);
                        String colon = "";
                        for (String col : colonList) {
                            colon += col + "<br>";
                        }
                        paymentVoucher.setColon(colon);
//            paymentVoucher.setClassDimension(totalDimension);
                        paymentVoucher.setMemo(memo);
                        paymentVoucher.setPreparedBy("");
                        paymentVoucher.setAddress(company.getAddress());
                        paymentVoucher.setVendorName(vendorName != null ? vendorName : "");
                        paymentVoucher.setVendorCode(vendorCode != null ? vendorCode : "");
                        paymentVoucher.setVendorAddress(vendorAddress != null ? vendorAddress : "");
                        paymentVoucher.setCustomerPhone(vendorPhone != null ? vendorPhone : "");
                        paymentVoucher.setCustomerFax(vendorFax != null ? vendorFax : "");
                        paymentVoucher.setCustomerOrVendor("Vendor");
                        paymentVoucher.setPaidToName("Paid To");
                        paymentVoucher.setPaidTo(paidTo);
                        getPaymentVoucherSubReportData(request, voucherMap, paymentVoucher, paymentId);
                        paymentVoucherList.add(paymentVoucher);
                        voucherMap.put("format", "pdf");
                        if (request.getParameter("againstGLFlag") != null) {
                            voucherMap.put("title", "PAYMENT VOUCHER(GL)");
                        } else {
                            voucherMap.put("title", "PAYMENT VOUCHER");
                        }
                        String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("imagePath", fileName1);
                        if (templateflag == 1) {
                            voucherMap.put("footerflag", true);
                        } else {
                            voucherMap.put("footerflag", false);  //Mayur B- To hide footer logo for SMS holding Company.
                        }
                        voucherMap.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
                        voucherMap.put("imagePath3", "http://67.192.230.254/test/sms_chinesename.png");
                        voucherMap.put("datasource", new JRBeanCollectionDataSource(paymentVoucherList));
                        if (!StringUtil.isNullOrEmpty(paymentAccount) && paymentAccount.equals("Cash")) {
                            voucherMap.put("title", "PETTY CASH VOUCHER");
                            response.setHeader("Content-Disposition", "attachment;filename=\"" + "PettyCashVoucher_" + receiptNumber + ".pdf\"");
                        } else {
//                if (request.getParameter("againstGLFlag") != null) {
//                    voucherMap.put("title", "PAYMENT VOUCHER(GL)");
//                } else {
//                    voucherMap.put("title", "PAYMENT VOUCHER");
//                }
                            voucherMap.put("title", "PAYMENT VOUCHER");
                            response.setHeader("Content-Disposition", "attachment;filename=\"" + "PaymentVoucher_" + receiptNumber + ".pdf\"");
                        }
                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PaymentVoucher.jrxml");
                        InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PaymentVoucherSubReport.jrxml");
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(paymentVoucherList);
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                        JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                        voucherMap.put("PaymentVoucherSubReport", jasperReportSubReport);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
//            List<Object> list = new ArrayList<Object>();
//            JRPdfExporter exp = new JRPdfExporter();
//            list.add(jasperPrint);
//            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT_LIST, list);
////            exp.setParameter(JRPdfExporterParameter.OUTPUT_FILE, new File("/home/krawler/TaxInvoice.pdf"));
//            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
//
//            exp.exportReport();
                        list.add(jasperPrint);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(accVendorPaymentControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    public Map<String, Object> getPaymentVoucherSubReport(HttpServletRequest request, List<String> dimensionList, List<String> dimensionValueList, List<String> colonList, String paymentId) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        ArrayList<PettyCashVoucherSubReport> pettyCashVoucherSubReportList = new ArrayList<PettyCashVoucherSubReport>();
        Map<String, Object> pettyCashVoucherMap = new HashMap<String, Object>();
        try {

            Payment payment = null;
            BillingPayment billingPayment = null;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            JSONArray jArr = new JSONArray();
//            String paymentId = request.getParameter("bills");
            java.util.Date entryDate = null;
            double total = 0;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            KwlReturnObject objItr = null;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            String currencyid = null;
            String receiptNumber = "";
            Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
            PayDetail PayDetail = null;
            String memo = "";
            String AccountName = "";
            boolean ismanycrdb = false;
            int receiptType = 0;
            HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
            List<Double> debitAccountAmount = new ArrayList<Double>();
            List<Double> debitAccountTaxAmount = new ArrayList<Double>();
            List<Double> debitAccountTotalAmount = new ArrayList<Double>();
            List<Double> creditAccountAmount = new ArrayList<Double>();
            List<Double> creditAccountTaxAmount = new ArrayList<Double>();
            List<Double> creditAccountTotalAmount = new ArrayList<Double>();
            List<String> debitAccountCodeNumber = new ArrayList<String>();
            List<String> debitAccountCodeName = new ArrayList<String>();
            List<String> creditAccountCodeNumber = new ArrayList<String>();
            List<String> creditAccountCodeName = new ArrayList<String>();
            List<String> debitTaxRow = new ArrayList<String>();
            List<String> creditTaxRow = new ArrayList<String>();
            List<String> creditDescription = new ArrayList<String>();
            List<String> debitDescription = new ArrayList<String>();
            List<PettyCashVoucherSubSubReport> pettyCashVoucherSubSubReportList = new ArrayList<PettyCashVoucherSubSubReport>();

            String netinword = "";
            String cust = request.getParameter("customer");
            String accname = request.getParameter("accname");
            String address = request.getParameter("address");
            double amount = 0.0;


            boolean iscontraentryflag = false;
            iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));
            int mode = Integer.parseInt(request.getParameter("mode"));

            double advanceAmount = 0;
            if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
                advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
            }
            boolean advanceFlag = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
                advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
            }

            if (mode == StaticValues.AUTONUM_PAYMENT) {
                objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                payment = (Payment) objItr.getEntityList().get(0);
                currencyid = (payment.getCurrency() == null) ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID();
                receiptNumber = payment.getPaymentNumber();
                journalEntryDate = payment.getJournalEntry().getEntryDate();
                PayDetail = payment.getPayDetail();
                memo = payment.getMemo();
                Company com = payment.getCompany();
                ismanycrdb = payment.isIsmanydbcr();
                receiptType = payment.getReceipttype();

                Iterator itrRow = payment.getJournalEntry().getDetails().iterator();
                while (itrRow.hasNext()) {
                    JournalEntryDetail jed = ((JournalEntryDetail) itrRow.next());
                    if (!jed.isDebit()) {
                        if (payment.getDeposittoJEDetail() != null) {
                            amount = payment.getDeposittoJEDetail().getAmount();
                        } else {
                            amount = jed.getAmount();
                        }
                    }
                }
                amount = authHandler.round(amount, companyid);

            } else if (mode == StaticValues.AUTONUM_BILLINGPAYMENT) {
                objItr = accountingHandlerDAOobj.getObject(BillingPayment.class.getName(), paymentId);
                billingPayment = (BillingPayment) objItr.getEntityList().get(0);
                currencyid = (billingPayment.getCurrency() == null) ? currency.getCurrencyID() : billingPayment.getCurrency().getCurrencyID();
                receiptNumber = billingPayment.getBillingPaymentNumber();
                journalEntryDate = billingPayment.getJournalEntry().getEntryDate();
                PayDetail = billingPayment.getPayDetail();
                memo = billingPayment.getMemo();
                Company com = billingPayment.getCompany();
                ismanycrdb = billingPayment.isIsmanydbcr();
                receiptType = billingPayment.getReceipttype();
            }

//            if (ismanycrdb) {
            if (mode == StaticValues.AUTONUM_PAYMENT) {
                filter_names.add("payment.ID");
                filter_params.add(payment.getID());
                rRequestParams.put("filter_names", filter_names);
                rRequestParams.put("filter_params", filter_params);
                KwlReturnObject pdoresult = accVendorPaymentDAO.getPaymentDetailOtherwise(rRequestParams);
                List<PaymentDetailOtherwise> list1 = pdoresult.getEntityList();
                Iterator pdoRow = list1.iterator();
                if (pdoRow != null && list1.size() > 0) {
                    for (PaymentDetailOtherwise pdo : list1) {
                        if (payment.getID().equals(pdo.getPayment().getID())) {
                            if (payment.isIsmanydbcr()) {
                                if (pdo.isIsdebit()) {
                                    debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountAmount.add(pdo.getAmount());
                                    debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    debitDescription.add((pdo.getDescription()));

                                } else {
                                    creditAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountAmount.add(pdo.getAmount());
                                    creditAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    creditAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    creditTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    creditDescription.add((pdo.getDescription()));
                                }
                            } else {
                                debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountAmount.add(pdo.getAmount());
                                debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                debitDescription.add((pdo.getDescription()));
                            }

                        }
                    }
                }
            } else if (mode == StaticValues.AUTONUM_BILLINGPAYMENT) {
                filter_names.add("billingPayment.ID");
                filter_params.add(billingPayment.getID());
                rRequestParams.put("filter_names", filter_names);
                rRequestParams.put("filter_params", filter_params);
                KwlReturnObject pdoresult = accVendorPaymentDAO.getBillingPaymentDetailOtherwise(rRequestParams);
                List<BillingPaymentDetailOtherwise> list1 = pdoresult.getEntityList();
                Iterator pdoRow = list1.iterator();
                if (pdoRow != null && list1.size() > 0) {
                    for (BillingPaymentDetailOtherwise pdo : list1) {
                        if (billingPayment.getID().equals(pdo.getBillingPayment().getID())) {
                            if (billingPayment.isIsmanydbcr()) {
                                if (pdo.isIsdebit()) {
                                    debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountAmount.add(pdo.getAmount());
                                    debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    debitDescription.add((pdo.getDescription()));

                                } else {
                                    creditAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountAmount.add(pdo.getAmount());
                                    creditAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    creditAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    creditTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    creditDescription.add((pdo.getDescription()));
                                }
                            } else {
                                debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountAmount.add(pdo.getAmount());
                                debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                debitDescription.add((pdo.getDescription()));
                            }

                        }
                    }
                }
            }

//            }
//            AccountName = billingPayment.getPayDetail() != null ? billingPayment.getPayDetail().getPaymentMethod().getAccount().getName() : "";
//            AccountName = payment.getPayDetail() != null ? payment.getPayDetail().getPaymentMethod().getAccount().getName() : "";

            JSONObject obj;
//            if (ismanycrdb) {  //acc.je.accDebit
            int craditDebitFlag = 1;

            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }

            for (int i = 0; i < (craditDebitFlag == 1 ? debitAccountCodeName.size() : creditAccountCodeName.size()); i++) {

                PettyCashVoucherSubReport pettyCashVoucherSubReport = new PettyCashVoucherSubReport();
                pettyCashVoucherSubReport.setAccountCode(craditDebitFlag == 1 ? debitAccountCodeNumber.get(i) : creditAccountCodeNumber.get(i));
                pettyCashVoucherSubReport.setAccountName(craditDebitFlag == 1 ? debitAccountCodeName.get(i) : creditAccountCodeName.get(i));
                pettyCashVoucherSubReport.setAmount(craditDebitFlag == 1 ? authHandler.formattedAmount(debitAccountAmount.get(i), companyid) : authHandler.formattedAmount(creditAccountAmount.get(i), companyid));
                pettyCashVoucherSubReport.setTax(craditDebitFlag == 1 ? authHandler.formattedAmount(debitAccountTaxAmount.get(i), companyid) : authHandler.formattedAmount(creditAccountTaxAmount.get(i), companyid));
                pettyCashVoucherSubReport.setGstTaxable(craditDebitFlag == 1 ? debitTaxRow.get(i) : creditTaxRow.get(i));

                String dimensionLable = "";
                for (String dimesion : dimensionList) {
                    dimensionLable += dimesion + "<br>";
                }
                pettyCashVoucherSubReport.setDimensionName(dimensionLable);
                String dimensionValue = "";
                for (String dimesionValue : dimensionValueList) {
                    dimensionValue += dimesionValue + "<br>";
                }
                pettyCashVoucherSubReport.setClassDimension(dimensionValue);
                String colon = "";
                for (String col : colonList) {
                    colon += col + "<br>";
                }
                //                   pettyCashVoucherSubReport.setDimentionName("Class");
                pettyCashVoucherSubReport.setColon(colon);
                //                   pettyCashVoucherSubReport.setClassDimension(totalDimension);
                pettyCashVoucherSubReport.setPaymentId(payment != null ? payment.getID() : billingPayment.getID());
                pettyCashVoucherSubReport.setDescription(craditDebitFlag == 1 ?  StringUtil.DecodeText(debitDescription.get(i)) :  StringUtil.DecodeText(creditDescription.get(i)));
                pettyCashVoucherSubReport.setTotalAmount(authHandler.formattedAmount(amount, companyid) + "");
                netinword = EnglishNumberToWordsOjb.convert(amount, currency,countryLanguageId);
                pettyCashVoucherSubReport.setAmountInWords(currency.getName() + " " + netinword + " only.");
                pettyCashVoucherSubReportList.add(pettyCashVoucherSubReport);


            }

            for (int i = 0; i < (craditDebitFlag == 1 ? creditAccountCodeName.size() : debitAccountCodeName.size()); i++) {

                PettyCashVoucherSubReport pettyCashVoucherSubReport = new PettyCashVoucherSubReport();
                pettyCashVoucherSubReport.setAccountCode(craditDebitFlag == 1 ? creditAccountCodeNumber.get(i) : debitAccountCodeNumber.get(i));
                pettyCashVoucherSubReport.setAccountName(craditDebitFlag == 1 ? creditAccountCodeName.get(i) : debitAccountCodeName.get(i));
                pettyCashVoucherSubReport.setAmount(craditDebitFlag == 1 ? authHandler.formattedAmount(creditAccountAmount.get(i), companyid) : authHandler.formattedAmount(debitAccountAmount.get(i), companyid));
                pettyCashVoucherSubReport.setTax(craditDebitFlag == 1 ? authHandler.formattedAmount(creditAccountTaxAmount.get(i), companyid) : authHandler.formattedAmount(debitAccountTaxAmount.get(i), companyid));
                pettyCashVoucherSubReport.setGstTaxable(craditDebitFlag == 1 ? (creditTaxRow.get(i)) : (debitTaxRow.get(i)));
                String dimensionLable = "";
                for (String dimesion : dimensionList) {
                    dimensionLable += dimesion + "<br>";
                }
                pettyCashVoucherSubReport.setDimensionName(dimensionLable);
                String dimensionValue = "";
                for (String dimesionValue : dimensionValueList) {
                    dimensionValue += dimesionValue + "<br>";
                }
                pettyCashVoucherSubReport.setClassDimension(dimensionValue);
                String colon = "";
                for (String col : colonList) {
                    colon += col + "<br>";
                }
//                    pettyCashVoucherSubReport.setClassDimension(totalDimension);
                pettyCashVoucherSubReport.setPaymentId(payment != null ? payment.getID() : billingPayment.getID());
                pettyCashVoucherSubReport.setDescription(craditDebitFlag == 1 ?  StringUtil.DecodeText(creditDescription.get(i)) :  StringUtil.DecodeText(debitDescription.get(i)));
                pettyCashVoucherSubReport.setTotalAmount(authHandler.formattedAmount(amount, companyid) + "");
                netinword = EnglishNumberToWordsOjb.convert(amount, currency,countryLanguageId);
                pettyCashVoucherSubReport.setAmountInWords(currency.getName() + " " + netinword + " only.");
                pettyCashVoucherSubReportList.add(pettyCashVoucherSubReport);

            }



            if (advanceFlag) {
                obj = new JSONObject();
                obj.put("1", "Advance" + " : ");
                obj.put("2", authHandlerDAOObj.getFormattedCurrency(advanceAmount, currencyid, companyid));
                jArr.put(obj);

            }

            double totalAdvanceAmount = amount;
            if (advanceFlag) {
                totalAdvanceAmount = amount + advanceAmount;
            }

            pettyCashVoucherMap.put("PettyCashVoucherSubReportData", new JRBeanCollectionDataSource(pettyCashVoucherSubReportList));

        } catch (JSONException ex) {
            Logger.getLogger(accVendorPaymentControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerLedgerJasper : " + ex.getMessage(), ex);
        }

        return pettyCashVoucherMap;
    }

    public void getPaymentVoucherSubReportData(HttpServletRequest request, Map<String, Object> voucherMap, PaymentVoucher paymentVoucher, String paymentId) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        ArrayList<PaymentVoucherSubReport> paymentVoucherSubReportList = new ArrayList<PaymentVoucherSubReport>();


        Payment payment = null;
        BillingPayment billingPayment = null;
        JSONArray jArr = new JSONArray();
//        String paymentId = request.getParameter("bills");
        java.util.Date entryDate = null;
        double total = 0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
        KwlReturnObject objItr = null;
        KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
        KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
        
//        String currencyid = (payment.getCurrency() == null) ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID();
        String receiptNumber = "";
        Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
        PayDetail PayDetail = null;
        String memo = "";
        String AccountName = "";
        boolean ismanycrdb = false;
        int receiptType = 0;
        HashMap<String, Object> rRequestParams = new HashMap<String, Object>();

        List<PettyCashVoucherSubSubReport> pettyCashVoucherSubSubReportList = new ArrayList<PettyCashVoucherSubSubReport>();
        HashMap pdoMAp = new HashMap();

        String netinword = "";
        String cust = request.getParameter("customer");
        String accname = request.getParameter("accname");
        String address = request.getParameter("address");
        double amount = Double.parseDouble(request.getParameter("amount"));


        boolean iscontraentryflag = false;
        iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));


        double advanceAmount = 0;
        if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
            advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
        }
        boolean advanceFlag = false;
        if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
            advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
        }
        int mode = Integer.parseInt(request.getParameter("mode"));
        DateFormat dFormat = new SimpleDateFormat("dd/MM/yyyy");
        
        int countryLanguageId = Constants.OtherCountryLanguageId; // 0
        KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
        ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
        if (extraCompanyPreferences.isAmountInIndianWord()) {
            countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
        }        
        
        if (mode == StaticValues.AUTONUM_PAYMENT) {
            objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
            payment = (Payment) objItr.getEntityList().get(0);
            receiptNumber = payment.getPaymentNumber();
            journalEntryDate = payment.getJournalEntry().getEntryDate();
            PayDetail = payment.getPayDetail();
            memo = payment.getMemo();
            Company com = payment.getCompany();
            ismanycrdb = payment.isIsmanydbcr();
            receiptType = payment.getReceipttype();
            filter_names.add("payment.ID");
            filter_params.add(payment.getID());
            rRequestParams.put("filter_names", filter_names);
            rRequestParams.put("filter_params", filter_params);
            KwlReturnObject pdoresult = accVendorPaymentDAO.getPaymentDetails(rRequestParams);
            List<PaymentDetail> list1 = pdoresult.getEntityList();
            Iterator pdoRow = list1.iterator();
            double totalAmount = 0.0;
            if (pdoRow != null && list1.size() > 0) {
                for (PaymentDetail pdo : list1) {
                    if (payment.getID().equals(pdo.getPayment().getID())) {
                        GoodsReceipt goodsReceipt = pdo.getGoodsReceipt();
                        PaymentVoucherSubReport paymentVoucherSubReport = new PaymentVoucherSubReport();
                        paymentVoucherSubReport.setInvoiceNumber(goodsReceipt.getGoodsReceiptNumber());
//                        paymentVoucherSubReport.setInvoiceDate((goodsReceipt.getJournalEntry() != null && goodsReceipt.getJournalEntry().getEntryDate() != null) ? dFormat.format(goodsReceipt.getJournalEntry().getEntryDate()) : "");
                        paymentVoucherSubReport.setInvoiceDate(goodsReceipt.getCreationDate() != null ? dFormat.format(goodsReceipt.getCreationDate()) : "");
                        paymentVoucherSubReport.setAmount(pdo.getAmount() + "");
                        totalAmount += pdo.getAmount();
                        paymentVoucherSubReport.setInvCurrency(goodsReceipt.getCurrency().getSymbol());
                        paymentVoucher.setInvCurrency(goodsReceipt.getCurrency().getSymbol());
                        paymentVoucher.setTotalAmount(authHandler.formattedAmount(totalAmount, companyid) + "");
                        paymentVoucher.setAmountInWords(goodsReceipt.getCurrency().getName() + " " + EnglishNumberToWordsOjb.convert(authHandler.round(totalAmount, companyid), goodsReceipt.getCurrency(),countryLanguageId) + " only.");
                        paymentVoucherSubReport.setTotalAmount(authHandler.formattedAmount(totalAmount, companyid) + "");
                        paymentVoucherSubReport.setAmountInWords(goodsReceipt.getCurrency().getName() + " " + EnglishNumberToWordsOjb.convert(authHandler.round(totalAmount, companyid), goodsReceipt.getCurrency(),countryLanguageId) + " only.");
                        paymentVoucherSubReport.setMemo(memo != null ? memo : "");
                        paymentVoucherSubReportList.add(paymentVoucherSubReport);


                    }
                }
            }

        } else if (mode == StaticValues.AUTONUM_BILLINGPAYMENT) {
            objItr = accountingHandlerDAOobj.getObject(BillingPayment.class.getName(), paymentId);
            billingPayment = (BillingPayment) objItr.getEntityList().get(0);
            receiptNumber = billingPayment.getBillingPaymentNumber();
            journalEntryDate = billingPayment.getJournalEntry().getEntryDate();
            PayDetail = billingPayment.getPayDetail();
            memo = billingPayment.getMemo();
            Company com = billingPayment.getCompany();
            ismanycrdb = billingPayment.isIsmanydbcr();
            receiptType = billingPayment.getReceipttype();

            filter_names.add("billingPayment.ID");
            filter_params.add(billingPayment.getID());
            rRequestParams.put("filter_names", filter_names);
            rRequestParams.put("filter_params", filter_params);
            KwlReturnObject pdoresult = accVendorPaymentDAO.getBillingPaymentDetails(rRequestParams);
            List<BillingPaymentDetail> list1 = pdoresult.getEntityList();
            Iterator pdoRow = list1.iterator();
            double totalAmount = 0.0;
            if (pdoRow != null && list1.size() > 0) {
                for (BillingPaymentDetail pdo : list1) {
                    BillingGoodsReceipt billingGoodsReceipt = pdo.getBillingGoodsReceipt();
                    if (billingPayment.getID().equals(pdo.getBillingPayment().getID())) {
                        PaymentVoucherSubReport paymentVoucherSubReport = new PaymentVoucherSubReport();
                        paymentVoucherSubReport.setInvoiceNumber(billingGoodsReceipt.getBillingGoodsReceiptNumber());
                        paymentVoucherSubReport.setInvoiceDate((billingGoodsReceipt.getJournalEntry() != null && billingGoodsReceipt.getJournalEntry().getEntryDate() != null) ? dFormat.format(billingGoodsReceipt.getJournalEntry().getEntryDate()) : "");
                        paymentVoucherSubReport.setAmount(pdo.getAmount() + "");
                        paymentVoucherSubReport.setInvCurrency(billingGoodsReceipt.getCurrency().getSymbol());
                        totalAmount += pdo.getAmount();
                        paymentVoucherSubReport.setTotalAmount(authHandler.formattedAmount(totalAmount, companyid) + "");
                        paymentVoucher.setInvCurrency(billingGoodsReceipt.getCurrency().getSymbol());
                        paymentVoucher.setTotalAmount(authHandler.formattedAmount(totalAmount, companyid) + "");
                        paymentVoucher.setAmountInWords(billingGoodsReceipt.getCurrency().getName() + " " + EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalAmount)), billingGoodsReceipt.getCurrency(),countryLanguageId) + " only.");
                        paymentVoucherSubReport.setMemo(memo != null ? memo : "");
                        paymentVoucherSubReportList.add(paymentVoucherSubReport);

                    }
                }
            }
        }


        voucherMap.put("PaymentVoucherSubReportData", new JRBeanCollectionDataSource(paymentVoucherSubReportList));
    }

    @Override
    public List<Object> exportContraPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String paymentId = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                paymentId = s;
                Map<String, Object> voucherMap = new HashMap<String, Object>();
                String view = "";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                Date currentDate = Calendar.getInstance().getTime();
                DateFormat dateFormat = new SimpleDateFormat("MMMM dd, yyyy");
                String currentDateStr = dateFormat.format(currentDate);
//        String paymentId = request.getParameter("bills");
                int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
                int mode = Integer.parseInt(request.getParameter("mode"));
                String companyid = AccountingManager.getCompanyidFromRequest(request);
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));

                KwlReturnObject objItr = null;
                Payment payment = null;
                BillingPayment billingPayment = null;

                try {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    java.util.Date entryDate = null;
                    double total = 0;
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();

                    KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                    KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

                    String receiptNumber = "";
                    Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
                    PayDetail PayDetail = null;
                    String memo = "";
                    String vendorName = "";
                    String vendorCode = "";
                    String vendorAddress = "";
                    HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
                    String journalEntryId = "";
                    if (request.getParameter("journalentryid") != null) {
                        journalEntryId = request.getParameter("journalentryid");
                    }

                    List listPaymentDetails = null;
                    KwlReturnObject resultEntryId = accountingHandlerDAOobj.getObject(JournalEntry.class.getName(), journalEntryId);
                    JournalEntry journalEntry = (JournalEntry) resultEntryId.getEntityList().get(0);
                    PettyCashVoucher pettyCashVoucher = new PettyCashVoucher();
                    ArrayList<PettyCashVoucher> pettyCashVoucherList = new ArrayList<PettyCashVoucher>();
                    view = "paymentContraVoucher";
                    pettyCashVoucher.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
                    //         statementOfAccounts.setAddress(company.getAddress()!=null?company.getAddress():"");
                    pettyCashVoucher.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
                    pettyCashVoucher.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
                    pettyCashVoucher.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
                    pettyCashVoucher.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    pettyCashVoucher.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                    pettyCashVoucher.setDate(currentDateStr);
                    pettyCashVoucher.setPaymentNumber(journalEntry.getEntryNumber());
//            String paymentAccount=PayDetail!=null?PayDetail.getPaymentMethod().getMethodName():"";
//            if(paymentAccount.equals("Cheque")){
//                pettyCashVoucher.setPaymentMethod(PayDetail.getCheque().getBankName());
//            }else{
//                pettyCashVoucher.setPaymentMethod("Cash in Hand");
//            }
                    pettyCashVoucher.setAddress(company.getAddress());
                    voucherMap = getContraPaymentVoucherSubReportData(request, pettyCashVoucher);
                    pettyCashVoucherList.add(pettyCashVoucher);
                    voucherMap.put("format", "pdf");
                    voucherMap.put("title", "CONTRA VOUCHER");
                    String fileName1 = companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    voucherMap.put("imagePath", StorageHandler.GetDocStorePath() + fileName1);
                    if (templateflag == 1) {
                        voucherMap.put("footerflag", true);
                    } else {
                        voucherMap.put("footerflag", false);  //Mayur B- To hide footer logo for SMS holding Company.
                    }
                    voucherMap.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
//            voucherMap.put("datasource", new JRBeanCollectionDataSource(pettyCashVoucherList));
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + "PaymentContraVoucher" + ".pdf\"");
                    InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PettyCashVoucher.jrxml");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/ContraPaymentVoucherSubReport.jrxml");
                    JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                    jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

                    voucherMap.put("PettyCashVoucherSubReport", jasperReportSubReport);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(pettyCashVoucherList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accVendorPaymentControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    public Map<String, Object> getContraPaymentVoucherSubReportData(HttpServletRequest request, PettyCashVoucher pettyCashVoucher) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        ArrayList<ContraPaymentVoucherSubReport> pettyCashVoucherSubReportList = new ArrayList<ContraPaymentVoucherSubReport>();
        Map<String, Object> voucherMap = new HashMap<String, Object>();
        JSONArray jArr = new JSONArray();
        try {
            String journalEntryId = "";
            if (request.getParameter("journalentryid") != null) {
                journalEntryId = request.getParameter("journalentryid");
            }
            HashMap<String, Object> requestMap = new HashMap<String, Object>();
            KwlReturnObject result = accountingHandlerDAOobj.getObject(JournalEntry.class.getName(), journalEntryId);
            JournalEntry journalEntry = (JournalEntry) result.getEntityList().get(0);
            String companyId = request.getParameter("companyid");
            KwlReturnObject resultCurrency = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) resultCurrency.getEntityList().get(0);
            requestMap.put("companyid", companyId);
            requestMap.put("jeIds", "'" + journalEntryId + "'");
            KwlReturnObject jedresult = accJournalEntryobj.getJournalEntryDetailsForReport(requestMap);
            Iterator itr = jedresult.getEntityList().iterator();
            String prevJE = "";

            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
            DateFormat df = (DateFormat) requestParams.get("df");
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> fieldrequestParams = new HashMap();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 0));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

            List<String> dimensionList = new ArrayList<String>();
            List<String> dimensionValueList = new ArrayList<String>();
            List<String> colonList = new ArrayList<String>();
            if (journalEntry != null) {

                Map<String, Object> variableMap = new HashMap<String, Object>();
                HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                Detailfilter_names.add("companyid");
                Detailfilter_params.add(companyid);
                Detailfilter_names.add("journalentryId");
                Detailfilter_params.add(journalEntry.getID());
                Detailfilter_names.add("moduleId");
                Detailfilter_params.add(moduleid + "");
                invDetailRequestParams.put("filter_names", Detailfilter_names);
                invDetailRequestParams.put("filter_params", Detailfilter_params);
                KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                if (idcustresult.getEntityList().size() > 0) {
                    AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                    AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                    DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                                    Date dateFromDB=null;
                    for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                        String coldata = varEntry.getValue().toString();
                        if (customFieldMap.containsKey(varEntry.getKey())) {
                            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                            FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                            if (fieldComboData != null) {
                                dimensionList.add(fieldComboData.getValue() != null ? varEntry.getKey().split("_")[1] : "");
                                dimensionValueList.add(fieldComboData.getValue() != null ? fieldComboData.getValue() : "");
                                colonList.add(":");
//                                       obj.put(varEntry.getKey(), fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                            }
                        } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                            dimensionList.add(varEntry.getKey().split("_")[1]);
                            DateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                            try {
                                dateFromDB = defaultDateFormat.parse(coldata);
                                coldata = sdf.format(dateFromDB);
                            } catch (Exception e) {
                            }
                            dimensionValueList.add(coldata);
                            colonList.add(":");
//                                  obj.put(varEntry.getKey(), df.format(Long.parseLong(coldata)));
                        } else {
                            if (!StringUtil.isNullOrEmpty(coldata)) {
//                                        obj.put(varEntry.getKey(), coldata);
                                dimensionList.add(varEntry.getKey().split("_")[1]);
                                dimensionValueList.add(coldata);
                                colonList.add(":");
                            }
                        }
                    }
                }
            }
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }          

            while (itr.hasNext()) {
                JournalEntryDetail entry = (JournalEntryDetail) itr.next();
                String jeId = entry.getJournalEntry().getID();
                String currencyid = entry.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : entry.getJournalEntry().getCurrency().getCurrencyID();
                JSONObject obj = new JSONObject();
                String str = authHandler.getCompleteDFStringForAmount("0.", companyId);
                DecimalFormat decimalFormat = new DecimalFormat(str);

                ContraPaymentVoucherSubReport contraPaymentVoucherSubReport = new ContraPaymentVoucherSubReport();
                contraPaymentVoucherSubReport.setAccountName(entry.getAccount().getName());
                contraPaymentVoucherSubReport.setAccountCode(StringUtil.isNullOrEmpty(entry.getAccount().getAcccode()) ? "" : entry.getAccount().getAcccode());
                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestMap, entry.getAmount(), currencyid, entry.getJournalEntry().getEntryDate(), entry.getJournalEntry().getExternalCurrencyRate());
                if (entry.isDebit() == true) {
                    contraPaymentVoucherSubReport.setDebit(decimalFormat.format(bAmt.getEntityList().get(0)));
                } else {
                    contraPaymentVoucherSubReport.setCredit(decimalFormat.format(bAmt.getEntityList().get(0)));
                    pettyCashVoucher.setPaymentMethod((StringUtil.isNullOrEmpty(entry.getAccount().getAcccode()) ? "" : entry.getAccount().getAcccode()) + "  " + entry.getAccount().getName());
                }
                String dimensionLable = "";
                for (String dimesion : dimensionList) {
                    dimensionLable += dimesion + "<br>";
                }
                contraPaymentVoucherSubReport.setDimentionName(dimensionLable);
                String dimensionValue = "";
                for (String dimesionValue : dimensionValueList) {
                    dimensionValue += dimesionValue + "<br>";
                }
                contraPaymentVoucherSubReport.setClassDimension(dimensionValue);
                String colon = "";
                for (String col : colonList) {
                    colon += col + "<br>";
                }
                contraPaymentVoucherSubReport.setColon(colon);
                contraPaymentVoucherSubReport.setDescription( StringUtil.DecodeText(entry.getDescription()));
                contraPaymentVoucherSubReport.setTotalAmount(decimalFormat.format(bAmt.getEntityList().get(0)));
                String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(bAmt.getEntityList().get(0).toString()), currency,countryLanguageId);
                contraPaymentVoucherSubReport.setAmountInWords(currency.getName() + " " + netinword);
                pettyCashVoucherSubReportList.add(contraPaymentVoucherSubReport);
            }
            voucherMap.put("PettyCashVoucherSubReportData", new JRBeanCollectionDataSource(pettyCashVoucherSubReportList));

        } catch (Exception ex) {
            Logger.getLogger(accVendorPaymentControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerLedgerJasper : " + ex.getMessage(), ex);
        }
        return voucherMap;
    }

   @Override
    public List<Object> exportCustomerInvoiceReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
        List<Object> list = new ArrayList<Object>();

        ArrayList order_by = new ArrayList(), order_type = new ArrayList();
        order_by.add("srno");
        order_type.add("asc");
        invRequestParams.put("order_by", order_by);
        invRequestParams.put("order_type", order_type);
        KwlReturnObject idresult = null;
        String dONumber = "";
        String customerName = "";
        String customercode = "";
        String customerContactPerson = "";
        String customerEmail = "";
        String terms = "";
        String billTo = "";
        String billAddr = "";
        String shipTo = "";
        String memo = "";
        String salesPerson = null;
        String billtoAddress = "";
        boolean isInclude = false; //Hiding or Showing P.O. NO field in single PDF 
        Iterator itr = null;
        String linkTo = "-";
        Discount totalDiscount = null;
        double totaltax = 0, discountTotalQuotation = 0;
        double totalAmount = 0;
        double taxPercent = 0;
        double rowTaxAmount = 0;
        String mainTaxName = "";
        int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
        int templateflag = Integer.parseInt(request.getParameter("templateflag"));
        boolean isLetter = request.getParameter("isLetter") != null ? Boolean.parseBoolean(request.getParameter("isLetter")) : false;
        Map<String, Object> invoiceMap = new HashMap<String, Object>();
        String view = "taxInvoiceSubReport";

        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;


                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                List<TaxInvoiceSubReport> invoiceSubReportsList = new ArrayList<TaxInvoiceSubReport>();
                TaxInvoice taxInvoice = new TaxInvoice();
                TaxInvoice taxInvoiceDuplicate = new TaxInvoice();
                TaxInvoice taxInvoiceTriplicate = new TaxInvoice();
                ArrayList<TaxInvoice> taxInvoiceList = new ArrayList<TaxInvoice>();
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df = (DateFormat) requestParamsCustom.get("df");
                    //            String companyid = sessionHandlerImpl.getCompanyid(request);
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Object> fieldInLinerequestParams = new HashMap();
                    HashMap<String, String> customInLineFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customInLineDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 1));
                    fieldInLinerequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldInLinerequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 1));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> replaceFieldInLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    HashMap<String, Integer> FieldInLineMap = accAccountDAOobj.getFieldParamsCustomMap(fieldInLinerequestParams, replaceFieldInLineMap, customInLineFieldMap, customInLineDateFieldMap);
                    JournalEntry entry = null;


                    String gstNo = "";
                    boolean addShipTo = true;
                    Company com = null;
                    Account cEntry = null;
                    String invno = "";
                    String invId = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String uem = "";
                    double total = 0;
                    String currencyid = "";
                    DecimalFormat quantityFormat = new DecimalFormat("0.0000");
                    DecimalFormat quantFormat = new DecimalFormat("0");
                    DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                    KWLCurrency currency = null;
                    if (mode == StaticValues.AUTONUM_INVOICE) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), billid);
                        Invoice inv = (Invoice) cap.getEntityList().get(0);
                        invId = inv.getID();
                        String approverName = "";
                        if (inv.getApprover() != null) {
                            approverName = inv.getApprover().getFirstName() + " " + inv.getApprover().getLastName();
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        addShipTo = true;
                        boolean isGSTIncluded = inv.isGstIncluded();
                        com = inv.getCompany();
                        cEntry = inv.getCustomerEntry().getAccount();
                        invno = inv.getInvoiceNumber();
                        entryDate = inv.getJournalEntry().getEntryDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipDate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();
                        poRefno = inv.getPoRefNumber() == null ? "" : inv.getPoRefNumber();
                        filter_names.add("invoice.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? inv.getCustomerEntry().getAccount().getName() : inv.getCustomer().getName();
                        customercode = inv.getCustomer().getAcccode() == null ? inv.getCustomerEntry().getAccount().getAcccode() : inv.getCustomer().getAcccode();
                        String billToAdd = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), true);
                        billAddr = StringUtil.isNullOrEmpty(billToAdd) ? inv.getBillTo() != null ? inv.getBillTo().replaceAll("\n", "<br>") : "" : billToAdd.replaceAll("\n", "<br>");
                        
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("customerid", inv.getCustomer().getID());
                        CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                        if (customerAddressDetails != null) {
                            customerContactPerson = StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : customerAddressDetails.getContactPerson();
                        }
                        
                        if (templateflag == Constants.spaceTec_templateflag) {
                            billAddr = inv.getBillingShippingAddresses()==null?"":StringUtil.isNullOrEmpty(inv.getBillingShippingAddresses().getBillingAddress())?"":inv.getBillingShippingAddresses().getBillingAddress();
                            billAddr = billAddr.replaceAll("\n", "<br>");
                            billAddr += (StringUtil.isNullOrEmpty(customerContactPerson) ? "" : "<br>" + customerContactPerson) + (StringUtil.isNullOrEmpty(customercode) ? "" : "<br>" + customercode);
                        }
        //              billAddr = inv.getBillTo() != null ? inv.getBillTo().replaceAll("\n", "<br>") : "";
                        customerEmail = inv.getCustomer() != null ? inv.getCustomer().getEmail() : "";
                        uem = inv.getCustomer() != null ? (inv.getCustomer().getAltContactNumber() != null ? inv.getCustomer().getAltContactNumber() : "") : "";
                        gstNo = inv.getCustomer() != null ? inv.getCustomer().getOther() : "";
                        billTo = "Bill To";
                        isInclude = false;
                        if (inv.getMasterSalesPerson() != null) {   //if User Class returns the Null Valu
                            salesPerson = inv.getMasterSalesPerson() != null ? inv.getMasterSalesPerson().getValue() : "";
                        } else {  //if salesperson class has no username
                            salesPerson = "";
                        }

                        int days = 0;
                        if (inv.getTermid() != null) {
                            days = inv.getTermid().getTermdays();
                        } else {
                            Calendar dt1 = Calendar.getInstance();
                            dt1.setTime(inv.getJournalEntry().getEntryDate());
                            Calendar dt2 = Calendar.getInstance();
                            dt2.setTime(inv.getDueDate());
                            dt2.set(Calendar.YEAR, dt1.get(Calendar.YEAR));
                            int withDAY = dt1.get(Calendar.DAY_OF_YEAR);
                            int toDAY = dt2.get(Calendar.DAY_OF_YEAR);
                            days = toDAY - withDAY;
                        }
                        terms = days + " Days";
                        String shipToAdd = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);
                        shipTo = StringUtil.isNullOrEmpty(shipToAdd) ? inv.getShipTo() != null ? inv.getShipTo().replaceAll("\n", "<br>") : "" : shipToAdd.replaceAll("\n", "<br>");
//              shipTo = inv.getShipTo() != null ? inv.getShipTo().replaceAll("\n", "<br>") : "";
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo();
                        entry = inv.getJournalEntry();
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        InvoiceDetail row = null;
                        int i=0;
                        while (itr.hasNext()) {
                            TaxInvoiceSubReport invoiceSubReport = new TaxInvoiceSubReport();
                            String prodName = "";
                            String prodCode = "";
                            String prodDesc = "";
                            String partNo = "";
                            Phrase phrase1 = new Phrase();
                            Phrase phrase2 = new Phrase();
                            i++;
                            if(i==1 && templateflag == Constants.spaceTec_templateflag && isLetter==true)
                            { for(int j=0;j<=4;j++)
                               {
                                TaxInvoiceSubReport invoiceSubReport1 = new TaxInvoiceSubReport();
                                invoiceSubReportsList.add(invoiceSubReport1);
                               } 
                            }
                            double quantity = 0, discountQuotation = 0, discountOrder = 0;
                            double rate = 0;
                            Discount discount = null;
                            String uom = "";
                            double amount1 = 0;
                            row = (InvoiceDetail) itr.next();
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc = row.getDescription();
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())) {
                                    prodDesc = row.getInventory().getProduct().getDescription();
                                }
                            }
                            prodName = !StringUtil.isNullOrEmpty(row.getInventory().getProduct().getName()) ? row.getInventory().getProduct().getName() : "";
                            prodCode = !StringUtil.isNullOrEmpty(row.getInventory().getProduct().getProductid()) ? row.getInventory().getProduct().getProductid() : "";
                            if (!addShipTo) {
                                if (row.getDeliveryOrderDetail() != null && !StringUtil.isNullOrEmpty(row.getDeliveryOrderDetail().getPartno().trim())) {
                                    String partno = row.getDeliveryOrderDetail().getPartno();
                                    partNo = partno;
                                }
                            }

                            invoiceSubReport.setRateLabel("U Price"); //label of unit price is made as dynamic which may change as per including GST
                            
                            KwlReturnObject InvoiceDo = accInvoiceDAOobj.getDOFromInvoices(inv.getID(), companyid, true);
                            int count = InvoiceDo.getRecordTotalCount();
                            List InvoiceDoList = InvoiceDo.getEntityList();
                            Iterator itr1 = InvoiceDoList.iterator();
                            while (itr1.hasNext()) {
                                Object[] oj = (Object[]) itr1.next();
                                dONumber = oj[0] != null ? oj[0].toString() : "";
                            }

                            if (row.getDeliveryOrderDetail() != null && StringUtil.isNullOrEmpty(dONumber)) {
                                dONumber = row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber();
                            }
                            /*
                                label of unit price is made as dynamic which may change as per including GST
                            */
                            if(isGSTIncluded) {
                                invoiceSubReport.setRateLabel("U Price </br>Incl GST"); 
                            } else {
                                invoiceSubReport.setRateLabel("U Price"); 
                            }
                            quantity = row.getInventory().getQuantity();
                            if(isGSTIncluded) {
                                rate = row.getRateincludegst();
                            } else {
                                rate = row.getRate();
                            }
                            discount = row.getDiscount();
                            uom = row.getInventory().getProduct().getUnitOfMeasure() == null ? "" : row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA();
                            if (row.getDeliveryOrderDetail() != null) {
                                linkTo = row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber();
                            } else if (row.getSalesorderdetail() != null) {
                                linkTo = row.getSalesorderdetail().getSalesOrder().getSalesOrderNumber();
                            } else if (row.getQuotationDetail() != null) {
                                linkTo = row.getQuotationDetail().getQuotation().getquotationNumber();
                            }
                            double rowTaxPercent = 0;
                            double taxAmount = 0;
                            String rowTaxName = "";
                            amount1 = authHandler.round(rate * quantity, companyid);
                            amount1 -= row.getDiscount() != null ? row.getDiscount().getDiscountValue() : 0.0;
                            if (row != null && row.getTax() != null) {
                                boolean isRowTaxApplicable = false;
                                requestParams.put("transactiondate", entryDate);
                                requestParams.put("taxid", row.getTax() != null ? row.getTax().getID() : "");
                                requestParams.put("companyid", companyid);
                                KwlReturnObject result = accTaxObj.getTax(requestParams);
                                List taxList = result.getEntityList();
                                if (!taxList.isEmpty()) {
                                    Object[] taxObj = (Object[]) taxList.get(0);
                                    rowTaxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                                    rowTaxName = row.getTax().getName();
//                                    taxAmount += amount1 * rowTaxPercent / 100;
                                    isRowTaxApplicable = true;
                                }
                                if (row.isWasRowTaxFieldEditable()) {
                                    if (isRowTaxApplicable) {
                                        taxAmount += row.getRowTaxAmount();
                                        taxAmount += row.getRowTermTaxAmount();
                                    }
                                } else {
                                    taxAmount += amount1 * rowTaxPercent / 100;
                                }
                            }
                            // ## Get Custom Column Data 
                            Map<String, Object> variableMap = new HashMap<String, Object>();
                            HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                            ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                            Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
                            Detailfilter_params.add(row.getID());
                            invDetailRequestParams.put("filter_names", Detailfilter_names);
                            invDetailRequestParams.put("filter_params", Detailfilter_params);
                            KwlReturnObject idcustresult = accInvoiceDAOobj.getInvoiceDetailsCustomData(invDetailRequestParams);
                            if (idcustresult.getEntityList().size() > 0) {
                                AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustresult.getEntityList().get(0);
                                replaceFieldMap.clear();
                                AccountingManager.setCustomColumnValues(jeDetailCustom, FieldInLineMap, replaceFieldInLineMap, variableMap);
                                for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                    String coldata = varEntry.getValue().toString();
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        if ((varEntry.getKey().split("_")[1]).equals("No Of Pkg")) {
                                            invoiceSubReport.setNoOfPkg(coldata);
                                        }
//                                obj.put(varEntry.getKey(), coldata);
                                    }
                                }
                            }
                            invoiceSubReport.setsNo(row.getSrno() + "");
                            invoiceSubReport.setCode(prodCode);
                            if(templateflag==Constants.spaceTec_templateflag){
//                                prodDesc=prodDesc.replaceAll("\n", "<br>");
//                                prodDesc=prodDesc.replaceAll("    ", "&nbsp&nbsp&nbsp&nbsp");
                                invoiceSubReport.setProductDescription(prodDesc);
                            }else{
                                invoiceSubReport.setProductDescription(prodDesc);
                            }
                            invoiceSubReport.setName(prodName);
                            if (templateflag == Constants.spaceTec_templateflag) {
                                invoiceSubReport.setQty(quantFormat.format(quantity)+" "+uom);
                            } else {
                                invoiceSubReport.setQty(quantityFormat.format(quantity));
                            }
                            invoiceSubReport.setuPrice(authHandler.getFormattedUnitPrice(rate, companyid));
                            invoiceSubReport.setProductAmount(authHandler.formattedAmount(amount1, companyid));
                            invoiceSubReport.setAmountCurrency(" in " + currency.getCurrencyCode());
                            invoiceSubReportsList.add(invoiceSubReport);
                            total += amount1;
                            rowTaxAmount += taxAmount;
                        }

                        totalDiscount = inv.getDiscount();
                        totaltax = inv.getTaxEntry() != null ? inv.getTaxEntry().getAmount() : 0;
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
                        totalAmount = inv.getCustomerEntry().getAmount();
                    }
                    totalAmount = authHandler.round(totalAmount, companyid);
                    List<String> customFieldList = new ArrayList<String>();
                    if (entry != null) {

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(companyid);
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(entry.getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(moduleid + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                                    Date dateFromDB=null;
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        if (fieldComboData.getValue() != null && (varEntry.getKey().split("_")[1]).equals("Ordered By")) {
                                            customFieldList.add(fieldComboData.getValue());
                                        }
                                    }
                                } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Ordered By")) {
                                        DateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                                        try {
                                            dateFromDB = defaultDateFormat.parse(coldata);
                                            coldata = sdf.format(dateFromDB);
                                        } catch (Exception e) {
                                        }
                                        customFieldList.add(coldata);
                                    }
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Ordered By")) {
                                            customFieldList.add(coldata);
                                        }
                                    }
                                }
                            }
                        }

                    }

                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);

                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    List<Terms> termsList = new ArrayList<Terms>();
                    if (!StringUtil.isNullOrEmpty(invId)) {
                        HashMap<String, Object> requestParam = new HashMap();
                        requestParam.put("invoiceid", invId);
                        KwlReturnObject curresult = null;
                        curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
                        List<InvoiceTermsMap> termMap = curresult.getEntityList();
                        for (InvoiceTermsMap invoiceTerMap : termMap) {
                            InvoiceTermsSales mt = invoiceTerMap.getTerm();
                            double termAmnt = invoiceTerMap.getTermamount();
                            Terms termsObj = new Terms();
                            termsObj.setTermName(mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)"));
//                    termsObj.setTermValue(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid));
                            termsObj.setTermValue(authHandler.formattedAmount((termAmnt > 0 ? termAmnt : (termAmnt * -1)), companyid));
                            termsList.add(termsObj);
                        }
                    }

                    taxInvoice.setCustcode(customercode != null ? customercode : "");
                    taxInvoice.setCustname(customerName != null ? customerName : "");
                    taxInvoice.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
                    taxInvoice.setAddress(company.getAddress());
                    taxInvoice.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    taxInvoice.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
//            taxInvoice.setGstRegNo(gstNo);
                    taxInvoice.setInvoiceNo(invno);
                    taxInvoice.setdONomber(dONumber);
                    taxInvoice.setpONumber(poRefno);
                    taxInvoice.setDate(dateFormat.format(entryDate));
                    taxInvoice.setDuedate(dateFormat.format(dueDate));
                    taxInvoice.setPaymentTerms(terms);
                    taxInvoice.setSalesPerson(salesPerson);
                    taxInvoice.setSoldToAddress(billAddr);
                    taxInvoice.setSubtotal(authHandler.formattedAmount(total, companyid));
                    taxInvoice.setGstValue(authHandler.formattedAmount((rowTaxAmount + totaltax), companyid));
                    taxInvoice.setTermsList(termsList);


                    taxInvoiceDuplicate.setCustcode(customercode != null ? customercode : "");
                    taxInvoiceDuplicate.setCustname(customerName != null ? customerName : "");
                    taxInvoiceDuplicate.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
                    taxInvoiceDuplicate.setAddress(company.getAddress());
                    taxInvoiceDuplicate.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    taxInvoiceDuplicate.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
//            taxInvoice.setGstRegNo(gstNo);
                    taxInvoiceDuplicate.setInvoiceNo(invno);
                    taxInvoiceDuplicate.setdONomber(dONumber);
                    taxInvoiceDuplicate.setDate(dateFormat.format(entryDate));
                    taxInvoiceDuplicate.setPaymentTerms(terms);
                    taxInvoiceDuplicate.setSalesPerson(salesPerson);
                    taxInvoiceDuplicate.setSoldToAddress(billAddr);
                    taxInvoiceDuplicate.setSubtotal(authHandler.formattedAmount(total, companyid));
                    taxInvoiceDuplicate.setGstValue(authHandler.formattedAmount((rowTaxAmount + totaltax), companyid));
                    taxInvoiceDuplicate.setTermsList(termsList);

                    taxInvoiceTriplicate.setCustcode(customercode != null ? customercode : "");
                    taxInvoiceTriplicate.setCustname(customerName != null ? customerName : "");
                    taxInvoiceTriplicate.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
                    taxInvoiceTriplicate.setAddress(company.getAddress());
                    taxInvoiceTriplicate.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    taxInvoiceTriplicate.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
//            taxInvoice.setGstRegNo(gstNo);
                    taxInvoiceTriplicate.setInvoiceNo(invno);
                    taxInvoiceTriplicate.setdONomber(dONumber);
                    taxInvoiceTriplicate.setDate(dateFormat.format(entryDate));
                    taxInvoiceTriplicate.setPaymentTerms(terms);
                    taxInvoiceTriplicate.setSalesPerson(salesPerson);
                    taxInvoiceTriplicate.setSoldToAddress(billAddr);
                    taxInvoiceTriplicate.setSubtotal(authHandler.formattedAmount(total, companyid));
                    taxInvoiceTriplicate.setGstValue(authHandler.formattedAmount((rowTaxAmount + totaltax), companyid));
                    taxInvoiceTriplicate.setTermsList(termsList);

                    String totalCustom = "";
                    for (String customField : customFieldList) {
                        totalCustom += customField + "<br>";
                    }
                    taxInvoice.setDiscount(authHandler.formattedAmount((totalDiscount != null ? totalDiscount.getDiscountValue() : 0), companyid));
                    taxInvoice.setAmountTotal(authHandler.formattedAmount((total - (totalDiscount != null ? totalDiscount.getDiscountValue() : 0)), companyid));
//            taxInvoice.setUem(uem);
                    taxInvoice.setGrandTotal(authHandler.formattedAmount(totalAmount, companyid));
                    taxInvoice.setCustomfield(totalCustom);
                    
                    int countryLanguageId = Constants.OtherCountryLanguageId; // 0
                    KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                    ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                    if (extraCompanyPreferences.isAmountInIndianWord()) {
                        countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
                    }                
                    if (currency != null) {
                        String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalAmount)), currency,countryLanguageId);
                        taxInvoice.setAmountInWords(currency.getName().toString() + " " + netinword + " Only.");
                    }

                    taxInvoice.setDeliveredToAddress(shipTo);

                    taxInvoiceDuplicate.setDiscount(authHandler.formattedAmount((totalDiscount != null ? totalDiscount.getDiscountValue() : 0), companyid));
                    taxInvoiceDuplicate.setAmountTotal(authHandler.formattedAmount((total - (totalDiscount != null ? totalDiscount.getDiscountValue() : 0)), companyid));
//            taxInvoice.setUem(uem);
                    taxInvoiceDuplicate.setGrandTotal(authHandler.formattedAmount(totalAmount, companyid));
                    taxInvoiceDuplicate.setCustomfield(totalCustom);
                    if (currency != null) {
                        String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalAmount)), currency,countryLanguageId);
                        taxInvoiceDuplicate.setAmountInWords(currency.getName().toString() + " " + netinword + " Only.");
                    }

                    taxInvoiceDuplicate.setDeliveredToAddress(shipTo);

                    taxInvoiceTriplicate.setDiscount(authHandler.formattedAmount((totalDiscount != null ? totalDiscount.getDiscountValue() : 0), companyid));
                    taxInvoiceTriplicate.setAmountTotal(authHandler.formattedAmount((total - (totalDiscount != null ? totalDiscount.getDiscountValue() : 0)), companyid));
//            taxInvoice.setUem(uem);
                    taxInvoiceTriplicate.setGrandTotal(authHandler.formattedAmount(totalAmount, companyid));
                    taxInvoiceTriplicate.setCustomfield(totalCustom);
                    if (currency != null) {
                        String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalAmount)), currency,countryLanguageId);
                        taxInvoiceTriplicate.setAmountInWords(currency.getName().toString() + " " + netinword + " Only.");
                    }

                    taxInvoiceTriplicate.setDeliveredToAddress(shipTo);
                    taxInvoiceList.add(taxInvoice);
                    boolean isMultipleFlag = request.getParameter("isMultipleFlag") != null ? Boolean.parseBoolean(request.getParameter("isMultipleFlag")) : false;
                    ArrayList<TaxInvoice> taxInvoiceListDublicate = new ArrayList<TaxInvoice>();
                    ArrayList<TaxInvoice> taxInvoiceListtriplicate = new ArrayList<TaxInvoice>();
                    if (isMultipleFlag) {
                        taxInvoice.setReportType("ORIGINAL");
                        taxInvoiceDuplicate.setReportType("DUPLICATE");
                        taxInvoiceTriplicate.setReportType("TRIPLICATE");
                        taxInvoiceListDublicate.add(taxInvoiceDuplicate);
                        taxInvoiceListtriplicate.add(taxInvoiceTriplicate);
                    }

                    invoiceMap.put("TaxInvoiceSubReportData", new JRBeanCollectionDataSource(invoiceSubReportsList));
                    invoiceMap.put("format", "pdf");

                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("imagePath", fileName1);
                    if (templateflag == Constants.sms_templateflag) {
                        invoiceMap.put("footerflag", true);
                    } else {
                        invoiceMap.put("footerflag", false);  //Mayur B- To hide footer logo for SMS holding Company.
                    }
                    invoiceMap.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
                    invoiceMap.put("imagePath3", "http://67.192.230.254/test/sms_chinesename.png");

                    invoiceMap.put("datasource", new JRBeanCollectionDataSource(taxInvoiceList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "TaxInvoice.pdf");

                    InputStream inputStream = null;
                    boolean isSqueezeFlag = request.getParameter("isSqueezeFlag") != null ? Boolean.parseBoolean(request.getParameter("isSqueezeFlag")) : false;
                
                    if (templateflag == Constants.spaceTec_templateflag) {
                        if (isLetter) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SpaceTechTaxInvoiceLetter.jrxml");
                        }else{
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SpaceTechTaxInvoice.jrxml");
                        }
                    } else {
                        if (isSqueezeFlag) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SqueezeTaxInvoice.jrxml");
                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TaxInvoice.jrxml");
                        }
                    }
                    InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TaxInvoiceSubReport.jrxml");

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(taxInvoiceList);
                    JRBeanCollectionDataSource beanColDataSource1 = new JRBeanCollectionDataSource(taxInvoiceListDublicate);
                    JRBeanCollectionDataSource beanColDataSource2 = new JRBeanCollectionDataSource(taxInvoiceListtriplicate);

                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                    JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                    Map parameters = new HashMap();
                    parameters.put("imagePath", fileName1);
                    if (templateflag == Constants.sms_templateflag) {
                        parameters.put("footerflag", true);
                    } else {
                        parameters.put("footerflag", false);  //Mayur B- To hide footer logo for SMS holding Company.
                    }
                    parameters.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
                    parameters.put("imagePath3", "http://67.192.230.254/test/sms_chinesename.png");
                    parameters.put("TaxInvoiceSubReport", jasperReportSubReport);
                    parameters.put("TaxInvoiceSubReportData", new JRBeanCollectionDataSource(invoiceSubReportsList));
                    parameters.put("format", "pdf");

                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, beanColDataSource);
                    JasperPrint jasperPrint1 = JasperFillManager.fillReport(jasperReport, parameters, beanColDataSource1);
                    JasperPrint jasperPrint2 = JasperFillManager.fillReport(jasperReport, parameters, beanColDataSource2);

                    JRPdfExporter exp = new JRPdfExporter();

                    list.add(jasperPrint);
                    if (isMultipleFlag) {
                        list.add(jasperPrint1);
                        list.add(jasperPrint2);
                    }
//            JasperExportManager.exportReportToPdfFile(jasperPrint, "/home/krawler/a.pdf"); 
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportLSHCustomerInvoiceReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                List<TaxInvoiceSubReport> invoiceSubReportsList = new ArrayList<TaxInvoiceSubReport>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                String dONumber = "";
                String customerName = "";
                String customercode = "";
                String customerAdd = "";
                String customerEmail = "";
                String terms = "";
                String billTo = "";
                String billAddr = "";
                String shipTo = "";
                String memo = "";
                String salesPerson = null;
                String billtoAddress = "";
                boolean isInclude = false; //Hiding or Showing P.O. NO field in single PDF 
                Iterator itr = null;
                String linkTo = "-";
                Discount totalDiscount = null;
                double totaltax = 0, discountTotalQuotation = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";
                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                Map<String, Object> invoiceMap = new HashMap<String, Object>();
                String view = "LSHTaxInvoice";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                TaxInvoice taxInvoice = new TaxInvoice();
                TaxInvoice taxInvoiceDuplicate = new TaxInvoice();
                TaxInvoice taxInvoiceTriplicate = new TaxInvoice();
                ArrayList<TaxInvoice> taxInvoiceList = new ArrayList<TaxInvoice>();
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df = (DateFormat) requestParamsCustom.get("df");
                    //            String companyid = sessionHandlerImpl.getCompanyid(request);
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Object> fieldInLinerequestParams = new HashMap();
                    HashMap<String, String> customInLineFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customInLineDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 1));
                    fieldInLinerequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldInLinerequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 1));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> replaceFieldInLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    HashMap<String, Integer> FieldInLineMap = accAccountDAOobj.getFieldParamsCustomMap(fieldInLinerequestParams, replaceFieldInLineMap, customInLineFieldMap, customInLineDateFieldMap);
                    JournalEntry entry = null;
//            String billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    String gstNo = "";
                    boolean addShipTo = true;
                    Company com = null;
                    Account cEntry = null;
                    String invno = "";
                    String invId = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String uem = "";
                    String rateLabel = "";
                    double total = 0;
                    double rowTaxAmountTotal = 0;
                    String currencyid = "";
                    DecimalFormat decimalFormat = new DecimalFormat("0.00");
//                    DecimalFormat quantityFormat = new DecimalFormat("0.0000"); //refer ticket ERP-9867
                    DecimalFormat quantityFormat = new DecimalFormat("0");
                    DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                    KWLCurrency currency = null;
                    if (mode == StaticValues.AUTONUM_INVOICE) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), billid);
                        Invoice inv = (Invoice) cap.getEntityList().get(0);
                        invId = inv.getID();
                        String approverName = "";
                        if (inv.getApprover() != null) {
                            approverName = inv.getApprover().getFirstName() + " " + inv.getApprover().getLastName();
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        addShipTo = true;
                        com = inv.getCompany();
                        cEntry = inv.getCustomerEntry().getAccount();
                        invno = inv.getInvoiceNumber();
                        entryDate = inv.getJournalEntry().getEntryDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipDate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();
                        poRefno = inv.getPoRefNumber() == null ? "" : inv.getPoRefNumber();
                        filter_names.add("invoice.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? inv.getCustomerEntry().getAccount().getName() : inv.getCustomer().getName();
                        customercode = inv.getCustomer().getAcccode() == null ? inv.getCustomerEntry().getAccount().getAcccode() : inv.getCustomer().getAcccode();
                        
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                        addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true); //true to get billing address
                        addressParams.put("customerid", inv.getCustomer().getID());
                        customerAdd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        
                        String billToAdd = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), true);
                        billAddr = StringUtil.isNullOrEmpty(billToAdd) ? inv.getBillTo() != null ? inv.getBillTo().replaceAll("\n", "<br>") : "" : billToAdd.replaceAll("\n", "<br>");
//                billAddr = inv.getBillTo() != null ? inv.getBillTo().replaceAll("\n", "<br>") : "";
                        customerEmail = inv.getCustomer() != null ? inv.getCustomer().getEmail() : "";
                        uem = inv.getCustomer() != null ? (inv.getCustomer().getAltContactNumber() != null ? inv.getCustomer().getAltContactNumber() : "") : "";
                        gstNo = inv.getCustomer() != null ? inv.getCustomer().getOther() : "";
                        billTo = "Bill To";
                        isInclude = false;
                        if (inv.getMasterSalesPerson() != null) {   //if User Class returns the Null Valu
                            salesPerson = inv.getMasterSalesPerson() != null ? inv.getMasterSalesPerson().getValue() : "";
                        } else {  //if salesperson class has no username
                            salesPerson = "";
                        }

                        int days = 0;
                        if (inv.getTermid() != null) {
                            days = inv.getTermid().getTermdays();
                        } else {
                            Calendar dt1 = Calendar.getInstance();
                            dt1.setTime(inv.getJournalEntry().getEntryDate());
                            Calendar dt2 = Calendar.getInstance();
                            dt2.setTime(inv.getDueDate());
                            dt2.set(Calendar.YEAR, dt1.get(Calendar.YEAR));
                            int withDAY = dt1.get(Calendar.DAY_OF_YEAR);
                            int toDAY = dt2.get(Calendar.DAY_OF_YEAR);
                            days = toDAY - withDAY;
                        }
                        terms = inv.isCashtransaction()?" ":days + " Days";

                        String shipToAdd = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);
                        shipTo = StringUtil.isNullOrEmpty(shipToAdd) ? inv.getShipTo() != null ? inv.getShipTo().replaceAll("\n", "<br>") : "" : shipToAdd.replaceAll("\n", "<br>");
//                shipTo = inv.getShipTo() != null ? inv.getShipTo().replaceAll("\n", "<br>") : "";
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo();
                        entry = inv.getJournalEntry();
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        InvoiceDetail row = null;
                        while (itr.hasNext()) {
                            TaxInvoiceSubReport invoiceSubReport = new TaxInvoiceSubReport();
                            String prodName = "";
                            String prodDesc = "";
                            String partNo = "";
                            Phrase phrase1 = new Phrase();
                            Phrase phrase2 = new Phrase();
                            double quantity = 0, discountQuotation = 0, discountOrder = 0;
                            double rate = 0;
                            Discount discount = null;
                            String uom = "";
                            double amount1 = 0;
                            row = (InvoiceDetail) itr.next();
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc =  StringUtil.DecodeText(row.getDescription());
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())) {
                                    prodDesc =  StringUtil.DecodeText(row.getInventory().getProduct().getDescription());
                                }
                            }
                            prodName = row.getInventory().getProduct().getName();
                            if (!addShipTo) {
                                if (row.getDeliveryOrderDetail() != null && !StringUtil.isNullOrEmpty(row.getDeliveryOrderDetail().getPartno().trim())) {
                                    String partno = row.getDeliveryOrderDetail().getPartno();
                                    partNo = partno;
                                }
                            }

                            KwlReturnObject InvoiceDo = accInvoiceDAOobj.getDOFromInvoices(inv.getID(), companyid, true);
                            int count = InvoiceDo.getRecordTotalCount();
                            List InvoiceDoList = InvoiceDo.getEntityList();
                            Iterator itr1 = InvoiceDoList.iterator();
                            while (itr1.hasNext()) {
                                Object[] oj = (Object[]) itr1.next();
                                dONumber = oj[0] != null ? oj[0].toString() : "";
                            }

                            if (row.getDeliveryOrderDetail() != null && StringUtil.isNullOrEmpty(dONumber)) {
                                dONumber = row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber();
                            }

                            quantity = row.getInventory().getQuantity();
                            if (row.getInvoice().isGstIncluded()) {
                                rate = row.getRateincludegst();
                                rateLabel = "U Price <br> (Including Gst)";
                            } else {
                            rate = row.getRate();
                                rateLabel = "U Price";
                            }
                            
                            discount = row.getDiscount();
                            uom = row.getInventory().getProduct().getUnitOfMeasure() == null ? "" : row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA();
                            if (row.getDeliveryOrderDetail() != null) {
                                linkTo = row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber();
                            } else if (row.getSalesorderdetail() != null) {
                                linkTo = row.getSalesorderdetail().getSalesOrder().getSalesOrderNumber();
                            } else if (row.getQuotationDetail() != null) {
                                linkTo = row.getQuotationDetail().getQuotation().getquotationNumber();
                            }
                            double rowTaxPercent = 0;
                            String rowTaxName = "";
                            amount1 = authHandler.round(rate * quantity, companyid);
                            amount1 -= row.getDiscount() != null ? row.getDiscount().getDiscountValue() : 0.0;

                            invoiceSubReport.setsNo(row.getSrno() + "");
                            invoiceSubReport.setProductDescription(prodDesc);
                            invoiceSubReport.setNoOfPkg(uom);
                            invoiceSubReport.setQty(quantityFormat.format(quantity));
                            invoiceSubReport.setuPrice(decimalFormat.format(rate));
                            invoiceSubReport.setProductAmount(decimalFormat.format(amount1));
                            invoiceSubReport.setAmountCurrency(currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode());
                            invoiceSubReport.setRateLabel(rateLabel);
                            invoiceSubReportsList.add(invoiceSubReport);
                            total += amount1;
                            rowTaxAmountTotal += row.getRowTaxAmount();
                            rowTaxAmountTotal += row.getRowTermTaxAmount();
                        }

                        totalDiscount = inv.getDiscount();
                        totaltax = inv.getTaxEntry() != null ? inv.getTaxEntry().getAmount() : 0;
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
                        totalAmount = inv.getCustomerEntry().getAmount();
                    }
                    
                    List<String> customFieldList = new ArrayList<String>();
                    if (entry != null) {

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(companyid);
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(entry.getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(moduleid + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                                    Date dateFromDB=null;
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        if (fieldComboData.getValue() != null && (varEntry.getKey().split("_")[1]).equals("Ordered By")) {
                                            customFieldList.add(fieldComboData.getValue());
                                        }
                                    }
                                } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Ordered By")) {
                                        DateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                                        try {
                                            dateFromDB = defaultDateFormat.parse(coldata);
                                            coldata = sdf.format(dateFromDB);
                                        } catch (Exception e) {
                                        }
                                        customFieldList.add(coldata);
                                    }
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Ordered By")) {
                                            customFieldList.add(coldata);
                                        }
                                    }
                                }
                            }
                        }

                    }

                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);

                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    List<Terms> termsList = new ArrayList<Terms>();
                    if (!StringUtil.isNullOrEmpty(invId)) {
                        HashMap<String, Object> requestParam = new HashMap();
                        requestParam.put("invoiceid", invId);
                        KwlReturnObject curresult = null;
                        curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
                        List<InvoiceTermsMap> termMap = curresult.getEntityList();
                        for (InvoiceTermsMap invoiceTerMap : termMap) {
                            InvoiceTermsSales mt = invoiceTerMap.getTerm();
                            double termAmnt = invoiceTerMap.getTermamount();
                            Terms termsObj = new Terms();
                            termsObj.setTermName(mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)"));
//                    termsObj.setTermValue(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid));
                            termsObj.setTermValue(decimalFormat.format(termAmnt > 0 ? termAmnt : (termAmnt * -1)));
                            termsList.add(termsObj);
                        }
                    }

                    taxInvoice.setCustcode(customercode != null ? customercode : "");
                    taxInvoice.setCustname(customerName != null ? customerName : "");
                    taxInvoice.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
                    taxInvoice.setAddress(company.getAddress());
                    taxInvoice.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    taxInvoice.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
//            taxInvoice.setGstRegNo(gstNo);
                    taxInvoice.setInvoiceNo(invno);
                    taxInvoice.setdONomber(dONumber);
                    taxInvoice.setDate(dateFormat.format(entryDate));
                    taxInvoice.setPaymentTerms(terms);
                    taxInvoice.setSalesPerson(salesPerson);
                    taxInvoice.setSoldToAddress(billAddr);
                    taxInvoice.setSubtotal(decimalFormat.format(total));
                    taxInvoice.setGstValue(decimalFormat.format(totaltax + rowTaxAmountTotal));
                    taxInvoice.setTermsList(termsList);

                    String totalCustom = "";
                    for (String customField : customFieldList) {
                        totalCustom += customField + "<br>";
                    }
                    taxInvoice.setDiscount(decimalFormat.format(totalDiscount != null ? totalDiscount.getDiscountValue() : 0));
                    taxInvoice.setAmountTotal(decimalFormat.format(total - (totalDiscount != null ? totalDiscount.getDiscountValue() : 0)));
                    taxInvoice.setUem(uem);
                    taxInvoice.setGrandTotal(decimalFormat.format(totalAmount));
                    taxInvoice.setCustomfield(totalCustom);
                    
                    int countryLanguageId = Constants.OtherCountryLanguageId; // 0
                    KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                    ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                    if (extraCompanyPreferences.isAmountInIndianWord()) {
                        countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
                    }
                    if (currency != null) {
                        String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalAmount)), currency,countryLanguageId);
                        taxInvoice.setAmountInWords(currency.getName().toString() + " " + netinword + " Only.");
                    }

                    taxInvoice.setDeliveredToAddress(shipTo);
                    taxInvoiceList.add(taxInvoice);
                    invoiceMap.put("TaxInvoiceSubReportData", new JRBeanCollectionDataSource(invoiceSubReportsList));
                    invoiceMap.put("format", "pdf");
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("imagePath", fileName1);
//            invoiceMap.put("datasource", new JRBeanCollectionDataSource(taxInvoiceList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "TaxInvoice_v1.pdf");
                    InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LSHTaxInvoice.jrxml");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LSHTaxInvoiceSubReport.jrxml");
                    JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                    jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

                    invoiceMap.put("TaxInvoiceSubReport", jasperReportSubReport);

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(taxInvoiceList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportSenwanCommercialInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;


                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                List<CommercialinvoiceSubReport> commercialinvoiceSubReportsList = new ArrayList<CommercialinvoiceSubReport>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                String customerName = "";
                String customerAdd = "";
                String customerEmail = "";
                String terms = "";
                String billTo = "";
                String billAddr = "";
                String shipTo = "";
                String memo = "";
                String salesPerson = null;
                String billtoAddress = "";
                boolean isInclude = false; //Hiding or Showing P.O. NO field in single PDF 
                Iterator itr = null;
                String linkTo = "-";
                Discount totalDiscount = null;
                double totaltax = 0, discountTotalQuotation = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";
                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                boolean isPackingList = StringUtil.getBoolean(request.getParameter("isPackingList"));
                Map<String, Object> invoiceMap = new HashMap<String, Object>();
                String view = "commercialInvoice";
                String view1 = "senwanGroupPackingList";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                Commercialinvoice commercialinvoice = new Commercialinvoice();
                ArrayList<Commercialinvoice> commercialinvoicesList = new ArrayList<Commercialinvoice>();
                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df = (DateFormat) requestParamsCustom.get("df");
                    DateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");

                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Invoice_ModuleId, 0, 1));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;
                    
//            String billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    String gstNo = "";
                    boolean addShipTo = true;
                    Company com = null;
                    Account cEntry = null;
                    String invno = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String uem = "";
                    double total = 0;
                    DecimalFormat decimalFormat = new DecimalFormat("0.00");
                    KWLCurrency currency = null;
                    //        String companyid = sessionHandlerImpl.getCompanyid(request);
                    if (mode == StaticValues.AUTONUM_INVOICE) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), billid);
                        Invoice inv = (Invoice) cap.getEntityList().get(0);


                        String approverName = "";
                        String currencyid = "";
                        if (inv.getApprover() != null) {
                            approverName = inv.getApprover().getFirstName() + " " + inv.getApprover().getLastName();
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        addShipTo = true;
                        com = inv.getCompany();
                        cEntry = inv.getCustomerEntry().getAccount();
                        invno = inv.getInvoiceNumber();
                        entryDate = inv.getJournalEntry().getEntryDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipDate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();
                        poRefno = inv.getPoRefNumber() == null ? "" : inv.getPoRefNumber();
                        filter_names.add("invoice.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? inv.getCustomerEntry().getAccount().getName() : inv.getCustomer().getName();
                        
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                        addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true); //true to get billing address
                        addressParams.put("customerid", inv.getCustomer().getID());
                        customerAdd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        
                        billAddr = inv.getBillTo() != null ? inv.getBillTo() : "";
                        customerEmail = inv.getCustomer() != null ? inv.getCustomer().getEmail() : "";
                        uem = inv.getCustomer() != null ? (inv.getCustomer().getAltContactNumber() != null ? inv.getCustomer().getAltContactNumber() : "") : "";
                        gstNo = inv.getCustomer() != null ? inv.getCustomer().getOther() : "";
                        billTo = "Bill To";
                        isInclude = false;
                        if (inv.getMasterSalesPerson() != null) {   //if User Class returns the Null Valu
                            salesPerson = inv.getMasterSalesPerson() != null ? inv.getMasterSalesPerson().getValue() : "";
                        } else {  //if salesperson class has no username
                            salesPerson = "";
                        }
                        terms = inv.getTermid() != null ? Integer.toString(inv.getTermid().getTermdays()) + " DAYS" : "";
                        shipTo = inv.getShipTo();
                        entry = inv.getJournalEntry();
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo() != null ? inv.getMemo() : "";
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        InvoiceDetail row = null;
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(inv.getCompany().getCompanyID());
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(inv.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(Constants.Acc_Invoice_ModuleId + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
//                                 if(customFieldMap.containsKey(varEntry.getKey())){
//                                    FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
//                                   if(fieldComboData != null){
//                                       String Label=varEntry.getKey();
//                                       String Value=fieldComboData.getValue()!=null ?fieldComboData.getValue():"";
//                                   }
//                              }else if(customDateFieldMap.containsKey(varEntry.getKey())){
//                                       String Label=varEntry.getKey();
//                                       String Value=df.format(Long.parseLong(coldata));
//                              } else{
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Destination")) {
                                        commercialinvoice.setDestination(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Pre-carriage By")) {
                                        commercialinvoice.setPrecarriageby(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Ocean Vessel / Voy")) {
                                        commercialinvoice.setOceanvessel(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Ship From")) {
                                        commercialinvoice.setShipfrom(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("ETD")) {
                                        commercialinvoice.setEtd(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("B/L")) {
                                        commercialinvoice.setBl(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Shipping Term")) {
                                        commercialinvoice.setShippingterms(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("ETA")) {
                                        commercialinvoice.setEta(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("L/C No")) {
                                        commercialinvoice.setLcno(coldata);
                                    }

                                }
                            }
                        }
//               }    
                        int i = 0;
                        while (itr.hasNext()) {
                            CommercialinvoiceSubReport commercialinvoiceSubReport = new CommercialinvoiceSubReport();
                            i++;
                            String prodName = "";
                            String total1 = "";
                            String prodDesc = "";
                            String partNo = "";
                            Phrase phrase1 = new Phrase();
                            Phrase phrase2 = new Phrase();
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            Discount discount = null;
                            String uom = "";
                            double amount1 = 0;
                            row = (InvoiceDetail) itr.next();
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc =  StringUtil.DecodeText(row.getDescription());
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())) {
                                    prodDesc =  StringUtil.DecodeText(row.getInventory().getProduct().getDescription());
                                }
                            }
//                    prodName = row.getInventory().getProduct().getName();
                            if (!addShipTo) {
                                if (row.getDeliveryOrderDetail() != null && !StringUtil.isNullOrEmpty(row.getDeliveryOrderDetail().getPartno().trim())) {
                                    String partno = row.getDeliveryOrderDetail().getPartno();
                                    partNo = partno;
                                }
                            }
                            quantity = row.getInventory().getQuantity();
                            changedQuantity = (row.getInventory().isInvrecord() && (row.getInvoice().getPendingapproval() == 0)) ? row.getInventory().getBaseuomquantity() : row.getInventory().getActquantity();

                            rate = row.getRate();
                            discount = row.getDiscount();
                            uom = row.getInventory().getProduct().getUnitOfMeasure() == null ? "" : row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA();
                            if (row.getDeliveryOrderDetail() != null) {
                                linkTo = row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber();
                            } else if (row.getSalesorderdetail() != null) {
                                linkTo = row.getSalesorderdetail().getSalesOrder().getSalesOrderNumber();
                            } else if (row.getQuotationDetail() != null) {
                                linkTo = row.getQuotationDetail().getQuotation().getquotationNumber();
                            }
                            double rowTaxPercent = 0;
                            String rowTaxName = "";
                            amount1 = authHandler.round(rate * quantity, companyid);
                            amount1 -= row.getDiscount() != null ? row.getDiscount().getDiscountValue() : 0.0;
                            if (row != null && row.getTax() != null) {
                                requestParams.put("transactiondate", entryDate);
                                requestParams.put("taxid", row.getTax() != null ? row.getTax().getID() : "");
                                requestParams.put("companyid", companyid);
                                KwlReturnObject result = accTaxObj.getTax(requestParams);
                                List taxList = result.getEntityList();
                                if (!taxList.isEmpty()) {
                                    Object[] taxObj = (Object[]) taxList.get(0);
                                    rowTaxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                                    rowTaxName = row.getTax().getName();
                                    amount1 += amount1 * rowTaxPercent / 100;
                                }
                            }

                            commercialinvoiceSubReport.setSno(Integer.toString(i));
                            commercialinvoiceSubReport.setDescription(prodDesc);
                            commercialinvoiceSubReport.setPallets("");
                            commercialinvoiceSubReport.setPieces(decimalFormat.format(changedQuantity));
                            commercialinvoiceSubReport.setUnitprice(decimalFormat.format(rate));
                            commercialinvoiceSubReport.setAmount(decimalFormat.format(amount1));
                            commercialinvoiceSubReport.setCurrency(currency.getCurrencyCode());
                            commercialinvoiceSubReport.setUnit(uom != null ? uom : "");
                            commercialinvoiceSubReport.setVolume(decimalFormat.format(quantity));
                            if (isPackingList) {
                                total += amount1;
                                commercialinvoiceSubReport.setTotal(decimalFormat.format(total));
                            } else {
                                commercialinvoiceSubReport.setTotal(decimalFormat.format(inv.getCustomerEntry().getAmount()));
                            }
                            commercialinvoiceSubReportsList.add(commercialinvoiceSubReport);

                        }

                        totalDiscount = inv.getDiscount();
                        totaltax = inv.getTaxEntry() != null ? inv.getTaxEntry().getAmount() : 0;
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
                        totalAmount = inv.getCustomerEntry().getAmount();
                    }
                    totalAmount = authHandler.round(totalAmount, companyid);
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);

                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    
                    int countryLanguageId = Constants.OtherCountryLanguageId; // 0
                    KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                    ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                    if (extraCompanyPreferences.isAmountInIndianWord()) {
                        countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
                    }

                    commercialinvoice.setCustname(customerName);
                    commercialinvoice.setCustadd(customerAdd.replaceAll("\n", "<br>"));
                    commercialinvoice.setDate(df1.format(entryDate));
                    commercialinvoice.setInvoiceno(invno);
                    commercialinvoice.setMemo(memo);
                    if (currency != null) {
                        String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalAmount)), currency,countryLanguageId);
                        commercialinvoice.setTotalinword(currency.getCurrencyCode() + " " + netinword + " Only.");
                    }

                    commercialinvoicesList.add(commercialinvoice);

                    invoiceMap.put("CommercialInvoiceSubReportData", new JRBeanCollectionDataSource(commercialinvoiceSubReportsList));
                    invoiceMap.put("format", "pdf");
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("imagePath", fileName1);
//            invoiceMap.put("datasource", new JRBeanCollectionDataSource(commercialinvoicesList));
                    InputStream inputStream = null;
                    if (isPackingList) {
                        response.setHeader("Content-Disposition", "attachment;filename=" + "PackingList.pdf");
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SenwanGroupPackingList.jrxml");
                    } else {
                        response.setHeader("Content-Disposition", "attachment;filename=" + "CommercialInvoice.pdf");
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/CommercialInvoice.jrxml");
                    }

                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(commercialinvoicesList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportFerrateGroupTaxInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                String view = "";
                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                List<SenwanGroupCustomerQuotationSubReport> pacificTecSubReportList = new ArrayList<SenwanGroupCustomerQuotationSubReport>();
                List<CommercialinvoiceSubReport> commercialinvoiceSubReportsList = new ArrayList<CommercialinvoiceSubReport>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                String customerName = "";
                String customerCode = "";
                String customerAdd = "";
                String customerEmail = "";
                String customerPhone = "";
                String attn = "";
                String terms = "";
                String billTo = "";
                String billAddr = "";
                String shipTo = "";
                String memo = "";
                String salesPerson = null;
                String billtoAddress = "";
                boolean isInclude = false; //Hiding or Showing P.O. NO field in single PDF 
                Iterator itr = null;
                String linkTo = "NA";
                Discount totalDiscount = null;
                double totaltax = 0, discountTotalQuotation = 0, totaltaxpercent = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                int templateflag = request.getParameter("templateflag") != null ? Integer.parseInt(request.getParameter("templateflag")) : Constants.ferrate_group_templateflag;
                view = templateflag == Constants.pacific_tec_templateflag ? "pacifiTecTaxInvoice" : "ferrateGroupTaxInvoice";
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                Map<String, Object> invoiceMap = new HashMap<String, Object>();
                FerrateGroupTaxInvoice ferrateGroupTaxInvoice = new FerrateGroupTaxInvoice();
                ArrayList<PacificTecAddressTable> addressTableList = new ArrayList<PacificTecAddressTable>();
                PacificTecAddressTable addressTable = new PacificTecAddressTable();
                ArrayList<FerrateGroupTaxInvoice> ferrateGroupTaxInvoicesList = new ArrayList<FerrateGroupTaxInvoice>();
                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df = (DateFormat) requestParamsCustom.get("df");
                    DateFormat df1 = null;
                    if (templateflag == Constants.HCIS_templateflag) {
                        df1 = new SimpleDateFormat("dd MMMM yyyy");
                    } else {
                        df1 = new SimpleDateFormat("dd/MM/yyyy");
                    }
                    DecimalFormat senwanTecDecimalFormat = new DecimalFormat("#,###,###,##0.00");

                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Invoice_ModuleId, 0, 1));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;

//            String billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    String gstNo = "";
                    boolean addShipTo = true;
                    Company com = null;
                    Account cEntry = null;
                    String invno = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "NA";
                    String hcis_class = "";
                    String hcis_semester = "";
                    String termName = "";
                    String termAmount = "0.00";
                    String uem = "";
                    double total = 0;
                    double rowTaxAmountTotal = 0;
                    String curr = "";
                    String approverName = "";
                    DecimalFormat decimalFormat = new DecimalFormat("0.00");
                    DecimalFormat quantityFormat = new DecimalFormat("0");
                    KWLCurrency currency = null;
                    //        String companyid = sessionHandlerImpl.getCompanyid(request);
                    if (mode == StaticValues.AUTONUM_INVOICE) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), billid);
                        Invoice inv = (Invoice) cap.getEntityList().get(0);

                        String currencyid = "";
                        if (inv.getCreatedby() != null) {
                            approverName = StringUtil.getFullName(inv.getCreatedby());
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                        addShipTo = true;
                        com = inv.getCompany();
                        cEntry = inv.getCustomerEntry().getAccount();
                        invno = inv.getInvoiceNumber();
                        entryDate = inv.getJournalEntry().getEntryDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipDate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();
                        poRefno = StringUtil.isNullOrEmpty(inv.getPoRefNumber()) ? "NA" : inv.getPoRefNumber();
                        filter_names.add("invoice.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? inv.getCustomerEntry().getAccount().getName() : inv.getCustomer().getName();
                        customerCode = inv.getCustomer() == null ? inv.getCustomerEntry().getAccount().getAcccode() : inv.getCustomer().getAcccode();
                        
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("customerid", inv.getCustomer().getID());
                        customerAdd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
//                        if (customerAddressDetails != null) {
                        customerPhone = inv.getBillingShippingAddresses() != null ? !StringUtil.isNullOrEmpty(inv.getBillingShippingAddresses().getBillingPhone()) ? inv.getBillingShippingAddresses().getBillingPhone() : "" : "";
                        attn = inv.getBillingShippingAddresses() != null ? !StringUtil.isNullOrEmpty(inv.getBillingShippingAddresses().getBillingContactPerson()) ? inv.getBillingShippingAddresses().getBillingContactPerson() : "" : "";
                        customerEmail = inv.getBillingShippingAddresses() != null ? !StringUtil.isNullOrEmpty(inv.getBillingShippingAddresses().getBillingEmail()) ? inv.getBillingShippingAddresses().getBillingEmail() : "" : "";
//                        }
                        if (templateflag == Constants.senwan_tech_templateflag || templateflag == Constants.HCIS_templateflag) {
                            billAddr = CommonFunctions.getBillingShippingAddressForSenwanTec(inv.getBillingShippingAddresses(), true);
                        } else {
                            billAddr = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), true);
                        }
                        shipTo = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);
                        String billtoAttnContact = inv.getBillingShippingAddresses() != null ? !StringUtil.isNullOrEmpty(inv.getBillingShippingAddresses().getBillingContactPersonNumber()) ? "\nContact Number : "+ inv.getBillingShippingAddresses().getBillingContactPersonNumber() : "" : "";
                        String shiptoAttnContact = inv.getBillingShippingAddresses() != null ? !StringUtil.isNullOrEmpty(inv.getBillingShippingAddresses().getShippingContactPersonNumber()) ? "\nContact Number : "+ inv.getBillingShippingAddresses().getShippingContactPersonNumber() : "" : "";
                        billAddr = templateflag==Constants.pacific_tec_templateflag?(billAddr + billtoAttnContact):billAddr;
                        shipTo = templateflag==Constants.pacific_tec_templateflag?(shipTo + shiptoAttnContact):shipTo;
//                billAddr=StringUtil.isNullOrEmpty(billToAdd)?  inv.getBillTo() != null ? inv.getBillTo().replaceAll("\n", "<br>") : "":billToAdd.replaceAll("\n", "<br>");
//                        customerEmail = inv.getCustomer().getCustomerAddresses() != null ? inv.getCustomer().getCustomerAddresses().getBillingEmail1() != null ? inv.getCustomer().getCustomerAddresses().getBillingEmail1() : "" : "";
                        uem = inv.getCustomer() != null ? (inv.getCustomer().getAltContactNumber() != null ? inv.getCustomer().getAltContactNumber() : "") : "";
                        gstNo = inv.getCustomer() != null ? inv.getCustomer().getOther() : "";
                        billTo = "Bill To";
                        isInclude = false;
                        if (inv.getMasterSalesPerson() != null) {   //if User Class returns the Null Valu
                            salesPerson = inv.getMasterSalesPerson() != null ? inv.getMasterSalesPerson().getValue() : "";
                        } else {  //if salesperson class has no username
                            salesPerson = "";
                        }
                        terms = inv.getTermid() != null ? Integer.toString(inv.getTermid().getTermdays()) + " DAYS" : "";
//                shipTo = inv.getShipTo();
                        entry = inv.getJournalEntry();
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo() != null ? inv.getMemo() : "";
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        InvoiceDetail row = null;
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(inv.getCompany().getCompanyID());
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(inv.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(Constants.Acc_Invoice_ModuleId + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
//                                 if(customFieldMap.containsKey(varEntry.getKey())){
//                                    FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
//                                   if(fieldComboData != null){
//                                       String Label=varEntry.getKey();
//                                       String Value=fieldComboData.getValue()!=null ?fieldComboData.getValue():"";
//                                   }
//                              }else if(customDateFieldMap.containsKey(varEntry.getKey())){
//                                       String Label=varEntry.getKey();
//                                       String Value=df.format(Long.parseLong(coldata));
//                              } else{
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("ATTN")) {
                                        ferrateGroupTaxInvoice.setAttn(coldata);
                                    }
                                    if ((varEntry.getKey().split("_")[1]).equals("Shipping Term")) {
                                        addressTable.setShippingterm(coldata);
                                    }
                                    if ((varEntry.getKey().split("_")[1]).equals("Delivery Mode")) {
                                        addressTable.setDeliverymode(coldata);
                                    }
                                    if ((varEntry.getKey().split("_")[1]).equals("Class")) {
                                        hcis_class = "Class : " + coldata;
                                    }
                                    if ((varEntry.getKey().split("_")[1]).equals("Remarks")) {
                                        hcis_semester = coldata;
                                    }
                                }
                            }
                        }
                        int i = 0;
                        while (itr.hasNext()) {
                            CommercialinvoiceSubReport commercialinvoiceSubReport = new CommercialinvoiceSubReport();
                            SenwanGroupCustomerQuotationSubReport pacificTecSubReport = new SenwanGroupCustomerQuotationSubReport();
                            i++;
                            String prodName = "";
                            String total1 = "";
                            String prodDesc = "";
                            String prodCode = "";
                            String partNo = "";
                            Phrase phrase1 = new Phrase();
                            Phrase phrase2 = new Phrase();
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            Discount discount = null;
                            String uom = "";
                            double amount1 = 0;
                            row = (InvoiceDetail) itr.next();
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc =  StringUtil.DecodeText(row.getDescription());
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())) {
                                    prodDesc = StringUtil.DecodeText(row.getInventory().getProduct().getDescription());
                                }
                            }
                            prodCode = row.getInventory().getProduct().getProductid() != null ? row.getInventory().getProduct().getProductid() : "";
                            prodName = row.getInventory().getProduct().getName() != null ? row.getInventory().getProduct().getName() : "";
                            if (!addShipTo) {
                                if (row.getDeliveryOrderDetail() != null && !StringUtil.isNullOrEmpty(row.getDeliveryOrderDetail().getPartno().trim())) {
                                    String partno = row.getDeliveryOrderDetail().getPartno();
                                    partNo = partno;
                                }
                            }
                            quantity = row.getInventory().getQuantity();
                            changedQuantity = (row.getInventory().isInvrecord() && (row.getInvoice().getPendingapproval() == 0)) ? row.getInventory().getBaseuomquantity() : row.getInventory().getActquantity();

                            rate = row.getRate();
                            discount = row.getDiscount();
                            uom = row.getInventory().getProduct().getUnitOfMeasure() == null ? "" : row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA();
                            if (row.getDeliveryOrderDetail() != null) {
                                linkTo = row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber();
                            } else if (row.getSalesorderdetail() != null) {
                                linkTo = row.getSalesorderdetail().getSalesOrder().getSalesOrderNumber();
                            } else if (row.getQuotationDetail() != null) {
                                linkTo = row.getQuotationDetail().getQuotation().getquotationNumber();
                            }
                            amount1 = rate * quantity;
                            amount1 -= row.getDiscount() != null ? row.getDiscount().getDiscountValue() : 0.0;
                            commercialinvoiceSubReport.setSno(Integer.toString(i));
                            if (templateflag == Constants.senwan_tech_templateflag || templateflag == Constants.HCIS_templateflag) {
                                commercialinvoiceSubReport.setCode(prodCode);
                                commercialinvoiceSubReport.setDescription(prodDesc.replaceAll("\n", "<br>"));
                                commercialinvoiceSubReport.setUnitprice(senwanTecDecimalFormat.format(rate));
                                commercialinvoiceSubReport.setAmount(senwanTecDecimalFormat.format(amount1));
                                commercialinvoiceSubReport.setVolume(decimalFormat.format(quantity));
                                commercialinvoiceSubReport.setGst(senwanTecDecimalFormat.format(row.getRowTaxAmount()+row.getRowTermTaxAmount()));
                                commercialinvoiceSubReport.setAmountwithgst(senwanTecDecimalFormat.format(amount1 + row.getRowTaxAmount()+row.getRowTermTaxAmount()));
                            } else if (templateflag == Constants.pacific_tec_templateflag) {
                                pacificTecSubReport.setItemno(prodName);
                                pacificTecSubReport.setDesc(prodDesc.replaceAll("\n", "<br>"));
                                pacificTecSubReport.setPrice(senwanTecDecimalFormat.format(rate));
                                pacificTecSubReport.setLinetotal(senwanTecDecimalFormat.format(amount1));
                                pacificTecSubReport.setQty(quantityFormat.format(quantity));
                                pacificTecSubReport.setCurrencysymbol(currency.getCurrencyCode());
                                pacificTecSubReportList.add(pacificTecSubReport);
                            } else {
                                commercialinvoiceSubReport.setCode(prodCode);
                                commercialinvoiceSubReport.setDescription(prodDesc);
                                commercialinvoiceSubReport.setUnitprice(curr + " " + decimalFormat.format(rate));
                                commercialinvoiceSubReport.setAmount(curr + " " + decimalFormat.format(amount1));
                                commercialinvoiceSubReport.setVolume(decimalFormat.format(quantity) + " " + uom);
                            }
                            commercialinvoiceSubReport.setCurrency(currency.getCurrencyCode());
                            commercialinvoiceSubReportsList.add(commercialinvoiceSubReport);
                            total = total + amount1;
                            rowTaxAmountTotal += row.getRowTaxAmount();
                            rowTaxAmountTotal += row.getRowTermTaxAmount();
                        }

                        totalDiscount = inv.getDiscount();
                        totaltax = inv.getTaxEntry() != null ? inv.getTaxEntry().getAmount() : 0;
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
                        totalAmount = inv.getCustomerEntry().getAmount();

                        if (inv.getTax() != null) {
                            requestParams.put("transactiondate", entryDate);
                            requestParams.put("taxid", inv.getTax() != null ? inv.getTax().getID() : "");
                            requestParams.put("companyid", companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            if (!taxList.isEmpty()) {
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                        }
                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                        Company company = (Company) cmpresult.getEntityList().get(0);
                        if (!StringUtil.isNullOrEmpty(inv.getID())) {
                            HashMap<String, Object> requestParam = new HashMap();
                            requestParam.put("invoiceid", inv.getID());
                            KwlReturnObject curresult = null;
                            curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
                            List<InvoiceTermsMap> termMap = curresult.getEntityList();
                            for (InvoiceTermsMap invoiceTerMap : termMap) {
                                InvoiceTermsSales mt = invoiceTerMap.getTerm();
                                double termAmnt = invoiceTerMap.getTermamount();
                                termName = mt.getTerm();
                                termAmount = termAmnt > 0 ? senwanTecDecimalFormat.format(termAmnt) : "(" + senwanTecDecimalFormat.format(termAmnt * -1) + ")";
                            }
                        }
                    }
//            addressTable.setPono(poRefno);
//            addressTable.setDuedate(df1.format(dueDate));
//            addressTable.setDate("");
//            addressTable.setTerms(terms);
//            addressTableList.add(addressTable);
//            invoiceMap.put("Table1", new JRBeanCollectionDataSource(addressTableList));
                    ArrayList<PacificTecAddressTable> pacificTecAddressTableList = new ArrayList<PacificTecAddressTable>();
                    PacificTecAddressTable pacificTecAddressTable = new PacificTecAddressTable();
                    pacificTecAddressTable.setName(customerName);
                    pacificTecAddressTable.setBillto(customerName + "<br>" + billAddr.replaceAll("\n", "<br>"));
                    pacificTecAddressTable.setShipto(customerName + "<br>" + shipTo.replaceAll("\n", "<br>"));
                    pacificTecAddressTable.setPono(poRefno);
                    pacificTecAddressTable.setTerms(terms);
                    pacificTecAddressTable.setDuedate(dueDate != null ? df1.format(dueDate) : "");
                    pacificTecAddressTable.setDate(shipDate != null ? df1.format(shipDate) : "");
                    pacificTecAddressTable.setDeliverymode(fob != null ? fob : "");
                    pacificTecAddressTable.setShippingterm(shipvia != null ? shipvia : "");
                    pacificTecAddressTableList.add(pacificTecAddressTable);

                    ferrateGroupTaxInvoice.setName(customerName);
                    ferrateGroupTaxInvoice.setAccountNo(customerCode != null ? customerCode : "");
                    ferrateGroupTaxInvoice.setHcis_Class(hcis_class);
                    ferrateGroupTaxInvoice.setHcis_Semester(hcis_semester);
                    ferrateGroupTaxInvoice.setSubtotal_plus_gst(senwanTecDecimalFormat.format(rowTaxAmountTotal + total));
                    ferrateGroupTaxInvoice.setTermname(termName);
                    ferrateGroupTaxInvoice.setTermamount(termAmount);
                    ferrateGroupTaxInvoice.setAttn(attn);
                    ferrateGroupTaxInvoice.setPhone(customerPhone);
                    ferrateGroupTaxInvoice.setAddress(billAddr.replaceAll("\n", "<br>"));
                    ferrateGroupTaxInvoice.setShipto(shipTo.replaceAll("\n", "<br>"));
                    ferrateGroupTaxInvoice.setDate(df1.format(entryDate));
                    ferrateGroupTaxInvoice.setContact(customerEmail);
                    ferrateGroupTaxInvoice.setCurrencysymbol(currency.getCurrencyCode() != null ? currency.getCurrencyCode() : "");
                    ferrateGroupTaxInvoice.setDonumber(linkTo);
                    ferrateGroupTaxInvoice.setDuedate(df1.format(dueDate));
                    ferrateGroupTaxInvoice.setGstpercent(taxPercent == 0 ? "" : "(" + Double.toString(taxPercent) + "%)");
                    ferrateGroupTaxInvoice.setPoref(poRefno);
                    ferrateGroupTaxInvoice.setTerms(terms);
                    ferrateGroupTaxInvoice.setInvno(invno);
                    ferrateGroupTaxInvoice.setPreparedby(approverName);
                    if (templateflag == Constants.senwan_tech_templateflag || templateflag == Constants.pacific_tec_templateflag || templateflag == Constants.HCIS_templateflag) {
                        ferrateGroupTaxInvoice.setMemo(memo.replaceAll("\n", "<br>"));
                        ferrateGroupTaxInvoice.setCurrencyname(currency.getCurrencyCode() != null ? currency.getCurrencyCode() : currency.getSymbol());
                        ferrateGroupTaxInvoice.setSubtotal(senwanTecDecimalFormat.format(total));
                        ferrateGroupTaxInvoice.setGst(senwanTecDecimalFormat.format(totaltax + rowTaxAmountTotal));
                        ferrateGroupTaxInvoice.setTotalamount(curr + " " + senwanTecDecimalFormat.format(totalAmount));
                        ferrateGroupTaxInvoice.setGstTotal(senwanTecDecimalFormat.format(rowTaxAmountTotal));
                        ferrateGroupTaxInvoice.setTotalWithoutGst(senwanTecDecimalFormat.format(total));
                    } else {
                        ferrateGroupTaxInvoice.setMemo(memo);
                        ferrateGroupTaxInvoice.setCurrencyname(currency.getName() != null ? currency.getName() : currency.getSymbol());
                        ferrateGroupTaxInvoice.setSubtotal(curr + " " + decimalFormat.format(total));
                        ferrateGroupTaxInvoice.setGst(curr + " " + decimalFormat.format(totaltax + rowTaxAmountTotal));
                        ferrateGroupTaxInvoice.setTotalamount(curr + " " + decimalFormat.format(totalAmount));
                    }
                    ferrateGroupTaxInvoicesList.add(ferrateGroupTaxInvoice);
                    invoiceMap.put("CommercialInvoiceSubReportData", new JRBeanCollectionDataSource(commercialinvoiceSubReportsList));
                    invoiceMap.put("PacificTecAddressTable", new JRBeanCollectionDataSource(pacificTecAddressTableList));
                    invoiceMap.put("PacificTecSubReport", new JRBeanCollectionDataSource(pacificTecSubReportList));
                    invoiceMap.put("format", "pdf");
                    String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String header = StorageHandler.GetDocStorePath() + companyid + "_header" + FileUploadHandler.getCompanyImageExt();
                    String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("logo", logo);
                    invoiceMap.put("header", header);
                    invoiceMap.put("footer", footer);
//            invoiceMap.put("datasource", new JRBeanCollectionDataSource(ferrateGroupTaxInvoicesList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "TaxInvoice.pdf");
                    boolean isAdhocFlag = request.getParameter("isAdhocFlag") != null ? Boolean.parseBoolean(request.getParameter("isAdhocFlag")) : false;
                    InputStream inputStream = null;
                    if (templateflag == Constants.pacific_tec_templateflag) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PacificTecTaxInvoice.jrxml");
                    } else if (templateflag == Constants.senwan_tech_templateflag) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SenwanTecTaxInvoice.jrxml");
                    } else if (templateflag == Constants.HCIS_templateflag) {
                        InputStream SubReportInputStream = null;
                        if (isAdhocFlag) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/HCISTaxInvoice.jrxml");
                            SubReportInputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/HCISTaxInvoiceSubReport.jrxml");
                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/HCISFeeTaxInvoice.jrxml");
                            SubReportInputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/HCISFeeTaxInvoiceSubReport.jrxml");
                        }
                        JasperDesign SubReportJasperDesign = JRXmlLoader.load(SubReportInputStream);
                        JasperReport SubReportJasperReport = JasperCompileManager.compileReport(SubReportJasperDesign);
                        invoiceMap.put("TaxInvoiceSubReport", SubReportJasperReport);
                        invoiceMap.put("TaxInvoiceSubReportData", new JRBeanCollectionDataSource(commercialinvoiceSubReportsList));
                    } else {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/FerrateGroupTaxInvoice.jrxml");
                    }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(ferrateGroupTaxInvoicesList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }
    
    @Override
    public List<Object> exportForm21AInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        List tableData = new ArrayList();
        String billid = "",filename="",startdate="", enddate="",companyid="",jrxmlName="";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        boolean isForm202 = false;
        int year = 0;
        String yearMonthOrQuater = "";
        SimpleDateFormat gdf = new SimpleDateFormat("yyyy-MM-dd");
        DateFormat userdf = authHandler.getUserDateFormatter(request);
        SimpleDateFormat sdfYear = new SimpleDateFormat("yyyy");
        SimpleDateFormat sdfMonth = new SimpleDateFormat("MM");
        if(!StringUtil.isNullOrEmpty(request.getParameter("isform202"))){
            isForm202 = Boolean.parseBoolean(request.getParameter("isform202"));
        }
        if(!StringUtil.isNullOrEmpty(request.getParameter("startdate"))){
            startdate =request.getParameter("startdate");
        }
        if(!StringUtil.isNullOrEmpty(request.getParameter("enddate"))){
            enddate = request.getParameter("enddate");
        }
        if(!isForm202){
            int frequency=(!StringUtil.isNullOrEmpty(request.getParameter("frequency")))?Integer.parseInt(request.getParameter("frequency").toString()):0;
            String period=(!StringUtil.isNullOrEmpty(request.getParameter("period")))?request.getParameter("period").toString():"";
            year=Integer.parseInt((!StringUtil.isNullOrEmpty(request.getParameter("year")))?request.getParameter("year").toString():"0");
            Date nextYear=new Date();
            DateFormat df = new SimpleDateFormat("yyyy");
            Calendar c = Calendar.getInstance();
            c.setTime(new Date());
            c.add(Calendar.YEAR, +1);
            nextYear.setTime(c.getTime().getTime());
            if(frequency==0){
                startdate =year+"-"+"04"+"-"+"01";
                enddate = (year+1)+"-"+"03"+"-"+"31";
            }else if (!StringUtil.isNullOrEmpty(request.getParameter("frequency"))) {  // get start date and end date

                if (request.getParameter("frequency").equals("1")) { //Quaterly
                    int firstMonth = 0;
                    int lastMonth = 11;
                    String qq = "";
                    if (request.getParameter("period").equals("quater4")) { //1st January 2017 to 31st Mar 2017 (Quarter IV)
                        firstMonth = 0;
                        lastMonth = 2;
                        qq = "44";
                        year+=1;
                    } else if (request.getParameter("period").equals("quater1")) {  //1st April 2016 to 30th June 2016 (Quarter I)
                        firstMonth = 3;
                        lastMonth = 5;
                        qq = "41";
                    } else if (request.getParameter("period").equals("quater2")) {  //1st July 2016 to 30th September 2016 (Quarter II)
                        firstMonth = 6;
                        lastMonth = 8;
                        qq = "42";
                    } else if (request.getParameter("period").equals("quater3")) { //1st October 2016 to 31st December 2016 (Quarter III)
                        firstMonth = 9;
                        lastMonth = 11;
                        qq = "43";
                    }
                    Calendar calendar = Calendar.getInstance();
                    calendar.set(Calendar.YEAR, year);
                    calendar.set(Calendar.MONTH, firstMonth);
                    calendar.set(Calendar.DATE, 1);
                    Date firstDate = calendar.getTime();
                    startdate = gdf.format(firstDate);

                    calendar.set(Calendar.MONTH, lastMonth);
                    int TotalDaysOfMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    calendar.set(Calendar.DATE, TotalDaysOfMonth);
                    Date lastDate = calendar.getTime();
                    enddate = gdf.format(lastDate);

                    yearMonthOrQuater = sdfYear.format(firstDate) + qq;

                } else { // Monthly

                    Calendar calendar = Calendar.getInstance();
                    int month = Integer.parseInt(request.getParameter("period"));
                    calendar.set(Calendar.YEAR, year);
                    calendar.set(Calendar.MONTH, month);
                    calendar.set(Calendar.DATE, 1);
                    Date firstDate = calendar.getTime();
                    startdate = gdf.format(firstDate);

                    int TotalDaysOfMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    calendar.set(Calendar.DATE, TotalDaysOfMonth);
                    Date lastDate = calendar.getTime();
                    enddate = gdf.format(lastDate);

                    yearMonthOrQuater = sdfYear.format(firstDate) + sdfMonth.format(firstDate);
                }
            }
        }
        
        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                companyid = sessionHandlerImpl.getCompanyid(request);
                Map<String, Object> dataMap = new HashMap<String, Object>();
                try {
                    JasperPrint jasperPrint = null;
                    JasperReport jasperReport = null;
                    
                    Map<String, Object> requestparams = new HashMap<String, Object>();
                    requestparams.put("moduleid",moduleid);
                    requestparams.put("companyid",companyid);
                    requestparams.put("startdate",startdate);
                    requestparams.put("enddate",enddate);
                    requestparams.put("isForm202",isForm202);
                    
                    dataMap = exportForm201AJson(requestparams);
                    
                    if(dataMap.containsKey("filename") && dataMap.get("filename") != null && !StringUtil.isNullOrEmpty(dataMap.get("filename").toString())){
                        filename = dataMap.get("filename").toString();
                    }
                    if(dataMap.containsKey("jrxmlName") && dataMap.get("jrxmlName") != null && !StringUtil.isNullOrEmpty(dataMap.get("jrxmlName").toString())){
                        jrxmlName = dataMap.get("jrxmlName").toString();
                    }
//                        
//                        /********************************* Jasper Operations **********************************************/
                    final OnlyDatePojo odp = new OnlyDatePojo();
                    odp.setDate(new Date().toString());
                    List datePojoList = new ArrayList() {{
                        add(odp);
                    }};

                    dataMap.put("format", "pdf");
                    JRBeanCollectionDataSource beanColDataSource = null;
                    beanColDataSource = new JRBeanCollectionDataSource(datePojoList);

                    response.setHeader("Content-Disposition", "attachment;filename=\""+filename+".pdf\"");
                    InputStream inputStream = null;
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + jrxmlName );
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    jasperPrint = JasperFillManager.fillReport(jasperReport, dataMap, beanColDataSource);
                    list.add(jasperPrint);
                    
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }
    
    @Override
    public Map exportForm201AJson(Map requestparams) throws ServiceException{
        List tableData = new ArrayList();
        JSONArray excelData = new JSONArray();
        String  filename = "", startdate = "", enddate = "", companyid = "";
        Map<String, Object> dataMap = new HashMap<String, Object>();
        try {
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
            HashMap<String, Object> allInvReqParams = new HashMap<String, Object>();
            KwlReturnObject idresult = null;
            KwlReturnObject allInvResult = null;
            Iterator itr = null;
            Iterator itrAllInv = null;
            double total = 0;
            double rowTaxAmountTotal = 0;
            String invoiceNumber = "";
            Date invoiceDate = null;
            String customerName, customerVatNo;
            String jrxmlName = "/Form201A.jrxml";
            boolean isForm202 = false;
            
            int moduleid = 0;
            if(requestparams.containsKey("moduleid") && requestparams.get("moduleid") !=null && !StringUtil.isNullOrEmpty(requestparams.get("moduleid").toString())){
                moduleid = Integer.parseInt(requestparams.get("moduleid").toString());
            }
            if(requestparams.containsKey("companyid") && requestparams.get("companyid") !=null && !StringUtil.isNullOrEmpty(requestparams.get("companyid").toString())){
                companyid = requestparams.get("companyid").toString();
            }
            if(requestparams.containsKey("isForm202") && requestparams.get("isForm202") !=null && !StringUtil.isNullOrEmpty(requestparams.get("isForm202").toString())){
                isForm202 = Boolean.parseBoolean(requestparams.get("isForm202").toString());
            }
            if(requestparams.containsKey("startdate") && requestparams.get("startdate") !=null && !StringUtil.isNullOrEmpty(requestparams.get("startdate").toString())){
                startdate = requestparams.get("startdate").toString();
            }
            if(requestparams.containsKey("enddate") && requestparams.get("enddate") !=null && !StringUtil.isNullOrEmpty(requestparams.get("enddate").toString())){
                enddate = requestparams.get("enddate").toString();
            }

            order_by.add("srno");
            order_type.add("asc");

            allInvReqParams.put("startDate", startdate);
            allInvReqParams.put("endDate", enddate);

            if (moduleid == Constants.Acc_Invoice_ModuleId) {
                Double allTotal = 0.0;
                Double totalVOG = 0.0;
                InvoiceDetail row = null;
                Double totalTax = 0.0;

                KwlReturnObject preferences = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) preferences.getEntityList().get(0);

                KwlReturnObject comppreferences = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences companyAccPreferences = (CompanyAccountPreferences) comppreferences.getEntityList().get(0);


                String regNo = extraCompanyPreferences.getVatNumber() != null ? extraCompanyPreferences.getVatNumber() : "";
                char[] reg = regNo.toCharArray();
                int charCnt = 1;
                for (; charCnt <= reg.length; charCnt++) {
                    dataMap.put("no" + charCnt, reg[charCnt - 1] + "");
                }
                for (int j = charCnt; j <= 10; j++) {
                    dataMap.put("no" + j, " ");
                }
                allInvReqParams.put("companyid", companyid);
                allInvReqParams.put("isSales", true);
                allInvReqParams.put("deleteflag", "F");
                allInvResult = accInvoiceDAOobj.getAllInvoices(allInvReqParams);
                itrAllInv = allInvResult.getEntityList().iterator();
                int i = 0,srno = 0;
                double totalVatAmount = 0;
                double totalAdditionalVatAmount = 0;
                double totalTaxVatAmount = 0;
                while (itrAllInv.hasNext()) {
                    double totalTaxVatAmountInvoice = 0;
                    /**
                             * ******************************* Objects Required *********************************************
                     */
                    itr = null;
                    Object invObj = (Object) itrAllInv.next();
                    KwlReturnObject invoiceResult = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), invObj.toString());
                    Invoice inv = (Invoice) invoiceResult.getEntityList().get(0);

                    filter_names = new ArrayList();
                    filter_params = new ArrayList();
                    invRequestParams = new HashMap<String, Object>();

                    filter_names.add("invoice.ID");
                    filter_params.add(inv.getID());
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);
                    idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();

                    invoiceNumber = (inv != null && !StringUtil.isNullOrEmpty(inv.getInvoiceNumber())) ? inv.getInvoiceNumber() : "";
//                    invoiceDate = (inv != null && inv.getJournalEntry().getEntryDate() != null) ? inv.getJournalEntry().getEntryDate() : new Date();
                    invoiceDate = (inv != null && inv.getCreationDate() != null) ? inv.getCreationDate() : new Date();
                    customerName = (inv != null && !StringUtil.isNullOrEmpty(inv.getCustomer().getName())) ? inv.getCustomer().getName() : "";
                    customerVatNo = (inv != null && !StringUtil.isNullOrEmpty(inv.getCustomer().getVATTINnumber())) ? inv.getCustomer().getVATTINnumber() : "";

                    Map<String, Object> tableMap = new HashMap<String, Object>();
                    String prodCode = "";
                    double quantity = 0;
                    double rate = 0;
                    double amount1 = 0;
                    double rowTermAmount = 0;
                    i++;
                    while (itr.hasNext()) {
                        double vatAmount = 0;
                        double additionalVatAmount = 0;
                        double taxVatAmount = 0;
                        double assessableValue = 0;
                        srno++;
                        row = (InvoiceDetail) itr.next();
                        prodCode = row.getInventory().getProduct().getHSCode() != null ? row.getInventory().getProduct().getHSCode() : "";
                        quantity += row.getInventory().getQuantity();
                        rate += row.getRate();
                        amount1 += row.getRate() * row.getInventory().getQuantity();
                        amount1 -= row.getDiscount() != null ? row.getDiscount().getDiscountValue() : 0.0;
                        HashMap<String, Object> InvoiceDetailParams = new HashMap<String, Object>();
                        InvoiceDetailParams.put("InvoiceDetailid", row.getID());
                        InvoiceDetailParams.put("orderbyadditionaltax",true);
                        //Vat
                        InvoiceDetailParams.put("termtype", 1);
                        KwlReturnObject grdTermMapresult = accInvoiceDAOobj.getInvoicedetailTermMap(InvoiceDetailParams);
                        List<InvoiceDetailTermsMap> vat = grdTermMapresult.getEntityList();
                        if(inv.getCustomer().getDealertype().equals("1") && !StringUtil.isNullOrEmpty(inv.getCustomer().getVATTINnumber())){
                            for (InvoiceDetailTermsMap invoicedetailTermMap : vat) {
                                LineLevelTerms mt = invoicedetailTermMap.getTerm();
                                if(mt.isIsAdditionalTax()){
                                    assessableValue = invoicedetailTermMap.getAssessablevalue();
                                    additionalVatAmount += invoicedetailTermMap.getTermamount();
                                } else{
                                    assessableValue = invoicedetailTermMap.getAssessablevalue();
                                    vatAmount += invoicedetailTermMap.getTermamount();
                                }
                                taxVatAmount += invoicedetailTermMap.getTermamount();
                            }
                        }
                        
                        if(taxVatAmount > 0){ // Registered Dealer
                            rowTaxAmountTotal += row.getRowTaxAmount();
                            rowTaxAmountTotal += row.getRowTermTaxAmount();
                            rowTermAmount += row.getRowTermAmount();
                            totalTax += row.getRowTermAmount();
                            totalVatAmount += vatAmount;
                            totalAdditionalVatAmount += additionalVatAmount;
                            totalTaxVatAmount += taxVatAmount;
                            totalTaxVatAmountInvoice += taxVatAmount;
                            Map<String,Object> excelMap = new HashMap<String,Object>();
                            excelMap.put("srno", srno + "");
                            excelMap.put("taxIncomeNo", invoiceNumber);
                            excelMap.put("date", invoiceDate + "");
                            excelMap.put("name", customerName);
                            excelMap.put("rcNo", customerVatNo);
                            excelMap.put("goodsWithHSN", prodCode);
                            excelMap.put("valueOfGoods", authHandler.formattingDecimalForAmount(assessableValue, companyid) + "");
                            excelMap.put("tax", authHandler.formattingDecimalForAmount(vatAmount, companyid) + "");
                            excelMap.put("additionalTax", authHandler.formattingDecimalForAmount(additionalVatAmount, companyid) + "");
                            excelMap.put("total", authHandler.formattingDecimalForAmount(assessableValue+additionalVatAmount+vatAmount, companyid) + "");
                            excelData.put(excelMap);
                        }
                    }
                    if(totalTaxVatAmountInvoice > 0 && inv.getCustomer().getDealertype().equals("1") && !StringUtil.isNullOrEmpty(inv.getCustomer().getVATTINnumber())){
                        total = total + amount1;
                        totalVOG += rate;
                        tableMap.put("srno", i + "");
                        tableMap.put("taxIncomeNo", invoiceNumber);
                        tableMap.put("date", invoiceDate + "");
                        tableMap.put("name", customerName);
                        tableMap.put("rcNo", customerVatNo);
                        tableMap.put("goodsWithHSN", prodCode);
                        tableMap.put("valueOfGoods", authHandler.formattingDecimalForAmount(rate, companyid) + "");
                        tableMap.put("tax", authHandler.formattingDecimalForAmount(totalTaxVatAmountInvoice, companyid) + "");
                        tableMap.put("total", authHandler.formattingDecimalForAmount(amount1, companyid) + "");
                        tableData.add(tableMap);
                    }
                }
                    dataMap.put("name", extraCompanyPreferences.getCompany().getCompanyName());
                    dataMap.put("styleOfBusiness", companyAccPreferences.getCompanyType().getName());
                    // TODO : Tax from date and toDate
                    dataMap.put("fromDate", !StringUtil.isNullOrEmpty(startdate) ? startdate : "");
                    dataMap.put("toDate", !StringUtil.isNullOrEmpty(enddate) ? enddate : "");
                    dataMap.put("allTotal", authHandler.formattingDecimalForAmount(total, companyid) + "");
                    dataMap.put("tableTax", authHandler.formattingDecimalForAmount(totalTaxVatAmount, companyid) + "");
                    dataMap.put("tableVOG", authHandler.formattingDecimalForAmount(totalVOG, companyid) + "");
                    dataMap.put("beanColDataSource", new JRBeanCollectionDataSource(tableData));
                filename = "Form201A_" + enddate;
            } else {

                GoodsReceiptDetail row = null;
                Double allTotal = 0.0;
                Double totalVOG = 0.0;
                Double totalTax = 0.0;

                KwlReturnObject preferences = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) preferences.getEntityList().get(0);

                KwlReturnObject comppreferences = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences companyAccPreferences = (CompanyAccountPreferences) comppreferences.getEntityList().get(0);

                allInvReqParams.put("companyid", companyid);
                allInvReqParams.put("isSales", false);
                allInvReqParams.put("deleteflag", "F");
                allInvResult = accInvoiceDAOobj.getAllInvoices(allInvReqParams);
                itrAllInv = allInvResult.getEntityList().iterator();
                int i = 0,srno = 0;
                double totalVatAmount = 0;
                double totalAdditionalVatAmount = 0;
                double totalTaxVatAmount = 0;
                while (itrAllInv.hasNext()) {
                    double totalTaxVatAmountInvoice = 0;
                    /**
                             * ******************************* Objects Required *********************************************
                     */
                    itr = null;
                    Object invObj = (Object) itrAllInv.next();

                    KwlReturnObject grResult = kwlCommonTablesDAOObj.getObject(GoodsReceipt.class.getName(), invObj.toString());
                    GoodsReceipt inv = (GoodsReceipt) grResult.getEntityList().get(0);
                    filter_names = new ArrayList();
                    filter_params = new ArrayList();
                    invRequestParams = new HashMap<String, Object>();

                    filter_names.add("goodsReceipt.ID");
                    filter_params.add(inv.getID());
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);
                    idresult = accGoodsReceiptobj.getGoodsReceiptDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();

                    /**
                             * ******************************* Data *********************************************
                     */
                    invoiceNumber = (inv != null && !StringUtil.isNullOrEmpty(inv.getGoodsReceiptNumber())) ? inv.getGoodsReceiptNumber() : "";
//                    invoiceDate = (inv != null && inv.getJournalEntry().getEntryDate() != null) ? inv.getJournalEntry().getEntryDate() : new Date();
                    invoiceDate = (inv != null && inv.getCreationDate() != null) ? inv.getCreationDate() : new Date();
                    customerName = (inv != null && !StringUtil.isNullOrEmpty(inv.getVendor().getName())) ? inv.getVendor().getName() : "";
                    customerVatNo = (inv != null && !StringUtil.isNullOrEmpty(inv.getVendor().getVATTINnumber())) ? inv.getVendor().getVATTINnumber() : "";
                    Map<String, Object> tableMap = new HashMap<String, Object>();
                    String prodCode = "";
                    double quantity = 0;
                    double rate = 0;
                    double amount1 = 0;
                    double rowTermAmount = 0;
                    i++;
                    while (itr.hasNext()) {
                        double vatAmount = 0;
                        double additionalVatAmount = 0;
                        double taxVatAmount = 0;
                        double assessableValue = 0;
                        srno++;
                        row = (GoodsReceiptDetail) itr.next();
                        prodCode = row.getInventory().getProduct().getHSCode() != null ? row.getInventory().getProduct().getHSCode() : "";
                        quantity += row.getInventory().getQuantity();
                        rate += row.getRate();
                        amount1 += row.getRate() * row.getInventory().getQuantity();
                        amount1 -= row.getDiscount() != null ? row.getDiscount().getDiscountValue() : 0.0;
                        rowTaxAmountTotal += row.getRowTaxAmount() + row.getRowTermTaxAmount();
                        rowTermAmount += row.getRowTermAmount();
                        totalTax += row.getRowTermAmount();
                        HashMap<String, Object> GoodsReceiptDetailParams = new HashMap<String, Object>();
                        GoodsReceiptDetailParams.put("GoodsReceiptDetailid", row.getID());
                        GoodsReceiptDetailParams.put("orderbyadditionaltax", true);
                        //Vat
                        GoodsReceiptDetailParams.put("termtype", 1);
                        KwlReturnObject grdTermMapresult = accGoodsReceiptobj.getGoodsReceiptdetailTermMap(GoodsReceiptDetailParams);
                        List<ReceiptDetailTermsMap> vat = grdTermMapresult.getEntityList();
                        if(inv.getVendor().getDealertype().equals("1") && !StringUtil.isNullOrEmpty(inv.getVendor().getVATTINnumber())){
                            for (ReceiptDetailTermsMap invoicedetailTermMap : vat) {
                                LineLevelTerms mt = invoicedetailTermMap.getTerm();
                                if(mt.isIsAdditionalTax()){
                                    assessableValue = invoicedetailTermMap.getAssessablevalue();
                                    additionalVatAmount += invoicedetailTermMap.getTermamount();
                                } else{
                                    assessableValue = invoicedetailTermMap.getAssessablevalue();
                                    vatAmount += invoicedetailTermMap.getTermamount();
                                }
                                taxVatAmount += invoicedetailTermMap.getTermamount();
                            }
                        }
                        if(taxVatAmount > 0){ // Registered Dealer
                            rowTaxAmountTotal += row.getRowTaxAmount() + row.getRowTermTaxAmount();
                            rowTermAmount += row.getRowTermAmount();
                            totalTax += row.getRowTermAmount();
                            totalVatAmount += vatAmount;
                            totalAdditionalVatAmount += additionalVatAmount;
                            totalTaxVatAmount += taxVatAmount;
                            totalTaxVatAmountInvoice += taxVatAmount;
                            Map<String,Object> excelMap = new HashMap<String,Object>();
                            excelMap.put("srno", srno + "");
                            excelMap.put("taxIncomeNo", invoiceNumber);
                            excelMap.put("date", invoiceDate + "");
                            excelMap.put("name", customerName);
                            excelMap.put("rcNo", customerVatNo);
                            excelMap.put("goodsWithHSN", prodCode);
                            excelMap.put("valueOfGoods", authHandler.formattingDecimalForAmount(assessableValue, companyid) + "");
                            excelMap.put("tax", authHandler.formattingDecimalForAmount(vatAmount, companyid) + "");
                            excelMap.put("additionalTax", authHandler.formattingDecimalForAmount(additionalVatAmount, companyid) + "");
                            excelMap.put("total", authHandler.formattingDecimalForAmount(assessableValue+additionalVatAmount+vatAmount, companyid) + "");
                            excelData.put(excelMap);
                        }
                    }
                    if(totalTaxVatAmountInvoice > 0 && inv.getVendor().getDealertype().equals("1") && !StringUtil.isNullOrEmpty(inv.getVendor().getVATTINnumber())){
                        total = total + amount1;
                        totalVOG += rate;
                        tableMap.put("srno", i + "");
                        tableMap.put("taxIncomeNo", invoiceNumber);
                        tableMap.put("date", invoiceDate + "");
                        tableMap.put("name", customerName);
                        tableMap.put("rcNo", customerVatNo);
                        tableMap.put("goodsWithHSN", prodCode);
                        tableMap.put("valueOfGoods", authHandler.formattingDecimalForAmount(rate, companyid) + "");
                        tableMap.put("tax", authHandler.formattingDecimalForAmount(totalTaxVatAmountInvoice, companyid) + "");
                        tableMap.put("total", authHandler.formattingDecimalForAmount(amount1, companyid) + "");
                        tableData.add(tableMap);
                    }
                }
                String regNo = extraCompanyPreferences.getVatNumber() != null ? extraCompanyPreferences.getVatNumber() : "";
                if (isForm202) {
                    jrxmlName = "/Form202A.jrxml";
                    String companyAddress = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
                    dataMap.put("nameOfDealer", extraCompanyPreferences.getCompany().getCompanyName());
                    dataMap.put("address", companyAddress);

                    dataMap.put("regNo", regNo);
                    filename = "Form202A_" + invoiceNumber;
                } else {
                    jrxmlName = "/Form201B.jrxml";

                    char[] reg = regNo.toCharArray();
                    int charCnt = 1;
                    for (; charCnt <= reg.length; charCnt++) {
                        dataMap.put("no" + charCnt, reg[charCnt - 1] + "");
                    }
                    for (int j = charCnt; j <= 10; j++) {
                        dataMap.put("no" + j, " ");
                    }
                    dataMap.put("name", extraCompanyPreferences.getCompany().getCompanyName());
                    dataMap.put("styleOfBusiness", companyAccPreferences.getCompanyType().getName());
                    filename = "Form201B_" + invoiceNumber;
                }
                // TODO : Tax from date and toDate
                dataMap.put("fromDate", !StringUtil.isNullOrEmpty(startdate) ? startdate : "");
                dataMap.put("toDate", !StringUtil.isNullOrEmpty(enddate) ? enddate : "");
                dataMap.put("allTotal", authHandler.formattingDecimalForAmount(total, companyid) + "");
                dataMap.put("tableTax", authHandler.formattingDecimalForAmount(totalTax, companyid) + "");
                dataMap.put("tableVOG", authHandler.formattingDecimalForAmount(totalVOG, companyid) + "");
                dataMap.put("beanColDataSource", new JRBeanCollectionDataSource(tableData));
            }

            dataMap.put("format", "pdf");
            dataMap.put("dataMap", dataMap);
            dataMap.put("tableMap", tableData);
            dataMap.put("excelData", excelData);
            dataMap.put("filename", filename);
            dataMap.put("jrxmlName", jrxmlName);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dataMap;
    }
    
    @Override
    public List<JasperPrint> exportExciseFormERJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<JasperPrint> list = new ArrayList<JasperPrint>();
        List tableData = new ArrayList();
        try {
            Iterator itr = null;
            String filename = "ExciseFormER456";
            JasperPrint[] jasperPrint = new JasperPrint[10];
            JasperReport jasperReport = null;
            String reportName = request.getParameter("report");
            int fileCount = 1;
            String[] jrxmlName = new String[10];
            Map<String, Object> dataMap = new HashMap<String, Object>();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            KwlReturnObject salespricedatewise = null,idresult = null;
            
            KwlReturnObject preferences = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) preferences.getEntityList().get(0);

            KwlReturnObject comppreferences = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccPreferences = (CompanyAccountPreferences) comppreferences.getEntityList().get(0);
            
            KwlReturnObject compobj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Date nextYear=new Date();
            Company companyObj = (Company) compobj.getEntityList().get(0);
            DateFormat df = new SimpleDateFormat("yyyy");
            Calendar c = Calendar.getInstance();
            c.setTime(new Date());
            c.add(Calendar.YEAR, +1);
            nextYear.setTime(c.getTime().getTime());
            int countryid = 0;
            if(companyObj != null && companyObj.getCountry()!= null && !StringUtil.isNullOrEmpty(companyObj.getCountry().getID())){
                countryid = Integer.parseInt(companyObj.getCountry().getID());
            }
            
            if (reportName.equals("FORM_ER_5")) {
                jrxmlName[0] = "/FormER5_1.jrxml";
                jrxmlName[1] = "/FormER5_2.jrxml";
                fileCount = 2;
                filename = "FORM_ER_5";
                
                String regNo = extraCompanyPreferences.getEccNumber() != null ? extraCompanyPreferences.getEccNumber() : "";
                char[] reg = regNo.toCharArray();
                int charCnt = 1;
                for (; charCnt <= reg.length; charCnt++) {
                    dataMap.put("no" + charCnt, reg[charCnt - 1] + "");
                }
                for (int j = charCnt; j <= 15; j++) {
                    dataMap.put("no" + j, " ");
                }
                dataMap.put("manufacturerName", StringUtil.isNullOrEmpty(companyObj.getCompanyName())?"":companyObj.getCompanyName());//Company as Manufacturer Name
                dataMap.put("companyName", StringUtil.isNullOrEmpty(companyObj.getCompanyName())?"":companyObj.getCompanyName());
                dataMap.put("financialYear", df.format(new Date())+"-"+df.format(nextYear));
                Map<String, Object> tableMap = new HashMap<String, Object>();
                tableData = new ArrayList();
                HashMap<String, Object> requestParams = new HashMap<>();
                requestParams.put("companyid", companyid);
                KwlReturnObject retObj = accProductObj.getAssemblyProducts(requestParams);
                List<ProductBuild> listAssembly = retObj.getEntityList();
                int i = 0;
                boolean assemblyPut = true;
                if (listAssembly.size() > 0) {
                    for (ProductBuild assProduct : listAssembly) {
                        requestParams = new HashMap<>();
                        requestParams.put("companyid", companyid);
                        requestParams.put("productid", assProduct.getProduct().getID());
                        KwlReturnObject retInObj = accProductObj.getBuildAssemblyDetails(requestParams);
                        List<ProductBuildDetails> listInvent = retInObj.getEntityList();
                        assemblyPut = true;
                        if (listInvent.size() > 0) {
                            for (ProductBuildDetails prBuildDetailsObj:listInvent) {
                                tableMap = new HashMap<String, Object>();
                                String productName=prBuildDetailsObj.getInventory().getProduct().getName();
                                String tarrifName=prBuildDetailsObj.getInventory().getProduct().getHSCode();
                                String productUOM=prBuildDetailsObj.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA();
                                String assproductName=assProduct.getProduct().getName();
                                String asstarrifName=assProduct.getProduct().getHSCode();
                                String assproductUOM=assProduct.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                                String quantityOfPIUsed=prBuildDetailsObj.getAquantity() + "";
                                /////////////////////// Table Data ///////////////////////////////////////////////////////////
                                tableMap.put("srNo", "" + (++i));
                                tableMap.put("productName", StringUtil.isNullOrEmpty(productName)?"":productName);
                                tableMap.put("tarrifName", StringUtil.isNullOrEmpty(tarrifName)?"":tarrifName);//HSN Code
                                tableMap.put("productUOM", StringUtil.isNullOrEmpty(productUOM)?"":productUOM);
                                if (assemblyPut) {
                                    tableMap.put("assProductName", StringUtil.isNullOrEmpty(assproductName)?"":assproductName);
                                    tableMap.put("assTarrifName", StringUtil.isNullOrEmpty(asstarrifName)?"":asstarrifName);//HSN Code
                                    tableMap.put("assProductUOM", StringUtil.isNullOrEmpty(assproductUOM)?"":assproductUOM);
                                    assemblyPut = false;
                                } else {
                                    tableMap.put("assProductName", "");
                                    tableMap.put("assTarrifName", "");
                                    tableMap.put("assProductUOM", "");
                                }
                                tableMap.put("quantityOfPIUsed", StringUtil.isNullOrEmpty(quantityOfPIUsed)?"":quantityOfPIUsed);
                                tableData.add(tableMap);
                            }
                        }
                    }
                }
                dataMap.put("tableDataSource", new JRBeanCollectionDataSource(tableData));
            }else if(reportName.equals("Form45")){
                
                jrxmlName[0] = "/Form45_1.jrxml";
                jrxmlName[1] = "/Form45_2.jrxml";
                fileCount = 2;
                filename = "Form45";
                
                String purchaseOrderId = request.getParameter("purchaseOrderId");
                KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(PurchaseOrder.class.getName(), purchaseOrderId);
                PurchaseOrder purchaseOrder = (PurchaseOrder) cap.getEntityList().get(0);
                HashMap<String, Object> poRequestParams = new HashMap<String, Object>();
                filter_names.add("purchaseOrder.ID");
                filter_params.add(purchaseOrder.getID());
                order_by.add("srno");
                order_type.add("asc");
                poRequestParams.put("filter_names", filter_names);
                poRequestParams.put("filter_params", filter_params);
                poRequestParams.put("order_by", order_by);
                poRequestParams.put("order_type", order_type);
                idresult = accPurchaseOrderobj.getPurchaseOrderDetails(poRequestParams);
                itr = idresult.getEntityList().iterator();
                PurchaseOrderDetail row = null;
                int i = 0, exciseType=0;
                List<String> listUOM = new ArrayList<String>();
                List<String> listProductName = new ArrayList<String>();
                List<Double> listQuantity = new ArrayList<Double>();
                KWLCurrency currency = purchaseOrder.getCurrency();
                String curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                String uom="",productName="",valuationMethod="";
                double Quantity = 0, purchaseRate=0, purchaseAssesValue = 0, salesRate=0, salesAssesValue = 0, totalQuantity=0, flatAmount=0; 
                double purchaseExcisePer=0,salesExcisePer=0,purchaseExciseAmnt=0,salesExciseAmnt=0;
                while (itr.hasNext()) {
                    row = (PurchaseOrderDetail) itr.next();
                    uom = row.getUom() == null ? "" : row.getUom().getNameEmptyforNA();
                    if(listUOM.size()>0){//For Multiple product like 5 Unit, 5kg
                        int j=0;
                        while(j<listUOM.size()){
                            if(listUOM.get(j++).equals(uom)){
                                break;
                            }else{
                                listUOM.add(uom);
                                listQuantity.add(row.getQuantity());
                                listProductName.add(row.getProduct().getName());
                            }
                        }
                    }else{
                        listUOM.add(uom);
                        listQuantity.add(row.getQuantity());
                        listProductName.add(row.getProduct().getName());
                    }
                    productName+=(StringUtil.isNullOrEmpty(productName))?row.getProduct().getName():","+row.getProduct().getName();
                    valuationMethod=row.getProduct().getValuationMethod()!=null ? row.getProduct().getValuationMethod().toString() : "";
                    Quantity=row.getQuantity();
                    purchaseRate=row.getRate();   
                    salespricedatewise= accProductObj.getProductPrice(row.getProduct().getID(), false, null, null, "");
                    salesRate=(salespricedatewise.getEntityList().get(0) == null ? 0 : Double.parseDouble(salespricedatewise.getEntityList().get(0).toString()));
                    purchaseAssesValue+=(Quantity*purchaseRate);
                    salesAssesValue+=(Quantity*salesRate);
                    HashMap<String, Object> requestParams = new HashMap<>();
                    requestParams.put("companyId", companyid);
                    requestParams.put("productId", row.getProduct().getID());
                    requestParams.put("purchaseSalesVal", false);
                    requestParams.put("termType", 2);
                    KwlReturnObject retObj = accProductObj.getLineLevelTerm(requestParams);
                    List<ProductTermsMap> listExcise = retObj.getEntityList();
                    if(listExcise.size()>0){
                        for (ProductTermsMap productTermsMap : listExcise) {
                            purchaseExcisePer=productTermsMap.getPercentage();
                            exciseType=productTermsMap.getTerm().getTaxType();
                            flatAmount=productTermsMap.getTerm().getTermAmount();
                        }
                    }
                    purchaseExciseAmnt+=(exciseType==1)?(Quantity*purchaseRate)*(purchaseExcisePer/100):(Quantity*flatAmount);
                    
                    requestParams = new HashMap<>();
                    requestParams.put("companyId", companyid);
                    requestParams.put("productId", row.getProduct().getID());
                    requestParams.put("purchaseSalesVal", true);
                    requestParams.put("termType", 2);
                    retObj = accProductObj.getLineLevelTerm(requestParams);
                    listExcise = retObj.getEntityList();
                    if(listExcise.size()>0){
                        for (ProductTermsMap productTermsMap : listExcise) {
                            salesExcisePer=productTermsMap.getPercentage();
                            exciseType=productTermsMap.getTerm().getTaxType();
                            flatAmount=productTermsMap.getTerm().getTermAmount();
                        }
                    }
                    salesExciseAmnt+=(exciseType==1)?(Quantity*salesRate)*(salesExcisePer/100):(Quantity*flatAmount);
                    totalQuantity+=Quantity;
                }
                String quantityText="";//For Multiple product like 5 Unit, 5kg
                if(listUOM.size()>1){
                    int j=0;
                    while(j<listUOM.size()){
                        quantityText+=(StringUtil.isNullOrEmpty(quantityText))?CustomDesignHandler.getAmountinCommaDecimal(listQuantity.get(j),2,countryid)+" "+listUOM.get(j):", "+CustomDesignHandler.getAmountinCommaDecimal(listQuantity.get(j),2,countryid)+" "+listUOM.get(j);
                        j++;
                    }
                }
                dataMap.put("namely", valuationMethod);//(Capture Excise calculation method from system control)
                dataMap.put("finacialYear", df.format(companyAccPreferences.getFinancialYearFrom())+"-"+df.format(nextYear));//(Capture from system control Financial year data i.e. 2016-17)
                dataMap.put("specifiedPurpose", (StringUtil.isNullOrEmpty(quantityText))?CustomDesignHandler.getAmountinCommaDecimal(totalQuantity,2,countryid)+" Quantity "+curr+". "+CustomDesignHandler.getAmountinCommaDecimal(purchaseAssesValue,2,countryid):quantityText + " "+curr+". "+CustomDesignHandler.getAmountinCommaDecimal(purchaseAssesValue,2,countryid));//(Quantity of product & value of the product capture from job work out order)
                dataMap.put("premises", ((companyObj.getAddress()!=null)?companyObj.getAddress():"")+", "+((companyObj.getCity()!=null)?companyObj.getCity():"")+", "+companyObj.getState().getStateName());//(Capture from system control Company address, City & State name)
                dataMap.put("rupees1", CustomDesignHandler.getAmountinCommaDecimal(purchaseExciseAmnt,2,countryid)+"");//(Capture value of excise duty charged at the time of purchase material from purchase invoice)
                dataMap.put("rupees2", CustomDesignHandler.getAmountinCommaDecimal(salesExciseAmnt,2,countryid)+"");//(Capture value of excise duty charged at the time of sales of material from Sales invoice)
                dataMap.put("subjectGoods", productName);//(Capture from job work out order Product name)
                dataMap.put("subjectGoodsPurpose", "_____________");
                dataMap.put("name", "________________");
                dataMap.put("namePremises", "___________");
                dataMap.put("nameRupees", "___________");
                dataMap.put("nameEnteredSNo", "___________");
                dataMap.put("nameDated", "___________");
                dataMap.put("division", (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getCommissionerateName()))?extraCompanyPreferences.getCommissionerateName():"");//(Capture Division from system controls use Commissionerate name as division)
            }else if(reportName.equals("Form402")){
                jrxmlName[0] = "/Form402_1.jrxml";
                jrxmlName[1] = "/Form402_2.jrxml";
                fileCount = 2;
                filename = "Form402";
                
                String invoiceId = request.getParameter("invoiceId");
                KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), invoiceId);
                Invoice invoice = (Invoice) cap.getEntityList().get(0);
                KWLCurrency currency = invoice.getCurrency();
                String curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                filter_names.add("invoice.ID");
                filter_params.add(invoice.getID());
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("filter_names", filter_names);
                invRequestParams.put("filter_params", filter_params);
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put("companyid", companyid);
                addressParams.put("isBillingAddress", false);
                addressParams.put("customerid", invoice.getCustomer().getID());
                CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                Map<String, Object> tableMap = new HashMap<String, Object>();
                tableData = new ArrayList();
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String companyName=companyObj.getCompanyName()+((!StringUtil.isNullOrEmpty(companyObj.getAddress()))?", "+companyObj.getAddress():"")+((!StringUtil.isNullOrEmpty(companyObj.getCity()))?", "+companyObj.getCity():"")+((!StringUtil.isNullOrEmpty(companyObj.getState().getStateName()))?", "+companyObj.getState().getStateName():"_________________");
                String districtName=(!StringUtil.isNullOrEmpty(companyObj.getCity()))?","+companyObj.getCity():"_________________";
                String invoiceNo=invoice.getInvoiceNumber();
//                String invDate=(invoice != null && invoice.getJournalEntry().getEntryDate() != null) ? invoice.getJournalEntry().getEntryDate().toString() : new Date().toString();
                String invDate=(invoice != null && invoice.getCreationDate() != null) ? invoice.getCreationDate().toString() : new Date().toString();
                String consignerName=companyObj.getCompanyName();
                String consigneeName=invoice.getCustomer().getName();
                String consignerState=(!StringUtil.isNullOrEmpty(companyObj.getState().getStateName()))?companyObj.getState().getStateName():"";
                String consignerAddress=(!StringUtil.isNullOrEmpty(companyObj.getAddress()))?", "+companyObj.getAddress():"";
                String consignerRegNo=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getVatNumber()) ? extraCompanyPreferences.getVatNumber() : "";
                String consigneeRegNo=StringUtil.isNullOrEmpty(invoice.getCustomer().getVATTINnumber())?"":invoice.getCustomer().getVATTINnumber();
                String consignerRegDate=(extraCompanyPreferences.getDateofregistration()!=null) ? extraCompanyPreferences.getDateofregistration().toString() : "";
                String consigneeRegDate=(invoice.getCustomer().getVatregdate()!=null)?invoice.getCustomer().getVatregdate().toString():"";
                String consignerCSTRegNo=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getCstNumber()) ? extraCompanyPreferences.getCstNumber() : "";
                String consigneeCSTRegNo=StringUtil.isNullOrEmpty(invoice.getCustomer().getCSTTINnumber())?"":invoice.getCustomer().getCSTTINnumber();
                String consignerCSTRegDate=(extraCompanyPreferences.getCstregistrationdate()!=null) ? extraCompanyPreferences.getCstregistrationdate().toString() : "";
                String consigneeCSTRegDate="";
                String consignerTelNo="";
                String districtRName = "",consigneeAddress = "", consigneeTelNo = "",consigneeFaxNo = "",companyRName = "";
                if(customerAddressDetails != null){
                    districtRName=!StringUtil.isNullOrEmpty(customerAddressDetails.getCity())?customerAddressDetails.getCity():"_________________";;
                    consigneeAddress=!StringUtil.isNullOrEmpty(customerAddressDetails.getAddress())?customerAddressDetails.getAddress():"";
                    consigneeTelNo=!StringUtil.isNullOrEmpty(customerAddressDetails.getMobileNumber())?customerAddressDetails.getMobileNumber():"";
                    consigneeFaxNo=!StringUtil.isNullOrEmpty(customerAddressDetails.getFax())?customerAddressDetails.getFax():"";
                    companyRName=!StringUtil.isNullOrEmpty(customerAddressDetails.getAddress())?invoice.getCustomer().getName()+", "+customerAddressDetails.getAddress():invoice.getCustomer().getName();
                }
                String consignerFaxNo="";
                double consignedValue=invoice.getInvoiceamount();
                int srNo=1;
		String productDesc="";
		String commodityCode="";
		double quantity=0;
		String taxRate="";
		double value=0, salesVATPer=0,flatAmount=0;
                itr = idresult.getEntityList().iterator();
                int i=0, VATType=0;
                while(itr.hasNext()){
                    InvoiceDetail row = (InvoiceDetail) itr.next();
                    tableMap = new HashMap<String, Object>();
                    HashMap<String, Object> requestParams = new HashMap<>();
                    requestParams.put("companyId", companyid);
                    requestParams.put("productId", row.getInventory().getProduct().getID());
                    requestParams.put("purchaseSalesVal", true);
                    requestParams.put("termType", 1);
                    KwlReturnObject retObj = accProductObj.getLineLevelTerm(requestParams);
                    List<ProductTermsMap> listExcise = retObj.getEntityList();
                    if(listExcise.size()>0){
                        for (ProductTermsMap productTermsMap : listExcise) {
                            salesVATPer=productTermsMap.getPercentage();
                            VATType=productTermsMap.getTerm().getTaxType();
                            flatAmount=productTermsMap.getTerm().getTermAmount();
                        }
                    }
                    productDesc=!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())?row.getInventory().getProduct().getDescription():row.getDescription();
                    commodityCode=(row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA() != null) ? row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA() : "";
                    quantity=row.getInventory().getQuantity();
                    taxRate=(VATType==0)?curr+". "+CustomDesignHandler.getAmountinCommaDecimal(flatAmount,2,countryid)+" Per "+commodityCode:CustomDesignHandler.getAmountinCommaDecimal(salesVATPer,2,countryid)+" %";
                    value=row.getRowTermAmount();
                    
                    tableMap.put("srNo", "" + (++i));
                    tableMap.put("productDesc", productDesc);
                    tableMap.put("commodityCode", commodityCode);
                    tableMap.put("quantity", CustomDesignHandler.getAmountinCommaDecimal(quantity,2,countryid)+"");
                    tableMap.put("taxRate", taxRate);
                    tableMap.put("value", CustomDesignHandler.getAmountinCommaDecimal(value,2,countryid)+"");
                    tableData.add(tableMap);
                }
                Set<CompanyAddressDetails> rows = extraCompanyPreferences.getCompanyAddressRows();
                for (CompanyAddressDetails cad : rows) {
                    if (cad.isIsBillingAddress()) {
                        String addr = StringUtil.isNullOrEmpty(cad.getAddress()) ? "" : cad.getAddress();
                        String city = StringUtil.isNullOrEmpty(cad.getCity()) ? "" : ", " + cad.getCity();
                        String state = StringUtil.isNullOrEmpty(cad.getState()) ? "" : ", " + cad.getState();
                        String country = StringUtil.isNullOrEmpty(cad.getCountry()) ? "" : ", " + cad.getCountry();
                        String postalcode = StringUtil.isNullOrEmpty(cad.getPostalCode()) ? "" : " " + cad.getPostalCode();
                        String email = StringUtil.isNullOrEmpty(cad.getEmailID()) ? "" : "\nEmail : " + cad.getEmailID();
                        consignerTelNo = StringUtil.isNullOrEmpty(cad.getPhone()) ? "" : cad.getPhone()+"";
                        consignerFaxNo = StringUtil.isNullOrEmpty(cad.getFax()) ?"":cad.getFax()+"";
                        String contractpersonno = StringUtil.isNullOrEmpty(cad.getContactPersonNumber()) ? "" : "\nContact Person No : " + cad.getContactPersonNumber();
                        String contractpersondesignation = StringUtil.isNullOrEmpty(cad.getContactPersonDesignation()) ? "" : "\nContact Person Designation : " + cad.getContactPersonDesignation();
                        String mobile = StringUtil.isNullOrEmpty(cad.getMobileNumber()) ? "" : "\nMobile : " + cad.getMobileNumber();
                        String attn = StringUtil.isNullOrEmpty(cad.getContactPerson()) ? "" : "\nAttn. : " + cad.getContactPerson();
                        consignerAddress = addr + city + state + country + postalcode + email + mobile + contractpersonno + contractpersondesignation + attn;
                    }
                }
                dataMap.put("tabDataSource", new JRBeanCollectionDataSource(tableData));
                dataMap.put("companyName", companyName);
                dataMap.put("districtName", districtName);
                dataMap.put("companyRName", companyRName);
                dataMap.put("districtRName", districtRName);
                dataMap.put("invoiceNo", invoiceNo);
                dataMap.put("invDate", (invDate!=null)?sdf.format(sdf.parse(invDate.toString())):"");
                dataMap.put("consignerName", consignerName);
                dataMap.put("consigneeName", consigneeName);
                dataMap.put("consignerState", consignerState);
                dataMap.put("consignerAddress", consignerAddress);
                dataMap.put("consigneeAddress", consigneeAddress);
                dataMap.put("consignerRegNo", consignerRegNo);
                dataMap.put("consigneeRegNo", consigneeRegNo);
                dataMap.put("consignerRegDate", consignerRegDate);
                dataMap.put("consigneeRegDate", consigneeRegDate);
                dataMap.put("consignerCSTRegNo", consignerCSTRegNo);
                dataMap.put("consigneeCSTRegNo", consigneeCSTRegNo);
                dataMap.put("consignerCSTRegDate", consignerCSTRegDate);
                dataMap.put("consigneeCSTRegDate", consigneeCSTRegDate);
                dataMap.put("consignerTelNo", consignerTelNo);
                dataMap.put("consigneeTelNo", consigneeTelNo);
                dataMap.put("consignerFaxNo", consignerFaxNo);
                dataMap.put("consigneeFaxNo", consigneeFaxNo);
                dataMap.put("consignedValue", CustomDesignHandler.getAmountinCommaDecimal(consignedValue,2,countryid)+"");
            }

            final OnlyDatePojo odp = new OnlyDatePojo();
            odp.setDate(new Date().toString());
            List datePojoList = new ArrayList() {

                {
                    add(odp);
                }
            };

            dataMap.put("format", "pdf");
            JRBeanCollectionDataSource beanColDataSource = null;
            JRBeanCollectionDataSource[] beanColDataSourceCopy = null;
            beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
            beanColDataSourceCopy = new JRBeanCollectionDataSource[10];

            response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + ".pdf\"");
            InputStream inputStream = null;
            jasperPrint = new JasperPrint[10];

            for (int i = 0; i < fileCount; i++) {
                beanColDataSourceCopy[i] = beanColDataSource.cloneDataSource();
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + jrxmlName[i]);
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                jasperReport = JasperCompileManager.compileReport(jasperDesign);
                jasperPrint[i] = JasperFillManager.fillReport(jasperReport, dataMap, beanColDataSourceCopy[i]);
                list.add(jasperPrint[i]);
            }

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
   @Override
    public List<JasperPrint> exportForm201CJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<JasperPrint> list = new ArrayList<JasperPrint>();
        JSONArray DataJArr = new JSONArray();
        try {
            String filename = "Form201C", startdate = "", enddate = "", startdateF = "", enddateF = "";
            JasperPrint jasperPrint = new JasperPrint();
            JasperReport jasperReport = null;
            String reportName = request.getParameter("report");
            Map<String, Object> dataMap = new HashMap<String, Object>();
            String jrxmlName = "/Form201C.jrxml";
            String companyid = sessionHandlerImpl.getCompanyid(request);
            int year = 0;
            String yearMonthOrQuater = "";
            SimpleDateFormat gdf = new SimpleDateFormat("MMMM d, yyyy");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            DateFormat userdf = authHandler.getUserDateFormatter(request);
            SimpleDateFormat sdfYear = new SimpleDateFormat("yyyy");
            SimpleDateFormat sdfMonth = new SimpleDateFormat("MM");
            
            int frequency=(!StringUtil.isNullOrEmpty(request.getParameter("frequency")))?Integer.parseInt(request.getParameter("frequency").toString()):0;
            String period=(!StringUtil.isNullOrEmpty(request.getParameter("period")))?request.getParameter("period").toString():"";
            year=Integer.parseInt((!StringUtil.isNullOrEmpty(request.getParameter("year")))?request.getParameter("year").toString():"0");
            Date nextYear=new Date();
            DateFormat df = new SimpleDateFormat("yyyy");
            Calendar c = Calendar.getInstance();
            c.setTime(new Date());
            c.add(Calendar.YEAR, +1);
            nextYear.setTime(c.getTime().getTime());
            if(frequency==0){
                startdate = "April 1, "+year;
                enddate = "March 31, "+(year+1);
                startdateF = year+"-"+"04"+"-"+"01";
                enddateF = (year+1)+"-"+"03"+"-"+"31";
            }else if (!StringUtil.isNullOrEmpty(request.getParameter("frequency"))) {  // get start date and end date

                if (request.getParameter("frequency").equals("1")) { //Quaterly
                    int firstMonth = 0;
                    int lastMonth = 11;
                    String qq = "";
                    if (request.getParameter("period").equals("quater4")) { //1st January 2017 to 31st Mar 2017 (Quarter IV)
                        firstMonth = 0;
                        lastMonth = 2;
                        qq = "44";
                        year+=1;
                    } else if (request.getParameter("period").equals("quater1")) {  //1st April 2016 to 30th June 2016 (Quarter I)
                        firstMonth = 3;
                        lastMonth = 5;
                        qq = "41";
                    } else if (request.getParameter("period").equals("quater2")) {  //1st July 2016 to 30th September 2016 (Quarter II)
                        firstMonth = 6;
                        lastMonth = 8;
                        qq = "42";
                    } else if (request.getParameter("period").equals("quater3")) { //1st October 2016 to 31st December 2016 (Quarter III)
                        firstMonth = 9;
                        lastMonth = 11;
                        qq = "43";
                    }
                    Calendar calendar = Calendar.getInstance();
                    calendar.set(Calendar.YEAR, year);
                    calendar.set(Calendar.MONTH, firstMonth);
                    calendar.set(Calendar.DATE, 1);
                    Date firstDate = calendar.getTime();
                    startdate = gdf.format(firstDate);
                    startdateF = sdf.format(firstDate);

                    calendar.set(Calendar.MONTH, lastMonth);
                    int TotalDaysOfMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    calendar.set(Calendar.DATE, TotalDaysOfMonth);
                    Date lastDate = calendar.getTime();
                    enddate = gdf.format(lastDate);
                    enddateF = sdf.format(lastDate);

                    yearMonthOrQuater = sdfYear.format(firstDate) + qq;

                } else { // Monthly

                    Calendar calendar = Calendar.getInstance();
                    int month = Integer.parseInt(request.getParameter("period"));
                    calendar.set(Calendar.YEAR, year);
                    calendar.set(Calendar.MONTH, month);
                    calendar.set(Calendar.DATE, 1);
                    Date firstDate = calendar.getTime();
                    startdate = gdf.format(firstDate);
                    startdateF = sdf.format(firstDate);

                    int TotalDaysOfMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    calendar.set(Calendar.DATE, TotalDaysOfMonth);
                    Date lastDate = calendar.getTime();
                    enddate = gdf.format(lastDate);
                    enddateF = sdf.format(lastDate);

                    yearMonthOrQuater = sdfYear.format(firstDate) + sdfMonth.format(firstDate);
                }
            }
            
            KwlReturnObject preferences = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) preferences.getEntityList().get(0);

            KwlReturnObject comppreferences = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccPreferences = (CompanyAccountPreferences) comppreferences.getEntityList().get(0);

            KwlReturnObject compobj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company companyObj = (Company) compobj.getEntityList().get(0);
            
            int countryid = 0;
            if(companyObj != null && companyObj.getCountry()!= null && !StringUtil.isNullOrEmpty(companyObj.getCountry().getID())){
                countryid = Integer.parseInt(companyObj.getCountry().getID());
            }

            //////////////////////// Data for Form 201C ////////////////////////
            String regNo = extraCompanyPreferences.getVatNumber() != null ? extraCompanyPreferences.getVatNumber() : "";
            char[] reg = regNo.toCharArray();
            int charCnt = 1;
            for (; charCnt <= reg.length; charCnt++) {
                dataMap.put("no" + charCnt, reg[charCnt - 1] + "");
            }
            for (int j = charCnt; j <= 10; j++) {// Registration number kept blank
                dataMap.put("no" + j, " ");
            }
            HashMap<String, Object> requestParamsProd = new HashMap<String, Object>();
            requestParamsProd.put("companyid", companyid);
            requestParamsProd.put("stDate", authHandler.getDateOnlyFormat(request).parse(startdate));
            requestParamsProd.put("endDate", authHandler.getDateOnlyFormat(request).parse(enddate));
            requestParamsProd.put("isFromStockReport", true);
            requestParamsProd.put("isprovalReport", true);
            List tableData = new ArrayList();
            int i = 1;
            double stockInQty = 0, stockOutQty = 0, openingstockQty = 0, totalStockInQty = 0, totalStockOutQty = 0, totalOpeningstockQty = 0;
            List<Store> storeList = storeService.getStores(companyObj, null, null);// Taken all stores including default
            Map<String, Object> tableMap = new HashMap<String, Object>();
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("companyid", companyid);
            requestParams.put("isStoreLocationEnable", true);
            dataMap.put("endingTaxPeriod", enddateF);
            dataMap.put("companyNameAndStyleOfBuss", companyObj.getCompanyName() + ", " + companyAccPreferences.getCompanyType().getName());
            dataMap.put("fromDate", startdateF);
            dataMap.put("toDate", enddateF);
            dataMap.put("companyName", companyObj.getCompanyName().toUpperCase());
            if (storeList.size() > 0) {
                for (Store tmpStore : storeList) {
                    requestParams.put("productStore", tmpStore.getId());
                    requestParams.put(Constants.PRODUCT_SEARCH_FLAG,extraCompanyPreferences.getProductSearchingFlag());
                    KwlReturnObject result = accProductObj.getProductsForCombo(requestParams);// Taken all products of perticular store
                    List<Product> productList = result.getEntityList();
                    if (i == 1 && productList.size() > 0) {//Godown 1
                        tableData = new ArrayList();
                        dataMap.put("godownOneAddress", StringUtil.isNullOrEmpty(tmpStore.getAddress()) ? "" : tmpStore.getAddress());
                        int j = 1;
                        i++;
                        for (Product productObj : productList) {
                            stockInQty = 0;
                            stockOutQty = 0;
                            openingstockQty = 0;
                            totalStockInQty = 0;
                            totalStockOutQty = 0;
                            totalOpeningstockQty = 0;
                            Date date = new Date();
                            try {
                                date = yyyyMMdd_HIPHON.parse(yyyyMMdd_HIPHON.format(date));
                            } catch (ParseException ex) {
                                Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            double purchasePrice = stockService.getProductPurchasePrice(productObj, date);
                            requestParamsProd.put("productid", productObj.getID());
                            KwlReturnObject rObject = accProductObj.getStockInOutOpeningCalculation(requestParamsProd);
                            List<Object[]> stocklist = rObject.getEntityList();
                            for (Object[] stockrow : stocklist) {
                                stockInQty = Double.parseDouble(stockrow[0] == null ? "0" : stockrow[0].toString());
                                stockOutQty = Double.parseDouble(stockrow[1] == null ? "0" : stockrow[1].toString());
                                openingstockQty = Double.parseDouble(stockrow[2] == null ? "0" : stockrow[2].toString());
                            }
                            totalStockInQty += stockInQty;
                            totalStockOutQty += stockOutQty;
                            totalOpeningstockQty += openingstockQty;
                            if (totalOpeningstockQty == 0) {// If there is no initial entry for GR,DO,SR,PR
                                KwlReturnObject initialQty = accProductObj.getInitialQuantity(productObj.getID());
                                totalOpeningstockQty = (initialQty.getEntityList().get(0)!=null)?Double.parseDouble(initialQty.getEntityList().get(0).toString()):0;
                            }
                            tableMap = new HashMap<String, Object>();
                            tableMap.put("srNo", "" + j++);
                            tableMap.put("comoName", productObj.getProductName());
                            tableMap.put("HSNCode", productObj.getHSCode());
                            tableMap.put("openingBal", totalOpeningstockQty + "");
                            tableMap.put("incomingINTax", totalStockInQty + "");
                            tableMap.put("outgoingINTax", totalStockOutQty + "");
                            tableMap.put("closingBal", ((totalOpeningstockQty + totalStockInQty) - totalStockOutQty) + "");
                            tableMap.put("valueOfClosingBal", CustomDesignHandler.getAmountinCommaDecimal(((totalOpeningstockQty + totalStockInQty) == 0) ? (totalOpeningstockQty * purchasePrice) : ((totalOpeningstockQty + totalStockInQty) - totalStockOutQty) * purchasePrice, 2,countryid) + "");
                            tableData.add(tableMap);
                        }
                        dataMap.put("godownOneTableData", new JRBeanCollectionDataSource(tableData));
                    } else if (i == 2 && productList.size() > 0) {//Godown 2
                        tableData = new ArrayList();
                        dataMap.put("godownTwoAddress", StringUtil.isNullOrEmpty(tmpStore.getAddress()) ? "" : tmpStore.getAddress());
                        int j = 1;
                        i++;
                        for (Product productObj : productList) {
                            stockInQty = 0;
                            stockOutQty = 0;
                            openingstockQty = 0;
                            totalStockInQty = 0;
                            totalStockOutQty = 0;
                            totalOpeningstockQty = 0;
                            Date date = new Date();
                            try {
                                date = yyyyMMdd_HIPHON.parse(yyyyMMdd_HIPHON.format(date));
                            } catch (ParseException ex) {
                                Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            double purchasePrice = stockService.getProductPurchasePrice(productObj, date);
                            requestParamsProd.put("productid", productObj.getID());
                            KwlReturnObject rObject = accProductObj.getStockInOutOpeningCalculation(requestParamsProd);
                            List<Object[]> stocklist = rObject.getEntityList();
                            for (Object[] stockrow : stocklist) {
                                stockInQty = Double.parseDouble(stockrow[0] == null ? "0" : stockrow[0].toString());
                                stockOutQty = Double.parseDouble(stockrow[1] == null ? "0" : stockrow[1].toString());
                                openingstockQty = Double.parseDouble(stockrow[2] == null ? "0" : stockrow[2].toString());
                            }
                            totalStockInQty += stockInQty;
                            totalStockOutQty += stockOutQty;
                            totalOpeningstockQty += openingstockQty;
                            if (totalOpeningstockQty == 0) {// If there is no initial entry for GR,DO,SR,PR
                                KwlReturnObject initialQty = accProductObj.getInitialQuantity(productObj.getID());
                                totalOpeningstockQty = (initialQty.getEntityList().get(0)!=null)?Double.parseDouble(initialQty.getEntityList().get(0).toString()):0;
                            }
                            tableMap = new HashMap<String, Object>();
                            tableMap.put("srNo", "" + j++);
                            tableMap.put("comoName", productObj.getProductName());
                            tableMap.put("HSNCode", productObj.getHSCode());
                            tableMap.put("openingBal", totalOpeningstockQty + "");
                            tableMap.put("incomingINTax", totalStockInQty + "");
                            tableMap.put("outgoingINTax", totalStockOutQty + "");
                            tableMap.put("closingBal", ((totalOpeningstockQty + totalStockInQty) - totalStockOutQty) + "");
                            tableMap.put("valueOfClosingBal", CustomDesignHandler.getAmountinCommaDecimal(((totalOpeningstockQty + totalStockInQty) == 0) ? (totalOpeningstockQty * purchasePrice) : ((totalOpeningstockQty + totalStockInQty) - totalStockOutQty) * purchasePrice, 2,countryid) + "");
                            tableData.add(tableMap);
                        }
                        dataMap.put("godownTwoTableData", new JRBeanCollectionDataSource(tableData));
                    }
                }
            }else{
                dataMap.put("godownOneAddress", "");
                dataMap.put("godownTwoAddress", "");
            }
            //////////////////////// End of Data for Form 201C ////////////////////////

            final OnlyDatePojo odp = new OnlyDatePojo();
            odp.setDate(new Date().toString());
            List datePojoList = new ArrayList() {

                {
                    add(odp);
                }
            };

            /////////////////////////////////// Jasper file operations ////////////////////////////////////
            dataMap.put("format", "pdf");
            JRBeanCollectionDataSource beanColDataSource = null;
            beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
            response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + ".pdf\"");
            InputStream inputStream = null;
            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + jrxmlName);
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            jasperPrint = JasperFillManager.fillReport(jasperReport, dataMap, beanColDataSource);
            list.add(jasperPrint);
            /////////////////////////////////// End of Jasper file operations ////////////////////////////////////
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
   
   @Override
    public List<JasperPrint> exportForm33Jasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<JasperPrint> list = new ArrayList<JasperPrint>();
        try {
            String filename = "DVATForm33";
            JasperPrint jasperPrint = new JasperPrint();
            JasperReport jasperReport = null;
            Map<String, Object> dataMap = new HashMap<String, Object>();
            HashMap<String, Object> deliveryRequestParams = new HashMap<String, Object>();
            String jrxmlName = "/DVATForm33.jrxml";
            String billid= billid = request.getParameter("deliveryOrderId") != null ? request.getParameter("deliveryOrderId") : "";
            String srNo="";
            String date="";
            String consignOwnerName="";
            String consignOwnerAddress="";
            String consignOwnerVATTIN="";
            String consigneeName="";
            String consigneeAddress="";
            String regNoAct2004="";
            String regNoAct1956="";
            String carrierName="";
            String carrierAddress="";
            String carrierVehicleNo="";
            String destinationOfGoods="";
            String consignOwnerCSTTIN="";            
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            
            DeliveryOrder deliveryOrder = null;
            deliveryOrder = (DeliveryOrder) kwlCommonTablesDAOObj.getClassObject(DeliveryOrder.class.getName(), billid);
            String companyid = sessionHandlerImpl.getCompanyid(request);

            KwlReturnObject preferences = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) preferences.getEntityList().get(0);

            KwlReturnObject comppreferences = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccPreferences = (CompanyAccountPreferences) comppreferences.getEntityList().get(0);

            KwlReturnObject compobj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company companyObj = (Company) compobj.getEntityList().get(0);
            int countryid = 0;
            if(companyObj != null && companyObj.getCountry()!= null && !StringUtil.isNullOrEmpty(companyObj.getCountry().getID())){
                countryid = Integer.parseInt(companyObj.getCountry().getID());
            }
            final OnlyDatePojo odp = new OnlyDatePojo();
            odp.setDate(new Date().toString());
            List datePojoList = new ArrayList() {

                {
                    add(odp);
                }
            };
            HashMap<String, Object> addressParams = new HashMap<String, Object>();
            addressParams.put("companyid", companyid);
            addressParams.put("isBillingAddress", false);
            addressParams.put("customerid", deliveryOrder.getCustomer().getID());
            CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
            Set<CompanyAddressDetails> rows = extraCompanyPreferences.getCompanyAddressRows();
            for (CompanyAddressDetails cad : rows) {
                    String addr = StringUtil.isNullOrEmpty(cad.getAddress()) ? "" : cad.getAddress();
                    String city = StringUtil.isNullOrEmpty(cad.getCity()) ? "" : ", " + cad.getCity();
                    String state = StringUtil.isNullOrEmpty(cad.getState()) ? "" : ", " + cad.getState();
                    String country = StringUtil.isNullOrEmpty(cad.getCountry()) ? "" : ", " + cad.getCountry();
                    String postalcode = StringUtil.isNullOrEmpty(cad.getPostalCode()) ? "" : " " + cad.getPostalCode();
                    String email = StringUtil.isNullOrEmpty(cad.getEmailID()) ? "" : "\nEmail : " + cad.getEmailID();
                    String phone = StringUtil.isNullOrEmpty(cad.getPhone()) ? "" : "\nPhone : " + cad.getPhone();
                    String fax = StringUtil.isNullOrEmpty(cad.getFax()) ? "" : StringUtil.isNullOrEmpty(phone) ? "\nFax : " + cad.getFax() : ", Fax : " + cad.getFax();
                    String contractpersonno = StringUtil.isNullOrEmpty(cad.getContactPersonNumber()) ? "" : "\nContact Person No : " + cad.getContactPersonNumber();
                    String contractpersondesignation = StringUtil.isNullOrEmpty(cad.getContactPersonDesignation()) ? "" : "\nContact Person Designation : " + cad.getContactPersonDesignation();
                    String mobile = StringUtil.isNullOrEmpty(cad.getMobileNumber()) ? "" : "\nMobile : " + cad.getMobileNumber();
                    String attn = StringUtil.isNullOrEmpty(cad.getContactPerson()) ? "" : "\nAttn. : " + cad.getContactPerson();
                    if (cad.isIsBillingAddress()) {
                        consignOwnerAddress= addr + city + state + country + postalcode + email + phone + fax + mobile + contractpersonno + contractpersondesignation + attn;
                    }
            }
            Date DODate = deliveryOrder.getOrderDate();
            Calendar c = Calendar.getInstance();
            c.setTime(DODate);
            DODate.setTime(c.getTime().getTime());
            srNo = deliveryOrder.getDeliveryOrderNumber();
            date = sdf.format(DODate);
            consignOwnerName=companyObj.getCompanyName();
//            consignOwnerAddress=!StringUtil.isNullOrEmpty(CommonFunctions.getCompanyAddress(companyObj))?CommonFunctions.getCompanyAddress(companyObj):"";
            consignOwnerVATTIN=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getVatNumber()) ? extraCompanyPreferences.getVatNumber() : "";
            consignOwnerCSTTIN=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getCstNumber()) ? extraCompanyPreferences.getCstNumber() : "";
            consigneeName=!StringUtil.isNullOrEmpty(deliveryOrder.getCustomer().getName()) ? deliveryOrder.getCustomer().getName() : "";
            consigneeAddress=(customerAddressDetails!=null) ? customerAddressDetails.getAddress() : "";
            regNoAct2004=!StringUtil.isNullOrEmpty(deliveryOrder.getCustomer().getVATTINnumber()) ? deliveryOrder.getCustomer().getVATTINnumber() : "";
            regNoAct1956=!StringUtil.isNullOrEmpty(deliveryOrder.getCustomer().getCSTTINnumber()) ? deliveryOrder.getCustomer().getCSTTINnumber() : "";
            destinationOfGoods=(customerAddressDetails!=null) ? customerAddressDetails.getAddress() : "";
            carrierName=(deliveryOrder.getDeliveryOrderCustomData()!=null)?deliveryOrder.getDeliveryOrderCustomData().getCol1001():"";
            carrierAddress=(deliveryOrder.getDeliveryOrderCustomData()!=null)?deliveryOrder.getDeliveryOrderCustomData().getCol1002():"";
            carrierVehicleNo=(deliveryOrder.getDeliveryOrderCustomData()!=null)?deliveryOrder.getDeliveryOrderCustomData().getCol1003():"";
            /////////////////////////////////// Jasper Data operations ////////////////////////////////////
            dataMap.put("srNo",srNo);
            dataMap.put("date",date);
            dataMap.put("consignOwnerName",consignOwnerName);
            dataMap.put("consignOwnerAddress",consignOwnerAddress);
            dataMap.put("consignOwnerVATTIN",consignOwnerVATTIN);
            dataMap.put("consignOwnerCSTTIN",consignOwnerCSTTIN);
            dataMap.put("consigneeName",consigneeName);
            dataMap.put("consigneeAddress",consigneeAddress);
            dataMap.put("regNoAct2004",regNoAct2004);
            dataMap.put("regNoAct1956",regNoAct1956);
            dataMap.put("destinationOfGoods",destinationOfGoods);
            dataMap.put("carrierName",carrierName);
            dataMap.put("carrierAddress",carrierAddress);
            dataMap.put("carrierVehicleNo",carrierVehicleNo);
            
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            order_by.add("srno");
            order_type.add("asc");
            deliveryRequestParams.put("order_by", order_by);
            deliveryRequestParams.put("order_type", order_type);
            KwlReturnObject idresult = null;
            Iterator itr = null;
            filter_names.add("deliveryOrder.ID");
            filter_params.add(deliveryOrder.getID());
            deliveryRequestParams.put("filter_names", filter_names);
            deliveryRequestParams.put("filter_params", filter_params);

            idresult = accInvoiceDAOobj.getDeliveryOrderDetails(deliveryRequestParams);
            itr = idresult.getEntityList().iterator();
            ArrayList< Map<String, Object>> tableData = new ArrayList< Map<String, Object>>();
            DeliveryOrderDetail row=null;            
            KWLCurrency currency = null;
            while (itr.hasNext()) {
                row = (DeliveryOrderDetail) itr.next();
                HashMap<String, Object> tableMap = new HashMap<String, Object>();
                String uomName= row.getProduct().getUnitOfMeasure()==null?"":row.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                currency = row.getDeliveryOrder().getCurrency();
                String curr=(currency.getSymbol()!=null)?currency.getSymbol():"";
                tableMap.put("numOfPack", (deliveryOrder.getDeliveryOrderCustomData()!=null)?deliveryOrder.getDeliveryOrderCustomData().getCol1004():"");
                tableMap.put("methOfPack", (deliveryOrder.getDeliveryOrderCustomData()!=null)?deliveryOrder.getDeliveryOrderCustomData().getCol1005():"");
                tableMap.put("ratePerUnit", CustomDesignHandler.getAmountinCommaDecimal(row.getRate(),2,countryid)+"");
                tableMap.put("goodDesc", !StringUtil.isNullOrEmpty(row.getDescription())?row.getDescription():"");
                tableMap.put("quantity",  CustomDesignHandler.getAmountinCommaDecimal(row.getBaseuomdeliveredquantity(),2,countryid)+" "+uomName);
                tableMap.put("value", CustomDesignHandler.getAmountinCommaDecimal((row.getRowTermAmount()),2,countryid)+"");
                tableData.add(tableMap);
            }
            dataMap.put("beanColDataSource",new JRBeanCollectionDataSource(tableData));

            /////////////////////////////////// Jasper file operations ////////////////////////////////////
            dataMap.put("format", "pdf");
            JRBeanCollectionDataSource beanColDataSource = null;
            beanColDataSource = new JRBeanCollectionDataSource(datePojoList);
            response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + ".pdf\"");
            InputStream inputStream = null;
            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + jrxmlName);
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            jasperPrint = JasperFillManager.fillReport(jasperReport, dataMap, beanColDataSource);
            list.add(jasperPrint);
            /////////////////////////////////// End of Jasper file operations ////////////////////////////////////
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
   @Override
   public List<Object> exportMalaysianGstTaxInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                List<MalaysianTaxInvoice> taxInvoiceList = new ArrayList<MalaysianTaxInvoice>();
                List<MalaysianTaxInvoiceTable> taxInvoiceTableList = new ArrayList<MalaysianTaxInvoiceTable>();
                List<MalaysianGSTSummaryTable> summaryTableList = new ArrayList<MalaysianGSTSummaryTable>();
                List<Terms> termsList = new ArrayList<Terms>();
                MalaysianTaxInvoice taxInvoice = new MalaysianTaxInvoice();
                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                boolean isSelfBilledInvoice = false;
                boolean isSelfBilledInvoiceWithFC = false;
                String exchangerate="";
                String rmcdApprovalNo = "";
                String customerName = "";
                String customerCode = "";
                String customerGSTNumber = "";
                String customerAdd = "";
                String attn = "";
                String terms = "";
                String billTo = "";
                String billAddr = "";
                String shipTo = "";
                String memo = "";
                String salesPerson = null;
                String billtoAddress = "";
                boolean isInclude = false; //Hiding or Showing P.O. NO field in single PDF 
                Iterator itr = null;
                String linkTo = "";
                HashSet<String> linkIds = new HashSet<String>();
                double totaltax = 0, discountTotalQuotation = 0, totaltaxpercent = 0 , totalTermAmount = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                int templatflag = request.getParameter("templateflag") != null ? Integer.parseInt(request.getParameter("templateflag")) : 0;
                boolean issimplifiedtaxinvoice = request.getParameter("issimplifiedtaxinvoice") != null ? Boolean.parseBoolean(request.getParameter("issimplifiedtaxinvoice")) : false;
                boolean issimplifiedtaxinvoicea7 = request.getParameter("issimplifiedtaxinvoicea7") != null ? Boolean.parseBoolean(request.getParameter("issimplifiedtaxinvoicea7")) : false;
                boolean issimplifiedtaxinvoicea7withtax = request.getParameter("issimplifiedtaxinvoicea7withtax") != null ? Boolean.parseBoolean(request.getParameter("issimplifiedtaxinvoicea7withtax")) : false;
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                Map<String, Object> invoiceMap = new HashMap<String, Object>();
                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");
                    df1.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getTimeZoneDifference(request)));
                    SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");

                    String gstNo = "";
                    String invno = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    Date currentDate = new Date();
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String termName = "";
                    String termAmount = "0.00";
                    double subTotal = 0;
                    double onlySubtotal = 0;
                    double subTotalwithTaxNDiscount = 0;
                    double rowTaxAmountTotal = 0;
                    double rowDiscountAmountTotal = 0;
                    String curr = "";
                    String postText = "";
                    String approverName = "";
                    KWLCurrency currency = null;
                    String currencyid = "";
                    Map<Double,Double> taxPercentMap = Collections.EMPTY_MAP;
                    Map<String,String> taxPerMapData = Collections.EMPTY_MAP;
                    List<Map<String,String>> taxPerMapDataList = Collections.EMPTY_LIST;
                    //        String companyid = sessionHandlerImpl.getCompanyid(request);
                    if (mode == StaticValues.AUTONUM_INVOICE) {
                        taxPercentMap = new HashMap<>();
                        taxPerMapDataList = new ArrayList<>();
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), billid);
                        Invoice inv = (Invoice) cap.getEntityList().get(0);
                        if (inv.getCreatedby() != null) {
                            approverName = StringUtil.getFullName(inv.getCreatedby());
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                        invno = inv.getInvoiceNumber();
                        entryDate = inv.getJournalEntry().getEntryDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipDate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();
                        filter_names.add("invoice.ID");
                        filter_params.add(inv.getID());
                        order_by.add("srno");
                        order_type.add("asc");
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        invRequestParams.put("order_by", order_by);
                        invRequestParams.put("order_type", order_type);
                        idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? inv.getCustomerEntry().getAccount().getName() : inv.getCustomer().getName();
                        customerCode = inv.getCustomer() == null ? inv.getCustomerEntry().getAccount().getAcccode() : inv.getCustomer().getAcccode();
                        
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("customerid", inv.getCustomer().getID());
                        customerAdd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                        if (customerAddressDetails != null) {
                            attn = StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : customerAddressDetails.getContactPerson();
                        }
                        
                        billAddr = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), true);
                        shipTo = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);
                        poRefno = inv.getPoRefNumber() == null ? "" : inv.getPoRefNumber();
                        postText = inv.getPostText() == null ? "" : inv.getPostText();
                        if (inv.getMasterSalesPerson() != null) {   //if User Class returns the Null Valu
                            salesPerson = inv.getMasterSalesPerson() != null ? inv.getMasterSalesPerson().getValue() : "";
                        } else {  //if salesperson class has no username
                            salesPerson = "";
                        }
                        if (templatflag == Constants.Guan_Chong_templateflag || templatflag == Constants.Guan_ChongBF_templateflag) {
                            terms = inv.getTermid() != null ? inv.getTermid().getTermname() : "";
                        } else {
                        terms = inv.getTermid() != null ? Integer.toString(inv.getTermid().getTermdays()) + " DAYS" : "";
                        }
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo() != null ? inv.getMemo() : "";
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        requestParams.put("currencyid",currencyid);
                        requestParams.put("companyid", companyid);
                        KwlReturnObject bAmt = null;
                        InvoiceDetail row = null;
                        if (inv.getJournalEntry().getExternalCurrencyRate() != 1.00) {
                            isSelfBilledInvoiceWithFC = true;
                            exchangerate=""+inv.getJournalEntry().getExternalCurrencyRate();
                        }
                        int i = 0;
                        while (itr.hasNext()) {
                            MalaysianTaxInvoiceTable invoiceTable = new MalaysianTaxInvoiceTable();
                            i++;
                            String prodName = "";
                            String total1 = "";
                            String prodDesc = "";
                            String prodCode = "";
                            String uom = "";
                            String taxCode = "";
                            double quantity = 0, discountQuotation = 0, discountOrder = 0;
                            double rate = 0;
                            double discount = 0;
                            double rowtaxamount = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;
                            row = (InvoiceDetail) itr.next();
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc =  StringUtil.DecodeText(row.getDescription());
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())) {
                                    prodDesc = StringUtil.DecodeText(row.getInventory().getProduct().getDescription());
                                }
                            }
                            prodCode = row.getInventory().getProduct().getProductid() != null ? row.getInventory().getProduct().getProductid() : "";
                            prodName = row.getInventory().getProduct().getName() != null ? row.getInventory().getProduct().getName() : "";
                            quantity = row.getInventory().getQuantity();
                            rate = row.getRate();
                            uom = row.getInventory().getUom() == null ? "" : row.getInventory().getUom().getNameEmptyforNA();
                            String tempLinkTo = "";
                            if (row.getDeliveryOrderDetail() != null) {
                                tempLinkTo = row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber();
                                linkIds.add(tempLinkTo);
                            } else if (row.getSalesorderdetail() != null) {
                                tempLinkTo = row.getSalesorderdetail().getSalesOrder().getSalesOrderNumber();
                                linkIds.add(tempLinkTo);
                            } else if (row.getQuotationDetail() != null) {
                                tempLinkTo = row.getQuotationDetail().getQuotation().getquotationNumber();
                                linkIds.add(tempLinkTo);
                            }
                            discount = row.getDiscount() != null ? row.getDiscount().getDiscountValue() : 0.0;
                            rowtaxamount = row.getRowTaxAmount() + row.getRowTermTaxAmount();

                            amount1 = authHandler.round(rate * quantity, companyid);
                            amount_with_discount = amount1 - discount;
                            amount_with_tax = amount_with_discount + rowtaxamount;

                            invoiceTable.setSno(i + ".");
                            invoiceTable.setName(prodName);
                            invoiceTable.setDescription(prodDesc.replaceAll("\n", "<br>"));
                            invoiceTable.setQty(authHandler.formattedQuantity(quantity, companyid) + " " + uom);
                            invoiceTable.setRate(authHandler.formattedCommaSeparatedAmount(rate, companyid));
                            invoiceTable.setTotalwithouttaxndiscount(authHandler.formattedCommaSeparatedAmount(amount1, companyid));
                            invoiceTable.setDisc(authHandler.formattedCommaSeparatedAmount(discount, companyid));
                            invoiceTable.setTotalwithouttax(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                            invoiceTable.setTaxamount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                            invoiceTable.setTotalwithtax(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));

//                            KwlReturnObject ratemyrres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rate, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject ratemyrres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rate, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            double ratemyr=authHandler.round((Double) ratemyrres.getEntityList().get(0),companyid);
                            invoiceTable.setRatemyr(authHandler.formattedCommaSeparatedAmount(ratemyr, companyid));
//                            KwlReturnObject discountres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, discount, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject discountres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, discount, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            double discountmyr=authHandler.round((Double) discountres.getEntityList().get(0),companyid);
                            invoiceTable.setDiscmyr(authHandler.formattedCommaSeparatedAmount(discountmyr, companyid));
//                            KwlReturnObject amountwithdiscres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount_with_discount, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject amountwithdiscres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount_with_discount, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            double amountwithdiscmyr = authHandler.round((Double) amountwithdiscres.getEntityList().get(0), companyid);
                            invoiceTable.setTotalwithouttaxmyr(authHandler.formattedCommaSeparatedAmount(amountwithdiscmyr, companyid));
//                            KwlReturnObject taxamtres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowtaxamount, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject taxamtres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowtaxamount, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            double taxamtrmy = authHandler.round((Double) taxamtres.getEntityList().get(0), companyid);
                            invoiceTable.setTaxamountmyr(authHandler.formattedCommaSeparatedAmount(taxamtrmy, companyid));
//                            KwlReturnObject totalwithtaxres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount_with_tax, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject totalwithtaxres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount_with_tax, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            double totalwithtaxmyr = authHandler.round((Double) totalwithtaxres.getEntityList().get(0), companyid);
                            invoiceTable.setTotalwithtaxmyr(authHandler.formattedCommaSeparatedAmount(totalwithtaxmyr, companyid));
                            
                            if (row.getTax() != null) {
                                taxCode = row.getTax().getTaxCode();
                                MalaysianGSTSummaryTable gstSummaryTable = new MalaysianGSTSummaryTable();
                                gstSummaryTable.setSummary(row.getTax().getName());
                                gstSummaryTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                                gstSummaryTable.setAmountmyr(authHandler.formattedCommaSeparatedAmount(amountwithdiscmyr, companyid));
                                gstSummaryTable.setTaxmyr(authHandler.formattedCommaSeparatedAmount(taxamtrmy, companyid));
                                gstSummaryTable.setTax(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));

                                // Get Tax Percent for Simplified tax invoice 
                                requestParams.put("transactiondate", entryDate);
                                requestParams.put("taxid", row.getTax().getID());
                                requestParams.put("companyid", companyid);
                                KwlReturnObject result = accTaxObj.getTax(requestParams);
                                List taxList = result.getEntityList();
                                if (!taxList.isEmpty()) {
                                    Object[] taxObj = (Object[]) taxList.get(0);
                                    taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                                }
                                invoiceTable.setTaxpercent(authHandler.formattedAmount(taxPercent, companyid));
                                summaryTableList.add(gstSummaryTable);

                                if (!taxPercentMap.isEmpty() && taxPercentMap.containsKey(taxPercent)) {
                                    Double taxAmt = taxPercentMap.get(taxPercent);
                                    taxPercentMap.put(taxPercent, taxAmt + rowtaxamount);
                                } else {
                                    taxPercentMap.put(taxPercent, rowtaxamount);
                                }
                            }
                            invoiceTable.setTaxcode(taxCode);
                            invoiceTable.setCurrency(currency.getCurrencyCode());
                            taxInvoiceTableList.add(invoiceTable);
                            subTotal += amount1;
                            rowDiscountAmountTotal += discount;
                            rowTaxAmountTotal += rowtaxamount;
                        }

                        totaltax = inv.getTaxEntry() != null ? inv.getTaxEntry().getAmount() : 0;
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
                        totalAmount = inv.getCustomerEntry().getAmount();

                        if (inv.getTax() != null) {
                            requestParams.put("transactiondate", entryDate);
                            requestParams.put("taxid", inv.getTax() != null ? inv.getTax().getID() : "");
                            requestParams.put("companyid", companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            if (!taxList.isEmpty()) {
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                            if (!taxPercentMap.isEmpty() && taxPercentMap.containsKey(taxPercent)) {
                                Double taxAmt = taxPercentMap.get(taxPercent);
                                taxPercentMap.put(taxPercent, taxAmt + totaltax);
                            } else {
                                taxPercentMap.put(taxPercent, totaltax);
                            }
                        }

                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                        Company company = (Company) cmpresult.getEntityList().get(0);
                        if (!StringUtil.isNullOrEmpty(inv.getID())) {
                            HashMap<String, Object> requestParam = new HashMap();
                            requestParam.put("invoiceid", inv.getID());
                            KwlReturnObject curresult = null;
                            curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
                            List<InvoiceTermsMap> termMap = curresult.getEntityList();
                            for (InvoiceTermsMap invoiceTerMap : termMap) {
                                Terms termsObj = new Terms();
                                InvoiceTermsSales mt = invoiceTerMap.getTerm();
                                double termAmnt = invoiceTerMap.getTermamount();
                                termName = (termAmnt > 0 ? "(+) " : "(-) ") + mt.getTerm();
                                termAmount = termAmnt > 0 ? authHandler.formattedCommaSeparatedAmount(termAmnt, companyid) : "(" + authHandler.formattedCommaSeparatedAmount((termAmnt * -1), companyid) + ")";
                                termsObj.setTermName(termName);
                                termsObj.setTermValue(termAmount);
                                totalTermAmount = totalTermAmount + termAmnt;
                                termsList.add(termsObj);
                            }
                        }
                        taxInvoice.setLabelname("Invoice");
                        taxInvoice.setPoreflabel("PO Reference No.");
                        taxInvoice.setPoref(poRefno);
                        invoiceMap.put("title", "Tax Invoice");
                         invoiceMap.put("ToLabel", "Invoice To");
                        response.setHeader("Content-Disposition", "attachment;filename=" + "TaxInvoice.pdf");
                        
//                        KwlReturnObject subTotalres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, subTotal, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject subTotalres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, subTotal, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        double subTotalmyr = authHandler.round((Double) subTotalres.getEntityList().get(0), companyid);
                        taxInvoice.setSubtotalmyr(authHandler.formattedCommaSeparatedAmount(subTotalmyr, companyid));
//                        KwlReturnObject rowDiscountAmountTotalres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowDiscountAmountTotal, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject rowDiscountAmountTotalres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowDiscountAmountTotal, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        double rowDiscountAmountTotalmyr = authHandler.round((Double) rowDiscountAmountTotalres.getEntityList().get(0), companyid);
                        taxInvoice.setDiscountmyr(authHandler.formattedCommaSeparatedAmount(rowDiscountAmountTotalmyr, companyid));
//                        KwlReturnObject subtotalwithdiscres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, subTotal - rowDiscountAmountTotal, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject subtotalwithdiscres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, subTotal - rowDiscountAmountTotal, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        double Subtotalwithdiscountmyr = authHandler.round((Double) subtotalwithdiscres.getEntityList().get(0), companyid);
                        taxInvoice.setSubtotalwithdiscountmyr(authHandler.formattedCommaSeparatedAmount(Subtotalwithdiscountmyr, companyid));
//                        KwlReturnObject gstres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowTaxAmountTotal + totaltax, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject gstres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowTaxAmountTotal + totaltax, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        double gstmyr = authHandler.round((Double) gstres.getEntityList().get(0), companyid);
                        taxInvoice.setGstmyr(authHandler.formattedCommaSeparatedAmount(gstmyr, companyid));
//                        KwlReturnObject totalAmountres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalAmount, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject totalAmountres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalAmount, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        double totalAmountmyr = authHandler.round((Double) totalAmountres.getEntityList().get(0), companyid);
                        taxInvoice.setTotalamountmyr(authHandler.formattedCommaSeparatedAmount(totalAmountmyr, companyid));
                        invoiceMap.put("invoiceto", "Invoice To :");
                        
                        
                        // Creat tax percent data
                        Set<Double> keySet = taxPercentMap.keySet();
                        for(Double entry:keySet)
                        {   taxPerMapData = new HashMap<>();
                            taxPerMapData.put("taxPercent", entry+"");
                            taxPerMapData.put("taxAmount", taxPercentMap.get(entry)+"");
                            taxPerMapDataList.add(taxPerMapData);
                        }
                        invoiceMap.put("taxPerMapDataList", new JRBeanCollectionDataSource(taxPerMapDataList));
                    } else if (mode == StaticValues.AUTONUM_GOODSRECEIPT) {
                        
                        String selfBilledStartDate = "";
                        String selfBilledEndDate = "";
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(GoodsReceipt.class.getName(), billid);
                        GoodsReceipt inv = (GoodsReceipt) cap.getEntityList().get(0);
                        if (inv.getCreatedby() != null) {
                            approverName = StringUtil.getFullName(inv.getCreatedby());
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                        invno = inv.getGoodsReceiptNumber();
                        entryDate = inv.getJournalEntry().getEntryDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipDate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();
                        filter_names.add("goodsReceipt.ID");
                        filter_params.add(inv.getID());
                        order_by.add("srno");
                        order_type.add("asc");
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        invRequestParams.put("order_by", order_by);
                        invRequestParams.put("order_type", order_type);
                        idresult = accGoodsReceiptobj.getGoodsReceiptDetails(invRequestParams);
                        customerName = inv.getVendor() == null ? inv.getVendor().getAccount().getName() : inv.getVendor().getName();
                        customerCode = inv.getVendor() == null ? inv.getVendor().getAccount().getAcccode() : inv.getVendor().getAcccode();
                        customerGSTNumber = inv.getVendor() == null ? "" : StringUtil.isNullOrEmpty(inv.getVendor().getGstRegistrationNumber())?"":"<br>(GST Reg No : " + inv.getVendor().getGstRegistrationNumber() + ")";
                        selfBilledStartDate = inv.getVendor().getSelfBilledFromDate() == null ?"": df1.format(inv.getVendor().getSelfBilledFromDate()) ;
                        selfBilledEndDate = inv.getVendor().getSelfBilledToDate() == null ? "":df1.format(inv.getVendor().getSelfBilledToDate()) ;
                        //refer ticket ERP-10777
                        //customerAdd = accVendorHandler.getVendorAddress(inv.getVendor(), true);
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("vendorid", inv.getVendor().getID());
                        customerAdd = accountingHandlerDAOobj.getVendorAddress(addressParams);
                        
                        billAddr = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), true);
                        //attn = inv.getVendor().getVendorAddresses() != null ? inv.getVendor().getVendorAddresses().getBillingContactPerson1() != null ? inv.getVendor().getVendorAddresses().getBillingContactPerson1() : "" : "";
                        VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                        attn = vendorAddressDetails == null ? "":(StringUtil.isNullOrEmpty(vendorAddressDetails.getContactPerson()) ? "":vendorAddressDetails.getContactPerson());
                        shipTo = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);
                        postText = inv.getPostText() == null ? "" : inv.getPostText();
//                        gstNo = inv.getCustomer() != null ? inv.getCustomer().getOther() : "";
                        if (inv.getMasterSalesPerson() != null) {   //if User Class returns the Null Valu
                            salesPerson = inv.getMasterSalesPerson() != null ? inv.getMasterSalesPerson().getValue() : "";
                        } else {  //if salesperson class has no username
                            salesPerson = "";
                        }
                         if (templatflag == Constants.Guan_Chong_templateflag || templatflag == Constants.Guan_ChongBF_templateflag) {                     
                            terms = inv.getTermid() != null ?  inv.getTermid().getTermname() : "";
                        } else {
                        terms = inv.getTermid() != null ? Integer.toString(inv.getTermid().getTermdays()) + " DAYS" : "";
                        }
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo() != null ? inv.getMemo() : "";
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        requestParams.put("currencyid",currencyid);
                        requestParams.put("companyid", companyid);
                        KwlReturnObject bAmt = null;
                        GoodsReceiptDetail row = null;
                        isSelfBilledInvoice = inv.isSelfBilledInvoice();
                        rmcdApprovalNo = inv.getRMCDApprovalNo()==null? "":inv.getRMCDApprovalNo();
                        int i = 0;
                        while (itr.hasNext()) {
                            MalaysianTaxInvoiceTable invoiceTable = new MalaysianTaxInvoiceTable();
                            i++;
                            String prodName = "";
                            String total1 = "";
                            String prodDesc = "";
                            String prodCode = "";
                            String uom = "";
                            String taxCode = "";
                            double quantity = 0, discountQuotation = 0, discountOrder = 0;
                            double rate = 0;
                            double discount = 0;
                            double rowtaxamount = 0;
                            double rowtaxpercent = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;
                            row = (GoodsReceiptDetail) itr.next();
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc =  StringUtil.DecodeText(row.getDescription());
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())) {
                                    prodDesc =  StringUtil.DecodeText(row.getInventory().getProduct().getDescription());
                                }
                            }
                            prodCode = row.getInventory().getProduct().getProductid() != null ? row.getInventory().getProduct().getProductid() : "";
                            prodName = row.getInventory().getProduct().getName() != null ? row.getInventory().getProduct().getName() : "";
                            quantity = row.getInventory().getQuantity();
                            rate = row.getRate();
                            uom = row.getInventory().getUom() == null ? "" : row.getInventory().getUom().getNameEmptyforNA();
                            String tempLinkTo = "";
                            if (row.getGoodsReceiptOrderDetails() != null) {
                                tempLinkTo = row.getGoodsReceiptOrderDetails().getGrOrder().getGoodsReceiptOrderNumber();
                                linkIds.add(tempLinkTo);
                            } else if (row.getPurchaseorderdetail() != null) {
                                tempLinkTo = row.getPurchaseorderdetail().getPurchaseOrder().getPurchaseOrderNumber();
                                linkIds.add(tempLinkTo);
                            } else if (row.getVendorQuotationDetail() != null) {
                                tempLinkTo = row.getVendorQuotationDetail().getVendorquotation().getQuotationNumber();
                                linkIds.add(tempLinkTo);
                            }
                            discount = row.getDiscount() != null ? row.getDiscount().getDiscountValue() : 0.0;
                            rowtaxamount = row.getRowTaxAmount() + row.getRowTermTaxAmount();

                            amount1 = authHandler.round(rate * quantity, companyid);
                            amount_with_discount = amount1 - discount;
                            amount_with_tax = amount_with_discount + rowtaxamount;

                            invoiceTable.setSno(i + ".");
                            invoiceTable.setName(prodName);
                            invoiceTable.setDescription(prodDesc.replaceAll("\n", "<br>"));
                            invoiceTable.setQty(authHandler.formattedQuantity(quantity, companyid) + " " + uom);
                            
                            invoiceTable.setRate(authHandler.formattedCommaSeparatedAmount(rate, companyid));
//                            KwlReturnObject ratemyrres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rate, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject ratemyrres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rate, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            double ratemyr=authHandler.round((Double) ratemyrres.getEntityList().get(0),companyid);
                            invoiceTable.setRatemyr(authHandler.formattedCommaSeparatedAmount(ratemyr,companyid));
                            
                            invoiceTable.setDisc(authHandler.formattedCommaSeparatedAmount(discount,companyid));
//                            KwlReturnObject discountres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, discount, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject discountres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, discount, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            double discountmyr=authHandler.round((Double) discountres.getEntityList().get(0),companyid);
                            invoiceTable.setDiscmyr(authHandler.formattedCommaSeparatedAmount(discountmyr, companyid));
                            
                            invoiceTable.setTotalwithouttaxndiscount(authHandler.formattedCommaSeparatedAmount(amount1, companyid));
//                            KwlReturnObject amountwithouttaxndiscount = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount1, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject amountwithouttaxndiscount = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount1, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            double amountwithouttaxndiscountmyr = authHandler.round((Double) amountwithouttaxndiscount.getEntityList().get(0), companyid);
                            invoiceTable.setTotalwithouttaxndiscountmyr(authHandler.formattedCommaSeparatedAmount(amountwithouttaxndiscountmyr, companyid));
                            
                            invoiceTable.setTotalwithouttax(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
//                            KwlReturnObject amountwithdiscres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount_with_discount, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject amountwithdiscres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount_with_discount, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            double amountwithdiscmyr = authHandler.round((Double) amountwithdiscres.getEntityList().get(0), companyid);
                            invoiceTable.setTotalwithouttaxmyr(authHandler.formattedCommaSeparatedAmount(amountwithdiscmyr, companyid));
                            
                            invoiceTable.setTaxamount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
//                            KwlReturnObject taxamtres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowtaxamount, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject taxamtres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowtaxamount, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            double taxamtrmy = authHandler.round((Double) taxamtres.getEntityList().get(0), companyid);
                            invoiceTable.setTaxamountmyr(authHandler.formattedCommaSeparatedAmount(taxamtrmy, companyid));
                            
                            invoiceTable.setTotalwithtax(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
//                            KwlReturnObject totalwithtaxres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount_with_tax, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            KwlReturnObject totalwithtaxres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount_with_tax, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                            double totalwithtaxmyr = authHandler.round((Double) totalwithtaxres.getEntityList().get(0), companyid);
                            invoiceTable.setTotalwithtaxmyr(authHandler.formattedCommaSeparatedAmount(totalwithtaxmyr, companyid));
                            
                            if (row.getTax() != null) {
                                requestParams.put("transactiondate", entryDate);
                                requestParams.put("taxid", row.getTax().getID());
                                requestParams.put("companyid", companyid);
                                KwlReturnObject result = accTaxObj.getTax(requestParams);
                                List taxList = result.getEntityList();
                                if (!taxList.isEmpty()) {
                                    Object[] taxObj = (Object[]) taxList.get(0);
                                    rowtaxpercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                                }
                                taxCode = row.getTax().getTaxCode();
                                MalaysianGSTSummaryTable gstSummaryTable = new MalaysianGSTSummaryTable();
                                gstSummaryTable.setSummary(row.getTax().getName());
                                gstSummaryTable.setAmount(isSelfBilledInvoice?authHandler.formattedCommaSeparatedAmount(amount1, companyid):authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                                gstSummaryTable.setAmountmyr(authHandler.formattedCommaSeparatedAmount(amountwithdiscmyr, companyid));
                                gstSummaryTable.setTax(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                                gstSummaryTable.setTaxmyr(authHandler.formattedCommaSeparatedAmount(taxamtrmy, companyid));
                                summaryTableList.add(gstSummaryTable);
                            }
                            invoiceTable.setTaxpercent(authHandler.formattedCommaSeparatedAmount(rowtaxpercent, companyid));
                            invoiceTable.setTaxcode(taxCode);
                            invoiceTable.setCurrency(currency.getCurrencyCode());
                            taxInvoiceTableList.add(invoiceTable);
                            subTotal += amount1;
                            subTotalwithTaxNDiscount += amount_with_tax;
                            rowDiscountAmountTotal += discount;
                            rowTaxAmountTotal += rowtaxamount;
                        }

                        totaltax = inv.getTaxEntry() != null ? inv.getTaxEntry().getAmount() : 0;
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
                        totalAmount = inv.getVendorEntry().getAmount();

                        if (inv.getTax() != null) {
                            requestParams.put("transactiondate", entryDate);
                            requestParams.put("taxid", inv.getTax() != null ? inv.getTax().getID() : "");
                            requestParams.put("companyid", companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            if (!taxList.isEmpty()) {
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                        }
                        if (!StringUtil.isNullOrEmpty(inv.getID())) {
                            HashMap<String, Object> requestParam = new HashMap();
                            requestParam.put("invoiceid", inv.getID());
                            KwlReturnObject curresult = null;
                            curresult = accGoodsReceiptobj.getInvoiceTermMap(requestParam);
                            List<ReceiptTermsMap> termMap = curresult.getEntityList();
                            for (ReceiptTermsMap invoiceTerMap : termMap) {
                                Terms termsObj = new Terms();
                                InvoiceTermsSales mt = invoiceTerMap.getTerm();
                                double termAmnt = invoiceTerMap.getTermamount();
                                termName = (termAmnt > 0 ? "(+) " : "(-) ") + mt.getTerm();
                                termAmount = termAmnt > 0 ? authHandler.formattedCommaSeparatedAmount(termAmnt, companyid) : "(" + authHandler.formattedCommaSeparatedAmount((termAmnt * -1), companyid) + ")";
                                termsObj.setTermName(termName);
                                termsObj.setTermValue(termAmount);
                                termsList.add(termsObj);
                            }
                        }
                        taxInvoice.setLabelname("Invoice");
                        taxInvoice.setPoreflabel("Ship Date");
                        taxInvoice.setPoref(shipDate != null ? df1.format(shipDate) : "");
                        invoiceMap.put("title", "Tax Invoice");
                        invoiceMap.put("ToLabel", "Invoice To");
                        response.setHeader("Content-Disposition", "attachment;filename=" + "TaxInvoice.pdf");
                       
//                        KwlReturnObject subTotalres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, subTotal, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject subTotalres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, subTotal, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        double subTotalmyr = authHandler.round((Double) subTotalres.getEntityList().get(0), companyid);
                        taxInvoice.setSubtotalmyr(authHandler.formattedCommaSeparatedAmount(subTotalmyr, companyid));
//                        KwlReturnObject rowDiscountAmountTotalres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowDiscountAmountTotal, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject rowDiscountAmountTotalres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowDiscountAmountTotal, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        double rowDiscountAmountTotalmyr = authHandler.round((Double) rowDiscountAmountTotalres.getEntityList().get(0), companyid);
                        taxInvoice.setDiscountmyr(authHandler.formattedCommaSeparatedAmount(rowDiscountAmountTotalmyr, companyid));
//                        KwlReturnObject subtotalwithdiscres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, subTotal - rowDiscountAmountTotal, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject subtotalwithdiscres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, subTotal - rowDiscountAmountTotal, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        double Subtotalwithdiscountmyr = authHandler.round((Double) subtotalwithdiscres.getEntityList().get(0), companyid);
                        taxInvoice.setSubtotalwithdiscountmyr(authHandler.formattedCommaSeparatedAmount(Subtotalwithdiscountmyr, companyid));
//                        KwlReturnObject gstres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowTaxAmountTotal + totaltax, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject gstres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowTaxAmountTotal + totaltax, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        double gstmyr = authHandler.round((Double) gstres.getEntityList().get(0), companyid);
                        taxInvoice.setGstmyr(authHandler.formattedCommaSeparatedAmount(gstmyr, companyid));
//                        KwlReturnObject totalAmountres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalAmount, currencyid, inv.getJournalEntry().getEntryDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject totalAmountres = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalAmount, currencyid, inv.getCreationDate(), inv.getJournalEntry().getExternalCurrencyRate());
                        double totalAmountmyr = authHandler.round((Double) totalAmountres.getEntityList().get(0), companyid);
                        taxInvoice.setTotalamountmyr(authHandler.formattedCommaSeparatedAmount(totalAmountmyr, companyid));
                        invoiceMap.put("invoiceto", "Invoice From :");
                        invoiceMap.put("selfBilledStartDate", selfBilledStartDate);
                        invoiceMap.put("selfBilledToDate", selfBilledEndDate);
                    } else if (mode == StaticValues.AUTONUM_SALESORDER) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(SalesOrder.class.getName(), billid);
                        SalesOrder inv = (SalesOrder) cap.getEntityList().get(0);
                        if (inv.getCreatedby() != null) {
                            approverName = StringUtil.getFullName(inv.getCreatedby());
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                        invno = inv.getSalesOrderNumber();
                        entryDate = inv.getOrderDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipdate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();
                        order_by.add("srno");
                        order_type.add("asc");
                        filter_names.add("salesOrder.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        invRequestParams.put("order_by", order_by);
                        invRequestParams.put("order_type", order_type);
                        idresult = accSalesOrderDAOobj.getSalesOrderDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? "" : inv.getCustomer().getName();
                        customerCode = inv.getCustomer() == null ? "" : inv.getCustomer().getAcccode() == null ? "" : inv.getCustomer().getAcccode();
                        
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("customerid", inv.getCustomer().getID());
                        customerAdd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                        if (customerAddressDetails != null) {
                            attn = StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : customerAddressDetails.getContactPerson();
                        }
                        
                        billAddr = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), true);
                        shipTo = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);
                        postText = inv.getPostText() == null ? "" : inv.getPostText();
                      if (templatflag == Constants.Guan_Chong_templateflag || templatflag == Constants.Guan_ChongBF_templateflag) {
                            terms = inv.getTerm() != null ? inv.getTerm().getTermname() : "";
                        } else {
                        terms = inv.getTerm() != null ? Integer.toString(inv.getTerm().getTermdays()) + " DAYS" : "";
                        }
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo() != null ? inv.getMemo() : "";
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        SalesOrderDetail row = null;

                        int i = 0;
                        while (itr.hasNext()) {
                            MalaysianTaxInvoiceTable invoiceTable = new MalaysianTaxInvoiceTable();
                            i++;
                            String prodName = "";
                            String total1 = "";
                            String prodDesc = "";
                            String prodCode = "";
                            String uom = "";
                            String taxCode = "";
                            double quantity = 0, discountQuotation = 0, discountOrder = 0;
                            double rate = 0;
                            double discount = 0;
                            double rowtaxamount = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;
                            double discountPrice = 0;
                            row = (SalesOrderDetail) itr.next();
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc =  StringUtil.DecodeText(row.getDescription());
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                    prodDesc = StringUtil.DecodeText(row.getProduct().getDescription());
                                }
                            }
                            prodCode = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                            prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                            uom = row.getUom() == null ? "" : row.getUom().getNameEmptyforNA();
                            String tempLinkTo = "";
                            if (row.getQuotationDetail() != null) {
                                tempLinkTo = row.getQuotationDetail().getQuotation().getquotationNumber();
                                linkIds.add(tempLinkTo);
                            }
                            discount = row.getDiscount();
                            rowtaxamount = row.getRowTaxAmount();
                            rate = authHandler.roundUnitPrice(row.getRate(),companyid);
                            quantity = authHandler.roundQuantity(row.getQuantity(), companyid);
                            double quotationPrice = authHandler.round(quantity * rate, companyid);
                            if (row.getDiscountispercent() == 1) {
                                discount = authHandler.round((quotationPrice * discount / 100), companyid);
                                discountPrice = (quotationPrice) - discount;
                            } else {
                                discountPrice = quotationPrice - discount;
                            }
                            totalAmount += discountPrice + authHandler.round(rowtaxamount, companyid);//amount += discountPrice + (discountPrice * rowTaxPercent/100);

                            amount1 = authHandler.round(rate * quantity, companyid);
                            amount_with_discount = amount1 - discount;
                            amount_with_tax = amount_with_discount + rowtaxamount;

                            invoiceTable.setSno(i + ".");
                            invoiceTable.setName(prodName);
                            invoiceTable.setDescription(prodDesc.replaceAll("\n", "<br>"));
                            invoiceTable.setQty(authHandler.formattedQuantity(quantity, companyid) + " " + uom);
                            invoiceTable.setRate(authHandler.formattedCommaSeparatedAmount(rate, companyid));
                            invoiceTable.setDisc(authHandler.formattedCommaSeparatedAmount(discount, companyid));
                            invoiceTable.setTotalwithouttax(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                            invoiceTable.setTaxamount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                            invoiceTable.setTotalwithtax(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                            if (row.getTax() != null) {
                                taxCode = row.getTax().getTaxCode();
                                MalaysianGSTSummaryTable gstSummaryTable = new MalaysianGSTSummaryTable();
                                gstSummaryTable.setSummary(row.getTax().getName());
                                gstSummaryTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                                gstSummaryTable.setTax(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                                summaryTableList.add(gstSummaryTable);
                            }
                            invoiceTable.setTaxcode(taxCode);
                            invoiceTable.setCurrency(currency.getCurrencyCode());
                            taxInvoiceTableList.add(invoiceTable);
                            subTotal += amount1;
                            rowDiscountAmountTotal += discount;
                            rowTaxAmountTotal += rowtaxamount;
                        }

                        if (inv.getTax() != null) {
                            requestParams.put("transactiondate", entryDate);
                            requestParams.put("taxid", inv.getTax() != null ? inv.getTax().getID() : "");
                            requestParams.put("companyid", companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            if (!taxList.isEmpty()) {
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                        }
                        totaltax = (taxPercent == 0 ? 0 : totalAmount * taxPercent / 100);
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";

                        double termTotalAmount = 0;
                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                        Company company = (Company) cmpresult.getEntityList().get(0);
                        if (!StringUtil.isNullOrEmpty(inv.getID())) {
                            HashMap<String, Object> requestParam = new HashMap();
                            requestParam.put("salesOrder", inv.getID());
                            KwlReturnObject curresult = null;
                            curresult = accSalesOrderDAOobj.getSalesOrderTermMap(requestParam);
                            List<SalesOrderTermMap> termMap = curresult.getEntityList();
                            for (SalesOrderTermMap invoiceTerMap : termMap) {
                                Terms termsObj = new Terms();
                                InvoiceTermsSales mt = invoiceTerMap.getTerm();
                                double termAmnt = invoiceTerMap.getTermamount();
                                termName = (termAmnt > 0 ? "(+) " : "(-) ") + mt.getTerm();
                                termAmount = termAmnt > 0 ? authHandler.formattedCommaSeparatedAmount(termAmnt, companyid) : "(" + authHandler.formattedCommaSeparatedAmount((termAmnt * -1), companyid) + ")";
                                termsObj.setTermName(termName);
                                termsObj.setTermValue(termAmount);
                                termsList.add(termsObj);
                                termTotalAmount += termAmnt;
                            }
                        }
                        totalAmount += termTotalAmount;
                        taxInvoice.setLabelname("Sales Order");
                        taxInvoice.setPoreflabel("Ship Date");
                        taxInvoice.setPoref(shipDate != null ? df1.format(shipDate) : "");
                        invoiceMap.put("title", "Sales Order");
                        invoiceMap.put("ToLabel", "To");
                        response.setHeader("Content-Disposition", "attachment;filename=" + "SalesOrder.pdf");

                    } else if (mode == StaticValues.AUTONUM_PURCHASEORDER) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(PurchaseOrder.class.getName(), billid);
                        PurchaseOrder inv = (PurchaseOrder) cap.getEntityList().get(0);
                        if (inv.getCreatedby() != null) {
                            approverName = StringUtil.getFullName(inv.getCreatedby());
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                        invno = inv.getPurchaseOrderNumber();
                        entryDate = inv.getOrderDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipdate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();
                        HashMap<String, Object> poRequestParams = new HashMap<String, Object>();
                        filter_names.add("purchaseOrder.ID");
                        filter_params.add(inv.getID());
                        order_by.add("srno");
                        order_type.add("asc");
                        poRequestParams.put("filter_names", filter_names);
                        poRequestParams.put("filter_params", filter_params);
                        poRequestParams.put("order_by", order_by);
                        poRequestParams.put("order_type", order_type);
                        idresult = accPurchaseOrderobj.getPurchaseOrderDetails(poRequestParams);
                        customerName = inv.getVendor() == null ? inv.getVendor().getAccount().getName() : inv.getVendor().getName();
                        customerCode = inv.getVendor() == null ? inv.getVendor().getAccount().getAcccode() : inv.getVendor().getAcccode();
                        
                        //refer ticket ERP-10777
                        //customerAdd = accVendorHandler.getVendorAddress(inv.getVendor(), true);
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("vendorid", inv.getVendor().getID());
                        customerAdd = accountingHandlerDAOobj.getVendorAddress(addressParams);
                        
                        billAddr = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), true);
                        //attn = inv.getVendor().getVendorAddresses() != null ? inv.getVendor().getVendorAddresses().getBillingContactPerson1() != null ? inv.getVendor().getVendorAddresses().getBillingContactPerson1() : "" : "";
                        VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                        attn = vendorAddressDetails == null ? "":(StringUtil.isNullOrEmpty(vendorAddressDetails.getContactPerson()) ? "":vendorAddressDetails.getContactPerson());
                        shipTo = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);
                        postText = inv.getPostText() == null ? "" : inv.getPostText();
                        if (templatflag == Constants.Guan_Chong_templateflag || templatflag == Constants.Guan_ChongBF_templateflag) {
                            terms = inv.getTerm() != null ?  inv.getTerm().getTermname() : "";
                        } else {
                        terms = inv.getTerm() != null ? Integer.toString(inv.getTerm().getTermdays()) + " DAYS" : "";
                        }
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo() != null ? inv.getMemo() : "";
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        PurchaseOrderDetail row = null;
                        int i = 0;
                        while (itr.hasNext()) {
                            MalaysianTaxInvoiceTable invoiceTable = new MalaysianTaxInvoiceTable();
                            i++;
                            String prodName = "";
                            String total1 = "";
                            String prodDesc = "";
                            String prodCode = "";
                            String uom = "";
                            String taxCode = "";
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            double discount = 0;
                            double rowtaxamount = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;
                            double discountPrice = 0;
                            row = (PurchaseOrderDetail) itr.next();
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc = StringUtil.DecodeText(row.getDescription());
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                    prodDesc =  StringUtil.DecodeText(row.getProduct().getDescription());
                                }
                            }
                            prodCode = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                            prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                            uom = row.getUom() == null ? "" : row.getUom().getNameEmptyforNA();
                            String tempLinkTo = "";
                            if (row.getVqdetail() != null) {
                                tempLinkTo = row.getVqdetail().getVendorquotation().getQuotationNumber();
                                linkIds.add(tempLinkTo);
                            }
                            discount = row.getDiscount();
                            rowtaxamount = row.getRowTaxAmount();
                            rate = authHandler.roundUnitPrice(row.getRate(),companyid);
                            quantity = authHandler.roundQuantity(row.getQuantity(), companyid);
                            double quotationPrice = authHandler.round(quantity * rate, companyid);
                            if (row.getDiscountispercent() == 1) {
                                discount = authHandler.round((quotationPrice * discount / 100), companyid);
                                discountPrice = (quotationPrice) - discount;
                            } else {
                                discountPrice = quotationPrice - discount;
                            }

                            totalAmount += discountPrice + authHandler.round(rowtaxamount, companyid);//amount += discountPrice + (discountPrice * rowTaxPercent/100);

                            amount1 = authHandler.round(rate * quantity, companyid);
                            amount_with_discount = amount1 - discount;
                            amount_with_tax = amount_with_discount + rowtaxamount;

                            invoiceTable.setSno(i + ".");
                            invoiceTable.setName(prodName);
                            invoiceTable.setDescription(prodDesc.replaceAll("\n", "<br>"));
                            invoiceTable.setQty(authHandler.formattedQuantity(quantity, companyid) + " " + uom);
                            invoiceTable.setRate(authHandler.formattedCommaSeparatedAmount(rate, companyid));
                            invoiceTable.setDisc(authHandler.formattedCommaSeparatedAmount(discount, companyid));
                            invoiceTable.setTotalwithouttax(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                            invoiceTable.setTaxamount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                            invoiceTable.setTotalwithtax(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                            if (row.getTax() != null) {
                                taxCode = row.getTax().getTaxCode();
                                MalaysianGSTSummaryTable gstSummaryTable = new MalaysianGSTSummaryTable();
                                gstSummaryTable.setSummary(row.getTax().getName());
                                gstSummaryTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                                gstSummaryTable.setTax(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                                summaryTableList.add(gstSummaryTable);
                            }
                            invoiceTable.setTaxcode(taxCode);
                            invoiceTable.setCurrency(currency.getCurrencyCode());
                            taxInvoiceTableList.add(invoiceTable);
                            subTotal += amount1;
                            rowDiscountAmountTotal += discount;
                            rowTaxAmountTotal += rowtaxamount;
                        }

                        if (inv.getTax() != null) {
                            requestParams.put("transactiondate", entryDate);
                            requestParams.put("taxid", inv.getTax() != null ? inv.getTax().getID() : "");
                            requestParams.put("companyid", companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            if (!taxList.isEmpty()) {
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                        }
                        totaltax = (taxPercent == 0 ? 0 : totalAmount * taxPercent / 100);
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";

                        double termTotalAmount = 0;
                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                        Company company = (Company) cmpresult.getEntityList().get(0);
                        if (!StringUtil.isNullOrEmpty(inv.getID())) {
                            HashMap<String, Object> requestParam = new HashMap();
                            requestParam.put("purchaseOrder", inv.getID());
                            KwlReturnObject curresult = null;
                            curresult = accPurchaseOrderobj.getPurchaseOrderTermMap(requestParam);
                            List<PurchaseOrderTermMap> termMap = curresult.getEntityList();
                            for (PurchaseOrderTermMap invoiceTerMap : termMap) {
                                Terms termsObj = new Terms();
                                InvoiceTermsSales mt = invoiceTerMap.getTerm();
                                double termAmnt = invoiceTerMap.getTermamount();
                                termName = (termAmnt > 0 ? "(+) " : "(-) ") + mt.getTerm();
                                termAmount = termAmnt > 0 ? authHandler.formattedCommaSeparatedAmount(termAmnt, companyid) : "(" + authHandler.formattedCommaSeparatedAmount((termAmnt * -1), companyid) + ")";
                                termsObj.setTermName(termName);
                                termsObj.setTermValue(termAmount);
                                termsList.add(termsObj);
                                termTotalAmount += termAmnt;
                            }
                        }
                        totalAmount += termTotalAmount;
                        taxInvoice.setLabelname("Purchase Order");
                        taxInvoice.setPoreflabel("Ship Date");
                        taxInvoice.setPoref(shipDate != null ? df1.format(shipDate) : "");
                        invoiceMap.put("title", "Purchase Order");
                         invoiceMap.put("ToLabel", "To");
                        response.setHeader("Content-Disposition", "attachment;filename=" + "PurchaseOrder.pdf");
                    }

                    for (String l : linkIds) {
                        linkTo += l + ",";
                    }
                    if (linkTo.length() > 1) {
                        linkTo = linkTo.substring(0, linkTo.length() - 1);
                    }
                    linkTo = StringUtil.isNullOrEmpty(linkTo) ? "NA" : linkTo;

                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    KwlReturnObject compResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compResult.getEntityList().get(0);


                    taxInvoice.setCompanyname(company.getCompanyName());
                    String companyAdd = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
                    taxInvoice.setCompanyaddress(companyAdd.replaceAll("\n", "<br>"));
                    taxInvoice.setGstnumber(companyAccountPreferences.getGstNumber() != null ? "(GST Reg No : " + companyAccountPreferences.getGstNumber() + ")" : "");
                    taxInvoice.setName(customerName);
                    taxInvoice.setCustomergstno(customerGSTNumber);
                    taxInvoice.setAddress(billAddr.replaceAll("\n", "<br>"));
                    taxInvoice.setInvno(invno);
                    taxInvoice.setDate(df1.format(entryDate));
                    taxInvoice.setDuedate(df1.format(dueDate));
                    taxInvoice.setTerms(terms);
                    taxInvoice.setCurrencyname(currency.getName() != null ? currency.getName() : currency.getCurrencyCode());
                    taxInvoice.setCreatedby(approverName);
                    taxInvoice.setAttn(attn);
                    taxInvoice.setRemark(memo);
                    taxInvoice.setLinkto(linkTo);
                    taxInvoice.setPosttext(postText);
                    taxInvoice.setPrintedon(df1.format(currentDate) + " " + sdf.format(currentDate));

                    taxInvoice.setSubtotal(authHandler.formattedCommaSeparatedAmount(subTotal, companyid));
                    taxInvoice.setDiscount(authHandler.formattedCommaSeparatedAmount(rowDiscountAmountTotal, companyid));
                    taxInvoice.setSubtotalwithdiscount(authHandler.formattedCommaSeparatedAmount((subTotal - rowDiscountAmountTotal), companyid));
                    taxInvoice.setGst(authHandler.formattedCommaSeparatedAmount((rowTaxAmountTotal + totaltax), companyid));
                    taxInvoice.setTotalamount(authHandler.formattedCommaSeparatedAmount(((subTotal - rowDiscountAmountTotal)+(rowTaxAmountTotal + totaltax)+totalTermAmount), companyid));
                    
                    int countryLanguageId = Constants.OtherCountryLanguageId; // 0
                    KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                    ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                    if (extraCompanyPreferences.isAmountInIndianWord()) {
                        countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
                    }
                    if(isSelfBilledInvoiceWithFC){
                        taxInvoice.setAmountinwords(currency.getName() + " " + EnglishNumberToWordsOjb.convert(totalAmount + totaltax + rowTaxAmountTotal, currency,countryLanguageId) + " only. "+"[With Exchange Rate : (1 "+currency.getSymbol()+" = "+exchangerate+" MYR)"+"]");
                    }else{
                        taxInvoice.setAmountinwords(currency.getName() + " " + EnglishNumberToWordsOjb.convert(totalAmount + totaltax + rowTaxAmountTotal, currency,countryLanguageId) + " only.");
                    }
                    taxInvoiceList.add(taxInvoice);
                    boolean isLetterHead = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("isLetterHead"))) {
                        isLetterHead = Boolean.parseBoolean((String) request.getParameter("isLetterHead"));
                    }
                    invoiceMap.put("isLetterHead", isLetterHead && ExportRecordHandler.checkCompanyTemplateLogoPresent(company));

                    String logo = StorageHandler.GetDocStorePath() + companyid +"_template"+ FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("TaxInvoiceSubReportData", new JRBeanCollectionDataSource(taxInvoiceTableList));
                    invoiceMap.put("TaxSummaryData", new JRBeanCollectionDataSource(summaryTableList));
                    invoiceMap.put("TermsData", new JRBeanCollectionDataSource(termsList));
                    invoiceMap.put("logo", logo);
                    invoiceMap.put("subTotalwithTaxNDiscount", authHandler.formattedCommaSeparatedAmount(subTotalwithTaxNDiscount, companyAdd)); //This subtotal will add the row level gst amount in Subtotal
                    invoiceMap.put("globalTax", authHandler.formattedCommaSeparatedAmount(totaltax, companyid));
                    invoiceMap.put("format", "pdf");
                    
                    InputStream inputStream = null;
                    if(isSelfBilledInvoice){
                        invoiceMap.put("approvalNo", rmcdApprovalNo);
                        invoiceMap.put("title", "SELF-BILLED INVOICE");
                        if(isSelfBilledInvoiceWithFC){
                             inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MalaysianSelfBilledTaxInvoiceSimple.jrxml");
                        }else{
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MalaysianSelfBilledTaxInvoiceSimple.jrxml");
                        }
                    }else{
                        if (isSelfBilledInvoiceWithFC) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MalaysianTaxInvoiceWithFC.jrxml");
                        } else {
                            if (templatflag == Constants.Guan_Chong_templateflag) {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MalaysianTaxInvoiceGCB.jrxml");
                            } else {
                                if(issimplifiedtaxinvoice){
                                    invoiceMap.put("title", "Simplified Tax Invoice");
                                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MalaysianSimplifiedSalesTaxInvoice.jrxml");
                                }else if(issimplifiedtaxinvoicea7){
                                    invoiceMap.put("title", "Simplified Tax Invoice");
                                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MalaysianSimplifiedSalesTaxInvoiceA7Size.jrxml");
                                }else if(issimplifiedtaxinvoicea7withtax){
                                    invoiceMap.put("title", "Simplified Tax Invoice");
                                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MalaysianSimplifiedSalesTaxInvoiceA7SizeWithTax.jrxml");
                                }else{
                                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MalaysianTaxInvoice.jrxml");
                                }
                            }
                        }
                    }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(taxInvoiceList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }
    @Override
    public List<Object> exportPurchaseOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                JSONArray DataJArr = new JSONArray();
                Map<String, Object> purchaseOrderMap = new HashMap<String, Object>();
                String view = "purchaseOrder";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;
                try {
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    if (!storageHandlerImpl.GetSATSCompanyId().contains(companyid)) {
                        java.util.Locale currentLocale = java.util.Locale.US;
                        NumberFormat nf = NumberFormat.getNumberInstance(currentLocale);
                        nf.setMinimumFractionDigits(2);
                        nf.setMaximumFractionDigits(2);
                        nf.setGroupingUsed(true);
                    }
                    int templateflag = Integer.parseInt(request.getParameter("templateflag"));

                    PurchaseOrderJasper purchaseOrder = new PurchaseOrderJasper();
                    ArrayList<PurchaseOrderJasper> purchaseOrderList = new ArrayList<PurchaseOrderJasper>();
                
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

//                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    purchaseOrder.setGstregno(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    purchaseOrder.setCname((company.getCompanyName()));
                    purchaseOrder.setCadd((company.getAddress() != null ? company.getAddress() : ""));
                    purchaseOrder.setCemail(company.getEmailID() != null ? company.getEmailID() : "");
                    purchaseOrder.setCfax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
                    purchaseOrder.setCphone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
                    purchaseOrder.setGstregno(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    purchaseOrder.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                    KWLCurrency currency = null;

                    HashMap<String, Object> requestParams = accPurchaseOrderServiceDAOobj.getPurchaseOrderMap(request);
                    boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
                    String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
                    String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid") != null) ? request.getParameter("gcurrencyid") : sessionHandlerImpl.getCurrencyID(request);

                    requestParams.put("companyid", companyid);
                    requestParams.put("gcurrencyid", gcurrencyid);

                    if (!StringUtil.isNullOrEmpty(billid)) {
//                billId = request.getParameter("bills");
                        requestParams.put("billId", billid);
                    }

                    boolean isOutstanding = request.getParameter("isOutstanding") != null ? Boolean.parseBoolean(request.getParameter("isOutstanding")) : false;
                    requestParams.put("isOutstanding", isOutstanding);
                    if (!isOutstanding) {
                        result = accPurchaseOrderobj.getPurchaseOrdersMerged(requestParams);
                    } else {
                        result = accPurchaseOrderobj.getOutstandingPurchaseOrders(requestParams);
                    }

                    DataJArr = accPurchaseOrderServiceDAOobj.getPurchaseOrdersJsonMerged(requestParams, result.getEntityList(), DataJArr);
                    JSONObject jobj = DataJArr.getJSONObject(0);
                    purchaseOrder.setVoucherno(jobj.getString("billno"));
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    KwlReturnObject poObj1 = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), jobj.getString("billid"));
                    PurchaseOrder poObj = (PurchaseOrder) poObj1.getEntityList().get(0);
//            int td=(poObj.getTerm().getTermdays())!=0?(poObj.getTerm().getTermdays()):0;
//            String termdays=td+" DAYS FROM THE DATE OF PURCHASE ORDER";
//            purchaseOrder.setTermofdelivery(termdays);
                    currency = poObj.getCurrency();
                    purchaseOrder.setCurrencyinword(currency.getName().toString());
                    boolean isGSTIncluded = poObj.isGstIncluded();
                    String venid = jobj.getString("personid");
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Vendor.class.getName(), venid.toString());
                    Vendor vendor = (Vendor) objItr.getEntityList().get(0);
                    purchaseOrder.setVname(jobj.getString("personname"));
                    
                    //refer ticket ERP-10777
                    //ERP-10777String venAdd = accVendorHandler.getVendorAddress(vendor, true);
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    addressParams.put("vendorid", vendor.getID());
                    String venAdd = accountingHandlerDAOobj.getVendorAddress(addressParams);
                    
                    purchaseOrder.setVadd(venAdd != null ? venAdd.replaceAll("\n", "<br>") : "");
                    purchaseOrder.setVphone(vendor.getContactNumber());

                    //Subtract one day from given date (Export selected records)
                    Date poOrderDate = poObj.getOrderDate();
                    Calendar c = Calendar.getInstance();
                    c.setTime(poOrderDate);
                    //c.add(Calendar.DATE, -1);
                    poOrderDate.setTime(c.getTime().getTime());
                    purchaseOrder.setDate((df.format(poOrderDate)));

                    purchaseOrder.setRemark((jobj.getString("memo")));
                    double total = Double.parseDouble(jobj.getString("orderamountwithTax"));
                    total = authHandler.round(total, companyid);
                    purchaseOrder.setTotal(authHandler.formattedAmount(total, companyid));
                    String netinword = EnglishNumberToWordsOjb.convert(total, currency,countryLanguageId);
                    purchaseOrder.setTotalinword(netinword + " only.");
                    purchaseOrder.setCurr(currency.getSymbol());


                    Date InvEntryDate = poObj.getOrderDate();
                    Date InvdueDate = poObj.getDueDate();
                    int termdays = poObj.getTerm() != null ? poObj.getTerm().getTermdays() : (int) ((InvdueDate.getTime() - InvEntryDate.getTime()) / (1000 * 60 * 60 * 24));
                    String term = (termdays + " DAYS FROM THE DATE OF PURCHASE ORDER").toString();
                    purchaseOrder.setTermofdelivery(term);

                    purchaseOrderMap = getPurchaseOrderDetailsJasper(request, billid);
                    String q = (purchaseOrderMap.get("totalQ")).toString();
                    String aq = (purchaseOrderMap.get("atotalQ")).toString();
                    purchaseOrderMap.remove("totalQ");
                    purchaseOrderMap.remove("atotalQ");
                    purchaseOrder.setTotalkgs(aq);
                    purchaseOrder.setTotalbags(q);
                    purchaseOrderList.add(purchaseOrder);
                    //label of unit price is made as dynamic which may change as per including GST
                    if(isGSTIncluded) {
                        purchaseOrderMap.put("rateLabel", "U Price </br>Incl GST");
                    } else {
                        purchaseOrderMap.put("rateLabel", "U Price"); 
                    }

                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    purchaseOrderMap.put("imagePath", fileName1);
                    if (templateflag == 1) {
                        purchaseOrderMap.put("footerflag", true);
                    } else {
                        purchaseOrderMap.put("footerflag", false);  //Mayur B- To hide footer logo for SMS holding Company.
                    }
                    purchaseOrderMap.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
                    purchaseOrderMap.put("imagePath3", "http://67.192.230.254/test/sms_chinesename.png");
                    purchaseOrderMap.put("format", "pdf");
//            purchaseOrderMap.put("datasource", new JRBeanCollectionDataSource(purchaseOrderList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "PurchaseOrder.pdf");
                    InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PurchaseOrder.jrxml");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PurchaseOrderSubReport.jrxml");
                    JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                    jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

                    purchaseOrderMap.put("PurchaseOrderSubReport", jasperReportSubReport);

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(purchaseOrderList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, purchaseOrderMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accPurchaseOrderControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    public Map<String, Object> getPurchaseOrderDetailsJasper(HttpServletRequest request, String POID) throws ServiceException, SessionExpiredException {
        JSONArray jArr = new JSONArray();

//        POID = request.getParameter("bills");
        ArrayList<PurchaseOrderSubReportJasper> purchaseOrderSubReportList = new ArrayList< PurchaseOrderSubReportJasper>();
        HashMap<String, PurchaseOrderSubReportJasper> poSubReportListMap = new HashMap<String, PurchaseOrderSubReportJasper>();
        Map<String, Object> purchaseOrderMap = new HashMap<String, Object>();
        String companyid = sessionHandlerImpl.getCompanyid(request);
        try {
            java.util.Date entryDate = null;
            double total = 0;
            int aq = 0;
            int q = 0;
            Date shipDate = null;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            HashMap<String, Object> poRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), POID);
            PurchaseOrder purchaseOrder = (PurchaseOrder) objItr.getEntityList().get(0);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String currencyid = currencyid = (purchaseOrder.getCurrency() == null) ? currency.getCurrencyID() : purchaseOrder.getCurrency().getCurrencyID();;
            filter_names.add("purchaseOrder.ID");
            filter_params.add(purchaseOrder.getID());
            poRequestParams.put("filter_names", filter_names);
            poRequestParams.put("filter_params", filter_params);
            poRequestParams.put("order_by", order_by);
            poRequestParams.put("order_type", order_type);
            KwlReturnObject podresult = accPurchaseOrderobj.getPurchaseOrderDetails(poRequestParams);
            Iterator itr = podresult.getEntityList().iterator();
            boolean isGSTIncluded = purchaseOrder.isGstIncluded();
            shipDate = purchaseOrder.getShipdate();
            String shipvia = purchaseOrder.getShipvia();
            String fob = purchaseOrder.getFob();
            String invoicePostText = purchaseOrder.getPostText() == null ? "" : purchaseOrder.getPostText();
            String Memo = purchaseOrder.getMemo();
            int pendingapproval = purchaseOrder.getPendingapproval();
            String shipaddress = purchaseOrder.getShipTo();
            String billaddress = purchaseOrder.getBillTo();
            int i = 1;
            while (itr.hasNext()) {
                PurchaseOrderDetail row = (PurchaseOrderDetail) itr.next();

                JSONObject obj = new JSONObject();
                Product prod = row.getProduct();
                PurchaseOrderSubReportJasper po = new PurchaseOrderSubReportJasper();
                po.setSno(Integer.toString(i));
                i++;
                po.setPname((prod.getName()).toUpperCase());
                String desc = "";
                if (StringUtil.isNullOrEmpty(row.getDescription())) {
                    desc = row.getProduct().getDescription() != null ? row.getProduct().getDescription() : "";
                } else {
                    desc = row.getDescription() != null ? row.getDescription() : "";
                }
                po.setPdesc(desc);
                po.setCurrency(currency.getSymbol());
                int quantity1 = (int) (row.getQuantity());
                po.setQuantity(authHandler.formattedQuantity(quantity1, companyid));
                double rate = 0;
                if(isGSTIncluded) {
                    rate = row.getRateincludegst();
                } else {
                    rate = row.getRate();
                }
                po.setRate(authHandler.getFormattedUnitPrice(rate, companyid));
                String uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                po.setKgs(uom);
                String buom = row.getUom() == null ? "" : row.getUom().getNameEmptyforNA();
                po.setBgs(buom);
                int quantity2 = (int) (row.getBaseuomquantity());
                po.setAquantity(authHandler.formattedQuantity(quantity2, companyid));


                double quantity = row.getQuantity();
                aq += quantity2;
                q += quantity1;
                double discountQuotation = (row.getDiscountispercent() == 1) ? rate * quantity * row.getDiscount() / 100 : row.getDiscount();
                double amount1 = 0;
                amount1 = authHandler.round(rate * quantity, companyid) ;

                if (discountQuotation != 0) {
                    amount1 -= discountQuotation;
                }

                double rowTaxPercent = 0;
                String rowTaxName = "";
                entryDate = purchaseOrder.getOrderDate();
                if (row != null && row.getTax() != null) {
                    requestParams.put("transactiondate", entryDate);
                    requestParams.put("taxid", row.getTax().getID());
                    KwlReturnObject result = accTaxObj.getTax(requestParams);
                    List taxList = result.getEntityList();
                    Object[] taxObj = (Object[]) taxList.get(0);
                    rowTaxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                    rowTaxName = row.getTax().getName();
                }
//                obj.put("7", rowTaxPercent);// Tax
                if(!isGSTIncluded) {
                    amount1 += amount1 * rowTaxPercent / 100;
                }
                total += amount1;
                po.setAmount(authHandler.formattedAmount(amount1, companyid));
                purchaseOrderSubReportList.add(po);
                poSubReportListMap.put(POID, po);
            }

            purchaseOrderMap.put("PurchaseOrderSubReportData", new JRBeanCollectionDataSource(purchaseOrderSubReportList));
            purchaseOrderMap.put("totalQ", authHandler.formattedQuantity(q, companyid));
            purchaseOrderMap.put("atotalQ", authHandler.formattedQuantity(aq, companyid));

        } catch (Exception ex) {
            Logger.getLogger(accPurchaseOrderControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getPurchaseOrderDetailJasper : " + ex.getMessage(), ex);
        }

        return purchaseOrderMap;
    }

    @Override
    public List<Object> exportSenwanGroupPurchaseOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billId = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                billId = s;

                if (StringUtil.isNullOrEmpty(billId)) {
                    billId = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                JSONArray DataJArr = new JSONArray();
                Map<String, Object> purchaseOrderMap = new HashMap<String, Object>();
                String view = "senwanGroupPurchaseOrder";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                java.util.Locale currentLocale = java.util.Locale.US;
                NumberFormat nf = NumberFormat.getNumberInstance(currentLocale);
                nf.setMinimumFractionDigits(2);
                nf.setMaximumFractionDigits(2);
                nf.setGroupingUsed(true);

                SenwanGroupPurchaseOrder purchaseOrder = new SenwanGroupPurchaseOrder();
                SenwanGroupPurchaseOrderTable purchaseOrderTable = new SenwanGroupPurchaseOrderTable();
                ArrayList<SenwanGroupPurchaseOrder> purchaseOrderList = new ArrayList<SenwanGroupPurchaseOrder>();
                ArrayList<SenwanGroupPurchaseOrderTable> purchaseOrderTableList = new ArrayList<SenwanGroupPurchaseOrderTable>();
                ArrayList<SenwanGroupPurchaseOrderSubReport> purchaseOrderSubReportList = new ArrayList<SenwanGroupPurchaseOrderSubReport>();
                HashMap<String, SenwanGroupPurchaseOrderSubReport> poSubReportListMap = new HashMap<String, SenwanGroupPurchaseOrderSubReport>();

                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    KWLCurrency currency = null;

                    HashMap<String, Object> requestParams = accPurchaseOrderServiceDAOobj.getPurchaseOrderMap(request);
                    boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
                    String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
                    String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid") != null) ? request.getParameter("gcurrencyid") : sessionHandlerImpl.getCurrencyID(request);

                    requestParams.put("companyid", companyid);
                    requestParams.put("gcurrencyid", gcurrencyid);

//            String billId = "";
                    if (!StringUtil.isNullOrEmpty(billId)) {
//                billId = request.getParameter("bills");
                        requestParams.put("billId", billId);
                    }

                    boolean isOutstanding = request.getParameter("isOutstanding") != null ? Boolean.parseBoolean(request.getParameter("isOutstanding")) : false;
                    requestParams.put("isOutstanding", isOutstanding);
                    if (!isOutstanding) {
                        result = accPurchaseOrderobj.getPurchaseOrdersMerged(requestParams);
                    } else {
                        result = accPurchaseOrderobj.getOutstandingPurchaseOrders(requestParams);
                    }

                    DataJArr = accPurchaseOrderServiceDAOobj.getPurchaseOrdersJsonMerged(requestParams, result.getEntityList(), DataJArr);
                    JSONObject jobj = DataJArr.getJSONObject(0);

                    DateFormat df = new SimpleDateFormat("MMMM dd, yyyy");
                    Date date = df.parse(jobj.getString("date"));
                    purchaseOrder.setDate((df.format(date)));
                    KwlReturnObject poObj1 = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), jobj.getString("billid"));
                    PurchaseOrder poObj = (PurchaseOrder) poObj1.getEntityList().get(0);
//            int td=(poObj.getTerm().getTermdays())!=0?(poObj.getTerm().getTermdays()):0;
//            String termdays=td+" DAYS FROM THE DATE OF PURCHASE ORDER";
//            purchaseOrder.setTermofdelivery(termdays);
                    currency = poObj.getCurrency();
                    purchaseOrder.setPono(poObj.getPurchaseOrderNumber());
                    purchaseOrder.setMemo(poObj.getMemo() != null ? poObj.getMemo().replaceAll("\n", "<br>") : "");
                    String venid = jobj.getString("personid");
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Vendor.class.getName(), venid.toString());
                    Vendor vendor = (Vendor) objItr.getEntityList().get(0);
                    purchaseOrder.setName(jobj.getString("personname"));
                    
                    //refer ticket ERP-10777
                    //String vendorAdd = accVendorHandler.getVendorAddress(vendor, true);
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    addressParams.put("vendorid", vendor.getID());
                    String vendorAdd = accountingHandlerDAOobj.getVendorAddress(addressParams);
                    
                    purchaseOrder.setAddress(vendorAdd.replaceAll("\n", "<br>"));
//            purchaseOrder.setPhone(vendor.getContactNumber());
                    String shipToAdd = CommonFunctions.getBillingShippingAddress(poObj.getBillingShippingAddresses(), false);
                    purchaseOrder.setShipto(StringUtil.isNullOrEmpty(shipToAdd) ? poObj.getShipTo() != null ? poObj.getShipTo().replaceAll("\n", "<br>") : "" : shipToAdd.replaceAll("\n", "<br>"));

                    Iterator itrRow = poObj.getRows().iterator();
                    double amount = 0, totalDiscount = 0, discountPrice = 0;
                    double rowTaxAmountTotal = 0;
                    int i = 0;
                    java.util.Date entryDate = null;
                    double total = 0;
                    int aq = 0;
                    int q = 0;
                    String quotationNo = "";
                    String prNo = "";
                    Date shipDate = null;
                    entryDate = poObj.getOrderDate();
                    while (itrRow.hasNext()) {
                        i++;
                        PurchaseOrderDetail row = (PurchaseOrderDetail) itrRow.next();

                        JSONObject obj = new JSONObject();
                        Product prod = row.getProduct();
                        SenwanGroupPurchaseOrderSubReport po = new SenwanGroupPurchaseOrderSubReport();
//                po.setPname((prod.getName()).toUpperCase());
                        po.setSno(Integer.toString(i));
                        po.setItemno(row.getID() != null ? row.getProduct().getProductid() : "");
                        String desc = "";
                        if (StringUtil.isNullOrEmpty(row.getDescription())) {
                            desc = row.getProduct().getDescription() != null ? row.getProduct().getDescription() : "";
                        } else {
                            desc = row.getDescription() != null ? row.getDescription() : "";
                        }
                        po.setDesc(desc);
//                po.setCurrency(currency.getSymbol());
                        int quantity1 = (int) (row.getQuantity());
                        double rate = 0;
                        rate = row.getRate();
                        po.setPrice(currency.getSymbol() + " " + nf.format(rate));
                        String uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                        po.setQty(Integer.toString(quantity1) + " " + uom);
                        double quantity = row.getQuantity();
                        q += quantity1;
                        double discountQuotation = (row.getDiscountispercent() == 1) ? rate * quantity * row.getDiscount() / 100 : row.getDiscount();
                        double amount1 = 0;
                        amount1 = authHandler.round(rate * quantity, companyid);

                        if (discountQuotation != 0) {
                            amount1 -= discountQuotation;
                        }

                        po.setLinetotal(currency.getSymbol() + " " + nf.format(amount1));
                        amount += amount1;
                        rowTaxAmountTotal += row.getRowTaxAmount();
                        purchaseOrderSubReportList.add(po);
                        poSubReportListMap.put(poObj.getID(), po);
                    }

                    purchaseOrderMap.put("PurchaseOrderSubReportData", new JRBeanCollectionDataSource(purchaseOrderSubReportList));


                    if (poObj.getDiscount() != 0) {
                        if (poObj.isPerDiscount()) {
                            totalDiscount = amount * poObj.getDiscount() / 100;
                            amount = amount - totalDiscount;
                        } else {
                            amount = amount - poObj.getDiscount();
                            totalDiscount = poObj.getDiscount();
                        }
                        //                      obj.put("discounttotal", poObj.getDiscount());
                    } else {
                        //                      obj.put("discounttotal", 0);
                    }
                    //                   obj.put("discount", totalDiscount);
                    //                   obj.put("discountispertotal", purchaseOrder.isPerDiscount());
                    double taxPercent = 0;
                    if (poObj.getTax() != null) {
                        requestParams.put("transactiondate", poObj.getOrderDate());
                        requestParams.put("taxid", poObj.getTax().getID());
                        KwlReturnObject result3 = accTaxObj.getTax(requestParams);
                        List taxList = result3.getEntityList();
                        Object[] taxObj = (Object[]) taxList.get(0);
                        taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                    }
                    double orderAmount = amount;
                    double ordertaxamount = (taxPercent == 0 ? 0 : orderAmount * taxPercent / 100);


                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Purchase_Order_ModuleId, 0, 1));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                    QuotationDetail row = null;
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    KwlReturnObject idcustresult = accountingHandlerDAOobj.getObject(PurchaseOrderCustomData.class.getName(), poObj.getID());
                    if (idcustresult.getEntityList().get(0) != null && idcustresult.getEntityList().size() > 0) {
                        PurchaseOrderCustomData jeCustom = (PurchaseOrderCustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
//                        if (customFieldMap.containsKey(varEntry.getKey())) {
//                            FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
//                            if (fieldComboData != null) {
//                                String Label = varEntry.getKey();
//                                String Value = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
//                            }
//                        } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
//                            String Label = varEntry.getKey();
//                            String Value = df.format(Long.parseLong(coldata));
//                        } else {
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                if ((varEntry.getKey().split("_")[1]).equals("Shipping Term")) {
                                    purchaseOrderTable.setShippingterms(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Shipping Method")) {
                                    purchaseOrderTable.setShippingmethod(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Delivery Date")) {
                                    purchaseOrderTable.setDeliverydate(coldata);
                                }

                            }
                        }
                    }
                    purchaseOrderTableList.add(purchaseOrderTable);
                    String approverName = "";
                    if (poObj.getCreatedby() != null) {
                        approverName = StringUtil.getFullName(poObj.getCreatedby());
                    }
                    String approverEmail = "";
                    if (poObj.getCreatedby().getEmailID() != null) {
                        approverEmail = poObj.getCreatedby().getEmailID();
                    }
                    purchaseOrder.setCreatedby(approverName);
                    purchaseOrder.setCreatedbyemail(approverEmail);
                    purchaseOrder.setCustid("SEN WAN");
                    purchaseOrder.setTotalamount(currency.getSymbol() + " " + nf.format(orderAmount + ordertaxamount + rowTaxAmountTotal));
                    purchaseOrder.setGst(currency.getSymbol() + " " + nf.format(ordertaxamount + rowTaxAmountTotal));
                    purchaseOrder.setSubtotal(currency.getSymbol() + " " + nf.format(orderAmount));
                    purchaseOrderList.add(purchaseOrder);
                    purchaseOrderMap.put("PurchaseOrderSubReportData1", new JRBeanCollectionDataSource(purchaseOrderTableList));
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    purchaseOrderMap.put("imagePath", fileName1);
                    purchaseOrderMap.put("format", "pdf");
                    purchaseOrderMap.put("PostText",poObj.getPostText()!=null?poObj.getPostText():"");
//            purchaseOrderMap.put("datasource", new JRBeanCollectionDataSource(purchaseOrderList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "PurchaseOrder.pdf");
                    InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SenwanGroupPurchaseOrder.jrxml");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(purchaseOrderList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, purchaseOrderMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accPurchaseOrderControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportFerrateGroupPurchaseOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String POID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                POID = s;

                if (StringUtil.isNullOrEmpty(POID)) {
                    POID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                JSONArray DataJArr = new JSONArray();
                Map<String, Object> purchaseOrderMap = new HashMap<String, Object>();
                String view = "";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                java.util.Locale currentLocale = java.util.Locale.US;
                NumberFormat nf = NumberFormat.getNumberInstance(currentLocale);
                nf.setMinimumFractionDigits(2);
                nf.setMaximumFractionDigits(2);
                nf.setGroupingUsed(true);

                int templateflag = request.getParameter("templateflag") != null ? Integer.parseInt(request.getParameter("templateflag")) : Constants.ferrate_group_templateflag;
                view = templateflag == Constants.pacific_tec_templateflag ? "pacificTecPurchaseOrder" : "ferrateGroupPurchaseOrder";
                SenwanGroupPurchaseOrder purchaseOrder = new SenwanGroupPurchaseOrder();
                ArrayList<SenwanGroupPurchaseOrder> purchaseOrderList = new ArrayList<SenwanGroupPurchaseOrder>();
                ArrayList<SenwanGroupPurchaseOrderSubReport> purchaseOrderSubReportList = new ArrayList<SenwanGroupPurchaseOrderSubReport>();
                ArrayList<FerrateGroupPurchaseOrderSubReport> purchaseOrderSubReportTable1List = new ArrayList<FerrateGroupPurchaseOrderSubReport>();
                ArrayList<PacificTecCustomerQuotationTable2> PacificTecCustomerQuotationTable2List = new ArrayList<PacificTecCustomerQuotationTable2>();
                HashMap<String, SenwanGroupPurchaseOrderSubReport> poSubReportListMap = new HashMap<String, SenwanGroupPurchaseOrderSubReport>();
                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    KWLCurrency currency = null;
//            String POID = request.getParameter("bills");
                    KwlReturnObject poObj1 = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), POID);
                    PurchaseOrder poObj = (PurchaseOrder) poObj1.getEntityList().get(0);
                    currency = poObj.getCurrency();
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    DateFormat df2 = new SimpleDateFormat("dd MMMM yyyy");
                    DecimalFormat senwanTecDecimalFormat = new DecimalFormat("#,###,###,##0.00");
                    Date date = poObj.getOrderDate();
                    purchaseOrder.setDate((df.format(date)));
                    purchaseOrder.setPono(poObj.getPurchaseOrderNumber());

                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Vendor.class.getName(), poObj.getVendor().getID().toString());
                    Vendor vendor = (Vendor) objItr.getEntityList().get(0);
                    purchaseOrder.setName(poObj.getVendor().getName());


//            purchaseOrder.setPhone(vendor.getContactNumber());
                    String vendorAdd = "";
                    String shipToAdd = "";
                    String billToAdd = "";
                    //String vendorAttnContact = vendor.getVendorAddresses() != null ? !StringUtil.isNullOrEmpty(vendor.getVendorAddresses().getBillingContactNumber1()) ? "\nContact Number : "+vendor.getVendorAddresses().getBillingContactNumber1() : "" : "";
                    String vendorAttnContact = "";
                    String billingAttnContact = poObj.getBillingShippingAddresses()!= null ? !StringUtil.isNullOrEmpty(poObj.getBillingShippingAddresses().getBillingContactPersonNumber()) ?"\nContact Number : "+poObj.getBillingShippingAddresses().getBillingContactPersonNumber(): "" : "";
                    String shipingAttnContact = poObj.getBillingShippingAddresses()!= null ? !StringUtil.isNullOrEmpty(poObj.getBillingShippingAddresses().getShippingContactPersonNumber()) ?"\nContact Number : "+poObj.getBillingShippingAddresses().getShippingContactPersonNumber(): "" : "";
                    
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    addressParams.put("vendorid", vendor.getID());
                    if (templateflag == Constants.senwan_tech_templateflag) {
                        vendorAdd = accountingHandlerDAOobj.getVendorAddressForSenwanTec(addressParams);
                        VendorAddressDetails vendrAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                        vendorAttnContact = vendrAddressDetails == null ? "":(StringUtil.isNullOrEmpty(vendrAddressDetails.getContactPerson()) ? "":vendrAddressDetails.getContactPerson());
                        billToAdd = CommonFunctions.getBillingShippingAddressForSenwanTec(poObj.getBillingShippingAddresses(), true);
                        shipToAdd = CommonFunctions.getBillingShippingAddressForSenwanTec(poObj.getBillingShippingAddresses(), false);
                        purchaseOrder.setAttn(StringUtil.isNullOrEmpty(vendrAddressDetails.getContactPerson()) ? "" : vendrAddressDetails.getContactPerson());
                        purchaseOrder.setPhone(StringUtil.isNullOrEmpty(vendrAddressDetails.getPhone()) ? "" : vendrAddressDetails.getPhone());
                        purchaseOrder.setEmail(StringUtil.isNullOrEmpty(vendrAddressDetails.getEmailID()) ? "" : vendrAddressDetails.getEmailID());
                        purchaseOrder.setBillingattn(poObj.getBillingShippingAddresses() != null ? poObj.getBillingShippingAddresses().getBillingContactPerson() != null ? poObj.getBillingShippingAddresses().getBillingContactPerson() : "" : "");
                        purchaseOrder.setBillingphone(poObj.getBillingShippingAddresses() != null ? poObj.getBillingShippingAddresses().getBillingPhone() != null ? poObj.getBillingShippingAddresses().getBillingPhone() : "" : "");
                        purchaseOrder.setBillingemail(poObj.getBillingShippingAddresses() != null ? poObj.getBillingShippingAddresses().getBillingEmail() != null ? poObj.getBillingShippingAddresses().getBillingEmail() : "" : "");
                        purchaseOrder.setShippingattn(poObj.getBillingShippingAddresses() != null ? poObj.getBillingShippingAddresses().getShippingContactPerson() != null ? poObj.getBillingShippingAddresses().getShippingContactPerson() : "" : "");
                        purchaseOrder.setShippingphone(poObj.getBillingShippingAddresses() != null ? poObj.getBillingShippingAddresses().getShippingPhone() != null ? poObj.getBillingShippingAddresses().getShippingPhone() : "" : "");
                        purchaseOrder.setShippingemail(poObj.getBillingShippingAddresses() != null ? poObj.getBillingShippingAddresses().getShippingEmail() != null ? poObj.getBillingShippingAddresses().getShippingEmail() : "" : "");
                    }else {
                        //refer ticket ERP-10777
                        //vendorAdd = accVendorHandler.getVendorAddress(vendor, true);
                        vendorAdd = accountingHandlerDAOobj.getVendorAddress(addressParams);
                        
                        billToAdd = CommonFunctions.getBillingShippingAddress(poObj.getBillingShippingAddresses(), true);
                        shipToAdd = CommonFunctions.getBillingShippingAddress(poObj.getBillingShippingAddresses(), false);
                        vendorAdd = templateflag==Constants.pacific_tec_templateflag?(vendorAdd + vendorAttnContact):vendorAdd;
                        billToAdd = templateflag==Constants.pacific_tec_templateflag?(billToAdd + billingAttnContact):billToAdd;
                        shipToAdd = templateflag==Constants.pacific_tec_templateflag?(shipToAdd + shipingAttnContact):shipToAdd;
                    }

                    purchaseOrder.setAddress(vendorAdd.replaceAll("\n", "<br>"));
                    purchaseOrder.setBillto(StringUtil.isNullOrEmpty(billToAdd) ? poObj.getBillTo() != null ? poObj.getBillTo().replaceAll("\n", "<br>") : "" : billToAdd.replaceAll("\n", "<br>"));
                    purchaseOrder.setShipto(StringUtil.isNullOrEmpty(shipToAdd) ? poObj.getShipTo() != null ? poObj.getShipTo().replaceAll("\n", "<br>") : "" : shipToAdd.replaceAll("\n", "<br>"));

                    String approverName = "";
                    if (poObj.getCreatedby() != null) {
                        approverName = StringUtil.getFullName(poObj.getCreatedby());
                    }
                    HashMap<String, Object> requestParams = accPurchaseOrderServiceDAOobj.getPurchaseOrderMap(request);
                    Iterator itrRow = poObj.getRows().iterator();
                    FerrateGroupPurchaseOrderSubReport fpo = new FerrateGroupPurchaseOrderSubReport();
                    PacificTecCustomerQuotationTable2 pacificTecCustomerQuotationTable2 = new PacificTecCustomerQuotationTable2();
                    double amount = 0, totalDiscount = 0, discountPrice = 0;
                    double rowTaxAmountTotal = 0;
                    int i = 0;
                    java.util.Date entryDate = null;
                    double total = 0;
                    int aq = 0;
                    int q = 0;
                    String quotationNo = "";
                    String prNo = "";
                    Date shipDate = null;
                    while (itrRow.hasNext()) {
                        PurchaseOrderDetail row = (PurchaseOrderDetail) itrRow.next();
                        i++;
                        JSONObject obj = new JSONObject();
                        Product prod = row.getProduct();
                        SenwanGroupPurchaseOrderSubReport po = new SenwanGroupPurchaseOrderSubReport();
                        po.setSno(Integer.toString(i));
                        String prodCode = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                        String prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        po.setCode(prodCode);
                        po.setItemno(prodName);
                        String desc = "";
                        if (StringUtil.isNullOrEmpty(row.getDescription())) {
                            desc = row.getProduct().getDescription() != null ? row.getProduct().getDescription() : "";
                        } else {
                            desc = row.getDescription() != null ? row.getDescription() : "";
                        }
                        po.setCurrencysymbol(currency.getCurrencyCode());
                        int quantity1 = (int) (row.getQuantity());
                        po.setQty(Integer.toString(quantity1));
                        double rate = 0;
                        rate = row.getRate();
                        entryDate = poObj.getOrderDate();
                        String uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                        double quantity = row.getQuantity();
                        q += quantity1;
                        double discountQuotation = (row.getDiscountispercent() == 1) ? rate * quantity * row.getDiscount() / 100 : row.getDiscount();
                        double amount1 = 0;
                        amount1 = authHandler.round(rate * quantity, companyid);
                        if (discountQuotation != 0) {
                            amount1 -= discountQuotation;
                        }
                        if (row.getVqdetail() != null) {
                            VendorQuotationDetail quotation = row.getVqdetail();
                            VendorQuotation vq = quotation.getVendorquotation();
                            quotationNo = vq.getQuotationNumber();
                        }

                        if (templateflag == Constants.senwan_tech_templateflag) {
                            po.setDesc(desc.replaceAll("\n", "<br>"));
                            po.setPrice(senwanTecDecimalFormat.format(rate));
                            po.setLinetotal(senwanTecDecimalFormat.format(amount1));
                        } else if (templateflag == Constants.pacific_tec_templateflag) {
                            po.setDesc(desc.replaceAll("\n", "<br>"));
                            po.setPrice(senwanTecDecimalFormat.format(rate));
                            po.setLinetotal(senwanTecDecimalFormat.format(amount1));
                        } else{
                            po.setDesc(desc);
                            po.setPrice(currency.getSymbol() + " " + nf.format(rate));
                            po.setLinetotal(currency.getSymbol() + " " + nf.format(amount1));
                        }
                        amount += amount1;
                        rowTaxAmountTotal += row.getRowTaxAmount();

                        purchaseOrderSubReportList.add(po);
                        poSubReportListMap.put(POID, po);
                    }
                    purchaseOrderMap.put("PurchaseOrderSubReportData", new JRBeanCollectionDataSource(purchaseOrderSubReportList));

                    fpo.setPono(poObj.getPurchaseOrderNumber());
                    fpo.setDate(df.format(poObj.getOrderDate()));
                    fpo.setQuotationno(quotationNo);
                    fpo.setShippinginfo(poObj.getShipvia() != null ? poObj.getShipvia() : "");
                    fpo.setTerms(poObj.getTerm() != null ? poObj.getTerm().getTermdays() + " Days" : "");
                    fpo.setPrn("");
                    purchaseOrderSubReportTable1List.add(fpo);

                    pacificTecCustomerQuotationTable2.setBillto(poObj.getVendor().getName() + "<br>" + billToAdd.replaceAll("\n", "<br>"));
                    pacificTecCustomerQuotationTable2.setShipto(StringUtil.isNullOrEmpty(shipToAdd) ? poObj.getShipTo() != null ? poObj.getShipTo().replaceAll("\n", "<br>") : "" : shipToAdd.replaceAll("\n", "<br>"));
                    pacificTecCustomerQuotationTable2.setCustomer(poObj.getMasteragent() != null ? poObj.getMasteragent().getValue() : "");
                    pacificTecCustomerQuotationTable2.setValidity(df.format(poObj.getDueDate()));
                    pacificTecCustomerQuotationTable2.setShippingterm(poObj.getShipvia() != null ? poObj.getShipvia() : "");
                    pacificTecCustomerQuotationTable2.setShippingterm(poObj.getFob() != null ? poObj.getFob() : "");
                    pacificTecCustomerQuotationTable2.setTerm(poObj.getTerm() != null ? poObj.getTerm().getTermdays() + " Days" : "");

                    if (poObj.getDiscount() != 0) {
                        if (poObj.isPerDiscount()) {
                            totalDiscount = amount * poObj.getDiscount() / 100;
                            amount = amount - totalDiscount;
                        } else {
                            amount = amount - poObj.getDiscount();
                            totalDiscount = poObj.getDiscount();
                        }
                        //                      obj.put("discounttotal", poObj.getDiscount());
                    } else {
                        //                      obj.put("discounttotal", 0);
                    }
                    double taxPercent = 0;
                    if (poObj.getTax() != null) {
                        requestParams.put("transactiondate", poObj.getOrderDate());
                        requestParams.put("taxid", poObj.getTax().getID());
                        KwlReturnObject result3 = accTaxObj.getTax(requestParams);
                        List taxList = result3.getEntityList();
                        Object[] taxObj = (Object[]) taxList.get(0);
                        taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                    }
                    double orderAmount = amount;
                    double ordertaxamount = (taxPercent == 0 ? 0 : orderAmount * taxPercent / 100);


                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Purchase_Order_ModuleId, 0, 1));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                    QuotationDetail row = null;
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    KwlReturnObject idcustresult = accountingHandlerDAOobj.getObject(PurchaseOrderCustomData.class.getName(), poObj.getID());
                    if (idcustresult.getEntityList().get(0) != null && idcustresult.getEntityList().size() > 0) {
                        PurchaseOrderCustomData jeCustom = (PurchaseOrderCustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
//                        if (customFieldMap.containsKey(varEntry.getKey())) {
//                            FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
//                            if (fieldComboData != null) {
//                                String Label = varEntry.getKey();
//                                String Value = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
//                            }
//                        } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
//                            String Label = varEntry.getKey();
//                            String Value = df.format(Long.parseLong(coldata));
//                        } else {
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                if ((varEntry.getKey().split("_")[1]).equals("Shipping Term")) {
                                    pacificTecCustomerQuotationTable2.setShippingterm(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Customer")) {
                                    pacificTecCustomerQuotationTable2.setCustomer(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Delivery Mode")) {
                                    pacificTecCustomerQuotationTable2.setDomode(coldata);
                                }

                            }
                        }
                    }

                    PacificTecCustomerQuotationTable2List.add(pacificTecCustomerQuotationTable2);
                    if (templateflag == Constants.pacific_tec_templateflag) {
                        purchaseOrderMap.put("PurchaseOrderSubReportData1", new JRBeanCollectionDataSource(PacificTecCustomerQuotationTable2List));
                    } else {
                        purchaseOrderMap.put("PurchaseOrderSubReportData1", new JRBeanCollectionDataSource(purchaseOrderSubReportTable1List));
                    }

                    purchaseOrder.setTotalamount(currency.getSymbol() + " " + nf.format(orderAmount + ordertaxamount + rowTaxAmountTotal));
                    purchaseOrder.setGstpercent("(" + nf.format(taxPercent) + "%)");
                    if (templateflag == Constants.senwan_tech_templateflag) {
                        purchaseOrder.setGst(nf.format(ordertaxamount + rowTaxAmountTotal));
                        purchaseOrder.setSubtotal(nf.format(orderAmount));
                    } else {
                        purchaseOrder.setGst(currency.getSymbol() + " " + nf.format(ordertaxamount + rowTaxAmountTotal));
                        purchaseOrder.setSubtotal(currency.getSymbol() + " " + nf.format(orderAmount));
                    }
                    purchaseOrder.setMemo(poObj.getMemo() != null ? poObj.getMemo().replaceAll("\n", "<br>") : "");
                    purchaseOrder.setCurrencyname(currency.getCurrencyCode());
                    purchaseOrder.setPreparedby(approverName);
                    purchaseOrderList.add(purchaseOrder);
                    String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String header = StorageHandler.GetDocStorePath() + companyid + "_header" + FileUploadHandler.getCompanyImageExt();
                    String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    purchaseOrderMap.put("logo", logo);
                    purchaseOrderMap.put("header", header);
                    purchaseOrderMap.put("footer", footer);
                    purchaseOrderMap.put("format", "pdf");
//            purchaseOrderMap.put("datasource", new JRBeanCollectionDataSource(purchaseOrderList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "PurchaseOrder.pdf");
                    InputStream inputStream = null;
                    if (templateflag == Constants.pacific_tec_templateflag) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PacificTecPurchaseOrder.jrxml");
                    } else if (templateflag == Constants.senwan_tech_templateflag) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SenwanTecPurchaseOrder.jrxml");
                    } else {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/FerrateGroupPurchaseOrder.jrxml");
                    }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(purchaseOrderList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, purchaseOrderMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accPurchaseOrderControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

   @Override
    public List<Object> exportF1RecreationPurchaseOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String POID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                POID = s;

                if (StringUtil.isNullOrEmpty(POID)) {
                    POID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                JSONArray DataJArr = new JSONArray();
                Map<String, Object> purchaseOrderMap = new HashMap<String, Object>();
                String view = "";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                int templateflag = request.getParameter("templateflag") != null ? Integer.parseInt(request.getParameter("templateflag")) : Constants.ferrate_group_templateflag;
                F1RecreationPurchaseOrder purchaseOrder = new F1RecreationPurchaseOrder();
                ArrayList<F1RecreationPurchaseOrder> purchaseOrderList = new ArrayList<F1RecreationPurchaseOrder>();
                ArrayList<F1RecreationPurchaseOrderTable> purchaseOrderSubReportList = new ArrayList<F1RecreationPurchaseOrderTable>();
                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    KWLCurrency currency = null;
                    KwlReturnObject poObj1 = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), POID);
                    PurchaseOrder poObj = (PurchaseOrder) poObj1.getEntityList().get(0);
                    currency = poObj.getCurrency();
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    DecimalFormat senwanTecDecimalFormat = new DecimalFormat("#,###,###,##0.00");
                    Date date = poObj.getOrderDate();
                    purchaseOrder.setDate((df.format(date)));
                    purchaseOrder.setOrderNumber(poObj.getPurchaseOrderNumber());
                    purchaseOrder.setCustname(poObj.getVendor().getName());
                    String billToAdd = CommonFunctions.getBillingShippingAddressForSenwanTec(poObj.getBillingShippingAddresses(), true);
                    purchaseOrder.setAddress(billToAdd.replaceAll("\n", "<br>"));
                    purchaseOrder.setContactPerson(poObj.getBillingShippingAddresses() != null ? poObj.getBillingShippingAddresses().getBillingContactPerson() != null ? poObj.getBillingShippingAddresses().getBillingContactPerson() : "" : "");
                    purchaseOrder.setCustomerTel(poObj.getBillingShippingAddresses() != null ? poObj.getBillingShippingAddresses().getBillingPhone() != null ? poObj.getBillingShippingAddresses().getBillingPhone() : "" : "");
                    purchaseOrder.setCustomerEmail(poObj.getBillingShippingAddresses() != null ? poObj.getBillingShippingAddresses().getBillingEmail() != null ? poObj.getBillingShippingAddresses().getBillingEmail() : "" : "");
                    purchaseOrder.setCustomerFax(poObj.getBillingShippingAddresses() != null ? poObj.getBillingShippingAddresses().getBillingFax() != null ? poObj.getBillingShippingAddresses().getBillingFax() : "" : "");


                    Iterator itrRow = poObj.getRows().iterator();
                    double amount = 0, totalDiscount = 0, discountPrice = 0;
                    double rowTaxAmountTotal = 0;
                    double total = 0;
                    double subTotal = 0;
                    while (itrRow.hasNext()) {
                        PurchaseOrderDetail row = (PurchaseOrderDetail) itrRow.next();
                        F1RecreationPurchaseOrderTable po = new F1RecreationPurchaseOrderTable();
                        String prodCode = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                        String prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        po.setModel(prodCode);
                        String desc = "";
                        if (StringUtil.isNullOrEmpty(row.getDescription())) {
                            desc = row.getProduct().getDescription() != null ? row.getProduct().getDescription() : "";
                        } else {
                            desc = row.getDescription() != null ? row.getDescription() : "";
                        }
                        po.setDesc(desc.replaceAll("\n", "<br>"));
                        po.setCurrency(currency.getCurrencyCode());
                        int quantity1 = (int) (row.getQuantity());
                        po.setQty(authHandler.formattedQuantity(quantity1, companyid));
                        double rate = 0;
                        rate = row.getRate();
                        String uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                        double quantity = row.getQuantity();
                        double discountQuotation = (row.getDiscountispercent() == 1) ? rate * quantity * row.getDiscount() / 100 : row.getDiscount();
                        double amount1 = 0;
                        amount1 = authHandler.round(rate * quantity, companyid);
                        if (discountQuotation != 0) {
                            amount1 -= discountQuotation;
                        }
                        po.setDiscount(authHandler.formattedCommaSeparatedAmount(discountQuotation, companyid));
                        po.setRate(authHandler.formattedCommaSeparatedAmount(rate, companyid));
                        po.setAmount(authHandler.formattedCommaSeparatedAmount(amount1, companyid));
                        if (!StringUtil.isNullOrEmpty(row.getInvlocid())) {
                            KwlReturnObject locres = accountingHandlerDAOobj.getObject(InventoryLocation.class.getName(), row.getInvlocid());
                            InventoryLocation location = (InventoryLocation) locres.getEntityList().get(0);
                            po.setLoc(location.getName() != null ? location.getName() : "");
                        }
                        HashMap<String, String> customFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                        HashMap<String, Object> fieldrequestParams = new HashMap();
                        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Purchase_Order_ModuleId,1));
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        PurchaseOrderDetailsCustomData jeDetailCustom = (PurchaseOrderDetailsCustomData) row.getPoDetailCustomData();
                        AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                        if (jeDetailCustom != null) {
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue() != null ? varEntry.getValue().toString() : "";
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Location")) {
                                            po.setLoc(fieldComboData.getValue() != null ? fieldComboData.getValue() : "");
                                        }
                                    } else if (!StringUtil.isNullOrEmpty(coldata)) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Location")) {
                                            po.setLoc(coldata);
                                        }
                                    }
                                }
                            }
                        }
                        amount += amount1;
                        rowTaxAmountTotal += row.getRowTaxAmount();
                        purchaseOrderSubReportList.add(po);
                    }
                    subTotal=amount;
                    purchaseOrderMap.put("PurchaseOrderTable", new JRBeanCollectionDataSource(purchaseOrderSubReportList));
                    purchaseOrder.setPaymentTerms(poObj.getTerm() != null ? poObj.getTerm().getTermname() : "");

                    if (poObj.getDiscount() != 0) {
                        if (poObj.isPerDiscount()) {
                            totalDiscount = amount * poObj.getDiscount() / 100;
                            amount = amount - totalDiscount;
                        } else {
                            amount = amount - poObj.getDiscount();
                            totalDiscount = poObj.getDiscount();
                        }
                    }
                    double taxPercent = 0;
                    HashMap requestParams = new HashMap();
                    if (poObj.getTax() != null) {
                        requestParams.put("transactiondate", poObj.getOrderDate());
                        requestParams.put("taxid", poObj.getTax().getID());
                        requestParams.put("companyid", companyid);
                        KwlReturnObject result3 = accTaxObj.getTax(requestParams);
                        List taxList = result3.getEntityList();
                        Object[] taxObj = (Object[]) taxList.get(0);
                        taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                    }
                    double orderAmount = amount;
                    double ordertaxamount = (taxPercent == 0 ? 0 : orderAmount * taxPercent / 100);
                    String director="";
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Purchase_Order_ModuleId, 0, 1));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    KwlReturnObject idcustresult = accountingHandlerDAOobj.getObject(PurchaseOrderCustomData.class.getName(), poObj.getID());
                    if (idcustresult.getEntityList().get(0) != null && idcustresult.getEntityList().size() > 0) {
                        PurchaseOrderCustomData jeCustom = (PurchaseOrderCustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        director=fieldComboData.getValue();
                                    }
                                }else if ((varEntry.getKey().split("_")[1]).equals("Shipping Terms")) {
                                    purchaseOrder.setShippingTerms(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Delivery Method")) {
                                    purchaseOrder.setDeliveryMethod(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Facility")) {
                                    purchaseOrder.setFacility(coldata);
                                } 
//                                else if ((varEntry.getKey().split("_")[1]).equals("Director")) {
//                                   purchaseOrderMap.put("Director", coldata);
//                                }
                        }
                    }
                    }

                    purchaseOrder.setTotal(authHandler.formattedCommaSeparatedAmount((orderAmount + ordertaxamount), companyid));
                    purchaseOrder.setRemark(poObj.getMemo() != null ? poObj.getMemo().replaceAll("\n", "<br>") : "");
                     purchaseOrderList.add(purchaseOrder);
                    String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    purchaseOrderMap.put("imagePath1", logo);
                    purchaseOrderMap.put("imagePath2", footer);
                    purchaseOrderMap.put("currency", currency.getCurrencyCode());
                    purchaseOrderMap.put("format", "pdf");
                    purchaseOrderMap.put("subTotal", authHandler.formattedCommaSeparatedAmount(subTotal, companyid));
                    purchaseOrderMap.put("GSTvalue",""+authHandler.formattedCommaSeparatedAmount(ordertaxamount, companyid));
                    purchaseOrderMap.put("GSTpercent","("+taxPercent+"%) ");
                    purchaseOrderMap.put("Director", director);
                    purchaseOrderMap.put("CompanyName",company.getCompanyName()!=null?company.getCompanyName():"");
                    response.setHeader("Content-Disposition", "attachment;filename=" + "PurchaseOrder.pdf");

                    InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationPurchaseOrder.jrxml");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(purchaseOrderList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, purchaseOrderMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accPurchaseOrderControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportDeliveryOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                JSONArray DataJArr = new JSONArray();
                Map<String, Object> deliveryOrderMap = new HashMap<String, Object>();
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));

                DeliveryOrderJasper deliveryOrderJasper = new DeliveryOrderJasper();
                ArrayList<DeliveryOrderJasper> deliveryOrderList = new ArrayList<DeliveryOrderJasper>();
                ArrayList<DeliveryOrderTable1> deliveryOrderTable1List = new ArrayList<DeliveryOrderTable1>();
                ArrayList<DeliveryOrderTable2> deliveryOrderTable2List = new ArrayList<DeliveryOrderTable2>();
                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    String gcurrencyid = (request.getParameter("gcurrencyid") != null) ? request.getParameter("gcurrencyid") : sessionHandlerImpl.getCurrencyID(request);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    String invno = "";
                    Date entryDate = null;
                    String customerEmail = "";
                    String customerName = "";
                    String customerAdd = "";
                    String customerPhone = "";
                    String shipTo = "";
                    String memo = "";
                    String status = "";
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String attn = "";
                    String salesperson = "";
                    String accno = "";
                    String customerfax = "";

                    DeliveryOrder deliveryOrder = null;
                    deliveryOrder = (DeliveryOrder) kwlCommonTablesDAOObj.getClassObject(DeliveryOrder.class.getName(), billid);
                    invno = deliveryOrder.getDeliveryOrderNumber();
                    entryDate = deliveryOrder.getOrderDate();
                    status = deliveryOrder.getStatus() != null ? deliveryOrder.getStatus().getValue() : "";
                    customerName = deliveryOrder.getCustomer().getName() != null ? deliveryOrder.getCustomer().getName() : "";
                    
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", (templateflag==Constants.F1RecreationLeasing_templateflag|| templateflag==Constants.F1Recreation_templateflag)?false:true);    //true to get billing address
                    addressParams.put("customerid", deliveryOrder.getCustomer().getID());
                    CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    if(deliveryOrder.getBillingShippingAddresses()!=null){
                        if(templateflag==Constants.F1RecreationLeasing_templateflag|| templateflag==Constants.F1Recreation_templateflag){
                            attn =  deliveryOrder.getBillingShippingAddresses().getShippingContactPerson()!=null?deliveryOrder.getBillingShippingAddresses().getShippingContactPerson():"";
                            customerPhone = deliveryOrder.getBillingShippingAddresses().getShippingPhone()!=null?deliveryOrder.getBillingShippingAddresses().getShippingPhone() : "";
                            customerEmail =  deliveryOrder.getBillingShippingAddresses().getShippingEmail()!=null?deliveryOrder.getBillingShippingAddresses().getShippingEmail():"";
                            customerfax =  deliveryOrder.getBillingShippingAddresses().getShippingPhone()!=null?deliveryOrder.getBillingShippingAddresses().getShippingFax():"";
                        }else{
                            attn =  deliveryOrder.getBillingShippingAddresses().getBillingContactPerson()!=null?deliveryOrder.getBillingShippingAddresses().getBillingContactPerson():"";
                            customerPhone = deliveryOrder.getBillingShippingAddresses().getBillingPhone()!=null?deliveryOrder.getBillingShippingAddresses().getBillingPhone() : "";
                            customerEmail =  deliveryOrder.getBillingShippingAddresses().getBillingEmail()!=null?deliveryOrder.getBillingShippingAddresses().getBillingEmail():"";
                            customerfax =  deliveryOrder.getBillingShippingAddresses().getBillingPhone()!=null?deliveryOrder.getBillingShippingAddresses().getBillingFax():"";
                        }
                    } else if(customerAddressDetails != null) {
                        attn = StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : customerAddressDetails.getContactPerson();
                        customerPhone = (customerAddressDetails.getPhone() != null ? customerAddressDetails.getPhone() : "");
                        customerEmail = (customerAddressDetails.getEmailID() != null ? customerAddressDetails.getEmailID() : "");
                        customerfax = (customerAddressDetails.getFax() != null ? customerAddressDetails.getFax() : "");                        
                    }
                    
                    if(templateflag==Constants.F1RecreationLeasing_templateflag|| templateflag==Constants.F1Recreation_templateflag){
                        customerAdd = deliveryOrder.getBillingShippingAddresses()!=null?CommonFunctions.getBillingShippingAddressForSenwanTec(deliveryOrder.getBillingShippingAddresses(), false):deliveryOrder.getCustomer() != null ? accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams) : "";
                    }else{
                        customerAdd = deliveryOrder.getBillingShippingAddresses()!=null?CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), true):deliveryOrder.getCustomer() != null ? accountingHandlerDAOobj.getCustomerAddress(addressParams) : "";
                    }
                    accno = deliveryOrder.getCustomer().getAcccode() != null ? deliveryOrder.getCustomer().getAcccode() : " ";
                    addressParams.put("isBillingAddress", false);    //false to get shipping address
                    shipTo = deliveryOrder.getBillingShippingAddresses()!=null?CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), false):deliveryOrder.getCustomer() != null ? accountingHandlerDAOobj.getCustomerAddress(addressParams) : "";
                    memo = deliveryOrder.getMemo() != null ? deliveryOrder.getMemo() : "";
                    shipDate = deliveryOrder.getShipdate();
                    shipvia = deliveryOrder.getShipvia() != null ? deliveryOrder.getShipvia() : "";
                    fob = deliveryOrder.getFob() != null ? deliveryOrder.getFob() : "";
                    salesperson = deliveryOrder.getSalesperson() == null ? "": deliveryOrder.getSalesperson().getValue();
                    String approverName = "";
                    if (deliveryOrder.getCreatedby() != null) {
                        approverName = StringUtil.getFullName(deliveryOrder.getCreatedby());
                    }
                    deliveryOrderJasper.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                    deliveryOrderJasper.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    deliveryOrderJasper.setDate(df.format(entryDate));
                    deliveryOrderJasper.setDonumber(invno);
                    deliveryOrderJasper.setName(customerName);
                    deliveryOrderJasper.setAddress(customerAdd);
                    deliveryOrderJasper.setPhone(customerPhone);
                    deliveryOrderJasper.setShipto(customerName + "<br>" + (shipTo != null ? shipTo.replaceAll("\n", "<br>") : ""));
                    deliveryOrderJasper.setMemo(memo);
                    deliveryOrderJasper.setPreparedby(approverName);
                    deliveryOrderJasper.setEmail(customerEmail);
                    deliveryOrderJasper.setFax(customerfax);
                    deliveryOrderJasper.setSalesperson(salesperson);


                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Delivery_Order_ModuleId, 0, 1));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    KwlReturnObject idcustresult = accountingHandlerDAOobj.getObject(DeliveryOrderCustomData.class.getName(), deliveryOrder.getID());
                    if (idcustresult.getEntityList().get(0) != null && idcustresult.getEntityList().size() > 0) {
                        DeliveryOrderCustomData jeCustom = (DeliveryOrderCustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if (customFieldMap.containsKey(varEntry.getKey()) && (varEntry.getKey().split("_")[1]).equals("Location")) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    deliveryOrderJasper.setCustomfield2(fieldComboData.getValue() != null ? fieldComboData.getValue() : "");
                                }
                            }else if (!StringUtil.isNullOrEmpty(coldata)) {
                                if ((varEntry.getKey().split("_")[1]).equals("ATTN")) {
                                    deliveryOrderJasper.setCustomfield("ATTN : " + coldata);
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("Quotation Ref No")) {
                                    deliveryOrderJasper.setQuoteno(coldata);
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("Purchase Order")) {
                                    deliveryOrderJasper.setReference(coldata);
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("Sales Person")) {
                                    deliveryOrderJasper.setSalesperson(coldata);
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("Invoice Number")) {
                                    deliveryOrderJasper.setInvono(coldata);
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("Source/Type")) {
                                    deliveryOrderJasper.setCustomfield(coldata);
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("Delivery Time")) {
                                    deliveryOrderJasper.setCustomfield1(coldata);
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("Location")) {
                                    deliveryOrderJasper.setCustomfield2(coldata);
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("Delivery Access")) {
                                    deliveryOrderJasper.setCustomfield3(coldata);
                                }
                            }
                        }
                    }


                    DeliveryOrderTable1 deliveryOrderTable1 = new DeliveryOrderTable1();
                    deliveryOrderTable1.setFob(fob);
                    deliveryOrderTable1.setShipdate(shipDate != null ? df.format(shipDate) : "");
                    deliveryOrderTable1.setShipvia(shipvia);
                    deliveryOrderTable1.setStatus(status);
                    deliveryOrderTable1List.add(deliveryOrderTable1);
                    deliveryOrderMap.put("DeliveryOrderSubReportData1", new JRBeanCollectionDataSource(deliveryOrderTable1List));

                    HashMap<String, Object> requestParams = accInvoiceServiceDAO.getDeliveryOrdersMap(request);
                    requestParams.put("billid", billid);
                    request.setAttribute("companyid", companyid);
                    request.setAttribute("gcurrencyid", gcurrencyid);
                    request.setAttribute("billid", billid);
                    requestParams.put("companyid", companyid);
                    requestParams.put("gcurrencyid", gcurrencyid);
                    requestParams.put("CashAndInvoice", true);

                    KwlReturnObject doResult = accInvoiceDAOobj.getDeliveryOrdersMerged(requestParams);
                    
                    JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                    int permCode = sessionHandlerImpl.getPerms(request, Constants.CUSTOMER_PERMCODE);
                    paramJobj.put(Constants.permCode, permCode);
                    DataJArr = accInvoiceServiceDAO.getDeliveryOrdersJsonMerged(paramJobj, doResult.getEntityList());
//                    DataJArr = accInvoiceServiceDAO.getDeliveryOrdersJsonMerged(request, doResult.getEntityList());
                    
                    HashMap fieldMap = new HashMap();
                    boolean isFixedAsset = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isFixedAsset));
                    boolean isConsignment = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isConsignment));
                    boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isLeaseFixedAsset))) ? Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset)) : false;
                    Map reqParam = new HashMap();
                    reqParam.put("companyid", companyid);
                    reqParam.put("isFixedAsset", isFixedAsset);
                    reqParam.put("isConsignment", isConsignment);
                    reqParam.put("isLeaseFixedAsset", isLeaseFixedAsset);
                    fieldMap = accInvoiceServiceDAO.getDODetailsCustomFieldMap(reqParam);
                    
                    JSONObject dOrows = accInvoiceServiceDAO.getDeliveryOrderRows(request,fieldMap);
                    JSONArray DataJArrRows=dOrows.getJSONArray("data");
                    double totalQuantity=0;
                    double totalWeight=0;
                   
                    for (int i = 0; i < DataJArrRows.length(); i++) {
                        JSONObject jobj = DataJArrRows.getJSONObject(i);
                        
                        DeliveryOrderTable2 deliveryOrderTable2 = new DeliveryOrderTable2();
                        String invlinkTo = "-";
                        String tempDoLinkTo = jobj.optInt("linktype", -1) == 1 ? jobj.optString("linkto", "") : "";
                        if (!tempDoLinkTo.equals("")) {
                            invlinkTo=tempDoLinkTo;
                        }

                        deliveryOrderTable2.setSno((i+1)+"");
                        deliveryOrderTable2.setCisono(invlinkTo);
                        deliveryOrderTable2.setProductname(jobj.optString("productname", ""));
                        deliveryOrderTable2.setDesc(jobj.optString("desc", ""));
                        deliveryOrderTable2.setQty(authHandler.formattedQuantity(jobj.optDouble("quantity", 0), companyid) + " " + jobj.optString("unitname", ""));
                        if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                            deliveryOrderTable2.setUom(jobj.optString("unitname", ""));
                            deliveryOrderTable2.setCategory(jobj.optString("pid",""));
                            deliveryOrderTable2.setDelqty(authHandler.formattedQuantity(jobj.optDouble("dquantity", 0), companyid));
                        }else{
                            deliveryOrderTable2.setDelqty(authHandler.formattedQuantity(jobj.optDouble("dquantity", 0), companyid) + " " + jobj.optString("unitname", ""));
                        }
                        deliveryOrderTable2.setOrigin(jobj.optString("Custom_Country of Origin", "")); 
                        deliveryOrderTable2.setDimension(jobj.optString("Custom_Dimension", ""));
                        double weight = jobj.optDouble("Custom_Weight", 0);
                        deliveryOrderTable2.setWeight(authHandler.formattedAmount(weight, companyid)); 
                        totalWeight += weight;
                        totalQuantity+=jobj.optDouble("dquantity", 0);
                        deliveryOrderTable2List.add(deliveryOrderTable2);
                    }
                    
                    if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
//                        deliveryOrderJasper.setInvono(Invref != null ? Invref : "");
                        deliveryOrderJasper.setAccnumber(accno);
                        deliveryOrderJasper.setAttn(attn);
                    }
                    deliveryOrderList.add(deliveryOrderJasper);

                    deliveryOrderMap.put("TOTAL_WEIGHT", authHandler.formattedAmount(totalWeight, companyid));
                    deliveryOrderMap.put("TOTAL_QUANTITY", authHandler.formattedAmount(totalQuantity, companyid));
                    deliveryOrderMap.put("DeliveryOrderSubReportData2", new JRBeanCollectionDataSource(deliveryOrderTable2List));
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    deliveryOrderMap.put("imagePath", fileName1);
                    if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                        String fileName2 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        deliveryOrderMap.put("imagePath2", fileName2);
                    } else {
                        if (templateflag == Constants.sms_templateflag) {
                            deliveryOrderMap.put("footerflag", true);
                        } else {
                            deliveryOrderMap.put("footerflag", false);  //Mayur B- To hide footer logo for SMS holding Company.
                        }
                        deliveryOrderMap.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
                        deliveryOrderMap.put("imagePath3", "http://67.192.230.254/test/sms_chinesename.png");
                    }
                    deliveryOrderMap.put("format", "pdf");
//            deliveryOrderMap.put("datasource", new JRBeanCollectionDataSource(deliveryOrderList));
                    int type = Integer.parseInt(request.getParameter("type"));
                    InputStream inputStream = null;
                    String filename=type==2?"PackingList":"DeliveryOrder";
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "_" + invno +".pdf\"");
                    try {
                        if (templateflag == Constants.F1Recreation_templateflag || templateflag == Constants.F1RecreationLeasing_templateflag) {
                            deliveryOrderMap.put("CompanyName",company.getCompanyName()!=null?company.getCompanyName():"");
                            if(type==2){
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationPackingList.jrxml");
                            }else{
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationDeliveryOrder.jrxml");
                            }

                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DeliveryOrder.jrxml");
                        }
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);

                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(deliveryOrderList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, deliveryOrderMap, beanColDataSource);
                    } catch (Exception e) {
                     Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                } catch (JSONException ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ServiceException ex) {
                    Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;

    }
    
    public List<Object> exportProductCompositionJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                JSONArray DataJArr = new JSONArray();
                Map<String, Object> productCompositionMap = new HashMap<String, Object>();
                String view = "productComposition";
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));
                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    DeliveryOrder deliveryOrder = null;
                    deliveryOrder = (DeliveryOrder) kwlCommonTablesDAOObj.getClassObject(DeliveryOrder.class.getName(), billid);
                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    order_by.add("srno");
                    order_type.add("asc");
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    filter_names.add("deliveryOrder.ID");
                    filter_params.add(deliveryOrder.getID());
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);

                    idresult = accInvoiceDAOobj.getDeliveryOrderDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();
                    while (itr.hasNext()) {
                        JasperPrint jasperPrint = null;
                        JasperReport jasperReport = null;
                        ProductCompositionJasper productComposition = new ProductCompositionJasper();
                        ArrayList<ProductCompositionJasper> productCompositionList = new ArrayList<ProductCompositionJasper>();
                        ArrayList<ProductCompositionJasperTable> productCompositionTableList = new ArrayList<ProductCompositionJasperTable>();
                        String prodName = "";
                        String productdosaqeform = "";
                        String directionofuse = "";
                        String nameofperson = "";
                        String contctno = "";
                        String companyname="";

                        DeliveryOrderDetail row = (DeliveryOrderDetail) itr.next();
                        prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        HashMap<String, Object> fieldrequestParams = new HashMap();
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, 0));
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
                        AccProductCustomData obj = (AccProductCustomData) kwlCommonTablesDAOObj.getClassObject(AccProductCustomData.class.getName(), row.getProduct().getID());
                        if (obj != null) {
                            productHandler.setCustomColumnValuesForProduct(obj, FieldMap, replaceFieldMap, variableMap);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Product Dosage Form")) {
                                        productdosaqeform = coldata;
                                    }
                                    if ((varEntry.getKey().split("_")[1]).equals("Direction Of Use")) {
                                        directionofuse = coldata;
                                    }
                                }
                            }
                        }
                        companyname=company.getCompanyName();
                        User user=company.getCreator();
                        nameofperson=user.getFullName()==null?"":user.getFullName();
                        contctno=user.getContactNumber()==null?"":user.getContactNumber();
                        
                        HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
                        ArrayList filter_names1 = new ArrayList(), filter_params1 = new ArrayList(), order_by1 = new ArrayList(), order_type1 = new ArrayList();
                        filter_names1.add("product.ID");
                        doRequestParams.put("filter_names", filter_names1);
                        doRequestParams.put("filter_params", filter_params1);
                        filter_params1.clear();
                        filter_params1.add(row.getProduct().getID());
                        KwlReturnObject productCompositionRes = accProductObj.getProductCompositionDetails(doRequestParams);
                        Iterator itr1 = productCompositionRes.getEntityList().iterator();
                        while (itr1.hasNext()) {
                            ProductCompositionJasperTable pcjt=new ProductCompositionJasperTable();
                            ProductComposition pc=(ProductComposition)itr1.next();
                            pcjt.setIngredients(pc.getIngredients());
                            pcjt.setSno(pc.getSrno());
                            pcjt.setStrength(pc.getStrength());
                            productCompositionTableList.add(pcjt);
                        }
                        
                        productComposition.setCompanyname(companyname);
                        productComposition.setContactno(contctno);
                        productComposition.setProductname(prodName);
                        productComposition.setNameofperson(nameofperson);
                        productComposition.setDirectionofuse(directionofuse);
                        productComposition.setProductdosaqeform(productdosaqeform);
                        productCompositionList.add(productComposition);
                        
                        productCompositionMap.put("ProductCompositionData", new JRBeanCollectionDataSource(productCompositionTableList));
                        String fileName1= storageHandlerImpl.GetDocStorePath() + "ProductImages/"+row.getProduct().getID()+".png";
                        productCompositionMap.put("imagePath", fileName1);
                        productCompositionMap.put("format", "pdf");
                        response.setHeader("Content-Disposition", "attachment;filename=" + "ProductComposition.pdf");
                        InputStream inputStream = null;
                        try {
                            if (templateflag == Constants.Arklife_templateflag) {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/ProductComposition.jrxml");
                            }
                            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                            jasperReport = JasperCompileManager.compileReport(jasperDesign);
                            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(productCompositionList);
                            jasperPrint = JasperFillManager.fillReport(jasperReport, productCompositionMap, beanColDataSource);
                        } catch (Exception e) {
                        }
                        list.add(jasperPrint);
                    }
                } catch (ServiceException ex) {
                    Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }
    
    public List<Object> exportInvoicepackingList(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        boolean avoidRecursiveLink = false;
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("avoidRecursiveLink"))) {
                    avoidRecursiveLink = Boolean.FALSE.parseBoolean(request.getParameter("avoidRecursiveLink"));
                }
                JSONArray DataJArr = new JSONArray();
                Map<String, Object> productCompositionMap = new HashMap<String, Object>();
                String view = "packingInvoiceList";
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));
                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    DeliveryOrder deliveryOrder = null;
                    deliveryOrder = (DeliveryOrder) kwlCommonTablesDAOObj.getClassObject(DeliveryOrder.class.getName(), billid);
                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    order_by.add("srno");
                    order_type.add("asc");
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    filter_names.add("deliveryOrder.ID");
                    filter_params.add(deliveryOrder.getID());
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);
                    JasperPrint jasperPrint = null;
                    JasperReport jasperReport = null;
                    PackingInvoiceListJasper packingInvoice = new PackingInvoiceListJasper();
                    ArrayList<PackingInvoiceListJasper> packingInvoiceList = new ArrayList<PackingInvoiceListJasper>();
                    ArrayList<PackingInvoiceListJasperTable> packingInvoiceTableList = new ArrayList<PackingInvoiceListJasperTable>();
                    String nameofperson = "";
                    String contctno = "";
                    String companyname = "";
                    companyname = company.getCompanyName();
                    User user = company.getCreator();
                    nameofperson = user.getFullName()==null ? "" : user.getFullName() + "<br>" + user.getAddress();
                    contctno = user.getContactNumber()==null ? "" : user.getContactNumber();

                    idresult = accInvoiceDAOobj.getDeliveryOrderDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();
                    double totalqty=0;
                    int cnt=0;
                    while (itr.hasNext()) {
                        String carton = "";
                        DeliveryOrderDetail row = (DeliveryOrderDetail) itr.next();
                        HashMap<String, Object> fieldrequestParams = new HashMap();
                        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                        fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Delivery_Order_ModuleId, 1));
                        HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
                        HashMap<String, String> customFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                        HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        DeliveryOrderDetailCustomData deliveryOrderDetailCustomData = (DeliveryOrderDetailCustomData) row.getDeliveryOrderDetailCustomData();
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                        AccountingManager.setCustomColumnValues(deliveryOrderDetailCustomData, fieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            String valueForReport = "";
                            if (customFieldMap.containsKey(varEntry.getKey()) && coldata != null) {

                                String[] valueData = coldata.split(",");
                                for (String value : valueData) {
                                    FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), value);
                                    if (fieldComboData != null) {
                                        valueForReport += fieldComboData.getValue() + ",";
                                    }
                                }
                                if (valueForReport.length() > 1) {
                                    valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                                }
                                if (varEntry.getKey().equals("Custom_CARTON")) {
                                    carton = valueForReport;//fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                }
                            }else {
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                               if (varEntry.getKey().equals("Custom_CARTON")) {
                                    carton = coldata;//fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                }
                            }
                        }
                        }
                        PackingInvoiceListJasperTable piljt = new PackingInvoiceListJasperTable();
                        piljt.setCarton(carton);
                        piljt.setDescription(row.getDescription());
                        piljt.setSno(""+row.getSrno());
                        piljt.setQty(row.getDeliveredQuantity());
                        totalqty+=row.getDeliveredQuantity();
                        piljt.setSku(row.getProduct().getProductid());
                        piljt.setRetailprice(row.getCompany().getCurrency().getSymbol() + " " + row.getRate());
                        packingInvoiceTableList.add(piljt);
                        cnt++;
                    }
                    PackingInvoiceListJasperTable piljt = new PackingInvoiceListJasperTable();
                    piljt.setCarton("");
                    piljt.setQty(totalqty);
                    piljt.setSku("");
                    piljt.setDescription("TOTAL : "+cnt+" CARTONS ONLY.");
                    piljt.setRetailprice(" ");
                    packingInvoiceTableList.add(piljt);
                    packingInvoice.setCompanyname(companyname);
                    packingInvoice.setCompanyadd(company.getAddress());
                    packingInvoice.setCustomer(deliveryOrder.getCustomer().getName() + "<br>" + (deliveryOrder.getCustomer().getBillingAddress() != null ? deliveryOrder.getCustomer().getBillingAddress() : ""));
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    packingInvoice.setDate(df.format(new Date()));
                    String invoiceNumbers = "";
                    Set<DeliveryOrderDetail> doRows = deliveryOrder.getRows();
                    String invoiceno = "";
                    boolean addflag = true;
                    DeliveryOrderDetail tempdodobj = null;
                    if (doRows != null && !doRows.isEmpty()) {
                        for (DeliveryOrderDetail temp : doRows) {
                            tempdodobj = temp;
                            if (invoiceNumbers.equals("")) {
                                if (tempdodobj.getCidetails() != null && tempdodobj.getCidetails().getInvoice() != null) {
                                    invoiceNumbers += tempdodobj.getCidetails().getInvoice().getInvoiceNumber();
                                }
                            } else {
                                if (tempdodobj.getCidetails() != null && tempdodobj.getCidetails().getInvoice() != null) {
                                    if (!invoiceNumbers.contains(tempdodobj.getCidetails().getInvoice().getInvoiceNumber())) {
                                        invoiceNumbers += "," + tempdodobj.getCidetails().getInvoice().getInvoiceNumber();
                                    }
                                }
                            }
                            if (avoidRecursiveLink && temp.getCidetails() != null) {
                                addflag = false;
                            }
                        }
                    }
                    packingInvoice.setInvoiceno(invoiceNumbers);
                    packingInvoice.setUser(nameofperson);
                    packingInvoiceList.add(packingInvoice);

                    productCompositionMap.put("PackingInvoiceListData", new JRBeanCollectionDataSource(packingInvoiceTableList));
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    productCompositionMap.put("imagePath", fileName1);
                    productCompositionMap.put("format", "pdf");
                    response.setHeader("Content-Disposition", "attachment;filename=" + "PackingInvoiceList.pdf");
                    InputStream inputStream = null;
                    try {
                        if (templateflag == Constants.Arklife_templateflag) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PackingInvoiceList.jrxml");
                        }
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(packingInvoiceList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, productCompositionMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                } catch (ServiceException ex) {
                    Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }
    
    @Override
    public List<Object> exportSenwanGroupCustomerQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                List<SenwanGroupCustomerQuotationSubReport> senwanGroupCustomerQuotationSubReportList = new ArrayList<SenwanGroupCustomerQuotationSubReport>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                String customerName = "";
                String customerAdd = "";
                String customerPhone = "";
                String customerEmail = "";
                String attn = "";
                String terms = "";
                String termdays = "";
                String billTo = "";
                String billAddr = "";
                String shipTo = "";
                String memo = "";
                String posttext = "";
                String salesPerson = "";
                String approverName = "";
                String createdBy = "";
                String billtoAddress = "";
                boolean isInclude = false; //Hiding or Showing P.O. NO field in single PDF 
                Iterator itr = null;
                String linkTo = "-";
                double totaltax = 0, discountTotalQuotation = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";
                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                int templateflag = request.getParameter("templateflag") != null ? Integer.parseInt(request.getParameter("templateflag")) : 0;
                int shortQuoteFlag = request.getParameter("shortQuoteFlag") != null ? Integer.parseInt(request.getParameter("shortQuoteFlag")) : 0;
                Map<String, Object> quotationMap = new HashMap<String, Object>();
                String view = templateflag == Constants.senwan_group_templateflag ? "senwanGroupCustomerQuotation" : "pacificTecCustomerQuotation";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                SenwanGroupCustomerQuotation senwanGroupCustomerQuotation = new SenwanGroupCustomerQuotation();
                ArrayList<SenwanGroupCustomerQuotation> senwanGroupCustomerQuotationList = new ArrayList<SenwanGroupCustomerQuotation>();
                ArrayList<PacificTecCustomerQuotationTable2> pacificTecCustomerQuotationList = new ArrayList<PacificTecCustomerQuotationTable2>();
                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df = (DateFormat) requestParamsCustom.get("df");
                    DateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");

                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Customer_Quotation_ModuleId, 0, 1));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);


//            String billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    String gstNo = "";
                    boolean addShipTo = true;
                    Company com = null;
                    Account cEntry = null;
                    String invno = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String uem = "";
                    String shippingTerms = "";
                    double amount = 0;
                    double subtotal = 0;
                    double gst = 0;
                    double totalDiscount = 0;
                    double amountinbase = 0;
                    double ordertaxamount = 0;
                    double rowTaxAmountTotal = 0;
                    double orderAmount = 0;
                    DecimalFormat decimalFormat = new DecimalFormat("0.00");
                    DecimalFormat senwanTecDecimalFormat = new DecimalFormat("#,###,###,##0.00");
                    DecimalFormat quantityFormat = new DecimalFormat("0");
                    KWLCurrency currency = null;
                    if (mode == StaticValues.AUTONUM_QUOTATION) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Quotation.class.getName(), billid);
                        Quotation inv = (Quotation) cap.getEntityList().get(0);
                        String currencyid = "";
                        if (inv.getCreatedby() != null) {
                            approverName = StringUtil.getFullName(inv.getCreatedby());
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        addShipTo = true;
                        com = inv.getCompany();
                        cEntry = inv.getCustomer().getAccount();
                        invno = inv.getquotationNumber();
                        entryDate = inv.getQuotationDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipdate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();
                        shippingTerms = inv.getShippingTerm()==null?"":inv.getShippingTerm();
 
                        filter_names.add("quotation.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accInvoiceDAOobj.getQuotationDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? inv.getCustomer().getAccount().getName() : inv.getCustomer().getName();

                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("customerid", inv.getCustomer().getID());
                        CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                        if (customerAddressDetails != null) {
                            attn = StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : customerAddressDetails.getContactPerson();
                            customerPhone = (customerAddressDetails.getPhone() != null ? customerAddressDetails.getPhone() : "");
                            customerEmail = (customerAddressDetails.getEmailID() != null ? customerAddressDetails.getEmailID() : "");
                        }
                        
                        String billtoAttnContact = inv.getBillingShippingAddresses() != null ? !StringUtil.isNullOrEmpty(inv.getBillingShippingAddresses().getBillingContactPersonNumber()) ? "\nContact Number : "+inv.getBillingShippingAddresses().getBillingContactPersonNumber() : "" : "";
                        String shiptoAttnContact = inv.getBillingShippingAddresses() != null ? !StringUtil.isNullOrEmpty(inv.getBillingShippingAddresses().getShippingContactPersonNumber()) ? "\nContact Number : "+inv.getBillingShippingAddresses().getShippingContactPersonNumber() : "" : "";
                        if (templateflag == Constants.senwan_tech_templateflag) {
                            customerAdd = accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams);
                            billAddr = CommonFunctions.getBillingShippingAddressForSenwanTec(inv.getBillingShippingAddresses(), true);
                        } else {
                            customerAdd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                            billAddr = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), true);
                            billAddr = templateflag==Constants.pacific_tec_templateflag?(billAddr + billtoAttnContact):billAddr;
                        }
                        uem = inv.getCustomer() != null ? (inv.getCustomer().getAltContactNumber() != null ? inv.getCustomer().getAltContactNumber() : "") : "";
                        gstNo = inv.getCustomer() != null ? inv.getCustomer().getOther() : "";
                        billTo = "Bill To";
                        isInclude = false;
                        if (inv.getSalesperson() != null) {   //if User Class returns the Null Valu
                            salesPerson = inv.getSalesperson() != null ? inv.getSalesperson().getValue() : "";
                        } else {  //if salesperson class has no username
                            salesPerson = "";
                        }
                        Calendar stDate = Calendar.getInstance();
                        stDate.setTime(entryDate);
                        Calendar enDate = Calendar.getInstance();
                        enDate.setTime(dueDate);
                        int numberOfDays = 0;
                        while (stDate.before(enDate)) {
                            numberOfDays++;
                            stDate.add(Calendar.DATE, 1);
                        }
                        HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
                        requestParams1.put("companyid", sessionHandlerImpl.getCompanyid(request));
                        requestParams1.put("cash_Invoice", "cash_Invoice");
                        KwlReturnObject result1 = accTermObj.getTerm(requestParams1);
                        List list1 = result1.getEntityList();
                        Iterator itr1 = list1.iterator();
                        while (itr1.hasNext()) {
                            Term ct = (Term) itr1.next();
                            if (ct.getTermdays() == numberOfDays) {
                                terms = ct.getTermname();
                                break;
                            }
                        }
                        termdays = inv.getCustomer() != null ? inv.getCustomer().getCreditTerm().getTermdays() + " Days" : "";
                        shipTo = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);
                        shipTo = templateflag==Constants.pacific_tec_templateflag?(shipTo + shiptoAttnContact):shipTo;

                        PacificTecCustomerQuotationTable2 pacificTecCustomerQuotationTable2 = new PacificTecCustomerQuotationTable2();
                        pacificTecCustomerQuotationTable2.setBillto(customerName + "<br>" + (billAddr != null ? billAddr.replaceAll("\n", "<br>") : ""));
                        pacificTecCustomerQuotationTable2.setShipto(shipTo != null ? shipTo.replaceAll("\n", "<br>") : "");
                        pacificTecCustomerQuotationTable2.setNo(invno);
                        pacificTecCustomerQuotationTable2.setValidity(df1.format(dueDate));
                        pacificTecCustomerQuotationTable2.setTerm(terms);
                        pacificTecCustomerQuotationTable2.setLoadtime(shipvia != null ? shipvia : "");
                        pacificTecCustomerQuotationTable2.setDomode(fob != null ? fob : "");
                        pacificTecCustomerQuotationTable2.setShippingterm(shippingTerms);

                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo() != null ? inv.getMemo() : "";
                        posttext = inv.getPostText() != null ? inv.getPostText() : "";
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        QuotationDetail row = null;
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        KwlReturnObject idcustresult = accountingHandlerDAOobj.getObject(QuotationCustomData.class.getName(), inv.getID());
                        if (idcustresult.getEntityList().get(0) != null && idcustresult.getEntityList().size() > 0) {
                            QuotationCustomData jeCustom = (QuotationCustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
//                        if (customFieldMap.containsKey(varEntry.getKey())) {
//                            FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
//                            if (fieldComboData != null) {
//                                String Label = varEntry.getKey();
//                                String Value = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
//                            }
//                        } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
//                            String Label = varEntry.getKey();
//                            String Value = df.format(Long.parseLong(coldata));
//                        } else {
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Shipping Term")) {
                                        senwanGroupCustomerQuotation.setShippingterms(coldata);
                                        pacificTecCustomerQuotationTable2.setShippingterm(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Shipping Method")) {
                                        senwanGroupCustomerQuotation.setShippingmethod(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Delivery Date")) {
                                        senwanGroupCustomerQuotation.setDeliverydate(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Lead Time")) {
                                        pacificTecCustomerQuotationTable2.setLoadtime(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Delivery Mode")) {
                                        pacificTecCustomerQuotationTable2.setDomode(coldata);
                                    }

                                }
                            }
                        }
//                }
                        pacificTecCustomerQuotationList.add(pacificTecCustomerQuotationTable2);
                        int i = 0;
                        while (itr.hasNext()) {
                            i++;
                            SenwanGroupCustomerQuotationSubReport senwanGroupCustomerQuotationSubReport = new SenwanGroupCustomerQuotationSubReport();
                            String prodName = "";
                            String prodDesc = "";
                            String partNo = "";
                            Phrase phrase1 = new Phrase();
                            Phrase phrase2 = new Phrase();
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, baseUomQuantity = 0;
                            double rate = 0;
                            double discount = 0;
                            String uom = "";
                            double amount1 = 0;
                            row = (QuotationDetail) itr.next();
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc = row.getDescription();
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                    prodDesc = row.getProduct().getDescription();
                                }
                            }
                            String prodCode = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                            prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                            quantity = row.getQuantity();
                            baseUomQuantity = row.getBaseuomquantity();

                            rate = row.getRate();
                            discount = row.getDiscount();
                            uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();

                            double quotationPrice = authHandler.round(rate * quantity, companyid);
                            if (row.getDiscountispercent() == 1) {
                                amount1 = (quotationPrice) - (quotationPrice * row.getDiscount() / 100);
                            } else {
                                amount1 = quotationPrice - row.getDiscount();
                            }

                            senwanGroupCustomerQuotationSubReport.setDesc(prodDesc.replaceAll("\n", "<br>"));
                            senwanGroupCustomerQuotationSubReport.setCode(prodCode);
                            senwanGroupCustomerQuotationSubReport.setItemno(prodName);
                            senwanGroupCustomerQuotationSubReport.setSno(Integer.toString(i));
                            if (templateflag == Constants.pacific_tec_templateflag) {
                                senwanGroupCustomerQuotationSubReport.setQty(quantityFormat.format(quantity));
                                senwanGroupCustomerQuotationSubReport.setCurrencysymbol(currency.getCurrencyCode() != null ? currency.getCurrencyCode() : "");
                                senwanGroupCustomerQuotationSubReport.setPrice(senwanTecDecimalFormat.format(rate));
                                senwanGroupCustomerQuotationSubReport.setLinetotal(senwanTecDecimalFormat.format(amount1));
                            } else {
                                senwanGroupCustomerQuotationSubReport.setQty(decimalFormat.format(quantity));
                                if (templateflag == Constants.senwan_tech_templateflag) {
                                    senwanGroupCustomerQuotationSubReport.setPrice(senwanTecDecimalFormat.format(rate));
                                    senwanGroupCustomerQuotationSubReport.setLinetotal(senwanTecDecimalFormat.format(amount1));
                                    senwanGroupCustomerQuotationSubReport.setCurrencysymbol(currency.getCurrencyCode() != null ? currency.getCurrencyCode() : "");
                                } else {
                                    senwanGroupCustomerQuotationSubReport.setCurrencysymbol(currency.getSymbol() != null ? currency.getSymbol() : "");
                                    senwanGroupCustomerQuotationSubReport.setPrice(decimalFormat.format(rate));
                                    senwanGroupCustomerQuotationSubReport.setLinetotal(decimalFormat.format(amount1));
                                }
                            }
                            senwanGroupCustomerQuotationSubReportList.add(senwanGroupCustomerQuotationSubReport);
                            amount += amount1;
                            rowTaxAmountTotal += row.getRowTaxAmount();
                        }
                        if (inv.getDiscount() != 0) {
                            if (inv.isPerDiscount()) {
                                totalDiscount = amount * inv.getDiscount() / 100;
                                amount = amount - totalDiscount;
                            } else {
                                amount = amount - inv.getDiscount();
                                totalDiscount = inv.getDiscount();
                            }
                        }
                        double totalTermAmount = 0;

                        HashMap<String, Object> requestParam = new HashMap();
                        requestParam.put("quotation", inv.getID());
                        KwlReturnObject quotationResult = null;
                        quotationResult = accSalesOrderDAOobj.getQuotationTermMap(requestParam);
                        List<QuotationTermMap> termMap = quotationResult.getEntityList();
                        for (QuotationTermMap quotationTermMap : termMap) {
                            InvoiceTermsSales mt = quotationTermMap.getTerm();
                            double termAmnt = quotationTermMap.getTermamount();
                            totalTermAmount += termAmnt;
                        }

                        if (inv.getTax() != null) {
                            requestParams.put("transactiondate", inv.getQuotationDate());
                            requestParams.put("taxid", inv.getTax().getID());
                            requestParams.put("companyid", companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            Object[] taxObj = (Object[]) taxList.get(0);
                            taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];

                        }
                        orderAmount = amount;//(Double) bAmt.getEntityList().get(0);
                        ordertaxamount = (taxPercent == 0 ? 0 : orderAmount * taxPercent / 100);
                        orderAmount += totalTermAmount;
                    }

                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    senwanGroupCustomerQuotation.setName(customerName);
                    senwanGroupCustomerQuotation.setAddress(customerAdd.replaceAll("\n", "<br>"));
                    senwanGroupCustomerQuotation.setDate(df1.format(new Date(df.format(entryDate))));
                    senwanGroupCustomerQuotation.setSalesperson(salesPerson);
                    senwanGroupCustomerQuotation.setPreparedby(approverName);
                    senwanGroupCustomerQuotation.setPaymentterms(termdays);

                    if (templateflag == Constants.pacific_tec_templateflag) {
                        senwanGroupCustomerQuotation.setRemark(memo.replaceAll("\n", "<br>"));
                        senwanGroupCustomerQuotation.setSubtotal(currency.getSymbol() + " " + senwanTecDecimalFormat.format(orderAmount));
                        senwanGroupCustomerQuotation.setGst(currency.getSymbol() + " " + senwanTecDecimalFormat.format(ordertaxamount + rowTaxAmountTotal));
                        senwanGroupCustomerQuotation.setTotalamount(currency.getSymbol() + " " + senwanTecDecimalFormat.format(orderAmount + ordertaxamount + rowTaxAmountTotal));
                    } else if (templateflag == Constants.senwan_tech_templateflag) {
                        senwanGroupCustomerQuotation.setRemark(posttext.replaceAll("\n", "<br>"));
                        senwanGroupCustomerQuotation.setSubtotal(senwanTecDecimalFormat.format(orderAmount));
                        senwanGroupCustomerQuotation.setGst(senwanTecDecimalFormat.format(ordertaxamount + rowTaxAmountTotal));
                        senwanGroupCustomerQuotation.setTotalamount(currency.getSymbol() + " " + senwanTecDecimalFormat.format(orderAmount + ordertaxamount + rowTaxAmountTotal));
                    } else {
                        senwanGroupCustomerQuotation.setRemark(memo.replaceAll("\n", "<br>"));
                        senwanGroupCustomerQuotation.setSubtotal(decimalFormat.format(orderAmount));
                        senwanGroupCustomerQuotation.setGst(decimalFormat.format(ordertaxamount + rowTaxAmountTotal));
                        senwanGroupCustomerQuotation.setTotalamount(decimalFormat.format(orderAmount + ordertaxamount + rowTaxAmountTotal));
                    }
                    senwanGroupCustomerQuotation.setGstpercent(taxPercent != 0 ? "(" + decimalFormat.format(taxPercent) + "%)" : "");
                    senwanGroupCustomerQuotation.setCurrencyname(currency != null ? currency.getCurrencyCode() : "");

                    senwanGroupCustomerQuotation.setDuedate(termdays);
                    senwanGroupCustomerQuotation.setNo(invno);
                    senwanGroupCustomerQuotation.setPhone(customerPhone);
                    senwanGroupCustomerQuotation.setEmail(customerEmail);
                    senwanGroupCustomerQuotation.setAttn(attn);
                    senwanGroupCustomerQuotationList.add(senwanGroupCustomerQuotation);
                    quotationMap.put("SenwanGroupCustomerQuotationData", new JRBeanCollectionDataSource(senwanGroupCustomerQuotationSubReportList));
                    if (templateflag == Constants.pacific_tec_templateflag) {
                        quotationMap.put("PacificTecCustomerQuotationTable", new JRBeanCollectionDataSource(pacificTecCustomerQuotationList));
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        quotationMap.put("logo", logo);
                        quotationMap.put("footer", footer);
                    } else {
                        String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        quotationMap.put("imagePath", fileName1);
                    }
                    quotationMap.put("format", "pdf");
//            quotationMap.put("datasource", new JRBeanCollectionDataSource(senwanGroupCustomerQuotationList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "Quotation.pdf");
                    InputStream inputStream = null;
                    if (templateflag == Constants.pacific_tec_templateflag) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PacificTecCustomerQuotation.jrxml");
                    } else if (templateflag == Constants.senwan_tech_templateflag) {
                        if (shortQuoteFlag == Constants.senwan_tech_short_quotation_flag) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SenwanTecCustomerQuotationShort.jrxml");
                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SenwanTecCustomerQuotation.jrxml");
                        }
                    } else {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SenwanGroupCustomerQuotation.jrxml");
                    }

                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(senwanGroupCustomerQuotationList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, quotationMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportVHQCustomerQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                Map<String, Object> quotationMap = new HashMap<String, Object>();
                List<VHQquotation> qList = new ArrayList<VHQquotation>();
                List<VHQquotationTable2> qt2List = new ArrayList<VHQquotationTable2>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                String customerName = "";
                String customerAdd = "";
                String customerEmail = "";
                String terms = "";
                String termdays = "";
                String billTo = "";
                String billAddr = "";
                String shipTo = "";
                String memo = "";
                String salesPerson = "";
                String approverName = "";
                String createdBy = "";
                String billtoAddress = "";
                boolean isInclude = false; //Hiding or Showing P.O. NO field in single PDF 
                Iterator itr = null;
                String linkTo = "-";
                double totaltax = 0, discountTotalQuotation = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";
                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;

                String view = "VHQCustomerQuotation";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df = (DateFormat) requestParamsCustom.get("df");
                    DateFormat df1 = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");

                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Customer_Quotation_ModuleId, 0, 1));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);


//            String billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    String gstNo = "";
                    boolean addShipTo = true;
                    Company com = null;
                    Account cEntry = null;
                    String invno = "";
                    String entryDate = null;
                    Date entryDateObj = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String uem = "";
                    double amount = 0;
                    double subtotal = 0;
                    double gst = 0;
                    double totalDiscount = 0;
                    double amountinbase = 0;
                    double ordertaxamount = 0;
                    double rowTaxAmountTotal = 0;
                    double orderAmount = 0;
                    DecimalFormat decimalFormat = new DecimalFormat("0.00");
                    KWLCurrency currency = null;
                    VHQquotation quotation = new VHQquotation();
                    if (mode == StaticValues.AUTONUM_QUOTATION) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Quotation.class.getName(), billid);
                        Quotation inv = (Quotation) cap.getEntityList().get(0);
                        String currencyid = "";
                        if (inv.getCreatedby() != null) {
                            approverName = StringUtil.getFullName(inv.getCreatedby());
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        addShipTo = true;
                        com = inv.getCompany();
                        cEntry = inv.getCustomer().getAccount();
                        invno = inv.getquotationNumber();
                        entryDate = authHandler.getDateOnlyFormat(request).format(inv.getQuotationDate());
                        entryDateObj = inv.getQuotationDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipdate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();

                        filter_names.add("quotation.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accInvoiceDAOobj.getQuotationDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? inv.getCustomer().getAccount().getName() : inv.getCustomer().getName();
                        
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                        addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true); //true to get billing address
                        addressParams.put("customerid", inv.getCustomer().getID());
                        customerAdd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        
                        billAddr = inv.getBillTo() != null ? inv.getBillTo() : "";
                        customerEmail = inv.getCustomer() != null ? inv.getCustomer().getEmail() : "";
                        uem = inv.getCustomer() != null ? (inv.getCustomer().getAltContactNumber() != null ? inv.getCustomer().getAltContactNumber() : "") : "";
                        gstNo = inv.getCustomer() != null ? inv.getCustomer().getOther() : "";
                        billTo = "Bill To";
                        isInclude = false;
                        if (inv.getSalesperson() != null) {   //if User Class returns the Null Valu
                            salesPerson = inv.getSalesperson() != null ? inv.getSalesperson().getValue() : "";
                        } else {  //if salesperson class has no username
                            salesPerson = "";
                        }
                        terms = inv.getCustomer() != null ? inv.getCustomer().getCreditTerm().getTermname() : "";
                        Calendar dt1 = Calendar.getInstance();
                        dt1.setTime(inv.getQuotationDate());
                        Calendar dt2 = Calendar.getInstance();
                        dt2.setTime(inv.getDueDate());
                        dt2.set(Calendar.YEAR, dt1.get(Calendar.YEAR));
                        int withDAY = dt1.get(Calendar.DAY_OF_YEAR);
                        int toDAY = dt2.get(Calendar.DAY_OF_YEAR);
                        int days = toDAY - withDAY;
                        termdays = days + " Days";
                        shipTo = inv.getShipTo();

                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo();
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        QuotationDetail row = null;
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        KwlReturnObject idcustresult = accountingHandlerDAOobj.getObject(QuotationCustomData.class.getName(), inv.getID());
                        if (idcustresult.getEntityList().get(0) != null && idcustresult.getEntityList().size() > 0) {
                            QuotationCustomData jeCustom = (QuotationCustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
//                        if (customFieldMap.containsKey(varEntry.getKey())) {
//                            FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
//                            if (fieldComboData != null) {
//                                String Label = varEntry.getKey();
//                                String Value = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
//                            }
//                        } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
//                            String Label = varEntry.getKey();
//                            String Value = df.format(Long.parseLong(coldata));
//                        } else {
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Product")) {
                                        quotation.setProduct(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Title")) {
                                        quotation.setTitle(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Duration")) {
                                        quotation.setDuration(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Format")) {
                                        quotation.setFormat(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Job Number")) {
                                        quotation.setJobno(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Languages")) {
                                        quotation.setLanguage(coldata);
                                    }

                                }
                            }
                        }
//                }

                        int i = 0;
                        while (itr.hasNext()) {
                            i++;
                            VHQquotationTable2 qrow = new VHQquotationTable2();
                            String prodName = "";
                            String prodDesc = "";
                            String partNo = "";
                            Phrase phrase1 = new Phrase();
                            Phrase phrase2 = new Phrase();
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, baseUomQuantity = 0;
                            double rate = 0;
                            double discount = 0;
                            String uom = "";
                            double amount1 = 0;
                            row = (QuotationDetail) itr.next();
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc = row.getDescription();
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                    prodDesc = row.getProduct().getDescription();
                                }
                            }
                            prodName = row.getProduct().getName();
                            quantity = row.getQuantity();
                            baseUomQuantity = row.getBaseuomquantity();

                            rate = row.getRate();
                            discount = row.getDiscount();
                            uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();

                            double quotationPrice = authHandler.round(rate * quantity, companyid);
                            if (row.getDiscountispercent() == 1) {
                                amount1 = (quotationPrice) - (quotationPrice * row.getDiscount() / 100);
                            } else {
                                amount1 = quotationPrice - row.getDiscount();
                            }

                            String parent = "NA";
                            String child = "NA";
                            MasterItem masterItemCategory = accProductObj.getProductsMasterItem(companyid, row.getProduct().getID());
                            if (masterItemCategory != null && masterItemCategory.getParent() != null) {
                                parent = masterItemCategory.getParent().getValue();
                                child = masterItemCategory.getValue();
                            } else if (masterItemCategory != null && masterItemCategory.getParent() == null) {
                                parent = masterItemCategory.getValue();
                            }

                            qrow.setName(prodName);
                            qrow.setDesc(prodDesc);
                            qrow.setUnit(decimalFormat.format(rate) + " " + uom);
                            qrow.setQuantity(decimalFormat.format(quantity));
                            qrow.setAmount(amount1);
                            qrow.setCategory(parent);
                            qrow.setSubcategory(child);
                            qt2List.add(qrow);

                            amount += amount1;
                            rowTaxAmountTotal += row.getRowTaxAmount();
                        }

                        Collections.sort(qt2List, new OrderByComparator());
                        quotationMap.put("QuotationTable2Data", new JRBeanCollectionDataSource(qt2List));

                        if (inv.getDiscount() != 0) {
                            if (inv.isPerDiscount()) {
                                totalDiscount = amount * inv.getDiscount() / 100;
                                amount = amount - totalDiscount;
                            } else {
                                amount = amount - inv.getDiscount();
                                totalDiscount = inv.getDiscount();
                            }
                        }
                        double totalTermAmount = 0;

                        HashMap<String, Object> requestParam = new HashMap();
                        requestParam.put("quotation", inv.getID());
                        KwlReturnObject quotationResult = null;
                        quotationResult = accSalesOrderDAOobj.getQuotationTermMap(requestParam);
                        List<QuotationTermMap> termMap = quotationResult.getEntityList();
                        for (QuotationTermMap quotationTermMap : termMap) {
                            InvoiceTermsSales mt = quotationTermMap.getTerm();
                            double termAmnt = quotationTermMap.getTermamount();
                            totalTermAmount += termAmnt;
                        }

                        if (inv.getTax() != null) {
                            requestParams.put("transactiondate", inv.getQuotationDate());
                            requestParams.put("taxid", inv.getTax().getID());
                            requestParams.put("companyid", companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            Object[] taxObj = (Object[]) taxList.get(0);
                            taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];

                        }
                        orderAmount = amount;//(Double) bAmt.getEntityList().get(0);
                        ordertaxamount = (taxPercent == 0 ? 0 : orderAmount * taxPercent / 100);
                        orderAmount += totalTermAmount;
                    }

                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    quotation.setClient(customerName);
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(entryDateObj);
                    String formatedDate = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" + cal.get(Calendar.DATE);
                    quotation.setDate(formatedDate);
                    quotation.setPreparedby(approverName);
                    quotation.setJobdesc(memo);
                    quotation.setContact(salesPerson);
//            senwanGroupCustomerQuotation.setSubtotal(decimalFormat.format(orderAmount));
//            senwanGroupCustomerQuotation.setGst(decimalFormat.format(ordertaxamount+rowTaxAmountTotal));
//            senwanGroupCustomerQuotation.setTotalamount(decimalFormat.format(orderAmount + ordertaxamount+rowTaxAmountTotal));
//            senwanGroupCustomerQuotation.setDuedate(termdays);
                    qList.add(quotation);
                    quotationMap.put("format", "pdf");
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    quotationMap.put("logo", fileName1);
//            quotationMap.put("datasource", new JRBeanCollectionDataSource(qList));

                    response.setHeader("Content-Disposition", "attachment;filename=" + "Quotation.pdf");
                    InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/VHQQuotation.jrxml");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(qList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, quotationMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportSalesContractreport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportGuanChongProformaInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportGCBDebittNoteJasperReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportDefaultPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
   
    @Override
    public List<Object> exportDefaultPaymentVoucher(JSONObject jsonObj) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
     
    @Override
    public List<Object> exportDiamondAviationCustomerInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportDiamondAviationPuchaseOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportCustomerInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportDeliveryOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportVendorQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
  @Override
    public List<Object> exportARKCustomerInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportGoodsReceiptOrderJasperReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException,ParseException, JSONException{
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportSBICustomerQoutationJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
 @Override
    public List<Object> exportSBISalesOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportMonzonePuchaseOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public List<Object> exportMonzoneTaxInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportMonzoneCustomerQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportKimCheyInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportKimCheyDeliveryOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportMonzoneDeliveryOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportDiamondAviationPartsReceiptNote(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, JSONException, SessionExpiredException, ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportDeliveryOrderForFasten(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportCustomerInvoiceForFasten(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportCustomerQuotationForFasten(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public List<Object> exportCustomerQuotationForTonyFibreGlass(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void exportDeliveryOrderXls(HttpServletRequest request, HttpServletResponse response, JSONArray tempArray) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportRightSpaceCustomerQuoteAndInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportDefaultFormatCreditNoteJasperReportForTonyFibreGlass(HttpServletRequest request, HttpServletResponse response, String billid) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<Object> exportDefaultFormatDebitNoteJasperReportForTonyFibreGlass(HttpServletRequest request, HttpServletResponse response, String billid) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<Object> exportChallanNo281Report(HttpServletRequest request, HttpServletResponse response,Map<String, Object> requiredData) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> challan281map = new HashMap<String, Object>();
        try {
            String tdsamount="";
            if(requiredData.containsKey("tdsamount")){
                tdsamount=(String) requiredData.get("tdsamount");
            }
            int tdsamountCnt = 1;
            char[] tdsamountArray=tdsamount.toCharArray();
            for (; tdsamountCnt <= tdsamountArray.length; tdsamountCnt++) {
                challan281map.put("tdsamount" + tdsamountCnt, tdsamountArray[tdsamountCnt - 1] + "");
            }
            for (int j = tdsamountCnt; j <= 12; j++) {
                challan281map.put("tdsamount" + j, " ");
            }
            
            String code="";
            if(requiredData.containsKey("code")){
                code=(String) requiredData.get("code");
            }
            int codeCnt = 1;
            char[] codeArray=code.toCharArray();
            for (; codeCnt <= codeArray.length; codeCnt++) {
                challan281map.put("code" + codeCnt, codeArray[codeCnt - 1] + "");
            }
            for (int j = codeCnt; j <= 4; j++) {
                challan281map.put("code" + j, " ");
            }
            
            String natureofPayment="";
            if(requiredData.containsKey("natureofpayment")){
                natureofPayment=(String) requiredData.get("natureofpayment");
            }
            challan281map.put("typeofpayment" , natureofPayment);
            
            String TANNo="";
            if(requiredData.containsKey("tanNo")){
                TANNo=(String) requiredData.get("tanNo");
            }
            int charCnt = 1;
            char[] TANNoArray=TANNo.toCharArray();
            for (; charCnt <= TANNoArray.length; charCnt++) {
                challan281map.put("tan" + charCnt, TANNoArray[charCnt - 1] + "");
            }
            for (int j = charCnt; j <= 10; j++) {
                challan281map.put("tan" + j, " ");
            }
            
            String fullName="";
            if(requiredData.containsKey("fullName")){ 
                fullName=(String) requiredData.get("fullName");
            }
            char[] fullNameArray = fullName.toCharArray();
            charCnt = 1;
            for (; charCnt <= fullNameArray.length; charCnt++) {
                challan281map.put("fn" + charCnt, fullNameArray[charCnt - 1] + "");
            }
            for (int j = charCnt; j <= 30; j++) {
                challan281map.put("fn" + j, " ");
            }
            
            String address = "";
            if (requiredData.containsKey("address")) {
                address = (String) requiredData.get("address");
            }
            char[] addressArray=address.toCharArray();
            charCnt=1;
            for (; charCnt <= addressArray.length; charCnt++) {
                challan281map.put("ca"+charCnt,addressArray[charCnt-1] + "");
            }
            for (int j = charCnt; j <= 60; j++) {
                challan281map.put("ca" + j, " ");
            }
            
            String assessYr="";
            if (requiredData.containsKey("assessmentYear")) {
                assessYr = (String) requiredData.get("assessmentYear");
            }
            char[] assessYrArray=assessYr.toCharArray();
            charCnt=1;
            for (; charCnt <= assessYrArray.length; charCnt++) {
                challan281map.put("assess"+charCnt,assessYrArray[charCnt-1] + "");
            }
            
            boolean isCompanyDeductee=Boolean.parseBoolean(requiredData.get("isCompanyDeductee").toString());
            if(isCompanyDeductee){
                challan281map.put("ContryDeductee", request.getSession().getServletContext().getRealPath("images") + "/check14x14.png");
                challan281map.put("CountryNonDeductee", request.getSession().getServletContext().getRealPath("images")+"/s.gif");
            }else{
                challan281map.put("ContryDeductee", request.getSession().getServletContext().getRealPath("images") + "/s.gif");
                challan281map.put("CountryNonDeductee", request.getSession().getServletContext().getRealPath("images")+"/check14x14.png");
            }
            
            response.setHeader("Content-Disposition", "attachment;filename=" + "DeliveryOrder123.pdf");
            JasperPrint jasperPrint = null;
            List salesInvoiceList = new ArrayList();
            OnlyDatePojo odp = new OnlyDatePojo();
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            odp.setDate(userdf.format(new Date()));
            salesInvoiceList.add(odp);
            JasperReport jasperReport = null;
            InputStream inputStream = null;
            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/INDIATDSChallanNo281.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(salesInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, challan281map, beanColDataSource);
            list.add(jasperPrint);
        } catch (Exception ex) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    @Override
    public List<Object> exportCommercialInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> comInvoiceData = new HashMap<String, Object>();
        
        try{
            
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPrefernces = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            String vattinno=!StringUtil.isNullOrEmpty(extraCompanyPrefernces.getVatNumber())?extraCompanyPrefernces.getVatNumber():"";
            String cstno=!StringUtil.isNullOrEmpty(extraCompanyPrefernces.getCstNumber())?extraCompanyPrefernces.getCstNumber():"";
            String companyname=!StringUtil.isNullOrEmpty(company.getCompanyName())?company.getCompanyName():"";
            String companyAdress=!StringUtil.isNullOrEmpty(CommonFunctions.getCompanyAddress(company))?CommonFunctions.getCompanyAddress(company):"";
            String invoiceId=request.getParameter("invoiceid");
            String ManuName="";
            String ManuAddress="";
            String buyerName="";
            String buyerAddress="";
            String buyetinNo="";
            String buyerState="";
            
            int countryid = 0;
            if(company != null && company.getCountry()!= null && !StringUtil.isNullOrEmpty(company.getCountry().getID())){
                countryid = Integer.parseInt(company.getCountry().getID());
            }
            
            int countryLanguageId = Constants.CountryIndiaLanguageId;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String currsymb = "";
            DecimalFormat decimalFormat = new DecimalFormat("0.00");
            currsymb = currency.getHtmlcode() != null ? currency.getHtmlcode() : "";
            KwlReturnObject  data=accInvoiceDAOobj.getSalesInvoiceExciseDetailsHQL(invoiceId);
            List list1 = data.getEntityList();
            Iterator itr = list1.iterator();
            if(itr.hasNext()){
                SalesInvoiceExciseDetailsMap details=null;
                details=(SalesInvoiceExciseDetailsMap) itr.next();
                buyerName=details.getSupplier();
                buyerAddress=details.getSupplierAddress();
                ManuName=details.getManufacturerName();
                ManuAddress=details.getManufacturerAddress();
                buyetinNo=details.getSupplierTINSalesTaxNo();
                if(!StringUtil.isNullOrEmpty(details.getSupplierstate())){
                    if(details.getSupplierstate().toString().equalsIgnoreCase("4"))
                        buyerState="Maharashtra";
                    else if(details.getSupplierstate().toString().equalsIgnoreCase("5"))
                        buyerState="Uttar Pradesh";
                    else if(details.getSupplierstate().toString().equalsIgnoreCase("3"))
                        buyerState="Gujarat";    
                    else if(details.getSupplierstate().toString().equalsIgnoreCase("1"))
                        buyerState="Delhi";        
                    else if(details.getSupplierstate().toString().equalsIgnoreCase("6"))
                        buyerState="Rajasthan";
                    else if(details.getSupplierstate().toString().equalsIgnoreCase("7"))
                        buyerState="Haryana";
                }
            }
            String stateid=!StringUtil.isNullOrEmpty(extraCompanyPrefernces.getCompany().getState().getID())?extraCompanyPrefernces.getCompany().getState().getID():"";
            String declaration="";
            if(StringUtil.equalIgnoreCase(stateid,"4")){
                declaration="I/We hereby certify that my/our registration certificate under the Maharashtra Value Added Tax Act,2002 "
                        + "is in force on the date on which the sales of the goods specified in this Tax Invoice is made by me/us and "
                        + "that the transactions of sale covered by this Tax Invoice has been effected by me/us and it shall be accounted "
                        + "for in the turnover of sales while filing of return and the due tax, if any payable on the sale has been paid "
                        + "or shall be paid";
            }else{
                declaration="We declare that this invoice shows the actual price of the goods described and that all particulars "
                        + "are true  and correct.";
            }
            
            
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            filter_names.add("invoice.ID");
            filter_params.add(invoiceId);
            HashMap<String,Object>  invRequestParams=new HashMap<>();
            invRequestParams.put("filter_names", filter_names);
            invRequestParams.put("filter_params", filter_params);
            KwlReturnObject idresult=null;
            idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
            itr=null;
            itr=idresult.getEntityList().iterator();  
            Map<String, Object> rows = new HashMap<String, Object>();
            ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();
            String descOfGoods="";
            String tariforhsnclass="";
            String quantity="";
            double totalQuantity=0;
            double totalVatAmount=0;
            double rate=0;
            String per="";
            String amount="";
            String srno="";
            int count=1;
            String motorVehicleNo="";
            String invoiceNo="";
            double amountofItem=0;
            double totalamountofItem=0;
            String invoiceDate="";
            String buyerOrderDate="";
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            String customerName="";
            String customerAddress="";
            String customerVatTin="";
            String deliveryNote="";
            String buyerOrderNo="";
            String dispatchDocNo="";
            String suppliersRef="";
            
            while(itr.hasNext()){
                double vatPercent = 0;
                double FlatexciseDutyAmount = 0;
                int exciseDutyType=1;
                double excisePercent=0;
                InvoiceDetail row=null;
                rows = new HashMap<String, Object>();
                row = (InvoiceDetail) itr.next();
                HashMap<String, Object> PurchaseReturnDetailParams = new HashMap();
                PurchaseReturnDetailParams.put("InvoiceDetailid", row.getID());
                KwlReturnObject prdTermMapresult = accInvoiceDAOobj.getInvoicedetailTermMap(PurchaseReturnDetailParams);
                List<InvoiceDetailTermsMap> PurchaseReturnDetailTermsMapList = prdTermMapresult.getEntityList();
                for (InvoiceDetailTermsMap purchaseReturnDetailTermMap : PurchaseReturnDetailTermsMapList) {
                    if (purchaseReturnDetailTermMap.getTerm() != null && purchaseReturnDetailTermMap.getTerm().getTermType() == 2) {
                        excisePercent += purchaseReturnDetailTermMap.getTerm().getPercentage();
                        exciseDutyType=purchaseReturnDetailTermMap.getTaxType();
                        FlatexciseDutyAmount=purchaseReturnDetailTermMap.getTerm().getTermAmount();
                        
                    }
                    if (purchaseReturnDetailTermMap.getTerm() != null && purchaseReturnDetailTermMap.getTerm().getTermType() == 1) {
                        vatPercent += purchaseReturnDetailTermMap.getTerm().getPercentage();
                    }
                }
//                deliveryNote=(row.getDeliveryOrderDetail()!=null)?row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber():"";
//                dispatchDocNo=(row.getDeliveryOrderDetail()!=null)?row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber():"";
                buyerOrderNo=(row.getSalesorderdetail()!=null)?row.getSalesorderdetail().getSalesOrder().getSalesOrderNumber():"";
                suppliersRef=row.getSalesorderdetail()!=null?row.getSalesorderdetail().getQuotationDetail().getQuotation().getQuotationNumber():"";
                dispatchDocNo=suppliersRef;
//                invoiceDate=row.getInvoice().getJournalEntry().getEntryDate()!=null?row.getInvoice().getJournalEntry().getEntryDate().toString():"";
                invoiceDate=row.getInvoice().getCreationDate()!=null?row.getInvoice().getCreationDate().toString():"";
                srno=String.valueOf(count++);
                invoiceNo=row.getInvoice().getInvoiceNumber();
//                invoiceDate=row.getInvoice().getShipDate()!=null?row.getInvoice().getShipDate().toString():"";
                motorVehicleNo=row.getInvoice().getShipvia()!=null?row.getInvoice().getShipvia().toString():"";
                descOfGoods= StringUtil.isNullOrEmpty(row.getDescription())?StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())?row.getInventory().getProduct().getName():row.getInventory().getProduct().getDescription():row.getDescription();
                tariforhsnclass=row.getInventory().getProduct().getHSNCode()!=null?row.getInventory().getProduct().getHSNCode():"";
                quantity=String.valueOf(row.getInventory().getQuantity())!=null?String.valueOf(row.getInventory().getQuantity()):"";
                totalQuantity+=row.getInventory().getQuantity();
                rate=row.getRate();
//                buyerOrderDate=(row.getDeliveryOrderDetail()!=null)?((row.getDeliveryOrderDetail().getDeliveryOrder()!=null)?df.format(new Date(row.getDeliveryOrderDetail().getDeliveryOrder().getCreatedon())).toString():""):"";
                buyerOrderDate=(row.getSalesorderdetail()!=null)?((row.getSalesorderdetail().getSalesOrder().getOrderDate()!=null)?row.getSalesorderdetail().getSalesOrder().getOrderDate().toString():""):"";
                if(buyerOrderDate.length()>0){
                    buyerOrderDate=buyerOrderDate.substring(0, buyerOrderDate.length()-10);
                }
                KwlReturnObject doresult = accInvoiceDAOobj.getDeliveryOrderFromInvoice(invoiceId,companyid);
                List list123 = doresult.getEntityList();
                if(list123.size()>0){
                    Iterator ite1 = list123.iterator();                
                    while(ite1.hasNext()){                        
                        deliveryNote = (String)ite1.next();
                    }
                }
                customerName=row.getInvoice().getCustomer().getName();
                customerAddress=!StringUtil.isNullOrEmpty(row.getInvoice().getCustomer().getBillingAddress())?row.getInvoice().getCustomer().getBillingAddress().toString():"";
                customerVatTin=row.getInvoice().getCustomer().getVATTINnumber();
                double rateplusExDuty = 0;
                if (exciseDutyType == 1) {
                    rateplusExDuty = rate + (rate * (excisePercent / 100));
                } else if (exciseDutyType == 0) {
                    rateplusExDuty = rate + FlatexciseDutyAmount;
                }
                
                per=row.getInventory().getProduct().getUnitOfMeasure()!=null?row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA():"";
                amountofItem=row.getInventory().getQuantity() * rateplusExDuty;
                rows.put("srno",String.valueOf(srno));
                rows.put("descofgoods",descOfGoods);
                rows.put("quantity",String.valueOf(quantity));
                rows.put("rate",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(rateplusExDuty,2,countryid)));
                rows.put("per",per);
                rows.put("amount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(amountofItem,2,countryid)));
                totalamountofItem+=amountofItem;
                invDetailsList.add(rows);
                
                rows = new HashMap<String, Object>();
                rows.put("srno","");
                rows.put("descofgoods","Output VAT @"+vatPercent+"%");
                rows.put("quantity","");
                rows.put("rate","");
                rows.put("per","");
                rows.put("amount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(amountofItem*(vatPercent/100),2,countryid)));
                totalVatAmount+=amountofItem*(vatPercent/100);
                invDetailsList.add(rows);
                excisePercent=0;
                vatPercent=0;
            }
            String amountsinwords = EnglishNumberToWordsOjb.convert(totalVatAmount+totalamountofItem, currency, countryLanguageId) + " only.";
            
            comInvoiceData.put("comminvoicedatasource",new JRBeanCollectionDataSource(invDetailsList));
            comInvoiceData.put("totalquantity",String.valueOf(totalQuantity));
            comInvoiceData.put("totalamount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(totalVatAmount+totalamountofItem,2,countryid)));
            comInvoiceData.put("companyname",companyname);
            comInvoiceData.put("declaration",declaration);
            comInvoiceData.put("companyaddress",companyAdress);
            comInvoiceData.put("buyername",customerName);
            comInvoiceData.put("buyeraddress",customerAddress);
            comInvoiceData.put("consigneename",ManuName);
            comInvoiceData.put("consigneeaddress",ManuAddress);
            comInvoiceData.put("invoiceno",invoiceNo);
            comInvoiceData.put("invoicedate",invoiceDate);
            comInvoiceData.put("deliverynote",deliveryNote);
            comInvoiceData.put("modeofpayment","");
            comInvoiceData.put("amountinwords",amountsinwords);
            comInvoiceData.put("companyvattin",vattinno);
            comInvoiceData.put("companycsttin",cstno);
            comInvoiceData.put("buyervattin",customerVatTin);
//            comInvoiceData.put("buyerorderdate",buyerOrderDate);
            comInvoiceData.put("desdate",invoiceDate);
            comInvoiceData.put("desdocno",dispatchDocNo);
//            comInvoiceData.put("buyerorderno",buyerOrderNo);
            comInvoiceData.put("otherref",suppliersRef);
            comInvoiceData.put("supplierref",suppliersRef);
            comInvoiceData.put("despatchedthrough","Road / Air / Rail");
            comInvoiceData.put("destination",buyerState);
            comInvoiceData.put("termsofdelivery","");
            
            response.setHeader("Content-Disposition", "attachment;filename=" + "Commercial Invoice.pdf");
            JasperPrint jasperPrint = null;
            List salesInvoiceList = new ArrayList();
            OnlyDatePojo odp = new OnlyDatePojo();
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            odp.setDate(userdf.format(new Date()));
            salesInvoiceList.add(odp);
            JasperReport jasperReport = null;
            InputStream inputStream = null;
            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/commercialInvoice.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(salesInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, comInvoiceData, beanColDataSource);
            list.add(jasperPrint);
        }catch(Exception e){
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
        }
        return list;
    }
    @Override
    public List<Object> exportRuleNo11JasperForInterStockTransfer(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> ruleNo11Data = new HashMap<String, Object>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            String companyname = !StringUtil.isNullOrEmpty(company.getCompanyName()) ? company.getCompanyName() : "";
            String vattinno = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getVatNumber()) ? extraCompanyPreferences.getVatNumber() : "";
            String cstno = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getCstNumber()) ? extraCompanyPreferences.getCstNumber() : "";
            String companyAdress = !StringUtil.isNullOrEmpty(CommonFunctions.getCompanyAddress(company)) ? CommonFunctions.getCompanyAddress(company) : "";
            String range = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getExciseRangeCode()) ? extraCompanyPreferences.getExciseRangeCode() : "";
            String division = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getExciseDivisionCode()) ? extraCompanyPreferences.getExciseDivisionCode() : "";
            String commissionRate = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getExciseCommissionerateCode()) ? extraCompanyPreferences.getExciseCommissionerateCode() : "";
            String excRegNo = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getEccNumber()) ? extraCompanyPreferences.getEccNumber() : "";
            
            double excisePercent = 0;
            double vatPercent = 0;
            double cstPercent = 0;
            double totalExcDutyAmount = 0;
            String transactionNo = request.getParameter("transactionNo");
            String productIds = request.getParameter("productIds");
            String type=request.getParameter("type");
            
            String stateid=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getCompany().getState().getID())?extraCompanyPreferences.getCompany().getState().getID():"";
            String declaration="";
            if(StringUtil.equalIgnoreCase(stateid,"4")){
                declaration="I/We hereby certify that my/our registration certificate under the Maharashtra Value Added Tax Act,"
                        + "2002 is in force on the date on which the sales of the goods specified in this Tax Invoice is made by "
                        + "me/us and that the transactions of sale covered by this Tax Invoice has been effected by me/us and it "
                        + "shall be accounted for in the turnover of sales while filing of return and the due tax, if any payable on the sale has been paid or shall be paid.";
            }else{
                declaration="This is to certify that the price declared herein is as per section 4 of The Central Excise Act. & "
                        + "that the amount indicated in the document represents the price actually charged by us and that there "
                        + "is no additional consideration weight directly or indirectly from the goods that has been declared & "
                        + "if any, differential duty shall be paid. if payable.";
            }
            int countryid = 0;
            if(company != null && company.getCountry()!= null && !StringUtil.isNullOrEmpty(company.getCountry().getID())){
                countryid = Integer.parseInt(company.getCountry().getID());
            }
            int countryLanguageId = Constants.CountryIndiaLanguageId;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String currsymb = "";
            DecimalFormat decimalFormat = new DecimalFormat("0.00");
            currsymb = currency.getHtmlcode() != null ? currency.getHtmlcode() : "";
            
            Map<String, Object> requestParams= new HashMap<String, Object>();
            Map<String, Object> rows = new HashMap<String, Object>();
            Map<String, Object> Exrows = new HashMap<String, Object>();
            ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();
            ArrayList< Map<String, Object>> ExcDetailsList = new ArrayList< Map<String, Object>>();
            requestParams.put("transactionno",transactionNo);
            requestParams.put("companyid",companyid);
            requestParams.put(Constants.moduleid,1002);
            KwlReturnObject inProductresult= storeService.getInventoryProductDetails(requestParams);
            
            List productlist = inProductresult.getEntityList();
            int count=1;
            String srno="";
            String amountsinwords="";
            String vatamountinwords="";
            boolean isCformApplicable=false;
            double totalvatamount=0;
            double totalQuantity=0;
            double overalltotalAmount=0;
            double totalassessablevalue=0;
            double bodtotalamount=0;
            for (int i = 0; i < productlist.size(); i++) {
                Object[] srobject = (Object[]) productlist.get(i);
                String itemId = srobject[0] != null ? srobject[0].toString() : "";
                if(!productIds.contains(itemId)){
                    continue;
                }
                
                rows = new HashMap<String, Object>();
                Exrows = new HashMap<String, Object>();
                double amountofItem=0;
                
                KwlReturnObject productObj=accProductObj.getProductByID(itemId,companyid);
                Product product = null;
                product = (Product) productObj.getEntityList().get(0);
                Date date = new Date();
                try {
                    date = yyyyMMdd_HIPHON.parse(yyyyMMdd_HIPHON.format(date));
                } catch (ParseException ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
                double purchasePrice = stockService.getProductPurchasePrice(product, date);
                srno=String.valueOf(count++);
                
                double quantity = Double.parseDouble(srobject[4] != null ? srobject[4].toString() : "0");
                Map<String, Object> mapData = new HashMap<String, Object>();
                mapData.put("productid", itemId);
                KwlReturnObject result6 = accProductObj.getProductTermDetails(mapData);
                double FlatexciseDutyAmount = 0;
                int exciseDutyType=1;
                List<ProductTermsMap> ProductTermsMapList = result6.getEntityList();
                for (ProductTermsMap productDetailTermMap : ProductTermsMapList) {
                    if (productDetailTermMap.getTerm() != null && productDetailTermMap.getTerm().getTermType() == 2) {
                        excisePercent += productDetailTermMap.getTerm().getPercentage();
                        exciseDutyType=productDetailTermMap.getTaxType();
                        FlatexciseDutyAmount=productDetailTermMap.getTerm().getTermAmount();
                    } else if (productDetailTermMap.getTerm() != null && productDetailTermMap.getTerm().getTermType() == 1) {
                        vatPercent += productDetailTermMap.getTerm().getPercentage();
                    } else if (productDetailTermMap.getTerm() != null && productDetailTermMap.getTerm().getTermType() == 3) {
                        cstPercent += productDetailTermMap.getTerm().getPercentage();
                    }
                }
                amountofItem=quantity * purchasePrice;
                String per=product.getUnitOfMeasure()!=null?product.getUnitOfMeasure().getNameEmptyforNA():"";
                String excideDutyText="";
                String rateOfBedText="";
                double exciseDutyAmount=0;
                if(exciseDutyType==1){
                    excideDutyText="Basic Excise Duty @"+excisePercent+"%";
                    exciseDutyAmount=amountofItem*(excisePercent/100);
                    rateOfBedText=excisePercent+" %";
                }else if(exciseDutyType==0){
                    excideDutyText="Basic Excise Duty @ Rs."+FlatexciseDutyAmount+" Per "+per ;
                    exciseDutyAmount=quantity*FlatexciseDutyAmount;
                    rateOfBedText="Rs "+FlatexciseDutyAmount+" per " +quantity+" "+per;
                }
                
                totalQuantity+=quantity;
                rows.put("srno",String.valueOf(srno));
                rows.put("descofgoods",StringUtil.isNullOrEmpty(product.getDescription())?product.getName():product.getDescription());
                rows.put("tarifforhsnclass",product.getTariffName()+" / "+product.getHSCode());
                rows.put("quantity",String.valueOf(quantity));
                rows.put("rate",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(purchasePrice,2,countryid)));
                rows.put("per",per);
                rows.put("amount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(amountofItem,2,countryid)));
                invDetailsList.add(rows);
                
                
                rows = new HashMap<String, Object>();
                rows.put("srno","");
                rows.put("descofgoods",excideDutyText);
                rows.put("tarifforhsnclass","");
                rows.put("quantity","");
                rows.put("rate","");
                rows.put("per"," ");
                rows.put("amount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(exciseDutyAmount,2,countryid)));
                totalExcDutyAmount+=amountofItem*(excisePercent/100);
                invDetailsList.add(rows);
                
                
                rows = new HashMap<String, Object>();
                rows.put("srno","");
                rows.put("tarifforhsnclass","");
                rows.put("per"," ");
                rows.put("quantity","");
                

                double temp=0;
                if(extraCompanyPreferences.isEnableVatCst()){
                    rows.put("rate","");
                    rows.put("amount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal((amountofItem+exciseDutyAmount)*(vatPercent/100),2,countryid)));
                    rows.put("descofgoods","Output VAT @ "+ decimalFormat.format(vatPercent)+"%");
                    temp=(amountofItem+exciseDutyAmount)*(vatPercent / 100);
                } else {
//                    isCformApplicable=row.getInvoice().getCustomer().isCformapplicable();
                    if (!isCformApplicable) {
                        temp=(amountofItem+exciseDutyAmount)*(vatPercent / 100);
                        rows.put("rate", "");
                        rows.put("amount", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(temp,2,countryid)));
                        rows.put("descofgoods","Output CST @ "+decimalFormat.format(vatPercent)+"%");
                    } else {
                        temp= (amountofItem+exciseDutyAmount) * (cstPercent / 100);
                        rows.put("rate", "");
                        rows.put("amount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(temp,2,countryid)));
                        rows.put("descofgoods","Output CST @ "+decimalFormat.format(cstPercent)+"%");
                    }
                }
                totalvatamount +=temp;
                invDetailsList.add(rows);
                
                Exrows.put("descofgood",StringUtil.isNullOrEmpty(product.getDescription())?product.getName():product.getDescription());
                Exrows.put("assessablevalue",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(amountofItem,2,countryid)));
                Exrows.put("rateofbod",rateOfBedText);
                Exrows.put("bodamount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(exciseDutyAmount,2,countryid)));
                ExcDetailsList.add(Exrows);
                
                overalltotalAmount +=amountofItem+exciseDutyAmount+temp;;
                totalassessablevalue += amountofItem;
                bodtotalamount += exciseDutyAmount;
                
                excisePercent=0;
                vatPercent=0;
                cstPercent=0;
                
            }
            amountsinwords = EnglishNumberToWordsOjb.convert(overalltotalAmount, currency, countryLanguageId) + " only.";
            vatamountinwords = EnglishNumberToWordsOjb.convert(totalvatamount, currency, countryLanguageId) + " only.";
            String amountofdutyinwords=EnglishNumberToWordsOjb.convert(totalExcDutyAmount, currency, countryLanguageId) + " only.";
            ruleNo11Data.put("ruleno11datasource",new JRBeanCollectionDataSource(invDetailsList));
            
            ruleNo11Data.put("BEDDataSource",new JRBeanCollectionDataSource(ExcDetailsList));
            
            ruleNo11Data.put("companyname",companyname);
            ruleNo11Data.put("declaration",declaration);
            ruleNo11Data.put("compaddressline1",companyAdress);
            ruleNo11Data.put("compaddressline1",companyAdress);
            ruleNo11Data.put("exregno",excRegNo);
            ruleNo11Data.put("range",range);
            ruleNo11Data.put("division",division);
            ruleNo11Data.put("commissionerate",commissionRate);
            ruleNo11Data.put("vattin",vattinno);
            ruleNo11Data.put("cstno",cstno);
            ruleNo11Data.put("buyersname","");
            ruleNo11Data.put("buyersaddress","");
            ruleNo11Data.put("consigneename","");
            ruleNo11Data.put("consigneeaddress","");
            ruleNo11Data.put("buyerexregno","");
            ruleNo11Data.put("buyertinno","");
            ruleNo11Data.put("buyerrange","");
            ruleNo11Data.put("buyerdivision","");
            ruleNo11Data.put("buyercommissionerate","");
            ruleNo11Data.put("conexregno","");
            ruleNo11Data.put("continno","");
            ruleNo11Data.put("conrange","");
            ruleNo11Data.put("condivision","");
            ruleNo11Data.put("concommissionerate","");
            ruleNo11Data.put("connotificationno","");
            ruleNo11Data.put("invoiceno",transactionNo);
            ruleNo11Data.put("invoicedate","");
            ruleNo11Data.put("buyersorderno","");
            ruleNo11Data.put("ordernodate","");
            ruleNo11Data.put("delivernote","");
            ruleNo11Data.put("deliverynotedate","");
            ruleNo11Data.put("supplierref","");
            ruleNo11Data.put("despatchdocno","");
            ruleNo11Data.put("dateandtimeofremovalofgood","");
            ruleNo11Data.put("motorvehicleno","");
            ruleNo11Data.put("timeofissueofinvoice","");
            ruleNo11Data.put("transportname","");
            ruleNo11Data.put("modeofpayment","");
            ruleNo11Data.put("totalquantity",String.valueOf(totalQuantity));
            ruleNo11Data.put("amountsinwords",amountsinwords);
            ruleNo11Data.put("vatamountinwords",vatamountinwords);
            ruleNo11Data.put("amountofdutyinwords",amountofdutyinwords);
            ruleNo11Data.put("totalamount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(overalltotalAmount,2,countryid)));
            ruleNo11Data.put("bodtotalamount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(bodtotalamount,2,countryid)));
            ruleNo11Data.put("totalassessablevalue",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(totalassessablevalue,2,countryid)));
            response.setHeader("Content-Disposition", "attachment;filename=" + "RuleNo11ForInterStockTranfer.pdf");
            JasperPrint jasperPrint = null;
            List salesInvoiceList = new ArrayList();
            OnlyDatePojo odp = new OnlyDatePojo();
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            odp.setDate(userdf.format(new Date()));
            salesInvoiceList.add(odp);
            JasperReport jasperReport = null;
            InputStream inputStream = null;
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/RuleNo11ExciseInvoice.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(salesInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, ruleNo11Data, beanColDataSource);
            list.add(jasperPrint);

        } catch (Exception ex) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
     @Override
    public List<Object> exportRuleNo11Jasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> ruleNo11Data = new HashMap<String, Object>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            String companyname=!StringUtil.isNullOrEmpty(company.getCompanyName())?company.getCompanyName():"";
            String vattinno=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getVatNumber())?extraCompanyPreferences.getVatNumber():"";
            String cstno=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getCstNumber())?extraCompanyPreferences.getCstNumber():"";
            //Showing address from system control as company addres
            String consignerTelNo="";
            String consignerFaxNo="";
            String consignerAddress="";
            String supplierName="";
            int countryid = 0;
            if(company!= null && company.getCountry() != null && !StringUtil.isNullOrEmpty(company.getCountry().getID())){
                countryid = Integer.parseInt(company.getCountry().getID());
            }
            Set<CompanyAddressDetails> addRows = extraCompanyPreferences.getCompanyAddressRows();
                for (CompanyAddressDetails cad : addRows) {
                    if (cad.isIsBillingAddress()) {
                        String addr = StringUtil.isNullOrEmpty(cad.getAddress()) ? "" : cad.getAddress();
                        String city = StringUtil.isNullOrEmpty(cad.getCity()) ? "" : ", " + cad.getCity();
                        String state = StringUtil.isNullOrEmpty(cad.getState()) ? "" : ", " + cad.getState();
                        String country = StringUtil.isNullOrEmpty(cad.getCountry()) ? "" : ", " + cad.getCountry();
                        String postalcode = StringUtil.isNullOrEmpty(cad.getPostalCode()) ? "" : " " + cad.getPostalCode();
                        String email = StringUtil.isNullOrEmpty(cad.getEmailID()) ? "" : "\nEmail : " + cad.getEmailID();
                        consignerTelNo = StringUtil.isNullOrEmpty(cad.getPhone()) ? "" : cad.getPhone()+"";
                        consignerFaxNo = StringUtil.isNullOrEmpty(cad.getFax()) ?"":cad.getFax()+"";
                        String contractpersonno = StringUtil.isNullOrEmpty(cad.getContactPersonNumber()) ? "" : "\nContact Person No : " + cad.getContactPersonNumber();
                        String contractpersondesignation = StringUtil.isNullOrEmpty(cad.getContactPersonDesignation()) ? "" : "\nContact Person Designation : " + cad.getContactPersonDesignation();
                        String mobile = StringUtil.isNullOrEmpty(cad.getMobileNumber()) ? "" : "\nMobile : " + cad.getMobileNumber();
                        String attn = StringUtil.isNullOrEmpty(cad.getContactPerson()) ? "" : "\nAttn. : " + cad.getContactPerson();
                        consignerAddress = addr + city + state + country + postalcode + email + mobile + contractpersonno + contractpersondesignation + attn;
                    }
                }
            String companyAdress=consignerAddress;//!StringUtil.isNullOrEmpty(CommonFunctions.getCompanyAddress(company))?CommonFunctions.getCompanyAddress(company):"";           
            String range=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getExciseRangeCode())?extraCompanyPreferences.getExciseRangeCode():"";
            String division=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getExciseDivisionCode())?extraCompanyPreferences.getExciseDivisionCode():"";
            String commissionRate=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getExciseCommissionerateCode())?extraCompanyPreferences.getExciseCommissionerateCode():"";
            String excRegNo=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getEccNumber())?extraCompanyPreferences.getEccNumber():"";
            String stateid="";
            if(extraCompanyPreferences!= null && extraCompanyPreferences.getCompany()!= null && extraCompanyPreferences.getCompany().getState() != null  && !StringUtil.isNullOrEmpty(extraCompanyPreferences.getCompany().getState().getID())){
                stateid = extraCompanyPreferences.getCompany().getState().getID();
            }
            String declaration="", vatdeclaration="";
            declaration="This is to certify that the price declared herein is as per section 4 of The Central Excise Act. & "
                        + "that the amount indicated in the document represents the price actually charged by us and that there "
                        + "is no additional consideration weight directly or indirectly from the goods that has been declared & "
                        + "if any, differential duty shall be paid. if payable.                         ";
            if(StringUtil.equalIgnoreCase(stateid,"4")){
                vatdeclaration = "We hereby certify that my/our registration certificate under the Maharashtra Value Added Tax Act,"
                        + "2002 is in force on the date on which the sales of the goods specified in this Tax Invoice is made by "
                        + "me/us and that the transactions of sale covered by this Tax Invoice has been effected by me/us and it "
                        + "shall be accounted for in the turnover of sales while filing of return and the due tax, if any payable "
                        + "on the sale has been paid or shall be paid.                                ";
            }
            
            String buyerName="";
            String buyerAddress="";
            String buyerexcRegNo="";
            String buyetinNo="";
            String buyerpanNo="";
            String buyerRange="";
            String buyerDivision="";
            String buyerComrate="";
            String ManuName="";
            String ManuAddress="";
            String ManuexcRegNo="";
            String ManutinNo="";
            String ManuRange="";
            String ManuDivision="";
            String ManuComrate="";
            String ManuNotificaionNo="";
            String invoiceId=request.getParameter("invoiceid");
            KwlReturnObject  data=accInvoiceDAOobj.getSalesInvoiceExciseDetailsHQL(invoiceId);
            List list1 = data.getEntityList();
            String buyerState="";
            String shipVia="";
            Iterator itr = list1.iterator();
            if(itr.hasNext()){
                SalesInvoiceExciseDetailsMap details=null;
                details=(SalesInvoiceExciseDetailsMap) itr.next();
                buyerName=details.getSupplier();
                buyerAddress=details.getSupplierAddress();
                buyerexcRegNo=details.getSupplierExciseRegnNo();
                buyetinNo=details.getSupplierTINSalesTaxNo();
                buyerRange=details.getSupplierRange();
                buyerDivision=details.getSupplierDivision();
                buyerComrate=details.getSupplierCommissioneRate();
                ManuName=details.getManufacturerName();
                ManuexcRegNo=details.getManufacturerExciseregnNo();
                ManuRange=details.getManufacturerRange();
                ManuDivision=details.getManufacturerDivision();
                ManuComrate=details.getManufacturerCommissionerate();
                ManuAddress=details.getManufacturerAddress();
                buyerState=(details.getSupplierstate()!=null)?details.getSupplierstate():"";
            }
            KwlReturnObject invoiceObjresult = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceId);
            Invoice invoice = invoiceObjresult != null ? (Invoice) invoiceObjresult.getEntityList().get(0) : null;
            if(invoice != null && !StringUtil.isNullOrEmpty(invoice.getCustomer().getPANnumber())){
                buyerpanNo = invoice.getCustomer().getPANnumber();
            }
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            DateFormat dfTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String invoiceNo="";
            String invoiceDate="";
            String buyerOrderNo="";
            String buyerOrderDate="";
            String deliveryNote="";
            String deliveryDate="";
            String suppliersRef="";
            String suppliersRefDate="";
            String dispatchDocNo="";
            String dateNtimeOfRemovalofgoods="";
            String motorVehicleNo="";
            String dateNtimeOfissueOfInvoice="";
            String transportName="";
            String modeortermofpayment="";
            String amountsinwords="";
            String vatamountinwords="";
            String totalAmount="";
            String invoiceTitle="";
            double bodtotalamount=0;
            double totalassessablevalue=0;
           
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("invoice.ID");
                filter_params.add(invoiceId);
            HashMap<String,Object>  invRequestParams=new HashMap<>();
                invRequestParams.put("filter_names", filter_names);
                invRequestParams.put("filter_params", filter_params);
            KwlReturnObject idresult=null;
                idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
            itr=null;
            itr=idresult.getEntityList().iterator();
            String descOfGoods="";
            String tariforhsnclass="";
            String quantity="";
            double rate=0;
            String per="";
            String amount="";
            String srno="";
            int count=1;
            double amountofItem=0;
            double totalInvoiceAmount=0;
            double overalltotalAmount=0;
            double totalQuantity=0;
            ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();
            ArrayList< Map<String, Object>> invTermDetailsList = new ArrayList< Map<String, Object>>();
            ArrayList< Map<String, Object>> dealerConsigneeList = new ArrayList< Map<String, Object>>();
            ArrayList< Map<String, Object>> PurchaseInvDetailsListSup = new ArrayList< Map<String, Object>>();
            ArrayList< Map<String, Object>> PurchaseInvDetailsListManu = new ArrayList< Map<String, Object>>();
            ArrayList< Map<String, Object>> ExcDetailsList = new ArrayList< Map<String, Object>>();
            Map<String, Object> rows = new HashMap<String, Object>();
            Map<String, Object> purchaseRows = new HashMap<String, Object>();
            Map<String, Object> Exrows = new HashMap<String, Object>();
            double excisePercent = 0;
            double vatPercent = 0;
            double cstPercent = 0;
            double kkcPercent = 0;
            double sbcPercent = 0;
            String greceiptid = "";
            GoodsReceipt goodsReceipt=null;
            List<ExciseDetailsInvoice> dealerManuDetails = null;
            String receiptNo="";
            String invTitle="";
            double totalGRDexciseDutyAmount=0.0;
            boolean isCformApplicable=false;
            double totalExcDutyAmount=0;
            double totalvatamount=0;
            double totalDutyAmntSup=0.0;
            double totalDutyAmntManu=0.0;
            int countryLanguageId = Constants.CountryIndiaLanguageId;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String currsymb = "";
            DecimalFormat decimalFormat = new DecimalFormat("0.00");
            currsymb = currency.getHtmlcode() != null ? currency.getHtmlcode() : "";
            KwlReturnObject doresult = accInvoiceDAOobj.getDeliveryOrderFromInvoice(invoiceId,companyid);
            List list123 = doresult.getEntityList();
            if(list123.size()>0){
                Iterator ite1 = list123.iterator();                
                while(ite1.hasNext()){                        
                    deliveryNote = (String)ite1.next();
                }
            }
            Map<String,Double> lineLevelTaxNames = new LinkedHashMap<String,Double>();
            int amountdigitafterdecimal = 2;
            double TotalLineLevelTaxAmount = 0, totalVat = 0 ;
            while(itr.hasNext()){
                double FlatexciseDutyAmount = 0;
                int exciseDutyType=1;
                rows = new HashMap<String, Object>();
                Exrows = new HashMap<String, Object>();
                InvoiceDetail row=null;
                row = (InvoiceDetail) itr.next();
//              
                HashMap<String, Object> InvoiceTermDetailParams = new HashMap<String, Object>();
                InvoiceTermDetailParams.put("InvoiceDetailid", row.getID());
                InvoiceTermDetailParams.put("orderbyadditionaltax", true);
                // GST
                InvoiceTermDetailParams.put("termtype", 7);
                KwlReturnObject invTermMapresult = accInvoiceDAOobj.getInvoicedetailTermMap(InvoiceTermDetailParams);
                List<InvoiceDetailTermsMap> gst = invTermMapresult.getEntityList();

                for (InvoiceDetailTermsMap invoicedetailTermMap : gst) {
                    LineLevelTerms mt = invoicedetailTermMap.getTerm();
                    if (lineLevelTaxNames.containsKey(mt.getTerm()) && lineLevelTaxNames.get(mt.getTerm()) != null) {
                        double value = lineLevelTaxNames.get(mt.getTerm());
                        lineLevelTaxNames.put(mt.getTerm(), invoicedetailTermMap.getTermamount() + value);

                    } else {
                        lineLevelTaxNames.put(mt.getTerm(), invoicedetailTermMap.getTermamount());
                    }
                }
                
                per=row.getInventory().getProduct().getUnitOfMeasure()!=null?row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA():"";
                String excideDutyText="";
                String rateOfBedText="";
                String companyRG3DNumber= "";
                double exciseDutyAmount=0;
                amountofItem=row.getInventory().getQuantity() * row.getRate();
                if(exciseDutyType==1 && (amountofItem*(excisePercent/100))>0){
                    excideDutyText="Basic Excise Duty @"+excisePercent+"%";
                    exciseDutyAmount=amountofItem*(excisePercent/100);
                    rateOfBedText=excisePercent+"%";
                }else if(exciseDutyType==0 && (row.getInventory().getQuantity()*FlatexciseDutyAmount)>0){
                    excideDutyText="Basic Excise Duty @ Rs."+FlatexciseDutyAmount+"Per "+per ;
                    exciseDutyAmount=row.getInventory().getQuantity()*FlatexciseDutyAmount;
                    rateOfBedText="Rs "+FlatexciseDutyAmount+" per " +row.getInventory().getQuantity()+" "+per;
                }
                dispatchDocNo=(row.getDeliveryOrderDetail()!=null)?row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber():"";
                buyerOrderNo=(row.getSalesorderdetail()!=null)?row.getSalesorderdetail().getSalesOrder().getSalesOrderNumber():"";
                suppliersRef=row.getSalesorderdetail()!=null?row.getSalesorderdetail().getSalesOrder().getSalesOrderNumber():"";
                suppliersRefDate=row.getSalesorderdetail()!=null?df.format(new Date(row.getSalesorderdetail().getSalesOrder().getCreatedon())):"";
                dispatchDocNo=suppliersRef;
                srno=String.valueOf(count++);
                invoiceNo=row.getInvoice().getInvoiceNumber();
                shipVia=row.getInvoice().getShipvia();
//                invoiceDate=row.getInvoice().getJournalEntry().getEntryDate()!=null?row.getInvoice().getJournalEntry().getEntryDate().toString():"";
                invoiceDate=row.getInvoice().getCreationDate()!=null?row.getInvoice().getCreationDate().toString():"";
                Date dateTime=(row.getInvoice()!=null)?new Date(row.getInvoice().getCreatedon()):new Date();
                dateNtimeOfRemovalofgoods=dfTime.format(dateTime);
                deliveryDate=(row.getDeliveryOrderDetail()!=null)?(row.getDeliveryOrderDetail().getDeliveryOrder()!=null?df.format(new Date(row.getDeliveryOrderDetail().getDeliveryOrder().getCreatedon())).toString():""):"";
                if(deliveryDate.length()>0){
                    deliveryDate=deliveryDate.substring(0, deliveryDate.length()-10);
                }else if(StringUtil.isNullOrEmpty(deliveryDate) && !StringUtil.isNullOrEmpty(deliveryNote)){
                    deliveryDate=invoiceDate;
                }
                buyerOrderDate=(row.getSalesorderdetail()!=null)?((row.getSalesorderdetail().getSalesOrder().getOrderDate()!=null)?row.getSalesorderdetail().getSalesOrder().getOrderDate().toString():""):"";
                if(buyerOrderDate.length()>0){
                    buyerOrderDate=buyerOrderDate.substring(0, buyerOrderDate.length()-10);
                }
                
                motorVehicleNo="";//row.getInvoice().getShipvia()!=null?row.getInvoice().getShipvia().toString():""; Kept vehicle no blank because there is no field for vehicle number
//                descOfGoods=StringUtil.isNullOrEmpty(row.getDescription())?StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())?row.getInventory().getProduct().getName():row.getInventory().getProduct().getDescription():row.getDescription();
                descOfGoods=!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getProductName())?row.getInventory().getProduct().getProductName():"";
//                tariforhsnclass=row.getInventory().getProduct().getHSCode()!=null?row.getInventory().getProduct().getTariffName()+" / "+row.getInventory().getProduct().getHSCode():"";
                tariforhsnclass=row.getInventory().getProduct().getHSCode()!=null?row.getInventory().getProduct().getHSCode():"";
                quantity=String.valueOf(row.getInventory().getQuantity())!=null?String.valueOf(row.getInventory().getQuantity()):"";
                totalQuantity+=row.getInventory().getQuantity();
                rate=row.getRate()!=0?row.getRate():0;
                rows.put("srno",String.valueOf(srno));
                rows.put("descofgoods",descOfGoods);
                rows.put("tarifforhsnclass",tariforhsnclass);
                rows.put("quantity",String.valueOf(quantity));
                rows.put("rate",String.valueOf(CustomDesignHandler.getAmountinCommaDecimal(rate,2,countryLanguageId)));
                rows.put("per",per);
                rows.put("amount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(amountofItem,2,countryid)));
                invDetailsList.add(rows);
                totalInvoiceAmount+=amountofItem;
               
                rows = new HashMap<String, Object>();
                bodtotalamount += exciseDutyAmount;
               
                excisePercent=0;
                vatPercent=0;
                cstPercent=0;
                /*Dealer type data for rule 11*/
                if (!StringUtil.isNullOrEmpty(request.getParameter("type")) && request.getParameter("type").equals("dealer")) {
                    HashMap<String, Object> InvoiceDetailParams = new HashMap<String, Object>();
                    InvoiceDetailParams.put("InvoiceDetailid", row.getID());
                    InvoiceDetailParams.put("companyid", companyid);
                    KwlReturnObject supplierMapresult = accInvoiceDAOobj.getSupplierDetailsMap(InvoiceDetailParams);
                    List<SupplierExciseDetails> supplierDetailMapList = supplierMapresult.getEntityList();
                    for (SupplierExciseDetails supdetailMap : supplierDetailMapList) {
                        purchaseRows = new HashMap<String, Object>();
                        KwlReturnObject grdObj = accountingHandlerDAOobj.getObject(GoodsReceiptDetail.class.getName(), supdetailMap.getGoodsReceiptDetailsId());
                        GoodsReceiptDetail grd = (GoodsReceiptDetail) grdObj.getEntityList().get(0);
                        if (grd != null) {
                            receiptNo = grd.getGoodsReceipt().getGoodsReceiptNumber();
                            double GRDexcisePercent = 0.0;
                            int GRDexciseDutyType = 0;
                            double GRDFlatexciseDutyAmount = 0.0;
                            double GRDexciseDutyAmount = 0.0;
                            double grdAmountOfItem = grd.getInventory().getQuantity() * grd.getRate();
                            HashMap<String, Object> GRDetailParams = new HashMap();
                            GRDetailParams.put("GoodsReceiptDetailid", grd.getID());
                            KwlReturnObject grdTermMapresult = accGoodsReceiptobj.getGoodsReceiptdetailTermMap(GRDetailParams);
                            List<ReceiptDetailTermsMap> GRDetailParamsTermsMapList = grdTermMapresult.getEntityList();
                            for (ReceiptDetailTermsMap grdDetailTermMap : GRDetailParamsTermsMapList) {
                                if (grdDetailTermMap.getTerm() != null && grdDetailTermMap.getTerm().getTermType() == 2) {
                                    GRDexcisePercent = grdDetailTermMap.getTerm().getPercentage();
                                    GRDexciseDutyType = grdDetailTermMap.getTaxType();
                                    GRDFlatexciseDutyAmount = grdDetailTermMap.getTerm().getTermAmount();
                                }
                            }
                            if (GRDexciseDutyType == 1 && (grdAmountOfItem * (GRDexcisePercent / 100)) > 0) {
                                GRDexciseDutyAmount = grdAmountOfItem * (GRDexcisePercent / 100);
                            } else if (exciseDutyType == 0 && (row.getInventory().getQuantity() * GRDFlatexciseDutyAmount) > 0) {
                                GRDexciseDutyAmount = grd.getInventory().getQuantity() * GRDFlatexciseDutyAmount;
                            }
                            
                            GoodsReceipt grobj = grd.getGoodsReceipt();
                            KwlReturnObject res = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), grobj.getID());
                            goodsReceipt = (GoodsReceipt) res.getEntityList().get(0);
                            double assessValueSup=0.0;
                            double dutyPerUnitSup=0.0;
                            double bedAmountSup=0.0;
                            double assessValueManu=0.0;
                            double dutyPerUnitManu=0.0;
                            double bedAmountManu=0.0;
                            int termType=0;
                            if(goodsReceipt!=null){
                                HashMap<String, Object> grRequestParams = new HashMap<String, Object>();
                                filter_names = new ArrayList();
                                filter_params = new ArrayList();
                                HashMap<String, Object> GoodsReceiptDetailParams = new HashMap<String, Object>();
                                filter_names.add("goodsReceipt.ID");
                                filter_params.add(goodsReceipt.getID());
                                grRequestParams.put("filter_names", filter_names);
                                grRequestParams.put("filter_params", filter_params);
                                KwlReturnObject grdresult = accGoodsReceiptobj.getGoodsReceiptDetails(grRequestParams);
                                List<GoodsReceiptDetail> goodsReceiptDetailList= grdresult.getEntityList();
                                GoodsReceiptDetailParams.put("GoodsReceiptDetailid", goodsReceiptDetailList.get(0).getID());
                                GoodsReceiptDetailParams.put("companyid", companyid);
                                KwlReturnObject grdDealerExciseresult = accGoodsReceiptobj.getDealerExciseDetails(GoodsReceiptDetailParams);
                                List<DealerExciseDetails> dealerExciseresultList = grdDealerExciseresult.getEntityList();

                                HashMap<String, Object> requestParams =new <String, Object> HashMap();
                                requestParams.put("dealerExciseDetailid", dealerExciseresultList.get(0).getId());
                                requestParams.put("companyid", companyid);
                                KwlReturnObject grdDealerExciseTermresult = accGoodsReceiptobj.getDealerExciseTermDetails(requestParams);
                                //LineLevelTerm instance from "DealerExciseTerm".
                                DealerExciseTerms dealerExciseTerms = (DealerExciseTerms) grdDealerExciseTermresult.getEntityList();
                                LineLevelTerms lnlt=dealerExciseTerms.getLineLevelTerm();
                                dutyPerUnitSup=lnlt.getPercentage();
                                dutyPerUnitManu=lnlt.getPercentage();
                                termType=lnlt.getTaxType();
                                assessValueSup=(dealerExciseresultList.get(0).getAssessableValue()!=null)?Double.parseDouble(dealerExciseresultList.get(0).getAssessableValue()):0;
                                if (termType == 1 && (assessValueSup * (dutyPerUnitSup / 100)) > 0) {
                                    bedAmountSup=(assessValueSup * (dutyPerUnitSup / 100));
                                } else if (termType == 0 && (row.getInventory().getQuantity() * dutyPerUnitSup) > 0) {
                                    bedAmountSup= grd.getInventory().getQuantity() * dutyPerUnitSup;
                                }
                                if(dealerExciseresultList.get(0)!=null && dealerExciseresultList.get(0).getRG23DEntryNumber() !=null ){
                                    companyRG3DNumber = dealerExciseresultList.get(0).getRG23DEntryNumber();
                                }
                                assessValueManu=(dealerExciseresultList.get(0).getManuAssessableValue()!=null)?Double.parseDouble(dealerExciseresultList.get(0).getManuAssessableValue()):0;
                                if (termType == 1 && (assessValueManu * (dutyPerUnitManu / 100)) > 0) {
                                    bedAmountManu=(assessValueManu * (dutyPerUnitManu / 100));
                                } else if (termType == 0 && (row.getInventory().getQuantity() * dutyPerUnitManu) > 0) {
                                    bedAmountManu= grd.getInventory().getQuantity() * dutyPerUnitManu;
                                }
                                totalDutyAmntSup+=bedAmountSup;
                                totalDutyAmntManu+=bedAmountManu;
                                totalassessablevalue += assessValueSup;
                                bodtotalamount += bedAmountSup;
                                
                                /*Table 4 Details*/
                                double dutyPerUnitAmountSup = totalDutyAmntSup;
                                if (grd != null && grd.getInventory() != null && grd.getInventory().getQuantity() != 0.0) {
                                    dutyPerUnitAmountSup = dutyPerUnitAmountSup / grd.getInventory().getQuantity();
                                }
                                double dutyPerUnitAmountMan = totalDutyAmntManu;
                                if (grd != null && grd.getInventory() != null && grd.getInventory().getQuantity() != 0.0) {
                                    dutyPerUnitAmountMan = dutyPerUnitAmountMan / grd.getInventory().getQuantity();
                                }
                                totalGRDexciseDutyAmount = totalDutyAmntSup;
                                purchaseRows.put("type", "Supplier");
                                purchaseRows.put("descOfGoods", descOfGoods);
                                purchaseRows.put("tariff", grd.getInventory().getProduct().getHSCode() != null ? grd.getInventory().getProduct().getHSCode() : "");// + " / " + grd.getInventory().getProduct().getHSCode()  /*Show only tariff name*/
                                purchaseRows.put("quantity", String.valueOf(grd.getInventory().getQuantity()) != null ? String.valueOf(grd.getInventory().getQuantity()) : "");
                                purchaseRows.put("assessValue", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(assessValueSup, 2,countryid)));
                                purchaseRows.put("bedAmount", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(bedAmountSup, 2,countryid)));
                                purchaseRows.put("totalDutyAmnt", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(totalDutyAmntSup, 2,countryid)));
                                purchaseRows.put("dutyPerUnit", CustomDesignHandler.getAmountinCommaDecimal(dutyPerUnitAmountSup, 2,countryid));
                                PurchaseInvDetailsListSup.add(purchaseRows);
                                purchaseRows = new HashMap<String, Object>();
                                if (!((supdetailMap.getNatureOfPurchase() != null && (supdetailMap.getNatureOfPurchase().getValue().equals(Constants.From_Agent_of_Manufacturer))) || (supdetailMap.getNatureOfPurchase() != null && (supdetailMap.getNatureOfPurchase().getValue().equals(Constants.Manufacturer_Depot))) || ((supdetailMap.getNatureOfPurchase() != null && (supdetailMap.getNatureOfPurchase().getValue().equals(Constants.Manufacturer)))))) {
                                    purchaseRows.put("type", "Manufacturer");
                                    purchaseRows.put("descOfGoods", descOfGoods);
                                    purchaseRows.put("tariff", grd.getInventory().getProduct().getHSCode() != null ? grd.getInventory().getProduct().getHSCode() : "");// + " / " + grd.getInventory().getProduct().getHSCode()  /*Show only tariff name*/
                                    purchaseRows.put("quantity", String.valueOf(grd.getInventory().getQuantity()) != null ? String.valueOf(grd.getInventory().getQuantity()) : "");
                                    purchaseRows.put("assessValue", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(assessValueManu, 2,countryid)));
                                    purchaseRows.put("bedAmount", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(bedAmountManu, 2,countryid)));
                                    purchaseRows.put("totalDutyAmnt", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(totalDutyAmntManu, 2,countryid)));
                                    purchaseRows.put("dutyPerUnit", CustomDesignHandler.getAmountinCommaDecimal(dutyPerUnitAmountMan, 2,countryid));
                                    PurchaseInvDetailsListManu.add(purchaseRows);
                                } 
                            }
                            
                            
                            
                            /*Table 2 Details*/
//                            descOfGoods = StringUtil.isNullOrEmpty(grd.getDescription()) ? StringUtil.isNullOrEmpty(grd.getInventory().getProduct().getDescription()) ? grd.getInventory().getProduct().getName() : grd.getInventory().getProduct().getDescription() : grd.getDescription();
                            descOfGoods = !StringUtil.isNullOrEmpty(grd.getInventory().getProduct().getProductName()) ? grd.getInventory().getProduct().getProductName():"";
                            Exrows.put("descofgood",descOfGoods);
                            Exrows.put("assessablevalue",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(assessValueSup, 2,countryid)));
                            Exrows.put("rateofbod",CustomDesignHandler.getAmountinCommaDecimal(dutyPerUnitSup, 2,countryid)+"%");
                            Exrows.put("bodamount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(bedAmountSup,2,countryid)));
                            Exrows.put("dutyperunittable3",grd.getInventory().getQuantity()>0? currsymb + " "+CustomDesignHandler.getAmountinCommaDecimal(bedAmountSup/grd.getInventory().getQuantity(), 2,countryid):"");
                            Exrows.put("companyrg3d",companyRG3DNumber);
                            ExcDetailsList.add(Exrows);
                            
                            /*
                             * Deciding the invoice title according to the
                             * dealer type
                             */
                            if (supdetailMap.getNatureOfPurchase() != null && (supdetailMap.getNatureOfPurchase().getValue().equals(Constants.Manufacturer_Importer) || supdetailMap.getNatureOfPurchase().getValue().contains(Constants.Manufacturer))) {
                                invTitle = Constants.First_Stage_Dealer;
                            } else if (supdetailMap.getNatureOfPurchase() != null && supdetailMap.getNatureOfPurchase().getValue().equals(Constants.First_Stage_Dealer)) {
                                invTitle = Constants.Second_Stage_Dealer;
                            } else if (supdetailMap.getNatureOfPurchase() != null && supdetailMap.getNatureOfPurchase().getValue().equals(Constants.Second_Stage_Dealer)) {
                                invTitle = Constants.Second_Stage_and_Subsequent_Dealer;
                            } else {
                                invTitle = invoiceTitle;
                            }
                        }
                    }
                }
            }
            if(!lineLevelTaxNames.isEmpty()){
            Iterator lineTax = lineLevelTaxNames.entrySet().iterator();
                while (lineTax.hasNext()) {
                    Map.Entry tax = (Map.Entry) lineTax.next();
                    double taxamount = (double) tax.getValue();
                    rows = new HashMap<String, Object>();
                    rows.put("taxname", tax.getKey());
                    rows.put("taxvalue", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(taxamount, 2,countryid)));
                    invTermDetailsList.add(rows);
                    TotalLineLevelTaxAmount += taxamount;
                }
            }
            boolean isLogoPresent = ExportRecordHandler.checkCompanyTemplateLogoPresent(company);
            if(isLogoPresent){
                ruleNo11Data.put("logo",  StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt());
            } else{
                ruleNo11Data.put("logo",  "");
            }
            ruleNo11Data.put("isLogoPresnt", isLogoPresent);
            overalltotalAmount = amountofItem + TotalLineLevelTaxAmount;
            String grdExciseamountsinwords = EnglishNumberToWordsOjb.convert(totalGRDexciseDutyAmount, currency, countryLanguageId) + " only.";
            amountsinwords = EnglishNumberToWordsOjb.convert(overalltotalAmount, currency, countryLanguageId) + " only.";
            vatamountinwords = EnglishNumberToWordsOjb.convert(totalVat, currency, countryLanguageId) + " only.";
            String exciseDutyAmountInWords=EnglishNumberToWordsOjb.convert(totalExcDutyAmount, currency, countryLanguageId) + " only.";
            String amountofdutyinwords=EnglishNumberToWordsOjb.convert(bodtotalamount, currency, countryLanguageId) + " only.";
            ruleNo11Data.put("ruleno11datasource",new JRBeanCollectionDataSource(invDetailsList));
            ruleNo11Data.put("invoicetaxdatasource",new JRBeanCollectionDataSource(invTermDetailsList));
            ruleNo11Data.put("subtotal",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(amountofItem, 2,countryid)));
           
            ruleNo11Data.put("BEDDataSource",new JRBeanCollectionDataSource(ExcDetailsList));
            PurchaseInvDetailsListSup.addAll(PurchaseInvDetailsListManu);
            ruleNo11Data.put("ManuImporterDataSource",new JRBeanCollectionDataSource(PurchaseInvDetailsListSup));/*Supplier / Dealer Details and Consignee / Manufacturer Details data for rule 11*/
            ruleNo11Data.put("companyname",isLogoPresent?"":companyname.toUpperCase());
            ruleNo11Data.put("compaddressline1",companyAdress);
            ruleNo11Data.put("compaddressline1",companyAdress);
            ruleNo11Data.put("exregno",excRegNo);
            ruleNo11Data.put("range",range);
            ruleNo11Data.put("division",division);
            ruleNo11Data.put("commissionerate",commissionRate);
            ruleNo11Data.put("vattin",vattinno);
            ruleNo11Data.put("cstno",cstno);
            ruleNo11Data.put("buyersname",buyerName);
            ruleNo11Data.put("buyersaddress",buyerAddress);
            ruleNo11Data.put("consigneename",ManuName);
            ruleNo11Data.put("consigneeaddress",ManuAddress);
            ruleNo11Data.put("buyerexregno",buyerexcRegNo);
            ruleNo11Data.put("buyertinno",buyetinNo);
            ruleNo11Data.put("buyerpanno",buyerpanNo);
            ruleNo11Data.put("buyerrange",buyerRange);
            ruleNo11Data.put("buyerdivision",buyerDivision);
            ruleNo11Data.put("buyercommissionerate",buyerComrate);
            ruleNo11Data.put("conexregno",ManuexcRegNo);
//            ruleNo11Data.put("continno",ManutinNo);
            ruleNo11Data.put("conrange",ManuRange);
            ruleNo11Data.put("condivision",ManuDivision);
            ruleNo11Data.put("concommissionerate",ManuComrate);
            ruleNo11Data.put("connotificationno",ManuNotificaionNo);
            ruleNo11Data.put("invoiceno",invoiceNo);
            ruleNo11Data.put("invoicedate",invoiceDate);
//            ruleNo11Data.put("buyersorderno",buyerOrderNo); //Removed as per ERP-26071
//            ruleNo11Data.put("ordernodate",buyerOrderDate); //Removed as per ERP-26071
            ruleNo11Data.put("delivernote",deliveryNote);
            ruleNo11Data.put("deliverynotedate",deliveryDate);
            ruleNo11Data.put("supplierref",suppliersRef);
            ruleNo11Data.put("dateandtimeofremovalofgood",dateNtimeOfRemovalofgoods);
            ruleNo11Data.put("motorvehicleno",motorVehicleNo);
            ruleNo11Data.put("timeofissueofinvoice",dateNtimeOfRemovalofgoods);
            ruleNo11Data.put("transportname",transportName);
            ruleNo11Data.put("modeofpayment",modeortermofpayment);
            ruleNo11Data.put("totalquantity",String.valueOf(totalQuantity));
            ruleNo11Data.put("amountsinwords",amountsinwords);
            ruleNo11Data.put("vatamountinwords",vatamountinwords);
            ruleNo11Data.put("amountofdutyinwords",amountofdutyinwords);
            ruleNo11Data.put("totalamount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(overalltotalAmount,2,countryid)));
            ruleNo11Data.put("bodtotalamount",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(bodtotalamount,2,countryid)));
            ruleNo11Data.put("totalassessablevalue",String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(totalassessablevalue,2,countryid)));
            //Manufacturer and dealer case is handled
            Map<String, Object> dealerConsiRows = new HashMap<String, Object>();
            if (StringUtil.isNullOrEmpty(request.getParameter("type"))) {
                ruleNo11Data.put("invoiceTitle",invoiceTitle);
                ruleNo11Data.put("despatchdocno",shipVia);
                ruleNo11Data.put("exciseamountinwords",exciseDutyAmountInWords);
                ruleNo11Data.put("destination",buyerState);
                ruleNo11Data.put("supplierrefdate",suppliersRefDate);
            } else {
                if (goodsReceipt != null) {
                    ruleNo11Data.put("despatchdocno", dispatchDocNo);
                    ruleNo11Data.put("invoiceTitle", invTitle);
                    KwlReturnObject exciseDetails = accGoodsReceiptobj.getExciseDetails(goodsReceipt.getID());
                    /***************/
                    HashMap<String, Object> grRequestParams = new HashMap<String, Object>();
                    filter_names = new ArrayList();
                    filter_params = new ArrayList();
                    HashMap<String, Object> GoodsReceiptDetailParams = new HashMap<String, Object>();
                    filter_names.add("goodsReceipt.ID");
                    filter_params.add(goodsReceipt.getID());
                    grRequestParams.put("filter_names", filter_names);
                    grRequestParams.put("filter_params", filter_params);
                    KwlReturnObject grdresult = accGoodsReceiptobj.getGoodsReceiptDetails(grRequestParams);
                    List<GoodsReceiptDetail> goodsReceiptDetailList= grdresult.getEntityList();
//                    for(GoodsReceiptDetail grDetails:goodsReceiptDetailList){
                    GoodsReceiptDetailParams.put("GoodsReceiptDetailid", goodsReceiptDetailList.get(0).getID());
                    GoodsReceiptDetailParams.put("companyid", companyid);
                    KwlReturnObject grdDealerExciseresult = accGoodsReceiptobj.getDealerExciseDetails(GoodsReceiptDetailParams);
                    List<DealerExciseDetails> dealerExciseresultList = grdDealerExciseresult.getEntityList();
                    /***************/
                    dealerManuDetails = exciseDetails.getEntityList();
                    /*Dealer data*/
                    for(ExciseDetailsInvoice exciseDetail:dealerManuDetails){
                        dealerConsiRows = new HashMap<String, Object>();
                        supplierName = exciseDetail.getSupplier();
                        dealerConsiRows.put("suppOfGoodS", supplierName);
                        dealerConsiRows.put("type", "Dealer");
                        dealerConsiRows.put("exciseRegNoS", exciseDetail.getSupplierExciseRegnNo());
                        dealerConsiRows.put("suppDealDivisiom", exciseDetail.getSupplierDivision());
                        dealerConsiRows.put("suppDealRange", exciseDetail.getSupplierRange());
                        dealerConsiRows.put("suppDealComRate", exciseDetail.getSupplierCommissioneRate());
                        String invoiceNumberWithDate = "";
                        if(exciseDetail.getGoodsreceipt() != null){
                            if(exciseDetail.getGoodsreceipt().getGoodsReceiptNumber() != null){
                                invoiceNumberWithDate +=exciseDetail.getGoodsreceipt().getGoodsReceiptNumber();
                            }
                            if(exciseDetail.getGoodsreceipt().getJournalEntry() != null && exciseDetail.getGoodsreceipt().getCreationDate()!=null ){
//                                invoiceNumberWithDate += "/ "+exciseDetail.getGoodsreceipt().getJournalEntry().getEntryDate().toString();
                                invoiceNumberWithDate += "/ "+exciseDetail.getGoodsreceipt().getCreationDate().toString();
                            }
                        }
                        dealerConsiRows.put("suppDealInvoice", invoiceNumberWithDate);
                        dealerConsiRows.put("suppDealRG23No", (dealerExciseresultList.size()>0)?dealerExciseresultList.get(0).getSupplierRG23DEntry():"");
                        dealerConsigneeList.add(dealerConsiRows);
                    }
                    /*Manufacturer data*/
                    for(ExciseDetailsInvoice exciseDetail:dealerManuDetails){
                        dealerConsiRows = new HashMap<String, Object>();
                        dealerConsiRows.put("suppOfGoodS", exciseDetail.getManufacturerName());
                        dealerConsiRows.put("type", "Manufacturer");
                        dealerConsiRows.put("exciseRegNoS", exciseDetail.getManufacturerExciseregnNo());
                        dealerConsiRows.put("suppDealDivisiom", exciseDetail.getManufacturerDivision());
                        dealerConsiRows.put("suppDealRange", exciseDetail.getManufacturerRange());
                        dealerConsiRows.put("suppDealComRate", exciseDetail.getManufacturerCommissionerate());
                        String invoiceNumberWithDate = "";
                        if(dealerExciseresultList.get(0) != null){
                            if(dealerExciseresultList.get(0).getInvoicenoManufacture() != null){
                                invoiceNumberWithDate +=dealerExciseresultList.get(0).getInvoicenoManufacture();
                            }
                            if(dealerExciseresultList.get(0).getInvoiceDateManufacture() != null){
                                invoiceNumberWithDate += "/ "+dealerExciseresultList.get(0).getInvoiceDateManufacture();
                            }
                        }
                        dealerConsiRows.put("suppDealInvoice", invoiceNumberWithDate);//exciseDetail.getInvoicenoManufacture()
                        dealerConsiRows.put("suppDealRG23No", (dealerExciseresultList.size()>0)?dealerExciseresultList.get(0).getPLARG23DEntry():"");
                        dealerConsigneeList.add(dealerConsiRows);
                    }
//                    }
                    ruleNo11Data.put("suppConsigneeDataSource",new JRBeanCollectionDataSource(dealerConsigneeList));
                    ruleNo11Data.put("amountofdutyinwordsforManuImporter", EnglishNumberToWordsOjb.convert(totalGRDexciseDutyAmount, currency, countryLanguageId) + " only.");
                    ruleNo11Data.put("original", "Original");
                    ruleNo11Data.put("BuyerOrTransporter", "(For Buyer)");
                } else {
                    ruleNo11Data.put("despatchdocno", dispatchDocNo);
                    ruleNo11Data.put("invoiceTitle", invTitle);
                    ruleNo11Data.put("original", "");
                    ruleNo11Data.put("BuyerOrTransporter", "");
                    dealerConsiRows = new HashMap<String, Object>();
                    dealerConsiRows.put("suppOfGoodS", "");
                    dealerConsiRows.put("type", "Manufacturer");
                    dealerConsiRows.put("exciseRegNoS", "");
                    dealerConsiRows.put("suppDealDivisiom", "");
                    dealerConsiRows.put("suppDealRange", "");
                    dealerConsiRows.put("suppDealComRate", "");
                    dealerConsiRows.put("suppDealInvoice", "");
                    dealerConsiRows.put("suppDealRG23No", "");
                    dealerConsigneeList.add(dealerConsiRows);
                    ruleNo11Data.put("suppConsigneeDataSource",new JRBeanCollectionDataSource(dealerConsigneeList));
                    ruleNo11Data.put("amountofdutyinwordsforManuImporter", "");
                }
            }
            if(IndiaComplianceConstants.SUPER_TECHNICAL_COMPANYID.equals(companyid)){
                Date invoiceDateForDeclaration = new Date();
                if(invoice != null && invoice.getCreationDate()!= null){
//                    invoiceDateForDeclaration = invoice.getJournalEntry().getEntryDate();
                    invoiceDateForDeclaration = invoice.getCreationDate();
                }
                
                declaration="Certified that the goods covered under this invoice were :- (A) Imported directly by us or Received" 
                        +" directly from M/s. ....................................... who have imported the goods (B) Received directly" 
                        +" from Factory/Depot/Consignment Agent/Authorized Premises of M/s. ...................................... (C)" 
                        +" Received from M/s. "+ supplierName+"  who are the First Stage Dealer of M/s. "+ supplierName+" Place : "
                        + ".............................. Date : "
                        + df.format(invoiceDateForDeclaration);
            }
            ruleNo11Data.put("declaration",declaration);
            ruleNo11Data.put("vatdeclaration",vatdeclaration);
            
            response.setHeader("Content-Disposition", "attachment;filename=" + "RuleNo11.pdf");
            JasperPrint jasperPrint = null;
            List salesInvoiceList = new ArrayList();
            OnlyDatePojo odp = new OnlyDatePojo();
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            odp.setDate(userdf.format(new Date()));
            salesInvoiceList.add(odp);
            JasperReport jasperReport = null;
            InputStream inputStream = null;
            
            if (StringUtil.isNullOrEmpty(request.getParameter("type"))) {
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/RuleNo11ExciseInvoice.jrxml");
            } else if (!StringUtil.isNullOrEmpty(request.getParameter("type")) && request.getParameter("type").equals("dealer")) {
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/RuleNo11DealerExciseInvoice.jrxml");
            }
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(salesInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, ruleNo11Data, beanColDataSource);
            list.add(jasperPrint);
            if(!StringUtil.isNullOrEmpty(request.getParameter("type")) && request.getParameter("type").equals("dealer")){
                InputStream inputStreamDuplicate = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/RuleNo11DealerExciseInvoice.jrxml");
                ruleNo11Data.put("original", "Duplicate");
                ruleNo11Data.put("BuyerOrTransporter", "(For Buyer)");
                JasperDesign jasperDesignDuplicate = JRXmlLoader.load(inputStreamDuplicate);
                JasperReport jasperReportDuplicate = JasperCompileManager.compileReport(jasperDesignDuplicate);
                JRBeanCollectionDataSource beanColDataSourceDuplicate = new JRBeanCollectionDataSource(salesInvoiceList);
                JasperPrint jasperPrintDuplicate = JasperFillManager.fillReport(jasperReportDuplicate, ruleNo11Data, beanColDataSourceDuplicate);
                list.add(jasperPrintDuplicate);
                InputStream inputStreamTriplicate = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/RuleNo11DealerExciseInvoice.jrxml");
                ruleNo11Data.put("original", "Triplicate");
                ruleNo11Data.put("BuyerOrTransporter", "(For Transporter)");
                JasperDesign jasperDesignTriplicate = JRXmlLoader.load(inputStreamTriplicate);
                JasperReport jasperReportTriplicate = JasperCompileManager.compileReport(jasperDesignTriplicate);
                JRBeanCollectionDataSource beanColDataSourceTriplicate = new JRBeanCollectionDataSource(salesInvoiceList);
                JasperPrint jasperPrintTriplicate = JasperFillManager.fillReport(jasperReportTriplicate, ruleNo11Data, beanColDataSourceTriplicate);
                list.add(jasperPrintTriplicate);
            }
        } catch (Exception ex) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    @Override
    public List<Object> exportRuleNo11JasperForPO(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> ruleNo11Data = new HashMap<String, Object>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            String companyname = !StringUtil.isNullOrEmpty(company.getCompanyName()) ? company.getCompanyName() : "";
            String vattinno = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getVatNumber()) ? extraCompanyPreferences.getVatNumber() : "";
            String cstno = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getCstNumber()) ? extraCompanyPreferences.getCstNumber() : "";
            String companyAdress = !StringUtil.isNullOrEmpty(CommonFunctions.getCompanyAddress(company)) ? CommonFunctions.getCompanyAddress(company) : "";
            String range = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getExciseRangeCode()) ? extraCompanyPreferences.getExciseRangeCode() : "";
            String division = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getExciseDivisionCode()) ? extraCompanyPreferences.getExciseDivisionCode() : "";
            String commissionRate = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getExciseCommissionerateCode()) ? extraCompanyPreferences.getExciseCommissionerateCode() : "";
            String excRegNo = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getEccNumber()) ? extraCompanyPreferences.getEccNumber() : "";
            String stateid = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getCompany().getState().getID()) ? extraCompanyPreferences.getCompany().getState().getID() : "";
            int countryid = 0;
            if(company != null && company.getCountry()!= null && !StringUtil.isNullOrEmpty(company.getCountry().getID())){
                countryid = Integer.parseInt(company.getCountry().getID());
            }
            String declaration = "";
            if (StringUtil.equalIgnoreCase(stateid, "4")) {
                declaration = "I/We hereby certify that my/our registration certificate under the Maharashtra Value Added Tax Act,"
                        + "2002 is in force on the date on which the sales of the goods specified in this Tax Invoice is made by "
                        + "me/us and that the transactions of sale covered by this Tax Invoice has been effected by me/us and it "
                        + "shall be accounted for in the turnover of sales while filing of return and the due tax, if any payable on the sale has been paid or shall be paid.";
            } else {
                declaration = "This is to certify that the price declared herein is as per section 4 of The Central Excise Act. & "
                        + "that the amount indicated in the document represents the price actually charged by us and that there "
                        + "is no additional consideration weight directly or indirectly from the goods that has been declared & "
                        + "if any, differential duty shall be paid. if payable.";
            }
            String invoiceNo = "";
            java.util.Date invoiceDate = null;
            String amountsinwords = "";
            String vatamountinwords = "";
            String totalAmount = "";
            double bodtotalamount = 0;
            double totalassessablevalue = 0;

            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            KwlReturnObject idresult = null;
            String purchaseOrderId = request.getParameter("purchaseOrderId");
            ArrayList order_by = new ArrayList(), order_type = new ArrayList();
            KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(PurchaseOrder.class.getName(), purchaseOrderId);
            PurchaseOrder purchaseOrder = (PurchaseOrder) cap.getEntityList().get(0);
            HashMap<String, Object> poRequestParams = new HashMap<String, Object>();
            filter_names.add("purchaseOrder.ID");
            filter_params.add(purchaseOrder.getID());
            order_by.add("srno");
            order_type.add("asc");
            poRequestParams.put("filter_names", filter_names);
            poRequestParams.put("filter_params", filter_params);
            poRequestParams.put("order_by", order_by);
            poRequestParams.put("order_type", order_type);
            idresult = accPurchaseOrderobj.getPurchaseOrderDetails(poRequestParams);
            invoiceNo = purchaseOrder.getPurchaseOrderNumber();
            invoiceDate = purchaseOrder.getOrderDate();
            Iterator itr = null;
            itr = idresult.getEntityList().iterator();
            String descOfGoods = "";
            String tariforhsnclass = "";
            String quantity = "";
            double rate = 0;
            String per = "";
            String amount = "";
            String srno = "";
            int count = 1;
            double amountofItem = 0;
            double totalInvoiceAmount = 0;
            double overalltotalAmount = 0;
            double totalQuantity = 0;
            ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();
            ArrayList< Map<String, Object>> ExcDetailsList = new ArrayList< Map<String, Object>>();
            ArrayList< Map<String, Object>> ExtraDetailsList = new ArrayList< Map<String, Object>>();
            Map<String, Object> rows = new HashMap<String, Object>();
            Map<String, Object> Exrows = new HashMap<String, Object>();
            double excisePercent = 0;
            double vatPercent = 0;
            double cstPercent = 0;
            double kkcPercent = 0;
            double sbcPercent = 0;

            boolean isCformApplicable = false;
            double totalExcDutyAmount = 0;
            double totalvatamount = 0;
            int countryLanguageId = Constants.CountryIndiaLanguageId;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String currsymb = "";
            currsymb = currency.getHtmlcode() != null ? currency.getHtmlcode() : "";
            while (itr.hasNext()) {
                double FlatexciseDutyAmount = 0;
                int exciseDutyType = 1;
                rows = new HashMap<String, Object>();
                Exrows = new HashMap<String, Object>();
                PurchaseOrderDetail row = null;
                row = (PurchaseOrderDetail) itr.next();
                HashMap<String, Object> PurchaseReturnDetailParams = new HashMap();
                PurchaseReturnDetailParams.put("podetails", row.getID());
                PurchaseReturnDetailParams.put("productid", row.getProduct().getID());
                KwlReturnObject prdTermMapresult = accPurchaseOrderobj.getPurchaseOrderDetailsTermMap(PurchaseReturnDetailParams);

                List<PurchaseOrderDetailsTermMap> PurchaseReturnDetailTermsMapList = prdTermMapresult.getEntityList();
                for (PurchaseOrderDetailsTermMap purchaseReturnDetailTermMap : PurchaseReturnDetailTermsMapList) {
                    if (purchaseReturnDetailTermMap.getTerm() != null && purchaseReturnDetailTermMap.getTerm().getTermType() == 2) {
                        excisePercent += purchaseReturnDetailTermMap.getTerm().getPercentage();
                        exciseDutyType = purchaseReturnDetailTermMap.getTaxType();
                        FlatexciseDutyAmount = purchaseReturnDetailTermMap.getTerm().getTermAmount();
                    } else if (purchaseReturnDetailTermMap.getTerm() != null && purchaseReturnDetailTermMap.getTerm().getTermType() == 1) {
                        vatPercent += purchaseReturnDetailTermMap.getTerm().getPercentage();
                    } else if (purchaseReturnDetailTermMap.getTerm() != null && purchaseReturnDetailTermMap.getTerm().getTermType() == 3) {
                        cstPercent += purchaseReturnDetailTermMap.getTerm().getPercentage();
                    } else if (purchaseReturnDetailTermMap.getTerm() != null && purchaseReturnDetailTermMap.getTerm().getTermType() == 5) {
                        kkcPercent += purchaseReturnDetailTermMap.getTerm().getPercentage();
                    } else if (purchaseReturnDetailTermMap.getTerm() != null && purchaseReturnDetailTermMap.getTerm().getTermType() == 6) {
                        sbcPercent += purchaseReturnDetailTermMap.getTerm().getPercentage();
                    }
                }
                per = row.getProduct().getUnitOfMeasure() != null ? row.getProduct().getUnitOfMeasure().getNameEmptyforNA() : "";
                String excideDutyText = "";
                String rateOfBedText = "";
                double exciseDutyAmount = 0;
                amountofItem = row.getQuantity() * row.getRate();
                if (exciseDutyType == 1) {
                    excideDutyText = "Basic Excise Duty @" + excisePercent + "%";
                    exciseDutyAmount = amountofItem * (excisePercent / 100);
                    rateOfBedText = excisePercent + " %";
                } else if (exciseDutyType == 0) {
                    excideDutyText = "Basic Excise Duty @ Rs." + FlatexciseDutyAmount + "Per " + per;
                    exciseDutyAmount = row.getQuantity() * FlatexciseDutyAmount;
                    rateOfBedText = "Rs " + FlatexciseDutyAmount + " per " + row.getQuantity() + " " + per;
                }
                srno = String.valueOf(count++);
                descOfGoods = StringUtil.isNullOrEmpty(row.getDescription()) ? StringUtil.isNullOrEmpty(row.getProduct().getDescription()) ? row.getProduct().getName() : row.getProduct().getDescription() : row.getDescription();
                tariforhsnclass = row.getProduct().getHSCode() != null ? row.getProduct().getTariffName() + " / " + row.getProduct().getHSCode() : "";
                quantity = String.valueOf(row.getQuantity()) != null ? String.valueOf(row.getQuantity()) : "";
                totalQuantity += row.getQuantity();
                rate = row.getRate() != 0 ? row.getRate() : 0;
                rows.put("srno", String.valueOf(srno));
                rows.put("descofgoods", descOfGoods);
                rows.put("tarifforhsnclass", tariforhsnclass);
                rows.put("quantity", String.valueOf(quantity));
                rows.put("rate", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(rate, 2,countryid)));
                rows.put("per", per);
                rows.put("amount", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(amountofItem, 2,countryid)));
                invDetailsList.add(rows);
                totalInvoiceAmount += amountofItem;

                rows = new HashMap<String, Object>();
                rows.put("srno", "");
                rows.put("descofgoods", excideDutyText);
                rows.put("tarifforhsnclass", "");
                rows.put("quantity", "");
                rows.put("rate", "");
                rows.put("per", " ");
                rows.put("amount", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(exciseDutyAmount, 2,countryid)));
                totalExcDutyAmount += exciseDutyAmount;
                invDetailsList.add(rows);

                if (sbcPercent > 0) {
                    double sbcAmount=0;
                    sbcAmount=amountofItem*(sbcPercent/100);
                    exciseDutyAmount+=sbcAmount;
                    rows = new HashMap<String, Object>();
                    rows.put("srno", "");
                    rows.put("descofgoods", "Swachh Bharat Cess@"+sbcPercent);
                    rows.put("tarifforhsnclass", "");
                    rows.put("quantity", "");
                    rows.put("rate", "");
                    rows.put("per", " ");
                    rows.put("amount", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(sbcAmount, 2,countryid)));
                    invDetailsList.add(rows);
                }
                
                if (kkcPercent > 0) {
                    double kkcAmount=0;
                    kkcAmount=amountofItem*(kkcPercent/100);
                    exciseDutyAmount+=kkcAmount;
                    rows = new HashMap<String, Object>();
                    rows.put("srno", "");
                    rows.put("descofgoods", "Krishi Kalyan Cess@"+kkcPercent);
                    rows.put("tarifforhsnclass", "");
                    rows.put("quantity", "");
                    rows.put("rate", "");
                    rows.put("per", " ");
                    rows.put("amount", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(kkcAmount, 2,countryid)));
                    invDetailsList.add(rows);
                }
                rows = new HashMap<String, Object>();
                rows.put("srno", "");
                rows.put("tarifforhsnclass", "");
                rows.put("per", " ");
                rows.put("quantity", "");

                double temp = 0;
                if (extraCompanyPreferences.isEnableVatCst()) {
                    rows.put("rate", "");
                    rows.put("amount", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal((amountofItem + exciseDutyAmount) * (vatPercent / 100), 2,countryid)));
                    rows.put("descofgoods", "Output VAT @ " + vatPercent + "%");
                    temp = (amountofItem + exciseDutyAmount) * (vatPercent / 100);
                } else {
                    isCformApplicable = row.getPurchaseOrder().getVendor().isCformapplicable();
                    if (!isCformApplicable) {
                        temp = (amountofItem + exciseDutyAmount) * (vatPercent / 100);
                        rows.put("rate", "");
                        rows.put("amount", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(temp, 2,countryid)));
                        rows.put("descofgoods", "Output CST @ " + vatPercent + "%");
                    } else {
                        temp = (amountofItem + exciseDutyAmount) * (cstPercent / 100);
                        rows.put("rate", "");
                        rows.put("amount", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(temp, 2,countryid)));
                        rows.put("descofgoods", "Output CST @ " + cstPercent + "%");
                    }
                }
                totalvatamount += temp;
                invDetailsList.add(rows);

                Exrows.put("descofgood", descOfGoods);
                Exrows.put("assessablevalue", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(amountofItem, 2,countryid)));
                Exrows.put("rateofbod", rateOfBedText);
                Exrows.put("bodamount", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(exciseDutyAmount, 2,countryid)));
                ExcDetailsList.add(Exrows);

                overalltotalAmount += amountofItem + exciseDutyAmount + temp;
                totalassessablevalue += amountofItem;
                bodtotalamount += exciseDutyAmount;

                excisePercent = 0;
                vatPercent = 0;
                cstPercent = 0;
            }
            amountsinwords = EnglishNumberToWordsOjb.convert(overalltotalAmount, currency, countryLanguageId) + " only.";
            vatamountinwords = EnglishNumberToWordsOjb.convert(totalvatamount, currency, countryLanguageId) + " only.";
            String amountofdutyinwords = EnglishNumberToWordsOjb.convert(totalExcDutyAmount, currency, countryLanguageId) + " only.";
            ruleNo11Data.put("ruleno11datasource", new JRBeanCollectionDataSource(invDetailsList));

            ruleNo11Data.put("BEDDataSource", new JRBeanCollectionDataSource(ExcDetailsList));

            ruleNo11Data.put("companyname", companyname);
            ruleNo11Data.put("declaration", declaration);
            ruleNo11Data.put("compaddressline1", companyAdress);
            ruleNo11Data.put("compaddressline1", companyAdress);
            ruleNo11Data.put("exregno", excRegNo);
            ruleNo11Data.put("range", range);
            ruleNo11Data.put("division", division);
            ruleNo11Data.put("commissionerate", commissionRate);
            ruleNo11Data.put("vattin", vattinno);
            ruleNo11Data.put("cstno", cstno);
            ruleNo11Data.put("buyersname", "");
            ruleNo11Data.put("buyersaddress", "");
            ruleNo11Data.put("consigneename", "");
            ruleNo11Data.put("consigneeaddress", "");
            ruleNo11Data.put("buyerexregno", "");
            ruleNo11Data.put("buyertinno", "");
            ruleNo11Data.put("buyerrange", "");
            ruleNo11Data.put("buyerdivision", "");
            ruleNo11Data.put("buyercommissionerate", "");
            ruleNo11Data.put("conexregno", "");
            ruleNo11Data.put("continno", "");
            ruleNo11Data.put("conrange", "");
            ruleNo11Data.put("condivision", "");
            ruleNo11Data.put("concommissionerate", "");
            ruleNo11Data.put("connotificationno", "");
            ruleNo11Data.put("invoiceno", invoiceNo);
            ruleNo11Data.put("invoicedate", invoiceDate.toString());
            ruleNo11Data.put("buyersorderno", "");
            ruleNo11Data.put("ordernodate", "");
            ruleNo11Data.put("delivernote", "");
            ruleNo11Data.put("deliverynotedate", "");
            ruleNo11Data.put("supplierref", "");
            ruleNo11Data.put("despatchdocno", "");
            ruleNo11Data.put("dateandtimeofremovalofgood", "");
            ruleNo11Data.put("motorvehicleno", "");
            ruleNo11Data.put("timeofissueofinvoice", "");
            ruleNo11Data.put("transportname", "");
            ruleNo11Data.put("modeofpayment", "");
            ruleNo11Data.put("totalquantity", String.valueOf(totalQuantity));
            ruleNo11Data.put("amountsinwords", amountsinwords);
            ruleNo11Data.put("vatamountinwords", vatamountinwords);
            ruleNo11Data.put("amountofdutyinwords", amountofdutyinwords);
            ruleNo11Data.put("totalamount", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(overalltotalAmount, 2,countryid)));
            ruleNo11Data.put("bodtotalamount", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(bodtotalamount, 2,countryid)));
            ruleNo11Data.put("totalassessablevalue", String.valueOf(currsymb + " " + CustomDesignHandler.getAmountinCommaDecimal(totalassessablevalue, 2,countryid)));
            response.setHeader("Content-Disposition", "attachment;filename=" + "RuleNo11.pdf");
            JasperPrint jasperPrint = null;
            List salesInvoiceList = new ArrayList();
            OnlyDatePojo odp = new OnlyDatePojo();
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            odp.setDate(userdf.format(new Date()));
            salesInvoiceList.add(odp);
            JasperReport jasperReport = null;
            InputStream inputStream = null;
            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/RuleNo11ExciseInvoice.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(salesInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, ruleNo11Data, beanColDataSource);
            list.add(jasperPrint);
        } catch (Exception ex) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    @Override
    public List<Object> exportDefaultRFQ(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportDefaultRFQ(JSONObject jsonObj) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public List<Object> exportSwatowPurchaseOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List exportCashReceipt(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException, JSONException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Object> exportSalesOrderForHINSITSU(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private class OrderByComparator implements Comparator<VHQquotationTable2> {

        @Override
        public int compare(VHQquotationTable2 o1, VHQquotationTable2 o2) {
            VHQquotationTable2 f1 = (VHQquotationTable2) o1;
            VHQquotationTable2 f2 = (VHQquotationTable2) o2;
            int i = f1.getCategory().compareTo(f2.getCategory());
            int j = f1.getSubcategory().compareTo(f2.getSubcategory());

            int retStatus = 0;
            if (i < 0) {
                retStatus = -1;
            } else if (i > 0) {
                retStatus = 1;
            } else {
                if (j < 0) {
                    retStatus = -1;
                } else if (j > 0) {
                    retStatus = 1;
                }
            }
            return retStatus;
        }
    }

    @Override
    public List<Object> exportPacificTecDeliveryOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                JSONArray DataJArr = new JSONArray();
                Map<String, Object> deliveryOrderMap = new HashMap<String, Object>();
                String view = "pacificTecDeliveryOrder";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                java.util.Locale currentLocale = java.util.Locale.US;
                NumberFormat nf = NumberFormat.getNumberInstance(currentLocale);
                nf.setMinimumFractionDigits(2);
                nf.setMaximumFractionDigits(2);
                nf.setGroupingUsed(true);
                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                DecimalFormat quantityFormat = new DecimalFormat("0");
                DateFormat formatter = authHandler.getUserDateFormatterWithoutTimeZone(request);
                   
//        String billid = request.getParameter("bills");
                int templateflag = request.getParameter("templateflag") != null ? Integer.parseInt(request.getParameter("templateflag")) : 0;
                DeliveryOrderJasper deliveryOrderJasper = new DeliveryOrderJasper();
                PacificTecAddressTable deliveryOrderTable1 = new PacificTecAddressTable();

                ArrayList<DeliveryOrderJasper> deliveryOrderList = new ArrayList<DeliveryOrderJasper>();
                ArrayList<PacificTecAddressTable> deliveryOrderTable1List = new ArrayList<PacificTecAddressTable>();
                ArrayList<DeliveryOrderTable2> deliveryOrderTable2List = new ArrayList<DeliveryOrderTable2>();
                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    String invno = "";
                    Date entryDate = null;
                    String customerEmail = "";
                    String customerName = "";
                    String customerAdd = "";
                    String customerPhone = "";
                    String attn = "";
                    String billTo = "";
                    String shipTo = "";
                    String memo = "";
                    String orderID = "";
                    String status = "";
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String terms = "";
               
                    String Invref = "";
                    String SOref = "";
                    String QouteRef = "";

                    DeliveryOrder deliveryOrder = null;
                    deliveryOrder = (DeliveryOrder) kwlCommonTablesDAOObj.getClassObject(DeliveryOrder.class.getName(), billid);
                    invno = deliveryOrder.getDeliveryOrderNumber();
                    entryDate = deliveryOrder.getOrderDate();
                    status = deliveryOrder.getStatus() != null ? deliveryOrder.getStatus().getValue() : "";
                    customerName = deliveryOrder.getCustomer().getName() != null ? deliveryOrder.getCustomer().getName() : "";
                    
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    addressParams.put("customerid", deliveryOrder.getCustomer().getID());
                    CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    addressParams.put("isBillingAddress", false);    //false to get shipping address
                    CustomerAddressDetails customerShippingAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    String billtoAttnContact = "";
                    String shiptoAttnContact = "";
                    if (customerAddressDetails != null) {
                        attn = StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : customerAddressDetails.getContactPerson();
                        customerPhone = (customerAddressDetails.getPhone() != null ? customerAddressDetails.getPhone() : "");
                        customerEmail = (customerAddressDetails.getEmailID() != null ? customerAddressDetails.getEmailID() : "");
                        billtoAttnContact = StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : "\nContact Number : "+customerAddressDetails.getContactPerson();
                        shiptoAttnContact = StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : "\nContact Number : "+customerShippingAddressDetails.getContactPerson();
                    }
                    
                    if (templateflag == Constants.senwan_tech_templateflag) {
                        shipTo = deliveryOrder.getBillingShippingAddresses()!=null?CommonFunctions.getBillingShippingAddressForSenwanTec(deliveryOrder.getBillingShippingAddresses(), false):accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams);
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        billTo = deliveryOrder.getBillingShippingAddresses()!=null?CommonFunctions.getBillingShippingAddressForSenwanTec(deliveryOrder.getBillingShippingAddresses(), true):accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams);
                    } else {
                        shipTo = deliveryOrder.getBillingShippingAddresses()!=null?CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), false):accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        billTo = deliveryOrder.getBillingShippingAddresses()!=null?CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), true):accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        shipTo = templateflag==Constants.pacific_tec_templateflag?(shipTo + shiptoAttnContact):shipTo;
                        billTo = templateflag==Constants.pacific_tec_templateflag?(billTo + billtoAttnContact):billTo;
                    }
                    memo = deliveryOrder.getMemo() != null ? deliveryOrder.getMemo() : "";
                    shipDate = deliveryOrder.getShipdate();
                    shipvia = deliveryOrder.getShipvia() != null ? deliveryOrder.getShipvia() : "";
                    fob = deliveryOrder.getFob() != null ? deliveryOrder.getFob() : "";
                    orderID = deliveryOrder.getID();
                    terms = deliveryOrder.getCustomer().getCreditTerm() != null ? deliveryOrder.getCustomer().getCreditTerm().getTermname() : "";
                    String approverName = "";
                    if (deliveryOrder.getCreatedby() != null) {
                        approverName = StringUtil.getFullName(deliveryOrder.getCreatedby());
                    }
                    deliveryOrderJasper.setAttn(attn);
                    deliveryOrderJasper.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                    deliveryOrderJasper.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    deliveryOrderJasper.setDate(df.format(entryDate));
                    deliveryOrderJasper.setDonumber(invno);
                    deliveryOrderJasper.setName(customerName);
                    deliveryOrderTable1.setBillto(customerName + "<br>" + billTo.replaceAll("\n", "<br>"));
                    deliveryOrderJasper.setPhone(customerPhone);
                    deliveryOrderJasper.setEmail(customerEmail);
                    deliveryOrderTable1.setShipto(shipTo.replaceAll("\n", "<br>"));
                    deliveryOrderJasper.setMemo(memo.replaceAll("\n", "<br>"));
                    deliveryOrderJasper.setPreparedby(approverName);


                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Delivery_Order_ModuleId, 0, 1));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    KwlReturnObject idcustresult = accountingHandlerDAOobj.getObject(DeliveryOrderCustomData.class.getName(), deliveryOrder.getID());
                    if (idcustresult.getEntityList().get(0) != null && idcustresult.getEntityList().size() > 0) {
                        DeliveryOrderCustomData jeCustom = (DeliveryOrderCustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
//                        if (customFieldMap.containsKey(varEntry.getKey())) {
//                            FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
//                            if (fieldComboData != null) {
//                                String Label = varEntry.getKey();
//                                String Value = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
//                            }
//                        } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
//                            String Label = varEntry.getKey();
//                            String Value = df.format(Long.parseLong(coldata));
//                        } else {
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                if ((varEntry.getKey().split("_")[1]).equals("Delivery Mode")) {
                                    deliveryOrderTable1.setDeliverymode(coldata);
                                }
                                if ((varEntry.getKey().split("_")[1]).equals("Shipping Term")) {
                                    deliveryOrderTable1.setShippingterm(coldata);
                                }
                            }
                        }
                    }
                    deliveryOrderTable1.setName(customerName);
                    deliveryOrderTable1.setBillto(customerName + "<br>" + billTo.replaceAll("\n", "<br>"));
                    deliveryOrderTable1.setShipto(customerName + "<br>" + shipTo.replaceAll("\n", "<br>"));
                    deliveryOrderTable1.setPono("");
                    deliveryOrderTable1.setTerms(terms);
                    deliveryOrderTable1.setDeliverymode(fob != null ? fob : "");
                    deliveryOrderTable1.setShippingterm(shipvia != null ? shipvia : "");
                    deliveryOrderTable1.setDate(shipDate != null ? df.format(shipDate) : "");
                    deliveryOrderTable1.setDuedate(df.format(entryDate));
                    deliveryOrderTable1List.add(deliveryOrderTable1);
                    deliveryOrderMap.put("DeliveryOrderTable1", new JRBeanCollectionDataSource(deliveryOrderTable1List));

                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    order_by.add("srno");
                    order_type.add("asc");
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    filter_names.add("deliveryOrder.ID");
                    filter_params.add(orderID);
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);

                    idresult = accInvoiceDAOobj.getDeliveryOrderDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();
                    int i = 0;
                    String docids="";
                    double itemscount= 0;
                    while (itr.hasNext()) {
                        i++;
                        DeliveryOrderTable2 deliveryOrderTable2 = new DeliveryOrderTable2();
                        String prodName = "";
                        String serial = "";
                        String prodcode = "";
                        String prodDesc = "";
                        double quantity = 0, deliverdQuantity = 0;
                        String uom = "";
                        String linkTo = "-";
                     
                        DeliveryOrderDetail row = (DeliveryOrderDetail) itr.next();
                        prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                            prodDesc = row.getDescription();
                        } else {
                            if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                prodDesc = row.getProduct().getDescription();
                            }
                        }
                        quantity = row.getActualQuantity();
                        deliverdQuantity = row.getDeliveredQuantity();
                        uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                        /*
                         * to get the linking information upto 2-3 levels (Mayur
                         * B).
                         */
                        if (row.getCidetails() != null) {
                            Invref = row.getCidetails().getInvoice().getInvoiceNumber();
                            if (row.getCidetails().getSalesorderdetail() != null) {
                                SOref = row.getCidetails().getSalesorderdetail().getSalesOrder().getSalesOrderNumber();
                                if (row.getCidetails().getSalesorderdetail().getQuotationDetail() != null) {
                                    QouteRef = row.getCidetails().getSalesorderdetail().getQuotationDetail().getQuotation().getquotationNumber();
                                }
                            }
                            if (row.getCidetails().getQuotationDetail() != null) {
                                QouteRef = row.getCidetails().getQuotationDetail().getQuotation().getquotationNumber();
                            }
                        } else if (row.getSodetails() != null) {
                            SOref = row.getSodetails().getSalesOrder().getSalesOrderNumber();
                            if (row.getSodetails().getQuotationDetail() != null) {
                                QouteRef = row.getSodetails().getQuotationDetail().getQuotation().getquotationNumber();
                            }
                        }
                        
                        deliveryOrderTable2.setSno(Integer.toString(i));
                        deliveryOrderTable2.setCisono(linkTo);
                        deliveryOrderTable2.setProductname(prodName);
                        deliveryOrderTable2.setDesc(prodDesc.replaceAll("\n", "<br>"));
                        if (templateflag == Constants.senwan_tech_templateflag) {
                            deliveryOrderTable2.setQty(nf.format(deliverdQuantity));
                        }  else {
                            deliveryOrderTable2.setQty(quantityFormat.format(deliverdQuantity));
                        }
                        deliveryOrderTable2.setUom(uom);
//                deliveryOrderTable2.setDelqty(nf.format(deliverdQuantity) + " " + uom);
                        deliveryOrderTable2List.add(deliveryOrderTable2);
                    }

                    if (templateflag == Constants.senwan_tech_templateflag) {
                        deliveryOrderJasper.setDate(df.format(entryDate));
                        deliveryOrderJasper.setDonumber(invno);
                        deliveryOrderJasper.setName(customerName);
                        deliveryOrderJasper.setAddress(billTo.replaceAll("\n", "<br>"));
                        deliveryOrderJasper.setQuoteno(QouteRef);
                    }
                    deliveryOrderList.add(deliveryOrderJasper);
                    deliveryOrderMap.put("DeliveryOrderTable2", new JRBeanCollectionDataSource(deliveryOrderTable2List));
                    String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    String header = StorageHandler.GetDocStorePath() + companyid + "_header" + FileUploadHandler.getCompanyImageExt();
                    String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    deliveryOrderMap.put("logo", logo);
                    deliveryOrderMap.put("header", header);
                    deliveryOrderMap.put("footer", footer);
                    deliveryOrderMap.put("format", "pdf");
//            deliveryOrderMap.put("datasource", new JRBeanCollectionDataSource(deliveryOrderList));

                    response.setHeader("Content-Disposition", "attachment;filename=" + "DeliveryOrder.pdf");
                    try {
                        InputStream inputStream = null;
                        if (templateflag == Constants.senwan_tech_templateflag) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SenwanTecDeliveryOrder.jrxml");
                        }else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PacificTecDeliveryOrder.jrxml");
                        }
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(deliveryOrderList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, deliveryOrderMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                } catch (ServiceException ex) {
                    Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportDiamondAviationCustomerQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public List<Object> exportVHQSalesOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String SOID = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                SOID = s;
                if (StringUtil.isNullOrEmpty(SOID)) {
                    SOID = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                JSONArray DataJArr = new JSONArray();
                Map<String, Object> salesOrderMap = new HashMap<String, Object>();
                String view = "VHQSalesOrder";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                java.util.Locale currentLocale = java.util.Locale.US;
                NumberFormat nf = NumberFormat.getNumberInstance(currentLocale);
                nf.setMinimumFractionDigits(2);
                nf.setMaximumFractionDigits(2);
                nf.setGroupingUsed(true);

                ArrayList<VHQSalesOrder> vhqSalesOrderOrderList = new ArrayList<VHQSalesOrder>();
                ArrayList<VHQSalesOrderTable1> vhqSalesOrderTable1List = new ArrayList<VHQSalesOrderTable1>();
                ArrayList<VHQSalesOrderTable2> vhqSalesOrderTable2List = new ArrayList<VHQSalesOrderTable2>();

                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    KWLCurrency currency = null;
//            String SOID = request.getParameter("bills");
                    KwlReturnObject soObj1 = accountingHandlerDAOobj.getObject(SalesOrder.class.getName(), SOID);
                    SalesOrder soObj = (SalesOrder) soObj1.getEntityList().get(0);
                    VHQSalesOrder salesOrder = new VHQSalesOrder();
                    currency = soObj.getCurrency();
                    DateFormat df = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                    String soDate = authHandler.getDateOnlyFormat(request).format(soObj.getOrderDate());
                    Date sdate = soObj.getOrderDate();
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(sdate);
                    String formatedDate = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" + cal.get(Calendar.DATE);
                    salesOrder.setDate(formatedDate);

                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Customer.class.getName(), soObj.getCustomer().getID().toString());
                    Customer customer = (Customer) objItr.getEntityList().get(0);
                    salesOrder.setClient(customer.getName() != null ? customer.getName() : "");
                    salesOrder.setContact(soObj.getSalesperson() != null ? soObj.getSalesperson().getValue() : "");

                    HashMap requestParams = getSalesOrdersMap(request);
                    Iterator itrRow = soObj.getRows().iterator();
                    double amount = 0, totalDiscount = 0, discountPrice = 0;
                    double rowTaxAmountTotal = 0;
                    int i = 0;
                    java.util.Date entryDate = null;
                    double total = 0;
                    int aq = 0;
                    int q = 0;
                    String quotationNo = "";
                    String prNo = "";
                    Date shipDate = null;
                    while (itrRow.hasNext()) {
                        SalesOrderDetail row = (SalesOrderDetail) itrRow.next();
                        i++;
                        JSONObject obj = new JSONObject();
                        Product prod = row.getProduct();
                        VHQSalesOrderTable1 so = new VHQSalesOrderTable1();
                        so.setSno(Integer.toString(i));
                        String prodCode = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                        String prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        String desc = "";
                        if (StringUtil.isNullOrEmpty(row.getDescription())) {
                            desc = row.getProduct().getDescription() != null ? row.getProduct().getDescription() : "";
                        } else {
                            desc = row.getDescription() != null ? row.getDescription() : "";
                        }
                        so.setProduct(desc);
                        int quantity1 = (int) (row.getQuantity());
                        so.setQuantity(Integer.toString(quantity1));
                        double rate = 0;
                        rate = row.getRate();
                        so.setRate(currency.getSymbol() + " " + nf.format(rate));
                        String uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                        so.setUnit(uom);
                        double quantity = row.getQuantity();
                        q += quantity1;
                        double discountQuotation = (row.getDiscountispercent() == 1) ? rate * quantity * row.getDiscount() / 100 : row.getDiscount();
                        double amount1 = 0;
                        amount1 = authHandler.round(rate * quantity,companyid);
                        if (discountQuotation != 0) {
                            amount1 -= discountQuotation;
                        }
                        so.setAmount(currency.getSymbol() + " " + nf.format(amount1));
                        amount += amount1;
                        rowTaxAmountTotal += row.getRowTaxAmount();

                        vhqSalesOrderTable1List.add(so);
                    }
                    salesOrderMap.put("SalesOrderTable1Data", new JRBeanCollectionDataSource(vhqSalesOrderTable1List));

                    if (soObj.getDiscount() != 0) {
                        if (soObj.isPerDiscount()) {
                            totalDiscount = amount * soObj.getDiscount() / 100;
                            amount = amount - totalDiscount;
                        } else {
                            amount = amount - soObj.getDiscount();
                            totalDiscount = soObj.getDiscount();
                        }
                        //                      obj.put("discounttotal", poObj.getDiscount());
                    } else {
                        //                      obj.put("discounttotal", 0);
                    }

                    double taxPercent = 0;
                    if (soObj.getTax() != null) {
                        requestParams.put("transactiondate", soObj.getOrderDate());
                        requestParams.put("taxid", soObj.getTax().getID());
                        KwlReturnObject result3 = accTaxObj.getTax(requestParams);
                        List taxList = result3.getEntityList();
                        Object[] taxObj = (Object[]) taxList.get(0);
                        taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                    }
                    double orderAmount = amount;
                    double ordertaxamount = (taxPercent == 0 ? 0 : orderAmount * taxPercent / 100);
                    double totalTermAmount = 0;

                    HashMap<String, Object> requestParam = new HashMap();
                    requestParam.put("salesOrder", soObj.getID());
                    KwlReturnObject curresult = null;
                    curresult = accSalesOrderDAOobj.getSalesOrderTermMap(requestParam);
                    List<SalesOrderTermMap> termMap = curresult.getEntityList();
                    for (SalesOrderTermMap salesOrderTermMap : termMap) {
                        VHQSalesOrderTable2 vhqSalesOrderTable2 = new VHQSalesOrderTable2();
                        InvoiceTermsSales mt = salesOrderTermMap.getTerm();
                        double termAmnt = salesOrderTermMap.getTermamount();
                        totalTermAmount += termAmnt;
                        vhqSalesOrderTable2.setTermname(mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)"));
                        vhqSalesOrderTable2.setTermamount(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currency.getCurrencyID(), companyid));
                        vhqSalesOrderTable2List.add(vhqSalesOrderTable2);
                    }
                    salesOrder.setGrandtotal(currency.getSymbol() + " " + nf.format(orderAmount + ordertaxamount + rowTaxAmountTotal + totalTermAmount));
                    salesOrder.setSubtotal(currency.getSymbol() + " " + nf.format(orderAmount));

                    salesOrderMap.put("SalesOrderTable2Data", new JRBeanCollectionDataSource(vhqSalesOrderTable2List));

                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Sales_Order_ModuleId, 0, 1));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                    QuotationDetail row = null;
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    KwlReturnObject idcustresult = accountingHandlerDAOobj.getObject(SalesOrderCustomData.class.getName(), soObj.getID());
                    if (idcustresult.getEntityList().size() > 0) {
                        SalesOrderCustomData jeCustom = (SalesOrderCustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
//                        if (customFieldMap.containsKey(varEntry.getKey())) {
//                            FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
//                            if (fieldComboData != null) {
//                                String Label = varEntry.getKey();
//                                String Value = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
//                            }
//                        } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
//                            String Label = varEntry.getKey();
//                            String Value = df.format(Long.parseLong(coldata));
//                        } else {
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                if ((varEntry.getKey().split("_")[1]).equals("Product")) {
                                    salesOrder.setProduct(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Title")) {
                                    salesOrder.setTitle(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Duration")) {
                                    salesOrder.setDuration(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Producer")) {
                                    salesOrder.setProducer(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Job Number")) {
                                    salesOrder.setJobno(coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Languages")) {
                                    salesOrder.setLanguage(coldata);


                                }
                            }
                        }
                    }
//              purchaseOrder.setGst(currency.getSymbol() + " " + nf.format(ordertaxamount+rowTaxAmountTotal));

                    vhqSalesOrderOrderList.add(salesOrder);
                    String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    salesOrderMap.put("logo", logo);
                    salesOrderMap.put("format", "pdf");
//            salesOrderMap.put("datasource", new JRBeanCollectionDataSource(vhqSalesOrderOrderList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "SalesOrder.pdf");
                    try {
                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/VHQSalesOrder.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(vhqSalesOrderOrderList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, salesOrderMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                } catch (ServiceException ex) {
                    Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    public HashMap<String, Object> getSalesOrdersMap(HttpServletRequest request) throws SessionExpiredException {
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put(Constants.ss, request.getParameter(Constants.ss));
        requestParams.put(Constants.start, request.getParameter(Constants.start));
        requestParams.put(Constants.limit, request.getParameter(Constants.limit));
        requestParams.put(CCConstants.REQ_costCenterId, request.getParameter(CCConstants.REQ_costCenterId));
        requestParams.put(Constants.REQ_customerId, request.getParameter(Constants.REQ_customerId));
        requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
        requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
        requestParams.put(Constants.MARKED_FAVOURITE, request.getParameter(Constants.MARKED_FAVOURITE));
        requestParams.put(InvoiceConstants.newcustomerid, request.getParameter(InvoiceConstants.newcustomerid));
        requestParams.put(InvoiceConstants.productid, request.getParameter(InvoiceConstants.productid));
        requestParams.put(InvoiceConstants.productCategoryid, request.getParameter(InvoiceConstants.productCategoryid));
        requestParams.put(Constants.isRepeatedFlag, request.getParameter(Constants.isRepeatedFlag));
        requestParams.put("deleted", request.getParameter("deleted"));
        requestParams.put("nondeleted", request.getParameter("nondeleted"));
        requestParams.put("orderforcontract", request.getParameter("orderForContract") != null ? Boolean.parseBoolean(request.getParameter("orderForContract")) : false);
        requestParams.put(Constants.ValidFlag, request.getParameter(Constants.ValidFlag));
        requestParams.put(Constants.BillDate, request.getParameter(Constants.BillDate));
        requestParams.put("pendingapproval", (request.getParameter("pendingapproval") != null) ? Boolean.parseBoolean(request.getParameter("pendingapproval")) : false);
        requestParams.put("istemplate", (request.getParameter("istemplate") != null) ? Integer.parseInt(request.getParameter("istemplate")) : 0);
        requestParams.put("currencyid", request.getParameter("currencyid"));
        requestParams.put("exceptFlagINV", request.getParameter("exceptFlagINV"));
        requestParams.put("exceptFlagORD", request.getParameter("exceptFlagORD"));
        requestParams.put(Constants.Acc_Search_Json, request.getParameter(Constants.Acc_Search_Json));
        requestParams.put(Constants.moduleid, request.getParameter(Constants.moduleid));
        requestParams.put("currencyfilterfortrans", (request.getParameter("currencyfilterfortrans") == null) ? "" : request.getParameter("currencyfilterfortrans"));
        requestParams.put("isOpeningBalanceOrder", request.getParameter("isOpeningBalanceOrder") != null ? Boolean.parseBoolean(request.getParameter("isOpeningBalanceOrder")) : false);
        requestParams.put("isLeaseFixedAsset", request.getParameter("isLeaseFixedAsset") != null ? Boolean.parseBoolean(request.getParameter("isLeaseFixedAsset")) : false);
        requestParams.put(CCConstants.REQ_customerId, request.getParameter(CCConstants.REQ_customerId));
        return requestParams;
    }

    @Override
    public List<Object> exportFerrateGroupVendorInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String billid = "";
        int templateflag = Integer.parseInt(request.getParameter("templateflag"));
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int countryLanguageId = Constants.OtherCountryLanguageId; // 0
        if (recArray.length != 0) {
            try {
                String companyid = sessionHandlerImpl.getCompanyid(request);

                KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                if (extraCompanyPreferences.isAmountInIndianWord()) {
                    countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
                }
            } catch (Exception ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                String view = "ferrateGroupVendorInvoice";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                List<FerrateGroupVendorInvoiceTable2> commercialinvoiceSubReportsList = new ArrayList<FerrateGroupVendorInvoiceTable2>();
                List<FerrateGroupPurchaseOrderSubReport> FerrateGroupTable1List = new ArrayList<FerrateGroupPurchaseOrderSubReport>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                String customerName = "";
                String customerAdd = "";
                String customerEmail = "";
                String customerPhone = "";
                String vendorcode = "";
                String terms = "";
                String billTo = "";
                String billAddr = "";
                String shipTo = "";
                String memo = "";
                String salesPerson = null;
                String billtoAddress = "";
                String companyname = "";
                String companyadd = "";
                String companyfax = "";
                String companyphone = "";

                boolean isInclude = false; //Hiding or Showing P.O. NO field in single PDF 
                Iterator itr = null;
                String linkTo = "";
                Discount totalDiscount = null;
                double totaltax = 0, discountTotalQuotation = 0, totaltaxpercent = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";
                boolean isexpenseinv = false;
                if (!StringUtil.isNullOrEmpty(request.getParameter("isexpenseinv"))) {
                    isexpenseinv = Boolean.parseBoolean((String) request.getParameter("isexpenseinv"));
                }
                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                Map<String, Object> invoiceMap = new HashMap<String, Object>();
                SenwanGroupPurchaseOrder ferrateGroupTaxInvoice = new SenwanGroupPurchaseOrder();
                ArrayList<SenwanGroupPurchaseOrder> ferrateGroupTaxInvoicesList = new ArrayList<SenwanGroupPurchaseOrder>();
                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df = (DateFormat) requestParamsCustom.get("df");
                    DateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");

                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Vendor_Invoice_ModuleId, 1, 1));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;

//            String billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    String gstNo = "";
                    boolean addShipTo = true;
                    Company com = null;
                    Account cEntry = null;
                    String invno = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String uem = "";
                    double total = 0;
                    double rowTaxAmountTotal = 0;
                    String curr = "";
                    String currname = "";
                    String currsymb = "";
                    DecimalFormat decimalFormat = new DecimalFormat("0.00");
                    KWLCurrency currency = null;
                    if (mode == StaticValues.AUTONUM_GOODSRECEIPT) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(GoodsReceipt.class.getName(), billid);
                        GoodsReceipt inv = (GoodsReceipt) cap.getEntityList().get(0);
                        String approverName = "";
                        String currencyid = "";
                        if (inv.getApprover() != null) {
                            approverName = inv.getApprover().getFirstName() + " " + inv.getApprover().getLastName();
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        currname = inv.getCurrency().getName();
                        curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                        currsymb = currency.getHtmlcode() != null ? currency.getHtmlcode() : "";

                        addShipTo = true;
                        com = inv.getCompany();
                        cEntry = inv.getVendorEntry().getAccount();
                        invno = inv.getGoodsReceiptNumber();
                        entryDate = inv.getJournalEntry().getEntryDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipDate();
                        shipvia = inv.getShipvia() != null ? inv.getShipvia() : "";
                        fob = inv.getFob();
                        companyname = inv.getCompany().getCompanyName();
                        salesPerson = (inv.getMasterAgent() == null) ? "" : inv.getMasterAgent().getValue();
                        Company company = inv.getCompany();
                       if (company != null) {
                            String addr = StringUtil.isNullOrEmpty(company.getAddress()) ? "" : company.getAddress();
                            String city = StringUtil.isNullOrEmpty(company.getCity()) ? "" : " " + company.getCity();
                            String state = company.getState() != null ? (StringUtil.isNullOrEmpty(company.getState().getStateName()) ? "" : " " + company.getState().getStateName()) : "";
                            String country = company.getCountry() != null ? (StringUtil.isNullOrEmpty(company.getCountry().getCountryName()) ? "" : " " + company.getCountry().getCountryName()) : "";
                            String postalcode = StringUtil.isNullOrEmpty(company.getZipCode()) ? "" : " " + company.getZipCode();
                            companyadd = addr + city + state + country + postalcode;


                            companyphone = StringUtil.isNullOrEmpty(company.getPhoneNumber()) ? "" : company.getPhoneNumber();
                            companyfax = StringUtil.isNullOrEmpty(company.getFaxNumber()) ? "" : company.getFaxNumber();
                        }

                        filter_names.add("goodsReceipt.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);

                        if (isexpenseinv) {
                            idresult = accGoodsReceiptobj.getExpenseGRDetails(invRequestParams);
                        } else {
                            idresult = accGoodsReceiptobj.getGoodsReceiptDetails(invRequestParams);
                        }
                        customerName = inv.getVendor() == null ? inv.getVendorEntry().getAccount().getName() : inv.getVendor().getName();
                        vendorcode = inv.getVendor() == null ? inv.getVendorEntry().getAccount().getAcccode() : inv.getVendor().getAcccode();
                        
                        //refer ticket ERP-10777
                        //customerAdd = accVendorHandler.getVendorAddress(inv.getVendor(), true);
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("vendorid", inv.getVendor().getID());
                        customerAdd = accountingHandlerDAOobj.getVendorAddress(addressParams);
                        
                        customerPhone = inv.getVendor().getContactNumber() != null ? inv.getVendor().getContactNumber() : "";
                        String billToAdd = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), true);
                        billAddr = StringUtil.isNullOrEmpty(billToAdd) ? inv.getBillTo() != null ? inv.getBillTo().replaceAll("\n", "<br>") : "" : billToAdd.replaceAll("\n", "<br>");
                        customerEmail = inv.getVendor().getEmail() != null ? inv.getVendor().getEmail() : "";
                        terms = inv.getVendor() != null ? Integer.toString(inv.getVendor().getDebitTerm().getTermdays()) + " DAYS" : "";
                        String shipToAdd = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);
                        shipTo = StringUtil.isNullOrEmpty(shipToAdd) ? inv.getShipTo() != null ? inv.getShipTo().replaceAll("\n", "<br>") : "" : shipToAdd.replaceAll("\n", "<br>");
                        entry = inv.getJournalEntry();
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo() != null ? inv.getMemo() : "";
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        GoodsReceiptDetail row = null;


                        int i = 0;
                        while (itr.hasNext()) {
                            FerrateGroupVendorInvoiceTable2 commercialinvoiceSubReport = new FerrateGroupVendorInvoiceTable2();
                            i++;
                            String prodName = "";
                            String total1 = "";
                            String prodDesc = "";
                            String prodCode = "";
                            String partNo = "";
                            Phrase phrase1 = new Phrase();
                            Phrase phrase2 = new Phrase();
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            Discount discount = null;
                            String uom = "";
                            double amount1 = 0;

                            row = (GoodsReceiptDetail) itr.next();

                            Map<String, Object> variableMap = new HashMap<String, Object>();
                            HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                            ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                            Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
                            Detailfilter_params.add(row.getID());
                            invDetailRequestParams.put("filter_names", Detailfilter_names);
                            invDetailRequestParams.put("filter_params", Detailfilter_params);
                            KwlReturnObject idcustresult = accGoodsReceiptobj.getGoodsReceiptCustomData(invDetailRequestParams);
                            if (idcustresult.getEntityList().size() > 0 && idcustresult.getEntityList().get(0) != null) {
                                AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustresult.getEntityList().get(0);
                                AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                                for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                    String coldata = varEntry.getValue().toString();
                                    if (customFieldMap.containsKey(varEntry.getKey())) {
                                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                        if (fieldComboData != null) {
                                            if ((varEntry.getKey().split("_")[1]).equals("Project")) {
                                                String Value = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
                                                commercialinvoiceSubReport.setProject(Value);
                                            }
                                        }
                                    }
                                }

                            }

                            if (row.getVendorQuotationDetail() != null) {
                                linkTo = row.getVendorQuotationDetail().getVendorquotation().getQuotationNumber();
                            }
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc = row.getDescription();
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())) {
                                    prodDesc = row.getInventory().getProduct().getDescription();
                                }
                            }
                            prodCode = row.getInventory().getProduct().getProductid() != null ? row.getInventory().getProduct().getProductid() : "";
                            prodName = row.getInventory().getProduct().getName() != null ? row.getInventory().getProduct().getName() : "";
                            quantity = row.getInventory().getQuantity();
                            changedQuantity = (row.getInventory().isInvrecord() && (row.getGoodsReceipt().getPendingapproval() == 0)) ? row.getInventory().getBaseuomquantity() : row.getInventory().getActquantity();

                            rate = row.getRate();
                            uom = row.getInventory().getProduct().getUnitOfMeasure() == null ? "" : row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA();
                            amount1 = authHandler.round(rate * quantity, companyid);
                            if (row.getDiscount() != null) {
                                amount1 -= row.getDiscount().getDiscountValue();
                            }
                            commercialinvoiceSubReport.setSno(Integer.toString(i));
                            commercialinvoiceSubReport.setDesc(prodDesc);
                            commercialinvoiceSubReport.setCode(prodCode);
                            commercialinvoiceSubReport.setItemno(prodName);
                            if ((templateflag == Constants.TID_Subdomain_templateflag || templateflag == Constants.TIDR_Subdomain_templateflag || templateflag == Constants.CUSCADEN_Subdomain_templateflag || templateflag == Constants.TCD_Subdomain_templateflag || templateflag == Constants.CAMBORNE_Subdomain_templateflag || templateflag == Constants.MITSUI_Subdomain_templateflag)) {
                                commercialinvoiceSubReport.setPrice(decimalFormat.format(rate));
                                commercialinvoiceSubReport.setLinetotal(decimalFormat.format(amount1));
                            } else {
                                commercialinvoiceSubReport.setPrice(curr + " " + decimalFormat.format(rate));
                                commercialinvoiceSubReport.setLinetotal(curr + " " + decimalFormat.format(amount1));
                            }
                            commercialinvoiceSubReport.setCurrencysymbol(currency.getCurrencyCode());
                            commercialinvoiceSubReport.setQty(decimalFormat.format(quantity) + " " + uom);
                            commercialinvoiceSubReportsList.add(commercialinvoiceSubReport);
                            total = total + amount1;
                            rowTaxAmountTotal += row.getRowTaxAmount() + row.getRowTermTaxAmount();
                        }
                        FerrateGroupPurchaseOrderSubReport fpo = new FerrateGroupPurchaseOrderSubReport();
                        fpo.setPono(inv.getGoodsReceiptNumber());
                        fpo.setDate(df1.format(entryDate));
                        fpo.setQuotationno(linkTo);
                        fpo.setShipvia(shipvia);
                        fpo.setShippinginfo(inv.getShipFrom() != null ? inv.getShipvia() : "");
                        fpo.setTerms(terms);

                        FerrateGroupTable1List.add(fpo);

                        totalDiscount = inv.getDiscount();
                        totaltax = inv.getTaxEntry() != null ? inv.getTaxEntry().getAmount() : 0;
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
                        totalAmount = inv.getVendorEntry().getAmount();
                        if (inv.getTax() != null) {
                            requestParams.put("transactiondate", entryDate);
                            requestParams.put("taxid", inv.getTax() != null ? inv.getTax().getID() : "");
                            requestParams.put("companyid", companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            if (!taxList.isEmpty()) {
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                        }
                    }
                    if ((templateflag == Constants.TID_Subdomain_templateflag || templateflag == Constants.TIDR_Subdomain_templateflag || templateflag == Constants.CUSCADEN_Subdomain_templateflag || templateflag == Constants.TCD_Subdomain_templateflag || templateflag == Constants.CAMBORNE_Subdomain_templateflag || templateflag == Constants.MITSUI_Subdomain_templateflag)) {
                        ferrateGroupTaxInvoice.setName(customerName);
                        ferrateGroupTaxInvoice.setDate(df1.format(entryDate));
                        ferrateGroupTaxInvoice.setAttn(salesPerson);//set as agent
                        ferrateGroupTaxInvoice.setDuedate(StringUtil.isNullOrEmpty(df1.format(dueDate)) ? "" : df1.format(dueDate));
                        ferrateGroupTaxInvoice.setAddress(billAddr.replaceAll("\n", "<br>"));
                        ferrateGroupTaxInvoice.setGst(decimalFormat.format(totaltax + rowTaxAmountTotal));
                        ferrateGroupTaxInvoice.setGstpercent(taxPercent == 0 ? "0.00%" : " " + Double.toString(taxPercent) + "%");
                        ferrateGroupTaxInvoice.setShipto(shipTo);
                        ferrateGroupTaxInvoice.setSubtotal(decimalFormat.format(total));
                        ferrateGroupTaxInvoice.setTotalamount(currsymb + " " + decimalFormat.format(totalAmount));
                        ferrateGroupTaxInvoice.setAmountinwords(currname + " " + EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalAmount)), currency,countryLanguageId) + " only.");
                        ferrateGroupTaxInvoice.setMemo(memo);
                        ferrateGroupTaxInvoice.setPono(invno);//set as PI no.
                        ferrateGroupTaxInvoice.setFax(companyfax);
                        ferrateGroupTaxInvoice.setBillingphone(companyphone);//set as phones
                        ferrateGroupTaxInvoice.setCompanyname(companyname);
                        ferrateGroupTaxInvoice.setCompanyadd(companyadd);
                        ferrateGroupTaxInvoice.setCustid(StringUtil.isNullOrEmpty(vendorcode) ? "" : vendorcode);//set as vendor code
                        ferrateGroupTaxInvoicesList.add(ferrateGroupTaxInvoice);
                        invoiceMap.put("VendorInvoiceTable2", new JRBeanCollectionDataSource(commercialinvoiceSubReportsList));
                        invoiceMap.put("format", "pdf");
                    } else {
                        ferrateGroupTaxInvoice.setName(customerName);
                        ferrateGroupTaxInvoice.setAddress(billAddr.replaceAll("\n", "<br>"));
                        ferrateGroupTaxInvoice.setGst(curr + " " + decimalFormat.format(totaltax + rowTaxAmountTotal));
                        ferrateGroupTaxInvoice.setGstpercent("");
                        ferrateGroupTaxInvoice.setShipto(shipTo);
                        ferrateGroupTaxInvoice.setSubtotal(curr + " " + decimalFormat.format(total));
                        ferrateGroupTaxInvoice.setTotalamount(curr + " " + decimalFormat.format(totalAmount));
                        ferrateGroupTaxInvoice.setCurrencyname(currency.getCurrencyCode());
                        ferrateGroupTaxInvoicesList.add(ferrateGroupTaxInvoice);
                        invoiceMap.put("VendorInvoiceTable2", new JRBeanCollectionDataSource(commercialinvoiceSubReportsList));
                        invoiceMap.put("VendorInvoiceTable1", new JRBeanCollectionDataSource(FerrateGroupTable1List));
                        invoiceMap.put("format", "pdf");
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String header = StorageHandler.GetDocStorePath() + companyid + "_header" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        invoiceMap.put("logo", logo);
                        invoiceMap.put("header", header);
                        invoiceMap.put("footer", footer);
                    }
                    InputStream inputStream;
//                  invoiceMap.put("datasource", new JRBeanCollectionDataSource(ferrateGroupTaxInvoicesList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "VendorInvoice.pdf");
                    try {
                        if ((templateflag == Constants.TID_Subdomain_templateflag || templateflag == Constants.TIDR_Subdomain_templateflag || templateflag == Constants.CUSCADEN_Subdomain_templateflag || templateflag == Constants.TCD_Subdomain_templateflag || templateflag == Constants.CAMBORNE_Subdomain_templateflag || templateflag == Constants.MITSUI_Subdomain_templateflag)) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TIDvendorInvoice.jrxml");
                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/FerrateGroupVendorInvoice.jrxml");
                        }
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(ferrateGroupTaxInvoicesList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    public List<Object> exportSenwanTecPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String paymentId = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                paymentId = s;
                if (StringUtil.isNullOrEmpty(paymentId)) {
                    paymentId = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                Map<String, Object> voucherMap = new HashMap<String, Object>();

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                DecimalFormat senwanTecDecimalFormat = new DecimalFormat("#,###,###,##0.00");
                int templateflag = request.getParameter("templateflag") != null ? Integer.parseInt(request.getParameter("templateflag")) : 0;
                JSONObject jobj = new JSONObject();
                ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
                Map<String, Object> pettyCashVoucherMap = new HashMap<String, Object>();
                try {

                    Payment payment = null;
                    BillingPayment billingPayment = null;
                    JSONArray jArr = new JSONArray();
                    java.util.Date entryDate = null;
                    double total = 0;
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    KwlReturnObject objItr = null;
                    KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                    KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

                    String currencyid = null;
                    String currencySymbol = "";
                    String curr = "";
                    String paidTo = "";
                    String receiptNumber = "";
                    Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
                    PayDetail PayDetail = null;
                    String memo = "";
                    String AccountName = "";
                    boolean ismanycrdb = false;
                    int receiptType = 0;
                    HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
                    List<Double> debitAccountAmount = new ArrayList<Double>();
                    List<Double> debitAccountTaxAmount = new ArrayList<Double>();
                    List<Double> debitAccountTotalAmount = new ArrayList<Double>();
                    List<Double> creditAccountAmount = new ArrayList<Double>();
                    List<Double> creditAccountTaxAmount = new ArrayList<Double>();
                    List<Double> creditAccountTotalAmount = new ArrayList<Double>();
                    List<String> debitAccountCodeNumber = new ArrayList<String>();
                    List<String> debitAccountCodeName = new ArrayList<String>();
                    List<String> creditAccountCodeNumber = new ArrayList<String>();
                    List<String> creditAccountCodeName = new ArrayList<String>();
                    List<String> debitTaxRow = new ArrayList<String>();
                    List<String> creditTaxRow = new ArrayList<String>();
                    List<String> creditDescription = new ArrayList<String>();
                    List<String> debitDescription = new ArrayList<String>();
                    String netinword = "";
                    String cust = request.getParameter("customer");
                    String accname = request.getParameter("accname");
                    String address = request.getParameter("address");
                    double amount = 0.0;

                    String companyid = AccountingManager.getCompanyidFromRequest(request);
                    boolean iscontraentryflag = false;
                    iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));
                    int mode = Integer.parseInt(request.getParameter("mode"));

                    double advanceAmount = 0;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
                        advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
                    }
                    boolean advanceFlag = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
                        advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
                    }

                    KWLCurrency paymentCurrency = null;

                    if (mode == StaticValues.AUTONUM_PAYMENT) {
                        objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                        payment = (Payment) objItr.getEntityList().get(0);
                        currencyid = (payment.getCurrency() == null) ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID();
                        KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                        paymentCurrency = (KWLCurrency) curresult1.getEntityList().get(0);
                        receiptNumber = payment.getPaymentNumber();
                        journalEntryDate = payment.getJournalEntry().getEntryDate();
                        PayDetail = payment.getPayDetail();
                        memo = payment.getMemo();
                        Company com = payment.getCompany();
                        ismanycrdb = payment.isIsmanydbcr();
                        receiptType = payment.getReceipttype();
                        paidTo = payment.getPaidTo() != null ? payment.getPaidTo().getValue() : "";

                        Iterator itrRow = payment.getJournalEntry().getDetails().iterator();
                        while (itrRow.hasNext()) {
                            JournalEntryDetail jed = ((JournalEntryDetail) itrRow.next());
                            if (!jed.isDebit()) {
                                if (payment.getDeposittoJEDetail() != null) {
                                    amount = payment.getDeposittoJEDetail().getAmount();
                                } else {
                                    amount = jed.getAmount();
                                }
                            }
                        }
                    }

                    int paymentMethod = -1;
                    String chequeNumber = "";
                    if (PayDetail != null && PayDetail.getPaymentMethod() != null) {
                        paymentMethod = PayDetail.getPaymentMethod().getDetailType();
                    }

                    if (paymentMethod == Constants.bank_detail_type) {
                        chequeNumber = PayDetail.getCheque() != null ? (PayDetail.getCheque().getChequeNo() != null ? PayDetail.getCheque().getChequeNo() : "") : "";
                    } else if (paymentMethod == Constants.cash_detail_type) {
                        chequeNumber = "Cash";
                    } else if (paymentMethod == Constants.card_detail_type) {
                        chequeNumber = "Card";
                    } else {
                        chequeNumber = "";
                    }

                    if (mode == StaticValues.AUTONUM_PAYMENT) {
                        filter_names.add("payment.ID");
                        filter_params.add(payment.getID());
                        rRequestParams.put("filter_names", filter_names);
                        rRequestParams.put("filter_params", filter_params);
                        KwlReturnObject pdoresult = accVendorPaymentDAO.getPaymentDetailOtherwise(rRequestParams);
                        List<PaymentDetailOtherwise> list1 = pdoresult.getEntityList();
                        Iterator pdoRow = list1.iterator();
                        if (pdoRow != null && list1.size() > 0) {
                            for (PaymentDetailOtherwise pdo : list1) {
                                currencySymbol = pdo.getPayment().getCurrency().getCurrencyCode();
                                curr = pdo.getPayment().getCurrency().getSymbol();
                                if (payment.getID().equals(pdo.getPayment().getID())) {
                                    if (payment.isIsmanydbcr()) {
                                        if (pdo.isIsdebit()) {
                                            debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                            debitAccountAmount.add(pdo.getAmount());
                                            debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                            debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                            debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                            debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                            debitDescription.add((pdo.getDescription()));

                                        } else {
                                            creditAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                            creditAccountAmount.add(pdo.getAmount());
                                            creditAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                            creditAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                            creditAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                            creditTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                            creditDescription.add((pdo.getDescription()));
                                        }
                                    } else {
                                        debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                        debitAccountAmount.add(pdo.getAmount());
                                        debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                        debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                        debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                        debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getTaxCode() : ""));
                                        debitDescription.add((pdo.getDescription()));
                                    }
                                }
                            }
                        }
                    }


                    JSONObject obj;
                    int craditDebitFlag = 1;
                    List<String> accName = new ArrayList<String>();
                    for (int i = 0; i < (craditDebitFlag == 1 ? debitAccountCodeName.size() : creditAccountCodeName.size()); i++) {

                        FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                        double amount1 = craditDebitFlag == 1 ? debitAccountAmount.get(i) : creditAccountAmount.get(i);
                        double amount2 = craditDebitFlag == 1 ? debitAccountTaxAmount.get(i) : creditAccountTaxAmount.get(i);
                        ferrateGroupPaymentVoucherTable.setAmount(curr + " " + authHandler.formattedAmount(amount1, companyid));
                        ferrateGroupPaymentVoucherTable.setGstamount(curr + " " + authHandler.formattedAmount(amount2, companyid));
                        ferrateGroupPaymentVoucherTable.setSno(Integer.toString(i + 1));
                        ferrateGroupPaymentVoucherTable.setTotalamount(curr + " " + authHandler.formattedAmount((amount1 + amount2), companyid));
                        ferrateGroupPaymentVoucherTable.setCurrencysymbol(currencySymbol);
                        ferrateGroupPaymentVoucherTable.setDesc(craditDebitFlag == 1 ?  StringUtil.DecodeText(debitDescription.get(i)) : StringUtil.DecodeText(creditDescription.get(i)));
                        ferrateGroupPaymentVoucherTable.setGrandtotal(curr + " " + authHandler.formattedAmount(amount, companyid));
                        ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        accName.add(craditDebitFlag == 1 ?  StringUtil.DecodeText(debitAccountCodeName.get(i)) :  StringUtil.DecodeText(creditAccountCodeName.get(i)));
                    }

                    for (int i = 0; i < (craditDebitFlag == 1 ? creditAccountCodeName.size() : debitAccountCodeName.size()); i++) {

                        FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                        double amount1 = craditDebitFlag == 1 ? creditAccountAmount.get(i) : debitAccountAmount.get(i);
                        double amount2 = craditDebitFlag == 1 ? creditAccountTaxAmount.get(i) : debitAccountTaxAmount.get(i);
                        ferrateGroupPaymentVoucherTable.setAmount(curr + " " + authHandler.formattedAmount(amount1, companyid));
                        ferrateGroupPaymentVoucherTable.setTax(curr + " " + authHandler.formattedAmount(amount2, companyid));
                        ferrateGroupPaymentVoucherTable.setSno(Integer.toString(i + 1));
                        ferrateGroupPaymentVoucherTable.setTotalamount(curr + " " + authHandler.formattedAmount((amount1 + amount2), companyid));
                        ferrateGroupPaymentVoucherTable.setDesc(craditDebitFlag == 1 ?  StringUtil.DecodeText(creditDescription.get(i)) :  StringUtil.DecodeText(debitDescription.get(i)));
                        ferrateGroupPaymentVoucherTable.setGrandtotal(curr + " " + authHandler.formattedAmount(amount, companyid));
                        ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                        accName.add(craditDebitFlag == 1 ?  StringUtil.DecodeText(creditAccountCodeName.get(i)) :  StringUtil.DecodeText(debitAccountCodeName.get(i)));
                    }

                    String details = "";
                    for (String acc : accName) {
                        details += acc + "<br>";
                    }
                    if (details.length() > 4) {
                        details = details.substring(0, details.length() - 4);
                    }
                    ArrayList<SenwanTecPaymentVoucher> senwanTecPaymentVouchersList = new ArrayList<SenwanTecPaymentVoucher>();
                    SenwanTecPaymentVoucher paymentVoucher = new SenwanTecPaymentVoucher();
                    paymentVoucher.setNo(receiptNumber);
                    paymentVoucher.setDate(dateFormat.format(journalEntryDate));
                    paymentVoucher.setTo(paidTo);
                    paymentVoucher.setDetails(details);
                    paymentVoucher.setAmount(paymentCurrency.getSymbol() + " " + senwanTecDecimalFormat.format(amount));
                    paymentVoucher.setChequeno(chequeNumber);
                    senwanTecPaymentVouchersList.add(paymentVoucher);

                    String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    voucherMap.put("format", "pdf");
                    voucherMap.put("logo", logo);
                    response.setHeader("Content-Disposition", "attachment;filename=" + "PaymentVoucher.pdf");
                    InputStream inputStream = null;
                    inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SenwanTecPaymentVoucher.jrxml");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(senwanTecPaymentVouchersList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);

                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportFerrateGroupPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String paymentId = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                paymentId = s;
                if (StringUtil.isNullOrEmpty(paymentId)) {
                    paymentId = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                Map<String, Object> voucherMap = new HashMap<String, Object>();
                String view = "";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                Date currentDate = Calendar.getInstance().getTime();
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                String currentDateStr = dateFormat.format(currentDate);
//        String paymentId = request.getParameter("bills");
                int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
                int templateflag = request.getParameter("templateflag") != null ? Integer.parseInt(request.getParameter("templateflag")) : 0;
                int mode = Integer.parseInt(request.getParameter("mode"));
                String companyid = AccountingManager.getCompanyidFromRequest(request);

                KwlReturnObject objItr = null;
                Payment payment = null;
                BillingPayment billingPayment = null;

                try {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    java.util.Date entryDate = null;
                    double total = 0;
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();

                    KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                    KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

                    String createdby = "";
                    String project = "";
                    String currencyid = "";
                    String receiptNumber = "";
                    String paidTo = "";
                    Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
                    PayDetail PayDetail = null;
                    String memo = "";
                    String AccountName = "";
                    boolean ismanycrdb = false;
                    int receiptType = 0;
                    String bankCharges = "";
                    double bankChargesAmount = 0.0;
                    String vendorName = "";
                    String vendorCode = "";
                    String vendorAddress = "";
                    String vendorPhone = "";
                    String vendorFax = "";
                    HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
                    DecimalFormat decimalFormat = new DecimalFormat("0.00");

                    String netinword = "";
                    String cust = request.getParameter("customer");
                    String accname = request.getParameter("accname");
                    String address = request.getParameter("address");
                    double amount = Double.parseDouble(request.getParameter("amount"));


                    boolean iscontraentryflag = false;
                    iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));
                    DateFormat df = (DateFormat) requestParams.get("df");
//            String companyid = sessionHandlerImpl.getCompanyid(request);
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 0));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;


                    double advanceAmount = 0;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
                        advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
                    }
                    boolean advanceFlag = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
                        advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
                    }
                    List listPaymentDetails = null;
                    DateFormat dFormat = new SimpleDateFormat("dd/MM/yyyy");
                    if (mode == StaticValues.AUTONUM_PAYMENT) {
                        objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                        payment = (Payment) objItr.getEntityList().get(0);
                        if (payment.getCreatedby() != null) {
                            createdby = StringUtil.getFullName(payment.getCreatedby());
                        }
                        currencyid = (payment.getCurrency() == null) ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID();
                        receiptNumber = payment.getPaymentNumber();
                        paidTo = payment.getPaidTo() != null ? payment.getPaidTo().getValue() : "";
                        journalEntryDate = payment.getJournalEntry().getEntryDate();
                        PayDetail = payment.getPayDetail();
                        memo = payment.getMemo();
                        Company com = payment.getCompany();
                        ismanycrdb = payment.isIsmanydbcr();
                        receiptType = payment.getReceipttype();
                        bankChargesAmount = payment.getBankChargesAmount();
                        entry = payment.getJournalEntry();
                        filter_names.add("payment.ID");
                        filter_params.add(payment.getID());
                        rRequestParams.put("filter_names", filter_names);
                        rRequestParams.put("filter_params", filter_params);
                        KwlReturnObject pdoresult = accVendorPaymentDAO.getPaymentDetails(rRequestParams);
                        listPaymentDetails = pdoresult.getEntityList();
                        if (!listPaymentDetails.isEmpty()) {
                            PaymentDetail paymentDetail = (PaymentDetail) listPaymentDetails.get(0);
                            Vendor vendor = paymentDetail.getGoodsReceipt().getVendor();
                            if (vendor != null) {
                                vendorName = vendor.getName();
                                vendorCode = vendor.getAcccode();
                                vendorAddress = vendor.getAddress();
                                vendorPhone = vendor.getContactNumber();
                                vendorFax = vendor.getFax();
                            }
                        }
                    }

                    List<String> dimensionList = new ArrayList<String>();
                    List<String> dimensionValueList = new ArrayList<String>();
                    List<String> colonList = new ArrayList<String>();
                    if (entry != null) {

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(companyid);
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(entry.getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(moduleid + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Project")) {
                                            project = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (listPaymentDetails != null && listPaymentDetails.isEmpty()) {
                        PettyCashVoucher pettyCashVoucher = new PettyCashVoucher();
                        ArrayList<PettyCashVoucher> pettyCashVoucherList = new ArrayList<PettyCashVoucher>();
                        view = "ferrateGroupPaymentVoucher";
                        pettyCashVoucher.setDate(dFormat.format(journalEntryDate));
                        pettyCashVoucherList.add(pettyCashVoucher);
                        voucherMap = getPaymentVoucherTable(request, dimensionList, dimensionValueList, colonList, paymentId);
                        voucherMap.put("format", "pdf");
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String header = StorageHandler.GetDocStorePath() + companyid + "_header" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("logo", logo);
                        voucherMap.put("header", header);
                        voucherMap.put("footer", footer);
                        voucherMap.put("applicant", createdby);
                        voucherMap.put("paymentto", paidTo);
                        voucherMap.put("project", project);
                        ArrayList<SenwanTecPaymentVoucher> senwanTecPaymentVouchersList = new ArrayList<SenwanTecPaymentVoucher>();

//            voucherMap.put("datasource", new JRBeanCollectionDataSource(pettyCashVoucherList));
                        response.setHeader("Content-Disposition", "attachment;filename=" + "PaymentVoucher.pdf");
                        InputStream inputStream = null;
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/FerrateGroupPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(templateflag == Constants.senwan_tech_templateflag ? senwanTecPaymentVouchersList : pettyCashVoucherList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                    }
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    public Map<String, Object> getPaymentVoucherTable(HttpServletRequest request, List<String> dimensionList, List<String> dimensionValueList, List<String> colonList, String paymentId) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
        Map<String, Object> pettyCashVoucherMap = new HashMap<String, Object>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            Payment payment = null;
            BillingPayment billingPayment = null;
            JSONArray jArr = new JSONArray();
//           String paymentId = request.getParameter("bills");
            java.util.Date entryDate = null;
            double total = 0;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            KwlReturnObject objItr = null;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            String currencyid = null;
            String currencySymbol = "";
            String curr = "";
            String receiptNumber = "";
            Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
            PayDetail PayDetail = null;
            String memo = "";
            String AccountName = "";
            boolean ismanycrdb = false;
            int receiptType = 0;
            HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
            List<Double> debitAccountAmount = new ArrayList<Double>();
            List<Double> debitAccountTaxAmount = new ArrayList<Double>();
            List<Double> debitAccountTotalAmount = new ArrayList<Double>();
            List<Double> creditAccountAmount = new ArrayList<Double>();
            List<Double> creditAccountTaxAmount = new ArrayList<Double>();
            List<Double> creditAccountTotalAmount = new ArrayList<Double>();
            List<String> debitAccountCodeNumber = new ArrayList<String>();
            List<String> debitAccountCodeName = new ArrayList<String>();
            List<String> creditAccountCodeNumber = new ArrayList<String>();
            List<String> creditAccountCodeName = new ArrayList<String>();
            List<String> debitTaxRow = new ArrayList<String>();
            List<String> creditTaxRow = new ArrayList<String>();
            List<String> creditDescription = new ArrayList<String>();
            List<String> debitDescription = new ArrayList<String>();
            String netinword = "";
            String cust = request.getParameter("customer");
            String accname = request.getParameter("accname");
            String address = request.getParameter("address");
            double amount = 0.0;


            boolean iscontraentryflag = false;
            iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));
            int mode = Integer.parseInt(request.getParameter("mode"));

            double advanceAmount = 0;
            if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
                advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
            }
            boolean advanceFlag = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
                advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
            }

            if (mode == StaticValues.AUTONUM_PAYMENT) {
                objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                payment = (Payment) objItr.getEntityList().get(0);
                currencyid = (payment.getCurrency() == null) ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID();
                receiptNumber = payment.getPaymentNumber();
                journalEntryDate = payment.getJournalEntry().getEntryDate();
                PayDetail = payment.getPayDetail();
                memo = payment.getMemo();
                Company com = payment.getCompany();
                ismanycrdb = payment.isIsmanydbcr();
                receiptType = payment.getReceipttype();


                Iterator itrRow = payment.getJournalEntry().getDetails().iterator();
                while (itrRow.hasNext()) {
                    JournalEntryDetail jed = ((JournalEntryDetail) itrRow.next());
                    if (!jed.isDebit()) {
                        if (payment.getDeposittoJEDetail() != null) {
                            amount = payment.getDeposittoJEDetail().getAmount();
                        } else {
                            amount = jed.getAmount();
                        }
                    }
                }
            }

//            if (ismanycrdb) {
            if (mode == StaticValues.AUTONUM_PAYMENT) {
                filter_names.add("payment.ID");
                filter_params.add(payment.getID());
                rRequestParams.put("filter_names", filter_names);
                rRequestParams.put("filter_params", filter_params);
                KwlReturnObject pdoresult = accVendorPaymentDAO.getPaymentDetailOtherwise(rRequestParams);
                List<PaymentDetailOtherwise> list1 = pdoresult.getEntityList();
                Iterator pdoRow = list1.iterator();
                if (pdoRow != null && list1.size() > 0) {
                    for (PaymentDetailOtherwise pdo : list1) {
                        currencySymbol = pdo.getPayment().getCurrency().getCurrencyCode();
                        curr = pdo.getPayment().getCurrency().getSymbol();
                        if (payment.getID().equals(pdo.getPayment().getID())) {
                            if (payment.isIsmanydbcr()) {
                                if (pdo.isIsdebit()) {
                                    debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountAmount.add(pdo.getAmount());
                                    debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    debitDescription.add((pdo.getDescription()));

                                } else {
                                    creditAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountAmount.add(pdo.getAmount());
                                    creditAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    creditAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    creditTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    creditDescription.add((pdo.getDescription()));
                                }
                            } else {
                                debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountAmount.add(pdo.getAmount());
                                debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getTaxCode() : ""));
                                debitDescription.add((pdo.getDescription()));
                            }

                        }
                    }
                }
            }

//            }
//            AccountName = billingPayment.getPayDetail() != null ? billingPayment.getPayDetail().getPaymentMethod().getAccount().getName() : "";
//            AccountName = payment.getPayDetail() != null ? payment.getPayDetail().getPaymentMethod().getAccount().getName() : "";

            JSONObject obj;
//            if (ismanycrdb) {  //acc.je.accDebit
            int craditDebitFlag = 1;



            for (int i = 0; i < (craditDebitFlag == 1 ? debitAccountCodeName.size() : creditAccountCodeName.size()); i++) {

                FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                double amount1 = craditDebitFlag == 1 ? debitAccountAmount.get(i) : creditAccountAmount.get(i);
                double amount2 = craditDebitFlag == 1 ? debitAccountTaxAmount.get(i) : creditAccountTaxAmount.get(i);
                ferrateGroupPaymentVoucherTable.setAmount(curr + " " + authHandler.formattedAmount(amount1, companyid));
                ferrateGroupPaymentVoucherTable.setGstamount(curr + " " + authHandler.formattedAmount(amount2, companyid));
                ferrateGroupPaymentVoucherTable.setSno(Integer.toString(i + 1));
                ferrateGroupPaymentVoucherTable.setTotalamount(curr + " " + authHandler.formattedAmount((amount1 + amount2), companyid));
                ferrateGroupPaymentVoucherTable.setCurrencysymbol(currencySymbol);
                ferrateGroupPaymentVoucherTable.setDesc(craditDebitFlag == 1 ?  StringUtil.DecodeText(debitDescription.get(i)) :  StringUtil.DecodeText(creditDescription.get(i)));
                ferrateGroupPaymentVoucherTable.setGrandtotal(curr + " " + authHandler.formattedAmount(amount, companyid));
                ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
            }

            for (int i = 0; i < (craditDebitFlag == 1 ? creditAccountCodeName.size() : debitAccountCodeName.size()); i++) {

                FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                double amount1 = craditDebitFlag == 1 ? creditAccountAmount.get(i) : debitAccountAmount.get(i);
                double amount2 = craditDebitFlag == 1 ? creditAccountTaxAmount.get(i) : debitAccountTaxAmount.get(i);
                ferrateGroupPaymentVoucherTable.setAmount(curr + " " + authHandler.formattedAmount(amount1, companyid));
                ferrateGroupPaymentVoucherTable.setTax(curr + " " + authHandler.formattedAmount(amount2, companyid));
                ferrateGroupPaymentVoucherTable.setSno(Integer.toString(i + 1));
                ferrateGroupPaymentVoucherTable.setTotalamount(curr + " " + authHandler.formattedAmount((amount1 + amount2), companyid));
                ferrateGroupPaymentVoucherTable.setDesc(craditDebitFlag == 1 ?  StringUtil.DecodeText(creditDescription.get(i)) :  StringUtil.DecodeText(debitDescription.get(i)));
                ferrateGroupPaymentVoucherTable.setGrandtotal(curr + " " + authHandler.formattedAmount(amount, companyid));
                ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);

            }



            if (advanceFlag) {
                obj = new JSONObject();
                obj.put("1", "Advance" + " : ");
                obj.put("2", authHandlerDAOObj.getFormattedCurrency(advanceAmount, currencyid, companyid));
                jArr.put(obj);

            }

            double totalAdvanceAmount = amount;
            if (advanceFlag) {
                totalAdvanceAmount = amount + advanceAmount;
            }

            pettyCashVoucherMap.put("PettyCashVoucherSubReportData", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));

        } catch (JSONException ex) {
            Logger.getLogger(accVendorPaymentControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerLedgerJasper : " + ex.getMessage(), ex);
        }

        return pettyCashVoucherMap;
    }

    @Override
    public List<Object> exportLSHPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String paymentId = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                paymentId = s;

                if (StringUtil.isNullOrEmpty(paymentId)) {
                    paymentId = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                Map<String, Object> voucherMap = new HashMap<String, Object>();
                ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
                String view = "LSHPaymentVoucher";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                Date currentDate = Calendar.getInstance().getTime();
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                String currentDateStr = dateFormat.format(currentDate);
//        String paymentId = request.getParameter("bills");
                int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
                int mode = Integer.parseInt(request.getParameter("mode"));
                String companyid = AccountingManager.getCompanyidFromRequest(request);

                KwlReturnObject objItr = null;
                Payment payment = null;
                BillingPayment billingPayment = null;

                try {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    java.util.Date entryDate = null;
                    double total = 0;
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();

                    KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                    KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                    String createdby = "";
                    String project = "";
                    String currencyid = "";
                    String receiptNumber = "";
                    String paidTo = "";
                    Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
                    PayDetail PayDetail = null;
                    String memo = "";
                    String AccountName = "";
                    boolean ismanycrdb = false;
                    int receiptType = 0;
                    String bankCharges = "";
                    double bankChargesAmount = 0.0;
                    String vendorName = "";
                    String vendorCode = "";
                    String vendorAddress = "";
                    String vendorPhone = "";
                    String vendorFax = "";
                    String curr = "";
                    String currName = "";
                    HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
                    DecimalFormat decimalFormat = new DecimalFormat("0.00");
                    String netinword = "";
                    String cust = request.getParameter("customer");
                    String accname = request.getParameter("accname");
                    String address = request.getParameter("address");
                    double amount = Double.parseDouble(request.getParameter("amount"));
                    boolean iscontraentryflag = false;
                    iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));
                    int templateFlag = Integer.parseInt(request.getParameter("templateflag"));
                    DateFormat df = (DateFormat) requestParams.get("df");
//            String companyid = sessionHandlerImpl.getCompanyid(request);
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 0));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;
                    double advanceAmount = 0;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
                        advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
                    }
                    boolean advanceFlag = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
                        advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
                    }
                    List listPaymentDetails = null;
                    DateFormat dFormat = new SimpleDateFormat("dd/MM/yyyy");
                    if (mode == StaticValues.AUTONUM_PAYMENT) {
                        objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                        payment = (Payment) objItr.getEntityList().get(0);
                        if (payment.getCreatedby() != null) {
                            createdby = StringUtil.getFullName(payment.getCreatedby());
                        }
                        currencyid = (payment.getCurrency() == null) ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID();
                        curr = payment.getCurrency().getSymbol();
                        currName = payment.getCurrency().getName();
                        receiptNumber = payment.getPaymentNumber();
                        paidTo = payment.getPaidTo() != null ? payment.getPaidTo().getValue() : "";
                        journalEntryDate = payment.getJournalEntry().getEntryDate();
                        PayDetail = payment.getPayDetail();
                        memo = payment.getMemo();
                        Company com = payment.getCompany();
                        ismanycrdb = payment.isIsmanydbcr();
                        receiptType = payment.getReceipttype();
                        bankChargesAmount = payment.getBankChargesAmount();
                        entry = payment.getJournalEntry();
                        filter_names.add("payment.ID");
                        filter_params.add(payment.getID());
                        rRequestParams.put("filter_names", filter_names);
                        rRequestParams.put("filter_params", filter_params);
                        KwlReturnObject pdoresult = accVendorPaymentDAO.getPaymentDetails(rRequestParams);
                        listPaymentDetails = pdoresult.getEntityList();
                        if (!listPaymentDetails.isEmpty()) {
                            PaymentDetail paymentDetail = (PaymentDetail) listPaymentDetails.get(0);
                            Vendor vendor = paymentDetail.getGoodsReceipt().getVendor();
                            if (vendor != null) {
                                vendorName = vendor.getName();
                                vendorCode = vendor.getAcccode() != null ? vendor.getAcccode() : "";
                                vendorAddress = vendor.getAddress();
                                vendorPhone = vendor.getContactNumber();
                                vendorFax = vendor.getFax();
                            }
                        }
                    }

                    List<String> dimensionList = new ArrayList<String>();
                    List<String> dimensionValueList = new ArrayList<String>();
                    List<String> colonList = new ArrayList<String>();
                    if (entry != null) {

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(companyid);
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(entry.getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(moduleid + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Project")) {
                                            project = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (listPaymentDetails != null && listPaymentDetails.isEmpty() && receiptType != 7) {
                        PettyCashVoucher pettyCashVoucher = new PettyCashVoucher();
                        ArrayList<PettyCashVoucher> pettyCashVoucherList = new ArrayList<PettyCashVoucher>();
                        pettyCashVoucher.setDate(dFormat.format(journalEntryDate));
                        pettyCashVoucherList.add(pettyCashVoucher);
                        voucherMap = getLSHPaymentVoucherTable(request, dimensionList, dimensionValueList, colonList, paymentId);
                        voucherMap.put("format", "pdf");
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String header = StorageHandler.GetDocStorePath() + companyid + "_header" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("logo", logo);
                        voucherMap.put("title", "Payment Voucher");
                        voucherMap.put("number", receiptNumber);
                        voucherMap.put("type", "Voucher Number");
                        voucherMap.put("approver", "");
                        voucherMap.put("date", dFormat.format(journalEntryDate));
                        voucherMap.put("nametitle", "Applicant");
                        voucherMap.put("name", createdby);
                        voucherMap.put("to", "Payment To");
                        voucherMap.put("paymentto", paidTo);
                        voucherMap.put("totalamount", currName + " " + authHandler.formattedAmount(amount, companyid));
//                        voucherMap.put("datasource", new JRBeanCollectionDataSource(pettyCashVoucherList));
                        response.setHeader("Content-Disposition", "attachment;filename=" + "PaymentVoucher.pdf");

                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LSHPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(pettyCashVoucherList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);


                    } else if (listPaymentDetails != null && listPaymentDetails.isEmpty() && receiptType == 7) {
                        PettyCashVoucher pettyCashVoucher = new PettyCashVoucher();
                        ArrayList<PettyCashVoucher> pettyCashVoucherList = new ArrayList<PettyCashVoucher>();
                        String currencySymbol = payment.getCurrency().getCurrencyCode();
                        KwlReturnObject cnjedresult = accVendorPaymentDAO.getVendorCnPayment(paymentId);
                        List<CreditNotePaymentDetails> lst = cnjedresult.getEntityList();
                        int i = 0;
                        boolean iscustomer = false;
                        String name = "";
                        String code = "";
                        pettyCashVoucher.setDate(dFormat.format(journalEntryDate));
                        pettyCashVoucherList.add(pettyCashVoucher);
                        for (CreditNotePaymentDetails cnpd : lst) {
                            i++;
                            CreditNote cn = cnpd.getCreditnote();
                            if (cn.getCustomer() != null) {
                                iscustomer = true;
                                code = cn.getCustomer().getAcccode() != null ? cn.getCustomer().getAcccode() : "";
                                name = cn.getCustomer().getName();
                            }
                            if (cn.getVendor() != null) {
                                iscustomer = false;
                                code = cn.getVendor().getAcccode() != null ? cn.getVendor().getAcccode() : "";
                                name = cn.getVendor().getName();
                            }
                            double amt = cnpd.getAmountPaid();
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setAmount(curr + " " + authHandler.formattedAmount(amt, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(curr + " " + authHandler.formattedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setSno(i + "");
                            ferrateGroupPaymentVoucherTable.setTotalamount(curr + " " + authHandler.formattedAmount(amt, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(currencySymbol);
                            ferrateGroupPaymentVoucherTable.setDesc("Payment Made Against Credit Note # " + cn.getCreditNoteNumber());
                            ferrateGroupPaymentVoucherTable.setGrandtotal(curr + " " + authHandler.formattedAmount(amount, companyid));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);

                        }
                        voucherMap.put("PettyCashVoucherSubReportData", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));
                        voucherMap.put("format", "pdf");
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String header = StorageHandler.GetDocStorePath() + companyid + "_header" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("logo", logo);
                        voucherMap.put("title", "Payment Voucher");
                        voucherMap.put("number", receiptNumber);
                        voucherMap.put("type", "Voucher Number");
                        voucherMap.put("approver", "");
                        voucherMap.put("date", dFormat.format(journalEntryDate));
                        voucherMap.put("nametitle", (iscustomer == true ? "Customer" : "Vendor") + " Code");
                        voucherMap.put("name", code);
                        voucherMap.put("to", (iscustomer == true ? "Customer" : "Vendor") + " Name");
                        voucherMap.put("paymentto", name);
                        voucherMap.put("totalamount", currName + " " + authHandler.formattedAmount(amount, companyid));
//                        voucherMap.put("datasource", new JRBeanCollectionDataSource(pettyCashVoucherList));
                        response.setHeader("Content-Disposition", "attachment;filename=" + "PaymentVoucher.pdf");

                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LSHPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(pettyCashVoucherList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);


                    } else {

                        PaymentVoucher paymentVoucher = new PaymentVoucher();
                        ArrayList<PaymentVoucher> paymentVoucherList = new ArrayList<PaymentVoucher>();
                        String paymentAccount = "";
                        if (PayDetail != null && PayDetail.getPaymentMethod() != null && PayDetail.getPaymentMethod().getAccount() != null && PayDetail.getPaymentMethod().getAccount().getGroup() != null) {
                            paymentAccount = PayDetail.getPaymentMethod().getAccount().getGroup().getName();
                        }
                        getLSHPaymentVoucherTableData(request, voucherMap, paymentVoucher, paymentId);
                        paymentVoucherList.add(paymentVoucher);
                        voucherMap.put("format", "pdf");
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String header = StorageHandler.GetDocStorePath() + companyid + "_header" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("logo", logo);
                        voucherMap.put("footer", footer);
                        voucherMap.put("name", vendorCode);
                        voucherMap.put("nametitle", "Vendor Code");
                        voucherMap.put("title", "Payment Voucher");
                        voucherMap.put("number", receiptNumber);
                        voucherMap.put("type", "Voucher Number");
                        voucherMap.put("to", "Vendor Name");
                        voucherMap.put("paymentto", vendorName);
                        voucherMap.put("approver", "");
                        voucherMap.put("date", dFormat.format(journalEntryDate));
                        voucherMap.put("totalamount", currName + " " + authHandler.formattedAmount(amount, companyid));
//                voucherMap.put("datasource", new JRBeanCollectionDataSource(paymentVoucherList));
                        response.setHeader("Content-Disposition", "attachment;filename=" + "PaymentVoucher.pdf");

                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LSHPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(paymentVoucherList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                    }
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    public Map<String, Object> getLSHPaymentVoucherTable(HttpServletRequest request, List<String> dimensionList, List<String> dimensionValueList, List<String> colonList, String paymentId) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
        Map<String, Object> pettyCashVoucherMap = new HashMap<String, Object>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            Payment payment = null;
            BillingPayment billingPayment = null;
            JSONArray jArr = new JSONArray();
//            String paymentId = request.getParameter("bills");
            java.util.Date entryDate = null;
            double total = 0;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            KwlReturnObject objItr = null;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            String currencyid = null;
            String currencySymbol = "";
            String curr = "";
            String receiptNumber = "";
            Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
            PayDetail PayDetail = null;
            String memo = "";
            String AccountName = "";
            boolean ismanycrdb = false;
            int receiptType = 0;
            HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
            List<Double> debitAccountAmount = new ArrayList<Double>();
            List<Double> debitAccountTaxAmount = new ArrayList<Double>();
            List<Double> debitAccountTotalAmount = new ArrayList<Double>();
            List<Double> creditAccountAmount = new ArrayList<Double>();
            List<Double> creditAccountTaxAmount = new ArrayList<Double>();
            List<Double> creditAccountTotalAmount = new ArrayList<Double>();
            List<String> debitAccountCodeNumber = new ArrayList<String>();
            List<String> debitAccountCodeName = new ArrayList<String>();
            List<String> creditAccountCodeNumber = new ArrayList<String>();
            List<String> creditAccountCodeName = new ArrayList<String>();
            List<String> debitTaxRow = new ArrayList<String>();
            List<String> creditTaxRow = new ArrayList<String>();
            List<String> creditDescription = new ArrayList<String>();
            List<String> debitDescription = new ArrayList<String>();
            String netinword = "";
            String cust = request.getParameter("customer");
            String accname = request.getParameter("accname");
            String address = request.getParameter("address");
            double amount = 0.0;
            boolean iscontraentryflag = false;
            iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));
            int mode = Integer.parseInt(request.getParameter("mode"));

            double advanceAmount = 0;
            if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
                advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
            }
            boolean advanceFlag = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
                advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
            }

            if (mode == StaticValues.AUTONUM_PAYMENT) {
                objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                payment = (Payment) objItr.getEntityList().get(0);
                currencyid = (payment.getCurrency() == null) ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID();
                receiptNumber = payment.getPaymentNumber();
                journalEntryDate = payment.getJournalEntry().getEntryDate();
                PayDetail = payment.getPayDetail();
                memo = payment.getMemo();
                Company com = payment.getCompany();
                ismanycrdb = payment.isIsmanydbcr();
                receiptType = payment.getReceipttype();

                Iterator itrRow = payment.getJournalEntry().getDetails().iterator();
                while (itrRow.hasNext()) {
                    JournalEntryDetail jed = ((JournalEntryDetail) itrRow.next());
                    if (!jed.isDebit()) {
                        if (payment.getDeposittoJEDetail() != null) {
                            amount = payment.getDeposittoJEDetail().getAmount();
                        } else {
                            amount = jed.getAmount();
                        }
                    }
                }

            }

//            if (ismanycrdb) {
            if (mode == StaticValues.AUTONUM_PAYMENT) {
                filter_names.add("payment.ID");
                filter_params.add(payment.getID());
                rRequestParams.put("filter_names", filter_names);
                rRequestParams.put("filter_params", filter_params);
                KwlReturnObject pdoresult = accVendorPaymentDAO.getPaymentDetailOtherwise(rRequestParams);
                List<PaymentDetailOtherwise> list1 = pdoresult.getEntityList();
                Iterator pdoRow = list1.iterator();
                if (pdoRow != null && list1.size() > 0) {
                    for (PaymentDetailOtherwise pdo : list1) {
                        currencySymbol = pdo.getPayment().getCurrency().getCurrencyCode();
                        curr = pdo.getPayment().getCurrency().getSymbol();
                        if (payment.getID().equals(pdo.getPayment().getID())) {
                            if (payment.isIsmanydbcr()) {
                                if (pdo.isIsdebit()) {
                                    debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountAmount.add(pdo.getAmount());
                                    debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    debitDescription.add((pdo.getDescription()));

                                } else {
                                    creditAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountAmount.add(pdo.getAmount());
                                    creditAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    creditAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    creditTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    creditDescription.add((pdo.getDescription()));
                                }
                            } else {
                                debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountAmount.add(pdo.getAmount());
                                debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getTaxCode() : ""));
                                debitDescription.add((pdo.getDescription()));
                            }

                        }
                    }
                }
            }
            JSONObject obj;
//            if (ismanycrdb) {  //acc.je.accDebit
            int craditDebitFlag = 1;

            for (int i = 0; i < (craditDebitFlag == 1 ? debitAccountCodeName.size() : creditAccountCodeName.size()); i++) {

                FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                double amount1 = craditDebitFlag == 1 ? debitAccountAmount.get(i) : creditAccountAmount.get(i);
                double amount2 = craditDebitFlag == 1 ? debitAccountTaxAmount.get(i) : creditAccountTaxAmount.get(i);
                ferrateGroupPaymentVoucherTable.setAmount(curr + " " + authHandler.formattedAmount(amount1, companyid));
                ferrateGroupPaymentVoucherTable.setGstamount(curr + " " + authHandler.formattedAmount(amount2, companyid));
                ferrateGroupPaymentVoucherTable.setSno(Integer.toString(i + 1));
                ferrateGroupPaymentVoucherTable.setTotalamount(curr + " " + authHandler.formattedAmount((amount1 + amount2), companyid));
                ferrateGroupPaymentVoucherTable.setCurrencysymbol(currencySymbol);
                ferrateGroupPaymentVoucherTable.setDesc(craditDebitFlag == 1 ?  StringUtil.DecodeText(debitDescription.get(i)) :  StringUtil.DecodeText(creditDescription.get(i)));
                ferrateGroupPaymentVoucherTable.setGrandtotal(curr + " " + authHandler.formattedAmount(amount, companyid));
                ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
            }

            for (int i = 0; i < (craditDebitFlag == 1 ? creditAccountCodeName.size() : debitAccountCodeName.size()); i++) {
                FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                double amount1 = craditDebitFlag == 1 ? creditAccountAmount.get(i) : debitAccountAmount.get(i);
                double amount2 = craditDebitFlag == 1 ? creditAccountTaxAmount.get(i) : debitAccountTaxAmount.get(i);
                ferrateGroupPaymentVoucherTable.setAmount(curr + " " + authHandler.formattedAmount(amount1, companyid));
                ferrateGroupPaymentVoucherTable.setTax(curr + " " + authHandler.formattedAmount(amount2, companyid));
                ferrateGroupPaymentVoucherTable.setSno(Integer.toString(i + 1));
                ferrateGroupPaymentVoucherTable.setTotalamount(curr + " " + authHandler.formattedAmount((amount1 + amount2), companyid));
                ferrateGroupPaymentVoucherTable.setDesc(craditDebitFlag == 1 ?  StringUtil.DecodeText(creditDescription.get(i)) :  StringUtil.DecodeText(debitDescription.get(i)));
                ferrateGroupPaymentVoucherTable.setGrandtotal(curr + " " + authHandler.formattedAmount(amount, companyid));
                ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
            }

            if (advanceFlag) {
                obj = new JSONObject();
                obj.put("1", "Advance" + " : ");
                obj.put("2", authHandlerDAOObj.getFormattedCurrency(advanceAmount, currencyid, companyid));
                jArr.put(obj);

            }

            double totalAdvanceAmount = amount;
            if (advanceFlag) {
                totalAdvanceAmount = amount + advanceAmount;
            }

            pettyCashVoucherMap.put("PettyCashVoucherSubReportData", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));

        } catch (JSONException ex) {
            Logger.getLogger(accVendorPaymentControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerLedgerJasper : " + ex.getMessage(), ex);
        }

        return pettyCashVoucherMap;
    }

    public void getLSHPaymentVoucherTableData(HttpServletRequest request, Map<String, Object> voucherMap, PaymentVoucher paymentVoucher, String paymentId) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
        ArrayList<PaymentVoucherSubReport> paymentVoucherSubReportList = new ArrayList<PaymentVoucherSubReport>();
        Payment payment = null;
        BillingPayment billingPayment = null;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        JSONArray jArr = new JSONArray();
//        String paymentId = request.getParameter("bills");
        java.util.Date entryDate = null;
        double total = 0;
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
        KwlReturnObject objItr = null;
        KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
        KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

//        String currencyid = (payment.getCurrency() == null) ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID();
        String receiptNumber = "";
        Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
        PayDetail PayDetail = null;
        String memo = "";
        String AccountName = "";
        boolean ismanycrdb = false;
        int receiptType = 0;
        HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
        List<PettyCashVoucherSubSubReport> pettyCashVoucherSubSubReportList = new ArrayList<PettyCashVoucherSubSubReport>();
        HashMap pdoMAp = new HashMap();
        String netinword = "";
        String cust = request.getParameter("customer");
        String accname = request.getParameter("accname");
        String address = request.getParameter("address");
        double amount = Double.parseDouble(request.getParameter("amount"));
        String currencySymbol = "";
        String curr = "";

        boolean iscontraentryflag = false;
        iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));


        double advanceAmount = 0;
        if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
            advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
        }
        boolean advanceFlag = false;
        if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
            advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
        }
        int mode = Integer.parseInt(request.getParameter("mode"));
        DateFormat dFormat = new SimpleDateFormat("dd/MM/yyyy");
        if (mode == StaticValues.AUTONUM_PAYMENT) {
            objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
            payment = (Payment) objItr.getEntityList().get(0);
            receiptNumber = payment.getPaymentNumber();
            journalEntryDate = payment.getJournalEntry().getEntryDate();
            PayDetail = payment.getPayDetail();
            memo = payment.getMemo();
            Company com = payment.getCompany();
            ismanycrdb = payment.isIsmanydbcr();
            receiptType = payment.getReceipttype();
            filter_names.add("payment.ID");
            filter_params.add(payment.getID());
            rRequestParams.put("filter_names", filter_names);
            rRequestParams.put("filter_params", filter_params);
            KwlReturnObject pdoresult = accVendorPaymentDAO.getPaymentDetails(rRequestParams);
            List<PaymentDetail> list1 = pdoresult.getEntityList();
            Iterator pdoRow = list1.iterator();
            double totalAmount = 0.0;
            int i = 0;
            if (pdoRow != null && list1.size() > 0) {
                for (PaymentDetail pdo : list1) {
                    currencySymbol = pdo.getPayment().getCurrency().getCurrencyCode();
                    curr = pdo.getPayment().getCurrency().getSymbol();
                    if (payment.getID().equals(pdo.getPayment().getID())) {
                        i++;
                        FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                        ferrateGroupPaymentVoucherTable.setAmount(curr + " " + authHandler.formattedAmount((pdo.getAmount()), companyid));
                        ferrateGroupPaymentVoucherTable.setGstamount(curr + " " + authHandler.formattedAmount(0, companyid));
                        ferrateGroupPaymentVoucherTable.setSno(i + "");
                        ferrateGroupPaymentVoucherTable.setTotalamount(curr + " " + authHandler.formattedAmount(pdo.getAmount(), companyid));
                        ferrateGroupPaymentVoucherTable.setCurrencysymbol(currencySymbol);
                        ferrateGroupPaymentVoucherTable.setDesc("Payment Made Against Vendor Invoice # " + pdo.getGoodsReceipt().getGoodsReceiptNumber());
                        totalAmount += pdo.getAmount();
                        ferrateGroupPaymentVoucherTable.setGrandtotal(curr + " " + authHandler.formattedAmount(totalAmount, companyid));
                        ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);

                    }
                }
            }
        }
        voucherMap.put("PettyCashVoucherSubReportData", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));
    }

    @Override
    public List<Object> exportLSHPaymentReceipt(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String paymentId = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                paymentId = s;

                if (StringUtil.isNullOrEmpty(paymentId)) {
                    paymentId = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                Map<String, Object> voucherMap = new HashMap<String, Object>();
                ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
                String view = "LSHPaymentVoucher";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                Date currentDate = Calendar.getInstance().getTime();
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                String currentDateStr = dateFormat.format(currentDate);
//        String paymentId = request.getParameter("bills");
                int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
                int mode = Integer.parseInt(request.getParameter("mode"));
                String companyid = AccountingManager.getCompanyidFromRequest(request);
                KwlReturnObject objItr = null;
                Receipt payment = null;
                BillingPayment billingPayment = null;
                try {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    java.util.Date entryDate = null;
                    double total = 0;
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                    KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                    String createdby = "";
                    String project = "";
                    String currencyid = "";
                    String receiptNumber = "";
                    String paidTo = "";
                    Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
                    PayDetail PayDetail = null;
                    String memo = "";
                    String AccountName = "";
                    boolean ismanycrdb = false;
                    int receiptType = 0;
                    String bankCharges = "";
                    double bankChargesAmount = 0.0;
                    String vendorName = "";
                    String vendorCode = "";
                    String vendorAddress = "";
                    String vendorPhone = "";
                    String vendorFax = "";
                    String curr = "";
                    String currName = "";
                    HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
                    DecimalFormat decimalFormat = new DecimalFormat("0.00");
                    String netinword = "";
                    String cust = request.getParameter("customer");
                    String accname = request.getParameter("accname");
                    String address = request.getParameter("address");
                    double amount = Double.parseDouble(request.getParameter("amount"));
                    boolean iscontraentryflag = false;
                    iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));
                    int templateFlag = Integer.parseInt(request.getParameter("templateflag"));
                    DateFormat df = (DateFormat) requestParams.get("df");
//            String companyid = sessionHandlerImpl.getCompanyid(request);
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 0));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;

                    double advanceAmount = 0;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
                        advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
                    }
                    boolean advanceFlag = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
                        advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
                    }
                    List listPaymentDetails = null;
                    DateFormat dFormat = new SimpleDateFormat("dd/MM/yyyy");
                    if (mode == StaticValues.AUTONUM_RECEIPT) {
                        objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), paymentId);
                        payment = (Receipt) objItr.getEntityList().get(0);
                        if (payment.getCreatedby() != null) {
                            createdby = StringUtil.getFullName(payment.getCreatedby());
                        }
                        currencyid = (payment.getCurrency() == null) ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID();
                        curr = payment.getCurrency().getSymbol();
                        currName = payment.getCurrency().getName();
                        receiptNumber = payment.getReceiptNumber();
                        paidTo = payment.getReceivedFrom() != null ? payment.getReceivedFrom().getValue() : "";
                        journalEntryDate = payment.getJournalEntry().getEntryDate();
                        PayDetail = payment.getPayDetail();
                        memo = payment.getMemo();
                        Company com = payment.getCompany();
                        ismanycrdb = payment.isIsmanydbcr();
                        receiptType = payment.getReceipttype();
                        bankChargesAmount = payment.getBankChargesAmount();
                        entry = payment.getJournalEntry();
                        filter_names.add("receipt.ID");
                        filter_params.add(payment.getID());
                        rRequestParams.put("filter_names", filter_names);
                        rRequestParams.put("filter_params", filter_params);
                        KwlReturnObject pdoresult = accReceiptDAOobj.getReceiptDetails(rRequestParams);
                        listPaymentDetails = pdoresult.getEntityList();
                        
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                        addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                        if (!listPaymentDetails.isEmpty()) {
                            ReceiptDetail paymentDetail = (ReceiptDetail) listPaymentDetails.get(0);
                            Customer vendor = paymentDetail.getInvoice().getCustomer();
                            if (vendor != null) {
                                vendorName = vendor.getName();
                                vendorCode = vendor.getAcccode();
                                addressParams.put("isBillingAddress", true); //true to get billing address
                                addressParams.put("customerid", vendor.getID());
                                vendorAddress = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                                vendorPhone = vendor.getContactNumber();
                                vendorFax = vendor.getFax();
                            }
                        }
                    }
                    List<String> dimensionList = new ArrayList<String>();
                    List<String> dimensionValueList = new ArrayList<String>();
                    List<String> colonList = new ArrayList<String>();
                    if (entry != null) {

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(companyid);
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(entry.getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(moduleid + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Project")) {
                                            project = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (listPaymentDetails != null && listPaymentDetails.isEmpty() && receiptType != 7) {
                        PettyCashVoucher pettyCashVoucher = new PettyCashVoucher();
                        ArrayList<PettyCashVoucher> pettyCashVoucherList = new ArrayList<PettyCashVoucher>();
                        pettyCashVoucher.setDate(dFormat.format(journalEntryDate));
                        pettyCashVoucherList.add(pettyCashVoucher);
                        voucherMap = getLSHPaymentReceiptTable(request, dimensionList, dimensionValueList, colonList, paymentId);
                        voucherMap.put("format", "pdf");
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String header = StorageHandler.GetDocStorePath() + companyid + "_header" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("logo", logo);
                        voucherMap.put("name", createdby);
                        voucherMap.put("nametitle", "Applicant");
                        voucherMap.put("approver", "");
                        voucherMap.put("paymentto", paidTo);
                        voucherMap.put("to", "Payment From");
                        voucherMap.put("title", "Receipt of Payment");
                        voucherMap.put("number", receiptNumber);
                        voucherMap.put("type", "Receipt Number");
                        voucherMap.put("totalamount", currName + " " + authHandler.formattedAmount(amount, companyid));
                        voucherMap.put("date", dFormat.format(journalEntryDate));

//                        voucherMap.put("datasource", new JRBeanCollectionDataSource(pettyCashVoucherList));
                        response.setHeader("Content-Disposition", "attachment;filename=" + "PaymentReceipt.pdf");

                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LSHPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(pettyCashVoucherList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                    } else if (listPaymentDetails != null && listPaymentDetails.isEmpty() && receiptType == 7) {
                        PettyCashVoucher pettyCashVoucher = new PettyCashVoucher();
                        ArrayList<PettyCashVoucher> pettyCashVoucherList = new ArrayList<PettyCashVoucher>();
                        String currencySymbol = payment.getCurrency().getCurrencyCode();

                        KwlReturnObject dnjedresult = accVendorPaymentDAO.getVendorDnPayment(paymentId);
                        List<DebitNotePaymentDetails> lst = dnjedresult.getEntityList();
                        int i = 0;
                        boolean iscustomer = false;
                        String name = "";
                        String code = "";
                        pettyCashVoucher.setDate(dFormat.format(journalEntryDate));
                        pettyCashVoucherList.add(pettyCashVoucher);
                        for (DebitNotePaymentDetails dnpd: lst) {
                            i++;
                            DebitNote dn = dnpd.getDebitnote();
                            if (dn.getCustomer() != null) {
                                iscustomer = true;
                                code = dn.getCustomer().getAcccode() != null ? dn.getCustomer().getAcccode() : "";
                                name = dn.getCustomer().getName();
                            }
                            if (dn.getVendor() != null) {
                                iscustomer = false;
                                code = dn.getVendor().getAcccode() != null ? dn.getVendor().getAcccode() : "";
                                name = dn.getVendor().getName();
                            }

                            double amt = dnpd.getAmountPaid();
                            FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                            ferrateGroupPaymentVoucherTable.setAmount(curr + " " + authHandler.formattedAmount(amt, companyid));
                            ferrateGroupPaymentVoucherTable.setGstamount(curr + " " + authHandler.formattedAmount(0, companyid));
                            ferrateGroupPaymentVoucherTable.setSno(i + "");
                            ferrateGroupPaymentVoucherTable.setTotalamount(curr + " " + authHandler.formattedAmount(amt, companyid));
                            ferrateGroupPaymentVoucherTable.setCurrencysymbol(currencySymbol);
                            ferrateGroupPaymentVoucherTable.setDesc("Payment Received Against Debit Note # " + dn.getDebitNoteNumber());
                            ferrateGroupPaymentVoucherTable.setGrandtotal(curr + " " + authHandler.formattedAmount(amount, companyid));
                            ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);

                        }
                        voucherMap.put("PettyCashVoucherSubReportData", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));
                        voucherMap.put("format", "pdf");
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String header = StorageHandler.GetDocStorePath() + companyid + "_header" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("logo", logo);
                        voucherMap.put("title", "Receipt of Payment");
                        voucherMap.put("number", receiptNumber);
                        voucherMap.put("type", "Receipt Number");
                        voucherMap.put("approver", "");
                        voucherMap.put("date", dFormat.format(journalEntryDate));
                        voucherMap.put("nametitle", (iscustomer == true ? "Customer" : "Vendor") + " Code");
                        voucherMap.put("name", code);
                        voucherMap.put("to", (iscustomer == true ? "Customer" : "Vendor") + " Name");
                        voucherMap.put("paymentto", name);
                        voucherMap.put("totalamount", currName + " " + authHandler.formattedAmount(amount, companyid));
//                        voucherMap.put("datasource", new JRBeanCollectionDataSource(pettyCashVoucherList));
                        response.setHeader("Content-Disposition", "attachment;filename=" + "PaymentReceipt.pdf");

                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LSHPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(pettyCashVoucherList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);

                    } else {

                        PaymentVoucher paymentVoucher = new PaymentVoucher();
                        ArrayList<PaymentVoucher> paymentVoucherList = new ArrayList<PaymentVoucher>();
                        String paymentAccount = "";
                        if (PayDetail != null && PayDetail.getPaymentMethod() != null && PayDetail.getPaymentMethod().getAccount() != null && PayDetail.getPaymentMethod().getAccount().getGroup() != null) {
                            paymentAccount = PayDetail.getPaymentMethod().getAccount().getGroup().getName();
                        }
                        getLSHPaymentReceiptTableData(request, voucherMap, paymentVoucher, paymentId);
                        paymentVoucherList.add(paymentVoucher);
                        voucherMap.put("format", "pdf");
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String header = StorageHandler.GetDocStorePath() + companyid + "_header" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        voucherMap.put("logo", logo);
                        voucherMap.put("footer", footer);
                        voucherMap.put("name", vendorCode);
                        voucherMap.put("nametitle", "Customer Code");
                        voucherMap.put("to", "Customer Name");
                        voucherMap.put("paymentto", vendorName);
                        voucherMap.put("approver", "");
                        voucherMap.put("title", "Receipt of Payment");
                        voucherMap.put("number", receiptNumber);
                        voucherMap.put("type", "Receipt Number");
                        voucherMap.put("totalamount", currName + " " + authHandler.formattedAmount(amount, companyid));
                        voucherMap.put("date", dFormat.format(journalEntryDate));

//                voucherMap.put("datasource", new JRBeanCollectionDataSource(paymentVoucherList));

                        response.setHeader("Content-Disposition", "attachment;filename=" + "PaymentReceipt.pdf");

                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LSHPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(paymentVoucherList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                    }
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    public Map<String, Object> getLSHPaymentReceiptTable(HttpServletRequest request, List<String> dimensionList, List<String> dimensionValueList, List<String> colonList, String paymentId) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
        Map<String, Object> pettyCashVoucherMap = new HashMap<String, Object>();
        try {
            Receipt payment = null;
            BillingReceipt billingPayment = null;
            JSONArray jArr = new JSONArray();
            String companyid = sessionHandlerImpl.getCompanyid(request);
//            String paymentId = request.getParameter("bills");
            java.util.Date entryDate = null;
            double total = 0;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            KwlReturnObject objItr = null;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            String currencyid = null;
            String currencySymbol = "";
            String curr = "";
            String receiptNumber = "";
            Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
            PayDetail PayDetail = null;
            String memo = "";
            String AccountName = "";
            boolean ismanycrdb = false;
            int receiptType = 0;
            HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
            List<Double> debitAccountAmount = new ArrayList<Double>();
            List<Double> debitAccountTaxAmount = new ArrayList<Double>();
            List<Double> debitAccountTotalAmount = new ArrayList<Double>();
            List<Double> creditAccountAmount = new ArrayList<Double>();
            List<Double> creditAccountTaxAmount = new ArrayList<Double>();
            List<Double> creditAccountTotalAmount = new ArrayList<Double>();
            List<String> debitAccountCodeNumber = new ArrayList<String>();
            List<String> debitAccountCodeName = new ArrayList<String>();
            List<String> creditAccountCodeNumber = new ArrayList<String>();
            List<String> creditAccountCodeName = new ArrayList<String>();
            List<String> debitTaxRow = new ArrayList<String>();
            List<String> creditTaxRow = new ArrayList<String>();
            List<String> creditDescription = new ArrayList<String>();
            List<String> debitDescription = new ArrayList<String>();
            String netinword = "";
            String cust = request.getParameter("customer");
            String accname = request.getParameter("accname");
            String address = request.getParameter("address");
            double amount = Double.parseDouble(request.getParameter("amount"));
            boolean iscontraentryflag = false;
            iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));
            int mode = Integer.parseInt(request.getParameter("mode"));
            double advanceAmount = 0;
            if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
                advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
            }
            boolean advanceFlag = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
                advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
            }

            if (mode == StaticValues.AUTONUM_RECEIPT) {
                objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), paymentId);
                payment = (Receipt) objItr.getEntityList().get(0);
                currencyid = (payment.getCurrency() == null) ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID();
                receiptNumber = payment.getReceiptNumber();
                journalEntryDate = payment.getJournalEntry().getEntryDate();
                PayDetail = payment.getPayDetail();
                memo = payment.getMemo();
                Company com = payment.getCompany();
                ismanycrdb = payment.isIsmanydbcr();
                receiptType = payment.getReceipttype();
            }

//            if (ismanycrdb) {
            if (mode == StaticValues.AUTONUM_RECEIPT) {
                filter_names.add("receipt.ID");
                filter_params.add(payment.getID());
                rRequestParams.put("filter_names", filter_names);
                rRequestParams.put("filter_params", filter_params);
                KwlReturnObject pdoresult = accReceiptDAOobj.getReceiptDetailOtherwise(rRequestParams);
                List<ReceiptDetailOtherwise> list1 = pdoresult.getEntityList();
                Iterator pdoRow = list1.iterator();
                if (pdoRow != null && list1.size() > 0) {
                    for (ReceiptDetailOtherwise pdo : list1) {
                        currencySymbol = pdo.getReceipt().getCurrency().getCurrencyCode();
                        curr = pdo.getReceipt().getCurrency().getSymbol();
                        if (payment.getID().equals(pdo.getReceipt().getID())) {
                            if (payment.isIsmanydbcr()) {
                                if (pdo.isIsdebit()) {
                                    debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountAmount.add(pdo.getAmount());
                                    debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    debitDescription.add((pdo.getDescription()));

                                } else {
                                    creditAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountAmount.add(pdo.getAmount());
                                    creditAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                    creditAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                    creditAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                    creditTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                    creditDescription.add((pdo.getDescription()));
                                }
                            } else {
                                debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountAmount.add(pdo.getAmount());
                                debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getTaxCode() : ""));
                                debitDescription.add((pdo.getDescription()));
                            }

                        }
                    }
                }
            }

            JSONObject obj;
//            if (ismanycrdb) {  //acc.je.accDebit
            int craditDebitFlag = 1;

            for (int i = 0; i < (craditDebitFlag == 1 ? debitAccountCodeName.size() : creditAccountCodeName.size()); i++) {
                FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                double amount1 = craditDebitFlag == 1 ? debitAccountAmount.get(i) : creditAccountAmount.get(i);
                double amount2 = craditDebitFlag == 1 ? debitAccountTaxAmount.get(i) : creditAccountTaxAmount.get(i);
                ferrateGroupPaymentVoucherTable.setAmount(curr + " " + authHandler.formattedAmount(amount1, companyid));
                ferrateGroupPaymentVoucherTable.setGstamount(curr + " " + authHandler.formattedAmount(amount2, companyid));
                ferrateGroupPaymentVoucherTable.setSno(Integer.toString(i + 1));
                ferrateGroupPaymentVoucherTable.setTotalamount(curr + " " + authHandler.formattedAmount((amount1 + amount2), companyid));
                ferrateGroupPaymentVoucherTable.setCurrencysymbol(currencySymbol);
                ferrateGroupPaymentVoucherTable.setDesc(craditDebitFlag == 1 ?  StringUtil.DecodeText(debitDescription.get(i)) : StringUtil.DecodeText(creditDescription.get(i)));
                ferrateGroupPaymentVoucherTable.setGrandtotal(curr + " " + authHandler.formattedAmount(amount, companyid));
                ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
            }

            for (int i = 0; i < (craditDebitFlag == 1 ? creditAccountCodeName.size() : debitAccountCodeName.size()); i++) {

                FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                double amount1 = craditDebitFlag == 1 ? creditAccountAmount.get(i) : debitAccountAmount.get(i);
                double amount2 = craditDebitFlag == 1 ? creditAccountTaxAmount.get(i) : debitAccountTaxAmount.get(i);
                ferrateGroupPaymentVoucherTable.setAmount(curr + " " + authHandler.formattedAmount(amount1, companyid));
                ferrateGroupPaymentVoucherTable.setGstamount(curr + " " + authHandler.formattedAmount(amount2, companyid));
                ferrateGroupPaymentVoucherTable.setSno(Integer.toString(i + 1));
                ferrateGroupPaymentVoucherTable.setTotalamount(curr + " " + authHandler.formattedAmount((amount1 + amount2), companyid));
                ferrateGroupPaymentVoucherTable.setDesc(craditDebitFlag == 1 ?  StringUtil.DecodeText(creditDescription.get(i)) :  StringUtil.DecodeText(debitDescription.get(i)));
                ferrateGroupPaymentVoucherTable.setGrandtotal(curr + " " + authHandler.formattedAmount(amount, companyid));
                ferrateGroupPaymentVoucherTable.setCurrencysymbol(currencySymbol);
                ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
            }

            if (advanceFlag) {
                obj = new JSONObject();
                obj.put("1", "Advance" + " : ");
                obj.put("2", authHandlerDAOObj.getFormattedCurrency(advanceAmount, currencyid, companyid));
                jArr.put(obj);
            }

            double totalAdvanceAmount = amount;
            if (advanceFlag) {
                totalAdvanceAmount = amount + advanceAmount;
            }

            pettyCashVoucherMap.put("PettyCashVoucherSubReportData", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));

        } catch (JSONException ex) {
            Logger.getLogger(accVendorPaymentControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerLedgerJasper : " + ex.getMessage(), ex);
        }

        return pettyCashVoucherMap;
    }

    public void getLSHPaymentReceiptTableData(HttpServletRequest request, Map<String, Object> voucherMap, PaymentVoucher paymentVoucher, String paymentId) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        ArrayList<FerrateGroupPaymentVoucherTable> ferrateGroupPaymentVoucherTableList = new ArrayList<FerrateGroupPaymentVoucherTable>();
        ArrayList<PaymentVoucherSubReport> paymentVoucherSubReportList = new ArrayList<PaymentVoucherSubReport>();
        String comapanyid = sessionHandlerImpl.getCompanyid(request);
        Receipt receipt = null;
        BillingReceipt billingReceipt = null;
        JSONArray jArr = new JSONArray();
//        String paymentId = request.getParameter("bills");
        java.util.Date entryDate = null;
        double total = 0;
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
        KwlReturnObject objItr = null;
        KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
        KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
        String receiptNumber = "";
        Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
        PayDetail PayDetail = null;
        String memo = "";
        String AccountName = "";
        boolean ismanycrdb = false;
        int receiptType = 0;
        HashMap<String, Object> rRequestParams = new HashMap<String, Object>();

        List<PettyCashVoucherSubSubReport> pettyCashVoucherSubSubReportList = new ArrayList<PettyCashVoucherSubSubReport>();
        HashMap pdoMAp = new HashMap();
        String currencySymbol = "";
        String curr = "";
        String netinword = "";
        String cust = request.getParameter("customer");
        String accname = request.getParameter("accname");
        String address = request.getParameter("address");
        double amount = Double.parseDouble(request.getParameter("amount"));
        boolean iscontraentryflag = false;
        iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));
        double advanceAmount = 0;
        if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
            advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
        }
        boolean advanceFlag = false;
        if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
            advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
        }
        int mode = Integer.parseInt(request.getParameter("mode"));
        DateFormat dFormat = new SimpleDateFormat("dd/MM/yyyy");
        if (mode == StaticValues.AUTONUM_RECEIPT) {
            objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), paymentId);
            receipt = (Receipt) objItr.getEntityList().get(0);
            receiptNumber = receipt.getReceiptNumber();
            journalEntryDate = receipt.getJournalEntry().getEntryDate();
            PayDetail = receipt.getPayDetail();
            memo = receipt.getMemo();
            Company com = receipt.getCompany();
            ismanycrdb = receipt.isIsmanydbcr();
            receiptType = receipt.getReceipttype();
            filter_names.add("receipt.ID");
            filter_params.add(receipt.getID());
            rRequestParams.put("filter_names", filter_names);
            rRequestParams.put("filter_params", filter_params);
            KwlReturnObject pdoresult = accReceiptDAOobj.getReceiptDetails(rRequestParams);
            List<ReceiptDetail> list1 = pdoresult.getEntityList();
            Iterator pdoRow = list1.iterator();
            double totalAmount = 0.0;
            int i = 0;
            if (pdoRow != null && list1.size() > 0) {
                for (ReceiptDetail pdo : list1) {
                    currencySymbol = pdo.getReceipt().getCurrency().getCurrencyCode();
                    curr = pdo.getReceipt().getCurrency().getSymbol();
                    if (receipt.getID().equals(pdo.getReceipt().getID())) {
                        i++;
                        FerrateGroupPaymentVoucherTable ferrateGroupPaymentVoucherTable = new FerrateGroupPaymentVoucherTable();
                        ferrateGroupPaymentVoucherTable.setAmount(curr + " " + authHandler.formattedAmount(pdo.getAmount(), comapanyid));
                        ferrateGroupPaymentVoucherTable.setGstamount(curr + " " + authHandler.formattedAmount(0, comapanyid));
                        ferrateGroupPaymentVoucherTable.setSno(i + "");
                        ferrateGroupPaymentVoucherTable.setTotalamount(curr + " " + authHandler.formattedAmount(pdo.getAmount(), comapanyid));
                        ferrateGroupPaymentVoucherTable.setCurrencysymbol(currencySymbol);
                        ferrateGroupPaymentVoucherTable.setDesc("Payment Received Against Customer Invoice # " + pdo.getInvoice().getInvoiceNumber());
                        totalAmount += pdo.getAmount();
                        ferrateGroupPaymentVoucherTable.setGrandtotal(curr + " " + authHandler.formattedAmount(totalAmount, comapanyid));
                        ferrateGroupPaymentVoucherTableList.add(ferrateGroupPaymentVoucherTable);
                    }
                }
            }
        }

        voucherMap.put("PettyCashVoucherSubReportData", new JRBeanCollectionDataSource(ferrateGroupPaymentVoucherTableList));
    }

    @Override
    public List<Object> exportSatsTaxInvoiceJasper(HttpServletRequest request, HttpServletResponse response) {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                String view = "satsTaxInvoice";
                List<SatTaxInvoice> satTaxInvoicesList = new ArrayList<SatTaxInvoice>();
                List<SatTaxInvoiceTable> satTaxInvoiceTablesList = new ArrayList<SatTaxInvoiceTable>();
                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                String customerName = "";
                String customerAdd = "";
                String customerEmail = "";
                double shipLength = 0;
                String vesselName = "";
                String customerCode = "";
                String accNo = "";
                String terms = "";
                String billTo = "";
                String billAddr = "";
                String approverName = "";
                String shipTo = "";
                String memo = "";
                String salesPerson = null;
                String billtoAddress = "";
                boolean isInclude = false; //Hiding or Showing P.O. NO field in single PDF 
                Iterator itr = null;
                String linkTo = "";
                Discount totalDiscount = null;
                double totaltax = 0, discountTotalQuotation = 0, totaltaxpercent = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";
                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                String invoicetype = request.getParameter("invoicetype");
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                Map<String, Object> invoiceMap = new HashMap<String, Object>();
                SatTaxInvoice ferrateGroupTaxInvoice = new SatTaxInvoice();

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df = (DateFormat) requestParamsCustom.get("df");
                    DateFormat df1 = new SimpleDateFormat("dd-MM-yyyy");

                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Invoice_ModuleId, 0, 0));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;

//            String billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    String gstNo = "";
                    boolean addShipTo = true;
                    Company com = null;
                    Account cEntry = null;
                    String invno = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String uem = "";
                    double total = 0;
                    String curr = "";

                    KWLCurrency currency = null;
                    //        String companyid = sessionHandlerImpl.getCompanyid(request);
                    if (mode == StaticValues.AUTONUM_INVOICE) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), billid);
                        Invoice inv = (Invoice) cap.getEntityList().get(0);


                        String currencyid = "";
                        if (inv.getCreatedby() != null) {
                            approverName = StringUtil.getFullName(inv.getCreatedby());
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                        addShipTo = true;
                        com = inv.getCompany();
                        cEntry = inv.getCustomerEntry().getAccount();
                        invno = inv.getInvoiceNumber();
                        entryDate = inv.getJournalEntry().getEntryDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipDate();
                        shipvia = inv.getShipvia();
                        shipLength = inv.getShiplength();
                        fob = inv.getFob();
                        poRefno = inv.getPoRefNumber() == null ? "" : inv.getPoRefNumber();
                        filter_names.add("invoice.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? inv.getCustomerEntry().getAccount().getName() : inv.getCustomer().getName();
                        customerAdd = inv.getCustomer() != null ? inv.getCustomer().getBillingAddress() : "";
                        customerCode = inv.getCustomer() != null ? inv.getCustomer().getAcccode() : "";
                        accNo = inv.getAccount() != null ? inv.getAccount().getAcccode() : "";
                        billAddr = inv.getBillingShippingAddresses() != null ? CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), true) : inv.getBillTo() != null ? inv.getBillTo() : "";
                        customerEmail = inv.getCustomer() != null ? inv.getCustomer().getEmail() : "";
                        uem = inv.getCustomer() != null ? (inv.getCustomer().getAltContactNumber() != null ? inv.getCustomer().getAltContactNumber() : "") : "";
                        gstNo = inv.getCustomer() != null ? inv.getCustomer().getOther() : "";
                        billTo = "Bill To";
                        isInclude = false;
                        if (inv.getMasterSalesPerson() != null) {   //if User Class returns the Null Valu
                            salesPerson = inv.getMasterSalesPerson() != null ? inv.getMasterSalesPerson().getValue() : "";
                        } else {  //if salesperson class has no username
                            salesPerson = "";
                        }
                        terms = inv.getCustomer() != null ? Integer.toString(inv.getCustomer().getCreditTerm().getTermdays()) + " Days" : "";
                        shipTo = inv.getShipTo();
                        entry = inv.getJournalEntry();
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo() != null ? inv.getMemo() : "";
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        InvoiceDetail row = null;
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(inv.getCompany().getCompanyID());
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(inv.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(Constants.Acc_Invoice_ModuleId + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                    if (fieldComboData != null) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Vessel Name")) {
                                            vesselName = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
                                        }
//                                       String Label=varEntry.getKey();
//                                       String Value=fieldComboData.getValue()!=null ?fieldComboData.getValue():"";
                                    }
                                }
//                                  else if(customDateFieldMap.containsKey(varEntry.getKey())){
//                                       String Label=varEntry.getKey();
//                                       String Value=df.format(Long.parseLong(coldata));
//                              } else{
//                        if (!StringUtil.isNullOrEmpty(coldata)) {
//                            if ((varEntry.getKey().split("_")[1]).equals("Co. Reg. No.")) {
//                                ferrateGroupTaxInvoice.setComregno(coldata);
//                            }
//                        }
                            }
                        }
                        int i = 0;
                        while (itr.hasNext()) {
                            SatTaxInvoiceTable commercialinvoiceSubReport = new SatTaxInvoiceTable();
                            i++;
                            String prodName = "";
                            String total1 = "";
                            String prodDesc = "";
                            String prodCode = "";
                            String partNo = "";
                            Phrase phrase1 = new Phrase();
                            Phrase phrase2 = new Phrase();
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            Discount discount = null;
                            String uom = "";
                            double amount1 = 0;
                            row = (InvoiceDetail) itr.next();


                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc = row.getDescription();
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())) {
                                    prodDesc = row.getInventory().getProduct().getDescription();
                                }
                            }
                            try {
                                prodDesc =  StringUtil.DecodeText(prodDesc);
                            } catch (Exception e) {
                                prodDesc = prodDesc;
                            }
                            prodCode = row.getInventory().getProduct().getProductid() != null ? row.getInventory().getProduct().getProductid() : "";
                            prodName = row.getInventory().getProduct().getName() != null ? row.getInventory().getProduct().getName() : "";
                            if (!addShipTo) {
                                if (row.getDeliveryOrderDetail() != null && !StringUtil.isNullOrEmpty(row.getDeliveryOrderDetail().getPartno().trim())) {
                                    String partno = row.getDeliveryOrderDetail().getPartno();
                                    partNo = partno;
                                }
                            }
                            String displayQuantity = "";
                            String showQuantity = row.getShowquantity();
                            try {
                                double temp = Double.parseDouble(showQuantity);
                            } catch (Exception e) {
                                displayQuantity =  StringUtil.DecodeText(showQuantity);
                            }
                            quantity = row.getInventory().getQuantity();
                            changedQuantity = (row.getInvoice().getPendingapproval() == 0) ? row.getInventory().getBaseuomquantity() : row.getInventory().getActquantity();
                            rate = row.getRate();
                            discount = row.getDiscount();
                            uom = row.getInventory().getProduct().getUnitOfMeasure() == null ? "" : row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA();
                            if (row.getDeliveryOrderDetail() != null) {
                                linkTo = row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber();
                            } else if (row.getSalesorderdetail() != null) {
                                linkTo = row.getSalesorderdetail().getSalesOrder().getSalesOrderNumber();
                            } else if (row.getQuotationDetail() != null) {
                                linkTo = row.getQuotationDetail().getQuotation().getquotationNumber();
                            }
                            double rowTaxPercent = 0;
                            String rowTaxName = "";
                            amount1 = authHandler.round(rate * quantity, companyid);
                            if (row != null && row.getTax() != null) {
                                requestParams.put("transactiondate", entryDate);
                                requestParams.put("taxid", row.getTax() != null ? row.getTax().getID() : "");
                                requestParams.put("companyid", companyid);
                                KwlReturnObject result = accTaxObj.getTax(requestParams);
                                List taxList = result.getEntityList();
                                if (!taxList.isEmpty()) {
                                    Object[] taxObj = (Object[]) taxList.get(0);
                                    rowTaxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                                    rowTaxName = row.getTax().getName();
                                    amount1 += amount1 * rowTaxPercent / 100;
                                }
                            }

                            if (invoicetype.equals("Marine")) {
                                if (row.getInventory().getProduct().getParent() == null && row.getInventory().getProduct().getChildren().size() >= 1) {
                                    commercialinvoiceSubReport.setDesc("<b>" + prodDesc.replaceAll("\n", "<br>"));
                                    commercialinvoiceSubReport.setItemcode(prodCode);
                                    commercialinvoiceSubReport.setRate("");
                                    commercialinvoiceSubReport.setAmount("");
                                    commercialinvoiceSubReport.setUnit("");
                                    commercialinvoiceSubReport.setHeader1("Unit Cost (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("UOM");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else if (row.getInventory().getProduct().getParent() == null) {
                                    commercialinvoiceSubReport.setDesc(prodDesc.replaceAll("\n", "<br>"));
                                    commercialinvoiceSubReport.setItemcode(prodCode);
                                    commercialinvoiceSubReport.setRate(authHandler.formattedAmount(rate, companyid));
                                    commercialinvoiceSubReport.setAmount(authHandler.formattedAmount(amount1, companyid));
                                    commercialinvoiceSubReport.setUnit(StringUtil.isNullOrEmpty(displayQuantity) ? authHandler.formattedQuantity(quantity, companyid) : displayQuantity);
                                    commercialinvoiceSubReport.setHeader1("Unit Cost (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("UOM");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else {
                                    commercialinvoiceSubReport.setDesc("----" + prodDesc.replaceAll("\n", "<br>"));
                                    commercialinvoiceSubReport.setItemcode("");
                                    commercialinvoiceSubReport.setRate(authHandler.formattedAmount(rate, companyid));
                                    commercialinvoiceSubReport.setAmount(authHandler.formattedAmount(amount1, companyid));
                                    commercialinvoiceSubReport.setUnit(StringUtil.isNullOrEmpty(displayQuantity) ? authHandler.formattedQuantity(quantity, companyid) : displayQuantity);
                                    commercialinvoiceSubReport.setHeader1("Unit Cost (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("UOM");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                }
                            } else {
                                commercialinvoiceSubReport.setDesc(prodDesc);
                                commercialinvoiceSubReport.setItemcode(prodCode);
                                commercialinvoiceSubReport.setRate(authHandler.formattedAmount(rate, companyid));
                                commercialinvoiceSubReport.setAmount(authHandler.formattedAmount(amount1, companyid));
                                commercialinvoiceSubReport.setUnit(StringUtil.isNullOrEmpty(displayQuantity) ? authHandler.formattedQuantity(quantity, companyid) : displayQuantity);
                                if (invoicetype.equals("Ad-Hoc")) {
                                    commercialinvoiceSubReport.setHeader1("Unit Cost (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("UOM (hrs)");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else if (invoicetype.equals("VisitPassInv")) {
                                    commercialinvoiceSubReport.setHeader1("Rate (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("Quantity");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else if (invoicetype.equals("RetailInFix")) {
                                    commercialinvoiceSubReport.setHeader1("License Fee (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("No. of months");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else if (invoicetype.equals("RetailInvVar")) {
                                    commercialinvoiceSubReport.setHeader1("Gross Sales");
                                    commercialinvoiceSubReport.setHeader2("%");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else if (invoicetype.equals("WaterSale")) {
                                    commercialinvoiceSubReport.setHeader1("Price per kilo litre or part thereof");
                                    commercialinvoiceSubReport.setHeader2("Volume of Water (kilo litres)");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else if (invoicetype.equals("SecurityOfficer")) {
                                    commercialinvoiceSubReport.setHeader1("Cost per hour (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("No. of hours");
                                    commercialinvoiceSubReport.setHeader3("Total Amount (" + curr + ")");
                                } else if (invoicetype.equals("Event")) {
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                }
                            }
                            satTaxInvoiceTablesList.add(commercialinvoiceSubReport);
                            total = total + amount1;
                        }
                        totalDiscount = inv.getDiscount();
                        totaltax = inv.getTaxEntry() != null ? inv.getTaxEntry().getAmount() : 0;
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
                        totalAmount = inv.getCustomerEntry().getAmount();
                    }
                    invoiceMap.put("SatTaxInvoiceTable", new JRBeanCollectionDataSource(satTaxInvoiceTablesList));

                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);

                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    ferrateGroupTaxInvoice.setName(customerName);
                    ferrateGroupTaxInvoice.setCust("Customer");
                    ferrateGroupTaxInvoice.setCredit("Credit");
                    ferrateGroupTaxInvoice.setAdd(billAddr.replaceAll("\n", "<br>"));
                    ferrateGroupTaxInvoice.setAccno(customerCode);
                    ferrateGroupTaxInvoice.setDate(df1.format(entryDate));
                    ferrateGroupTaxInvoice.setRaisedby(approverName);
                    ferrateGroupTaxInvoice.setCurrency(currency.getName() != null ? currency.getName() : currency.getSymbol());
//            ferrateGroupTaxInvoice.setCurrencysymbol(currency.getCurrencyCode()!=null?currency.getCurrencyCode():"");
//            ferrateGroupTaxInvoice.setDonumber(linkTo);
//            ferrateGroupTaxInvoice.setDuedate(df1.format(dueDate));
                    ferrateGroupTaxInvoice.setTaxamount(authHandler.formattedAmount(totaltax, companyid));
                    ferrateGroupTaxInvoice.setGstregno(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    ferrateGroupTaxInvoice.setComregno(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    ferrateGroupTaxInvoice.setTaxpercent("");
//            ferrateGroupTaxInvoice.setPoref(poRefno);
                    ferrateGroupTaxInvoice.setSubtotal(authHandler.formattedAmount(total, companyid));
                    ferrateGroupTaxInvoice.setTerms(terms);
                    ferrateGroupTaxInvoice.setDocumentno(invno);
                    ferrateGroupTaxInvoice.setTotalamount(authHandler.formattedAmount(totalAmount, companyid));
                    ferrateGroupTaxInvoice.setTotalamountValue(authHandler.round(totalAmount, companyid));
                    ferrateGroupTaxInvoice.setVesselname(vesselName);
                    ferrateGroupTaxInvoice.setShiplength(authHandler.formattedAmount(shipLength, companyid));

//            if(currency!=null){
//                String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalAmount)), currency);
//                commercialinvoice.setTotalinword(currency.getCurrencyCode() + " " + netinword + " Only.");
//            }

                    satTaxInvoicesList.add(ferrateGroupTaxInvoice);

                    invoiceMap.put("format", "pdf");
                    String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("logo", logo);
                    invoiceMap.put("datasource", new JRBeanCollectionDataSource(satTaxInvoicesList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "TaxInvoice.pdf");
                    InputStream inputStream = null;
                    if (invoicetype.equals("Event")) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SATSEventTaxInvoice.jrxml");
                    } else {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SATSTaxInvoice.jrxml");
                    }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(satTaxInvoicesList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        return list;
    }

    @Override
    public List<Object> exportSATSCreditNoteJasperReport(HttpServletRequest request, HttpServletResponse response) {

        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;

                Map<String, Object> creditNoteMap = new HashMap<String, Object>();
                String view = "SATScreditNote";
                SatTaxInvoice creditNote = new SatTaxInvoice();
                ArrayList<SatTaxInvoice> creditNoteList = new ArrayList<SatTaxInvoice>();
                ArrayList<SATSCreditNoteDetailsTable> creditNoteTableList = new ArrayList<SATSCreditNoteDetailsTable>();
                ArrayList<SATSCreditNoteDetailsTable> creditNoteTableList1 = new ArrayList<SATSCreditNoteDetailsTable>();
                try {

                    boolean otherwiseFlag = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("otherwise"))) {
                        otherwiseFlag = Boolean.parseBoolean(request.getParameter("otherwise"));
                    }
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    DateFormat dateFormat = (DateFormat) requestParams.get("df");
                    DateFormat df1 = new SimpleDateFormat("dd-MM-yyyy");
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 0));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;

                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    int i = 0;
                    HashMap<String, Object> cnRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("creditNote.ID");
                    order_by.add("srno");
                    order_type.add("asc");
                    cnRequestParams.put("filter_names", filter_names);
                    cnRequestParams.put("filter_params", filter_params);
                    cnRequestParams.put("order_by", order_by);
                    cnRequestParams.put("order_type", order_type);
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), billid);
                    CreditNote cn = (CreditNote) result1.getEntityList().get(0);
                    entry = cn.getJournalEntry();
                    List<String> dimensionList = new ArrayList<String>();

                    String vesselName = "";
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add("companyid");
                    Detailfilter_params.add(companyid);
                    Detailfilter_names.add("journalentryId");
                    Detailfilter_params.add(entry.getID());
                    Detailfilter_names.add("moduleId");
                    Detailfilter_params.add(moduleid + "");
                    invDetailRequestParams.put("filter_names", Detailfilter_names);
                    invDetailRequestParams.put("filter_params", Detailfilter_params);
                    KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                    if (idcustresult.getEntityList().size() > 0) {
                        AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if (customFieldMap.containsKey(varEntry.getKey())) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Vessel Name")) {
                                        vesselName = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
                                    }
                                }
                            }
                        }
                    }

                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    CreditNoteDetail row = null;

                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names1 = new ArrayList(), filter_params1 = new ArrayList(), order_by1 = new ArrayList(), order_type1 = new ArrayList();
                    order_by1.add("srno");
                    order_type1.add("asc");
                    invRequestParams.put("order_by", order_by1);
                    invRequestParams.put("order_type", order_type1);

                    filter_names1.add("creditNote.ID");
                    filter_params1.add(cn.getID());
                    invRequestParams.put("filter_names", filter_names1);
                    invRequestParams.put("filter_params", filter_params1);
                    idresult = accCreditNoteDAOobj.getCreditNoteDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();

                    String cndnName = "";
                    String cndnDate = "";
                    String prodDesc = "";
                    double subTotal = 0;
                    double gstTotal = 0;
                    int temp = 0;
                    while (itr.hasNext()) {
                        row = (CreditNoteDetail) itr.next();
                        if (cn != null && row.getInvoice() != null) {
                            Set<CreditNoteTaxEntry> cnTaxEntryDetails = cn.getCnTaxEntryDetails();
                            if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {
                                temp++;
                                String invDesc = "";
                                SATSCreditNoteDetailsTable tableForInvoice = new SATSCreditNoteDetailsTable();
                                cndnName = row.getInvoice().getInvoiceNumber();
//                                cndnDate = row.getInvoice().isIsOpeningBalenceInvoice() ? df1.format(row.getInvoice().getCreationDate()) : df1.format(row.getInvoice().getJournalEntry().getEntryDate());
                                cndnDate = df1.format(row.getInvoice().getCreationDate());
//                        String invDesc = StringUtil.isNullOrEmpty(row.getInvoice().getMemo()) ? "" : "<br><br>" + row.getInvoice().getMemo();
                                if (temp == 1) {
                                    prodDesc = "<br>Being credit note for the following invoice.<br><br>Invoice # : " + cndnName + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoice Date : " + cndnDate + invDesc;
                                } else {
                                    prodDesc = "Invoice # : " + cndnName + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoice Date : " + cndnDate + invDesc;
                                }
                                tableForInvoice.setDesc(prodDesc);
                                tableForInvoice.setCurrency(row.getInvoice().getCurrency().getCurrencyCode());
                                creditNoteTableList1.add(tableForInvoice);

                            } else {// in case of if tax is not included while creation of DN Value will be go fron jedetail table in case of Edit.
                                String invDesc = "";
                                SATSCreditNoteDetailsTable tableForInvoice = new SATSCreditNoteDetailsTable();
                                temp++;
                                cndnName = row.getInvoice().getInvoiceNumber();
//                                cndnDate = row.getInvoice().isIsOpeningBalenceInvoice() ? df1.format(row.getInvoice().getCreationDate()) : df1.format(row.getInvoice().getJournalEntry().getEntryDate());
                                cndnDate = df1.format(row.getInvoice().getCreationDate());

//                        invDesc = StringUtil.isNullOrEmpty(row.getInvoice().getMemo()) ? "" : "<br><br>" + row.getInvoice().getMemo();

                                if (temp == 1) {
                                    prodDesc = "<br>Being credit note for the following invoice.<br><br>Invoice # : " + cndnName + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoice Date : " + cndnDate + invDesc;
                                } else {
                                    prodDesc = "Invoice # : " + cndnName + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoice Date : " + cndnDate + invDesc;
                                }
                                tableForInvoice.setDesc(prodDesc);
                                tableForInvoice.setCurrency(row.getInvoice().getCurrency().getCurrencyCode());
                                creditNoteTableList1.add(tableForInvoice);
                            }
                        }
                    }

                    if (cn != null) {
                        Set<CreditNoteTaxEntry> cnTaxEntryDetails = cn.getCnTaxEntryDetails();
                        if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {
                            String invDesc = "";
                            for (CreditNoteTaxEntry noteTaxEntry : cnTaxEntryDetails) {
                                SATSCreditNoteDetailsTable table = new SATSCreditNoteDetailsTable();
                                subTotal += noteTaxEntry.getAmount();
                                gstTotal += noteTaxEntry.getTaxamount();
                                table.setItemcode(noteTaxEntry.getAccount().getAcccode()==null?"":noteTaxEntry.getAccount().getAcccode());
                                table.setRate(authHandler.formattedAmount(noteTaxEntry.getAmount(), companyid));
                                table.setAmount(authHandler.formattedAmount((noteTaxEntry.getAmount() + noteTaxEntry.getTaxamount()), companyid));
                                table.setUnit(authHandler.formattedAmount(noteTaxEntry.getTaxamount(), companyid));
                                prodDesc = "";
                                if (!StringUtil.isNullOrEmpty(noteTaxEntry.getDescription())) {
                                    try {
                                        prodDesc =  StringUtil.DecodeText(noteTaxEntry.getDescription());
                                    } catch (Exception e) {
                                        prodDesc = noteTaxEntry.getDescription();
                                    }
                                } else {
                                    prodDesc = noteTaxEntry.getAccount().getName() != null ? noteTaxEntry.getAccount().getName() : "";
                                }
                                table.setDesc(prodDesc);
                                table.setCurrency(cn.getCurrency().getCurrencyCode());
                                creditNoteTableList.add(table);
                            }
                        } else {

                            JournalEntry je = cn.getJournalEntry();
                            Set<JournalEntryDetail> jeDetails = je.getDetails();
                            for (JournalEntryDetail jed : jeDetails) {
                                String invDesc = "";
                                SATSCreditNoteDetailsTable table = new SATSCreditNoteDetailsTable();
                                temp++;
                                if (!jed.isDebit()) {
                                    subTotal += jed.getAmount();
                                    gstTotal = 0;
                                    table.setItemcode(jed.getAccount().getAcccode()==null?"":jed.getAccount().getAcccode());
                                    table.setRate(authHandler.formattedAmount(jed.getAmount(), companyid));
                                    table.setAmount(authHandler.formattedAmount(jed.getAmount(), companyid));
                                    table.setUnit(authHandler.formattedAmount(0, companyid));
//                        invDesc = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : "<br><br>" + jed.getDescription();
                                    prodDesc = jed.getAccount().getName() != null ? jed.getAccount().getName() : "";
                                    table.setDesc(prodDesc);
                                    table.setCurrency(cn.getCurrency().getCurrencyCode());
                                    creditNoteTableList.add(table);
                                }
                            }
                        }
                    }
                    creditNoteTableList.addAll(creditNoteTableList1);
                    creditNoteMap.put("CreditDebitNoteDetailsTable", new JRBeanCollectionDataSource(creditNoteTableList));

                    String approverName = "";
                    if (cn.getCreatedby() != null) {
                        approverName = StringUtil.getFullName(cn.getCreatedby());
                    }
                    String terms = "";
                    String invno = cn.getCreditNoteNumber();
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    String entryDate = df.format(cn.getJournalEntry().getEntryDate());
                    creditNote.setDocumentno(invno);
                    creditNote.setCurrency(cn.getCurrency().getName() != null ? cn.getCurrency().getName() : "");
                    creditNote.setDate(entryDate);
                    
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true); //true to get billing address
                    if (cn.getCustomer() != null) {
                        creditNote.setAccno(cn.getCustomer().getAcccode() != null ? cn.getCustomer().getAcccode() : "");
                        creditNote.setName(cn.getCustomer().getName() != null ? cn.getCustomer().getName() : "");
                        addressParams.put("customerid", cn.getCustomer().getID());
                        creditNote.setAdd(accountingHandlerDAOobj.getCustomerAddress(addressParams).replaceAll("\n", "<br>"));
                        terms = Integer.toString(cn.getCustomer().getCreditTerm().getTermdays()) + " Days";
                        creditNote.setCust("Customer");
                        creditNote.setCredit("Credit");
                    }
                    if (cn.getVendor() != null) {
                        creditNote.setAccno(cn.getVendor().getAcccode() != null ? cn.getVendor().getAcccode() : "");
                        creditNote.setName(cn.getVendor().getName() != null ? cn.getVendor().getName() : "");
                        
                        //refer ticket ERP-10777
                        //creditNote.setAdd(accVendorHandler.getVendorAddress(cn.getVendor(), true).replaceAll("\n", "<br>"));
                        addressParams.put("vendorid", cn.getVendor().getID());
                        creditNote.setAdd(accountingHandlerDAOobj.getVendorAddress(addressParams).replaceAll("\n", "<br>"));
                        
                        terms = Integer.toString(cn.getVendor().getDebitTerm().getTermdays()) + " Days";
                        creditNote.setCust("Vendor");
                        creditNote.setCredit("Debit");
                    }

                    creditNote.setDate(entryDate);
                    creditNote.setRaisedby(approverName);
                    creditNote.setTaxamount(authHandler.formattedAmount(gstTotal, companyid));
                    creditNote.setGstregno(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    creditNote.setComregno(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    creditNote.setTaxpercent("");
                    creditNote.setSubtotal(authHandler.formattedAmount(subTotal, companyid));
                    creditNote.setTerms(terms);
                    creditNote.setTotalamount(authHandler.formattedAmount(cn.getCnamount(), companyid));
                    creditNote.setVesselname(vesselName);
//            creditNote.setShiplength(authHandler.formattedAmount(shipLength));
                    creditNoteList.add(creditNote);
                    creditNoteMap.put("format", "pdf");
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    creditNoteMap.put("logo", fileName1);
                    creditNoteMap.put("title", "CREDIT NOTE");
//            creditNoteMap.put("datasource", new JRBeanCollectionDataSource(creditNoteList));

                    InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SATSCreditNote.jrxml");
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(creditNoteList);
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, creditNoteMap, beanColDataSource);
                    response.setHeader("Content-Disposition", "attachment;filename=" + "CreditNote.pdf");
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        return list;
    }

    @Override
    public List<Object> exportSatsVendorTaxInvoiceJasper(HttpServletRequest request, HttpServletResponse response) {

        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                String view = "satsTaxInvoice";
                List<SatTaxInvoice> satTaxInvoicesList = new ArrayList<SatTaxInvoice>();
                List<SatTaxInvoiceTable> satTaxInvoiceTablesList = new ArrayList<SatTaxInvoiceTable>();
                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                String customerName = "";
                String customerAdd = "";
                String customerEmail = "";
                String customerCode = "";
                String accNo = "";
                String terms = "";
                String billTo = "";
                String billAddr = "";
                String approverName = "";
                double shipLength = 0;
                String vesselName = "";
                String shipTo = "";
                String memo = "";
                String salesPerson = null;
                String billtoAddress = "";
                boolean isInclude = false; //Hiding or Showing P.O. NO field in single PDF 
                Iterator itr = null;
                String linkTo = "";
                Discount totalDiscount = null;
                double totaltax = 0, discountTotalQuotation = 0, totaltaxpercent = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";
                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                String invoicetype = request.getParameter("invoicetype");
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                Map<String, Object> invoiceMap = new HashMap<String, Object>();
                SatTaxInvoice ferrateGroupTaxInvoice = new SatTaxInvoice();

                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df = (DateFormat) requestParamsCustom.get("df");
                    DateFormat df1 = new SimpleDateFormat("dd-MM-yyyy");

                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Vendor_Invoice_ModuleId, 0, 0));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;

//            String billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    String gstNo = "";
                    boolean addShipTo = true;
                    Company com = null;
                    Account cEntry = null;
                    String invno = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String uem = "";
                    double total = 0;
                    String curr = "";
                    KWLCurrency currency = null;
                    //        String companyid = sessionHandlerImpl.getCompanyid(request);
                    if (mode == StaticValues.AUTONUM_GOODSRECEIPT) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(GoodsReceipt.class.getName(), billid);
                        GoodsReceipt inv = (GoodsReceipt) cap.getEntityList().get(0);
                        String currencyid = "";
                        if (inv.getCreatedby() != null) {
                            approverName = StringUtil.getFullName(inv.getCreatedby());
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                        addShipTo = true;
                        com = inv.getCompany();
                        cEntry = inv.getVendorEntry().getAccount();
                        invno = inv.getGoodsReceiptNumber();
                        entryDate = inv.getJournalEntry().getEntryDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipDate();
                        shipvia = inv.getShipvia();
                        shipLength = inv.getShiplength();
                        fob = inv.getFob();
//                poRefno = inv.getPoRefNumber() == null ? "" : inv.getPoRefNumber();
                        filter_names.add("goodsReceipt.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accGoodsReceiptobj.getGoodsReceiptDetails(invRequestParams);
                        customerName = inv.getVendor() == null ? inv.getVendorEntry().getAccount().getName() : inv.getVendor().getName();
                        
                        //refer ticket ERP-10777
                        //customerAdd = inv.getVendor().getVendorAddresses() != null ? accVendorHandler.getVendorAddress(inv.getVendor(), true) : "";
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("vendorid", inv.getVendor().getID());
                        VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                        String vendorAttnContact = vendorAddressDetails == null ? "":(StringUtil.isNullOrEmpty(vendorAddressDetails.getContactPerson()) ? "":vendorAddressDetails.getContactPerson());
                        customerAdd = vendorAddressDetails != null ? accountingHandlerDAOobj.getVendorAddress(addressParams) : "";
                        
                        customerCode = inv.getVendor() != null ? inv.getVendor().getAcccode() : "";
                        accNo = inv.getAccount() != null ? inv.getAccount().getAcccode() : "";
                        billAddr = inv.getBillingShippingAddresses() != null ? CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), true) : inv.getBillTo() != null ? inv.getBillTo() : "";
//                customerEmail = inv.getCustomer() != null ? inv.getCustomer().getEmail() : "";
//                uem = inv.getCustomer() != null ? (inv.getCustomer().getAltContactNumber() != null ? inv.getCustomer().getAltContactNumber() : "") : "";
//                gstNo = inv.getCustomer() != null ? inv.getCustomer().getOther() : "";
                        billTo = "Bill To";
                        isInclude = false;
                        if (inv.getMasterSalesPerson() != null) {   //if User Class returns the Null Valu
                            salesPerson = inv.getMasterSalesPerson() != null ? inv.getMasterSalesPerson().getValue() : "";
                        } else {  //if salesperson class has no username
                            salesPerson = "";
                        }
                        terms = inv.getVendor() != null ? Integer.toString(inv.getVendor().getDebitTerm().getTermdays()) + " Days" : "";
                        shipTo = inv.getShipTo();
                        entry = inv.getJournalEntry();
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo() != null ? inv.getMemo() : "";
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        GoodsReceiptDetail row = null;
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(inv.getCompany().getCompanyID());
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(inv.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(Constants.Acc_Vendor_Invoice_ModuleId + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                    if (fieldComboData != null) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Vessel Name")) {
                                            vesselName = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
                                        }
//                                       String Label=varEntry.getKey();
//                                       String Value=fieldComboData.getValue()!=null ?fieldComboData.getValue():"";
                                    }
                                }
//                                  else if(customDateFieldMap.containsKey(varEntry.getKey())){
//                                       String Label=varEntry.getKey();
//                                       String Value=df.format(Long.parseLong(coldata));
//                              } else{
//                        if (!StringUtil.isNullOrEmpty(coldata)) {
//                            if ((varEntry.getKey().split("_")[1]).equals("Co. Reg. No.")) {
//                                ferrateGroupTaxInvoice.setComregno(coldata);
//                            }
//                        }
                            }
                        }
                        int i = 0;
                        while (itr.hasNext()) {
                            SatTaxInvoiceTable commercialinvoiceSubReport = new SatTaxInvoiceTable();
                            i++;
                            String prodName = "";
                            String total1 = "";
                            String prodDesc = "";
                            String prodCode = "";
                            String partNo = "";
                            Phrase phrase1 = new Phrase();
                            Phrase phrase2 = new Phrase();
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            Discount discount = null;
                            String uom = "";
                            double amount1 = 0;
                            row = (GoodsReceiptDetail) itr.next();


                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc = row.getDescription();
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())) {
                                    prodDesc = row.getInventory().getProduct().getDescription();
                                }
                            }
                            try {
                                prodDesc =  StringUtil.DecodeText(prodDesc);
                            } catch (Exception e) {
                                prodDesc = prodDesc;
                            }
                            prodCode = row.getInventory().getProduct().getProductid() != null ? row.getInventory().getProduct().getProductid() : "";
                            prodName = row.getInventory().getProduct().getName() != null ? row.getInventory().getProduct().getName() : "";

                            String displayQuantity = "";
                            String showQuantity = row.getShowquantity();
                            try {
                                double temp = Double.parseDouble(showQuantity);
                            } catch (Exception e) {
                                displayQuantity =  StringUtil.DecodeText(showQuantity);
                            }

                            quantity = row.getInventory().getQuantity();
                            changedQuantity = (row.getInventory().isInvrecord() && (row.getGoodsReceipt().getPendingapproval() == 0)) ? row.getInventory().getBaseuomquantity() : row.getInventory().getActquantity();
                            rate = row.getRate();
                            discount = row.getDiscount();
                            uom = row.getInventory().getProduct().getUnitOfMeasure() == null ? "" : row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA();

                            double rowTaxPercent = 0;
                            String rowTaxName = "";
                            amount1 = authHandler.round(rate * quantity, companyid);
                            if (row != null && row.getTax() != null) {
                                requestParams.put("transactiondate", entryDate);
                                requestParams.put("taxid", row.getTax() != null ? row.getTax().getID() : "");
                                requestParams.put("companyid", companyid);
                                KwlReturnObject result = accTaxObj.getTax(requestParams);
                                List taxList = result.getEntityList();
                                if (!taxList.isEmpty()) {
                                    Object[] taxObj = (Object[]) taxList.get(0);
                                    rowTaxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                                    rowTaxName = row.getTax().getName();
                                    amount1 += amount1 * rowTaxPercent / 100;
                                }
                            }

                            if (invoicetype.equals("Marine")) {
                                if (row.getInventory().getProduct().getParent() == null && row.getInventory().getProduct().getChildren().size() >= 1) {
                                    commercialinvoiceSubReport.setDesc("<b>" + prodDesc.replaceAll("\n", "<br>"));
                                    commercialinvoiceSubReport.setItemcode(prodCode);
                                    commercialinvoiceSubReport.setRate("");
                                    commercialinvoiceSubReport.setAmount("");
                                    commercialinvoiceSubReport.setUnit("");
                                    commercialinvoiceSubReport.setHeader1("Unit Cost (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("UOM");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else if (row.getInventory().getProduct().getParent() == null) {
                                    commercialinvoiceSubReport.setDesc(prodDesc.replaceAll("\n", "<br>"));
                                    commercialinvoiceSubReport.setItemcode(prodCode);
                                    commercialinvoiceSubReport.setRate(authHandler.formattedAmount(rate, companyid));
                                    commercialinvoiceSubReport.setAmount(authHandler.formattedAmount(amount1, companyid));
                                    commercialinvoiceSubReport.setUnit(StringUtil.isNullOrEmpty(displayQuantity) ? authHandler.formattedQuantity(quantity, companyid) : displayQuantity);
                                    commercialinvoiceSubReport.setHeader1("Unit Cost (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("UOM");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else {
                                    commercialinvoiceSubReport.setDesc("----" + prodDesc.replaceAll("\n", "<br>"));
                                    commercialinvoiceSubReport.setItemcode("");
                                    commercialinvoiceSubReport.setRate(authHandler.formattedAmount(rate, companyid));
                                    commercialinvoiceSubReport.setAmount(authHandler.formattedAmount(amount1, companyid));
                                    commercialinvoiceSubReport.setUnit(StringUtil.isNullOrEmpty(displayQuantity) ? authHandler.formattedQuantity(quantity, companyid) : displayQuantity);
                                    commercialinvoiceSubReport.setHeader1("Unit Cost (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("UOM");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                }
                            } else {
                                commercialinvoiceSubReport.setDesc(prodDesc);
                                commercialinvoiceSubReport.setItemcode(prodCode);
                                commercialinvoiceSubReport.setRate(authHandler.formattedAmount(rate, companyid));
                                commercialinvoiceSubReport.setAmount(authHandler.formattedAmount(amount1, companyid));
                                commercialinvoiceSubReport.setUnit(StringUtil.isNullOrEmpty(displayQuantity) ? authHandler.formattedQuantity(quantity, companyid) : displayQuantity);
                                if (invoicetype.equals("Ad-Hoc")) {
                                    commercialinvoiceSubReport.setHeader1("Unit Cost (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("UOM (hrs)");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else if (invoicetype.equals("VisitPassInv")) {
                                    commercialinvoiceSubReport.setHeader1("Rate (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("Quantity");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else if (invoicetype.equals("RetailInFix")) {
                                    commercialinvoiceSubReport.setHeader1("License Fee (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("No. of months");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else if (invoicetype.equals("RetailInvVar")) {
                                    commercialinvoiceSubReport.setHeader1("Gross Sales");
                                    commercialinvoiceSubReport.setHeader2("%");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else if (invoicetype.equals("WaterSale")) {
                                    commercialinvoiceSubReport.setHeader1("Volume of Water (kilo litres)");
                                    commercialinvoiceSubReport.setHeader2("Price per kilo litre or part thereof");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else if (invoicetype.equals("WaterSale")) {
                                    commercialinvoiceSubReport.setHeader1("Price per kilo litre or part thereof");
                                    commercialinvoiceSubReport.setHeader2("Volume of Water (kilo litres)");
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                } else if (invoicetype.equals("SecurityOfficer")) {
                                    commercialinvoiceSubReport.setHeader1("Cost per hour (" + curr + ")");
                                    commercialinvoiceSubReport.setHeader2("No. of hours");
                                    commercialinvoiceSubReport.setHeader3("Total Amount (" + curr + ")");
                                } else if (invoicetype.equals("Event")) {
                                    commercialinvoiceSubReport.setHeader3("Amount (" + curr + ")");
                                }
                            }
                            satTaxInvoiceTablesList.add(commercialinvoiceSubReport);
                            total = total + amount1;
                        }
                        totalDiscount = inv.getDiscount();
                        totaltax = inv.getTaxEntry() != null ? inv.getTaxEntry().getAmount() : 0;
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
                        totalAmount = inv.getVendorEntry().getAmount();
                    }
                    invoiceMap.put("SatTaxInvoiceTable", new JRBeanCollectionDataSource(satTaxInvoiceTablesList));

                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);

                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    ferrateGroupTaxInvoice.setName(customerName);
                    ferrateGroupTaxInvoice.setCust("Vendor");
                    ferrateGroupTaxInvoice.setCredit("Debit");
                    ferrateGroupTaxInvoice.setAdd(billAddr.replaceAll("\n", "<br>"));
                    ferrateGroupTaxInvoice.setAccno(customerCode);
                    ferrateGroupTaxInvoice.setDate(df1.format(entryDate));
                    ferrateGroupTaxInvoice.setRaisedby(approverName);
                    ferrateGroupTaxInvoice.setCurrency(currency.getName() != null ? currency.getName() : currency.getSymbol());
//            ferrateGroupTaxInvoice.setCurrencysymbol(currency.getCurrencyCode()!=null?currency.getCurrencyCode():"");
//            ferrateGroupTaxInvoice.setDonumber(linkTo);
                    ferrateGroupTaxInvoice.setTaxamount(authHandler.formattedAmount(totaltax, companyid));
                    ferrateGroupTaxInvoice.setGstregno(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    ferrateGroupTaxInvoice.setComregno(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    ferrateGroupTaxInvoice.setTaxpercent("");
                    ferrateGroupTaxInvoice.setSubtotal(authHandler.formattedAmount(total, companyid));
                    ferrateGroupTaxInvoice.setTerms(terms);
                    ferrateGroupTaxInvoice.setDocumentno(invno);
                    ferrateGroupTaxInvoice.setTotalamount(authHandler.formattedAmount(totalAmount, companyid));
                    ferrateGroupTaxInvoice.setTotalamountValue(authHandler.round(totalAmount, companyid));
                    ferrateGroupTaxInvoice.setVesselname(vesselName);
                    ferrateGroupTaxInvoice.setShiplength(authHandler.formattedAmount(shipLength, companyid));
                    satTaxInvoicesList.add(ferrateGroupTaxInvoice);

                    invoiceMap.put("format", "pdf");
                    String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("logo", logo);
                    invoiceMap.put("datasource", new JRBeanCollectionDataSource(satTaxInvoicesList));
                    response.setHeader("Content-Disposition", "attachment;filename=" + "TaxInvoice.pdf");
                    InputStream inputStream = null;
                    if (invoicetype.equals("Event")) {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SATSEventTaxInvoice.jrxml");
                    } else {
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SATSTaxInvoice.jrxml");
                    }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(satTaxInvoicesList);
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportSATSDebitNoteJasperReport(HttpServletRequest request, HttpServletResponse response) {

        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;

                Map<String, Object> creditNoteMap = new HashMap<String, Object>();
                String view = "SATScreditNote";
                SatTaxInvoice creditNote = new SatTaxInvoice();
                ArrayList<SatTaxInvoice> creditNoteList = new ArrayList<SatTaxInvoice>();
                ArrayList<SATSCreditNoteDetailsTable> creditNoteTableList = new ArrayList<SATSCreditNoteDetailsTable>();
                ArrayList<SATSCreditNoteDetailsTable> creditNoteTableList1 = new ArrayList<SATSCreditNoteDetailsTable>();
                try {

                    boolean otherwiseFlag = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("otherwise"))) {
                        otherwiseFlag = Boolean.parseBoolean(request.getParameter("otherwise"));
                    }
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    DateFormat dateFormat = (DateFormat) requestParams.get("df");
                    DateFormat df1 = new SimpleDateFormat("dd-MM-yyyy");
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 0));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;

                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    int i = 0;
                    HashMap<String, Object> cnRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("debitNote.ID");
                    order_by.add("srno");
                    order_type.add("asc");
                    cnRequestParams.put("filter_names", filter_names);
                    cnRequestParams.put("filter_params", filter_params);
                    cnRequestParams.put("order_by", order_by);
                    cnRequestParams.put("order_type", order_type);
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), billid);
                    DebitNote cn = (DebitNote) result1.getEntityList().get(0);
                    entry = cn.getJournalEntry();
                    List<String> dimensionList = new ArrayList<String>();

                    String vesselName = "";
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add("companyid");
                    Detailfilter_params.add(companyid);
                    Detailfilter_names.add("journalentryId");
                    Detailfilter_params.add(entry.getID());
                    Detailfilter_names.add("moduleId");
                    Detailfilter_params.add(Constants.Acc_Debit_Note_ModuleId + "");
                    invDetailRequestParams.put("filter_names", Detailfilter_names);
                    invDetailRequestParams.put("filter_params", Detailfilter_params);
                    KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                    if (idcustresult.getEntityList().size() > 0) {
                        AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if (customFieldMap.containsKey(varEntry.getKey())) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Vessel Name")) {
                                        vesselName = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
                                    }
                                }
                            }
                        }
                    }

                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    DebitNoteDetail row = null;

                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names1 = new ArrayList(), filter_params1 = new ArrayList(), order_by1 = new ArrayList(), order_type1 = new ArrayList();
                    order_by1.add("srno");
                    order_type1.add("asc");
                    invRequestParams.put("order_by", order_by1);
                    invRequestParams.put("order_type", order_type1);

                    filter_names1.add("debitNote.ID");
                    filter_params1.add(cn.getID());
                    invRequestParams.put("filter_names", filter_names1);
                    invRequestParams.put("filter_params", filter_params1);
                    idresult = accDebitNoteobj.getDebitNoteDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();

                    String cndnName = "";
                    String cndnDate = "";
                    String prodDesc = "";
                    double subTotal = 0;
                    double gstTotal = 0;
                    int temp = 0;
                    while (itr.hasNext()) {
                        row = (DebitNoteDetail) itr.next();
                        if (cn != null && row.getGoodsReceipt() != null) {
                            Set<DebitNoteTaxEntry> cnTaxEntryDetails = cn.getDnTaxEntryDetails();
                            if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {
                                temp++;
                                String invDesc = "";
                                SATSCreditNoteDetailsTable tableForInvoice = new SATSCreditNoteDetailsTable();
                                cndnName = row.getGoodsReceipt().getGoodsReceiptNumber();
//                                cndnDate = row.getGoodsReceipt().isIsOpeningBalenceInvoice() ? df1.format(row.getGoodsReceipt().getCreationDate()) : df1.format(row.getGoodsReceipt().getJournalEntry().getEntryDate());
                                cndnDate = df1.format(row.getGoodsReceipt().getCreationDate());
//                        invDesc = StringUtil.isNullOrEmpty(row.getGoodsReceipt().getMemo()) ? "" : "<br><br>" + row.getGoodsReceipt().getMemo();
                                if (temp == 1) {
                                    prodDesc = "<br>Being Debit note for the following invoice.<br><br>Invoice # : " + cndnName + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoice Date : " + cndnDate + invDesc;
                                } else {
                                    prodDesc = "Invoice # : " + cndnName + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoice Date : " + cndnDate + invDesc;
                                }
                                tableForInvoice.setDesc(prodDesc);
                                tableForInvoice.setCurrency(row.getGoodsReceipt().getCurrency().getCurrencyCode());
                                creditNoteTableList1.add(tableForInvoice);

                            } else {// in case of if tax is not included while creation of DN Value will be go fron jedetail table in case of Edit.
                                String invDesc = "";
                                SATSCreditNoteDetailsTable tableForInvoice = new SATSCreditNoteDetailsTable();
                                temp++;

                                cndnName = row.getGoodsReceipt().getGoodsReceiptNumber();
//                                cndnDate = row.getGoodsReceipt().isIsOpeningBalenceInvoice() ? df1.format(row.getGoodsReceipt().getCreationDate()) : df1.format(row.getGoodsReceipt().getJournalEntry().getEntryDate());
                                cndnDate = df1.format(row.getGoodsReceipt().getCreationDate());
//                        invDesc = StringUtil.isNullOrEmpty(row.getGoodsReceipt().getMemo()) ? "" : "<br><br>" + row.getGoodsReceipt().getMemo();

                                if (temp == 1) {
                                    prodDesc = "<br>Being Debit note for the following invoice.<br><br>Invoice # : " + cndnName + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoice Date : " + cndnDate + invDesc;
                                } else {
                                    prodDesc = "Invoice # : " + cndnName + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoice Date : " + cndnDate + invDesc;
                                }
                                tableForInvoice.setDesc(prodDesc);
                                tableForInvoice.setCurrency(row.getGoodsReceipt().getCurrency().getCurrencyCode());
                                creditNoteTableList1.add(tableForInvoice);
                            }
                        }
                    }

                    if (cn != null) {
                        Set<DebitNoteTaxEntry> cnTaxEntryDetails = cn.getDnTaxEntryDetails();
                        if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {
                            String invDesc = "";
                            for (DebitNoteTaxEntry noteTaxEntry : cnTaxEntryDetails) {
                                SATSCreditNoteDetailsTable table = new SATSCreditNoteDetailsTable();
                                subTotal += noteTaxEntry.getAmount();
                                gstTotal += noteTaxEntry.getTaxamount();
                                table.setItemcode(noteTaxEntry.getAccount().getAcccode());
                                table.setRate(authHandler.formattedAmount(noteTaxEntry.getAmount(), companyid));
                                table.setAmount(authHandler.formattedAmount((noteTaxEntry.getAmount() + noteTaxEntry.getTaxamount()), companyid));
                                table.setUnit(authHandler.formattedAmount(noteTaxEntry.getTaxamount(), companyid));
                                prodDesc = "";
                                if (!StringUtil.isNullOrEmpty(noteTaxEntry.getDescription())) {
                                    try {
                                        prodDesc =  StringUtil.DecodeText(noteTaxEntry.getDescription());
                                    } catch (Exception e) {
                                        prodDesc = noteTaxEntry.getDescription();
                                    }
                                } else {
                                    prodDesc = noteTaxEntry.getAccount().getName() != null ? noteTaxEntry.getAccount().getName() : "";
                                }
                                table.setDesc(prodDesc);
                                table.setCurrency(cn.getCurrency().getCurrencyCode());
                                creditNoteTableList.add(table);
                            }
                        } else {

                            JournalEntry je = cn.getJournalEntry();
                            Set<JournalEntryDetail> jeDetails = je.getDetails();
                            for (JournalEntryDetail jed : jeDetails) {
                                String invDesc = "";
                                SATSCreditNoteDetailsTable table = new SATSCreditNoteDetailsTable();
                                temp++;
                                if (!jed.isDebit()) {
                                    subTotal += jed.getAmount();
                                    gstTotal = 0;
                                    table.setItemcode(jed.getAccount().getAcccode());
                                    table.setRate(authHandler.formattedAmount(jed.getAmount(), companyid));
                                    table.setAmount(authHandler.formattedAmount(jed.getAmount(), companyid));
                                    table.setUnit(authHandler.formattedAmount(0, companyid));
//                        invDesc = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : "<br><br>" + jed.getDescription();
                                    prodDesc = jed.getAccount().getName() != null ? jed.getAccount().getName() : "";
                                    table.setDesc(prodDesc);
                                    table.setCurrency(cn.getCurrency().getCurrencyCode());
                                    creditNoteTableList.add(table);
                                }
                            }
                        }
                    }

                    creditNoteTableList.addAll(creditNoteTableList1);
                    creditNoteMap.put("CreditDebitNoteDetailsTable", new JRBeanCollectionDataSource(creditNoteTableList));

                    String approverName = "";
                    if (cn.getCreatedby() != null) {
                        approverName = StringUtil.getFullName(cn.getCreatedby());
                    }
                    String terms = "";
                    String invno = cn.getDebitNoteNumber();
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    String entryDate = df.format(cn.getJournalEntry().getEntryDate());
                    creditNote.setDocumentno(invno);
                    creditNote.setCurrency(cn.getCurrency().getCurrencyCode() != null ? cn.getCurrency().getCurrencyCode() : "");
                    creditNote.setDate(entryDate);
                    
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    if (cn.getCustomer() != null) {
                        creditNote.setAccno(cn.getCustomer().getAcccode() != null ? cn.getCustomer().getAcccode() : "");
                        creditNote.setName(cn.getCustomer().getName() != null ? cn.getCustomer().getName() : "");
                        
                        addressParams.put("customerid", cn.getCustomer().getID());
                        creditNote.setAdd(accountingHandlerDAOobj.getCustomerAddress(addressParams).replaceAll("\n", "<br>"));
                        
                        terms = Integer.toString(cn.getCustomer().getCreditTerm().getTermdays()) + " Days";
                        creditNote.setCust("Customer");
                        creditNote.setCredit("Credit");
                    }
                    if (cn.getVendor() != null) {
                        creditNote.setAccno(cn.getVendor().getAcccode() != null ? cn.getVendor().getAcccode() : "");
                        creditNote.setName(cn.getVendor().getName() != null ? cn.getVendor().getName() : "");
                        
                        //refer ticket ERP-10777
                        //creditNote.setAdd(accVendorHandler.getVendorAddress(cn.getVendor(), true).replaceAll("\n", "<br>"));
                        addressParams.put("vendorid", cn.getVendor().getID());
                        creditNote.setAdd(accountingHandlerDAOobj.getVendorAddress(addressParams).replaceAll("\n", "<br>"));
                        
                        terms = Integer.toString(cn.getVendor().getDebitTerm().getTermdays()) + " Days";
                        creditNote.setCust("Vendor");
                        creditNote.setCredit("Debit");
                    }
                    creditNote.setDate(entryDate);
                    creditNote.setRaisedby(approverName);
                    creditNote.setTaxamount(authHandler.formattedAmount(gstTotal, companyid));
                    creditNote.setGstregno(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    creditNote.setComregno(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    creditNote.setTaxpercent("");
                    creditNote.setSubtotal(authHandler.formattedAmount(subTotal, companyid));
                    creditNote.setTerms(terms);
                    creditNote.setTotalamount(authHandler.formattedAmount(cn.getDnamount(), companyid));
                    creditNote.setVesselname(vesselName);
//            creditNote.setShiplength(authHandler.formattedAmount(shipLength));
                    creditNoteList.add(creditNote);
                    creditNoteMap.put("format", "pdf");
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    creditNoteMap.put("logo", fileName1);
                    creditNoteMap.put("title", "DEBIT NOTE");
//            creditNoteMap.put("datasource", new JRBeanCollectionDataSource(creditNoteList));

                    InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SATSCreditNote.jrxml");
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(creditNoteList);
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, creditNoteMap, beanColDataSource);
                    response.setHeader("Content-Disposition", "attachment;filename=" + "DebitNote.pdf");
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    public List<Object> exportHengguanCustomerQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                List<HenggaunCustomerQuotationSubreport> henggaunCustomerQuotationSubreportList = new ArrayList<HenggaunCustomerQuotationSubreport>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                String customerName = "";
                String attn = "";
                String customerPhone = "";
                String customerEmail = "";
                String approverName = "";   //Quotation Creator               
                Iterator itr = null;
                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                Map<String, Object> quotationMap = new HashMap<String, Object>();
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                HengguanCustomerQuotation hengguanCustomerQuotation = new HengguanCustomerQuotation();
                ArrayList<HengguanCustomerQuotation> hengguanCustomerQuotationList = new ArrayList<HengguanCustomerQuotation>();
                try {
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Customer_Quotation_ModuleId, 0, 1));
//                    Company com = null;
                    Date entryDate = null;
                    DecimalFormat hengguanDecimalFormat = new DecimalFormat("#,###,###,##0.00");    //Rate Format
//                    DecimalFormat quantityFormat = new DecimalFormat("0");                        //Quantity Format
                    InputStream inputStream = null;
                    if (mode == StaticValues.AUTONUM_QUOTATION) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Quotation.class.getName(), billid);
                        Quotation inv = (Quotation) cap.getEntityList().get(0);
                        if (inv.getCreatedby() != null) {
                            approverName = StringUtil.getFullName(inv.getCreatedby());
                        }
//                        com = inv.getCompany();           // Company Details
                        entryDate = inv.getQuotationDate(); //Quotation Date
                        filter_names.add("quotation.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accInvoiceDAOobj.getQuotationDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? inv.getCustomer().getAccount().getName() : inv.getCustomer().getName();
                        hengguanCustomerQuotation.setCustomerName(customerName);
                        
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("customerid", inv.getCustomer().getID());
                        CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                        if (customerAddressDetails != null) {
                            attn = StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : customerAddressDetails.getContactPerson();
                            customerPhone = (customerAddressDetails.getPhone() != null ? customerAddressDetails.getPhone() : "");
                            customerEmail = (customerAddressDetails.getEmailID() != null ? customerAddressDetails.getEmailID() : "");
                        }
                        
                        hengguanCustomerQuotation.setCustomerPhone(customerPhone);
                        hengguanCustomerQuotation.setCustomerEmail(customerEmail);
                        hengguanCustomerQuotation.setAttentionName(attn);

                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MMM-yy");
                        String entryDateString = simpleDateFormat.format(entryDate);
                        hengguanCustomerQuotation.setQuotDate(entryDateString);

                        hengguanCustomerQuotation.setCreatorName(approverName);
                        String contactNumber = inv.getCreatedby().getContactNumber();
                        hengguanCustomerQuotation.setCreatorPhone(contactNumber);

                        itr = idresult.getEntityList().iterator();
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        QuotationDetail row = null;
                        String imagePath = "";
                        HashMap<String, Object> fieldrequestParamsData = new HashMap();
                        HashMap<String, String> replaceFieldMapData = new HashMap<String, String>();
                        fieldrequestParamsData.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                        fieldrequestParamsData.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Customer_Quotation_ModuleId, 1));
                        HashMap<String, Integer> fieldMap2 = accAccountDAOobj.getFieldParamsMap(fieldrequestParamsData, replaceFieldMapData);
                        int i = 0;

                        while (itr.hasNext()) {
                            i++;
                            String prodName = "";
//                            double quantity = 0;
                            double rate = 0;
                            row = (QuotationDetail) itr.next();
                            String prodid = row.getProduct().getID() != null ? row.getProduct().getID() : "";
                            prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
//                            quantity = row.getQuantity();     //No. of Quantity
                            rate = row.getRate();
                            String fat = "";
                            String shelfLife = "";
                            String packaging = "";
                            String originCountry = "";
                            Map<String, Object> variableMapData = new HashMap<String, Object>();
                            QuotationDetailCustomData quotationDetailCustomData = (QuotationDetailCustomData) row.getQuotationDetailCustomData();
                            HashMap<String, String> replaceFieldMap2 = new HashMap<String, String>();
                            AccountingManager.setCustomColumnValues(quotationDetailCustomData, fieldMap2, replaceFieldMap2, variableMapData);
                            for (Map.Entry<String, Object> varEntry : variableMapData.entrySet()) {
                                String coldata = varEntry.getValue() != null ? varEntry.getValue().toString() : "";
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);

                                    if ((varEntry.getKey().split("_")[1]).equals("Fat")) {
                                        fat = coldata;
                                    }

                                    if ((varEntry.getKey().split("_")[1]).equals("Shelf Life")) {
                                        shelfLife = coldata;
                                    }


                                    if ((varEntry.getKey().split("_")[1]).equals("Packaging")) {
                                        packaging = coldata;
                                    }

                                    if (fieldComboData != null) {   //For combo field - Origin Country 
                                        if ((varEntry.getKey().split("_")[1]).equals("Origin Country")) {
                                            originCountry = fieldComboData.getValue();
                                        }
                                    }
                                }
                            }
                            HenggaunCustomerQuotationSubreport henggaunCustomerQuotationSubreport = new HenggaunCustomerQuotationSubreport();
                            henggaunCustomerQuotationSubreport.setProductName(prodName);
                            henggaunCustomerQuotationSubreport.setFatContent(fat);
                            henggaunCustomerQuotationSubreport.setShelfLife(shelfLife);
                            henggaunCustomerQuotationSubreport.setPackaging(packaging);
                            henggaunCustomerQuotationSubreport.setOriginCountry(originCountry);
                            henggaunCustomerQuotationSubreport.setPrice(hengguanDecimalFormat.format(rate));
                            String temp = storageHandlerImpl.GetProfileImgStorePath() + Constants.ProductImages;
                            imagePath = temp + prodid + ".png";
                            henggaunCustomerQuotationSubreport.setImgPath(imagePath);
                            henggaunCustomerQuotationSubreportList.add(henggaunCustomerQuotationSubreport);
                        }
                        quotationMap.put("HenggaunCustomerQuotationData", new JRBeanCollectionDataSource(henggaunCustomerQuotationSubreportList));
                        hengguanCustomerQuotationList.add(hengguanCustomerQuotation);
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        quotationMap.put("logo", logo);
                        quotationMap.put("format", "pdf");
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/HenggaunCustomerQuotation.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(hengguanCustomerQuotationList);

                        InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/HenggaunCustomerQuotationSubreport.jrxml");
                        JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                        jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                        quotationMap.put("HenggaunCustomerQuotationSubReport", jasperReportSubReport);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, quotationMap, beanColDataSource);

                        list.add(jasperPrint);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportTIDPaymentVoucher(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String paymentId = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int countryLanguageId = Constants.OtherCountryLanguageId; // 0

        if (recArray.length != 0) {
            try {
                String companyId = sessionHandlerImpl.getCompanyid(request);
                KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyId);
                ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                if (extraCompanyPreferences.isAmountInIndianWord()) {
                    countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
                }
            } catch (Exception ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (String s : recArray) {
                paymentId = s;

                if (StringUtil.isNullOrEmpty(paymentId)) {
                    paymentId = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                Map<String, Object> voucherMap = new HashMap<String, Object>();

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                Date currentDate = Calendar.getInstance().getTime();
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

                int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
                int mode = Integer.parseInt(request.getParameter("mode"));
                int templateFlag = Integer.parseInt(request.getParameter("templateflag"));
                String companyname = "";
                String companyregno = ""; 
                String companyid = AccountingManager.getCompanyidFromRequest(request);
                /*TID_Subdomain_templateflag = 141;
    public static final int TIDR_Subdomain_templateflag = 142;
    public static final int CUSCADEN_Subdomain_templateflag = 143;
    public static final int TCD_Subdomain_templateflag = 144;
    public static final int CAMBORNE_Subdomain_templateflag = 145;
    public static final int MITSUI_Subdomain_templateflag = 146;*/
                switch(templateFlag){
                     case Constants.TID_Subdomain_templateflag:
                           companyregno = "196600206D";
                            break;
                    case Constants.TIDR_Subdomain_templateflag:
                           companyregno = "201022916C";
                            break;
                    case Constants.CUSCADEN_Subdomain_templateflag:
                           companyregno = "200007357R";
                            break;
                    case Constants.TCD_Subdomain_templateflag:
                           companyregno = "199608145R";
                            break;
                    case Constants.CAMBORNE_Subdomain_templateflag:
                           companyregno = "199509073K";
                            break;
                    case Constants.MITSUI_Subdomain_templateflag:
                           companyregno = "198101129R";
                            break;
                 }
                KwlReturnObject objItr = null;
                Payment payment = null;

                try {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    java.util.Date entryDate = null;
                    double total = 0;
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    companyname = company.getCompanyName() != null ? company.getCompanyName() : "";
                    KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                    KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                    String createdby = "";
                    String currencyid = "";
                    String receiptNumber = "";
                    String paidTo = "";
                    Date journalEntryDate = new Date();//mode!=StaticValues.AUTONUM_BILLINGRECEIPT?rc.getJournalEntry().getEntryDate():rc1.getJournalEntry().getEntryDate()
                    PayDetail PayDetail = null;
                    String memo = "";
                    String AccountName = "";
                    boolean ismanycrdb = false;
                    boolean customerFlag = false;
                    boolean againstGLCodeFlag = false;
                    int receiptType = 0;
                    String bankCharges = "";
                    double bankChargesAmount = 0.0;
                    String vendorName = "";
                    String vendorCode = "";
                    String vendorAddress = "";
                    String curr = "";
                    String currencySymbol = "";
                    String currName = "";
                    String chequeNumber = "";
                    HashMap<String, Object> rRequestParams = new HashMap<String, Object>();
                    DecimalFormat decimalFormat = new DecimalFormat("0.00");
                    String netinword = "";
                    double amount = 0.0;

//                    double amount = Double.parseDouble(request.getParameter("amount"));
                    boolean iscontraentryflag = false;
                    iscontraentryflag = Boolean.parseBoolean(request.getParameter("contraentryflag"));
                   
                    DateFormat df = (DateFormat) requestParams.get("df");

                    JournalEntry entry = null;
                    double advanceAmount = 0;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount"))) {
                        advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
                    }
                    boolean advanceFlag = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag"))) {
                        advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
                    }

                    ArrayList<TIDPaymentVoucherSubReport> paymentVoucherSubReportList = new ArrayList<TIDPaymentVoucherSubReport>();
                    ArrayList<TIDPaymentVoucher> paymentVoucherList = new ArrayList<TIDPaymentVoucher>();
                    TIDPaymentVoucher paymentVoucher = new TIDPaymentVoucher();

                    List listPaymentDetails = null;
                    DateFormat dFormat = new SimpleDateFormat("dd/MM/yyyy");
                    if (mode == StaticValues.AUTONUM_PAYMENT) {
                        objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentId);
                        payment = (Payment) objItr.getEntityList().get(0);
                        if (payment.getCreatedby() != null) {
                            createdby = StringUtil.getFullName(payment.getCreatedby());
                        }
                        currencyid = (payment.getCurrency() == null) ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID();
                        curr = payment.getCurrency().getSymbol();
                        currName = payment.getCurrency().getName();
                        receiptNumber = payment.getPaymentNumber();
                        paidTo = payment.getPaidTo() != null ? payment.getPaidTo().getValue() : "";
                        journalEntryDate = payment.getJournalEntry().getEntryDate();
                        PayDetail = payment.getPayDetail();
                        memo = payment.getMemo() != null ? payment.getMemo() : "";
                        Company com = payment.getCompany();
                        ismanycrdb = payment.isIsmanydbcr();
                        receiptType = payment.getReceipttype();
                        entry = payment.getJournalEntry();

                        int paymentMethod = -1;

                        if (PayDetail != null && PayDetail.getPaymentMethod() != null) {
                            paymentMethod = PayDetail.getPaymentMethod().getDetailType();
                        }

                        if (paymentMethod == Constants.bank_detail_type) {
                            chequeNumber = PayDetail.getCheque() != null ? (PayDetail.getCheque().getChequeNo() != null ? PayDetail.getCheque().getChequeNo() : "") : "";
                        } else if (paymentMethod == Constants.cash_detail_type) {
                            chequeNumber = "Cash";
                        } else if (paymentMethod == Constants.card_detail_type) {
                            chequeNumber = "Card";
                        } else {
                            chequeNumber = "";
                        }



                        Iterator itrRow = payment.getJournalEntry().getDetails().iterator();
                        while (itrRow.hasNext()) {
                            JournalEntryDetail jed = ((JournalEntryDetail) itrRow.next());
                            if (!jed.isDebit()) {
                                if (payment.getDeposittoJEDetail() != null) {
                                    amount = payment.getDeposittoJEDetail().getAmount();
                                } else {
                                    amount = jed.getAmount();
                                }
                            }
                        }

                        KwlReturnObject pdoresult = null;
                        filter_names.add("payment.ID");
                        filter_params.add(payment.getID());
                        rRequestParams.put("filter_names", filter_names);
                        rRequestParams.put("filter_params", filter_params);


                        if (entry != null) {

                            if (receiptType == 9) {
                                pdoresult = accVendorPaymentDAO.getPaymentDetailOtherwise(rRequestParams);
                                listPaymentDetails = pdoresult.getEntityList();
                                if (listPaymentDetails != null && !listPaymentDetails.isEmpty()) {
                                    List<Double> debitAccountAmount = new ArrayList<Double>();
                                    List<Double> debitAccountTaxAmount = new ArrayList<Double>();
                                    List<Double> debitAccountTotalAmount = new ArrayList<Double>();
                                    List<Double> creditAccountAmount = new ArrayList<Double>();
                                    List<Double> creditAccountTaxAmount = new ArrayList<Double>();
                                    List<Double> creditAccountTotalAmount = new ArrayList<Double>();
                                    List<String> debitAccountCodeNumber = new ArrayList<String>();
                                    List<String> debitAccountCodeName = new ArrayList<String>();
                                    List<String> creditAccountCodeNumber = new ArrayList<String>();
                                    List<String> creditAccountCodeName = new ArrayList<String>();
                                    List<String> debitTaxRow = new ArrayList<String>();
                                    List<String> creditTaxRow = new ArrayList<String>();
                                    List<String> creditDescription = new ArrayList<String>();
                                    List<String> debitDescription = new ArrayList<String>();


                                    List<PaymentDetailOtherwise> list1 = listPaymentDetails;
                                    Iterator pdoRow = list1.iterator();
                                    if (pdoRow != null && list1.size() > 0) {
                                        for (PaymentDetailOtherwise pdo : list1) {
                                            currencySymbol = pdo.getPayment().getCurrency().getCurrencyCode();
                                            curr = pdo.getPayment().getCurrency().getSymbol();
                                            if (payment.getID().equals(pdo.getPayment().getID())) {
                                                if (payment.isIsmanydbcr()) {
                                                    if (pdo.isIsdebit()) {
                                                        debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                                        debitAccountAmount.add(pdo.getAmount());
                                                        debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                                        debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                                        debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                                        debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                                        debitDescription.add((pdo.getDescription()));

                                                    } else {
                                                        creditAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                                        creditAccountAmount.add(pdo.getAmount());
                                                        creditAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                                        creditAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                                        creditAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                                        creditTaxRow.add((pdo.getTax() != null ? pdo.getTax().getName() : ""));
                                                        creditDescription.add((pdo.getDescription()));
                                                    }
                                                } else {
                                                    debitAccountTotalAmount.add(pdo.getAmount() + (pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                                    debitAccountAmount.add(pdo.getAmount());
                                                    debitAccountTaxAmount.add((pdo.getTax() != null ? pdo.getTaxamount() : 0));
                                                    debitAccountCodeNumber.add(pdo.getAccount() != null ? (pdo.getAccount().getAcccode() != null ? pdo.getAccount().getAcccode() : "") : "");
                                                    debitAccountCodeName.add(pdo.getAccount() != null ? (pdo.getAccount().getName() != null ? pdo.getAccount().getName() : "") : "");
                                                    debitTaxRow.add((pdo.getTax() != null ? pdo.getTax().getTaxCode() : ""));
                                                    debitDescription.add((pdo.getDescription()));
                                                }

                                            }
                                        }
                                    }

                                    JSONObject obj;
                                    int craditDebitFlag = 1;
                                    againstGLCodeFlag = true;

                                    for (int i = 0; i < (craditDebitFlag == 1 ? debitAccountCodeName.size() : creditAccountCodeName.size()); i++) {
                                        TIDPaymentVoucherSubReport paymentVoucherSubReport = new TIDPaymentVoucherSubReport();
                                        double amount1 = craditDebitFlag == 1 ? debitAccountAmount.get(i) : creditAccountAmount.get(i);
                                        double amount2 = craditDebitFlag == 1 ? debitAccountTaxAmount.get(i) : creditAccountTaxAmount.get(i);

                                        paymentVoucherSubReport.setAccountCode(craditDebitFlag == 1 ? debitAccountCodeNumber.get(i) : creditAccountCodeNumber.get(i));
                                        String accName = craditDebitFlag == 1 ? debitAccountCodeName.get(i) : creditAccountCodeName.get(i);
                                        String desc = craditDebitFlag == 1 ?  StringUtil.DecodeText(debitDescription.get(i)) : StringUtil.DecodeText(creditDescription.get(i));
                                        paymentVoucherSubReport.setAccountName(accName + "<br>Class    : <br>Narration : " + desc);
                                        paymentVoucherSubReport.setAmount(curr + " " + authHandler.formattedAmount((amount1 + amount2), companyid));
                                        paymentVoucherSubReportList.add(paymentVoucherSubReport);
                                    }

                                    for (int i = 0; i < (craditDebitFlag == 1 ? creditAccountCodeName.size() : debitAccountCodeName.size()); i++) {
                                        TIDPaymentVoucherSubReport paymentVoucherSubReport = new TIDPaymentVoucherSubReport();
                                        double amount1 = craditDebitFlag == 1 ? creditAccountAmount.get(i) : debitAccountAmount.get(i);
                                        double amount2 = craditDebitFlag == 1 ? creditAccountTaxAmount.get(i) : debitAccountTaxAmount.get(i);

                                        paymentVoucherSubReport.setAccountCode(craditDebitFlag == 1 ? creditAccountCodeNumber.get(i) : debitAccountCodeNumber.get(i));
                                        String accName = craditDebitFlag == 1 ? creditAccountCodeName.get(i) : debitAccountCodeName.get(i);
                                        String desc = craditDebitFlag == 1 ?  StringUtil.DecodeText(creditDescription.get(i)) :  StringUtil.DecodeText(debitDescription.get(i));
                                        paymentVoucherSubReport.setAccountName(accName + "<br>Class    : <br>Narration : " + desc);
                                        paymentVoucherSubReport.setAmount(curr + " " + authHandler.formattedAmount((amount1 + amount2), companyid));
                                        paymentVoucherSubReportList.add(paymentVoucherSubReport);
                                    }

                                    double totalAdvanceAmount = amount;
                                    if (advanceFlag) {
                                        totalAdvanceAmount = amount + advanceAmount;
                                    }
                                }
                            } else if (receiptType == 7) {
                                currencySymbol = payment.getCurrency().getCurrencyCode();
                                KwlReturnObject cnjedresult = accVendorPaymentDAO.getVendorCnPayment(paymentId);
                                List<CreditNotePaymentDetails> lst = cnjedresult.getEntityList();
                                for (CreditNotePaymentDetails cnpd:lst) {
                                    CreditNote cn = cnpd.getCreditnote();
                                    
                                    //params to send to get billing address
                                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                                    addressParams.put("companyid", companyid);
                                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                                    addressParams.put("isBillingAddress", true);    //true to get billing address
                                    if (cn.getCustomer() != null) {
                                        customerFlag = true;
                                        vendorCode = cn.getCustomer().getAcccode() != null ? cn.getCustomer().getAcccode() : "";
                                        vendorName = cn.getCustomer().getName();
                                        
                                        addressParams.put("customerid", cn.getCustomer().getID());
                                        vendorAddress = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                                        
                                        vendorAddress = vendorAddress.replaceAll("\n", "<br>");
                                    }
                                    if (cn.getVendor() != null) {
                                        customerFlag = false;
                                        vendorCode = cn.getVendor().getAcccode() != null ? cn.getVendor().getAcccode() : "";
                                        vendorName = cn.getVendor().getName();
                                        
                                        //refer ticket ERP-10777
                                        //vendorAddress = accVendorHandler.getVendorAddress(cn.getVendor(), true);
                                        addressParams.put("vendorid", cn.getVendor().getID());
                                        vendorAddress = accountingHandlerDAOobj.getVendorAddress(addressParams);
                                        
                                        vendorAddress = vendorAddress.replaceAll("\n", "<br>");
                                    }
                                    double amt = cnpd.getAmountPaid();
                                    TIDPaymentVoucherSubReport paymentVoucherSubReport = new TIDPaymentVoucherSubReport();
//                                    paymentVoucherSubReport.setInvoiceDetails("Credit Note #  " + cn.getCreditNoteNumber() + " dated " + (cn.getJournalEntry() != null ? dateFormat.format(cn.getJournalEntry().getEntryDate()) : ""));
                                    paymentVoucherSubReport.setInvoiceDetails("Credit Note #  " + cn.getCreditNoteNumber() + " dated " + (cn.getJournalEntry() != null ? dateFormat.format(cn.getCreationDate()) : ""));
                                    paymentVoucherSubReport.setAmount(authHandler.formattedAmount(amt, companyid));
                                    paymentVoucherSubReportList.add(paymentVoucherSubReport);
                                }

                            } else {

                                pdoresult = accVendorPaymentDAO.getPaymentDetails(rRequestParams);
                                listPaymentDetails = pdoresult.getEntityList();

                                if (!listPaymentDetails.isEmpty()) {
                                    PaymentDetail paymentDetail = (PaymentDetail) listPaymentDetails.get(0);
                                    Vendor vendor = paymentDetail.getGoodsReceipt().getVendor();
                                    if (vendor != null) {
                                        customerFlag = false;
                                        vendorName = vendor.getName();
                                        vendorCode = vendor.getAcccode() != null ? vendor.getAcccode() : "";
                                        
                                        //refer ticket ERP-10777
                                        //vendorAddress = accVendorHandler.getVendorAddress(vendor, true);
                                        //params to send to get billing address
                                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                                        addressParams.put("companyid", companyid);
                                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                                        addressParams.put("isBillingAddress", true);    //true to get billing address
                                        addressParams.put("vendorid", vendor.getID());
                                        vendorAddress = accountingHandlerDAOobj.getVendorAddress(addressParams);
                                        
                                        vendorAddress = vendorAddress.replaceAll("\n", "<br>");
                                    }
                                }

                                String paymentAccount = "";
                                if (PayDetail != null && PayDetail.getPaymentMethod() != null && PayDetail.getPaymentMethod().getAccount() != null && PayDetail.getPaymentMethod().getAccount().getGroup() != null) {
                                    paymentAccount = PayDetail.getPaymentMethod().getAccount().getGroup().getName();
                                }

                                List<PaymentDetail> list1 = pdoresult.getEntityList();
                                Iterator pdoRow = list1.iterator();
                                double totalAmount = 0.0;
                                if (pdoRow != null && list1.size() > 0) {
                                    for (PaymentDetail pdo : list1) {
                                        currencySymbol = pdo.getPayment().getCurrency().getCurrencyCode();
                                        curr = pdo.getPayment().getCurrency().getSymbol();
                                        if (payment.getID().equals(pdo.getPayment().getID())) {
                                            TIDPaymentVoucherSubReport paymentVoucherSubReport = new TIDPaymentVoucherSubReport();
//                                            paymentVoucherSubReport.setInvoiceDetails("Invoice #  " + pdo.getGoodsReceipt().getGoodsReceiptNumber() + " dated " + (pdo.getGoodsReceipt().getJournalEntry() != null ? dateFormat.format(pdo.getGoodsReceipt().getJournalEntry().getEntryDate()) : ""));
                                            paymentVoucherSubReport.setInvoiceDetails("Invoice #  " + pdo.getGoodsReceipt().getGoodsReceiptNumber() + " dated " + (pdo.getGoodsReceipt().getJournalEntry() != null ? dateFormat.format(pdo.getGoodsReceipt().getCreationDate()) : ""));
                                            paymentVoucherSubReport.setAmount(authHandler.formattedAmount(pdo.getAmount(), companyid));
                                            paymentVoucherSubReportList.add(paymentVoucherSubReport);
                                        }
                                    }
                                }
                            }
                        }

                        paymentVoucher.setDate(dFormat.format(journalEntryDate));
                        paymentVoucher.setPaymentNumber(receiptNumber);
                        paymentVoucher.setVendorCode(vendorCode);
                        paymentVoucher.setPaidTo(receiptType == 9 ? paidTo : (vendorName + "<br>" + vendorAddress));
                        paymentVoucher.setChequeDetails("We attach herewith our cheque No. " + chequeNumber + " in settlement of :-");
                        paymentVoucher.setAmountInWords(payment.getCurrency().getName() + " " + EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(amount)), payment.getCurrency(),countryLanguageId) + " only.");
                        paymentVoucher.setCurrency(payment.getCurrency().getSymbol() != null ? payment.getCurrency().getSymbol() : "");
                        paymentVoucher.setTotalAmount(authHandler.formattedAmount(amount, companyid));
                        paymentVoucher.setMemo(memo);
                        paymentVoucher.setCustomerFlag(customerFlag);
                        paymentVoucher.setAgainstGLCodeFlag(againstGLCodeFlag);
                        paymentVoucherList.add(paymentVoucher);

                        response.setHeader("Content-Disposition", "attachment;filename=" + "PaymentVoucher.pdf");
                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TIDPaymentVoucher.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);

                        InputStream SubReportInputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TIDPaymentVoucherSubReport.jrxml");
                        JasperDesign SubReportJasperDesign = JRXmlLoader.load(SubReportInputStream);
                        JasperReport SubReport = JasperCompileManager.compileReport(SubReportJasperDesign);
                        voucherMap.put("companyregistrationno", companyregno);
                        voucherMap.put("companyname", companyname);
                        voucherMap.put("PaymentVoucherSubReport", SubReport);
                        voucherMap.put("PaymentVoucherSubReportData", new JRBeanCollectionDataSource(paymentVoucherSubReportList));

                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(paymentVoucherList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, voucherMap, beanColDataSource);
                    }

                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    @Override
    public List<Object> exportBITDeliveryOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {

        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                JSONArray DataJArr = new JSONArray();
                Map<String, Object> deliveryOrderMap = new HashMap<String, Object>();

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                DateFormat df = new SimpleDateFormat("dd-MMM-yy");
                DecimalFormat quantityFormat = new DecimalFormat("0");
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));
//        String billid = request.getParameter("bills");

                DeliveryOrderJasper deliveryOrderJasper = new DeliveryOrderJasper();
                ArrayList<DeliveryOrderJasper> deliveryOrderList = new ArrayList<DeliveryOrderJasper>();
                ArrayList<DeliveryOrderTable2> deliveryOrderTable2List = new ArrayList<DeliveryOrderTable2>();
                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    String invno = "";
                    Date entryDate = null;
                    String customerName = "";
                    String customerAdd = "";
                    String customerEmail = "";
                    String customerPostal = "";
                    String customerPhone = "";
                    String customerFax = "";
                    String customerAttn = "";
                    String memo = "";

                    DeliveryOrder deliveryOrder = null;
                    deliveryOrder = (DeliveryOrder) kwlCommonTablesDAOObj.getClassObject(DeliveryOrder.class.getName(), billid);
                    invno = deliveryOrder.getDeliveryOrderNumber();
                    entryDate = deliveryOrder.getOrderDate();
                    customerName = deliveryOrder.getCustomer().getName() != null ? deliveryOrder.getCustomer().getName() : "";
                    
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    addressParams.put("customerid", deliveryOrder.getCustomer().getID());
                    CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    if (deliveryOrder.getCustomer()!=null && customerAddressDetails != null) {
                        customerAttn = StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : customerAddressDetails.getContactPerson();
                        customerPhone = (customerAddressDetails.getPhone() != null ? customerAddressDetails.getPhone() : "");
                        customerEmail = (customerAddressDetails.getEmailID() != null ? customerAddressDetails.getEmailID() : "");
                        customerFax = (customerAddressDetails.getFax() != null ? customerAddressDetails.getFax() : "");
                        customerPostal = (customerAddressDetails.getPostalCode() != null ? customerAddressDetails.getPostalCode() : "");
                    }
                    customerAdd = deliveryOrder.getBillingShippingAddresses()!=null?CommonFunctions.getBillingShippingAddressForSenwanTec(deliveryOrder.getBillingShippingAddresses(), true):deliveryOrder.getCustomer() != null ? (accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams)).replaceAll("\n", "<br>") : "";
                    customerAdd = customerAdd + (StringUtil.isNullOrEmpty(customerPostal) ? "" : "<br> Postal Code : " + customerPostal) + (StringUtil.isNullOrEmpty(customerEmail) ? "" : "<br> Email : " + customerEmail);
                    
                    memo = deliveryOrder.getMemo() != null ? deliveryOrder.getMemo() : "";
                    String approverName = "";
                    if (deliveryOrder.getCreatedby() != null) {
                        approverName = StringUtil.getFullName(deliveryOrder.getCreatedby());
                    }
                    deliveryOrderJasper.setDate(df.format(entryDate));
                    deliveryOrderJasper.setDonumber(invno);
                    deliveryOrderJasper.setName(customerName);
                    deliveryOrderJasper.setAddress(customerAdd);
                    deliveryOrderJasper.setPhone(customerPhone);
                    deliveryOrderJasper.setFax(customerFax);
                    deliveryOrderJasper.setAttn(customerAttn);
                    deliveryOrderJasper.setMemo(memo);
                    deliveryOrderList.add(deliveryOrderJasper);
                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    order_by.add("srno");
                    order_type.add("asc");
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    filter_names.add("deliveryOrder.ID");
                    filter_params.add(deliveryOrder.getID());
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);

                    idresult = accInvoiceDAOobj.getDeliveryOrderDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();
                    int i = 0;
                    while (itr.hasNext()) {
                        i++;
                        DeliveryOrderTable2 deliveryOrderTable2 = new DeliveryOrderTable2();
                        String prodName = "";
                        String prodDesc = "";
                        double quantity = 0, deliverdQuantity = 0;
                        String uom = "";
                        String linkTo = "-";

                        DeliveryOrderDetail row = (DeliveryOrderDetail) itr.next();
                        prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                            prodDesc = row.getDescription();
                        } else {
                            if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                prodDesc = row.getProduct().getDescription();
                            }
                        }
                        quantity = row.getActualQuantity();
                        deliverdQuantity = row.getDeliveredQuantity();
                        uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();

                        String parent = "NA";
                        String child = "NA";
                        MasterItem masterItemCategory = accProductObj.getProductsMasterItem(companyid, row.getProduct().getID());
                        if (masterItemCategory != null && masterItemCategory.getParent() != null) {
                            parent = masterItemCategory.getParent().getValue();
                            child = masterItemCategory.getValue();
                        } else if (masterItemCategory != null && masterItemCategory.getParent() == null) {
                            parent = masterItemCategory.getValue();
                        }

                        deliveryOrderTable2.setSno(Integer.toString(i));
                        deliveryOrderTable2.setUnit(uom);
                        deliveryOrderTable2.setCategory(parent);
                        deliveryOrderTable2.setProductname(prodName);
                        deliveryOrderTable2.setDesc(prodDesc);
                        deliveryOrderTable2.setQty(quantityFormat.format(deliverdQuantity));
                        deliveryOrderTable2List.add(deliveryOrderTable2);
                    }
                    deliveryOrderMap.put("DeliveryOrderSubReportData", new JRBeanCollectionDataSource(deliveryOrderTable2List));
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    deliveryOrderMap.put("imagePath", fileName1);
                    deliveryOrderMap.put("format", "pdf");
                    response.setHeader("Content-Disposition", "attachment;filename=" + "DeliveryOrder.pdf");
                    try {
                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BITDeliveryOrder.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);

                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(deliveryOrderList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, deliveryOrderMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                } catch (ServiceException ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

  
    public List<Object> exportPurchaseRequisition(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            try {
                String companyid = sessionHandlerImpl.getCompanyid(request);
                boolean isUnitPriceHiddenInPR = accCommonTablesDAO.isUnitPriceHiddenForPR(companyid);
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }

                JSONArray DataJArr = new JSONArray();
                Map<String, Object> purchaseRequisitionMap = new HashMap<String, Object>();

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);//new SimpleDateFormat("dd MMMM yy");
                DecimalFormat quantityFormat = new DecimalFormat("0");
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));
//        String billid = request.getParameter("bills");

                BITPurchaseRequisition purchaseRequisition = new BITPurchaseRequisition();
                ArrayList<BITPurchaseRequisition> purchaseRequisitionList = new ArrayList<BITPurchaseRequisition>();
                ArrayList<BITPurchaseRequisitionSubReport> purchaseRequisitionTableList = new ArrayList<BITPurchaseRequisitionSubReport>();

                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    String invno = "";
                    Date entryDate = null;
                    String memo = "";
                    String currency = "";

                    PurchaseRequisition pr = null;
                    pr = (PurchaseRequisition) kwlCommonTablesDAOObj.getClassObject(PurchaseRequisition.class.getName(), billid);
                    invno = pr.getPrNumber();
                    entryDate = pr.getRequisitionDate();
                    memo = pr.getMemo() != null ? pr.getMemo() : "";
                    currency = pr.getCurrency().getSymbol() != null ? pr.getCurrency().getSymbol() : "";
                    KwlReturnObject approvalresult = accountingHandlerDAOobj.getApprovalHistoryForExport(billid, companyid);
                    List list1 = approvalresult.getEntityList();
                    Iterator it = list1.iterator();

                    while (it.hasNext()) {
                        Approvalhistory obj = (Approvalhistory) it.next();
                        int level = obj.getApprovallevel();
                        String approveDateString = "";
                        String approverName = "";
                        String approverRemark = "";
                        Date approveDate = new Date();
                        approveDate.setTime(obj.getApprovedon());
                        approveDateString = df.format(approveDate);
                        approverName = StringUtil.getFullName(obj.getApprover());
                        approverRemark = obj.getRemark();
                        if (level == 1) {                                                       //manager
                            purchaseRequisition.setManager(approverName);
                            purchaseRequisition.setManagerDate(approveDateString);
                            purchaseRequisition.setManagerComment(approverRemark);
                        } else if (level == 2) {                                                 //finance
                            purchaseRequisition.setFinance(approverName);
                            purchaseRequisition.setFinanceDate(approveDateString);
                            purchaseRequisition.setFinanceComment(approverRemark);
                        } else if (level == 3) {                                                 //ceo
                            purchaseRequisition.setCeo(approverName);
                            purchaseRequisition.setCeoDate(approveDateString);
                            purchaseRequisition.setCeoComment(approverRemark);
                        }
                    }
                    purchaseRequisition.setDate(df.format(entryDate));
                    purchaseRequisition.setPrn(invno);
                    purchaseRequisition.setPurpose(memo);
                    purchaseRequisitionList.add(purchaseRequisition);

                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    order_by.add("srno");
                    order_type.add("asc");
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    filter_names.add("purchaserequisition.ID");
                    filter_params.add(pr.getID());
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);

                    idresult = accPurchaseOrderobj.getPurchaseRequisitionDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();
                    double total = 0;
                    int i = 0;

                    while (itr.hasNext()) {
                        i++;
                        BITPurchaseRequisitionSubReport prTable = new BITPurchaseRequisitionSubReport();
                        String prodName = "";
                        String prodDesc = "";
                        String quotationNo = "";
                        double quantity = 0, rate = 0, amount = 0;

                        PurchaseRequisitionDetail row = (PurchaseRequisitionDetail) itr.next();
                        prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        if (!StringUtil.isNullOrEmpty(row.getProductdescription())) {
                            prodDesc = row.getProductdescription();
                        } else {
                            if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                prodDesc = row.getProduct().getDescription();
                            }
                        }
                        if (i == 1) {
                            purchaseRequisitionMap.put("Thirdpartyservice", prodDesc);
                        }
                        quantity = row.getQuantity();
                        rate = row.getRate();
                        amount = rate * quantity;
                        total += amount;
                        String prAmount = isUnitPriceHiddenInPR ? "" : authHandler.formattedAmount(amount, companyid);
                        String unitPrice = isUnitPriceHiddenInPR ? "" : authHandler.getFormattedUnitPrice(rate, companyid);
                        String totalAmount = isUnitPriceHiddenInPR ? "" : authHandler.formattedAmount(total, companyid);
                        prTable.setDesc(prodName);
                        prTable.setQty(quantityFormat.format(quantity));
                        prTable.setAmount(prAmount);
                        prTable.setRate(unitPrice);
                        prTable.setQuotationNo(quotationNo);
                        prTable.setTotalAmount(totalAmount);
                        purchaseRequisitionTableList.add(prTable);
                    }

                    //Custome field code
                    if (templateflag == Constants.vhqpost_tempalteflag) {
//                         purchaseRequisition.setPrn("");
                        HashMap<String, String> customFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();

                        HashMap<String, Object> fieldrequestParams = new HashMap();
                        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                        fieldrequestParams.put(Constants.filter_values, Arrays.asList(pr.getCompany().getCompanyID(), Constants.Acc_Purchase_Requisition_ModuleId, 0));
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                        KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(PurchaseRequisitionCustomData.class.getName(), pr.getID());
                        if (custumObjresult.getEntityList().size() > 0) {

                            Map<String, Object> variableMap = new HashMap<String, Object>();
                            PurchaseRequisitionCustomData purchaseRequisitionCustomData = (PurchaseRequisitionCustomData) custumObjresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(purchaseRequisitionCustomData, FieldMap, replaceFieldMap, variableMap);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue() != null ? varEntry.getValue().toString() : "";
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Job No")) {
                                        KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                        FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                        if (fieldComboData != null) {
                                            purchaseRequisitionMap.put("JobNO", fieldComboData.getValue() != null ? fieldComboData.getValue() : "");
//                                       obj.put(varEntry.getKey(), fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                        }

                                    } else if ((varEntry.getKey().split("_")[1]).equals("Job Description")) {
                                        purchaseRequisitionMap.put("JobDesc", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Customer")) {
                                        purchaseRequisitionMap.put("Customer", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Job Confirm Price")) {
                                        purchaseRequisitionMap.put("JobConfPrice", currency + " " + coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Job Description")) {
                                        purchaseRequisitionMap.put("Thirdpartyservice", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Supplier")) {
                                        purchaseRequisitionMap.put("SupplierName", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("3rd Party Cost Amount")) {
                                        purchaseRequisitionMap.put("ThirdpartyCostAmt", currency + " " + coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Supplier Payment Terms")) {
                                        KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                        FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                        if (fieldComboData != null) {
                                            purchaseRequisitionMap.put("SupplierTerm", fieldComboData.getValue() != null ? fieldComboData.getValue() : "");
//                                       obj.put(varEntry.getKey(), fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                        }

                                    } else if ((varEntry.getKey().split("_")[1]).equals("Supplier Address")) {
                                        purchaseRequisitionMap.put("SupplieAdd", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Supplier Contact")) {
                                        purchaseRequisitionMap.put("SupplierContact", coldata);
                                    }
                                }
                            }
                        }
                    }
                    purchaseRequisitionMap.put("PRSubReportData", new JRBeanCollectionDataSource(purchaseRequisitionTableList));
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    purchaseRequisitionMap.put("imagePath", fileName1);
                    purchaseRequisitionMap.put("format", "pdf");
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + "PurchaseRequisition_" + invno + "_v1.pdf" + "\"");
                    try {
                        InputStream inputStream = null;
                        if (templateflag == Constants.vhqpost_tempalteflag) {
                            fileName1 = StorageHandler.GetDocStorePath() + companyid + "_logo" + FileUploadHandler.getCompanyImageExt();
                            purchaseRequisitionMap.put("logo", fileName1);
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/VHQPurchaseRequisition.jrxml");
                        } else if (templateflag == Constants.Diamond_Aviation_templateflag) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationPurchaseRequisition.jrxml");
                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BITPurchaseRequisition.jrxml");
                        }
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);

                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(purchaseRequisitionList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, purchaseRequisitionMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                }
                } catch (ServiceException ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        return list;
    }

    public List<Object> exportBMCustomerInvoiceReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        int templateflag= request.getParameter("templateflag")!=null ? Integer.parseInt(request.getParameter("templateflag")) : 0;
        String recArray[] = recordIDs.split(",");
        int countryLanguageId = Constants.OtherCountryLanguageId; // 0
        
        if (recArray.length != 0) {
            try {
                String companyId = sessionHandlerImpl.getCompanyid(request);
                KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyId);
                ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                if (extraCompanyPreferences.isAmountInIndianWord()) {
                    countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
                }
            } catch (ServiceException ex) {
                Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                List<TaxInvoiceSubReport> invoiceSubReportsList = new ArrayList<TaxInvoiceSubReport>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                String dONumber = "";
                String customerName = "";
                String customercode = "";
                String customerAdd = "";
                String customerEmail = "";
                String customerfax = "";
                String customerTel = "";
                String terms = "";
                String billTo = "";
                String billAddr = "";
                String shipTo = "";
                String memo = "";
                String salesPerson = null;
                String billtoAddress = "";
                String Createdby = "";
                boolean isInclude = false; //Hiding or Showing P.O. NO field in single PDF 
                Iterator itr = null;
                String linkTo = "-";
                Discount totalDiscount = null;
                double totaltax = 0, discountTotalQuotation = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";
                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                Map<String, Object> invoiceMap = new HashMap<String, Object>();
                String view = "BMTaxInvoice";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                TaxInvoice taxInvoice = new TaxInvoice();
                TaxInvoice taxInvoiceDuplicate = new TaxInvoice();
                TaxInvoice taxInvoiceTriplicate = new TaxInvoice();
                ArrayList<TaxInvoice> taxInvoiceList = new ArrayList<TaxInvoice>();
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df = (DateFormat) requestParamsCustom.get("df");
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Object> fieldInLinerequestParams = new HashMap();
                    HashMap<String, String> customInLineFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customInLineDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 1));
                    fieldInLinerequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldInLinerequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 1));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> replaceFieldInLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    HashMap<String, Integer> FieldInLineMap = accAccountDAOobj.getFieldParamsCustomMap(fieldInLinerequestParams, replaceFieldInLineMap, customInLineFieldMap, customInLineDateFieldMap);
                    JournalEntry entry = null;
                    String gstNo = "";
                    boolean addShipTo = true;
                    Company com = null;
                    Account cEntry = null;
                    String invno = "";
                    String invId = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String uem = "";
                    double total = 0;
                    double rowTaxAmountTotal = 0;
                    String currencyid = "";
                    String currsymbol;
                    DecimalFormat decimalFormat = new DecimalFormat("0.00");
                    DecimalFormat quantityFormat = new DecimalFormat("0.0000");
                    DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                    KWLCurrency currency = null;
                    if (mode == StaticValues.AUTONUM_INVOICE) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), billid);
                        Invoice inv = (Invoice) cap.getEntityList().get(0);
                        invId = inv.getID();
                        String approverName = "";
                        if (inv.getApprover() != null) {
                            approverName = inv.getApprover().getFirstName() + " " + inv.getApprover().getLastName();
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        addShipTo = true;
                        com = inv.getCompany();
                        cEntry = inv.getCustomerEntry().getAccount();
                        invno = inv.getInvoiceNumber();
                        entryDate = inv.getJournalEntry().getEntryDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipDate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();
                        poRefno = inv.getPoRefNumber() == null ? "" : inv.getPoRefNumber();
                        filter_names.add("invoice.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? inv.getCustomerEntry().getAccount().getName() : inv.getCustomer().getName();
                        customercode = inv.getCustomer().getAcccode() == null ? inv.getCustomerEntry().getAccount().getAcccode() : inv.getCustomer().getAcccode();
                        customerAdd = "";
                        
                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("customerid", inv.getCustomer().getID());
                        CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                        if (inv.getCustomer() != null) {
                            if (customerAddressDetails != null) {
                                String addr = StringUtil.isNullOrEmpty(customerAddressDetails.getAddress()) ? "" : customerAddressDetails.getAddress();
                                String city = StringUtil.isNullOrEmpty(customerAddressDetails.getCity()) ? "" : ", " + customerAddressDetails.getCity();
                                String state = StringUtil.isNullOrEmpty(customerAddressDetails.getState()) ? "" : ", " + customerAddressDetails.getState();
                                String country = StringUtil.isNullOrEmpty(customerAddressDetails.getCountry()) ? "" : ", " + customerAddressDetails.getCountry();
                                String postalcode = StringUtil.isNullOrEmpty(customerAddressDetails.getPostalCode()) ? "" : "\nPostal Code : " + customerAddressDetails.getPostalCode();
                                customerAdd = addr + city + state + country + postalcode;
                            } else {
                                String addr = StringUtil.isNullOrEmpty(inv.getCustomer().getBillingAddress()) ? "" : inv.getCustomer().getBillingAddress();
                                customerAdd = addr;
                            }
                        }

                        customerfax = (customerAddressDetails == null) ? (StringUtil.isNullOrEmpty(inv.getCustomer().getFax()) ? "" : inv.getCustomer().getFax()) : (StringUtil.isNullOrEmpty(customerAddressDetails.getFax()) ? "" : customerAddressDetails.getFax());
                        customerTel = (customerAddressDetails == null) ? (StringUtil.isNullOrEmpty(inv.getCustomer().getContactNumber()) ? "" : inv.getCustomer().getContactNumber()) : (StringUtil.isNullOrEmpty(customerAddressDetails.getPhone()) ? "" : customerAddressDetails.getPhone());
                        String billToAdd = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);//shipping adress
                        billAddr = StringUtil.isNullOrEmpty(billToAdd) ? inv.getBillTo() != null ? inv.getBillTo().replaceAll("\n", "<br>") : "" : billToAdd.replaceAll("\n", "<br>");
                        customerEmail = inv.getCustomer() != null ? (inv.getCustomer().getEmail() != null ? inv.getCustomer().getEmail() : "") : "";
                        uem = inv.getCustomer() != null ? (inv.getCustomer().getAltContactNumber() != null ? inv.getCustomer().getAltContactNumber() : "") : "";
                        gstNo = inv.getCustomer() != null ? inv.getCustomer().getOther() : "";
                        billTo = "Bill To";
                        isInclude = false;

                        if (inv.getCreatedby() != null) {
                            Createdby = StringUtil.getFullName(inv.getCreatedby());
                        }
                        if (inv.getMasterSalesPerson() != null) {   //if User Class returns the Null Valu
                            salesPerson = inv.getMasterSalesPerson() != null ? inv.getMasterSalesPerson().getValue() : "";
                        } else {  //if salesperson class has no username
                            salesPerson = "";
                        }

                        int days = 0;
                        if (inv.getTermid() != null) {
                            days = inv.getTermid().getTermdays();
                        } else {
                            Calendar dt1 = Calendar.getInstance();
                            dt1.setTime(inv.getJournalEntry().getEntryDate());
                            Calendar dt2 = Calendar.getInstance();
                            dt2.setTime(inv.getDueDate());
                            dt2.set(Calendar.YEAR, dt1.get(Calendar.YEAR));
                            int withDAY = dt1.get(Calendar.DAY_OF_YEAR);
                            int toDAY = dt2.get(Calendar.DAY_OF_YEAR);
                            days = toDAY - withDAY;
                        }
                        terms = days + " Days";
                        if (days <= 0) {
                            terms = "";
                        }

                        String shipToAdd = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);
                        shipTo = StringUtil.isNullOrEmpty(shipToAdd) ? inv.getShipTo() != null ? inv.getShipTo() : "" : shipToAdd;
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo();
                        entry = inv.getJournalEntry();
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        InvoiceDetail row = null;
                        while (itr.hasNext()) {
                            TaxInvoiceSubReport invoiceSubReport = new TaxInvoiceSubReport();
                            String prodName = "";
                            String prodDesc = "";
                            String partNo = "";
                            String prodCode = "";
                            Phrase phrase1 = new Phrase();
                            Phrase phrase2 = new Phrase();
                            double quantity = 0, discountQuotation = 0, discountOrder = 0;
                            double rate = 0;
                            Discount discount = null;
                            String uom = "";
                            double amount1 = 0;
                            row = (InvoiceDetail) itr.next();
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc = row.getDescription();
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())) {
                                    prodDesc = row.getInventory().getProduct().getDescription();
                                }
                            }
                            prodName = row.getInventory().getProduct().getName();
                            prodCode = !StringUtil.isNullOrEmpty(row.getInventory().getProduct().getProductid()) ? row.getInventory().getProduct().getProductid() : "";
                            if (!addShipTo) {
                                if (row.getDeliveryOrderDetail() != null && !StringUtil.isNullOrEmpty(row.getDeliveryOrderDetail().getPartno().trim())) {
                                    String partno = row.getDeliveryOrderDetail().getPartno();
                                    partNo = partno;
                                }
                            }

                            KwlReturnObject InvoiceDo = accInvoiceDAOobj.getDOFromInvoices(inv.getID(), companyid, true);
                            int count = InvoiceDo.getRecordTotalCount();
                            List InvoiceDoList = InvoiceDo.getEntityList();
                            Iterator itr1 = InvoiceDoList.iterator();
                            while (itr1.hasNext()) {
                                Object[] oj = (Object[]) itr1.next();
                                dONumber = oj[0] != null ? oj[0].toString() : "";
                            }

                            if (row.getDeliveryOrderDetail() != null && StringUtil.isNullOrEmpty(dONumber)) {
                                dONumber = row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber();
                            }

                            quantity = row.getInventory().getQuantity();
                            rate = row.getRate();
                            discount = row.getDiscount();
                            uom = row.getInventory().getProduct().getUnitOfMeasure() == null ? "" : row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA();
                            if (row.getDeliveryOrderDetail() != null) {
                                linkTo = row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber();
                            } else if (row.getSalesorderdetail() != null) {
                                linkTo = row.getSalesorderdetail().getSalesOrder().getSalesOrderNumber();
                            } else if (row.getQuotationDetail() != null) {
                                linkTo = row.getQuotationDetail().getQuotation().getquotationNumber();
                            }
                            double rowTaxPercent = 0;
                            String rowTaxName = "";
                            amount1 = authHandler.round(rate * quantity, companyid);
                            amount1 -= row.getDiscount() != null ? row.getDiscount().getDiscountValue() : 0.0;

                            invoiceSubReport.setsNo(row.getSrno() + "");
                            invoiceSubReport.setProductDescription(prodDesc);
                            invoiceSubReport.setNoOfPkg(uom);
                            invoiceSubReport.setQty(quantityFormat.format(quantity));
                            invoiceSubReport.setuPrice(decimalFormat.format(rate));
                            invoiceSubReport.setProductAmount(decimalFormat.format(amount1));
                            invoiceSubReport.setAmountCurrency(currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode());
                            invoiceSubReport.setCode(prodCode);//stock code
                            invoiceSubReportsList.add(invoiceSubReport);
                            total += amount1;
                            rowTaxAmountTotal += row.getRowTaxAmount() + row.getRowTermTaxAmount();
                        }

                        totalDiscount = inv.getDiscount();
                        totaltax = inv.getTaxEntry() != null ? inv.getTaxEntry().getAmount() : 0;
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
                        totalAmount = inv.getCustomerEntry().getAmount();
                        totalAmount = authHandler.round(totalAmount, companyid);
                        if (inv.getTax() != null) {
                            requestParams.put("transactiondate", entryDate);
                            requestParams.put("taxid", inv.getTax() != null ? inv.getTax().getID() : "");
                            requestParams.put("companyid", companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            if (!taxList.isEmpty()) {
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                        }
                    }

                    List<String> customFieldList = new ArrayList<String>();
                    if (entry != null) {

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(companyid);
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(entry.getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(moduleid + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                            Date dateFromDB=null;
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        if (fieldComboData.getValue() != null && (varEntry.getKey().split("_")[1]).equals("Time")) {
                                            customFieldList.add(fieldComboData.getValue());
                                        }
                                    }
                                } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Time")) {
                                        DateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                                        try {
                                            dateFromDB = defaultDateFormat.parse(coldata);
                                            coldata = sdf.format(dateFromDB);
                                        } catch (Exception e) {
                                        }
                                        customFieldList.add(coldata);
                                    }
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Time")) {
                                            customFieldList.add(coldata);
                                        }
                                    }
                                }
                            }
                        }

                    }
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    List<Terms> termsList = new ArrayList<Terms>();
                    if (!StringUtil.isNullOrEmpty(invId)) {
                        HashMap<String, Object> requestParam = new HashMap();
                        requestParam.put("invoiceid", invId);
                        KwlReturnObject curresult = null;
                        curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
                        List<InvoiceTermsMap> termMap = curresult.getEntityList();
                        for (InvoiceTermsMap invoiceTerMap : termMap) {
                            InvoiceTermsSales mt = invoiceTerMap.getTerm();
                            double termAmnt = invoiceTerMap.getTermamount();
                            Terms termsObj = new Terms();
                            termsObj.setTermName(mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)"));
                            termsObj.setTermValue(decimalFormat.format(termAmnt > 0 ? termAmnt : (termAmnt * -1)));
                            termsList.add(termsObj);
                        }
                    }

                    taxInvoice.setCustcode(customercode != null ? customercode : "");
                    taxInvoice.setCustname(customerName != null ? customerName : "");
                    taxInvoice.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
                    taxInvoice.setAddress(company.getAddress());
                    taxInvoice.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    taxInvoice.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                    taxInvoice.setInvoiceNo(invno);
                    taxInvoice.setdONomber(poRefno);//p/o number
                    taxInvoice.setDate(dateFormat.format(entryDate));
                    taxInvoice.setPaymentTerms(terms);
                    taxInvoice.setSalesPerson(salesPerson);
                    taxInvoice.setSoldToAddress(customerAdd);//passed as Address of customer 
                    currsymbol = (currency.getSymbol() != null) ? (currency.getSymbol() + " ") : "";
                    taxInvoice.setSubtotal(currsymbol + decimalFormat.format(total));
                    taxInvoice.setGstValue(currsymbol + decimalFormat.format(totaltax + rowTaxAmountTotal));
                    taxInvoice.setTermsList(termsList);
                    taxInvoice.setCustomerFax(customerfax);
                    taxInvoice.setGstpercent(taxPercent == 0 ? "" : "(" + Double.toString(taxPercent) + "%)");
                    taxInvoice.setPrintedby(Createdby);
                    taxInvoice.setCustomerTel(customerTel);
                    taxInvoice.setShipDate(((shipDate != null) ? dateFormat.format(shipDate) : " "));

                    String totalCustom = "";
                    for (String customField : customFieldList) {
                        totalCustom += customField + "";
                    }
                    taxInvoice.setDiscount(currsymbol + decimalFormat.format(totalDiscount != null ? totalDiscount.getDiscountValue() : 0));
                    taxInvoice.setAmountTotal(currsymbol + decimalFormat.format(total - (totalDiscount != null ? totalDiscount.getDiscountValue() : 0)));
                    taxInvoice.setUem(uem);
                    taxInvoice.setGrandTotal(decimalFormat.format(totalAmount));
                    taxInvoice.setCustomfield(totalCustom);
                    if (currency != null) {
                        String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalAmount)), currency,countryLanguageId);
                        taxInvoice.setAmountInWords(currency.getName().toString() + " " + netinword + " Only.");
                    }

                    taxInvoice.setDeliveredToAddress(shipTo);
                    taxInvoiceList.add(taxInvoice);
                    invoiceMap.put("TaxInvoiceSubReportData", new JRBeanCollectionDataSource(invoiceSubReportsList));
                    invoiceMap.put("format", "pdf");
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("imagePath", fileName1);
                    response.setHeader("Content-Disposition", "attachment;filename=" + "TaxInvoice.pdf");

                    InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BMTaxInvoice.jrxml");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);

                    InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BMTaxInvoiceSubReport.jrxml");
                    JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                    jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

                    invoiceMap.put("TaxInvoiceSubReport", jasperReportSubReport);

                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(taxInvoiceList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;

    }

   public List<Object> exportFOneCustomerInvoiceReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        int templateflag= Integer.parseInt(request.getParameter("templateflag"));
        String recArray[] = recordIDs.split(",");
        int countryLanguageId = Constants.OtherCountryLanguageId; // 0
        if (recArray.length != 0) {
            try {
                String companyId = sessionHandlerImpl.getCompanyid(request);
                KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyId);
                ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                if (extraCompanyPreferences.isAmountInIndianWord()) {
                    countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
                }
            } catch (Exception ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();

                List<TaxInvoiceSubReport> invoiceSubReportsList = new ArrayList<TaxInvoiceSubReport>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                String dONumber = "";
                String qtNumber = "";

                String customerName = "";
                String customercode = "";
                String customerAdd = "";
                String customerEmail = "";
                String customerfax = "";
                String customerTel = "";
                String terms = "";
                String shipTo = "";
                String memo = "";
                String salesPerson = null;
                String contactperson = "";
                String billToAdd = "";
                String Createdby = "";

                Iterator itr = null;
                String linkTo = "-";
                Discount totalDiscount = null;
                double totaltax = 0, discountTotalQuotation = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";
                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                Map<String, Object> invoiceMap = new HashMap<String, Object>();
                String view = "TaxInvoice";

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                TaxInvoice taxInvoice = new TaxInvoice();
                TaxInvoice taxInvoiceDuplicate = new TaxInvoice();
                TaxInvoice taxInvoiceTriplicate = new TaxInvoice();
                ArrayList<TaxInvoice> taxInvoiceList = new ArrayList<TaxInvoice>();
                int moduleid =  Constants.Acc_Invoice_ModuleId;
                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    DateFormat df = (DateFormat) requestParamsCustom.get("df");
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Object> fieldInLinerequestParams = new HashMap();
                    HashMap<String, String> customInLineFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customInLineDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 1));
                    fieldInLinerequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldInLinerequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 1));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> replaceFieldInLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    HashMap<String, Integer> FieldInLineMap = accAccountDAOobj.getFieldParamsCustomMap(fieldInLinerequestParams, replaceFieldInLineMap, customInLineFieldMap, customInLineDateFieldMap);
                    JournalEntry entry = null;
                    String gstNo = "";
                    boolean addShipTo = true;
                    Company com = null;
                    Account cEntry = null;
                    String invno = "";
                    String invId = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String uem = "";
                    double total = 0;
                    double rowTaxAmountTotal = 0;
                    double discountterm = 0;
                    double subTotal=0;
                    String currencyid = "";
                    String currsymbol;
                    String ContectPersonNo = "";
                    String mobile = "";
                    String maintOrderNo = "";
                    String serviceOrderNo = "";
                     String linkDOIDs = "";
                    DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                    KWLCurrency currency = null;
                    if (mode == StaticValues.AUTONUM_INVOICE) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), billid);
                        Invoice inv = (Invoice) cap.getEntityList().get(0);
                        invId = inv.getID();
                        String approverName = "";
                        if (inv.getApprover() != null) {
                            approverName = inv.getApprover().getFirstName() + " " + inv.getApprover().getLastName();
                        }
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        addShipTo = true;
                        com = inv.getCompany();
                        cEntry = inv.getCustomerEntry().getAccount();
                        invno = inv.getInvoiceNumber();
                        entryDate = inv.getJournalEntry().getEntryDate();
                        dueDate = inv.getDueDate();
                        shipDate = inv.getShipDate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();
                        poRefno = inv.getPoRefNumber() == null ? "" : inv.getPoRefNumber();
                        filter_names.add("invoice.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? inv.getCustomerEntry().getAccount().getName() : inv.getCustomer().getName();
                        customercode = inv.getCustomer().getAcccode() == null ? inv.getCustomerEntry().getAccount().getAcccode() : inv.getCustomer().getAcccode();
                        customerfax = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingFax()!=null?inv.getBillingShippingAddresses().getBillingFax():"":"";
                        customerTel = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingPhone()!=null?inv.getBillingShippingAddresses().getBillingPhone():"":"";
                        customerEmail = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingEmail()!=null?inv.getBillingShippingAddresses().getBillingEmail():"":"";
                        contactperson = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingContactPerson()!=null?inv.getBillingShippingAddresses().getBillingContactPerson():"":"";
                        ContectPersonNo = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingContactPersonNumber()!=null?inv.getBillingShippingAddresses().getBillingContactPersonNumber():"":"";
                        mobile = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingMobile()!=null?inv.getBillingShippingAddresses().getBillingMobile():"":"";
                        billToAdd = CommonFunctions.getBillingShippingAddressForSenwanTec(inv.getBillingShippingAddresses(), true);
                        uem = inv.getCustomer() != null ? (inv.getCustomer().getAltContactNumber() != null ? inv.getCustomer().getAltContactNumber() : "") : "";
                        gstNo = inv.getCustomer() != null ? inv.getCustomer().getOther() : "";

                        if (inv.getCreatedby() != null) {
                            Createdby = StringUtil.getFullName(inv.getCreatedby());
                        }
                        if (inv.getMasterSalesPerson() != null) {   //if User Class returns the Null Valu
                            salesPerson = inv.getMasterSalesPerson() != null ? inv.getMasterSalesPerson().getValue() : "";
                        } else {  //if salesperson class has no username
                            salesPerson = "";
                        }

                        if (inv.getTermid() != null && !inv.isCashtransaction()) {
                            terms = inv.getTermid().getTermname();
                        } else {
                            terms = "";
                        }

                        String shipToAdd = CommonFunctions.getBillingShippingAddress(inv.getBillingShippingAddresses(), false);
                        shipTo = StringUtil.isNullOrEmpty(shipToAdd) ? inv.getShipTo() != null ? inv.getShipTo() : "" : shipToAdd;
                        itr = idresult.getEntityList().iterator();
                        memo = inv.getMemo();
                        entry = inv.getJournalEntry();
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        KwlReturnObject bAmt = null;
                        InvoiceDetail row = null;
                        
                        HashSet<String> invLinkDOIds = new HashSet<String>();
                        while (itr.hasNext()) {
                            TaxInvoiceSubReport invoiceSubReport = new TaxInvoiceSubReport();
                            String prodName = "";
                            String prodDesc = "";
                            String partNo = "";
                            String prodCode = "";
                            Phrase phrase1 = new Phrase();
                            Phrase phrase2 = new Phrase();
                            double quantity = 0, discountQuotation = 0, discountOrder = 0;
                            double rate = 0;
                            Discount discount = null;
                            String uom = "";
                            double amount1 = 0;
                            row = (InvoiceDetail) itr.next();
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc = row.getDescription();
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())) {
                                    prodDesc = row.getInventory().getProduct().getDescription();
                                }
                            }
                            prodName = row.getInventory().getProduct().getName();
                            prodCode = !StringUtil.isNullOrEmpty(row.getInventory().getProduct().getProductid()) ? row.getInventory().getProduct().getProductid() : "";
                            if (!addShipTo) {
                                if (row.getDeliveryOrderDetail() != null && !StringUtil.isNullOrEmpty(row.getDeliveryOrderDetail().getPartno().trim())) {
                                    String partno = row.getDeliveryOrderDetail().getPartno();
                                    partNo = partno;
                                }
                            }

                            KwlReturnObject InvoiceDo = accInvoiceDAOobj.getDOFromInvoices(inv.getID(), companyid, true);
                            int count = InvoiceDo.getRecordTotalCount();
                            List InvoiceDoList = InvoiceDo.getEntityList();
                            Iterator itr1 = InvoiceDoList.iterator();
                            
                            while (itr1.hasNext()) {
                                Object[] oj = (Object[]) itr1.next();
                                dONumber = oj[0] != null ? oj[0].toString() : "";
                                if(!dONumber.equals(""))
                                invLinkDOIds.add(dONumber);
                            }

                            if (row.getDeliveryOrderDetail() != null && StringUtil.isNullOrEmpty(qtNumber)) {
                                dONumber = row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber();
                                if(!dONumber.equals(""))
                                invLinkDOIds.add(dONumber);
                            }
                            if (row.getQuotationDetail() != null) {
                                qtNumber = row.getQuotationDetail().getQuotation().getquotationNumber();
                            }
                            quantity = row.getInventory().getQuantity();
                            rate = row.getRate();
                            discount = row.getDiscount();
                            uom = row.getInventory().getProduct().getUnitOfMeasure() == null ? "" : row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA();
                            if (row.getDeliveryOrderDetail() != null) {
                                dONumber = row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber();
                                if(!dONumber.equals(""))
                                invLinkDOIds.add(dONumber);
                            } else if (row.getSalesorderdetail() != null) {
                                linkTo = row.getSalesorderdetail().getSalesOrder().getSalesOrderNumber();
                                if (row.getSalesorderdetail().getSalesOrder().getRows().iterator().hasNext()) {
                                    SalesOrderDetail srdetailds = (SalesOrderDetail) row.getSalesorderdetail().getSalesOrder().getRows().iterator().next();
                                    qtNumber = srdetailds.getQuotationDetail() != null ? srdetailds.getQuotationDetail().getQuotation().getQuotationNumber() : "";
                                }
                            } else if (row.getQuotationDetail() != null) {
                                qtNumber = row.getQuotationDetail().getQuotation().getquotationNumber();
                            }
                            double rowTaxPercent = 0;
                            String rowTaxName = "";
                            amount1 = authHandler.round(rate * quantity, companyid);
                            amount1 -= row.getDiscount() != null ? row.getDiscount().getDiscountValue() : 0.0;
                            subTotal +=amount1;
                            if (discount != null) {
                                if (discount.isInPercent()) {
                                    invoiceSubReport.setDiscountpercent(authHandler.formattedAmount(discount.getDiscount(), companyid));
                                    invoiceSubReport.setDiscountamount(authHandler.formattedAmount(discount.getDiscountValue(), companyid));
                                } else {
                                    invoiceSubReport.setDiscountpercent("-");
                                    invoiceSubReport.setDiscountamount(authHandler.formattedAmount(discount.getDiscount(), companyid));
                                }
                            }
                            invoiceSubReport.setsNo(row.getSrno() + "");
                            invoiceSubReport.setProductDescription(prodDesc.replaceAll("\n","<br>"));
                            invoiceSubReport.setNoOfPkg(uom);
                            invoiceSubReport.setQty(authHandler.formattedQuantity(quantity, companyid));
                            invoiceSubReport.setuPrice(authHandler.getFormattedUnitPrice(rate, companyid));
                            invoiceSubReport.setProductAmount(authHandler.formattedAmount(amount1,companyid));
                            invoiceSubReport.setAmountCurrency(currency.getCurrencyCode());
                            invoiceSubReport.setCode(prodCode);//stock code
                            invoiceSubReportsList.add(invoiceSubReport);
                            total += amount1;
                            rowTaxAmountTotal += row.getRowTaxAmount()+row.getRowTermTaxAmount();
                        }
                        
                       
                        for (String l : invLinkDOIds) {
                            linkDOIDs += l + ", ";
                        }
                        if (linkDOIDs.length() > 2) {
                            linkDOIDs = linkDOIDs.substring(0, linkDOIDs.length() - 2);
                        }

                        totalDiscount = inv.getDiscount();
                        totaltax = inv.getTaxEntry() != null ? inv.getTaxEntry().getAmount() : 0;
                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
                        totalAmount = inv.getCustomerEntry().getAmount();
                        totalAmount = authHandler.round(totalAmount, companyid);
                        if (inv.getTax() != null) {
                            requestParams.put("transactiondate", entryDate);
                            requestParams.put("taxid", inv.getTax() != null ? inv.getTax().getID() : "");
                            requestParams.put("companyid", companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            if (!taxList.isEmpty()) {
                                Object[] taxObj = (Object[]) taxList.get(0);
                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                            }
                        }
                    }

                    List<String> customFieldList = new ArrayList<String>();
                    if (entry != null) {

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(companyid);
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(entry.getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(moduleid + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Source/Type")) {
                                        customFieldList.add(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Service Order No")) {
                                        serviceOrderNo = coldata;
                                        invoiceMap.put("So", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Maintenance Order No")) {
                                        maintOrderNo = coldata;
                                        invoiceMap.put("Mo", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Quotation Ref No")) {
                                        qtNumber = coldata;
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Sales Person")) {
                                        salesPerson=coldata;
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Purchase Order")) {
                                        poRefno=coldata;
                                    }
                                }
                            }
                        }
                    }
                    double discountTermAmount=0;
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    List<Terms> termsList = new ArrayList<Terms>();
                    if (!StringUtil.isNullOrEmpty(invId)) {
                        HashMap<String, Object> requestParam = new HashMap();
                        requestParam.put("invoiceid", invId);
                        KwlReturnObject curresult = null;
                        curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
                        List<InvoiceTermsMap> termMap = curresult.getEntityList();
                        for (InvoiceTermsMap invoiceTerMap : termMap) {
                            InvoiceTermsSales mt = invoiceTerMap.getTerm();
                            double termAmnt = invoiceTerMap.getTermamount();
                            Terms termsObj = new Terms();
                            if(mt.getTerm().equals("Discount")){
                                discountTermAmount=termAmnt;
                            }else{
                                termsObj.setTermName(mt.getTerm());
                                termsObj.setTermValue(termAmnt > 0 ? authHandler.formattedAmount(termAmnt, companyid) : "(" + authHandler.formattedAmount((termAmnt * -1), companyid) + ")");
                                termsList.add(termsObj);
                            }
                            discountterm = discountterm + termAmnt;
                        }
                    }
                      
                    taxInvoice.setCustcode(customercode != null ? customercode : "");
                    taxInvoice.setCustname(customerName != null ? customerName : "");
                    taxInvoice.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
                    taxInvoice.setAddress(company.getAddress());
                    taxInvoice.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                    taxInvoice.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                    taxInvoice.setInvoiceNo(invno);
                    taxInvoice.setpONumber(poRefno);
                    taxInvoice.setdONomber(linkDOIDs);//d/o number
                    taxInvoice.setDate(dateFormat.format(entryDate));
                    taxInvoice.setPaymentTerms(terms);
                    taxInvoice.setSalesPerson(salesPerson);
                    taxInvoice.setContactPerson(StringUtil.isNullOrEmpty(contactperson) ? "" : contactperson);
                    taxInvoice.setAddress(billToAdd.replaceAll("\n", "<br>"));//passed as Address of customer 
                    currsymbol = (currency.getSymbol() != null) ? (currency.getSymbol() + " ") : "";
                    taxInvoice.setSubtotal(authHandler.formattedAmount(total, companyid));
                    taxInvoice.setAmount(authHandler.formattedAmount((total + discountterm), companyid));
                    taxInvoice.setGstValue(authHandler.formattedAmount((totaltax + rowTaxAmountTotal), companyid));
                    // taxInvoice.setTermsList(termsList);
                    taxInvoice.setCustomerFax(customerfax);
                    taxInvoice.setCustomerEmail(customerEmail);
                    taxInvoice.setPrintedby(Createdby);
                    taxInvoice.setCustomerTel(customerTel);
                    taxInvoice.setShipDate(((shipDate != null) ? dateFormat.format(shipDate) : " "));
                    // taxInvoice.setInvoiceSublist(invoiceSubReportsList);
                    taxInvoice.setqtNumber(qtNumber);
                    taxInvoice.setaccNumber(customercode != null ? customercode : "");
                    taxInvoice.setGstpercent(taxPercent == 0 ? "" : "(" + Double.toString(taxPercent) + "%)");



                    String totalCustom = "";
                    for (String customField : customFieldList) {
                        totalCustom += customField + "";
                    }
                    taxInvoice.setDiscount(authHandler.formattedAmount((totalDiscount != null ? totalDiscount.getDiscountValue() : 0), companyid));
                    taxInvoice.setAmountTotal(authHandler.formattedAmount((total - (totalDiscount != null ? totalDiscount.getDiscountValue() : 0)), companyid));
                    taxInvoice.setUem(uem);
                    taxInvoice.setGrandTotal(authHandler.formattedAmount(totalAmount, companyid));
                    taxInvoice.setCustomfield(totalCustom);
                    if (currency != null) {
                        String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalAmount)), currency,countryLanguageId);
                        taxInvoice.setAmountInWords(currency.getName().toString() + " " + netinword + " Only.");
                    }
                    taxInvoice.setDeliveredToAddress(shipTo);
                    taxInvoiceList.add(taxInvoice);
                    invoiceMap.put("currency", currency.getCurrencyCode());   
                    invoiceMap.put("subtotal", authHandler.formattedAmount(subTotal, companyid));   
                    invoiceMap.put("discount", discountTermAmount >= 0 ? authHandler.formattedAmount(discountTermAmount, companyid) : "(" + authHandler.formattedAmount((discountTermAmount * -1), companyid) + ")");   
                    invoiceMap.put("total", authHandler.formattedAmount(subTotal+discountTermAmount, companyid));   
                    invoiceMap.put("Mobile", mobile);   
                    invoiceMap.put("ContactPersonNo",ContectPersonNo);
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("imagePath1", fileName1);
                    String fileName2 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                    invoiceMap.put("imagePath2", fileName2);
                    invoiceMap.put("companyName","\""+(company.getCompanyName()!=null?company.getCompanyName():"")+"\"");
                    invoiceMap.put("termsList", new JRBeanCollectionDataSource(termsList));
                    invoiceMap.put("invoicesublist", new JRBeanCollectionDataSource(invoiceSubReportsList));
                    if(templateflag == Constants.F1Recreation_templateflag){
                        invoiceMap.put("showtextflag",true);
                    }else{ 
                        invoiceMap.put("showtextflag",false); 
                    }
                    InputStream inputStream  = null;
                    String fileName="";
                    int type = request.getParameter("type") == null ? 0 : Integer.parseInt(request.getParameter("type"));
                    if (type == 2) {
                        fileName ="Proforma_Invoice_USD";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationProformaInvoiceUSD.jrxml");
                    } else if (type == 3) {
                        fileName ="Proforma_Invoice_SGD";
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationProformaInvoiceSGD.jrxml");
                    } else if (StringUtil.isNullOrEmpty(dONumber) && StringUtil.isNullOrEmpty(maintOrderNo) && StringUtil.isNullOrEmpty(serviceOrderNo)) {
                        fileName ="Tax_Invoice";
                        if (type == 0) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationTaxInvoiceWithDiscountWithoutDOMOSO.jrxml");
                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationTaxInvoiceWithoutDiscountWithoutDOMOSO.jrxml");
                        }
                    } else if (StringUtil.isNullOrEmpty(dONumber)) {
                        fileName ="Tax_Invoice";
                        if (type == 0) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationTaxInvoiceWithDiscount.jrxml");
                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationTaxInvoiceWithoutDiscount.jrxml");
                        }
                    } else {
                        fileName ="Tax_Invoice";
                        if (type == 0) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationTaxInvoiceWithDiscountLinkedDO.jrxml");
                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationTaxInvoiceWithoutDiscountLinkedDO.jrxml");
                        }
                    }
                        
                    response.setHeader("Content-Disposition", "attachment;filename=\"" + fileName + "_" + invno + ".pdf\"");
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(taxInvoiceList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;

    }
   
    public List<Object> exportF1RecreationPurchaseReturn(HttpServletRequest request, HttpServletResponse response,String billid, String DNNumber) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                String companyid = sessionHandlerImpl.getCompanyid(request);
                List<TaxInvoiceSubReport> invoiceSubReportsList = new ArrayList<TaxInvoiceSubReport>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                KwlReturnObject idresult = null;
                String dONumber = "";
                String qtNumber = "";

                String customerName = "";
                String customercode = "";
                String customerAdd = "";
                String customerEmail = "";
                String customerfax = "";
                String customerTel = "";
                String terms = "";
                String billTo = "";
                String billAddr = "";
                String shipTo = "";
                String memo = "";
                String contactperson = "";
                String billtoAddress = "";
                String Createdby = "";

                Iterator itr = null;
                String linkTo = "-";
                Discount totalDiscount = null;
                double totaltax = 0, discountTotalQuotation = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";
                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                Map<String, Object> invoiceMap = new HashMap<String, Object>();
               int templateflag = Integer.parseInt(request.getParameter("templateflag"));
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                TaxInvoice taxInvoice = new TaxInvoice();
                ArrayList<TaxInvoice> taxInvoiceList = new ArrayList<TaxInvoice>();
                int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                try {
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
                    DateFormat df = (DateFormat) requestParamsCustom.get("df");
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Object> fieldInLinerequestParams = new HashMap();
                    HashMap<String, String> customInLineFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customInLineDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 1));
                    fieldInLinerequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid,Constants.customcolumn));
                    fieldInLinerequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request),Constants.Acc_Purchase_Return_ModuleId,1));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> replaceFieldInLineMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    HashMap<String, Integer> FieldInLineMap = accAccountDAOobj.getFieldParamsCustomMap(fieldInLinerequestParams, replaceFieldInLineMap, customInLineFieldMap, customInLineDateFieldMap);
                    JournalEntry entry = null;
                    String gstNo = "";
                    boolean addShipTo = true;
                    Company com = null;
                    String invno = "";
                    String invId = "";
                    Date entryDate = null;
                    Date dueDate = null;
                    Date shipDate = null;
                    String shipvia = "";
                    String fob = "";
                    String poRefno = "";
                    String invRefno = "";
                    String groRefno = "";
                    String uem = "";
                    double total = 0;
                    double rowTaxAmountTotal = 0;
                    double discountterm = 0;
                    String currencyid = "";
                    String salesperson = "";
                    String currsymbol;
                    DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                    KWLCurrency currency = null;
                    if (mode == StaticValues.AUTONUM_DEBITNOTE) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(PurchaseReturn.class.getName(), billid);
                        PurchaseReturn inv = (PurchaseReturn) cap.getEntityList().get(0);
                        invId = inv.getID();
                        String approverName = "";
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        currency = inv.getCurrency();
                        addShipTo = true;
                        com = inv.getCompany();
                        invno = inv.getPurchaseReturnNumber();
                        entryDate = inv.getOrderDate();
                        shipDate = inv.getShipdate();
                        shipvia = inv.getShipvia();
                        fob = inv.getFob();

                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("vendorid", inv.getVendor().getID());
                        customerName = inv.getVendor() == null ? "" : inv.getVendor().getName();
                        customercode = inv.getVendor() == null ? "" : inv.getVendor().getAcccode() == null ? "" : inv.getVendor().getAcccode();
                        //refer ticket ERP-10777
                        //customerAdd = accVendorHandler.getVendorAddressForSenwanTec(inv.getVendor(), true);
                        customerAdd = accountingHandlerDAOobj.getVendorAddressForSenwanTec(addressParams);
                        VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                        customerfax = StringUtil.isNullOrEmpty(vendorAddressDetails.getFax()) ? "" : vendorAddressDetails.getFax();
                        customerTel = StringUtil.isNullOrEmpty(vendorAddressDetails.getPhone()) ? "" : vendorAddressDetails.getPhone();
                        customerEmail = StringUtil.isNullOrEmpty(vendorAddressDetails.getEmailID()) ? "" : vendorAddressDetails.getEmailID();
                        contactperson = StringUtil.isNullOrEmpty(vendorAddressDetails.getContactPerson()) ? "" : vendorAddressDetails.getContactPerson();
                        terms = inv.getVendor() == null ? "" : inv.getVendor().getDebitTerm() == null ? "" : inv.getVendor().getDebitTerm().getTermdays() + " Days.";
                        memo = inv.getMemo() == null ? "" : inv.getMemo();
                        if (inv.getCreatedby() != null) {
                            Createdby = StringUtil.getFullName(inv.getCreatedby());
                        }

                        order_by.add("srno");
                        order_type.add("asc");
                        invRequestParams.put("order_by", order_by);
                        invRequestParams.put("order_type", order_type);
                        filter_names.add("purchaseReturn.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);

                        idresult = accGoodsReceiptobj.getPurchaseReturnDetails(invRequestParams);
                        itr = idresult.getEntityList().iterator();


                        PurchaseReturnDetail row = null;
                        while (itr.hasNext()) {
                            TaxInvoiceSubReport invoiceSubReport = new TaxInvoiceSubReport();
                            String prodName = "";
                            String prodDesc = "";
                            String partNo = "";
                            String prodCode = "";
                            String podono = "";//for GCB line custome field
                            double quantity = 0, discountQuotation = 0, discountOrder = 0;
                            double rate = 0;
                            Discount discount = null;
                            String uom = "";
                            double amount1 = 0;
                            row = (PurchaseReturnDetail) itr.next();
                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc = row.getDescription();
                            } else {
                                if (!StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription())) {
                                    prodDesc = row.getInventory().getProduct().getDescription();
                                }
                            }
                            prodName = row.getInventory().getProduct().getName();
                            prodCode = !StringUtil.isNullOrEmpty(row.getInventory().getProduct().getProductid()) ? row.getInventory().getProduct().getProductid() : "";
                            if ((row.getGrdetails() != null) && (!(row.getGrdetails().equals("undefined")))) {
                                GoodsReceiptOrderDetails grdetails = row.getGrdetails();
                                groRefno = grdetails.getGrOrder().getGoodsReceiptOrderNumber();
                            } else if (row.getVidetails() != null) {
                                GoodsReceiptDetail videtails = row.getVidetails();
                                invRefno = videtails.getGoodsReceipt().getGoodsReceiptNumber();
                                if (videtails.getVendorQuotationDetail() != null) {
                                    qtNumber = videtails.getVendorQuotationDetail().getVendorquotation().getQuotationNumber();
                                }

                            }

                            quantity = row.getReturnQuantity();
                            rate = row.getRate();
                            uom = row.getInventory().getProduct().getUnitOfMeasure() == null ? "" : row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA();
                            amount1 = rate * quantity;
//                            double rowTaxPercent = 0;
//                            String rowTaxName = "";
//                            amount1 -= row.getDiscount() != null ? row.getDiscount().getDiscountValue() : 0.0;

                            invoiceSubReport.setsNo(row.getSrno() + "");
                            invoiceSubReport.setProductDescription(prodDesc);
                            invoiceSubReport.setNoOfPkg(uom);
                            invoiceSubReport.setQty(authHandler.formattedQuantity(quantity, companyid));
                            invoiceSubReport.setuPrice(authHandler.getFormattedUnitPrice(rate, companyid));
                            invoiceSubReport.setProductAmount(authHandler.formattedAmount(amount1, companyid));
                            invoiceSubReport.setAmountCurrency(inv.getCurrency().getCurrencyCode());//currency.setCurrencyCode() != null ? currency.getSymbol() : currency.getCurrencyCode());
                            invoiceSubReport.setCode(prodCode);//stock code
               
                            Map<String, Object> variableMap = new HashMap<String, Object>();
                            PurchaseReturnDetailCustomDate purchaseReturnDetailCustomDate = (PurchaseReturnDetailCustomDate) row.getPurchaseReturnDetailCustomDate();
                            AccountingManager.setCustomColumnValues(purchaseReturnDetailCustomDate, FieldInLineMap, replaceFieldInLineMap, variableMap);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("POnoDOno")) {
                                        podono = coldata;
                                    }
                                }
                            }
                        invoiceSubReport.setPodono(podono);
                            invoiceSubReportsList.add(invoiceSubReport);
                            total += amount1;
 
                        }

                        totalAmount = authHandler.round(total, companyid);

                        String source = "";
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        PurchaseReturnCustomData purchaseReturnCustomData = (PurchaseReturnCustomData) inv.getPurchaseReturnCustomData();
                        AccountingManager.setCustomColumnValues(purchaseReturnCustomData, FieldMap, replaceFieldMap, variableMap);
                        for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Source/Type")) {
                                        taxInvoice.setCustomfield(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Service Order No")) {
                                        invoiceMap.put("So", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Maintenance Order No")) {
                                        invoiceMap.put("Mo", coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Quotation Ref No")) {
                                        qtNumber = coldata;
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Sales Person")) {
                                        salesperson=coldata;
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Purchase Order")) {
                                        poRefno=coldata;
                                    }else if ((varEntry.getKey().split("_")[1]).equals("Invoice Number")) {
                                        invRefno=coldata;
                                    }
                                }
                            }
                        }
                        KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                        CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                        Company company = (Company) cmpresult.getEntityList().get(0);

                        taxInvoice.setCustcode(customercode != null ? customercode : "");
                        taxInvoice.setCustname(customerName != null ? customerName : "");
                        taxInvoice.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
                        taxInvoice.setAddress(company.getAddress());
                        taxInvoice.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        taxInvoice.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                        taxInvoice.setInvoiceNo(invno);
                        taxInvoice.setpONumber(poRefno);
                        taxInvoice.setdONomber(invRefno);
                        taxInvoice.setqtNumber(qtNumber);
                        taxInvoice.setDate(dateFormat.format(entryDate));
                        taxInvoice.setPaymentTerms(terms);
                        taxInvoice.setSalesPerson(salesperson);
                        taxInvoice.setContactPerson(contactperson);
                        taxInvoice.setAddress(StringUtil.isNullOrEmpty(customerAdd) ? "" : customerAdd.replaceAll("\n", "<br>"));//passed as Address of customer 
                        currsymbol = (currency.getSymbol() != null) ? (currency.getSymbol() + " ") : "";
                        taxInvoice.setSubtotal(authHandler.formattedAmount(total, companyid));
                        taxInvoice.setAmount(authHandler.formattedAmount((total + discountterm), companyid));
                        taxInvoice.setGstValue(authHandler.formattedAmount((totaltax + rowTaxAmountTotal), companyid));
                        taxInvoice.setCustomerFax(customerfax);
                        taxInvoice.setCustomerEmail(customerEmail);
                        taxInvoice.setPrintedby(Createdby);
                        taxInvoice.setCustomerTel(customerTel);
                        taxInvoice.setShipDate(((shipDate != null) ? dateFormat.format(shipDate) : " "));
                        taxInvoice.setaccNumber(customercode);
                        taxInvoice.setGstpercent(taxPercent == 0 ? "" : "(" + Double.toString(taxPercent) + "%)");
                        taxInvoice.setDiscount(authHandler.formattedAmount((totalDiscount != null ? totalDiscount.getDiscountValue() : 0), companyid));
                        taxInvoice.setAmountTotal(authHandler.formattedAmount((total - (totalDiscount != null ? totalDiscount.getDiscountValue() : 0)), companyid));
                        taxInvoice.setGrandTotal(authHandler.formattedAmount(totalAmount, companyid));
                        taxInvoiceList.add(taxInvoice);
                        invoiceMap.put("invoicesublist", new JRBeanCollectionDataSource(invoiceSubReportsList));
                        response.setHeader("Content-Disposition", "attachment;filename=" + "PurchaseReturn.pdf");
                        InputStream inputStream = null;
                         String fileName1 ="";
                        if (templateflag == Constants.Guan_Chong_templateflag) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GCBPurchaseReturn.jrxml");
                           fileName1 = StorageHandler.GetDocStorePath() + "tick" + FileUploadHandler.getCompanyImageExt();
                            invoiceMap.put("tickImage", fileName1);
                       } else {
                        fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        invoiceMap.put("imagePath1", fileName1);
                        String fileName2 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        invoiceMap.put("imagePath2", fileName2);
                        invoiceMap.put("currency", inv.getCurrency().getCurrencyCode());
                        invoiceMap.put("title", "DEBIT NOTE");
                        invoiceMap.put("CompanyName",company.getCompanyName()!=null?"\"" + company.getCompanyName()+"\"":"");
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationDeditNote.jrxml");
                       }
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(taxInvoiceList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
                        list.add(jasperPrint);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
        return list;

    }
    
    public List<Object> exportF1RecreationCustomerQuotation(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int type =request.getParameter("type")!=null?Integer.parseInt(request.getParameter("type")):0;
        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                List<F1RecreationCustomerQuotationTable> F1RecreationCustomerQuotationTablelist = new ArrayList<F1RecreationCustomerQuotationTable>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                order_by.add("srno");
                order_type.add("asc");
                invRequestParams.put("order_by", order_by);
                invRequestParams.put("order_type", order_type);
                KwlReturnObject idresult = null;
                String customerName = "";
                String customerCode = "";
                String attn = "";
                String customerPhone = "";
                String customerEmail = "";
                String approverName = "";   //Quotation Creator   

                String billingadd = "";
                String delivryadd = "";
                String project = "";
                String Design = "";
                String fax = "";
                String did = "";
                String hp = "";
                String date = "";
                String deliveryterms = "";
                String validity = "";
                String salesperson = "";
                String salespersonDesgn = "";
                String salescontactno = "";
                String sourcetype = "";
                String customerrefno = "";
                String qutno = "";
                String curr = "";
                String custPORefNo = "";

                double totaltax = 0, discountTotalQuotation = 0, totaltaxpercent = 0;
                double totalAmount = 0;
                double taxPercent = 0;
                String mainTaxName = "";
                Iterator itr = null;
                int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
                Map<String, Object> quotationMap = new HashMap<String, Object>();
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                F1RecreationCustomerQuotation F1CustomerQuotation = new F1RecreationCustomerQuotation();
                List<F1RecreationCustomerQuotation> F1CustomerQuotationList = new ArrayList<F1RecreationCustomerQuotation>();
                try {
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Customer_Quotation_ModuleId, 0, 1));
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);

                    DateFormat df = (DateFormat) requestParamsCustom.get("df");
                    DateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");

                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                    Date entryDate = null;
                    double amount = 0;
                    double subtotal = 0;
                    double gst = 0;
                    double totalDiscount = 0;
                    double amountinbase = 0;
                    double ordertaxamount = 0;
                    double rowTaxAmountTotal = 0;
                    double orderAmount = 0;
                    List<Terms> termsList = new ArrayList<Terms>();
                    InputStream inputStream = null;
                    InputStream inputStreamSubreport = null;
                    if (mode == StaticValues.AUTONUM_QUOTATION) {
                        KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Quotation.class.getName(), billid);
                        Quotation inv = (Quotation) cap.getEntityList().get(0);
                        if (inv.getCreatedby() != null) {
                            approverName = StringUtil.getFullName(inv.getCreatedby());
                        }
                        curr = inv.getCurrency() != null ? inv.getCurrency().getSymbol() : "";
                        entryDate = inv.getQuotationDate(); //Quotation Date
                        filter_names.add("quotation.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accInvoiceDAOobj.getQuotationDetails(invRequestParams);
                        customerName = inv.getCustomer() == null ? inv.getCustomer().getAccount().getName() : inv.getCustomer().getName();
                        customerCode = inv.getCustomer() == null ? "" : inv.getCustomer().getAcccode() == null ? "":inv.getCustomer().getAcccode();
                        fax = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingFax()!=null?inv.getBillingShippingAddresses().getBillingFax():"":"";
                        hp = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingMobile()!=null?inv.getBillingShippingAddresses().getBillingMobile():"":"";
                        did = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingPhone()!=null?inv.getBillingShippingAddresses().getBillingPhone():"":"";
                        customerEmail = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingEmail()!=null?inv.getBillingShippingAddresses().getBillingEmail():"":"";
                        attn = inv.getBillingShippingAddresses() != null ? inv.getBillingShippingAddresses().getBillingContactPerson()!=null?inv.getBillingShippingAddresses().getBillingContactPerson():"":"";
                        billingadd = CommonFunctions.getBillingShippingAddressForSenwanTec(inv.getBillingShippingAddresses(), true);
                        delivryadd = CommonFunctions.getBillingShippingAddressForSenwanTec(inv.getBillingShippingAddresses(), false);

                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyid);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("customerid", inv.getCustomer().getID());
                        CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                        customerPhone = customerAddressDetails != null ? customerAddressDetails.getPhone() != null ? customerAddressDetails.getPhone() : "" : "";
                        
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MMM-yy");
                        String entryDateString = authHandler.getUserDateFormatterWithoutTimeZone(request).format(entryDate);
                        salesperson = inv.getSalesperson() != null ? inv.getSalesperson().getValue() : "";
                        salescontactno = inv.getSalesperson() != null ? (inv.getSalesperson().getEmailID() != null ? inv.getSalesperson().getEmailID() : "") : "";
                        validity = inv.getValiddate() == null ? "" : authHandler.getUserDateFormatterWithoutTimeZone(request).format(inv.getValiddate());
                        qutno = inv.getQuotationNumber() == null ? "" : inv.getQuotationNumber();
                        custPORefNo = inv.getCustomerPORefNo() == null ? "": inv.getCustomerPORefNo();
                        if(inv.getSalesperson()!=null){
                         salesperson =  inv.getSalesperson().getValue() ;
                         salespersonDesgn =  inv.getSalesperson().getDesignation() ;
                         salescontactno =  inv.getSalesperson().getEmailID() != null ? inv.getSalesperson().getEmailID():"";
                        }
                        
                        F1CustomerQuotation.setQuotationrefno(qutno);
                        F1CustomerQuotation.setCustomername(customerName);
                        F1CustomerQuotation.setAttn(attn);
                        F1CustomerQuotation.setTel(customerPhone);
                        F1CustomerQuotation.setEmail(customerEmail);
                        F1CustomerQuotation.setDate(entryDateString);
                        F1CustomerQuotation.setFax(fax);
                        F1CustomerQuotation.setSalesperson(salesperson);
                        F1CustomerQuotation.setSalescontactno(salescontactno);
                        F1CustomerQuotation.setValidity(validity);
                        F1CustomerQuotation.setBillingadd(billingadd);//add(billingadd);
                        F1CustomerQuotation.setDelivryadd(delivryadd);
                        F1CustomerQuotation.setDid(did);
                        F1CustomerQuotation.setHp(hp);

                        itr = idresult.getEntityList().iterator();
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        QuotationDetail row = null;
                        String imagePath = "";
                        String INV_NUMBER = "";
                        String DO_NUMBER = "";
                        String PO_NUMBER = "";
                        HashMap<String, Object> fieldrequestParamsData = new HashMap();
                        HashMap<String, String> replaceFieldMapData = new HashMap<String, String>();
                        fieldrequestParamsData.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                        fieldrequestParamsData.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Customer_Quotation_ModuleId, 1));
                        HashMap<String, Integer> fieldMap2 = accAccountDAOobj.getFieldParamsMap(fieldrequestParamsData, replaceFieldMapData);
                        int i = 0;
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        KwlReturnObject idcustresult = accountingHandlerDAOobj.getObject(QuotationCustomData.class.getName(), inv.getID());
                        if (idcustresult.getEntityList().get(0) != null && idcustresult.getEntityList().size() > 0) {
                            QuotationCustomData jeCustom = (QuotationCustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
//                      
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    if ((varEntry.getKey().split("_")[1]).equals("Source/Type")) {
                                        F1CustomerQuotation.setSourcetype(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Project")) {
                                        F1CustomerQuotation.setProject(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Designation")) {
                                        F1CustomerQuotation.setDesign(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Customer Ref No")) {
                                        F1CustomerQuotation.setCustomerrefno(coldata);
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Delivery Terms")) {
                                        F1CustomerQuotation.setDeliveryterms(coldata);
                                    }else if ((varEntry.getKey().split("_")[1]).equals("Invoice Number")) {
                                        INV_NUMBER = coldata;
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Packing List")) {
                                        DO_NUMBER = coldata;
                                    } else if ((varEntry.getKey().split("_")[1]).equals("Purchase Order Number")) {
                                        custPORefNo = coldata;
                                    }
                                }
                            }
                        }
                        
                       

                        while (itr.hasNext()) {
                            i++;
                            String prodName = "";
                            double quantity = 0;
                            double rate = 0;
                            double discount = 0;
                            double amount1 = 0;
                            row = (QuotationDetail) itr.next();
                            String prodid = row.getProduct().getID() != null ? row.getProduct().getID() : "";
                            prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";

                            quantity = row.getQuantity();     //No. of Quantity
                            rate = row.getRate();
                            int srno = row.getSrno();
                            String desc = row.getDescription();

                            double quotationPrice = authHandler.round(rate * quantity, companyid);
                            if (row.getDiscountispercent() == 1) {
                                amount1 = (quotationPrice) - (quotationPrice * row.getDiscount() / 100);
                            } else {
                                amount1 = quotationPrice - row.getDiscount();
                            }

                            F1RecreationCustomerQuotationTable F1RecreationCustomerQuotationTabledata = new F1RecreationCustomerQuotationTable();
                            F1RecreationCustomerQuotationTabledata.setProductname(prodName);
                            if(type==2 || type == 1){ // PROFORMA INVOICE WITH SGD / USD
                                F1RecreationCustomerQuotationTabledata.setProductdesc(desc.replaceAll("\n", "<br>"));
                            } else {
                                F1RecreationCustomerQuotationTabledata.setProductdesc(desc);
                            }
                            F1RecreationCustomerQuotationTabledata.setQuantity(authHandler.formattedQuantity(quantity, companyid));
                            F1RecreationCustomerQuotationTabledata.setSrno(Integer.toString(i));
                            if (type == 0 || type==4) { //If Normal Quotation
                                F1RecreationCustomerQuotationTabledata.setUnitprice(curr + " " + authHandler.formattedCommaSeparatedAmount(rate, companyid));
                                F1RecreationCustomerQuotationTabledata.setTotalprice(curr + " " + authHandler.formattedCommaSeparatedAmount(amount1, companyid));
                            } else { //If Proforma Invoice (SGD or USD)
                                F1RecreationCustomerQuotationTabledata.setUnitprice(authHandler.formattedCommaSeparatedAmount(rate, companyid));
                                F1RecreationCustomerQuotationTabledata.setTotalprice(authHandler.formattedCommaSeparatedAmount(amount1, companyid));
                            }
                            String temp = storageHandlerImpl.GetProfileImgStorePath() + Constants.ProductImages;
                            imagePath = temp + prodid + ".png";
                            try {
                                Image img = Image.getInstance(imagePath);
                            } catch (Exception e) {
                                imagePath = "";
                            }
                            F1RecreationCustomerQuotationTabledata.setImgPath(imagePath);
                            F1RecreationCustomerQuotationTablelist.add(F1RecreationCustomerQuotationTabledata);
                            amount = amount + amount1;
                            rowTaxAmountTotal += row.getRowTaxAmount();
                        }

                        if (inv.getDiscount() != 0) {
                            if (inv.isPerDiscount()) {
                                totalDiscount = amount * inv.getDiscount() / 100;
                                amount = amount - totalDiscount;
                            } else {
                                amount = amount - inv.getDiscount();
                                totalDiscount = inv.getDiscount();
                            }
                        }
                        double totalTermAmount = 0;
                        if (!StringUtil.isNullOrEmpty(inv.getID())) {
                            HashMap<String, Object> requestParam = new HashMap();
                            requestParam.put("quotation", inv.getID());
                            KwlReturnObject quotationResult = null;
                            quotationResult = accSalesOrderDAOobj.getQuotationTermMap(requestParam);

                            List<QuotationTermMap> termMap = quotationResult.getEntityList();
                            for (QuotationTermMap quotationTermMap : termMap) {
                                InvoiceTermsSales mt = quotationTermMap.getTerm();
                                double termAmnt = quotationTermMap.getTermamount();
                                Terms termsObj = new Terms();
                                termsObj.setTermName(mt.getTerm());//+ (termAmnt > 0 ? "(+)" : "(-)"));
                                termsObj.setTermValue(termAmnt > 0 ? curr + " " + (authHandler.formattedCommaSeparatedAmount(termAmnt, companyid)) : "-" + curr + " " + (authHandler.formattedCommaSeparatedAmount((termAmnt * -1), companyid)));
                                termsList.add(termsObj);
                                totalTermAmount += termAmnt;
                            }
                        }
                        if (inv.getTax() != null) {
                            requestParams.put("transactiondate", inv.getQuotationDate());
                            requestParams.put("taxid", inv.getTax().getID());
                            requestParams.put("companyid", companyid);
                            KwlReturnObject result = accTaxObj.getTax(requestParams);
                            List taxList = result.getEntityList();
                            Object[] taxObj = (Object[]) taxList.get(0);
                            taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];

                        }
                        orderAmount = amount;//(Double) bAmt.getEntityList().get(0);
                        ordertaxamount = (taxPercent == 0 ? 0 : orderAmount * taxPercent / 100);
                        orderAmount += totalTermAmount;


                        F1CustomerQuotation.setSubtotal(curr + " " + authHandler.formattedCommaSeparatedAmount(amount, companyid));
                        if (type == 0 || type ==3) {
                            F1CustomerQuotation.setAmounttotal(curr + " " + authHandler.formattedCommaSeparatedAmount((orderAmount + ordertaxamount + rowTaxAmountTotal), companyid));
                        } else if(type==4) {
                            F1CustomerQuotation.setAmounttotal(curr + " " + authHandler.formattedCommaSeparatedAmount((orderAmount + ordertaxamount + rowTaxAmountTotal), companyid));
                            F1CustomerQuotation.setGstAmount(curr + " " +authHandler.formattedCommaSeparatedAmount((ordertaxamount + rowTaxAmountTotal), companyid));
                            F1CustomerQuotation.setSalesPersonDesignation(salespersonDesgn);
                        } else {
                            F1CustomerQuotation.setAmounttotal(authHandler.formattedCommaSeparatedAmount((orderAmount + ordertaxamount + rowTaxAmountTotal), companyid));
                        }
                        quotationMap.put("F1CustomerQuotationSublist", new JRBeanCollectionDataSource(F1RecreationCustomerQuotationTablelist));
                        quotationMap.put("termsList", new JRBeanCollectionDataSource(termsList));
                        F1CustomerQuotationList.add(F1CustomerQuotation);
                        String logo = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                        String footer = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
                        quotationMap.put("currency", inv.getCurrency() == null ?"":inv.getCurrency().getCurrencyCode());
                        quotationMap.put("CUSTOMER_CODE", customerCode);
                        quotationMap.put("INVOICE_NUMBER", INV_NUMBER);
                        quotationMap.put("DO_NUMBER", DO_NUMBER);
                        quotationMap.put("PO_NUMBER", custPORefNo);
                        quotationMap.put("PAYMENT_TERMS", inv.getTerm() == null ? "": inv.getTerm().getTermname());
                        quotationMap.put("SHIPPING_TERMS", inv.getShippingTerm() == null ? "": inv.getShippingTerm());
                        quotationMap.put("GST_NUMBER", companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        quotationMap.put("imagePath1", logo);
                        quotationMap.put("imagePath2", footer);
                        quotationMap.put("gstAmount", curr + " " +authHandler.formattedCommaSeparatedAmount((ordertaxamount + rowTaxAmountTotal), companyid));
                        quotationMap.put("salesPersonDesignation", salespersonDesgn);
                        response.setHeader("Content-Disposition", "attachment;filename=" + "Customer_Quotation.pdf");
                        String filename = "";
                        String sub_filename = "";
                        if(type == 2){
                            filename = "F1RecreationProformaInvoiceSGD";
                        }else if (type == 1){
                            filename = "F1RecreationProformaInvoiceUSD";
                        } else if (type == 3) {
                            quotationMap.put("FOOTER", StorageHandler.GetDocStorePath() + companyid + "_footer_2" + FileUploadHandler.getCompanyImageExt());
                            quotationMap.put("HEADER", StorageHandler.GetDocStorePath() + companyid + "_header_2" + FileUploadHandler.getCompanyImageExt());
                          
                            filename = "F1RecreationCustomerQuotation_Template5_Sales";
                            sub_filename = "F1RecreationCustomerQuotation_subReport_Template3";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + sub_filename + ".jrxml");
                            JasperDesign jasperDesign1 = JRXmlLoader.load(inputStream);
                            jasperReportSubReport = JasperCompileManager.compileReport(jasperDesign1);
                            quotationMap.put("subReport", jasperReportSubReport);
                        } else if (type == 4) {
                            quotationMap.put("FOOTER", StorageHandler.GetDocStorePath() + companyid + "_footer_2" + FileUploadHandler.getCompanyImageExt());
                            quotationMap.put("HEADER", StorageHandler.GetDocStorePath() + companyid + "_header_2" + FileUploadHandler.getCompanyImageExt());
                          
                            filename = "F1RecreationCustomerQuotation_Template4_Lease";
                            sub_filename = "F1RecreationCustomerQuotation_subReport_Template3";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + sub_filename + ".jrxml");
                            JasperDesign jasperDesign1 = JRXmlLoader.load(inputStream);
                            jasperReportSubReport = JasperCompileManager.compileReport(jasperDesign1);
                            quotationMap.put("subReport", jasperReportSubReport);
                            
                        } else{
                            filename = "F1RecreationCustomerQuotation";
                            sub_filename = "F1RecreationCustomerQuotation_subreport";
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + sub_filename + ".jrxml");
                            JasperDesign jasperDesign1 = JRXmlLoader.load(inputStream);
                            jasperReportSubReport = JasperCompileManager.compileReport(jasperDesign1);
                            quotationMap.put("subReport", jasperReportSubReport);
                        }

                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/"+filename+".jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(F1CustomerQuotationList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, quotationMap, beanColDataSource);
                        list.add(jasperPrint);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }

    public List<Object> exportPurchaseReturn(HttpServletRequest request, HttpServletResponse response ,String billids, String DNNumber) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int type = request.getParameter("type") != null ? Integer.parseInt(request.getParameter("type")):0;
        if (recArray.length != 0) {
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            try {
                String companyId = sessionHandlerImpl.getCompanyid(request);
                KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyId);
                ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                if (extraCompanyPreferences.isAmountInIndianWord()) {
                    countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
                }
            } catch (Exception ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                  if(!StringUtil.isNullOrEmpty(billids))
                {
                    billid = billids;
                }

                JSONArray DataJArr = new JSONArray();
                Map<String, Object> purchaseReturnMap = new HashMap<String, Object>();

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);
                //df.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getTimeZoneDifference(request)));
                DecimalFormat quantityFormat = new DecimalFormat("0");
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));

                BITPurchaseRequisition purchaseReturn = new BITPurchaseRequisition();
                ArrayList<BITPurchaseRequisition> purchaseReturnList = new ArrayList<BITPurchaseRequisition>();
                ArrayList<TaxInvoiceSubReport> purchaseReturnTableList = new ArrayList<TaxInvoiceSubReport>();
                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String refno = "";
                    String invno = "";
                    Date entryDate = null;
                    String memo = "";
                    String vendor = "";
                    String Accountcode = "";
                    String vendoradd = "";
                    String vendorshiptoadd = "";
                    String attn = "";
                    String attncode = "";
                    String title = "";
                    String vendorterms = "";
                    String invoiceNo = "";
                    String invoiceDate = "";
                    PurchaseReturn pr = null;
                    pr = (PurchaseReturn) kwlCommonTablesDAOObj.getClassObject(PurchaseReturn.class.getName(), billid);
                    invno = pr.getPurchaseReturnNumber();
                    entryDate = pr.getOrderDate();
                    memo = pr.getMemo() != null ? pr.getMemo() : "";
                    vendor = pr.getVendor().getName() != null ? pr.getVendor().getName() : "";
                    vendorterms = pr.getVendor().getDebitTerm() != null ? (Integer.toString(pr.getVendor().getDebitTerm().getTermdays()) + " Days") : "";
                    
                    //refer ticket 
                    //vendoradd = templateflag ==Constants.BuildMate_templateflag?accVendorHandler.getVendorAddressForSenwanTec(pr.getVendor(), true):accVendorHandler.getVendorAddress(pr.getVendor(), true);
                    //vendorshiptoadd= templateflag ==Constants.BuildMate_templateflag?accVendorHandler.getVendorAddressForSenwanTec(pr.getVendor(), false):accVendorHandler.getVendorAddress(pr.getVendor(), false);
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    addressParams.put("vendorid", pr.getVendor().getID());
                    vendoradd = templateflag ==Constants.BuildMate_templateflag?accountingHandlerDAOobj.getVendorAddressForSenwanTec(addressParams):accountingHandlerDAOobj.getVendorAddress(addressParams);
                    addressParams.put("isBillingAddress", false);    //false to get shipping address
                    vendorshiptoadd= templateflag ==Constants.BuildMate_templateflag?accountingHandlerDAOobj.getVendorAddressForSenwanTec(addressParams):accountingHandlerDAOobj.getVendorAddress(addressParams);
                    VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                    
                    Accountcode = (pr.getVendor() != null && pr.getVendor().getAcccode() != null) ? pr.getVendor().getAcccode() : "";
                    attn = (vendorAddressDetails != null && !StringUtil.isNullOrEmpty(vendorAddressDetails.getContactPerson())) ? vendorAddressDetails.getContactPerson() : "";

                    if (templateflag == Constants.Merlion_templateflag) {
                        purchaseReturn.setDate(df.format(entryDate));
                        purchaseReturn.setCustname(vendor);
                        purchaseReturn.setInvoiceNo(invno);
                    } else {
                        purchaseReturn.setDate(df.format(entryDate));
                        if(!StringUtil.isNullOrEmpty(DNNumber)){
                            purchaseReturn.setPrn(DNNumber);        // PR Generated from Debit Note Report. So "Debit Note DN NO." ll print in PDF
                            invno = DNNumber;
                            title = "Debit Note #";
                        } else {
                            purchaseReturn.setPrn(invno);           // PR generated from PURchase Return. SO "Purchase Return PR No." ll print in PDF
                            title = "Purchase Return #";
                        }
                        purchaseReturn.setPurpose(memo);
                        purchaseReturn.setCustomer(vendor + "<br>" + vendoradd.replaceAll("\n", "<br>"));
                        purchaseReturn.setAccountCode(Accountcode);
                        purchaseReturn.setCurrency(pr.getCurrency() != null ? (!StringUtil.isNullOrEmpty(pr.getCurrency().getSymbol()) ? pr.getCurrency().getSymbol() : "") : "");
                    }
                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    order_by.add("srno");
                    order_type.add("asc");
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    filter_names.add("purchaseReturn.ID");
                    filter_params.add(pr.getID());
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);

                    idresult = accGoodsReceiptobj.getPurchaseReturnDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();
                    double total = 0;
                    double totalTaxAmount = 0;
                    double rowtaxamount = 0;
                    int i = 0;
                    while (itr.hasNext()) {
                        i++;
                        if (i == 1 && !StringUtil.isNullOrEmpty(memo) && templateflag != Constants.lsh_templateflag) {
                            TaxInvoiceSubReport prTable1 = new TaxInvoiceSubReport();
                            prTable1.setCode("");
                            prTable1.setName("");
                            prTable1.setProductDescription(memo);
                            prTable1.setAmountCurrency(pr.getCurrency().getCurrencyCode());
                            purchaseReturnTableList.add(prTable1);
                        }
                        TaxInvoiceSubReport prTable = new TaxInvoiceSubReport();
                        String prodId = "";
                        String prodName = "";
                        String prodDesc = "";
                        String quotationNo = "";
                        String Uom = "";
                        String rowtaxcode = "";
                        double quantity = 0,actualQuantity =0 , rate = 0, amount = 0,discount = 0;

                        PurchaseReturnDetail row = (PurchaseReturnDetail) itr.next();
                        prodId = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                        prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                            prodDesc = row.getDescription();
                        } else {
                            if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                prodDesc = row.getProduct().getDescription();
                            }
                        }
                        // refno=row.getVidetails()!=null?StringUtil.isNullOrEmpty(row.getVidetails().getID())?row.getVidetails().getID():"":"";
                        if ((row.getGrdetails() != null) && (!(row.getGrdetails().equals("undefined")))) {

                            GoodsReceiptOrderDetails grdetails = row.getGrdetails();
                             refno = grdetails.getGrOrder().getGoodsReceiptOrderNumber();

                        } else if (row.getVidetails() != null) {
                            GoodsReceiptDetail videtails = row.getVidetails();
                           invoiceNo = refno = videtails.getGoodsReceipt().getGoodsReceiptNumber();
                           invoiceDate = authHandler.getUserDateFormatterWithoutTimeZone(request).format(videtails.getGoodsReceipt().getCreatedon());

                        }
                        Uom = row.getUom() == null ? "" : row.getUom().getNameEmptyforNA();
                        quantity = row.getReturnQuantity();
                        actualQuantity = row.getActualQuantity();
                        rate = row.getRate();
                        rowtaxamount = row.getRowTaxAmount();
                        rowtaxcode = row.getTax()!=null ?row.getTax().getTaxCode():"";
                        amount = rate * quantity;
                        if (row.getDiscountispercent() == 0) {
                            discount = row.getDiscount();//Flat
                        } else {
                            discount = amount * (row.getDiscount() / 100);//Percentage Value
                        }
                        prTable.setDiscountamount(authHandler.formattedAmount(discount, companyid));
                        amount -= discount;
                        total += amount;
                        totalTaxAmount+=rowtaxamount;
                        prTable.setCode(prodId);
                        prTable.setUom(Uom);
                        prTable.setProductDescription(prodDesc);
                        prTable.setQty(authHandler.formattedQuantity(quantity, companyid));
                        prTable.setActualQuantity(authHandler.formattedQuantity(actualQuantity, companyid));
                        prTable.setProductAmount(authHandler.formattedAmount(amount, companyid));
                        prTable.setuPrice(authHandler.getFormattedUnitPrice(rate, companyid));
                        prTable.setName(prodName);
                         if (templateflag == Constants.Guan_ChongBF_templateflag || templateflag == Constants.Guan_Chong_templateflag) {
                            prTable.setsNo(row.getSrno()+"");                                                       
                            prTable.setTaxCode(rowtaxcode);
                            prTable.setTaxamount(authHandler.formattedAmount(row.getRowTaxAmount(), companyid));
                            prTable.setProductAmount(authHandler.formattedAmount(amount, companyid));
                            prTable.setAmountCurrency(pr.getCurrency().getCurrencyCode());
                            prTable.setQty(authHandler.formattedQuantity(quantity, companyid));
                            prTable.setProductDescription(prodDesc.replaceAll("\n", "<br>"));
                        } else if (templateflag == Constants.Merlion_templateflag) {
                            prTable.setsNo(i + "");
                            prTable.setAmountCurrency(pr.getCurrency().getCurrencyCode());
                            prTable.setUom(Uom);
                        }else if (templateflag == Constants.lsh_templateflag) {
                              prTable.setsNo(i + "");                      
                              prTable.setQty(quantityFormat.format(quantity));
                        }else if(templateflag == Constants.Tony_FiberGlass_templateflag){
                         prTable.setQty(authHandler.formattingDecimalForQuantity(quantity, companyid));
                        } 
                       String sirial = "";
                        if (templateflag == Constants.Diamond_Aviation_templateflag) {
                            KwlReturnObject kmsg = accCommonTablesDAO.getOnlySerialDetails(row.getID(), false, Constants.Acc_Sales_Return_ModuleId + "", false, false);
                            List batchserialdetails = kmsg.getEntityList();
                            Iterator iter = batchserialdetails.iterator();
                            while (iter.hasNext()) {
                                Object[] objArr = (Object[]) iter.next();
                                sirial = objArr[8] != null ? (String) objArr[8] : "";
                            }
                            HashMap<String, Object> fieldrequestParamsProduct = new HashMap();
                            Map<String, Object> variableMapProduct = new HashMap<String, Object>();
                            fieldrequestParamsProduct.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                            fieldrequestParamsProduct.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Purchase_Return_ModuleId, 1));
                            HashMap<String, String> replaceFieldMapProduct = new HashMap<String, String>();
                            HashMap<String, Integer> FieldMapProduct = accAccountDAOobj.getFieldParamsMap(fieldrequestParamsProduct, replaceFieldMapProduct);
                            PurchaseReturnDetailCustomDate objProduct = (PurchaseReturnDetailCustomDate) row.getPurchaseReturnDetailCustomDate();
                            if (objProduct != null) {
                                AccountingManager.setCustomColumnValues(objProduct, FieldMapProduct, replaceFieldMapProduct, variableMapProduct);
                                for (Map.Entry<String, Object> varEntry : variableMapProduct.entrySet()) {
                                    String coldata = varEntry.getValue().toString();
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Condition")) {
                                            FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                            if (fieldComboData != null) {
                                                prTable.setCondition(fieldComboData.getValue());
                                            }
                                        } else if ((varEntry.getKey().split("_")[1]).equals("Serial Number")) {//CUSTOM FIELD FOR DIAMOND AVIATION
                                             sirial = coldata;
                                        }
                                    }
                                }
                            }
                          
                            prTable.setsNo(sirial);
                        }
                        purchaseReturnTableList.add(prTable);
                    }
                                 int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                   
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Purchase_Return_ModuleId, 0, 1));
                    
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                     
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    PurchaseReturnCustomData purchaseReturnCustomData = (PurchaseReturnCustomData) pr.getPurchaseReturnCustomData();
                    AccountingManager.setCustomColumnValues(purchaseReturnCustomData, FieldMap, replaceFieldMap, variableMap);
                    for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                        String coldata = varEntry.getValue().toString();
                         
                            
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                if ((varEntry.getKey().split("_")[1]).equals("Salesman Code")) {
                                    purchaseReturnMap.put("SalesmanCode", coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("PoNo")) {
                                    purchaseReturnMap.put("PONo", coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Remarks")) {
                                    purchaseReturnMap.put("Remarks", coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Contract No")) {//Guan Chong
                                    purchaseReturnMap.put("ContractNo", coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Exchange Rate")) {//Guan Chong
                                    purchaseReturnMap.put("EXCHANGERATE", coldata);
                                } else if ((varEntry.getKey().split("_")[1]).equals("Invoice Number")) {//Guan Chong
                                    refno=coldata;
                                }
                            }
                        
                        
                    }
                       
                    double exchangeRate = 0;
                    if (pr!=null && pr.getTax() != null) {
                        double taxPercent = 0;
                        KwlReturnObject taxresult = accTaxObj.getTaxPercent(sessionHandlerImpl.getCompanyid(request), pr.getOrderDate(), pr.getTax().getID());
                        taxPercent = (Double) taxresult.getEntityList().get(0);
                        totalTaxAmount = (taxPercent == 0 ? 0 : authHandler.round((total * taxPercent / 100), companyid));
                    }
                    
                    double totalTermAmount = 0;
                    double totalTermTaxAmount = 0;
                    List purchaseReturnTermMapList = kwlCommonTablesDAOObj.getSummationOfTermAmtAndTermTaxAmt(Constants.purchasereturntermsmap, pr.getID());
                    if(purchaseReturnTermMapList != null && !purchaseReturnTermMapList.isEmpty()){
                        Iterator termItr = purchaseReturnTermMapList.iterator();
                        while (termItr.hasNext()) {
                            Object[] termObj = (Object[]) termItr.next();
                            /* 
                            * [0] : Sum of termamount  
                            * [1] : Sum of termamountinbase 
                            * [2] : Sum of termTaxamount 
                            * [3] : Sum of termTaxamountinbase 
                            * [4] : Sum of termamountexcludingtax 
                            * [5] : Sum of termamountexcludingtaxinbase
                            */ 
                            if (pr.isGstIncluded()) {
                                if(termObj[4] != null){
                                    totalTermAmount += authHandler.round((Double) termObj[4],companyid);
                                }
                            } else {
                                if(termObj[0] != null){
                                    totalTermAmount += authHandler.round((Double) termObj[0],companyid);
                                }
                            }
                            if(termObj[2] != null){
                                totalTermTaxAmount += authHandler.round((Double) termObj[2],companyid);
                            }
                        }
                    }
                    if (templateflag == Constants.Guan_ChongBF_templateflag || templateflag == Constants.Guan_Chong_templateflag) {
                        KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                        KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
                        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                        requestParams.put("vendorIds", pr.getVendor().getID());
                        if (pr.getCurrency() != null) {
                            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, total, pr.getCurrency().getCurrencyID(), pr.getOrderDate(), 0);
                            total = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                            exchangeRate = (Double) bAmt.getEntityList().get(1);
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalTaxAmount, pr.getCurrency().getCurrencyID(), pr.getOrderDate(), 0);
                            totalTaxAmount = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                        }
                        purchaseReturnMap.put("EXCHANGERATE", "1 " + baseCurrency.getCurrencyCode() + " = " + authHandler.formattedQuantity(exchangeRate, companyid) + " " + pr.getCurrency().getCurrencyCode());
                        purchaseReturnMap.put("shipTo", vendor + "<br>" + vendorshiptoadd.replaceAll("\n", "<br>"));
                        purchaseReturnMap.put("subtotal", authHandler.formattedCommaSeparatedAmount(total, companyid));
                        if (!StringUtil.isNullOrEmpty(DNNumber)) {
                            purchaseReturnMap.put("cnnumber", DNNumber);
                            purchaseReturnMap.put("title", (type == 0 ? "DEBIT NOTE" : "DEBIT ADVICE"));
                        } else {
                            purchaseReturnMap.put("cnnumber", invno);
                            purchaseReturnMap.put("title", "Purchase Return ");
                        }
                        purchaseReturnMap.put("gstvalue", authHandler.formattedCommaSeparatedAmount(totalTaxAmount+totalTermTaxAmount, companyid));
                        purchaseReturnMap.put("totalamount", (type==0?authHandler.formattedCommaSeparatedAmount((total+totalTaxAmount+totalTermAmount+totalTermTaxAmount), companyid):authHandler.formattedCommaSeparatedAmount(total, companyid)));                                            
                        purchaseReturnMap.put("gstregno",companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");                                        
                        purchaseReturnMap.put("InvoiceNo",invoiceNo);
                        purchaseReturnMap.put("invoiceDate", invoiceDate);
                        purchaseReturnMap.put("CurrencyCode", pr.getCurrency().getCurrencyCode());
                        purchaseReturnMap.put("PostText", pr.getPostText()!=null?pr.getPostText():"");
                        purchaseReturnMap.put("SRSubReportData", new JRBeanCollectionDataSource(purchaseReturnTableList));
                    }else if(templateflag == Constants.Tony_FiberGlass_templateflag){
                         purchaseReturnMap.put("currency", pr.getCurrency().getCurrencyCode()); 
                         purchaseReturnMap.put("gstregno",companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");    
                         purchaseReturnMap.put("gstvalue",""+authHandler.formattedCommaSeparatedAmount(totalTaxAmount+totalTermTaxAmount, companyid));                        
                         purchaseReturnMap.put("subtotal", authHandler.formattedCommaSeparatedAmount(total, companyid));
                         purchaseReturnMap.put("totalamount", pr.getCurrency().getCurrencyCode() + " " + authHandler.formattedCommaSeparatedAmount((total+totalTaxAmount+totalTermAmount+totalTermTaxAmount), companyid));                       
                         
                         purchaseReturnMap.put("attention", attn);
                         purchaseReturnMap.put("CNnumber"," "+invno);
                         purchaseReturnMap.put("custmerterms",vendorterms);
                         purchaseReturnMap.put("companyname", company.getCompanyName()!=null?company.getCompanyName():"");
                         purchaseReturnMap.put("billTo", vendor+"<br>"+vendoradd.replaceAll("\n", "<br>"));
                         purchaseReturnMap.put("title", title);
                         purchaseReturnMap.put("percentGST","GST");
                         purchaseReturnMap.put("SRSubReportData", new JRBeanCollectionDataSource(purchaseReturnTableList));
                        
                     } else if(templateflag == Constants.lsh_templateflag) {
                        purchaseReturnMap.put("title","TAX Debit Note");
                        purchaseReturnMap.put("CNDNno","Debit Note No.");
                        purchaseReturnMap.put("Total", pr.getCurrency().getCurrencyCode() + " " + authHandler.formattedCommaSeparatedAmount((total+totalTaxAmount+totalTermAmount+totalTermTaxAmount), companyid));
                        purchaseReturnMap.put("subTotal", authHandler.formattedCommaSeparatedAmount(total, companyid));
                        purchaseReturnMap.put("gstValue", ""+authHandler.formattedCommaSeparatedAmount(totalTaxAmount+totalTermTaxAmount, companyid));
                        purchaseReturnMap.put("CNnumber"," "+invno);
                        purchaseReturnMap.put("shipTo", vendor+"<br>"+vendorshiptoadd.replaceAll("\n", "<br>"));
                        purchaseReturnMap.put("billTo", vendor+"<br>"+vendoradd.replaceAll("\n", "<br>"));
                        purchaseReturnMap.put("companyName", company.getCompanyName()!=null?company.getCompanyName():"");
                        purchaseReturnMap.put("SRSubReportData", new JRBeanCollectionDataSource(purchaseReturnTableList));
                        if (!StringUtil.isNullOrEmpty(DNNumber)) {
                            purchaseReturnMap.put("CNnumber", DNNumber);
                            purchaseReturnMap.put("title","TAX Debit Note");
                            purchaseReturnMap.put("CNDNno","Debit Note No.");
                        } else {
                            purchaseReturnMap.put("CNnumber", invno);
                            purchaseReturnMap.put("title", "Purchase Return ");
                            purchaseReturnMap.put("CNDNno","Purchase Return No.");
                        }
                    }else if (templateflag == Constants.Merlion_templateflag) {
                        purchaseReturn.setAmountTotal(authHandler.formattedCommaSeparatedAmount(total, companyid));
                        purchaseReturn.setAmountInWords(pr.getCurrency().getName() + " " + EnglishNumberToWordsOjb.convert(total, pr.getCurrency(),countryLanguageId) + " only.");
                        purchaseReturnMap.put("custvend", "Vendor");
                        purchaseReturnMap.put("notetype", "DEBIT NOTE");
                        purchaseReturnMap.put("currency", pr.getCurrency().getCurrencyCode());
                        purchaseReturnMap.put("attention", attn);
                        //purchaseReturnList.add(purchaseReturn);
                        purchaseReturnMap.put("SRSubReportData", new JRBeanCollectionDataSource(purchaseReturnTableList));
                    }else if(templateflag==Constants.Diamond_Aviation_templateflag){
                        purchaseReturnMap.put("companyname", company.getCompanyName() != null ? company.getCompanyName() : "");
                        purchaseReturnMap.put("COMPANY_NAME", company.getCompanyName() != null ? company.getCompanyName() : "");
                        purchaseReturnMap.put("COMPANY_ADDRESS",AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                        if (!StringUtil.isNullOrEmpty(DNNumber)) {
                            purchaseReturnMap.put("dnnumber", " " + DNNumber);
                            purchaseReturnMap.put("title", "Debit Note ");
                        } else {
                            purchaseReturnMap.put("dnnumber", " " + invno);
                            purchaseReturnMap.put("title", "Purchase Return ");
                        }
                        purchaseReturnMap.put("gstregno", companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        purchaseReturnMap.put("isCustomer", false);
                        purchaseReturnMap.put("vendorcode", Accountcode);
                        purchaseReturnMap.put("vendorinvno", refno);
                        purchaseReturnMap.put("shipTo",  vendor+ "<br>" + vendoradd.replaceAll("\n", "<br>"));
//                        purchaseReturnMap.put("gstvalue", "0.00");
                        purchaseReturnMap.put("gstvalue",authHandler.formattedCommaSeparatedAmount(totalTaxAmount+totalTermTaxAmount, companyid));
                        purchaseReturnMap.put("GST_PERCENT", "");
                        purchaseReturnMap.put("subtotal", authHandler.formattedCommaSeparatedAmount(total, companyid));
                        purchaseReturnMap.put("totalamount", pr.getCurrency().getCurrencyCode() + " " + authHandler.formattedCommaSeparatedAmount((total+totalTaxAmount+totalTermAmount+totalTermTaxAmount), companyid));
                        purchaseReturnMap.put("SRSubReportData", new JRBeanCollectionDataSource(purchaseReturnTableList));
                    }else {
                        purchaseReturn.setRefno(refno);
                        purchaseReturn.setGst(authHandler.formattedCommaSeparatedAmount(totalTaxAmount+totalTermTaxAmount, companyid));
                        purchaseReturn.setGstpercent("");
                        purchaseReturn.setSubtotal(authHandler.formattedCommaSeparatedAmount(total, companyid));
                        purchaseReturn.setTotalamount(pr.getCurrency().getCurrencyCode() + " " +authHandler.formattedCommaSeparatedAmount((total+totalTaxAmount+totalTermAmount+totalTermTaxAmount), companyid));
                      //  purchaseReturnList.add(purchaseReturn);
                        purchaseReturnMap.put("PRSubReportData", new JRBeanCollectionDataSource(purchaseReturnTableList));
                        purchaseReturnMap.put("comapnyname",company.getCompanyName()!=null?company.getCompanyName():"");
                        purchaseReturnMap.put("comapnyaddress",AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                        purchaseReturnMap.put("gstregno", companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        purchaseReturnMap.put("customercode", Accountcode);
                        if(!StringUtil.isNullOrEmpty(DNNumber)){
                            purchaseReturnMap.put("title", "Debit Note ");
                        } else {
                            purchaseReturnMap.put("title", "Purchase Return ");
                        }                                                  
                    } 
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    purchaseReturnMap.put("imagePath", fileName1);
                    purchaseReturnList.add(purchaseReturn);
                    purchaseReturnMap.put("format", "pdf");
                    response.setHeader("Content-Disposition", "attachment;filename=" + "PurchaseReturn_v1.pdf");
                    try {
                        InputStream inputStream = null;
                        if (templateflag == Constants.Guan_ChongBF_templateflag || templateflag == Constants.Guan_Chong_templateflag) {
                            if(type == 0)
                            {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GuanChangCREDITDEBITNote.jrxml");
                            }else {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GuanChangCREDITDEBITADVICE.jrxml");                           
                            }
                        } else if (templateflag == Constants.Tony_FiberGlass_templateflag) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TonyFiberglassCreditDebitNote.jrxml");
                        } else if(templateflag == Constants.lsh_templateflag){
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LSHTaxCreditNoteJasper.jrxml");                    
                        } else if (templateflag == Constants.Merlion_templateflag) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MerlineCreditDebitNote.jrxml");
                        } else if(templateflag ==Constants.BuildMate_templateflag){
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BMPurchaseReturn.jrxml");
                        } else if (templateflag == Constants.Diamond_Aviation_templateflag) {
                            if (pr.isIsNoteAlso()) {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationDebitNote.jrxml");
                            } else {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationPurchaseReturn.jrxml");
                            }
                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DefaultTemplateForPurchaseReturnWithDebitNote.jrxml");
                        }
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);

                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(purchaseReturnList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, purchaseReturnMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                } catch (ServiceException ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
                  if(!StringUtil.isNullOrEmpty(billids))
                {
                    break;
                }
            }
        }
        return list;
    }

    public List<Object> exportSalesReturnJasper(HttpServletRequest request, HttpServletResponse response ,String billids ,String CNNumber) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        int type = request.getParameter("type") != null ? Integer.parseInt(request.getParameter("type")):0;
        if (recArray.length != 0) {
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            try {
                String companyId = sessionHandlerImpl.getCompanyid(request);
                KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyId);
                ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                if (extraCompanyPreferences.isAmountInIndianWord()) {
                    countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
                }
            } catch (Exception ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (String s : recArray) {
                billid = s;

                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                if (!StringUtil.isNullOrEmpty(billids)) {
                    billid = billids;//in case of multi[print including jasper and ireport
                }
                JSONArray DataJArr = new JSONArray();
                Map<String, Object> SalesReturnMap = new HashMap<String, Object>();

                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);
                DecimalFormat quantityFormat = new DecimalFormat("0");
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));

                TaxInvoice SalesReturn = new TaxInvoice();
                ArrayList<TaxInvoice> SalesReturnList = new ArrayList<TaxInvoice>();
                ArrayList<TaxInvoiceSubReport> SalesReturnTableList = new ArrayList<TaxInvoiceSubReport>();
                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String refno = "";
                    String invno = "";
                    Date entryDate = null;
                    String memo = "";
                    String Customername = "";
                    String Accountcode = "";
                    String custadd = "";
                    String custfulladd = "";
                    String custphone = "";
                    String Customerfax = "";
                    String customerTel = "";
                    String paymentterms = "";
                    String salesperson = "";
                    String custmerterms = "";
                    String Createdby = "";
                    String attn = "";
                    String custshipAdd = "";
                    String invoiceNo = "";
                    String invoiceDate = "";

                    SalesReturn sr = null;
                    sr = (SalesReturn) kwlCommonTablesDAOObj.getClassObject(SalesReturn.class.getName(), billid);
                    invno = sr.getSalesReturnNumber();
                    entryDate = sr.getOrderDate();

                    memo = sr.getMemo() != null ? sr.getMemo() : "";
                    Customername = sr.getCustomer().getName() != null ? sr.getCustomer().getName() : "";
                    Accountcode = sr.getCustomer().getAcccode() != null ? sr.getCustomer().getAcccode() : "";
                    
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    addressParams.put("customerid", sr.getCustomer().getID());
                    CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    Customerfax = (customerAddressDetails == null) ? (StringUtil.isNullOrEmpty(sr.getCustomer().getFax()) ? "" : sr.getCustomer().getFax()) : (StringUtil.isNullOrEmpty(customerAddressDetails.getFax()) ? "" : customerAddressDetails.getFax());
                    customerTel = (customerAddressDetails == null) ? (StringUtil.isNullOrEmpty(sr.getCustomer().getContactNumber()) ? "" : sr.getCustomer().getContactNumber()) : (StringUtil.isNullOrEmpty(customerAddressDetails.getPhone()) ? "" : customerAddressDetails.getPhone());
                    custmerterms = sr.getCustomer().getCreditTerm() != null ? (Integer.toString(sr.getCustomer().getCreditTerm().getTermdays()) + " Days") : "";
                    attn = customerAddressDetails != null ? customerAddressDetails.getContactPerson() != null ? customerAddressDetails.getContactPerson() : "" : "";

                    custadd = accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams);
                    custfulladd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                    addressParams.put("isBillingAddress", false);
                    custshipAdd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                    
                    if (sr.getCreatedby() != null) {
                        Createdby = StringUtil.getFullName(sr.getCreatedby());
                    }
                    SalesReturn.setDate(df.format(entryDate));
                    SalesReturn.setInvoiceNo(invno);
                    SalesReturn.setCustname(Customername);
                    SalesReturn.setSoldToAddress(custadd.replaceAll("\n", "<br>"));
                    SalesReturn.setCustcode(Accountcode);

                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    order_by.add("srno");
                    order_type.add("asc");
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    filter_names.add("salesReturn.ID");
                    filter_params.add(sr.getID());
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);

                    idresult = accInvoiceDAOobj.getSalesReturnDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();
                    double total = 0;
                    double rowtaxamount = 0;
                    double totalTaxAmount = 0;
                    int i = 0;
                    while (itr.hasNext()) {
                        i++;
                        if (i == 1 && !StringUtil.isNullOrEmpty(memo)&& templateflag != Constants.lsh_templateflag) {
                            TaxInvoiceSubReport srTable1 = new TaxInvoiceSubReport();
                            srTable1.setCode("");
                            srTable1.setName("");
                            srTable1.setProductDescription(memo);
                            srTable1.setAmountCurrency(sr.getCurrency().getCurrencyCode());
                            SalesReturnTableList.add(srTable1);

                        }
                        TaxInvoiceSubReport srTable = new TaxInvoiceSubReport();
                        String prodId = "";
                        String prodName = "";
                        String prodDesc = "";
                        double Uprice = 0;
                        double amount = 0;
                        String sirial = "";
                        double quantity = 0;
                        double actualQuantity = 0;
                        String Uom = "";
                        String rowtaxcode = "";
                        double partamount =0;
                        double discount = 0;
                       
                        SalesReturnDetail row = (SalesReturnDetail) itr.next();
                        prodId = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                        prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        quantity = row.getReturnQuantity();
                        actualQuantity = row.getActualQuantity();
                        rowtaxcode = row.getTax()!=null?row.getTax().getTaxCode():"";
                        
                        if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                            prodDesc = row.getDescription();
                        }
                        if ((row.getDodetails() != null) && (!(row.getDodetails().equals("undefined")))) {
                            refno = row.getDodetails().getDeliveryOrder().getDeliveryOrderNumber();
                            if (row.getDodetails().getCidetails() != null) {
                                salesperson = row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson().getValue()) ? row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson().getValue() : "" : "";
                            }
                        } else if (row.getCidetails() != null) {
                            invoiceNo = refno = row.getCidetails().getInvoice().getInvoiceNumber();
                            invoiceDate = authHandler.getUserDateFormatterWithoutTimeZone(request).format(row.getCidetails().getInvoice().getCreatedon());
                            salesperson = row.getCidetails().getInvoice().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getCidetails().getInvoice().getMasterSalesPerson().getValue()) ? row.getCidetails().getInvoice().getMasterSalesPerson().getValue() : "" : "";
                            Invoice invoice = row.getCidetails().getInvoice();
                            /*If linked Invoice with SR is partial then fetching partamount  */
                            if (invoice != null && invoice.isPartialinv()) {
                                partamount = row.getCidetails().getPartamount();

                            }
                        } else {
                            refno = "";
                        }
                        Uprice = row.getRate();
                        amount = Uprice * quantity;
                        /*If Sales Return is linked with Partial Invoice 
                         then partial amount of SI used in SR is fetched
                         */
                        if (partamount != 0) {
                            amount = amount * (partamount / 100);
                        }
                        
                        if (row.getDiscountispercent() == 0) {
                            discount = row.getDiscount();//Flat
                        } else {
                            discount = amount * (row.getDiscount() / 100);//Percentage Value
                        }
                        srTable.setDiscountamount(authHandler.formattedAmount(discount,companyid));
                        amount -= discount;
                        total += amount;
                        rowtaxamount = row.getRowTaxAmount();
                        totalTaxAmount += rowtaxamount;                      
                        Uom = row.getUom() == null ? "" : row.getUom().getNameEmptyforNA();
                        srTable.setCode(prodId);
                        srTable.setProductDescription(prodDesc);
                        srTable.setQty(authHandler.formattedQuantity(quantity, companyid));
                        srTable.setsNo(i + "");                    

                        srTable.setUom(Uom);
                        srTable.setActualQuantity(authHandler.formattedQuantity(actualQuantity, companyid));
                        srTable.setName(prodName);
                        if (templateflag == Constants.Guan_ChongBF_templateflag || templateflag == Constants.Guan_Chong_templateflag) {
                            srTable.setsNo(row.getSrno()+"");  
                            srTable.setUom(Uom); 
                            srTable.setuPrice(authHandler.formattedAmount(Uprice, companyid));
                            srTable.setTaxCode(rowtaxcode);
                            srTable.setTaxamount(authHandler.formattedAmount(row.getRowTaxAmount(), companyid));
                            srTable.setProductAmount(authHandler.formattedAmount(amount, companyid));
                            srTable.setAmountCurrency(sr.getCurrency().getCurrencyCode());
                            srTable.setProductDescription(prodDesc.replaceAll("\n", "<br>"));
                        } else if (templateflag == Constants.BuildMate_templateflag) {
                            srTable.setuPrice(authHandler.formattedAmount(Uprice, companyid));
                            srTable.setProductAmount(authHandler.formattedAmount(amount, companyid));
                        } else if (templateflag == Constants.Merlion_templateflag) {
                            srTable.setuPrice(authHandler.formattedAmount(Uprice, companyid));
                            srTable.setProductAmount(authHandler.formattedAmount(amount, companyid));
                            srTable.setUom(Uom);
                            srTable.setAmountCurrency(sr.getCurrency().getCurrencyCode());
                        } else if (templateflag == Constants.Tony_FiberGlass_templateflag) {
                            srTable.setuPrice(authHandler.formattedAmount(Uprice, companyid));
                            srTable.setProductAmount(authHandler.formattedAmount(amount, companyid));
                            srTable.setUom(Uom);
                            srTable.setAmountCurrency(sr.getCurrency().getCurrencyCode());
                            srTable.setQty(authHandler.formattingDecimalForQuantity(quantity, companyid));
                        } else if (templateflag == Constants.lsh_templateflag) {
                            srTable.setName(prodName);
                            srTable.setProductAmount(authHandler.formattedAmount(amount, companyid));
                        } else if (templateflag != Constants.Merlion_templateflag && templateflag != Constants.BuildMate_templateflag) {
                            KwlReturnObject kmsg = accCommonTablesDAO.getOnlySerialDetails(row.getID(), false, Constants.Acc_Sales_Return_ModuleId + "", false, false);
                            List batchserialdetails = kmsg.getEntityList();
                            Iterator iter = batchserialdetails.iterator();
                            while (iter.hasNext()) {
                                Object[] objArr = (Object[]) iter.next();
                                sirial = objArr[8] != null ? (String) objArr[8] : "";
                            }
                            HashMap<String, Object> fieldrequestParamsProduct = new HashMap();
                            Map<String, Object> variableMapProduct = new HashMap<String, Object>();
                            fieldrequestParamsProduct.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                            fieldrequestParamsProduct.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Sales_Return_ModuleId, 1));
                            HashMap<String, String> replaceFieldMapProduct = new HashMap<String, String>();
                            HashMap<String, Integer> FieldMapProduct = accAccountDAOobj.getFieldParamsMap(fieldrequestParamsProduct, replaceFieldMapProduct);
                            SalesReturnDetailCustomData objProduct = (SalesReturnDetailCustomData) row.getSalesReturnDetailCustomData();
                            if (objProduct != null) {
                                AccountingManager.setCustomColumnValues(objProduct, FieldMapProduct, replaceFieldMapProduct, variableMapProduct);
                                for (Map.Entry<String, Object> varEntry : variableMapProduct.entrySet()) {
                                    String coldata = varEntry.getValue().toString();
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        if ((varEntry.getKey().split("_")[1]).equals("Condition")) {
                                            FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                            if (fieldComboData != null) {
                                                srTable.setCondition(fieldComboData.getValue());
                                            }
                                        } else if ((varEntry.getKey().split("_")[1]).equals("Serial Number")) {//CUSTOM FIELD FOR DIAMOND AVIATION
                                            sirial = coldata;
                                        }
                                    }
                                }
                            }
                            
                            srTable.setsNo(sirial);
                            srTable.setuPrice(authHandler.formattedAmount(Uprice, companyid));
                            srTable.setProductAmount(authHandler.formattedAmount(amount, companyid));
                        }

                        SalesReturnTableList.add(srTable);
                    }
                    if(totalTaxAmount==0 && sr.getTax()!=null){
                        double taxPercent = 0;
                        KwlReturnObject taxresult = accTaxObj.getTaxPercent(sessionHandlerImpl.getCompanyid(request), sr.getOrderDate(), sr.getTax().getID());
                        taxPercent = (Double) taxresult.getEntityList().get(0);
                        totalTaxAmount = (taxPercent == 0 ? 0 : authHandler.round((total * taxPercent / 100), companyid));
                    }
                    
                    double totalTermAmount = 0;
                    double totalTermTaxAmount = 0;
                    List salesReturnTermMapList = kwlCommonTablesDAOObj.getSummationOfTermAmtAndTermTaxAmt(Constants.salesreturntermsmap, sr.getID());
                    if(salesReturnTermMapList != null && !salesReturnTermMapList.isEmpty()){
                        Iterator termItr = salesReturnTermMapList.iterator();
                        while (termItr.hasNext()) {
                            Object[] termObj = (Object[]) termItr.next();
                            /* 
                            * [0] : Sum of termamount  
                            * [1] : Sum of termamountinbase 
                            * [2] : Sum of termTaxamount 
                            * [3] : Sum of termTaxamountinbase 
                            * [4] : Sum of termamountexcludingtax 
                            * [5] : Sum of termamountexcludingtaxinbase
                            */ 
                            if (sr.isGstIncluded()) {
                                if(termObj[4] != null){
                                    totalTermAmount += authHandler.round((Double) termObj[4],companyid);
                                }
                            } else {
                                if(termObj[0] != null){
                                    totalTermAmount += authHandler.round((Double) termObj[0],companyid);
                                }
                            }
                            if(termObj[2] != null){
                                totalTermTaxAmount += authHandler.round((Double) termObj[2],companyid);
                            }
                        }
                    }
                    int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
                    HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();

                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Sales_Return_ModuleId, 0, 1));

                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    SalesReturnCustomData salesReturnCustomData = (SalesReturnCustomData) sr.getSalesReturnCustomData();
                    AccountingManager.setCustomColumnValues(salesReturnCustomData, FieldMap, replaceFieldMap, variableMap);
                    for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                        String coldata = varEntry.getValue().toString();


                        if (!StringUtil.isNullOrEmpty(coldata)) {
                            if ((varEntry.getKey().split("_")[1]).equals("Salesman Code")) {
                                SalesReturnMap.put("SalesmanCode", coldata);
                            }else
                            if ((varEntry.getKey().split("_")[1]).equals("PONo")) {
                                SalesReturnMap.put("PONo", coldata);
                            }else
                            if ((varEntry.getKey().split("_")[1]).equals("Remarks")) {
                                SalesReturnMap.put("Remarks", coldata);
                            }else
                            if ((varEntry.getKey().split("_")[1]).equals("Contract No")) {//Guan Chong
                                SalesReturnMap.put("ContractNo", coldata);
                            }else
                            if ((varEntry.getKey().split("_")[1]).equals("Exchange Rate")) {//Guan Chong
                                SalesReturnMap.put("EXCHANGERATE", coldata);
                            }
                        }


                    }

                    SalesReturn.setdONomber(refno); //set as ref n0..                
                    SalesReturn.setCustomerFax(Customerfax);
                    SalesReturn.setCustomerTel(customerTel);
                    SalesReturn.setSalesPerson(salesperson);
                    SalesReturn.setPrintedby(Createdby);
                    SalesReturn.setPaymentTerms(custmerterms);
                    if (templateflag == Constants.Merlion_templateflag) {//for Mer Lion
                        SalesReturn.setAmountTotal(authHandler.formattedCommaSeparatedAmount(total, companyid));
                        SalesReturn.setAmountInWords(sr.getCurrency().getName() + " " + EnglishNumberToWordsOjb.convert(total, sr.getCurrency(),countryLanguageId) + " only.");
                    }
                    // SalesReturnList.add(SalesReturn);
                    SalesReturnMap.put("SRSubReportData", new JRBeanCollectionDataSource(SalesReturnTableList));

                    double exchangeRate = 0;
                    if (templateflag == Constants.Guan_ChongBF_templateflag || templateflag == Constants.Guan_Chong_templateflag) {
                        SalesReturnMap.put("shipTo", Customername + "<br>" + custshipAdd.replaceAll("\n", "<br>"));
                        KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                        KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
                        
                        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                        requestParams.put("customerIds", sr.getCustomer().getID());
                        if (sr.getCurrency() != null) {
                            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, total, sr.getCurrency().getCurrencyID(), sr.getOrderDate(), 0);
                            total = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                            exchangeRate = (Double) bAmt.getEntityList().get(1);
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalTaxAmount, sr.getCurrency().getCurrencyID(), sr.getOrderDate(), 0);
                            totalTaxAmount = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                        }
                        
                        SalesReturnMap.put("subtotal", authHandler.formattedCommaSeparatedAmount(total, companyid));
                        if (!StringUtil.isNullOrEmpty(CNNumber)) {
                            SalesReturnMap.put("cnnumber",  CNNumber);
                            SalesReturnMap.put("title", (type==0?"CREDIT NOTE":"CREDIT ADVICE"));
                        } else {
                            SalesReturnMap.put("cnnumber",  invno);
                            SalesReturnMap.put("title", "Sales Return ");
                        }
                        SalesReturnMap.put("gstvalue", authHandler.formattedCommaSeparatedAmount(totalTaxAmount + totalTermTaxAmount, companyid));
                        SalesReturnMap.put("totalamount",(type==0?authHandler.formattedCommaSeparatedAmount((total + totalTaxAmount + totalTermAmount + totalTermTaxAmount), companyid):authHandler.formattedCommaSeparatedAmount(total, companyid)));                                                
                        SalesReturnMap.put("gstregno",companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");                                        
                        SalesReturnMap.put("InvoiceNo",invoiceNo);
                        SalesReturnMap.put("invoiceDate", invoiceDate);
//                        SalesReturnMap.put("CurrencyCode", sr.getCurrency().getCurrencyCode());
                        SalesReturnMap.put("CurrencyCode", baseCurrency.getCurrencyCode());
                        SalesReturnMap.put("PostText", sr.getPostText()!=null?sr.getPostText():"");
                        SalesReturnMap.put("EXCHANGERATE", "1 "+baseCurrency.getCurrencyCode()+" = "+authHandler.formattedQuantity(exchangeRate, companyid)+" "+sr.getCurrency().getCurrencyCode());
                    }else if (templateflag == Constants.BuildMate_templateflag) {
                        SalesReturnMap.put("currency", sr.getCurrency().getCurrencyCode());
                        SalesReturnMap.put("gstregno", companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        SalesReturnMap.put("gstvalue", "" + authHandler.formattedCommaSeparatedAmount(totalTaxAmount + totalTermTaxAmount, companyid));
                        SalesReturnMap.put("subtotal", authHandler.formattedCommaSeparatedAmount(total, companyid));
                        SalesReturnMap.put("totalamount", sr.getCurrency().getCurrencyCode() + " " + authHandler.formattedCommaSeparatedAmount((total + totalTaxAmount + totalTermAmount + totalTermTaxAmount), companyid));
                        SalesReturnMap.put("Remark", memo);
                        if (!StringUtil.isNullOrEmpty(CNNumber)) {
                            SalesReturn.setInvoiceNo(CNNumber);
                        }
                    } else if (templateflag == Constants.Tony_FiberGlass_templateflag) {
                        SalesReturnMap.put("currency", sr.getCurrency().getCurrencyCode());
                        SalesReturnMap.put("gstregno", companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        SalesReturnMap.put("gstvalue", "" + authHandler.formattedCommaSeparatedAmount(totalTaxAmount + totalTermTaxAmount, companyid));
                        SalesReturnMap.put("subtotal", authHandler.formattedCommaSeparatedAmount(total, companyid));
                        SalesReturnMap.put("totalamount", sr.getCurrency().getCurrencyCode() + " " + authHandler.formattedCommaSeparatedAmount((total+totalTaxAmount+ totalTermAmount + totalTermTaxAmount), companyid));                       
                         SalesReturnMap.put("Remark","");
                        SalesReturnMap.put("attention", attn);
                        if (!StringUtil.isNullOrEmpty(CNNumber)) {
                            invno = CNNumber;
                            SalesReturn.setInvoiceNo(CNNumber);
                        }
                        SalesReturnMap.put("CNnumber", " " + invno);
                        SalesReturnMap.put("custmerterms", custmerterms);
                        SalesReturnMap.put("companyname", company.getCompanyName() != null ? company.getCompanyName() : "");
                        SalesReturnMap.put("billTo", Customername + "<br>" + custfulladd.replaceAll("\n", "<br>"));
                        SalesReturnMap.put("title", "Credit Note #");
                         SalesReturnMap.put("companyname", company.getCompanyName() != null ? company.getCompanyName() : "");
                        SalesReturnMap.put("COMPANY_NAME", company.getCompanyName() != null ? company.getCompanyName() : "");
                        SalesReturnMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                        if (!StringUtil.isNullOrEmpty(CNNumber)) {
                            SalesReturnMap.put("cnnumber", " " + CNNumber);
                            SalesReturnMap.put("title", "Credit Note ");
                        } else {
                            SalesReturnMap.put("cnnumber", " " + invno);
                            SalesReturnMap.put("title", "Sales Return ");
                        }
                        SalesReturnMap.put("gstregno", companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        SalesReturnMap.put("customercode", Accountcode);
                        SalesReturnMap.put("customerpono", refno);
                        SalesReturnMap.put("shipTo", Customername + "<br>" + custfulladd.replaceAll("\n", "<br>"));
                        SalesReturnMap.put("GST_PERCENT", "");
                        SalesReturnMap.put("percentGST", "GST");
                    } else if (templateflag == Constants.lsh_templateflag) {
                        SalesReturnMap.put("title", "TAX Credit Note");
                        SalesReturnMap.put("Total", sr.getCurrency().getCurrencyCode() + " " + authHandler.formattedCommaSeparatedAmount((total + totalTaxAmount+ totalTermAmount + totalTermTaxAmount), companyid));
                        SalesReturnMap.put("subTotal", authHandler.formattedCommaSeparatedAmount(total, companyid));
                        SalesReturnMap.put("gstValue", "" + authHandler.formattedCommaSeparatedAmount(totalTaxAmount+totalTermTaxAmount, companyid));
                        SalesReturnMap.put("CNnumber", " " + invno);
                        SalesReturnMap.put("shipTo", Customername + "<br>" + custshipAdd.replaceAll("\n", "<br>"));
                        SalesReturnMap.put("billTo", Customername + "<br>" + custfulladd.replaceAll("\n", "<br>"));
                        SalesReturnMap.put("companyName", company.getCompanyName() != null ? company.getCompanyName() : "");
                         SalesReturnMap.put("companyname", company.getCompanyName() != null ? company.getCompanyName() : "");
                        SalesReturnMap.put("COMPANY_NAME", company.getCompanyName() != null ? company.getCompanyName() : "");
                        SalesReturnMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                        if (!StringUtil.isNullOrEmpty(CNNumber)) {
                            SalesReturnMap.put("CNnumber", " " + CNNumber);
                            SalesReturnMap.put("title", "Credit Note ");
                           SalesReturnMap.put("CNDNno", "Credit Note No.");
                        } else {
                            SalesReturnMap.put("CNnumber", " " + invno);
                            SalesReturnMap.put("title", "Sales Return ");
                            SalesReturnMap.put("CNDNno", "Sales Return No.");
                        }
                        SalesReturnMap.put("gstregno", companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        SalesReturnMap.put("customercode", Accountcode);
                        SalesReturnMap.put("customerpono", refno);
                        SalesReturnMap.put("shipTo", Customername + "<br>" + custfulladd.replaceAll("\n", "<br>"));
                        SalesReturnMap.put("GST_PERCENT", "");
                    } else if (templateflag == Constants.Merlion_templateflag) {

                        SalesReturnMap.put("custvend", "Customer");
                        SalesReturnMap.put("notetype", "CREDIT NOTE");
                        SalesReturnMap.put("currency", sr.getCurrency().getCurrencyCode());
                        SalesReturnMap.put("attention", attn);
                    } else if(templateflag==Constants.Diamond_Aviation_templateflag){
                        SalesReturnMap.put("companyname", company.getCompanyName() != null ? company.getCompanyName() : "");
                        SalesReturnMap.put("COMPANY_NAME", company.getCompanyName() != null ? company.getCompanyName() : "");
                        SalesReturnMap.put("COMPANY_ADDRESS",AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                        if (!StringUtil.isNullOrEmpty(CNNumber)) {
                            SalesReturnMap.put("dnnumber", " " + CNNumber);
                            SalesReturnMap.put("cnnumber", " " + CNNumber); //for SR with credit note
                            SalesReturnMap.put("title", "Credit Note ");
                        } else {
                            SalesReturnMap.put("cnnumber", " " + invno); //for SR with credit note
                            SalesReturnMap.put("dnnumber", " " + invno);
                            SalesReturnMap.put("title", "Sales Return ");
                        }
                        SalesReturnMap.put("gstregno", companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        SalesReturnMap.put("isCustomer", true);
                        SalesReturnMap.put("vendorcode", Accountcode);
                        SalesReturnMap.put("vendorinvno", refno);
                        SalesReturnMap.put("customercode", Accountcode);    //for SR with credit note
                        SalesReturnMap.put("customerpono", refno);          //for SR with credit note
                        SalesReturnMap.put("shipTo",  Customername+ "<br>" + custfulladd.replaceAll("\n", "<br>"));
//                        purchaseReturnMap.put("gstvalue", "0.00");
                        SalesReturnMap.put("gstvalue",authHandler.formattedCommaSeparatedAmount(totalTaxAmount+totalTermTaxAmount, companyid));
                        SalesReturnMap.put("GST_PERCENT", "");
                        SalesReturnMap.put("subtotal", authHandler.formattedCommaSeparatedAmount(total, companyid));
                        SalesReturnMap.put("totalamount", sr.getCurrency().getCurrencyCode() + " " + authHandler.formattedCommaSeparatedAmount((total+totalTaxAmount+totalTermAmount+totalTermTaxAmount), companyid));
                        SalesReturnMap.put("SRSubReportData", new JRBeanCollectionDataSource(SalesReturnTableList));
                    }else{   //Default Template                        
                        SalesReturnMap.put("companyname", company.getCompanyName() != null ? company.getCompanyName() : "");
                        SalesReturnMap.put("COMPANY_NAME", company.getCompanyName() != null ? company.getCompanyName() : "");
                        SalesReturnMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
                        if (!StringUtil.isNullOrEmpty(CNNumber)) {
                            SalesReturnMap.put("cnnumber", " " + CNNumber);
                            SalesReturnMap.put("title", "Credit Note ");
                        } else {
                            SalesReturnMap.put("cnnumber", " " + invno);
                            SalesReturnMap.put("title", "Sales Return ");
                        }
                        SalesReturnMap.put("gstregno", companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                        SalesReturnMap.put("customercode", Accountcode);
                        SalesReturnMap.put("customerpono", refno);
                        SalesReturnMap.put("shipTo", Customername + "<br>" + custfulladd.replaceAll("\n", "<br>"));
//                        Sales ReturnMap.put("gstvalue", "0.00");
                        SalesReturnMap.put("gstvalue",authHandler.formattedCommaSeparatedAmount(totalTaxAmount+totalTermTaxAmount, companyid));
                        SalesReturnMap.put("GST_PERCENT", "");
                        SalesReturnMap.put("subtotal", authHandler.formattedCommaSeparatedAmount(total, companyid));
                        SalesReturnMap.put("totalamount", sr.getCurrency().getCurrencyCode() + " " + authHandler.formattedCommaSeparatedAmount((total+totalTaxAmount+totalTermAmount+totalTermTaxAmount), companyid));

                    }
                    SalesReturnList.add(SalesReturn);
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    SalesReturnMap.put("imagePath", fileName1);

                    SalesReturnMap.put("format", "pdf");

                    response.setHeader("Content-Disposition", "attachment;filename=" + "SalesReturn_v1.pdf");
                    try {
                        InputStream inputStream = null;
                        if( templateflag == Constants.Guan_ChongBF_templateflag || templateflag == Constants.Guan_Chong_templateflag){
                             if(type == 0)
                            {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GuanChangCREDITDEBITNote.jrxml");
                            }else {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GuanChangCREDITDEBITADVICE.jrxml");                           
                            }
                        }else if (templateflag == Constants.Tony_FiberGlass_templateflag) {
//                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TonyFiberglassCreditDebitNote.jrxml");//refer ticket ERP-10859
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/TonyFiberglassSalesReturn.jrxml");
                        } else if (templateflag == Constants.lsh_templateflag) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LSHTaxCreditNoteJasper.jrxml");
                        } else if (templateflag == Constants.Merlion_templateflag) {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MerlineCreditDebitNote.jrxml");
                        } else if (templateflag == Constants.Diamond_Aviation_templateflag) {
                            if (sr.isIsNoteAlso()) {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationCreditNote.jrxml");
                            } else {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DiamondAviationPurchaseReturn.jrxml");
                            }
                        } else if (templateflag == Constants.BuildMate_templateflag) {
                            if (!StringUtil.isNullOrEmpty(billids)) {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BuildmateCreditNoteWithSR.jrxml");
                            } else {
                                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/BMSalesReturn.jrxml");
                            }
                        } else {
                            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/DefaultcreditNoteWithSalesReturn.jrxml");
                        }

                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);

                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(SalesReturnList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, SalesReturnMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                } catch (ServiceException ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (!StringUtil.isNullOrEmpty(billids)) {
                    break;
                }
            }
        }
        return list;
    }

    public List<Object> exportF1SalesReturnReport(HttpServletRequest request, HttpServletResponse response, String billids, String CNNumber) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        HashMap<String, Object> invRequestParams = new HashMap<String, Object>();

        List<TaxInvoiceSubReport> invoiceSubReportsList = new ArrayList<TaxInvoiceSubReport>();
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
        order_by.add("srno");
        order_type.add("asc");
        invRequestParams.put("order_by", order_by);
        invRequestParams.put("order_type", order_type);
        KwlReturnObject idresult = null;
        String dONumber = "";
        String qtNumber = "";

        String customerName = "";
        String customercode = "";
        String customerAdd = "";
        String customerEmail = "";
        String customerfax = "";
        String customerTel = "";
        String terms = "";
        String billTo = "";
        String billAddr = "";
        String shipTo = "";
        String memo = "";
        String salesperson = null;
        String contactperson = "";
        String billtoAddress = "";
        String Createdby = "";
        String custmerterms = "";

        Iterator itr = null;
        String linkTo = "-";
        Discount totalDiscount = null;
        double totaltax = 0, discountTotalQuotation = 0;
        double totalAmount = 0;
        double taxPercent = 0;
        String mainTaxName = "";
        int mode = request.getParameter("mode") != null ? Integer.parseInt(request.getParameter("mode")) : 0;
        Map<String, Object> invoiceMap = new HashMap<String, Object>();
        String view = "TaxInvoice";

        JasperPrint jasperPrint = null;
        JasperReport jasperReport = null;
        JasperReport jasperReportSubReport = null;

        TaxInvoice taxInvoice = new TaxInvoice();
        TaxInvoice taxInvoiceDuplicate = new TaxInvoice();
        TaxInvoice taxInvoiceTriplicate = new TaxInvoice();
        ArrayList<TaxInvoice> taxInvoiceList = new ArrayList<TaxInvoice>();
        int moduleid = request.getParameter(Constants.moduleid) != null ? Integer.parseInt(request.getParameter(Constants.moduleid)) : 0;
        try {
            HashMap<String, Object> requestParamsCustom = AccountingManager.getGlobalParams(request);
            HashMap<String, Object> requestParamsCustomInLine = AccountingManager.getGlobalParams(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = (DateFormat) requestParamsCustom.get("df");
            HashMap<String, Object> fieldrequestParams = new HashMap();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Object> fieldInLinerequestParams = new HashMap();
            HashMap<String, String> customInLineFieldMap = new HashMap<String, String>();
            HashMap<String, String> customInLineDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 1));
            fieldInLinerequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
            fieldInLinerequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, String> replaceFieldInLineMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
            HashMap<String, Integer> FieldInLineMap = accAccountDAOobj.getFieldParamsCustomMap(fieldInLinerequestParams, replaceFieldInLineMap, customInLineFieldMap, customInLineDateFieldMap);
            JournalEntry entry = null;
            String gstNo = "";
            boolean addShipTo = true;
            Company com = null;
            Account cEntry = null;
            String invno = "";
            String invId = "";
            Date entryDate = null;
            Date dueDate = null;
            Date shipDate = null;
            String shipvia = "";
            String fob = "";
            String poRefno = "";
            String uem = "";
            double total = 0;
            double rowTaxAmountTotal = 0;
            double discountterm = 0;
            String currencyid = "";
            String currsymbol;
            DecimalFormat decimalFormat = new DecimalFormat("0.00");
            DecimalFormat quantityFormat = new DecimalFormat("0.0000");
            DateFormat dateFormat = authHandler.getUserDateFormatterWithoutTimeZone(request);
            KWLCurrency currency = null;


            SalesReturn inv = null;
            inv = (SalesReturn) kwlCommonTablesDAOObj.getClassObject(SalesReturn.class.getName(), billids);
            invId = inv.getID();
            String approverName = "";

            currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
            currency = inv.getCurrency();
            addShipTo = true;
            com = inv.getCompany();

            dONumber = inv.getSalesReturnNumber();
            entryDate = inv.getOrderDate();

            shipDate = inv.getShipdate();
            shipvia = inv.getShipvia();
            fob = inv.getFob();

            filter_names.add("salesReturn.ID");
            filter_params.add(inv.getID());
            invRequestParams.put("filter_names", filter_names);
            invRequestParams.put("filter_params", filter_params);
            idresult = accInvoiceDAOobj.getSalesReturnDetails(invRequestParams);
            customerName = inv.getCustomer() == null ? "" : inv.getCustomer().getName();
            custmerterms = inv.getCustomer().getCreditTerm() != null ? (Integer.toString(inv.getCustomer().getCreditTerm().getTermdays()) + " Days") : "";

            customerAdd = "";
            //params to send to get billing address
            HashMap<String, Object> addressParams = new HashMap<String, Object>();
            addressParams.put("companyid", companyid);
            addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
            addressParams.put("isBillingAddress", true);    //true to get billing address
            addressParams.put("customerid", inv.getCustomer().getID());
            CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
            if (inv.getCustomer() != null) {
                if (customerAddressDetails != null) {

                    String addr = StringUtil.isNullOrEmpty(customerAddressDetails.getAddress()) ? "" : customerAddressDetails.getAddress();
                    String city = StringUtil.isNullOrEmpty(customerAddressDetails.getCity()) ? "" : ", " + customerAddressDetails.getCity();
                    String state = StringUtil.isNullOrEmpty(customerAddressDetails.getState()) ? "" : ", " + customerAddressDetails.getState();
                    String country = StringUtil.isNullOrEmpty(customerAddressDetails.getCountry()) ? "" : ", " + customerAddressDetails.getCountry();
                    String postalcode = StringUtil.isNullOrEmpty(customerAddressDetails.getPostalCode()) ? "" : "\nPostal Code : " + customerAddressDetails.getPostalCode();
                    customerAdd = addr + city + state + country + postalcode;
                } else {
                    String addr = StringUtil.isNullOrEmpty(inv.getCustomer().getBillingAddress()) ? "" : inv.getCustomer().getBillingAddress();
                    customerAdd = addr;
                }
            }

            customerfax = (customerAddressDetails == null) ? (StringUtil.isNullOrEmpty(inv.getCustomer().getFax()) ? "" : inv.getCustomer().getFax()) : (StringUtil.isNullOrEmpty(customerAddressDetails.getFax()) ? "" : customerAddressDetails.getFax());
            customerTel = (customerAddressDetails == null) ? (StringUtil.isNullOrEmpty(inv.getCustomer().getContactNumber()) ? "" : inv.getCustomer().getContactNumber()) : (StringUtil.isNullOrEmpty(customerAddressDetails.getPhone()) ? "" : customerAddressDetails.getPhone());

            customerEmail = (customerAddressDetails == null) ? (StringUtil.isNullOrEmpty(inv.getCustomer().getEmail()) ? "" : inv.getCustomer().getEmail()) : (StringUtil.isNullOrEmpty(customerAddressDetails.getEmailID()) ? "" : customerAddressDetails.getEmailID());
            contactperson = (customerAddressDetails == null) ? "" : (StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : customerAddressDetails.getContactPerson());

            uem = inv.getCustomer() != null ? (inv.getCustomer().getAltContactNumber() != null ? inv.getCustomer().getAltContactNumber() : "") : "";
            gstNo = inv.getCustomer() != null ? inv.getCustomer().getOther() : "";
            billTo = "Bill To";


            if (inv.getCreatedby() != null) {
                Createdby = StringUtil.getFullName(inv.getCreatedby());
            }




            itr = idresult.getEntityList().iterator();
            memo = inv.getMemo();

            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            KwlReturnObject bAmt = null;
            //  entry = inv.getJournalEntry();
            int i = 0;
            while (itr.hasNext()) {
                i++;
                TaxInvoiceSubReport srTable = new TaxInvoiceSubReport();
                String prodId = "";
                String prodName = "";
                String prodDesc = "";
                double Uprice = 0;
                double amount = 0;

                double quantity = 0;
                String Uom = "";
                SalesReturnDetail row = (SalesReturnDetail) itr.next();
                prodId = row.getProduct().getID() != null ? row.getProduct().getID() : "";
                prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                quantity = row.getReturnQuantity();
                if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                    prodDesc = row.getDescription();
                }
                if ((row.getDodetails() != null) && (!(row.getDodetails().equals("undefined")))) {
                    //  invno = row.getDodetails().getDeliveryOrder().getDeliveryOrderNumber();
                    if (row.getDodetails().getCidetails() != null) {
                        salesperson = row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson().getValue()) ? row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson().getValue() : "" : "";
                    }
                } else if (row.getCidetails() != null) {
                    invno = row.getCidetails().getInvoice().getInvoiceNumber();
                    salesperson = row.getCidetails().getInvoice().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getCidetails().getInvoice().getMasterSalesPerson().getValue()) ? row.getCidetails().getInvoice().getMasterSalesPerson().getValue() : "" : "";
                    if (row.getCidetails().getQuotationDetail() != null) {
                        qtNumber = row.getCidetails().getQuotationDetail().getQuotation().getQuotationNumber();
                    }
                }
                Uprice = row.getRate();
                amount = Uprice * quantity;
                total += amount;
                Uom = row.getUom() == null ? "" : row.getUom().getNameEmptyforNA();
                srTable.setCode(prodId);
                srTable.setProductDescription(prodDesc);
                srTable.setQty(authHandler.formattedQuantity(quantity, companyid));
                srTable.setsNo(i + "");

                srTable.setuPrice(authHandler.formattedAmount(Uprice, companyid));
                srTable.setProductAmount(authHandler.formattedAmount(amount, companyid));
                srTable.setUom(Uom);
                srTable.setAmountCurrency(inv.getCurrency().getCurrencyCode());


                invoiceSubReportsList.add(srTable);
            }


            totalAmount = authHandler.round(total, companyid);

            String source = "";
            Map<String, Object> variableMap = new HashMap<String, Object>();
            SalesReturnCustomData salesReturnCustomData = (SalesReturnCustomData) inv.getSalesReturnCustomData();
            AccountingManager.setCustomColumnValues(salesReturnCustomData, FieldMap, replaceFieldMap, variableMap);
            for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                String coldata = varEntry.getValue().toString();

                if (!StringUtil.isNullOrEmpty(coldata)) {
                    if (!StringUtil.isNullOrEmpty(coldata)) {
                        if ((varEntry.getKey().split("_")[1]).equals("Source/Type")) {
                            taxInvoice.setCustomfield(coldata);
                        } else if ((varEntry.getKey().split("_")[1]).equals("Service Order No")) {
                            invoiceMap.put("So", coldata);
                        } else if ((varEntry.getKey().split("_")[1]).equals("Maintenance Order No")) {
                            invoiceMap.put("Mo", coldata);
                        } else if ((varEntry.getKey().split("_")[1]).equals("Quotation Ref No")) {
                            qtNumber = coldata;
                        } else if ((varEntry.getKey().split("_")[1]).equals("Sales Person")) {
                            salesperson = coldata;
                        } else if ((varEntry.getKey().split("_")[1]).equals("Purchase Order")) {
                            poRefno = coldata;
                        } else if ((varEntry.getKey().split("_")[1]).equals("Invoice Number")) {
                            invno = coldata;
                        }
                    }
                }
            }


            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);


            taxInvoice.setCustcode(customercode != null ? customercode : "");
            taxInvoice.setCustname(customerName != null ? customerName : "");
            taxInvoice.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
            taxInvoice.setAddress(company.getAddress());
            taxInvoice.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
            taxInvoice.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
            taxInvoice.setInvoiceNo(invno);
            taxInvoice.setpONumber(poRefno);
            taxInvoice.setdONomber(dONumber);//d/o number
            taxInvoice.setDate(dateFormat.format(entryDate));
            taxInvoice.setPaymentTerms(custmerterms);
            taxInvoice.setSalesPerson(salesperson);
            taxInvoice.setContactPerson(StringUtil.isNullOrEmpty(contactperson) ? "" : contactperson);
            taxInvoice.setAddress(customerAdd);//passed as Address of customer 
            currsymbol = (currency.getSymbol() != null) ? (currency.getSymbol() + " ") : "";
            taxInvoice.setSubtotal(decimalFormat.format(totalAmount));
            taxInvoice.setAmount(decimalFormat.format(total + discountterm));
            taxInvoice.setGstValue("0.00");
            // taxInvoice.setTermsList(termsList);
            taxInvoice.setCustomerFax(customerfax);
            taxInvoice.setCustomerEmail(customerEmail);
            taxInvoice.setPrintedby(Createdby);
            taxInvoice.setCustomerTel(customerTel);
            taxInvoice.setShipDate(((shipDate != null) ? dateFormat.format(shipDate) : " "));
            // taxInvoice.setInvoiceSublist(invoiceSubReportsList);
            taxInvoice.setqtNumber(qtNumber);
            taxInvoice.setaccNumber(customercode);
            //  taxInvoice.setGstpercent( taxPercent==0?"":"(" + Double.toString(taxPercent) + "%)");





            // taxInvoice.setDiscount(decimalFormat.format(totalDiscount != null ? totalDiscount.getDiscountValue() : 0));
            taxInvoice.setAmountTotal(authHandler.formattedCommaSeparatedAmount(totalAmount, companyid));
            taxInvoice.setUem(uem);
            taxInvoice.setGrandTotal(authHandler.formattedCommaSeparatedAmount(totalAmount, companyid));
            taxInvoice.setCustomfield(source);
//                    if (currency != null) {
//                        String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalAmount)), currency);
//                        taxInvoice.setAmountInWords(currency.getName().toString() + " " + netinword + " Only.");
//                    }

            //     taxInvoice.setDeliveredToAddress(shipTo);
            taxInvoiceList.add(taxInvoice);

            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            invoiceMap.put("imagePath1", fileName1);
            String fileName2 = StorageHandler.GetDocStorePath() + companyid + "_footer" + FileUploadHandler.getCompanyImageExt();
            invoiceMap.put("imagePath2", fileName2);
            invoiceMap.put("notetype", "CREDIT NOTE");
            invoiceMap.put("currency", currency.getCurrencyCode());
            invoiceMap.put("CompanyName", company.getCompanyName() != null ? "\"" + company.getCompanyName() + "\"" : "");
            invoiceMap.put("invoicesublist", new JRBeanCollectionDataSource(invoiceSubReportsList));
            response.setHeader("Content-Disposition", "attachment;filename=" + "SalesReturn.pdf");

            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/F1RecreationCreditNote.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(taxInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
            list.add(jasperPrint);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;

    }

    public List<Object> exportMalaysianGstCreditDebitNote(HttpServletRequest request, String billid, String companyid, int mode) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();

        List<MalaysianTaxInvoice> taxInvoiceList = new ArrayList<MalaysianTaxInvoice>();
        List<MalaysianTaxInvoiceTable> taxInvoiceTableList = new ArrayList<MalaysianTaxInvoiceTable>();
        List<MalaysianGSTSummaryTable> summaryTableList = new ArrayList<MalaysianGSTSummaryTable>();
        List<Terms> termsList = new ArrayList<Terms>();
        MalaysianTaxInvoice taxInvoice = new MalaysianTaxInvoice();
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
        KwlReturnObject idresult = null;
        String customerName = "";
        String customerCode = "";
        String customerAdd = "";
        String attn = "";
        String terms = "";
        String billAddr = "";
        String shipTo = "";
        String memo = "";
        String billtoAddress = "";
        Iterator itr = null;
        String linkTo = "";
        double totaltax = 0, discountTotalQuotation = 0, totaltaxpercent = 0;
        double totalAmount = 0;
        double taxPercent = 0;
        String mainTaxName = "";
        HashSet<String> linkIds = new HashSet<String>();

        JasperPrint jasperPrint = null;
        JasperReport jasperReport = null;
        JasperReport jasperReportSubReport = null;

        Map<String, Object> invoiceMap = new HashMap<String, Object>();
        try {
            DateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");
            df1.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getTimeZoneDifference(request)));
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");

            String gstNo = "";
            boolean addShipTo = true;
            String invno = "";
            Date entryDate = null;
            Date invDate = null;
            Date shipDate = null;
            Date currentDate = new Date();
            String shipvia = "";
            String fob = "";
            String poRefno = "";
            String termName = "";
            String termAmount = "0.00";
            double subTotal = 0;
            double rowTaxAmountTotal = 0;
            double rowDiscountAmountTotal = 0;
            String curr = "";
            String postText = "";
            String approverName = "";
            KWLCurrency currency = null;
            String currencyid = "";
            //        String companyid = sessionHandlerImpl.getCompanyid(request);
            if (mode == StaticValues.AUTONUM_DEBITNOTE) {
                KwlReturnObject creditNoteResult = kwlCommonTablesDAOObj.getObject(DebitNote.class.getName(), billid);
                DebitNote dn = (DebitNote) creditNoteResult.getEntityList().get(0);
                KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(PurchaseReturn.class.getName(), dn.getPurchaseReturn().getID());
                PurchaseReturn inv = (PurchaseReturn) cap.getEntityList().get(0);
                if (inv.getCreatedby() != null) {
                    approverName = StringUtil.getFullName(inv.getCreatedby());
                }
                currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                currency = inv.getCurrency();
                curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                addShipTo = true;
                invno = inv.getPurchaseReturnNumber();
                entryDate = inv.getOrderDate();
                shipDate = inv.getShipdate();
                shipvia = inv.getShipvia();
                fob = inv.getFob();
                HashMap<String, Object> poRequestParams = new HashMap<String, Object>();
                filter_names.add("purchaseReturn.ID");
                filter_params.add(inv.getID());
                order_by.add("srno");
                order_type.add("asc");
                poRequestParams.put("filter_names", filter_names);
                poRequestParams.put("filter_params", filter_params);
                poRequestParams.put("order_by", order_by);
                poRequestParams.put("order_type", order_type);
                idresult = accGoodsReceiptobj.getPurchaseReturnDetails(poRequestParams);
                customerName = inv.getVendor() == null ? inv.getVendor().getAccount().getName() : inv.getVendor().getName();
                customerCode = inv.getVendor() == null ? inv.getVendor().getAccount().getAcccode() : inv.getVendor().getAcccode();
                
                //params to send to get billing address
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put("companyid", companyid);
                addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                addressParams.put("isBillingAddress", true);    //true to get billing address
                addressParams.put("vendorid", inv.getVendor().getID());
                billAddr = accountingHandlerDAOobj.getVendorAddress(addressParams);
                VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                attn = StringUtil.isNullOrEmpty(vendorAddressDetails.getContactPerson()) ? "" : vendorAddressDetails.getContactPerson();
                addressParams.put("isBillingAddress", false);    //false to get shipping address
                shipTo = accountingHandlerDAOobj.getVendorAddress(addressParams);
                
                postText = inv.getPostText() == null ? "" : inv.getPostText();
                terms = inv.getVendor() == null ? "" : inv.getVendor().getDebitTerm() == null ? "" : inv.getVendor().getDebitTerm().getTermdays() + " DAYS";
                itr = idresult.getEntityList().iterator();
                memo = inv.getMemo() != null ? inv.getMemo() : "";
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                KwlReturnObject bAmt = null;
                PurchaseReturnDetail row = null;
                int i = 0;
                while (itr.hasNext()) {
                    MalaysianTaxInvoiceTable invoiceTable = new MalaysianTaxInvoiceTable();
                    i++;
                    String prodName = "";
                    String total1 = "";
                    String prodDesc = "";
                    String prodCode = "";
                    String uom = "";
                    String taxCode = "";
                    double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                    double rate = 0;
                    double discount = 0;
                    double rowtaxamount = 0;
                    double amount1 = 0;
                    double amount_with_discount = 0;
                    double amount_with_tax = 0;
                    double discountPrice = 0;
                    row = (PurchaseReturnDetail) itr.next();
                    if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                        prodDesc = row.getDescription();
                    } else {
                        if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                            prodDesc = row.getProduct().getDescription();
                        }
                    }
                    prodCode = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                    prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                    uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                    String tempLinkTo = "";

                    if ((row.getGrdetails() != null) && (!(row.getGrdetails().equals("undefined")))) {
                        tempLinkTo = row.getGrdetails().getGrOrder().getGoodsReceiptOrderNumber();
                        linkIds.add(tempLinkTo);
                    } else if (row.getVidetails() != null) {
                        tempLinkTo = row.getVidetails().getGoodsReceipt().getGoodsReceiptNumber();
//                        invDate = row.getVidetails().getGoodsReceipt().getJournalEntry().getEntryDate();
                        invDate = row.getVidetails().getGoodsReceipt().getCreationDate();
                        linkIds.add(tempLinkTo);
                    }

//                            discount=row.getDiscount();
                    rowtaxamount = row.getRowTaxAmount();
                    rate = authHandler.round(row.getRate(), companyid);
                    quantity = authHandler.roundQuantity(row.getReturnQuantity(), companyid);
                    double quotationPrice = authHandler.round(quantity * rate, companyid);
//                            if (row.getDiscountispercent() == 1) {
//                                discount =authHandler.round((quotationPrice * discount / 100), Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
//                                discountPrice = (quotationPrice) - discount ;
//                            } else {
//                                discountPrice = quotationPrice - discount;
//                            }

//                            totalAmount += discountPrice + authHandler.round(rowtaxamount, Constants.AMOUNT_DIGIT_AFTER_DECIMAL);//amount += discountPrice + (discountPrice * rowTaxPercent/100);
                    totalAmount += quotationPrice + authHandler.round(rowtaxamount, companyid);//amount += discountPrice + (discountPrice * rowTaxPercent/100);

                    amount1 = rate * quantity;
                    amount_with_discount = amount1 - discount;
                    amount_with_tax = amount_with_discount + rowtaxamount;

                    invoiceTable.setSno(i + ".");
                    invoiceTable.setName(prodName);
                    invoiceTable.setDescription(prodDesc.replaceAll("\n", "<br>"));
                    invoiceTable.setQty(authHandler.formattedQuantity(quantity, companyid) + " " + uom);
                    invoiceTable.setRate(authHandler.formattedCommaSeparatedAmount(rate, companyid));
                    invoiceTable.setDisc(authHandler.formattedCommaSeparatedAmount(discount, companyid));
                    invoiceTable.setTotalwithouttax(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                    invoiceTable.setTaxamount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                    invoiceTable.setTotalwithtax(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                    if (row.getTax() != null) {
                        taxCode = row.getTax().getTaxCode();
                        MalaysianGSTSummaryTable gstSummaryTable = new MalaysianGSTSummaryTable();
                        gstSummaryTable.setSummary(row.getTax().getName());
                        gstSummaryTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                        gstSummaryTable.setTax(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                        summaryTableList.add(gstSummaryTable);
                    }
                    invoiceTable.setTaxcode(taxCode);
                    invoiceTable.setReason(row.getReason()==null?"":row.getReason().getValue());                    
                    invoiceTable.setCurrency(currency.getCurrencyCode());
                    taxInvoiceTableList.add(invoiceTable);
                    subTotal += amount1;
                    rowDiscountAmountTotal += discount;
                    rowTaxAmountTotal += rowtaxamount;
                }

//                        if (inv.getTax() != null) {
//                            requestParams.put("transactiondate", entryDate);
//                            requestParams.put("taxid", inv.getTax() != null ? inv.getTax().getID() : "");
//                            requestParams.put("companyid", companyid);
//                            KwlReturnObject result = accTaxObj.getTax(requestParams);
//                            List taxList = result.getEntityList();
//                            if (!taxList.isEmpty()) {
//                                Object[] taxObj = (Object[]) taxList.get(0);
//                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
//                            }
//                        }
//                        totaltax = (taxPercent == 0 ? 0 : totalAmount * taxPercent / 100);
//                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
//                        
//                        double termTotalAmount=0;
//                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
//                        Company company = (Company) cmpresult.getEntityList().get(0);
//                        if (!StringUtil.isNullOrEmpty(inv.getID())) {
//                            HashMap<String, Object> requestParam = new HashMap();
//                            requestParam.put("purchaseOrder", inv.getID());
//                            KwlReturnObject curresult = null;
//                            curresult = accPurchaseOrderobj.getPurchaseOrderTermMap(requestParam);
//                            List<PurchaseOrderTermMap> termMap = curresult.getEntityList();
//                            for (PurchaseOrderTermMap invoiceTerMap : termMap) {
//                                Terms termsObj = new Terms();
//                                InvoiceTermsSales mt = invoiceTerMap.getTerm();
//                                double termAmnt = invoiceTerMap.getTermamount();
//                                termName = (termAmnt > 0 ? "(+) " : "(-) ") + mt.getTerm();
//                                termAmount = termAmnt > 0 ? authHandler.formattedCommaSeparatedAmount(termAmnt) : "(" + authHandler.formattedCommaSeparatedAmount(termAmnt * -1) + ")";
//                                termsObj.setTermName(termName);
//                                termsObj.setTermValue(termAmount);
//                                termsList.add(termsObj);
//                                termTotalAmount+=termAmnt;
//                            }
//                        }
//                        totalAmount+=termTotalAmount;
                taxInvoice.setLabelname("Debit Note");
                taxInvoice.setPoreflabel("Ship Date");
                taxInvoice.setPoref(shipDate != null ? df1.format(shipDate) : "");
                invoiceMap.put("title", "Debit Note");
            } else if (mode == StaticValues.AUTONUM_CREDITNOTE) {
                KwlReturnObject creditNoteResult = kwlCommonTablesDAOObj.getObject(CreditNote.class.getName(), billid);
                CreditNote cn = (CreditNote) creditNoteResult.getEntityList().get(0);
                KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(SalesReturn.class.getName(), cn.getSalesReturn().getID());
                SalesReturn inv = (SalesReturn) cap.getEntityList().get(0);
                if (inv.getCreatedby() != null) {
                    approverName = StringUtil.getFullName(inv.getCreatedby());
                }
                currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                currency = inv.getCurrency();
                curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                addShipTo = true;
                invno = inv.getSalesReturnNumber();
                entryDate = inv.getOrderDate();
                shipDate = inv.getShipdate();
                shipvia = inv.getShipvia();
                fob = inv.getFob();
                HashMap<String, Object> poRequestParams = new HashMap<String, Object>();
                filter_names.add("salesReturn.ID");
                filter_params.add(inv.getID());
                order_by.add("srno");
                order_type.add("asc");
                poRequestParams.put("filter_names", filter_names);
                poRequestParams.put("filter_params", filter_params);
                poRequestParams.put("order_by", order_by);
                poRequestParams.put("order_type", order_type);
                idresult = accInvoiceDAOobj.getSalesReturnDetails(poRequestParams);
                customerName = inv.getCustomer() == null ? inv.getCustomer().getAccount().getName() : inv.getCustomer().getName();
                customerCode = inv.getCustomer() == null ? inv.getCustomer().getAccount().getAcccode() : inv.getCustomer().getAcccode();
                
                //params to send to get billing address
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put("companyid", companyid);
                addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                addressParams.put("isBillingAddress", true);    //true to get billing address
                addressParams.put("customerid", inv.getCustomer().getID());
                billAddr = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                attn = customerAddressDetails != null ? customerAddressDetails.getContactPerson() != null ? customerAddressDetails.getContactPerson() : "" : "";
                
                addressParams.put("isBillingAddress", false);    //false to get shipping address
                shipTo = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                postText = inv.getPostText() == null ? "" : inv.getPostText();
                terms = inv.getCustomer() == null ? "" : inv.getCustomer().getCreditTerm() == null ? "" : inv.getCustomer().getCreditTerm().getTermdays() + " DAYS";
                itr = idresult.getEntityList().iterator();
                memo = inv.getMemo() != null ? inv.getMemo() : "";
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                KwlReturnObject bAmt = null;
                SalesReturnDetail row = null;

                int i = 0;
                while (itr.hasNext()) {
                    MalaysianTaxInvoiceTable invoiceTable = new MalaysianTaxInvoiceTable();
                    i++;
                    String prodName = "";
                    String total1 = "";
                    String prodDesc = "";
                    String prodCode = "";
                    String uom = "";
                    String taxCode = "";
                    double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                    double rate = 0;
                    double discount = 0;
                    double rowtaxamount = 0;
                    double amount1 = 0;
                    double amount_with_discount = 0;
                    double amount_with_tax = 0;
                    double discountPrice = 0;
                    row = (SalesReturnDetail) itr.next();
                    if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                        prodDesc = row.getDescription();
                    } else {
                        if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                            prodDesc = row.getProduct().getDescription();
                        }
                    }
                    prodCode = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                    prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                    uom = row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA();
                    String tempLinkTo = "";

                    if ((row.getDodetails() != null) && (!(row.getDodetails().equals("undefined")))) {
                        tempLinkTo = row.getDodetails().getDeliveryOrder().getDeliveryOrderNumber();
                        linkIds.add(tempLinkTo);
                    } else if (row.getCidetails() != null) {
                        tempLinkTo = row.getCidetails().getInvoice().getInvoiceNumber();
//                        invDate = row.getCidetails().getInvoice().getJournalEntry().getEntryDate();
                        invDate = row.getCidetails().getInvoice().getCreationDate();
                        linkIds.add(tempLinkTo);
                    }
                   
//                            discount=row.getDiscount();
                    rowtaxamount = row.getRowTaxAmount();
                    rate = authHandler.round(row.getRate(), companyid);
                    quantity = authHandler.roundQuantity(row.getReturnQuantity(), companyid);
                    double quotationPrice = authHandler.round(quantity * rate, companyid);
//                            if (row.getDiscountispercent() == 1) {
//                                discount =authHandler.round((quotationPrice * discount / 100), Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
//                                discountPrice = (quotationPrice) - discount ;
//                            } else {
//                                discountPrice = quotationPrice - discount;
//                            }

//                            totalAmount += discountPrice + authHandler.round(rowtaxamount, Constants.AMOUNT_DIGIT_AFTER_DECIMAL);//amount += discountPrice + (discountPrice * rowTaxPercent/100);
                    totalAmount += quotationPrice + authHandler.round(rowtaxamount, companyid);//amount += discountPrice + (discountPrice * rowTaxPercent/100);

                    amount1 = rate * quantity;
                    amount_with_discount = amount1 - discount;
                    amount_with_tax = amount_with_discount + rowtaxamount;

                    invoiceTable.setSno(i + ".");
                    invoiceTable.setName(prodName);
                    invoiceTable.setDescription(prodDesc.replaceAll("\n", "<br>"));
                    invoiceTable.setQty(authHandler.formattedQuantity(quantity, companyid) + " " + uom);
                    invoiceTable.setRate(authHandler.formattedCommaSeparatedAmount(rate, companyid));
                    invoiceTable.setDisc(authHandler.formattedCommaSeparatedAmount(discount, companyid));
                    invoiceTable.setTotalwithouttax(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                    invoiceTable.setTaxamount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                    invoiceTable.setTotalwithtax(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                    if (row.getTax() != null) {
                        taxCode = row.getTax().getTaxCode();
                        MalaysianGSTSummaryTable gstSummaryTable = new MalaysianGSTSummaryTable();
                        gstSummaryTable.setSummary(row.getTax().getName());
                        gstSummaryTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                        gstSummaryTable.setTax(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                        summaryTableList.add(gstSummaryTable);
                    }
                    invoiceTable.setTaxcode(taxCode);
                    invoiceTable.setReason( row.getReason()==null?"":row.getReason().getValue());
                    invoiceTable.setCurrency(currency.getCurrencyCode());
                    taxInvoiceTableList.add(invoiceTable);
                    subTotal += amount1;
                    rowDiscountAmountTotal += discount;
                    rowTaxAmountTotal += rowtaxamount;
                }

//                        if (inv.getTax() != null) {
//                            requestParams.put("transactiondate", entryDate);
//                            requestParams.put("taxid", inv.getTax() != null ? inv.getTax().getID() : "");
//                            requestParams.put("companyid", companyid);
//                            KwlReturnObject result = accTaxObj.getTax(requestParams);
//                            List taxList = result.getEntityList();
//                            if (!taxList.isEmpty()) {
//                                Object[] taxObj = (Object[]) taxList.get(0);
//                                taxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
//                            }
//                        }
//                        totaltax = (taxPercent == 0 ? 0 : totalAmount * taxPercent / 100);
//                        mainTaxName = inv.getTax() != null ? inv.getTax().getName() : "";
//                        
//                        double termTotalAmount=0;
//                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
//                        Company company = (Company) cmpresult.getEntityList().get(0);
//                        if (!StringUtil.isNullOrEmpty(inv.getID())) {
//                            HashMap<String, Object> requestParam = new HashMap();
//                            requestParam.put("purchaseOrder", inv.getID());
//                            KwlReturnObject curresult = null;
//                            curresult = accPurchaseOrderobj.getPurchaseOrderTermMap(requestParam);
//                            List<PurchaseOrderTermMap> termMap = curresult.getEntityList();
//                            for (PurchaseOrderTermMap invoiceTerMap : termMap) {
//                                Terms termsObj = new Terms();
//                                InvoiceTermsSales mt = invoiceTerMap.getTerm();
//                                double termAmnt = invoiceTerMap.getTermamount();
//                                termName = (termAmnt > 0 ? "(+) " : "(-) ") + mt.getTerm();
//                                termAmount = termAmnt > 0 ? authHandler.formattedCommaSeparatedAmount(termAmnt) : "(" + authHandler.formattedCommaSeparatedAmount(termAmnt * -1) + ")";
//                                termsObj.setTermName(termName);
//                                termsObj.setTermValue(termAmount);
//                                termsList.add(termsObj);
//                                termTotalAmount+=termAmnt;
//                            }
//                        }
//                        totalAmount+=termTotalAmount;
                taxInvoice.setLabelname("Credit Note");
                taxInvoice.setPoreflabel("Ship Date");
                taxInvoice.setPoref(shipDate != null ? df1.format(shipDate) : "");
                invoiceMap.put("title", "Credit Note");
            }

            for (String l : linkIds) {
                linkTo += l + ",";
            }
            if (linkTo.length() > 1) {
                linkTo = linkTo.substring(0, linkTo.length() - 1);
            }
            linkTo = StringUtil.isNullOrEmpty(linkTo) ? "NA" : linkTo;

            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            KwlReturnObject compResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compResult.getEntityList().get(0);
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }

            taxInvoice.setCompanyname(company.getCompanyName());
            String companyAdd = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
            taxInvoice.setCompanyaddress(companyAdd.replaceAll("\n", "<br>"));
            taxInvoice.setGstnumber(companyAccountPreferences.getGstNumber() != null ? "(GST Reg No : " + companyAccountPreferences.getGstNumber() + ")" : "");
            taxInvoice.setName(customerName);
            taxInvoice.setAddress(billAddr.replaceAll("\n", "<br>"));
            taxInvoice.setInvno(invno);
            taxInvoice.setDate(df1.format(entryDate));
            taxInvoice.setDuedate(invDate == null ? "" : df1.format(invDate));
            taxInvoice.setTerms(terms);
            taxInvoice.setCurrencyname(currency.getName() != null ? currency.getName() : currency.getCurrencyCode());
            taxInvoice.setCreatedby(approverName);
            taxInvoice.setAttn(attn);
            taxInvoice.setRemark(memo);
            taxInvoice.setLinkto(linkTo);
            taxInvoice.setPosttext(postText);
            taxInvoice.setPrintedon(df1.format(currentDate) + " " + sdf.format(currentDate));

            taxInvoice.setSubtotal(authHandler.formattedCommaSeparatedAmount(subTotal, companyid));
            taxInvoice.setDiscount(authHandler.formattedCommaSeparatedAmount(rowDiscountAmountTotal, companyid));
            taxInvoice.setSubtotalwithdiscount(authHandler.formattedCommaSeparatedAmount((subTotal - rowDiscountAmountTotal), companyid));
            taxInvoice.setGst(authHandler.formattedCommaSeparatedAmount((rowTaxAmountTotal + totaltax), companyid));
            taxInvoice.setTotalamount(authHandler.formattedCommaSeparatedAmount(totalAmount, companyid));
            taxInvoice.setAmountinwords(currency.getName() + " " + EnglishNumberToWordsOjb.convert(totalAmount, currency,countryLanguageId) + " only.");
            taxInvoiceList.add(taxInvoice);

            String logo = StorageHandler.GetDocStorePath() + companyid +"_template"+ FileUploadHandler.getCompanyImageExt();
            invoiceMap.put("TaxInvoiceSubReportData", new JRBeanCollectionDataSource(taxInvoiceTableList));
            invoiceMap.put("TaxSummaryData", new JRBeanCollectionDataSource(summaryTableList));
            invoiceMap.put("TermsData", new JRBeanCollectionDataSource(termsList));
            invoiceMap.put("logo", logo);
            invoiceMap.put("format", "pdf");

            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MalaysianCreditNote.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);

            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(taxInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
            list.add(jasperPrint);

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
    public List<Object> exportMalaysianGstNormalCreditDebitNote(HttpServletRequest request, String billid, String companyid, int mode) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        List<MalaysianTaxInvoice> taxInvoiceList = new ArrayList<MalaysianTaxInvoice>();
        List<MalaysianTaxInvoiceTable> taxInvoiceTableList = new ArrayList<MalaysianTaxInvoiceTable>();
        List<MalaysianGSTSummaryTable> summaryTableList = new ArrayList<MalaysianGSTSummaryTable>();
        List<Terms> termsList = new ArrayList<Terms>();
        MalaysianTaxInvoice taxInvoice = new MalaysianTaxInvoice();
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
        KwlReturnObject idresult = null;
        String customerName = "";
        String attn = "";
        String terms = "";
        String billAddr = "";
        String memo = "";
        Iterator itr = null;
        String linkTo = "";
        double totaltax = 0, discountTotalQuotation = 0, totaltaxpercent = 0;
        double totalAmount = 0;
        HashSet<String> linkIds = new HashSet<String>();
        JasperPrint jasperPrint = null;
        JasperReport jasperReport = null;
        JasperReport jasperReportSubReport = null;

        Map<String, Object> invoiceMap = new HashMap<String, Object>();
        try {
            DateFormat df1 = authHandler.getUserDateFormatterWithoutTimeZone(request);  //new SimpleDateFormat("dd/MM/yyyy");
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            String gstNo = "";
            boolean addShipTo = true;
            String invno = "";
            Date entryDate = null;
            Date invDate = null;
            Date shipDate = null;
            Date currentDate = new Date();
            double subTotal = 0;
            double rowTaxAmountTotal = 0;
            double rowDiscountAmountTotal = 0;
            String curr = "";
            String postText = "";
            String approverName = "";
            KWLCurrency currency = null;
            String currencyid = "";
            //        String companyid = sessionHandlerImpl.getCompanyid(request);
            if (mode == StaticValues.AUTONUM_DEBITNOTE) {
                KwlReturnObject creditNoteResult = kwlCommonTablesDAOObj.getObject(DebitNote.class.getName(), billid);
                DebitNote dn = (DebitNote) creditNoteResult.getEntityList().get(0);
                if (dn.getCreatedby() != null) {
                    approverName = StringUtil.getFullName(dn.getCreatedby());
                }
                currencyid = (dn.getCurrency() == null) ? currencyid : dn.getCurrency().getCurrencyID();
                currency = dn.getCurrency();
                curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                addShipTo = true;
                invno = dn.getDebitNoteNumber();
                entryDate = dn.getCreationDate()==null?dn.getJournalEntry().getEntryDate():dn.getCreationDate();
                
                //params to send to get billing address
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put("companyid", companyid);
                addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                addressParams.put("isBillingAddress", true);    //true to get billing address
                if (dn.getCustomer() == null) {
                    customerName = dn.getVendor() == null ? dn.getVendor().getAccount().getName() : dn.getVendor().getName();
                    
                    //refer ticket ERP-10777
                    //billAddr = accVendorHandler.getVendorAddress(dn.getVendor(), true);
                    addressParams.put("vendorid", dn.getVendor().getID());
                    billAddr = accountingHandlerDAOobj.getVendorAddress(addressParams);
                    VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                    
                    attn = StringUtil.isNullOrEmpty(vendorAddressDetails.getContactPerson()) ? "" : vendorAddressDetails.getContactPerson();
                    terms = dn.getVendor() == null ? "" : dn.getVendor().getDebitTerm() == null ? "" : dn.getVendor().getDebitTerm().getTermdays() + " DAYS";
                } else {
                    customerName = dn.getCustomer() == null ? dn.getVendor().getAccount().getName() : dn.getCustomer().getName();
                    
                    //refer ticket ERP-10777
                    //billAddr = accCustomerHandler.getCustomerAddress(dn.getCustomer(), true);
                    addressParams.put("customerid", dn.getCustomer().getID());
                    billAddr = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                    CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    attn = StringUtil.isNullOrEmpty(customerAddressDetails.getContactPerson()) ? "" : customerAddressDetails.getContactPerson();
                    terms = dn.getVendor() == null ? "" : dn.getVendor().getDebitTerm() == null ? "" : dn.getVendor().getDebitTerm().getTermdays() + " DAYS";
                }
                memo = dn.getMemo() != null ? dn.getMemo() : "";
                DebitNoteDetail row = null;
                int i = 0;
                if (dn != null) {
                    Set<DebitNoteTaxEntry> dnTaxEntryDetails = dn.getDnTaxEntryDetails();
                    if (dnTaxEntryDetails != null && !dnTaxEntryDetails.isEmpty()) {
                        HashMap<String, Object> fieldrequestParams = new HashMap();
                        HashMap<String, String> customFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                        fieldrequestParams.put(Constants.filter_values, Arrays.asList(dn.getCompany().getCompanyID(), Constants.Acc_Credit_Note_ModuleId));
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                        for (DebitNoteTaxEntry noteTaxEntry : dnTaxEntryDetails) {
                            MalaysianTaxInvoiceTable invoiceTable = new MalaysianTaxInvoiceTable();
                            i++;
                            String accName = "";
                            String total1 = "";
                            String accDesc = "";
                            String prodCode = "";
                            String uom = "";
                            String taxCode = "";
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            double discount = 0;
                            double rowtaxamount = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;
                            JSONObject obj = new JSONObject();
                            obj.put("accountid", noteTaxEntry.getAccount().getID());
                            obj.put("dramount", noteTaxEntry.getAmount());
                            obj.put("prtaxid", (noteTaxEntry.getTax() != null) ? noteTaxEntry.getTax().getID() : "");
                            accDesc =  StringUtil.DecodeText(noteTaxEntry.getDescription());
                            accName = noteTaxEntry.getAccount().getName();
                            rowtaxamount = noteTaxEntry.getTaxamount();
                            amount1 = noteTaxEntry.getAmount();
                            amount_with_discount = amount1 - discount;
                            amount_with_tax = amount_with_discount + rowtaxamount;

                            invoiceTable.setSno(i + ".");
                            invoiceTable.setName(accName);
                            invoiceTable.setDescription(accDesc.replaceAll("\n", "<br>"));
                            invoiceTable.setQty(authHandler.formattedQuantity(quantity, companyid) + " " + uom);
                            invoiceTable.setRate(authHandler.formattedCommaSeparatedAmount(rate, companyid));
                            invoiceTable.setDisc(authHandler.formattedCommaSeparatedAmount(discount, companyid));
                            invoiceTable.setTotalwithouttax(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                            invoiceTable.setTaxamount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                            invoiceTable.setTotalwithtax(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                            if (noteTaxEntry.getTax() != null) {
                                taxCode = noteTaxEntry.getTax().getTaxCode();
                                MalaysianGSTSummaryTable gstSummaryTable = new MalaysianGSTSummaryTable();
                                gstSummaryTable.setSummary(noteTaxEntry.getTax().getName());
                                gstSummaryTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                                gstSummaryTable.setTax(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                                summaryTableList.add(gstSummaryTable);
                            }
                            invoiceTable.setTaxcode(taxCode);
                            invoiceTable.setCurrency(currency.getCurrencyCode());
                            taxInvoiceTableList.add(invoiceTable);
                            subTotal += amount1;
                            rowDiscountAmountTotal += discount;
                            rowTaxAmountTotal += rowtaxamount;
                            double quotationPrice = authHandler.round(amount1, companyid);
                            totalAmount += quotationPrice + authHandler.round(rowtaxamount, companyid);
                        }
                    } else {// in case of if tax is not included while creation of CN Value will be go fron jedetail table in case of Edit.
                        JournalEntry je = dn.getJournalEntry();
                        Set<JournalEntryDetail> jeDetails = je.getDetails();
                        for (JournalEntryDetail jed : jeDetails) {
                            MalaysianTaxInvoiceTable invoiceTable = new MalaysianTaxInvoiceTable();
                            i++;
                            String accName = "";
                            String total1 = "";
                            String accDesc = "";
                            String accCode = "";
                            String uom = "";
                            String taxCode = "";
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            double discount = 0;
                            double rowtaxamount = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;
                            JSONObject obj = new JSONObject();
                            if (jed.isDebit()) {
                                accDesc =  StringUtil.DecodeText(jed.getDescription());
                                accName = jed.getAccount().getName();
                                amount1 = jed.getAmount();
                                amount_with_discount = amount1 - discount;
                                amount_with_tax = amount_with_discount + rowtaxamount;
                            }
                            invoiceTable.setSno(i + ".");
                            invoiceTable.setName(accName);
                            invoiceTable.setDescription(accDesc.replaceAll("\n", "<br>"));
                            invoiceTable.setDisc(authHandler.formattedCommaSeparatedAmount(discount, companyid));
                            invoiceTable.setTotalwithouttax(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                            invoiceTable.setTaxamount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                            invoiceTable.setTotalwithtax(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                            invoiceTable.setTaxcode(taxCode);
                            invoiceTable.setCurrency(currency.getCurrencyCode());
                            taxInvoiceTableList.add(invoiceTable);
                            subTotal += amount1;
                            rowDiscountAmountTotal += discount;
                            rowTaxAmountTotal += rowtaxamount;
                            double quotationPrice = authHandler.round(amount1, companyid);
                            totalAmount += quotationPrice + authHandler.round(rowtaxamount, companyid);
                        }
                    }

                }
                HashMap<String, Object> dnRequestParams = new HashMap<String, Object>();
                ArrayList filter_names1 = new ArrayList(), filter_params1 = new ArrayList(), order_by1 = new ArrayList(), order_type1 = new ArrayList();
                filter_names1.add("debitNote.ID");
                order_by1.add("srno");
                order_type1.add("asc");
                dnRequestParams.put("filter_names", filter_names1);
                dnRequestParams.put("filter_params", filter_params1);
                dnRequestParams.put("order_by", order_by1);
                dnRequestParams.put("order_type", order_type1);
                
                filter_params1.clear();
                filter_params1.add(dn.getID());
                KwlReturnObject grdresult = accDebitNoteobj.getDebitNoteDetails(dnRequestParams);
                Iterator itr1 = grdresult.getEntityList().iterator();
                while (itr1.hasNext()) {
                    row = (DebitNoteDetail) itr1.next();
                    GoodsReceipt grObj = row.getGoodsReceipt();
                    if (grObj != null) {
                        Date invoiceCreationDate = null;
                        invoiceCreationDate = grObj.getCreationDate();
//                        if (grObj.isIsOpeningBalenceInvoice()) {
//                            invoiceCreationDate = grObj.getCreationDate();
//                        } else {
//                            invoiceCreationDate = grObj.getJournalEntry().getEntryDate();
//                        }
                        String tempLinkTo = grObj.getGoodsReceiptNumber();
                        linkIds.add(tempLinkTo);
                        invDate= invoiceCreationDate;
                    }
                }
                taxInvoice.setLabelname("Debit Note");
                taxInvoice.setPoreflabel("Ship Date");
                taxInvoice.setPoref(shipDate != null ? df1.format(shipDate) : "");
                invoiceMap.put("title", "Debit Note");
                invoiceMap.put("labelTo","Debit Note To : ");
            } else if (mode == StaticValues.AUTONUM_CREDITNOTE) {
                KwlReturnObject creditNoteResult = kwlCommonTablesDAOObj.getObject(CreditNote.class.getName(), billid);
                CreditNote cn = (CreditNote) creditNoteResult.getEntityList().get(0);
                if (cn.getCreatedby() != null) {
                    approverName = StringUtil.getFullName(cn.getCreatedby());
                }
                currencyid = (cn.getCurrency() == null) ? currencyid : cn.getCurrency().getCurrencyID();
                currency = cn.getCurrency();
                curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                addShipTo = true;
                invno = cn.getCreditNoteNumber();
                entryDate = cn.getCreationDate()==null?cn.getJournalEntry().getEntryDate():cn.getCreationDate();
                
                //params to send to get billing address
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put("companyid", companyid);
                addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                addressParams.put("isBillingAddress", true);    //true to get billing address
                if (cn.getVendor() == null) {
                    customerName = cn.getVendor() == null ? cn.getCustomer().getAccount().getName() : cn.getCustomer().getName();
                    addressParams.put("customerid", cn.getCustomer().getID());
                    billAddr = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                    CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    attn = customerAddressDetails != null ? customerAddressDetails.getContactPerson() != null ? customerAddressDetails.getContactPerson() : "" : "";
                    terms = cn.getCustomer() == null ? "" : cn.getCustomer().getCreditTerm() == null ? "" : cn.getCustomer().getCreditTerm().getTermdays() + " DAYS";
                } else {
                    customerName = cn.getVendor() == null ? cn.getCustomer().getAccount().getName() : cn.getVendor().getName();
                    
                    //refer ticket ERP-10777
                    //billAddr = accVendorHandler.getVendorAddress(cn.getVendor(), true);
                    addressParams.put("vendorid", cn.getVendor().getID());
                    billAddr = accountingHandlerDAOobj.getVendorAddress(addressParams);
                    VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                    
                    attn = StringUtil.isNullOrEmpty(vendorAddressDetails.getContactPerson()) ? "" : vendorAddressDetails.getContactPerson();
                    terms = cn.getVendor() == null ? "" : cn.getVendor().getDebitTerm() == null ? "" : cn.getVendor().getDebitTerm().getTermdays() + " DAYS";
                }
                memo = cn.getMemo() != null ? cn.getMemo() : "";
                CreditNoteDetail row = null;
                int i = 0;
                if (cn != null) {
                    Set<CreditNoteTaxEntry> dnTaxEntryDetails = cn.getCnTaxEntryDetails();
                    if (dnTaxEntryDetails != null && !dnTaxEntryDetails.isEmpty()) {
                        HashMap<String, Object> fieldrequestParams = new HashMap();
                        HashMap<String, String> customFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                        fieldrequestParams.put(Constants.filter_values, Arrays.asList(cn.getCompany().getCompanyID(), Constants.Acc_Credit_Note_ModuleId));
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                        for (CreditNoteTaxEntry noteTaxEntry : dnTaxEntryDetails) {
                            MalaysianTaxInvoiceTable invoiceTable = new MalaysianTaxInvoiceTable();
                            i++;
                            String accName = "";
                            String total1 = "";
                            String accDesc = "";
                            String prodCode = "";
                            String uom = "";
                            String taxCode = "";
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            double discount = 0;
                            double rowtaxamount = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;
                            JSONObject obj = new JSONObject();
                            obj.put("accountid", noteTaxEntry.getAccount().getID());
                            obj.put("dramount", noteTaxEntry.getAmount());
                            obj.put("prtaxid", (noteTaxEntry.getTax() != null) ? noteTaxEntry.getTax().getID() : "");
                            accDesc =  StringUtil.DecodeText(noteTaxEntry.getDescription());
                            accName = noteTaxEntry.getAccount().getName();
                            rowtaxamount = noteTaxEntry.getTaxamount();
                            amount1 = noteTaxEntry.getAmount();
                            amount_with_discount = amount1 - discount;
                            amount_with_tax = amount_with_discount + rowtaxamount;

                            invoiceTable.setSno(i + ".");
                            invoiceTable.setName(accName);
                            invoiceTable.setDescription(accDesc.replaceAll("\n", "<br>"));
                            invoiceTable.setQty(authHandler.formattedQuantity(quantity, companyid) + " " + uom);
                            invoiceTable.setRate(authHandler.formattedCommaSeparatedAmount(rate, companyid));
                            invoiceTable.setDisc(authHandler.formattedCommaSeparatedAmount(discount, companyid));
                            invoiceTable.setTotalwithouttax(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                            invoiceTable.setTaxamount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                            invoiceTable.setTotalwithtax(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                            if (noteTaxEntry.getTax() != null) {
                                taxCode = noteTaxEntry.getTax().getTaxCode();
                                MalaysianGSTSummaryTable gstSummaryTable = new MalaysianGSTSummaryTable();
                                gstSummaryTable.setSummary(noteTaxEntry.getTax().getName());
                                gstSummaryTable.setAmount(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                                gstSummaryTable.setTax(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                                summaryTableList.add(gstSummaryTable);
                            }
                            invoiceTable.setTaxcode(taxCode);
                            invoiceTable.setCurrency(currency.getCurrencyCode());
                            taxInvoiceTableList.add(invoiceTable);
                            subTotal += amount1;
                            rowDiscountAmountTotal += discount;
                            rowTaxAmountTotal += rowtaxamount;
                            double quotationPrice = authHandler.round(amount1, companyid);
                            totalAmount += quotationPrice + authHandler.round(rowtaxamount, companyid);
                        }
                    } else {// in case of if tax is not included while creation of CN Value will be go fron jedetail table in case of Edit.
                        JournalEntry je = cn.getJournalEntry();
                        Set<JournalEntryDetail> jeDetails = je.getDetails();
                        for (JournalEntryDetail jed : jeDetails) {
                            MalaysianTaxInvoiceTable invoiceTable = new MalaysianTaxInvoiceTable();
                            i++;
                            String accName = "";
                            String total1 = "";
                            String accDesc = "";
                            String accCode = "";
                            String uom = "";
                            String taxCode = "";
                            double quantity = 0, discountQuotation = 0, discountOrder = 0, changedQuantity = 0;
                            double rate = 0;
                            double discount = 0;
                            double rowtaxamount = 0;
                            double amount1 = 0;
                            double amount_with_discount = 0;
                            double amount_with_tax = 0;
                            JSONObject obj = new JSONObject();
                            if (jed.isDebit()) {
                                accDesc =  StringUtil.DecodeText(jed.getDescription());
                                accName = jed.getAccount().getName();
                                amount1 = jed.getAmount();
                                amount_with_discount = amount1 - discount;
                                amount_with_tax = amount_with_discount + rowtaxamount;
                            }
                            invoiceTable.setSno(i + ".");
                            invoiceTable.setName(accName);
                            invoiceTable.setDescription(accDesc.replaceAll("\n", "<br>"));
                            invoiceTable.setDisc(authHandler.formattedCommaSeparatedAmount(discount, companyid));
                            invoiceTable.setTotalwithouttax(authHandler.formattedCommaSeparatedAmount(amount_with_discount, companyid));
                            invoiceTable.setTaxamount(authHandler.formattedCommaSeparatedAmount(rowtaxamount, companyid));
                            invoiceTable.setTotalwithtax(authHandler.formattedCommaSeparatedAmount(amount_with_tax, companyid));
                            invoiceTable.setTaxcode(taxCode);
                            invoiceTable.setCurrency(currency.getCurrencyCode());
                            taxInvoiceTableList.add(invoiceTable);
                            subTotal += amount1;
                            rowDiscountAmountTotal += discount;
                            rowTaxAmountTotal += rowtaxamount;
                            double quotationPrice = authHandler.round(amount1, companyid);
                            totalAmount += quotationPrice + authHandler.round(rowtaxamount, companyid);
                        }
                    }

                }
                HashMap<String, Object> cnRequestParams = new HashMap<String, Object>();
                ArrayList filter_names1 = new ArrayList(), filter_params1 = new ArrayList(), order_by1 = new ArrayList(), order_type1 = new ArrayList();
                filter_names1.add("creditNote.ID");
                order_by1.add("srno");
                order_type1.add("asc");
                cnRequestParams.put("filter_names", filter_names1);
                cnRequestParams.put("filter_params", filter_params1);
                cnRequestParams.put("order_by", order_by1);
                cnRequestParams.put("order_type", order_type1);
                
                filter_params1.clear();
                filter_params1.add(cn.getID());
                KwlReturnObject grdresult = accCreditNoteDAOobj.getCreditNoteDetails(cnRequestParams);
                Iterator itr1 = grdresult.getEntityList().iterator();
                while (itr1.hasNext()) {
                    row = (CreditNoteDetail) itr1.next();
                    Invoice invObj = row.getInvoice();
                    if (invObj != null) {
                        Date invoiceCreationDate = null;
                        invoiceCreationDate = invObj.getCreationDate();
//                        if (invObj.isIsOpeningBalenceInvoice()) {
//                            invoiceCreationDate = invObj.getCreationDate();
//                        } else {
//                            invoiceCreationDate = invObj.getJournalEntry().getEntryDate();
//                        }
                        String tempLinkTo = invObj.getInvoiceNumber();
                        linkIds.add(tempLinkTo);
                        invDate= invoiceCreationDate;
                    }
                }
                taxInvoice.setLabelname("Credit Note");
                taxInvoice.setPoreflabel("Ship Date");
                taxInvoice.setPoref(shipDate != null ? df1.format(shipDate) : "");
                invoiceMap.put("title", "Credit Note");
                invoiceMap.put("labelTo","Credit Note To :");
            }

            for (String l : linkIds) {
                linkTo += l + ",";
            }
            if (linkTo.length() > 1) {
                linkTo = linkTo.substring(0, linkTo.length() - 1);
            }
            linkTo = StringUtil.isNullOrEmpty(linkTo) ? "NA" : linkTo;

            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            KwlReturnObject compResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compResult.getEntityList().get(0);

            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            
            taxInvoice.setCompanyname(company.getCompanyName());
            String companyAdd = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
            taxInvoice.setCompanyaddress(companyAdd.replaceAll("\n", "<br>"));
            taxInvoice.setGstnumber(companyAccountPreferences.getGstNumber() != null ? "(GST Reg No : " + companyAccountPreferences.getGstNumber() + ")" : "");
            taxInvoice.setName(customerName);
            taxInvoice.setAddress(billAddr.replaceAll("\n", "<br>"));
            taxInvoice.setInvno(invno);
            if (entryDate != null) {
                taxInvoice.setDate(df1.format(entryDate));
            }
            taxInvoice.setDuedate(invDate == null ? "" : df1.format(invDate));
            taxInvoice.setTerms(terms);
            taxInvoice.setCurrencyname(currency.getName() != null ? currency.getName() : currency.getCurrencyCode());
            taxInvoice.setCreatedby(approverName);
            taxInvoice.setAttn(attn);
            taxInvoice.setRemark(memo);
            taxInvoice.setLinkto(linkTo);
            taxInvoice.setPosttext(postText);
            taxInvoice.setPrintedon(df1.format(currentDate) + " " + sdf.format(currentDate));

            taxInvoice.setSubtotal(authHandler.formattedCommaSeparatedAmount(subTotal, companyid));
            taxInvoice.setDiscount(authHandler.formattedCommaSeparatedAmount(rowDiscountAmountTotal, companyid));
            taxInvoice.setSubtotalwithdiscount(authHandler.formattedCommaSeparatedAmount((subTotal - rowDiscountAmountTotal), companyid));
            taxInvoice.setGst(authHandler.formattedCommaSeparatedAmount((rowTaxAmountTotal + totaltax), companyid));
            taxInvoice.setTotalamount(authHandler.formattedCommaSeparatedAmount(totalAmount, companyid));
            taxInvoice.setAmountinwords(currency.getName() + " " + EnglishNumberToWordsOjb.convert(totalAmount, currency,countryLanguageId) + " only.");
            taxInvoiceList.add(taxInvoice);

            String logo = StorageHandler.GetDocStorePath() + companyid +"_template"+ FileUploadHandler.getCompanyImageExt();
            invoiceMap.put("TaxInvoiceSubReportData", new JRBeanCollectionDataSource(taxInvoiceTableList));
            invoiceMap.put("TaxSummaryData", new JRBeanCollectionDataSource(summaryTableList));
            invoiceMap.put("TermsData", new JRBeanCollectionDataSource(termsList));
            invoiceMap.put("logo", logo);
            invoiceMap.put("format", "pdf");

            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MalaysianGSTCreditNoteOtherwise.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);

            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(taxInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, invoiceMap, beanColDataSource);
            list.add(jasperPrint);

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
      @Override
    public List<Object> exportPackingList(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        int templateId = request.getParameter("templateId") != null ? Integer.parseInt(request.getParameter("templateId")) : 0;
        String recArray[] = recordIDs.split(",");
        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                String view = "PackingList";
                List<PackingListSubReport> packingDoListSubReportsList = new ArrayList<PackingListSubReport>();
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;
                PackingList packingList = new PackingList();
                ArrayList<PackingList> packingListList = new ArrayList<PackingList>();
                Map<String, Object> packingListMap = new HashMap<String, Object>();
                try {
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    packingList.setBeneficiary(company.getCompanyName() + (StringUtil.isNullOrEmpty(CommonFunctions.getCompanyAddress(company)) ? "" : CommonFunctions.getCompanyAddressForSenwanTec(company)));

                    double totalpackages = 0;
                    double totalquantity = 0;
                    double totalgrossweight = 0;
                    double totalmeasurement = 0;
                    
                    DecimalFormat decimalFormat = new DecimalFormat("0.00");
                    DecimalFormat quantityFormat = new DecimalFormat("0.0000");
                    DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

                    KwlReturnObject pack = kwlCommonTablesDAOObj.getObject(PackingDoList.class.getName(), billid);
                    PackingDoList packingDoList = (PackingDoList) pack.getEntityList().get(0);

                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), 1));
                    HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("packingDoList.ID");
                    filter_params.add(packingDoList.getID());
                    doRequestParams.put("filter_names", filter_names);
                    doRequestParams.put("filter_params", filter_params);

                    KwlReturnObject itempackingdetailsres = accInvoiceDAOobj.getItemPackingDetails(doRequestParams);
                    Iterator itempackitr = itempackingdetailsres.getEntityList().iterator();
                    int item=0;
                    while (itempackitr.hasNext()) {
                        ItemPackingDetail row = (ItemPackingDetail) itempackitr.next();
                        PackingListSubReport packingListSubReport=new PackingListSubReport();
                        double quantity=row.getTotalItems();
                        double grossweight=row.getGrossWeight();
                        double measurement=0;
                        String uom=row.getProduct().getUnitOfMeasure() != null ? row.getProduct().getUnitOfMeasure().getNameEmptyforNA() : "";
                        String description=StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription();
                        double packagequantity=row.getPackageQuantity();
                        String packages=packagequantity+" Bundles";
                        String memo=packingDoList.getMemo();
                        if (templateId == 55) { //Wtf.Acc_Packing_List_Lc_ModuleId 
                           packingListSubReport.setItem(++item);
                           packingListSubReport.setDescription(description+"<br>"+memo);
                           packingListSubReport.setGrossweight(grossweight);
                           packingListSubReport.setMeasurement(measurement);
                           packingListSubReport.setQuantity(quantity);
                           packingListSubReport.setPacking(packages);
                           packingListSubReport.setUom(uom);
                           packingListSubReport.setMemo(memo);
                        } else if (templateId == 56) {
                           packingListSubReport.setItem(++item);
                           packingListSubReport.setGrossweight(grossweight);
                           packingListSubReport.setMeasurement(measurement);
                           packingListSubReport.setQuantity(quantity);
                           packingListSubReport.setPacking(packages);
                           packingListSubReport.setUom(uom);
                           packingListSubReport.setDescription(description);
                        }
                        totalpackages=totalpackages+packagequantity;
                        totalquantity=totalquantity+quantity;
                        totalgrossweight=totalgrossweight+grossweight;
                        totalmeasurement=totalmeasurement+measurement;
                        packingDoListSubReportsList.add(packingListSubReport);
                    }
                    
//                    KwlReturnObject custres = accountingHandlerDAOobj.getObject(Customer.class.getName(), packingDoList.getCustomerid());
//                    Customer customer = (Customer) custres.getEntityList().get(0);
                    packingList.setCustomer(packingDoList.getCustomer());
                    packingList.setBillno(packingDoList.getPackNumber());
                    packingList.setDate(dateFormat.format(packingDoList.getPackingDate()).toString());
                    packingList.setDateoflc(dateFormat.format(packingDoList.getDateOfLc()).toString());
                    packingList.setIncoterms(packingDoList.getIncoterms());
                    packingList.setLetterofcn(packingDoList.getLetterOfCn());
                    packingList.setPacking(totalpackages+" Bundles");
                    packingList.setPartialshipment(packingDoList.getPartialShipment());
                    packingList.setPortofdischarge(packingDoList.getPortOfDischarge());
                    packingList.setPortofloading(packingDoList.getPortOfLoading());
                    packingList.setTotalgrossweight(totalgrossweight);
                    packingList.setTotalmeasurement(totalmeasurement);
                    packingList.setTotalquantity(totalquantity);
                    packingList.setTranshipment(packingDoList.getTranshipment());
                    packingList.setVessel(packingDoList.getVessel());
                    
                    packingListList.add(packingList);

                    packingListMap.put("format", "pdf");
                    InputStream inputStream = null;
                    InputStream inputStreamSubReport = null;
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    packingListMap.put("imagePath", fileName1);
                    if (templateId == 55) { //Wtf.Acc_Packing_List_Lc_ModuleId 
                        response.setHeader("Content-Disposition", "attachment;filename=" + "PackingListLc.pdf");
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PackingListLc.jrxml");
                        inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PackingListLcSubReport.jrxml");
                    } else if (templateId == 56) { //Wtf.Acc_Packing_List_NonLc_ModuleId
                        response.setHeader("Content-Disposition", "attachment;filename=" + "PackingListNonLc.pdf");
                        inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PackingListNonLc.jrxml");
                        inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/PackingListNonLcSubReport.jrxml");
                    }
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                    jasperReport = JasperCompileManager.compileReport(jasperDesign);
                    JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                    jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
                    if (templateId == 55) { //Wtf.Acc_Packing_List_Lc_ModuleId 
                        packingListMap.put("PackingListLcSubReportData", new JRBeanCollectionDataSource(packingDoListSubReportsList));
                        packingListMap.put("PackingListLcSubReport", jasperReportSubReport);
                    } else if (templateId == 56) { //Wtf.Acc_Packing_List_NonLc_ModuleId
                        packingListMap.put("PackingListNonLcSubReportData", new JRBeanCollectionDataSource(packingDoListSubReportsList));
                        packingListMap.put("PackingListNonLcSubReport", jasperReportSubReport);
                    }
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(packingListList);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, packingListMap, beanColDataSource);
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }
       public List<Object> exportGCBCreditNoteJasperReport(HttpServletRequest request, HttpServletResponse response) {

        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;

                Map<String, Object> creditNoteMap = new HashMap<String, Object>();
                String view = "GCBcreditNote";
                SatTaxInvoice creditNote = new SatTaxInvoice();
                ArrayList<SatTaxInvoice> creditNoteList = new ArrayList<SatTaxInvoice>();
                ArrayList<SATSCreditNoteDetailsTable> creditNoteTableList = new ArrayList<SATSCreditNoteDetailsTable>();
                ArrayList<SATSCreditNoteDetailsTable> creditNoteTableList1 = new ArrayList<SATSCreditNoteDetailsTable>();
                try {

                    boolean otherwiseFlag = false;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("otherwise"))) {
                        otherwiseFlag = Boolean.parseBoolean(request.getParameter("otherwise"));
                    }
                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                    int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
                    HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                    DateFormat dateFormat = (DateFormat) requestParams.get("df");
                    DateFormat df1 = new SimpleDateFormat("dd-MM-yyyy");
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, "customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0, 0));
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    JournalEntry entry = null;

                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);

                    int i = 0;
                    HashMap<String, Object> cnRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("creditNote.ID");
                    order_by.add("srno");
                    order_type.add("asc");
                    cnRequestParams.put("filter_names", filter_names);
                    cnRequestParams.put("filter_params", filter_params);
                    cnRequestParams.put("order_by", order_by);
                    cnRequestParams.put("order_type", order_type);
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), billid);
                    CreditNote cn = (CreditNote) result1.getEntityList().get(0);
                    entry = cn.getJournalEntry();
                    List<String> dimensionList = new ArrayList<String>();
                    

                    String cur = cn.getCurrency().getSymbol();
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add("companyid");
                    Detailfilter_params.add(companyid);
                    Detailfilter_names.add("journalentryId");
                    Detailfilter_params.add(entry.getID());
                    Detailfilter_names.add("moduleId");
                    Detailfilter_params.add(moduleid + "");
                    invDetailRequestParams.put("filter_names", Detailfilter_names);
                    invDetailRequestParams.put("filter_params", Detailfilter_params);
//                    KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
//                    if (idcustresult.getEntityList().size() > 0) {
//                        AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
//                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
//                        for (Entry<String, Object> varEntry : variableMap.entrySet()) {
//                            String coldata = varEntry.getValue().toString();
//                            if (customFieldMap.containsKey(varEntry.getKey())) {
//                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
//                                if (fieldComboData != null) {
//                                    if ((varEntry.getKey().split("_")[1]).equals("Vessel Name")) {
//                                        vesselName = fieldComboData.getValue() != null ? fieldComboData.getValue() : "";
//                                    }
//                                }
//                            }
//                        }
//                    }

                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    CreditNoteDetail row = null;

                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names1 = new ArrayList(), filter_params1 = new ArrayList(), order_by1 = new ArrayList(), order_type1 = new ArrayList();
                    order_by1.add("srno");
                    order_type1.add("asc");
                    invRequestParams.put("order_by", order_by1);
                    invRequestParams.put("order_type", order_type1);

                    filter_names1.add("creditNote.ID");
                    filter_params1.add(cn.getID());
                    invRequestParams.put("filter_names", filter_names1);
                    invRequestParams.put("filter_params", filter_params1);
                    idresult = accCreditNoteDAOobj.getCreditNoteDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();

                    String cndnName = "";
                    String cndnDate = "";
                    String prodDesc = "";
                    double subTotal = 0;
                    double amount = 0 ;
                    double gstTotal = 0;
                    int temp = 0;
                         String invDesc ="";
                    while (itr.hasNext()) {
                        row = (CreditNoteDetail) itr.next();
                        if (cn != null && row.getInvoice() != null) {
//                            Set<CreditNoteTaxEntry> cnTaxEntryDetails = cn.getCnTaxEntryDetails();
//                            if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {
                                temp++;
                                
                               // String invDesc = "";
                                SATSCreditNoteDetailsTable tableForInvoice = new SATSCreditNoteDetailsTable();
                               // cndnName = row.getInvoice().getInvoiceNumber();
                            if (cn.isOtherwise() && row.getPaidinvflag() != 1) {
                                cndnName = row.getInvoice() == null ? "" : row.getInvoice().getInvoiceNumber();

                                invDesc = row.getInvoice() == null ? "" : row.getInvoice().getMemo();
                            } else {

                                cndnName = row.getInvoiceRow() == null ? "" : row.getInvoiceRow().getInvoice().getInvoiceNumber();
                                invDesc = row.getInvoiceRow() == null ? "" : row.getInvoiceRow().getInvoice().getMemo();
                            }
                                  double invoiceAmount = 0;
                        
                                if (row.getInvoice().isIsOpeningBalenceInvoice()) {

                                    invoiceAmount = row.getInvoice().getOriginalOpeningBalanceAmount();
                                } else {

                                    invoiceAmount = row.getInvoice().getCustomerEntry().getAmount();
                                }
                               // cndnDate = row.getInvoice().isIsOpeningBalenceInvoice() ? df1.format(row.getInvoice().getCreationDate()) : df1.format(row.getInvoice().getJournalEntry().getEntryDate());
                              
                                if (temp == 1) {
                                      SATSCreditNoteDetailsTable tableForInvoice1 = new SATSCreditNoteDetailsTable();
                                    prodDesc = "<br>Being Rework Cost of Discount for:-<br>";
                                    tableForInvoice1.setDesc(prodDesc);
                                    creditNoteTableList1.add(tableForInvoice1);
                                 } 
                                prodDesc = "Our Invoice No : " + cndnName + "<br>Description : " + invDesc+"<br>";
                                tableForInvoice.setDesc(prodDesc);
                                tableForInvoice.setItemcode(temp+"");//item
                                tableForInvoice.setAmount(authHandler.formattedCommaSeparatedAmount(invoiceAmount, companyid));
                                tableForInvoice.setCurrency(cur);
                               // tableForInvoice.setCurrency(row.getInvoice().getCurrency().getCurrencyCode());
                                creditNoteTableList1.add(tableForInvoice);

                            
                        }
                    }

//                    if (cn != null) {
//                        Set<CreditNoteTaxEntry> cnTaxEntryDetails = cn.getCnTaxEntryDetails();
//                        if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {
//                            String invDesc = "";
//                            for (CreditNoteTaxEntry noteTaxEntry : cnTaxEntryDetails) {
//                                SATSCreditNoteDetailsTable table = new SATSCreditNoteDetailsTable();
//                                subTotal += noteTaxEntry.getAmount();
//                                gstTotal += noteTaxEntry.getTaxamount();
//                                table.setItemcode(noteTaxEntry.getAccount().getAcccode());
//                                table.setRate(authHandler.formattedAmount(noteTaxEntry.getAmount()));
//                                table.setAmount(authHandler.formattedAmount(noteTaxEntry.getAmount() + noteTaxEntry.getTaxamount()));
//                                table.setUnit(authHandler.formattedAmount(noteTaxEntry.getTaxamount()));
//                                prodDesc = "";
//                                prodDesc = noteTaxEntry.getAccount().getName() != null ? noteTaxEntry.getAccount().getName() : "";
//                                table.setDesc(prodDesc);
//                                table.setCurrency(cn.getCurrency().getCurrencyCode());
//                                creditNoteTableList.add(table);
//                            }
//                        } else {
//
//                            JournalEntry je = cn.getJournalEntry();
//                            Set<JournalEntryDetail> jeDetails = je.getDetails();
//                            for (JournalEntryDetail jed : jeDetails) {
//                                String invDesc = "";
//                                SATSCreditNoteDetailsTable table = new SATSCreditNoteDetailsTable();
//                                temp++;
//                                if (!jed.isDebit()) {
//                                    subTotal += jed.getAmount();
//                                    gstTotal = 0;
//                                    table.setItemcode(jed.getAccount().getAcccode());
//                                    table.setRate(authHandler.formattedAmount(jed.getAmount()));
//                                    table.setAmount(authHandler.formattedAmount(jed.getAmount()));
//                                    table.setUnit(authHandler.formattedAmount(0));
////                        invDesc = StringUtil.isNullOrEmpty(jed.getDescription()) ? "" : "<br><br>" + jed.getDescription();
//                                    prodDesc = jed.getAccount().getName() != null ? jed.getAccount().getName() : "";
//                                    table.setDesc(prodDesc);
//                                    table.setCurrency(cn.getCurrency().getCurrencyCode());
//                                    creditNoteTableList.add(table);
//                                }
//                            }
//                        }
//                    }
                    creditNoteTableList.addAll(creditNoteTableList1);
                    creditNoteMap.put("CreditDebitNoteDetailsTable", new JRBeanCollectionDataSource(creditNoteTableList));

                    String approverName = "";
                    if (cn.getCreatedby() != null) {
                        approverName = StringUtil.getFullName(cn.getCreatedby());
                    }
                    String terms = "";
                    String fax = "";
                    String Tel = "";
                    String hp = "";
                    String contactperson="";
                    String invno = cn.getCreditNoteNumber();
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    String entryDate = df.format(cn.getJournalEntry().getEntryDate());
                    creditNote.setDocumentno(invno);
                    creditNote.setCurrency(cn.getCurrency().getSymbol() != null ? cn.getCurrency().getSymbol() : "");
                    creditNote.setDate(entryDate);
                    
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    if (cn.getCustomer() != null) {
                       // creditNote.setAccno(cn.getCustomer().getAcccode() != null ? cn.getCustomer().getAcccode() : "");
                        creditNote.setName(cn.getCustomer().getName() != null ? cn.getCustomer().getName() : "");
                        addressParams.put("customerid", cn.getCustomer().getID());
                        creditNote.setAdd(accountingHandlerDAOobj.getCustomerAddressForSenwanTec(addressParams).replaceAll("\n", "<br>"));
                        CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                        terms = Integer.toString(cn.getCustomer().getCreditTerm().getTermdays()) + " Days";
                        fax = (customerAddressDetails == null) ? (StringUtil.isNullOrEmpty(cn.getCustomer().getFax()) ? "" : cn.getCustomer().getFax()) : StringUtil.isNullOrEmpty(customerAddressDetails.getFax()) ? "" : customerAddressDetails.getFax();
                        Tel = (customerAddressDetails == null) ? (StringUtil.isNullOrEmpty(cn.getCustomer().getContactNumber()) ? "" : cn.getCustomer().getContactNumber()) : (StringUtil.isNullOrEmpty(customerAddressDetails.getPhone()) ? "" : customerAddressDetails.getPhone());
                        hp = customerAddressDetails != null ? customerAddressDetails.getMobileNumber() != null ? customerAddressDetails.getMobileNumber() : "" : "";
                        contactperson = customerAddressDetails != null ? customerAddressDetails.getContactPerson() != null ? customerAddressDetails.getContactPerson() : "" : "";

                        creditNote.setCust("Customer");
                        creditNote.setCredit("Credit");
                    }
                    if (cn.getVendor() != null) {
                       // creditNote.setAccno(cn.getVendor().getAcccode() != null ? cn.getVendor().getAcccode() : "");
                        creditNote.setName(cn.getVendor().getName() != null ? cn.getVendor().getName() : "");
                        
                        //refer ticket ERP-10777
                        //creditNote.setAdd(accVendorHandler.getVendorAddressForSenwanTec(cn.getVendor(), true).replaceAll("\n", "<br>"));
                        addressParams.put("vendorid", cn.getVendor().getID());
                        creditNote.setAdd(accountingHandlerDAOobj.getVendorAddressForSenwanTec(addressParams).replaceAll("\n", "<br>"));
                        VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                        
                        terms = Integer.toString(cn.getVendor().getDebitTerm().getTermdays()) + " Days";
                        fax = (vendorAddressDetails == null) ? (StringUtil.isNullOrEmpty(cn.getVendor().getFax()) ? "" : cn.getVendor().getFax()) : (StringUtil.isNullOrEmpty(vendorAddressDetails.getFax()) ? "" : vendorAddressDetails.getFax());
                        Tel = (vendorAddressDetails == null) ? (StringUtil.isNullOrEmpty(cn.getVendor().getContactNumber()) ? "" : cn.getVendor().getContactNumber()) : (StringUtil.isNullOrEmpty(vendorAddressDetails.getPhone()) ? "" : vendorAddressDetails.getPhone());
                        hp = vendorAddressDetails != null ? vendorAddressDetails.getMobileNumber() != null ? vendorAddressDetails.getMobileNumber() : "" : "";
                        contactperson = vendorAddressDetails != null ? vendorAddressDetails.getContactPerson() != null ? vendorAddressDetails.getContactPerson() : "" : "";

                        creditNote.setCust("Vendor");
                        creditNote.setCredit("Debit");
                    }
                    creditNote.setHp(hp);
                    creditNote.setPhone(Tel);
                    creditNote.setFax(fax);
                    creditNote.setDate(entryDate);
                    creditNote.setRaisedby(approverName);
                    creditNote.setContactperson(contactperson);
//                    creditNote.setTaxamount(authHandler.formattedAmount(gstTotal));
//                    creditNote.setGstregno(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
//                    creditNote.setComregno(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
//                    creditNote.setTaxpercent("");
//                    creditNote.setSubtotal(authHandler.formattedAmount(subTotal));
//                    creditNote.setTerms(terms);
                    creditNote.setTotalamount(authHandler.formattedCommaSeparatedAmount(cn.getCnamount(), companyid));
//                    creditNote.setVesselname(vesselName);
//            creditNote.setShiplength(authHandler.formattedAmount(shipLength));
                    creditNoteList.add(creditNote);
                    creditNoteMap.put("format", "pdf");
                    String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                    creditNoteMap.put("logo", fileName1);
                    creditNoteMap.put("title", "CREDIT NOTE");
                    creditNoteMap.put("amountinwords","");//cur + ": " + EnglishNumberToWordsOjb.convert(cn.getCnamount(), cn.getCurrency()) + " only.");
                    creditNoteMap.put("attn","Contact");
//            creditNoteMap.put("datasource", new JRBeanCollectionDataSource(creditNoteList));

                    InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GCBCreditNote.jrxml");
                    JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(creditNoteList);
                    JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                     jasperReport = JasperCompileManager.compileReport(jasperDesign);
                     jasperPrint = JasperFillManager.fillReport(jasperReport, creditNoteMap, beanColDataSource);
                    response.setHeader("Content-Disposition", "attachment;filename=" + "CreditNote.pdf");
                    list.add(jasperPrint);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        return list;
    }

    public List<Object> exportGCBPurchaseRequisition(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        String billid = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Purchase_Requisition_ModuleId, 1));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

        if (recArray.length != 0) {
            for (String s : recArray) {
                billid = s;
                if (StringUtil.isNullOrEmpty(billid)) {
                    billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                }
                JSONArray DataJArr = new JSONArray();
                Map<String, Object> purchaseRequisitionMap = new HashMap<String, Object>();
                JasperPrint jasperPrint = null;
                JasperReport jasperReport = null;
                JasperReport jasperReportSubReport = null;

                DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);//new SimpleDateFormat("dd/MM/yyyy");
                DecimalFormat quantityFormat = new DecimalFormat("0");
                int templateflag = Integer.parseInt(request.getParameter("templateflag"));
                BITPurchaseRequisition purchaseRequisition = new BITPurchaseRequisition();
                ArrayList<BITPurchaseRequisition> purchaseRequisitionList = new ArrayList<BITPurchaseRequisition>();
                ArrayList<BITPurchaseRequisitionSubReport> purchaseRequisitionTableList = new ArrayList<BITPurchaseRequisitionSubReport>();
                try {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                    String companyid = sessionHandlerImpl.getCompanyid(request);
                    KwlReturnObject result = null;
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                    Company company = (Company) cmpresult.getEntityList().get(0);
                    String invno = "";
                    Date entryDate = null;
                    String memo = "";
                    String vendor = "";//requested by
                    String reqdesgn = "";//requested by designation
                    String department = "";
                    PurchaseRequisition pr = null;
                    pr = (PurchaseRequisition) kwlCommonTablesDAOObj.getClassObject(PurchaseRequisition.class.getName(), billid);
                    invno = pr.getPrNumber();
                    entryDate = pr.getRequisitionDate();
                    vendor = pr.getUsers().getFullName() != null ? pr.getUsers().getFullName() : "";

                    if (!StringUtil.isNullOrEmpty(pr.getUsers().getRoleID())) {
                        Role r = (Role) kwlCommonTablesDAOObj.getClassObject(Role.class.getName(), pr.getUsers().getRoleID());
                        reqdesgn = r.getName();
                    }

                    KwlReturnObject approvalresult = accountingHandlerDAOobj.getApprovalHistoryForExport(billid, companyid);
                    List list1 = approvalresult.getEntityList();
                    Iterator it = list1.iterator();

                    while (it.hasNext()) {
                        Approvalhistory obj = (Approvalhistory) it.next();
                        int level = obj.getApprovallevel();
                        String approveDateString = "";
                        String approverName = "";
                        String roleid = "";
                        String approverdesignation = "";
                        Date approveDate = new Date();
                        approveDate.setTime(obj.getApprovedon());
                        approveDateString = df.format(approveDate);
                        approverName = StringUtil.getFullName(obj.getApprover());
                        roleid = obj.getApprover().getRoleID() != null ? obj.getApprover().getRoleID() : "";
                        if (!StringUtil.isNullOrEmpty(roleid)) {
                            Role r = (Role) kwlCommonTablesDAOObj.getClassObject(Role.class.getName(), roleid);
                            approverdesignation = r.getName();
                        }
                        purchaseRequisition.setApprbyname(approverName);
                        purchaseRequisition.setApprbydate(approveDateString);
                        purchaseRequisition.setApprbydesign(approverdesignation);
                    }
                    purchaseRequisition.setDate(df.format(entryDate));
                    purchaseRequisition.setPrn(invno);
                    purchaseRequisition.setPurpose(memo);
                    purchaseRequisition.setReqbyname(vendor);
                    purchaseRequisition.setReqbydate(df.format(entryDate));
                    purchaseRequisition.setReqbydesign(reqdesgn);
                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    order_by.add("srno");
                    order_type.add("asc");
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    filter_names.add("purchaserequisition.ID");
                    filter_params.add(pr.getID());
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);
                    idresult = accPurchaseOrderobj.getPurchaseRequisitionDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();
                    double total = 0;
                    int i = 0;
                    while (itr.hasNext()) {
                        i++;
                        BITPurchaseRequisitionSubReport prTable = new BITPurchaseRequisitionSubReport();
                        String prodName = "";
                        String prodDesc = "";
                        String quotationNo = "";
                        String UOM = "";
                        String requestobedeliveredon = "";
                        double quantity = 0, rate = 0, amount = 0;

                        PurchaseRequisitionDetail row = (PurchaseRequisitionDetail) itr.next();
                        prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                        if (!StringUtil.isNullOrEmpty(row.getProductdescription())) {
                            prodDesc = row.getProductdescription();
                        } else {
                            if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                                prodDesc = row.getProduct().getDescription();
                            }
                        }
                        UOM = row.getProduct().getUnitOfMeasure() != null ? ("/<br>" + row.getProduct().getUnitOfMeasure().getNameEmptyforNA()) : "";
                        quantity = row.getQuantity();
                        rate = row.getRate();
                        total += quantity;
                        Map<String, Object> variablefieldMap = new HashMap<String, Object>();
                        PurchaseRequisitionDetailCustomData purchaseRequisitionDetailCustomData = (PurchaseRequisitionDetailCustomData) row.getPurchaseRequisitionDetailCustomData();
                        AccountingManager.setCustomColumnValues(purchaseRequisitionDetailCustomData, FieldMap, replaceFieldMap, variablefieldMap);
                        for (Map.Entry<String, Object> varFieldEntry : variablefieldMap.entrySet()) {
                            String colfielddata = varFieldEntry.getValue().toString();
                            String valueForReport = "";


                            if (!StringUtil.isNullOrEmpty(colfielddata)) {
                                if ((varFieldEntry.getKey().split("_")[1]).equals("Request to be delivered on")) {
                                    requestobedeliveredon = colfielddata;
                                }
                                if (!StringUtil.isNullOrEmpty(colfielddata)) {
                                    if ((varFieldEntry.getKey().split("_")[1]).equals("Remarks/Purpose")) {
                                        prodDesc = colfielddata;
                                    }
                                    if (!StringUtil.isNullOrEmpty(colfielddata)) {
                                        if ((varFieldEntry.getKey().split("_")[1]).equals("Quotation No")) {
                                            prodDesc = colfielddata;
                                        }
                                        if (!StringUtil.isNullOrEmpty(colfielddata)) {
                                            if ((varFieldEntry.getKey().split("_")[1]).equals("Rev no")) {
                                                prodDesc = colfielddata;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        prTable.setSrno(i + "");
                        prTable.setItem(prodName);
                        prTable.setReqtodeliveredon(requestobedeliveredon);
                        prTable.setQty(authHandler.formattedQuantity(quantity, companyid) + UOM);
                        prTable.setDesc(prodDesc);
                        prTable.setQuotationNo(quotationNo);
                        purchaseRequisitionTableList.add(prTable);
                    }
                    HashMap<String, String> customMap = new HashMap<String, String>();
                    HashMap<String, String> customDateMap = new HashMap<String, String>();
                    HashMap<String, Object> requestParams = new HashMap();
                    requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    requestParams.put(Constants.filter_values, Arrays.asList(pr.getCompany().getCompanyID(), Constants.Acc_Purchase_Requisition_ModuleId, 0));
                    HashMap<String, String> replaceMap = new HashMap<String, String>();
                    HashMap<String, Integer> filedMap1 = accAccountDAOobj.getFieldParamsCustomMap(requestParams, replaceMap, customMap, customDateMap);



                    KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(PurchaseRequisitionCustomData.class.getName(), pr.getID());
                    if (custumObjresult.getEntityList().size() > 0) {

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        PurchaseRequisitionCustomData purchaseRequisitionCustomData = (PurchaseRequisitionCustomData) custumObjresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(purchaseRequisitionCustomData, filedMap1, replaceMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue() != null ? varEntry.getValue().toString() : "";
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                if ((varEntry.getKey().split("_")[1]).equals("Department")) {
                                    department = coldata;
                                }

                            }
                        }
                    }
                    purchaseRequisition.setSubtotal(authHandler.formattedQuantity(total, companyid));
                    purchaseRequisitionList.add(purchaseRequisition);
                    purchaseRequisitionMap.put("PRSubReportData", new JRBeanCollectionDataSource(purchaseRequisitionTableList));
                    purchaseRequisitionMap.put("format", "pdf");
                    purchaseRequisitionMap.put("dept", department);//pass department name as parameter
                    purchaseRequisitionMap.put("CompanyName", company.getCompanyName());//pass Compasny name as parameter
                    response.setHeader("Content-Disposition", "attachment;filename=" + "PurchaseRequisition.pdf");
                    try {
                        InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/GCBPurchaseRequisition.jrxml");
                        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                        jasperReport = JasperCompileManager.compileReport(jasperDesign);

                        JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(purchaseRequisitionList);
                        jasperPrint = JasperFillManager.fillReport(jasperReport, purchaseRequisitionMap, beanColDataSource);
                    } catch (Exception e) {
                        Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                    }
                    list.add(jasperPrint);
                } catch (ServiceException ex) {
                    Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return list;
    }
    
    @Override
    public List<Object> exportPermitInvoiceList(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public List<Object> exportF1RecreationCreditDebitNote(HttpServletRequest request,HttpServletResponse response, String recbillId) throws ServiceException, SessionExpiredException {
              throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public List<Object> exportDiamondAviationDeliveryOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public List<Object> exportDiamondAviationDeliveryOrderPackages(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public List<Object> exportDiamondAviationGoodsReceiptOrderJasperReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }  
    @Override
    public List<Object> exportDiamondAviationGoodsReceiptScrapReportJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public List<Object> exportCustomerQuotationJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
        }
    @Override
    public List<Object> exportLANDPLUSCustomerInvoice(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override
    public List<Object> exportFascinaWindowsDeliveryOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
     @Override
    public List<Object> exportVendorInvoiceRegisterReport(HttpServletRequest request, HttpServletResponse response, JSONArray tempArray) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
     @Override
    public List<Object> exportVendorInvoiceRegisterSummaryReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException,ParseException,JSONException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
       @Override
    public List<Object> exportSalesInvoiceRegisterReport(HttpServletRequest request, HttpServletResponse response, JSONArray tempArray) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> salesInvoiceMap = new HashMap<String, Object>();
        SalesInvoiceRegisterSubReport salesinvoiceSubReport = null;
        List<SalesInvoiceRegisterSubReport> salesinvoiceSubReportsList = new ArrayList<SalesInvoiceRegisterSubReport>();
        String startDate = "", endDate = "";
        JSONArray DataJArr = new JSONArray();
        try {
            String companyname = "", companyaddress = "", companyphone = "", companyfax = "", companyemail = "";
            String startPeriod = "", endPeriod = "", rangeType = "", currencyname = "", currencycode = "", gstlabel = "";
            double basicamount =0;
            double taxamount =0;
            double discountamount =0;
            double totalamount =0;
            double termamount = 0;
            boolean onlyAmountDue = StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue"))?false:Boolean.parseBoolean(request.getParameter("onlyamountdue"));        
            boolean ispendingpayment=false;
            boolean isForTemplate=false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isForTemplate"))){
                isForTemplate = Boolean.parseBoolean(request.getParameter("isForTemplate"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("ispendingpayment"))) {
                ispendingpayment = Boolean.parseBoolean(request.getParameter("ispendingpayment"));
            }
            boolean isUnpaidInvoiceReport = StringUtil.isNullOrEmpty(request.getParameter("isUnpaidInvoiceReport"))?false:Boolean.parseBoolean(request.getParameter("onlyamountdue"));        
            if(!StringUtil.isNullOrEmpty(request.getParameter("isUnpaidInvoiceReport"))){
                isUnpaidInvoiceReport = Boolean.parseBoolean(request.getParameter("isUnpaidInvoiceReport"));
            }
            boolean onlyRecurredInvoices = request.getParameter("onlyRecurredInvoices") != null ? Boolean.parseBoolean(request.getParameter("onlyRecurredInvoices")) : false;
              /*
             When check(Drop Down) to include child accounts is disabled then includeExcludeChildCombobox flag will be set as TRUE to include child accounts
             
              includeExcludeChildCombobox, if All = Include all child accounts while fetching parent account data
              includeExcludeChildCombobox, if TRUE = Include all child accounts while fetching parent account data
              includeExcludeChildCombobox, if FALSE = Exclude child acounts while fetching parent account data
             
             */
            boolean includeExcludeChildCmb;
            if (request.getParameter("includeExcludeChildCmb") != null&&request.getParameter("includeExcludeChildCmb").toString().equals("All")) {
                includeExcludeChildCmb = true;
            } else {
                includeExcludeChildCmb = request.getParameter("includeExcludeChildCmb") != null ? Boolean.parseBoolean(request.getParameter("includeExcludeChildCmb")) : false;
            }
            String companyid = sessionHandlerImpl.getCompanyid(request);
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));
            KwlReturnObject compaccresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compaccresult.getEntityList().get(0);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            companyname = company.getCompanyName() != null ? company.getCompanyName() : "";
            companyaddress = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
            companyemail = company.getEmailID() != null ? company.getEmailID() : "";
            companyfax = company.getFaxNumber() != null ? company.getFaxNumber() : "";
            companyphone = company.getPhoneNumber() != null ? company.getPhoneNumber() : "";
            currencyname = company.getCurrency().getName();
            currencycode = company.getCurrency().getCurrencyCode();
            currencycode = accCommonTablesDAO.getCustomCurrencyCode(currencycode, companyid);
            /**
             * Updated total tax word in Export PDF format for INDIA GST
             */
            String countryID = company.getCountry().getID();
            gstlabel = !(countryID.equals(Constants.INDONESIAN_COUNTRYID)) ? (currencycode +" GST OUTPUT") : (currencycode + " VAT OUTPUT");
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            //Calculate Accounting Period
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            if (!StringUtil.isNullOrEmpty(request.getParameter("startdate")) && !StringUtil.isNullOrEmpty(request.getParameter("enddate"))) {
                startDate = userdf.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter("startdate")));
                endDate = userdf.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddate")));    //ERP-8442
            }            
            startPeriod = userdf.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(userdf.parse(startPeriod));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);//ERP-17083 
            endPeriod = userdf.format(c1.getTime());
            
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            requestParams.put("customerBankAccountType", request.getParameter("customerBankAccountType"));
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            //String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid") != null) ? request.getParameter("gcurrencyid") : sessionHandlerImpl.getCurrencyID(request);
            boolean onlyOutstanding = false;
            String title = "Sales Invoice Register";
            if (!StringUtil.isNullOrEmpty(request.getParameter("onlyOutsatnding"))) {
                onlyOutstanding = Boolean.parseBoolean(request.getParameter("onlyOutsatnding"));
                title= "Outstanding Invoices";
            }
            request.setAttribute("isExport", true);
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            //for (int cnt = 0; cnt < companyids.length; cnt++) {
            //companyid = companyids[cnt];
            request.setAttribute("companyid", companyid);
            request.setAttribute("gcurrencyid", gcurrencyid);
            request.setAttribute("onlyOutstanding", onlyOutstanding);
            request.setAttribute("onlyamountdue", onlyAmountDue );
            requestParams.put("companyid", companyid);
            requestParams.put("gcurrencyid", gcurrencyid);
            requestParams.put("custInvFlagForSalesPerson", true);
            requestParams.put("consolidateFlag", consolidateFlag);
            requestParams.put("isForTemplate", isForTemplate);
            requestParams.put("datefilter", request.getParameter("datefilter"));
            requestParams.put("custVendorID", request.getParameter("custVendorID"));
            requestParams.put("onlyOutsatnding", onlyOutstanding);
            requestParams.put("ispendingpayment", ispendingpayment);
            requestParams.put("isUnpaidInvoiceReport", isUnpaidInvoiceReport);
            requestParams.put("includeExcludeChildCmb",includeExcludeChildCmb);   
            requestParams.put("onlyRecurredInvoices", onlyRecurredInvoices);
            request.setAttribute("isInvoiceOptimizeExport", true );
            KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(requestParams);
            DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, result.getEntityList(), DataJArr);
            for (int i = 0; i < DataJArr.length(); i++) {
                HashSet hs = new HashSet();
                int srno = 1;
                String dono = "", doDate = "";
                JSONObject jobj = new JSONObject();
                jobj = DataJArr.getJSONObject(i);
                String billid = jobj.optString("billid", "");   //Invoice ID 
                String invoiceNumber = jobj.optString("billno", "");    //Invoice Number
                String customername = jobj.optString("customername", "");
                String customercode = jobj.optString("customercode", "");
                String creationDate = jobj.optString("dateinuserformat", "");
                String dueDate = jobj.optString("duedateInUserDateFormat", "");
                String salesperson = jobj.optString("salespersonname", "");
                String docClass = jobj.optString("Custom_Document Class", "");
                String invCurrencySymbol = jobj.optString("currencysymbol", "");
                invCurrencySymbol = accCommonTablesDAO.getCustomCurrencySymbol(invCurrencySymbol, companyid);
                double invAmount = jobj.optDouble("amount", 0);
                double invAmountInBase = jobj.optDouble("amountinbase", 0);
                double termamountinBase = jobj.optDouble("termamountinBase", 0);
                double invTaxAmount = jobj.optDouble("taxamount", 0);
                double invTaxAmountInBase = jobj.optDouble("taxamountinbase", 0);
                /**
                 * FOR New GST (INDIA And US ) taxamountinbase column not saved.
                 * Code changes added but for Existing records no taxamountinbase,
                 * So Using Tax Amount  calculate taxamountinbase
                 */
                if (extraCompanyPreferences.isIsNewGST()) {
                    double externalCurrencyRate = jobj.optDouble("externalcurrencyrate", 0d);
                    String currencyid = jobj.optString("currencyid", "");
                    KwlReturnObject taxAmtObj = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invTaxAmount, currencyid, new Date(jobj.optString(InvoiceConstants.date, "")), externalCurrencyRate);
                    invTaxAmountInBase = (taxAmtObj != null && !taxAmtObj.getEntityList().isEmpty()) ? (Double) taxAmtObj.getEntityList().get(0) : invTaxAmount;
                }
                String[] invoices = {};
                invoices = billid.split(",");
                List<String> dolist = new ArrayList<String>();  //Contains Linked DO numbers.
                List<String> doDates = new ArrayList<String>();
                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                HashMap<String, Object> genericDataMap = new HashMap<String, Object>();
                JSONArray DataRowsArr = accInvoiceServiceDAO.getInvoiceRows(paramJobj, invoices,genericDataMap);
                jobj.put("DataRowsArr", DataRowsArr);
                double totaldiscount=0d;
                for (int k = 0; k < DataRowsArr.length(); k++) {
                    JSONObject jobRow = new JSONObject();
                    jobRow = DataRowsArr.getJSONObject(k);
                    salesinvoiceSubReport = new SalesInvoiceRegisterSubReport();
                    List prodList = new ArrayList();
                    String productid = jobRow.optString("pid", "");
                    String description = jobRow.optString("productname", "");
                    String customdata = jobRow.optString("allCustomFieldKeyValuePairString", "");
                    double qty = jobRow.optDouble("quantity", 0);
                    String uom = jobRow.optString("uomname", "");
                    String currencysymbol = jobRow.optString("currencysymbol", "");
                    currencysymbol = accCommonTablesDAO.getCustomCurrencySymbol(currencysymbol, companyid);
                    double rate = jobRow.optDouble("rate", 0);
                    double amount = jobRow.optDouble(Constants.amountForExcelFile, 0);//ERP-29102
                    double amountinbase = jobRow.optDouble("amountinbase", 0);
                    double taxAmount = jobRow.optDouble("taxamount", 0);
                    double taxAmountinbase = jobRow.optDouble("taxamountinbase", 0);
                    double discount = jobRow.optDouble("discountvalue", 0);
                    double discountinbase = jobRow.optDouble("discountvalueinbase", 0);
                    
                    if (!StringUtil.isNullOrEmpty(jobRow.getString("linktype")) && jobRow.getString("linktype").equalsIgnoreCase("1")) { //To Show only Linked DO 
                        dono = jobRow.getString("linkto");  
                        if(!dolist.contains(dono))
                            dolist.add(dono);
                    }
                    if(!prodList.contains(dono)){
                        prodList.add(dono);
                        salesinvoiceSubReport.setDonumber(dono);
                    }
                    
                    salesinvoiceSubReport.setSrno(srno+".");
                    salesinvoiceSubReport.setInvoiceno(invoiceNumber);
                    salesinvoiceSubReport.setSalesperson(salesperson);
                    salesinvoiceSubReport.setCustNo(customercode);
                    salesinvoiceSubReport.setCustName(customername);
                    salesinvoiceSubReport.setInvoiceDate(creationDate);
                    salesinvoiceSubReport.setDueDate(dueDate);
                    salesinvoiceSubReport.setDocNo(docClass);
                    salesinvoiceSubReport.setTotalAmount(invCurrencySymbol+" "+authHandler.formattedCommaSeparatedAmount(invAmount, companyid));
                    salesinvoiceSubReport.setTaxAmount(invCurrencySymbol+" "+authHandler.formattedCommaSeparatedAmount(invTaxAmount, companyid));
                    
                    salesinvoiceSubReport.setQty(authHandler.formattedCommaSeparatedAmount(qty, companyid));
                    salesinvoiceSubReport.setUom(uom);
                    salesinvoiceSubReport.setRate(authHandler.formattedCommaSeparatedUnitPrice(rate, companyid));
                    salesinvoiceSubReport.setAmount(currencysymbol+" "+authHandler.formattedCommaSeparatedAmount(amount, companyid));
                    salesinvoiceSubReport.setDiscount(authHandler.formattedCommaSeparatedAmount(discount, companyid));
                    salesinvoiceSubReport.setProdCode(productid);
                    salesinvoiceSubReport.setDescription(description+"\n"+customdata);
                    salesinvoiceSubReportsList.add(salesinvoiceSubReport);
                    srno++;
                    /*
                     * amount in base variable will stored the final value of amount which is calculated in the product grid.
                     * i.e. this value includes product level tax and excludes product level discount.
                     * hence we have calculated basic amount in following way.  [Mayur B]
                     */
                    totaldiscount+=discountinbase;
//                    basicamount+=(amountinbase+discountinbase-taxAmountinbase); //calculating basic amount by removing tax amount of row level.
//                    taxamount+=taxAmountinbase;
                    discountamount+=discountinbase;
                }//DataRowsArr loop
                basicamount += (invAmountInBase + totaldiscount - invTaxAmountInBase-termamountinBase); //calculating basic amount by removing tax amount of row level.
//                System.out.println("number: "+invoiceNumber +", invoiceamountinbase: "+invAmountInBase+", totaldiscount: "+totaldiscount+", termamount:  "+termamountinBase);
                taxamount += invTaxAmountInBase;
                termamount += termamountinBase;
                tempArray.put(jobj);
            }//DataJArr For loop
            totalamount=basicamount+taxamount-discountamount+termamount;
            //Add header part values as parameters
            salesInvoiceMap.put("reportName", title+" - Invoice wise (Detail)");
            salesInvoiceMap.put("companyname", companyname);
            salesInvoiceMap.put("companyaddress", companyaddress);
            salesInvoiceMap.put("companyphone", companyphone);
            salesInvoiceMap.put("companyfax", companyfax);
            salesInvoiceMap.put("companyemail", companyemail);
            salesInvoiceMap.put("currency", currencyname);
            salesInvoiceMap.put("currencyname", currencyname);
            salesInvoiceMap.put("currencycode", accCommonTablesDAO.getCustomCurrencyCode(currencycode,companyid));
            salesInvoiceMap.put("gstlabel", gstlabel);
            salesInvoiceMap.put("rangeType", "Custom");
            salesInvoiceMap.put("fromDate", startDate);
            salesInvoiceMap.put("toDate", endDate);
            salesInvoiceMap.put("startPeriod", startPeriod);
            salesInvoiceMap.put("endPeriod", endPeriod);
            salesInvoiceMap.put("basicamount", authHandler.formattedCommaSeparatedAmount(basicamount, companyid));
            salesInvoiceMap.put("taxamount", authHandler.formattedCommaSeparatedAmount(taxamount, companyid));
            salesInvoiceMap.put("discountamount", authHandler.formattedCommaSeparatedAmount(discountamount, companyid));
            salesInvoiceMap.put("termamount", authHandler.formattedCommaSeparatedAmount(termamount, companyid));
            salesInvoiceMap.put("totalamount", authHandler.formattedCommaSeparatedAmount(totalamount, companyid));
            salesInvoiceMap.put("custVenNameLabel", "Customer Name");
            salesInvoiceMap.put("salesPerson_Agent_Label", "Sales Person");
            salesInvoiceMap.put("invoiceLabel", "Sales Invoice #");
            salesInvoiceMap.put("sipiLabel", "SI #");
            salesInvoiceMap.put("MonzoneSalesInvoiceRegisterSubReport", new JRBeanCollectionDataSource(salesinvoiceSubReportsList));
            //salesInvoiceMap.put("format", "pdf");
            response.setHeader("Content-Disposition", "attachment;filename=" + "SalesInvoiceRegisterDetailReport_v1.pdf");

                    
            JasperPrint jasperPrint = null;
            JasperReport jasperReport = null;
            JasperReport jasperReportSubReport = null;
            InputStream inputStream = null;
            InputStream inputStreamSubReport = null;
            if(templateflag==Constants.Monzone_templateflag){
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneSalesInvoiceRegister.jrxml");
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneSalesInvoiceRegisterSubReport.jrxml");
            }else{
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusSalesInvoiceRegister.jrxml");
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusSalesInvoiceRegisterSubReport.jrxml");
            }
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            
            List salesInvoiceList = new ArrayList();
            OnlyDatePojo odp = new OnlyDatePojo();
            odp.setDate(userdf.format(new Date()));
            salesInvoiceList.add(odp);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            salesInvoiceMap.put("SubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(salesInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, salesInvoiceMap, beanColDataSource);

            list.add(jasperPrint);
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
        return list;
    }
       
    @Override
    public List<Object> exportSalesInvoiceRegisterSummaryReport(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> salesInvoiceMap = new HashMap<String, Object>();
        SalesInvoiceRegisterSubReport salesinvoiceSubReport = null;
        List<SalesInvoiceRegisterSubReport> salesinvoiceSubReportsList = new ArrayList<SalesInvoiceRegisterSubReport>();
        String startDate = "", endDate = "";
        JSONArray DataJArr = new JSONArray();
        try {
            String companyname = "", companyaddress = "", companyphone = "", companyfax = "", companyemail = "" ,gstlabel = "";;
            String startPeriod = "", endPeriod = "", rangeType = "", currencyname="", currencyCode = "";
            boolean onlyAmountDue = StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue"))?false:Boolean.parseBoolean(request.getParameter("onlyamountdue"));        
            boolean ispendingpayment=false;
            boolean isForTemplate=false;
            double basicAmount =0;  double taxAmount =0;  double discountAmount =0; double totalAmount =0;  double termAmount = 0;
            String currencysymbol = "";
            double amount = 0;//ERP-29102
            double discount = 0;  double discountinbase = 0;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isForTemplate"))){
                isForTemplate = Boolean.parseBoolean(request.getParameter("isForTemplate"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("ispendingpayment"))) {
                ispendingpayment = Boolean.parseBoolean(request.getParameter("ispendingpayment"));
            }
            boolean isUnpaidInvoiceReport = StringUtil.isNullOrEmpty(request.getParameter("isUnpaidInvoiceReport"))?false:Boolean.parseBoolean(request.getParameter("onlyamountdue"));        
            if(!StringUtil.isNullOrEmpty(request.getParameter("isUnpaidInvoiceReport"))){
                isUnpaidInvoiceReport = Boolean.parseBoolean(request.getParameter("isUnpaidInvoiceReport"));
            }  
            boolean isOpeningBalanceInvoices = StringUtil.isNullOrEmpty(request.getParameter("isOpeningBalanceInvoices"))?false:Boolean.parseBoolean(request.getParameter("isOpeningBalanceInvoices"));        
            if(!StringUtil.isNullOrEmpty(request.getParameter("isOpeningBalanceInvoices"))){
                isOpeningBalanceInvoices = Boolean.parseBoolean(request.getParameter("isOpeningBalanceInvoices"));
            }
            boolean onlyRecurredInvoices = request.getParameter("onlyRecurredInvoices") != null ? Boolean.parseBoolean(request.getParameter("onlyRecurredInvoices")) : false;
             /*
             When check(Drop Down) to include child accounts is disabled then includeExcludeChildCombobox flag will be set as TRUE to include child accounts
             
              includeExcludeChildCombobox, if All = Include all child accounts while fetching parent account data
              includeExcludeChildCombobox, if TRUE = Include all child accounts while fetching parent account data
              includeExcludeChildCombobox, if FALSE = Exclude child acounts while fetching parent account data
             
             */
            boolean includeExcludeChildCmb;
            if (request.getParameter("includeExcludeChildCmb") != null&&request.getParameter("includeExcludeChildCmb").toString().equals("All")) {
                includeExcludeChildCmb = true;
            } else {
                includeExcludeChildCmb = request.getParameter("includeExcludeChildCmb") != null ? Boolean.parseBoolean(request.getParameter("includeExcludeChildCmb")) : false;
            }
            String companyid = sessionHandlerImpl.getCompanyid(request);
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));
            KwlReturnObject compaccresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) compaccresult.getEntityList().get(0);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            companyname = company.getCompanyName() != null ? company.getCompanyName() : "";
            companyaddress = AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj);
            companyemail = company.getEmailID() != null ? company.getEmailID() : "";
            companyfax = company.getFaxNumber() != null ? company.getFaxNumber() : "";
            companyphone = company.getPhoneNumber() != null ? company.getPhoneNumber() : "";
            currencyname = company.getCurrency().getName();
  	    currencyCode = accCommonTablesDAO.getCustomCurrencyCode(company.getCurrency().getCurrencyCode(),companyid);
             /**
             * Updated total tax word in Export PDF format for GST
             */
            String countryID = company.getCountry().getID();
            gstlabel = !(countryID.equals(Constants.INDONESIAN_COUNTRYID)) ? (currencyCode +" GST OUTPUT") : (currencyCode + " VAT OUTPUT");
            //Calculate Accounting Period
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            if (!StringUtil.isNullOrEmpty(request.getParameter("startdate")) && !StringUtil.isNullOrEmpty(request.getParameter("enddate"))) {
                Date end_Date = authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddate"));    //ERP-8442
                Calendar c = Calendar.getInstance();
                c.setTime(end_Date);
                //c.add(Calendar.DATE, -1);   //Subtract 1 day.
                endDate = userdf.format(c.getTime());
                startDate = userdf.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter("startdate")));
            }            
            startPeriod = userdf.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(userdf.parse(startPeriod));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            endPeriod = userdf.format(c1.getTime());
            
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            requestParams.put("customerBankAccountType", request.getParameter("customerBankAccountType"));
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            //String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid") != null) ? request.getParameter("gcurrencyid") : sessionHandlerImpl.getCurrencyID(request);
            String userId = sessionHandlerImpl.getUserid(request);
            requestParams.put(Constants.useridKey, userId);
            boolean onlyOutstanding = false;
            String title = "Sales Invoice Register";
            if (!StringUtil.isNullOrEmpty(request.getParameter("onlyOutsatnding"))) {
                onlyOutstanding = Boolean.parseBoolean(request.getParameter("onlyOutsatnding"));
                title= "Outstanding Invoices";
            }else if(!StringUtil.isNullOrEmpty(request.getParameter("isUnpaidInvoiceReport"))){
                isUnpaidInvoiceReport = Boolean.parseBoolean(request.getParameter("isUnpaidInvoiceReport"));
                  title= "Unpaid Invoice Report ";
            } 
            String filename = "";
            boolean isFixedAsset = (request.getParameter("isFixedAsset") != null) ? Boolean.parseBoolean(request.getParameter("isFixedAsset")) : false;
            if (isFixedAsset) {
                    filename = "AssetDisposalInvoiceList_v1.pdf";
            }else{
                filename = "SalesInvoiceRegisterSummaryReport_v1.pdf";
            }
            request.setAttribute("isExport", true);
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            //for (int cnt = 0; cnt < companyids.length; cnt++) {
            //companyid = companyids[cnt];
            request.setAttribute("companyid", companyid);
            request.setAttribute("gcurrencyid", gcurrencyid);
            request.setAttribute("onlyOutstanding", onlyOutstanding);
            request.setAttribute("onlyamountdue", onlyAmountDue );
            requestParams.put("companyid", companyid);
            requestParams.put("gcurrencyid", gcurrencyid);
            requestParams.put("custInvFlagForSalesPerson", true);
            requestParams.put("consolidateFlag", consolidateFlag);
            requestParams.put("isForTemplate", isForTemplate);
            requestParams.put("datefilter", request.getParameter("datefilter"));
            requestParams.put("custVendorID", request.getParameter("custVendorID"));
            requestParams.put("onlyOutsatnding", onlyOutstanding);
            requestParams.put("ispendingpayment", ispendingpayment);
            requestParams.put("isUnpaidInvoiceReport", isUnpaidInvoiceReport);
            requestParams.put("includeExcludeChildCmb",includeExcludeChildCmb);
            requestParams.put("isOpeningBalanceInvoices", request.getParameter("isOpeningBalanceInvoices"));
            requestParams.put("onlyRecurredInvoices", onlyRecurredInvoices);
            request.setAttribute("isInvoiceOptimizeExport", true );
            KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(requestParams);
            DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, result.getEntityList(), DataJArr);
            for (int i = 0; i < DataJArr.length(); i++) {
                int srno = 1;
                String dono = "", doDate = "";
                JSONObject jobj = new JSONObject();
                jobj = DataJArr.getJSONObject(i);
                String billid = jobj.optString("billid", "");   //Invoice ID 
                String invoiceNumber = jobj.optString("billno", "");    //Invoice Number
                String customername = jobj.optString("customername", "");
                String customercode = jobj.optString("customercode", "");
                String creationDate = jobj.optString("dateinuserformat", "");
                String dueDate = jobj.optString("duedateInUserDateFormat", "");
                String salesperson = jobj.optString("salespersonname", "");
                String docClass = jobj.optString("Custom_Document Class", "");
                String invCurrencySymbol = jobj.optString("currencysymbol", "");
                invCurrencySymbol = accCommonTablesDAO.getCustomCurrencySymbol(invCurrencySymbol, companyid);
                double invAmount = jobj.optDouble("amount", 0);
                double invAmountInBase = jobj.optDouble("amountinbase", 0);
                double termamountinBase = jobj.optDouble("termamountinBase", 0);
                double invTaxAmount = jobj.optDouble("taxamount", 0);
                double invTaxAmountInBase = jobj.optDouble("taxamountinbase", 0);
                String taxName = jobj.optString("taxname", "");
                String[] invoices = {};
                invoices = billid.split(",");
                List<String> dolist = new ArrayList<String>();  //Contains Linked DO numbers.
                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                HashMap<String, Object> genericDataMap = new HashMap<String, Object>();
                JSONArray DataRowsArr = accInvoiceServiceDAO.getInvoiceRows(paramJobj, invoices,genericDataMap);
                jobj.put("DataRowsArr", DataRowsArr);
                double totaldiscount=0d;
                for (int k = 0; k < DataRowsArr.length(); k++) {
                    JSONObject jobRow = new JSONObject();
                    jobRow = DataRowsArr.getJSONObject(k);
                    salesinvoiceSubReport = new SalesInvoiceRegisterSubReport();
                    List prodList = new ArrayList();
                    currencysymbol = jobRow.optString("currencysymbol", "");
                    currencysymbol = accCommonTablesDAO.getCustomCurrencySymbol(currencysymbol, companyid);
                    amount = jobRow.optDouble(Constants.amountForExcelFile, 0);//ERP-29102
                    discount = jobRow.optDouble("discountvalue", 0);
                    discountinbase = jobRow.optDouble("discountvalueinbase", 0);
                    if (!StringUtil.isNullOrEmpty(jobRow.getString("linktype")) && jobRow.getString("linktype").equalsIgnoreCase("1")) { //To Show only Linked DO 
                        dono = jobRow.getString("linkto");  
                        if(!dolist.contains(dono))
                            dolist.add(dono);
                    }
                    if(!prodList.contains(dono)){
                        prodList.add(dono);
                        salesinvoiceSubReport.setDonumber(dono);
                    }
                    
                    salesinvoiceSubReport.setSrno(srno+".");
                    srno++;
                    totaldiscount+=discountinbase;
                    discountAmount+=discountinbase;
                }//DataRowsArr loop
                if (isUnpaidInvoiceReport || isOpeningBalanceInvoices) {
                    salesinvoiceSubReport = new SalesInvoiceRegisterSubReport();
                }
                salesinvoiceSubReport.setInvoiceno(invoiceNumber);
                salesinvoiceSubReport.setSalesperson(salesperson);
                salesinvoiceSubReport.setCustNo(customercode);
                salesinvoiceSubReport.setCustName(customername);
                salesinvoiceSubReport.setInvoiceDate(creationDate);
                salesinvoiceSubReport.setDueDate(dueDate);
                salesinvoiceSubReport.setDocNo(docClass);
                salesinvoiceSubReport.setTaxName(taxName);
                salesinvoiceSubReport.setBasicAmount(invCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(invAmount, companyid));
                salesinvoiceSubReport.setTaxAmount(invCurrencySymbol + " " + authHandler.formattedCommaSeparatedAmount(invTaxAmount, companyid));
                salesinvoiceSubReport.setAmount(currencysymbol + " " + authHandler.formattedCommaSeparatedAmount(amount, companyid));
                salesinvoiceSubReport.setDiscount(authHandler.formattedCommaSeparatedAmount(discount, companyid));
                salesinvoiceSubReportsList.add(salesinvoiceSubReport);
                basicAmount += (invAmountInBase + totaldiscount - invTaxAmountInBase-termamountinBase); //calculating basic amount by removing tax amount of row level.
//                System.out.println("number: "+invoiceNumber +", invoiceamountinbase: "+invAmountInBase+", totaldiscount: "+totaldiscount+", termamount:  "+termamountinBase);
                taxAmount += invTaxAmountInBase;
                termAmount += termamountinBase;
            }//DataJArr For loop
            totalAmount=basicAmount+taxAmount-discountAmount+termAmount;
            //Add header part values as parameters
            salesInvoiceMap.put("reportName", title+" - Invoice wise (Summary)");
            salesInvoiceMap.put("companyname", companyname);
            salesInvoiceMap.put("companyaddress", companyaddress);
            salesInvoiceMap.put("companyphone", companyphone);
            salesInvoiceMap.put("companyfax", companyfax);
            salesInvoiceMap.put("companyemail", companyemail);
            salesInvoiceMap.put("currencyname", currencyname);
            salesInvoiceMap.put("currencycode", currencyCode);
            salesInvoiceMap.put("gstlabel", gstlabel);
            salesInvoiceMap.put("rangeType", "Custom");
            salesInvoiceMap.put("fromDate", startDate);
            salesInvoiceMap.put("toDate", endDate);
            salesInvoiceMap.put("startPeriod", startPeriod);
            salesInvoiceMap.put("endPeriod", endPeriod);
            salesinvoiceSubReport.setBasicAmountVal(authHandler.round(basicAmount, companyid));
            salesinvoiceSubReport.setTaxAmountVal(authHandler.round(taxAmount, companyid));
            salesinvoiceSubReport.setTermAmount(authHandler.formattingDecimalForAmount(termAmount, companyid));
            salesinvoiceSubReport.setTermAmountVal(authHandler.round(termAmount, companyid));
            salesinvoiceSubReport.setDiscountAmount(authHandler.formattingDecimalForAmount(discountAmount, companyid));
            salesinvoiceSubReport.setDiscountAmountVal(authHandler.round(discountAmount, companyid));
            salesinvoiceSubReport.setTotalAmountVal(authHandler.round(totalAmount, companyid));
            salesInvoiceMap.put("MonzoneSalesInvoiceRegisterSubReport", new JRBeanCollectionDataSource(salesinvoiceSubReportsList));
            response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");

            JasperPrint jasperPrint = null;
            JasperReport jasperReport = null;
            JasperReport jasperReportSubReport = null;
            InputStream inputStream = null;
            InputStream inputStreamSubReport = null;
            if(templateflag==Constants.Monzone_templateflag){
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneSalesInvoiceRegister.jrxml");
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonzoneSalesInvoiceRegisterSummarySubReport.jrxml");
            }else{
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusSalesInvoiceRegister.jrxml");
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/LandPlusSalesInvoiceRegisterSubReportSummary.jrxml");
            }
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
                        
            List salesInvoiceList = new ArrayList();
            OnlyDatePojo odp = new OnlyDatePojo();
            odp.setDate(userdf.format(new Date()));
            salesInvoiceList.add(odp);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            salesInvoiceMap.put("SubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(salesInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, salesInvoiceMap, beanColDataSource);

            list.add(jasperPrint);
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
        return list;
    }
     public Map<String, Object> getCustomerLedgerInvoiceJasper(JSONObject request, int templateFlag) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        ArrayList<StatementOfAccountsSubReport> statementOfReportsSubReportList = new ArrayList<StatementOfAccountsSubReport>();
        Map<String, Object> statementOfAccountsMap = new HashMap<String, Object>();
        try {
            String companyid = request.optString(Constants.companyKey);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            boolean invoiceAmountDueFilter = true;
            if (request.optString("invoiceAmountDueFilter") != null) {
                invoiceAmountDueFilter = Boolean.parseBoolean(request.optString("invoiceAmountDueFilter"));
            }
            boolean isPostDatedCheque = false;
            if (request.optString("isPostDatedCheque") != null) {
                isPostDatedCheque = Boolean.parseBoolean(request.optString("isPostDatedCheque"));
            }
            int dateFilter = 1;
            if (request.optString("datefilter") != null) {
                dateFilter = request.optInt("datefilter",1);
            }
            Date startDate = authHandler.getDateOnlyFormat( ).parse(request.optString("stdate"));
            Date endDate = authHandler.getDateOnlyFormat( ).parse(request.optString("enddate"));
            Date asofDate = authHandler.getDateOnlyFormat( ).parse(request.optString("asofdate"));
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            dateFormat.setTimeZone(TimeZone.getTimeZone("GMT" + request.optString(Constants.timezonedifference)));//ERP-8521
            String customerIds ="";
            if(request.optString("customerIds")!=null){
                 customerIds = request.optString("customerIds" );
            } 
            String withoutinventory = request.optString("withoutinventory");
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(request);
            requestParams.put("customerIds", customerIds);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put("startDate", startDate);
            requestParams.put("endDate", endDate);
            requestParams.put("isPostDatedCheque", isPostDatedCheque);
            String searchJson = request.optString(Constants.Acc_Search_Json, "");
            String filterConjuctionCriteria = request.optString(Constants.Filter_Criteria, "");
            if (!StringUtil.isNullOrEmpty(searchJson)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
            }
            if (!StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            }

            boolean isAdvanceSearch = false;
            String invoiceSearchJson = "";
            String receiptSearchJson = "";
            String cnSearchJson = "";
            String dnSearchJson = "";
            String makePaymentSearchJson = "";

            if (requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Filter_Criteria) != null) {
                if (requestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                searchJson = requestParams.get(Constants.Acc_Search_Json).toString();
                if (!StringUtil.isNullOrEmpty(searchJson)) {
                    isAdvanceSearch = true;
                    requestParams.put(Constants.Filter_Criteria, request.optString(Constants.Filter_Criteria));
                    HashMap<String, Object> reqPar1 = new HashMap<>();
                    reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                    reqPar1.put(Constants.Acc_Search_Json, searchJson);
                    reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    invoiceSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.remove(Constants.moduleid);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    receiptSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    dnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    cnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    makePaymentSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                }
            }
            requestParams.put("invoiceSearchJson", invoiceSearchJson);
            requestParams.put("receiptSearchJson", receiptSearchJson);
            requestParams.put("cnSearchJson", cnSearchJson);
            requestParams.put("dnSearchJson", dnSearchJson);
            requestParams.put("makePaymentSearchJson", makePaymentSearchJson);
            requestParams.put("isAdvanceSearch", isAdvanceSearch);

            int duration = Integer.parseInt(request.optString("interval"));
            KwlReturnObject customerLedger = accInvoiceDAOobj.getCustomerLedgerReport(requestParams);
            List customerLedgerList = customerLedger.getEntityList();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), request.optString(Constants.globalCurrencyKey));
            KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
            /*
             * Aged details For the customers
             */
            HashMap<String, JSONObject> hashMapJSON = new HashMap<String, JSONObject>();
            JSONObject mainObj = accInvoiceServiceDAO.getCustomerAgedReceivableMerged(request, false, true);
            JSONArray jSONArray = mainObj.getJSONArray("data");
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                if (jSONObject.has("personid")) {
                    hashMapJSON.put(jSONObject.getString("personid"), jSONObject);
                }
            }
            double balanceAmtInBase = 0;
            double balanceAmount = 0;
            String prevCustomer = "";

            String curDateString = "";
            Date curDate = null;
            boolean booleanAged = false;//Added for aged payable/receivable
            String previousCustomerId = "";
            for (int i = 0; i < customerLedgerList.size(); i++) {
                Object[] tempCustomerLedger = (Object[]) customerLedgerList.get(i);
                String type = (String) tempCustomerLedger[0];
                String invoiceId = (String) tempCustomerLedger[1]; // if(type=='invoice') ==> invoice.id, if(type=='receipt') ==> receipt.id, if(type=='creditnote') ==> creditnote.id
                String invoiceNumber = (String) tempCustomerLedger[2]; // if(type=='invoice') ==> invoice.invoicenumber, if(type=='receipt') ==> receipt.receiptnumber, if(type=='creditnote') ==> creditnote.cnnumber
                String jeId = (String) tempCustomerLedger[3]; // journalentry.id
                String currencyid = StringUtil.isNullOrEmpty((String) tempCustomerLedger[5]) ? request.optString(Constants.globalCurrencyKey) : (String) tempCustomerLedger[5]; // if(type=='invoice') ==> invoice.currency, if(type=='receipt') ==> receipt.currency, if(type=='creditnote') ==> creditnote.currency
                double amount = (Double) tempCustomerLedger[6]; // if(type=='invoice') ==> jedetail.amount, if(type=='receipt') ==> receiptdetails.amount, if(type=='creditnote') ==> jedetail.amount
                String jeEntryNumber = (String) tempCustomerLedger[7];
                Date jeEntryDate = (Date) tempCustomerLedger[8];
                double jeEntryExternalCurrencyRate = (Double) tempCustomerLedger[9];
                String invoiceCustomerId = (String) tempCustomerLedger[10];
                double invoiceAmountInBase = 0.0;
                double invoiceAmountDueInBase = 0.0;
                KwlReturnObject Kwl = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                KWLCurrency transacCurrency = (KWLCurrency) Kwl.getEntityList().get(0);
                String trasactionCurrency = transacCurrency.getCurrencyCode();
                if (i == 0) {
                    previousCustomerId = new String(invoiceCustomerId);
                }
                if (type.equalsIgnoreCase("Customer Invoice") || type.equalsIgnoreCase("Sales Invoice") || type.equalsIgnoreCase("Cash Sale")) {
                    KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), invoiceCustomerId);
                    Customer cust = (Customer) custresult.getEntityList().get(0);
                    String invoiceCustomerCode = cust.getAcccode();
                    String attention ="";
                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    addressParams.put("customerid", cust.getID()); 
                    addressParams.put("templateFlag",templateFlag);
                    CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    if(customerAddressDetails!=null)
                    {
                        attention = customerAddressDetails.getContactPerson();
                    }

                    String invoiceCustomerAdd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                    String invoiceCustomerName = (String) tempCustomerLedger[11];
                    int openingtransactionFlag = Integer.parseInt(tempCustomerLedger[16].toString());
                    boolean isOpeningBalanceTransaction = false;
                    if (openingtransactionFlag == 1) {
                        isOpeningBalanceTransaction = true;
                    }
                    double documentAmtDue = 0;
                    HashMap<String, Object> reqMap = AccountingManager.getGlobalParamsJson(request);
                    //In both Outstanding and All we have to show the balance amount 
                    documentAmtDue = 0;
                    if (type.equalsIgnoreCase("Cash Sale")) { // payment recived and Cash Sale against customer amount due is always zero
                        documentAmtDue = 0;
                    } else { //other types are 1.Sales Invoice, 2.Credit Note, 3.Debit Note which are coming in this lese part
                        documentAmtDue = getAsOnDateAmountDueForTransactions(reqMap, asofDate, invoiceId, type, amount, companyid);
                    }
                    if (documentAmtDue == 0) { //if amount is zero then no need to show data in SOA Report so continue with next record
                        //refer ticket ERP-12504
                        previousCustomerId = new String(invoiceCustomerId);
                        continue;
                    } else {
                        amount = documentAmtDue;
                    }


                    boolean isConversionRateFromCurrencyToBase = false;
                    int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempCustomerLedger[17].toString());
                    if (conversionRateFromCurrencyToBaseFlag == 1) {
                        isConversionRateFromCurrencyToBase = true;
                    }

                    KWLCurrency currency = null;
                    if (!StringUtil.isNullOrEmpty(currencyid)) {
                        KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                        currency = (KWLCurrency) curresult1.getEntityList().get(0);
                    }
                    if (!prevCustomer.equals(invoiceCustomerId)) {
                        prevCustomer = invoiceCustomerId;
                        balanceAmtInBase = 0;
                    }

                    StatementOfAccountsSubReport statementOfReportsSubReport = new StatementOfAccountsSubReport();

                    Invoice invoice = null;

                    double invoiceOriginalAmount = 0.0;

                    KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), invoiceId);
                    Invoice inv = (Invoice) cap.getEntityList().get(0);
                    List<String> idsList = new ArrayList<String>();
                    idsList.add(inv.getID());
                    Map<String, JournalEntryDetail> invoiceCustomerEntryMap = accInvoiceDAOobj.getInvoiceCustomerEntryList(idsList);
                    JournalEntryDetail d = null;
                    if (inv.isNormalInvoice() && invoiceCustomerEntryMap.containsKey(inv.getID())) {
                        d = invoiceCustomerEntryMap.get(inv.getID());
                        invoiceOriginalAmount = d.getAmount();

                    }
                    if (inv.isIsOpeningBalenceInvoice() && !inv.isNormalInvoice()) {
                        invoiceOriginalAmount = inv.getOriginalOpeningBalanceAmount();

                    }
                    KwlReturnObject binvAmt = null;
                    if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                        binvAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    } else {
                        binvAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    }
                    invoiceAmountInBase = (Double) binvAmt.getEntityList().get(0);
                    invoiceAmountInBase = authHandler.round(invoiceAmountInBase, companyid);


                    statementOfReportsSubReport.setTransactionId(invoiceNumber);
                    statementOfReportsSubReport.setDate(df.format(jeEntryDate));

                    KwlReturnObject bAmt = null;
                    if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    }

                    double amountinbase = (Double) bAmt.getEntityList().get(0);
                    amountinbase = authHandler.round(amountinbase, companyid);
                    
                    String registrationNo = "";
                    if (companyid.equalsIgnoreCase(Constants.BakerTilly_BTC_COMPANYID)) {
                        registrationNo = Constants.BAKERTILLY_BTC_REGISTRATION_NO;
                    } else if (companyid.equalsIgnoreCase(Constants.BakerTilly_PCS_COMPANYID)) {
                        registrationNo = Constants.BAKERTILLY_PCS_REGISTRATION_NO;
                    } else if (companyid.equalsIgnoreCase(Constants.BakerTilly_TFWMS_COMPANYID)) {
                        registrationNo = Constants.BAKERTILLY_TFWMS_REGISTRATION_NO;
                    } else if (companyid.equalsIgnoreCase(Constants.BakerTilly_BT_COMPANYID)){
                        registrationNo = "Baker Tilly TFW LLP (Registration No. T10LL1485G) is an accounting limited libility partnership <br/>registered in Singapore under the Limited Libility Partnership Act (Chapter 163A)";
                    }
                    if (type.equalsIgnoreCase("Cash Sale")) {
                        if(templateFlag == Constants.BakerTilly_templateflag || templateFlag == Constants.BakerTilly_templateflag_pcs){
                            statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedCommaSeparatedAmount((invoiceAmountInBase - amountinbase), companyid)  : "");
                            statementOfReportsSubReport.setDebit( authHandler.formattedCommaSeparatedAmount((invoiceAmountInBase), companyid));
                            statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? authHandler.formattedCommaSeparatedAmount((balanceAmtInBase), companyid): "0");//
                            statementOfReportsSubReport.setRegistrationNo(registrationNo);//
                        } else {
                            statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedAmount((invoiceAmountInBase - amountinbase), companyid) : "");
                            statementOfReportsSubReport.setDebit(authHandler.formattedAmount(invoiceAmountInBase, companyid));
                            statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? authHandler.formattedAmount(balanceAmtInBase, companyid) : authHandler.formattedAmount(0, companyid));//
                        }
                        statementOfReportsSubReport.setDaysOutstanding("");
                    } else if (type.equalsIgnoreCase("Customer Invoice") || type.equalsIgnoreCase("Sales Invoice")) {
                        balanceAmtInBase = balanceAmtInBase + amountinbase;
                        if(templateFlag == Constants.BakerTilly_templateflag || templateFlag == Constants.BakerTilly_templateflag_pcs){
                            statementOfReportsSubReport.setCredit(authHandler.formattedCommaSeparatedAmount((invoiceAmountInBase - amountinbase), companyid));//Amount paid against invoice
                            statementOfReportsSubReport.setDebit(authHandler.formattedCommaSeparatedAmount(invoiceAmountInBase, companyid));//Invoice Amount
                            statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? authHandler.formattedCommaSeparatedAmount(balanceAmtInBase, companyid) : authHandler.formattedAmount(0, companyid));//
                            statementOfReportsSubReport.setRegistrationNo(registrationNo);
                        } else {
                            statementOfReportsSubReport.setCredit(authHandler.formattedAmount((invoiceAmountInBase - amountinbase), companyid));//Amount paid against invoice
                            statementOfReportsSubReport.setDebit(authHandler.formattedAmount(invoiceAmountInBase, companyid));//Invoice Amount
                            statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? authHandler.formattedAmount(balanceAmtInBase, companyid) : authHandler.formattedAmount(0, companyid));//
                        }
                        statementOfReportsSubReport.setInvoicAmountDue((amountinbase != 0) ? amountinbase : 0);//
                        statementOfReportsSubReport.setDaysOutstanding((int) authHandler.diffDays(jeEntryDate, new Date()) + "");
                    }
                    if(templateFlag == Constants.BakerTilly_templateflag)
                    {
                        statementOfReportsSubReport.setCurrency(trasactionCurrency);
                    }
                    statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);
                    statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                    statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                    statementOfReportsSubReport.setAttn(StringUtil.isNullOrEmpty(attention)?"": "<br>Attn :"+attention); 
                    statementOfReportsSubReport.setBaseCurrency(baseCurrency != null ? baseCurrency.getCurrencyCode() : "");
                    statementOfReportsSubReport.setHeaderdate(endDate != null ? df.format(endDate) : "");
                    if(templateFlag ==Constants.GoldBell_templateflag){
                    statementOfReportsSubReport.setBasecurrencysymbol(baseCurrency.getSymbol());
                    statementOfReportsSubReport.setDaysOutstanding(inv.getTermid()==null?"":inv.getTermid().getTermname());
                    statementOfReportsSubReport.setJeId(inv.getPoRefNumber()==null?"":inv.getPoRefNumber());
                    /*
                     * Aged details header
                     */
                    if(dateFilter == Constants.agedDueDate0to30Filter || dateFilter == Constants.agedInvoiceDate0to30Filter){
                        statementOfReportsSubReport.setAmount1Header("0-" + duration + " days");
                    } else {
                        statementOfReportsSubReport.setAmount1Header("1-" + duration + " days");
                    }
                    statementOfReportsSubReport.setAmount2Header(duration + 1 + "-" + (2 * duration) + " Days");
                    statementOfReportsSubReport.setAmount3Header((2 * duration) + 1 + "-" + (3 * duration) + " Days");
                    statementOfReportsSubReport.setAmount4Header((3 * duration) + 1 + "-" + (4 * duration) + " Days");
                    statementOfReportsSubReport.setAmount5Header("Over " + (4 * duration) + " Days");
                    if (hashMapJSON.containsKey(invoiceCustomerId)) {
                        JSONObject jSONObject = hashMapJSON.get(invoiceCustomerId);
                        statementOfReportsSubReport.setAmountDue1(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase2"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue2(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase3"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue3(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase4"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue4(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase5"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue5(authHandler.formattedCommaSeparatedAmount((jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.getDouble("amountdueinbase9") + jSONObject.getDouble("amountdueinbase10") + jSONObject.getDouble("amountdueinbase11")), companyid) + "");
//                        statementOfReportsSubReport.setTotalAmountDue(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("totalinbase"), companyid) + "");
                    }
                    }
                    statementOfReportsSubReportList.add(statementOfReportsSubReport);
                }
            }
            statementOfAccountsMap.put("StatementOfAccountsSubReportData", new JRBeanCollectionDataSource(statementOfReportsSubReportList));

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerLedgerInvoiceJasper : " + ex.getMessage(), ex);
        }
        return statementOfAccountsMap;
    }
     
    public Map<String, Object> getVendorLedgerInvoiceJasper(JSONObject request, int templateFlag) throws ServiceException, SessionExpiredException, UnsupportedEncodingException {
        JSONObject jobj = new JSONObject();
        ArrayList<StatementOfAccountsSubReport> statementOfReportsSubReportList = new ArrayList<StatementOfAccountsSubReport>();
        Map<String, Object> statementOfAccountsMap = new HashMap<String, Object>();
        HashMap<String, ArrayList> amountDueMap = new HashMap<String, ArrayList>();
        try {
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), request.optString(Constants.companyKey));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            int templateType = request.optString("type") != null ? Integer.parseInt(request.optString("type")) : 0;
            int duration = Integer.parseInt(request.optString("interval"));
            JSONArray jArr = new JSONArray();
           
            boolean invoiceAmountDueFilter = true;
            if (request.optString("invoiceAmountDueFilter") != null) {
                invoiceAmountDueFilter = Boolean.parseBoolean(request.optString("invoiceAmountDueFilter"));
            }
            boolean isPostDatedCheque = false;
            if (request.optString("isPostDatedCheque") != null) {
                isPostDatedCheque = Boolean.parseBoolean(request.optString("isPostDatedCheque"));
            }
            int dateFilter = 1;
            if (request.optString("datefilter") != null) {
                dateFilter = request.optInt("datefilter",1);
            }
            Date startDate = authHandler.getDateFormatter(request).parse(request.optString("stdate"));
            Date endDate = authHandler.getDateFormatter(request).parse(request.optString("enddate"));
            Date asofDate = authHandler.getDateFormatter(request).parse(request.optString("asofdate"));
            DateFormat df = authHandler.getUserDateFormatterJson(request);
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            dateFormat.setTimeZone(TimeZone.getTimeZone("GMT" +  request.optString(Constants.timezonedifference)));
            String vendorIds = "";
            if (request.optString("vendorIds") != null) {
                vendorIds = request.optString("vendorIds").toString();
            }  
            String withoutinventory = request.optString("withoutinventory");
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(request);
            requestParams.put("vendorIds", vendorIds);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put("startDate", startDate);
            requestParams.put("endDate", endDate);
            requestParams.put("isPostDatedCheque", isPostDatedCheque);
            String searchJson = request.optString(Constants.Acc_Search_Json, "");
            String filterConjuctionCriteria = request.optString(Constants.Filter_Criteria, "");
            if (!StringUtil.isNullOrEmpty(searchJson)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
            }
            if (!StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            }

            boolean isAdvanceSearch = false;
            String invoiceSearchJson = "";
            String receiptSearchJson = "";
            String cnSearchJson = "";
            String dnSearchJson = "";
            String makePaymentSearchJson = "";

            if (requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Filter_Criteria) != null) {
                if (requestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                searchJson = requestParams.get(Constants.Acc_Search_Json).toString();
                if (!StringUtil.isNullOrEmpty(searchJson)) {
                    isAdvanceSearch = true;
                    requestParams.put(Constants.Filter_Criteria, request.optString(Constants.Filter_Criteria));
                    HashMap<String, Object> reqPar1 = new HashMap<>();
                    reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                    reqPar1.put(Constants.Acc_Search_Json, searchJson);
                    reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    invoiceSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.remove(Constants.moduleid);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    receiptSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    dnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    cnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    makePaymentSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                }
            }
            requestParams.put("invoiceSearchJson", invoiceSearchJson);
            requestParams.put("receiptSearchJson", receiptSearchJson);
            requestParams.put("cnSearchJson", cnSearchJson);
            requestParams.put("dnSearchJson", dnSearchJson);
            requestParams.put("makePaymentSearchJson", makePaymentSearchJson);
            requestParams.put("isAdvanceSearch", isAdvanceSearch);
            
            KwlReturnObject customerLedger = accInvoiceDAOobj.getVendorLedgerReport(requestParams);
            List customerLedgerList = customerLedger.getEntityList();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), request.optString(Constants.globalCurrencyKey));
            KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
            String companyid = request.optString(Constants.companyKey);
            double balanceAmtInBase = 0;
            double balanceAmount = 0;
            String prevCustomer = "";
            String curDateString = "";
            Date curDate = null;
            boolean booleanAged = false;//Added for aged payable/receivable

            HashMap<String, JSONObject> hashMapJSON = new HashMap<String, JSONObject>();
            HashMap<String, Object> requestParamsAged =  getVendorParameterMap(request);
            JSONArray jSONArray = accGoodsReceiptServiceDAO.getVendorAgedPayableMerged(request, requestParamsAged);
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                hashMapJSON.put(jSONObject.getString("personid"), jSONObject);
            }

            String previousCustomerId = "";
            for (int i = 0; i < customerLedgerList.size(); i++) {
                Object[] tempCustomerLedger = (Object[]) customerLedgerList.get(i);
                String type = (String) tempCustomerLedger[0];
                String invoiceId = (String) tempCustomerLedger[1]; // if(type=='invoice') ==> invoice.id, if(type=='receipt') ==> receipt.id, if(type=='creditnote') ==> creditnote.id
                String invoiceNumber = (String) tempCustomerLedger[2]; // if(type=='invoice') ==> invoice.invoicenumber, if(type=='receipt') ==> receipt.receiptnumber, if(type=='creditnote') ==> creditnote.cnnumber
                String jeId = (String) tempCustomerLedger[3]; // journalentry.id
                String currencyid = StringUtil.isNullOrEmpty((String) tempCustomerLedger[5]) ? companyid : (String) tempCustomerLedger[5]; // if(type=='invoice') ==> invoice.currency, if(type=='receipt') ==> receipt.currency, if(type=='creditnote') ==> creditnote.currency
                double amount = (Double) tempCustomerLedger[6]; // if(type=='invoice') ==> jedetail.amount, if(type=='receipt') ==> receiptdetails.amount, if(type=='creditnote') ==> jedetail.amount
                String jeEntryNumber = (String) tempCustomerLedger[7];
                Date jeEntryDate = (Date) tempCustomerLedger[8];
                double jeEntryExternalCurrencyRate = (Double) tempCustomerLedger[9];
                String invoiceCustomerId = (String) tempCustomerLedger[10];
                double invoiceAmountInBase = 0.0;
                double invoiceAmountDueInBase = 0.0;
                KwlReturnObject Kwl = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                KWLCurrency transacCurrency = (KWLCurrency) Kwl.getEntityList().get(0);
                String transactionCurrency = transacCurrency.getCurrencyCode();
                if (type.equals("Purchase Invoice") || type.equals("Vendor Invoice")|| type.equalsIgnoreCase("Cash Purchase")) {
                    if (i == 0) {
                        previousCustomerId = invoiceCustomerId;
                    }

                    KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), invoiceCustomerId);
                    Vendor ven = (Vendor) custresult.getEntityList().get(0);
                    String invoiceCustomerCode = ven.getAcccode();
                    String invoiceCustomerTerms = ven.getDebitTerm() == null ? "" : ven.getDebitTerm().getTermdays() + " Days";

                    //params to send to get billing address
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put("companyid", companyid);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    addressParams.put("vendorid", ven.getID());
                    addressParams.put("templateFlag",templateFlag);
                    String invoiceCustomerAdd = accountingHandlerDAOobj.getVendorAddress(addressParams);
                    String attention = ""; 
                    VendorAddressDetails vendorAddressDetails = accountingHandlerDAOobj.getVendorAddressObj(addressParams);
                    if(vendorAddressDetails!=null){
                    attention = vendorAddressDetails.getContactPerson();
                    }
                    String invoiceCustomerName = (String) tempCustomerLedger[11];
                    int openingtransactionFlag = Integer.parseInt(tempCustomerLedger[16].toString());
                    boolean isOpeningBalanceTransaction = false;
                    if (openingtransactionFlag == 1) {
                        isOpeningBalanceTransaction = true;
                    }
                    HashMap<String, Object> reqMap = AccountingManager.getGlobalParamsJson(request);
                    //Show only Outstanding in all 
                    double documentAmtDue = 0;
                    if (type.equalsIgnoreCase("Cash Purchase")) {  
                        documentAmtDue = 0;
                    } else {  
                        documentAmtDue = getAsOnDateAmountDueForTransactions(reqMap, asofDate, invoiceId, type, amount, companyid);
                    }
                    if (documentAmtDue == 0) { //if amount is zero then no need to show data in SOA Report so continue with next record
                        previousCustomerId = invoiceCustomerId;
                        continue;
                    } else {
                        amount = documentAmtDue;
                    }

                    boolean isConversionRateFromCurrencyToBase = false;
                    int conversionRateFromCurrencyToBaseFlag = Integer.parseInt(tempCustomerLedger[17].toString());
                    if (conversionRateFromCurrencyToBaseFlag == 1) {
                        isConversionRateFromCurrencyToBase = true;
                    }


                    KWLCurrency currency = null;
                    if (!StringUtil.isNullOrEmpty(currencyid)) {
                        KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                        currency = (KWLCurrency) curresult1.getEntityList().get(0);
                    }

                    if (!prevCustomer.equals(invoiceCustomerId)) {
                        prevCustomer = invoiceCustomerId;
                        balanceAmtInBase = 0;
                    }

                    StatementOfAccountsSubReport statementOfReportsSubReport = new StatementOfAccountsSubReport();
                    statementOfReportsSubReport.setTransactionId(invoiceNumber);
                    statementOfReportsSubReport.setDate(df.format(jeEntryDate));

                    double invoiceOriginalAmount = 0.0;
                    
                    KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(GoodsReceipt.class.getName(), invoiceId);
                    GoodsReceipt inv = (GoodsReceipt) cap.getEntityList().get(0);
                    JournalEntryDetail d = null;
                    if (inv.isIsOpeningBalenceInvoice() && !inv.isNormalInvoice()) {
                        invoiceOriginalAmount = inv.getOriginalOpeningBalanceAmount();
                        
                    } else {
                        d = inv.getVendorEntry();
                        invoiceOriginalAmount = d.getAmount();
                       
                    }
                    KwlReturnObject binvAmt = null;
                    if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                        binvAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    } else {
                        binvAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    }
                    invoiceAmountInBase = (Double) binvAmt.getEntityList().get(0);
                    invoiceAmountInBase = authHandler.round(invoiceAmountInBase, companyid);
                    
                    KwlReturnObject bAmt = null;
                    if (isOpeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                    }

                    double amountinbase = (Double) bAmt.getEntityList().get(0);
                    amountinbase = authHandler.round(amountinbase, companyid);
                    
                    String registrationNo = "";
                    if (companyid.equalsIgnoreCase(Constants.BakerTilly_BTC_COMPANYID)) {
                        registrationNo = Constants.BAKERTILLY_BTC_REGISTRATION_NO;
                    } else if (companyid.equalsIgnoreCase(Constants.BakerTilly_PCS_COMPANYID)) {
                        registrationNo = Constants.BAKERTILLY_PCS_REGISTRATION_NO;
                    } else if (companyid.equalsIgnoreCase(Constants.BakerTilly_TFWMS_COMPANYID)) {
                        registrationNo = Constants.BAKERTILLY_TFWMS_REGISTRATION_NO;
                    } else if (companyid.equalsIgnoreCase(Constants.BakerTilly_BT_COMPANYID)) {
                        registrationNo = "Baker Tilly TFW LLP (Registration No. T10LL1485G) is an accounting limited libility partnership <br/>registered in Singapore under the Limited Libility Partnership Act (Chapter 163A)";
                    }
                    if (type.equalsIgnoreCase("Cash Purchase")) {
                        if(templateFlag == Constants.BakerTilly_templateflag || templateFlag == Constants.BakerTilly_templateflag_pcs){
                            statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedCommaSeparatedAmount((invoiceAmountInBase - amountinbase), companyid)  : "");
                            statementOfReportsSubReport.setDebit( authHandler.formattedCommaSeparatedAmount((invoiceAmountInBase), companyid));
                            statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? authHandler.formattedCommaSeparatedAmount((balanceAmtInBase), companyid): "0");//
                            statementOfReportsSubReport.setRegistrationNo(registrationNo);//
                        } else {
                            statementOfReportsSubReport.setCredit((amount != 0) ? authHandler.formattedAmount((invoiceAmountInBase + amountinbase), companyid) : "");
                            statementOfReportsSubReport.setDebit(authHandler.formattedAmount(invoiceAmountInBase, companyid));
                            statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? authHandler.formattedAmount(balanceAmtInBase, companyid) :  authHandler.formattedAmount(0, companyid));//
                        }
                        statementOfReportsSubReport.setDaysOutstanding("");
                    } else if (type.equalsIgnoreCase("Vendor Invoice") || type.equalsIgnoreCase("Purchase Invoice")) {
                        balanceAmtInBase = balanceAmtInBase - amountinbase;
                        if(templateFlag == Constants.BakerTilly_templateflag || templateFlag == Constants.BakerTilly_templateflag_pcs){
                            statementOfReportsSubReport.setCredit(authHandler.formattedCommaSeparatedAmount((invoiceAmountInBase - amountinbase), companyid));//Amount paid against invoice
                            statementOfReportsSubReport.setDebit(authHandler.formattedCommaSeparatedAmount(invoiceAmountInBase, companyid));//Invoice Amount
                            statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? authHandler.formattedCommaSeparatedAmount(balanceAmtInBase, companyid) : authHandler.formattedAmount(0, companyid));//
                            statementOfReportsSubReport.setRegistrationNo(registrationNo);
                        } else {
                            statementOfReportsSubReport.setCredit(authHandler.formattedAmount((invoiceAmountInBase - amountinbase), companyid));//Amount paid against invoice
                            statementOfReportsSubReport.setDebit(authHandler.formattedAmount(invoiceAmountInBase, companyid));//Invoice Amount
                            statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? authHandler.formattedAmount(balanceAmtInBase, companyid) :  authHandler.formattedAmount(0, companyid));//
                        }
                        statementOfReportsSubReport.setInvoicAmountDue((amountinbase != 0) ? amountinbase : 0);//
                        statementOfReportsSubReport.setDaysOutstanding((int) authHandler.diffDays(jeEntryDate, new Date()) + "");

                    }
                    if(templateFlag == Constants.BakerTilly_templateflag)
                    {
                        statementOfReportsSubReport.setCurrency(transactionCurrency);
                        statementOfReportsSubReport.setCustomercode("");
                    }else{
                        statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);
                    }
                    
                    /*Aged Details*/
                       if(templateFlag ==Constants.GoldBell_templateflag){
                    statementOfReportsSubReport.setBasecurrencysymbol(baseCurrency.getSymbol());
                    statementOfReportsSubReport.setDaysOutstanding(inv.getTermid()==null?"":inv.getTermid().getTermname());
                    statementOfReportsSubReport.setJeId("");
                    /*
                     * Aged details header
                     */
                    if(dateFilter == Constants.agedDueDate0to30Filter || dateFilter == Constants.agedInvoiceDate0to30Filter){
                       statementOfReportsSubReport.setAmount1Header("0-" + duration + " days");
                   } else {
                       statementOfReportsSubReport.setAmount1Header("1-" + duration + " days");
                   }
                    statementOfReportsSubReport.setAmount2Header(duration + 1 + "-" + (2 * duration) + " Days");
                    statementOfReportsSubReport.setAmount3Header((2 * duration) + 1 + "-" + (3 * duration) + " Days");
                    statementOfReportsSubReport.setAmount4Header((3 * duration) + 1 + "-" + (4 * duration) + " Days");
                    statementOfReportsSubReport.setAmount5Header("Over " + (4 * duration) + " Days");
                    if (hashMapJSON.containsKey(invoiceCustomerId)) {
                        JSONObject jSONObject = hashMapJSON.get(invoiceCustomerId);
                        statementOfReportsSubReport.setAmountDue1(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase2"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue2(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase3"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue3(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase4"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue4(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("amountdueinbase5"), companyid) + "");
                        statementOfReportsSubReport.setAmountDue5(authHandler.formattedCommaSeparatedAmount((jSONObject.getDouble("amountdueinbase6") + jSONObject.getDouble("amountdueinbase7") + jSONObject.getDouble("amountdueinbase8") + jSONObject.getDouble("amountdueinbase9") + jSONObject.getDouble("amountdueinbase10") + jSONObject.getDouble("amountdueinbase11")), companyid) + "");
                        statementOfReportsSubReport.setTotalAmountDue(authHandler.formattedCommaSeparatedAmount(jSONObject.getDouble("totalinbase"), companyid) + "");
                    }
                    }                    
                    statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                    statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                    statementOfReportsSubReport.setAttn(StringUtil.isNullOrEmpty(attention)?"": "<br>Attn :"+attention); 
                    statementOfReportsSubReport.setBaseCurrency(baseCurrency.getCurrencyCode());
                    statementOfReportsSubReport.setHeaderdate(endDate != null ? df.format(endDate) : "");
                    statementOfReportsSubReportList.add(statementOfReportsSubReport);
                }
            }
            statementOfAccountsMap.put("StatementOfAccountsSubReportData", new JRBeanCollectionDataSource(statementOfReportsSubReportList));

        } catch (SessionExpiredException | ServiceException | NumberFormatException | ParseException | JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getVendorLedgerInvoiceJasper : " + ex.getMessage(), ex);
        }  

        return statementOfAccountsMap;
    }

 public Map<String, Object> getStatementOfInvoiceJrxml(JSONObject request, int templateFlag) throws FileNotFoundException, JRException {
        /*
         * Function tp get the Jrxml For statement of invoice
         */
        Map<String, Object> jasperMap = new HashMap<>();
        String statementMainReportJrxml = " ";
        String statementSubreportReportJrxml = " ";
        if (templateFlag == Constants.GoldBell_templateflag) {
            statementMainReportJrxml = "/GoldBellStatementOfInvoice.jrxml";
            statementSubreportReportJrxml = "/GoldBellStatementOfInvoiceSubreport.jrxml";
        } else if (templateFlag == Constants.BakerTilly_templateflag || templateFlag == Constants.BakerTilly_templateflag_pcs) {
            statementMainReportJrxml = "/BakerTillyStatementOfInvoice.jrxml";
            statementSubreportReportJrxml = "/BakerTillyStatementOfInvoiceSubreport.jrxml";
        }

        InputStream inputStream = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + statementMainReportJrxml);
        JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

        InputStream inputStreamSubReport = new FileInputStream(request.optString(Constants.JRXML_REAL_PATH_KEY,"") + statementSubreportReportJrxml);
        JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
        JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

        jasperMap.put("jasperDesign", jasperDesign);
        jasperMap.put("jasperReport", jasperReport);
        jasperMap.put("jasperDesignSubReport", jasperDesignSubReport);
        jasperMap.put("jasperReportSubReport", jasperReportSubReport);
        return jasperMap;
    }   
    
    
    /*Currency wise aged details */
    Map<String,  List<AgeingTableForSOA>> getCurrencyWiseAgedDetaislForSOA(JSONObject request,boolean isCustomer) throws ServiceException, SessionExpiredException {
        Map<String,  List<AgeingTableForSOA>> agedMapList = Collections.emptyMap();
        List<AgeingTableForSOA> agedMapobj = Collections.emptyList();
        String companyid =request.optString(Constants.companyKey);
       
        try {JSONArray jSONArray = new JSONArray();
            if (isCustomer) {
                JSONObject mainObj = accInvoiceServiceDAO.getCustomerAgedReceivableMerged(request, false, true);
                jSONArray = mainObj.getJSONArray("data");
            } else {
                HashMap<String, Object> requestParamsAged = getVendorParameterMap(request);
                jSONArray = accGoodsReceiptServiceDAO.getVendorAgedPayableMerged(request, requestParamsAged);
            } 
            agedMapList = new HashMap<>();
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                if (jSONObject.has("personid")) {
                AgeingTableForSOA ageingTableData = new AgeingTableForSOA();
                ageingTableData.setAgeingCurrency(accCommonTablesDAO.getCustomCurrencyCode(jSONObject.optString("currencyCode", ""),companyid));
                ageingTableData.setAmountDueCurrent(authHandler.formattedAmount(jSONObject.optDouble("amountdue1", 0), companyid)); // set Current amount
                ageingTableData.setAmountDue1(authHandler.formattedAmount(jSONObject.optDouble("amountdue2", 0), companyid));
                ageingTableData.setAmountDue2(authHandler.formattedAmount(jSONObject.optDouble("amountdue3", 0), companyid));
                ageingTableData.setAmountDue3(authHandler.formattedAmount(jSONObject.optDouble("amountdue4", 0), companyid));
                ageingTableData.setAmountDue4(authHandler.formattedAmount((jSONObject.optDouble("amountdue5", 0)+jSONObject.optDouble("amountdue6", 0)+jSONObject.optDouble("amountdue7", 0)+jSONObject.optDouble("amountdue8", 0)), companyid));
                ageingTableData.setAmountDue5(authHandler.formattedAmount(jSONObject.optDouble("total", 0), companyid));

                if (!agedMapList.containsKey(jSONObject.optString("personid", ""))) {
                    agedMapobj = new ArrayList<>();
                    agedMapobj.add(ageingTableData);
                    agedMapList.put(jSONObject.getString("personid"), agedMapobj);
                } else {
                    agedMapList.get(jSONObject.getString("personid")).add(ageingTableData);
                }
            }
            }

        } catch (ServiceException | JSONException | SessionExpiredException | ParseException e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
            throw ServiceException.FAILURE("getVendorLedgerInvoiceJasper : " + e.getMessage(), e);
        }
        return agedMapList;
    }
    
    
    HashMap <String, Object> getVendorParameterMap(JSONObject request) throws ServiceException {
        HashMap<String, Object> requestParamsAged = new HashMap<>();
        try {

            requestParamsAged.put(GoodsReceiptCMNConstants.COMPANYID, request.optString(Constants.companyKey));
            requestParamsAged.put(GoodsReceiptCMNConstants.GCURRENCYID, request.optString(Constants.globalCurrencyKey));
            requestParamsAged.put(GoodsReceiptCMNConstants.DATEFORMAT, authHandler.getDateOnlyFormat( ));
            requestParamsAged.put(GoodsReceiptCMNConstants.START, request.optString(GoodsReceiptCMNConstants.START));
            requestParamsAged.put(GoodsReceiptCMNConstants.LIMIT, request.optString(GoodsReceiptCMNConstants.LIMIT));
            requestParamsAged.put(GoodsReceiptCMNConstants.SS, request.optString(GoodsReceiptCMNConstants.SS));
            requestParamsAged.put(GoodsReceiptCMNConstants.ACCID, request.optString(GoodsReceiptCMNConstants.ACCID));
            requestParamsAged.put(GoodsReceiptCMNConstants.CASHONLY, request.optString(GoodsReceiptCMNConstants.CASHONLY));
            requestParamsAged.put(GoodsReceiptCMNConstants.CREDITONLY, request.optString(GoodsReceiptCMNConstants.CREDITONLY));
            requestParamsAged.put(GoodsReceiptCMNConstants.IGNOREZERO, request.optString(GoodsReceiptCMNConstants.IGNOREZERO));
            requestParamsAged.put(GoodsReceiptCMNConstants.CURDATE, request.optString(GoodsReceiptCMNConstants.CURDATE));
            requestParamsAged.put(GoodsReceiptCMNConstants.PERSONGROUP, request.optString(GoodsReceiptCMNConstants.PERSONGROUP));
            requestParamsAged.put(GoodsReceiptCMNConstants.ISAGEDGRAPH, request.optString(GoodsReceiptCMNConstants.ISAGEDGRAPH));
            requestParamsAged.put(GoodsReceiptCMNConstants.VENDORID, request.optString(GoodsReceiptCMNConstants.VENDORID));
            requestParamsAged.put(GoodsReceiptCMNConstants.NONDELETED, request.optString(GoodsReceiptCMNConstants.NONDELETED));
            requestParamsAged.put(GoodsReceiptCMNConstants.DURATION, request.optString(GoodsReceiptCMNConstants.DURATION));
            requestParamsAged.put(GoodsReceiptCMNConstants.ISDISTRIBUTIVE, request.optString(GoodsReceiptCMNConstants.ISDISTRIBUTIVE));
            requestParamsAged.put(GoodsReceiptCMNConstants.WITHINVENTORY, request.optString(GoodsReceiptCMNConstants.WITHINVENTORY));
            requestParamsAged.put(Constants.df, authHandler.getDateOnlyFormat( ));
            requestParamsAged.put(Constants.REQ_startdate, request.optString(Constants.REQ_startdate));
            requestParamsAged.put(Constants.REQ_enddate, request.optString(Constants.REQ_enddate));
            requestParamsAged.put("pendingapproval", (request.optString("pendingapproval") != null) ? Boolean.parseBoolean(request.optString("pendingapproval")) : false);
            requestParamsAged.put("istemplate", request.optInt("istemplate",0));
            requestParamsAged.put("datefilter", request.optString("datefilter"));
            requestParamsAged.put("custVendorID", request.optString("custVendorID"));
            requestParamsAged.put("asofdate", request.optString("asofdate"));
            requestParamsAged.put("isAged", request.optString("isAged"));
            requestParamsAged.put("isAgedPayables", true);
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
            throw ServiceException.FAILURE("getVendorParameterMap : " + e.getMessage(), e);
        }

        return requestParamsAged;
    }
    
    @Override
    public List<Object> exportSupplementaryInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        List<Object> list = new ArrayList<Object>();
        Map<String, Object> supplementaryData = new HashMap<String, Object>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            String companyname=!StringUtil.isNullOrEmpty(company.getCompanyName())?company.getCompanyName():"";
            String companyAdress=!StringUtil.isNullOrEmpty(CommonFunctions.getCompanyAddress(company))?CommonFunctions.getCompanyAddress(company):"";            
            String range=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getExciseRangeCode())?extraCompanyPreferences.getExciseRangeCode():"";
            String division=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getExciseDivisionCode())?extraCompanyPreferences.getExciseDivisionCode():"";
            String commissionRate=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getExciseCommissionerateCode())?extraCompanyPreferences.getExciseCommissionerateCode():"";
            String excRegNo=!StringUtil.isNullOrEmpty(extraCompanyPreferences.getEccNumber())?extraCompanyPreferences.getEccNumber():"";
            String buyerName="";
            String buyerState="";
            String invoiceId=request.getParameter("bills");
            String vattinno = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getVatNumber()) ? extraCompanyPreferences.getVatNumber() : "";
            String cstno = !StringUtil.isNullOrEmpty(extraCompanyPreferences.getCstNumber()) ? extraCompanyPreferences.getCstNumber() : "";
            String declaration=(!company.getState().getID().equals("4"))?"Declaration : This is to certify that the price declared herein is as per section 4 of The Central Excise Act. & that the amount indicated in the document represents the price actually charged by us and that there is no additional consideration weight directly or indirectly from the goods that has been declared & if any, differential duty shall be paid if payable.":"Declaration : I/We hereby certify that my/our registration certificate under the Maharashtra Value Added Tax Act,2002 is in force on the date on which the sales of the goods specified in this Tax Invoice is made by me/us and that the transactions of sale covered by this Tax Invoice has been effected by me/us and it shall be accounted for in the turnover of sales while filing of return and the due tax, if any payable on the sale has been paid or shall be paid.";
            KwlReturnObject  data=accInvoiceDAOobj.getSalesInvoiceExciseDetails(invoiceId);
            List list1 = data.getEntityList();
            Iterator itr = list1.iterator();
            int countryid = 0;
            if(company != null && company.getCountry()!= null && !StringUtil.isNullOrEmpty(company.getCountry().getID())){
                countryid = Integer.parseInt(company.getCountry().getID());
            }
            if(itr.hasNext()){
                Object[] oj = (Object[]) itr.next();
                buyerName=oj[2]!=null?oj[2].toString():"";

                if(oj[9]!=null){
                    if(oj[9].toString().equalsIgnoreCase("4"))
                        buyerState="Maharashtra";
                    else if(oj[9].toString().equalsIgnoreCase("5"))
                        buyerState="Uttar Pradesh";
                    else if(oj[9].toString().equalsIgnoreCase("3"))
                        buyerState="Gujarat";    
                    else if(oj[9].toString().equalsIgnoreCase("1"))
                        buyerState="Delhi";        
                    else if(oj[9].toString().equalsIgnoreCase("6"))
                        buyerState="Rajasthan";
                    else if(oj[9].toString().equalsIgnoreCase("7"))
                        buyerState="Haryana";
                }
            }
            String invoiceNo="";
            String invoiceDate="";
            String buyerOrderDate="";
            String deliveryDate="";
            String dateNtimeOfRemovalofgoods="";
            String motorVehicleNo="";
            String modeortermofpayment="";
            double bodtotalamount=0;
            double totalassessablevalue=0;
            
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            filter_names.add("invoice.ID");
            filter_params.add(invoiceId);
            HashMap<String,Object>  invRequestParams=new HashMap<>();
            invRequestParams.put("filter_names", filter_names);
            invRequestParams.put("filter_params", filter_params);
            KwlReturnObject idresult=null;
            idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
            itr=null;
            itr=idresult.getEntityList().iterator();
            String descOfGoods="";
            String tariforhsnclass="";
            String quantity="";
            String rate="";
            String per="";
            String srno="";
            int count=1;
            double amountofItem=0;
            double totalInvoiceAmount=0;
            double overalltotalAmount=0;
            double totalQuantity=0;
            ArrayList< Map<String, Object>> invDetailsList = new ArrayList< Map<String, Object>>();
            ArrayList< Map<String, Object>> tableData = new ArrayList< Map<String, Object>>();
            Map<String, Object> rows = new HashMap<String, Object>();
            Map<String, Object> Exrows = new HashMap<String, Object>();
            double excisePercent = 0;
            double vatPercent = 0;
            double cstPercent = 0;
            double kkcPercent = 0;
            double sbcPercent = 0;
            String curr = "";
            DecimalFormat decimalFormat = new DecimalFormat("0.00");
            KWLCurrency currency = null;
            
            boolean isCformApplicable=false;
            double totalExcDutyAmount=0;
            double totalvatamount=0;
            while(itr.hasNext()){
                srno = String.valueOf(count++);
                double FlatexciseDutyAmount = 0;
                int exciseDutyType=1;
                int VATType=1;
                double FlatVATAmount = 0;
                int CSTType=1;
                double FlatCSTAmount = 0;
                rows = new HashMap<String, Object>();
                Exrows = new HashMap<String, Object>();
                InvoiceDetail row=null;
                row = (InvoiceDetail) itr.next();
                HashMap<String, Object> suppTermParams = new HashMap();
                suppTermParams.put("InvoiceDetailid", row.getID());
                KwlReturnObject salesTermMapresult = accInvoiceDAOobj.getInvoicedetailTermMap(suppTermParams);
                List<InvoiceDetailTermsMap> salesTermsMapList = salesTermMapresult.getEntityList();
                boolean productDescFlag=true;
                for (InvoiceDetailTermsMap salesInvDetailTermMap : salesTermsMapList) {
                    if (salesInvDetailTermMap.getTerm() != null && salesInvDetailTermMap.getTerm().getTermType() == 2) {
                        excisePercent += salesInvDetailTermMap.getTerm().getPercentage();
                        exciseDutyType = salesInvDetailTermMap.getTaxType();
                        FlatexciseDutyAmount = salesInvDetailTermMap.getTerm().getTermAmount();
                    } else if (salesInvDetailTermMap.getTerm() != null && salesInvDetailTermMap.getTerm().getTermType() == 1) {
                        vatPercent += salesInvDetailTermMap.getTerm().getPercentage();
                        VATType = salesInvDetailTermMap.getTaxType();
                        FlatVATAmount = salesInvDetailTermMap.getTerm().getTermAmount();
                    } else if (salesInvDetailTermMap.getTerm() != null && salesInvDetailTermMap.getTerm().getTermType() == 3) {
                        cstPercent += salesInvDetailTermMap.getTerm().getPercentage();
                        CSTType = salesInvDetailTermMap.getTaxType();
                        FlatCSTAmount = salesInvDetailTermMap.getTerm().getTermAmount();
                    } else if (salesInvDetailTermMap.getTerm() != null && salesInvDetailTermMap.getTerm().getTermType() == 5) {
                        kkcPercent += salesInvDetailTermMap.getTerm().getPercentage();
                    } else if (salesInvDetailTermMap.getTerm() != null && salesInvDetailTermMap.getTerm().getTermType() == 6) {
                        sbcPercent += salesInvDetailTermMap.getTerm().getPercentage();
                    }
                }
                    currency = row.getInvoice().getCurrency();
                    curr = currency.getSymbol() != null ? currency.getSymbol() : "";
                    per = row.getInventory().getProduct().getUnitOfMeasure() != null ? row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA() : "";
                    String excideDutyText = "";
                    String rateOfBedText = "";
                    double exciseDutyAmount = 0;
                    amountofItem = row.getInventory().getQuantity() * row.getRate();
                    if (excisePercent != 0 && exciseDutyType == 1 && (amountofItem * (excisePercent / 100)) > 0) {
                        excideDutyText = "Basic Excise Duty @" + excisePercent + "%";
                        exciseDutyAmount = amountofItem * (excisePercent / 100);
                        rateOfBedText = excisePercent + " %";
                    } else if (exciseDutyType == 0 && FlatexciseDutyAmount != 0 && (row.getInventory().getQuantity() * FlatexciseDutyAmount) > 0) {
                        excideDutyText = "Basic Excise Duty @ Rs. " + FlatexciseDutyAmount + " Per " + per;
                        exciseDutyAmount = row.getInventory().getQuantity() * FlatexciseDutyAmount;
                        rateOfBedText = "Rs. " + FlatexciseDutyAmount + " per" + row.getInventory().getQuantity();
                    }

                    invoiceNo = row.getInvoice().getInvoiceNumber();
                    dateNtimeOfRemovalofgoods = invoiceDate = row.getInvoice().getShipDate() != null ? row.getInvoice().getShipDate().toString() : "";
                    motorVehicleNo = row.getInvoice().getShipvia() != null ? row.getInvoice().getShipvia().toString() : "";
                    descOfGoods = StringUtil.isNullOrEmpty(row.getDescription()) ? StringUtil.isNullOrEmpty(row.getInventory().getProduct().getDescription()) ? row.getInventory().getProduct().getName() : row.getInventory().getProduct().getDescription() : row.getDescription();
                    tariforhsnclass = row.getInventory().getProduct().getHSCode() != null ? row.getInventory().getProduct().getHSCode() : "";
                    quantity = String.valueOf(row.getInventory().getQuantity()) != null ? String.valueOf(row.getInventory().getQuantity()) : "";
                    totalQuantity = row.getInventory().getQuantity();
                    rate = String.valueOf(row.getRate()) != null ? String.valueOf(row.getRate()) : "";
                    per = row.getInventory().getProduct().getUnitOfMeasure() != null ? row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA() : "";
                    amountofItem = row.getInventory().getQuantity() * row.getRate();
                    if (productDescFlag) {
                        rows.put("siNo", String.valueOf(srno));
                        rows.put("productDesc", descOfGoods);
                        rows.put("tariffHSNClassify", tariforhsnclass);
                        rows.put("quantity", CustomDesignHandler.getAmountinCommaDecimal(Double.parseDouble(quantity.toString()), 2,countryid));
                        rows.put("rate", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(Double.parseDouble(rate.toString()), 2,countryid));
                        rows.put("per", per);
                        rows.put("amount", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(amountofItem, 2,countryid));
                        invDetailsList.add(rows);
                        totalInvoiceAmount += amountofItem;
                        productDescFlag = false;
                    }

                    if ((excisePercent != 0 || (exciseDutyType == 0 && FlatexciseDutyAmount != 0)) && exciseDutyAmount > 0) {
                        rows = new HashMap<String, Object>();
                        rows.put("siNo", "");
                        rows.put("productDesc", excideDutyText);
                        rows.put("tariffHSNClassify", "");
                        rows.put("quantity", "");
                        rows.put("rate", "");
                        rows.put("per", "");
                        rows.put("amount", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(exciseDutyAmount, 2,countryid));
                        totalExcDutyAmount += exciseDutyAmount;
                        invDetailsList.add(rows);
                    }
                    
                    rows = new HashMap<String, Object>();
                    boolean rowData = false;
                    double temp = 0;
                    if (vatPercent != 0 || cstPercent != 0 || VATType == 0 || CSTType == 0) {
                        if (extraCompanyPreferences.isEnableVatCst()) {
                            temp = (VATType == 0) ? (row.getInventory().getQuantity() * FlatVATAmount) : (amountofItem + totalExcDutyAmount) * (vatPercent / 100);
                            if (temp > 0) {
                                rows.put("rate", "");
                                rows.put("amount", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(temp, 2,countryid));
                                rows.put("productDesc", (VATType == 0) ? "Output VAT @" + curr + ". " + FlatVATAmount + " Per " + per : "Output VAT @" + vatPercent + "%");
                                rowData = true;
                            }
                        } else {
                            isCformApplicable = row.getInvoice().getCustomer().isCformapplicable();
                            if (!isCformApplicable) {
                                temp = (VATType == 0) ? (row.getInventory().getQuantity() * FlatVATAmount) : (amountofItem + totalExcDutyAmount) * (vatPercent / 100);
                                if (temp > 0) {
                                    rows.put("rate", "");
                                    rows.put("amount", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(temp, 2,countryid));
                                    rows.put("productDesc", (VATType == 0) ? "Output CST @" + curr + ". " + FlatVATAmount + " Per " + per : "Output CST @" + vatPercent + "%");
                                    rowData = true;
                                }
                            } else {
                                temp = (CSTType == 0) ? (row.getInventory().getQuantity() * FlatCSTAmount) : (amountofItem + totalExcDutyAmount) * (cstPercent / 100);
                                if (temp > 0) {
                                    rows.put("rate", "");
                                    rows.put("amount", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(temp, 2,countryid));
                                    rows.put("productDesc", (CSTType == 0) ? "Output CST @" + curr + ". " + FlatCSTAmount + " Per " + per : "Output CST @" + cstPercent + "%");
                                    rowData = true;
                                }
                            }
                        }
                        totalvatamount += temp;
                        if (rowData) {
                            rows.put("siNo", "");
                            rows.put("tariffHSNClassify", "");
                            rows.put("per", "");
                            rows.put("quantity", "");
                            invDetailsList.add(rows);
                        }
                    }

                    if (sbcPercent > 0) {
                        double sbcAmount = 0;
                        sbcAmount = amountofItem * (sbcPercent / 100);
                        exciseDutyAmount += sbcAmount;
                        rows = new HashMap<String, Object>();
                        rows.put("siNo", "");
                        rows.put("productDesc", "Swachh Bharat Cess@" + sbcPercent);
                        rows.put("tariffHSNClassify", "");
                        rows.put("quantity", "");
                        rows.put("rate", "");
                        rows.put("per", " ");
                        rows.put("amount", String.valueOf(curr + " " + CustomDesignHandler.getAmountinCommaDecimal(sbcAmount, 2,countryid)));
                        invDetailsList.add(rows);
                        totalvatamount += sbcAmount;
                    }
                    if (kkcPercent > 0) {
                        double kkcAmount = 0;
                        kkcAmount = amountofItem * (kkcPercent / 100);
                        exciseDutyAmount += kkcAmount;
                        rows = new HashMap<String, Object>();
                        rows.put("siNo", "");
                        rows.put("productDesc", "Krishi Kalyan Cess@" + kkcPercent);
                        rows.put("tariffHSNClassify", "");
                        rows.put("quantity", "");
                        rows.put("rate", "");
                        rows.put("per", " ");
                        rows.put("amount", String.valueOf(curr + " " + CustomDesignHandler.getAmountinCommaDecimal(kkcAmount, 2,countryid)));
                        invDetailsList.add(rows);
                        totalvatamount += kkcAmount;
                    }

                    overalltotalAmount = amountofItem;
                    totalassessablevalue += excisePercent > 0.0 ? amountofItem - (totalExcDutyAmount) : 0;
                    bodtotalamount += exciseDutyAmount;

                    excisePercent = 0;
                    FlatexciseDutyAmount = 0;
                    vatPercent = 0;
                    FlatVATAmount = 0;
                    cstPercent = 0;
                    FlatCSTAmount = 0;
            }
            overalltotalAmount =overalltotalAmount+totalExcDutyAmount+totalvatamount;
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            
            KwlReturnObject invResult = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceId);
            Invoice spplimentaryInv = (Invoice) invResult.getEntityList().get(0);
            Invoice originalInv=spplimentaryInv.getParentInvoice();
            
            currency = originalInv.getCurrency();
            curr = currency.getSymbol() != null ? currency.getSymbol() : "";
            
            //Supplementary Invoice operations
            String deliveryNote="";
            KwlReturnObject doresult = accInvoiceDAOobj.getDeliveryOrderFromInvoice(invoiceId,companyid);
            List list123 = doresult.getEntityList();
            if(list123.size()>0){
                Iterator ite1 = list123.iterator();               
                while(ite1.hasNext()){                       
                    deliveryNote = (String)ite1.next();
                }
            }
            filter_names=new ArrayList();
            filter_params=new ArrayList();
            filter_names.add("invoice.ID");
            filter_params.add(invoiceId);
            HashMap<String,Object>  suppInvParams=new HashMap<>();
            suppInvParams.put("filter_names", filter_names);
            suppInvParams.put("filter_params", filter_params);
            KwlReturnObject suppResult=null;
            suppResult = accInvoiceDAOobj.getInvoiceDetails(suppInvParams);
            Iterator suppItr=null;
            suppItr=suppResult.getEntityList().iterator();
            InvoiceDetail suppRowDetails=(InvoiceDetail) suppItr.next();
            
            //Original Invoice operations
            double FlatexciseDutyAmount = 0;
            int exciseDutyType=1;
            filter_names=new ArrayList();
            filter_params=new ArrayList();
            filter_names.add("invoice.ID");
            filter_params.add(originalInv.getID());
            HashMap<String,Object>  originInvParams=new HashMap<>();
            originInvParams.put("filter_names", filter_names);
            originInvParams.put("filter_params", filter_params);
            KwlReturnObject originResult=null;
            originResult = accInvoiceDAOobj.getInvoiceDetails(originInvParams);
            Iterator originItr=null;
            originItr=originResult.getEntityList().iterator();
            InvoiceDetail originRowDetails=(InvoiceDetail) originItr.next();
            HashMap<String, Object> suppTermParams = new HashMap();
            suppTermParams.put("InvoiceDetailid", originRowDetails.getID());
            KwlReturnObject salesTermMapresult = accInvoiceDAOobj.getInvoicedetailTermMap(suppTermParams);
            List<InvoiceDetailTermsMap> salesTermsMapList = salesTermMapresult.getEntityList();
            for (InvoiceDetailTermsMap salesInvDetailTermMap : salesTermsMapList) {
                if (salesInvDetailTermMap.getTerm() != null && salesInvDetailTermMap.getTerm().getTermType() == 2 && !salesInvDetailTermMap.getTerm().isIsAdditionalTax()) {  // Only Base excise duty
                    excisePercent += salesInvDetailTermMap.getTerm().getPercentage();
                    exciseDutyType=salesInvDetailTermMap.getTaxType();
                    FlatexciseDutyAmount=salesInvDetailTermMap.getTerm().getTermAmount();
                } else if (salesInvDetailTermMap.getTerm() != null && salesInvDetailTermMap.getTerm().getTermType() == 1) {
                    vatPercent += salesInvDetailTermMap.getTerm().getPercentage();
                } else if (salesInvDetailTermMap.getTerm() != null && salesInvDetailTermMap.getTerm().getTermType() == 3) {
                    cstPercent += salesInvDetailTermMap.getTerm().getPercentage();
                } 
            }
            
            String excideDutyText="";
            String rateOfBedText="";
            double exciseDutyAmount=0;
            double originalExciseDutyAmount=0;
            per=originRowDetails.getInventory().getProduct().getUnitOfMeasure()!=null?originRowDetails.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA():"";
            amountofItem=originRowDetails.getInventory().getQuantity() * originRowDetails.getRate();
            if(exciseDutyType==1){
                excideDutyText=excisePercent+"%";
                exciseDutyAmount=originalExciseDutyAmount=amountofItem*(excisePercent/100);
                rateOfBedText=excisePercent+" %";
            }else if(exciseDutyType==0){
                excideDutyText=curr + ". " +FlatexciseDutyAmount+" Per "+per ;
                exciseDutyAmount=originalExciseDutyAmount=originRowDetails.getInventory().getQuantity()*FlatexciseDutyAmount;
                rateOfBedText="Rs. "+FlatexciseDutyAmount+" per" +originRowDetails.getInventory().getQuantity() ;
            }

            //Table 2 Original Invoice
            HashMap<String, Object> tableMap = new HashMap<String, Object>();
            tableMap.put("goodsDesc", "a) Original");
            tableMap.put("goodsQuantity", CustomDesignHandler.getAmountinCommaDecimal(originRowDetails.getInventory().getQuantity(),2,countryid)+"");
            tableMap.put("ratePerUnit", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(originRowDetails.getRate(),2,countryid)+"");
            tableMap.put("assessableValue", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(originRowDetails.getInventory().getQuantity()*originRowDetails.getRate(),2,countryid)+"");
            tableMap.put("rateOfBED",  excideDutyText+"");
            tableMap.put("BEDAmount", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(exciseDutyAmount,2,countryid)+"");
            tableData.add(tableMap);
            
            //Table 2 Revised/Supplementary Invoice
            
            suppTermParams = new HashMap();
            suppTermParams.put("InvoiceDetailid", suppRowDetails.getID());
            salesTermMapresult = accInvoiceDAOobj.getInvoicedetailTermMap(suppTermParams);
            salesTermsMapList = salesTermMapresult.getEntityList();
            excisePercent=0.0;
            for (InvoiceDetailTermsMap salesInvDetailTermMap : salesTermsMapList) {
                if (salesInvDetailTermMap.getTerm() != null && salesInvDetailTermMap.getTerm().getTermType() == 2 && !salesInvDetailTermMap.getTerm().isIsAdditionalTax()) {
                    excisePercent += salesInvDetailTermMap.getTerm().getPercentage();
                    exciseDutyType=salesInvDetailTermMap.getTaxType();
                    FlatexciseDutyAmount=salesInvDetailTermMap.getTerm().getTermAmount();
                } else if (salesInvDetailTermMap.getTerm() != null && salesInvDetailTermMap.getTerm().getTermType() == 1) {
                    vatPercent += salesInvDetailTermMap.getTerm().getPercentage();
                } else if (salesInvDetailTermMap.getTerm() != null && salesInvDetailTermMap.getTerm().getTermType() == 3) {
                    cstPercent += salesInvDetailTermMap.getTerm().getPercentage();
                } 
            }
            per=suppRowDetails.getInventory().getProduct().getUnitOfMeasure()!=null?suppRowDetails.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA():"";
            amountofItem=suppRowDetails.getInventory().getQuantity() * suppRowDetails.getRate();
            if(exciseDutyType==1){
                excideDutyText=excisePercent+"%";
                exciseDutyAmount=amountofItem*(excisePercent/100);
                rateOfBedText=excisePercent+" %";
            }else if(exciseDutyType==0){
                excideDutyText=curr + ". " +FlatexciseDutyAmount+" Per "+per ;
                exciseDutyAmount=suppRowDetails.getInventory().getQuantity()*FlatexciseDutyAmount;
                rateOfBedText="Rs. "+FlatexciseDutyAmount+" per" +suppRowDetails.getInventory().getQuantity() ;
            }
            
            currency = spplimentaryInv.getCurrency();
            curr = currency.getSymbol() != null ? currency.getSymbol() : "";
            tableMap = new HashMap<String, Object>();
            tableMap.put("goodsDesc", "b) Revised");
            tableMap.put("goodsQuantity", CustomDesignHandler.getAmountinCommaDecimal(suppRowDetails.getInventory().getQuantity(),2,countryid)+"");
            tableMap.put("ratePerUnit", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(suppRowDetails.getRate(),2,countryid)+"");
            tableMap.put("assessableValue", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal((suppRowDetails.getInventory().getQuantity()*suppRowDetails.getRate()),2,countryid)+"");
            tableMap.put("rateOfBED", excideDutyText+"");
            tableMap.put("BEDAmount", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal((exciseDutyType!=1)?exciseDutyAmount:(originalExciseDutyAmount+exciseDutyAmount),2,countryid)+"");
            tableData.add(tableMap);

            supplementaryData.put("tableTwoDetails", new JRBeanCollectionDataSource(tableData));
            supplementaryData.put("tableOneDetails",new JRBeanCollectionDataSource(invDetailsList));   
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            int countryLanguageId = Constants.CountryIndiaLanguageId;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currencyForWords = (KWLCurrency) curresult.getEntityList().get(0);
            exciseDutyAmount=(exciseDutyType==0)?0:exciseDutyAmount;//In case of flat
            String amountofdutyinwords=EnglishNumberToWordsOjb.convert(exciseDutyAmount, currencyForWords, countryLanguageId) + " only.";
            String totalSuppInvoiceAmountWords=EnglishNumberToWordsOjb.convert(overalltotalAmount, currencyForWords, countryLanguageId) + " only.";
            
            supplementaryData.put("companyName",companyname);
            supplementaryData.put("companyAddress",companyAdress);
            supplementaryData.put("exciseRegNo",excRegNo);
            supplementaryData.put("range",range);
            supplementaryData.put("division",division);
            supplementaryData.put("invoiceNo",invoiceNo);
            supplementaryData.put("eSugamNo","");
//            supplementaryData.put("invoiceDate",suppRowDetails.getInvoice().getJournalEntry().getEntryDate()!=null?suppRowDetails.getInvoice().getJournalEntry().getEntryDate().toString():"");
            supplementaryData.put("invoiceDate",suppRowDetails.getInvoice().getCreationDate()!=null?suppRowDetails.getInvoice().getCreationDate().toString():"");
//            supplementaryData.put("buyerOrderDate",(suppRowDetails.getSalesorderdetail()!=null)?((suppRowDetails.getSalesorderdetail().getSalesOrder().getDueDate()!=null)?suppRowDetails.getSalesorderdetail().getSalesOrder().getDueDate().toString():""):"");
            supplementaryData.put("deliveryDate",(suppRowDetails.getDeliveryOrderDetail()!=null)?((suppRowDetails.getDeliveryOrderDetail().getDeliveryOrder()!=null)?df.format(new Date(suppRowDetails.getDeliveryOrderDetail().getDeliveryOrder().getCreatedon())).toString():""):"");
//            supplementaryData.put("dateandtimeofRemovalGoods",suppRowDetails.getInvoice().getJournalEntry().getEntryDate()!=null?suppRowDetails.getInvoice().getJournalEntry().getEntryDate().toString():"");
            supplementaryData.put("dateandtimeofRemovalGoods",suppRowDetails.getInvoice().getCreationDate()!=null?suppRowDetails.getInvoice().getCreationDate().toString():"");
            supplementaryData.put("motorVehicleNo",motorVehicleNo);
//            supplementaryData.put("dateandtimeissueofInvoice",suppRowDetails.getInvoice().getJournalEntry().getEntryDate()!=null?suppRowDetails.getInvoice().getJournalEntry().getEntryDate().toString():"");
            supplementaryData.put("dateandtimeissueofInvoice",suppRowDetails.getInvoice().getCreationDate()!=null?suppRowDetails.getInvoice().getCreationDate().toString():"");
            supplementaryData.put("modeTermsOfPayment",modeortermofpayment);
            supplementaryData.put("totalQuantity",CustomDesignHandler.getAmountinCommaDecimal(totalQuantity,2,countryid)+"");
            supplementaryData.put("amountOfDutyInWords",amountofdutyinwords);
            supplementaryData.put("totalAmount",curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(overalltotalAmount,2,countryid)+"");
            supplementaryData.put("commissionerate",commissionRate+"");
            supplementaryData.put("buyer",originalInv.getCustomer().getName());
            supplementaryData.put("destination", buyerState);
            supplementaryData.put("despatchedThrough", spplimentaryInv.getShipvia());         
            supplementaryData.put("amountChargeableInWords", totalSuppInvoiceAmountWords);         
            supplementaryData.put("diffAssessableValu", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(Math.abs(originRowDetails.getInventory().getQuantity()*originRowDetails.getRate()-suppRowDetails.getInventory().getQuantity()*suppRowDetails.getRate()),2,countryid)+"");          
            supplementaryData.put("forCompany", "For "+companyname);          
            supplementaryData.put("diffBEDAmount", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(exciseDutyAmount,2,countryid)+"");  
            supplementaryData.put("deliveryNote",deliveryNote);
            supplementaryData.put("dispatchDocNo",(suppRowDetails.getDeliveryOrderDetail()!=null)?suppRowDetails.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber():"");
//            supplementaryData.put("buyersOrderNo",(suppRowDetails.getSalesorderdetail()!=null)?suppRowDetails.getSalesorderdetail().getSalesOrder().getSalesOrderNumber():"");
            supplementaryData.put("diffPerUnit", curr + ". " + CustomDesignHandler.getAmountinCommaDecimal(Math.abs((suppRowDetails.getRate()-originRowDetails.getRate())),2,countryid)+"");
            supplementaryData.put("changedQuantity",  CustomDesignHandler.getAmountinCommaDecimal(Math.abs((suppRowDetails.getInventory().getQuantity()-originRowDetails.getInventory().getQuantity())),2,countryid)+""+"");
            supplementaryData.put("supRefOrderNo","");  
            supplementaryData.put("authenticatedBy", "");      
            supplementaryData.put("serialNoInPLARG23", "");
            supplementaryData.put("VATTIN", vattinno);
            supplementaryData.put("CSTTIN", cstno);
            supplementaryData.put("declaration", declaration);
            
            response.setHeader("Content-Disposition", "attachment;filename=\"" + "SupplementaryInvoice"+invoiceNo+".pdf\"");
            JasperPrint jasperPrint = null;
            List salesInvoiceList = new ArrayList();
            OnlyDatePojo odp = new OnlyDatePojo();
            userdf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            odp.setDate(userdf.format(new Date()));
            salesInvoiceList.add(odp);
            JasperReport jasperReport = null;
            InputStream inputStream = null;
            inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SupplementaryInvoice.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(salesInvoiceList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, supplementaryData, beanColDataSource);
            list.add(jasperPrint);
        } catch (Exception ex) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
      /**
     * Description : To export separate SOA for each customer/vendor selected and group them to ZIp file for Download
     * @param request
     * @param response
     * @param iscustomer // Used to check SOA for Customer or Vendor
     * @throws Exception 
   
     */
    @Override
    public void exportSOAtoZIP_FILE(JSONObject request, boolean iscustomer) throws Exception {
        final File file = new File(request.optString("filename"));
        final FileOutputStream bos = new FileOutputStream(file);
        final ZipOutputStream zos = new ZipOutputStream(bos);
        String companyid = request.optString(Constants.companyKey);
        List<String> custList = new ArrayList<>();
        try {
            String customerIds = "";
            if (iscustomer) {
                customerIds = StringUtil.isNullOrEmpty(request.optString("customerIds")) ? "" : request.optString("customerIds");
            } else {
                customerIds = StringUtil.isNullOrEmpty(request.optString("vendorIds")) ? "" : request.optString("vendorIds");
            }

            if (iscustomer) {
                HashMap<String, Object> requestParams1 = new HashMap();
                requestParams1.put(Constants.companyKey, companyid);
                requestParams1.put("custVendorID", customerIds);
                KwlReturnObject custResult = accCustomerDAOobj.getCustomerForAgedReceivable(requestParams1);
                custList = custResult.getEntityList();
            } else {
                HashMap<String, Object> requestParams1 = new HashMap();
                requestParams1.put(Constants.companyKey, companyid);
                requestParams1.put("custVendorID", customerIds);
                KwlReturnObject custResult = accVendorDAOobj.getVendorForAgedPayable(requestParams1);
                custList = custResult.getEntityList();
            }


            if (custList != null && !custList.isEmpty()) {
                for (Object custId : custList) {
                    String cutCode = "";
                    request.put("isCurrencyDetails", false);
                    JasperPrint jasperPrint = null;
                    if (iscustomer) {
                        request.put("customerIds", custId.toString());
                        jasperPrint = exportCustomerLedgerJasperReport(request);
                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), custId.toString());
                        Customer customer = (Customer) cmpresult.getEntityList().get(0);
                        cutCode = customer.getAcccode() != null ? customer.getAcccode() : "";
                    } else {
                        request.put("vendorIds", custId.toString());
                        jasperPrint = exportVendorLedgerJasperReport(request);
                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), custId.toString());
                        Vendor customer = (Vendor) cmpresult.getEntityList().get(0);
                        cutCode = customer.getAcccode() != null ? customer.getAcccode() : "";
                    }
                    if (jasperPrint == null) {
                        continue;
                    }
                    final byte[] bytes = JasperExportManager.exportReportToPdf(jasperPrint);

                    final ZipEntry ze = new ZipEntry("Statement_" + cutCode + ".pdf");
                    zos.putNextEntry(ze);
                    zos.write(bytes, 0, bytes.length);
                    zos.closeEntry();
                }
                zos.close();
            }
        } catch (Exception e) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
            throw ServiceException.FAILURE("exportSOAtoZIP_FILE : " + e.getMessage(), e);
        }

    }
    
    @Override
    public void exportSOAtoZIP_FILE(JSONObject request, HttpServletResponse response, boolean iscustomer) throws Exception {

        final BufferedOutputStream bos = new BufferedOutputStream(response.getOutputStream());
        final ZipOutputStream zos = new ZipOutputStream(bos);
        String companyid = request.optString(Constants.companyKey);
        List<String> custList = new ArrayList<>();
        response.reset();
        try {
            int reportid = !StringUtil.isNullOrEmpty(request.optString("reportid")) ? Integer.parseInt(request.optString("reportid")) : -1;
            if (reportid == Constants.SOA_VENDOR_ACCOUNT_STATEMENT_REPORTID) {
                response.setHeader("Content-Disposition", "attachment; filename=\"" + ("SOA - VendorAccount Statement_v1.zip\";"));
            } else if (reportid == Constants.SOA_CUSTOMER_ACCOUNT_STATEMENT_REPORTID) {
                response.setHeader("Content-Disposition", "attachment; filename=\"" + ("SOA - CustomerAccount Statement_v1.zip\";"));
            } else {
                response.setHeader("Content-Disposition", "attachment; filename=\"" + (iscustomer ? "Customer_SOA.zip\";" : "Vendor_SOA.zip\";"));
            }
            String customerIds = "";
            if (iscustomer) {
                customerIds = StringUtil.isNullOrEmpty(request.optString("customerIds")) ? "" : request.optString("customerIds");
            } else {
                customerIds = StringUtil.isNullOrEmpty(request.optString("vendorIds")) ? "" : request.optString("vendorIds");
            }


            if (iscustomer) {
                HashMap<String, Object> requestParams1 = new HashMap();
                requestParams1.put(Constants.companyKey, companyid);
                requestParams1.put("custVendorID", customerIds);
                KwlReturnObject custResult = accCustomerDAOobj.getCustomerForAgedReceivable(requestParams1);
                custList = custResult.getEntityList();
            } else {
                HashMap<String, Object> requestParams1 = new HashMap();
                requestParams1.put(Constants.companyKey, companyid);
                requestParams1.put("custVendorID", customerIds);
                KwlReturnObject custResult = accVendorDAOobj.getVendorForAgedPayable(requestParams1);
                custList = custResult.getEntityList();
            }

            if (custList != null && !custList.isEmpty()) {
                for (Object custId : custList) {
                    String cutCode = "";
                    request.put("isCurrencyDetails", false);
                    JasperPrint jasperPrint = null;
                    if (iscustomer) {
                        request.put("customerIds", custId.toString());
                        jasperPrint = exportCustomerLedgerJasperReport(request);
                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), custId.toString());
                        Customer customer = (Customer) cmpresult.getEntityList().get(0);
                        cutCode = customer.getAcccode() != null ? customer.getAcccode() : "";
                    } else {
                        request.put("vendorIds", custId);
                        jasperPrint = exportVendorLedgerJasperReport(request);
                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), custId.toString());
                        Vendor customer = (Vendor) cmpresult.getEntityList().get(0);
                        cutCode = customer.getAcccode() != null ? customer.getAcccode() : "";
                    }
                    if (jasperPrint == null) {
                        continue;
                    }

                    final byte[] bytes = JasperExportManager.exportReportToPdf(jasperPrint);

                    final ZipEntry ze = new ZipEntry("Statement_" + cutCode + ".pdf");
                    zos.putNextEntry(ze);
                    zos.write(bytes, 0, bytes.length);
                    zos.closeEntry();
                }
                zos.close();
            }
        } catch (Exception e) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
            throw ServiceException.FAILURE("exportSOAtoZIP_FILE : " + e.getMessage(), e);
        }

    }
    
    public JSONObject exportSalesReturn(JSONObject paramJobj) throws ServiceException, SessionExpiredException {      //ERP-30208 : Sales Return only
        JSONObject JSONObjectData = new JSONObject();
        try{
            JSONObjectData = exportSalesReturnWithCN(paramJobj);
        }catch (Exception e) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
        }
        return JSONObjectData;
    }

    public JSONObject exportSalesReturnWithCN(JSONObject paramJobj) throws ServiceException, SessionExpiredException {
        JSONObject JSONObjectData = new JSONObject();
        String billid = "", CNNumber = "", companyId = "", imageFilePath = "", imageType = "";
        try {
            String recordIDs = (paramJobj.has("recordids") && paramJobj.getString("recordids") != null) ? paramJobj.getString("recordids") : "";
            int templateflag = (paramJobj.has("templateflag") && !StringUtil.isNullOrEmpty(paramJobj.getString("templateflag"))) ? Integer.parseInt(paramJobj.getString("templateflag")) : 0;
            int moduleid = (paramJobj.has("moduleid") && paramJobj.get("moduleid") != null) ? paramJobj.getInt("moduleid") : 0; 
            String recArray[] = recordIDs.split(",");
            imageType = (paramJobj.has("imagetype") && paramJobj.get("imagetype") != null) ? paramJobj.getString("imagetype") : "png";    
            if (recArray.length != 0) {
                try {
                    companyId = (paramJobj.has(Constants.companyKey) && paramJobj.get(Constants.companyKey) != null) ? paramJobj.getString(Constants.companyKey) : "";
                    KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyId);
                    //ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (String s : recArray) {
                    billid = s;     //"402880f15992523f0159928817270001";

                    if (StringUtil.isNullOrEmpty(billid)) {
                        billid = paramJobj.getString("bills") != null ? paramJobj.getString("bills") : "";
                    }
                    JSONObject globalLevelJsobj = new JSONObject();  //Map<String, Object> SalesReturnMap = new HashMap<String, Object>();

                    //DateFormat df = (paramJobj.has(Constants.userdateformat) && paramJobj.get(Constants.userdateformat) != null) ? (DateFormat) paramJobj.get(Constants.userdateformat) : authHandler.getDateOnlyFormat();
                    String format = (paramJobj.has("userdateform") && paramJobj.get("userdateform") != null) ? paramJobj.getString("userdateform") : "yyyy-MM-dd";
                    DateFormat df = new SimpleDateFormat(format);
                    try {
                        KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyId);
                        CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
                        Company company = (Company) cmpresult.getEntityList().get(0);
                        String posno = "";
                        Date date = null;   //Transaction date
                        String entryno = "";    //Transaction No.    
                        String salesperson = "";
                        String coregno = "197602340C", gstregno = "M2-00025439-2";
                        //Customer Details
                        String customerName = "";
                        String custaccountcode = "";
                        String billaddress = "";
                        String shipaddress = "";
                        String custphone = "";

                        SalesReturn sr = null;
                        sr = (SalesReturn) kwlCommonTablesDAOObj.getClassObject(SalesReturn.class.getName(), billid);
                        CreditNote creditNote = null;
                        if (sr.isIsNoteAlso()) {
                            KwlReturnObject creditnoteresult = accCreditNoteDAOobj.getCreditNoteIdFromSRId(sr.getID(), companyId);
                            if (!creditnoteresult.getEntityList().isEmpty()) {
                                creditNote = (CreditNote) creditnoteresult.getEntityList().get(0);
                            }
                        }
                        if (creditNote != null) {
                            CNNumber = creditNote.getCreditNoteNumber();
                        }
                        entryno = sr.getSalesReturnNumber();
                        date = sr.getOrderDate();

                        customerName = sr.getCustomer().getName() != null ? sr.getCustomer().getName() : "";
                        custaccountcode = sr.getCustomer().getAcccode() != null ? sr.getCustomer().getAcccode() : "";
                        
                        
                        //Company Details
                        globalLevelJsobj.put("COMPANY_NAME", company.getCompanyName() != null ? company.getCompanyName() : "");     //SalesReturnMap.put("COMPANY_NAME", company.getCompanyName() != null ? company.getCompanyName() : "");
                        globalLevelJsobj.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyId, accountingHandlerDAOobj));  //SalesReturnMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyId, accountingHandlerDAOobj));

                        //Company Registration Details
                        String comregnumber = "";
                        if (!StringUtil.isNullOrEmpty(companyAccountPreferences.getCompanyUEN())) {
                            comregnumber = "CO Reg.No.:" + companyAccountPreferences.getCompanyUEN();
                        }
                        if (!StringUtil.isNullOrEmpty(companyAccountPreferences.getGstNumber())) {
                            if (comregnumber != "") {
                                comregnumber = comregnumber + "/";
                            }
                            comregnumber = comregnumber + "GST No.:" + companyAccountPreferences.getGstNumber();
                        }
                        globalLevelJsobj.put("coregno", comregnumber);  //SalesReturnMap.put("coregno", comregnumber);

                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyId);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("customerid", sr.getCustomer().getID());
                        CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                        custphone = (customerAddressDetails == null) ? (StringUtil.isNullOrEmpty(sr.getCustomer().getContactNumber()) ? "" : sr.getCustomer().getContactNumber()) : (StringUtil.isNullOrEmpty(customerAddressDetails.getPhone()) ? "" : customerAddressDetails.getPhone());
                        billaddress = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        addressParams.put("isBillingAddress", false);
                        shipaddress = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        
                        //Customer  Details
                        globalLevelJsobj.put("custaccountcode", custaccountcode);
                        globalLevelJsobj.put("customerName", customerName);
                        globalLevelJsobj.put("billaddress", billaddress);
                        globalLevelJsobj.put("shipaddress", shipaddress);
                        globalLevelJsobj.put("custphone", custphone);

                        globalLevelJsobj.put("posno", posno);
                        globalLevelJsobj.put("date", df.format(date));
                        if(moduleid==Constants.Acc_Sales_Return_ModuleId){  //29
                            globalLevelJsobj.put("linknumber", "");     
                        } else if(moduleid==Constants.Acc_Credit_Note_ModuleId){   //12
                            globalLevelJsobj.put("linknumber", CNNumber);   
                        }
                        globalLevelJsobj.put("entryno", entryno);
                        globalLevelJsobj.put("salesperson", (sr.getSalesperson() != null) ? sr.getSalesperson().getValue() : "");
                        globalLevelJsobj.put("entryno", entryno);
                        
                        
                        HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                        order_by.add("srno");
                        order_type.add("asc");
                        invRequestParams.put("order_by", order_by);
                        invRequestParams.put("order_type", order_type);
                        KwlReturnObject idresult = null;
                        Iterator itr = null;
                        filter_names.add("salesReturn.ID");
                        filter_params.add(sr.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        
                        //Company Contact Details
                        String contactdetails = "";
                        if (!StringUtil.isNullOrEmpty(company.getPhoneNumber())) {
                            contactdetails = "Tel.:" + company.getPhoneNumber();
                        }
                        if (!StringUtil.isNullOrEmpty(company.getEmailID())) {
                            if (contactdetails != "") {
                                contactdetails = contactdetails + "  ";
                            }
                            contactdetails = contactdetails + "Email:" + company.getEmailID();
                        }
                        globalLevelJsobj.put("contactdetails", contactdetails);

                        idresult = accInvoiceDAOobj.getSalesReturnDetails(invRequestParams);
                        itr = idresult.getEntityList().iterator();
                        double total = 0;
                        double rowtaxamount = 0;
                        double totalTaxAmount = 0;
                        int i = 0;
                        //Map<String, Object> rows = new HashMap<String, Object>();
                        JSONArray linelevelJsarr = new JSONArray();
                        JSONObject linelevelJsobj = null;
                        while (itr.hasNext()) {
                            linelevelJsobj = new JSONObject();
                            i++;
                            String prodId = "";
                            String prodName = "";
                            String prodDesc = "";
                            double Uprice = 0;
                            double amount = 0;
                            double quantity = 0;
                            String Uom = "";
                            String discountType = "Percentage";
                            double partamount = 0;
                            double discount = 0;
                            String discountpercent = "";

                            SalesReturnDetail row = (SalesReturnDetail) itr.next();
                            prodId = row.getProduct().getProductid() != null ? row.getProduct().getProductid() : "";
                            prodName = row.getProduct().getName() != null ? row.getProduct().getName() : "";
                            quantity = row.getReturnQuantity();
                            //rowtaxcode = row.getTax() != null ? row.getTax().getTaxCode() : "";

                            if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                                prodDesc =  !StringUtil.isNullOrEmpty(row.getDescription()) ? row.getDescription() : row.getProduct().getDescription();
                            }
                            if ((row.getDodetails() != null) && (!(row.getDodetails().equals("undefined")))) {
                                if (row.getDodetails().getCidetails() != null) {
                                    salesperson = row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson().getValue()) ? row.getDodetails().getCidetails().getInvoice().getMasterSalesPerson().getValue() : "" : "";
                                }
                            } else if (row.getCidetails() != null) {
                                salesperson = row.getCidetails().getInvoice().getMasterSalesPerson() != null ? !StringUtil.isNullOrEmpty(row.getCidetails().getInvoice().getMasterSalesPerson().getValue()) ? row.getCidetails().getInvoice().getMasterSalesPerson().getValue() : "" : "";
                                Invoice invoice = row.getCidetails().getInvoice();
                                /*
                                 * If linked Invoice with SR is partial then
                                 * fetching partamount
                                 */
                                if (invoice != null && invoice.isPartialinv()) {
                                    partamount = row.getCidetails().getPartamount();

                                }
                            }
                            Uprice = row.getRate();
                            amount = Uprice * quantity;
                            /*
                             * If Sales Return is linked with Partial Invoice
                             * then partial amount of SI used in SR is fetched
                             */
                            if (partamount != 0) {
                                amount = amount * (partamount / 100);
                            }

                            if (row.getDiscountispercent() == 0) {
                                discount = row.getDiscount();//Flat
                                discountType = "Flat";
                            } else {
                                discountpercent = authHandler.formattedAmount(row.getDiscount(), companyId)+"%";
                                discount = amount * (row.getDiscount() / 100);//Percentage Value
                                discountType = "Percentage";
                            }
                            double produamount = amount + row.getRowTaxAmount();
                            double amountafterdiscount = amount;
                            amountafterdiscount -= discount;
                            total += amountafterdiscount;                            
                            //rowtaxamount = row.getRowTaxAmount();
                            totalTaxAmount += row.getRowTaxAmount();
                            Uom = row.getUom() != null ? row.getUom().getNameEmptyforNA() : (row.getProduct().getUnitOfMeasure()!=null ? row.getProduct().getUnitOfMeasure().getNameEmptyforNA() : "");
                            //if (templateflag == Constants.GohYeowSeng_templateflag) {
                            linelevelJsobj.put("sNo", (i + ""));
                            linelevelJsobj.put("productDescription", prodDesc);
                            linelevelJsobj.put("qty", authHandler.formattedQuantity(quantity, companyId));
                            linelevelJsobj.put("uPrice", authHandler.formattedAmount(Uprice, companyId));
                            linelevelJsobj.put("productAmount", authHandler.formattedAmount(produamount, companyId));
                            linelevelJsobj.put("dicounttype", discountType);
                            linelevelJsobj.put("uom", Uom);
                            linelevelJsobj.put("discountpercent", discountpercent);
                            linelevelJsobj.put("discountamount", ("(" + authHandler.formattedAmount(discount, companyId) + ")"));
                            linelevelJsarr.put(linelevelJsobj);       

                        }
                        JSONObjectData.put("SubReportList", linelevelJsarr);
                        globalLevelJsobj.put("datePojo", sr.getOrderDate().toString());

                        globalLevelJsobj.put("gsttaxpercent", "");      //SalesReturnMap.put("gsttaxpercent", "" + "");
                        globalLevelJsobj.put("gstamount", "");     //SalesReturnMap.put("gstamount", "" + "");
                        if (totalTaxAmount == 0 && sr.getTax() != null) {
                            double taxPercent = 0;
                            KwlReturnObject taxresult = accTaxObj.getTaxPercent(companyId, sr.getOrderDate(), sr.getTax().getID());
                            taxPercent = (Double) taxresult.getEntityList().get(0);
                            totalTaxAmount = (taxPercent == 0 ? 0 : authHandler.round((total * taxPercent / 100), companyId));
                            //SalesReturnMap.put("gsttaxpercent", "" + authHandler.formattedCommaSeparatedAmount(taxPercent)+"%");
                            globalLevelJsobj.remove("gsttaxpercent");
                            globalLevelJsobj.put("gsttaxpercent", "" + authHandler.formattedCommaSeparatedAmount(taxPercent, companyId) + "%");

                            //SalesReturnMap.put("gstamount", "" + authHandler.formattedCommaSeparatedAmount(totalTaxAmount));
                            globalLevelJsobj.remove("gstamount");
                            globalLevelJsobj.put("gstamount", "" + authHandler.formattedCommaSeparatedAmount(totalTaxAmount, companyId));
                        }
                        globalLevelJsobj.put("subtotal", authHandler.formattedCommaSeparatedAmount(total, companyId));
                        globalLevelJsobj.put("currency", sr.getCurrency().getCurrencyCode());
                        globalLevelJsobj.put("totalamount", authHandler.formattedCommaSeparatedAmount((total + totalTaxAmount), companyId));
                        globalLevelJsobj.put("title", "Goods Return - Credit Note #");
                        globalLevelJsobj.put("imagetype", imageType);
                        globalLevelJsobj.put("format", "pdf");      //SalesReturnMap.put("format", "pdf");
                        
                        //Cheque & Cash Details for Sales Return only
                        if(moduleid==Constants.Acc_Sales_Return_ModuleId){
                            globalLevelJsobj.put("chqno", "");
                            globalLevelJsobj.put("chqdate", "");
                            globalLevelJsobj.put("chqamount", authHandler.formattedCommaSeparatedAmount((0), companyId));
                            globalLevelJsobj.put("chqdueamount", authHandler.formattedCommaSeparatedAmount((0), companyId));
                            
                            globalLevelJsobj.put("cashamount", authHandler.formattedCommaSeparatedAmount((total + totalTaxAmount), companyId));
                            globalLevelJsobj.put("receivedamount", authHandler.formattedCommaSeparatedAmount((total + totalTaxAmount), companyId));
                            globalLevelJsobj.put("cashdueamount", authHandler.formattedCommaSeparatedAmount((0), companyId));
                        }
                        JSONObjectData.put("mainreportdata", globalLevelJsobj);
                        JSONObjectData.put("templateflag", templateflag);
                        JSONObjectData.put("moduleid", moduleid);
//                        try {
//                            String fileName = "SR_CN" + entryno + "_v1." + imageType;
//                            imageFilePath = StorageHandler.GetDocStorePath() + "VIP" + File.separator + fileName;
//                            JSONObjectData.put("imagefilepath", imageFilePath);
//                        } catch (Exception e) {
//                            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
//                        }
                    } catch (ServiceException ex) {
                        Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (!StringUtil.isNullOrEmpty(billid)) {
                        break;
                    }
                }
            }
        } catch (Exception e) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
        }
        return JSONObjectData;
    }
    
    //Sales Invoice Mobile PDF
    public JSONObject exportCreditSales(JSONObject paramJobj) throws ServiceException, SessionExpiredException {    //ERP-30209 : Credit sales (Sales Invoice)
        JSONObject JSONObjectData = new JSONObject();
        String billid = "", CNNumber = "", companyId = "", imageFilePath = "", imageType = "";
        try {
            String recordIDs = (paramJobj.has("recordids") && paramJobj.getString("recordids") != null) ? paramJobj.getString("recordids") : "";
            int templateflag = (paramJobj.has("templateflag") && !StringUtil.isNullOrEmpty(paramJobj.getString("templateflag"))) ? Integer.parseInt(paramJobj.getString("templateflag")) : 0;
            int moduleid = (paramJobj.has("moduleid") && paramJobj.get("moduleid") != null) ? paramJobj.getInt("moduleid") : 0; 
            String currencyid = (paramJobj.has(Constants.globalCurrencyKey) && paramJobj.get(Constants.globalCurrencyKey) != null) ? paramJobj.getString(Constants.globalCurrencyKey) : ""; 
            String recArray[] = recordIDs.split(",");
            imageType = (paramJobj.has("imagetype") && paramJobj.get("imagetype") != null) ? paramJobj.getString("imagetype") : "png";    
            if (recArray.length != 0) {
                try {
                    companyId = (paramJobj.has(Constants.companyKey) && paramJobj.get(Constants.companyKey) != null) ? paramJobj.getString(Constants.companyKey) : "";
                    KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyId);
                    //ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (String s : recArray) {
                    billid = s;     //"402880f15992523f0159928817270001";

                    if (StringUtil.isNullOrEmpty(billid)) {
                        billid = paramJobj.getString("bills") != null ? paramJobj.getString("bills") : "";
                    }
                    JSONObject globalLevelJsobj = new JSONObject();  //Map<String, Object> SalesReturnMap = new HashMap<String, Object>();

                    //DateFormat df = (paramJobj.has(Constants.userdateformat) && paramJobj.get(Constants.userdateformat) != null) ? (DateFormat) paramJobj.get(Constants.userdateformat) : authHandler.getDateOnlyFormat();
                    String format = (paramJobj.has("userdateform") && paramJobj.get("userdateform") != null) ? paramJobj.getString("userdateform") : "yyyy-MM-dd";
                    DateFormat df = new SimpleDateFormat(format);
                    try {
                        KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyId);
                        CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
                        Company company = (Company) cmpresult.getEntityList().get(0);
                        String posno = "";
                        Date date = null;   //Transaction date
                        String entryno = "";    //Transaction No.    
                        String salesperson = "";
                        String coregno = "197602340C", gstregno = "M2-00025439-2";
                        //Customer Details
                        String customerName = "";
                        String custaccountcode = "";
                        String billaddress = "";
                        String shipaddress = "";
                        String custphone = "";

                        Invoice inv = null;
                        inv = (Invoice) kwlCommonTablesDAOObj.getClassObject(Invoice.class.getName(), billid);
                        boolean isGSTIncluded = inv.isGstIncluded();
                        entryno = inv.getInvoiceNumber();
//                        date = inv.getJournalEntry().getEntryDate();
                        date = inv.getCreationDate();
                        currencyid = (inv.getCurrency() == null) ? currencyid : inv.getCurrency().getCurrencyID();
                        
                        billaddress = inv.getBillingShippingAddresses()!=null?inv.getBillingShippingAddresses().getBillingAddress() : "";
                        shipaddress = inv.getBillingShippingAddresses()!=null?inv.getBillingShippingAddresses().getShippingAddress() : "";                        
                        custphone = inv.getBillingShippingAddresses()!=null?inv.getBillingShippingAddresses().getBillingPhone() : "";
                        
                        customerName = inv.getCustomer().getName() != null ? inv.getCustomer().getName() : "";
                        custaccountcode = inv.getCustomer().getAcccode() != null ? inv.getCustomer().getAcccode() : "";
                        
                        
                        //Company Details
                        globalLevelJsobj.put("COMPANY_NAME", company.getCompanyName() != null ? company.getCompanyName() : "");     //SalesReturnMap.put("COMPANY_NAME", company.getCompanyName() != null ? company.getCompanyName() : "");
                        globalLevelJsobj.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyId, accountingHandlerDAOobj));  //SalesReturnMap.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyId, accountingHandlerDAOobj));

                        //Company Registration Details
                        String comregnumber = "";
                        if (!StringUtil.isNullOrEmpty(companyAccountPreferences.getCompanyUEN())) {
                            comregnumber = "CO Reg.No.:" + companyAccountPreferences.getCompanyUEN();
                        }
                        if (!StringUtil.isNullOrEmpty(companyAccountPreferences.getGstNumber())) {
                            if (comregnumber != "") {
                                comregnumber = comregnumber + "/";
                            }
                            comregnumber = comregnumber + "GST No.:" + companyAccountPreferences.getGstNumber();
                        }
                        globalLevelJsobj.put("coregno", comregnumber);  //SalesReturnMap.put("coregno", comregnumber);

                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyId);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("customerid", inv.getCustomer().getID());
                        
                        if(StringUtil.isNullOrEmpty(custphone)){
                            CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                            custphone = (customerAddressDetails == null) ? (StringUtil.isNullOrEmpty(inv.getCustomer().getContactNumber()) ? "" : inv.getCustomer().getContactNumber()) : (StringUtil.isNullOrEmpty(customerAddressDetails.getPhone()) ? "" : customerAddressDetails.getPhone());
                        }                        
                        if(StringUtil.isNullOrEmpty(billaddress)){
                            billaddress = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        }
                        if(StringUtil.isNullOrEmpty(shipaddress)){
                            addressParams.put("isBillingAddress", false);
                            shipaddress = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        }
                        
                        //Customer  Details
                        globalLevelJsobj.put("custaccountcode", custaccountcode);
                        globalLevelJsobj.put("customerName", customerName);
                        globalLevelJsobj.put("billaddress", billaddress);
                        globalLevelJsobj.put("shipaddress", shipaddress);
                        globalLevelJsobj.put("custphone", custphone);

                        globalLevelJsobj.put("posno", posno);
                        globalLevelJsobj.put("linknumber", inv.getPoRefNumber()!=null?inv.getPoRefNumber():"");
                        globalLevelJsobj.put("entryno", entryno);
                        globalLevelJsobj.put("salesperson", inv.getMasterSalesPerson() == null ? "" : inv.getMasterSalesPerson().getValue());
                        globalLevelJsobj.put("date", df.format(date));
                        
                        //Company Contact Details
                        String contactdetails = "";
                        if (!StringUtil.isNullOrEmpty(company.getPhoneNumber())) {
                            contactdetails = "Tel.:" + company.getPhoneNumber();
                        }
                        if (!StringUtil.isNullOrEmpty(company.getEmailID())) {
                            if (contactdetails != "") {
                                contactdetails = contactdetails + "  ";
                            }
                            contactdetails = contactdetails + "Email:" + company.getEmailID();
                        }
                        globalLevelJsobj.put("contactdetails", contactdetails);
                        
                        //Row level Data
                        HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                        KwlReturnObject idresult = null;
                        Iterator itr = null;
                        filter_names.add("invoice.ID");
                        filter_params.add(inv.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
                        itr = idresult.getEntityList().iterator();
                        double total = 0, subtotal = 0;
                        double rowtaxamount = 0;
                        double totalTaxAmount = 0;
                        int i = 0;
                        //Map<String, Object> rows = new HashMap<String, Object>();
                        JSONArray linelevelJsarr = new JSONArray();
                        JSONObject linelevelJsobj = null;
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        requestParams.put(Constants.companyKey, companyId);
                        requestParams.put(Constants.globalCurrencyKey, currencyid);
                        requestParams.put(Constants.df, df);
                        while (itr.hasNext()) {
                            linelevelJsobj = new JSONObject();
                            i++;
                            String prodId = "";
                            String prodName = "";
                            String prodDesc = "";
                            double Uprice = 0;
                            double amount = 0;
                            double quantity = 0;
                            double rate = 0;
                            String Uom = "";
                            String discountType = "Percentage";
                            String discountpercent = "";
                            double discountamt = 0;
                            Discount discount = null;
                            double amountafterdiscount = 0;

                            InvoiceDetail row = (InvoiceDetail) itr.next();
                            prodId = row.getInventory().getProduct().getID();
                            prodName = row.getInventory().getProduct().getName();
                            prodDesc = !StringUtil.isNullOrEmpty(row.getDescription()) ? row.getDescription(): row.getInventory().getProduct().getDescription();
                            quantity = row.getInventory().getQuantity();
                            discount = row.getDiscount();
                            Uom = row.getInventory().getUom()==null?row.getInventory().getProduct().getUnitOfMeasure()==null?"":row.getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA():row.getInventory().getUom().getNameEmptyforNA();
                            //rowtaxcode = row.getTax() != null ? row.getTax().getTaxCode() : "";
                            if(isGSTIncluded){
                                Uprice = row.getRateincludegst();
                            } else {
                                Uprice = row.getRate();
                            }                            
                            amount = Uprice * quantity;
                            double discountVal = 0.0;
                            amountafterdiscount = amount;
                            if (discount != null) {
                                if (discount.isInPercent()) {
                                    discountpercent = authHandler.formattedAmount(discount.getDiscount(), companyId)+"%";
                                    discountamt = amount * (discount.getDiscount()/100);//Percentage Value
                                    discountType = "Percentage";
                                } else {
                                    discountamt = row.getDiscount().getDiscountValue();//Flat
                                    discountType = "Flat";
                                }                                
//                                amountafterdiscount -= discountamt;
                                discountVal = discountamt;
                            }
                            double rowTaxPercent = 0;
                            double rowTaxAmount = 0;
                            boolean isRowTaxApplicable = false;
                            String rowTaxName = "";
                            if (row != null && row.getTax() != null) {
                                double amountAfterDiscount = amount - discountVal;
                                requestParams.put("transactiondate", date);
                                requestParams.put("taxid", row.getTax().getID());
                                KwlReturnObject result = accTaxObj.getTax(requestParams);
                                List taxList = result.getEntityList();
                                Object[] taxObj = (Object[]) taxList.get(0);
                                rowTaxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
                                if (taxObj[1] != null) {
                                    isRowTaxApplicable = true;
                                }
                                rowTaxName = row.getTax().getName();
                                if(isGSTIncluded){
                                    rowTaxAmount = row.getRowTaxAmount() + row.getRowTermTaxAmount();
                                } else{
                                    if (row.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                                        if (isRowTaxApplicable) {
                                            rowTaxAmount = row.getRowTaxAmount() + row.getRowTermTaxAmount();
                                        }
                                    } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                                        rowTaxAmount = amountAfterDiscount * rowTaxPercent / 100;
                                    }
                                }
                            }
                            totalTaxAmount += rowTaxAmount;
                            if(isGSTIncluded){
                                subtotal += (amount - discountVal);
                            } else {
                                subtotal += ((amount - discountVal) + rowTaxAmount);
                            }
                            double prodamt = 0;
                            if(!isGSTIncluded){
                                prodamt = amount + rowTaxAmount;
                            } else {
                                prodamt = amount;
                            }
                            
                            //if (templateflag == Constants.GohYeowSeng_templateflag) {
                            linelevelJsobj.put("sNo", (i + ""));
                            linelevelJsobj.put("productDescription", prodDesc);
                            linelevelJsobj.put("qty", authHandler.formattedQuantity(quantity, companyId));
                            linelevelJsobj.put("uPrice", authHandler.formattedAmount(Uprice, companyId));
                            linelevelJsobj.put("productAmount", authHandler.formattedAmount(prodamt, companyId));
                            linelevelJsobj.put("dicounttype", discountType);
                            linelevelJsobj.put("uom", Uom);
                            linelevelJsobj.put("discountpercent", discountpercent); //Discount Percentage
                            linelevelJsobj.put("discountamount", ("(" + authHandler.formattedAmount(discountVal, companyId) + ")"));
                            linelevelJsarr.put(linelevelJsobj);       

                        }
                        JSONObjectData.put("SubReportList", linelevelJsarr);
//                        globalLevelJsobj.put("datePojo", inv.getJournalEntry().getEntryDate());
                        globalLevelJsobj.put("datePojo", inv.getCreationDate());
                           
                        globalLevelJsobj.put("gsttaxpercent", "");      //SalesReturnMap.put("gsttaxpercent", "" + "");
                        globalLevelJsobj.put("gstamount", "");     //SalesReturnMap.put("gstamount", "" + "");
                        boolean isGlobalTax = false;
                        double globalTax = 0;
                        if (totalTaxAmount == 0 && inv.getTax() != null) {
                            double taxPercent = 0;
//                            KwlReturnObject taxresult = accTaxObj.getTaxPercent(companyId, inv.getJournalEntry().getEntryDate(), inv.getTax().getID());
                            KwlReturnObject taxresult = accTaxObj.getTaxPercent(companyId, inv.getCreationDate(), inv.getTax().getID());
                            taxPercent = (Double) taxresult.getEntityList().get(0);
                            totalTaxAmount = (taxPercent == 0 ? 0 : authHandler.round((subtotal * taxPercent / 100), companyId));
                            globalLevelJsobj.remove("gsttaxpercent");
                            globalLevelJsobj.put("gsttaxpercent", "" + authHandler.formattedCommaSeparatedAmount(taxPercent, companyId) + "%");
                            globalLevelJsobj.remove("gstamount");
                            globalLevelJsobj.put("gstamount", "" + authHandler.formattedCommaSeparatedAmount(totalTaxAmount, companyId));
                            isGlobalTax = true;
                            globalTax = totalTaxAmount;
                            //total = subtotal + totalTaxAmount;
                        }
                        if(isGSTIncluded){
                            total = subtotal;
                        } else if(isGlobalTax){
                            total = subtotal + totalTaxAmount;
                        } else {
                            total = subtotal;
                        }
                        
                        globalLevelJsobj.put("subtotal", authHandler.formattedCommaSeparatedAmount(subtotal, companyId));
                        globalLevelJsobj.put("currency", inv.getCurrency().getCurrencyCode());
                        globalLevelJsobj.put("totalamount", authHandler.formattedCommaSeparatedAmount((total), companyId));
                        globalLevelJsobj.put("title", "Credit Sales");
                        globalLevelJsobj.put("imagetype", imageType);
                        globalLevelJsobj.put("format", "pdf");      //SalesReturnMap.put("format", "pdf");                        
                         
                        //Cheque Details for ERP-30206
                        if (inv.isCashtransaction()) {
                            globalLevelJsobj.put("title", "Cash Sales");
                            PayDetail payDetail = inv.getPayDetail();
                            if (payDetail != null) {  //for older cash record payment detail will be null   
                                PaymentMethod paymentMethod = inv.getPayDetail().getPaymentMethod();
                                if (paymentMethod.getDetailType() == PaymentMethod.TYPE_BANK) {
                                    Cheque cheque = payDetail.getCheque();
                                    String chequeno = cheque != null ? cheque.getChequeNo() : "";
                                    String chequeDate = cheque != null ? df.format(cheque.getDueDate()) : "";
                                    globalLevelJsobj.put("chqno", chequeno);
                                    globalLevelJsobj.put("chqdate", chequeDate);
                                    globalLevelJsobj.put("chqamount", authHandler.formattedCommaSeparatedAmount((total), companyId));
                                    globalLevelJsobj.put("chqdueamount", authHandler.formattedCommaSeparatedAmount((0), companyId));
                                } else {
                                    globalLevelJsobj.put("cashamount", authHandler.formattedCommaSeparatedAmount((total), companyId));
                                    globalLevelJsobj.put("receivedamount", authHandler.formattedCommaSeparatedAmount((total), companyId));
                                    globalLevelJsobj.put("cashdueamount", authHandler.formattedCommaSeparatedAmount((0), companyId));
                                }
                            }
                        }
                        
                        JSONObjectData.put("mainreportdata", globalLevelJsobj);
                        JSONObjectData.put("templateflag", templateflag);
                        JSONObjectData.put("moduleid", moduleid);
//                        try {
//                            String fileName = "CreditSales" + entryno + "_v1." + imageType;
//                            imageFilePath = StorageHandler.GetDocStorePath() + "VIP" + File.separator + fileName;
//                            JSONObjectData.put("imagefilepath", imageFilePath);
//                        } catch (Exception e) {
//                            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
//                        }
                    } catch (ServiceException ex) {
                        Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (!StringUtil.isNullOrEmpty(billid)) {
                        break;
                    }
                }
            }
        } catch (Exception e) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
        }
        return JSONObjectData;
    }
    
    public JSONObject exportCashSales(JSONObject paramJobj) throws ServiceException, SessionExpiredException {      //ERP-30206 : Cash Sales
        JSONObject JSONObjectData = new JSONObject();
        try{
            JSONObjectData = exportCreditSales(paramJobj);
        }catch (Exception e) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
        }
        return JSONObjectData;
    }
    
    public JSONObject exportSalesOrder(JSONObject paramJobj) throws ServiceException, SessionExpiredException {      //ERP-30206 : Cash Sales
        JSONObject JSONObjectData = new JSONObject();
        String billid = "", CNNumber = "", companyId = "", imageFilePath = "", imageType = "";
        try {
            String recordIDs = (paramJobj.has("recordids") && paramJobj.getString("recordids") != null) ? paramJobj.getString("recordids") : "";
            int templateflag = (paramJobj.has("templateflag") && !StringUtil.isNullOrEmpty(paramJobj.getString("templateflag"))) ? Integer.parseInt(paramJobj.getString("templateflag")) : 0;
            int moduleid = (paramJobj.has("moduleid") && paramJobj.get("moduleid") != null) ? paramJobj.getInt("moduleid") : 0; 
            String currencyid = (paramJobj.has(Constants.globalCurrencyKey) && paramJobj.get(Constants.globalCurrencyKey) != null) ? paramJobj.getString(Constants.globalCurrencyKey) : ""; 
            String recArray[] = recordIDs.split(",");
            imageType = (paramJobj.has("imagetype") && paramJobj.get("imagetype") != null) ? paramJobj.getString("imagetype") : "png";    
            if (recArray.length != 0) {
                try {
                    companyId = (paramJobj.has(Constants.companyKey) && paramJobj.get(Constants.companyKey) != null) ? paramJobj.getString(Constants.companyKey) : "";
                    KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyId);
                    //ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (String s : recArray) {
                    billid = s;     //"402880f15992523f0159928817270001";

                    JSONObject globalLevelJsobj = new JSONObject();  //Map<String, Object> SalesReturnMap = new HashMap<String, Object>();

                    //DateFormat df = (paramJobj.has(Constants.userdateformat) && paramJobj.get(Constants.userdateformat) != null) ? (DateFormat) paramJobj.get(Constants.userdateformat) : authHandler.getDateOnlyFormat();
                    String format = (paramJobj.has("userdateform") && paramJobj.get("userdateform") != null) ? paramJobj.getString("userdateform") : "yyyy-MM-dd";
                    DateFormat df = new SimpleDateFormat(format);
                    try {
                        KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyId);
                        CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result1.getEntityList().get(0);

                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
                        Company company = (Company) cmpresult.getEntityList().get(0);
                        String posno = "";
                        Date date = null;   //Transaction date
                        String entryno = "";    //Transaction No.    
                        String coregno = "197602340C", gstregno = "M2-00025439-2";
                        //Customer Details
                        String customerName = "";
                        String custaccountcode = "";
                        String billaddress = "";
                        String shipaddress = "";
                        String custphone = "";

                        SalesOrder sorder = null;
                        sorder = (SalesOrder) kwlCommonTablesDAOObj.getClassObject(SalesOrder.class.getName(), billid);
                        
                        boolean isRateIncludeGST = sorder.isGstIncluded();
                        entryno = sorder.getSalesOrderNumber();
                        date = sorder.getOrderDate();
                        currencyid = (sorder.getCurrency() == null) ? currencyid : sorder.getCurrency().getCurrencyID();
                        
                        billaddress = sorder.getBillingShippingAddresses()!=null?sorder.getBillingShippingAddresses().getBillingAddress() : "";
                        shipaddress = sorder.getBillingShippingAddresses()!=null?sorder.getBillingShippingAddresses().getShippingAddress() : "";                        
                        custphone = sorder.getBillingShippingAddresses()!=null?sorder.getBillingShippingAddresses().getBillingPhone() : "";
                        
                        customerName = sorder.getCustomer().getName() != null ? sorder.getCustomer().getName() : "";
                        custaccountcode = sorder.getCustomer().getAcccode() != null ? sorder.getCustomer().getAcccode() : "";                        
                        
                        //Company Details
                        globalLevelJsobj.put("COMPANY_NAME", company.getCompanyName() != null ? company.getCompanyName() : "");     
                        globalLevelJsobj.put("COMPANY_ADDRESS", AccountingAddressManager.getCompanyDefaultBillingAddress(companyId, accountingHandlerDAOobj));  

                        //Company Registration Details
                        String comregnumber = "";
                        if (!StringUtil.isNullOrEmpty(companyAccountPreferences.getCompanyUEN())) {
                            comregnumber = "CO Reg.No.:" + companyAccountPreferences.getCompanyUEN();
                        }
                        if (!StringUtil.isNullOrEmpty(companyAccountPreferences.getGstNumber())) {
                            if (comregnumber != "") {
                                comregnumber = comregnumber + "/";
                            }
                            comregnumber = comregnumber + "GST No.:" + companyAccountPreferences.getGstNumber();
                        }
                        globalLevelJsobj.put("coregno", comregnumber);  //SalesReturnMap.put("coregno", comregnumber);

                        //params to send to get billing address
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put("companyid", companyId);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put("customerid", sorder.getCustomer().getID());
                        if(!StringUtil.isNullOrEmpty(custphone)){
                            CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                            custphone = (customerAddressDetails == null) ? (StringUtil.isNullOrEmpty(sorder.getCustomer().getContactNumber()) ? "" : sorder.getCustomer().getContactNumber()) : (StringUtil.isNullOrEmpty(customerAddressDetails.getPhone()) ? "" : customerAddressDetails.getPhone());
                        }                        
                        if(!StringUtil.isNullOrEmpty(billaddress)){
                            billaddress = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        }
                        if(!StringUtil.isNullOrEmpty(shipaddress)){
                            addressParams.put("isBillingAddress", false);
                            shipaddress = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                        }                      
                        
                        //Customer  Details
                        globalLevelJsobj.put("custaccountcode", custaccountcode);
                        globalLevelJsobj.put("customerName", customerName);
                        globalLevelJsobj.put("billaddress", billaddress);
                        globalLevelJsobj.put("shipaddress", shipaddress);
                        globalLevelJsobj.put("custphone", custphone);

                        globalLevelJsobj.put("posno", posno);
                        globalLevelJsobj.put("linknumber", sorder.getCustomerPORefNo()!=null?sorder.getCustomerPORefNo():"");
                        globalLevelJsobj.put("entryno", entryno);
                        globalLevelJsobj.put("salesperson", sorder.getSalesperson() == null ? "" : sorder.getSalesperson().getValue());
                        globalLevelJsobj.put("date", df.format(date));
                        
                        //Company Contact Details
                        String contactdetails = "";
                        if (!StringUtil.isNullOrEmpty(company.getPhoneNumber())) {
                            contactdetails = "Tel.:" + company.getPhoneNumber();
                        }
                        if (!StringUtil.isNullOrEmpty(company.getEmailID())) {
                            if (contactdetails != "") {
                                contactdetails = contactdetails + "  ";
                            }
                            contactdetails = contactdetails + "Email:" + company.getEmailID();
                        }
                        globalLevelJsobj.put("contactdetails", contactdetails);
                        
                        //Row level Data
                        HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                        KwlReturnObject idresult = null;
                        Iterator itr = null;
                        filter_names.add("salesOrder.ID");
                        filter_params.add(sorder.getID());
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        idresult = accSalesOrderDAOobj.getSalesOrderDetails(invRequestParams);
                        itr = idresult.getEntityList().iterator();
                        double total = 0, subtotal = 0;
                        double totalTaxAmount = 0;
                        int i = 0;
                        JSONArray linelevelJsarr = new JSONArray();
                        JSONObject linelevelJsobj = null;
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        requestParams.put(Constants.companyKey, companyId);
                        requestParams.put(Constants.globalCurrencyKey, currencyid);
                        requestParams.put(Constants.df, df);
                        while (itr.hasNext()) {
                            linelevelJsobj = new JSONObject();
                            i++;
                            String prodDesc = "";
                            double Uprice = 0;
                            double amount = 0;
                            double quantity = 0;
                            double rate = 0;
                            String Uom = "";
                            String discountType = "Percentage";
                            String discountpercent = "";
                            double discountamt = 0;
                            //double discount = 0;
                            double amountafterdiscount = 0;

                            SalesOrderDetail sodetails = (SalesOrderDetail) itr.next();
                            prodDesc = !StringUtil.isNullOrEmpty(sodetails.getDescription()) ? sodetails.getDescription() : sodetails.getProduct().getDescription();
                            quantity = sodetails.getQuantity();
                            Uom = sodetails.getUom()!=null?sodetails.getUom().getNameEmptyforNA() : (sodetails.getProduct().getUnitOfMeasure()!=null ? sodetails.getProduct().getUnitOfMeasure().getNameEmptyforNA(): "");
                            //rowtaxcode = row.getTax() != null ? row.getTax().getTaxCode() : "";

                            Uprice = isRateIncludeGST ? sodetails.getRateincludegst() : sodetails.getRate();
                            amount = Uprice * quantity;
                            amountafterdiscount = amount;
                                if (sodetails.getDiscountispercent()==1) {
                                    discountpercent = authHandler.formattedAmount(sodetails.getDiscount(), companyId)+"%";
                                    discountamt = amount * (sodetails.getDiscount()/100);//Percentage Value
                                    discountType = "Percentage";
                                } else {
                                    discountamt = sodetails.getDiscount();//Flat
                                    discountType = "Flat";
                                }                                
//                                amountafterdiscount -= discountamt;
                                
                            double rowTaxPercent = 0;
                            double rowTaxAmount = 0;
                            boolean isRowTaxApplicable = false;
                            String rowTaxName = "";
                            if (sodetails != null && sodetails.getTax() != null) {
                                double amountAfterDiscount = amount - discountamt;
                                requestParams.put("transactiondate", date);
                                requestParams.put("taxid", sodetails.getTax().getID());
                                KwlReturnObject result = accTaxObj.getTax(requestParams);
                                List taxList = result.getEntityList();
                                Object[] taxObj = (Object[]) taxList.get(0);
                                rowTaxPercent = taxObj[1] == null ? 0 : (Double) taxObj[1];
//                                if (taxObj[1] != null) {
//                                    isRowTaxApplicable = true;
//                                }
//                                rowTaxName = sodetails.getTax().getName();
//                                if (isRowTaxApplicable) {
//                                    rowTaxAmount = sodetails.getRowTaxAmount();
//                                }
                                if(isRateIncludeGST){
                                    rowTaxAmount = sodetails.getRowTaxAmount();
                                } else{
                                    rowTaxAmount = amountAfterDiscount * rowTaxPercent / 100;
                                }
                            }
                            if(isRateIncludeGST){
                                subtotal += (amount - discountamt);
                            } else{
                                subtotal += ((amount - discountamt) + rowTaxAmount);
                            }
                            totalTaxAmount += rowTaxAmount;
//                            total += amountafterdiscount;
                            //if (templateflag == Constants.GohYeowSeng_templateflag) {
                            double prodamt = 0;
                            if(!isRateIncludeGST){
                                prodamt = amount + rowTaxAmount;
                            } else {
                                prodamt = amount;
                            }
                            linelevelJsobj.put("sNo", (i + ""));
                            linelevelJsobj.put("productDescription", prodDesc);
                            linelevelJsobj.put("qty", authHandler.formattedQuantity(quantity, companyId));
                            linelevelJsobj.put("uPrice", authHandler.formattedAmount(Uprice, companyId));
                            linelevelJsobj.put("productAmount", authHandler.formattedAmount(prodamt, companyId));
                            linelevelJsobj.put("dicounttype", discountType);
                            linelevelJsobj.put("uom", Uom);
                            linelevelJsobj.put("discountpercent", discountpercent); //Discount Percentage
                            linelevelJsobj.put("discountamount", ("(" + authHandler.formattedAmount(discountamt, companyId) + ")"));
                            linelevelJsarr.put(linelevelJsobj);       

                        }//Row Level Data
                        JSONObjectData.put("SubReportList", linelevelJsarr);
                        globalLevelJsobj.put("datePojo", sorder.getOrderDate());
                           
                        globalLevelJsobj.put("gsttaxpercent", "");      //SalesReturnMap.put("gsttaxpercent", "" + "");
                        globalLevelJsobj.put("gstamount", "");     //SalesReturnMap.put("gstamount", "" + "");
                        boolean isGlobalTax = false;
                        double globalTax = 0;
                        if (totalTaxAmount == 0 && sorder.getTax() != null) {
                            double taxPercent = 0;
                            KwlReturnObject taxresult = accTaxObj.getTaxPercent(companyId, sorder.getOrderDate(), sorder.getTax().getID());
                            taxPercent = (Double) taxresult.getEntityList().get(0);
                            totalTaxAmount = (taxPercent == 0 ? 0 : authHandler.round((subtotal * taxPercent / 100), companyId));
                            globalLevelJsobj.remove("gsttaxpercent");
                            globalLevelJsobj.put("gsttaxpercent", "" + authHandler.formattedCommaSeparatedAmount(taxPercent, companyId) + "%");
                            globalLevelJsobj.remove("gstamount");
                            globalLevelJsobj.put("gstamount", "" + authHandler.formattedCommaSeparatedAmount(totalTaxAmount, companyId));
                            isGlobalTax = true;
                            globalTax = totalTaxAmount;
                            //total = subtotal + totalTaxAmount;
                        }
                        if(isRateIncludeGST){
                            total = subtotal;
                        } else if(isGlobalTax){
                            total = subtotal + totalTaxAmount;
                        } else {
                            total = subtotal;
                        }
                        globalLevelJsobj.put("subtotal", authHandler.formattedCommaSeparatedAmount(subtotal, companyId));
                        globalLevelJsobj.put("currency", sorder.getCurrency().getCurrencyCode());
                        globalLevelJsobj.put("totalamount", authHandler.formattedCommaSeparatedAmount((total), companyId));
                        globalLevelJsobj.put("title", "Credit Sales");
                        globalLevelJsobj.put("imagetype", imageType);
                        globalLevelJsobj.put("format", "pdf");      //SalesReturnMap.put("format", "pdf");     
                        
                        JSONObjectData.put("mainreportdata", globalLevelJsobj);
                        JSONObjectData.put("templateflag", templateflag);
                        JSONObjectData.put("moduleid", moduleid);
                        try {
                            //String fileName = "Sales_Order" + entryno + "_v1." + imageType;
                            //imageFilePath = StorageHandler.GetDocStorePath() + "VIP" + File.separator + fileName;
                            //JSONObjectData.put("imagefilepath", imageFilePath);
                        } catch (Exception e) {
                            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
                        }
                    } catch (ServiceException ex) {
                        Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (!StringUtil.isNullOrEmpty(billid)) {
                        break;
                    }
                }
            }
        } catch (Exception e) {
            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
        }
        return JSONObjectData;
    }
    
    
    //    Below Function based on updated API of JasperReport-6.3.1. 
//    private void convertPDFToImage(String outputFilePath, JasperPrint print, String imageType) {
//        File file = null; 
//        OutputStream ouputStream = null;
//        try {
//            file = new File(outputFilePath);
//            file.getParentFile().mkdirs();
//            if(file.exists()){  //Remove old file with same name
//                file.delete();
//            }
//            file.createNewFile();
//            ouputStream = new FileOutputStream(file);
//            JasperPrintManager printManager = JasperPrintManager.getInstance(DefaultJasperReportsContext.getInstance());
//            BufferedImage rendered_image = null;
//            rendered_image = (BufferedImage) printManager.printPageToImage(print, 0, 3.7f); //JasperPrint obj, Page Index, Zoom Quality
//            javax.imageio.ImageIO.write(rendered_image, imageType, ouputStream);
//        } catch (Exception e) {
//            Logger.getLogger(AccExportReportsServiceImpl.class.getName()).log(Level.SEVERE, null, e);
//        }
//    }
    
    @Override
    public List<Object> exportHinsitsuCustomerQoutationJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
